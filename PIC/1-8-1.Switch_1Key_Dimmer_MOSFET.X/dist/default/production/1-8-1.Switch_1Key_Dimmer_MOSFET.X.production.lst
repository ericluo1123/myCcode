

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Jan 19 17:22:33 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	intentry,global,class=CODE,delta=2
   157                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,delta=2
   162                           	dabs	1,0x7E,2
   163  0000                     	;# 
   164  0001                     	;# 
   165  0002                     	;# 
   166  0003                     	;# 
   167  0004                     	;# 
   168  0005                     	;# 
   169  0006                     	;# 
   170  0007                     	;# 
   171  0008                     	;# 
   172  0009                     	;# 
   173  000A                     	;# 
   174  000B                     	;# 
   175  000C                     	;# 
   176  000D                     	;# 
   177  000E                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  0116                     	;# 
   210  0117                     	;# 
   211  011D                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  018E                     	;# 
   215  0191                     	;# 
   216  0191                     	;# 
   217  0192                     	;# 
   218  0193                     	;# 
   219  0193                     	;# 
   220  0194                     	;# 
   221  0195                     	;# 
   222  0196                     	;# 
   223  0197                     	;# 
   224  0199                     	;# 
   225  019A                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019C                     	;# 
   231  019C                     	;# 
   232  019D                     	;# 
   233  019E                     	;# 
   234  019F                     	;# 
   235  020D                     	;# 
   236  0210                     	;# 
   237  0211                     	;# 
   238  0211                     	;# 
   239  0212                     	;# 
   240  0212                     	;# 
   241  0213                     	;# 
   242  0213                     	;# 
   243  0214                     	;# 
   244  0214                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  0291                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0298                     	;# 
   257  0298                     	;# 
   258  0299                     	;# 
   259  029A                     	;# 
   260  0394                     	;# 
   261  0395                     	;# 
   262  0396                     	;# 
   263  0FE4                     	;# 
   264  0FE5                     	;# 
   265  0FE6                     	;# 
   266  0FE7                     	;# 
   267  0FE8                     	;# 
   268  0FE9                     	;# 
   269  0FEA                     	;# 
   270  0FEB                     	;# 
   271  0FED                     	;# 
   272  0FEE                     	;# 
   273  0FEF                     	;# 
   274  0000                     	;# 
   275  0001                     	;# 
   276  0002                     	;# 
   277  0003                     	;# 
   278  0004                     	;# 
   279  0005                     	;# 
   280  0006                     	;# 
   281  0007                     	;# 
   282  0008                     	;# 
   283  0009                     	;# 
   284  000A                     	;# 
   285  000B                     	;# 
   286  000C                     	;# 
   287  000D                     	;# 
   288  000E                     	;# 
   289  0010                     	;# 
   290  0011                     	;# 
   291  0012                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  008C                     	;# 
   302  008D                     	;# 
   303  008E                     	;# 
   304  0090                     	;# 
   305  0091                     	;# 
   306  0092                     	;# 
   307  0095                     	;# 
   308  0096                     	;# 
   309  0097                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  010C                     	;# 
   318  010D                     	;# 
   319  010E                     	;# 
   320  0116                     	;# 
   321  0117                     	;# 
   322  011D                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  018E                     	;# 
   326  0191                     	;# 
   327  0191                     	;# 
   328  0192                     	;# 
   329  0193                     	;# 
   330  0193                     	;# 
   331  0194                     	;# 
   332  0195                     	;# 
   333  0196                     	;# 
   334  0197                     	;# 
   335  0199                     	;# 
   336  019A                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019C                     	;# 
   342  019C                     	;# 
   343  019D                     	;# 
   344  019E                     	;# 
   345  019F                     	;# 
   346  020D                     	;# 
   347  0210                     	;# 
   348  0211                     	;# 
   349  0211                     	;# 
   350  0212                     	;# 
   351  0212                     	;# 
   352  0213                     	;# 
   353  0213                     	;# 
   354  0214                     	;# 
   355  0214                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0216                     	;# 
   360  0216                     	;# 
   361  0217                     	;# 
   362  0217                     	;# 
   363  0291                     	;# 
   364  0291                     	;# 
   365  0292                     	;# 
   366  0293                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  0394                     	;# 
   372  0395                     	;# 
   373  0396                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0010                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0090                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  0116                     	;# 
   432  0117                     	;# 
   433  011D                     	;# 
   434  018C                     	;# 
   435  018D                     	;# 
   436  018E                     	;# 
   437  0191                     	;# 
   438  0191                     	;# 
   439  0192                     	;# 
   440  0193                     	;# 
   441  0193                     	;# 
   442  0194                     	;# 
   443  0195                     	;# 
   444  0196                     	;# 
   445  0197                     	;# 
   446  0199                     	;# 
   447  019A                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019C                     	;# 
   453  019C                     	;# 
   454  019D                     	;# 
   455  019E                     	;# 
   456  019F                     	;# 
   457  020D                     	;# 
   458  0210                     	;# 
   459  0211                     	;# 
   460  0211                     	;# 
   461  0212                     	;# 
   462  0212                     	;# 
   463  0213                     	;# 
   464  0213                     	;# 
   465  0214                     	;# 
   466  0214                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0216                     	;# 
   471  0216                     	;# 
   472  0217                     	;# 
   473  0217                     	;# 
   474  0291                     	;# 
   475  0291                     	;# 
   476  0292                     	;# 
   477  0293                     	;# 
   478  0298                     	;# 
   479  0298                     	;# 
   480  0299                     	;# 
   481  029A                     	;# 
   482  0394                     	;# 
   483  0395                     	;# 
   484  0396                     	;# 
   485  0FE4                     	;# 
   486  0FE5                     	;# 
   487  0FE6                     	;# 
   488  0FE7                     	;# 
   489  0FE8                     	;# 
   490  0FE9                     	;# 
   491  0FEA                     	;# 
   492  0FEB                     	;# 
   493  0FED                     	;# 
   494  0FEE                     	;# 
   495  0FEF                     	;# 
   496  0000                     	;# 
   497  0001                     	;# 
   498  0002                     	;# 
   499  0003                     	;# 
   500  0004                     	;# 
   501  0005                     	;# 
   502  0006                     	;# 
   503  0007                     	;# 
   504  0008                     	;# 
   505  0009                     	;# 
   506  000A                     	;# 
   507  000B                     	;# 
   508  000C                     	;# 
   509  000D                     	;# 
   510  000E                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0015                     	;# 
   515  0016                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001C                     	;# 
   523  008C                     	;# 
   524  008D                     	;# 
   525  008E                     	;# 
   526  0090                     	;# 
   527  0091                     	;# 
   528  0092                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  010C                     	;# 
   540  010D                     	;# 
   541  010E                     	;# 
   542  0116                     	;# 
   543  0117                     	;# 
   544  011D                     	;# 
   545  018C                     	;# 
   546  018D                     	;# 
   547  018E                     	;# 
   548  0191                     	;# 
   549  0191                     	;# 
   550  0192                     	;# 
   551  0193                     	;# 
   552  0193                     	;# 
   553  0194                     	;# 
   554  0195                     	;# 
   555  0196                     	;# 
   556  0197                     	;# 
   557  0199                     	;# 
   558  019A                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019C                     	;# 
   564  019C                     	;# 
   565  019D                     	;# 
   566  019E                     	;# 
   567  019F                     	;# 
   568  020D                     	;# 
   569  0210                     	;# 
   570  0211                     	;# 
   571  0211                     	;# 
   572  0212                     	;# 
   573  0212                     	;# 
   574  0213                     	;# 
   575  0213                     	;# 
   576  0214                     	;# 
   577  0214                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0216                     	;# 
   582  0216                     	;# 
   583  0217                     	;# 
   584  0217                     	;# 
   585  0291                     	;# 
   586  0291                     	;# 
   587  0292                     	;# 
   588  0293                     	;# 
   589  0298                     	;# 
   590  0298                     	;# 
   591  0299                     	;# 
   592  029A                     	;# 
   593  0394                     	;# 
   594  0395                     	;# 
   595  0396                     	;# 
   596  0FE4                     	;# 
   597  0FE5                     	;# 
   598  0FE6                     	;# 
   599  0FE7                     	;# 
   600  0FE8                     	;# 
   601  0FE9                     	;# 
   602  0FEA                     	;# 
   603  0FEB                     	;# 
   604  0FED                     	;# 
   605  0FEE                     	;# 
   606  0FEF                     	;# 
   607  0000                     	;# 
   608  0001                     	;# 
   609  0002                     	;# 
   610  0003                     	;# 
   611  0004                     	;# 
   612  0005                     	;# 
   613  0006                     	;# 
   614  0007                     	;# 
   615  0008                     	;# 
   616  0009                     	;# 
   617  000A                     	;# 
   618  000B                     	;# 
   619  000C                     	;# 
   620  000D                     	;# 
   621  000E                     	;# 
   622  0010                     	;# 
   623  0011                     	;# 
   624  0012                     	;# 
   625  0015                     	;# 
   626  0016                     	;# 
   627  0016                     	;# 
   628  0017                     	;# 
   629  0018                     	;# 
   630  0019                     	;# 
   631  001A                     	;# 
   632  001B                     	;# 
   633  001C                     	;# 
   634  008C                     	;# 
   635  008D                     	;# 
   636  008E                     	;# 
   637  0090                     	;# 
   638  0091                     	;# 
   639  0092                     	;# 
   640  0095                     	;# 
   641  0096                     	;# 
   642  0097                     	;# 
   643  0099                     	;# 
   644  009A                     	;# 
   645  009B                     	;# 
   646  009B                     	;# 
   647  009C                     	;# 
   648  009D                     	;# 
   649  009E                     	;# 
   650  010C                     	;# 
   651  010D                     	;# 
   652  010E                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  011D                     	;# 
   656  018C                     	;# 
   657  018D                     	;# 
   658  018E                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0194                     	;# 
   665  0195                     	;# 
   666  0196                     	;# 
   667  0197                     	;# 
   668  0199                     	;# 
   669  019A                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019D                     	;# 
   677  019E                     	;# 
   678  019F                     	;# 
   679  020D                     	;# 
   680  0210                     	;# 
   681  0211                     	;# 
   682  0211                     	;# 
   683  0212                     	;# 
   684  0212                     	;# 
   685  0213                     	;# 
   686  0213                     	;# 
   687  0214                     	;# 
   688  0214                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0216                     	;# 
   693  0216                     	;# 
   694  0217                     	;# 
   695  0217                     	;# 
   696  0291                     	;# 
   697  0291                     	;# 
   698  0292                     	;# 
   699  0293                     	;# 
   700  0298                     	;# 
   701  0298                     	;# 
   702  0299                     	;# 
   703  029A                     	;# 
   704  0394                     	;# 
   705  0395                     	;# 
   706  0396                     	;# 
   707  0FE4                     	;# 
   708  0FE5                     	;# 
   709  0FE6                     	;# 
   710  0FE7                     	;# 
   711  0FE8                     	;# 
   712  0FE9                     	;# 
   713  0FEA                     	;# 
   714  0FEB                     	;# 
   715  0FED                     	;# 
   716  0FEE                     	;# 
   717  0FEF                     	;# 
   718  0000                     	;# 
   719  0001                     	;# 
   720  0002                     	;# 
   721  0003                     	;# 
   722  0004                     	;# 
   723  0005                     	;# 
   724  0006                     	;# 
   725  0007                     	;# 
   726  0008                     	;# 
   727  0009                     	;# 
   728  000A                     	;# 
   729  000B                     	;# 
   730  000C                     	;# 
   731  000D                     	;# 
   732  000E                     	;# 
   733  0010                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  008C                     	;# 
   746  008D                     	;# 
   747  008E                     	;# 
   748  0090                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0099                     	;# 
   755  009A                     	;# 
   756  009B                     	;# 
   757  009B                     	;# 
   758  009C                     	;# 
   759  009D                     	;# 
   760  009E                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  0116                     	;# 
   765  0117                     	;# 
   766  011D                     	;# 
   767  018C                     	;# 
   768  018D                     	;# 
   769  018E                     	;# 
   770  0191                     	;# 
   771  0191                     	;# 
   772  0192                     	;# 
   773  0193                     	;# 
   774  0193                     	;# 
   775  0194                     	;# 
   776  0195                     	;# 
   777  0196                     	;# 
   778  0197                     	;# 
   779  0199                     	;# 
   780  019A                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019C                     	;# 
   786  019C                     	;# 
   787  019D                     	;# 
   788  019E                     	;# 
   789  019F                     	;# 
   790  020D                     	;# 
   791  0210                     	;# 
   792  0211                     	;# 
   793  0211                     	;# 
   794  0212                     	;# 
   795  0212                     	;# 
   796  0213                     	;# 
   797  0213                     	;# 
   798  0214                     	;# 
   799  0214                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0216                     	;# 
   804  0216                     	;# 
   805  0217                     	;# 
   806  0217                     	;# 
   807  0291                     	;# 
   808  0291                     	;# 
   809  0292                     	;# 
   810  0293                     	;# 
   811  0298                     	;# 
   812  0298                     	;# 
   813  0299                     	;# 
   814  029A                     	;# 
   815  0394                     	;# 
   816  0395                     	;# 
   817  0396                     	;# 
   818  0FE4                     	;# 
   819  0FE5                     	;# 
   820  0FE6                     	;# 
   821  0FE7                     	;# 
   822  0FE8                     	;# 
   823  0FE9                     	;# 
   824  0FEA                     	;# 
   825  0FEB                     	;# 
   826  0FED                     	;# 
   827  0FEE                     	;# 
   828  0FEF                     	;# 
   829  0000                     	;# 
   830  0001                     	;# 
   831  0002                     	;# 
   832  0003                     	;# 
   833  0004                     	;# 
   834  0005                     	;# 
   835  0006                     	;# 
   836  0007                     	;# 
   837  0008                     	;# 
   838  0009                     	;# 
   839  000A                     	;# 
   840  000B                     	;# 
   841  000C                     	;# 
   842  000D                     	;# 
   843  000E                     	;# 
   844  0010                     	;# 
   845  0011                     	;# 
   846  0012                     	;# 
   847  0015                     	;# 
   848  0016                     	;# 
   849  0016                     	;# 
   850  0017                     	;# 
   851  0018                     	;# 
   852  0019                     	;# 
   853  001A                     	;# 
   854  001B                     	;# 
   855  001C                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0090                     	;# 
   860  0091                     	;# 
   861  0092                     	;# 
   862  0095                     	;# 
   863  0096                     	;# 
   864  0097                     	;# 
   865  0099                     	;# 
   866  009A                     	;# 
   867  009B                     	;# 
   868  009B                     	;# 
   869  009C                     	;# 
   870  009D                     	;# 
   871  009E                     	;# 
   872  010C                     	;# 
   873  010D                     	;# 
   874  010E                     	;# 
   875  0116                     	;# 
   876  0117                     	;# 
   877  011D                     	;# 
   878  018C                     	;# 
   879  018D                     	;# 
   880  018E                     	;# 
   881  0191                     	;# 
   882  0191                     	;# 
   883  0192                     	;# 
   884  0193                     	;# 
   885  0193                     	;# 
   886  0194                     	;# 
   887  0195                     	;# 
   888  0196                     	;# 
   889  0197                     	;# 
   890  0199                     	;# 
   891  019A                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019C                     	;# 
   897  019C                     	;# 
   898  019D                     	;# 
   899  019E                     	;# 
   900  019F                     	;# 
   901  020D                     	;# 
   902  0210                     	;# 
   903  0211                     	;# 
   904  0211                     	;# 
   905  0212                     	;# 
   906  0212                     	;# 
   907  0213                     	;# 
   908  0213                     	;# 
   909  0214                     	;# 
   910  0214                     	;# 
   911  0215                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0216                     	;# 
   915  0216                     	;# 
   916  0217                     	;# 
   917  0217                     	;# 
   918  0291                     	;# 
   919  0291                     	;# 
   920  0292                     	;# 
   921  0293                     	;# 
   922  0298                     	;# 
   923  0298                     	;# 
   924  0299                     	;# 
   925  029A                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000D                     	;# 
   954  000E                     	;# 
   955  0010                     	;# 
   956  0011                     	;# 
   957  0012                     	;# 
   958  0015                     	;# 
   959  0016                     	;# 
   960  0016                     	;# 
   961  0017                     	;# 
   962  0018                     	;# 
   963  0019                     	;# 
   964  001A                     	;# 
   965  001B                     	;# 
   966  001C                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0090                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0099                     	;# 
   977  009A                     	;# 
   978  009B                     	;# 
   979  009B                     	;# 
   980  009C                     	;# 
   981  009D                     	;# 
   982  009E                     	;# 
   983  010C                     	;# 
   984  010D                     	;# 
   985  010E                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0197                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019C                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019E                     	;# 
  1011  019F                     	;# 
  1012  020D                     	;# 
  1013  0210                     	;# 
  1014  0211                     	;# 
  1015  0211                     	;# 
  1016  0212                     	;# 
  1017  0212                     	;# 
  1018  0213                     	;# 
  1019  0213                     	;# 
  1020  0214                     	;# 
  1021  0214                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0216                     	;# 
  1026  0216                     	;# 
  1027  0217                     	;# 
  1028  0217                     	;# 
  1029  0291                     	;# 
  1030  0291                     	;# 
  1031  0292                     	;# 
  1032  0293                     	;# 
  1033  0298                     	;# 
  1034  0298                     	;# 
  1035  0299                     	;# 
  1036  029A                     	;# 
  1037  0394                     	;# 
  1038  0395                     	;# 
  1039  0396                     	;# 
  1040  0FE4                     	;# 
  1041  0FE5                     	;# 
  1042  0FE6                     	;# 
  1043  0FE7                     	;# 
  1044  0FE8                     	;# 
  1045  0FE9                     	;# 
  1046  0FEA                     	;# 
  1047  0FEB                     	;# 
  1048  0FED                     	;# 
  1049  0FEE                     	;# 
  1050  0FEF                     	;# 
  1051  0000                     	;# 
  1052  0001                     	;# 
  1053  0002                     	;# 
  1054  0003                     	;# 
  1055  0004                     	;# 
  1056  0005                     	;# 
  1057  0006                     	;# 
  1058  0007                     	;# 
  1059  0008                     	;# 
  1060  0009                     	;# 
  1061  000A                     	;# 
  1062  000B                     	;# 
  1063  000C                     	;# 
  1064  000D                     	;# 
  1065  000E                     	;# 
  1066  0010                     	;# 
  1067  0011                     	;# 
  1068  0012                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  008E                     	;# 
  1081  0090                     	;# 
  1082  0091                     	;# 
  1083  0092                     	;# 
  1084  0095                     	;# 
  1085  0096                     	;# 
  1086  0097                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009B                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009E                     	;# 
  1094  010C                     	;# 
  1095  010D                     	;# 
  1096  010E                     	;# 
  1097  0116                     	;# 
  1098  0117                     	;# 
  1099  011D                     	;# 
  1100  018C                     	;# 
  1101  018D                     	;# 
  1102  018E                     	;# 
  1103  0191                     	;# 
  1104  0191                     	;# 
  1105  0192                     	;# 
  1106  0193                     	;# 
  1107  0193                     	;# 
  1108  0194                     	;# 
  1109  0195                     	;# 
  1110  0196                     	;# 
  1111  0197                     	;# 
  1112  0199                     	;# 
  1113  019A                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019C                     	;# 
  1119  019C                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019F                     	;# 
  1123  020D                     	;# 
  1124  0210                     	;# 
  1125  0211                     	;# 
  1126  0211                     	;# 
  1127  0212                     	;# 
  1128  0212                     	;# 
  1129  0213                     	;# 
  1130  0213                     	;# 
  1131  0214                     	;# 
  1132  0214                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0216                     	;# 
  1137  0216                     	;# 
  1138  0217                     	;# 
  1139  0217                     	;# 
  1140  0291                     	;# 
  1141  0291                     	;# 
  1142  0292                     	;# 
  1143  0293                     	;# 
  1144  0298                     	;# 
  1145  0298                     	;# 
  1146  0299                     	;# 
  1147  029A                     	;# 
  1148  0394                     	;# 
  1149  0395                     	;# 
  1150  0396                     	;# 
  1151  0FE4                     	;# 
  1152  0FE5                     	;# 
  1153  0FE6                     	;# 
  1154  0FE7                     	;# 
  1155  0FE8                     	;# 
  1156  0FE9                     	;# 
  1157  0FEA                     	;# 
  1158  0FEB                     	;# 
  1159  0FED                     	;# 
  1160  0FEE                     	;# 
  1161  0FEF                     	;# 
  1162  0000                     	;# 
  1163  0001                     	;# 
  1164  0002                     	;# 
  1165  0003                     	;# 
  1166  0004                     	;# 
  1167  0005                     	;# 
  1168  0006                     	;# 
  1169  0007                     	;# 
  1170  0008                     	;# 
  1171  0009                     	;# 
  1172  000A                     	;# 
  1173  000B                     	;# 
  1174  000C                     	;# 
  1175  000D                     	;# 
  1176  000E                     	;# 
  1177  0010                     	;# 
  1178  0011                     	;# 
  1179  0012                     	;# 
  1180  0015                     	;# 
  1181  0016                     	;# 
  1182  0016                     	;# 
  1183  0017                     	;# 
  1184  0018                     	;# 
  1185  0019                     	;# 
  1186  001A                     	;# 
  1187  001B                     	;# 
  1188  001C                     	;# 
  1189  008C                     	;# 
  1190  008D                     	;# 
  1191  008E                     	;# 
  1192  0090                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0095                     	;# 
  1196  0096                     	;# 
  1197  0097                     	;# 
  1198  0099                     	;# 
  1199  009A                     	;# 
  1200  009B                     	;# 
  1201  009B                     	;# 
  1202  009C                     	;# 
  1203  009D                     	;# 
  1204  009E                     	;# 
  1205  010C                     	;# 
  1206  010D                     	;# 
  1207  010E                     	;# 
  1208  0116                     	;# 
  1209  0117                     	;# 
  1210  011D                     	;# 
  1211  018C                     	;# 
  1212  018D                     	;# 
  1213  018E                     	;# 
  1214  0191                     	;# 
  1215  0191                     	;# 
  1216  0192                     	;# 
  1217  0193                     	;# 
  1218  0193                     	;# 
  1219  0194                     	;# 
  1220  0195                     	;# 
  1221  0196                     	;# 
  1222  0197                     	;# 
  1223  0199                     	;# 
  1224  019A                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019C                     	;# 
  1230  019C                     	;# 
  1231  019D                     	;# 
  1232  019E                     	;# 
  1233  019F                     	;# 
  1234  020D                     	;# 
  1235  0210                     	;# 
  1236  0211                     	;# 
  1237  0211                     	;# 
  1238  0212                     	;# 
  1239  0212                     	;# 
  1240  0213                     	;# 
  1241  0213                     	;# 
  1242  0214                     	;# 
  1243  0214                     	;# 
  1244  0215                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0216                     	;# 
  1248  0216                     	;# 
  1249  0217                     	;# 
  1250  0217                     	;# 
  1251  0291                     	;# 
  1252  0291                     	;# 
  1253  0292                     	;# 
  1254  0293                     	;# 
  1255  0298                     	;# 
  1256  0298                     	;# 
  1257  0299                     	;# 
  1258  029A                     	;# 
  1259  0394                     	;# 
  1260  0395                     	;# 
  1261  0396                     	;# 
  1262  0FE4                     	;# 
  1263  0FE5                     	;# 
  1264  0FE6                     	;# 
  1265  0FE7                     	;# 
  1266  0FE8                     	;# 
  1267  0FE9                     	;# 
  1268  0FEA                     	;# 
  1269  0FEB                     	;# 
  1270  0FED                     	;# 
  1271  0FEE                     	;# 
  1272  0FEF                     	;# 
  1273  0000                     	;# 
  1274  0001                     	;# 
  1275  0002                     	;# 
  1276  0003                     	;# 
  1277  0004                     	;# 
  1278  0005                     	;# 
  1279  0006                     	;# 
  1280  0007                     	;# 
  1281  0008                     	;# 
  1282  0009                     	;# 
  1283  000A                     	;# 
  1284  000B                     	;# 
  1285  000C                     	;# 
  1286  000D                     	;# 
  1287  000E                     	;# 
  1288  0010                     	;# 
  1289  0011                     	;# 
  1290  0012                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  008C                     	;# 
  1301  008D                     	;# 
  1302  008E                     	;# 
  1303  0090                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0095                     	;# 
  1307  0096                     	;# 
  1308  0097                     	;# 
  1309  0099                     	;# 
  1310  009A                     	;# 
  1311  009B                     	;# 
  1312  009B                     	;# 
  1313  009C                     	;# 
  1314  009D                     	;# 
  1315  009E                     	;# 
  1316  010C                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  0116                     	;# 
  1320  0117                     	;# 
  1321  011D                     	;# 
  1322  018C                     	;# 
  1323  018D                     	;# 
  1324  018E                     	;# 
  1325  0191                     	;# 
  1326  0191                     	;# 
  1327  0192                     	;# 
  1328  0193                     	;# 
  1329  0193                     	;# 
  1330  0194                     	;# 
  1331  0195                     	;# 
  1332  0196                     	;# 
  1333  0197                     	;# 
  1334  0199                     	;# 
  1335  019A                     	;# 
  1336  019B                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019C                     	;# 
  1341  019C                     	;# 
  1342  019D                     	;# 
  1343  019E                     	;# 
  1344  019F                     	;# 
  1345  020D                     	;# 
  1346  0210                     	;# 
  1347  0211                     	;# 
  1348  0211                     	;# 
  1349  0212                     	;# 
  1350  0212                     	;# 
  1351  0213                     	;# 
  1352  0213                     	;# 
  1353  0214                     	;# 
  1354  0214                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0216                     	;# 
  1359  0216                     	;# 
  1360  0217                     	;# 
  1361  0217                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0298                     	;# 
  1367  0298                     	;# 
  1368  0299                     	;# 
  1369  029A                     	;# 
  1370  0394                     	;# 
  1371  0395                     	;# 
  1372  0396                     	;# 
  1373  0FE4                     	;# 
  1374  0FE5                     	;# 
  1375  0FE6                     	;# 
  1376  0FE7                     	;# 
  1377  0FE8                     	;# 
  1378  0FE9                     	;# 
  1379  0FEA                     	;# 
  1380  0FEB                     	;# 
  1381  0FED                     	;# 
  1382  0FEE                     	;# 
  1383  0FEF                     	;# 
  1384  0000                     	;# 
  1385  0001                     	;# 
  1386  0002                     	;# 
  1387  0003                     	;# 
  1388  0004                     	;# 
  1389  0005                     	;# 
  1390  0006                     	;# 
  1391  0007                     	;# 
  1392  0008                     	;# 
  1393  0009                     	;# 
  1394  000A                     	;# 
  1395  000B                     	;# 
  1396  000C                     	;# 
  1397  000D                     	;# 
  1398  000E                     	;# 
  1399  0010                     	;# 
  1400  0011                     	;# 
  1401  0012                     	;# 
  1402  0015                     	;# 
  1403  0016                     	;# 
  1404  0016                     	;# 
  1405  0017                     	;# 
  1406  0018                     	;# 
  1407  0019                     	;# 
  1408  001A                     	;# 
  1409  001B                     	;# 
  1410  001C                     	;# 
  1411  008C                     	;# 
  1412  008D                     	;# 
  1413  008E                     	;# 
  1414  0090                     	;# 
  1415  0091                     	;# 
  1416  0092                     	;# 
  1417  0095                     	;# 
  1418  0096                     	;# 
  1419  0097                     	;# 
  1420  0099                     	;# 
  1421  009A                     	;# 
  1422  009B                     	;# 
  1423  009B                     	;# 
  1424  009C                     	;# 
  1425  009D                     	;# 
  1426  009E                     	;# 
  1427  010C                     	;# 
  1428  010D                     	;# 
  1429  010E                     	;# 
  1430  0116                     	;# 
  1431  0117                     	;# 
  1432  011D                     	;# 
  1433  018C                     	;# 
  1434  018D                     	;# 
  1435  018E                     	;# 
  1436  0191                     	;# 
  1437  0191                     	;# 
  1438  0192                     	;# 
  1439  0193                     	;# 
  1440  0193                     	;# 
  1441  0194                     	;# 
  1442  0195                     	;# 
  1443  0196                     	;# 
  1444  0197                     	;# 
  1445  0199                     	;# 
  1446  019A                     	;# 
  1447  019B                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019C                     	;# 
  1452  019C                     	;# 
  1453  019D                     	;# 
  1454  019E                     	;# 
  1455  019F                     	;# 
  1456  020D                     	;# 
  1457  0210                     	;# 
  1458  0211                     	;# 
  1459  0211                     	;# 
  1460  0212                     	;# 
  1461  0212                     	;# 
  1462  0213                     	;# 
  1463  0213                     	;# 
  1464  0214                     	;# 
  1465  0214                     	;# 
  1466  0215                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0216                     	;# 
  1470  0216                     	;# 
  1471  0217                     	;# 
  1472  0217                     	;# 
  1473  0291                     	;# 
  1474  0291                     	;# 
  1475  0292                     	;# 
  1476  0293                     	;# 
  1477  0298                     	;# 
  1478  0298                     	;# 
  1479  0299                     	;# 
  1480  029A                     	;# 
  1481  0394                     	;# 
  1482  0395                     	;# 
  1483  0396                     	;# 
  1484  0FE4                     	;# 
  1485  0FE5                     	;# 
  1486  0FE6                     	;# 
  1487  0FE7                     	;# 
  1488  0FE8                     	;# 
  1489  0FE9                     	;# 
  1490  0FEA                     	;# 
  1491  0FEB                     	;# 
  1492  0FED                     	;# 
  1493  0FEE                     	;# 
  1494  0FEF                     	;# 
  1495  0000                     	;# 
  1496  0001                     	;# 
  1497  0002                     	;# 
  1498  0003                     	;# 
  1499  0004                     	;# 
  1500  0005                     	;# 
  1501  0006                     	;# 
  1502  0007                     	;# 
  1503  0008                     	;# 
  1504  0009                     	;# 
  1505  000A                     	;# 
  1506  000B                     	;# 
  1507  000C                     	;# 
  1508  000D                     	;# 
  1509  000E                     	;# 
  1510  0010                     	;# 
  1511  0011                     	;# 
  1512  0012                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  008C                     	;# 
  1523  008D                     	;# 
  1524  008E                     	;# 
  1525  0090                     	;# 
  1526  0091                     	;# 
  1527  0092                     	;# 
  1528  0095                     	;# 
  1529  0096                     	;# 
  1530  0097                     	;# 
  1531  0099                     	;# 
  1532  009A                     	;# 
  1533  009B                     	;# 
  1534  009B                     	;# 
  1535  009C                     	;# 
  1536  009D                     	;# 
  1537  009E                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0116                     	;# 
  1542  0117                     	;# 
  1543  011D                     	;# 
  1544  018C                     	;# 
  1545  018D                     	;# 
  1546  018E                     	;# 
  1547  0191                     	;# 
  1548  0191                     	;# 
  1549  0192                     	;# 
  1550  0193                     	;# 
  1551  0193                     	;# 
  1552  0194                     	;# 
  1553  0195                     	;# 
  1554  0196                     	;# 
  1555  0197                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019D                     	;# 
  1565  019E                     	;# 
  1566  019F                     	;# 
  1567  020D                     	;# 
  1568  0210                     	;# 
  1569  0211                     	;# 
  1570  0211                     	;# 
  1571  0212                     	;# 
  1572  0212                     	;# 
  1573  0213                     	;# 
  1574  0213                     	;# 
  1575  0214                     	;# 
  1576  0214                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0216                     	;# 
  1581  0216                     	;# 
  1582  0217                     	;# 
  1583  0217                     	;# 
  1584  0291                     	;# 
  1585  0291                     	;# 
  1586  0292                     	;# 
  1587  0293                     	;# 
  1588  0298                     	;# 
  1589  0298                     	;# 
  1590  0299                     	;# 
  1591  029A                     	;# 
  1592  0394                     	;# 
  1593  0395                     	;# 
  1594  0396                     	;# 
  1595  0FE4                     	;# 
  1596  0FE5                     	;# 
  1597  0FE6                     	;# 
  1598  0FE7                     	;# 
  1599  0FE8                     	;# 
  1600  0FE9                     	;# 
  1601  0FEA                     	;# 
  1602  0FEB                     	;# 
  1603  0FED                     	;# 
  1604  0FEE                     	;# 
  1605  0FEF                     	;# 
  1606  0000                     	;# 
  1607  0001                     	;# 
  1608  0002                     	;# 
  1609  0003                     	;# 
  1610  0004                     	;# 
  1611  0005                     	;# 
  1612  0006                     	;# 
  1613  0007                     	;# 
  1614  0008                     	;# 
  1615  0009                     	;# 
  1616  000A                     	;# 
  1617  000B                     	;# 
  1618  000C                     	;# 
  1619  000D                     	;# 
  1620  000E                     	;# 
  1621  0010                     	;# 
  1622  0011                     	;# 
  1623  0012                     	;# 
  1624  0015                     	;# 
  1625  0016                     	;# 
  1626  0016                     	;# 
  1627  0017                     	;# 
  1628  0018                     	;# 
  1629  0019                     	;# 
  1630  001A                     	;# 
  1631  001B                     	;# 
  1632  001C                     	;# 
  1633  008C                     	;# 
  1634  008D                     	;# 
  1635  008E                     	;# 
  1636  0090                     	;# 
  1637  0091                     	;# 
  1638  0092                     	;# 
  1639  0095                     	;# 
  1640  0096                     	;# 
  1641  0097                     	;# 
  1642  0099                     	;# 
  1643  009A                     	;# 
  1644  009B                     	;# 
  1645  009B                     	;# 
  1646  009C                     	;# 
  1647  009D                     	;# 
  1648  009E                     	;# 
  1649  010C                     	;# 
  1650  010D                     	;# 
  1651  010E                     	;# 
  1652  0116                     	;# 
  1653  0117                     	;# 
  1654  011D                     	;# 
  1655  018C                     	;# 
  1656  018D                     	;# 
  1657  018E                     	;# 
  1658  0191                     	;# 
  1659  0191                     	;# 
  1660  0192                     	;# 
  1661  0193                     	;# 
  1662  0193                     	;# 
  1663  0194                     	;# 
  1664  0195                     	;# 
  1665  0196                     	;# 
  1666  0197                     	;# 
  1667  0199                     	;# 
  1668  019A                     	;# 
  1669  019B                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019C                     	;# 
  1674  019C                     	;# 
  1675  019D                     	;# 
  1676  019E                     	;# 
  1677  019F                     	;# 
  1678  020D                     	;# 
  1679  0210                     	;# 
  1680  0211                     	;# 
  1681  0211                     	;# 
  1682  0212                     	;# 
  1683  0212                     	;# 
  1684  0213                     	;# 
  1685  0213                     	;# 
  1686  0214                     	;# 
  1687  0214                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0216                     	;# 
  1692  0216                     	;# 
  1693  0217                     	;# 
  1694  0217                     	;# 
  1695  0291                     	;# 
  1696  0291                     	;# 
  1697  0292                     	;# 
  1698  0293                     	;# 
  1699  0298                     	;# 
  1700  0298                     	;# 
  1701  0299                     	;# 
  1702  029A                     	;# 
  1703  0394                     	;# 
  1704  0395                     	;# 
  1705  0396                     	;# 
  1706  0FE4                     	;# 
  1707  0FE5                     	;# 
  1708  0FE6                     	;# 
  1709  0FE7                     	;# 
  1710  0FE8                     	;# 
  1711  0FE9                     	;# 
  1712  0FEA                     	;# 
  1713  0FEB                     	;# 
  1714  0FED                     	;# 
  1715  0FEE                     	;# 
  1716  0FEF                     	;# 
  1717  0000                     	;# 
  1718  0001                     	;# 
  1719  0002                     	;# 
  1720  0003                     	;# 
  1721  0004                     	;# 
  1722  0005                     	;# 
  1723  0006                     	;# 
  1724  0007                     	;# 
  1725  0008                     	;# 
  1726  0009                     	;# 
  1727  000A                     	;# 
  1728  000B                     	;# 
  1729  000C                     	;# 
  1730  000D                     	;# 
  1731  000E                     	;# 
  1732  0010                     	;# 
  1733  0011                     	;# 
  1734  0012                     	;# 
  1735  0015                     	;# 
  1736  0016                     	;# 
  1737  0016                     	;# 
  1738  0017                     	;# 
  1739  0018                     	;# 
  1740  0019                     	;# 
  1741  001A                     	;# 
  1742  001B                     	;# 
  1743  001C                     	;# 
  1744  008C                     	;# 
  1745  008D                     	;# 
  1746  008E                     	;# 
  1747  0090                     	;# 
  1748  0091                     	;# 
  1749  0092                     	;# 
  1750  0095                     	;# 
  1751  0096                     	;# 
  1752  0097                     	;# 
  1753  0099                     	;# 
  1754  009A                     	;# 
  1755  009B                     	;# 
  1756  009B                     	;# 
  1757  009C                     	;# 
  1758  009D                     	;# 
  1759  009E                     	;# 
  1760  010C                     	;# 
  1761  010D                     	;# 
  1762  010E                     	;# 
  1763  0116                     	;# 
  1764  0117                     	;# 
  1765  011D                     	;# 
  1766  018C                     	;# 
  1767  018D                     	;# 
  1768  018E                     	;# 
  1769  0191                     	;# 
  1770  0191                     	;# 
  1771  0192                     	;# 
  1772  0193                     	;# 
  1773  0193                     	;# 
  1774  0194                     	;# 
  1775  0195                     	;# 
  1776  0196                     	;# 
  1777  0197                     	;# 
  1778  0199                     	;# 
  1779  019A                     	;# 
  1780  019B                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019C                     	;# 
  1785  019C                     	;# 
  1786  019D                     	;# 
  1787  019E                     	;# 
  1788  019F                     	;# 
  1789  020D                     	;# 
  1790  0210                     	;# 
  1791  0211                     	;# 
  1792  0211                     	;# 
  1793  0212                     	;# 
  1794  0212                     	;# 
  1795  0213                     	;# 
  1796  0213                     	;# 
  1797  0214                     	;# 
  1798  0214                     	;# 
  1799  0215                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0216                     	;# 
  1803  0216                     	;# 
  1804  0217                     	;# 
  1805  0217                     	;# 
  1806  0291                     	;# 
  1807  0291                     	;# 
  1808  0292                     	;# 
  1809  0293                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  029A                     	;# 
  1814  0394                     	;# 
  1815  0395                     	;# 
  1816  0396                     	;# 
  1817  0FE4                     	;# 
  1818  0FE5                     	;# 
  1819  0FE6                     	;# 
  1820  0FE7                     	;# 
  1821  0FE8                     	;# 
  1822  0FE9                     	;# 
  1823  0FEA                     	;# 
  1824  0FEB                     	;# 
  1825  0FED                     	;# 
  1826  0FEE                     	;# 
  1827  0FEF                     	;# 
  1828  0000                     	;# 
  1829  0001                     	;# 
  1830  0002                     	;# 
  1831  0003                     	;# 
  1832  0004                     	;# 
  1833  0005                     	;# 
  1834  0006                     	;# 
  1835  0007                     	;# 
  1836  0008                     	;# 
  1837  0009                     	;# 
  1838  000A                     	;# 
  1839  000B                     	;# 
  1840  000C                     	;# 
  1841  000D                     	;# 
  1842  000E                     	;# 
  1843  0010                     	;# 
  1844  0011                     	;# 
  1845  0012                     	;# 
  1846  0015                     	;# 
  1847  0016                     	;# 
  1848  0016                     	;# 
  1849  0017                     	;# 
  1850  0018                     	;# 
  1851  0019                     	;# 
  1852  001A                     	;# 
  1853  001B                     	;# 
  1854  001C                     	;# 
  1855  008C                     	;# 
  1856  008D                     	;# 
  1857  008E                     	;# 
  1858  0090                     	;# 
  1859  0091                     	;# 
  1860  0092                     	;# 
  1861  0095                     	;# 
  1862  0096                     	;# 
  1863  0097                     	;# 
  1864  0099                     	;# 
  1865  009A                     	;# 
  1866  009B                     	;# 
  1867  009B                     	;# 
  1868  009C                     	;# 
  1869  009D                     	;# 
  1870  009E                     	;# 
  1871  010C                     	;# 
  1872  010D                     	;# 
  1873  010E                     	;# 
  1874  0116                     	;# 
  1875  0117                     	;# 
  1876  011D                     	;# 
  1877  018C                     	;# 
  1878  018D                     	;# 
  1879  018E                     	;# 
  1880  0191                     	;# 
  1881  0191                     	;# 
  1882  0192                     	;# 
  1883  0193                     	;# 
  1884  0193                     	;# 
  1885  0194                     	;# 
  1886  0195                     	;# 
  1887  0196                     	;# 
  1888  0197                     	;# 
  1889  0199                     	;# 
  1890  019A                     	;# 
  1891  019B                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019C                     	;# 
  1896  019C                     	;# 
  1897  019D                     	;# 
  1898  019E                     	;# 
  1899  019F                     	;# 
  1900  020D                     	;# 
  1901  0210                     	;# 
  1902  0211                     	;# 
  1903  0211                     	;# 
  1904  0212                     	;# 
  1905  0212                     	;# 
  1906  0213                     	;# 
  1907  0213                     	;# 
  1908  0214                     	;# 
  1909  0214                     	;# 
  1910  0215                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0216                     	;# 
  1914  0216                     	;# 
  1915  0217                     	;# 
  1916  0217                     	;# 
  1917  0291                     	;# 
  1918  0291                     	;# 
  1919  0292                     	;# 
  1920  0293                     	;# 
  1921  0298                     	;# 
  1922  0298                     	;# 
  1923  0299                     	;# 
  1924  029A                     	;# 
  1925  0394                     	;# 
  1926  0395                     	;# 
  1927  0396                     	;# 
  1928  0FE4                     	;# 
  1929  0FE5                     	;# 
  1930  0FE6                     	;# 
  1931  0FE7                     	;# 
  1932  0FE8                     	;# 
  1933  0FE9                     	;# 
  1934  0FEA                     	;# 
  1935  0FEB                     	;# 
  1936  0FED                     	;# 
  1937  0FEE                     	;# 
  1938  0FEF                     	;# 
  1939  0000                     	;# 
  1940  0001                     	;# 
  1941  0002                     	;# 
  1942  0003                     	;# 
  1943  0004                     	;# 
  1944  0005                     	;# 
  1945  0006                     	;# 
  1946  0007                     	;# 
  1947  0008                     	;# 
  1948  0009                     	;# 
  1949  000A                     	;# 
  1950  000B                     	;# 
  1951  000C                     	;# 
  1952  000D                     	;# 
  1953  000E                     	;# 
  1954  0010                     	;# 
  1955  0011                     	;# 
  1956  0012                     	;# 
  1957  0015                     	;# 
  1958  0016                     	;# 
  1959  0016                     	;# 
  1960  0017                     	;# 
  1961  0018                     	;# 
  1962  0019                     	;# 
  1963  001A                     	;# 
  1964  001B                     	;# 
  1965  001C                     	;# 
  1966  008C                     	;# 
  1967  008D                     	;# 
  1968  008E                     	;# 
  1969  0090                     	;# 
  1970  0091                     	;# 
  1971  0092                     	;# 
  1972  0095                     	;# 
  1973  0096                     	;# 
  1974  0097                     	;# 
  1975  0099                     	;# 
  1976  009A                     	;# 
  1977  009B                     	;# 
  1978  009B                     	;# 
  1979  009C                     	;# 
  1980  009D                     	;# 
  1981  009E                     	;# 
  1982  010C                     	;# 
  1983  010D                     	;# 
  1984  010E                     	;# 
  1985  0116                     	;# 
  1986  0117                     	;# 
  1987  011D                     	;# 
  1988  018C                     	;# 
  1989  018D                     	;# 
  1990  018E                     	;# 
  1991  0191                     	;# 
  1992  0191                     	;# 
  1993  0192                     	;# 
  1994  0193                     	;# 
  1995  0193                     	;# 
  1996  0194                     	;# 
  1997  0195                     	;# 
  1998  0196                     	;# 
  1999  0197                     	;# 
  2000  0199                     	;# 
  2001  019A                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019D                     	;# 
  2009  019E                     	;# 
  2010  019F                     	;# 
  2011  020D                     	;# 
  2012  0210                     	;# 
  2013  0211                     	;# 
  2014  0211                     	;# 
  2015  0212                     	;# 
  2016  0212                     	;# 
  2017  0213                     	;# 
  2018  0213                     	;# 
  2019  0214                     	;# 
  2020  0214                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0216                     	;# 
  2025  0216                     	;# 
  2026  0217                     	;# 
  2027  0217                     	;# 
  2028  0291                     	;# 
  2029  0291                     	;# 
  2030  0292                     	;# 
  2031  0293                     	;# 
  2032  0298                     	;# 
  2033  0298                     	;# 
  2034  0299                     	;# 
  2035  029A                     	;# 
  2036  0394                     	;# 
  2037  0395                     	;# 
  2038  0396                     	;# 
  2039  0FE4                     	;# 
  2040  0FE5                     	;# 
  2041  0FE6                     	;# 
  2042  0FE7                     	;# 
  2043  0FE8                     	;# 
  2044  0FE9                     	;# 
  2045  0FEA                     	;# 
  2046  0FEB                     	;# 
  2047  0FED                     	;# 
  2048  0FEE                     	;# 
  2049  0FEF                     	;# 
  2050  0000                     	;# 
  2051  0001                     	;# 
  2052  0002                     	;# 
  2053  0003                     	;# 
  2054  0004                     	;# 
  2055  0005                     	;# 
  2056  0006                     	;# 
  2057  0007                     	;# 
  2058  0008                     	;# 
  2059  0009                     	;# 
  2060  000A                     	;# 
  2061  000B                     	;# 
  2062  000C                     	;# 
  2063  000D                     	;# 
  2064  000E                     	;# 
  2065  0010                     	;# 
  2066  0011                     	;# 
  2067  0012                     	;# 
  2068  0015                     	;# 
  2069  0016                     	;# 
  2070  0016                     	;# 
  2071  0017                     	;# 
  2072  0018                     	;# 
  2073  0019                     	;# 
  2074  001A                     	;# 
  2075  001B                     	;# 
  2076  001C                     	;# 
  2077  008C                     	;# 
  2078  008D                     	;# 
  2079  008E                     	;# 
  2080  0090                     	;# 
  2081  0091                     	;# 
  2082  0092                     	;# 
  2083  0095                     	;# 
  2084  0096                     	;# 
  2085  0097                     	;# 
  2086  0099                     	;# 
  2087  009A                     	;# 
  2088  009B                     	;# 
  2089  009B                     	;# 
  2090  009C                     	;# 
  2091  009D                     	;# 
  2092  009E                     	;# 
  2093  010C                     	;# 
  2094  010D                     	;# 
  2095  010E                     	;# 
  2096  0116                     	;# 
  2097  0117                     	;# 
  2098  011D                     	;# 
  2099  018C                     	;# 
  2100  018D                     	;# 
  2101  018E                     	;# 
  2102  0191                     	;# 
  2103  0191                     	;# 
  2104  0192                     	;# 
  2105  0193                     	;# 
  2106  0193                     	;# 
  2107  0194                     	;# 
  2108  0195                     	;# 
  2109  0196                     	;# 
  2110  0197                     	;# 
  2111  0199                     	;# 
  2112  019A                     	;# 
  2113  019B                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019C                     	;# 
  2118  019C                     	;# 
  2119  019D                     	;# 
  2120  019E                     	;# 
  2121  019F                     	;# 
  2122  020D                     	;# 
  2123  0210                     	;# 
  2124  0211                     	;# 
  2125  0211                     	;# 
  2126  0212                     	;# 
  2127  0212                     	;# 
  2128  0213                     	;# 
  2129  0213                     	;# 
  2130  0214                     	;# 
  2131  0214                     	;# 
  2132  0215                     	;# 
  2133  0215                     	;# 
  2134  0215                     	;# 
  2135  0216                     	;# 
  2136  0216                     	;# 
  2137  0217                     	;# 
  2138  0217                     	;# 
  2139  0291                     	;# 
  2140  0291                     	;# 
  2141  0292                     	;# 
  2142  0293                     	;# 
  2143  0298                     	;# 
  2144  0298                     	;# 
  2145  0299                     	;# 
  2146  029A                     	;# 
  2147  0394                     	;# 
  2148  0395                     	;# 
  2149  0396                     	;# 
  2150  0FE4                     	;# 
  2151  0FE5                     	;# 
  2152  0FE6                     	;# 
  2153  0FE7                     	;# 
  2154  0FE8                     	;# 
  2155  0FE9                     	;# 
  2156  0FEA                     	;# 
  2157  0FEB                     	;# 
  2158  0FED                     	;# 
  2159  0FEE                     	;# 
  2160  0FEF                     	;# 
  2161                           
  2162                           	psect	idataBANK4
  2163  1083                     __pidataBANK4:	
  2164                           
  2165                           ;initializer for __product
  2166  1083  3463               	retlw	99
  2167  1084  3402               	retlw	2
  2168  1085  3400               	retlw	0
  2169  1086  3400               	retlw	0
  2170  1087  3400               	retlw	0
  2171  1088  3400               	retlw	0
  2172  1089  3400               	retlw	0
  2173  108A  3400               	retlw	0
  2174  108B  3400               	retlw	0
  2175  108C  3400               	retlw	0
  2176  108D  3400               	retlw	0
  2177  108E  3400               	retlw	0
  2178  108F  34FF               	retlw	255
  2179  1090  34FF               	retlw	255
  2180  1091  34FF               	retlw	255
  2181  1092  3400               	retlw	0
  2182  1093  3400               	retlw	0
  2183  1094  3400               	retlw	0
  2184  1095  3400               	retlw	0
  2185  1096  3400               	retlw	0
  2186  1097  3400               	retlw	0
  2187  1098  3400               	retlw	0
  2188  1099  3400               	retlw	0
  2189  109A  3400               	retlw	0
  2190  109B  3400               	retlw	0
  2191  109C  3400               	retlw	0
  2192  109D  3400               	retlw	0
  2193  109E  3400               	retlw	0
  2194  109F  3400               	retlw	0
  2195  10A0  3400               	retlw	0
  2196  10A1  3400               	retlw	0
  2197  10A2  3400               	retlw	0
  2198                           
  2199                           	psect	stringtext
  2200  1000                     __pstringtext:	
  2201  1000                     _CC2500_registers_address:	
  2202  1000  3403               	retlw	3
  2203  1001  3416               	retlw	22
  2204  1002  3417               	retlw	23
  2205  1003  341E               	retlw	30
  2206  1004  341F               	retlw	31
  2207  1005  3420               	retlw	32
  2208  1006  342A               	retlw	42
  2209  1007  342B               	retlw	43
  2210  1008  340B               	retlw	11
  2211  1009  340C               	retlw	12
  2212  100A  340D               	retlw	13
  2213  100B  340E               	retlw	14
  2214  100C  340F               	retlw	15
  2215  100D  3410               	retlw	16
  2216  100E  3411               	retlw	17
  2217  100F  3412               	retlw	18
  2218  1010  3413               	retlw	19
  2219  1011  3414               	retlw	20
  2220  1012  340A               	retlw	10
  2221  1013  3415               	retlw	21
  2222  1014  3421               	retlw	33
  2223  1015  3422               	retlw	34
  2224  1016  3418               	retlw	24
  2225  1017  3419               	retlw	25
  2226  1018  341A               	retlw	26
  2227  1019  341B               	retlw	27
  2228  101A  341C               	retlw	28
  2229  101B  341D               	retlw	29
  2230  101C  3423               	retlw	35
  2231  101D  3424               	retlw	36
  2232  101E  3425               	retlw	37
  2233  101F  3426               	retlw	38
  2234  1020  3429               	retlw	41
  2235  1021  342C               	retlw	44
  2236  1022  342D               	retlw	45
  2237  1023  342E               	retlw	46
  2238  1024  3400               	retlw	0
  2239  1025  3401               	retlw	1
  2240  1026  3402               	retlw	2
  2241  1027  3407               	retlw	7
  2242  1028  3408               	retlw	8
  2243  1029  3409               	retlw	9
  2244  102A  3406               	retlw	6
  2245  102B  3404               	retlw	4
  2246  102C  3405               	retlw	5
  2247  102D  3427               	retlw	39
  2248  102E  3428               	retlw	40
  2249  102F                     __end_of_CC2500_registers_address:	
  2250  102F                     _CC2500_rfSettings:	
  2251  102F  3407               	retlw	7
  2252  1030  3407               	retlw	7
  2253  1031  3430               	retlw	48
  2254  1032  3487               	retlw	135
  2255  1033  346B               	retlw	107
  2256  1034  34F8               	retlw	248
  2257  1035  347F               	retlw	127
  2258  1036  343F               	retlw	63
  2259  1037  3409               	retlw	9
  2260  1038  3400               	retlw	0
  2261  1039  345C               	retlw	92
  2262  103A  34A7               	retlw	167
  2263  103B  3462               	retlw	98
  2264  103C  3486               	retlw	134
  2265  103D  3483               	retlw	131
  2266  103E  3403               	retlw	3
  2267  103F  3422               	retlw	34
  2268  1040  34F8               	retlw	248
  2269  1041  3400               	retlw	0
  2270  1042  3444               	retlw	68
  2271  1043  34B6               	retlw	182
  2272  1044  3410               	retlw	16
  2273  1045  3418               	retlw	24
  2274  1046  341D               	retlw	29
  2275  1047  341C               	retlw	28
  2276  1048  34C7               	retlw	199
  2277  1049  3400               	retlw	0
  2278  104A  34B2               	retlw	178
  2279  104B  34EA               	retlw	234
  2280  104C  340A               	retlw	10
  2281  104D  3400               	retlw	0
  2282  104E  3411               	retlw	17
  2283  104F  3459               	retlw	89
  2284  1050  3488               	retlw	136
  2285  1051  3431               	retlw	49
  2286  1052  340B               	retlw	11
  2287  1053  342F               	retlw	47
  2288  1054  342E               	retlw	46
  2289  1055  3406               	retlw	6
  2290  1056  3404               	retlw	4
  2291  1057  3405               	retlw	5
  2292  1058  3400               	retlw	0
  2293  1059  3430               	retlw	48
  2294  105A  34D3               	retlw	211
  2295  105B  3491               	retlw	145
  2296  105C  3441               	retlw	65
  2297  105D  3400               	retlw	0
  2298  105E                     __end_of_CC2500_rfSettings:	
  2299  105E                     _CC2500_patable_vaule:	
  2300  105E  34FE               	retlw	254
  2301  105F  34FE               	retlw	254
  2302  1060  34FE               	retlw	254
  2303  1061  34FE               	retlw	254
  2304  1062  34FE               	retlw	254
  2305  1063  34FE               	retlw	254
  2306  1064  34FE               	retlw	254
  2307  1065  34FE               	retlw	254
  2308  1066                     __end_of_CC2500_patable_vaule:	
  2309                           
  2310                           	psect	nvBANK1
  2311  00EE                     __pnvBANK1:	
  2312  00EE                     _product:	
  2313  00EE                     	ds	1
  2314  000C                     _PORTA	set	12
  2315  000D                     _PORTB	set	13
  2316  000E                     _PORTC	set	14
  2317  0018                     _T1CON	set	24
  2318  0017                     _TMR1H	set	23
  2319  0016                     _TMR1L	set	22
  2320  005F                     _GIE	set	95
  2321  005B                     _IOCIE	set	91
  2322  0058                     _IOCIF	set	88
  2323  005E                     _PEIE	set	94
  2324  0060                     _RA0	set	96
  2325  0064                     _RA4	set	100
  2326  0066                     _RA6	set	102
  2327  0067                     _RA7	set	103
  2328  0068                     _RB0	set	104
  2329  0069                     _RB1	set	105
  2330  006A                     _RB2	set	106
  2331  006B                     _RB3	set	107
  2332  006D                     _RB5	set	109
  2333  0070                     _RC0	set	112
  2334  0071                     _RC1	set	113
  2335  0073                     _RC3	set	115
  2336  0074                     _RC4	set	116
  2337  0075                     _RC5	set	117
  2338  0088                     _TMR1IF	set	136
  2339  009D                     _ADCON0	set	157
  2340  009E                     _ADCON1	set	158
  2341  009C                     _ADRESH	set	156
  2342  009B                     _ADRESL	set	155
  2343  0099                     _OSCCON	set	153
  2344  008C                     _TRISA	set	140
  2345  008D                     _TRISB	set	141
  2346  008E                     _TRISC	set	142
  2347  0097                     _WDTCON	set	151
  2348  04E9                     _GO_nDONE	set	1257
  2349  0488                     _TMR1IE	set	1160
  2350  0117                     _FVRCON	set	279
  2351  010C                     _LATA	set	268
  2352  010D                     _LATB	set	269
  2353  010E                     _LATC	set	270
  2354  018C                     _ANSELA	set	396
  2355  018D                     _ANSELB	set	397
  2356  018E                     _ANSELC	set	398
  2357  0192                     _PMADRH	set	402
  2358  0191                     _PMADRL	set	401
  2359  0196                     _PMCON2	set	406
  2360  0194                     _PMDATH	set	404
  2361  0193                     _PMDATL	set	403
  2362  0CAE                     _CFGS	set	3246
  2363  0CAC                     _FREE	set	3244
  2364  0CAD                     _LWLO	set	3245
  2365  0CA8                     _RD	set	3240
  2366  0CA9                     _WR	set	3241
  2367  0CAA                     _WREN	set	3242
  2368  020D                     _WPUB	set	525
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0022                     start_initialization:	
  2378  0022                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITCOMMON
  2381  0022  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to BITBANK1
  2384  0023  0021               	movlb	1	; select bank1
  2385  0024  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2386                           
  2387                           ; Clear objects allocated to BANK1
  2388  0025  30A0               	movlw	low __pbssBANK1
  2389  0026  0084               	movwf	4
  2390  0027  3000               	movlw	high __pbssBANK1
  2391  0028  0085               	movwf	5
  2392  0029  3046               	movlw	70
  2393  002A  319B  2374  3180   	fcall	clear_ram0
  2394                           
  2395                           ; Clear objects allocated to BANK2
  2396  002D  3020               	movlw	low __pbssBANK2
  2397  002E  0084               	movwf	4
  2398  002F  3001               	movlw	high __pbssBANK2
  2399  0030  0085               	movwf	5
  2400  0031  3050               	movlw	80
  2401  0032  319B  2374  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK3
  2404  0035  30A0               	movlw	low __pbssBANK3
  2405  0036  0084               	movwf	4
  2406  0037  3001               	movlw	high __pbssBANK3
  2407  0038  0085               	movwf	5
  2408  0039  3044               	movlw	68
  2409  003A  319B  2374  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Initialize objects allocated to BANK4
  2412  003D  3083               	movlw	low __pidataBANK4
  2413  003E  0084               	movwf	4
  2414  003F  3090               	movlw	(high __pidataBANK4)| (0+128)
  2415  0040  0085               	movwf	5
  2416  0041  3020               	movlw	low __pdataBANK4
  2417  0042  0086               	movwf	6
  2418  0043  3002               	movlw	high __pdataBANK4
  2419  0044  0087               	movwf	7
  2420  0045  3020               	movlw	32
  2421  0046  319B  236E         	fcall	init_ram
  2422  0048                     end_of_initialization:	
  2423                           ;End of C runtime variable initialization code
  2424                           
  2425  0048                     __end_of__initialization:	
  2426  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2427  0049  0020               	movlb	0
  2428  004A  3196  2E16         	ljmp	_main	;jump to C main() function
  2429                           
  2430                           	psect	bitbssCOMMON
  2431  03E8                     __pbitbssCOMMON:	
  2432  03E8                     _Transceive_OK:	
  2433  03E8                     	ds	1
  2434                           
  2435                           	psect	bitbssBANK1
  2436  0778                     __pbitbssBANK1:	
  2437  0778                     _Receive_OK:	
  2438  0778                     	ds	1
  2439                           
  2440                           	psect	bssBANK1
  2441  00A0                     __pbssBANK1:	
  2442  00A0                     _RF1:	
  2443  00A0                     	ds	14
  2444  00AE                     _myMain:	
  2445  00AE                     	ds	13
  2446  00BB                     _Buz1:	
  2447  00BB                     	ds	12
  2448  00C7                     _DimmerIntr1:	
  2449  00C7                     	ds	8
  2450  00CF                     _CRC:	
  2451  00CF                     	ds	1
  2452  00D0                     _Cmd:	
  2453  00D0                     	ds	1
  2454  00D1                     _DelayOff:	
  2455  00D1                     	ds	1
  2456  00D2                     _DimmerLights:	
  2457  00D2                     	ds	1
  2458  00D3                     _LED:	
  2459  00D3                     	ds	1
  2460  00D4                     _Rx_Length:	
  2461  00D4                     	ds	1
  2462  00D5                     _SPI0Buffer:	
  2463  00D5                     	ds	1
  2464  00D6                     _Sw:	
  2465  00D6                     	ds	1
  2466  00D7                     _SwDetect:	
  2467  00D7                     	ds	1
  2468  00D8                     _Tx_Length:	
  2469  00D8                     	ds	1
  2470  00D9                     _r_address:	
  2471  00D9                     	ds	1
  2472  00DA                     _r_data:	
  2473  00DA                     	ds	1
  2474  00DB                     _s_data:	
  2475  00DB                     	ds	1
  2476  00DC                     _Temp:	
  2477  00DC                     	ds	10
  2478                           
  2479                           	psect	bssBANK2
  2480  0120                     __pbssBANK2:	
  2481  0120                     _RF_Data:	
  2482  0120                     	ds	30
  2483  013E                     _Timer1:	
  2484  013E                     	ds	3
  2485  0141                     _RF_Count:	
  2486  0141                     	ds	2
  2487  0143                     _WDT:	
  2488  0143                     	ds	2
  2489  0145                     _DimmerIntr:	
  2490  0145                     	ds	1
  2491  0146                     _Light:	
  2492  0146                     	ds	1
  2493  0147                     _RSSI:	
  2494  0147                     	ds	1
  2495  0148                     _Load:	
  2496  0148                     	ds	40
  2497                           
  2498                           	psect	bssBANK3
  2499  01A0                     __pbssBANK3:	
  2500  01A0                     _Dimmer:	
  2501  01A0                     	ds	5
  2502  01A5                     _Memory:	
  2503  01A5                     	ds	37
  2504  01CA                     _Sw1:	
  2505  01CA                     	ds	9
  2506  01D3                     _DimmerLights1:	
  2507  01D3                     	ds	8
  2508  01DB                     _DlySw1:	
  2509  01DB                     	ds	5
  2510  01E0                     _VarErrLED:	
  2511  01E0                     	ds	4
  2512                           
  2513                           	psect	dataBANK4
  2514  0220                     __pdataBANK4:	
  2515  0220                     __product:	
  2516  0220                     	ds	32
  2517                           
  2518                           	psect	clrtext
  2519  1B74                     clear_ram0:	
  2520                           ;	Called with FSR0 containing the base address, and
  2521                           ;	WREG with the size to clear
  2522                           
  2523  1B74  0064               	clrwdt	;clear the watchdog before getting into this loop
  2524  1B75                     clrloop0:	
  2525  1B75  0180               	clrf	0	;clear RAM location pointed to by FSR
  2526  1B76  3101               	addfsr 0,1
  2527  1B77  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2528  1B78  2B75               	goto	clrloop0	;have we reached the end yet?
  2529  1B79  3400               	retlw	0	;all done for this memory range, return
  2530                           
  2531                           	psect	inittext
  2532  1B6E                     init_ram:	
  2533  1B6E  00FE               	movwf	126
  2534  1B6F                     initloop:	
  2535  1B6F  0012               	moviw fsr0++
  2536  1B70  001E               	movwi fsr1++
  2537  1B71  0BFE               	decfsz	126,f
  2538  1B72  2B6F               	goto	initloop
  2539  1B73  3400               	retlw	0
  2540                           
  2541                           	psect	cstackBANK1
  2542  00E6                     __pcstackBANK1:	
  2543  00E6                     ??_getRxData:	
  2544  00E6                     setDimmerLights_OnOff@lights:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547                           
  2548                           ; 1 bytes @ 0x0
  2549  00E6                     	ds	1
  2550  00E7                     setDimmerLights_Main@lights:	
  2551  00E7                     getRxData@error:	
  2552                           ; 1 bytes @ 0x1
  2553                           
  2554                           
  2555                           ; 1 bytes @ 0x1
  2556  00E7                     	ds	1
  2557  00E8                     ??_setRF_Main:	
  2558                           
  2559                           ; 0 bytes @ 0x2
  2560  00E8                     	ds	1
  2561  00E9                     setRF_Main@error:	
  2562                           
  2563                           ; 1 bytes @ 0x3
  2564  00E9                     	ds	1
  2565  00EA                     ?_main:	
  2566  00EA                     main@argc:	
  2567                           ; 2 bytes @ 0x4
  2568                           
  2569                           
  2570                           ; 2 bytes @ 0x4
  2571  00EA                     	ds	2
  2572  00EC                     main@argv:	
  2573                           
  2574                           ; 2 bytes @ 0x6
  2575  00EC                     	ds	2
  2576                           
  2577                           	psect	cstackCOMMON
  2578  0070                     __pcstackCOMMON:	
  2579  0070                     ?_CC2500_WriteCommand:	
  2580  0070                     ?_RF_Timeout_Counter:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_setRF_TimeoutCleared:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_CC2500_WriteByte:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_CC2500_ReadStatus:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_CC2500_ReadByte:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_CC2500_PowerRST:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_CC2500_InitSetREG:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_CC2500_InitPATable:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_ClearTXFIFO:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_ClearRXFIFO:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_FrequencyCabr:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_SIDLEMode:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_DlyOff_Initialization:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_DlyOff_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_setDimmerLights_SwOn:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setDimmerLights_SwOff:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setDimmerLights_Initialization:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setDimmerLights_Main:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setDimmerLights_Line:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_setTxData:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setRF_TransceiveGO:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setLED_Initialization:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setLED_Main:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_Fosc_Set:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_IO_Set:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_TMR1_Set:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_ADC_Set:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_IOC_Set:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_WDT_Set:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_TMR1_ISR:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_IOC_ISR:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_Timeout_Counter:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_set_TimeoutCleared:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_Flash_Memory_Write:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_Flash_Memory_Modify:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_WDT_Clearing:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_myMain_Initialization:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Temp_Initialization:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_Load_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Switch_Initialization:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_RF_Initialization:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_getLoad_AD:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_getTemp_AD:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_my_MainTimer:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Temp_Main:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Load_Main:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_Switch_Main:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_RF_Main:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_Exception_Main:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setLoad_AH_AL_Restore:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_setTemp_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_setTemp_Main:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setRF_Initialization:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_setRF_Main:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_RF_RxDisable:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_getRxData:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_setLog_Code:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setControl_Lights_Table:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setRFSW_Control:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_setRFSW_AdjControl:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_setSw_Initialization:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setSw_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_Buzzer_Initialization:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_Buzzer_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_CC2500_TxData:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_CC2500_RxData:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_CC2500_PowerOnInitial:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_DelayOffPointSelect:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_DelayOff_Initialization:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_DelayOff_Main:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_DimmerIntr_Initialization:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_DimmerLights_SelectPointer:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_DimmerLights_Initialization:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_setDimmerLights_DimmingOn:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_DimmerLights_Main:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_DimmerLights_TMR_1:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ??_DimmerLights_TMR_1:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_DimmerLights_IOC_1:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_LedPointSelect:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_LED_Initialization:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_LED_Main:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_Mcu_Initialization:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_ISR:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_Flash_Memory_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_Flash_Memory_Main:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_Flash_Memory_Unlock:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_Flash_Memory_Erasing:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_setMemory_Modify:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_setMemory_LoopSave:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_WDT_Main:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_setRF_Learn:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_TouchPower:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_SwPointSelect:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_getDimmerLights_Status:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_getLoad_OK:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ?_getMain_All_Error_Status:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     ?_getMain_All_LightsStatus:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0070                     ?_getDimmerLights_Allow_Condition:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0070                     ?_getDimmerLights_PercentToValue:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0070                     ?_getDimmerLights_ValueToPercent:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0070                     ?_getCmd_Status:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0070                     ?_Flash_Memory_Read:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0070                     ?_getRF_KeyStatus:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0070                     ?_getSw_KeyStatus:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0070                     ?_getDelayOff_GO:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_getDimmerIntr_DimmingValue:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_getDimmerLights_Line:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getDimmer_LoadGO:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_getDimmer_Load_Status:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getMain_Lights_Count:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?i1___awdiv:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     setDimmerLights_Initialization@lights:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0070                     getDimmerLights_Allow_Condition@lights:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     getSw_KeyStatus@sw:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     i1___awdiv@divisor:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928                           
  2929                           ; 2 bytes @ 0x0
  2930  0070                     	ds	1
  2931  0071                     ??_TMR1_ISR:	
  2932                           
  2933                           ; 0 bytes @ 0x1
  2934  0071                     	ds	1
  2935  0072                     i1___awdiv@dividend:	
  2936                           
  2937                           ; 2 bytes @ 0x2
  2938  0072                     	ds	2
  2939  0074                     ??i1___awdiv:	
  2940                           
  2941                           ; 0 bytes @ 0x4
  2942  0074                     	ds	1
  2943  0075                     i1___awdiv@counter:	
  2944                           
  2945                           ; 1 bytes @ 0x5
  2946  0075                     	ds	1
  2947  0076                     i1___awdiv@sign:	
  2948                           
  2949                           ; 1 bytes @ 0x6
  2950  0076                     	ds	1
  2951  0077                     i1___awdiv@quotient:	
  2952                           
  2953                           ; 2 bytes @ 0x7
  2954  0077                     	ds	2
  2955  0079                     ??_DimmerLights_IOC_1:	
  2956                           
  2957                           ; 0 bytes @ 0x9
  2958  0079                     	ds	3
  2959  007C                     ??_IOC_ISR:	
  2960  007C                     ??_ISR:	
  2961                           ; 0 bytes @ 0xC
  2962                           
  2963                           
  2964                           ; 0 bytes @ 0xC
  2965  007C                     	ds	1
  2966                           
  2967                           	psect	cstackBANK0
  2968  0020                     __pcstackBANK0:	
  2969  0020                     ??_RF_Timeout_Counter:	
  2970  0020                     ??_setRF_TimeoutCleared:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_CC2500_WriteByte:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_CC2500_ReadByte:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ?_DelayTime_1us:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_setDimmerLights_Initialization:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_getLoad_OK:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_getMain_All_Error_Status:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_getMain_All_LightsStatus:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_setDimmerLights_Line:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_getCmd_Status:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ?_setCmd_Status:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_setTxData:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_setRF_TransceiveGO:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_Fosc_Set:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_IO_Set:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_TMR1_Set:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_ADC_Set:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_IOC_Set:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_WDT_Set:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_Timeout_Counter:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_set_TimeoutCleared:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_Flash_Memory_Read:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ?_setMemory_Data:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_Flash_Memory_Write:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_WDT_Clearing:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_myMain_Initialization:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_Temp_Initialization:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_setLoad_AH_AL_Restore:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_setTemp_Initialization:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_setRF_Initialization:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_getRF_KeyStatus:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_getSw_KeyStatus:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_Buzzer_Initialization:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_Buzzer_Main:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_DelayOffPointSelect:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_DimmerIntr_Initialization:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ?_setDimmerIntr_ControlStatus:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ?_setDimmerIntr_DimmingValue:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_getDimmerIntr_DimmingValue:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ?_setDimmerIntr_Dimming_RF:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_DimmerLights_SelectPointer:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_getDimmerLights_Line:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_getDimmer_LoadGO:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_getDimmer_Load_Status:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_LedPointSelect:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_Flash_Memory_Unlock:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_Flash_Memory_Erasing:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_setMemory_Modify:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_setMemory_LoopSave:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_WDT_Main:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_getMain_Lights_Count:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_setRF_Learn:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_TouchPower:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ??_SwPointSelect:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ?___bmul:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ?_getBuz_GO:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144  0020                     ?_getAD:	
  3145                           ; 2 bytes @ 0x0
  3146                           
  3147  0020                     ?___wmul:	
  3148                           ; 2 bytes @ 0x0
  3149                           
  3150  0020                     ?___awdiv:	
  3151                           ; 2 bytes @ 0x0
  3152                           
  3153  0020                     ?___lwdiv:	
  3154                           ; 2 bytes @ 0x0
  3155                           
  3156  0020                     ?___ftpack:	
  3157                           ; 2 bytes @ 0x0
  3158                           
  3159  0020                     setDimmerIntr_ControlStatus@command:	
  3160                           ; 3 bytes @ 0x0
  3161                           
  3162  0020                     setDimmerIntr_DimmingValue@value:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0020                     setDimmerIntr_Dimming_Sw@command:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0020                     setDimmerIntr_Dimming_RF@command:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     setDimmerLights_Line@lights:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     getDimmerLights_Line@line:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0020                     getDimmer_LoadGO@loadgo:	
  3181                           ; 1 bytes @ 0x0
  3182                           
  3183  0020                     getDimmer_Load_Status@status:	
  3184                           ; 1 bytes @ 0x0
  3185                           
  3186  0020                     getAD@adcon1:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0020                     setMemory_Data@data:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0020                     getMain_All_LightsStatus@status:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0020                     getMain_Lights_Count@count:	
  3196                           ; 1 bytes @ 0x0
  3197                           
  3198  0020                     setCmd_Status@cmd:	
  3199                           ; 1 bytes @ 0x0
  3200                           
  3201  0020                     getCmd_Status@number:	
  3202                           ; 1 bytes @ 0x0
  3203                           
  3204  0020                     getLoad_OK@ok:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0020                     ___bmul@multiplicand:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0020                     DelayTime_1us@count:	
  3211                           ; 1 bytes @ 0x0
  3212                           
  3213  0020                     ___wmul@multiplier:	
  3214                           ; 2 bytes @ 0x0
  3215                           
  3216  0020                     ___awdiv@divisor:	
  3217                           ; 2 bytes @ 0x0
  3218                           
  3219  0020                     ___lwdiv@divisor:	
  3220                           ; 2 bytes @ 0x0
  3221                           
  3222  0020                     ___ftpack@arg:	
  3223                           ; 2 bytes @ 0x0
  3224                           
  3225                           
  3226                           ; 3 bytes @ 0x0
  3227  0020                     	ds	1
  3228  0021                     ??_getDimmerLights_Allow_Condition:	
  3229  0021                     ??_setCmd_Status:	
  3230                           ; 0 bytes @ 0x1
  3231                           
  3232  0021                     ??_setMemory_Data:	
  3233                           ; 0 bytes @ 0x1
  3234                           
  3235  0021                     ??_RF_Initialization:	
  3236                           ; 0 bytes @ 0x1
  3237                           
  3238  0021                     ??_setDimmerIntr_ControlStatus:	
  3239                           ; 0 bytes @ 0x1
  3240                           
  3241  0021                     ??_setDimmerIntr_DimmingValue:	
  3242                           ; 0 bytes @ 0x1
  3243                           
  3244  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3245                           ; 0 bytes @ 0x1
  3246                           
  3247  0021                     ??_setDimmerIntr_Dimming_RF:	
  3248                           ; 0 bytes @ 0x1
  3249                           
  3250  0021                     ??_DimmerLights_Initialization:	
  3251                           ; 0 bytes @ 0x1
  3252                           
  3253  0021                     ??_Mcu_Initialization:	
  3254                           ; 0 bytes @ 0x1
  3255                           
  3256  0021                     ??___bmul:	
  3257                           ; 0 bytes @ 0x1
  3258                           
  3259  0021                     CC2500_WriteByte@loop_a:	
  3260                           ; 0 bytes @ 0x1
  3261                           
  3262  0021                     CC2500_ReadByte@loop_b:	
  3263                           ; 1 bytes @ 0x1
  3264                           
  3265  0021                     DelayOffPointSelect@sw:	
  3266                           ; 1 bytes @ 0x1
  3267                           
  3268  0021                     getDimmerIntr_DimmingValue@lights:	
  3269                           ; 1 bytes @ 0x1
  3270                           
  3271  0021                     DimmerLights_SelectPointer@lights:	
  3272                           ; 1 bytes @ 0x1
  3273                           
  3274  0021                     LedPointSelect@led:	
  3275                           ; 1 bytes @ 0x1
  3276                           
  3277  0021                     Flash_Memory_Read@i:	
  3278                           ; 1 bytes @ 0x1
  3279                           
  3280  0021                     Flash_Memory_Write@i:	
  3281                           ; 1 bytes @ 0x1
  3282                           
  3283  0021                     setMemory_Modify@command:	
  3284                           ; 1 bytes @ 0x1
  3285                           
  3286  0021                     setMemory_LoopSave@command:	
  3287                           ; 1 bytes @ 0x1
  3288                           
  3289  0021                     getMain_Lights_Count@status1:	
  3290                           ; 1 bytes @ 0x1
  3291                           
  3292  0021                     getCmd_Status@cmd:	
  3293                           ; 1 bytes @ 0x1
  3294                           
  3295  0021                     setLoad_AH_AL_Restore@i:	
  3296                           ; 1 bytes @ 0x1
  3297                           
  3298  0021                     setRF_Learn@command:	
  3299                           ; 1 bytes @ 0x1
  3300                           
  3301  0021                     getRF_KeyStatus@key:	
  3302                           ; 1 bytes @ 0x1
  3303                           
  3304  0021                     setRF_TransceiveGO@command:	
  3305                           ; 1 bytes @ 0x1
  3306                           
  3307  0021                     SwPointSelect@sw:	
  3308                           ; 1 bytes @ 0x1
  3309                           
  3310  0021                     getSw_KeyStatus@status:	
  3311                           ; 1 bytes @ 0x1
  3312                           
  3313  0021                     _getMain_All_Error_Status$3400:	
  3314                           ; 1 bytes @ 0x1
  3315                           
  3316                           
  3317                           ; 2 bytes @ 0x1
  3318  0021                     	ds	1
  3319  0022                     ??_CC2500_WriteCommand:	
  3320  0022                     ??_CC2500_ReadStatus:	
  3321                           ; 0 bytes @ 0x2
  3322                           
  3323  0022                     ??_DelayTime_1us:	
  3324                           ; 0 bytes @ 0x2
  3325                           
  3326  0022                     ?_CC2500_WriteREG:	
  3327                           ; 0 bytes @ 0x2
  3328                           
  3329  0022                     ??_DlyOff_Initialization:	
  3330                           ; 0 bytes @ 0x2
  3331                           
  3332  0022                     ??_getDimmerLights_Status:	
  3333                           ; 0 bytes @ 0x2
  3334                           
  3335  0022                     ??_setDimmerLights_SwOff:	
  3336                           ; 0 bytes @ 0x2
  3337                           
  3338  0022                     ?_setLED:	
  3339                           ; 0 bytes @ 0x2
  3340                           
  3341  0022                     ??_setLED_Main:	
  3342                           ; 0 bytes @ 0x2
  3343                           
  3344  0022                     ??_Load_Initialization:	
  3345                           ; 0 bytes @ 0x2
  3346                           
  3347  0022                     ??_getBuz_GO:	
  3348                           ; 0 bytes @ 0x2
  3349                           
  3350  0022                     ??_getDelayOff_GO:	
  3351                           ; 0 bytes @ 0x2
  3352                           
  3353  0022                     ??_setDimmerLights_DimmingOn:	
  3354                           ; 0 bytes @ 0x2
  3355                           
  3356  0022                     ?_setDimmerLights_DimmingRun:	
  3357                           ; 0 bytes @ 0x2
  3358                           
  3359  0022                     CC2500_WriteREG@value:	
  3360                           ; 0 bytes @ 0x2
  3361                           
  3362  0022                     DlyOff_Initialization@sw:	
  3363                           ; 1 bytes @ 0x2
  3364                           
  3365  0022                     getDelayOff_GO@sw:	
  3366                           ; 1 bytes @ 0x2
  3367                           
  3368  0022                     setDimmerIntr_ControlStatus@lights:	
  3369                           ; 1 bytes @ 0x2
  3370                           
  3371  0022                     setDimmerIntr_DimmingValue@lights:	
  3372                           ; 1 bytes @ 0x2
  3373                           
  3374  0022                     getDimmerIntr_DimmingValue@value:	
  3375                           ; 1 bytes @ 0x2
  3376                           
  3377  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3378                           ; 1 bytes @ 0x2
  3379                           
  3380  0022                     setDimmerIntr_Dimming_RF@lights:	
  3381                           ; 1 bytes @ 0x2
  3382                           
  3383  0022                     setDimmerLights_SwOff@sw:	
  3384                           ; 1 bytes @ 0x2
  3385                           
  3386  0022                     setDimmerLights_DimmingOn@sw:	
  3387                           ; 1 bytes @ 0x2
  3388                           
  3389  0022                     getDimmerLights_Allow_Condition@allow:	
  3390                           ; 1 bytes @ 0x2
  3391                           
  3392  0022                     getDimmerLights_Status@lights:	
  3393                           ; 1 bytes @ 0x2
  3394                           
  3395  0022                     setDimmerLights_DimmingRun@command:	
  3396                           ; 1 bytes @ 0x2
  3397                           
  3398  0022                     setLED@command:	
  3399                           ; 1 bytes @ 0x2
  3400                           
  3401  0022                     Flash_Memory_Read@address:	
  3402                           ; 1 bytes @ 0x2
  3403                           
  3404  0022                     setMemory_Data@address:	
  3405                           ; 1 bytes @ 0x2
  3406                           
  3407  0022                     setCmd_Status@number:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0022                     _getRF_KeyStatus$5085:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413  0022                     _getSw_KeyStatus$6073:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0022                     ___bmul@product:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0022                     DelayTime_1us@i:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0022                     ___wmul@multiplicand:	
  3423                           ; 2 bytes @ 0x2
  3424                           
  3425  0022                     ___awdiv@dividend:	
  3426                           ; 2 bytes @ 0x2
  3427                           
  3428  0022                     ___lwdiv@dividend:	
  3429                           ; 2 bytes @ 0x2
  3430                           
  3431                           
  3432                           ; 2 bytes @ 0x2
  3433  0022                     	ds	1
  3434  0023                     ??_CC2500_WriteREG:	
  3435  0023                     ??_setLED:	
  3436                           ; 0 bytes @ 0x3
  3437                           
  3438  0023                     ??_DelayOff_Initialization:	
  3439                           ; 0 bytes @ 0x3
  3440                           
  3441  0023                     ??_setDimmerLights_DimmingRun:	
  3442                           ; 0 bytes @ 0x3
  3443                           
  3444  0023                     ??_getAD:	
  3445                           ; 0 bytes @ 0x3
  3446                           
  3447  0023                     CC2500_WriteCommand@command:	
  3448                           ; 0 bytes @ 0x3
  3449                           
  3450  0023                     CC2500_ReadStatus@status_addr:	
  3451                           ; 1 bytes @ 0x3
  3452                           
  3453  0023                     getDelayOff_GO@go:	
  3454                           ; 1 bytes @ 0x3
  3455                           
  3456  0023                     _getDimmerLights_Allow_Condition$2141:	
  3457                           ; 1 bytes @ 0x3
  3458                           
  3459  0023                     getDimmerLights_Status@status:	
  3460                           ; 1 bytes @ 0x3
  3461                           
  3462  0023                     setLED@led:	
  3463                           ; 1 bytes @ 0x3
  3464                           
  3465  0023                     getAD@adcon0:	
  3466                           ; 1 bytes @ 0x3
  3467                           
  3468  0023                     Flash_Memory_Read@ret:	
  3469                           ; 1 bytes @ 0x3
  3470                           
  3471  0023                     ___bmul@multiplier:	
  3472                           ; 1 bytes @ 0x3
  3473                           
  3474  0023                     ___ftpack@exp:	
  3475                           ; 1 bytes @ 0x3
  3476                           
  3477  0023                     _getMain_All_Error_Status$3401:	
  3478                           ; 1 bytes @ 0x3
  3479                           
  3480                           
  3481                           ; 2 bytes @ 0x3
  3482  0023                     	ds	1
  3483  0024                     ??_CC2500_ClearTXFIFO:	
  3484  0024                     ??_CC2500_ClearRXFIFO:	
  3485                           ; 0 bytes @ 0x4
  3486                           
  3487  0024                     ??_CC2500_SIDLEMode:	
  3488                           ; 0 bytes @ 0x4
  3489                           
  3490  0024                     ??_setLED_Initialization:	
  3491                           ; 0 bytes @ 0x4
  3492                           
  3493  0024                     ??_Flash_Memory_Modify:	
  3494                           ; 0 bytes @ 0x4
  3495                           
  3496  0024                     ??_getLoad_AD:	
  3497                           ; 0 bytes @ 0x4
  3498                           
  3499  0024                     ??_getTemp_AD:	
  3500                           ; 0 bytes @ 0x4
  3501                           
  3502  0024                     ??_RF_RxDisable:	
  3503                           ; 0 bytes @ 0x4
  3504                           
  3505  0024                     ??_setSw_Initialization:	
  3506                           ; 0 bytes @ 0x4
  3507                           
  3508  0024                     ??_CC2500_TxData:	
  3509                           ; 0 bytes @ 0x4
  3510                           
  3511  0024                     ??_CC2500_RxData:	
  3512                           ; 0 bytes @ 0x4
  3513                           
  3514  0024                     ??___wmul:	
  3515                           ; 0 bytes @ 0x4
  3516                           
  3517  0024                     ??___awdiv:	
  3518                           ; 0 bytes @ 0x4
  3519                           
  3520  0024                     ??___lwdiv:	
  3521                           ; 0 bytes @ 0x4
  3522                           
  3523  0024                     CC2500_WriteREG@w_addr:	
  3524                           ; 0 bytes @ 0x4
  3525                           
  3526  0024                     setDimmerLights_DimmingRun@lights:	
  3527                           ; 1 bytes @ 0x4
  3528                           
  3529  0024                     setLED_Initialization@led:	
  3530                           ; 1 bytes @ 0x4
  3531                           
  3532  0024                     setLED_Main@led:	
  3533                           ; 1 bytes @ 0x4
  3534                           
  3535  0024                     setSw_Initialization@sw:	
  3536                           ; 1 bytes @ 0x4
  3537                           
  3538  0024                     ___ftpack@sign:	
  3539                           ; 1 bytes @ 0x4
  3540                           
  3541  0024                     getBuz_GO@i:	
  3542                           ; 1 bytes @ 0x4
  3543                           
  3544  0024                     DelayTime_1us@j:	
  3545                           ; 2 bytes @ 0x4
  3546                           
  3547  0024                     ___wmul@product:	
  3548                           ; 2 bytes @ 0x4
  3549                           
  3550                           
  3551                           ; 2 bytes @ 0x4
  3552  0024                     	ds	1
  3553  0025                     ??_CC2500_InitSetREG:	
  3554  0025                     ??_CC2500_InitPATable:	
  3555                           ; 0 bytes @ 0x5
  3556                           
  3557  0025                     ??_Switch_Initialization:	
  3558                           ; 0 bytes @ 0x5
  3559                           
  3560  0025                     ??___ftpack:	
  3561                           ; 0 bytes @ 0x5
  3562                           
  3563  0025                     ??_LED_Initialization:	
  3564                           ; 0 bytes @ 0x5
  3565                           
  3566  0025                     ??_LED_Main:	
  3567                           ; 0 bytes @ 0x5
  3568                           
  3569  0025                     CC2500_TxData@loop_e:	
  3570                           ; 0 bytes @ 0x5
  3571                           
  3572  0025                     CC2500_RxData@loop_f:	
  3573                           ; 1 bytes @ 0x5
  3574                           
  3575  0025                     Flash_Memory_Modify@i:	
  3576                           ; 1 bytes @ 0x5
  3577                           
  3578  0025                     getMain_All_Error_Status@command:	
  3579                           ; 1 bytes @ 0x5
  3580                           
  3581  0025                     getTemp_AD@channel:	
  3582                           ; 1 bytes @ 0x5
  3583                           
  3584  0025                     ___awdiv@counter:	
  3585                           ; 1 bytes @ 0x5
  3586                           
  3587  0025                     ___lwdiv@quotient:	
  3588                           ; 1 bytes @ 0x5
  3589                           
  3590                           
  3591                           ; 2 bytes @ 0x5
  3592  0025                     	ds	1
  3593  0026                     ??_CC2500_PowerRST:	
  3594  0026                     ??_CC2500_FrequencyCabr:	
  3595                           ; 0 bytes @ 0x6
  3596                           
  3597  0026                     ??_Flash_Memory_Main:	
  3598                           ; 0 bytes @ 0x6
  3599                           
  3600  0026                     CC2500_InitSetREG@temp1:	
  3601                           ; 0 bytes @ 0x6
  3602                           
  3603  0026                     CC2500_InitPATable@temp:	
  3604                           ; 1 bytes @ 0x6
  3605                           
  3606  0026                     getMain_All_Error_Status@status:	
  3607                           ; 1 bytes @ 0x6
  3608                           
  3609  0026                     getLoad_AD@channel:	
  3610                           ; 1 bytes @ 0x6
  3611                           
  3612  0026                     ___awdiv@sign:	
  3613                           ; 1 bytes @ 0x6
  3614                           
  3615  0026                     getTemp_AD@ADRES:	
  3616                           ; 1 bytes @ 0x6
  3617                           
  3618                           
  3619                           ; 2 bytes @ 0x6
  3620  0026                     	ds	1
  3621  0027                     CC2500_InitSetREG@temp2:	
  3622  0027                     CC2500_InitPATable@loop_d:	
  3623                           ; 1 bytes @ 0x7
  3624                           
  3625  0027                     getLoad_AD@k:	
  3626                           ; 1 bytes @ 0x7
  3627                           
  3628  0027                     ___lwdiv@counter:	
  3629                           ; 1 bytes @ 0x7
  3630                           
  3631  0027                     ___awdiv@quotient:	
  3632                           ; 1 bytes @ 0x7
  3633                           
  3634                           
  3635                           ; 2 bytes @ 0x7
  3636  0027                     	ds	1
  3637  0028                     ??_Load_Main:	
  3638  0028                     ?___awtoft:	
  3639                           ; 0 bytes @ 0x8
  3640                           
  3641  0028                     CC2500_InitSetREG@loop_c:	
  3642                           ; 3 bytes @ 0x8
  3643                           
  3644  0028                     getLoad_AD@j:	
  3645                           ; 1 bytes @ 0x8
  3646                           
  3647  0028                     ___awtoft@c:	
  3648                           ; 1 bytes @ 0x8
  3649                           
  3650                           
  3651                           ; 2 bytes @ 0x8
  3652  0028                     	ds	1
  3653  0029                     ?_setBuz:	
  3654  0029                     ??_CC2500_PowerOnInitial:	
  3655                           ; 0 bytes @ 0x9
  3656                           
  3657  0029                     setBuz@time:	
  3658                           ; 0 bytes @ 0x9
  3659                           
  3660  0029                     getLoad_AD@ADRES:	
  3661                           ; 2 bytes @ 0x9
  3662                           
  3663                           
  3664                           ; 2 bytes @ 0x9
  3665  0029                     	ds	1
  3666  002A                     _Load_Main$3755:	
  3667                           
  3668                           ; 2 bytes @ 0xA
  3669  002A                     	ds	1
  3670  002B                     ??_setBuz:	
  3671  002B                     ??___awtoft:	
  3672                           ; 0 bytes @ 0xB
  3673                           
  3674  002B                     getLoad_AD@i:	
  3675                           ; 0 bytes @ 0xB
  3676                           
  3677                           
  3678                           ; 1 bytes @ 0xB
  3679  002B                     	ds	1
  3680  002C                     setBuz@count:	
  3681  002C                     Load_Main@error:	
  3682                           ; 1 bytes @ 0xC
  3683                           
  3684                           
  3685                           ; 1 bytes @ 0xC
  3686  002C                     	ds	1
  3687  002D                     ??_setDimmerLights_SwOn:	
  3688  002D                     ??_my_MainTimer:	
  3689                           ; 0 bytes @ 0xD
  3690                           
  3691  002D                     ??_Exception_Main:	
  3692                           ; 0 bytes @ 0xD
  3693                           
  3694  002D                     setDimmerLights_SwOn@sw:	
  3695                           ; 0 bytes @ 0xD
  3696                           
  3697  002D                     Load_Main@ErrorCountValue:	
  3698                           ; 1 bytes @ 0xD
  3699                           
  3700  002D                     ___awtoft@sign:	
  3701                           ; 1 bytes @ 0xD
  3702                           
  3703                           
  3704                           ; 1 bytes @ 0xD
  3705  002D                     	ds	1
  3706  002E                     ?___ftdiv:	
  3707  002E                     ?___ftmul:	
  3708                           ; 3 bytes @ 0xE
  3709                           
  3710  002E                     setDimmerLights_SwOn@idle:	
  3711                           ; 3 bytes @ 0xE
  3712                           
  3713  002E                     Exception_Main@status:	
  3714                           ; 1 bytes @ 0xE
  3715                           
  3716  002E                     Load_Main@Load_RunStatus:	
  3717                           ; 1 bytes @ 0xE
  3718                           
  3719  002E                     ___ftdiv@f2:	
  3720                           ; 1 bytes @ 0xE
  3721                           
  3722  002E                     ___ftmul@f1:	
  3723                           ; 3 bytes @ 0xE
  3724                           
  3725                           
  3726                           ; 3 bytes @ 0xE
  3727  002E                     	ds	1
  3728  002F                     ??_setSw_Main:	
  3729  002F                     Exception_Main@count:	
  3730                           ; 0 bytes @ 0xF
  3731                           
  3732  002F                     Load_Main@LightsCount:	
  3733                           ; 1 bytes @ 0xF
  3734                           
  3735                           
  3736                           ; 1 bytes @ 0xF
  3737  002F                     	ds	1
  3738  0030                     Exception_Main@i:	
  3739  0030                     Load_Main@i:	
  3740                           ; 2 bytes @ 0x10
  3741                           
  3742                           
  3743                           ; 2 bytes @ 0x10
  3744  0030                     	ds	1
  3745  0031                     setSw_Main@sw:	
  3746  0031                     ___ftdiv@f1:	
  3747                           ; 1 bytes @ 0x11
  3748                           
  3749  0031                     ___ftmul@f2:	
  3750                           ; 3 bytes @ 0x11
  3751                           
  3752                           
  3753                           ; 3 bytes @ 0x11
  3754  0031                     	ds	1
  3755  0032                     ??_Switch_Main:	
  3756  0032                     Exception_Main@i_3412:	
  3757                           ; 0 bytes @ 0x12
  3758                           
  3759                           
  3760                           ; 2 bytes @ 0x12
  3761  0032                     	ds	2
  3762  0034                     ??___ftdiv:	
  3763  0034                     ??___ftmul:	
  3764                           ; 0 bytes @ 0x14
  3765                           
  3766  0034                     Exception_Main@lights:	
  3767                           ; 0 bytes @ 0x14
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0x14
  3771  0034                     	ds	1
  3772  0035                     Exception_Main@error:	
  3773                           
  3774                           ; 1 bytes @ 0x15
  3775  0035                     	ds	3
  3776  0038                     ___ftdiv@cntr:	
  3777  0038                     ___ftmul@exp:	
  3778                           ; 1 bytes @ 0x18
  3779                           
  3780                           
  3781                           ; 1 bytes @ 0x18
  3782  0038                     	ds	1
  3783  0039                     ___ftdiv@f3:	
  3784  0039                     ___ftmul@f3_as_product:	
  3785                           ; 3 bytes @ 0x19
  3786                           
  3787                           
  3788                           ; 3 bytes @ 0x19
  3789  0039                     	ds	3
  3790  003C                     ___ftdiv@exp:	
  3791  003C                     ___ftmul@cntr:	
  3792                           ; 1 bytes @ 0x1C
  3793                           
  3794                           
  3795                           ; 1 bytes @ 0x1C
  3796  003C                     	ds	1
  3797  003D                     ___ftdiv@sign:	
  3798  003D                     ___ftmul@sign:	
  3799                           ; 1 bytes @ 0x1D
  3800                           
  3801                           
  3802                           ; 1 bytes @ 0x1D
  3803  003D                     	ds	1
  3804  003E                     ?___ftneg:	
  3805  003E                     ___ftneg@f1:	
  3806                           ; 3 bytes @ 0x1E
  3807                           
  3808                           
  3809                           ; 3 bytes @ 0x1E
  3810  003E                     	ds	3
  3811  0041                     ??___ftneg:	
  3812  0041                     ?___ftadd:	
  3813                           ; 0 bytes @ 0x21
  3814                           
  3815  0041                     ___ftadd@f1:	
  3816                           ; 3 bytes @ 0x21
  3817                           
  3818                           
  3819                           ; 3 bytes @ 0x21
  3820  0041                     	ds	3
  3821  0044                     ___ftadd@f2:	
  3822                           
  3823                           ; 3 bytes @ 0x24
  3824  0044                     	ds	3
  3825  0047                     ??___ftadd:	
  3826                           
  3827                           ; 0 bytes @ 0x27
  3828  0047                     	ds	4
  3829  004B                     ___ftadd@sign:	
  3830                           
  3831                           ; 1 bytes @ 0x2B
  3832  004B                     	ds	1
  3833  004C                     ___ftadd@exp2:	
  3834                           
  3835                           ; 1 bytes @ 0x2C
  3836  004C                     	ds	1
  3837  004D                     ___ftadd@exp1:	
  3838                           
  3839                           ; 1 bytes @ 0x2D
  3840  004D                     	ds	1
  3841  004E                     ?___fttol:	
  3842  004E                     ___fttol@f1:	
  3843                           ; 4 bytes @ 0x2E
  3844                           
  3845                           
  3846                           ; 3 bytes @ 0x2E
  3847  004E                     	ds	4
  3848  0052                     ??___fttol:	
  3849                           
  3850                           ; 0 bytes @ 0x32
  3851  0052                     	ds	4
  3852  0056                     ___fttol@sign1:	
  3853                           
  3854                           ; 1 bytes @ 0x36
  3855  0056                     	ds	1
  3856  0057                     ___fttol@lval:	
  3857                           
  3858                           ; 4 bytes @ 0x37
  3859  0057                     	ds	4
  3860  005B                     ___fttol@exp1:	
  3861                           
  3862                           ; 1 bytes @ 0x3B
  3863  005B                     	ds	1
  3864  005C                     ??_getDimmerLights_PercentToValue:	
  3865  005C                     ??_getDimmerLights_ValueToPercent:	
  3866                           ; 0 bytes @ 0x3C
  3867                           
  3868                           
  3869                           ; 0 bytes @ 0x3C
  3870  005C                     	ds	2
  3871  005E                     getDimmerLights_PercentToValue@value:	
  3872  005E                     getDimmerLights_ValueToPercent@value:	
  3873                           ; 1 bytes @ 0x3E
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x3E
  3877  005E                     	ds	1
  3878  005F                     getDimmerLights_PercentToValue@i:	
  3879  005F                     getDimmerLights_ValueToPercent@i:	
  3880                           ; 3 bytes @ 0x3F
  3881                           
  3882                           
  3883                           ; 3 bytes @ 0x3F
  3884  005F                     	ds	3
  3885  0062                     ?_setProductData:	
  3886  0062                     ?_setDimmerIntr_MaxmumValue:	
  3887                           ; 0 bytes @ 0x42
  3888                           
  3889  0062                     ??_Flash_Memory_Initialization:	
  3890                           ; 0 bytes @ 0x42
  3891                           
  3892  0062                     setDimmerIntr_MaxmumValue@value:	
  3893                           ; 0 bytes @ 0x42
  3894                           
  3895  0062                     setProductData@value:	
  3896                           ; 1 bytes @ 0x42
  3897                           
  3898                           
  3899                           ; 1 bytes @ 0x42
  3900  0062                     	ds	1
  3901  0063                     ??_setProductData:	
  3902  0063                     ??_setDimmerIntr_MaxmumValue:	
  3903                           ; 0 bytes @ 0x43
  3904                           
  3905  0063                     Flash_Memory_Initialization@i:	
  3906                           ; 0 bytes @ 0x43
  3907                           
  3908                           
  3909                           ; 1 bytes @ 0x43
  3910  0063                     	ds	1
  3911  0064                     setDimmerIntr_MaxmumValue@lights:	
  3912  0064                     setProductData@address:	
  3913                           ; 1 bytes @ 0x44
  3914                           
  3915                           
  3916                           ; 1 bytes @ 0x44
  3917  0064                     	ds	1
  3918  0065                     ??_DlyOff_Main:	
  3919  0065                     ?_setRF_DimmerLights:	
  3920                           ; 0 bytes @ 0x45
  3921                           
  3922  0065                     ??_setTemp_Main:	
  3923                           ; 0 bytes @ 0x45
  3924                           
  3925  0065                     ??_setLog_Code:	
  3926                           ; 0 bytes @ 0x45
  3927                           
  3928  0065                     ??_setRFSW_AdjControl:	
  3929                           ; 0 bytes @ 0x45
  3930                           
  3931  0065                     ?_setDelayOff_GO:	
  3932                           ; 0 bytes @ 0x45
  3933                           
  3934  0065                     setDelayOff_GO@command:	
  3935                           ; 0 bytes @ 0x45
  3936                           
  3937  0065                     setRF_DimmerLights@on:	
  3938                           ; 1 bytes @ 0x45
  3939                           
  3940                           
  3941                           ; 1 bytes @ 0x45
  3942  0065                     	ds	1
  3943  0066                     ??_setRF_DimmerLights:	
  3944  0066                     setDelayOff_GO@value:	
  3945                           ; 0 bytes @ 0x46
  3946                           
  3947  0066                     setTemp_Main@error:	
  3948                           ; 1 bytes @ 0x46
  3949                           
  3950                           
  3951                           ; 1 bytes @ 0x46
  3952  0066                     	ds	1
  3953  0067                     ??_setDelayOff_GO:	
  3954  0067                     DlyOff_Main@sw:	
  3955                           ; 0 bytes @ 0x47
  3956                           
  3957  0067                     setRFSW_AdjControl@status:	
  3958                           ; 1 bytes @ 0x47
  3959                           
  3960  0067                     setTemp_Main@SafeValue:	
  3961                           ; 1 bytes @ 0x47
  3962                           
  3963                           
  3964                           ; 2 bytes @ 0x47
  3965  0067                     	ds	1
  3966  0068                     ??_DelayOff_Main:	
  3967  0068                     setRFSW_AdjControl@sw:	
  3968                           ; 0 bytes @ 0x48
  3969                           
  3970  0068                     setRF_DimmerLights@status:	
  3971                           ; 1 bytes @ 0x48
  3972                           
  3973                           
  3974                           ; 1 bytes @ 0x48
  3975  0068                     	ds	1
  3976  0069                     setDelayOff_GO@i:	
  3977  0069                     setRF_DimmerLights@lights:	
  3978                           ; 1 bytes @ 0x49
  3979                           
  3980  0069                     setTemp_Main@DangerValue:	
  3981                           ; 1 bytes @ 0x49
  3982                           
  3983                           
  3984                           ; 2 bytes @ 0x49
  3985  0069                     	ds	1
  3986  006A                     ?_setDimmerLights_Dimming:	
  3987  006A                     setDelayOff_GO@j:	
  3988                           ; 0 bytes @ 0x4A
  3989                           
  3990  006A                     setDimmerLights_Dimming@status:	
  3991                           ; 1 bytes @ 0x4A
  3992                           
  3993                           
  3994                           ; 1 bytes @ 0x4A
  3995  006A                     	ds	1
  3996  006B                     ??_setDimmerLights_Dimming:	
  3997  006B                     setDelayOff_GO@k:	
  3998                           ; 0 bytes @ 0x4B
  3999                           
  4000  006B                     setTemp_Main@TempGO:	
  4001                           ; 1 bytes @ 0x4B
  4002                           
  4003                           
  4004                           ; 1 bytes @ 0x4B
  4005  006B                     	ds	1
  4006  006C                     setDelayOff_GO@sw:	
  4007  006C                     setDimmerLights_Dimming@lights:	
  4008                           ; 1 bytes @ 0x4C
  4009                           
  4010  006C                     setTemp_Main@AD:	
  4011                           ; 1 bytes @ 0x4C
  4012                           
  4013                           
  4014                           ; 2 bytes @ 0x4C
  4015  006C                     	ds	1
  4016  006D                     ?_setDimmerLights_OnOff:	
  4017  006D                     ??_setRFSW_Control:	
  4018                           ; 0 bytes @ 0x4D
  4019                           
  4020  006D                     setDimmerLights_OnOff@command:	
  4021                           ; 0 bytes @ 0x4D
  4022                           
  4023                           
  4024                           ; 1 bytes @ 0x4D
  4025  006D                     	ds	1
  4026  006E                     ??_setDimmerLights_OnOff:	
  4027  006E                     ??_Temp_Main:	
  4028                           ; 0 bytes @ 0x4E
  4029                           
  4030  006E                     setRFSW_Control@status:	
  4031                           ; 0 bytes @ 0x4E
  4032                           
  4033                           
  4034                           ; 1 bytes @ 0x4E
  4035  006E                     	ds	1
  4036  006F                     setRFSW_Control@sw:	
  4037                           
  4038                           ; 1 bytes @ 0x4F
  4039  006F                     	ds	1
  4040  0070                     ??_setDimmerLights_Main:	
  4041  0070                     ??_RF_Main:	
  4042                           ; 0 bytes @ 0x50
  4043                           
  4044  0070                     ??_setControl_Lights_Table:	
  4045                           ; 0 bytes @ 0x50
  4046                           
  4047  0070                     ??_DimmerLights_Main:	
  4048                           ; 0 bytes @ 0x50
  4049                           
  4050  0070                     ??_main:	
  4051                           ; 0 bytes @ 0x50
  4052                           
  4053                           
  4054                           	psect	maintext
  4055  1616                     __pmaintext:	
  4056                           ; 0 bytes @ 0x50
  4057 ;;
  4058 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4059 ;;
  4060 ;; *************** function _main *****************
  4061 ;; Defined at:
  4062 ;;		line 7 in file "../src/Main_B1.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  argc            2    4[BANK1 ] int 
  4065 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  2    4[BANK1 ] int 
  4070 ;; Registers used:
  4071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 17F/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4077 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;Total ram usage:        4 bytes
  4082 ;; Hardware stack levels required when called:   12
  4083 ;; This function calls:
  4084 ;;		_Buzzer_Initialization
  4085 ;;		_Buzzer_Main
  4086 ;;		_CC2500_PowerOnInitial
  4087 ;;		_DelayOff_Initialization
  4088 ;;		_DelayOff_Main
  4089 ;;		_DimmerLights_Initialization
  4090 ;;		_DimmerLights_Main
  4091 ;;		_Exception_Main
  4092 ;;		_Flash_Memory_Initialization
  4093 ;;		_Flash_Memory_Main
  4094 ;;		_LED_Initialization
  4095 ;;		_LED_Main
  4096 ;;		_Load_Initialization
  4097 ;;		_Load_Main
  4098 ;;		_Mcu_Initialization
  4099 ;;		_RF_Initialization
  4100 ;;		_RF_Main
  4101 ;;		_Switch_Initialization
  4102 ;;		_Switch_Main
  4103 ;;		_Temp_Initialization
  4104 ;;		_Temp_Main
  4105 ;;		_WDT_Main
  4106 ;;		_getLoad_AD
  4107 ;;		_getTemp_AD
  4108 ;;		_myMain_Initialization
  4109 ;;		_my_MainTimer
  4110 ;; This function is called by:
  4111 ;;		Startup code after reset
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           
  4116                           ;psect for function _main
  4117  1616                     _main:	
  4118                           
  4119                           ;Main_B1.c: 8: myMain_Initialization();
  4120                           
  4121                           ;incstack = 0
  4122                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4123  1616  319D  25C1  3196   	fcall	_myMain_Initialization
  4124                           
  4125                           ;Main_B1.c: 9: Mcu_Initialization();
  4126  1619  319D  2551  3196   	fcall	_Mcu_Initialization
  4127                           
  4128                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4129  161C  3184  2478  3196   	fcall	_Flash_Memory_Initialization
  4130                           
  4131                           ;Main_B1.c: 11: LED_Initialization();
  4132  161F  319B  2343  3196   	fcall	_LED_Initialization
  4133                           
  4134                           ;Main_B1.c: 12: Buzzer_Initialization();
  4135  1622  319B  2329  3196   	fcall	_Buzzer_Initialization
  4136                           
  4137                           ;Main_B1.c: 14: ;;
  4138                           ;Main_B1.c: 15: Temp_Initialization();
  4139  1625  319B  2335  3196   	fcall	_Temp_Initialization
  4140                           
  4141                           ;Main_B1.c: 16: Load_Initialization();
  4142  1628  319B  232C  3196   	fcall	_Load_Initialization
  4143                           
  4144                           ;Main_B1.c: 17: ;;
  4145                           ;Main_B1.c: 18: DelayOff_Initialization();
  4146  162B  319B  233B  3196   	fcall	_DelayOff_Initialization
  4147                           
  4148                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4149  162E  319B  237A  3196   	fcall	_DimmerLights_Initialization
  4150                           
  4151                           ;Main_B1.c: 21: ;;
  4152                           ;Main_B1.c: 22: ;;
  4153                           ;Main_B1.c: 23: ;;
  4154                           ;Main_B1.c: 24: Switch_Initialization();
  4155  1631  319B  235F  3196   	fcall	_Switch_Initialization
  4156                           
  4157                           ;Main_B1.c: 25: RF_Initialization();
  4158  1634  319B  232F  3196   	fcall	_RF_Initialization
  4159                           
  4160                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4161  1637  319D  25FD  3196   	fcall	_CC2500_PowerOnInitial
  4162  163A                     l8542:	
  4163                           ;Main_B1.c: 27: ;;
  4164                           ;Main_B1.c: 28: ;;
  4165                           ;Main_B1.c: 30: while (1) {
  4166                           
  4167                           
  4168                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4169  163A  0021               	movlb	1	; select bank1
  4170  163B  1C2E               	btfss	_myMain^(0+128),0
  4171  163C  2E45               	goto	l8546
  4172                           
  4173                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4174  163D  3005               	movlw	5
  4175  163E  318B  2332  3196   	fcall	_getLoad_AD
  4176                           
  4177                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4178  1641  3009               	movlw	9
  4179  1642  3193  23A5  3196   	fcall	_getTemp_AD
  4180  1645                     l8546:	
  4181                           
  4182                           ;Main_B1.c: 57: }
  4183                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4184  1645  0022               	movlb	2	; select bank2
  4185  1646  1C3E               	btfss	_Timer1^(0+256),0
  4186  1647  2E3A               	goto	l8542
  4187                           
  4188                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4189  1648  103E               	bcf	_Timer1^(0+256),0
  4190                           
  4191                           ;Main_B1.c: 96: my_MainTimer();
  4192  1649  3193  2329  3196   	fcall	_my_MainTimer
  4193                           
  4194                           ;Main_B1.c: 97: WDT_Main();
  4195  164C  319D  2563  3196   	fcall	_WDT_Main
  4196                           
  4197                           ;Main_B1.c: 98: ;;
  4198                           ;Main_B1.c: 99: ;;
  4199                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4200  164F  0021               	movlb	1	; select bank1
  4201  1650  1C2E               	btfss	_myMain^(0+128),0
  4202  1651  2E3A               	goto	l8542
  4203                           
  4204                           ;Main_B1.c: 101: Flash_Memory_Main();
  4205  1652  3192  224B  3196   	fcall	_Flash_Memory_Main
  4206                           
  4207                           ;Main_B1.c: 103: LED_Main();
  4208  1655  319B  2347  3196   	fcall	_LED_Main
  4209                           
  4210                           ;Main_B1.c: 104: Buzzer_Main();
  4211  1658  3194  2429  3196   	fcall	_Buzzer_Main
  4212                           
  4213                           ;Main_B1.c: 106: ;;
  4214                           ;Main_B1.c: 107: Temp_Main();
  4215  165B  319B  2338  3196   	fcall	_Temp_Main
  4216                           
  4217                           ;Main_B1.c: 108: Load_Main();
  4218  165E  3180  204C  3196   	fcall	_Load_Main
  4219                           
  4220                           ;Main_B1.c: 109: ;;
  4221                           ;Main_B1.c: 111: ;;
  4222                           ;Main_B1.c: 112: DimmerLights_Main();
  4223  1661  319F  274C  3196   	fcall	_DimmerLights_Main
  4224                           
  4225                           ;Main_B1.c: 113: Switch_Main();
  4226  1664  319B  2388  3196   	fcall	_Switch_Main
  4227                           
  4228                           ;Main_B1.c: 114: ;;
  4229                           ;Main_B1.c: 115: ;;
  4230                           ;Main_B1.c: 117: RF_Main();
  4231  1667  319B  2332  3196   	fcall	_RF_Main
  4232                           
  4233                           ;Main_B1.c: 118: DelayOff_Main();
  4234  166A  319B  233F  3196   	fcall	_DelayOff_Main
  4235                           
  4236                           ;Main_B1.c: 119: ;;
  4237                           ;Main_B1.c: 120: ;;
  4238                           ;Main_B1.c: 121: Exception_Main();
  4239  166D  3186  263B  3196   	fcall	_Exception_Main
  4240  1670  2E3A               	goto	l8542
  4241  1671                     __end_of_main:	
  4242                           ;Main_B1.c: 128: }
  4243                           ;Main_B1.c: 129: }
  4244                           ;Main_B1.c: 163: }
  4245                           ;Main_B1.c: 164: return (0);
  4246                           ;	Return value of _main is never used
  4247                           
  4248                           
  4249                           	psect	text1
  4250  1329                     __ptext1:	
  4251 ;; *************** function _my_MainTimer *****************
  4252 ;; Defined at:
  4253 ;;		line 185 in file "../src/Main_B1.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;		None
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;		None
  4258 ;; Return value:  Size  Location     Type
  4259 ;;		None               void
  4260 ;; Registers used:
  4261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;Total ram usage:        1 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    6
  4274 ;; This function calls:
  4275 ;;		_setBuz
  4276 ;; This function is called by:
  4277 ;;		_main
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           
  4282                           ;psect for function _my_MainTimer
  4283  1329                     _my_MainTimer:	
  4284                           
  4285                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4286                           
  4287                           ;incstack = 0
  4288                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4289  1329  0021               	movlb	1	; select bank1
  4290  132A  182E               	btfsc	_myMain^(0+128),0
  4291  132B  2B43               	goto	l7742
  4292                           
  4293                           ;Main_B1.c: 188: myMain.PowerCount++;
  4294  132C  3001               	movlw	1
  4295  132D  0020               	movlb	0	; select bank0
  4296  132E  00AD               	movwf	??_my_MainTimer
  4297  132F  082D               	movf	??_my_MainTimer,w
  4298  1330  0021               	movlb	1	; select bank1
  4299  1331  07AF               	addwf	(_myMain^(0+128)+1),f
  4300                           
  4301                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4302  1332  082F               	movf	(_myMain^(0+128)+1),w
  4303  1333  3A4B               	xorlw	75
  4304  1334  1D03               	skipz
  4305  1335  0008               	return
  4306                           
  4307                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4308  1336  01AF               	clrf	(_myMain^(0+128)+1)
  4309                           
  4310                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4311  1337  142E               	bsf	_myMain^(0+128),0
  4312                           
  4313                           ;Main_B1.c: 196: setBuz(3, 50);
  4314  1338  3032               	movlw	50
  4315  1339  0020               	movlb	0	; select bank0
  4316  133A  00A9               	movwf	setBuz@time
  4317  133B  3000               	movlw	0
  4318  133C  00AA               	movwf	setBuz@time+1
  4319  133D  3003               	movlw	3
  4320  133E  3195  25BD         	fcall	_setBuz
  4321                           
  4322                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4323  1340  0021               	movlb	1	; select bank1
  4324  1341  162E               	bsf	_myMain^(0+128),4
  4325                           
  4326                           ;Main_B1.c: 206: }
  4327                           ;Main_B1.c: 207: } else {
  4328  1342  0008               	return
  4329  1343                     l7742:	
  4330                           
  4331                           ;Main_B1.c: 208: myMain.PowerCount++;
  4332  1343  3001               	movlw	1
  4333  1344  0020               	movlb	0	; select bank0
  4334  1345  00AD               	movwf	??_my_MainTimer
  4335  1346  082D               	movf	??_my_MainTimer,w
  4336  1347  0021               	movlb	1	; select bank1
  4337  1348  07AF               	addwf	(_myMain^(0+128)+1),f
  4338                           
  4339                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4340  1349  082F               	movf	(_myMain^(0+128)+1),w
  4341  134A  3A32               	xorlw	50
  4342  134B  1903               	btfsc	3,2
  4343                           
  4344                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4345  134C  01AF               	clrf	(_myMain^(0+128)+1)
  4346                           
  4347                           ;Main_B1.c: 226: }
  4348                           ;Main_B1.c: 228: myMain.Count1++;
  4349  134D  3001               	movlw	1
  4350  134E  07B2               	addwf	(_myMain^(0+128)+4),f
  4351  134F  3000               	movlw	0
  4352  1350  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4353                           
  4354                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4355  1351  3004               	movlw	4
  4356  1352  3EAE               	addlw	_myMain& (0+255)
  4357  1353  0086               	movwf	6
  4358  1354  0187               	clrf	7
  4359  1355  3F40               	moviw [0]fsr1
  4360  1356  3A32               	xorlw	50
  4361  1357  1D03               	skipz
  4362  1358  2B5B               	goto	u7795
  4363  1359  3F41               	moviw [1]fsr1
  4364  135A  3A00               	xorlw	0
  4365  135B                     u7795:	
  4366  135B  1D03               	skipz
  4367  135C  0008               	return
  4368                           
  4369                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4370  135D  01B2               	clrf	(_myMain^(0+128)+4)
  4371  135E  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4372                           
  4373                           ;Main_B1.c: 242: if (myMain.Flag) {
  4374  135F  1CAE               	btfss	_myMain^(0+128),1
  4375  1360  2B63               	goto	l1423
  4376                           
  4377                           ;Main_B1.c: 243: myMain.Flag = 0;
  4378  1361  10AE               	bcf	_myMain^(0+128),1
  4379                           
  4380                           ;Main_B1.c: 252: } else {
  4381  1362  0008               	return
  4382  1363                     l1423:	
  4383                           
  4384                           ;Main_B1.c: 253: myMain.Flag = 1;
  4385  1363  14AE               	bsf	_myMain^(0+128),1
  4386  1364  0008               	return
  4387  1365                     __end_of_my_MainTimer:	
  4388                           
  4389                           	psect	text2
  4390  1DC1                     __ptext2:	
  4391 ;; *************** function _myMain_Initialization *****************
  4392 ;; Defined at:
  4393 ;;		line 170 in file "../src/Main_B1.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;		None
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;		None               void
  4400 ;; Registers used:
  4401 ;;		wreg, fsr1l, fsr1h
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;Total ram usage:        1 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    4
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_main
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           
  4422                           ;psect for function _myMain_Initialization
  4423  1DC1                     _myMain_Initialization:	
  4424                           
  4425                           ;Main_B1.c: 173: product = &_product;
  4426                           
  4427                           ;incstack = 0
  4428                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4429  1DC1  3020               	movlw	__product& (0+255)
  4430  1DC2  0020               	movlb	0	; select bank0
  4431  1DC3  00A0               	movwf	??_myMain_Initialization
  4432  1DC4  0820               	movf	??_myMain_Initialization,w
  4433  1DC5  0021               	movlb	1	; select bank1
  4434  1DC6  00EE               	movwf	_product^(0+128)
  4435                           
  4436                           ;Main_B1.c: 174: product->Data[20] = 209;
  4437  1DC7  30D1               	movlw	209
  4438  1DC8  0020               	movlb	0	; select bank0
  4439  1DC9  00A0               	movwf	??_myMain_Initialization
  4440  1DCA  0021               	movlb	1	; select bank1
  4441  1DCB  086E               	movf	_product^(0+128),w
  4442  1DCC  3E14               	addlw	20
  4443  1DCD  0086               	movwf	6
  4444  1DCE  3002               	movlw	2	; select bank4/5
  4445  1DCF  0087               	movwf	7
  4446  1DD0  0020               	movlb	0	; select bank0
  4447  1DD1  0820               	movf	??_myMain_Initialization,w
  4448  1DD2  0081               	movwf	1
  4449  1DD3  0008               	return
  4450  1DD4                     __end_of_myMain_Initialization:	
  4451                           
  4452                           	psect	text3
  4453  13A5                     __ptext3:	
  4454 ;; *************** function _getTemp_AD *****************
  4455 ;; Defined at:
  4456 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  channel         1    wreg     unsigned char 
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  channel         1    5[BANK0 ] unsigned char 
  4461 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;		None               void
  4464 ;; Registers used:
  4465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;Total ram usage:        4 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    6
  4478 ;; This function calls:
  4479 ;;		_getAD
  4480 ;; This function is called by:
  4481 ;;		_main
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _getTemp_AD
  4487  13A5                     _getTemp_AD:	
  4488                           
  4489                           ;incstack = 0
  4490                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4491                           ;getTemp_AD@channel stored from wreg
  4492  13A5  0020               	movlb	0	; select bank0
  4493  13A6  00A5               	movwf	getTemp_AD@channel
  4494                           
  4495                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4496  13A7  01A6               	clrf	getTemp_AD@ADRES
  4497  13A8  01A7               	clrf	getTemp_AD@ADRES+1
  4498                           
  4499                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4500  13A9  0021               	movlb	1	; select bank1
  4501  13AA  1D5C               	btfss	_Temp^(0+128),2
  4502  13AB  2BD5               	goto	l7726
  4503                           
  4504                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4505  13AC  30F0               	movlw	240
  4506  13AD  0020               	movlb	0	; select bank0
  4507  13AE  00A4               	movwf	??_getTemp_AD
  4508  13AF  0824               	movf	??_getTemp_AD,w
  4509  13B0  00A0               	movwf	getAD@adcon1
  4510  13B1  0825               	movf	getTemp_AD@channel,w
  4511  13B2  319F  27E0  3193   	fcall	_getAD
  4512  13B5  0020               	movlb	0	; select bank0
  4513  13B6  0821               	movf	?_getAD+1,w
  4514  13B7  01A7               	clrf	getTemp_AD@ADRES+1
  4515  13B8  07A7               	addwf	getTemp_AD@ADRES+1,f
  4516  13B9  0820               	movf	?_getAD,w
  4517  13BA  01A6               	clrf	getTemp_AD@ADRES
  4518  13BB  07A6               	addwf	getTemp_AD@ADRES,f
  4519                           
  4520                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4521  13BC  0827               	movf	getTemp_AD@ADRES+1,w
  4522  13BD  0426               	iorwf	getTemp_AD@ADRES,w
  4523  13BE  1903               	skipnz
  4524  13BF  2BD5               	goto	l7726
  4525                           
  4526                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4527  13C0  0827               	movf	getTemp_AD@ADRES+1,w
  4528  13C1  0021               	movlb	1	; select bank1
  4529  13C2  0265               	subwf	((_Temp+1)^(0+128)+8),w
  4530  13C3  1D03               	skipz
  4531  13C4  2BC9               	goto	u7755
  4532  13C5  0020               	movlb	0	; select bank0
  4533  13C6  0826               	movf	getTemp_AD@ADRES,w
  4534  13C7  0021               	movlb	1	; select bank1
  4535  13C8  0264               	subwf	(_Temp^(0+128)+8),w
  4536  13C9                     u7755:	
  4537  13C9  1803               	skipnc
  4538  13CA  2BD5               	goto	l7726
  4539                           
  4540                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4541  13CB  0020               	movlb	0	; select bank0
  4542  13CC  0827               	movf	getTemp_AD@ADRES+1,w
  4543  13CD  0021               	movlb	1	; select bank1
  4544  13CE  01E5               	clrf	((_Temp+1)^(0+128)+8)
  4545  13CF  07E5               	addwf	((_Temp+1)^(0+128)+8),f
  4546  13D0  0020               	movlb	0	; select bank0
  4547  13D1  0826               	movf	getTemp_AD@ADRES,w
  4548  13D2  0021               	movlb	1	; select bank1
  4549  13D3  01E4               	clrf	(_Temp^(0+128)+8)
  4550  13D4  07E4               	addwf	(_Temp^(0+128)+8),f
  4551  13D5                     l7726:	
  4552                           
  4553                           ;OverTemperature_B1.c: 32: }
  4554                           ;OverTemperature_B1.c: 33: }
  4555                           ;OverTemperature_B1.c: 34: }
  4556                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4557  13D5  30F0               	movlw	240
  4558  13D6  0020               	movlb	0	; select bank0
  4559  13D7  00A4               	movwf	??_getTemp_AD
  4560  13D8  0824               	movf	??_getTemp_AD,w
  4561  13D9  00A0               	movwf	getAD@adcon1
  4562  13DA  0825               	movf	getTemp_AD@channel,w
  4563  13DB  319F  27E0         	fcall	_getAD
  4564  13DD  0020               	movlb	0	; select bank0
  4565  13DE  0821               	movf	?_getAD+1,w
  4566  13DF  01A7               	clrf	getTemp_AD@ADRES+1
  4567  13E0  07A7               	addwf	getTemp_AD@ADRES+1,f
  4568  13E1  0820               	movf	?_getAD,w
  4569  13E2  01A6               	clrf	getTemp_AD@ADRES
  4570  13E3  07A6               	addwf	getTemp_AD@ADRES,f
  4571  13E4  0008               	return
  4572  13E5                     __end_of_getTemp_AD:	
  4573                           
  4574                           	psect	text4
  4575  0B32                     __ptext4:	
  4576 ;; *************** function _getLoad_AD *****************
  4577 ;; Defined at:
  4578 ;;		line 15 in file "../src/OverLoad_B1.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  channel         1    wreg     unsigned char 
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  channel         1    6[BANK0 ] unsigned char 
  4583 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4584 ;;  i               1   11[BANK0 ] unsigned char 
  4585 ;;  j               1    8[BANK0 ] unsigned char 
  4586 ;;  k               1    7[BANK0 ] unsigned char 
  4587 ;; Return value:  Size  Location     Type
  4588 ;;		None               void
  4589 ;; Registers used:
  4590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : 0/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4597 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4598 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4599 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;Total ram usage:        8 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; Hardware stack levels required when called:    6
  4603 ;; This function calls:
  4604 ;;		_getAD
  4605 ;; This function is called by:
  4606 ;;		_main
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           
  4611                           ;psect for function _getLoad_AD
  4612  0B32                     _getLoad_AD:	
  4613                           
  4614                           ;incstack = 0
  4615                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4616                           ;getLoad_AD@channel stored from wreg
  4617  0B32  0020               	movlb	0	; select bank0
  4618  0B33  00A6               	movwf	getLoad_AD@channel
  4619                           
  4620                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4621  0B34  01AB               	clrf	getLoad_AD@i
  4622  0B35  01A8               	clrf	getLoad_AD@j
  4623  0B36  01A7               	clrf	getLoad_AD@k
  4624                           
  4625                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4626  0B37  01A9               	clrf	getLoad_AD@ADRES
  4627  0B38  01AA               	clrf	getLoad_AD@ADRES+1
  4628                           
  4629                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4630  0B39  0022               	movlb	2	; select bank2
  4631  0B3A  1E48               	btfss	_Load^(0+256),4
  4632  0B3B  0008               	return
  4633                           
  4634                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4635  0B3C  30F3               	movlw	243
  4636  0B3D  0020               	movlb	0	; select bank0
  4637  0B3E  00A4               	movwf	??_getLoad_AD
  4638  0B3F  0824               	movf	??_getLoad_AD,w
  4639  0B40  00A0               	movwf	getAD@adcon1
  4640  0B41  0826               	movf	getLoad_AD@channel,w
  4641  0B42  319F  27E0  318B   	fcall	_getAD
  4642  0B45  0020               	movlb	0	; select bank0
  4643  0B46  0821               	movf	?_getAD+1,w
  4644  0B47  01AA               	clrf	getLoad_AD@ADRES+1
  4645  0B48  07AA               	addwf	getLoad_AD@ADRES+1,f
  4646  0B49  0820               	movf	?_getAD,w
  4647  0B4A  01A9               	clrf	getLoad_AD@ADRES
  4648  0B4B  07A9               	addwf	getLoad_AD@ADRES,f
  4649                           
  4650                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4651  0B4C  01AB               	clrf	getLoad_AD@i
  4652  0B4D  3004               	movlw	4
  4653  0B4E  022B               	subwf	getLoad_AD@i,w
  4654  0B4F  1803               	btfsc	3,0
  4655  0B50  2B78               	goto	l7694
  4656  0B51                     l7682:	
  4657                           
  4658                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4659  0B51  352B               	lslf	getLoad_AD@i,w
  4660  0B52  3E53               	addlw	(_Load+11)& (0+255)
  4661  0B53  0086               	movwf	6
  4662  0B54  3001               	movlw	1	; select bank2/3
  4663  0B55  0087               	movwf	7
  4664  0B56  3F40               	moviw [0]fsr1
  4665  0B57  00A4               	movwf	??_getLoad_AD
  4666  0B58  3F41               	moviw [1]fsr1
  4667  0B59  00A5               	movwf	??_getLoad_AD+1
  4668  0B5A  082A               	movf	getLoad_AD@ADRES+1,w
  4669  0B5B  0225               	subwf	??_getLoad_AD+1,w
  4670  0B5C  1D03               	skipz
  4671  0B5D  2B60               	goto	u7655
  4672  0B5E  0829               	movf	getLoad_AD@ADRES,w
  4673  0B5F  0224               	subwf	??_getLoad_AD,w
  4674  0B60                     u7655:	
  4675  0B60  1803               	skipnc
  4676  0B61  2B70               	goto	l7690
  4677  0B62  08A8               	movf	getLoad_AD@j,f
  4678  0B63  1D03               	skipz
  4679  0B64  2B70               	goto	l7690
  4680                           
  4681                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4682  0B65  352B               	lslf	getLoad_AD@i,w
  4683  0B66  3E53               	addlw	(_Load+11)& (0+255)
  4684  0B67  0086               	movwf	6
  4685  0B68  3001               	movlw	1	; select bank2/3
  4686  0B69  0087               	movwf	7
  4687  0B6A  0829               	movf	getLoad_AD@ADRES,w
  4688  0B6B  3FC0               	movwi [0]fsr1
  4689  0B6C  082A               	movf	getLoad_AD@ADRES+1,w
  4690  0B6D  3FC1               	movwi [1]fsr1
  4691                           
  4692                           ;OverLoad_B1.c: 24: j = 1;
  4693  0B6E  01A8               	clrf	getLoad_AD@j
  4694  0B6F  0AA8               	incf	getLoad_AD@j,f
  4695  0B70                     l7690:	
  4696  0B70  3001               	movlw	1
  4697  0B71  00A4               	movwf	??_getLoad_AD
  4698  0B72  0824               	movf	??_getLoad_AD,w
  4699  0B73  07AB               	addwf	getLoad_AD@i,f
  4700  0B74  3004               	movlw	4
  4701  0B75  022B               	subwf	getLoad_AD@i,w
  4702  0B76  1C03               	skipc
  4703  0B77  2B51               	goto	l7682
  4704  0B78                     l7694:	
  4705                           
  4706                           ;OverLoad_B1.c: 25: }
  4707                           ;OverLoad_B1.c: 26: }
  4708                           ;OverLoad_B1.c: 27: if (j == 0) {
  4709  0B78  08A8               	movf	getLoad_AD@j,f
  4710  0B79  1D03               	skipz
  4711  0B7A  0008               	return
  4712                           
  4713                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4714  0B7B  01AB               	clrf	getLoad_AD@i
  4715  0B7C                     L1:	
  4716  0B7C  3004               	movlw	4
  4717  0B7D  022B               	subwf	getLoad_AD@i,w
  4718  0B7E  1803               	btfsc	3,0
  4719  0B7F  0008               	return
  4720                           
  4721                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4722  0B80  352B               	lslf	getLoad_AD@i,w
  4723  0B81  3E5D               	addlw	(_Load+21)& (0+255)
  4724  0B82  0086               	movwf	6
  4725  0B83  3001               	movlw	1	; select bank2/3
  4726  0B84  0087               	movwf	7
  4727  0B85  3F40               	moviw [0]fsr1
  4728  0B86  00A4               	movwf	??_getLoad_AD
  4729  0B87  3F41               	moviw [1]fsr1
  4730  0B88  00A5               	movwf	??_getLoad_AD+1
  4731  0B89  0825               	movf	??_getLoad_AD+1,w
  4732  0B8A  022A               	subwf	getLoad_AD@ADRES+1,w
  4733  0B8B  1D03               	skipz
  4734  0B8C  2B8F               	goto	u7705
  4735  0B8D  0824               	movf	??_getLoad_AD,w
  4736  0B8E  0229               	subwf	getLoad_AD@ADRES,w
  4737  0B8F                     u7705:	
  4738  0B8F  1803               	skipnc
  4739  0B90  2B9F               	goto	l7710
  4740  0B91  08A7               	movf	getLoad_AD@k,f
  4741  0B92  1D03               	skipz
  4742  0B93  2B9F               	goto	l7710
  4743                           
  4744                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4745  0B94  352B               	lslf	getLoad_AD@i,w
  4746  0B95  3E5D               	addlw	(_Load+21)& (0+255)
  4747  0B96  0086               	movwf	6
  4748  0B97  3001               	movlw	1	; select bank2/3
  4749  0B98  0087               	movwf	7
  4750  0B99  0829               	movf	getLoad_AD@ADRES,w
  4751  0B9A  3FC0               	movwi [0]fsr1
  4752  0B9B  082A               	movf	getLoad_AD@ADRES+1,w
  4753  0B9C  3FC1               	movwi [1]fsr1
  4754                           
  4755                           ;OverLoad_B1.c: 31: k = 1;
  4756  0B9D  01A7               	clrf	getLoad_AD@k
  4757  0B9E  0AA7               	incf	getLoad_AD@k,f
  4758  0B9F                     l7710:	
  4759  0B9F  3001               	movlw	1
  4760  0BA0  00A4               	movwf	??_getLoad_AD
  4761  0BA1  0824               	movf	??_getLoad_AD,w
  4762  0BA2  07AB               	addwf	getLoad_AD@i,f
  4763  0BA3  2B7C               	goto	L1
  4764  0BA4                     __end_of_getLoad_AD:	
  4765                           
  4766                           	psect	text5
  4767  1FE0                     __ptext5:	
  4768 ;; *************** function _getAD *****************
  4769 ;; Defined at:
  4770 ;;		line 459 in file "../src/MCU_B1.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;  adcon0          1    wreg     unsigned char 
  4773 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  2    0[BANK0 ] int 
  4778 ;; Registers used:
  4779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4785 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4788 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4789 ;;Total ram usage:        4 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    5
  4792 ;; This function calls:
  4793 ;;		_Timeout_Counter
  4794 ;;		_set_TimeoutCleared
  4795 ;; This function is called by:
  4796 ;;		_getLoad_AD
  4797 ;;		_getTemp_AD
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           
  4802                           ;psect for function _getAD
  4803  1FE0                     _getAD:	
  4804                           
  4805                           ;incstack = 0
  4806                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4807                           ;getAD@adcon0 stored from wreg
  4808  1FE0  0020               	movlb	0	; select bank0
  4809  1FE1  00A3               	movwf	getAD@adcon0
  4810                           
  4811                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4812  1FE2  0823               	movf	getAD@adcon0,w
  4813  1FE3  0021               	movlb	1	; select bank1
  4814  1FE4  009D               	movwf	29	;volatile
  4815                           
  4816                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4817  1FE5  0020               	movlb	0	; select bank0
  4818  1FE6  0820               	movf	getAD@adcon1,w
  4819  1FE7  0021               	movlb	1	; select bank1
  4820  1FE8  009E               	movwf	30	;volatile
  4821                           
  4822                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4823  1FE9  149D               	bsf	29,1	;volatile
  4824                           
  4825                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4826  1FEA  2FEE               	goto	l7180
  4827  1FEB                     l7178:	
  4828                           
  4829                           ;MCU_B1.c: 464: Timeout_Counter();
  4830  1FEB  319E  2612  319F   	fcall	_Timeout_Counter
  4831  1FEE                     l7180:	
  4832  1FEE  0021               	movlb	1	; select bank1
  4833  1FEF  1C9D               	btfss	29,1	;volatile
  4834  1FF0  2FF3               	goto	l7184
  4835  1FF1  1D38               	btfss	(_myMain^(0+128)+10),2
  4836  1FF2  2FEB               	goto	l7178
  4837  1FF3                     l7184:	
  4838                           
  4839                           ;MCU_B1.c: 465: };
  4840                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4841  1FF3  319B  2363         	fcall	_set_TimeoutCleared
  4842                           
  4843                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4844  1FF5  0021               	movlb	1	; select bank1
  4845  1FF6  081C               	movf	28,w	;volatile
  4846  1FF7  0020               	movlb	0	; select bank0
  4847  1FF8  01A1               	clrf	?_getAD+1
  4848  1FF9  07A1               	addwf	?_getAD+1,f
  4849  1FFA  0021               	movlb	1	; select bank1
  4850  1FFB  081B               	movf	27,w	;volatile
  4851  1FFC  0020               	movlb	0	; select bank0
  4852  1FFD  01A0               	clrf	?_getAD
  4853  1FFE  07A0               	addwf	?_getAD,f
  4854  1FFF  0008               	return
  4855  2000                     __end_of_getAD:	
  4856                           
  4857                           	psect	text6
  4858  1D63                     __ptext6:	
  4859 ;; *************** function _WDT_Main *****************
  4860 ;; Defined at:
  4861 ;;		line 1103 in file "../src/MCU_B1.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;		None
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;		None
  4866 ;; Return value:  Size  Location     Type
  4867 ;;		None               void
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0, pclath, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4878 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4879 ;;Total ram usage:        1 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    5
  4882 ;; This function calls:
  4883 ;;		_WDT_Clearing
  4884 ;; This function is called by:
  4885 ;;		_main
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           
  4890                           ;psect for function _WDT_Main
  4891  1D63                     _WDT_Main:	
  4892                           
  4893                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  4894                           
  4895                           ;incstack = 0
  4896                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4897  1D63  0022               	movlb	2	; select bank2
  4898  1D64  1C43               	btfss	_WDT^(0+256),0
  4899  1D65  0008               	return
  4900                           
  4901                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  4902  1D66  3001               	movlw	1
  4903  1D67  02C4               	subwf	(_WDT^(0+256)+1),f
  4904  1D68  0844               	movf	(_WDT^(0+256)+1),w
  4905  1D69  3AFF               	xorlw	255
  4906  1D6A  1903               	skipnz
  4907  1D6B  0008               	return
  4908                           
  4909                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  4910  1D6C  3064               	movlw	100
  4911  1D6D  0020               	movlb	0	; select bank0
  4912  1D6E  00A0               	movwf	??_WDT_Main
  4913  1D6F  0820               	movf	??_WDT_Main,w
  4914  1D70  0022               	movlb	2	; select bank2
  4915  1D71  00C4               	movwf	(_WDT^(0+256)+1)
  4916                           
  4917                           ;MCU_B1.c: 1107: WDT_Clearing();
  4918  1D72  3180  2002         	fcall	_WDT_Clearing
  4919  1D74  0008               	return
  4920  1D75                     __end_of_WDT_Main:	
  4921                           
  4922                           	psect	text7
  4923  0002                     __ptext7:	
  4924 ;; *************** function _WDT_Clearing *****************
  4925 ;; Defined at:
  4926 ;;		line 1113 in file "../src/MCU_B1.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;		None               void
  4933 ;; Registers used:
  4934 ;;		None
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;Total ram usage:        0 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    4
  4947 ;; This function calls:
  4948 ;;		Nothing
  4949 ;; This function is called by:
  4950 ;;		_WDT_Main
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           
  4955                           ;psect for function _WDT_Clearing
  4956  0002                     _WDT_Clearing:	
  4957                           
  4958                           ;incstack = 0
  4959                           ; Regs used in _WDT_Clearing: []
  4960  0002  0064               	clrwdt	;# 
  4961  0003  0008               	return
  4962  0004                     __end_of_WDT_Clearing:	
  4963                           
  4964                           	psect	text8
  4965  1B38                     __ptext8:	
  4966 ;; *************** function _Temp_Main *****************
  4967 ;; Defined at:
  4968 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;		None               void
  4975 ;; Registers used:
  4976 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;Total ram usage:        0 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    7
  4989 ;; This function calls:
  4990 ;;		_setTemp_Main
  4991 ;; This function is called by:
  4992 ;;		_main
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           
  4997                           ;psect for function _Temp_Main
  4998  1B38                     _Temp_Main:	
  4999                           
  5000                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5001                           
  5002                           ;incstack = 0
  5003                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5004  1B38  318D  25E0         	fcall	_setTemp_Main
  5005  1B3A  0008               	return
  5006  1B3B                     __end_of_Temp_Main:	
  5007                           
  5008                           	psect	text9
  5009  0DE0                     __ptext9:	
  5010 ;; *************** function _setTemp_Main *****************
  5011 ;; Defined at:
  5012 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;		None
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  AD              2   76[BANK0 ] unsigned int 
  5017 ;;  DangerValue     2   73[BANK0 ] unsigned int 
  5018 ;;  SafeValue       2   71[BANK0 ] unsigned int 
  5019 ;;  TempGO          1   75[BANK0 ] unsigned char 
  5020 ;;  error           1   70[BANK0 ] unsigned char 
  5021 ;; Return value:  Size  Location     Type
  5022 ;;		None               void
  5023 ;; Registers used:
  5024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 0/0
  5027 ;;		On exit  : 0/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;Total ram usage:        9 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    6
  5037 ;; This function calls:
  5038 ;;		_getMain_All_Error_Status
  5039 ;;		_getMain_All_LightsStatus
  5040 ;;		_setBuz
  5041 ;;		_setProductData
  5042 ;; This function is called by:
  5043 ;;		_Temp_Main
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           
  5048                           ;psect for function _setTemp_Main
  5049  0DE0                     _setTemp_Main:	
  5050                           
  5051                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5052                           
  5053                           ;incstack = 0
  5054                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5055  0DE0  3000               	movlw	0
  5056  0DE1  3191  21AF  318D   	fcall	_getMain_All_Error_Status
  5057  0DE4  0020               	movlb	0	; select bank0
  5058  0DE5  00E5               	movwf	??_setTemp_Main
  5059  0DE6  0865               	movf	??_setTemp_Main,w
  5060  0DE7  00E6               	movwf	setTemp_Main@error
  5061                           
  5062                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5063  0DE8  01E7               	clrf	setTemp_Main@SafeValue
  5064  0DE9  01E8               	clrf	setTemp_Main@SafeValue+1
  5065  0DEA  01E9               	clrf	setTemp_Main@DangerValue
  5066  0DEB  01EA               	clrf	setTemp_Main@DangerValue+1
  5067                           
  5068                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5069  0DEC  319B  23C2  318D   	fcall	_getMain_All_LightsStatus
  5070  0DEF  0020               	movlb	0	; select bank0
  5071  0DF0  00E5               	movwf	??_setTemp_Main
  5072  0DF1  0865               	movf	??_setTemp_Main,w
  5073  0DF2  00EB               	movwf	setTemp_Main@TempGO
  5074                           
  5075                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5076  0DF3  0021               	movlb	1	; select bank1
  5077  0DF4  1C5C               	btfss	_Temp^(0+128),0
  5078  0DF5  2E8D               	goto	l1762
  5079                           
  5080                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5081  0DF6  195C               	btfsc	_Temp^(0+128),2
  5082  0DF7  2E15               	goto	l7258
  5083                           
  5084                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5085  0DF8  0020               	movlb	0	; select bank0
  5086  0DF9  086B               	movf	setTemp_Main@TempGO,w
  5087  0DFA  3A01               	xorlw	1
  5088  0DFB  1D03               	skipz
  5089  0DFC  2E00               	goto	l1768
  5090  0DFD  0021               	movlb	1	; select bank1
  5091  0DFE  1CDC               	btfss	_Temp^(0+128),1
  5092  0DFF  2E03               	goto	l7250
  5093  0E00                     l1768:	
  5094  0E00  0021               	movlb	1	; select bank1
  5095  0E01  1CDC               	btfss	_Temp^(0+128),1
  5096  0E02  2E12               	goto	l7256
  5097  0E03                     l7250:	
  5098                           
  5099                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5100  0E03  3001               	movlw	1
  5101  0E04  07DD               	addwf	(_Temp^(0+128)+1),f
  5102  0E05  3000               	movlw	0
  5103  0E06  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5104                           
  5105                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5106  0E07  3000               	movlw	0
  5107  0E08  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5108  0E09  30FA               	movlw	250
  5109  0E0A  1903               	skipnz
  5110  0E0B  025D               	subwf	(_Temp^(0+128)+1),w
  5111  0E0C  1C03               	skipc
  5112  0E0D  0008               	return
  5113                           
  5114                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5115  0E0E  01DD               	clrf	(_Temp^(0+128)+1)
  5116  0E0F  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5117                           
  5118                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5119  0E10  155C               	bsf	_Temp^(0+128),2
  5120                           
  5121                           ;OverTemperature_B1.c: 83: }
  5122                           ;OverTemperature_B1.c: 84: } else {
  5123  0E11  0008               	return
  5124  0E12                     l7256:	
  5125                           
  5126                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5127  0E12  01DD               	clrf	(_Temp^(0+128)+1)
  5128  0E13  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5129                           
  5130                           ;OverTemperature_B1.c: 86: }
  5131                           ;OverTemperature_B1.c: 87: } else {
  5132  0E14  0008               	return
  5133  0E15                     l7258:	
  5134                           
  5135                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5136  0E15  3001               	movlw	1
  5137  0E16  07DD               	addwf	(_Temp^(0+128)+1),f
  5138  0E17  3000               	movlw	0
  5139  0E18  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5140                           
  5141                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5142  0E19  3000               	movlw	0
  5143  0E1A  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5144  0E1B  3005               	movlw	5
  5145  0E1C  1903               	skipnz
  5146  0E1D  025D               	subwf	(_Temp^(0+128)+1),w
  5147  0E1E  1C03               	skipc
  5148  0E1F  0008               	return
  5149                           
  5150                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5151  0E20  01DD               	clrf	(_Temp^(0+128)+1)
  5152  0E21  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5153                           
  5154                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5155  0E22  3008               	movlw	8
  5156  0E23  3EDC               	addlw	_Temp& (0+255)
  5157  0E24  0086               	movwf	6
  5158  0E25  0187               	clrf	7
  5159  0E26  0016               	moviw fsr1++
  5160  0E27  0401               	iorwf	1,w
  5161  0E28  1903               	skipnz
  5162  0E29  2E85               	goto	l1773
  5163                           
  5164                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5165  0E2A  115C               	bcf	_Temp^(0+128),2
  5166                           
  5167                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5168  0E2B  0865               	movf	((_Temp+1)^(0+128)+8),w
  5169  0E2C  0020               	movlb	0	; select bank0
  5170  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5171  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5172  0E2F  0021               	movlb	1	; select bank1
  5173  0E30  0864               	movf	(_Temp^(0+128)+8),w
  5174  0E31  0020               	movlb	0	; select bank0
  5175  0E32  01EC               	clrf	setTemp_Main@AD
  5176  0E33  07EC               	addwf	setTemp_Main@AD,f
  5177                           
  5178                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5179  0E34  3090               	movlw	144
  5180  0E35  00E7               	movwf	setTemp_Main@SafeValue
  5181  0E36  3001               	movlw	1
  5182  0E37  00E8               	movwf	setTemp_Main@SafeValue+1
  5183                           
  5184                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5185  0E38  3059               	movlw	89
  5186  0E39  00E9               	movwf	setTemp_Main@DangerValue
  5187  0E3A  3001               	movlw	1
  5188  0E3B  00EA               	movwf	setTemp_Main@DangerValue+1
  5189                           
  5190                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5191  0E3C  0021               	movlb	1	; select bank1
  5192  0E3D  1CDC               	btfss	_Temp^(0+128),1
  5193  0E3E  2E5D               	goto	l7288
  5194                           
  5195                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5196  0E3F  0020               	movlb	0	; select bank0
  5197  0E40  0868               	movf	setTemp_Main@SafeValue+1,w
  5198  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5199  0E42  1D03               	skipz
  5200  0E43  2E46               	goto	u6985
  5201  0E44  0867               	movf	setTemp_Main@SafeValue,w
  5202  0E45  026C               	subwf	setTemp_Main@AD,w
  5203  0E46                     u6985:	
  5204  0E46  1C03               	skipc
  5205  0E47  2E72               	goto	l7298
  5206                           
  5207                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5208  0E48  3001               	movlw	1
  5209  0E49  00E5               	movwf	??_setTemp_Main
  5210  0E4A  0865               	movf	??_setTemp_Main,w
  5211  0E4B  0021               	movlb	1	; select bank1
  5212  0E4C  07DF               	addwf	(_Temp^(0+128)+3),f
  5213                           
  5214                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5215  0E4D  3003               	movlw	3
  5216  0E4E  025F               	subwf	(_Temp^(0+128)+3),w
  5217  0E4F  1C03               	skipc
  5218  0E50  2E74               	goto	l7300
  5219                           
  5220                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5221  0E51  01DF               	clrf	(_Temp^(0+128)+3)
  5222                           
  5223                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5224  0E52  10DC               	bcf	_Temp^(0+128),1
  5225                           
  5226                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5227  0E53  3064               	movlw	100
  5228  0E54  0020               	movlb	0	; select bank0
  5229  0E55  00A9               	movwf	setBuz@time
  5230  0E56  3000               	movlw	0
  5231  0E57  00AA               	movwf	setBuz@time+1
  5232  0E58  3002               	movlw	2
  5233  0E59  3195  25BD  318D   	fcall	_setBuz
  5234                           
  5235                           ;OverTemperature_B1.c: 126: }
  5236                           ;OverTemperature_B1.c: 127: } else {
  5237  0E5C  2E74               	goto	l7300
  5238  0E5D                     l7288:	
  5239                           ;OverTemperature_B1.c: 129: }
  5240                           ;OverTemperature_B1.c: 130: } else {
  5241                           
  5242                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5243                           
  5244                           
  5245                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5246  0E5D  0020               	movlb	0	; select bank0
  5247  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5248  0E5F  026A               	subwf	setTemp_Main@DangerValue+1,w
  5249  0E60  1D03               	skipz
  5250  0E61  2E64               	goto	u7005
  5251  0E62  086C               	movf	setTemp_Main@AD,w
  5252  0E63  0269               	subwf	setTemp_Main@DangerValue,w
  5253  0E64                     u7005:	
  5254  0E64  1C03               	skipc
  5255  0E65  2E72               	goto	l7298
  5256                           
  5257                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5258  0E66  3001               	movlw	1
  5259  0E67  00E5               	movwf	??_setTemp_Main
  5260  0E68  0865               	movf	??_setTemp_Main,w
  5261  0E69  0021               	movlb	1	; select bank1
  5262  0E6A  07DF               	addwf	(_Temp^(0+128)+3),f
  5263                           
  5264                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5265  0E6B  3003               	movlw	3
  5266  0E6C  025F               	subwf	(_Temp^(0+128)+3),w
  5267  0E6D  1C03               	skipc
  5268  0E6E  2E74               	goto	l7300
  5269                           
  5270                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5271  0E6F  01DF               	clrf	(_Temp^(0+128)+3)
  5272                           
  5273                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5274  0E70  14DC               	bsf	_Temp^(0+128),1
  5275                           
  5276                           ;OverTemperature_B1.c: 136: }
  5277                           ;OverTemperature_B1.c: 137: } else {
  5278  0E71  2E74               	goto	l7300
  5279  0E72                     l7298:	
  5280                           
  5281                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5282  0E72  0021               	movlb	1	; select bank1
  5283  0E73  01DF               	clrf	(_Temp^(0+128)+3)
  5284  0E74                     l7300:	
  5285                           
  5286                           ;OverTemperature_B1.c: 139: }
  5287                           ;OverTemperature_B1.c: 140: }
  5288                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5289  0E74  0020               	movlb	0	; select bank0
  5290  0E75  086D               	movf	setTemp_Main@AD+1,w
  5291  0E76  00E5               	movwf	??_setTemp_Main
  5292  0E77  0865               	movf	??_setTemp_Main,w
  5293  0E78  00E2               	movwf	setProductData@value
  5294  0E79  3018               	movlw	24
  5295  0E7A  319C  240F  318D   	fcall	_setProductData
  5296                           
  5297                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5298  0E7D  0020               	movlb	0	; select bank0
  5299  0E7E  086C               	movf	setTemp_Main@AD,w
  5300  0E7F  00E5               	movwf	??_setTemp_Main
  5301  0E80  0865               	movf	??_setTemp_Main,w
  5302  0E81  00E2               	movwf	setProductData@value
  5303  0E82  3019               	movlw	25
  5304  0E83  319C  240F         	fcall	_setProductData
  5305  0E85                     l1773:	
  5306                           
  5307                           ;OverTemperature_B1.c: 158: }
  5308                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5309  0E85  0021               	movlb	1	; select bank1
  5310  0E86  01E0               	clrf	(_Temp^(0+128)+4)
  5311  0E87  01E1               	clrf	((_Temp+1)^(0+128)+4)
  5312                           
  5313                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5314  0E88  01E2               	clrf	(_Temp^(0+128)+6)
  5315  0E89  01E3               	clrf	((_Temp+1)^(0+128)+6)
  5316                           
  5317                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5318  0E8A  01E4               	clrf	(_Temp^(0+128)+8)
  5319  0E8B  01E5               	clrf	((_Temp+1)^(0+128)+8)
  5320                           
  5321                           ;OverTemperature_B1.c: 162: }
  5322                           ;OverTemperature_B1.c: 163: }
  5323                           ;OverTemperature_B1.c: 166: } else {
  5324  0E8C  0008               	return
  5325  0E8D                     l1762:	
  5326                           
  5327                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5328  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5329  0E8E  0008               	return
  5330                           
  5331                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5332  0E8F  145C               	bsf	_Temp^(0+128),0
  5333  0E90  0008               	return
  5334  0E91                     __end_of_setTemp_Main:	
  5335                           
  5336                           	psect	text10
  5337  1B35                     __ptext10:	
  5338 ;; *************** function _Temp_Initialization *****************
  5339 ;; Defined at:
  5340 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;		None
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;		None
  5345 ;; Return value:  Size  Location     Type
  5346 ;;		None               void
  5347 ;; Registers used:
  5348 ;;		status,2, status,0, pclath, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;Total ram usage:        0 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    5
  5361 ;; This function calls:
  5362 ;;		_setTemp_Initialization
  5363 ;; This function is called by:
  5364 ;;		_main
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           
  5369                           ;psect for function _Temp_Initialization
  5370  1B35                     _Temp_Initialization:	
  5371                           
  5372                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5373                           
  5374                           ;incstack = 0
  5375                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5376  1B35  3188  2000         	fcall	_setTemp_Initialization
  5377  1B37  0008               	return
  5378  1B38                     __end_of_Temp_Initialization:	
  5379                           
  5380                           	psect	text11
  5381  0800                     __ptext11:	
  5382 ;; *************** function _setTemp_Initialization *****************
  5383 ;; Defined at:
  5384 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5385 ;; Parameters:    Size  Location     Type
  5386 ;;		None
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;		None
  5389 ;; Return value:  Size  Location     Type
  5390 ;;		None               void
  5391 ;; Registers used:
  5392 ;;		None
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;Total ram usage:        0 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    4
  5405 ;; This function calls:
  5406 ;;		Nothing
  5407 ;; This function is called by:
  5408 ;;		_Temp_Initialization
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           
  5413                           ;psect for function _setTemp_Initialization
  5414  0800                     _setTemp_Initialization:	
  5415                           
  5416                           ;incstack = 0
  5417                           ; Regs used in _setTemp_Initialization: []
  5418  0800  0008               	return
  5419  0801                     __end_of_setTemp_Initialization:	
  5420                           
  5421                           	psect	text12
  5422  1B88                     __ptext12:	
  5423 ;; *************** function _Switch_Main *****************
  5424 ;; Defined at:
  5425 ;;		line 76 in file "../src/Switch_B1.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;		None
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;		None
  5430 ;; Return value:  Size  Location     Type
  5431 ;;		None               void
  5432 ;; Registers used:
  5433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;Total ram usage:        0 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    8
  5446 ;; This function calls:
  5447 ;;		_TouchPower
  5448 ;;		_setSw_Main
  5449 ;; This function is called by:
  5450 ;;		_main
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           
  5455                           ;psect for function _Switch_Main
  5456  1B88                     _Switch_Main:	
  5457                           
  5458                           ;Switch_B1.c: 79: setSw_Main(1);
  5459                           
  5460                           ;incstack = 0
  5461                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5462  1B88  3001               	movlw	1
  5463  1B89  3181  21FE  319B   	fcall	_setSw_Main
  5464                           
  5465                           ;Switch_B1.c: 91: TouchPower();
  5466  1B8C  319E  2627         	fcall	_TouchPower
  5467  1B8E  0008               	return
  5468  1B8F                     __end_of_Switch_Main:	
  5469                           
  5470                           	psect	text13
  5471  01FE                     __ptext13:	
  5472 ;; *************** function _setSw_Main *****************
  5473 ;; Defined at:
  5474 ;;		line 117 in file "../src/Switch_B1.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;  sw              1    wreg     unsigned char 
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;  sw              1   17[BANK0 ] unsigned char 
  5479 ;; Return value:  Size  Location     Type
  5480 ;;		None               void
  5481 ;; Registers used:
  5482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;Total ram usage:        3 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    7
  5495 ;; This function calls:
  5496 ;;		_SwPointSelect
  5497 ;;		_getMain_All_Error_Status
  5498 ;;		_getSw_KeyStatus
  5499 ;;		_setBuz
  5500 ;;		_setDimmerLights_DimmingOn
  5501 ;;		_setDimmerLights_SwOff
  5502 ;;		_setDimmerLights_SwOn
  5503 ;;		_setRF_Learn
  5504 ;; This function is called by:
  5505 ;;		_Switch_Main
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           
  5510                           ;psect for function _setSw_Main
  5511  01FE                     _setSw_Main:	
  5512                           
  5513                           ;incstack = 0
  5514                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5515                           ;setSw_Main@sw stored from wreg
  5516  01FE  0020               	movlb	0	; select bank0
  5517  01FF  00B1               	movwf	setSw_Main@sw
  5518                           
  5519                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5520  0200  0831               	movf	setSw_Main@sw,w
  5521  0201  319C  247B  3181   	fcall	_SwPointSelect
  5522                           
  5523                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5524  0204  0021               	movlb	1	; select bank1
  5525  0205  0856               	movf	_Sw^(0+128),w
  5526  0206  0086               	movwf	6
  5527  0207  3001               	movlw	1	; select bank2/3
  5528  0208  0087               	movwf	7
  5529  0209  1C01               	btfss	1,0
  5530  020A  2B7A               	goto	l2472
  5531                           
  5532                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5533  020B  3000               	movlw	0
  5534  020C  3191  21AF  3181   	fcall	_getMain_All_Error_Status
  5535  020F  3800               	iorlw	0
  5536  0210  1D03               	skipz
  5537  0211  2A30               	goto	l7412
  5538                           
  5539                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5540  0212  0021               	movlb	1	; select bank1
  5541  0213  0A56               	incf	_Sw^(0+128),w
  5542  0214  0086               	movwf	6
  5543  0215  3001               	movlw	1	; select bank2/3
  5544  0216  0087               	movwf	7
  5545  0217  1081               	bcf	1,1
  5546                           
  5547                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5548  0218  0020               	movlb	0	; select bank0
  5549  0219  0831               	movf	setSw_Main@sw,w
  5550  021A  319D  250A  3181   	fcall	_getSw_KeyStatus
  5551  021D  3A01               	xorlw	1
  5552  021E  3000               	movlw	0
  5553  021F  1903               	skipnz
  5554  0220  3001               	movlw	1
  5555  0221  0020               	movlb	0	; select bank0
  5556  0222  00AF               	movwf	??_setSw_Main
  5557  0223  0021               	movlb	1	; select bank1
  5558  0224  0856               	movf	_Sw^(0+128),w
  5559  0225  0086               	movwf	6
  5560  0226  3001               	movlw	1	; select bank2/3
  5561  0227  0087               	movwf	7
  5562  0228  0020               	movlb	0	; select bank0
  5563  0229  0DAF               	rlf	??_setSw_Main,f
  5564  022A  0801               	movf	1,w
  5565  022B  062F               	xorwf	??_setSw_Main,w
  5566  022C  39FD               	andlw	-3
  5567  022D  062F               	xorwf	??_setSw_Main,w
  5568  022E  0081               	movwf	1
  5569                           
  5570                           ;Switch_B1.c: 124: } else {
  5571  022F  2A46               	goto	l2474
  5572  0230                     l7412:	
  5573                           
  5574                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5575  0230  0021               	movlb	1	; select bank1
  5576  0231  0A56               	incf	_Sw^(0+128),w
  5577  0232  0086               	movwf	6
  5578  0233  3001               	movlw	1	; select bank2/3
  5579  0234  0087               	movwf	7
  5580  0235  1881               	btfsc	1,1
  5581  0236  2A46               	goto	l2474
  5582                           
  5583                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5584  0237  0A56               	incf	_Sw^(0+128),w
  5585  0238  0086               	movwf	6
  5586  0239  3001               	movlw	1	; select bank2/3
  5587  023A  0087               	movwf	7
  5588  023B  1481               	bsf	1,1
  5589                           
  5590                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5591  023C  0856               	movf	_Sw^(0+128),w
  5592  023D  0086               	movwf	6
  5593  023E  3001               	movlw	1	; select bank2/3
  5594  023F  0087               	movwf	7
  5595  0240  1081               	bcf	1,1
  5596                           
  5597                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5598  0241  0856               	movf	_Sw^(0+128),w
  5599  0242  0086               	movwf	6
  5600  0243  3001               	movlw	1	; select bank2/3
  5601  0244  0087               	movwf	7
  5602  0245  1501               	bsf	1,2
  5603  0246                     l2474:	
  5604                           
  5605                           ;Switch_B1.c: 130: }
  5606                           ;Switch_B1.c: 131: }
  5607                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5608  0246  0021               	movlb	1	; select bank1
  5609  0247  0856               	movf	_Sw^(0+128),w
  5610  0248  0086               	movwf	6
  5611  0249  3001               	movlw	1	; select bank2/3
  5612  024A  0087               	movwf	7
  5613  024B  1C81               	btfss	1,1
  5614  024C  2B22               	goto	l7462
  5615                           
  5616                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5617  024D  0856               	movf	_Sw^(0+128),w
  5618  024E  0086               	movwf	6
  5619  024F  3001               	movlw	1	; select bank2/3
  5620  0250  0087               	movwf	7
  5621  0251  1901               	btfsc	1,2
  5622  0252  2A79               	goto	l7428
  5623                           
  5624                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5625  0253  3001               	movlw	1
  5626  0254  0020               	movlb	0	; select bank0
  5627  0255  00AF               	movwf	??_setSw_Main
  5628  0256  0021               	movlb	1	; select bank1
  5629  0257  0856               	movf	_Sw^(0+128),w
  5630  0258  3E02               	addlw	2
  5631  0259  0086               	movwf	6
  5632  025A  3001               	movlw	1	; select bank2/3
  5633  025B  0087               	movwf	7
  5634  025C  0020               	movlb	0	; select bank0
  5635  025D  082F               	movf	??_setSw_Main,w
  5636  025E  0781               	addwf	1,f
  5637                           
  5638                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5639  025F  0021               	movlb	1	; select bank1
  5640  0260  0856               	movf	_Sw^(0+128),w
  5641  0261  3E02               	addlw	2
  5642  0262  0086               	movwf	6
  5643  0263  3001               	movlw	1	; select bank2/3
  5644  0264  0087               	movwf	7
  5645  0265  3003               	movlw	3
  5646  0266  0201               	subwf	1,w
  5647  0267  1C03               	skipc
  5648  0268  0008               	return
  5649                           
  5650                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5651  0269  0856               	movf	_Sw^(0+128),w
  5652  026A  3E02               	addlw	2
  5653  026B  0086               	movwf	6
  5654  026C  3001               	movlw	1	; select bank2/3
  5655  026D  0087               	movwf	7
  5656  026E  0181               	clrf	1
  5657                           
  5658                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5659  026F  0856               	movf	_Sw^(0+128),w
  5660  0270  0086               	movwf	6
  5661  0271  3001               	movlw	1	; select bank2/3
  5662  0272  0087               	movwf	7
  5663  0273  1501               	bsf	1,2
  5664                           
  5665                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5666  0274  0020               	movlb	0	; select bank0
  5667  0275  0831               	movf	setSw_Main@sw,w
  5668  0276  3192  2216         	fcall	_setDimmerLights_SwOn
  5669                           
  5670                           ;Switch_B1.c: 146: }
  5671                           ;Switch_B1.c: 147: } else {
  5672  0278  0008               	return
  5673  0279                     l7428:	
  5674                           
  5675                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5676  0279  0021               	movlb	1	; select bank1
  5677  027A  0856               	movf	_Sw^(0+128),w
  5678  027B  0086               	movwf	6
  5679  027C  3001               	movlw	1	; select bank2/3
  5680  027D  0087               	movwf	7
  5681  027E  1981               	btfsc	1,3
  5682  027F  2AAE               	goto	l7438
  5683                           
  5684                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5685  0280  0856               	movf	_Sw^(0+128),w
  5686  0281  3E03               	addlw	3
  5687  0282  0086               	movwf	6
  5688  0283  3001               	movlw	1	; select bank2/3
  5689  0284  0087               	movwf	7
  5690  0285  3001               	movlw	1
  5691  0286  0781               	addwf	1,f
  5692  0287  3141               	addfsr 1,1
  5693  0288  1803               	skipnc
  5694  0289  0A81               	incf	1,f
  5695                           
  5696                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5697  028A  0856               	movf	_Sw^(0+128),w
  5698  028B  3E03               	addlw	3
  5699  028C  0086               	movwf	6
  5700  028D  3001               	movlw	1	; select bank2/3
  5701  028E  0087               	movwf	7
  5702  028F  3F40               	moviw [0]fsr1
  5703  0290  0020               	movlb	0	; select bank0
  5704  0291  00AF               	movwf	??_setSw_Main
  5705  0292  3F41               	moviw [1]fsr1
  5706  0293  00B0               	movwf	??_setSw_Main+1
  5707  0294  3000               	movlw	0
  5708  0295  0230               	subwf	??_setSw_Main+1,w
  5709  0296  304B               	movlw	75
  5710  0297  1903               	skipnz
  5711  0298  022F               	subwf	??_setSw_Main,w
  5712  0299  1C03               	skipc
  5713  029A  0008               	return
  5714                           
  5715                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5716  029B  0021               	movlb	1	; select bank1
  5717  029C  0856               	movf	_Sw^(0+128),w
  5718  029D  3E03               	addlw	3
  5719  029E  0086               	movwf	6
  5720  029F  3001               	movlw	1	; select bank2/3
  5721  02A0  0087               	movwf	7
  5722  02A1  3000               	movlw	0
  5723  02A2  3FC0               	movwi [0]fsr1
  5724  02A3  3FC1               	movwi [1]fsr1
  5725                           
  5726                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5727  02A4  0856               	movf	_Sw^(0+128),w
  5728  02A5  0086               	movwf	6
  5729  02A6  3001               	movlw	1	; select bank2/3
  5730  02A7  0087               	movwf	7
  5731  02A8  1581               	bsf	1,3
  5732                           
  5733                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5734  02A9  0020               	movlb	0	; select bank0
  5735  02AA  0831               	movf	setSw_Main@sw,w
  5736  02AB  3187  27D8         	fcall	_setDimmerLights_DimmingOn
  5737                           
  5738                           ;Switch_B1.c: 161: }
  5739                           ;Switch_B1.c: 162: } else {
  5740  02AD  0008               	return
  5741  02AE                     l7438:	
  5742                           
  5743                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5744  02AE  0021               	movlb	1	; select bank1
  5745  02AF  0856               	movf	_Sw^(0+128),w
  5746  02B0  0086               	movwf	6
  5747  02B1  3001               	movlw	1	; select bank2/3
  5748  02B2  0087               	movwf	7
  5749  02B3  1A01               	btfsc	1,4
  5750  02B4  2AEE               	goto	l7452
  5751                           
  5752                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5753  02B5  0856               	movf	_Sw^(0+128),w
  5754  02B6  3E05               	addlw	5
  5755  02B7  0086               	movwf	6
  5756  02B8  3001               	movlw	1	; select bank2/3
  5757  02B9  0087               	movwf	7
  5758  02BA  3001               	movlw	1
  5759  02BB  0781               	addwf	1,f
  5760  02BC  3141               	addfsr 1,1
  5761  02BD  1803               	skipnc
  5762  02BE  0A81               	incf	1,f
  5763                           
  5764                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5765  02BF  0856               	movf	_Sw^(0+128),w
  5766  02C0  3E05               	addlw	5
  5767  02C1  0086               	movwf	6
  5768  02C2  3001               	movlw	1	; select bank2/3
  5769  02C3  0087               	movwf	7
  5770  02C4  3F40               	moviw [0]fsr1
  5771  02C5  0020               	movlb	0	; select bank0
  5772  02C6  00AF               	movwf	??_setSw_Main
  5773  02C7  3F41               	moviw [1]fsr1
  5774  02C8  00B0               	movwf	??_setSw_Main+1
  5775  02C9  3000               	movlw	0
  5776  02CA  0230               	subwf	??_setSw_Main+1,w
  5777  02CB  304B               	movlw	75
  5778  02CC  1903               	skipnz
  5779  02CD  022F               	subwf	??_setSw_Main,w
  5780  02CE  1C03               	skipc
  5781  02CF  0008               	return
  5782                           
  5783                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5784  02D0  0021               	movlb	1	; select bank1
  5785  02D1  0856               	movf	_Sw^(0+128),w
  5786  02D2  3E05               	addlw	5
  5787  02D3  0086               	movwf	6
  5788  02D4  3001               	movlw	1	; select bank2/3
  5789  02D5  0087               	movwf	7
  5790  02D6  3000               	movlw	0
  5791  02D7  3FC0               	movwi [0]fsr1
  5792  02D8  3FC1               	movwi [1]fsr1
  5793                           
  5794                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5795  02D9  0856               	movf	_Sw^(0+128),w
  5796  02DA  0086               	movwf	6
  5797  02DB  3001               	movlw	1	; select bank2/3
  5798  02DC  0087               	movwf	7
  5799  02DD  1601               	bsf	1,4
  5800                           
  5801                           ;Switch_B1.c: 171: setRF_Learn(1);
  5802  02DE  3001               	movlw	1
  5803  02DF  319D  25D4  3181   	fcall	_setRF_Learn
  5804                           
  5805                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5806  02E2  0021               	movlb	1	; select bank1
  5807  02E3  1EAE               	btfss	_myMain^(0+128),5
  5808  02E4  0008               	return
  5809                           
  5810                           ;Switch_B1.c: 173: setBuz(2, 100);
  5811  02E5  3064               	movlw	100
  5812  02E6  0020               	movlb	0	; select bank0
  5813  02E7  00A9               	movwf	setBuz@time
  5814  02E8  3000               	movlw	0
  5815  02E9  00AA               	movwf	setBuz@time+1
  5816  02EA  3002               	movlw	2
  5817  02EB  3195  25BD         	fcall	_setBuz
  5818                           
  5819                           ;Switch_B1.c: 174: }
  5820                           ;Switch_B1.c: 178: }
  5821                           ;Switch_B1.c: 179: } else {
  5822  02ED  0008               	return
  5823  02EE                     l7452:	
  5824                           
  5825                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5826  02EE  0021               	movlb	1	; select bank1
  5827  02EF  0856               	movf	_Sw^(0+128),w
  5828  02F0  0086               	movwf	6
  5829  02F1  3001               	movlw	1	; select bank2/3
  5830  02F2  0087               	movwf	7
  5831  02F3  1A81               	btfsc	1,5
  5832  02F4  0008               	return
  5833                           
  5834                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5835  02F5  0856               	movf	_Sw^(0+128),w
  5836  02F6  3E07               	addlw	7
  5837  02F7  0086               	movwf	6
  5838  02F8  3001               	movlw	1	; select bank2/3
  5839  02F9  0087               	movwf	7
  5840  02FA  3001               	movlw	1
  5841  02FB  0781               	addwf	1,f
  5842  02FC  3141               	addfsr 1,1
  5843  02FD  1803               	skipnc
  5844  02FE  0A81               	incf	1,f
  5845                           
  5846                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5847  02FF  0856               	movf	_Sw^(0+128),w
  5848  0300  3E07               	addlw	7
  5849  0301  0086               	movwf	6
  5850  0302  3001               	movlw	1	; select bank2/3
  5851  0303  0087               	movwf	7
  5852  0304  3F40               	moviw [0]fsr1
  5853  0305  0020               	movlb	0	; select bank0
  5854  0306  00AF               	movwf	??_setSw_Main
  5855  0307  3F41               	moviw [1]fsr1
  5856  0308  00B0               	movwf	??_setSw_Main+1
  5857  0309  3000               	movlw	0
  5858  030A  0230               	subwf	??_setSw_Main+1,w
  5859  030B  3096               	movlw	150
  5860  030C  1903               	skipnz
  5861  030D  022F               	subwf	??_setSw_Main,w
  5862  030E  1C03               	skipc
  5863  030F  0008               	return
  5864                           
  5865                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5866  0310  0021               	movlb	1	; select bank1
  5867  0311  0856               	movf	_Sw^(0+128),w
  5868  0312  3E07               	addlw	7
  5869  0313  0086               	movwf	6
  5870  0314  3001               	movlw	1	; select bank2/3
  5871  0315  0087               	movwf	7
  5872  0316  3000               	movlw	0
  5873  0317  3FC0               	movwi [0]fsr1
  5874  0318  3FC1               	movwi [1]fsr1
  5875                           
  5876                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5877  0319  0856               	movf	_Sw^(0+128),w
  5878  031A  0086               	movwf	6
  5879  031B  3001               	movlw	1	; select bank2/3
  5880  031C  0087               	movwf	7
  5881  031D  1681               	bsf	1,5
  5882                           
  5883                           ;Switch_B1.c: 187: setRF_Learn(0);
  5884  031E  3000               	movlw	0
  5885  031F  319D  25D4         	fcall	_setRF_Learn
  5886                           
  5887                           ;Switch_B1.c: 190: }
  5888                           ;Switch_B1.c: 191: }
  5889                           ;Switch_B1.c: 192: }
  5890                           ;Switch_B1.c: 194: }
  5891                           ;Switch_B1.c: 195: }
  5892                           ;Switch_B1.c: 196: } else {
  5893  0321  0008               	return
  5894  0322                     l7462:	
  5895                           
  5896                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5897  0322  0021               	movlb	1	; select bank1
  5898  0323  0856               	movf	_Sw^(0+128),w
  5899  0324  0086               	movwf	6
  5900  0325  3001               	movlw	1	; select bank2/3
  5901  0326  0087               	movwf	7
  5902  0327  1D01               	btfss	1,2
  5903  0328  0008               	return
  5904                           
  5905                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5906  0329  3001               	movlw	1
  5907  032A  0020               	movlb	0	; select bank0
  5908  032B  00AF               	movwf	??_setSw_Main
  5909  032C  0021               	movlb	1	; select bank1
  5910  032D  0856               	movf	_Sw^(0+128),w
  5911  032E  3E02               	addlw	2
  5912  032F  0086               	movwf	6
  5913  0330  3001               	movlw	1	; select bank2/3
  5914  0331  0087               	movwf	7
  5915  0332  0020               	movlb	0	; select bank0
  5916  0333  082F               	movf	??_setSw_Main,w
  5917  0334  0781               	addwf	1,f
  5918                           
  5919                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5920  0335  0021               	movlb	1	; select bank1
  5921  0336  0856               	movf	_Sw^(0+128),w
  5922  0337  3E02               	addlw	2
  5923  0338  0086               	movwf	6
  5924  0339  3001               	movlw	1	; select bank2/3
  5925  033A  0087               	movwf	7
  5926  033B  3003               	movlw	3
  5927  033C  0201               	subwf	1,w
  5928  033D  1C03               	skipc
  5929  033E  0008               	return
  5930                           
  5931                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5932  033F  0856               	movf	_Sw^(0+128),w
  5933  0340  3E02               	addlw	2
  5934  0341  0086               	movwf	6
  5935  0342  3001               	movlw	1	; select bank2/3
  5936  0343  0087               	movwf	7
  5937  0344  0181               	clrf	1
  5938                           
  5939                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5940  0345  0856               	movf	_Sw^(0+128),w
  5941  0346  0086               	movwf	6
  5942  0347  3001               	movlw	1	; select bank2/3
  5943  0348  0087               	movwf	7
  5944  0349  1101               	bcf	1,2
  5945                           
  5946                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5947  034A  0856               	movf	_Sw^(0+128),w
  5948  034B  3E03               	addlw	3
  5949  034C  0086               	movwf	6
  5950  034D  3001               	movlw	1	; select bank2/3
  5951  034E  0087               	movwf	7
  5952  034F  3000               	movlw	0
  5953  0350  3FC0               	movwi [0]fsr1
  5954  0351  3FC1               	movwi [1]fsr1
  5955                           
  5956                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5957  0352  0856               	movf	_Sw^(0+128),w
  5958  0353  0086               	movwf	6
  5959  0354  3001               	movlw	1	; select bank2/3
  5960  0355  0087               	movwf	7
  5961  0356  1181               	bcf	1,3
  5962                           
  5963                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  5964  0357  0856               	movf	_Sw^(0+128),w
  5965  0358  0086               	movwf	6
  5966  0359  3001               	movlw	1	; select bank2/3
  5967  035A  0087               	movwf	7
  5968  035B  1201               	bcf	1,4
  5969                           
  5970                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  5971  035C  0856               	movf	_Sw^(0+128),w
  5972  035D  0086               	movwf	6
  5973  035E  3001               	movlw	1	; select bank2/3
  5974  035F  0087               	movwf	7
  5975  0360  1281               	bcf	1,5
  5976                           
  5977                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  5978  0361  0856               	movf	_Sw^(0+128),w
  5979  0362  3E05               	addlw	5
  5980  0363  0086               	movwf	6
  5981  0364  3001               	movlw	1	; select bank2/3
  5982  0365  0087               	movwf	7
  5983  0366  3000               	movlw	0
  5984  0367  3FC0               	movwi [0]fsr1
  5985  0368  3FC1               	movwi [1]fsr1
  5986                           
  5987                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  5988  0369  0856               	movf	_Sw^(0+128),w
  5989  036A  3E07               	addlw	7
  5990  036B  0086               	movwf	6
  5991  036C  3001               	movlw	1	; select bank2/3
  5992  036D  0087               	movwf	7
  5993  036E  3000               	movlw	0
  5994  036F  3FC0               	movwi [0]fsr1
  5995  0370  3FC1               	movwi [1]fsr1
  5996                           
  5997                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  5998  0371  0020               	movlb	0	; select bank0
  5999  0372  0831               	movf	setSw_Main@sw,w
  6000  0373  3192  22B7  3181   	fcall	_setDimmerLights_SwOff
  6001                           
  6002                           ;Switch_B1.c: 219: setRF_Learn(0);
  6003  0376  3000               	movlw	0
  6004  0377  319D  25D4         	fcall	_setRF_Learn
  6005                           
  6006                           ;Switch_B1.c: 221: }
  6007                           ;Switch_B1.c: 222: }
  6008                           ;Switch_B1.c: 223: }
  6009                           ;Switch_B1.c: 224: } else {
  6010  0379  0008               	return
  6011  037A                     l2472:	
  6012                           
  6013                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6014  037A  1C2E               	btfss	_myMain^(0+128),0
  6015  037B  0008               	return
  6016                           
  6017                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6018  037C  0856               	movf	_Sw^(0+128),w
  6019  037D  0086               	movwf	6
  6020  037E  3001               	movlw	1	; select bank2/3
  6021  037F  0087               	movwf	7
  6022  0380  1401               	bsf	1,0
  6023  0381  0008               	return
  6024  0382                     __end_of_setSw_Main:	
  6025                           
  6026                           	psect	text14
  6027  1DD4                     __ptext14:	
  6028 ;; *************** function _setRF_Learn *****************
  6029 ;; Defined at:
  6030 ;;		line 33 in file "../src/RF_Control_B1.c"
  6031 ;; Parameters:    Size  Location     Type
  6032 ;;  command         1    wreg     unsigned char 
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;  command         1    1[BANK0 ] unsigned char 
  6035 ;; Return value:  Size  Location     Type
  6036 ;;		None               void
  6037 ;; Registers used:
  6038 ;;		wreg, status,2, status,0
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6046 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6047 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;Total ram usage:        2 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:    4
  6051 ;; This function calls:
  6052 ;;		Nothing
  6053 ;; This function is called by:
  6054 ;;		_setSw_Main
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           
  6059                           ;psect for function _setRF_Learn
  6060  1DD4                     _setRF_Learn:	
  6061                           
  6062                           ;incstack = 0
  6063                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6064                           ;setRF_Learn@command stored from wreg
  6065  1DD4  0020               	movlb	0	; select bank0
  6066  1DD5  00A1               	movwf	setRF_Learn@command
  6067                           
  6068                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6069  1DD6  0821               	movf	setRF_Learn@command,w
  6070  1DD7  3A01               	xorlw	1
  6071  1DD8  3000               	movlw	0
  6072  1DD9  1903               	skipnz
  6073  1DDA  3001               	movlw	1
  6074  1DDB  00A0               	movwf	??_setRF_Learn
  6075  1DDC  0EA0               	swapf	??_setRF_Learn,f
  6076  1DDD  0DA0               	rlf	??_setRF_Learn,f
  6077  1DDE  0DA0               	rlf	??_setRF_Learn,f
  6078  1DDF  0021               	movlb	1	; select bank1
  6079  1DE0  0820               	movf	_RF1^(0+128),w
  6080  1DE1  0020               	movlb	0	; select bank0
  6081  1DE2  0620               	xorwf	??_setRF_Learn,w
  6082  1DE3  39BF               	andlw	-65
  6083  1DE4  0620               	xorwf	??_setRF_Learn,w
  6084  1DE5  0021               	movlb	1	; select bank1
  6085  1DE6  00A0               	movwf	_RF1^(0+128)
  6086  1DE7  0008               	return
  6087  1DE8                     __end_of_setRF_Learn:	
  6088                           
  6089                           	psect	text15
  6090  07D8                     __ptext15:	
  6091 ;; *************** function _setDimmerLights_DimmingOn *****************
  6092 ;; Defined at:
  6093 ;;		line 715 in file "../src/Dimmer_B1.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;  sw              1    wreg     unsigned char 
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;  sw              1    2[BANK0 ] unsigned char 
  6098 ;; Return value:  Size  Location     Type
  6099 ;;		None               void
  6100 ;; Registers used:
  6101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6110 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;Total ram usage:        1 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    5
  6114 ;; This function calls:
  6115 ;;		_DimmerLights_SelectPointer
  6116 ;; This function is called by:
  6117 ;;		_setSw_Main
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           
  6122                           ;psect for function _setDimmerLights_DimmingOn
  6123  07D8                     _setDimmerLights_DimmingOn:	
  6124                           
  6125                           ;incstack = 0
  6126                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6127                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6128  07D8  0020               	movlb	0	; select bank0
  6129  07D9  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6130                           
  6131                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6132  07DA  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6133  07DB  319C  2403  3187   	fcall	_DimmerLights_SelectPointer
  6134                           
  6135                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6136  07DE  0021               	movlb	1	; select bank1
  6137  07DF  0852               	movf	_DimmerLights^(0+128),w
  6138  07E0  0086               	movwf	6
  6139  07E1  3001               	movlw	1	; select bank2/3
  6140  07E2  0087               	movwf	7
  6141  07E3  1881               	btfsc	1,1
  6142  07E4  0008               	return
  6143                           
  6144                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6145  07E5  0852               	movf	_DimmerLights^(0+128),w
  6146  07E6  0086               	movwf	6
  6147  07E7  3001               	movlw	1	; select bank2/3
  6148  07E8  0087               	movwf	7
  6149  07E9  1C01               	btfss	1,0
  6150  07EA  0008               	return
  6151                           
  6152                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6153  07EB  0A52               	incf	_DimmerLights^(0+128),w
  6154  07EC  0086               	movwf	6
  6155  07ED  3001               	movlw	1	; select bank2/3
  6156  07EE  0087               	movwf	7
  6157  07EF  1401               	bsf	1,0
  6158                           
  6159                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6160  07F0  0852               	movf	_DimmerLights^(0+128),w
  6161  07F1  0086               	movwf	6
  6162  07F2  3001               	movlw	1	; select bank2/3
  6163  07F3  0087               	movwf	7
  6164  07F4  1581               	bsf	1,3
  6165                           
  6166                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6167  07F5  0852               	movf	_DimmerLights^(0+128),w
  6168  07F6  0086               	movwf	6
  6169  07F7  3001               	movlw	1	; select bank2/3
  6170  07F8  0087               	movwf	7
  6171  07F9  1601               	bsf	1,4
  6172                           
  6173                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6174  07FA  0852               	movf	_DimmerLights^(0+128),w
  6175  07FB  0086               	movwf	6
  6176  07FC  3001               	movlw	1	; select bank2/3
  6177  07FD  0087               	movwf	7
  6178  07FE  1681               	bsf	1,5
  6179  07FF  0008               	return
  6180  0800                     __end_of_setDimmerLights_DimmingOn:	
  6181                           
  6182                           	psect	text16
  6183  1D0A                     __ptext16:	
  6184 ;; *************** function _getSw_KeyStatus *****************
  6185 ;; Defined at:
  6186 ;;		line 237 in file "../src/Switch_B1.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;  sw              1    wreg     unsigned char 
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;  sw              1    0[COMMON] unsigned char 
  6191 ;;  status          1    1[BANK0 ] unsigned char 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  1    wreg      unsigned char 
  6194 ;; Registers used:
  6195 ;;		wreg, status,2
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;Total ram usage:        3 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    4
  6208 ;; This function calls:
  6209 ;;		Nothing
  6210 ;; This function is called by:
  6211 ;;		_setSw_Main
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215                           
  6216                           ;psect for function _getSw_KeyStatus
  6217  1D0A                     _getSw_KeyStatus:	
  6218                           
  6219                           ;Switch_B1.c: 238: char status = 0;
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6223  1D0A  0020               	movlb	0	; select bank0
  6224  1D0B  01A1               	clrf	getSw_KeyStatus@status
  6225                           
  6226                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6227  1D0C  01A2               	clrf	_getSw_KeyStatus$6073
  6228  1D0D  0AA2               	incf	_getSw_KeyStatus$6073,f
  6229  1D0E  1F0C               	btfss	12,6	;volatile
  6230  1D0F  1A0C               	btfsc	12,4	;volatile
  6231  1D10  2D15               	goto	l6876
  6232  1D11  1C0C               	btfss	12,0	;volatile
  6233  1D12  1B8C               	btfsc	12,7	;volatile
  6234  1D13  2D15               	goto	l6876
  6235  1D14  01A2               	clrf	_getSw_KeyStatus$6073
  6236  1D15                     l6876:	
  6237  1D15  0822               	movf	_getSw_KeyStatus$6073,w
  6238  1D16  00A0               	movwf	??_getSw_KeyStatus
  6239  1D17  0820               	movf	??_getSw_KeyStatus,w
  6240  1D18  00A1               	movwf	getSw_KeyStatus@status
  6241                           
  6242                           ;Switch_B1.c: 275: return status;
  6243  1D19  0821               	movf	getSw_KeyStatus@status,w
  6244  1D1A  0008               	return
  6245  1D1B                     __end_of_getSw_KeyStatus:	
  6246                           
  6247                           	psect	text17
  6248  1C7B                     __ptext17:	
  6249 ;; *************** function _SwPointSelect *****************
  6250 ;; Defined at:
  6251 ;;		line 25 in file "../src/Switch_B1.c"
  6252 ;; Parameters:    Size  Location     Type
  6253 ;;  sw              1    wreg     unsigned char 
  6254 ;; Auto vars:     Size  Location     Type
  6255 ;;  sw              1    1[BANK0 ] unsigned char 
  6256 ;; Return value:  Size  Location     Type
  6257 ;;		None               void
  6258 ;; Registers used:
  6259 ;;		wreg
  6260 ;; Tracked objects:
  6261 ;;		On entry : 0/0
  6262 ;;		On exit  : 0/0
  6263 ;;		Unchanged: 0/0
  6264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;Total ram usage:        2 bytes
  6270 ;; Hardware stack levels used:    1
  6271 ;; Hardware stack levels required when called:    4
  6272 ;; This function calls:
  6273 ;;		Nothing
  6274 ;; This function is called by:
  6275 ;;		_setSw_Main
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           
  6280                           ;psect for function _SwPointSelect
  6281  1C7B                     _SwPointSelect:	
  6282                           
  6283                           ;incstack = 0
  6284                           ; Regs used in _SwPointSelect: [wreg]
  6285                           ;SwPointSelect@sw stored from wreg
  6286  1C7B  0020               	movlb	0	; select bank0
  6287  1C7C  00A1               	movwf	SwPointSelect@sw
  6288                           
  6289                           ;Switch_B1.c: 28: if (sw == 1) {
  6290  1C7D  0821               	movf	SwPointSelect@sw,w
  6291  1C7E  3A01               	xorlw	1
  6292  1C7F  1D03               	skipz
  6293  1C80  0008               	return
  6294                           
  6295                           ;Switch_B1.c: 29: Sw = &Sw1;
  6296  1C81  30CA               	movlw	_Sw1& (0+255)
  6297  1C82  00A0               	movwf	??_SwPointSelect
  6298  1C83  0820               	movf	??_SwPointSelect,w
  6299  1C84  0021               	movlb	1	; select bank1
  6300  1C85  00D6               	movwf	_Sw^(0+128)
  6301  1C86  0008               	return
  6302  1C87                     __end_of_SwPointSelect:	
  6303                           
  6304                           	psect	text18
  6305  1E27                     __ptext18:	
  6306 ;; *************** function _TouchPower *****************
  6307 ;; Defined at:
  6308 ;;		line 10 in file "../src/Switch_B1.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;		None               void
  6315 ;; Registers used:
  6316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;Total ram usage:        0 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    5
  6329 ;; This function calls:
  6330 ;;		_Timeout_Counter
  6331 ;;		_set_TimeoutCleared
  6332 ;; This function is called by:
  6333 ;;		_Switch_Main
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           
  6338                           ;psect for function _TouchPower
  6339  1E27                     _TouchPower:	
  6340                           
  6341                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6342                           
  6343                           ;incstack = 0
  6344                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6345  1E27  0021               	movlb	1	; select bank1
  6346  1E28  1C2E               	btfss	_myMain^(0+128),0
  6347  1E29  0008               	return
  6348                           
  6349                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6350  1E2A  0020               	movlb	0	; select bank0
  6351  1E2B  180D               	btfsc	13,0	;volatile
  6352  1E2C  0008               	return
  6353  1E2D  2E33               	goto	l7394
  6354  1E2E                     l2452:	
  6355                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6356                           
  6357                           
  6358                           ;Switch_B1.c: 14: RB0 = 1;
  6359  1E2E  0020               	movlb	0	; select bank0
  6360  1E2F  140D               	bsf	13,0	;volatile
  6361                           
  6362                           ;Switch_B1.c: 15: Timeout_Counter();
  6363  1E30  319E  2612  319E   	fcall	_Timeout_Counter
  6364  1E33                     l7394:	
  6365  1E33  0020               	movlb	0	; select bank0
  6366  1E34  180D               	btfsc	13,0	;volatile
  6367  1E35  2E39               	goto	l7398
  6368  1E36  0021               	movlb	1	; select bank1
  6369  1E37  1D38               	btfss	(_myMain^(0+128)+10),2
  6370  1E38  2E2E               	goto	l2452
  6371  1E39                     l7398:	
  6372                           
  6373                           ;Switch_B1.c: 16: }
  6374                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6375  1E39  319B  2363         	fcall	_set_TimeoutCleared
  6376  1E3B  0008               	return
  6377  1E3C                     __end_of_TouchPower:	
  6378                           
  6379                           	psect	text19
  6380  1B63                     __ptext19:	
  6381 ;; *************** function _set_TimeoutCleared *****************
  6382 ;; Defined at:
  6383 ;;		line 281 in file "../src/Main_B1.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;		None
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;		None
  6388 ;; Return value:  Size  Location     Type
  6389 ;;		None               void
  6390 ;; Registers used:
  6391 ;;		status,2
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;Total ram usage:        0 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    4
  6404 ;; This function calls:
  6405 ;;		Nothing
  6406 ;; This function is called by:
  6407 ;;		_getAD
  6408 ;;		_TouchPower
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function _set_TimeoutCleared
  6414  1B63                     _set_TimeoutCleared:	
  6415                           
  6416                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6417                           
  6418                           ;incstack = 0
  6419                           ; Regs used in _set_TimeoutCleared: [status,2]
  6420  1B63  0021               	movlb	1	; select bank1
  6421  1B64  1138               	bcf	(_myMain^(0+128)+10),2
  6422                           
  6423                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6424  1B65  01B9               	clrf	(_myMain^(0+128)+11)
  6425  1B66  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6426  1B67  0008               	return
  6427  1B68                     __end_of_set_TimeoutCleared:	
  6428                           
  6429                           	psect	text20
  6430  1E12                     __ptext20:	
  6431 ;; *************** function _Timeout_Counter *****************
  6432 ;; Defined at:
  6433 ;;		line 272 in file "../src/Main_B1.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;		None
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;		None
  6438 ;; Return value:  Size  Location     Type
  6439 ;;		None               void
  6440 ;; Registers used:
  6441 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;Total ram usage:        0 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    4
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		_getAD
  6458 ;;		_TouchPower
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _Timeout_Counter
  6464  1E12                     _Timeout_Counter:	
  6465                           
  6466                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6470  1E12  3001               	movlw	1
  6471  1E13  0021               	movlb	1	; select bank1
  6472  1E14  07B9               	addwf	(_myMain^(0+128)+11),f
  6473  1E15  3000               	movlw	0
  6474  1E16  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6475                           
  6476                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6477  1E17  300B               	movlw	11
  6478  1E18  3EAE               	addlw	_myMain& (0+255)
  6479  1E19  0086               	movwf	6
  6480  1E1A  0187               	clrf	7
  6481  1E1B  3F40               	moviw [0]fsr1
  6482  1E1C  3AA8               	xorlw	168
  6483  1E1D  1D03               	skipz
  6484  1E1E  2E21               	goto	u5995
  6485  1E1F  3F41               	moviw [1]fsr1
  6486  1E20  3A61               	xorlw	97
  6487  1E21                     u5995:	
  6488  1E21  1D03               	skipz
  6489  1E22  0008               	return
  6490                           
  6491                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6492  1E23  01B9               	clrf	(_myMain^(0+128)+11)
  6493  1E24  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6494                           
  6495                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6496  1E25  1538               	bsf	(_myMain^(0+128)+10),2
  6497  1E26  0008               	return
  6498  1E27                     __end_of_Timeout_Counter:	
  6499                           
  6500                           	psect	text21
  6501  1B5F                     __ptext21:	
  6502 ;; *************** function _Switch_Initialization *****************
  6503 ;; Defined at:
  6504 ;;		line 46 in file "../src/Switch_B1.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;		None
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;		None
  6509 ;; Return value:  Size  Location     Type
  6510 ;;		None               void
  6511 ;; Registers used:
  6512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;Total ram usage:        0 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    7
  6525 ;; This function calls:
  6526 ;;		_setSw_Initialization
  6527 ;; This function is called by:
  6528 ;;		_main
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           
  6533                           ;psect for function _Switch_Initialization
  6534  1B5F                     _Switch_Initialization:	
  6535                           
  6536                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6537                           
  6538                           ;incstack = 0
  6539                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6540  1B5F  3001               	movlw	1
  6541  1B60  319C  24A5         	fcall	_setSw_Initialization
  6542  1B62  0008               	return
  6543  1B63                     __end_of_Switch_Initialization:	
  6544                           
  6545                           	psect	text22
  6546  1CA5                     __ptext22:	
  6547 ;; *************** function _setSw_Initialization *****************
  6548 ;; Defined at:
  6549 ;;		line 66 in file "../src/Switch_B1.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  sw              1    wreg     unsigned char 
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;  sw              1    4[BANK0 ] unsigned char 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;		None               void
  6556 ;; Registers used:
  6557 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;Total ram usage:        1 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    6
  6570 ;; This function calls:
  6571 ;;		_setLED
  6572 ;; This function is called by:
  6573 ;;		_Switch_Initialization
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _setSw_Initialization
  6579  1CA5                     _setSw_Initialization:	
  6580                           
  6581                           ;incstack = 0
  6582                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6583                           ;setSw_Initialization@sw stored from wreg
  6584  1CA5  0020               	movlb	0	; select bank0
  6585  1CA6  00A4               	movwf	setSw_Initialization@sw
  6586                           
  6587                           ;Switch_B1.c: 68: setLED(sw, 1);
  6588  1CA7  01A2               	clrf	setLED@command
  6589  1CA8  0AA2               	incf	setLED@command,f
  6590  1CA9  0824               	movf	setSw_Initialization@sw,w
  6591  1CAA  3192  22F0  319C   	fcall	_setLED
  6592                           
  6593                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6594  1CAD  0020               	movlb	0	; select bank0
  6595  1CAE  01A2               	clrf	setLED@command
  6596  1CAF  0AA2               	incf	setLED@command,f
  6597  1CB0  0824               	movf	setSw_Initialization@sw,w
  6598  1CB1  3E01               	addlw	1
  6599  1CB2  3192  22F0         	fcall	_setLED
  6600  1CB4  0008               	return
  6601  1CB5                     __end_of_setSw_Initialization:	
  6602                           
  6603                           	psect	text23
  6604  1B32                     __ptext23:	
  6605 ;; *************** function _RF_Main *****************
  6606 ;; Defined at:
  6607 ;;		line 26 in file "../src/RF_Control_B1.c"
  6608 ;; Parameters:    Size  Location     Type
  6609 ;;		None
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;		None
  6612 ;; Return value:  Size  Location     Type
  6613 ;;		None               void
  6614 ;; Registers used:
  6615 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;Total ram usage:        0 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:   11
  6628 ;; This function calls:
  6629 ;;		_setRF_Main
  6630 ;; This function is called by:
  6631 ;;		_main
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           
  6636                           ;psect for function _RF_Main
  6637  1B32                     _RF_Main:	
  6638                           
  6639                           ;RF_Control_B1.c: 28: setRF_Main();
  6640                           
  6641                           ;incstack = 0
  6642                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6643  1B32  3185  2566         	fcall	_setRF_Main
  6644  1B34  0008               	return
  6645  1B35                     __end_of_RF_Main:	
  6646                           
  6647                           	psect	text24
  6648  0566                     __ptext24:	
  6649 ;; *************** function _setRF_Main *****************
  6650 ;; Defined at:
  6651 ;;		line 53 in file "../src/RF_Control_B1.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;		None
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;  error           1    3[BANK1 ] unsigned char 
  6656 ;; Return value:  Size  Location     Type
  6657 ;;		None               void
  6658 ;; Registers used:
  6659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6660 ;; Tracked objects:
  6661 ;;		On entry : 0/0
  6662 ;;		On exit  : 0/0
  6663 ;;		Unchanged: 0/0
  6664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;Total ram usage:        2 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:   10
  6672 ;; This function calls:
  6673 ;;		_CC2500_PowerOnInitial
  6674 ;;		_CC2500_RxData
  6675 ;;		_CC2500_TxData
  6676 ;;		_CC2500_WriteCommand
  6677 ;;		_RF_RxDisable
  6678 ;;		___lwdiv
  6679 ;;		_getBuz_GO
  6680 ;;		_getRF_KeyStatus
  6681 ;;		_getRxData
  6682 ;; This function is called by:
  6683 ;;		_RF_Main
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function _setRF_Main
  6689  0566                     _setRF_Main:	
  6690                           
  6691                           ;RF_Control_B1.c: 54: char error = 0;
  6692                           
  6693                           ;incstack = 0
  6694                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6695  0566  0021               	movlb	1	; select bank1
  6696  0567  01E9               	clrf	setRF_Main@error^(0+128)
  6697                           
  6698                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6699  0568  1C20               	btfss	_RF1^(0+128),0
  6700  0569  2E37               	goto	l2094
  6701                           
  6702                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6703  056A  319C  24E8  3185   	fcall	_getBuz_GO
  6704  056D  0020               	movlb	0	; select bank0
  6705  056E  0821               	movf	?_getBuz_GO+1,w
  6706  056F  0420               	iorwf	?_getBuz_GO,w
  6707  0570  1D03               	skipz
  6708  0571  2E18               	goto	l8478
  6709                           
  6710                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6711  0572  319C  24F9  3185   	fcall	_getRF_KeyStatus
  6712  0575  3A01               	xorlw	1
  6713  0576  3000               	movlw	0
  6714  0577  1903               	skipnz
  6715  0578  3001               	movlw	1
  6716  0579  0021               	movlb	1	; select bank1
  6717  057A  00E8               	movwf	??_setRF_Main^(0+128)
  6718  057B  0CE8               	rrf	??_setRF_Main^(0+128),f
  6719  057C  0CE8               	rrf	??_setRF_Main^(0+128),f
  6720  057D  0820               	movf	_RF1^(0+128),w
  6721  057E  0668               	xorwf	??_setRF_Main^(0+128),w
  6722  057F  397F               	andlw	-129
  6723  0580  0668               	xorwf	??_setRF_Main^(0+128),w
  6724  0581  00A0               	movwf	_RF1^(0+128)
  6725                           
  6726                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6727  0582  1FA0               	btfss	_RF1^(0+128),7
  6728  0583  2D86               	goto	l2098
  6729  0584  1F20               	btfss	_RF1^(0+128),6
  6730  0585  2E18               	goto	l8478
  6731  0586                     l2098:	
  6732                           
  6733                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6734  0586  1D20               	btfss	_RF1^(0+128),2
  6735  0587  2DD7               	goto	l2099
  6736                           
  6737                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6738  0588  1B20               	btfsc	_RF1^(0+128),6
  6739  0589  2DD2               	goto	l8450
  6740                           
  6741                           ;RF_Control_B1.c: 68: RF1.Count++;
  6742  058A  3001               	movlw	1
  6743  058B  07A2               	addwf	(_RF1^(0+128)+2),f
  6744  058C  3000               	movlw	0
  6745  058D  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6746                           
  6747                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6748  058E  3014               	movlw	20
  6749  058F  0020               	movlb	0	; select bank0
  6750  0590  00A0               	movwf	___lwdiv@divisor
  6751  0591  3000               	movlw	0
  6752  0592  00A1               	movwf	___lwdiv@divisor+1
  6753  0593  0021               	movlb	1	; select bank1
  6754  0594  0828               	movf	((_RF1+1)^(0+128)+7),w
  6755  0595  0020               	movlb	0	; select bank0
  6756  0596  01A3               	clrf	___lwdiv@dividend+1
  6757  0597  07A3               	addwf	___lwdiv@dividend+1,f
  6758  0598  0021               	movlb	1	; select bank1
  6759  0599  0827               	movf	(_RF1^(0+128)+7),w
  6760  059A  0020               	movlb	0	; select bank0
  6761  059B  01A2               	clrf	___lwdiv@dividend
  6762  059C  07A2               	addwf	___lwdiv@dividend,f
  6763  059D  3188  2001  3185   	fcall	___lwdiv
  6764  05A0  0020               	movlb	0	; select bank0
  6765  05A1  0821               	movf	?___lwdiv+1,w
  6766  05A2  0021               	movlb	1	; select bank1
  6767  05A3  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6768  05A4  1D03               	skipz
  6769  05A5  2DAA               	goto	u8795
  6770  05A6  0020               	movlb	0	; select bank0
  6771  05A7  0820               	movf	?___lwdiv,w
  6772  05A8  0021               	movlb	1	; select bank1
  6773  05A9  0222               	subwf	(_RF1^(0+128)+2),w
  6774  05AA                     u8795:	
  6775  05AA  1C03               	skipc
  6776  05AB  2E18               	goto	l8478
  6777                           
  6778                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6779  05AC  3014               	movlw	20
  6780  05AD  0020               	movlb	0	; select bank0
  6781  05AE  00A0               	movwf	___lwdiv@divisor
  6782  05AF  3000               	movlw	0
  6783  05B0  00A1               	movwf	___lwdiv@divisor+1
  6784  05B1  0021               	movlb	1	; select bank1
  6785  05B2  0828               	movf	((_RF1+1)^(0+128)+7),w
  6786  05B3  0020               	movlb	0	; select bank0
  6787  05B4  01A3               	clrf	___lwdiv@dividend+1
  6788  05B5  07A3               	addwf	___lwdiv@dividend+1,f
  6789  05B6  0021               	movlb	1	; select bank1
  6790  05B7  0827               	movf	(_RF1^(0+128)+7),w
  6791  05B8  0020               	movlb	0	; select bank0
  6792  05B9  01A2               	clrf	___lwdiv@dividend
  6793  05BA  07A2               	addwf	___lwdiv@dividend,f
  6794  05BB  3188  2001  3185   	fcall	___lwdiv
  6795  05BE  0020               	movlb	0	; select bank0
  6796  05BF  0821               	movf	?___lwdiv+1,w
  6797  05C0  0021               	movlb	1	; select bank1
  6798  05C1  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6799  05C2  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6800  05C3  0020               	movlb	0	; select bank0
  6801  05C4  0820               	movf	?___lwdiv,w
  6802  05C5  0021               	movlb	1	; select bank1
  6803  05C6  01A2               	clrf	(_RF1^(0+128)+2)
  6804  05C7  07A2               	addwf	(_RF1^(0+128)+2),f
  6805                           
  6806                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6807  05C8  1120               	bcf	_RF1^(0+128),2
  6808                           
  6809                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6810  05C9  01AA               	clrf	(_RF1^(0+128)+10)
  6811  05CA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6812                           
  6813                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6814  05CB  319C  2496  3185   	fcall	_RF_RxDisable
  6815                           
  6816                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6817  05CE  3189  2173  3185   	fcall	_CC2500_TxData
  6818                           
  6819                           ;RF_Control_B1.c: 77: }
  6820                           ;RF_Control_B1.c: 78: } else {
  6821  05D1  2E18               	goto	l8478
  6822  05D2                     l8450:	
  6823                           
  6824                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6825  05D2  0021               	movlb	1	; select bank1
  6826  05D3  01A2               	clrf	(_RF1^(0+128)+2)
  6827  05D4  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6828                           
  6829                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6830  05D5  1120               	bcf	_RF1^(0+128),2
  6831                           
  6832                           ;RF_Control_B1.c: 81: }
  6833                           ;RF_Control_B1.c: 82: } else {
  6834  05D6  2E18               	goto	l8478
  6835  05D7                     l2099:	
  6836                           
  6837                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6838  05D7  1DA0               	btfss	_RF1^(0+128),3
  6839  05D8  2DE6               	goto	l8464
  6840                           
  6841                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6842  05D9  3189  2108  3185   	fcall	_CC2500_RxData
  6843                           
  6844                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6845  05DC  0021               	movlb	1	; select bank1
  6846  05DD  1CA0               	btfss	_RF1^(0+128),1
  6847  05DE  2E18               	goto	l8478
  6848                           
  6849                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6850  05DF  10A0               	bcf	_RF1^(0+128),1
  6851                           
  6852                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6853  05E0  01AA               	clrf	(_RF1^(0+128)+10)
  6854  05E1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6855                           
  6856                           ;RF_Control_B1.c: 97: getRxData();
  6857  05E2  318A  22C0  3185   	fcall	_getRxData
  6858                           
  6859                           ;RF_Control_B1.c: 100: }
  6860                           ;RF_Control_B1.c: 101: } else {
  6861  05E5  2E18               	goto	l8478
  6862  05E6                     l8464:	
  6863                           
  6864                           ;RF_Control_B1.c: 102: RF1.Count++;
  6865  05E6  3001               	movlw	1
  6866  05E7  0021               	movlb	1	; select bank1
  6867  05E8  07A2               	addwf	(_RF1^(0+128)+2),f
  6868  05E9  3000               	movlw	0
  6869  05EA  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6870                           
  6871                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6872  05EB  3014               	movlw	20
  6873  05EC  0020               	movlb	0	; select bank0
  6874  05ED  00A0               	movwf	___lwdiv@divisor
  6875  05EE  3000               	movlw	0
  6876  05EF  00A1               	movwf	___lwdiv@divisor+1
  6877  05F0  0021               	movlb	1	; select bank1
  6878  05F1  0828               	movf	((_RF1+1)^(0+128)+7),w
  6879  05F2  0020               	movlb	0	; select bank0
  6880  05F3  01A3               	clrf	___lwdiv@dividend+1
  6881  05F4  07A3               	addwf	___lwdiv@dividend+1,f
  6882  05F5  0021               	movlb	1	; select bank1
  6883  05F6  0827               	movf	(_RF1^(0+128)+7),w
  6884  05F7  0020               	movlb	0	; select bank0
  6885  05F8  01A2               	clrf	___lwdiv@dividend
  6886  05F9  07A2               	addwf	___lwdiv@dividend,f
  6887  05FA  3188  2001  3185   	fcall	___lwdiv
  6888  05FD  0020               	movlb	0	; select bank0
  6889  05FE  0821               	movf	?___lwdiv+1,w
  6890  05FF  0021               	movlb	1	; select bank1
  6891  0600  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6892  0601  1D03               	skipz
  6893  0602  2E07               	goto	u8825
  6894  0603  0020               	movlb	0	; select bank0
  6895  0604  0820               	movf	?___lwdiv,w
  6896  0605  0021               	movlb	1	; select bank1
  6897  0606  0222               	subwf	(_RF1^(0+128)+2),w
  6898  0607                     u8825:	
  6899  0607  1C03               	skipc
  6900  0608  2E18               	goto	l8478
  6901                           
  6902                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6903  0609  01A2               	clrf	(_RF1^(0+128)+2)
  6904  060A  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6905                           
  6906                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6907  060B  15A0               	bsf	_RF1^(0+128),3
  6908                           
  6909                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6910  060C  3036               	movlw	54
  6911  060D  319F  2717  3185   	fcall	_CC2500_WriteCommand
  6912                           
  6913                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6914  0610  303A               	movlw	58
  6915  0611  319F  2717  3185   	fcall	_CC2500_WriteCommand
  6916                           
  6917                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6918  0614  3034               	movlw	52
  6919  0615  319F  2717  3185   	fcall	_CC2500_WriteCommand
  6920  0618                     l8478:	
  6921                           
  6922                           ;RF_Control_B1.c: 111: }
  6923                           ;RF_Control_B1.c: 112: }
  6924                           ;RF_Control_B1.c: 113: }
  6925                           ;RF_Control_B1.c: 114: }
  6926                           ;RF_Control_B1.c: 115: }
  6927                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6928  0618  3001               	movlw	1
  6929  0619  0021               	movlb	1	; select bank1
  6930  061A  07AA               	addwf	(_RF1^(0+128)+10),f
  6931  061B  3000               	movlw	0
  6932  061C  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6933                           
  6934                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6935  061D  300B               	movlw	11
  6936  061E  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6937  061F  30B9               	movlw	185
  6938  0620  1903               	skipnz
  6939  0621  022A               	subwf	(_RF1^(0+128)+10),w
  6940  0622  1C03               	skipc
  6941  0623  2E30               	goto	l8492
  6942                           
  6943                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6944  0624  01AA               	clrf	(_RF1^(0+128)+10)
  6945  0625  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6946                           
  6947                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6948  0626  11A0               	bcf	_RF1^(0+128),3
  6949                           
  6950                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6951  0627  10A0               	bcf	_RF1^(0+128),1
  6952                           
  6953                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6954  0628  3036               	movlw	54
  6955  0629  319F  2717  3185   	fcall	_CC2500_WriteCommand
  6956                           
  6957                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6958  062C  303A               	movlw	58
  6959  062D  319F  2717  3185   	fcall	_CC2500_WriteCommand
  6960  0630                     l8492:	
  6961                           
  6962                           ;RF_Control_B1.c: 125: }
  6963                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6964  0630  0021               	movlb	1	; select bank1
  6965  0631  1F21               	btfss	(_RF1^(0+128)+1),6
  6966  0632  0008               	return
  6967                           
  6968                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6969  0633  1321               	bcf	(_RF1^(0+128)+1),6
  6970                           
  6971                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6972  0634  319D  25FD         	fcall	_CC2500_PowerOnInitial
  6973                           
  6974                           ;RF_Control_B1.c: 130: }
  6975                           ;RF_Control_B1.c: 132: } else {
  6976  0636  0008               	return
  6977  0637                     l2094:	
  6978                           
  6979                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6980  0637  1C2E               	btfss	_myMain^(0+128),0
  6981  0638  0008               	return
  6982                           
  6983                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6984  0639  1420               	bsf	_RF1^(0+128),0
  6985  063A  0008               	return
  6986  063B                     __end_of_setRF_Main:	
  6987                           
  6988                           	psect	text25
  6989  0AC0                     __ptext25:	
  6990 ;; *************** function _getRxData *****************
  6991 ;; Defined at:
  6992 ;;		line 227 in file "../src/RF_Control_B1.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;		None
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  error           1    1[BANK1 ] unsigned char 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;		None               void
  6999 ;; Registers used:
  7000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;Total ram usage:        2 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    9
  7013 ;; This function calls:
  7014 ;;		_getMain_All_Error_Status
  7015 ;;		_setControl_Lights_Table
  7016 ;;		_setLog_Code
  7017 ;;		_setTxData
  7018 ;; This function is called by:
  7019 ;;		_setRF_Main
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           
  7024                           ;psect for function _getRxData
  7025  0AC0                     _getRxData:	
  7026                           
  7027                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7028                           
  7029                           ;incstack = 0
  7030                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7031  0AC0  0022               	movlb	2	; select bank2
  7032  0AC1  0820               	movf	_RF_Data^(0+256),w
  7033  0AC2  3AAA               	xorlw	170
  7034  0AC3  1D03               	skipz
  7035  0AC4  2AD6               	goto	l6822
  7036  0AC5  0821               	movf	(_RF_Data^(0+256)+1),w
  7037  0AC6  3A01               	xorlw	1
  7038  0AC7  1D03               	skipz
  7039  0AC8  2AD6               	goto	l6822
  7040                           
  7041                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7042  0AC9  3055               	movlw	85
  7043  0ACA  0021               	movlb	1	; select bank1
  7044  0ACB  00E6               	movwf	??_getRxData^(0+128)
  7045  0ACC  086E               	movf	_product^(0+128),w
  7046  0ACD  3E02               	addlw	2
  7047  0ACE  0086               	movwf	6
  7048  0ACF  3002               	movlw	2	; select bank4/5
  7049  0AD0  0087               	movwf	7
  7050  0AD1  0866               	movf	??_getRxData^(0+128),w
  7051  0AD2  0081               	movwf	1
  7052                           
  7053                           ;RF_Control_B1.c: 231: setTxData();
  7054  0AD3  318F  2745         	fcall	_setTxData
  7055                           
  7056                           ;RF_Control_B1.c: 235: } else {
  7057  0AD5  0008               	return
  7058  0AD6                     l6822:	
  7059                           
  7060                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7061  0AD6  3000               	movlw	0
  7062  0AD7  3191  21AF  318A   	fcall	_getMain_All_Error_Status
  7063  0ADA  0021               	movlb	1	; select bank1
  7064  0ADB  00E6               	movwf	??_getRxData^(0+128)
  7065  0ADC  0866               	movf	??_getRxData^(0+128),w
  7066  0ADD  00E7               	movwf	getRxData@error^(0+128)
  7067                           
  7068                           ;RF_Control_B1.c: 237: if (error == 0) {
  7069  0ADE  08E7               	movf	getRxData@error^(0+128),f
  7070  0ADF  1D03               	skipz
  7071  0AE0  2B30               	goto	l2139
  7072                           
  7073                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7074  0AE1  1F20               	btfss	_RF1^(0+128),6
  7075  0AE2  2AEE               	goto	l6834
  7076                           
  7077                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7078  0AE3  0022               	movlb	2	; select bank2
  7079  0AE4  08A0               	movf	_RF_Data^(0+256),f
  7080  0AE5  1D03               	skipz
  7081  0AE6  0008               	return
  7082  0AE7  0821               	movf	(_RF_Data^(0+256)+1),w
  7083  0AE8  3A64               	xorlw	100
  7084  0AE9  1D03               	skipz
  7085  0AEA  0008               	return
  7086                           
  7087                           ;RF_Control_B1.c: 241: setLog_Code();
  7088  0AEB  3191  21E2         	fcall	_setLog_Code
  7089                           
  7090                           ;RF_Control_B1.c: 242: }
  7091                           ;RF_Control_B1.c: 243: } else {
  7092  0AED  0008               	return
  7093  0AEE                     l6834:	
  7094                           
  7095                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7096  0AEE  0022               	movlb	2	; select bank2
  7097  0AEF  0834               	movf	(_RF_Data^(0+256)+20),w
  7098  0AF0  3AD1               	xorlw	209
  7099  0AF1  1903               	skipnz
  7100  0AF2  2AF7               	goto	l6838
  7101  0AF3  0834               	movf	(_RF_Data^(0+256)+20),w
  7102  0AF4  3A0A               	xorlw	10
  7103  0AF5  1D03               	skipz
  7104  0AF6  0008               	return
  7105  0AF7                     l6838:	
  7106                           
  7107                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7108  0AF7  08A0               	movf	_RF_Data^(0+256),f
  7109  0AF8  1D03               	skipz
  7110  0AF9  0008               	return
  7111  0AFA  0821               	movf	(_RF_Data^(0+256)+1),w
  7112  0AFB  3A02               	xorlw	2
  7113  0AFC  1D03               	skipz
  7114  0AFD  0008               	return
  7115                           
  7116                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7117  0AFE  082C               	movf	(_RF_Data^(0+256)+12),w
  7118  0AFF  3AFF               	xorlw	255
  7119  0B00  1D03               	skipz
  7120  0B01  2B0C               	goto	l6850
  7121  0B02  082D               	movf	(_RF_Data^(0+256)+13),w
  7122  0B03  3AFF               	xorlw	255
  7123  0B04  1D03               	skipz
  7124  0B05  2B0C               	goto	l6850
  7125  0B06  082E               	movf	(_RF_Data^(0+256)+14),w
  7126  0B07  3AFF               	xorlw	255
  7127  0B08  1D03               	skipz
  7128  0B09  2B0C               	goto	l6850
  7129                           
  7130                           ;RF_Control_B1.c: 249: __nop();
  7131  0B0A  0000               	nop
  7132                           
  7133                           ;RF_Control_B1.c: 250: } else {
  7134  0B0B  0008               	return
  7135  0B0C                     l6850:	
  7136                           
  7137                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7138  0B0C  0021               	movlb	1	; select bank1
  7139  0B0D  086E               	movf	_product^(0+128),w
  7140  0B0E  3E0C               	addlw	12
  7141  0B0F  0086               	movwf	6
  7142  0B10  3002               	movlw	2	; select bank4/5
  7143  0B11  0087               	movwf	7
  7144  0B12  0022               	movlb	2	; select bank2
  7145  0B13  082C               	movf	(_RF_Data^(0+256)+12),w
  7146  0B14  0601               	xorwf	1,w
  7147  0B15  1D03               	skipz
  7148  0B16  0008               	return
  7149  0B17  0021               	movlb	1	; select bank1
  7150  0B18  086E               	movf	_product^(0+128),w
  7151  0B19  3E0D               	addlw	13
  7152  0B1A  0086               	movwf	6
  7153  0B1B  3002               	movlw	2	; select bank4/5
  7154  0B1C  0087               	movwf	7
  7155  0B1D  0022               	movlb	2	; select bank2
  7156  0B1E  082D               	movf	(_RF_Data^(0+256)+13),w
  7157  0B1F  0601               	xorwf	1,w
  7158  0B20  1D03               	skipz
  7159  0B21  0008               	return
  7160  0B22  0021               	movlb	1	; select bank1
  7161  0B23  086E               	movf	_product^(0+128),w
  7162  0B24  3E0E               	addlw	14
  7163  0B25  0086               	movwf	6
  7164  0B26  3002               	movlw	2	; select bank4/5
  7165  0B27  0087               	movwf	7
  7166  0B28  0022               	movlb	2	; select bank2
  7167  0B29  082E               	movf	(_RF_Data^(0+256)+14),w
  7168  0B2A  0601               	xorwf	1,w
  7169  0B2B  1D03               	skipz
  7170  0B2C  0008               	return
  7171                           
  7172                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7173  0B2D  318A  224E         	fcall	_setControl_Lights_Table
  7174                           
  7175                           ;RF_Control_B1.c: 253: }
  7176                           ;RF_Control_B1.c: 254: }
  7177                           ;RF_Control_B1.c: 256: }
  7178                           ;RF_Control_B1.c: 267: }
  7179                           ;RF_Control_B1.c: 268: }
  7180                           ;RF_Control_B1.c: 269: } else {
  7181  0B2F  0008               	return
  7182  0B30                     l2139:	
  7183                           
  7184                           ;RF_Control_B1.c: 270: __nop();
  7185  0B30  0000               	nop
  7186  0B31  0008               	return
  7187  0B32                     __end_of_getRxData:	
  7188                           
  7189                           	psect	text26
  7190  11E2                     __ptext26:	
  7191 ;; *************** function _setLog_Code *****************
  7192 ;; Defined at:
  7193 ;;		line 276 in file "../src/RF_Control_B1.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;		None
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;		None
  7198 ;; Return value:  Size  Location     Type
  7199 ;;		None               void
  7200 ;; Registers used:
  7201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7211 ;;Total ram usage:        1 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    6
  7214 ;; This function calls:
  7215 ;;		_setBuz
  7216 ;;		_setMemory_LoopSave
  7217 ;;		_setMemory_Modify
  7218 ;;		_setProductData
  7219 ;; This function is called by:
  7220 ;;		_getRxData
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           
  7225                           ;psect for function _setLog_Code
  7226  11E2                     _setLog_Code:	
  7227                           
  7228                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7229                           
  7230                           ;incstack = 0
  7231                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7232  11E2  0021               	movlb	1	; select bank1
  7233  11E3  1320               	bcf	_RF1^(0+128),6
  7234                           
  7235                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7236  11E4  0022               	movlb	2	; select bank2
  7237  11E5  082C               	movf	(_RF_Data^(0+256)+12),w
  7238  11E6  0020               	movlb	0	; select bank0
  7239  11E7  00E5               	movwf	??_setLog_Code
  7240  11E8  0865               	movf	??_setLog_Code,w
  7241  11E9  00E2               	movwf	setProductData@value
  7242  11EA  300C               	movlw	12
  7243  11EB  319C  240F  3191   	fcall	_setProductData
  7244                           
  7245                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7246  11EE  0022               	movlb	2	; select bank2
  7247  11EF  082D               	movf	(_RF_Data^(0+256)+13),w
  7248  11F0  0020               	movlb	0	; select bank0
  7249  11F1  00E5               	movwf	??_setLog_Code
  7250  11F2  0865               	movf	??_setLog_Code,w
  7251  11F3  00E2               	movwf	setProductData@value
  7252  11F4  300D               	movlw	13
  7253  11F5  319C  240F  3191   	fcall	_setProductData
  7254                           
  7255                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7256  11F8  0022               	movlb	2	; select bank2
  7257  11F9  082E               	movf	(_RF_Data^(0+256)+14),w
  7258  11FA  0020               	movlb	0	; select bank0
  7259  11FB  00E5               	movwf	??_setLog_Code
  7260  11FC  0865               	movf	??_setLog_Code,w
  7261  11FD  00E2               	movwf	setProductData@value
  7262  11FE  300E               	movlw	14
  7263  11FF  319C  240F  3191   	fcall	_setProductData
  7264                           
  7265                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7266  1202  3064               	movlw	100
  7267  1203  0020               	movlb	0	; select bank0
  7268  1204  00A9               	movwf	setBuz@time
  7269  1205  3000               	movlw	0
  7270  1206  00AA               	movwf	setBuz@time+1
  7271  1207  3001               	movlw	1
  7272  1208  3195  25BD  3191   	fcall	_setBuz
  7273                           
  7274                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7275  120B  0021               	movlb	1	; select bank1
  7276  120C  1EAE               	btfss	_myMain^(0+128),5
  7277  120D  2A12               	goto	l2154
  7278                           
  7279                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7280  120E  3001               	movlw	1
  7281  120F  319D  25AE  3191   	fcall	_setMemory_LoopSave
  7282  1212                     l2154:	
  7283                           
  7284                           ;RF_Control_B1.c: 284: }
  7285                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7286  1212  3001               	movlw	1
  7287  1213  319D  259B         	fcall	_setMemory_Modify
  7288  1215  0008               	return
  7289  1216                     __end_of_setLog_Code:	
  7290                           
  7291                           	psect	text27
  7292  1DAE                     __ptext27:	
  7293 ;; *************** function _setMemory_LoopSave *****************
  7294 ;; Defined at:
  7295 ;;		line 1076 in file "../src/MCU_B1.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;  command         1    wreg     unsigned char 
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;  command         1    1[BANK0 ] unsigned char 
  7300 ;; Return value:  Size  Location     Type
  7301 ;;		None               void
  7302 ;; Registers used:
  7303 ;;		wreg, status,2, status,0
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;Total ram usage:        2 bytes
  7314 ;; Hardware stack levels used:    1
  7315 ;; Hardware stack levels required when called:    4
  7316 ;; This function calls:
  7317 ;;		Nothing
  7318 ;; This function is called by:
  7319 ;;		_setLog_Code
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _setMemory_LoopSave
  7325  1DAE                     _setMemory_LoopSave:	
  7326                           
  7327                           ;incstack = 0
  7328                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7329                           ;setMemory_LoopSave@command stored from wreg
  7330  1DAE  0020               	movlb	0	; select bank0
  7331  1DAF  00A1               	movwf	setMemory_LoopSave@command
  7332                           
  7333                           ;MCU_B1.c: 1077: Memory.LoopSave = command == 1 ? 1 : 0;
  7334  1DB0  0821               	movf	setMemory_LoopSave@command,w
  7335  1DB1  3A01               	xorlw	1
  7336  1DB2  3000               	movlw	0
  7337  1DB3  1903               	skipnz
  7338  1DB4  3001               	movlw	1
  7339  1DB5  00A0               	movwf	??_setMemory_LoopSave
  7340  1DB6  0DA0               	rlf	??_setMemory_LoopSave,f
  7341  1DB7  0DA0               	rlf	??_setMemory_LoopSave,f
  7342  1DB8  0023               	movlb	3	; select bank3
  7343  1DB9  0849               	movf	(_Memory^(0+384)+36),w
  7344  1DBA  0020               	movlb	0	; select bank0
  7345  1DBB  0620               	xorwf	??_setMemory_LoopSave,w
  7346  1DBC  39FB               	andlw	-5
  7347  1DBD  0620               	xorwf	??_setMemory_LoopSave,w
  7348  1DBE  0023               	movlb	3	; select bank3
  7349  1DBF  00C9               	movwf	(_Memory^(0+384)+36)
  7350  1DC0  0008               	return
  7351  1DC1                     __end_of_setMemory_LoopSave:	
  7352                           
  7353                           	psect	text28
  7354  0A4E                     __ptext28:	
  7355 ;; *************** function _setControl_Lights_Table *****************
  7356 ;; Defined at:
  7357 ;;		line 289 in file "../src/RF_Control_B1.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;		None
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;		None
  7362 ;; Return value:  Size  Location     Type
  7363 ;;		None               void
  7364 ;; Registers used:
  7365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;Total ram usage:        0 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    8
  7378 ;; This function calls:
  7379 ;;		_getDimmerLights_Status
  7380 ;;		_getMain_All_LightsStatus
  7381 ;;		_setCmd_Status
  7382 ;;		_setDimmerLights_SwOff
  7383 ;;		_setDimmerLights_SwOn
  7384 ;;		_setProductData
  7385 ;;		_setRFSW_AdjControl
  7386 ;;		_setRFSW_Control
  7387 ;;		_setTxData
  7388 ;; This function is called by:
  7389 ;;		_getRxData
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           
  7394                           ;psect for function _setControl_Lights_Table
  7395  0A4E                     _setControl_Lights_Table:	
  7396                           
  7397                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7398                           
  7399                           ;incstack = 0
  7400                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7401  0A4E  2AB0               	goto	l6502
  7402  0A4F                     l6484:	
  7403                           ;RF_Control_B1.c: 292: case 0x00:
  7404                           
  7405                           
  7406                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7407  0A4F  319B  23C2  318A   	fcall	_getMain_All_LightsStatus
  7408  0A52  3A01               	xorlw	1
  7409  0A53  1D03               	skipz
  7410  0A54  2A6B               	goto	l6492
  7411                           
  7412                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7413  0A55  3001               	movlw	1
  7414  0A56  319C  24B5  318A   	fcall	_getDimmerLights_Status
  7415  0A59  3A01               	xorlw	1
  7416  0A5A  1D03               	skipz
  7417  0A5B  2A64               	goto	l6490
  7418                           
  7419                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7420  0A5C  3001               	movlw	1
  7421  0A5D  3192  2216  318A   	fcall	_setDimmerLights_SwOn
  7422                           
  7423                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7424  0A60  3001               	movlw	1
  7425  0A61  3192  22B7  318A   	fcall	_setDimmerLights_SwOff
  7426  0A64                     l6490:	
  7427                           
  7428                           ;RF_Control_B1.c: 299: }
  7429                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7430  0A64  0020               	movlb	0	; select bank0
  7431  0A65  01A0               	clrf	setCmd_Status@cmd
  7432  0A66  0AA0               	incf	setCmd_Status@cmd,f
  7433  0A67  3001               	movlw	1
  7434  0A68  319E  26B1         	fcall	_setCmd_Status
  7435                           
  7436                           ;RF_Control_B1.c: 315: } else {
  7437  0A6A  0008               	return
  7438  0A6B                     l6492:	
  7439                           
  7440                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7441  0A6B  0020               	movlb	0	; select bank0
  7442  0A6C  01E2               	clrf	setProductData@value
  7443  0A6D  3009               	movlw	9
  7444  0A6E  319C  240F  318A   	fcall	_setProductData
  7445                           
  7446                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7447  0A71  0020               	movlb	0	; select bank0
  7448  0A72  01E2               	clrf	setProductData@value
  7449  0A73  300B               	movlw	11
  7450  0A74  319C  240F  318A   	fcall	_setProductData
  7451                           
  7452                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7453  0A77  0020               	movlb	0	; select bank0
  7454  0A78  01E2               	clrf	setProductData@value
  7455  0A79  300F               	movlw	15
  7456  0A7A  319C  240F  318A   	fcall	_setProductData
  7457                           
  7458                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7459  0A7D  0020               	movlb	0	; select bank0
  7460  0A7E  01E2               	clrf	setProductData@value
  7461  0A7F  3011               	movlw	17
  7462  0A80  319C  240F  318A   	fcall	_setProductData
  7463                           
  7464                           ;RF_Control_B1.c: 320: setTxData();
  7465  0A83  318F  2745         	fcall	_setTxData
  7466                           
  7467                           ;RF_Control_B1.c: 321: }
  7468                           ;RF_Control_B1.c: 322: break;
  7469  0A85  0008               	return
  7470  0A86                     l6494:	
  7471                           ;RF_Control_B1.c: 324: case 0x20:
  7472                           
  7473                           
  7474                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7475  0A86  0020               	movlb	0	; select bank0
  7476  0A87  01E2               	clrf	setProductData@value
  7477  0A88  3009               	movlw	9
  7478  0A89  319C  240F  318A   	fcall	_setProductData
  7479                           
  7480                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7481  0A8C  0020               	movlb	0	; select bank0
  7482  0A8D  01E2               	clrf	setProductData@value
  7483  0A8E  300B               	movlw	11
  7484  0A8F  319C  240F  318A   	fcall	_setProductData
  7485                           
  7486                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7487  0A92  0021               	movlb	1	; select bank1
  7488  0A93  086E               	movf	_product^(0+128),w
  7489  0A94  0086               	movwf	6
  7490  0A95  3002               	movlw	2	; select bank4/5
  7491  0A96  0087               	movwf	7
  7492  0A97  3002               	movlw	2	; select bank4/5
  7493  0A98  3F4F               	moviw [15]fsr1
  7494  0A99  0020               	movlb	0	; select bank0
  7495  0A9A  00E2               	movwf	setProductData@value
  7496  0A9B  300F               	movlw	15
  7497  0A9C  319C  240F  318A   	fcall	_setProductData
  7498                           
  7499                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7500  0A9F  0020               	movlb	0	; select bank0
  7501  0AA0  01E2               	clrf	setProductData@value
  7502  0AA1  3011               	movlw	17
  7503  0AA2  319C  240F  318A   	fcall	_setProductData
  7504                           
  7505                           ;RF_Control_B1.c: 329: setTxData();
  7506  0AA5  318F  2745         	fcall	_setTxData
  7507                           
  7508                           ;RF_Control_B1.c: 330: break;
  7509  0AA7  0008               	return
  7510  0AA8                     l6496:	
  7511                           ;RF_Control_B1.c: 333: case 0x01:
  7512                           
  7513                           
  7514                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7515  0AA8  3001               	movlw	1
  7516  0AA9  3193  2365         	fcall	_setRFSW_Control
  7517                           
  7518                           ;RF_Control_B1.c: 335: break;
  7519  0AAB  0008               	return
  7520  0AAC                     l6498:	
  7521                           ;RF_Control_B1.c: 339: case 0x11:
  7522                           
  7523                           
  7524                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7525  0AAC  3001               	movlw	1
  7526  0AAD  318B  23A4         	fcall	_setRFSW_AdjControl
  7527                           
  7528                           ;RF_Control_B1.c: 370: }
  7529                           
  7530                           ;RF_Control_B1.c: 341: break;
  7531  0AAF  0008               	return
  7532  0AB0                     l6502:	
  7533  0AB0  0022               	movlb	2	; select bank2
  7534  0AB1  082F               	movf	(_RF_Data^(0+256)+15),w
  7535                           
  7536                           ; Switch size 1, requested type "space"
  7537                           ; Number of cases is 4, Range of values is 0 to 32
  7538                           ; switch strategies available:
  7539                           ; Name         Instructions Cycles
  7540                           ; simple_byte           13     7 (average)
  7541                           ; direct_byte           72     6 (fixed)
  7542                           ; jumptable            260     6 (fixed)
  7543                           ;	Chosen strategy is simple_byte
  7544  0AB2  3A00               	xorlw	0	; case 0
  7545  0AB3  1903               	skipnz
  7546  0AB4  2A4F               	goto	l6484
  7547  0AB5  3A01               	xorlw	1	; case 1
  7548  0AB6  1903               	skipnz
  7549  0AB7  2AA8               	goto	l6496
  7550  0AB8  3A10               	xorlw	16	; case 17
  7551  0AB9  1903               	skipnz
  7552  0ABA  2AAC               	goto	l6498
  7553  0ABB  3A31               	xorlw	49	; case 32
  7554  0ABC  1903               	skipnz
  7555  0ABD  2A86               	goto	l6494
  7556  0ABE  2ABF               	goto	l2167
  7557  0ABF                     l2167:	
  7558  0ABF  0008               	return
  7559  0AC0                     __end_of_setControl_Lights_Table:	
  7560                           
  7561                           	psect	text29
  7562  1365                     __ptext29:	
  7563 ;; *************** function _setRFSW_Control *****************
  7564 ;; Defined at:
  7565 ;;		line 378 in file "../src/RF_Control_B1.c"
  7566 ;; Parameters:    Size  Location     Type
  7567 ;;  sw              1    wreg     unsigned char 
  7568 ;; Auto vars:     Size  Location     Type
  7569 ;;  sw              1   79[BANK0 ] unsigned char 
  7570 ;;  status          1   78[BANK0 ] unsigned char 
  7571 ;; Return value:  Size  Location     Type
  7572 ;;		None               void
  7573 ;; Registers used:
  7574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7575 ;; Tracked objects:
  7576 ;;		On entry : 0/0
  7577 ;;		On exit  : 0/0
  7578 ;;		Unchanged: 0/0
  7579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;Total ram usage:        3 bytes
  7585 ;; Hardware stack levels used:    1
  7586 ;; Hardware stack levels required when called:    7
  7587 ;; This function calls:
  7588 ;;		_getDimmerLights_Status
  7589 ;;		_setBuz
  7590 ;;		_setDelayOff_GO
  7591 ;;		_setDimmerLights_SwOff
  7592 ;;		_setDimmerLights_SwOn
  7593 ;;		_setRF_DimmerLights
  7594 ;;		_setTxData
  7595 ;; This function is called by:
  7596 ;;		_setControl_Lights_Table
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           
  7601                           ;psect for function _setRFSW_Control
  7602  1365                     _setRFSW_Control:	
  7603                           
  7604                           ;incstack = 0
  7605                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7606                           ;setRFSW_Control@sw stored from wreg
  7607  1365  0020               	movlb	0	; select bank0
  7608  1366  00EF               	movwf	setRFSW_Control@sw
  7609                           
  7610                           ;RF_Control_B1.c: 379: char status = 0;
  7611  1367  01EE               	clrf	setRFSW_Control@status
  7612                           
  7613                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7614  1368  0022               	movlb	2	; select bank2
  7615  1369  0830               	movf	(_RF_Data^(0+256)+16),w
  7616  136A  3A80               	xorlw	128
  7617  136B  1D03               	skipz
  7618  136C  2B98               	goto	l6228
  7619                           
  7620                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7621  136D  0020               	movlb	0	; select bank0
  7622  136E  01E5               	clrf	setDelayOff_GO@command
  7623  136F  0AE5               	incf	setDelayOff_GO@command,f
  7624  1370  0022               	movlb	2	; select bank2
  7625  1371  0831               	movf	(_RF_Data^(0+256)+17),w
  7626  1372  0020               	movlb	0	; select bank0
  7627  1373  00ED               	movwf	??_setRFSW_Control
  7628  1374  086D               	movf	??_setRFSW_Control,w
  7629  1375  00E6               	movwf	setDelayOff_GO@value
  7630  1376  086F               	movf	setRFSW_Control@sw,w
  7631  1377  318C  24AB  3193   	fcall	_setDelayOff_GO
  7632                           
  7633                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7634  137A  0020               	movlb	0	; select bank0
  7635  137B  086F               	movf	setRFSW_Control@sw,w
  7636  137C  319C  24B5  3193   	fcall	_getDimmerLights_Status
  7637  137F  3A01               	xorlw	1
  7638  1380  1D03               	skipz
  7639  1381  2B98               	goto	l6228
  7640                           
  7641                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7642  1382  3064               	movlw	100
  7643  1383  0020               	movlb	0	; select bank0
  7644  1384  00A9               	movwf	setBuz@time
  7645  1385  3000               	movlw	0
  7646  1386  00AA               	movwf	setBuz@time+1
  7647  1387  3001               	movlw	1
  7648  1388  3195  25BD  3193   	fcall	_setBuz
  7649                           
  7650                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7651  138B  0020               	movlb	0	; select bank0
  7652  138C  01E5               	clrf	setRF_DimmerLights@on
  7653  138D  0AE5               	incf	setRF_DimmerLights@on,f
  7654  138E  086F               	movf	setRFSW_Control@sw,w
  7655  138F  3197  279B  3193   	fcall	_setRF_DimmerLights
  7656                           
  7657                           ;RF_Control_B1.c: 386: setTxData();
  7658  1392  318F  2745  3193   	fcall	_setTxData
  7659                           
  7660                           ;RF_Control_B1.c: 387: status = 1;
  7661  1395  0020               	movlb	0	; select bank0
  7662  1396  01EE               	clrf	setRFSW_Control@status
  7663  1397  0AEE               	incf	setRFSW_Control@status,f
  7664  1398                     l6228:	
  7665                           
  7666                           ;RF_Control_B1.c: 388: }
  7667                           ;RF_Control_B1.c: 389: }
  7668                           ;RF_Control_B1.c: 391: if (status == 0) {
  7669  1398  0020               	movlb	0	; select bank0
  7670  1399  08EE               	movf	setRFSW_Control@status,f
  7671  139A  1D03               	skipz
  7672  139B  0008               	return
  7673                           
  7674                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7675  139C  086F               	movf	setRFSW_Control@sw,w
  7676  139D  3192  2216  3193   	fcall	_setDimmerLights_SwOn
  7677                           
  7678                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7679  13A0  0020               	movlb	0	; select bank0
  7680  13A1  086F               	movf	setRFSW_Control@sw,w
  7681  13A2  3192  22B7         	fcall	_setDimmerLights_SwOff
  7682  13A4  0008               	return
  7683  13A5                     __end_of_setRFSW_Control:	
  7684                           
  7685                           	psect	text30
  7686  0BA4                     __ptext30:	
  7687 ;; *************** function _setRFSW_AdjControl *****************
  7688 ;; Defined at:
  7689 ;;		line 400 in file "../src/RF_Control_B1.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;  sw              1    wreg     unsigned char 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;  sw              1   72[BANK0 ] unsigned char 
  7694 ;;  status          1   71[BANK0 ] unsigned char 
  7695 ;; Return value:  Size  Location     Type
  7696 ;;		None               void
  7697 ;; Registers used:
  7698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7699 ;; Tracked objects:
  7700 ;;		On entry : 0/0
  7701 ;;		On exit  : 0/0
  7702 ;;		Unchanged: 0/0
  7703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;Total ram usage:        4 bytes
  7709 ;; Hardware stack levels used:    1
  7710 ;; Hardware stack levels required when called:    7
  7711 ;; This function calls:
  7712 ;;		_getDimmerLights_PercentToValue
  7713 ;;		_getDimmerLights_Status
  7714 ;;		_setDimmerIntr_Dimming_RF
  7715 ;;		_setDimmerIntr_MaxmumValue
  7716 ;;		_setDimmerLights_DimmingRun
  7717 ;;		_setDimmerLights_SwOff
  7718 ;;		_setDimmerLights_SwOn
  7719 ;;		_setMemory_Modify
  7720 ;;		_setProductData
  7721 ;;		_setTxData
  7722 ;; This function is called by:
  7723 ;;		_setControl_Lights_Table
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           
  7728                           ;psect for function _setRFSW_AdjControl
  7729  0BA4                     _setRFSW_AdjControl:	
  7730                           
  7731                           ;incstack = 0
  7732                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7733                           ;setRFSW_AdjControl@sw stored from wreg
  7734  0BA4  0020               	movlb	0	; select bank0
  7735  0BA5  00E8               	movwf	setRFSW_AdjControl@sw
  7736                           
  7737                           ;RF_Control_B1.c: 401: char status = 0;
  7738  0BA6  01E7               	clrf	setRFSW_AdjControl@status
  7739                           
  7740                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7741  0BA7  0868               	movf	setRFSW_AdjControl@sw,w
  7742  0BA8  319C  24B5  318B   	fcall	_getDimmerLights_Status
  7743  0BAB  0020               	movlb	0	; select bank0
  7744  0BAC  00E5               	movwf	??_setRFSW_AdjControl
  7745  0BAD  0865               	movf	??_setRFSW_AdjControl,w
  7746  0BAE  00E7               	movwf	setRFSW_AdjControl@status
  7747                           
  7748                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7749  0BAF  3065               	movlw	101
  7750  0BB0  0022               	movlb	2	; select bank2
  7751  0BB1  0229               	subwf	(_RF_Data^(0+256)+9),w
  7752  0BB2  1C03               	skipc
  7753  0BB3  2BBB               	goto	l6240
  7754                           
  7755                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7756  0BB4  3064               	movlw	100
  7757  0BB5  0020               	movlb	0	; select bank0
  7758  0BB6  00E5               	movwf	??_setRFSW_AdjControl
  7759  0BB7  0865               	movf	??_setRFSW_AdjControl,w
  7760  0BB8  0022               	movlb	2	; select bank2
  7761  0BB9  00A9               	movwf	(_RF_Data^(0+256)+9)
  7762                           
  7763                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7764  0BBA  2BC0               	goto	l6244
  7765  0BBB                     l6240:	
  7766  0BBB  08A9               	movf	(_RF_Data^(0+256)+9),f
  7767  0BBC  1D03               	skipz
  7768  0BBD  2BC0               	goto	l6244
  7769                           
  7770                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7771  0BBE  01A9               	clrf	(_RF_Data^(0+256)+9)
  7772  0BBF  0AA9               	incf	(_RF_Data^(0+256)+9),f
  7773  0BC0                     l6244:	
  7774                           
  7775                           ;RF_Control_B1.c: 409: }
  7776                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7777  0BC0  0829               	movf	(_RF_Data^(0+256)+9),w
  7778  0BC1  0020               	movlb	0	; select bank0
  7779  0BC2  00E5               	movwf	??_setRFSW_AdjControl
  7780  0BC3  0865               	movf	??_setRFSW_AdjControl,w
  7781  0BC4  00E2               	movwf	setProductData@value
  7782  0BC5  3009               	movlw	9
  7783  0BC6  319C  240F  318B   	fcall	_setProductData
  7784                           
  7785                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7786  0BC9  0020               	movlb	0	; select bank0
  7787  0BCA  0868               	movf	setRFSW_AdjControl@sw,w
  7788  0BCB  00E5               	movwf	??_setRFSW_AdjControl
  7789  0BCC  0865               	movf	??_setRFSW_AdjControl,w
  7790  0BCD  00E2               	movwf	setProductData@value
  7791  0BCE  300B               	movlw	11
  7792  0BCF  319C  240F  318B   	fcall	_setProductData
  7793                           
  7794                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7795  0BD2  0020               	movlb	0	; select bank0
  7796  0BD3  0868               	movf	setRFSW_AdjControl@sw,w
  7797  0BD4  3E1A               	addlw	26
  7798  0BD5  0021               	movlb	1	; select bank1
  7799  0BD6  076E               	addwf	_product^(0+128),w
  7800  0BD7  0020               	movlb	0	; select bank0
  7801  0BD8  00E5               	movwf	??_setRFSW_AdjControl
  7802  0BD9  0865               	movf	??_setRFSW_AdjControl,w
  7803  0BDA  0086               	movwf	6
  7804  0BDB  3002               	movlw	2	; select bank4/5
  7805  0BDC  0087               	movwf	7
  7806  0BDD  0801               	movf	1,w
  7807  0BDE  00E6               	movwf	??_setRFSW_AdjControl+1
  7808  0BDF  0866               	movf	??_setRFSW_AdjControl+1,w
  7809  0BE0  00E2               	movwf	setProductData@value
  7810  0BE1  3011               	movlw	17
  7811  0BE2  319C  240F  318B   	fcall	_setProductData
  7812                           
  7813                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7814  0BE5  0022               	movlb	2	; select bank2
  7815  0BE6  0829               	movf	(_RF_Data^(0+256)+9),w
  7816  0BE7  0020               	movlb	0	; select bank0
  7817  0BE8  00E5               	movwf	??_setRFSW_AdjControl
  7818  0BE9  0865               	movf	??_setRFSW_AdjControl,w
  7819  0BEA  00E2               	movwf	setProductData@value
  7820  0BEB  0868               	movf	setRFSW_AdjControl@sw,w
  7821  0BEC  3E14               	addlw	20
  7822  0BED  319C  240F  318B   	fcall	_setProductData
  7823                           
  7824                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7825  0BF0  3001               	movlw	1
  7826  0BF1  319D  259B  318B   	fcall	_setMemory_Modify
  7827                           
  7828                           ;RF_Control_B1.c: 416: if (status == 1) {
  7829  0BF4  0020               	movlb	0	; select bank0
  7830  0BF5  0867               	movf	setRFSW_AdjControl@status,w
  7831  0BF6  3A01               	xorlw	1
  7832  0BF7  1D03               	skipz
  7833  0BF8  2C10               	goto	l6254
  7834                           
  7835                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7836  0BF9  0022               	movlb	2	; select bank2
  7837  0BFA  0829               	movf	(_RF_Data^(0+256)+9),w
  7838  0BFB  3188  2038  318B   	fcall	_getDimmerLights_PercentToValue
  7839  0BFE  0020               	movlb	0	; select bank0
  7840  0BFF  00E5               	movwf	??_setRFSW_AdjControl
  7841  0C00  0865               	movf	??_setRFSW_AdjControl,w
  7842  0C01  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  7843  0C02  0868               	movf	setRFSW_AdjControl@sw,w
  7844  0C03  319C  241B  318B   	fcall	_setDimmerIntr_MaxmumValue
  7845                           
  7846                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7847  0C06  0020               	movlb	0	; select bank0
  7848  0C07  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  7849  0C08  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  7850  0C09  0868               	movf	setRFSW_AdjControl@sw,w
  7851  0C0A  319E  2680  318B   	fcall	_setDimmerIntr_Dimming_RF
  7852                           
  7853                           ;RF_Control_B1.c: 419: setTxData();
  7854  0C0D  318F  2745         	fcall	_setTxData
  7855                           
  7856                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7857  0C0F  0008               	return
  7858  0C10                     l6254:	
  7859  0C10  0020               	movlb	0	; select bank0
  7860  0C11  08E7               	movf	setRFSW_AdjControl@status,f
  7861  0C12  1D03               	skipz
  7862  0C13  0008               	return
  7863                           
  7864                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7865  0C14  01A2               	clrf	setDimmerLights_DimmingRun@command
  7866  0C15  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  7867  0C16  0868               	movf	setRFSW_AdjControl@sw,w
  7868  0C17  319F  2731  318B   	fcall	_setDimmerLights_DimmingRun
  7869                           
  7870                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7871  0C1A  0020               	movlb	0	; select bank0
  7872  0C1B  0868               	movf	setRFSW_AdjControl@sw,w
  7873  0C1C  3192  2216  318B   	fcall	_setDimmerLights_SwOn
  7874                           
  7875                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7876  0C1F  0020               	movlb	0	; select bank0
  7877  0C20  0868               	movf	setRFSW_AdjControl@sw,w
  7878  0C21  3192  22B7         	fcall	_setDimmerLights_SwOff
  7879  0C23  0008               	return
  7880  0C24                     __end_of_setRFSW_AdjControl:	
  7881                           
  7882                           	psect	text31
  7883  1D9B                     __ptext31:	
  7884 ;; *************** function _setMemory_Modify *****************
  7885 ;; Defined at:
  7886 ;;		line 1070 in file "../src/MCU_B1.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  command         1    wreg     unsigned char 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  command         1    1[BANK0 ] unsigned char 
  7891 ;; Return value:  Size  Location     Type
  7892 ;;		None               void
  7893 ;; Registers used:
  7894 ;;		wreg, status,2, status,0
  7895 ;; Tracked objects:
  7896 ;;		On entry : 0/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;Total ram usage:        2 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; Hardware stack levels required when called:    4
  7907 ;; This function calls:
  7908 ;;		Nothing
  7909 ;; This function is called by:
  7910 ;;		_setLog_Code
  7911 ;;		_setRFSW_AdjControl
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           
  7916                           ;psect for function _setMemory_Modify
  7917  1D9B                     _setMemory_Modify:	
  7918                           
  7919                           ;incstack = 0
  7920                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7921                           ;setMemory_Modify@command stored from wreg
  7922  1D9B  0020               	movlb	0	; select bank0
  7923  1D9C  00A1               	movwf	setMemory_Modify@command
  7924                           
  7925                           ;MCU_B1.c: 1071: Memory.Modify = command == 1 ? 1 : 0;
  7926  1D9D  0821               	movf	setMemory_Modify@command,w
  7927  1D9E  3A01               	xorlw	1
  7928  1D9F  3000               	movlw	0
  7929  1DA0  1903               	skipnz
  7930  1DA1  3001               	movlw	1
  7931  1DA2  00A0               	movwf	??_setMemory_Modify
  7932  1DA3  0023               	movlb	3	; select bank3
  7933  1DA4  0849               	movf	(_Memory^(0+384)+36),w
  7934  1DA5  0020               	movlb	0	; select bank0
  7935  1DA6  0620               	xorwf	??_setMemory_Modify,w
  7936  1DA7  39FE               	andlw	-2
  7937  1DA8  0620               	xorwf	??_setMemory_Modify,w
  7938  1DA9  0023               	movlb	3	; select bank3
  7939  1DAA  00C9               	movwf	(_Memory^(0+384)+36)
  7940                           
  7941                           ;MCU_B1.c: 1072: Memory.Time = 0;
  7942  1DAB  01C7               	clrf	(_Memory^(0+384)+34)
  7943  1DAC  01C8               	clrf	((_Memory+1)^(0+384)+34)
  7944  1DAD  0008               	return
  7945  1DAE                     __end_of_setMemory_Modify:	
  7946                           
  7947                           	psect	text32
  7948  1F31                     __ptext32:	
  7949 ;; *************** function _setDimmerLights_DimmingRun *****************
  7950 ;; Defined at:
  7951 ;;		line 1012 in file "../src/Dimmer_B1.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  lights          1    wreg     unsigned char 
  7954 ;;  command         1    2[BANK0 ] unsigned char 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  lights          1    4[BANK0 ] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;		None               void
  7959 ;; Registers used:
  7960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7966 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;Total ram usage:        3 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    5
  7973 ;; This function calls:
  7974 ;;		_DimmerLights_SelectPointer
  7975 ;; This function is called by:
  7976 ;;		_setRFSW_AdjControl
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function _setDimmerLights_DimmingRun
  7982  1F31                     _setDimmerLights_DimmingRun:	
  7983                           
  7984                           ;incstack = 0
  7985                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7986                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7987  1F31  0020               	movlb	0	; select bank0
  7988  1F32  00A4               	movwf	setDimmerLights_DimmingRun@lights
  7989                           
  7990                           ;Dimmer_B1.c: 1013: DimmerLights_SelectPointer(lights);
  7991  1F33  0824               	movf	setDimmerLights_DimmingRun@lights,w
  7992  1F34  319C  2403         	fcall	_DimmerLights_SelectPointer
  7993                           
  7994                           ;Dimmer_B1.c: 1014: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7995  1F36  0020               	movlb	0	; select bank0
  7996  1F37  0822               	movf	setDimmerLights_DimmingRun@command,w
  7997  1F38  3A01               	xorlw	1
  7998  1F39  3000               	movlw	0
  7999  1F3A  1903               	skipnz
  8000  1F3B  3001               	movlw	1
  8001  1F3C  00A3               	movwf	??_setDimmerLights_DimmingRun
  8002  1F3D  0021               	movlb	1	; select bank1
  8003  1F3E  0A52               	incf	_DimmerLights^(0+128),w
  8004  1F3F  0086               	movwf	6
  8005  1F40  3001               	movlw	1	; select bank2/3
  8006  1F41  0087               	movwf	7
  8007  1F42  0020               	movlb	0	; select bank0
  8008  1F43  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8009  1F44  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8010  1F45  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8011  1F46  0801               	movf	1,w
  8012  1F47  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8013  1F48  39BF               	andlw	-65
  8014  1F49  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8015  1F4A  0081               	movwf	1
  8016  1F4B  0008               	return
  8017  1F4C                     __end_of_setDimmerLights_DimmingRun:	
  8018                           
  8019                           	psect	text33
  8020  1CF9                     __ptext33:	
  8021 ;; *************** function _getRF_KeyStatus *****************
  8022 ;; Defined at:
  8023 ;;		line 166 in file "../src/RF_Control_B1.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;		None
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;  key             1    1[BANK0 ] unsigned char 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      unsigned char 
  8030 ;; Registers used:
  8031 ;;		wreg, status,2
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;Total ram usage:        3 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    4
  8044 ;; This function calls:
  8045 ;;		Nothing
  8046 ;; This function is called by:
  8047 ;;		_setRF_Main
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           
  8052                           ;psect for function _getRF_KeyStatus
  8053  1CF9                     _getRF_KeyStatus:	
  8054                           
  8055                           ;RF_Control_B1.c: 167: char key = 0;
  8056                           
  8057                           ;incstack = 0
  8058                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8059  1CF9  0020               	movlb	0	; select bank0
  8060  1CFA  01A1               	clrf	getRF_KeyStatus@key
  8061                           
  8062                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8063  1CFB  01A2               	clrf	_getRF_KeyStatus$5085
  8064  1CFC  0AA2               	incf	_getRF_KeyStatus$5085,f
  8065  1CFD  1F0C               	btfss	12,6	;volatile
  8066  1CFE  1A0C               	btfsc	12,4	;volatile
  8067  1CFF  2D04               	goto	l6802
  8068  1D00  1C0C               	btfss	12,0	;volatile
  8069  1D01  1B8C               	btfsc	12,7	;volatile
  8070  1D02  2D04               	goto	l6802
  8071  1D03  01A2               	clrf	_getRF_KeyStatus$5085
  8072  1D04                     l6802:	
  8073  1D04  0822               	movf	_getRF_KeyStatus$5085,w
  8074  1D05  00A0               	movwf	??_getRF_KeyStatus
  8075  1D06  0820               	movf	??_getRF_KeyStatus,w
  8076  1D07  00A1               	movwf	getRF_KeyStatus@key
  8077                           
  8078                           ;RF_Control_B1.c: 179: return key;
  8079  1D08  0821               	movf	getRF_KeyStatus@key,w
  8080  1D09  0008               	return
  8081  1D0A                     __end_of_getRF_KeyStatus:	
  8082                           
  8083                           	psect	text34
  8084  1CE8                     __ptext34:	
  8085 ;; *************** function _getBuz_GO *****************
  8086 ;; Defined at:
  8087 ;;		line 82 in file "../src/Buzzer_B1.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;		None
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  i               2    4[BANK0 ] int 
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  2    0[BANK0 ] int 
  8094 ;; Registers used:
  8095 ;;		wreg, status,2, status,0
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8101 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;Total ram usage:        6 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    4
  8108 ;; This function calls:
  8109 ;;		Nothing
  8110 ;; This function is called by:
  8111 ;;		_setRF_Main
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           
  8116                           ;psect for function _getBuz_GO
  8117  1CE8                     _getBuz_GO:	
  8118                           
  8119                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8120                           
  8121                           ;incstack = 0
  8122                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8123  1CE8  0021               	movlb	1	; select bank1
  8124  1CE9  0C3B               	rrf	_Buz1^(0+128),w
  8125  1CEA  3901               	andlw	1
  8126  1CEB  0020               	movlb	0	; select bank0
  8127  1CEC  00A2               	movwf	??_getBuz_GO
  8128  1CED  01A3               	clrf	??_getBuz_GO+1
  8129  1CEE  0822               	movf	??_getBuz_GO,w
  8130  1CEF  00A4               	movwf	getBuz_GO@i
  8131  1CF0  0823               	movf	??_getBuz_GO+1,w
  8132  1CF1  00A5               	movwf	getBuz_GO@i+1
  8133                           
  8134                           ;Buzzer_B1.c: 84: return i;
  8135  1CF2  0825               	movf	getBuz_GO@i+1,w
  8136  1CF3  01A1               	clrf	?_getBuz_GO+1
  8137  1CF4  07A1               	addwf	?_getBuz_GO+1,f
  8138  1CF5  0824               	movf	getBuz_GO@i,w
  8139  1CF6  01A0               	clrf	?_getBuz_GO
  8140  1CF7  07A0               	addwf	?_getBuz_GO,f
  8141  1CF8  0008               	return
  8142  1CF9                     __end_of_getBuz_GO:	
  8143                           
  8144                           	psect	text35
  8145  1C96                     __ptext35:	
  8146 ;; *************** function _RF_RxDisable *****************
  8147 ;; Defined at:
  8148 ;;		line 154 in file "../src/RF_Control_B1.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;		None
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;		None
  8153 ;; Return value:  Size  Location     Type
  8154 ;;		None               void
  8155 ;; Registers used:
  8156 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;Total ram usage:        0 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    6
  8169 ;; This function calls:
  8170 ;;		_CC2500_WriteCommand
  8171 ;; This function is called by:
  8172 ;;		_setRF_Main
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           
  8177                           ;psect for function _RF_RxDisable
  8178  1C96                     _RF_RxDisable:	
  8179                           
  8180                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8181                           
  8182                           ;incstack = 0
  8183                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8184  1C96  0021               	movlb	1	; select bank1
  8185  1C97  18A0               	btfsc	_RF1^(0+128),1
  8186  1C98  2C9B               	goto	l2124
  8187  1C99  1DA0               	btfss	_RF1^(0+128),3
  8188  1C9A  0008               	return
  8189  1C9B                     l2124:	
  8190                           
  8191                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8192  1C9B  11A0               	bcf	_RF1^(0+128),3
  8193                           
  8194                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8195  1C9C  10A0               	bcf	_RF1^(0+128),1
  8196                           
  8197                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8198  1C9D  3036               	movlw	54
  8199  1C9E  319F  2717  319C   	fcall	_CC2500_WriteCommand
  8200                           
  8201                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8202  1CA1  303A               	movlw	58
  8203  1CA2  319F  2717         	fcall	_CC2500_WriteCommand
  8204  1CA4  0008               	return
  8205  1CA5                     __end_of_RF_RxDisable:	
  8206                           
  8207                           	psect	text36
  8208  0973                     __ptext36:	
  8209 ;; *************** function _CC2500_TxData *****************
  8210 ;; Defined at:
  8211 ;;		line 32 in file "../src/CC2500_B1.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;		None
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;		None               void
  8218 ;; Registers used:
  8219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:        2 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    6
  8232 ;; This function calls:
  8233 ;;		_CC2500_WriteByte
  8234 ;;		_CC2500_WriteCommand
  8235 ;;		_RF_Timeout_Counter
  8236 ;;		_setRF_TimeoutCleared
  8237 ;; This function is called by:
  8238 ;;		_setRF_Main
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           
  8243                           ;psect for function _CC2500_TxData
  8244  0973                     _CC2500_TxData:	
  8245                           
  8246                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8247                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8248                           
  8249                           ;incstack = 0
  8250                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8251  0973  3036               	movlw	54
  8252  0974  319F  2717  3189   	fcall	_CC2500_WriteCommand
  8253                           
  8254                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8255  0977  303B               	movlw	59
  8256  0978  319F  2717  3189   	fcall	_CC2500_WriteCommand
  8257                           
  8258                           ;CC2500_B1.c: 38: RC0 = 0;
  8259  097B  0020               	movlb	0	; select bank0
  8260  097C  100E               	bcf	14,0	;volatile
  8261                           
  8262                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8263  097D  307F               	movlw	127
  8264  097E  00A4               	movwf	??_CC2500_TxData
  8265  097F  0824               	movf	??_CC2500_TxData,w
  8266  0980  0021               	movlb	1	; select bank1
  8267  0981  00D5               	movwf	_SPI0Buffer^(0+128)
  8268                           
  8269                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8270  0982  2986               	goto	l8318
  8271  0983                     l8316:	
  8272                           
  8273                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8274  0983  319D  25E8  3189   	fcall	_RF_Timeout_Counter
  8275  0986                     l8318:	
  8276  0986  0020               	movlb	0	; select bank0
  8277  0987  1E8E               	btfss	14,5	;volatile
  8278  0988  298C               	goto	l8322
  8279  0989  0021               	movlb	1	; select bank1
  8280  098A  1F21               	btfss	(_RF1^(0+128)+1),6
  8281  098B  2983               	goto	l8316
  8282  098C                     l8322:	
  8283                           
  8284                           ;CC2500_B1.c: 42: };
  8285                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8286  098C  319B  234F  3189   	fcall	_setRF_TimeoutCleared
  8287                           
  8288                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8289  098F  319E  26CA  3189   	fcall	_CC2500_WriteByte
  8290                           
  8291                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8292  0992  0021               	movlb	1	; select bank1
  8293  0993  0858               	movf	_Tx_Length^(0+128),w
  8294  0994  0020               	movlb	0	; select bank0
  8295  0995  00A4               	movwf	??_CC2500_TxData
  8296  0996  0824               	movf	??_CC2500_TxData,w
  8297  0997  0021               	movlb	1	; select bank1
  8298  0998  00D5               	movwf	_SPI0Buffer^(0+128)
  8299                           
  8300                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8301  0999  319E  26CA  3189   	fcall	_CC2500_WriteByte
  8302                           
  8303                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8304  099C  0020               	movlb	0	; select bank0
  8305  099D  01A5               	clrf	CC2500_TxData@loop_e
  8306  099E                     l8336:	
  8307  099E  0021               	movlb	1	; select bank1
  8308  099F  0858               	movf	_Tx_Length^(0+128),w
  8309  09A0  0020               	movlb	0	; select bank0
  8310  09A1  0225               	subwf	CC2500_TxData@loop_e,w
  8311  09A2  1803               	btfsc	3,0
  8312  09A3  29B7               	goto	l235
  8313                           
  8314                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8315  09A4  0825               	movf	CC2500_TxData@loop_e,w
  8316  09A5  3E20               	addlw	_RF_Data& (0+255)
  8317  09A6  0086               	movwf	6
  8318  09A7  3001               	movlw	1	; select bank2/3
  8319  09A8  0087               	movwf	7
  8320  09A9  0801               	movf	1,w
  8321  09AA  00A4               	movwf	??_CC2500_TxData
  8322  09AB  0824               	movf	??_CC2500_TxData,w
  8323  09AC  0021               	movlb	1	; select bank1
  8324  09AD  00D5               	movwf	_SPI0Buffer^(0+128)
  8325                           
  8326                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8327  09AE  319E  26CA  3189   	fcall	_CC2500_WriteByte
  8328  09B1  3001               	movlw	1
  8329  09B2  0020               	movlb	0	; select bank0
  8330  09B3  00A4               	movwf	??_CC2500_TxData
  8331  09B4  0824               	movf	??_CC2500_TxData,w
  8332  09B5  07A5               	addwf	CC2500_TxData@loop_e,f
  8333  09B6  299E               	goto	l8336
  8334  09B7                     l235:	
  8335                           
  8336                           ;CC2500_B1.c: 51: }
  8337                           ;CC2500_B1.c: 52: RC0 = 1;
  8338  09B7  140E               	bsf	14,0	;volatile
  8339                           
  8340                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8341  09B8  3035               	movlw	53
  8342  09B9  319F  2717  3189   	fcall	_CC2500_WriteCommand
  8343                           
  8344                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8345  09BC  29C0               	goto	l8342
  8346  09BD                     l8340:	
  8347                           
  8348                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8349  09BD  319D  25E8  3189   	fcall	_RF_Timeout_Counter
  8350  09C0                     l8342:	
  8351  09C0  0020               	movlb	0	; select bank0
  8352  09C1  188E               	btfsc	14,1	;volatile
  8353  09C2  29C6               	goto	l8346
  8354  09C3  0021               	movlb	1	; select bank1
  8355  09C4  1F21               	btfss	(_RF1^(0+128)+1),6
  8356  09C5  29BD               	goto	l8340
  8357  09C6                     l8346:	
  8358                           
  8359                           ;CC2500_B1.c: 56: };
  8360                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8361  09C6  319B  234F  3189   	fcall	_setRF_TimeoutCleared
  8362                           
  8363                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8364  09C9  29CD               	goto	l8350
  8365  09CA                     l8348:	
  8366                           
  8367                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8368  09CA  319D  25E8  3189   	fcall	_RF_Timeout_Counter
  8369  09CD                     l8350:	
  8370  09CD  0020               	movlb	0	; select bank0
  8371  09CE  1C8E               	btfss	14,1	;volatile
  8372  09CF  29D3               	goto	l8354
  8373  09D0  0021               	movlb	1	; select bank1
  8374  09D1  1F21               	btfss	(_RF1^(0+128)+1),6
  8375  09D2  29CA               	goto	l8348
  8376  09D3                     l8354:	
  8377                           
  8378                           ;CC2500_B1.c: 61: };
  8379                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8380  09D3  319B  234F  3189   	fcall	_setRF_TimeoutCleared
  8381                           
  8382                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8383  09D6  3036               	movlw	54
  8384  09D7  319F  2717  3189   	fcall	_CC2500_WriteCommand
  8385                           
  8386                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8387  09DA  303B               	movlw	59
  8388  09DB  319F  2717         	fcall	_CC2500_WriteCommand
  8389                           
  8390                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8391  09DD  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8392  09DE  0008               	return
  8393  09DF                     __end_of_CC2500_TxData:	
  8394                           
  8395                           	psect	text37
  8396  0908                     __ptext37:	
  8397 ;; *************** function _CC2500_RxData *****************
  8398 ;; Defined at:
  8399 ;;		line 73 in file "../src/CC2500_B1.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;		None
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;		None               void
  8406 ;; Registers used:
  8407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;Total ram usage:        2 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    6
  8420 ;; This function calls:
  8421 ;;		_CC2500_ReadByte
  8422 ;;		_CC2500_ReadStatus
  8423 ;;		_CC2500_WriteByte
  8424 ;;		_CC2500_WriteCommand
  8425 ;;		_RF_Timeout_Counter
  8426 ;;		_setRF_TimeoutCleared
  8427 ;; This function is called by:
  8428 ;;		_setRF_Main
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           
  8433                           ;psect for function _CC2500_RxData
  8434  0908                     _CC2500_RxData:	
  8435                           
  8436                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8437                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8438                           
  8439                           ;incstack = 0
  8440                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8441  0908  0020               	movlb	0	; select bank0
  8442  0909  188E               	btfsc	14,1	;volatile
  8443  090A  0008               	return
  8444                           
  8445                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8446  090B  303B               	movlw	59
  8447  090C  3191  210B  3189   	fcall	_CC2500_ReadStatus
  8448                           
  8449                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8450  090F  0021               	movlb	1	; select bank1
  8451  0910  085B               	movf	_s_data^(0+128),w
  8452  0911  1903               	btfsc	3,2
  8453  0912  0008               	return
  8454                           
  8455                           ;CC2500_B1.c: 90: RC0 = 0;
  8456  0913  0020               	movlb	0	; select bank0
  8457  0914  100E               	bcf	14,0	;volatile
  8458                           
  8459                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8460  0915  30FF               	movlw	255
  8461  0916  00A4               	movwf	??_CC2500_RxData
  8462  0917  0824               	movf	??_CC2500_RxData,w
  8463  0918  0021               	movlb	1	; select bank1
  8464  0919  00D5               	movwf	_SPI0Buffer^(0+128)
  8465                           
  8466                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8467  091A  291E               	goto	l8374
  8468  091B                     l8372:	
  8469                           
  8470                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8471  091B  319D  25E8  3189   	fcall	_RF_Timeout_Counter
  8472  091E                     l8374:	
  8473  091E  0020               	movlb	0	; select bank0
  8474  091F  1E8E               	btfss	14,5	;volatile
  8475  0920  2924               	goto	l8378
  8476  0921  0021               	movlb	1	; select bank1
  8477  0922  1F21               	btfss	(_RF1^(0+128)+1),6
  8478  0923  291B               	goto	l8372
  8479  0924                     l8378:	
  8480                           
  8481                           ;CC2500_B1.c: 95: };
  8482                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8483  0924  319B  234F  3189   	fcall	_setRF_TimeoutCleared
  8484                           
  8485                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8486  0927  319E  26CA  3189   	fcall	_CC2500_WriteByte
  8487                           
  8488                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8489  092A  3190  2066  3189   	fcall	_CC2500_ReadByte
  8490                           
  8491                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8492  092D  0021               	movlb	1	; select bank1
  8493  092E  0855               	movf	_SPI0Buffer^(0+128),w
  8494  092F  0020               	movlb	0	; select bank0
  8495  0930  00A4               	movwf	??_CC2500_RxData
  8496  0931  0824               	movf	??_CC2500_RxData,w
  8497  0932  0021               	movlb	1	; select bank1
  8498  0933  00D4               	movwf	_Rx_Length^(0+128)
  8499                           
  8500                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8501  0934  0020               	movlb	0	; select bank0
  8502  0935  01A5               	clrf	CC2500_RxData@loop_f
  8503  0936                     l8394:	
  8504  0936  0021               	movlb	1	; select bank1
  8505  0937  0854               	movf	_Rx_Length^(0+128),w
  8506  0938  0020               	movlb	0	; select bank0
  8507  0939  0225               	subwf	CC2500_RxData@loop_f,w
  8508  093A  1803               	btfsc	3,0
  8509  093B  294F               	goto	l8396
  8510                           
  8511                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8512  093C  3190  2066  3189   	fcall	_CC2500_ReadByte
  8513                           
  8514                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8515  093F  0021               	movlb	1	; select bank1
  8516  0940  0855               	movf	_SPI0Buffer^(0+128),w
  8517  0941  0020               	movlb	0	; select bank0
  8518  0942  00A4               	movwf	??_CC2500_RxData
  8519  0943  0825               	movf	CC2500_RxData@loop_f,w
  8520  0944  3E20               	addlw	_RF_Data& (0+255)
  8521  0945  0086               	movwf	6
  8522  0946  3001               	movlw	1	; select bank2/3
  8523  0947  0087               	movwf	7
  8524  0948  0824               	movf	??_CC2500_RxData,w
  8525  0949  0081               	movwf	1
  8526  094A  3001               	movlw	1
  8527  094B  00A4               	movwf	??_CC2500_RxData
  8528  094C  0824               	movf	??_CC2500_RxData,w
  8529  094D  07A5               	addwf	CC2500_RxData@loop_f,f
  8530  094E  2936               	goto	l8394
  8531  094F                     l8396:	
  8532                           
  8533                           ;CC2500_B1.c: 104: }
  8534                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8535  094F  3190  2066  3189   	fcall	_CC2500_ReadByte
  8536                           
  8537                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8538  0952  0021               	movlb	1	; select bank1
  8539  0953  0855               	movf	_SPI0Buffer^(0+128),w
  8540  0954  0020               	movlb	0	; select bank0
  8541  0955  00A4               	movwf	??_CC2500_RxData
  8542  0956  0824               	movf	??_CC2500_RxData,w
  8543  0957  0022               	movlb	2	; select bank2
  8544  0958  00C7               	movwf	_RSSI^(0+256)
  8545                           
  8546                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8547  0959  3190  2066  3189   	fcall	_CC2500_ReadByte
  8548                           
  8549                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8550  095C  0021               	movlb	1	; select bank1
  8551  095D  0855               	movf	_SPI0Buffer^(0+128),w
  8552  095E  0020               	movlb	0	; select bank0
  8553  095F  00A4               	movwf	??_CC2500_RxData
  8554  0960  0824               	movf	??_CC2500_RxData,w
  8555  0961  0021               	movlb	1	; select bank1
  8556  0962  00CF               	movwf	_CRC^(0+128)
  8557                           
  8558                           ;CC2500_B1.c: 109: RC0 = 1;
  8559  0963  0020               	movlb	0	; select bank0
  8560  0964  140E               	bsf	14,0	;volatile
  8561                           
  8562                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8563  0965  0021               	movlb	1	; select bank1
  8564  0966  1BCF               	btfsc	_CRC^(0+128),7
  8565                           
  8566                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8567  0967  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8568                           
  8569                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8570  0968  11A0               	bcf	_RF1^(0+128),3
  8571                           
  8572                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8573  0969  14A0               	bsf	_RF1^(0+128),1
  8574                           
  8575                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8576  096A  3036               	movlw	54
  8577  096B  319F  2717  3189   	fcall	_CC2500_WriteCommand
  8578                           
  8579                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8580  096E  303A               	movlw	58
  8581  096F  319F  2717         	fcall	_CC2500_WriteCommand
  8582  0971  0021               	movlb	1	; select bank1
  8583  0972  0008               	return
  8584  0973                     __end_of_CC2500_RxData:	
  8585                           
  8586                           	psect	text38
  8587  110B                     __ptext38:	
  8588 ;; *************** function _CC2500_ReadStatus *****************
  8589 ;; Defined at:
  8590 ;;		line 308 in file "../src/CC2500_B1.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;  status_addr     1    wreg     unsigned char 
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8595 ;; Return value:  Size  Location     Type
  8596 ;;		None               void
  8597 ;; Registers used:
  8598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;Total ram usage:        2 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    5
  8611 ;; This function calls:
  8612 ;;		_CC2500_ReadByte
  8613 ;;		_CC2500_WriteByte
  8614 ;;		_RF_Timeout_Counter
  8615 ;;		_setRF_TimeoutCleared
  8616 ;; This function is called by:
  8617 ;;		_CC2500_RxData
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           
  8622                           ;psect for function _CC2500_ReadStatus
  8623  110B                     _CC2500_ReadStatus:	
  8624                           
  8625                           ;incstack = 0
  8626                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8627                           ;CC2500_ReadStatus@status_addr stored from wreg
  8628  110B  0020               	movlb	0	; select bank0
  8629  110C  00A3               	movwf	CC2500_ReadStatus@status_addr
  8630                           
  8631                           ;CC2500_B1.c: 309: RC0 = 0;
  8632  110D  100E               	bcf	14,0	;volatile
  8633                           
  8634                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8635  110E  0823               	movf	CC2500_ReadStatus@status_addr,w
  8636  110F  3EC0               	addlw	192
  8637  1110  00A2               	movwf	??_CC2500_ReadStatus
  8638  1111  0822               	movf	??_CC2500_ReadStatus,w
  8639  1112  0021               	movlb	1	; select bank1
  8640  1113  00D5               	movwf	_SPI0Buffer^(0+128)
  8641                           
  8642                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8643  1114  2918               	goto	l8224
  8644  1115                     l8222:	
  8645                           
  8646                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8647  1115  319D  25E8  3191   	fcall	_RF_Timeout_Counter
  8648  1118                     l8224:	
  8649  1118  0020               	movlb	0	; select bank0
  8650  1119  1E8E               	btfss	14,5	;volatile
  8651  111A  291E               	goto	l8228
  8652  111B  0021               	movlb	1	; select bank1
  8653  111C  1F21               	btfss	(_RF1^(0+128)+1),6
  8654  111D  2915               	goto	l8222
  8655  111E                     l8228:	
  8656                           
  8657                           ;CC2500_B1.c: 314: };
  8658                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8659  111E  319B  234F  3191   	fcall	_setRF_TimeoutCleared
  8660                           
  8661                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8662  1121  319E  26CA  3191   	fcall	_CC2500_WriteByte
  8663                           
  8664                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8665  1124  3190  2066         	fcall	_CC2500_ReadByte
  8666                           
  8667                           ;CC2500_B1.c: 319: RC0 = 1;
  8668  1126  0020               	movlb	0	; select bank0
  8669  1127  140E               	bsf	14,0	;volatile
  8670                           
  8671                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8672  1128  0021               	movlb	1	; select bank1
  8673  1129  0855               	movf	_SPI0Buffer^(0+128),w
  8674  112A  0020               	movlb	0	; select bank0
  8675  112B  00A2               	movwf	??_CC2500_ReadStatus
  8676  112C  0822               	movf	??_CC2500_ReadStatus,w
  8677  112D  0021               	movlb	1	; select bank1
  8678  112E  00DB               	movwf	_s_data^(0+128)
  8679  112F  0008               	return
  8680  1130                     __end_of_CC2500_ReadStatus:	
  8681                           
  8682                           	psect	text39
  8683  1066                     __ptext39:	
  8684 ;; *************** function _CC2500_ReadByte *****************
  8685 ;; Defined at:
  8686 ;;		line 242 in file "../src/CC2500_B1.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8691 ;; Return value:  Size  Location     Type
  8692 ;;		None               void
  8693 ;; Registers used:
  8694 ;;		wreg, status,2, status,0
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;Total ram usage:        2 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    4
  8707 ;; This function calls:
  8708 ;;		Nothing
  8709 ;; This function is called by:
  8710 ;;		_CC2500_RxData
  8711 ;;		_CC2500_ReadStatus
  8712 ;;		_CC2500_ReadREG
  8713 ;; This function uses a non-reentrant model
  8714 ;;
  8715                           
  8716                           
  8717                           ;psect for function _CC2500_ReadByte
  8718  1066                     _CC2500_ReadByte:	
  8719                           
  8720                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8721                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8722                           
  8723                           ;incstack = 0
  8724                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8725  1066  0020               	movlb	0	; select bank0
  8726  1067  01A1               	clrf	CC2500_ReadByte@loop_b
  8727  1068                     L2:	
  8728  1068  3008               	movlw	8
  8729  1069  0221               	subwf	CC2500_ReadByte@loop_b,w
  8730  106A  1803               	btfsc	3,0
  8731  106B  0008               	return
  8732                           
  8733                           ;CC2500_B1.c: 245: RC3 = 1;
  8734  106C  158E               	bsf	14,3	;volatile
  8735                           
  8736                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8737  106D  1003               	clrc
  8738  106E  0021               	movlb	1	; select bank1
  8739  106F  0DD5               	rlf	_SPI0Buffer^(0+128),f
  8740                           
  8741                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8742  1070  0020               	movlb	0	; select bank0
  8743  1071  1E8E               	btfss	14,5	;volatile
  8744  1072  2876               	goto	l8194
  8745                           
  8746                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8747  1073  0021               	movlb	1	; select bank1
  8748  1074  1455               	bsf	_SPI0Buffer^(0+128),0
  8749  1075  287C               	goto	l8196
  8750  1076                     l8194:	
  8751                           
  8752                           ;CC2500_B1.c: 249: else
  8753                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8754  1076  30FE               	movlw	254
  8755  1077  0020               	movlb	0	; select bank0
  8756  1078  00A0               	movwf	??_CC2500_ReadByte
  8757  1079  0820               	movf	??_CC2500_ReadByte,w
  8758  107A  0021               	movlb	1	; select bank1
  8759  107B  05D5               	andwf	_SPI0Buffer^(0+128),f
  8760  107C                     l8196:	
  8761                           
  8762                           ;CC2500_B1.c: 251: RC3 = 0;
  8763  107C  0020               	movlb	0	; select bank0
  8764  107D  118E               	bcf	14,3	;volatile
  8765  107E  3001               	movlw	1
  8766  107F  00A0               	movwf	??_CC2500_ReadByte
  8767  1080  0820               	movf	??_CC2500_ReadByte,w
  8768  1081  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8769  1082  2868               	goto	L2
  8770  1083                     __end_of_CC2500_ReadByte:	
  8771                           
  8772                           	psect	text40
  8773  1DFD                     __ptext40:	
  8774 ;; *************** function _CC2500_PowerOnInitial *****************
  8775 ;; Defined at:
  8776 ;;		line 126 in file "../src/CC2500_B1.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;		None               void
  8783 ;; Registers used:
  8784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    7
  8797 ;; This function calls:
  8798 ;;		_CC2500_ClearRXFIFO
  8799 ;;		_CC2500_ClearTXFIFO
  8800 ;;		_CC2500_FrequencyCabr
  8801 ;;		_CC2500_InitPATable
  8802 ;;		_CC2500_InitSetREG
  8803 ;;		_CC2500_PowerRST
  8804 ;;		_CC2500_SIDLEMode
  8805 ;; This function is called by:
  8806 ;;		_main
  8807 ;;		_setRF_Main
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           
  8812                           ;psect for function _CC2500_PowerOnInitial
  8813  1DFD                     _CC2500_PowerOnInitial:	
  8814                           
  8815                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8816                           
  8817                           ;incstack = 0
  8818                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8819  1DFD  3193  23E5  319D   	fcall	_CC2500_PowerRST
  8820                           
  8821                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8822  1E00  3191  2156  319D   	fcall	_CC2500_InitSetREG
  8823                           
  8824                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8825  1E03  319F  27C1  319D   	fcall	_CC2500_InitPATable
  8826                           
  8827                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8828  1E06  319B  2357  319D   	fcall	_CC2500_ClearTXFIFO
  8829                           
  8830                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8831  1E09  319B  2353  319D   	fcall	_CC2500_ClearRXFIFO
  8832                           
  8833                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8834  1E0C  319C  246F  319D   	fcall	_CC2500_FrequencyCabr
  8835                           
  8836                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8837  1E0F  319B  235B         	fcall	_CC2500_SIDLEMode
  8838  1E11  0008               	return
  8839  1E12                     __end_of_CC2500_PowerOnInitial:	
  8840                           
  8841                           	psect	text41
  8842  1B5B                     __ptext41:	
  8843 ;; *************** function _CC2500_SIDLEMode *****************
  8844 ;; Defined at:
  8845 ;;		line 216 in file "../src/CC2500_B1.c"
  8846 ;; Parameters:    Size  Location     Type
  8847 ;;		None
  8848 ;; Auto vars:     Size  Location     Type
  8849 ;;		None
  8850 ;; Return value:  Size  Location     Type
  8851 ;;		None               void
  8852 ;; Registers used:
  8853 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;Total ram usage:        0 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:    6
  8866 ;; This function calls:
  8867 ;;		_CC2500_WriteCommand
  8868 ;; This function is called by:
  8869 ;;		_CC2500_PowerOnInitial
  8870 ;; This function uses a non-reentrant model
  8871 ;;
  8872                           
  8873                           
  8874                           ;psect for function _CC2500_SIDLEMode
  8875  1B5B                     _CC2500_SIDLEMode:	
  8876                           
  8877                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8878                           
  8879                           ;incstack = 0
  8880                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8881  1B5B  3036               	movlw	54
  8882  1B5C  319F  2717         	fcall	_CC2500_WriteCommand
  8883  1B5E  0008               	return
  8884  1B5F                     __end_of_CC2500_SIDLEMode:	
  8885                           
  8886                           	psect	text42
  8887  13E5                     __ptext42:	
  8888 ;; *************** function _CC2500_PowerRST *****************
  8889 ;; Defined at:
  8890 ;;		line 139 in file "../src/CC2500_B1.c"
  8891 ;; Parameters:    Size  Location     Type
  8892 ;;		None
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;		None
  8895 ;; Return value:  Size  Location     Type
  8896 ;;		None               void
  8897 ;; Registers used:
  8898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8899 ;; Tracked objects:
  8900 ;;		On entry : 0/0
  8901 ;;		On exit  : 0/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;Total ram usage:        1 bytes
  8909 ;; Hardware stack levels used:    1
  8910 ;; Hardware stack levels required when called:    5
  8911 ;; This function calls:
  8912 ;;		_CC2500_WriteByte
  8913 ;;		_DelayTime_1us
  8914 ;;		_RF_Timeout_Counter
  8915 ;;		_setRF_TimeoutCleared
  8916 ;; This function is called by:
  8917 ;;		_CC2500_PowerOnInitial
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           
  8922                           ;psect for function _CC2500_PowerRST
  8923  13E5                     _CC2500_PowerRST:	
  8924                           
  8925                           ;CC2500_B1.c: 140: RC3 = 0;
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8929  13E5  0020               	movlb	0	; select bank0
  8930  13E6  118E               	bcf	14,3	;volatile
  8931                           
  8932                           ;CC2500_B1.c: 141: RC4 = 0;
  8933  13E7  120E               	bcf	14,4	;volatile
  8934                           
  8935                           ;CC2500_B1.c: 142: RC0 = 1;
  8936  13E8  140E               	bsf	14,0	;volatile
  8937                           
  8938                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8939  13E9  300A               	movlw	10
  8940  13EA  00A0               	movwf	DelayTime_1us@count
  8941  13EB  3000               	movlw	0
  8942  13EC  00A1               	movwf	DelayTime_1us@count+1
  8943  13ED  3191  2130  3193   	fcall	_DelayTime_1us
  8944                           
  8945                           ;CC2500_B1.c: 144: RC0 = 0;
  8946  13F0  0020               	movlb	0	; select bank0
  8947  13F1  100E               	bcf	14,0	;volatile
  8948                           
  8949                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8950  13F2  300A               	movlw	10
  8951  13F3  00A0               	movwf	DelayTime_1us@count
  8952  13F4  3000               	movlw	0
  8953  13F5  00A1               	movwf	DelayTime_1us@count+1
  8954  13F6  3191  2130  3193   	fcall	_DelayTime_1us
  8955                           
  8956                           ;CC2500_B1.c: 146: RC0 = 1;
  8957  13F9  0020               	movlb	0	; select bank0
  8958  13FA  140E               	bsf	14,0	;volatile
  8959                           
  8960                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8961  13FB  3028               	movlw	40
  8962  13FC  00A0               	movwf	DelayTime_1us@count
  8963  13FD  3000               	movlw	0
  8964  13FE  00A1               	movwf	DelayTime_1us@count+1
  8965  13FF  3191  2130  3193   	fcall	_DelayTime_1us
  8966                           
  8967                           ;CC2500_B1.c: 148: RC0 = 0;
  8968  1402  0020               	movlb	0	; select bank0
  8969  1403  100E               	bcf	14,0	;volatile
  8970                           
  8971                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8972  1404  3030               	movlw	48
  8973  1405  00A6               	movwf	??_CC2500_PowerRST
  8974  1406  0826               	movf	??_CC2500_PowerRST,w
  8975  1407  0021               	movlb	1	; select bank1
  8976  1408  00D5               	movwf	_SPI0Buffer^(0+128)
  8977                           
  8978                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8979  1409  2C0D               	goto	l8252
  8980  140A                     l8250:	
  8981                           
  8982                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8983  140A  319D  25E8  3193   	fcall	_RF_Timeout_Counter
  8984  140D                     l8252:	
  8985  140D  0020               	movlb	0	; select bank0
  8986  140E  1E8E               	btfss	14,5	;volatile
  8987  140F  2C13               	goto	l8256
  8988  1410  0021               	movlb	1	; select bank1
  8989  1411  1F21               	btfss	(_RF1^(0+128)+1),6
  8990  1412  2C0A               	goto	l8250
  8991  1413                     l8256:	
  8992                           
  8993                           ;CC2500_B1.c: 152: };
  8994                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8995  1413  319B  234F  3193   	fcall	_setRF_TimeoutCleared
  8996                           
  8997                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8998  1416  319E  26CA  3193   	fcall	_CC2500_WriteByte
  8999                           
  9000                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9001  1419  2C1D               	goto	l8262
  9002  141A                     l8260:	
  9003                           
  9004                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9005  141A  319D  25E8  3193   	fcall	_RF_Timeout_Counter
  9006  141D                     l8262:	
  9007  141D  0020               	movlb	0	; select bank0
  9008  141E  1E8E               	btfss	14,5	;volatile
  9009  141F  2C23               	goto	l8266
  9010  1420  0021               	movlb	1	; select bank1
  9011  1421  1F21               	btfss	(_RF1^(0+128)+1),6
  9012  1422  2C1A               	goto	l8260
  9013  1423                     l8266:	
  9014                           
  9015                           ;CC2500_B1.c: 157: };
  9016                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9017  1423  319B  234F         	fcall	_setRF_TimeoutCleared
  9018                           
  9019                           ;CC2500_B1.c: 159: RC4 = 0;
  9020  1425  0020               	movlb	0	; select bank0
  9021  1426  120E               	bcf	14,4	;volatile
  9022                           
  9023                           ;CC2500_B1.c: 160: RC0 = 1;
  9024  1427  140E               	bsf	14,0	;volatile
  9025  1428  0008               	return
  9026  1429                     __end_of_CC2500_PowerRST:	
  9027                           
  9028                           	psect	text43
  9029  1156                     __ptext43:	
  9030 ;; *************** function _CC2500_InitSetREG *****************
  9031 ;; Defined at:
  9032 ;;		line 166 in file "../src/CC2500_B1.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;		None
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9037 ;;  temp2           1    7[BANK0 ] unsigned char 
  9038 ;;  temp1           1    6[BANK0 ] unsigned char 
  9039 ;; Return value:  Size  Location     Type
  9040 ;;		None               void
  9041 ;; Registers used:
  9042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9051 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9052 ;;Total ram usage:        4 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    6
  9055 ;; This function calls:
  9056 ;;		_CC2500_WriteREG
  9057 ;; This function is called by:
  9058 ;;		_CC2500_PowerOnInitial
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           
  9063                           ;psect for function _CC2500_InitSetREG
  9064  1156                     _CC2500_InitSetREG:	
  9065                           
  9066                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9067                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9068                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9069                           
  9070                           ;incstack = 0
  9071                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9072  1156  0020               	movlb	0	; select bank0
  9073  1157  01A8               	clrf	CC2500_InitSetREG@loop_c
  9074  1158                     L3:	
  9075  1158  302F               	movlw	47
  9076  1159  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9077  115A  1803               	btfsc	3,0
  9078  115B  0008               	return
  9079                           
  9080                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9081  115C  0828               	movf	CC2500_InitSetREG@loop_c,w
  9082  115D  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9083  115E  0084               	movwf	4
  9084  115F  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9085  1160  1803               	skipnc
  9086  1161  3E01               	addlw	1
  9087  1162  0085               	movwf	5
  9088  1163  0800               	movf	0,w	;code access
  9089  1164  00A5               	movwf	??_CC2500_InitSetREG
  9090  1165  0825               	movf	??_CC2500_InitSetREG,w
  9091  1166  00A6               	movwf	CC2500_InitSetREG@temp1
  9092                           
  9093                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9094  1167  0828               	movf	CC2500_InitSetREG@loop_c,w
  9095  1168  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9096  1169  0084               	movwf	4
  9097  116A  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9098  116B  1803               	skipnc
  9099  116C  3E01               	addlw	1
  9100  116D  0085               	movwf	5
  9101  116E  0800               	movf	0,w	;code access
  9102  116F  00A5               	movwf	??_CC2500_InitSetREG
  9103  1170  0825               	movf	??_CC2500_InitSetREG,w
  9104  1171  00A7               	movwf	CC2500_InitSetREG@temp2
  9105                           
  9106                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9107  1172  0827               	movf	CC2500_InitSetREG@temp2,w
  9108  1173  00A5               	movwf	??_CC2500_InitSetREG
  9109  1174  0825               	movf	??_CC2500_InitSetREG,w
  9110  1175  00A2               	movwf	CC2500_WriteREG@value
  9111  1176  0826               	movf	CC2500_InitSetREG@temp1,w
  9112  1177  3190  20E8  3191   	fcall	_CC2500_WriteREG
  9113  117A  3001               	movlw	1
  9114  117B  0020               	movlb	0	; select bank0
  9115  117C  00A5               	movwf	??_CC2500_InitSetREG
  9116  117D  0825               	movf	??_CC2500_InitSetREG,w
  9117  117E  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9118  117F  2958               	goto	L3
  9119  1180                     __end_of_CC2500_InitSetREG:	
  9120                           
  9121                           	psect	text44
  9122  1FC1                     __ptext44:	
  9123 ;; *************** function _CC2500_InitPATable *****************
  9124 ;; Defined at:
  9125 ;;		line 181 in file "../src/CC2500_B1.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9130 ;;  temp            1    6[BANK0 ] unsigned char 
  9131 ;; Return value:  Size  Location     Type
  9132 ;;		None               void
  9133 ;; Registers used:
  9134 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9144 ;;Total ram usage:        3 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    6
  9147 ;; This function calls:
  9148 ;;		_CC2500_WriteREG
  9149 ;; This function is called by:
  9150 ;;		_CC2500_PowerOnInitial
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           
  9155                           ;psect for function _CC2500_InitPATable
  9156  1FC1                     _CC2500_InitPATable:	
  9157                           
  9158                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9159                           ;CC2500_B1.c: 183: unsigned char temp;
  9160                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9161                           
  9162                           ;incstack = 0
  9163                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9164  1FC1  0020               	movlb	0	; select bank0
  9165  1FC2  01A7               	clrf	CC2500_InitPATable@loop_d
  9166  1FC3                     L4:	
  9167  1FC3  3008               	movlw	8
  9168  1FC4  0227               	subwf	CC2500_InitPATable@loop_d,w
  9169  1FC5  1803               	btfsc	3,0
  9170  1FC6  0008               	return
  9171                           
  9172                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9173  1FC7  0827               	movf	CC2500_InitPATable@loop_d,w
  9174  1FC8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9175  1FC9  0084               	movwf	4
  9176  1FCA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9177  1FCB  1803               	skipnc
  9178  1FCC  3E01               	addlw	1
  9179  1FCD  0085               	movwf	5
  9180  1FCE  0800               	movf	0,w	;code access
  9181  1FCF  00A5               	movwf	??_CC2500_InitPATable
  9182  1FD0  0825               	movf	??_CC2500_InitPATable,w
  9183  1FD1  00A6               	movwf	CC2500_InitPATable@temp
  9184                           
  9185                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9186  1FD2  0826               	movf	CC2500_InitPATable@temp,w
  9187  1FD3  00A5               	movwf	??_CC2500_InitPATable
  9188  1FD4  0825               	movf	??_CC2500_InitPATable,w
  9189  1FD5  00A2               	movwf	CC2500_WriteREG@value
  9190  1FD6  303E               	movlw	62
  9191  1FD7  3190  20E8  319F   	fcall	_CC2500_WriteREG
  9192  1FDA  3001               	movlw	1
  9193  1FDB  0020               	movlb	0	; select bank0
  9194  1FDC  00A5               	movwf	??_CC2500_InitPATable
  9195  1FDD  0825               	movf	??_CC2500_InitPATable,w
  9196  1FDE  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9197  1FDF  2FC3               	goto	L4
  9198  1FE0                     __end_of_CC2500_InitPATable:	
  9199                           
  9200                           	psect	text45
  9201  10E8                     __ptext45:	
  9202 ;; *************** function _CC2500_WriteREG *****************
  9203 ;; Defined at:
  9204 ;;		line 258 in file "../src/CC2500_B1.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;  w_addr          1    wreg     unsigned char 
  9207 ;;  value           1    2[BANK0 ] unsigned char 
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9210 ;; Return value:  Size  Location     Type
  9211 ;;		None               void
  9212 ;; Registers used:
  9213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9214 ;; Tracked objects:
  9215 ;;		On entry : 0/0
  9216 ;;		On exit  : 0/0
  9217 ;;		Unchanged: 0/0
  9218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9219 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;Total ram usage:        3 bytes
  9224 ;; Hardware stack levels used:    1
  9225 ;; Hardware stack levels required when called:    5
  9226 ;; This function calls:
  9227 ;;		_CC2500_WriteByte
  9228 ;;		_RF_Timeout_Counter
  9229 ;;		_setRF_TimeoutCleared
  9230 ;; This function is called by:
  9231 ;;		_CC2500_InitSetREG
  9232 ;;		_CC2500_InitPATable
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           
  9237                           ;psect for function _CC2500_WriteREG
  9238  10E8                     _CC2500_WriteREG:	
  9239                           
  9240                           ;incstack = 0
  9241                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9242                           ;CC2500_WriteREG@w_addr stored from wreg
  9243  10E8  0020               	movlb	0	; select bank0
  9244  10E9  00A4               	movwf	CC2500_WriteREG@w_addr
  9245                           
  9246                           ;CC2500_B1.c: 259: RC0 = 0;
  9247  10EA  100E               	bcf	14,0	;volatile
  9248                           
  9249                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9250  10EB  0824               	movf	CC2500_WriteREG@w_addr,w
  9251  10EC  00A3               	movwf	??_CC2500_WriteREG
  9252  10ED  0823               	movf	??_CC2500_WriteREG,w
  9253  10EE  0021               	movlb	1	; select bank1
  9254  10EF  00D5               	movwf	_SPI0Buffer^(0+128)
  9255                           
  9256                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9257  10F0  28F4               	goto	l8206
  9258  10F1                     l8204:	
  9259                           
  9260                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9261  10F1  319D  25E8  3190   	fcall	_RF_Timeout_Counter
  9262  10F4                     l8206:	
  9263  10F4  0020               	movlb	0	; select bank0
  9264  10F5  1E8E               	btfss	14,5	;volatile
  9265  10F6  28FA               	goto	l8210
  9266  10F7  0021               	movlb	1	; select bank1
  9267  10F8  1F21               	btfss	(_RF1^(0+128)+1),6
  9268  10F9  28F1               	goto	l8204
  9269  10FA                     l8210:	
  9270                           
  9271                           ;CC2500_B1.c: 263: };
  9272                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9273  10FA  319B  234F  3190   	fcall	_setRF_TimeoutCleared
  9274                           
  9275                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9276  10FD  319E  26CA  3190   	fcall	_CC2500_WriteByte
  9277                           
  9278                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9279  1100  0020               	movlb	0	; select bank0
  9280  1101  0822               	movf	CC2500_WriteREG@value,w
  9281  1102  00A3               	movwf	??_CC2500_WriteREG
  9282  1103  0823               	movf	??_CC2500_WriteREG,w
  9283  1104  0021               	movlb	1	; select bank1
  9284  1105  00D5               	movwf	_SPI0Buffer^(0+128)
  9285                           
  9286                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9287  1106  319E  26CA         	fcall	_CC2500_WriteByte
  9288                           
  9289                           ;CC2500_B1.c: 269: RC0 = 1;
  9290  1108  0020               	movlb	0	; select bank0
  9291  1109  140E               	bsf	14,0	;volatile
  9292  110A  0008               	return
  9293  110B                     __end_of_CC2500_WriteREG:	
  9294                           
  9295                           	psect	text46
  9296  1C6F                     __ptext46:	
  9297 ;; *************** function _CC2500_FrequencyCabr *****************
  9298 ;; Defined at:
  9299 ;;		line 208 in file "../src/CC2500_B1.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;		None
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;		None               void
  9306 ;; Registers used:
  9307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;Total ram usage:        0 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    6
  9320 ;; This function calls:
  9321 ;;		_CC2500_WriteCommand
  9322 ;;		_DelayTime_1us
  9323 ;; This function is called by:
  9324 ;;		_CC2500_PowerOnInitial
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           
  9329                           ;psect for function _CC2500_FrequencyCabr
  9330  1C6F                     _CC2500_FrequencyCabr:	
  9331                           
  9332                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9333                           
  9334                           ;incstack = 0
  9335                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9336  1C6F  3033               	movlw	51
  9337  1C70  319F  2717  319C   	fcall	_CC2500_WriteCommand
  9338                           
  9339                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9340  1C73  30E8               	movlw	232
  9341  1C74  0020               	movlb	0	; select bank0
  9342  1C75  00A0               	movwf	DelayTime_1us@count
  9343  1C76  3003               	movlw	3
  9344  1C77  00A1               	movwf	DelayTime_1us@count+1
  9345  1C78  3191  2130         	fcall	_DelayTime_1us
  9346  1C7A  0008               	return
  9347  1C7B                     __end_of_CC2500_FrequencyCabr:	
  9348                           
  9349                           	psect	text47
  9350  1130                     __ptext47:	
  9351 ;; *************** function _DelayTime_1us *****************
  9352 ;; Defined at:
  9353 ;;		line 327 in file "../src/CC2500_B1.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;  count           2    0[BANK0 ] int 
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;  j               2    4[BANK0 ] unsigned int 
  9358 ;;  i               2    2[BANK0 ] unsigned int 
  9359 ;; Return value:  Size  Location     Type
  9360 ;;		None               void
  9361 ;; Registers used:
  9362 ;;		wreg, status,2
  9363 ;; Tracked objects:
  9364 ;;		On entry : 0/0
  9365 ;;		On exit  : 0/0
  9366 ;;		Unchanged: 0/0
  9367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9368 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;Total ram usage:        6 bytes
  9373 ;; Hardware stack levels used:    1
  9374 ;; Hardware stack levels required when called:    4
  9375 ;; This function calls:
  9376 ;;		Nothing
  9377 ;; This function is called by:
  9378 ;;		_CC2500_PowerRST
  9379 ;;		_CC2500_FrequencyCabr
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           
  9384                           ;psect for function _DelayTime_1us
  9385  1130                     _DelayTime_1us:	
  9386                           
  9387                           ;CC2500_B1.c: 328: unsigned int i, j;
  9388                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9389                           
  9390                           ;incstack = 0
  9391                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9392  1130  3001               	movlw	1
  9393  1131  0020               	movlb	0	; select bank0
  9394  1132  00A2               	movwf	DelayTime_1us@i
  9395  1133  3000               	movlw	0
  9396  1134  00A3               	movwf	DelayTime_1us@i+1
  9397  1135                     l347:	
  9398  1135  0821               	movf	DelayTime_1us@count+1,w
  9399  1136  0223               	subwf	DelayTime_1us@i+1,w
  9400  1137  1D03               	skipz
  9401  1138  293B               	goto	u5305
  9402  1139  0820               	movf	DelayTime_1us@count,w
  9403  113A  0222               	subwf	DelayTime_1us@i,w
  9404  113B                     u5305:	
  9405  113B  1803               	btfsc	3,0
  9406  113C  0008               	return
  9407                           
  9408                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9409  113D  01A4               	clrf	DelayTime_1us@j
  9410  113E  01A5               	clrf	DelayTime_1us@j+1
  9411  113F  3000               	movlw	0
  9412  1140  0225               	subwf	DelayTime_1us@j+1,w
  9413  1141  3002               	movlw	2
  9414  1142  1903               	skipnz
  9415  1143  0224               	subwf	DelayTime_1us@j,w
  9416  1144  1803               	btfsc	3,0
  9417  1145  2951               	goto	l6174
  9418  1146                     l6172:	
  9419  1146  3001               	movlw	1
  9420  1147  07A4               	addwf	DelayTime_1us@j,f
  9421  1148  3000               	movlw	0
  9422  1149  3DA5               	addwfc	DelayTime_1us@j+1,f
  9423  114A  3000               	movlw	0
  9424  114B  0225               	subwf	DelayTime_1us@j+1,w
  9425  114C  3002               	movlw	2
  9426  114D  1903               	skipnz
  9427  114E  0224               	subwf	DelayTime_1us@j,w
  9428  114F  1C03               	skipc
  9429  1150  2946               	goto	l6172
  9430  1151                     l6174:	
  9431  1151  3001               	movlw	1
  9432  1152  07A2               	addwf	DelayTime_1us@i,f
  9433  1153  3000               	movlw	0
  9434  1154  3DA3               	addwfc	DelayTime_1us@i+1,f
  9435  1155  2935               	goto	l347
  9436  1156                     __end_of_DelayTime_1us:	
  9437                           
  9438                           	psect	text48
  9439  1B57                     __ptext48:	
  9440 ;; *************** function _CC2500_ClearTXFIFO *****************
  9441 ;; Defined at:
  9442 ;;		line 194 in file "../src/CC2500_B1.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;		None
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;		None
  9447 ;; Return value:  Size  Location     Type
  9448 ;;		None               void
  9449 ;; Registers used:
  9450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9451 ;; Tracked objects:
  9452 ;;		On entry : 0/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;Total ram usage:        0 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; Hardware stack levels required when called:    6
  9463 ;; This function calls:
  9464 ;;		_CC2500_WriteCommand
  9465 ;; This function is called by:
  9466 ;;		_CC2500_PowerOnInitial
  9467 ;; This function uses a non-reentrant model
  9468 ;;
  9469                           
  9470                           
  9471                           ;psect for function _CC2500_ClearTXFIFO
  9472  1B57                     _CC2500_ClearTXFIFO:	
  9473                           
  9474                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9475                           
  9476                           ;incstack = 0
  9477                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9478  1B57  303B               	movlw	59
  9479  1B58  319F  2717         	fcall	_CC2500_WriteCommand
  9480  1B5A  0008               	return
  9481  1B5B                     __end_of_CC2500_ClearTXFIFO:	
  9482                           
  9483                           	psect	text49
  9484  1B53                     __ptext49:	
  9485 ;; *************** function _CC2500_ClearRXFIFO *****************
  9486 ;; Defined at:
  9487 ;;		line 201 in file "../src/CC2500_B1.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;		None
  9492 ;; Return value:  Size  Location     Type
  9493 ;;		None               void
  9494 ;; Registers used:
  9495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;Total ram usage:        0 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    6
  9508 ;; This function calls:
  9509 ;;		_CC2500_WriteCommand
  9510 ;; This function is called by:
  9511 ;;		_CC2500_PowerOnInitial
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           
  9516                           ;psect for function _CC2500_ClearRXFIFO
  9517  1B53                     _CC2500_ClearRXFIFO:	
  9518                           
  9519                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9520                           
  9521                           ;incstack = 0
  9522                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9523  1B53  303A               	movlw	58
  9524  1B54  319F  2717         	fcall	_CC2500_WriteCommand
  9525  1B56  0008               	return
  9526  1B57                     __end_of_CC2500_ClearRXFIFO:	
  9527                           
  9528                           	psect	text50
  9529  1F17                     __ptext50:	
  9530 ;; *************** function _CC2500_WriteCommand *****************
  9531 ;; Defined at:
  9532 ;;		line 292 in file "../src/CC2500_B1.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;  command         1    wreg     unsigned char 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  command         1    3[BANK0 ] unsigned char 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;		None               void
  9539 ;; Registers used:
  9540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:        2 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    5
  9553 ;; This function calls:
  9554 ;;		_CC2500_WriteByte
  9555 ;;		_RF_Timeout_Counter
  9556 ;;		_setRF_TimeoutCleared
  9557 ;; This function is called by:
  9558 ;;		_CC2500_TxData
  9559 ;;		_CC2500_RxData
  9560 ;;		_CC2500_ClearTXFIFO
  9561 ;;		_CC2500_ClearRXFIFO
  9562 ;;		_CC2500_FrequencyCabr
  9563 ;;		_CC2500_SIDLEMode
  9564 ;;		_setRF_Main
  9565 ;;		_RF_RxDisable
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569                           
  9570                           ;psect for function _CC2500_WriteCommand
  9571  1F17                     _CC2500_WriteCommand:	
  9572                           
  9573                           ;incstack = 0
  9574                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9575                           ;CC2500_WriteCommand@command stored from wreg
  9576  1F17  0020               	movlb	0	; select bank0
  9577  1F18  00A3               	movwf	CC2500_WriteCommand@command
  9578                           
  9579                           ;CC2500_B1.c: 293: RC0 = 0;
  9580  1F19  100E               	bcf	14,0	;volatile
  9581                           
  9582                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9583  1F1A  0823               	movf	CC2500_WriteCommand@command,w
  9584  1F1B  00A2               	movwf	??_CC2500_WriteCommand
  9585  1F1C  0822               	movf	??_CC2500_WriteCommand,w
  9586  1F1D  0021               	movlb	1	; select bank1
  9587  1F1E  00D5               	movwf	_SPI0Buffer^(0+128)
  9588                           
  9589                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9590  1F1F  2F23               	goto	l8172
  9591  1F20                     l8170:	
  9592                           
  9593                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9594  1F20  319D  25E8  319F   	fcall	_RF_Timeout_Counter
  9595  1F23                     l8172:	
  9596  1F23  0020               	movlb	0	; select bank0
  9597  1F24  1E8E               	btfss	14,5	;volatile
  9598  1F25  2F29               	goto	l8176
  9599  1F26  0021               	movlb	1	; select bank1
  9600  1F27  1F21               	btfss	(_RF1^(0+128)+1),6
  9601  1F28  2F20               	goto	l8170
  9602  1F29                     l8176:	
  9603                           
  9604                           ;CC2500_B1.c: 298: };
  9605                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9606  1F29  319B  234F  319F   	fcall	_setRF_TimeoutCleared
  9607                           
  9608                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9609  1F2C  319E  26CA         	fcall	_CC2500_WriteByte
  9610                           
  9611                           ;CC2500_B1.c: 302: RC0 = 1;
  9612  1F2E  0020               	movlb	0	; select bank0
  9613  1F2F  140E               	bsf	14,0	;volatile
  9614  1F30  0008               	return
  9615  1F31                     __end_of_CC2500_WriteCommand:	
  9616                           
  9617                           	psect	text51
  9618  1B4F                     __ptext51:	
  9619 ;; *************** function _setRF_TimeoutCleared *****************
  9620 ;; Defined at:
  9621 ;;		line 149 in file "../src/RF_Control_B1.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;		None
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;		None
  9626 ;; Return value:  Size  Location     Type
  9627 ;;		None               void
  9628 ;; Registers used:
  9629 ;;		status,2
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;Total ram usage:        0 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    4
  9642 ;; This function calls:
  9643 ;;		Nothing
  9644 ;; This function is called by:
  9645 ;;		_CC2500_TxData
  9646 ;;		_CC2500_RxData
  9647 ;;		_CC2500_PowerRST
  9648 ;;		_CC2500_WriteREG
  9649 ;;		_CC2500_WriteCommand
  9650 ;;		_CC2500_ReadStatus
  9651 ;;		_CC2500_ReadREG
  9652 ;; This function uses a non-reentrant model
  9653 ;;
  9654                           
  9655                           
  9656                           ;psect for function _setRF_TimeoutCleared
  9657  1B4F                     _setRF_TimeoutCleared:	
  9658                           
  9659                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9660                           
  9661                           ;incstack = 0
  9662                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9663  1B4F  0021               	movlb	1	; select bank1
  9664  1B50  01AC               	clrf	(_RF1^(0+128)+12)
  9665  1B51  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9666  1B52  0008               	return
  9667  1B53                     __end_of_setRF_TimeoutCleared:	
  9668                           
  9669                           	psect	text52
  9670  1DE8                     __ptext52:	
  9671 ;; *************** function _RF_Timeout_Counter *****************
  9672 ;; Defined at:
  9673 ;;		line 141 in file "../src/RF_Control_B1.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;		None
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;		None
  9678 ;; Return value:  Size  Location     Type
  9679 ;;		None               void
  9680 ;; Registers used:
  9681 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;Total ram usage:        0 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    4
  9694 ;; This function calls:
  9695 ;;		Nothing
  9696 ;; This function is called by:
  9697 ;;		_CC2500_TxData
  9698 ;;		_CC2500_RxData
  9699 ;;		_CC2500_PowerRST
  9700 ;;		_CC2500_WriteREG
  9701 ;;		_CC2500_WriteCommand
  9702 ;;		_CC2500_ReadStatus
  9703 ;;		_CC2500_ReadREG
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           
  9708                           ;psect for function _RF_Timeout_Counter
  9709  1DE8                     _RF_Timeout_Counter:	
  9710                           
  9711                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9712                           
  9713                           ;incstack = 0
  9714                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9715  1DE8  3001               	movlw	1
  9716  1DE9  0021               	movlb	1	; select bank1
  9717  1DEA  07AC               	addwf	(_RF1^(0+128)+12),f
  9718  1DEB  3000               	movlw	0
  9719  1DEC  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9720                           
  9721                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9722  1DED  300C               	movlw	12
  9723  1DEE  3EA0               	addlw	_RF1& (0+255)
  9724  1DEF  0086               	movwf	6
  9725  1DF0  0187               	clrf	7
  9726  1DF1  3F40               	moviw [0]fsr1
  9727  1DF2  3AA8               	xorlw	168
  9728  1DF3  1D03               	skipz
  9729  1DF4  2DF7               	goto	u8375
  9730  1DF5  3F41               	moviw [1]fsr1
  9731  1DF6  3A61               	xorlw	97
  9732  1DF7                     u8375:	
  9733  1DF7  1D03               	skipz
  9734  1DF8  0008               	return
  9735                           
  9736                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9737  1DF9  01AC               	clrf	(_RF1^(0+128)+12)
  9738  1DFA  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9739                           
  9740                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9741  1DFB  1721               	bsf	(_RF1^(0+128)+1),6
  9742  1DFC  0008               	return
  9743  1DFD                     __end_of_RF_Timeout_Counter:	
  9744                           
  9745                           	psect	text53
  9746  1ECA                     __ptext53:	
  9747 ;; *************** function _CC2500_WriteByte *****************
  9748 ;; Defined at:
  9749 ;;		line 226 in file "../src/CC2500_B1.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;		None
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9754 ;; Return value:  Size  Location     Type
  9755 ;;		None               void
  9756 ;; Registers used:
  9757 ;;		wreg, status,2, status,0
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;Total ram usage:        2 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    4
  9770 ;; This function calls:
  9771 ;;		Nothing
  9772 ;; This function is called by:
  9773 ;;		_CC2500_TxData
  9774 ;;		_CC2500_RxData
  9775 ;;		_CC2500_PowerRST
  9776 ;;		_CC2500_WriteREG
  9777 ;;		_CC2500_WriteCommand
  9778 ;;		_CC2500_ReadStatus
  9779 ;;		_CC2500_ReadREG
  9780 ;; This function uses a non-reentrant model
  9781 ;;
  9782                           
  9783                           
  9784                           ;psect for function _CC2500_WriteByte
  9785  1ECA                     _CC2500_WriteByte:	
  9786                           
  9787                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9788                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9789                           
  9790                           ;incstack = 0
  9791                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9792  1ECA  0020               	movlb	0	; select bank0
  9793  1ECB  01A1               	clrf	CC2500_WriteByte@loop_a
  9794  1ECC                     L5:	
  9795  1ECC  3008               	movlw	8
  9796  1ECD  0221               	subwf	CC2500_WriteByte@loop_a,w
  9797  1ECE  1803               	btfsc	3,0
  9798  1ECF  0008               	return
  9799                           
  9800                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9801  1ED0  0021               	movlb	1	; select bank1
  9802  1ED1  1FD5               	btfss	_SPI0Buffer^(0+128),7
  9803  1ED2  2ED6               	goto	l303
  9804                           
  9805                           ;CC2500_B1.c: 230: RC4 = 1;
  9806  1ED3  0020               	movlb	0	; select bank0
  9807  1ED4  160E               	bsf	14,4	;volatile
  9808  1ED5  2ED8               	goto	l304
  9809  1ED6                     l303:	
  9810                           
  9811                           ;CC2500_B1.c: 231: else
  9812                           ;CC2500_B1.c: 232: RC4 = 0;
  9813  1ED6  0020               	movlb	0	; select bank0
  9814  1ED7  120E               	bcf	14,4	;volatile
  9815  1ED8                     l304:	
  9816                           
  9817                           ;CC2500_B1.c: 233: RC3 = 1;
  9818  1ED8  158E               	bsf	14,3	;volatile
  9819                           
  9820                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9821  1ED9  1003               	clrc
  9822  1EDA  0021               	movlb	1	; select bank1
  9823  1EDB  0DD5               	rlf	_SPI0Buffer^(0+128),f
  9824                           
  9825                           ;CC2500_B1.c: 235: RC3 = 0;
  9826  1EDC  0020               	movlb	0	; select bank0
  9827  1EDD  118E               	bcf	14,3	;volatile
  9828  1EDE  3001               	movlw	1
  9829  1EDF  00A0               	movwf	??_CC2500_WriteByte
  9830  1EE0  0820               	movf	??_CC2500_WriteByte,w
  9831  1EE1  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9832  1EE2  2ECC               	goto	L5
  9833  1EE3                     __end_of_CC2500_WriteByte:	
  9834                           
  9835                           	psect	text54
  9836  1B2F                     __ptext54:	
  9837 ;; *************** function _RF_Initialization *****************
  9838 ;; Defined at:
  9839 ;;		line 9 in file "../src/RF_Control_B1.c"
  9840 ;; Parameters:    Size  Location     Type
  9841 ;;		None
  9842 ;; Auto vars:     Size  Location     Type
  9843 ;;		None
  9844 ;; Return value:  Size  Location     Type
  9845 ;;		None               void
  9846 ;; Registers used:
  9847 ;;		wreg, status,2, status,0, pclath, cstack
  9848 ;; Tracked objects:
  9849 ;;		On entry : 0/0
  9850 ;;		On exit  : 0/0
  9851 ;;		Unchanged: 0/0
  9852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;Total ram usage:        0 bytes
  9858 ;; Hardware stack levels used:    1
  9859 ;; Hardware stack levels required when called:    5
  9860 ;; This function calls:
  9861 ;;		_setRF_Initialization
  9862 ;; This function is called by:
  9863 ;;		_main
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867                           
  9868                           ;psect for function _RF_Initialization
  9869  1B2F                     _RF_Initialization:	
  9870                           
  9871                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9872                           
  9873                           ;incstack = 0
  9874                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9875  1B2F  319B  23EC         	fcall	_setRF_Initialization
  9876  1B31  0008               	return
  9877  1B32                     __end_of_RF_Initialization:	
  9878                           
  9879                           	psect	text55
  9880  1BEC                     __ptext55:	
  9881 ;; *************** function _setRF_Initialization *****************
  9882 ;; Defined at:
  9883 ;;		line 17 in file "../src/RF_Control_B1.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;		None
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;		None               void
  9890 ;; Registers used:
  9891 ;;		wreg
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;Total ram usage:        1 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; Hardware stack levels required when called:    4
  9904 ;; This function calls:
  9905 ;;		Nothing
  9906 ;; This function is called by:
  9907 ;;		_RF_Initialization
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           
  9912                           ;psect for function _setRF_Initialization
  9913  1BEC                     _setRF_Initialization:	
  9914                           
  9915                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9916                           
  9917                           ;incstack = 0
  9918                           ; Regs used in _setRF_Initialization: [wreg]
  9919  1BEC  3015               	movlw	21
  9920  1BED  0020               	movlb	0	; select bank0
  9921  1BEE  00A0               	movwf	??_setRF_Initialization
  9922  1BEF  0820               	movf	??_setRF_Initialization,w
  9923  1BF0  0021               	movlb	1	; select bank1
  9924  1BF1  00D8               	movwf	_Tx_Length^(0+128)
  9925                           
  9926                           ;RF_Control_B1.c: 20: RF1.RunTime = 150;
  9927  1BF2  3096               	movlw	150
  9928  1BF3  00A7               	movwf	(_RF1^(0+128)+7)
  9929  1BF4  3000               	movlw	0
  9930  1BF5  00A8               	movwf	(_RF1^(0+128)+8)
  9931  1BF6  0008               	return
  9932  1BF7                     __end_of_setRF_Initialization:	
  9933                           
  9934                           	psect	text56
  9935  1D51                     __ptext56:	
  9936 ;; *************** function _Mcu_Initialization *****************
  9937 ;; Defined at:
  9938 ;;		line 30 in file "../src/MCU_B1.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;		None
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;		None
  9943 ;; Return value:  Size  Location     Type
  9944 ;;		None               void
  9945 ;; Registers used:
  9946 ;;		wreg, status,2, status,0, pclath, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9956 ;;Total ram usage:        0 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    5
  9959 ;; This function calls:
  9960 ;;		_ADC_Set
  9961 ;;		_Fosc_Set
  9962 ;;		_IOC_Set
  9963 ;;		_IO_Set
  9964 ;;		_TMR1_Set
  9965 ;;		_WDT_Set
  9966 ;; This function is called by:
  9967 ;;		_main
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           
  9972                           ;psect for function _Mcu_Initialization
  9973  1D51                     _Mcu_Initialization:	
  9974                           
  9975                           ;MCU_B1.c: 32: Fosc_Set();
  9976                           
  9977                           ;incstack = 0
  9978                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9979  1D51  319B  234B  319D   	fcall	_Fosc_Set
  9980                           
  9981                           ;MCU_B1.c: 34: IO_Set();
  9982  1D54  319E  26FD  319D   	fcall	_IO_Set
  9983                           
  9984                           ;MCU_B1.c: 36: ;;
  9985                           ;MCU_B1.c: 38: TMR1_Set();
  9986  1D57  319C  2457  319D   	fcall	_TMR1_Set
  9987                           
  9988                           ;MCU_B1.c: 40: ADC_Set();
  9989  1D5A  319B  2381  319D   	fcall	_ADC_Set
  9990                           
  9991                           ;MCU_B1.c: 42: ;;
  9992                           ;MCU_B1.c: 44: ;;
  9993                           ;MCU_B1.c: 46: IOC_Set();
  9994  1D5D  319B  23CC  319D   	fcall	_IOC_Set
  9995                           
  9996                           ;MCU_B1.c: 48: ;;
  9997                           ;MCU_B1.c: 50: ;;
  9998                           ;MCU_B1.c: 52: WDT_Set();
  9999  1D60  319C  2463         	fcall	_WDT_Set
 10000  1D62  0008               	return
 10001  1D63                     __end_of_Mcu_Initialization:	
 10002                           
 10003                           	psect	text57
 10004  1C63                     __ptext57:	
 10005 ;; *************** function _WDT_Set *****************
 10006 ;; Defined at:
 10007 ;;		line 1089 in file "../src/MCU_B1.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;		None
 10010 ;; Auto vars:     Size  Location     Type
 10011 ;;		None
 10012 ;; Return value:  Size  Location     Type
 10013 ;;		None               void
 10014 ;; Registers used:
 10015 ;;		wreg
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;Total ram usage:        1 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; Hardware stack levels required when called:    4
 10028 ;; This function calls:
 10029 ;;		Nothing
 10030 ;; This function is called by:
 10031 ;;		_Mcu_Initialization
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           
 10036                           ;psect for function _WDT_Set
 10037  1C63                     _WDT_Set:	
 10038                           
 10039                           ;MCU_B1.c: 1096: WDTCON = 0b00010111;;
 10040                           
 10041                           ;incstack = 0
 10042                           ; Regs used in _WDT_Set: [wreg]
 10043  1C63  3017               	movlw	23
 10044  1C64  0021               	movlb	1	; select bank1
 10045  1C65  0097               	movwf	23	;volatile
 10046                           
 10047                           ;MCU_B1.c: 1098: WDT.Enable = 1;
 10048  1C66  0022               	movlb	2	; select bank2
 10049  1C67  1443               	bsf	_WDT^(0+256),0
 10050                           
 10051                           ;MCU_B1.c: 1099: WDT.Timer = 10;
 10052  1C68  300A               	movlw	10
 10053  1C69  0020               	movlb	0	; select bank0
 10054  1C6A  00A0               	movwf	??_WDT_Set
 10055  1C6B  0820               	movf	??_WDT_Set,w
 10056  1C6C  0022               	movlb	2	; select bank2
 10057  1C6D  00C4               	movwf	(_WDT^(0+256)+1)
 10058  1C6E  0008               	return
 10059  1C6F                     __end_of_WDT_Set:	
 10060                           
 10061                           	psect	text58
 10062  1C57                     __ptext58:	
 10063 ;; *************** function _TMR1_Set *****************
 10064 ;; Defined at:
 10065 ;;		line 226 in file "../src/MCU_B1.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;		None               void
 10072 ;; Registers used:
 10073 ;;		wreg
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;Total ram usage:        0 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    4
 10086 ;; This function calls:
 10087 ;;		Nothing
 10088 ;; This function is called by:
 10089 ;;		_Mcu_Initialization
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           
 10094                           ;psect for function _TMR1_Set
 10095  1C57                     _TMR1_Set:	
 10096                           
 10097                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10098                           
 10099                           ;incstack = 0
 10100                           ; Regs used in _TMR1_Set: [wreg]
 10101  1C57  3041               	movlw	65
 10102  1C58  0020               	movlb	0	; select bank0
 10103  1C59  0098               	movwf	24	;volatile
 10104                           
 10105                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10106  1C5A  30FA               	movlw	250
 10107  1C5B  0097               	movwf	23	;volatile
 10108                           
 10109                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10110  1C5C  3038               	movlw	56
 10111  1C5D  0096               	movwf	22	;volatile
 10112                           
 10113                           ;MCU_B1.c: 230: TMR1IE = 1;
 10114  1C5E  0021               	movlb	1	; select bank1
 10115  1C5F  1411               	bsf	17,0	;volatile
 10116                           
 10117                           ;MCU_B1.c: 231: PEIE = 1;
 10118  1C60  170B               	bsf	11,6	;volatile
 10119                           
 10120                           ;MCU_B1.c: 232: GIE = 1;
 10121  1C61  178B               	bsf	11,7	;volatile
 10122  1C62  0008               	return
 10123  1C63                     __end_of_TMR1_Set:	
 10124                           
 10125                           	psect	text59
 10126  1EFD                     __ptext59:	
 10127 ;; *************** function _IO_Set *****************
 10128 ;; Defined at:
 10129 ;;		line 60 in file "../src/MCU_B1.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;		None
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;		None
 10134 ;; Return value:  Size  Location     Type
 10135 ;;		None               void
 10136 ;; Registers used:
 10137 ;;		wreg, status,2
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;Total ram usage:        0 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    4
 10150 ;; This function calls:
 10151 ;;		Nothing
 10152 ;; This function is called by:
 10153 ;;		_Mcu_Initialization
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           
 10158                           ;psect for function _IO_Set
 10159  1EFD                     _IO_Set:	
 10160                           
 10161                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10162                           
 10163                           ;incstack = 0
 10164                           ; Regs used in _IO_Set: [wreg+status,2]
 10165  1EFD  30F7               	movlw	247
 10166  1EFE  0021               	movlb	1	; select bank1
 10167  1EFF  008C               	movwf	12	;volatile
 10168                           
 10169                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10170  1F00  3004               	movlw	4
 10171  1F01  008D               	movwf	13	;volatile
 10172                           
 10173                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10174  1F02  3026               	movlw	38
 10175  1F03  008E               	movwf	14	;volatile
 10176                           
 10177                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10178  1F04  0022               	movlb	2	; select bank2
 10179  1F05  018C               	clrf	12	;volatile
 10180                           
 10181                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10182  1F06  018D               	clrf	13	;volatile
 10183                           
 10184                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10185  1F07  018E               	clrf	14	;volatile
 10186                           
 10187                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10188  1F08  300E               	movlw	14
 10189  1F09  0023               	movlb	3	; select bank3
 10190  1F0A  008C               	movwf	12	;volatile
 10191                           
 10192                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10193  1F0B  018D               	clrf	13	;volatile
 10194                           
 10195                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10196  1F0C  018E               	clrf	14	;volatile
 10197                           
 10198                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10199  1F0D  30F7               	movlw	247
 10200  1F0E  0020               	movlb	0	; select bank0
 10201  1F0F  008C               	movwf	12	;volatile
 10202                           
 10203                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10204  1F10  3004               	movlw	4
 10205  1F11  008D               	movwf	13	;volatile
 10206                           
 10207                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10208  1F12  3026               	movlw	38
 10209  1F13  008E               	movwf	14	;volatile
 10210                           
 10211                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10212  1F14  0024               	movlb	4	; select bank4
 10213  1F15  018D               	clrf	13	;volatile
 10214  1F16  0008               	return
 10215  1F17                     __end_of_IO_Set:	
 10216                           
 10217                           	psect	text60
 10218  1BCC                     __ptext60:	
 10219 ;; *************** function _IOC_Set *****************
 10220 ;; Defined at:
 10221 ;;		line 379 in file "../src/MCU_B1.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;		None
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;		None
 10226 ;; Return value:  Size  Location     Type
 10227 ;;		None               void
 10228 ;; Registers used:
 10229 ;;		wreg, status,2
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;Total ram usage:        0 bytes
 10240 ;; Hardware stack levels used:    1
 10241 ;; Hardware stack levels required when called:    4
 10242 ;; This function calls:
 10243 ;;		Nothing
 10244 ;; This function is called by:
 10245 ;;		_Mcu_Initialization
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           
 10250                           ;psect for function _IOC_Set
 10251  1BCC                     _IOC_Set:	
 10252                           
 10253                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10254                           
 10255                           ;incstack = 0
 10256                           ; Regs used in _IOC_Set: [wreg+status,2]
 10257  1BCC  3004               	movlw	4
 10258  1BCD  0027               	movlb	7	; select bank7
 10259  1BCE  0094               	movwf	20	;volatile
 10260                           
 10261                           ;MCU_B1.c: 382: IOCBN = 0b00000000;;
 10262  1BCF  0195               	clrf	21	;volatile
 10263                           
 10264                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10265  1BD0  0196               	clrf	22	;volatile
 10266                           
 10267                           ;MCU_B1.c: 386: IOCIE = 1;
 10268  1BD1  158B               	bsf	11,3	;volatile
 10269                           
 10270                           ;MCU_B1.c: 387: IOCIF = 0;
 10271  1BD2  100B               	bcf	11,0	;volatile
 10272                           
 10273                           ;MCU_B1.c: 388: PEIE = 1;
 10274  1BD3  170B               	bsf	11,6	;volatile
 10275                           
 10276                           ;MCU_B1.c: 389: GIE = 1;
 10277  1BD4  178B               	bsf	11,7	;volatile
 10278  1BD5  0008               	return
 10279  1BD6                     __end_of_IOC_Set:	
 10280                           
 10281                           	psect	text61
 10282  1B4B                     __ptext61:	
 10283 ;; *************** function _Fosc_Set *****************
 10284 ;; Defined at:
 10285 ;;		line 56 in file "../src/MCU_B1.c"
 10286 ;; Parameters:    Size  Location     Type
 10287 ;;		None
 10288 ;; Auto vars:     Size  Location     Type
 10289 ;;		None
 10290 ;; Return value:  Size  Location     Type
 10291 ;;		None               void
 10292 ;; Registers used:
 10293 ;;		wreg
 10294 ;; Tracked objects:
 10295 ;;		On entry : 0/0
 10296 ;;		On exit  : 0/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;Total ram usage:        0 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; Hardware stack levels required when called:    4
 10306 ;; This function calls:
 10307 ;;		Nothing
 10308 ;; This function is called by:
 10309 ;;		_Mcu_Initialization
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           
 10314                           ;psect for function _Fosc_Set
 10315  1B4B                     _Fosc_Set:	
 10316                           
 10317                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10318                           
 10319                           ;incstack = 0
 10320                           ; Regs used in _Fosc_Set: [wreg]
 10321  1B4B  3078               	movlw	120
 10322  1B4C  0021               	movlb	1	; select bank1
 10323  1B4D  0099               	movwf	25	;volatile
 10324  1B4E  0008               	return
 10325  1B4F                     __end_of_Fosc_Set:	
 10326                           
 10327                           	psect	text62
 10328  1B81                     __ptext62:	
 10329 ;; *************** function _ADC_Set *****************
 10330 ;; Defined at:
 10331 ;;		line 425 in file "../src/MCU_B1.c"
 10332 ;; Parameters:    Size  Location     Type
 10333 ;;		None
 10334 ;; Auto vars:     Size  Location     Type
 10335 ;;		None
 10336 ;; Return value:  Size  Location     Type
 10337 ;;		None               void
 10338 ;; Registers used:
 10339 ;;		wreg
 10340 ;; Tracked objects:
 10341 ;;		On entry : 0/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;Total ram usage:        0 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; Hardware stack levels required when called:    4
 10352 ;; This function calls:
 10353 ;;		Nothing
 10354 ;; This function is called by:
 10355 ;;		_Mcu_Initialization
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           
 10360                           ;psect for function _ADC_Set
 10361  1B81                     _ADC_Set:	
 10362                           
 10363                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10364                           
 10365                           ;incstack = 0
 10366                           ; Regs used in _ADC_Set: [wreg]
 10367  1B81  30F3               	movlw	243
 10368  1B82  0021               	movlb	1	; select bank1
 10369  1B83  009E               	movwf	30	;volatile
 10370                           
 10371                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10372  1B84  30C1               	movlw	193
 10373  1B85  0022               	movlb	2	; select bank2
 10374  1B86  0097               	movwf	23	;volatile
 10375  1B87  0008               	return
 10376  1B88                     __end_of_ADC_Set:	
 10377                           
 10378                           	psect	text63
 10379  004C                     __ptext63:	
 10380 ;; *************** function _Load_Main *****************
 10381 ;; Defined at:
 10382 ;;		line 39 in file "../src/OverLoad_B1.c"
 10383 ;; Parameters:    Size  Location     Type
 10384 ;;		None
 10385 ;; Auto vars:     Size  Location     Type
 10386 ;;  i               2   16[BANK0 ] int 
 10387 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10388 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10389 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10390 ;;  error           1   12[BANK0 ] unsigned char 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;		None               void
 10393 ;; Registers used:
 10394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:       10 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    5
 10407 ;; This function calls:
 10408 ;;		___lwdiv
 10409 ;;		___wmul
 10410 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10411 ;;		_getDimmer_LoadGO
 10412 ;;		_getDimmer_Load_Status
 10413 ;;		_getMain_All_Error_Status
 10414 ;;		_getMain_All_LightsStatus
 10415 ;;		_getMain_Lights_Count
 10416 ;;		_setLoad_AH_AL_Restore
 10417 ;; This function is called by:
 10418 ;;		_main
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           
 10423                           ;psect for function _Load_Main
 10424  004C                     _Load_Main:	
 10425                           
 10426                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10427                           
 10428                           ;incstack = 0
 10429                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10430  004C  3000               	movlw	0
 10431  004D  3191  21AF  3180   	fcall	_getMain_All_Error_Status
 10432  0050  0020               	movlb	0	; select bank0
 10433  0051  00A8               	movwf	??_Load_Main
 10434  0052  0828               	movf	??_Load_Main,w
 10435  0053  00AC               	movwf	Load_Main@error
 10436                           
 10437                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10438  0054  01AE               	clrf	Load_Main@Load_RunStatus
 10439  0055  01AD               	clrf	Load_Main@ErrorCountValue
 10440  0056  01AF               	clrf	Load_Main@LightsCount
 10441                           
 10442                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10443  0057  0022               	movlb	2	; select bank2
 10444  0058  1C48               	btfss	_Load^(0+256),0
 10445  0059  29F8               	goto	l1600
 10446                           
 10447                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10448  005A  319B  23C2  3180   	fcall	_getMain_All_LightsStatus
 10449  005D  3800               	iorlw	0
 10450  005E  1D03               	skipz
 10451  005F  2862               	goto	l7774
 10452                           
 10453                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10454  0060  0022               	movlb	2	; select bank2
 10455  0061  2883               	goto	l7792
 10456  0062                     l7774:	
 10457                           ;OverLoad_B1.c: 46: } else {
 10458                           
 10459                           
 10460                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10461  0062  0020               	movlb	0	; select bank0
 10462  0063  08AC               	movf	Load_Main@error,f
 10463  0064  1D03               	skipz
 10464  0065  2880               	goto	l1603
 10465  0066  319D  2588  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10466  0069  3800               	iorlw	0
 10467  006A  1D03               	skipz
 10468  006B  2880               	goto	l1603
 10469                           
 10470                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10471  006C  0022               	movlb	2	; select bank2
 10472  006D  14C8               	bsf	_Load^(0+256),1
 10473                           
 10474                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10475  006E  319B  2397  3180   	fcall	_getDimmer_LoadGO
 10476  0071  3A01               	xorlw	1
 10477  0072  1D03               	skipz
 10478  0073  287B               	goto	l1604
 10479                           
 10480                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10481  0074  0022               	movlb	2	; select bank2
 10482  0075  1DC8               	btfss	_Load^(0+256),3
 10483  0076  1BC8               	btfsc	_Load^(0+256),7
 10484  0077  2884               	goto	l1602
 10485                           
 10486                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10487  0078  15C8               	bsf	_Load^(0+256),3
 10488                           
 10489                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10490  0079  01ED               	clrf	(_Load^(0+256)+37)
 10491                           
 10492                           ;OverLoad_B1.c: 56: }
 10493                           ;OverLoad_B1.c: 57: } else {
 10494  007A  2884               	goto	l1602
 10495  007B                     l1604:	
 10496                           
 10497                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10498  007B  0022               	movlb	2	; select bank2
 10499  007C  1FC8               	btfss	_Load^(0+256),7
 10500  007D  2884               	goto	l1602
 10501                           
 10502                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10503  007E  13C8               	bcf	_Load^(0+256),7
 10504                           
 10505                           ;OverLoad_B1.c: 60: }
 10506                           ;OverLoad_B1.c: 61: }
 10507                           ;OverLoad_B1.c: 62: } else {
 10508  007F  2884               	goto	l1602
 10509  0080                     l1603:	
 10510                           
 10511                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10512  0080  0022               	movlb	2	; select bank2
 10513  0081  1CC8               	btfss	_Load^(0+256),1
 10514  0082  2884               	goto	l1602
 10515  0083                     l7792:	
 10516                           
 10517                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10518  0083  10C8               	bcf	_Load^(0+256),1
 10519  0084                     l1602:	
 10520                           
 10521                           ;OverLoad_B1.c: 65: }
 10522                           ;OverLoad_B1.c: 66: }
 10523                           ;OverLoad_B1.c: 88: }
 10524                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10525  0084  1CC8               	btfss	_Load^(0+256),1
 10526  0085  29D4               	goto	l1610
 10527                           
 10528                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10529  0086  1548               	bsf	_Load^(0+256),2
 10530                           
 10531                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10532  0087  1E48               	btfss	_Load^(0+256),4
 10533  0088  29D2               	goto	l1611
 10534                           
 10535                           ;OverLoad_B1.c: 95: Load.Time++;
 10536  0089  3001               	movlw	1
 10537  008A  07C9               	addwf	(_Load^(0+256)+1),f
 10538  008B  3000               	movlw	0
 10539  008C  3DCA               	addwfc	((_Load+1)^(0+256)+1),f
 10540                           
 10541                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10542  008D  3000               	movlw	0
 10543  008E  024A               	subwf	((_Load+1)^(0+256)+1),w
 10544  008F  3002               	movlw	2
 10545  0090  1903               	skipnz
 10546  0091  0249               	subwf	(_Load^(0+256)+1),w
 10547  0092  1C03               	skipc
 10548  0093  0008               	return
 10549                           
 10550                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10551  0094  01C9               	clrf	(_Load^(0+256)+1)
 10552  0095  01CA               	clrf	((_Load+1)^(0+256)+1)
 10553                           
 10554                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10555  0096  1248               	bcf	_Load^(0+256),4
 10556                           
 10557                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10558  0097  3001               	movlw	1
 10559  0098  0020               	movlb	0	; select bank0
 10560  0099  00B0               	movwf	Load_Main@i
 10561  009A  3000               	movlw	0
 10562  009B  00B1               	movwf	Load_Main@i+1
 10563  009C  0831               	movf	Load_Main@i+1,w
 10564  009D  3A80               	xorlw	128
 10565  009E  00A8               	movwf	??_Load_Main
 10566  009F  3080               	movlw	128
 10567  00A0  0228               	subwf	??_Load_Main,w
 10568  00A1  1D03               	skipz
 10569  00A2  28A5               	goto	u7935
 10570  00A3  3004               	movlw	4
 10571  00A4  0230               	subwf	Load_Main@i,w
 10572  00A5                     u7935:	
 10573  00A5  1803               	btfsc	3,0
 10574  00A6  28D9               	goto	l7814
 10575  00A7                     l7808:	
 10576                           
 10577                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10578  00A7  0020               	movlb	0	; select bank0
 10579  00A8  3530               	lslf	Load_Main@i,w
 10580  00A9  3E53               	addlw	(_Load+11)& (0+255)
 10581  00AA  0086               	movwf	6
 10582  00AB  3001               	movlw	1	; select bank2/3
 10583  00AC  0087               	movwf	7
 10584  00AD  3F40               	moviw [0]fsr1
 10585  00AE  00A8               	movwf	??_Load_Main
 10586  00AF  3F41               	moviw [1]fsr1
 10587  00B0  00A9               	movwf	??_Load_Main+1
 10588  00B1  0828               	movf	??_Load_Main,w
 10589  00B2  0022               	movlb	2	; select bank2
 10590  00B3  07CD               	addwf	(_Load^(0+256)+5),f
 10591  00B4  0020               	movlb	0	; select bank0
 10592  00B5  0829               	movf	??_Load_Main+1,w
 10593  00B6  0022               	movlb	2	; select bank2
 10594  00B7  3DCE               	addwfc	((_Load+1)^(0+256)+5),f
 10595                           
 10596                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10597  00B8  0020               	movlb	0	; select bank0
 10598  00B9  3530               	lslf	Load_Main@i,w
 10599  00BA  3E5D               	addlw	(_Load+21)& (0+255)
 10600  00BB  0086               	movwf	6
 10601  00BC  3001               	movlw	1	; select bank2/3
 10602  00BD  0087               	movwf	7
 10603  00BE  3F40               	moviw [0]fsr1
 10604  00BF  00A8               	movwf	??_Load_Main
 10605  00C0  3F41               	moviw [1]fsr1
 10606  00C1  00A9               	movwf	??_Load_Main+1
 10607  00C2  0828               	movf	??_Load_Main,w
 10608  00C3  0022               	movlb	2	; select bank2
 10609  00C4  07CF               	addwf	(_Load^(0+256)+7),f
 10610  00C5  0020               	movlb	0	; select bank0
 10611  00C6  0829               	movf	??_Load_Main+1,w
 10612  00C7  0022               	movlb	2	; select bank2
 10613  00C8  3DD0               	addwfc	((_Load+1)^(0+256)+7),f
 10614  00C9  3001               	movlw	1
 10615  00CA  0020               	movlb	0	; select bank0
 10616  00CB  07B0               	addwf	Load_Main@i,f
 10617  00CC  3000               	movlw	0
 10618  00CD  3DB1               	addwfc	Load_Main@i+1,f
 10619  00CE  0831               	movf	Load_Main@i+1,w
 10620  00CF  3A80               	xorlw	128
 10621  00D0  00A8               	movwf	??_Load_Main
 10622  00D1  3080               	movlw	128
 10623  00D2  0228               	subwf	??_Load_Main,w
 10624  00D3  1D03               	skipz
 10625  00D4  28D7               	goto	u7945
 10626  00D5  3004               	movlw	4
 10627  00D6  0230               	subwf	Load_Main@i,w
 10628  00D7                     u7945:	
 10629  00D7  1C03               	skipc
 10630  00D8  28A7               	goto	l7808
 10631  00D9                     l7814:	
 10632                           
 10633                           ;OverLoad_B1.c: 103: }
 10634                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10635  00D9  3003               	movlw	3
 10636  00DA  0020               	movlb	0	; select bank0
 10637  00DB  00A0               	movwf	___lwdiv@divisor
 10638  00DC  3000               	movlw	0
 10639  00DD  00A1               	movwf	___lwdiv@divisor+1
 10640  00DE  0022               	movlb	2	; select bank2
 10641  00DF  084E               	movf	((_Load+1)^(0+256)+5),w
 10642  00E0  0020               	movlb	0	; select bank0
 10643  00E1  01A3               	clrf	___lwdiv@dividend+1
 10644  00E2  07A3               	addwf	___lwdiv@dividend+1,f
 10645  00E3  0022               	movlb	2	; select bank2
 10646  00E4  084D               	movf	(_Load^(0+256)+5),w
 10647  00E5  0020               	movlb	0	; select bank0
 10648  00E6  01A2               	clrf	___lwdiv@dividend
 10649  00E7  07A2               	addwf	___lwdiv@dividend,f
 10650  00E8  3188  2001  3180   	fcall	___lwdiv
 10651  00EB  0020               	movlb	0	; select bank0
 10652  00EC  0821               	movf	?___lwdiv+1,w
 10653  00ED  0022               	movlb	2	; select bank2
 10654  00EE  01CE               	clrf	((_Load+1)^(0+256)+5)
 10655  00EF  07CE               	addwf	((_Load+1)^(0+256)+5),f
 10656  00F0  0020               	movlb	0	; select bank0
 10657  00F1  0820               	movf	?___lwdiv,w
 10658  00F2  0022               	movlb	2	; select bank2
 10659  00F3  01CD               	clrf	(_Load^(0+256)+5)
 10660  00F4  07CD               	addwf	(_Load^(0+256)+5),f
 10661                           
 10662                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10663  00F5  3003               	movlw	3
 10664  00F6  0020               	movlb	0	; select bank0
 10665  00F7  00A0               	movwf	___lwdiv@divisor
 10666  00F8  3000               	movlw	0
 10667  00F9  00A1               	movwf	___lwdiv@divisor+1
 10668  00FA  0022               	movlb	2	; select bank2
 10669  00FB  0850               	movf	((_Load+1)^(0+256)+7),w
 10670  00FC  0020               	movlb	0	; select bank0
 10671  00FD  01A3               	clrf	___lwdiv@dividend+1
 10672  00FE  07A3               	addwf	___lwdiv@dividend+1,f
 10673  00FF  0022               	movlb	2	; select bank2
 10674  0100  084F               	movf	(_Load^(0+256)+7),w
 10675  0101  0020               	movlb	0	; select bank0
 10676  0102  01A2               	clrf	___lwdiv@dividend
 10677  0103  07A2               	addwf	___lwdiv@dividend,f
 10678  0104  3188  2001  3180   	fcall	___lwdiv
 10679  0107  0020               	movlb	0	; select bank0
 10680  0108  0821               	movf	?___lwdiv+1,w
 10681  0109  0022               	movlb	2	; select bank2
 10682  010A  01D0               	clrf	((_Load+1)^(0+256)+7)
 10683  010B  07D0               	addwf	((_Load+1)^(0+256)+7),f
 10684  010C  0020               	movlb	0	; select bank0
 10685  010D  0820               	movf	?___lwdiv,w
 10686  010E  0022               	movlb	2	; select bank2
 10687  010F  01CF               	clrf	(_Load^(0+256)+7)
 10688  0110  07CF               	addwf	(_Load^(0+256)+7),f
 10689                           
 10690                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10691  0111  319F  2768  3180   	fcall	_setLoad_AH_AL_Restore
 10692                           
 10693                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10694  0114  0022               	movlb	2	; select bank2
 10695  0115  0850               	movf	((_Load+1)^(0+256)+7),w
 10696  0116  024E               	subwf	((_Load+1)^(0+256)+5),w
 10697  0117  1D03               	skipz
 10698  0118  291B               	goto	u7955
 10699  0119  084F               	movf	(_Load^(0+256)+7),w
 10700  011A  024D               	subwf	(_Load^(0+256)+5),w
 10701  011B                     u7955:	
 10702  011B  1C03               	skipc
 10703  011C  0008               	return
 10704                           
 10705                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10706  011D  3005               	movlw	5
 10707  011E  3E48               	addlw	_Load& (0+255)
 10708  011F  0086               	movwf	6
 10709  0120  3001               	movlw	1	; select bank2/3
 10710  0121  0087               	movwf	7
 10711  0122  094F               	comf	(_Load^(0+256)+7),w
 10712  0123  0020               	movlb	0	; select bank0
 10713  0124  00A8               	movwf	??_Load_Main
 10714  0125  0022               	movlb	2	; select bank2
 10715  0126  0950               	comf	((_Load+1)^(0+256)+7),w
 10716  0127  0020               	movlb	0	; select bank0
 10717  0128  00A9               	movwf	??_Load_Main+1
 10718  0129  0AA8               	incf	??_Load_Main,f
 10719  012A  1903               	skipnz
 10720  012B  0AA9               	incf	??_Load_Main+1,f
 10721  012C  3F40               	moviw [0]fsr1
 10722  012D  0728               	addwf	??_Load_Main,w
 10723  012E  0022               	movlb	2	; select bank2
 10724  012F  00E7               	movwf	(_Load^(0+256)+31)
 10725  0130  3F41               	moviw [1]fsr1
 10726  0131  0020               	movlb	0	; select bank0
 10727  0132  3D29               	addwfc	??_Load_Main+1,w
 10728  0133  0022               	movlb	2	; select bank2
 10729  0134  00E8               	movwf	(_Load^(0+256)+32)
 10730                           
 10731                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10732  0135  01CD               	clrf	(_Load^(0+256)+5)
 10733  0136  01CE               	clrf	((_Load+1)^(0+256)+5)
 10734                           
 10735                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10736  0137  01CF               	clrf	(_Load^(0+256)+7)
 10737  0138  01D0               	clrf	((_Load+1)^(0+256)+7)
 10738                           
 10739                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10740  0139  1DC8               	btfss	_Load^(0+256),3
 10741  013A  2994               	goto	l7854
 10742                           
 10743                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10744  013B  3002               	movlw	2
 10745  013C  026D               	subwf	(_Load^(0+256)+37),w
 10746  013D  1803               	skipnc
 10747  013E  2994               	goto	l7854
 10748                           
 10749                           ;OverLoad_B1.c: 115: Load.Count++;
 10750  013F  3001               	movlw	1
 10751  0140  0020               	movlb	0	; select bank0
 10752  0141  00A8               	movwf	??_Load_Main
 10753  0142  0828               	movf	??_Load_Main,w
 10754  0143  0022               	movlb	2	; select bank2
 10755  0144  07ED               	addwf	(_Load^(0+256)+37),f
 10756                           
 10757                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10758  0145  319B  239F  3180   	fcall	_getDimmer_Load_Status
 10759  0148  0020               	movlb	0	; select bank0
 10760  0149  00A8               	movwf	??_Load_Main
 10761  014A  0828               	movf	??_Load_Main,w
 10762  014B  00AE               	movwf	Load_Main@Load_RunStatus
 10763                           
 10764                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10765  014C  319B  23E1  3180   	fcall	_getMain_Lights_Count
 10766  014F  0020               	movlb	0	; select bank0
 10767  0150  00A8               	movwf	??_Load_Main
 10768  0151  0828               	movf	??_Load_Main,w
 10769  0152  00AF               	movwf	Load_Main@LightsCount
 10770                           
 10771                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10772  0153  0022               	movlb	2	; select bank2
 10773  0154  086D               	movf	(_Load^(0+256)+37),w
 10774  0155  3A01               	xorlw	1
 10775  0156  1D03               	skipz
 10776  0157  295C               	goto	l7840
 10777                           
 10778                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10779  0158  3074               	movlw	116
 10780  0159  00EB               	movwf	(_Load^(0+256)+35)
 10781  015A  3004               	movlw	4
 10782  015B  2969               	goto	L6
 10783  015C                     l7840:	
 10784                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10785                           
 10786  015C  086D               	movf	(_Load^(0+256)+37),w
 10787  015D  3A02               	xorlw	2
 10788  015E  1D03               	skipz
 10789  015F  2994               	goto	l7854
 10790                           
 10791                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10792  0160  0020               	movlb	0	; select bank0
 10793  0161  082F               	movf	Load_Main@LightsCount,w
 10794  0162  3A01               	xorlw	1
 10795  0163  1D03               	skipz
 10796  0164  296B               	goto	l7846
 10797                           
 10798                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.6*57);
 10799  0165  305B               	movlw	91
 10800  0166  0022               	movlb	2	; select bank2
 10801  0167  00EB               	movwf	(_Load^(0+256)+35)
 10802  0168  3000               	movlw	0
 10803  0169                     L6:	
 10804  0169  00EC               	movwf	(_Load^(0+256)+36)
 10805                           
 10806                           ;OverLoad_B1.c: 130: } else {
 10807  016A  2994               	goto	l7854
 10808  016B                     l7846:	
 10809                           
 10810                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10811  016B  0020               	movlb	0	; select bank0
 10812  016C  08AE               	movf	Load_Main@Load_RunStatus,f
 10813  016D  1D03               	skipz
 10814  016E  2988               	goto	l7850
 10815                           
 10816                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.6*57) * LightsCount;
 10817  016F  082F               	movf	Load_Main@LightsCount,w
 10818  0170  00A8               	movwf	??_Load_Main
 10819  0171  01A9               	clrf	??_Load_Main+1
 10820  0172  0828               	movf	??_Load_Main,w
 10821  0173  00A0               	movwf	___wmul@multiplier
 10822  0174  0829               	movf	??_Load_Main+1,w
 10823  0175  00A1               	movwf	___wmul@multiplier+1
 10824  0176  305B               	movlw	91
 10825  0177  00A2               	movwf	___wmul@multiplicand
 10826  0178  3000               	movlw	0
 10827  0179  00A3               	movwf	___wmul@multiplicand+1
 10828  017A  319F  2784  3180   	fcall	___wmul
 10829  017D  0020               	movlb	0	; select bank0
 10830  017E  0821               	movf	?___wmul+1,w
 10831  017F  0022               	movlb	2	; select bank2
 10832  0180  01EC               	clrf	((_Load+1)^(0+256)+35)
 10833  0181  07EC               	addwf	((_Load+1)^(0+256)+35),f
 10834  0182  0020               	movlb	0	; select bank0
 10835  0183  0820               	movf	?___wmul,w
 10836  0184  0022               	movlb	2	; select bank2
 10837  0185  01EB               	clrf	(_Load^(0+256)+35)
 10838  0186  07EB               	addwf	(_Load^(0+256)+35),f
 10839                           
 10840                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10841  0187  2994               	goto	l7854
 10842  0188                     l7850:	
 10843  0188  0020               	movlb	0	; select bank0
 10844  0189  082E               	movf	Load_Main@Load_RunStatus,w
 10845  018A  3A01               	xorlw	1
 10846  018B  1D03               	skipz
 10847  018C  2994               	goto	l7854
 10848                           
 10849                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10850  018D  0022               	movlb	2	; select bank2
 10851  018E  0851               	movf	(_Load^(0+256)+9),w
 10852  018F  3E5B               	addlw	91
 10853  0190  00EB               	movwf	(_Load^(0+256)+35)
 10854  0191  3000               	movlw	0
 10855  0192  3D52               	addwfc	((_Load+1)^(0+256)+9),w
 10856  0193  00EC               	movwf	((_Load+1)^(0+256)+35)
 10857  0194                     l7854:	
 10858                           
 10859                           ;OverLoad_B1.c: 135: }
 10860                           ;OverLoad_B1.c: 136: }
 10861                           ;OverLoad_B1.c: 137: }
 10862                           ;OverLoad_B1.c: 138: }
 10863                           ;OverLoad_B1.c: 139: }
 10864                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10865  0194  0022               	movlb	2	; select bank2
 10866  0195  086C               	movf	((_Load+1)^(0+256)+35),w
 10867  0196  0268               	subwf	((_Load+1)^(0+256)+31),w
 10868  0197  1D03               	skipz
 10869  0198  299B               	goto	u8035
 10870  0199  086B               	movf	(_Load^(0+256)+35),w
 10871  019A  0267               	subwf	(_Load^(0+256)+31),w
 10872  019B                     u8035:	
 10873  019B  1C03               	skipc
 10874  019C  29BA               	goto	l7870
 10875                           
 10876                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10877  019D  0020               	movlb	0	; select bank0
 10878  019E  082F               	movf	Load_Main@LightsCount,w
 10879  019F  3A01               	xorlw	1
 10880  01A0  1903               	skipnz
 10881  01A1  29A4               	goto	l7860
 10882  01A2  3003               	movlw	3
 10883  01A3  29A5               	goto	L7
 10884  01A4                     l7860:	
 10885  01A4  3002               	movlw	2
 10886  01A5                     L7:	
 10887  01A5  00AA               	movwf	_Load_Main$3755
 10888  01A6  3000               	movlw	0
 10889  01A7  00AB               	movwf	_Load_Main$3755+1
 10890  01A8  082A               	movf	_Load_Main$3755,w
 10891  01A9  00A8               	movwf	??_Load_Main
 10892  01AA  0828               	movf	??_Load_Main,w
 10893  01AB  00AD               	movwf	Load_Main@ErrorCountValue
 10894                           
 10895                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10896  01AC  3001               	movlw	1
 10897  01AD  00A8               	movwf	??_Load_Main
 10898  01AE  0828               	movf	??_Load_Main,w
 10899  01AF  0022               	movlb	2	; select bank2
 10900  01B0  07EE               	addwf	(_Load^(0+256)+38),f
 10901                           
 10902                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10903  01B1  086E               	movf	(_Load^(0+256)+38),w
 10904  01B2  0020               	movlb	0	; select bank0
 10905  01B3  022D               	subwf	Load_Main@ErrorCountValue,w
 10906  01B4  1803               	skipnc
 10907  01B5  0008               	return
 10908                           
 10909                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10910  01B6  0022               	movlb	2	; select bank2
 10911  01B7  01EE               	clrf	(_Load^(0+256)+38)
 10912                           
 10913                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10914  01B8  16C8               	bsf	_Load^(0+256),5
 10915                           
 10916                           ;OverLoad_B1.c: 168: }
 10917                           ;OverLoad_B1.c: 169: } else {
 10918  01B9  0008               	return
 10919  01BA                     l7870:	
 10920                           
 10921                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10922  01BA  01EE               	clrf	(_Load^(0+256)+38)
 10923                           
 10924                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10925  01BB  1DC8               	btfss	_Load^(0+256),3
 10926  01BC  0008               	return
 10927                           
 10928                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10929  01BD  3001               	movlw	1
 10930  01BE  0020               	movlb	0	; select bank0
 10931  01BF  00A8               	movwf	??_Load_Main
 10932  01C0  0828               	movf	??_Load_Main,w
 10933  01C1  0022               	movlb	2	; select bank2
 10934  01C2  07EF               	addwf	(_Load^(0+256)+39),f
 10935                           
 10936                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10937  01C3  3003               	movlw	3
 10938  01C4  026F               	subwf	(_Load^(0+256)+39),w
 10939  01C5  1C03               	skipc
 10940  01C6  0008               	return
 10941                           
 10942                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10943  01C7  01EF               	clrf	(_Load^(0+256)+39)
 10944                           
 10945                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10946  01C8  17C8               	bsf	_Load^(0+256),7
 10947                           
 10948                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10949  01C9  11C8               	bcf	_Load^(0+256),3
 10950                           
 10951                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10952  01CA  01ED               	clrf	(_Load^(0+256)+37)
 10953                           
 10954                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10955  01CB  0868               	movf	((_Load+1)^(0+256)+31),w
 10956  01CC  01D2               	clrf	((_Load+1)^(0+256)+9)
 10957  01CD  07D2               	addwf	((_Load+1)^(0+256)+9),f
 10958  01CE  0867               	movf	(_Load^(0+256)+31),w
 10959  01CF  01D1               	clrf	(_Load^(0+256)+9)
 10960  01D0  07D1               	addwf	(_Load^(0+256)+9),f
 10961                           
 10962                           ;OverLoad_B1.c: 182: }
 10963                           ;OverLoad_B1.c: 183: }
 10964                           ;OverLoad_B1.c: 206: }
 10965                           ;OverLoad_B1.c: 207: }
 10966                           ;OverLoad_B1.c: 208: }
 10967                           ;OverLoad_B1.c: 209: } else {
 10968  01D1  0008               	return
 10969  01D2                     l1611:	
 10970                           
 10971                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10972  01D2  1648               	bsf	_Load^(0+256),4
 10973                           
 10974                           ;OverLoad_B1.c: 211: }
 10975                           ;OverLoad_B1.c: 212: } else {
 10976  01D3  0008               	return
 10977  01D4                     l1610:	
 10978                           
 10979                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10980  01D4  1D48               	btfss	_Load^(0+256),2
 10981  01D5  29E7               	goto	l7906
 10982                           
 10983                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 10984  01D6  1148               	bcf	_Load^(0+256),2
 10985                           
 10986                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 10987  01D7  1248               	bcf	_Load^(0+256),4
 10988                           
 10989                           ;OverLoad_B1.c: 218: Load.Time = 0;
 10990  01D8  01C9               	clrf	(_Load^(0+256)+1)
 10991  01D9  01CA               	clrf	((_Load+1)^(0+256)+1)
 10992                           
 10993                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 10994  01DA  319F  2768  3180   	fcall	_setLoad_AH_AL_Restore
 10995                           
 10996                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 10997  01DD  0022               	movlb	2	; select bank2
 10998  01DE  01EE               	clrf	(_Load^(0+256)+38)
 10999                           
 11000                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11001  01DF  01EF               	clrf	(_Load^(0+256)+39)
 11002                           
 11003                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11004  01E0  01CD               	clrf	(_Load^(0+256)+5)
 11005  01E1  01CE               	clrf	((_Load+1)^(0+256)+5)
 11006                           
 11007                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11008  01E2  01CF               	clrf	(_Load^(0+256)+7)
 11009  01E3  01D0               	clrf	((_Load+1)^(0+256)+7)
 11010                           
 11011                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11012  01E4  11C8               	bcf	_Load^(0+256),3
 11013                           
 11014                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11015  01E5  01ED               	clrf	(_Load^(0+256)+37)
 11016                           
 11017                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11018  01E6  13C8               	bcf	_Load^(0+256),7
 11019  01E7                     l7906:	
 11020                           
 11021                           ;OverLoad_B1.c: 255: }
 11022                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11023  01E7  1EC8               	btfss	_Load^(0+256),5
 11024  01E8  0008               	return
 11025                           
 11026                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11027  01E9  3001               	movlw	1
 11028  01EA  07CB               	addwf	(_Load^(0+256)+3),f
 11029  01EB  3000               	movlw	0
 11030  01EC  3DCC               	addwfc	((_Load+1)^(0+256)+3),f
 11031                           
 11032                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11033  01ED  3001               	movlw	1
 11034  01EE  024C               	subwf	((_Load+1)^(0+256)+3),w
 11035  01EF  30F4               	movlw	244
 11036  01F0  1903               	skipnz
 11037  01F1  024B               	subwf	(_Load^(0+256)+3),w
 11038  01F2  1C03               	skipc
 11039  01F3  0008               	return
 11040                           
 11041                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11042  01F4  01CB               	clrf	(_Load^(0+256)+3)
 11043  01F5  01CC               	clrf	((_Load+1)^(0+256)+3)
 11044                           
 11045                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11046  01F6  12C8               	bcf	_Load^(0+256),5
 11047                           
 11048                           ;OverLoad_B1.c: 261: }
 11049                           ;OverLoad_B1.c: 262: }
 11050                           ;OverLoad_B1.c: 263: }
 11051                           ;OverLoad_B1.c: 264: } else {
 11052  01F7  0008               	return
 11053  01F8                     l1600:	
 11054                           
 11055                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11056  01F8  0021               	movlb	1	; select bank1
 11057  01F9  1C2E               	btfss	_myMain^(0+128),0
 11058  01FA  0008               	return
 11059                           
 11060                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11061  01FB  0022               	movlb	2	; select bank2
 11062  01FC  1448               	bsf	_Load^(0+256),0
 11063  01FD  0008               	return
 11064  01FE                     __end_of_Load_Main:	
 11065                           
 11066                           	psect	text64
 11067  1BE1                     __ptext64:	
 11068 ;; *************** function _getMain_Lights_Count *****************
 11069 ;; Defined at:
 11070 ;;		line 459 in file "../src/Main_B1.c"
 11071 ;; Parameters:    Size  Location     Type
 11072 ;;		None
 11073 ;; Auto vars:     Size  Location     Type
 11074 ;;  status1         1    1[BANK0 ] unsigned char 
 11075 ;;  count           1    0[BANK0 ] unsigned char 
 11076 ;; Return value:  Size  Location     Type
 11077 ;;                  1    wreg      unsigned char 
 11078 ;; Registers used:
 11079 ;;		wreg, status,2
 11080 ;; Tracked objects:
 11081 ;;		On entry : 0/0
 11082 ;;		On exit  : 0/0
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;Total ram usage:        2 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; Hardware stack levels required when called:    4
 11092 ;; This function calls:
 11093 ;;		Nothing
 11094 ;; This function is called by:
 11095 ;;		_Load_Main
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           
 11100                           ;psect for function _getMain_Lights_Count
 11101  1BE1                     _getMain_Lights_Count:	
 11102                           
 11103                           ;Main_B1.c: 460: char count = 0;
 11104                           
 11105                           ;incstack = 0
 11106                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11107  1BE1  0020               	movlb	0	; select bank0
 11108  1BE2  01A0               	clrf	getMain_Lights_Count@count
 11109                           
 11110                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11111  1BE3  3000               	movlw	0
 11112  1BE4  0021               	movlb	1	; select bank1
 11113  1BE5  19C7               	btfsc	_DimmerIntr1^(0+128),3
 11114  1BE6  3001               	movlw	1
 11115  1BE7  0020               	movlb	0	; select bank0
 11116  1BE8  00A1               	movwf	getMain_Lights_Count@status1
 11117                           
 11118                           ;Main_B1.c: 487: return count = status1;
 11119  1BE9  0821               	movf	getMain_Lights_Count@status1,w
 11120  1BEA  00A0               	movwf	getMain_Lights_Count@count
 11121  1BEB  0008               	return
 11122  1BEC                     __end_of_getMain_Lights_Count:	
 11123                           
 11124                           	psect	text65
 11125  1B9F                     __ptext65:	
 11126 ;; *************** function _getDimmer_Load_Status *****************
 11127 ;; Defined at:
 11128 ;;		line 1084 in file "../src/Dimmer_B1.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;		None
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;  status          1    0[BANK0 ] unsigned char 
 11133 ;; Return value:  Size  Location     Type
 11134 ;;                  1    wreg      unsigned char 
 11135 ;; Registers used:
 11136 ;;		wreg, status,2
 11137 ;; Tracked objects:
 11138 ;;		On entry : 0/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;Total ram usage:        1 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    4
 11149 ;; This function calls:
 11150 ;;		Nothing
 11151 ;; This function is called by:
 11152 ;;		_Load_Main
 11153 ;; This function uses a non-reentrant model
 11154 ;;
 11155                           
 11156                           
 11157                           ;psect for function _getDimmer_Load_Status
 11158  1B9F                     _getDimmer_Load_Status:	
 11159                           
 11160                           ;Dimmer_B1.c: 1085: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11161                           
 11162                           ;incstack = 0
 11163                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11164  1B9F  3000               	movlw	0
 11165  1BA0  0023               	movlb	3	; select bank3
 11166  1BA1  1920               	btfsc	_Dimmer^(0+384),2
 11167  1BA2  3001               	movlw	1
 11168  1BA3  0020               	movlb	0	; select bank0
 11169  1BA4  00A0               	movwf	getDimmer_Load_Status@status
 11170                           
 11171                           ;Dimmer_B1.c: 1086: return status;
 11172  1BA5  0820               	movf	getDimmer_Load_Status@status,w
 11173  1BA6  0008               	return
 11174  1BA7                     __end_of_getDimmer_Load_Status:	
 11175                           
 11176                           	psect	text66
 11177  1B97                     __ptext66:	
 11178 ;; *************** function _getDimmer_LoadGO *****************
 11179 ;; Defined at:
 11180 ;;		line 1078 in file "../src/Dimmer_B1.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;		None
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11185 ;; Return value:  Size  Location     Type
 11186 ;;                  1    wreg      unsigned char 
 11187 ;; Registers used:
 11188 ;;		wreg, status,2
 11189 ;; Tracked objects:
 11190 ;;		On entry : 0/0
 11191 ;;		On exit  : 0/0
 11192 ;;		Unchanged: 0/0
 11193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11197 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11198 ;;Total ram usage:        1 bytes
 11199 ;; Hardware stack levels used:    1
 11200 ;; Hardware stack levels required when called:    4
 11201 ;; This function calls:
 11202 ;;		Nothing
 11203 ;; This function is called by:
 11204 ;;		_Load_Main
 11205 ;; This function uses a non-reentrant model
 11206 ;;
 11207                           
 11208                           
 11209                           ;psect for function _getDimmer_LoadGO
 11210  1B97                     _getDimmer_LoadGO:	
 11211                           
 11212                           ;Dimmer_B1.c: 1079: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11213                           
 11214                           ;incstack = 0
 11215                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11216  1B97  3000               	movlw	0
 11217  1B98  0023               	movlb	3	; select bank3
 11218  1B99  18A0               	btfsc	_Dimmer^(0+384),1
 11219  1B9A  3001               	movlw	1
 11220  1B9B  0020               	movlb	0	; select bank0
 11221  1B9C  00A0               	movwf	getDimmer_LoadGO@loadgo
 11222                           
 11223                           ;Dimmer_B1.c: 1080: return loadgo;
 11224  1B9D  0820               	movf	getDimmer_LoadGO@loadgo,w
 11225  1B9E  0008               	return
 11226  1B9F                     __end_of_getDimmer_LoadGO:	
 11227                           
 11228                           	psect	text67
 11229  1D88                     __ptext67:	
 11230 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11231 ;; Defined at:
 11232 ;;		line 242 in file "../src/Dimmer_B1.c"
 11233 ;; Parameters:    Size  Location     Type
 11234 ;;		None
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;  status          1    0[BANK0 ] unsigned char 
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  1    wreg      unsigned char 
 11239 ;; Registers used:
 11240 ;;		wreg, status,2, status,0
 11241 ;; Tracked objects:
 11242 ;;		On entry : 0/0
 11243 ;;		On exit  : 0/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;Total ram usage:        1 bytes
 11251 ;; Hardware stack levels used:    1
 11252 ;; Hardware stack levels required when called:    4
 11253 ;; This function calls:
 11254 ;;		Nothing
 11255 ;; This function is called by:
 11256 ;;		_Load_Main
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260                           
 11261                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11262  1D88                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11263                           
 11264                           ;Dimmer_B1.c: 243: char status = 0;
 11265                           
 11266                           ;incstack = 0
 11267                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11268  1D88  0020               	movlb	0	; select bank0
 11269  1D89  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11270                           
 11271                           ;Dimmer_B1.c: 254: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11272  1D8A  3000               	movlw	0
 11273  1D8B  0021               	movlb	1	; select bank1
 11274  1D8C  1A47               	btfsc	_DimmerIntr1^(0+128),4
 11275  1D8D  3001               	movlw	1
 11276  1D8E  0020               	movlb	0	; select bank0
 11277  1D8F  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11278                           
 11279                           ;Dimmer_B1.c: 258: if (status == 0) {
 11280  1D90  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11281  1D91  1D03               	skipz
 11282  1D92  2D99               	goto	l6986
 11283                           
 11284                           ;Dimmer_B1.c: 268: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11285  1D93  3000               	movlw	0
 11286  1D94  0021               	movlb	1	; select bank1
 11287  1D95  1B47               	btfsc	_DimmerIntr1^(0+128),6
 11288  1D96  3001               	movlw	1
 11289  1D97  0020               	movlb	0	; select bank0
 11290  1D98  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11291  1D99                     l6986:	
 11292                           
 11293                           ;Dimmer_B1.c: 270: }
 11294                           ;Dimmer_B1.c: 272: return status;
 11295  1D99  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11296  1D9A  0008               	return
 11297  1D9B                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11298                           
 11299                           	psect	text68
 11300  1F84                     __ptext68:	
 11301 ;; *************** function ___wmul *****************
 11302 ;; Defined at:
 11303 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11304 ;; Parameters:    Size  Location     Type
 11305 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11306 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11307 ;; Auto vars:     Size  Location     Type
 11308 ;;  product         2    4[BANK0 ] unsigned int 
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  2    0[BANK0 ] unsigned int 
 11311 ;; Registers used:
 11312 ;;		wreg, status,2, status,0
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11318 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;Total ram usage:        6 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    4
 11325 ;; This function calls:
 11326 ;;		Nothing
 11327 ;; This function is called by:
 11328 ;;		_Load_Main
 11329 ;; This function uses a non-reentrant model
 11330 ;;
 11331                           
 11332                           
 11333                           ;psect for function ___wmul
 11334  1F84                     ___wmul:	
 11335                           
 11336                           ;incstack = 0
 11337                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11338  1F84  0020               	movlb	0	; select bank0
 11339  1F85  01A4               	clrf	___wmul@product
 11340  1F86  01A5               	clrf	___wmul@product+1
 11341  1F87                     l7492:	
 11342  1F87  1C20               	btfss	___wmul@multiplier,0
 11343  1F88  2F8D               	goto	l2651
 11344  1F89  0822               	movf	___wmul@multiplicand,w
 11345  1F8A  07A4               	addwf	___wmul@product,f
 11346  1F8B  0823               	movf	___wmul@multiplicand+1,w
 11347  1F8C  3DA5               	addwfc	___wmul@product+1,f
 11348  1F8D                     l2651:	
 11349  1F8D  3001               	movlw	1
 11350  1F8E                     u7375:	
 11351  1F8E  35A2               	lslf	___wmul@multiplicand,f
 11352  1F8F  0DA3               	rlf	___wmul@multiplicand+1,f
 11353  1F90  0B89               	decfsz	9,f
 11354  1F91  2F8E               	goto	u7375
 11355  1F92  3001               	movlw	1
 11356  1F93                     u7385:	
 11357  1F93  36A1               	lsrf	___wmul@multiplier+1,f
 11358  1F94  0CA0               	rrf	___wmul@multiplier,f
 11359  1F95  0B89               	decfsz	9,f
 11360  1F96  2F93               	goto	u7385
 11361  1F97  0821               	movf	___wmul@multiplier+1,w
 11362  1F98  0420               	iorwf	___wmul@multiplier,w
 11363  1F99  1D03               	skipz
 11364  1F9A  2F87               	goto	l7492
 11365  1F9B  0825               	movf	___wmul@product+1,w
 11366  1F9C  01A1               	clrf	?___wmul+1
 11367  1F9D  07A1               	addwf	?___wmul+1,f
 11368  1F9E  0824               	movf	___wmul@product,w
 11369  1F9F  01A0               	clrf	?___wmul
 11370  1FA0  07A0               	addwf	?___wmul,f
 11371  1FA1  0008               	return
 11372  1FA2                     __end_of___wmul:	
 11373                           
 11374                           	psect	text69
 11375  0801                     __ptext69:	
 11376 ;; *************** function ___lwdiv *****************
 11377 ;; Defined at:
 11378 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;  divisor         2    0[BANK0 ] unsigned int 
 11381 ;;  dividend        2    2[BANK0 ] unsigned int 
 11382 ;; Auto vars:     Size  Location     Type
 11383 ;;  quotient        2    5[BANK0 ] unsigned int 
 11384 ;;  counter         1    7[BANK0 ] unsigned char 
 11385 ;; Return value:  Size  Location     Type
 11386 ;;                  2    0[BANK0 ] unsigned int 
 11387 ;; Registers used:
 11388 ;;		wreg, status,2, status,0
 11389 ;; Tracked objects:
 11390 ;;		On entry : 0/0
 11391 ;;		On exit  : 0/0
 11392 ;;		Unchanged: 0/0
 11393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11394 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11397 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11398 ;;Total ram usage:        8 bytes
 11399 ;; Hardware stack levels used:    1
 11400 ;; Hardware stack levels required when called:    4
 11401 ;; This function calls:
 11402 ;;		Nothing
 11403 ;; This function is called by:
 11404 ;;		_Load_Main
 11405 ;;		_setRF_Main
 11406 ;; This function uses a non-reentrant model
 11407 ;;
 11408                           
 11409                           
 11410                           ;psect for function ___lwdiv
 11411  0801                     ___lwdiv:	
 11412                           
 11413                           ;incstack = 0
 11414                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11415  0801  0020               	movlb	0	; select bank0
 11416  0802  01A5               	clrf	___lwdiv@quotient
 11417  0803  01A6               	clrf	___lwdiv@quotient+1
 11418  0804  0821               	movf	___lwdiv@divisor+1,w
 11419  0805  0420               	iorwf	___lwdiv@divisor,w
 11420  0806  1903               	skipnz
 11421  0807  2831               	goto	l6904
 11422  0808  01A7               	clrf	___lwdiv@counter
 11423  0809  0AA7               	incf	___lwdiv@counter,f
 11424  080A                     l6892:	
 11425  080A  1BA1               	btfsc	___lwdiv@divisor+1,7
 11426  080B  2816               	goto	l6894
 11427  080C  3001               	movlw	1
 11428  080D                     u6305:	
 11429  080D  35A0               	lslf	___lwdiv@divisor,f
 11430  080E  0DA1               	rlf	___lwdiv@divisor+1,f
 11431  080F  0B89               	decfsz	9,f
 11432  0810  280D               	goto	u6305
 11433  0811  3001               	movlw	1
 11434  0812  00A4               	movwf	??___lwdiv
 11435  0813  0824               	movf	??___lwdiv,w
 11436  0814  07A7               	addwf	___lwdiv@counter,f
 11437  0815  280A               	goto	l6892
 11438  0816                     l6894:	
 11439  0816  3001               	movlw	1
 11440  0817                     u6325:	
 11441  0817  35A5               	lslf	___lwdiv@quotient,f
 11442  0818  0DA6               	rlf	___lwdiv@quotient+1,f
 11443  0819  0B89               	decfsz	9,f
 11444  081A  2817               	goto	u6325
 11445  081B  0821               	movf	___lwdiv@divisor+1,w
 11446  081C  0223               	subwf	___lwdiv@dividend+1,w
 11447  081D  1D03               	skipz
 11448  081E  2821               	goto	u6335
 11449  081F  0820               	movf	___lwdiv@divisor,w
 11450  0820  0222               	subwf	___lwdiv@dividend,w
 11451  0821                     u6335:	
 11452  0821  1C03               	skipc
 11453  0822  2828               	goto	l6900
 11454  0823  0820               	movf	___lwdiv@divisor,w
 11455  0824  02A2               	subwf	___lwdiv@dividend,f
 11456  0825  0821               	movf	___lwdiv@divisor+1,w
 11457  0826  3BA3               	subwfb	___lwdiv@dividend+1,f
 11458  0827  1425               	bsf	___lwdiv@quotient,0
 11459  0828                     l6900:	
 11460  0828  3001               	movlw	1
 11461  0829                     u6345:	
 11462  0829  36A1               	lsrf	___lwdiv@divisor+1,f
 11463  082A  0CA0               	rrf	___lwdiv@divisor,f
 11464  082B  0B89               	decfsz	9,f
 11465  082C  2829               	goto	u6345
 11466  082D  3001               	movlw	1
 11467  082E  02A7               	subwf	___lwdiv@counter,f
 11468  082F  1D03               	btfss	3,2
 11469  0830  2816               	goto	l6894
 11470  0831                     l6904:	
 11471  0831  0826               	movf	___lwdiv@quotient+1,w
 11472  0832  01A1               	clrf	?___lwdiv+1
 11473  0833  07A1               	addwf	?___lwdiv+1,f
 11474  0834  0825               	movf	___lwdiv@quotient,w
 11475  0835  01A0               	clrf	?___lwdiv
 11476  0836  07A0               	addwf	?___lwdiv,f
 11477  0837  0008               	return
 11478  0838                     __end_of___lwdiv:	
 11479                           
 11480                           	psect	text70
 11481  1B2C                     __ptext70:	
 11482 ;; *************** function _Load_Initialization *****************
 11483 ;; Defined at:
 11484 ;;		line 9 in file "../src/OverLoad_B1.c"
 11485 ;; Parameters:    Size  Location     Type
 11486 ;;		None
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;		None
 11489 ;; Return value:  Size  Location     Type
 11490 ;;		None               void
 11491 ;; Registers used:
 11492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;Total ram usage:        0 bytes
 11503 ;; Hardware stack levels used:    1
 11504 ;; Hardware stack levels required when called:    5
 11505 ;; This function calls:
 11506 ;;		_setLoad_AH_AL_Restore
 11507 ;; This function is called by:
 11508 ;;		_main
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           
 11513                           ;psect for function _Load_Initialization
 11514  1B2C                     _Load_Initialization:	
 11515                           
 11516                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11517                           
 11518                           ;incstack = 0
 11519                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11520  1B2C  319F  2768         	fcall	_setLoad_AH_AL_Restore
 11521  1B2E  0008               	return
 11522  1B2F                     __end_of_Load_Initialization:	
 11523                           
 11524                           	psect	text71
 11525  1F68                     __ptext71:	
 11526 ;; *************** function _setLoad_AH_AL_Restore *****************
 11527 ;; Defined at:
 11528 ;;		line 292 in file "../src/OverLoad_B1.c"
 11529 ;; Parameters:    Size  Location     Type
 11530 ;;		None
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;  i               1    1[BANK0 ] unsigned char 
 11533 ;; Return value:  Size  Location     Type
 11534 ;;		None               void
 11535 ;; Registers used:
 11536 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11537 ;; Tracked objects:
 11538 ;;		On entry : 0/0
 11539 ;;		On exit  : 0/0
 11540 ;;		Unchanged: 0/0
 11541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;Total ram usage:        2 bytes
 11547 ;; Hardware stack levels used:    1
 11548 ;; Hardware stack levels required when called:    4
 11549 ;; This function calls:
 11550 ;;		Nothing
 11551 ;; This function is called by:
 11552 ;;		_Load_Initialization
 11553 ;;		_Load_Main
 11554 ;; This function uses a non-reentrant model
 11555 ;;
 11556                           
 11557                           
 11558                           ;psect for function _setLoad_AH_AL_Restore
 11559  1F68                     _setLoad_AH_AL_Restore:	
 11560                           
 11561                           ;OverLoad_B1.c: 293: char i;
 11562                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11563                           
 11564                           ;incstack = 0
 11565                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11566  1F68  0020               	movlb	0	; select bank0
 11567  1F69  01A1               	clrf	setLoad_AH_AL_Restore@i
 11568  1F6A                     L8:	
 11569  1F6A  3005               	movlw	5
 11570  1F6B  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11571  1F6C  1803               	btfsc	3,0
 11572  1F6D  0008               	return
 11573                           
 11574                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11575  1F6E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11576  1F6F  3E53               	addlw	(_Load+11)& (0+255)
 11577  1F70  0086               	movwf	6
 11578  1F71  3001               	movlw	1	; select bank2/3
 11579  1F72  0087               	movwf	7
 11580  1F73  3000               	movlw	0
 11581  1F74  3FC0               	movwi [0]fsr1
 11582  1F75  3FC1               	movwi [1]fsr1
 11583                           
 11584                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11585  1F76  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11586  1F77  3E5D               	addlw	(_Load+21)& (0+255)
 11587  1F78  0086               	movwf	6
 11588  1F79  3001               	movlw	1	; select bank2/3
 11589  1F7A  0087               	movwf	7
 11590  1F7B  30FF               	movlw	255
 11591  1F7C  3FC0               	movwi [0]fsr1
 11592  1F7D  30FF               	movlw	255
 11593  1F7E  3FC1               	movwi [1]fsr1
 11594  1F7F  3001               	movlw	1
 11595  1F80  00A0               	movwf	??_setLoad_AH_AL_Restore
 11596  1F81  0820               	movf	??_setLoad_AH_AL_Restore,w
 11597  1F82  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11598  1F83  2F6A               	goto	L8
 11599  1F84                     __end_of_setLoad_AH_AL_Restore:	
 11600                           
 11601                           	psect	text72
 11602  1B47                     __ptext72:	
 11603 ;; *************** function _LED_Main *****************
 11604 ;; Defined at:
 11605 ;;		line 47 in file "../src/LED_B1.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;		None
 11608 ;; Auto vars:     Size  Location     Type
 11609 ;;		None
 11610 ;; Return value:  Size  Location     Type
 11611 ;;		None               void
 11612 ;; Registers used:
 11613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11614 ;; Tracked objects:
 11615 ;;		On entry : 0/0
 11616 ;;		On exit  : 0/0
 11617 ;;		Unchanged: 0/0
 11618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;Total ram usage:        0 bytes
 11624 ;; Hardware stack levels used:    1
 11625 ;; Hardware stack levels required when called:    6
 11626 ;; This function calls:
 11627 ;;		_setLED_Main
 11628 ;; This function is called by:
 11629 ;;		_main
 11630 ;; This function uses a non-reentrant model
 11631 ;;
 11632                           
 11633                           
 11634                           ;psect for function _LED_Main
 11635  1B47                     _LED_Main:	
 11636                           
 11637                           ;LED_B1.c: 67: setLED_Main(99);
 11638                           
 11639                           ;incstack = 0
 11640                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11641  1B47  3063               	movlw	99
 11642  1B48  3192  2281         	fcall	_setLED_Main
 11643  1B4A  0008               	return
 11644  1B4B                     __end_of_LED_Main:	
 11645                           
 11646                           	psect	text73
 11647  1281                     __ptext73:	
 11648 ;; *************** function _setLED_Main *****************
 11649 ;; Defined at:
 11650 ;;		line 229 in file "../src/LED_B1.c"
 11651 ;; Parameters:    Size  Location     Type
 11652 ;;  led             1    wreg     unsigned char 
 11653 ;; Auto vars:     Size  Location     Type
 11654 ;;  led             1    4[BANK0 ] unsigned char 
 11655 ;; Return value:  Size  Location     Type
 11656 ;;		None               void
 11657 ;; Registers used:
 11658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11659 ;; Tracked objects:
 11660 ;;		On entry : 0/0
 11661 ;;		On exit  : 0/0
 11662 ;;		Unchanged: 0/0
 11663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11666 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;Total ram usage:        3 bytes
 11669 ;; Hardware stack levels used:    1
 11670 ;; Hardware stack levels required when called:    5
 11671 ;; This function calls:
 11672 ;;		_LedPointSelect
 11673 ;; This function is called by:
 11674 ;;		_LED_Main
 11675 ;; This function uses a non-reentrant model
 11676 ;;
 11677                           
 11678                           
 11679                           ;psect for function _setLED_Main
 11680  1281                     _setLED_Main:	
 11681                           
 11682                           ;incstack = 0
 11683                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11684                           ;setLED_Main@led stored from wreg
 11685  1281  0020               	movlb	0	; select bank0
 11686  1282  00A4               	movwf	setLED_Main@led
 11687                           
 11688                           ;LED_B1.c: 230: LedPointSelect(led);
 11689  1283  0824               	movf	setLED_Main@led,w
 11690  1284  319C  2433  3192   	fcall	_LedPointSelect
 11691                           
 11692                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11693  1287  0021               	movlb	1	; select bank1
 11694  1288  0853               	movf	_LED^(0+128),w
 11695  1289  0086               	movwf	6
 11696  128A  3001               	movlw	1	; select bank2/3
 11697  128B  0087               	movwf	7
 11698  128C  1C81               	btfss	1,1
 11699  128D  0008               	return
 11700                           
 11701                           ;LED_B1.c: 232: LED->Time++;
 11702  128E  0A53               	incf	_LED^(0+128),w
 11703  128F  0086               	movwf	6
 11704  1290  3001               	movlw	1	; select bank2/3
 11705  1291  0087               	movwf	7
 11706  1292  3001               	movlw	1
 11707  1293  0781               	addwf	1,f
 11708  1294  3141               	addfsr 1,1
 11709  1295  1803               	skipnc
 11710  1296  0A81               	incf	1,f
 11711                           
 11712                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11713  1297  0A53               	incf	_LED^(0+128),w
 11714  1298  0086               	movwf	6
 11715  1299  3001               	movlw	1	; select bank2/3
 11716  129A  0087               	movwf	7
 11717  129B  3F40               	moviw [0]fsr1
 11718  129C  0020               	movlb	0	; select bank0
 11719  129D  00A2               	movwf	??_setLED_Main
 11720  129E  3F41               	moviw [1]fsr1
 11721  129F  00A3               	movwf	??_setLED_Main+1
 11722  12A0  3000               	movlw	0
 11723  12A1  0223               	subwf	??_setLED_Main+1,w
 11724  12A2  3019               	movlw	25
 11725  12A3  1903               	skipnz
 11726  12A4  0222               	subwf	??_setLED_Main,w
 11727  12A5  1C03               	skipc
 11728  12A6  0008               	return
 11729                           
 11730                           ;LED_B1.c: 234: LED->Time = 0;
 11731  12A7  0021               	movlb	1	; select bank1
 11732  12A8  0A53               	incf	_LED^(0+128),w
 11733  12A9  0086               	movwf	6
 11734  12AA  3001               	movlw	1	; select bank2/3
 11735  12AB  0087               	movwf	7
 11736  12AC  3000               	movlw	0
 11737  12AD  3FC0               	movwi [0]fsr1
 11738  12AE  3FC1               	movwi [1]fsr1
 11739                           
 11740                           ;LED_B1.c: 252: if (led == 99) {
 11741  12AF  0020               	movlb	0	; select bank0
 11742  12B0  0824               	movf	setLED_Main@led,w
 11743  12B1  3A63               	xorlw	99
 11744  12B2  1D03               	skipz
 11745  12B3  0008               	return
 11746                           
 11747                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11748  12B4  3020               	movlw	32
 11749  12B5  068D               	xorwf	13,f
 11750  12B6  0008               	return
 11751  12B7                     __end_of_setLED_Main:	
 11752                           
 11753                           	psect	text74
 11754  1B43                     __ptext74:	
 11755 ;; *************** function _LED_Initialization *****************
 11756 ;; Defined at:
 11757 ;;		line 31 in file "../src/LED_B1.c"
 11758 ;; Parameters:    Size  Location     Type
 11759 ;;		None
 11760 ;; Auto vars:     Size  Location     Type
 11761 ;;		None
 11762 ;; Return value:  Size  Location     Type
 11763 ;;		None               void
 11764 ;; Registers used:
 11765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11766 ;; Tracked objects:
 11767 ;;		On entry : 0/0
 11768 ;;		On exit  : 0/0
 11769 ;;		Unchanged: 0/0
 11770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;Total ram usage:        0 bytes
 11776 ;; Hardware stack levels used:    1
 11777 ;; Hardware stack levels required when called:    7
 11778 ;; This function calls:
 11779 ;;		_setLED_Initialization
 11780 ;; This function is called by:
 11781 ;;		_main
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function _LED_Initialization
 11787  1B43                     _LED_Initialization:	
 11788                           
 11789                           ;LED_B1.c: 42: setLED_Initialization(99);
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11793  1B43  3063               	movlw	99
 11794  1B44  319D  253F         	fcall	_setLED_Initialization
 11795  1B46  0008               	return
 11796  1B47                     __end_of_LED_Initialization:	
 11797                           
 11798                           	psect	text75
 11799  1D3F                     __ptext75:	
 11800 ;; *************** function _setLED_Initialization *****************
 11801 ;; Defined at:
 11802 ;;		line 74 in file "../src/LED_B1.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;  led             1    wreg     unsigned char 
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;  led             1    4[BANK0 ] unsigned char 
 11807 ;; Return value:  Size  Location     Type
 11808 ;;		None               void
 11809 ;; Registers used:
 11810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;Total ram usage:        1 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:    6
 11823 ;; This function calls:
 11824 ;;		_LedPointSelect
 11825 ;;		_setLED
 11826 ;; This function is called by:
 11827 ;;		_LED_Initialization
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           
 11832                           ;psect for function _setLED_Initialization
 11833  1D3F                     _setLED_Initialization:	
 11834                           
 11835                           ;incstack = 0
 11836                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11837                           ;setLED_Initialization@led stored from wreg
 11838  1D3F  0020               	movlb	0	; select bank0
 11839  1D40  00A4               	movwf	setLED_Initialization@led
 11840                           
 11841                           ;LED_B1.c: 75: LedPointSelect(led);
 11842  1D41  0824               	movf	setLED_Initialization@led,w
 11843  1D42  319C  2433  319D   	fcall	_LedPointSelect
 11844                           
 11845                           ;LED_B1.c: 76: LED->Enable = 1;
 11846  1D45  0021               	movlb	1	; select bank1
 11847  1D46  0853               	movf	_LED^(0+128),w
 11848  1D47  0086               	movwf	6
 11849  1D48  3001               	movlw	1	; select bank2/3
 11850  1D49  0087               	movwf	7
 11851  1D4A  1401               	bsf	1,0
 11852                           
 11853                           ;LED_B1.c: 77: setLED(led, 0);
 11854  1D4B  0020               	movlb	0	; select bank0
 11855  1D4C  01A2               	clrf	setLED@command
 11856  1D4D  0824               	movf	setLED_Initialization@led,w
 11857  1D4E  3192  22F0         	fcall	_setLED
 11858  1D50  0008               	return
 11859  1D51                     __end_of_setLED_Initialization:	
 11860                           
 11861                           	psect	text76
 11862  124B                     __ptext76:	
 11863 ;; *************** function _Flash_Memory_Main *****************
 11864 ;; Defined at:
 11865 ;;		line 971 in file "../src/MCU_B1.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;		None
 11868 ;; Auto vars:     Size  Location     Type
 11869 ;;		None
 11870 ;; Return value:  Size  Location     Type
 11871 ;;		None               void
 11872 ;; Registers used:
 11873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11874 ;; Tracked objects:
 11875 ;;		On entry : 0/0
 11876 ;;		On exit  : 0/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;Total ram usage:        1 bytes
 11884 ;; Hardware stack levels used:    1
 11885 ;; Hardware stack levels required when called:    7
 11886 ;; This function calls:
 11887 ;;		_Flash_Memory_Modify
 11888 ;;		_getMain_All_LightsStatus
 11889 ;; This function is called by:
 11890 ;;		_main
 11891 ;; This function uses a non-reentrant model
 11892 ;;
 11893                           
 11894                           
 11895                           ;psect for function _Flash_Memory_Main
 11896  124B                     _Flash_Memory_Main:	
 11897                           
 11898                           ;MCU_B1.c: 972: if (Memory.Modify == 1) {
 11899                           
 11900                           ;incstack = 0
 11901                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11902  124B  0023               	movlb	3	; select bank3
 11903  124C  1C49               	btfss	(_Memory^(0+384)+36),0
 11904  124D  0008               	return
 11905                           
 11906                           ;MCU_B1.c: 973: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11907  124E  319B  23C2  3192   	fcall	_getMain_All_LightsStatus
 11908  1251  3A00               	xorlw	0
 11909  1252  3000               	movlw	0
 11910  1253  1903               	skipnz
 11911  1254  3001               	movlw	1
 11912  1255  0020               	movlb	0	; select bank0
 11913  1256  00A6               	movwf	??_Flash_Memory_Main
 11914  1257  0DA6               	rlf	??_Flash_Memory_Main,f
 11915  1258  0023               	movlb	3	; select bank3
 11916  1259  0849               	movf	(_Memory^(0+384)+36),w
 11917  125A  0020               	movlb	0	; select bank0
 11918  125B  0626               	xorwf	??_Flash_Memory_Main,w
 11919  125C  39FD               	andlw	-3
 11920  125D  0626               	xorwf	??_Flash_Memory_Main,w
 11921  125E  0023               	movlb	3	; select bank3
 11922  125F  00C9               	movwf	(_Memory^(0+384)+36)
 11923                           
 11924                           ;MCU_B1.c: 974: if (Memory.GO == 1) {
 11925  1260  1CC9               	btfss	(_Memory^(0+384)+36),1
 11926  1261  2A7B               	goto	l1223
 11927                           
 11928                           ;MCU_B1.c: 975: Memory.Runtime = 1;
 11929  1262  15C9               	bsf	(_Memory^(0+384)+36),3
 11930                           
 11931                           ;MCU_B1.c: 976: Memory.Time++;
 11932  1263  3001               	movlw	1
 11933  1264  07C7               	addwf	(_Memory^(0+384)+34),f
 11934  1265  3000               	movlw	0
 11935  1266  3DC8               	addwfc	((_Memory+1)^(0+384)+34),f
 11936                           
 11937                           ;MCU_B1.c: 977: if (Memory.Time == (200 / 20)) {
 11938  1267  3022               	movlw	34
 11939  1268  3EA5               	addlw	_Memory& (0+255)
 11940  1269  0086               	movwf	6
 11941  126A  3001               	movlw	1	; select bank3/4
 11942  126B  0087               	movwf	7
 11943  126C  3F40               	moviw [0]fsr1
 11944  126D  3A0A               	xorlw	10
 11945  126E  1D03               	skipz
 11946  126F  2A72               	goto	u7595
 11947  1270  3F41               	moviw [1]fsr1
 11948  1271  3A00               	xorlw	0
 11949  1272                     u7595:	
 11950  1272  1D03               	skipz
 11951  1273  0008               	return
 11952                           
 11953                           ;MCU_B1.c: 978: Memory.Time = 0;
 11954  1274  01C7               	clrf	(_Memory^(0+384)+34)
 11955  1275  01C8               	clrf	((_Memory+1)^(0+384)+34)
 11956                           
 11957                           ;MCU_B1.c: 979: Memory.Modify = 0;
 11958  1276  1049               	bcf	(_Memory^(0+384)+36),0
 11959                           
 11960                           ;MCU_B1.c: 980: Memory.GO = 0;
 11961  1277  10C9               	bcf	(_Memory^(0+384)+36),1
 11962                           
 11963                           ;MCU_B1.c: 981: Flash_Memory_Modify();
 11964  1278  3194  24C4         	fcall	_Flash_Memory_Modify
 11965                           
 11966                           ;MCU_B1.c: 982: }
 11967                           ;MCU_B1.c: 983: } else {
 11968  127A  0008               	return
 11969  127B                     l1223:	
 11970                           
 11971                           ;MCU_B1.c: 984: if (Memory.Runtime == 1) {
 11972  127B  1DC9               	btfss	(_Memory^(0+384)+36),3
 11973  127C  0008               	return
 11974                           
 11975                           ;MCU_B1.c: 985: Memory.Runtime = 0;
 11976  127D  11C9               	bcf	(_Memory^(0+384)+36),3
 11977                           
 11978                           ;MCU_B1.c: 986: Memory.Time = 0;
 11979  127E  01C7               	clrf	(_Memory^(0+384)+34)
 11980  127F  01C8               	clrf	((_Memory+1)^(0+384)+34)
 11981  1280  0008               	return
 11982  1281                     __end_of_Flash_Memory_Main:	
 11983                           
 11984                           	psect	text77
 11985  14C4                     __ptext77:	
 11986 ;; *************** function _Flash_Memory_Modify *****************
 11987 ;; Defined at:
 11988 ;;		line 1044 in file "../src/MCU_B1.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;		None
 11991 ;; Auto vars:     Size  Location     Type
 11992 ;;  i               1    5[BANK0 ] unsigned char 
 11993 ;; Return value:  Size  Location     Type
 11994 ;;		None               void
 11995 ;; Registers used:
 11996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11997 ;; Tracked objects:
 11998 ;;		On entry : 0/0
 11999 ;;		On exit  : 0/0
 12000 ;;		Unchanged: 0/0
 12001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;Total ram usage:        2 bytes
 12007 ;; Hardware stack levels used:    1
 12008 ;; Hardware stack levels required when called:    6
 12009 ;; This function calls:
 12010 ;;		_Flash_Memory_Erasing
 12011 ;;		_Flash_Memory_Read
 12012 ;;		_Flash_Memory_Write
 12013 ;;		_setMemory_Data
 12014 ;; This function is called by:
 12015 ;;		_Flash_Memory_Main
 12016 ;; This function uses a non-reentrant model
 12017 ;;
 12018                           
 12019                           
 12020                           ;psect for function _Flash_Memory_Modify
 12021  14C4                     _Flash_Memory_Modify:	
 12022                           
 12023                           ;MCU_B1.c: 1045: char i = 0;
 12024                           
 12025                           ;incstack = 0
 12026                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12027  14C4  0020               	movlb	0	; select bank0
 12028  14C5  01A5               	clrf	Flash_Memory_Modify@i
 12029                           
 12030                           ;MCU_B1.c: 1046: for (i = 0; i < 32; i++) {
 12031  14C6  01A5               	clrf	Flash_Memory_Modify@i
 12032  14C7  3020               	movlw	32
 12033  14C8  0225               	subwf	Flash_Memory_Modify@i,w
 12034  14C9  1803               	btfsc	3,0
 12035  14CA  2CE0               	goto	l7202
 12036  14CB                     l7196:	
 12037                           
 12038                           ;MCU_B1.c: 1047: Memory.Data[i] = Flash_Memory_Read(i);
 12039  14CB  0825               	movf	Flash_Memory_Modify@i,w
 12040  14CC  319E  26E3  3194   	fcall	_Flash_Memory_Read
 12041  14CF  0020               	movlb	0	; select bank0
 12042  14D0  00A4               	movwf	??_Flash_Memory_Modify
 12043  14D1  0825               	movf	Flash_Memory_Modify@i,w
 12044  14D2  3EA5               	addlw	_Memory& (0+255)
 12045  14D3  0086               	movwf	6
 12046  14D4  3001               	movlw	1	; select bank3/4
 12047  14D5  0087               	movwf	7
 12048  14D6  0824               	movf	??_Flash_Memory_Modify,w
 12049  14D7  0081               	movwf	1
 12050  14D8  3001               	movlw	1
 12051  14D9  00A4               	movwf	??_Flash_Memory_Modify
 12052  14DA  0824               	movf	??_Flash_Memory_Modify,w
 12053  14DB  07A5               	addwf	Flash_Memory_Modify@i,f
 12054  14DC  3020               	movlw	32
 12055  14DD  0225               	subwf	Flash_Memory_Modify@i,w
 12056  14DE  1C03               	skipc
 12057  14DF  2CCB               	goto	l7196
 12058  14E0                     l7202:	
 12059                           
 12060                           ;MCU_B1.c: 1048: }
 12061                           ;MCU_B1.c: 1049: setMemory_Data(0, product->Data[12]);
 12062  14E0  0021               	movlb	1	; select bank1
 12063  14E1  086E               	movf	_product^(0+128),w
 12064  14E2  0086               	movwf	6
 12065  14E3  3002               	movlw	2	; select bank4/5
 12066  14E4  0087               	movwf	7
 12067  14E5  3002               	movlw	2	; select bank4/5
 12068  14E6  3F4C               	moviw [12]fsr1
 12069  14E7  0020               	movlb	0	; select bank0
 12070  14E8  00A0               	movwf	setMemory_Data@data
 12071  14E9  3000               	movlw	0
 12072  14EA  319C  243F  3194   	fcall	_setMemory_Data
 12073                           
 12074                           ;MCU_B1.c: 1050: setMemory_Data(1, product->Data[13]);
 12075  14ED  0021               	movlb	1	; select bank1
 12076  14EE  086E               	movf	_product^(0+128),w
 12077  14EF  0086               	movwf	6
 12078  14F0  3002               	movlw	2	; select bank4/5
 12079  14F1  0087               	movwf	7
 12080  14F2  3002               	movlw	2	; select bank4/5
 12081  14F3  3F4D               	moviw [13]fsr1
 12082  14F4  0020               	movlb	0	; select bank0
 12083  14F5  00A0               	movwf	setMemory_Data@data
 12084  14F6  3001               	movlw	1
 12085  14F7  319C  243F  3194   	fcall	_setMemory_Data
 12086                           
 12087                           ;MCU_B1.c: 1051: setMemory_Data(2, product->Data[14]);
 12088  14FA  0021               	movlb	1	; select bank1
 12089  14FB  086E               	movf	_product^(0+128),w
 12090  14FC  0086               	movwf	6
 12091  14FD  3002               	movlw	2	; select bank4/5
 12092  14FE  0087               	movwf	7
 12093  14FF  3002               	movlw	2	; select bank4/5
 12094  1500  3F4E               	moviw [14]fsr1
 12095  1501  0020               	movlb	0	; select bank0
 12096  1502  00A0               	movwf	setMemory_Data@data
 12097  1503  3002               	movlw	2
 12098  1504  319C  243F  3194   	fcall	_setMemory_Data
 12099                           
 12100                           ;MCU_B1.c: 1057: if (Memory.LoopSave == 1) {
 12101  1507  0023               	movlb	3	; select bank3
 12102  1508  1D49               	btfss	(_Memory^(0+384)+36),2
 12103  1509  2D0E               	goto	l1246
 12104                           
 12105                           ;MCU_B1.c: 1058: Memory.LoopSave = 0;
 12106  150A  1149               	bcf	(_Memory^(0+384)+36),2
 12107                           
 12108                           ;MCU_B1.c: 1059: myMain.FirstOpen = 0;
 12109  150B  0021               	movlb	1	; select bank1
 12110  150C  11AE               	bcf	_myMain^(0+128),3
 12111                           
 12112                           ;MCU_B1.c: 1060: myMain.First = 0;
 12113  150D  12AE               	bcf	_myMain^(0+128),5
 12114  150E                     l1246:	
 12115                           
 12116                           ;MCU_B1.c: 1062: }
 12117                           ;MCU_B1.c: 1063: GIE = 0;
 12118  150E  138B               	bcf	11,7	;volatile
 12119                           
 12120                           ;MCU_B1.c: 1064: Flash_Memory_Erasing();
 12121  150F  319C  244B  3194   	fcall	_Flash_Memory_Erasing
 12122                           
 12123                           ;MCU_B1.c: 1065: Flash_Memory_Write();
 12124  1512  3191  2180         	fcall	_Flash_Memory_Write
 12125                           
 12126                           ;MCU_B1.c: 1066: GIE = 1;
 12127  1514  178B               	bsf	11,7	;volatile
 12128  1515  0008               	return
 12129  1516                     __end_of_Flash_Memory_Modify:	
 12130                           
 12131                           	psect	text78
 12132  1C4B                     __ptext78:	
 12133 ;; *************** function _Flash_Memory_Erasing *****************
 12134 ;; Defined at:
 12135 ;;		line 1033 in file "../src/MCU_B1.c"
 12136 ;; Parameters:    Size  Location     Type
 12137 ;;		None
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;		None
 12140 ;; Return value:  Size  Location     Type
 12141 ;;		None               void
 12142 ;; Registers used:
 12143 ;;		wreg, status,2, status,0, pclath, cstack
 12144 ;; Tracked objects:
 12145 ;;		On entry : 0/0
 12146 ;;		On exit  : 0/0
 12147 ;;		Unchanged: 0/0
 12148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;Total ram usage:        0 bytes
 12154 ;; Hardware stack levels used:    1
 12155 ;; Hardware stack levels required when called:    5
 12156 ;; This function calls:
 12157 ;;		_Flash_Memory_Unlock
 12158 ;; This function is called by:
 12159 ;;		_Flash_Memory_Modify
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           
 12164                           ;psect for function _Flash_Memory_Erasing
 12165  1C4B                     _Flash_Memory_Erasing:	
 12166                           
 12167                           ;MCU_B1.c: 1034: CFGS = 0;
 12168                           
 12169                           ;incstack = 0
 12170                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12171  1C4B  0023               	movlb	3	; select bank3
 12172  1C4C  1315               	bcf	21,6	;volatile
 12173                           
 12174                           ;MCU_B1.c: 1035: PMADRH = 0x30;
 12175  1C4D  3030               	movlw	48
 12176  1C4E  0092               	movwf	18	;volatile
 12177                           
 12178                           ;MCU_B1.c: 1036: PMADRL = 0x00;
 12179  1C4F  0191               	clrf	17	;volatile
 12180                           
 12181                           ;MCU_B1.c: 1037: FREE = 1;
 12182  1C50  1615               	bsf	21,4	;volatile
 12183                           
 12184                           ;MCU_B1.c: 1038: WREN = 1;
 12185  1C51  1515               	bsf	21,2	;volatile
 12186                           
 12187                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 12188  1C52  319B  23B9         	fcall	_Flash_Memory_Unlock
 12189                           
 12190                           ;MCU_B1.c: 1040: WREN = 0;
 12191  1C54  0023               	movlb	3	; select bank3
 12192  1C55  1115               	bcf	21,2	;volatile
 12193  1C56  0008               	return
 12194  1C57                     __end_of_Flash_Memory_Erasing:	
 12195                           
 12196                           	psect	text79
 12197  0478                     __ptext79:	
 12198 ;; *************** function _Flash_Memory_Initialization *****************
 12199 ;; Defined at:
 12200 ;;		line 930 in file "../src/MCU_B1.c"
 12201 ;; Parameters:    Size  Location     Type
 12202 ;;		None
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;  i               1   67[BANK0 ] unsigned char 
 12205 ;; Return value:  Size  Location     Type
 12206 ;;		None               void
 12207 ;; Registers used:
 12208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;Total ram usage:        2 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:    7
 12221 ;; This function calls:
 12222 ;;		_Flash_Memory_Read
 12223 ;;		_Flash_Memory_Write
 12224 ;;		_getDimmerLights_ValueToPercent
 12225 ;;		_setMemory_Data
 12226 ;; This function is called by:
 12227 ;;		_main
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           
 12232                           ;psect for function _Flash_Memory_Initialization
 12233  0478                     _Flash_Memory_Initialization:	
 12234                           
 12235                           ;MCU_B1.c: 931: char i = 0;
 12236                           
 12237                           ;incstack = 0
 12238                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12239  0478  0020               	movlb	0	; select bank0
 12240  0479  01E3               	clrf	Flash_Memory_Initialization@i
 12241                           
 12242                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12243  047A  301F               	movlw	31
 12244  047B  319E  26E3  3184   	fcall	_Flash_Memory_Read
 12245  047E  3AAA               	xorlw	170
 12246  047F  1D03               	skipz
 12247  0480  2CF6               	goto	l7594
 12248                           
 12249                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12250  0481  3000               	movlw	0
 12251  0482  319E  26E3  3184   	fcall	_Flash_Memory_Read
 12252  0485  0020               	movlb	0	; select bank0
 12253  0486  00E2               	movwf	??_Flash_Memory_Initialization
 12254  0487  0021               	movlb	1	; select bank1
 12255  0488  086E               	movf	_product^(0+128),w
 12256  0489  3E0C               	addlw	12
 12257  048A  0086               	movwf	6
 12258  048B  3002               	movlw	2	; select bank4/5
 12259  048C  0087               	movwf	7
 12260  048D  0020               	movlb	0	; select bank0
 12261  048E  0862               	movf	??_Flash_Memory_Initialization,w
 12262  048F  0081               	movwf	1
 12263                           
 12264                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12265  0490  3001               	movlw	1
 12266  0491  319E  26E3  3184   	fcall	_Flash_Memory_Read
 12267  0494  0020               	movlb	0	; select bank0
 12268  0495  00E2               	movwf	??_Flash_Memory_Initialization
 12269  0496  0021               	movlb	1	; select bank1
 12270  0497  086E               	movf	_product^(0+128),w
 12271  0498  3E0D               	addlw	13
 12272  0499  0086               	movwf	6
 12273  049A  3002               	movlw	2	; select bank4/5
 12274  049B  0087               	movwf	7
 12275  049C  0020               	movlb	0	; select bank0
 12276  049D  0862               	movf	??_Flash_Memory_Initialization,w
 12277  049E  0081               	movwf	1
 12278                           
 12279                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12280  049F  3002               	movlw	2
 12281  04A0  319E  26E3  3184   	fcall	_Flash_Memory_Read
 12282  04A3  0020               	movlb	0	; select bank0
 12283  04A4  00E2               	movwf	??_Flash_Memory_Initialization
 12284  04A5  0021               	movlb	1	; select bank1
 12285  04A6  086E               	movf	_product^(0+128),w
 12286  04A7  3E0E               	addlw	14
 12287  04A8  0086               	movwf	6
 12288  04A9  3002               	movlw	2	; select bank4/5
 12289  04AA  0087               	movwf	7
 12290  04AB  0020               	movlb	0	; select bank0
 12291  04AC  0862               	movf	??_Flash_Memory_Initialization,w
 12292  04AD  0081               	movwf	1
 12293                           
 12294                           ;MCU_B1.c: 941: i = getDimmerLights_ValueToPercent(((char)(70*0.6)));
 12295  04AE  302A               	movlw	42
 12296  04AF  3197  2736  3184   	fcall	_getDimmerLights_ValueToPercent
 12297  04B2  0020               	movlb	0	; select bank0
 12298  04B3  00E2               	movwf	??_Flash_Memory_Initialization
 12299  04B4  0862               	movf	??_Flash_Memory_Initialization,w
 12300  04B5  00E3               	movwf	Flash_Memory_Initialization@i
 12301                           
 12302                           ;MCU_B1.c: 942: product->Data[21] = i;
 12303  04B6  0863               	movf	Flash_Memory_Initialization@i,w
 12304  04B7  00E2               	movwf	??_Flash_Memory_Initialization
 12305  04B8  0021               	movlb	1	; select bank1
 12306  04B9  086E               	movf	_product^(0+128),w
 12307  04BA  3E15               	addlw	21
 12308  04BB  0086               	movwf	6
 12309  04BC  3002               	movlw	2	; select bank4/5
 12310  04BD  0087               	movwf	7
 12311  04BE  0020               	movlb	0	; select bank0
 12312  04BF  0862               	movf	??_Flash_Memory_Initialization,w
 12313  04C0  0081               	movwf	1
 12314                           
 12315                           ;MCU_B1.c: 943: product->Data[22] = i;
 12316  04C1  0863               	movf	Flash_Memory_Initialization@i,w
 12317  04C2  00E2               	movwf	??_Flash_Memory_Initialization
 12318  04C3  0021               	movlb	1	; select bank1
 12319  04C4  086E               	movf	_product^(0+128),w
 12320  04C5  3E16               	addlw	22
 12321  04C6  0086               	movwf	6
 12322  04C7  3002               	movlw	2	; select bank4/5
 12323  04C8  0087               	movwf	7
 12324  04C9  0020               	movlb	0	; select bank0
 12325  04CA  0862               	movf	??_Flash_Memory_Initialization,w
 12326  04CB  0081               	movwf	1
 12327                           
 12328                           ;MCU_B1.c: 944: product->Data[23] = i;
 12329  04CC  0863               	movf	Flash_Memory_Initialization@i,w
 12330  04CD  00E2               	movwf	??_Flash_Memory_Initialization
 12331  04CE  0021               	movlb	1	; select bank1
 12332  04CF  086E               	movf	_product^(0+128),w
 12333  04D0  3E17               	addlw	23
 12334  04D1  0086               	movwf	6
 12335  04D2  3002               	movlw	2	; select bank4/5
 12336  04D3  0087               	movwf	7
 12337  04D4  0020               	movlb	0	; select bank0
 12338  04D5  0862               	movf	??_Flash_Memory_Initialization,w
 12339  04D6  0081               	movwf	1
 12340                           
 12341                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12342  04D7  0021               	movlb	1	; select bank1
 12343  04D8  086E               	movf	_product^(0+128),w
 12344  04D9  3E0C               	addlw	12
 12345  04DA  0086               	movwf	6
 12346  04DB  3002               	movlw	2	; select bank4/5
 12347  04DC  0087               	movwf	7
 12348  04DD  0801               	movf	1,w
 12349  04DE  3AFF               	xorlw	255
 12350  04DF  1D03               	skipz
 12351  04E0  0008               	return
 12352  04E1  086E               	movf	_product^(0+128),w
 12353  04E2  3E0D               	addlw	13
 12354  04E3  0086               	movwf	6
 12355  04E4  3002               	movlw	2	; select bank4/5
 12356  04E5  0087               	movwf	7
 12357  04E6  0801               	movf	1,w
 12358  04E7  3AFF               	xorlw	255
 12359  04E8  1D03               	skipz
 12360  04E9  0008               	return
 12361  04EA  086E               	movf	_product^(0+128),w
 12362  04EB  3E0E               	addlw	14
 12363  04EC  0086               	movwf	6
 12364  04ED  3002               	movlw	2	; select bank4/5
 12365  04EE  0087               	movwf	7
 12366  04EF  0801               	movf	1,w
 12367  04F0  3AFF               	xorlw	255
 12368  04F1  1D03               	skipz
 12369  04F2  0008               	return
 12370                           
 12371                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12372  04F3  15AE               	bsf	_myMain^(0+128),3
 12373                           
 12374                           ;MCU_B1.c: 948: myMain.First = 1;
 12375  04F4  16AE               	bsf	_myMain^(0+128),5
 12376                           
 12377                           ;MCU_B1.c: 949: }
 12378                           ;MCU_B1.c: 950: } else {
 12379  04F5  0008               	return
 12380  04F6                     l7594:	
 12381                           
 12382                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(70*0.6)));
 12383  04F6  302A               	movlw	42
 12384  04F7  3197  2736  3184   	fcall	_getDimmerLights_ValueToPercent
 12385  04FA  0020               	movlb	0	; select bank0
 12386  04FB  00E2               	movwf	??_Flash_Memory_Initialization
 12387  04FC  0862               	movf	??_Flash_Memory_Initialization,w
 12388  04FD  00E3               	movwf	Flash_Memory_Initialization@i
 12389                           
 12390                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12391  04FE  30FF               	movlw	255
 12392  04FF  00E2               	movwf	??_Flash_Memory_Initialization
 12393  0500  0862               	movf	??_Flash_Memory_Initialization,w
 12394  0501  00A0               	movwf	setMemory_Data@data
 12395  0502  3000               	movlw	0
 12396  0503  319C  243F  3184   	fcall	_setMemory_Data
 12397                           
 12398                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12399  0506  30FF               	movlw	255
 12400  0507  0020               	movlb	0	; select bank0
 12401  0508  00E2               	movwf	??_Flash_Memory_Initialization
 12402  0509  0862               	movf	??_Flash_Memory_Initialization,w
 12403  050A  00A0               	movwf	setMemory_Data@data
 12404  050B  3001               	movlw	1
 12405  050C  319C  243F  3184   	fcall	_setMemory_Data
 12406                           
 12407                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12408  050F  30FF               	movlw	255
 12409  0510  0020               	movlb	0	; select bank0
 12410  0511  00E2               	movwf	??_Flash_Memory_Initialization
 12411  0512  0862               	movf	??_Flash_Memory_Initialization,w
 12412  0513  00A0               	movwf	setMemory_Data@data
 12413  0514  3002               	movlw	2
 12414  0515  319C  243F  3184   	fcall	_setMemory_Data
 12415                           
 12416                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12417  0518  30FF               	movlw	255
 12418  0519  0020               	movlb	0	; select bank0
 12419  051A  00E2               	movwf	??_Flash_Memory_Initialization
 12420  051B  0862               	movf	??_Flash_Memory_Initialization,w
 12421  051C  00A0               	movwf	setMemory_Data@data
 12422  051D  3003               	movlw	3
 12423  051E  319C  243F  3184   	fcall	_setMemory_Data
 12424                           
 12425                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12426  0521  30FF               	movlw	255
 12427  0522  0020               	movlb	0	; select bank0
 12428  0523  00E2               	movwf	??_Flash_Memory_Initialization
 12429  0524  0862               	movf	??_Flash_Memory_Initialization,w
 12430  0525  00A0               	movwf	setMemory_Data@data
 12431  0526  3004               	movlw	4
 12432  0527  319C  243F  3184   	fcall	_setMemory_Data
 12433                           
 12434                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12435  052A  30FF               	movlw	255
 12436  052B  0020               	movlb	0	; select bank0
 12437  052C  00E2               	movwf	??_Flash_Memory_Initialization
 12438  052D  0862               	movf	??_Flash_Memory_Initialization,w
 12439  052E  00A0               	movwf	setMemory_Data@data
 12440  052F  3005               	movlw	5
 12441  0530  319C  243F  3184   	fcall	_setMemory_Data
 12442                           
 12443                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12444  0533  30AA               	movlw	170
 12445  0534  0020               	movlb	0	; select bank0
 12446  0535  00E2               	movwf	??_Flash_Memory_Initialization
 12447  0536  0862               	movf	??_Flash_Memory_Initialization,w
 12448  0537  00A0               	movwf	setMemory_Data@data
 12449  0538  301F               	movlw	31
 12450  0539  319C  243F  3184   	fcall	_setMemory_Data
 12451                           
 12452                           ;MCU_B1.c: 959: product->Data[21] = i;
 12453  053C  0020               	movlb	0	; select bank0
 12454  053D  0863               	movf	Flash_Memory_Initialization@i,w
 12455  053E  00E2               	movwf	??_Flash_Memory_Initialization
 12456  053F  0021               	movlb	1	; select bank1
 12457  0540  086E               	movf	_product^(0+128),w
 12458  0541  3E15               	addlw	21
 12459  0542  0086               	movwf	6
 12460  0543  3002               	movlw	2	; select bank4/5
 12461  0544  0087               	movwf	7
 12462  0545  0020               	movlb	0	; select bank0
 12463  0546  0862               	movf	??_Flash_Memory_Initialization,w
 12464  0547  0081               	movwf	1
 12465                           
 12466                           ;MCU_B1.c: 960: product->Data[22] = i;
 12467  0548  0863               	movf	Flash_Memory_Initialization@i,w
 12468  0549  00E2               	movwf	??_Flash_Memory_Initialization
 12469  054A  0021               	movlb	1	; select bank1
 12470  054B  086E               	movf	_product^(0+128),w
 12471  054C  3E16               	addlw	22
 12472  054D  0086               	movwf	6
 12473  054E  3002               	movlw	2	; select bank4/5
 12474  054F  0087               	movwf	7
 12475  0550  0020               	movlb	0	; select bank0
 12476  0551  0862               	movf	??_Flash_Memory_Initialization,w
 12477  0552  0081               	movwf	1
 12478                           
 12479                           ;MCU_B1.c: 961: product->Data[23] = i;
 12480  0553  0863               	movf	Flash_Memory_Initialization@i,w
 12481  0554  00E2               	movwf	??_Flash_Memory_Initialization
 12482  0555  0021               	movlb	1	; select bank1
 12483  0556  086E               	movf	_product^(0+128),w
 12484  0557  3E17               	addlw	23
 12485  0558  0086               	movwf	6
 12486  0559  3002               	movlw	2	; select bank4/5
 12487  055A  0087               	movwf	7
 12488  055B  0020               	movlb	0	; select bank0
 12489  055C  0862               	movf	??_Flash_Memory_Initialization,w
 12490  055D  0081               	movwf	1
 12491                           
 12492                           ;MCU_B1.c: 962: GIE = 0;
 12493  055E  138B               	bcf	11,7	;volatile
 12494                           
 12495                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12496  055F  3191  2180         	fcall	_Flash_Memory_Write
 12497                           
 12498                           ;MCU_B1.c: 964: GIE = 1;
 12499  0561  178B               	bsf	11,7	;volatile
 12500                           
 12501                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12502  0562  0021               	movlb	1	; select bank1
 12503  0563  15AE               	bsf	_myMain^(0+128),3
 12504                           
 12505                           ;MCU_B1.c: 966: myMain.First = 1;
 12506  0564  16AE               	bsf	_myMain^(0+128),5
 12507  0565  0008               	return
 12508  0566                     __end_of_Flash_Memory_Initialization:	
 12509                           
 12510                           	psect	text80
 12511  1C3F                     __ptext80:	
 12512 ;; *************** function _setMemory_Data *****************
 12513 ;; Defined at:
 12514 ;;		line 1081 in file "../src/MCU_B1.c"
 12515 ;; Parameters:    Size  Location     Type
 12516 ;;  address         1    wreg     unsigned char 
 12517 ;;  data            1    0[BANK0 ] unsigned char 
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;  address         1    2[BANK0 ] unsigned char 
 12520 ;; Return value:  Size  Location     Type
 12521 ;;		None               void
 12522 ;; Registers used:
 12523 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12524 ;; Tracked objects:
 12525 ;;		On entry : 0/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12529 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12532 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;Total ram usage:        3 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; Hardware stack levels required when called:    4
 12536 ;; This function calls:
 12537 ;;		Nothing
 12538 ;; This function is called by:
 12539 ;;		_Flash_Memory_Initialization
 12540 ;;		_Flash_Memory_Modify
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           
 12545                           ;psect for function _setMemory_Data
 12546  1C3F                     _setMemory_Data:	
 12547                           
 12548                           ;incstack = 0
 12549                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12550                           ;setMemory_Data@address stored from wreg
 12551  1C3F  0020               	movlb	0	; select bank0
 12552  1C40  00A2               	movwf	setMemory_Data@address
 12553                           
 12554                           ;MCU_B1.c: 1082: Memory.Data[address] = data;
 12555  1C41  0820               	movf	setMemory_Data@data,w
 12556  1C42  00A1               	movwf	??_setMemory_Data
 12557  1C43  0822               	movf	setMemory_Data@address,w
 12558  1C44  3EA5               	addlw	_Memory& (0+255)
 12559  1C45  0086               	movwf	6
 12560  1C46  3001               	movlw	1	; select bank3/4
 12561  1C47  0087               	movwf	7
 12562  1C48  0821               	movf	??_setMemory_Data,w
 12563  1C49  0081               	movwf	1
 12564  1C4A  0008               	return
 12565  1C4B                     __end_of_setMemory_Data:	
 12566                           
 12567                           	psect	text81
 12568  1180                     __ptext81:	
 12569 ;; *************** function _Flash_Memory_Write *****************
 12570 ;; Defined at:
 12571 ;;		line 1014 in file "../src/MCU_B1.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;		None
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;  i               1    1[BANK0 ] unsigned char 
 12576 ;; Return value:  Size  Location     Type
 12577 ;;		None               void
 12578 ;; Registers used:
 12579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;Total ram usage:        2 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    5
 12592 ;; This function calls:
 12593 ;;		_Flash_Memory_Unlock
 12594 ;; This function is called by:
 12595 ;;		_Flash_Memory_Initialization
 12596 ;;		_Flash_Memory_Modify
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           
 12601                           ;psect for function _Flash_Memory_Write
 12602  1180                     _Flash_Memory_Write:	
 12603                           
 12604                           ;MCU_B1.c: 1015: char i = 0;
 12605                           
 12606                           ;incstack = 0
 12607                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12608  1180  0020               	movlb	0	; select bank0
 12609  1181  01A1               	clrf	Flash_Memory_Write@i
 12610                           
 12611                           ;MCU_B1.c: 1016: CFGS = 0;
 12612  1182  0023               	movlb	3	; select bank3
 12613  1183  1315               	bcf	21,6	;volatile
 12614                           
 12615                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 12616  1184  3030               	movlw	48
 12617  1185  0092               	movwf	18	;volatile
 12618                           
 12619                           ;MCU_B1.c: 1018: PMDATH = 0;
 12620  1186  0194               	clrf	20	;volatile
 12621                           
 12622                           ;MCU_B1.c: 1019: FREE = 0;
 12623  1187  1215               	bcf	21,4	;volatile
 12624                           
 12625                           ;MCU_B1.c: 1020: LWLO = 1;
 12626  1188  1695               	bsf	21,5	;volatile
 12627                           
 12628                           ;MCU_B1.c: 1021: WREN = 1;
 12629  1189  1515               	bsf	21,2	;volatile
 12630                           
 12631                           ;MCU_B1.c: 1022: for (i = 0; i < 32; i++) {
 12632  118A  0020               	movlb	0	; select bank0
 12633  118B  01A1               	clrf	Flash_Memory_Write@i
 12634  118C  3020               	movlw	32
 12635  118D  0221               	subwf	Flash_Memory_Write@i,w
 12636  118E  1803               	btfsc	3,0
 12637  118F  29A8               	goto	l1237
 12638  1190                     l6758:	
 12639                           
 12640                           ;MCU_B1.c: 1023: PMADRL = i;
 12641  1190  0821               	movf	Flash_Memory_Write@i,w
 12642  1191  0023               	movlb	3	; select bank3
 12643  1192  0091               	movwf	17	;volatile
 12644                           
 12645                           ;MCU_B1.c: 1024: PMDATL = Memory.Data[i];
 12646  1193  0020               	movlb	0	; select bank0
 12647  1194  0821               	movf	Flash_Memory_Write@i,w
 12648  1195  3EA5               	addlw	_Memory& (0+255)
 12649  1196  0086               	movwf	6
 12650  1197  3001               	movlw	1	; select bank3/4
 12651  1198  0087               	movwf	7
 12652  1199  0801               	movf	1,w
 12653  119A  0023               	movlb	3	; select bank3
 12654  119B  0093               	movwf	19	;volatile
 12655                           
 12656                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 12657  119C  319B  23B9  3191   	fcall	_Flash_Memory_Unlock
 12658  119F  3001               	movlw	1
 12659  11A0  0020               	movlb	0	; select bank0
 12660  11A1  00A0               	movwf	??_Flash_Memory_Write
 12661  11A2  0820               	movf	??_Flash_Memory_Write,w
 12662  11A3  07A1               	addwf	Flash_Memory_Write@i,f
 12663  11A4  3020               	movlw	32
 12664  11A5  0221               	subwf	Flash_Memory_Write@i,w
 12665  11A6  1C03               	skipc
 12666  11A7  2990               	goto	l6758
 12667  11A8                     l1237:	
 12668                           
 12669                           ;MCU_B1.c: 1026: }
 12670                           ;MCU_B1.c: 1027: LWLO = 0;
 12671  11A8  0023               	movlb	3	; select bank3
 12672  11A9  1295               	bcf	21,5	;volatile
 12673                           
 12674                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12675  11AA  319B  23B9         	fcall	_Flash_Memory_Unlock
 12676                           
 12677                           ;MCU_B1.c: 1029: WREN = 0;
 12678  11AC  0023               	movlb	3	; select bank3
 12679  11AD  1115               	bcf	21,2	;volatile
 12680  11AE  0008               	return
 12681  11AF                     __end_of_Flash_Memory_Write:	
 12682                           
 12683                           	psect	text82
 12684  1BB9                     __ptext82:	
 12685 ;; *************** function _Flash_Memory_Unlock *****************
 12686 ;; Defined at:
 12687 ;;		line 993 in file "../src/MCU_B1.c"
 12688 ;; Parameters:    Size  Location     Type
 12689 ;;		None
 12690 ;; Auto vars:     Size  Location     Type
 12691 ;;		None
 12692 ;; Return value:  Size  Location     Type
 12693 ;;		None               void
 12694 ;; Registers used:
 12695 ;;		wreg
 12696 ;; Tracked objects:
 12697 ;;		On entry : 0/0
 12698 ;;		On exit  : 0/0
 12699 ;;		Unchanged: 0/0
 12700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12705 ;;Total ram usage:        0 bytes
 12706 ;; Hardware stack levels used:    1
 12707 ;; Hardware stack levels required when called:    4
 12708 ;; This function calls:
 12709 ;;		Nothing
 12710 ;; This function is called by:
 12711 ;;		_Flash_Memory_Write
 12712 ;;		_Flash_Memory_Erasing
 12713 ;; This function uses a non-reentrant model
 12714 ;;
 12715                           
 12716                           
 12717                           ;psect for function _Flash_Memory_Unlock
 12718  1BB9                     _Flash_Memory_Unlock:	
 12719                           
 12720                           ;MCU_B1.c: 994: PMCON2 = 0x55;
 12721                           
 12722                           ;incstack = 0
 12723                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12724  1BB9  3055               	movlw	85
 12725  1BBA  0023               	movlb	3	; select bank3
 12726  1BBB  0096               	movwf	22	;volatile
 12727                           
 12728                           ;MCU_B1.c: 995: PMCON2 = 0xaa;
 12729  1BBC  30AA               	movlw	170
 12730  1BBD  0096               	movwf	22	;volatile
 12731                           
 12732                           ;MCU_B1.c: 996: WR = 1;
 12733  1BBE  1495               	bsf	21,1	;volatile
 12734                           
 12735                           ;MCU_B1.c: 997: __nop();
 12736  1BBF  0000               	nop
 12737                           
 12738                           ;MCU_B1.c: 998: __nop();
 12739  1BC0  0000               	nop
 12740  1BC1  0008               	return
 12741  1BC2                     __end_of_Flash_Memory_Unlock:	
 12742                           
 12743                           	psect	text83
 12744  1EE3                     __ptext83:	
 12745 ;; *************** function _Flash_Memory_Read *****************
 12746 ;; Defined at:
 12747 ;;		line 1002 in file "../src/MCU_B1.c"
 12748 ;; Parameters:    Size  Location     Type
 12749 ;;  address         1    wreg     unsigned char 
 12750 ;; Auto vars:     Size  Location     Type
 12751 ;;  address         1    2[BANK0 ] unsigned char 
 12752 ;;  ret             1    3[BANK0 ] unsigned char 
 12753 ;;  i               1    1[BANK0 ] unsigned char 
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  1    wreg      unsigned char 
 12756 ;; Registers used:
 12757 ;;		wreg, status,2
 12758 ;; Tracked objects:
 12759 ;;		On entry : 0/0
 12760 ;;		On exit  : 0/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;Total ram usage:        4 bytes
 12768 ;; Hardware stack levels used:    1
 12769 ;; Hardware stack levels required when called:    4
 12770 ;; This function calls:
 12771 ;;		Nothing
 12772 ;; This function is called by:
 12773 ;;		_Flash_Memory_Initialization
 12774 ;;		_Flash_Memory_Modify
 12775 ;; This function uses a non-reentrant model
 12776 ;;
 12777                           
 12778                           
 12779                           ;psect for function _Flash_Memory_Read
 12780  1EE3                     _Flash_Memory_Read:	
 12781                           
 12782                           ;incstack = 0
 12783                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12784                           ;Flash_Memory_Read@address stored from wreg
 12785  1EE3  0020               	movlb	0	; select bank0
 12786  1EE4  00A2               	movwf	Flash_Memory_Read@address
 12787                           
 12788                           ;MCU_B1.c: 1003: char i = 0, ret = 0;
 12789  1EE5  01A1               	clrf	Flash_Memory_Read@i
 12790  1EE6  01A3               	clrf	Flash_Memory_Read@ret
 12791                           
 12792                           ;MCU_B1.c: 1004: PMADRH = 0x30;
 12793  1EE7  3030               	movlw	48
 12794  1EE8  0023               	movlb	3	; select bank3
 12795  1EE9  0092               	movwf	18	;volatile
 12796                           
 12797                           ;MCU_B1.c: 1005: PMADRL = address;
 12798  1EEA  0020               	movlb	0	; select bank0
 12799  1EEB  0822               	movf	Flash_Memory_Read@address,w
 12800  1EEC  0023               	movlb	3	; select bank3
 12801  1EED  0091               	movwf	17	;volatile
 12802                           
 12803                           ;MCU_B1.c: 1006: CFGS = 0;
 12804  1EEE  1315               	bcf	21,6	;volatile
 12805                           
 12806                           ;MCU_B1.c: 1007: RD = 1;
 12807  1EEF  1415               	bsf	21,0	;volatile
 12808                           
 12809                           ;MCU_B1.c: 1008: i = PMDATH;
 12810  1EF0  0814               	movf	20,w	;volatile
 12811  1EF1  0020               	movlb	0	; select bank0
 12812  1EF2  00A0               	movwf	??_Flash_Memory_Read
 12813  1EF3  0820               	movf	??_Flash_Memory_Read,w
 12814  1EF4  00A1               	movwf	Flash_Memory_Read@i
 12815                           
 12816                           ;MCU_B1.c: 1009: ret = PMDATL;
 12817  1EF5  0023               	movlb	3	; select bank3
 12818  1EF6  0813               	movf	19,w	;volatile
 12819  1EF7  0020               	movlb	0	; select bank0
 12820  1EF8  00A0               	movwf	??_Flash_Memory_Read
 12821  1EF9  0820               	movf	??_Flash_Memory_Read,w
 12822  1EFA  00A3               	movwf	Flash_Memory_Read@ret
 12823                           
 12824                           ;MCU_B1.c: 1010: return ret;
 12825  1EFB  0823               	movf	Flash_Memory_Read@ret,w
 12826  1EFC  0008               	return
 12827  1EFD                     __end_of_Flash_Memory_Read:	
 12828                           
 12829                           	psect	text84
 12830  063B                     __ptext84:	
 12831 ;; *************** function _Exception_Main *****************
 12832 ;; Defined at:
 12833 ;;		line 499 in file "../src/Main_B1.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;		None
 12836 ;; Auto vars:     Size  Location     Type
 12837 ;;  i               2   18[BANK0 ] int 
 12838 ;;  i               2   16[BANK0 ] int 
 12839 ;;  error           1   21[BANK0 ] unsigned char 
 12840 ;;  lights          1   20[BANK0 ] unsigned char 
 12841 ;;  count           1   15[BANK0 ] unsigned char 
 12842 ;;  status          1   14[BANK0 ] unsigned char 
 12843 ;; Return value:  Size  Location     Type
 12844 ;;		None               void
 12845 ;; Registers used:
 12846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12847 ;; Tracked objects:
 12848 ;;		On entry : 0/0
 12849 ;;		On exit  : 0/0
 12850 ;;		Unchanged: 0/0
 12851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12853 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12855 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12856 ;;Total ram usage:        9 bytes
 12857 ;; Hardware stack levels used:    1
 12858 ;; Hardware stack levels required when called:    6
 12859 ;; This function calls:
 12860 ;;		_getDimmerLights_Line
 12861 ;;		_getDimmerLights_Status
 12862 ;;		_getMain_All_Error_Status
 12863 ;;		_getMain_All_LightsStatus
 12864 ;;		_setBuz
 12865 ;;		_setDimmerLights_SwOff
 12866 ;;		_setLED
 12867 ;; This function is called by:
 12868 ;;		_main
 12869 ;; This function uses a non-reentrant model
 12870 ;;
 12871                           
 12872                           
 12873                           ;psect for function _Exception_Main
 12874  063B                     _Exception_Main:	
 12875                           
 12876                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12877                           
 12878                           ;incstack = 0
 12879                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12880  063B  3000               	movlw	0
 12881  063C  3191  21AF  3186   	fcall	_getMain_All_Error_Status
 12882  063F  0020               	movlb	0	; select bank0
 12883  0640  00AD               	movwf	??_Exception_Main
 12884  0641  082D               	movf	??_Exception_Main,w
 12885  0642  00B5               	movwf	Exception_Main@error
 12886                           
 12887                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12888  0643  01B4               	clrf	Exception_Main@lights
 12889  0644  01AF               	clrf	Exception_Main@count
 12890  0645  0AAF               	incf	Exception_Main@count,f
 12891                           
 12892                           ;Main_B1.c: 502: char status = 0;
 12893  0646  01AE               	clrf	Exception_Main@status
 12894                           
 12895                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12896  0647  0021               	movlb	1	; select bank1
 12897  0648  1DB8               	btfss	(_myMain^(0+128)+10),3
 12898  0649  2E59               	goto	l7936
 12899                           
 12900                           ;Main_B1.c: 505: if (error == 0) {
 12901  064A  0020               	movlb	0	; select bank0
 12902  064B  08B5               	movf	Exception_Main@error,f
 12903  064C  1D03               	skipz
 12904  064D  0008               	return
 12905                           
 12906                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12907  064E  0021               	movlb	1	; select bank1
 12908  064F  11B8               	bcf	(_myMain^(0+128)+10),3
 12909                           
 12910                           ;Main_B1.c: 511: setLED(error, 110);
 12911  0650  306E               	movlw	110
 12912  0651  0020               	movlb	0	; select bank0
 12913  0652  00AD               	movwf	??_Exception_Main
 12914  0653  082D               	movf	??_Exception_Main,w
 12915  0654  00A2               	movwf	setLED@command
 12916  0655  0835               	movf	Exception_Main@error,w
 12917  0656  3192  22F0         	fcall	_setLED
 12918                           
 12919                           ;Main_B1.c: 522: }
 12920                           ;Main_B1.c: 523: } else {
 12921  0658  0008               	return
 12922  0659                     l7936:	
 12923                           
 12924                           ;Main_B1.c: 524: if (error != 0) {
 12925  0659  0020               	movlb	0	; select bank0
 12926  065A  0835               	movf	Exception_Main@error,w
 12927  065B  1903               	btfsc	3,2
 12928  065C  0008               	return
 12929                           
 12930                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12931  065D  0021               	movlb	1	; select bank1
 12932  065E  15B8               	bsf	(_myMain^(0+128)+10),3
 12933                           
 12934                           ;Main_B1.c: 529: setLED(error, 111);
 12935  065F  306F               	movlw	111
 12936  0660  0020               	movlb	0	; select bank0
 12937  0661  00AD               	movwf	??_Exception_Main
 12938  0662  082D               	movf	??_Exception_Main,w
 12939  0663  00A2               	movwf	setLED@command
 12940  0664  0835               	movf	Exception_Main@error,w
 12941  0665  3192  22F0  3186   	fcall	_setLED
 12942                           
 12943                           ;Main_B1.c: 538: switch (error) {
 12944  0668  2F05               	goto	l7984
 12945  0669                     l7942:	
 12946                           ;Main_B1.c: 539: case 2:
 12947                           
 12948                           
 12949                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 12950  0669  319B  23C2  3186   	fcall	_getMain_All_LightsStatus
 12951  066C  3A01               	xorlw	1
 12952  066D  1D03               	skipz
 12953  066E  2E78               	goto	l7946
 12954                           
 12955                           ;Main_B1.c: 547: setBuz(10, 300);
 12956  066F  302C               	movlw	44
 12957  0670  0020               	movlb	0	; select bank0
 12958  0671  00A9               	movwf	setBuz@time
 12959  0672  3001               	movlw	1
 12960  0673  00AA               	movwf	setBuz@time+1
 12961  0674  300A               	movlw	10
 12962  0675  3195  25BD  3186   	fcall	_setBuz
 12963  0678                     l7946:	
 12964                           
 12965                           ;Main_B1.c: 548: }
 12966                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 12967  0678  0020               	movlb	0	; select bank0
 12968  0679  01B0               	clrf	Exception_Main@i
 12969  067A  01B1               	clrf	Exception_Main@i+1
 12970  067B                     l7956:	
 12971  067B  0831               	movf	Exception_Main@i+1,w
 12972  067C  3A80               	xorlw	128
 12973  067D  00AD               	movwf	??_Exception_Main
 12974  067E  3080               	movlw	128
 12975  067F  022D               	subwf	??_Exception_Main,w
 12976  0680  1D03               	skipz
 12977  0681  2E84               	goto	u8175
 12978  0682  082F               	movf	Exception_Main@count,w
 12979  0683  0230               	subwf	Exception_Main@i,w
 12980  0684                     u8175:	
 12981  0684  1803               	btfsc	3,0
 12982  0685  2EA6               	goto	u8170
 12983                           
 12984                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 12985  0686  0020               	movlb	0	; select bank0
 12986  0687  0830               	movf	Exception_Main@i,w
 12987  0688  3E01               	addlw	1
 12988  0689  319C  24B5  3186   	fcall	_getDimmerLights_Status
 12989  068C  3A01               	xorlw	1
 12990  068D  1D03               	skipz
 12991  068E  2EA0               	goto	l7954
 12992                           
 12993                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 12994  068F  0021               	movlb	1	; select bank1
 12995  0690  0852               	movf	_DimmerLights^(0+128),w
 12996  0691  0086               	movwf	6
 12997  0692  3001               	movlw	1	; select bank2/3
 12998  0693  0087               	movwf	7
 12999  0694  1401               	bsf	1,0
 13000                           
 13001                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13002  0695  0A52               	incf	_DimmerLights^(0+128),w
 13003  0696  0086               	movwf	6
 13004  0697  3001               	movlw	1	; select bank2/3
 13005  0698  0087               	movwf	7
 13006  0699  1001               	bcf	1,0
 13007                           
 13008                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13009  069A  0020               	movlb	0	; select bank0
 13010  069B  0830               	movf	Exception_Main@i,w
 13011  069C  3E01               	addlw	1
 13012  069D  3192  22B7  3186   	fcall	_setDimmerLights_SwOff
 13013  06A0                     l7954:	
 13014  06A0  3001               	movlw	1
 13015  06A1  0020               	movlb	0	; select bank0
 13016  06A2  07B0               	addwf	Exception_Main@i,f
 13017  06A3  3000               	movlw	0
 13018  06A4  3DB1               	addwfc	Exception_Main@i+1,f
 13019  06A5  2E7B               	goto	l7956
 13020  06A6                     u8170:	
 13021  06A6  0020               	movlb	0	; select bank0
 13022  06A7  0008               	return
 13023  06A8                     l7958:	
 13024                           ;Main_B1.c: 561: case 3:
 13025                           
 13026                           ;Main_B1.c: 556: }
 13027                           ;Main_B1.c: 557: }
 13028                           ;Main_B1.c: 560: break;
 13029                           
 13030                           
 13031                           ;Main_B1.c: 563: setBuz(5, 300);
 13032  06A8  302C               	movlw	44
 13033  06A9  0020               	movlb	0	; select bank0
 13034  06AA  00A9               	movwf	setBuz@time
 13035  06AB  3001               	movlw	1
 13036  06AC  00AA               	movwf	setBuz@time+1
 13037  06AD  3005               	movlw	5
 13038  06AE  3195  25BD  3186   	fcall	_setBuz
 13039                           
 13040                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13041  06B1  319B  23D6  3186   	fcall	_getDimmerLights_Line
 13042  06B4  0020               	movlb	0	; select bank0
 13043  06B5  00AD               	movwf	??_Exception_Main
 13044  06B6  082D               	movf	??_Exception_Main,w
 13045  06B7  00B4               	movwf	Exception_Main@lights
 13046                           
 13047                           ;Main_B1.c: 565: if (lights == 0) {
 13048  06B8  08B4               	movf	Exception_Main@lights,f
 13049  06B9  1D03               	skipz
 13050  06BA  2EEA               	goto	l7976
 13051                           
 13052                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13053  06BB  01B2               	clrf	Exception_Main@i_3412
 13054  06BC  01B3               	clrf	Exception_Main@i_3412+1
 13055  06BD                     l7974:	
 13056  06BD  0833               	movf	Exception_Main@i_3412+1,w
 13057  06BE  3A80               	xorlw	128
 13058  06BF  00AD               	movwf	??_Exception_Main
 13059  06C0  3080               	movlw	128
 13060  06C1  022D               	subwf	??_Exception_Main,w
 13061  06C2  1D03               	skipz
 13062  06C3  2EC6               	goto	u8205
 13063  06C4  082F               	movf	Exception_Main@count,w
 13064  06C5  0232               	subwf	Exception_Main@i_3412,w
 13065  06C6                     u8205:	
 13066  06C6  1803               	btfsc	3,0
 13067  06C7  2EE8               	goto	u8200
 13068                           
 13069                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13070  06C8  0020               	movlb	0	; select bank0
 13071  06C9  0832               	movf	Exception_Main@i_3412,w
 13072  06CA  3E01               	addlw	1
 13073  06CB  319C  24B5  3186   	fcall	_getDimmerLights_Status
 13074  06CE  3A01               	xorlw	1
 13075  06CF  1D03               	skipz
 13076  06D0  2EE2               	goto	l7972
 13077                           
 13078                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13079  06D1  0021               	movlb	1	; select bank1
 13080  06D2  0852               	movf	_DimmerLights^(0+128),w
 13081  06D3  0086               	movwf	6
 13082  06D4  3001               	movlw	1	; select bank2/3
 13083  06D5  0087               	movwf	7
 13084  06D6  1401               	bsf	1,0
 13085                           
 13086                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13087  06D7  0A52               	incf	_DimmerLights^(0+128),w
 13088  06D8  0086               	movwf	6
 13089  06D9  3001               	movlw	1	; select bank2/3
 13090  06DA  0087               	movwf	7
 13091  06DB  1001               	bcf	1,0
 13092                           
 13093                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13094  06DC  0020               	movlb	0	; select bank0
 13095  06DD  0832               	movf	Exception_Main@i_3412,w
 13096  06DE  3E01               	addlw	1
 13097  06DF  3192  22B7  3186   	fcall	_setDimmerLights_SwOff
 13098  06E2                     l7972:	
 13099  06E2  3001               	movlw	1
 13100  06E3  0020               	movlb	0	; select bank0
 13101  06E4  07B2               	addwf	Exception_Main@i_3412,f
 13102  06E5  3000               	movlw	0
 13103  06E6  3DB3               	addwfc	Exception_Main@i_3412+1,f
 13104  06E7  2EBD               	goto	l7974
 13105  06E8                     u8200:	
 13106  06E8  0020               	movlb	0	; select bank0
 13107  06E9  0008               	return
 13108  06EA                     l7976:	
 13109                           ;Main_B1.c: 573: }
 13110                           ;Main_B1.c: 574: }
 13111                           ;Main_B1.c: 575: } else {
 13112                           
 13113                           
 13114                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13115  06EA  0020               	movlb	0	; select bank0
 13116  06EB  0834               	movf	Exception_Main@lights,w
 13117  06EC  319C  24B5  3186   	fcall	_getDimmerLights_Status
 13118  06EF  3A01               	xorlw	1
 13119  06F0  1903               	btfsc	3,2
 13120  06F1  2EF4               	goto	l7978
 13121  06F2  0020               	movlb	0	; select bank0
 13122  06F3  0008               	return
 13123  06F4                     l7978:	
 13124                           
 13125                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13126  06F4  0021               	movlb	1	; select bank1
 13127  06F5  0852               	movf	_DimmerLights^(0+128),w
 13128  06F6  0086               	movwf	6
 13129  06F7  3001               	movlw	1	; select bank2/3
 13130  06F8  0087               	movwf	7
 13131  06F9  1401               	bsf	1,0
 13132                           
 13133                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13134  06FA  0A52               	incf	_DimmerLights^(0+128),w
 13135  06FB  0086               	movwf	6
 13136  06FC  3001               	movlw	1	; select bank2/3
 13137  06FD  0087               	movwf	7
 13138  06FE  1001               	bcf	1,0
 13139                           
 13140                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13141  06FF  0020               	movlb	0	; select bank0
 13142  0700  0834               	movf	Exception_Main@lights,w
 13143  0701  3192  22B7         	fcall	_setDimmerLights_SwOff
 13144  0703  0020               	movlb	0	; select bank0
 13145  0704  0008               	return
 13146  0705                     l7984:	
 13147                           ;Main_B1.c: 586: }
 13148                           
 13149                           ;Main_B1.c: 582: }
 13150                           ;Main_B1.c: 583: }
 13151                           ;Main_B1.c: 585: break;
 13152                           
 13153  0705  0020               	movlb	0	; select bank0
 13154  0706  0835               	movf	Exception_Main@error,w
 13155                           
 13156                           ; Switch size 1, requested type "space"
 13157                           ; Number of cases is 2, Range of values is 2 to 3
 13158                           ; switch strategies available:
 13159                           ; Name         Instructions Cycles
 13160                           ; simple_byte            7     4 (average)
 13161                           ; direct_byte           13     9 (fixed)
 13162                           ; jumptable            263     9 (fixed)
 13163                           ;	Chosen strategy is simple_byte
 13164  0707  3A02               	xorlw	2	; case 2
 13165  0708  1903               	skipnz
 13166  0709  2E69               	goto	l7942
 13167  070A  3A01               	xorlw	1	; case 3
 13168  070B  1903               	skipnz
 13169  070C  2EA8               	goto	l7958
 13170  070D  2F0F               	goto	l1478
 13171  070E  0008               	return
 13172  070F                     l1478:	
 13173  070F  0008               	return
 13174  0710                     __end_of_Exception_Main:	
 13175                           
 13176                           	psect	text85
 13177  1BD6                     __ptext85:	
 13178 ;; *************** function _getDimmerLights_Line *****************
 13179 ;; Defined at:
 13180 ;;		line 978 in file "../src/Dimmer_B1.c"
 13181 ;; Parameters:    Size  Location     Type
 13182 ;;		None
 13183 ;; Auto vars:     Size  Location     Type
 13184 ;;  line            1    0[BANK0 ] unsigned char 
 13185 ;; Return value:  Size  Location     Type
 13186 ;;                  1    wreg      unsigned char 
 13187 ;; Registers used:
 13188 ;;		wreg, status,2
 13189 ;; Tracked objects:
 13190 ;;		On entry : 0/0
 13191 ;;		On exit  : 0/0
 13192 ;;		Unchanged: 0/0
 13193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;Total ram usage:        1 bytes
 13199 ;; Hardware stack levels used:    1
 13200 ;; Hardware stack levels required when called:    4
 13201 ;; This function calls:
 13202 ;;		Nothing
 13203 ;; This function is called by:
 13204 ;;		_Exception_Main
 13205 ;; This function uses a non-reentrant model
 13206 ;;
 13207                           
 13208                           
 13209                           ;psect for function _getDimmerLights_Line
 13210  1BD6                     _getDimmerLights_Line:	
 13211                           
 13212                           ;Dimmer_B1.c: 979: char line = 0;
 13213                           
 13214                           ;incstack = 0
 13215                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13216  1BD6  0020               	movlb	0	; select bank0
 13217  1BD7  01A0               	clrf	getDimmerLights_Line@line
 13218                           
 13219                           ;Dimmer_B1.c: 981: if (DimmerLights1.Line == 1) {
 13220  1BD8  0023               	movlb	3	; select bank3
 13221  1BD9  1CD4               	btfss	(_DimmerLights1^(0+384)+1),1
 13222  1BDA  2BDE               	goto	l7024
 13223                           
 13224                           ;Dimmer_B1.c: 982: line = 1;
 13225  1BDB  0020               	movlb	0	; select bank0
 13226  1BDC  01A0               	clrf	getDimmerLights_Line@line
 13227  1BDD  0AA0               	incf	getDimmerLights_Line@line,f
 13228  1BDE                     l7024:	
 13229                           
 13230                           ;Dimmer_B1.c: 983: }
 13231                           ;Dimmer_B1.c: 995: return line;
 13232  1BDE  0020               	movlb	0	; select bank0
 13233  1BDF  0820               	movf	getDimmerLights_Line@line,w
 13234  1BE0  0008               	return
 13235  1BE1                     __end_of_getDimmerLights_Line:	
 13236                           
 13237                           	psect	text86
 13238  1F4C                     __ptext86:	
 13239 ;; *************** function _DimmerLights_Main *****************
 13240 ;; Defined at:
 13241 ;;		line 736 in file "../src/Dimmer_B1.c"
 13242 ;; Parameters:    Size  Location     Type
 13243 ;;		None
 13244 ;; Auto vars:     Size  Location     Type
 13245 ;;		None
 13246 ;; Return value:  Size  Location     Type
 13247 ;;		None               void
 13248 ;; Registers used:
 13249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;Total ram usage:        0 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    9
 13262 ;; This function calls:
 13263 ;;		_getLoad_OK
 13264 ;;		_getMain_All_Error_Status
 13265 ;;		_getMain_All_LightsStatus
 13266 ;;		_setDimmerLights_Main
 13267 ;; This function is called by:
 13268 ;;		_main
 13269 ;; This function uses a non-reentrant model
 13270 ;;
 13271                           
 13272                           
 13273                           ;psect for function _DimmerLights_Main
 13274  1F4C                     _DimmerLights_Main:	
 13275                           
 13276                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13277                           
 13278                           ;incstack = 0
 13279                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13280  1F4C  0023               	movlb	3	; select bank3
 13281  1F4D  1CA0               	btfss	_Dimmer^(0+384),1
 13282  1F4E  2F64               	goto	l7546
 13283                           
 13284                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13285  1F4F  319B  238F  319F   	fcall	_getLoad_OK
 13286  1F52  3A01               	xorlw	1
 13287  1F53  1903               	skipnz
 13288  1F54  2F62               	goto	l752
 13289  1F55  3000               	movlw	0
 13290  1F56  3191  21AF  319F   	fcall	_getMain_All_Error_Status
 13291  1F59  3800               	iorlw	0
 13292  1F5A  1D03               	skipz
 13293  1F5B  2F62               	goto	l752
 13294  1F5C  319B  23C2  319F   	fcall	_getMain_All_LightsStatus
 13295  1F5F  3800               	iorlw	0
 13296  1F60  1D03               	skipz
 13297  1F61  2F64               	goto	l7546
 13298  1F62                     l752:	
 13299                           
 13300                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13301  1F62  0023               	movlb	3	; select bank3
 13302  1F63  10A0               	bcf	_Dimmer^(0+384),1
 13303  1F64                     l7546:	
 13304                           
 13305                           ;Dimmer_B1.c: 742: }
 13306                           ;Dimmer_B1.c: 743: }
 13307                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13308  1F64  3001               	movlw	1
 13309  1F65  3188  209D         	fcall	_setDimmerLights_Main
 13310  1F67  0008               	return
 13311  1F68                     __end_of_DimmerLights_Main:	
 13312                           
 13313                           	psect	text87
 13314  089D                     __ptext87:	
 13315 ;; *************** function _setDimmerLights_Main *****************
 13316 ;; Defined at:
 13317 ;;		line 765 in file "../src/Dimmer_B1.c"
 13318 ;; Parameters:    Size  Location     Type
 13319 ;;  lights          1    wreg     unsigned char 
 13320 ;; Auto vars:     Size  Location     Type
 13321 ;;  lights          1    1[BANK1 ] unsigned char 
 13322 ;; Return value:  Size  Location     Type
 13323 ;;		None               void
 13324 ;; Registers used:
 13325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13326 ;; Tracked objects:
 13327 ;;		On entry : 0/0
 13328 ;;		On exit  : 0/0
 13329 ;;		Unchanged: 0/0
 13330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13334 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;Total ram usage:        1 bytes
 13336 ;; Hardware stack levels used:    1
 13337 ;; Hardware stack levels required when called:    8
 13338 ;; This function calls:
 13339 ;;		_DimmerLights_SelectPointer
 13340 ;;		_getDimmerLights_Allow_Condition
 13341 ;;		_getMain_All_LightsStatus
 13342 ;;		_setDimmerLights_Dimming
 13343 ;;		_setDimmerLights_OnOff
 13344 ;; This function is called by:
 13345 ;;		_DimmerLights_Main
 13346 ;; This function uses a non-reentrant model
 13347 ;;
 13348                           
 13349                           
 13350                           ;psect for function _setDimmerLights_Main
 13351  089D                     _setDimmerLights_Main:	
 13352                           
 13353                           ;incstack = 0
 13354                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13355                           ;setDimmerLights_Main@lights stored from wreg
 13356  089D  0021               	movlb	1	; select bank1
 13357  089E  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13358                           
 13359                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13360  089F  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13361  08A0  319C  2403  3188   	fcall	_DimmerLights_SelectPointer
 13362                           
 13363                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13364  08A3  0021               	movlb	1	; select bank1
 13365  08A4  0852               	movf	_DimmerLights^(0+128),w
 13366  08A5  0086               	movwf	6
 13367  08A6  3001               	movlw	1	; select bank2/3
 13368  08A7  0087               	movwf	7
 13369  08A8  1C81               	btfss	1,1
 13370  08A9  28CC               	goto	l7002
 13371                           
 13372                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13373  08AA  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13374  08AB  319E  263C  3188   	fcall	_getDimmerLights_Allow_Condition
 13375  08AE  3800               	iorlw	0
 13376  08AF  1D03               	skipz
 13377  08B0  0008               	return
 13378                           
 13379                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13380  08B1  0021               	movlb	1	; select bank1
 13381  08B2  0852               	movf	_DimmerLights^(0+128),w
 13382  08B3  0086               	movwf	6
 13383  08B4  3001               	movlw	1	; select bank2/3
 13384  08B5  0087               	movwf	7
 13385  08B6  1081               	bcf	1,1
 13386                           
 13387                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13388  08B7  0852               	movf	_DimmerLights^(0+128),w
 13389  08B8  0086               	movwf	6
 13390  08B9  3001               	movlw	1	; select bank2/3
 13391  08BA  0087               	movwf	7
 13392  08BB  1D01               	btfss	1,2
 13393  08BC  28C5               	goto	l7000
 13394                           
 13395                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13396  08BD  0020               	movlb	0	; select bank0
 13397  08BE  01ED               	clrf	setDimmerLights_OnOff@command
 13398  08BF  0AED               	incf	setDimmerLights_OnOff@command,f
 13399  08C0  0021               	movlb	1	; select bank1
 13400  08C1  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13401  08C2  3187  2710         	fcall	_setDimmerLights_OnOff
 13402                           
 13403                           ;Dimmer_B1.c: 773: } else {
 13404  08C4  0008               	return
 13405  08C5                     l7000:	
 13406                           
 13407                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13408  08C5  0020               	movlb	0	; select bank0
 13409  08C6  01ED               	clrf	setDimmerLights_OnOff@command
 13410  08C7  0021               	movlb	1	; select bank1
 13411  08C8  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13412  08C9  3187  2710         	fcall	_setDimmerLights_OnOff
 13413                           
 13414                           ;Dimmer_B1.c: 775: }
 13415                           ;Dimmer_B1.c: 776: }
 13416                           ;Dimmer_B1.c: 777: } else {
 13417  08CB  0008               	return
 13418  08CC                     l7002:	
 13419                           
 13420                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13421  08CC  319B  23C2  3188   	fcall	_getMain_All_LightsStatus
 13422  08CF  3A01               	xorlw	1
 13423  08D0  1D03               	skipz
 13424  08D1  28FB               	goto	l7014
 13425                           
 13426                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13427  08D2  0021               	movlb	1	; select bank1
 13428  08D3  0852               	movf	_DimmerLights^(0+128),w
 13429  08D4  0086               	movwf	6
 13430  08D5  3001               	movlw	1	; select bank2/3
 13431  08D6  0087               	movwf	7
 13432  08D7  1E01               	btfss	1,4
 13433  08D8  0008               	return
 13434                           
 13435                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13436  08D9  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13437  08DA  319E  263C  3188   	fcall	_getDimmerLights_Allow_Condition
 13438  08DD  3800               	iorlw	0
 13439  08DE  1D03               	skipz
 13440  08DF  0008               	return
 13441                           
 13442                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13443  08E0  0021               	movlb	1	; select bank1
 13444  08E1  0852               	movf	_DimmerLights^(0+128),w
 13445  08E2  0086               	movwf	6
 13446  08E3  3001               	movlw	1	; select bank2/3
 13447  08E4  0087               	movwf	7
 13448  08E5  1201               	bcf	1,4
 13449                           
 13450                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13451  08E6  0852               	movf	_DimmerLights^(0+128),w
 13452  08E7  0086               	movwf	6
 13453  08E8  3001               	movlw	1	; select bank2/3
 13454  08E9  0087               	movwf	7
 13455  08EA  1E81               	btfss	1,5
 13456  08EB  28F4               	goto	l7012
 13457                           
 13458                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13459  08EC  0020               	movlb	0	; select bank0
 13460  08ED  01EA               	clrf	setDimmerLights_Dimming@status
 13461  08EE  0AEA               	incf	setDimmerLights_Dimming@status,f
 13462  08EF  0021               	movlb	1	; select bank1
 13463  08F0  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13464  08F1  3194  2473         	fcall	_setDimmerLights_Dimming
 13465                           
 13466                           ;Dimmer_B1.c: 784: } else {
 13467  08F3  0008               	return
 13468  08F4                     l7012:	
 13469                           
 13470                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13471  08F4  0020               	movlb	0	; select bank0
 13472  08F5  01EA               	clrf	setDimmerLights_Dimming@status
 13473  08F6  0021               	movlb	1	; select bank1
 13474  08F7  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13475  08F8  3194  2473         	fcall	_setDimmerLights_Dimming
 13476                           
 13477                           ;Dimmer_B1.c: 786: }
 13478                           ;Dimmer_B1.c: 787: }
 13479                           ;Dimmer_B1.c: 788: }
 13480                           ;Dimmer_B1.c: 789: } else {
 13481  08FA  0008               	return
 13482  08FB                     l7014:	
 13483                           
 13484                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13485  08FB  0021               	movlb	1	; select bank1
 13486  08FC  0852               	movf	_DimmerLights^(0+128),w
 13487  08FD  0086               	movwf	6
 13488  08FE  3001               	movlw	1	; select bank2/3
 13489  08FF  0087               	movwf	7
 13490  0900  1E01               	btfss	1,4
 13491  0901  0008               	return
 13492                           
 13493                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13494  0902  0852               	movf	_DimmerLights^(0+128),w
 13495  0903  0086               	movwf	6
 13496  0904  3001               	movlw	1	; select bank2/3
 13497  0905  0087               	movwf	7
 13498  0906  1201               	bcf	1,4
 13499  0907  0008               	return
 13500  0908                     __end_of_setDimmerLights_Main:	
 13501                           
 13502                           	psect	text88
 13503  0710                     __ptext88:	
 13504 ;; *************** function _setDimmerLights_OnOff *****************
 13505 ;; Defined at:
 13506 ;;		line 799 in file "../src/Dimmer_B1.c"
 13507 ;; Parameters:    Size  Location     Type
 13508 ;;  lights          1    wreg     unsigned char 
 13509 ;;  command         1   77[BANK0 ] unsigned char 
 13510 ;; Auto vars:     Size  Location     Type
 13511 ;;  lights          1    0[BANK1 ] unsigned char 
 13512 ;; Return value:  Size  Location     Type
 13513 ;;		None               void
 13514 ;; Registers used:
 13515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13516 ;; Tracked objects:
 13517 ;;		On entry : 0/0
 13518 ;;		On exit  : 0/0
 13519 ;;		Unchanged: 0/0
 13520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13521 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13525 ;;Total ram usage:        4 bytes
 13526 ;; Hardware stack levels used:    1
 13527 ;; Hardware stack levels required when called:    7
 13528 ;; This function calls:
 13529 ;;		_getCmd_Status
 13530 ;;		_getDelayOff_GO
 13531 ;;		_getDimmerLights_PercentToValue
 13532 ;;		_getDimmerLights_ValueToPercent
 13533 ;;		_getMain_All_LightsStatus
 13534 ;;		_setCmd_Status
 13535 ;;		_setDelayOff_GO
 13536 ;;		_setDimmerIntr_ControlStatus
 13537 ;;		_setDimmerIntr_DimmingValue
 13538 ;;		_setDimmerIntr_Dimming_RF
 13539 ;;		_setDimmerIntr_MaxmumValue
 13540 ;;		_setDimmerLights_Line
 13541 ;;		_setLED
 13542 ;;		_setProductData
 13543 ;;		_setRF_DimmerLights
 13544 ;;		_setTxData
 13545 ;; This function is called by:
 13546 ;;		_setDimmerLights_Main
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           
 13551                           ;psect for function _setDimmerLights_OnOff
 13552  0710                     _setDimmerLights_OnOff:	
 13553                           
 13554                           ;incstack = 0
 13555                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13556                           ;setDimmerLights_OnOff@lights stored from wreg
 13557  0710  0021               	movlb	1	; select bank1
 13558  0711  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13559                           
 13560                           ;Dimmer_B1.c: 801: if (command == 1) {
 13561  0712  0020               	movlb	0	; select bank0
 13562  0713  086D               	movf	setDimmerLights_OnOff@command,w
 13563  0714  3A01               	xorlw	1
 13564  0715  1D03               	skipz
 13565  0716  2F7A               	goto	l6660
 13566                           
 13567                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13568  0717  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13569  0718  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13570  0719  0021               	movlb	1	; select bank1
 13571  071A  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13572  071B  319E  2668  3187   	fcall	_setDimmerIntr_ControlStatus
 13573                           
 13574                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13575  071E  0023               	movlb	3	; select bank3
 13576  071F  1520               	bsf	_Dimmer^(0+384),2
 13577                           
 13578                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13579  0720  0021               	movlb	1	; select bank1
 13580  0721  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13581  0722  319C  24C6  3187   	fcall	_setDimmerLights_Line
 13582                           
 13583                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13584  0725  0020               	movlb	0	; select bank0
 13585  0726  01A2               	clrf	setLED@command
 13586  0727  0021               	movlb	1	; select bank1
 13587  0728  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13588  0729  3192  22F0  3187   	fcall	_setLED
 13589                           
 13590                           ;Dimmer_B1.c: 813: ;;
 13591                           ;Dimmer_B1.c: 818: setDimmerIntr_DimmingValue(lights, ((char)(70*0.6)));
 13592  072C  302A               	movlw	42
 13593  072D  0020               	movlb	0	; select bank0
 13594  072E  00EE               	movwf	??_setDimmerLights_OnOff
 13595  072F  086E               	movf	??_setDimmerLights_OnOff,w
 13596  0730  00A0               	movwf	setDimmerIntr_DimmingValue@value
 13597  0731  0021               	movlb	1	; select bank1
 13598  0732  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13599  0733  319C  2427  3187   	fcall	_setDimmerIntr_DimmingValue
 13600                           
 13601                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingRun == 1) {
 13602  0736  0021               	movlb	1	; select bank1
 13603  0737  0A52               	incf	_DimmerLights^(0+128),w
 13604  0738  0086               	movwf	6
 13605  0739  3001               	movlw	1	; select bank2/3
 13606  073A  0087               	movwf	7
 13607  073B  1F01               	btfss	1,6
 13608  073C  2F61               	goto	l6656
 13609                           
 13610                           ;Dimmer_B1.c: 821: DimmerLights->DimmingRun = 0;
 13611  073D  0A52               	incf	_DimmerLights^(0+128),w
 13612  073E  0086               	movwf	6
 13613  073F  3001               	movlw	1	; select bank2/3
 13614  0740  0087               	movwf	7
 13615  0741  1301               	bcf	1,6
 13616                           
 13617                           ;Dimmer_B1.c: 822: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13618  0742  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13619  0743  3E14               	addlw	20
 13620  0744  076E               	addwf	_product^(0+128),w
 13621  0745  0020               	movlb	0	; select bank0
 13622  0746  00EE               	movwf	??_setDimmerLights_OnOff
 13623  0747  086E               	movf	??_setDimmerLights_OnOff,w
 13624  0748  0086               	movwf	6
 13625  0749  3002               	movlw	2	; select bank4/5
 13626  074A  0087               	movwf	7
 13627  074B  0801               	movf	1,w
 13628  074C  3188  2038  3187   	fcall	_getDimmerLights_PercentToValue
 13629  074F  0020               	movlb	0	; select bank0
 13630  0750  00EF               	movwf	??_setDimmerLights_OnOff+1
 13631  0751  086F               	movf	??_setDimmerLights_OnOff+1,w
 13632  0752  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13633  0753  0021               	movlb	1	; select bank1
 13634  0754  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13635  0755  319C  241B  3187   	fcall	_setDimmerIntr_MaxmumValue
 13636                           
 13637                           ;Dimmer_B1.c: 823: setDimmerIntr_Dimming_RF(lights, 1);
 13638  0758  0020               	movlb	0	; select bank0
 13639  0759  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13640  075A  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13641  075B  0021               	movlb	1	; select bank1
 13642  075C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13643  075D  319E  2680  3187   	fcall	_setDimmerIntr_Dimming_RF
 13644                           
 13645                           ;Dimmer_B1.c: 824: } else {
 13646  0760  2FA9               	goto	l6674
 13647  0761                     l6656:	
 13648                           
 13649                           ;Dimmer_B1.c: 825: setDimmerIntr_MaxmumValue(lights, ((char)(70*0.6)));
 13650  0761  302A               	movlw	42
 13651  0762  0020               	movlb	0	; select bank0
 13652  0763  00EE               	movwf	??_setDimmerLights_OnOff
 13653  0764  086E               	movf	??_setDimmerLights_OnOff,w
 13654  0765  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13655  0766  0021               	movlb	1	; select bank1
 13656  0767  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13657  0768  319C  241B  3187   	fcall	_setDimmerIntr_MaxmumValue
 13658                           
 13659                           ;Dimmer_B1.c: 826: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          70*0.6))));
 13660  076B  302A               	movlw	42
 13661  076C  3197  2736  3187   	fcall	_getDimmerLights_ValueToPercent
 13662  076F  0020               	movlb	0	; select bank0
 13663  0770  00EE               	movwf	??_setDimmerLights_OnOff
 13664  0771  086E               	movf	??_setDimmerLights_OnOff,w
 13665  0772  00E2               	movwf	setProductData@value
 13666  0773  0021               	movlb	1	; select bank1
 13667  0774  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13668  0775  3E14               	addlw	20
 13669  0776  319C  240F  3187   	fcall	_setProductData
 13670                           
 13671                           ;Dimmer_B1.c: 827: }
 13672                           ;Dimmer_B1.c: 830: } else if (command == 0) {
 13673  0779  2FA9               	goto	l6674
 13674  077A                     l6660:	
 13675  077A  0020               	movlb	0	; select bank0
 13676  077B  08ED               	movf	setDimmerLights_OnOff@command,f
 13677  077C  1D03               	skipz
 13678  077D  2FA9               	goto	l6674
 13679                           
 13680                           ;Dimmer_B1.c: 831: setDimmerIntr_ControlStatus(lights, 0);
 13681  077E  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13682  077F  0021               	movlb	1	; select bank1
 13683  0780  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13684  0781  319E  2668  3187   	fcall	_setDimmerIntr_ControlStatus
 13685                           
 13686                           ;Dimmer_B1.c: 833: Dimmer.Load_Status = 0;
 13687  0784  0023               	movlb	3	; select bank3
 13688  0785  1120               	bcf	_Dimmer^(0+384),2
 13689                           
 13690                           ;Dimmer_B1.c: 834: setDimmerLights_Line(0);
 13691  0786  3000               	movlw	0
 13692  0787  319C  24C6  3187   	fcall	_setDimmerLights_Line
 13693                           
 13694                           ;Dimmer_B1.c: 838: if (getDelayOff_GO(lights) == 1) {
 13695  078A  0021               	movlb	1	; select bank1
 13696  078B  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13697  078C  319C  24D7  3187   	fcall	_getDelayOff_GO
 13698  078F  3A01               	xorlw	1
 13699  0790  1D03               	skipz
 13700  0791  2F9A               	goto	l776
 13701                           
 13702                           ;Dimmer_B1.c: 839: setDelayOff_GO(lights, 0, 0);
 13703  0792  0020               	movlb	0	; select bank0
 13704  0793  01E5               	clrf	setDelayOff_GO@command
 13705  0794  01E6               	clrf	setDelayOff_GO@value
 13706  0795  0021               	movlb	1	; select bank1
 13707  0796  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13708  0797  318C  24AB  3187   	fcall	_setDelayOff_GO
 13709  079A                     l776:	
 13710                           
 13711                           ;Dimmer_B1.c: 840: }
 13712                           ;Dimmer_B1.c: 845: setLED(lights, 1);
 13713  079A  0020               	movlb	0	; select bank0
 13714  079B  01A2               	clrf	setLED@command
 13715  079C  0AA2               	incf	setLED@command,f
 13716  079D  0021               	movlb	1	; select bank1
 13717  079E  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13718  079F  3192  22F0  3187   	fcall	_setLED
 13719                           
 13720                           ;Dimmer_B1.c: 846: ;;
 13721                           ;Dimmer_B1.c: 850: if (lights == 1) {
 13722  07A2  0021               	movlb	1	; select bank1
 13723  07A3  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13724  07A4  3A01               	xorlw	1
 13725  07A5  1D03               	skipz
 13726  07A6  2FA9               	goto	l6674
 13727                           
 13728                           ;Dimmer_B1.c: 851: RB1 = 0;
 13729  07A7  0020               	movlb	0	; select bank0
 13730  07A8  108D               	bcf	13,1	;volatile
 13731  07A9                     l6674:	
 13732                           
 13733                           ;Dimmer_B1.c: 853: }
 13734                           ;Dimmer_B1.c: 864: }
 13735                           ;Dimmer_B1.c: 867: setRF_DimmerLights(lights, command);
 13736  07A9  0020               	movlb	0	; select bank0
 13737  07AA  086D               	movf	setDimmerLights_OnOff@command,w
 13738  07AB  00EE               	movwf	??_setDimmerLights_OnOff
 13739  07AC  086E               	movf	??_setDimmerLights_OnOff,w
 13740  07AD  00E5               	movwf	setRF_DimmerLights@on
 13741  07AE  0021               	movlb	1	; select bank1
 13742  07AF  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13743  07B0  3197  279B  3187   	fcall	_setRF_DimmerLights
 13744                           
 13745                           ;Dimmer_B1.c: 869: if (getCmd_Status(1) == 1) {
 13746  07B3  3001               	movlw	1
 13747  07B4  319D  251B  3187   	fcall	_getCmd_Status
 13748  07B7  3A01               	xorlw	1
 13749  07B8  1D03               	skipz
 13750  07B9  2FD5               	goto	l6688
 13751                           
 13752                           ;Dimmer_B1.c: 870: if (getMain_All_LightsStatus() == 0) {
 13753  07BA  319B  23C2  3187   	fcall	_getMain_All_LightsStatus
 13754  07BD  3800               	iorlw	0
 13755  07BE  1D03               	skipz
 13756  07BF  0008               	return
 13757                           
 13758                           ;Dimmer_B1.c: 871: setCmd_Status(1, 0);
 13759  07C0  0020               	movlb	0	; select bank0
 13760  07C1  01A0               	clrf	setCmd_Status@cmd
 13761  07C2  3001               	movlw	1
 13762  07C3  319E  26B1  3187   	fcall	_setCmd_Status
 13763                           
 13764                           ;Dimmer_B1.c: 872: setProductData(11, 0);
 13765  07C6  0020               	movlb	0	; select bank0
 13766  07C7  01E2               	clrf	setProductData@value
 13767  07C8  300B               	movlw	11
 13768  07C9  319C  240F  3187   	fcall	_setProductData
 13769                           
 13770                           ;Dimmer_B1.c: 873: setProductData(17, 0);
 13771  07CC  0020               	movlb	0	; select bank0
 13772  07CD  01E2               	clrf	setProductData@value
 13773  07CE  3011               	movlw	17
 13774  07CF  319C  240F  3187   	fcall	_setProductData
 13775                           
 13776                           ;Dimmer_B1.c: 874: setTxData();
 13777  07D2  318F  2745         	fcall	_setTxData
 13778                           
 13779                           ;Dimmer_B1.c: 875: }
 13780                           ;Dimmer_B1.c: 876: } else {
 13781  07D4  0008               	return
 13782  07D5                     l6688:	
 13783                           
 13784                           ;Dimmer_B1.c: 877: setTxData();
 13785  07D5  318F  2745         	fcall	_setTxData
 13786  07D7  0008               	return
 13787  07D8                     __end_of_setDimmerLights_OnOff:	
 13788                           
 13789                           	psect	text89
 13790  12F0                     __ptext89:	
 13791 ;; *************** function _setLED *****************
 13792 ;; Defined at:
 13793 ;;		line 81 in file "../src/LED_B1.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;  led             1    wreg     unsigned char 
 13796 ;;  command         1    2[BANK0 ] unsigned char 
 13797 ;; Auto vars:     Size  Location     Type
 13798 ;;  led             1    3[BANK0 ] unsigned char 
 13799 ;; Return value:  Size  Location     Type
 13800 ;;		None               void
 13801 ;; Registers used:
 13802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13803 ;; Tracked objects:
 13804 ;;		On entry : 0/0
 13805 ;;		On exit  : 0/0
 13806 ;;		Unchanged: 0/0
 13807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13808 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13811 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13812 ;;Total ram usage:        2 bytes
 13813 ;; Hardware stack levels used:    1
 13814 ;; Hardware stack levels required when called:    5
 13815 ;; This function calls:
 13816 ;;		_LedPointSelect
 13817 ;; This function is called by:
 13818 ;;		_setDimmerLights_OnOff
 13819 ;;		_setLED_Initialization
 13820 ;;		_Exception_Main
 13821 ;;		_setSw_Initialization
 13822 ;; This function uses a non-reentrant model
 13823 ;;
 13824                           
 13825                           
 13826                           ;psect for function _setLED
 13827  12F0                     _setLED:	
 13828                           
 13829                           ;incstack = 0
 13830                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13831                           ;setLED@led stored from wreg
 13832  12F0  0020               	movlb	0	; select bank0
 13833  12F1  00A3               	movwf	setLED@led
 13834                           
 13835                           ;LED_B1.c: 82: LedPointSelect(led);
 13836  12F2  0823               	movf	setLED@led,w
 13837  12F3  319C  2433  3192   	fcall	_LedPointSelect
 13838                           
 13839                           ;LED_B1.c: 83: if (command == 0) {
 13840  12F6  0020               	movlb	0	; select bank0
 13841  12F7  08A2               	movf	setLED@command,f
 13842  12F8  1D03               	skipz
 13843  12F9  2AFF               	goto	l6424
 13844                           
 13845                           ;LED_B1.c: 112: if (led == 99) {
 13846  12FA  0823               	movf	setLED@led,w
 13847  12FB  3A63               	xorlw	99
 13848  12FC  1D03               	skipz
 13849  12FD  2AFF               	goto	l6424
 13850                           
 13851                           ;LED_B1.c: 116: RB5 = 1;
 13852  12FE  168D               	bsf	13,5	;volatile
 13853  12FF                     l6424:	
 13854                           
 13855                           ;LED_B1.c: 118: }
 13856                           ;LED_B1.c: 120: }
 13857                           ;LED_B1.c: 121: if (command == 1) {
 13858  12FF  0822               	movf	setLED@command,w
 13859  1300  3A01               	xorlw	1
 13860  1301  1D03               	skipz
 13861  1302  2B08               	goto	l6430
 13862                           
 13863                           ;LED_B1.c: 150: if (led == 99) {
 13864  1303  0823               	movf	setLED@led,w
 13865  1304  3A63               	xorlw	99
 13866  1305  1D03               	skipz
 13867  1306  2B08               	goto	l6430
 13868                           
 13869                           ;LED_B1.c: 154: RB5 = 0;
 13870  1307  128D               	bcf	13,5	;volatile
 13871  1308                     l6430:	
 13872                           
 13873                           ;LED_B1.c: 156: }
 13874                           ;LED_B1.c: 158: }
 13875                           ;LED_B1.c: 159: if (command == 10) {
 13876  1308  0822               	movf	setLED@command,w
 13877  1309  3A0A               	xorlw	10
 13878  130A  1D03               	skipz
 13879  130B  2B1E               	goto	l6438
 13880                           
 13881                           ;LED_B1.c: 160: LED->GO = 0;
 13882  130C  0021               	movlb	1	; select bank1
 13883  130D  0853               	movf	_LED^(0+128),w
 13884  130E  0086               	movwf	6
 13885  130F  3001               	movlw	1	; select bank2/3
 13886  1310  0087               	movwf	7
 13887  1311  1081               	bcf	1,1
 13888                           
 13889                           ;LED_B1.c: 161: LED->Time = 0;
 13890  1312  0A53               	incf	_LED^(0+128),w
 13891  1313  0086               	movwf	6
 13892  1314  3001               	movlw	1	; select bank2/3
 13893  1315  0087               	movwf	7
 13894  1316  3000               	movlw	0
 13895  1317  3FC0               	movwi [0]fsr1
 13896  1318  3FC1               	movwi [1]fsr1
 13897                           
 13898                           ;LED_B1.c: 190: if (led == 99) {
 13899  1319  0020               	movlb	0	; select bank0
 13900  131A  0823               	movf	setLED@led,w
 13901  131B  3A63               	xorlw	99
 13902  131C  1903               	btfsc	3,2
 13903                           
 13904                           ;LED_B1.c: 194: RB5 = 1;
 13905  131D  168D               	bsf	13,5	;volatile
 13906  131E                     l6438:	
 13907                           
 13908                           ;LED_B1.c: 196: }
 13909                           ;LED_B1.c: 198: }
 13910                           ;LED_B1.c: 199: if (command == 11) {
 13911  131E  0822               	movf	setLED@command,w
 13912  131F  3A0B               	xorlw	11
 13913  1320  1D03               	skipz
 13914  1321  0008               	return
 13915                           
 13916                           ;LED_B1.c: 200: LED->GO = 1;
 13917  1322  0021               	movlb	1	; select bank1
 13918  1323  0853               	movf	_LED^(0+128),w
 13919  1324  0086               	movwf	6
 13920  1325  3001               	movlw	1	; select bank2/3
 13921  1326  0087               	movwf	7
 13922  1327  1481               	bsf	1,1
 13923  1328  0008               	return
 13924  1329                     __end_of_setLED:	
 13925                           
 13926                           	psect	text90
 13927  1C33                     __ptext90:	
 13928 ;; *************** function _LedPointSelect *****************
 13929 ;; Defined at:
 13930 ;;		line 7 in file "../src/LED_B1.c"
 13931 ;; Parameters:    Size  Location     Type
 13932 ;;  led             1    wreg     unsigned char 
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;  led             1    1[BANK0 ] unsigned char 
 13935 ;; Return value:  Size  Location     Type
 13936 ;;		None               void
 13937 ;; Registers used:
 13938 ;;		wreg
 13939 ;; Tracked objects:
 13940 ;;		On entry : 0/0
 13941 ;;		On exit  : 0/0
 13942 ;;		Unchanged: 0/0
 13943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;Total ram usage:        2 bytes
 13949 ;; Hardware stack levels used:    1
 13950 ;; Hardware stack levels required when called:    4
 13951 ;; This function calls:
 13952 ;;		Nothing
 13953 ;; This function is called by:
 13954 ;;		_setLED_Initialization
 13955 ;;		_setLED
 13956 ;;		_setLED_Main
 13957 ;; This function uses a non-reentrant model
 13958 ;;
 13959                           
 13960                           
 13961                           ;psect for function _LedPointSelect
 13962  1C33                     _LedPointSelect:	
 13963                           
 13964                           ;incstack = 0
 13965                           ; Regs used in _LedPointSelect: [wreg]
 13966                           ;LedPointSelect@led stored from wreg
 13967  1C33  0020               	movlb	0	; select bank0
 13968  1C34  00A1               	movwf	LedPointSelect@led
 13969                           
 13970                           ;LED_B1.c: 24: if (led == 99) {
 13971  1C35  0821               	movf	LedPointSelect@led,w
 13972  1C36  3A63               	xorlw	99
 13973  1C37  1D03               	skipz
 13974  1C38  0008               	return
 13975                           
 13976                           ;LED_B1.c: 25: LED = &VarErrLED;
 13977  1C39  30E0               	movlw	_VarErrLED& (0+255)
 13978  1C3A  00A0               	movwf	??_LedPointSelect
 13979  1C3B  0820               	movf	??_LedPointSelect,w
 13980  1C3C  0021               	movlb	1	; select bank1
 13981  1C3D  00D3               	movwf	_LED^(0+128)
 13982  1C3E  0008               	return
 13983  1C3F                     __end_of_LedPointSelect:	
 13984                           
 13985                           	psect	text91
 13986  1E80                     __ptext91:	
 13987 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 13988 ;; Defined at:
 13989 ;;		line 184 in file "../src/Dimmer_B1.c"
 13990 ;; Parameters:    Size  Location     Type
 13991 ;;  lights          1    wreg     unsigned char 
 13992 ;;  command         1    0[BANK0 ] unsigned char 
 13993 ;; Auto vars:     Size  Location     Type
 13994 ;;  lights          1    2[BANK0 ] unsigned char 
 13995 ;; Return value:  Size  Location     Type
 13996 ;;		None               void
 13997 ;; Registers used:
 13998 ;;		wreg, status,2, status,0
 13999 ;; Tracked objects:
 14000 ;;		On entry : 0/0
 14001 ;;		On exit  : 0/0
 14002 ;;		Unchanged: 0/0
 14003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14004 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14007 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;Total ram usage:        3 bytes
 14009 ;; Hardware stack levels used:    1
 14010 ;; Hardware stack levels required when called:    4
 14011 ;; This function calls:
 14012 ;;		Nothing
 14013 ;; This function is called by:
 14014 ;;		_setDimmerLights_OnOff
 14015 ;;		_setRFSW_AdjControl
 14016 ;; This function uses a non-reentrant model
 14017 ;;
 14018                           
 14019                           
 14020                           ;psect for function _setDimmerIntr_Dimming_RF
 14021  1E80                     _setDimmerIntr_Dimming_RF:	
 14022                           
 14023                           ;incstack = 0
 14024                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14025                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14026  1E80  0020               	movlb	0	; select bank0
 14027  1E81  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14028                           
 14029                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14030  1E82  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14031  1E83  3A01               	xorlw	1
 14032  1E84  1D03               	skipz
 14033  1E85  0008               	return
 14034                           
 14035                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14036  1E86  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14037  1E87  3A01               	xorlw	1
 14038  1E88  3000               	movlw	0
 14039  1E89  1903               	skipnz
 14040  1E8A  3001               	movlw	1
 14041  1E8B  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14042  1E8C  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14043  1E8D  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14044  1E8E  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14045  1E8F  0021               	movlb	1	; select bank1
 14046  1E90  0847               	movf	_DimmerIntr1^(0+128),w
 14047  1E91  0020               	movlb	0	; select bank0
 14048  1E92  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14049  1E93  39BF               	andlw	-65
 14050  1E94  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14051  1E95  0021               	movlb	1	; select bank1
 14052  1E96  00C7               	movwf	_DimmerIntr1^(0+128)
 14053  1E97  0008               	return
 14054  1E98                     __end_of_setDimmerIntr_Dimming_RF:	
 14055                           
 14056                           	psect	text92
 14057  1C27                     __ptext92:	
 14058 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14059 ;; Defined at:
 14060 ;;		line 49 in file "../src/Dimmer_B1.c"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;  lights          1    wreg     unsigned char 
 14063 ;;  value           1    0[BANK0 ] unsigned char 
 14064 ;; Auto vars:     Size  Location     Type
 14065 ;;  lights          1    2[BANK0 ] unsigned char 
 14066 ;; Return value:  Size  Location     Type
 14067 ;;		None               void
 14068 ;; Registers used:
 14069 ;;		wreg
 14070 ;; Tracked objects:
 14071 ;;		On entry : 0/0
 14072 ;;		On exit  : 0/0
 14073 ;;		Unchanged: 0/0
 14074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14075 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14078 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14079 ;;Total ram usage:        3 bytes
 14080 ;; Hardware stack levels used:    1
 14081 ;; Hardware stack levels required when called:    4
 14082 ;; This function calls:
 14083 ;;		Nothing
 14084 ;; This function is called by:
 14085 ;;		_setDimmerLights_OnOff
 14086 ;; This function uses a non-reentrant model
 14087 ;;
 14088                           
 14089                           
 14090                           ;psect for function _setDimmerIntr_DimmingValue
 14091  1C27                     _setDimmerIntr_DimmingValue:	
 14092                           
 14093                           ;incstack = 0
 14094                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14095                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14096  1C27  0020               	movlb	0	; select bank0
 14097  1C28  00A2               	movwf	setDimmerIntr_DimmingValue@lights
 14098                           
 14099                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14100  1C29  0822               	movf	setDimmerIntr_DimmingValue@lights,w
 14101  1C2A  3A01               	xorlw	1
 14102  1C2B  1D03               	skipz
 14103  1C2C  0008               	return
 14104                           
 14105                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14106  1C2D  0820               	movf	setDimmerIntr_DimmingValue@value,w
 14107  1C2E  00A1               	movwf	??_setDimmerIntr_DimmingValue
 14108  1C2F  0821               	movf	??_setDimmerIntr_DimmingValue,w
 14109  1C30  0021               	movlb	1	; select bank1
 14110  1C31  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 14111  1C32  0008               	return
 14112  1C33                     __end_of_setDimmerIntr_DimmingValue:	
 14113                           
 14114                           	psect	text93
 14115  1E68                     __ptext93:	
 14116 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14117 ;; Defined at:
 14118 ;;		line 31 in file "../src/Dimmer_B1.c"
 14119 ;; Parameters:    Size  Location     Type
 14120 ;;  lights          1    wreg     unsigned char 
 14121 ;;  command         1    0[BANK0 ] unsigned char 
 14122 ;; Auto vars:     Size  Location     Type
 14123 ;;  lights          1    2[BANK0 ] unsigned char 
 14124 ;; Return value:  Size  Location     Type
 14125 ;;		None               void
 14126 ;; Registers used:
 14127 ;;		wreg, status,2, status,0
 14128 ;; Tracked objects:
 14129 ;;		On entry : 0/0
 14130 ;;		On exit  : 0/0
 14131 ;;		Unchanged: 0/0
 14132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14133 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;Total ram usage:        3 bytes
 14138 ;; Hardware stack levels used:    1
 14139 ;; Hardware stack levels required when called:    4
 14140 ;; This function calls:
 14141 ;;		Nothing
 14142 ;; This function is called by:
 14143 ;;		_setDimmerLights_OnOff
 14144 ;; This function uses a non-reentrant model
 14145 ;;
 14146                           
 14147                           
 14148                           ;psect for function _setDimmerIntr_ControlStatus
 14149  1E68                     _setDimmerIntr_ControlStatus:	
 14150                           
 14151                           ;incstack = 0
 14152                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14153                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14154  1E68  0020               	movlb	0	; select bank0
 14155  1E69  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14156                           
 14157                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14158  1E6A  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14159  1E6B  3A01               	xorlw	1
 14160  1E6C  1D03               	skipz
 14161  1E6D  0008               	return
 14162                           
 14163                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14164  1E6E  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14165  1E6F  3A01               	xorlw	1
 14166  1E70  3000               	movlw	0
 14167  1E71  1903               	skipnz
 14168  1E72  3001               	movlw	1
 14169  1E73  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14170  1E74  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14171  1E75  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14172  1E76  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14173  1E77  0021               	movlb	1	; select bank1
 14174  1E78  0847               	movf	_DimmerIntr1^(0+128),w
 14175  1E79  0020               	movlb	0	; select bank0
 14176  1E7A  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14177  1E7B  39F7               	andlw	-9
 14178  1E7C  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14179  1E7D  0021               	movlb	1	; select bank1
 14180  1E7E  00C7               	movwf	_DimmerIntr1^(0+128)
 14181  1E7F  0008               	return
 14182  1E80                     __end_of_setDimmerIntr_ControlStatus:	
 14183                           
 14184                           	psect	text94
 14185  0CAB                     __ptext94:	
 14186 ;; *************** function _setDelayOff_GO *****************
 14187 ;; Defined at:
 14188 ;;		line 87 in file "../src/DelayOff_B1.c"
 14189 ;; Parameters:    Size  Location     Type
 14190 ;;  sw              1    wreg     unsigned char 
 14191 ;;  command         1   69[BANK0 ] unsigned char 
 14192 ;;  value           1   70[BANK0 ] unsigned char 
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;  sw              1   76[BANK0 ] unsigned char 
 14195 ;;  k               1   75[BANK0 ] unsigned char 
 14196 ;;  j               1   74[BANK0 ] unsigned char 
 14197 ;;  i               1   73[BANK0 ] unsigned char 
 14198 ;; Return value:  Size  Location     Type
 14199 ;;		None               void
 14200 ;; Registers used:
 14201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14202 ;; Tracked objects:
 14203 ;;		On entry : 0/0
 14204 ;;		On exit  : 0/0
 14205 ;;		Unchanged: 0/0
 14206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14207 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14210 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14211 ;;Total ram usage:        8 bytes
 14212 ;; Hardware stack levels used:    1
 14213 ;; Hardware stack levels required when called:    5
 14214 ;; This function calls:
 14215 ;;		_DelayOffPointSelect
 14216 ;;		___bmul
 14217 ;;		_setProductData
 14218 ;; This function is called by:
 14219 ;;		_setDimmerLights_OnOff
 14220 ;;		_setRFSW_Control
 14221 ;; This function uses a non-reentrant model
 14222 ;;
 14223                           
 14224                           
 14225                           ;psect for function _setDelayOff_GO
 14226  0CAB                     _setDelayOff_GO:	
 14227                           
 14228                           ;incstack = 0
 14229                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14230                           ;setDelayOff_GO@sw stored from wreg
 14231  0CAB  0020               	movlb	0	; select bank0
 14232  0CAC  00EC               	movwf	setDelayOff_GO@sw
 14233                           
 14234                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14235  0CAD  086C               	movf	setDelayOff_GO@sw,w
 14236  0CAE  319B  23F7  318C   	fcall	_DelayOffPointSelect
 14237                           
 14238                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14239  0CB1  0020               	movlb	0	; select bank0
 14240  0CB2  0865               	movf	setDelayOff_GO@command,w
 14241  0CB3  3A01               	xorlw	1
 14242  0CB4  3000               	movlw	0
 14243  0CB5  1903               	skipnz
 14244  0CB6  3001               	movlw	1
 14245  0CB7  00E7               	movwf	??_setDelayOff_GO
 14246  0CB8  0021               	movlb	1	; select bank1
 14247  0CB9  0851               	movf	_DelayOff^(0+128),w
 14248  0CBA  0086               	movwf	6
 14249  0CBB  3001               	movlw	1	; select bank2/3
 14250  0CBC  0087               	movwf	7
 14251  0CBD  0020               	movlb	0	; select bank0
 14252  0CBE  0DE7               	rlf	??_setDelayOff_GO,f
 14253  0CBF  0801               	movf	1,w
 14254  0CC0  0667               	xorwf	??_setDelayOff_GO,w
 14255  0CC1  39FD               	andlw	-3
 14256  0CC2  0667               	xorwf	??_setDelayOff_GO,w
 14257  0CC3  0081               	movwf	1
 14258                           
 14259                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14260  0CC4  0021               	movlb	1	; select bank1
 14261  0CC5  0851               	movf	_DelayOff^(0+128),w
 14262  0CC6  3E02               	addlw	2
 14263  0CC7  0086               	movwf	6
 14264  0CC8  3001               	movlw	1	; select bank2/3
 14265  0CC9  0087               	movwf	7
 14266  0CCA  3000               	movlw	0
 14267  0CCB  3FC0               	movwi [0]fsr1
 14268  0CCC  3FC1               	movwi [1]fsr1
 14269                           
 14270                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14271  0CCD  0851               	movf	_DelayOff^(0+128),w
 14272  0CCE  3E04               	addlw	4
 14273  0CCF  0086               	movwf	6
 14274  0CD0  3001               	movlw	1	; select bank2/3
 14275  0CD1  0087               	movwf	7
 14276  0CD2  0181               	clrf	1
 14277                           
 14278                           ;DelayOff_B1.c: 94: if (command == 1) {
 14279  0CD3  0020               	movlb	0	; select bank0
 14280  0CD4  0865               	movf	setDelayOff_GO@command,w
 14281  0CD5  3A01               	xorlw	1
 14282  0CD6  1D03               	skipz
 14283  0CD7  2D2D               	goto	l6040
 14284                           
 14285                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14286  0CD8  3005               	movlw	5
 14287  0CD9  00E7               	movwf	??_setDelayOff_GO
 14288  0CDA  0867               	movf	??_setDelayOff_GO,w
 14289  0CDB  00E9               	movwf	setDelayOff_GO@i
 14290  0CDC  01EA               	clrf	setDelayOff_GO@j
 14291  0CDD  01EB               	clrf	setDelayOff_GO@k
 14292                           
 14293                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14294  0CDE  300F               	movlw	15
 14295  0CDF  0566               	andwf	setDelayOff_GO@value,w
 14296  0CE0  00E7               	movwf	??_setDelayOff_GO
 14297  0CE1  0867               	movf	??_setDelayOff_GO,w
 14298  0CE2  3A05               	xorlw	5
 14299  0CE3  1903               	skipnz
 14300  0CE4  2CE9               	goto	l6026
 14301  0CE5  0866               	movf	setDelayOff_GO@value,w
 14302  0CE6  390F               	andlw	15
 14303  0CE7  1D03               	btfss	3,2
 14304  0CE8  2D19               	goto	l6036
 14305  0CE9                     l6026:	
 14306  0CE9  3031               	movlw	49
 14307  0CEA  0266               	subwf	setDelayOff_GO@value,w
 14308  0CEB  1803               	skipnc
 14309  0CEC  2D19               	goto	l6036
 14310                           
 14311                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14312  0CED  0866               	movf	setDelayOff_GO@value,w
 14313  0CEE  390F               	andlw	15
 14314  0CEF  00E7               	movwf	??_setDelayOff_GO
 14315  0CF0  0867               	movf	??_setDelayOff_GO,w
 14316  0CF1  00EA               	movwf	setDelayOff_GO@j
 14317                           
 14318                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14319  0CF2  0866               	movf	setDelayOff_GO@value,w
 14320  0CF3  00E7               	movwf	??_setDelayOff_GO
 14321  0CF4  3004               	movlw	4
 14322  0CF5                     u5165:	
 14323  0CF5  36E7               	lsrf	??_setDelayOff_GO,f
 14324  0CF6  0B89               	decfsz	9,f
 14325  0CF7  2CF5               	goto	u5165
 14326  0CF8  0867               	movf	??_setDelayOff_GO,w
 14327  0CF9  390F               	andlw	15
 14328  0CFA  00E8               	movwf	??_setDelayOff_GO+1
 14329  0CFB  0868               	movf	??_setDelayOff_GO+1,w
 14330  0CFC  00EB               	movwf	setDelayOff_GO@k
 14331                           
 14332                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14333  0CFD  300A               	movlw	10
 14334  0CFE  00E7               	movwf	??_setDelayOff_GO
 14335  0CFF  0867               	movf	??_setDelayOff_GO,w
 14336  0D00  00A0               	movwf	___bmul@multiplicand
 14337  0D01  086B               	movf	setDelayOff_GO@k,w
 14338  0D02  319D  252D  318C   	fcall	___bmul
 14339  0D05  0020               	movlb	0	; select bank0
 14340  0D06  076A               	addwf	setDelayOff_GO@j,w
 14341  0D07  00E8               	movwf	??_setDelayOff_GO+1
 14342  0D08  0021               	movlb	1	; select bank1
 14343  0D09  0A51               	incf	_DelayOff^(0+128),w
 14344  0D0A  0086               	movwf	6
 14345  0D0B  3001               	movlw	1	; select bank2/3
 14346  0D0C  0087               	movwf	7
 14347  0D0D  0020               	movlb	0	; select bank0
 14348  0D0E  0868               	movf	??_setDelayOff_GO+1,w
 14349  0D0F  0081               	movwf	1
 14350                           
 14351                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14352  0D10  0866               	movf	setDelayOff_GO@value,w
 14353  0D11  00E7               	movwf	??_setDelayOff_GO
 14354  0D12  0867               	movf	??_setDelayOff_GO,w
 14355  0D13  00E2               	movwf	setProductData@value
 14356  0D14  086C               	movf	setDelayOff_GO@sw,w
 14357  0D15  3E1A               	addlw	26
 14358  0D16  319C  240F         	fcall	_setProductData
 14359                           
 14360                           ;DelayOff_B1.c: 103: } else {
 14361  0D18  0008               	return
 14362  0D19                     l6036:	
 14363                           
 14364                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14365  0D19  3005               	movlw	5
 14366  0D1A  0020               	movlb	0	; select bank0
 14367  0D1B  00E7               	movwf	??_setDelayOff_GO
 14368  0D1C  0021               	movlb	1	; select bank1
 14369  0D1D  0A51               	incf	_DelayOff^(0+128),w
 14370  0D1E  0086               	movwf	6
 14371  0D1F  3001               	movlw	1	; select bank2/3
 14372  0D20  0087               	movwf	7
 14373  0D21  0020               	movlb	0	; select bank0
 14374  0D22  0867               	movf	??_setDelayOff_GO,w
 14375  0D23  0081               	movwf	1
 14376                           
 14377                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14378  0D24  3005               	movlw	5
 14379  0D25  00E7               	movwf	??_setDelayOff_GO
 14380  0D26  0867               	movf	??_setDelayOff_GO,w
 14381  0D27  00E2               	movwf	setProductData@value
 14382  0D28  086C               	movf	setDelayOff_GO@sw,w
 14383  0D29  3E1A               	addlw	26
 14384  0D2A  319C  240F         	fcall	_setProductData
 14385                           
 14386                           ;DelayOff_B1.c: 106: }
 14387                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14388  0D2C  0008               	return
 14389  0D2D                     l6040:	
 14390  0D2D  0020               	movlb	0	; select bank0
 14391  0D2E  08E5               	movf	setDelayOff_GO@command,f
 14392  0D2F  1D03               	skipz
 14393  0D30  0008               	return
 14394                           
 14395                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14396  0D31  01E2               	clrf	setProductData@value
 14397  0D32  086C               	movf	setDelayOff_GO@sw,w
 14398  0D33  3E1A               	addlw	26
 14399  0D34  319C  240F         	fcall	_setProductData
 14400  0D36  0008               	return
 14401  0D37                     __end_of_setDelayOff_GO:	
 14402                           
 14403                           	psect	text95
 14404  1D2D                     __ptext95:	
 14405 ;; *************** function ___bmul *****************
 14406 ;; Defined at:
 14407 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14408 ;; Parameters:    Size  Location     Type
 14409 ;;  multiplier      1    wreg     unsigned char 
 14410 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14411 ;; Auto vars:     Size  Location     Type
 14412 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14413 ;;  product         1    2[BANK0 ] unsigned char 
 14414 ;; Return value:  Size  Location     Type
 14415 ;;                  1    wreg      unsigned char 
 14416 ;; Registers used:
 14417 ;;		wreg, status,2, status,0
 14418 ;; Tracked objects:
 14419 ;;		On entry : 0/0
 14420 ;;		On exit  : 0/0
 14421 ;;		Unchanged: 0/0
 14422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14423 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14424 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;Total ram usage:        4 bytes
 14428 ;; Hardware stack levels used:    1
 14429 ;; Hardware stack levels required when called:    4
 14430 ;; This function calls:
 14431 ;;		Nothing
 14432 ;; This function is called by:
 14433 ;;		_setDelayOff_GO
 14434 ;;		_DelayTimejudge
 14435 ;; This function uses a non-reentrant model
 14436 ;;
 14437                           
 14438                           
 14439                           ;psect for function ___bmul
 14440  1D2D                     ___bmul:	
 14441                           
 14442                           ;incstack = 0
 14443                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14444                           ;___bmul@multiplier stored from wreg
 14445  1D2D  0020               	movlb	0	; select bank0
 14446  1D2E  00A3               	movwf	___bmul@multiplier
 14447  1D2F  01A2               	clrf	___bmul@product
 14448  1D30                     l5704:	
 14449  1D30  1C23               	btfss	___bmul@multiplier,0
 14450  1D31  2D36               	goto	l5708
 14451  1D32  0820               	movf	___bmul@multiplicand,w
 14452  1D33  00A1               	movwf	??___bmul
 14453  1D34  0821               	movf	??___bmul,w
 14454  1D35  07A2               	addwf	___bmul@product,f
 14455  1D36                     l5708:	
 14456  1D36  1003               	clrc
 14457  1D37  0DA0               	rlf	___bmul@multiplicand,f
 14458  1D38  1003               	clrc
 14459  1D39  0CA3               	rrf	___bmul@multiplier,f
 14460  1D3A  08A3               	movf	___bmul@multiplier,f
 14461  1D3B  1D03               	skipz
 14462  1D3C  2D30               	goto	l5704
 14463  1D3D  0822               	movf	___bmul@product,w
 14464  1D3E  0008               	return
 14465  1D3F                     __end_of___bmul:	
 14466                           
 14467                           	psect	text96
 14468  1EB1                     __ptext96:	
 14469 ;; *************** function _setCmd_Status *****************
 14470 ;; Defined at:
 14471 ;;		line 651 in file "../src/Main_B1.c"
 14472 ;; Parameters:    Size  Location     Type
 14473 ;;  number          1    wreg     unsigned char 
 14474 ;;  cmd             1    0[BANK0 ] unsigned char 
 14475 ;; Auto vars:     Size  Location     Type
 14476 ;;  number          1    2[BANK0 ] unsigned char 
 14477 ;; Return value:  Size  Location     Type
 14478 ;;		None               void
 14479 ;; Registers used:
 14480 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14481 ;; Tracked objects:
 14482 ;;		On entry : 0/0
 14483 ;;		On exit  : 0/0
 14484 ;;		Unchanged: 0/0
 14485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14486 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;Total ram usage:        3 bytes
 14491 ;; Hardware stack levels used:    1
 14492 ;; Hardware stack levels required when called:    4
 14493 ;; This function calls:
 14494 ;;		Nothing
 14495 ;; This function is called by:
 14496 ;;		_setDimmerLights_OnOff
 14497 ;;		_setControl_Lights_Table
 14498 ;; This function uses a non-reentrant model
 14499 ;;
 14500                           
 14501                           
 14502                           ;psect for function _setCmd_Status
 14503  1EB1                     _setCmd_Status:	
 14504                           
 14505                           ;incstack = 0
 14506                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14507                           ;setCmd_Status@number stored from wreg
 14508  1EB1  0020               	movlb	0	; select bank0
 14509  1EB2  00A2               	movwf	setCmd_Status@number
 14510                           
 14511                           ;Main_B1.c: 652: switch (number) {
 14512  1EB3  2EC3               	goto	l6206
 14513  1EB4                     l6202:	
 14514                           ;Main_B1.c: 653: case 1:
 14515                           
 14516                           
 14517                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14518  1EB4  0820               	movf	setCmd_Status@cmd,w
 14519  1EB5  3A01               	xorlw	1
 14520  1EB6  3000               	movlw	0
 14521  1EB7  1903               	skipnz
 14522  1EB8  3001               	movlw	1
 14523  1EB9  00A1               	movwf	??_setCmd_Status
 14524  1EBA  0021               	movlb	1	; select bank1
 14525  1EBB  0850               	movf	_Cmd^(0+128),w
 14526  1EBC  0020               	movlb	0	; select bank0
 14527  1EBD  0621               	xorwf	??_setCmd_Status,w
 14528  1EBE  39FE               	andlw	-2
 14529  1EBF  0621               	xorwf	??_setCmd_Status,w
 14530  1EC0  0021               	movlb	1	; select bank1
 14531  1EC1  00D0               	movwf	_Cmd^(0+128)
 14532                           
 14533                           ;Main_B1.c: 656: }
 14534                           
 14535                           ;Main_B1.c: 655: break;
 14536  1EC2  0008               	return
 14537  1EC3                     l6206:	
 14538  1EC3  0020               	movlb	0	; select bank0
 14539  1EC4  0822               	movf	setCmd_Status@number,w
 14540                           
 14541                           ; Switch size 1, requested type "space"
 14542                           ; Number of cases is 1, Range of values is 1 to 1
 14543                           ; switch strategies available:
 14544                           ; Name         Instructions Cycles
 14545                           ; simple_byte            4     3 (average)
 14546                           ; direct_byte           11     9 (fixed)
 14547                           ; jumptable            263     9 (fixed)
 14548                           ;	Chosen strategy is simple_byte
 14549  1EC5  3A01               	xorlw	1	; case 1
 14550  1EC6  1903               	skipnz
 14551  1EC7  2EB4               	goto	l6202
 14552  1EC8  2EC9               	goto	l1487
 14553  1EC9                     l1487:	
 14554  1EC9  0008               	return
 14555  1ECA                     __end_of_setCmd_Status:	
 14556                           
 14557                           	psect	text97
 14558  1BC2                     __ptext97:	
 14559 ;; *************** function _getMain_All_LightsStatus *****************
 14560 ;; Defined at:
 14561 ;;		line 373 in file "../src/Main_B1.c"
 14562 ;; Parameters:    Size  Location     Type
 14563 ;;		None
 14564 ;; Auto vars:     Size  Location     Type
 14565 ;;  status          1    0[BANK0 ] unsigned char 
 14566 ;; Return value:  Size  Location     Type
 14567 ;;                  1    wreg      unsigned char 
 14568 ;; Registers used:
 14569 ;;		wreg, status,2
 14570 ;; Tracked objects:
 14571 ;;		On entry : 0/0
 14572 ;;		On exit  : 0/0
 14573 ;;		Unchanged: 0/0
 14574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;Total ram usage:        1 bytes
 14580 ;; Hardware stack levels used:    1
 14581 ;; Hardware stack levels required when called:    4
 14582 ;; This function calls:
 14583 ;;		Nothing
 14584 ;; This function is called by:
 14585 ;;		_DimmerLights_Main
 14586 ;;		_setDimmerLights_Main
 14587 ;;		_setDimmerLights_OnOff
 14588 ;;		_Flash_Memory_Main
 14589 ;;		_Exception_Main
 14590 ;;		_Load_Main
 14591 ;;		_setTemp_Main
 14592 ;;		_setControl_Lights_Table
 14593 ;; This function uses a non-reentrant model
 14594 ;;
 14595                           
 14596                           
 14597                           ;psect for function _getMain_All_LightsStatus
 14598  1BC2                     _getMain_All_LightsStatus:	
 14599                           
 14600                           ;Main_B1.c: 374: char status = 0;
 14601                           
 14602                           ;incstack = 0
 14603                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14604  1BC2  0020               	movlb	0	; select bank0
 14605  1BC3  01A0               	clrf	getMain_All_LightsStatus@status
 14606                           
 14607                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14608  1BC4  3000               	movlw	0
 14609  1BC5  0023               	movlb	3	; select bank3
 14610  1BC6  1854               	btfsc	(_DimmerLights1^(0+384)+1),0
 14611  1BC7  3001               	movlw	1
 14612  1BC8  0020               	movlb	0	; select bank0
 14613  1BC9  00A0               	movwf	getMain_All_LightsStatus@status
 14614                           
 14615                           ;Main_B1.c: 420: return status;
 14616  1BCA  0820               	movf	getMain_All_LightsStatus@status,w
 14617  1BCB  0008               	return
 14618  1BCC                     __end_of_getMain_All_LightsStatus:	
 14619                           
 14620                           	psect	text98
 14621  0838                     __ptext98:	
 14622 ;; *************** function _getDimmerLights_PercentToValue *****************
 14623 ;; Defined at:
 14624 ;;		line 1039 in file "../src/Dimmer_B1.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;  value           1    wreg     unsigned char 
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;  value           1   62[BANK0 ] unsigned char 
 14629 ;;  i               3   63[BANK0 ] float 
 14630 ;; Return value:  Size  Location     Type
 14631 ;;                  1    wreg      unsigned char 
 14632 ;; Registers used:
 14633 ;;		wreg, status,2, status,0, pclath, cstack
 14634 ;; Tracked objects:
 14635 ;;		On entry : 0/0
 14636 ;;		On exit  : 0/0
 14637 ;;		Unchanged: 0/0
 14638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;Total ram usage:        6 bytes
 14644 ;; Hardware stack levels used:    1
 14645 ;; Hardware stack levels required when called:    6
 14646 ;; This function calls:
 14647 ;;		___awtoft
 14648 ;;		___ftadd
 14649 ;;		___ftdiv
 14650 ;;		___ftmul
 14651 ;;		___ftneg
 14652 ;;		___fttol
 14653 ;; This function is called by:
 14654 ;;		_setDimmerLights_OnOff
 14655 ;;		_setRFSW_AdjControl
 14656 ;; This function uses a non-reentrant model
 14657 ;;
 14658                           
 14659                           
 14660                           ;psect for function _getDimmerLights_PercentToValue
 14661  0838                     _getDimmerLights_PercentToValue:	
 14662                           
 14663                           ;incstack = 0
 14664                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14665                           ;getDimmerLights_PercentToValue@value stored from wreg
 14666  0838  0020               	movlb	0	; select bank0
 14667  0839  00DE               	movwf	getDimmerLights_PercentToValue@value
 14668                           
 14669                           ;Dimmer_B1.c: 1047: float i = ((char)(70*0.6)) - ((char)(10*0.6));
 14670  083A  3000               	movlw	0
 14671  083B  00DF               	movwf	getDimmerLights_PercentToValue@i
 14672  083C  3010               	movlw	16
 14673  083D  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 14674  083E  3042               	movlw	66
 14675  083F  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 14676                           
 14677                           ;Dimmer_B1.c: 1048: i /= 100;
 14678  0840  3000               	movlw	0
 14679  0841  00AE               	movwf	___ftdiv@f2
 14680  0842  30C8               	movlw	200
 14681  0843  00AF               	movwf	___ftdiv@f2+1
 14682  0844  3042               	movlw	66
 14683  0845  00B0               	movwf	___ftdiv@f2+2
 14684  0846  085F               	movf	getDimmerLights_PercentToValue@i,w
 14685  0847  00B1               	movwf	___ftdiv@f1
 14686  0848  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 14687  0849  00B2               	movwf	___ftdiv@f1+1
 14688  084A  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 14689  084B  00B3               	movwf	___ftdiv@f1+2
 14690  084C  318D  2537  3188   	fcall	___ftdiv
 14691  084F  0020               	movlb	0	; select bank0
 14692  0850  082E               	movf	?___ftdiv,w
 14693  0851  00DF               	movwf	getDimmerLights_PercentToValue@i
 14694  0852  082F               	movf	?___ftdiv+1,w
 14695  0853  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 14696  0854  0830               	movf	?___ftdiv+2,w
 14697  0855  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 14698                           
 14699                           ;Dimmer_B1.c: 1050: return (char) (((char)(70*0.6)) - ((100 - value) * i));
 14700  0856  085E               	movf	getDimmerLights_PercentToValue@value,w
 14701  0857  00DC               	movwf	??_getDimmerLights_PercentToValue
 14702  0858  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 14703  0859  09DC               	comf	??_getDimmerLights_PercentToValue,f
 14704  085A  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 14705  085B  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 14706  085C  1903               	skipnz
 14707  085D  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 14708  085E  085C               	movf	??_getDimmerLights_PercentToValue,w
 14709  085F  3E64               	addlw	100
 14710  0860  00A8               	movwf	___awtoft@c
 14711  0861  3000               	movlw	0
 14712  0862  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14713  0863  00A9               	movwf	___awtoft@c+1
 14714  0864  3190  20A3  3188   	fcall	___awtoft
 14715  0867  0020               	movlb	0	; select bank0
 14716  0868  0828               	movf	?___awtoft,w
 14717  0869  00B1               	movwf	___ftmul@f2
 14718  086A  0829               	movf	?___awtoft+1,w
 14719  086B  00B2               	movwf	___ftmul@f2+1
 14720  086C  082A               	movf	?___awtoft+2,w
 14721  086D  00B3               	movwf	___ftmul@f2+2
 14722  086E  085F               	movf	getDimmerLights_PercentToValue@i,w
 14723  086F  00AE               	movwf	___ftmul@f1
 14724  0870  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 14725  0871  00AF               	movwf	___ftmul@f1+1
 14726  0872  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 14727  0873  00B0               	movwf	___ftmul@f1+2
 14728  0874  318E  2691  3188   	fcall	___ftmul
 14729  0877  0020               	movlb	0	; select bank0
 14730  0878  082E               	movf	?___ftmul,w
 14731  0879  00BE               	movwf	___ftneg@f1
 14732  087A  082F               	movf	?___ftmul+1,w
 14733  087B  00BF               	movwf	___ftneg@f1+1
 14734  087C  0830               	movf	?___ftmul+2,w
 14735  087D  00C0               	movwf	___ftneg@f1+2
 14736  087E  319B  23B0  3188   	fcall	___ftneg
 14737  0881  0020               	movlb	0	; select bank0
 14738  0882  083E               	movf	?___ftneg,w
 14739  0883  00C4               	movwf	___ftadd@f2
 14740  0884  083F               	movf	?___ftneg+1,w
 14741  0885  00C5               	movwf	___ftadd@f2+1
 14742  0886  0840               	movf	?___ftneg+2,w
 14743  0887  00C6               	movwf	___ftadd@f2+2
 14744  0888  3000               	movlw	0
 14745  0889  00C1               	movwf	___ftadd@f1
 14746  088A  3028               	movlw	40
 14747  088B  00C2               	movwf	___ftadd@f1+1
 14748  088C  3042               	movlw	66
 14749  088D  00C3               	movwf	___ftadd@f1+2
 14750  088E  3183  2382  3188   	fcall	___ftadd
 14751  0891  0020               	movlb	0	; select bank0
 14752  0892  0841               	movf	?___ftadd,w
 14753  0893  00CE               	movwf	___fttol@f1
 14754  0894  0842               	movf	?___ftadd+1,w
 14755  0895  00CF               	movwf	___fttol@f1+1
 14756  0896  0843               	movf	?___ftadd+2,w
 14757  0897  00D0               	movwf	___fttol@f1+2
 14758  0898  318C  2424         	fcall	___fttol
 14759  089A  0020               	movlb	0	; select bank0
 14760  089B  084E               	movf	?___fttol,w
 14761  089C  0008               	return
 14762  089D                     __end_of_getDimmerLights_PercentToValue:	
 14763                           
 14764                           	psect	text99
 14765  0E91                     __ptext99:	
 14766 ;; *************** function ___ftmul *****************
 14767 ;; Defined at:
 14768 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14769 ;; Parameters:    Size  Location     Type
 14770 ;;  f1              3   14[BANK0 ] float 
 14771 ;;  f2              3   17[BANK0 ] float 
 14772 ;; Auto vars:     Size  Location     Type
 14773 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 14774 ;;  sign            1   29[BANK0 ] unsigned char 
 14775 ;;  cntr            1   28[BANK0 ] unsigned char 
 14776 ;;  exp             1   24[BANK0 ] unsigned char 
 14777 ;; Return value:  Size  Location     Type
 14778 ;;                  3   14[BANK0 ] float 
 14779 ;; Registers used:
 14780 ;;		wreg, status,2, status,0, pclath, cstack
 14781 ;; Tracked objects:
 14782 ;;		On entry : 0/0
 14783 ;;		On exit  : 0/0
 14784 ;;		Unchanged: 0/0
 14785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14786 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14787 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14788 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14789 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14790 ;;Total ram usage:       16 bytes
 14791 ;; Hardware stack levels used:    1
 14792 ;; Hardware stack levels required when called:    5
 14793 ;; This function calls:
 14794 ;;		___ftpack
 14795 ;; This function is called by:
 14796 ;;		_getDimmerLights_PercentToValue
 14797 ;; This function uses a non-reentrant model
 14798 ;;
 14799                           
 14800                           
 14801                           ;psect for function ___ftmul
 14802  0E91                     ___ftmul:	
 14803                           
 14804                           ;incstack = 0
 14805                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14806  0E91  0020               	movlb	0	; select bank0
 14807  0E92  082E               	movf	___ftmul@f1,w
 14808  0E93  00B4               	movwf	??___ftmul
 14809  0E94  082F               	movf	___ftmul@f1+1,w
 14810  0E95  00B5               	movwf	??___ftmul+1
 14811  0E96  0830               	movf	___ftmul@f1+2,w
 14812  0E97  00B6               	movwf	??___ftmul+2
 14813  0E98  1003               	clrc
 14814  0E99  0D35               	rlf	??___ftmul+1,w
 14815  0E9A  0D36               	rlf	??___ftmul+2,w
 14816  0E9B  00B7               	movwf	??___ftmul+3
 14817  0E9C  0837               	movf	??___ftmul+3,w
 14818  0E9D  00B8               	movwf	___ftmul@exp
 14819  0E9E  08B8               	movf	___ftmul@exp,f
 14820  0E9F  1D03               	skipz
 14821  0EA0  2EA8               	goto	l5850
 14822  0EA1  3000               	movlw	0
 14823  0EA2  00AE               	movwf	?___ftmul
 14824  0EA3  3000               	movlw	0
 14825  0EA4  00AF               	movwf	?___ftmul+1
 14826  0EA5  3000               	movlw	0
 14827  0EA6  00B0               	movwf	?___ftmul+2
 14828  0EA7  0008               	return
 14829  0EA8                     l5850:	
 14830  0EA8  0831               	movf	___ftmul@f2,w
 14831  0EA9  00B4               	movwf	??___ftmul
 14832  0EAA  0832               	movf	___ftmul@f2+1,w
 14833  0EAB  00B5               	movwf	??___ftmul+1
 14834  0EAC  0833               	movf	___ftmul@f2+2,w
 14835  0EAD  00B6               	movwf	??___ftmul+2
 14836  0EAE  1003               	clrc
 14837  0EAF  0D35               	rlf	??___ftmul+1,w
 14838  0EB0  0D36               	rlf	??___ftmul+2,w
 14839  0EB1  00B7               	movwf	??___ftmul+3
 14840  0EB2  0837               	movf	??___ftmul+3,w
 14841  0EB3  00BD               	movwf	___ftmul@sign
 14842  0EB4  08BD               	movf	___ftmul@sign,f
 14843  0EB5  1D03               	skipz
 14844  0EB6  2EBE               	goto	l5856
 14845  0EB7  3000               	movlw	0
 14846  0EB8  00AE               	movwf	?___ftmul
 14847  0EB9  3000               	movlw	0
 14848  0EBA  00AF               	movwf	?___ftmul+1
 14849  0EBB  3000               	movlw	0
 14850  0EBC  00B0               	movwf	?___ftmul+2
 14851  0EBD  0008               	return
 14852  0EBE                     l5856:	
 14853  0EBE  083D               	movf	___ftmul@sign,w
 14854  0EBF  3E7B               	addlw	123
 14855  0EC0  00B4               	movwf	??___ftmul
 14856  0EC1  0834               	movf	??___ftmul,w
 14857  0EC2  07B8               	addwf	___ftmul@exp,f
 14858  0EC3  082E               	movf	___ftmul@f1,w
 14859  0EC4  00B4               	movwf	??___ftmul
 14860  0EC5  082F               	movf	___ftmul@f1+1,w
 14861  0EC6  00B5               	movwf	??___ftmul+1
 14862  0EC7  0830               	movf	___ftmul@f1+2,w
 14863  0EC8  00B6               	movwf	??___ftmul+2
 14864  0EC9  3010               	movlw	16
 14865  0ECA                     u4825:	
 14866  0ECA  36B6               	lsrf	??___ftmul+2,f
 14867  0ECB  0CB5               	rrf	??___ftmul+1,f
 14868  0ECC  0CB4               	rrf	??___ftmul,f
 14869  0ECD  0B89               	decfsz	9,f
 14870  0ECE  2ECA               	goto	u4825
 14871  0ECF  0834               	movf	??___ftmul,w
 14872  0ED0  00B7               	movwf	??___ftmul+3
 14873  0ED1  0837               	movf	??___ftmul+3,w
 14874  0ED2  00BD               	movwf	___ftmul@sign
 14875  0ED3  0831               	movf	___ftmul@f2,w
 14876  0ED4  00B4               	movwf	??___ftmul
 14877  0ED5  0832               	movf	___ftmul@f2+1,w
 14878  0ED6  00B5               	movwf	??___ftmul+1
 14879  0ED7  0833               	movf	___ftmul@f2+2,w
 14880  0ED8  00B6               	movwf	??___ftmul+2
 14881  0ED9  3010               	movlw	16
 14882  0EDA                     u4835:	
 14883  0EDA  36B6               	lsrf	??___ftmul+2,f
 14884  0EDB  0CB5               	rrf	??___ftmul+1,f
 14885  0EDC  0CB4               	rrf	??___ftmul,f
 14886  0EDD  0B89               	decfsz	9,f
 14887  0EDE  2EDA               	goto	u4835
 14888  0EDF  0834               	movf	??___ftmul,w
 14889  0EE0  00B7               	movwf	??___ftmul+3
 14890  0EE1  0837               	movf	??___ftmul+3,w
 14891  0EE2  06BD               	xorwf	___ftmul@sign,f
 14892  0EE3  3080               	movlw	128
 14893  0EE4  00B4               	movwf	??___ftmul
 14894  0EE5  0834               	movf	??___ftmul,w
 14895  0EE6  05BD               	andwf	___ftmul@sign,f
 14896  0EE7  17AF               	bsf	___ftmul@f1+1,7
 14897  0EE8  17B2               	bsf	___ftmul@f2+1,7
 14898  0EE9  30FF               	movlw	255
 14899  0EEA  05B1               	andwf	___ftmul@f2,f
 14900  0EEB  30FF               	movlw	255
 14901  0EEC  05B2               	andwf	___ftmul@f2+1,f
 14902  0EED  3000               	movlw	0
 14903  0EEE  05B3               	andwf	___ftmul@f2+2,f
 14904  0EEF  3000               	movlw	0
 14905  0EF0  00B9               	movwf	___ftmul@f3_as_product
 14906  0EF1  3000               	movlw	0
 14907  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 14908  0EF3  3000               	movlw	0
 14909  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 14910  0EF5  3007               	movlw	7
 14911  0EF6  00B4               	movwf	??___ftmul
 14912  0EF7  0834               	movf	??___ftmul,w
 14913  0EF8  00BC               	movwf	___ftmul@cntr
 14914  0EF9                     l5868:	
 14915  0EF9  1C2E               	btfss	___ftmul@f1,0
 14916  0EFA  2F01               	goto	l5872
 14917  0EFB  0831               	movf	___ftmul@f2,w
 14918  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 14919  0EFD  0832               	movf	___ftmul@f2+1,w
 14920  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 14921  0EFF  0833               	movf	___ftmul@f2+2,w
 14922  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 14923  0F01                     l5872:	
 14924  0F01  3001               	movlw	1
 14925  0F02                     u4855:	
 14926  0F02  36B0               	lsrf	___ftmul@f1+2,f
 14927  0F03  0CAF               	rrf	___ftmul@f1+1,f
 14928  0F04  0CAE               	rrf	___ftmul@f1,f
 14929  0F05  0B89               	decfsz	9,f
 14930  0F06  2F02               	goto	u4855
 14931  0F07  3001               	movlw	1
 14932  0F08                     u4865:	
 14933  0F08  35B1               	lslf	___ftmul@f2,f
 14934  0F09  0DB2               	rlf	___ftmul@f2+1,f
 14935  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 14936  0F0B  0B89               	decfsz	9,f
 14937  0F0C  2F08               	goto	u4865
 14938  0F0D  3001               	movlw	1
 14939  0F0E  02BC               	subwf	___ftmul@cntr,f
 14940  0F0F  1D03               	btfss	3,2
 14941  0F10  2EF9               	goto	l5868
 14942  0F11  3009               	movlw	9
 14943  0F12  00B4               	movwf	??___ftmul
 14944  0F13  0834               	movf	??___ftmul,w
 14945  0F14  00BC               	movwf	___ftmul@cntr
 14946  0F15                     l5880:	
 14947  0F15  1C2E               	btfss	___ftmul@f1,0
 14948  0F16  2F1D               	goto	l5884
 14949  0F17  0831               	movf	___ftmul@f2,w
 14950  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 14951  0F19  0832               	movf	___ftmul@f2+1,w
 14952  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 14953  0F1B  0833               	movf	___ftmul@f2+2,w
 14954  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 14955  0F1D                     l5884:	
 14956  0F1D  3001               	movlw	1
 14957  0F1E                     u4895:	
 14958  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 14959  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 14960  0F20  0CAE               	rrf	___ftmul@f1,f
 14961  0F21  0B89               	decfsz	9,f
 14962  0F22  2F1E               	goto	u4895
 14963  0F23  3001               	movlw	1
 14964  0F24                     u4905:	
 14965  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 14966  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 14967  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 14968  0F27  0B89               	decfsz	9,f
 14969  0F28  2F24               	goto	u4905
 14970  0F29  3001               	movlw	1
 14971  0F2A  02BC               	subwf	___ftmul@cntr,f
 14972  0F2B  1D03               	btfss	3,2
 14973  0F2C  2F15               	goto	l5880
 14974  0F2D  0839               	movf	___ftmul@f3_as_product,w
 14975  0F2E  00A0               	movwf	___ftpack@arg
 14976  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 14977  0F30  00A1               	movwf	___ftpack@arg+1
 14978  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 14979  0F32  00A2               	movwf	___ftpack@arg+2
 14980  0F33  0838               	movf	___ftmul@exp,w
 14981  0F34  00B4               	movwf	??___ftmul
 14982  0F35  0834               	movf	??___ftmul,w
 14983  0F36  00A3               	movwf	___ftpack@exp
 14984  0F37  083D               	movf	___ftmul@sign,w
 14985  0F38  00B5               	movwf	??___ftmul+1
 14986  0F39  0835               	movf	??___ftmul+1,w
 14987  0F3A  00A4               	movwf	___ftpack@sign
 14988  0F3B  3196  2671         	fcall	___ftpack
 14989  0F3D  0020               	movlb	0	; select bank0
 14990  0F3E  0820               	movf	?___ftpack,w
 14991  0F3F  00AE               	movwf	?___ftmul
 14992  0F40  0821               	movf	?___ftpack+1,w
 14993  0F41  00AF               	movwf	?___ftmul+1
 14994  0F42  0822               	movf	?___ftpack+2,w
 14995  0F43  00B0               	movwf	?___ftmul+2
 14996  0F44  0008               	return
 14997  0F45                     __end_of___ftmul:	
 14998                           
 14999                           	psect	text100
 15000  1CD7                     __ptext100:	
 15001 ;; *************** function _getDelayOff_GO *****************
 15002 ;; Defined at:
 15003 ;;		line 114 in file "../src/DelayOff_B1.c"
 15004 ;; Parameters:    Size  Location     Type
 15005 ;;  sw              1    wreg     unsigned char 
 15006 ;; Auto vars:     Size  Location     Type
 15007 ;;  sw              1    2[BANK0 ] unsigned char 
 15008 ;;  go              1    3[BANK0 ] unsigned char 
 15009 ;; Return value:  Size  Location     Type
 15010 ;;                  1    wreg      unsigned char 
 15011 ;; Registers used:
 15012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15013 ;; Tracked objects:
 15014 ;;		On entry : 0/0
 15015 ;;		On exit  : 0/0
 15016 ;;		Unchanged: 0/0
 15017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;Total ram usage:        2 bytes
 15023 ;; Hardware stack levels used:    1
 15024 ;; Hardware stack levels required when called:    5
 15025 ;; This function calls:
 15026 ;;		_DelayOffPointSelect
 15027 ;; This function is called by:
 15028 ;;		_setDimmerLights_OnOff
 15029 ;; This function uses a non-reentrant model
 15030 ;;
 15031                           
 15032                           
 15033                           ;psect for function _getDelayOff_GO
 15034  1CD7                     _getDelayOff_GO:	
 15035                           
 15036                           ;incstack = 0
 15037                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15038                           ;getDelayOff_GO@sw stored from wreg
 15039  1CD7  0020               	movlb	0	; select bank0
 15040  1CD8  00A2               	movwf	getDelayOff_GO@sw
 15041                           
 15042                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15043  1CD9  0822               	movf	getDelayOff_GO@sw,w
 15044  1CDA  319B  23F7         	fcall	_DelayOffPointSelect
 15045                           
 15046                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15047  1CDC  0021               	movlb	1	; select bank1
 15048  1CDD  0851               	movf	_DelayOff^(0+128),w
 15049  1CDE  0086               	movwf	6
 15050  1CDF  3001               	movlw	1	; select bank2/3
 15051  1CE0  0087               	movwf	7
 15052  1CE1  3000               	movlw	0
 15053  1CE2  1881               	btfsc	1,1
 15054  1CE3  3001               	movlw	1
 15055  1CE4  0020               	movlb	0	; select bank0
 15056  1CE5  00A3               	movwf	getDelayOff_GO@go
 15057                           
 15058                           ;DelayOff_B1.c: 117: return go;
 15059  1CE6  0823               	movf	getDelayOff_GO@go,w
 15060  1CE7  0008               	return
 15061  1CE8                     __end_of_getDelayOff_GO:	
 15062                           
 15063                           	psect	text101
 15064  1D1B                     __ptext101:	
 15065 ;; *************** function _getCmd_Status *****************
 15066 ;; Defined at:
 15067 ;;		line 659 in file "../src/Main_B1.c"
 15068 ;; Parameters:    Size  Location     Type
 15069 ;;  number          1    wreg     unsigned char 
 15070 ;; Auto vars:     Size  Location     Type
 15071 ;;  number          1    0[BANK0 ] unsigned char 
 15072 ;;  cmd             1    1[BANK0 ] unsigned char 
 15073 ;; Return value:  Size  Location     Type
 15074 ;;                  1    wreg      unsigned char 
 15075 ;; Registers used:
 15076 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15077 ;; Tracked objects:
 15078 ;;		On entry : 0/0
 15079 ;;		On exit  : 0/0
 15080 ;;		Unchanged: 0/0
 15081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15085 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;Total ram usage:        2 bytes
 15087 ;; Hardware stack levels used:    1
 15088 ;; Hardware stack levels required when called:    4
 15089 ;; This function calls:
 15090 ;;		Nothing
 15091 ;; This function is called by:
 15092 ;;		_setDimmerLights_OnOff
 15093 ;; This function uses a non-reentrant model
 15094 ;;
 15095                           
 15096                           
 15097                           ;psect for function _getCmd_Status
 15098  1D1B                     _getCmd_Status:	
 15099                           
 15100                           ;incstack = 0
 15101                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15102                           ;getCmd_Status@number stored from wreg
 15103  1D1B  0020               	movlb	0	; select bank0
 15104  1D1C  00A0               	movwf	getCmd_Status@number
 15105                           
 15106                           ;Main_B1.c: 660: char cmd = 0;
 15107  1D1D  01A1               	clrf	getCmd_Status@cmd
 15108                           
 15109                           ;Main_B1.c: 661: switch (number) {
 15110  1D1E  2D26               	goto	l6456
 15111  1D1F                     l6452:	
 15112                           ;Main_B1.c: 662: case 1:
 15113                           
 15114                           
 15115                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15116  1D1F  3000               	movlw	0
 15117  1D20  0021               	movlb	1	; select bank1
 15118  1D21  1850               	btfsc	_Cmd^(0+128),0
 15119  1D22  3001               	movlw	1
 15120  1D23  0020               	movlb	0	; select bank0
 15121  1D24  00A1               	movwf	getCmd_Status@cmd
 15122                           
 15123                           ;Main_B1.c: 665: }
 15124                           
 15125                           ;Main_B1.c: 664: break;
 15126  1D25  2D2B               	goto	l6458
 15127  1D26                     l6456:	
 15128  1D26  0820               	movf	getCmd_Status@number,w
 15129                           
 15130                           ; Switch size 1, requested type "space"
 15131                           ; Number of cases is 1, Range of values is 1 to 1
 15132                           ; switch strategies available:
 15133                           ; Name         Instructions Cycles
 15134                           ; simple_byte            4     3 (average)
 15135                           ; direct_byte           11     9 (fixed)
 15136                           ; jumptable            263     9 (fixed)
 15137                           ;	Chosen strategy is simple_byte
 15138  1D27  3A01               	xorlw	1	; case 1
 15139  1D28  1903               	skipnz
 15140  1D29  2D1F               	goto	l6452
 15141  1D2A  2D2B               	goto	l6458
 15142  1D2B                     l6458:	
 15143                           
 15144                           ;Main_B1.c: 666: return cmd;
 15145  1D2B  0821               	movf	getCmd_Status@cmd,w
 15146  1D2C  0008               	return
 15147  1D2D                     __end_of_getCmd_Status:	
 15148                           
 15149                           	psect	text102
 15150  1473                     __ptext102:	
 15151 ;; *************** function _setDimmerLights_Dimming *****************
 15152 ;; Defined at:
 15153 ;;		line 883 in file "../src/Dimmer_B1.c"
 15154 ;; Parameters:    Size  Location     Type
 15155 ;;  lights          1    wreg     unsigned char 
 15156 ;;  status          1   74[BANK0 ] unsigned char 
 15157 ;; Auto vars:     Size  Location     Type
 15158 ;;  lights          1   76[BANK0 ] unsigned char 
 15159 ;; Return value:  Size  Location     Type
 15160 ;;		None               void
 15161 ;; Registers used:
 15162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15163 ;; Tracked objects:
 15164 ;;		On entry : 0/0
 15165 ;;		On exit  : 0/0
 15166 ;;		Unchanged: 0/0
 15167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15168 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15171 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;Total ram usage:        3 bytes
 15173 ;; Hardware stack levels used:    1
 15174 ;; Hardware stack levels required when called:    7
 15175 ;; This function calls:
 15176 ;;		_getDimmerIntr_DimmingValue
 15177 ;;		_getDimmerLights_ValueToPercent
 15178 ;;		_setBuz
 15179 ;;		_setDimmerIntr_Dimming_Sw
 15180 ;;		_setDimmerIntr_MaxmumValue
 15181 ;;		_setDimmerLights_Line
 15182 ;;		_setProductData
 15183 ;;		_setRF_DimmerLights
 15184 ;;		_setRF_TransceiveGO
 15185 ;;		_setTxData
 15186 ;; This function is called by:
 15187 ;;		_setDimmerLights_Main
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function _setDimmerLights_Dimming
 15193  1473                     _setDimmerLights_Dimming:	
 15194                           
 15195                           ;incstack = 0
 15196                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15197                           ;setDimmerLights_Dimming@lights stored from wreg
 15198  1473  0020               	movlb	0	; select bank0
 15199  1474  00EC               	movwf	setDimmerLights_Dimming@lights
 15200                           
 15201                           ;Dimmer_B1.c: 884: if (status == 1) {
 15202  1475  086A               	movf	setDimmerLights_Dimming@status,w
 15203  1476  3A01               	xorlw	1
 15204  1477  1D03               	skipz
 15205  1478  2C8C               	goto	l6694
 15206                           
 15207                           ;Dimmer_B1.c: 885: setDimmerIntr_Dimming_Sw(lights, 1);
 15208  1479  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15209  147A  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15210  147B  086C               	movf	setDimmerLights_Dimming@lights,w
 15211  147C  319E  2652  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15212                           
 15213                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 15214  147F  3000               	movlw	0
 15215  1480  319D  2575  3194   	fcall	_setRF_TransceiveGO
 15216                           
 15217                           ;Dimmer_B1.c: 890: setBuz(1, 100);
 15218  1483  3064               	movlw	100
 15219  1484  0020               	movlb	0	; select bank0
 15220  1485  00A9               	movwf	setBuz@time
 15221  1486  3000               	movlw	0
 15222  1487  00AA               	movwf	setBuz@time+1
 15223  1488  3001               	movlw	1
 15224  1489  3195  25BD         	fcall	_setBuz
 15225                           
 15226                           ;Dimmer_B1.c: 891: } else if (status == 0) {
 15227  148B  0008               	return
 15228  148C                     l6694:	
 15229  148C  0020               	movlb	0	; select bank0
 15230  148D  08EA               	movf	setDimmerLights_Dimming@status,f
 15231  148E  1D03               	skipz
 15232  148F  0008               	return
 15233                           
 15234                           ;Dimmer_B1.c: 892: setDimmerIntr_Dimming_Sw(lights, 0);
 15235  1490  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15236  1491  086C               	movf	setDimmerLights_Dimming@lights,w
 15237  1492  319E  2652  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15238                           
 15239                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 15240  1495  0023               	movlb	3	; select bank3
 15241  1496  1120               	bcf	_Dimmer^(0+384),2
 15242                           
 15243                           ;Dimmer_B1.c: 896: setDimmerLights_Line(lights);
 15244  1497  0020               	movlb	0	; select bank0
 15245  1498  086C               	movf	setDimmerLights_Dimming@lights,w
 15246  1499  319C  24C6  3194   	fcall	_setDimmerLights_Line
 15247                           
 15248                           ;Dimmer_B1.c: 899: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15249  149C  0020               	movlb	0	; select bank0
 15250  149D  086C               	movf	setDimmerLights_Dimming@lights,w
 15251  149E  319C  2487  3194   	fcall	_getDimmerIntr_DimmingValue
 15252  14A1  0020               	movlb	0	; select bank0
 15253  14A2  00EB               	movwf	??_setDimmerLights_Dimming
 15254  14A3  086B               	movf	??_setDimmerLights_Dimming,w
 15255  14A4  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15256  14A5  086C               	movf	setDimmerLights_Dimming@lights,w
 15257  14A6  319C  241B  3194   	fcall	_setDimmerIntr_MaxmumValue
 15258                           
 15259                           ;Dimmer_B1.c: 900: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15260  14A9  0020               	movlb	0	; select bank0
 15261  14AA  086C               	movf	setDimmerLights_Dimming@lights,w
 15262  14AB  319C  2487  3194   	fcall	_getDimmerIntr_DimmingValue
 15263  14AE  3197  2736  3194   	fcall	_getDimmerLights_ValueToPercent
 15264  14B1  0020               	movlb	0	; select bank0
 15265  14B2  00EB               	movwf	??_setDimmerLights_Dimming
 15266  14B3  086B               	movf	??_setDimmerLights_Dimming,w
 15267  14B4  00E2               	movwf	setProductData@value
 15268  14B5  086C               	movf	setDimmerLights_Dimming@lights,w
 15269  14B6  3E14               	addlw	20
 15270  14B7  319C  240F  3194   	fcall	_setProductData
 15271                           
 15272                           ;Dimmer_B1.c: 910: setRF_DimmerLights(lights, 1);
 15273  14BA  0020               	movlb	0	; select bank0
 15274  14BB  01E5               	clrf	setRF_DimmerLights@on
 15275  14BC  0AE5               	incf	setRF_DimmerLights@on,f
 15276  14BD  086C               	movf	setDimmerLights_Dimming@lights,w
 15277  14BE  3197  279B  3194   	fcall	_setRF_DimmerLights
 15278                           
 15279                           ;Dimmer_B1.c: 911: setTxData();
 15280  14C1  318F  2745         	fcall	_setTxData
 15281  14C3  0008               	return
 15282  14C4                     __end_of_setDimmerLights_Dimming:	
 15283                           
 15284                           	psect	text103
 15285  0F45                     __ptext103:	
 15286 ;; *************** function _setTxData *****************
 15287 ;; Defined at:
 15288 ;;		line 183 in file "../src/RF_Control_B1.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;		None
 15291 ;; Auto vars:     Size  Location     Type
 15292 ;;  i               1    0        unsigned char 
 15293 ;; Return value:  Size  Location     Type
 15294 ;;		None               void
 15295 ;; Registers used:
 15296 ;;		wreg, fsr1l, fsr1h, status,2
 15297 ;; Tracked objects:
 15298 ;;		On entry : 0/0
 15299 ;;		On exit  : 0/0
 15300 ;;		Unchanged: 0/0
 15301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;Total ram usage:        1 bytes
 15307 ;; Hardware stack levels used:    1
 15308 ;; Hardware stack levels required when called:    4
 15309 ;; This function calls:
 15310 ;;		Nothing
 15311 ;; This function is called by:
 15312 ;;		_setDimmerLights_OnOff
 15313 ;;		_setDimmerLights_Dimming
 15314 ;;		_getRxData
 15315 ;;		_setControl_Lights_Table
 15316 ;;		_setRFSW_Control
 15317 ;;		_setRFSW_AdjControl
 15318 ;; This function uses a non-reentrant model
 15319 ;;
 15320                           
 15321                           
 15322                           ;psect for function _setTxData
 15323  0F45                     _setTxData:	
 15324                           
 15325                           ;RF_Control_B1.c: 184: char i;
 15326                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15327                           
 15328                           ;incstack = 0
 15329                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15330  0F45  0021               	movlb	1	; select bank1
 15331  0F46  1C20               	btfss	_RF1^(0+128),0
 15332  0F47  0008               	return
 15333                           
 15334                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15335  0F48  1520               	bsf	_RF1^(0+128),2
 15336                           
 15337                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15338  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15339  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15340                           
 15341                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15342  0F4B  3063               	movlw	99
 15343  0F4C  0020               	movlb	0	; select bank0
 15344  0F4D  00A0               	movwf	??_setTxData
 15345  0F4E  0820               	movf	??_setTxData,w
 15346  0F4F  0022               	movlb	2	; select bank2
 15347  0F50  00A0               	movwf	_RF_Data^(0+256)
 15348                           
 15349                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15350  0F51  3002               	movlw	2
 15351  0F52  0020               	movlb	0	; select bank0
 15352  0F53  00A0               	movwf	??_setTxData
 15353  0F54  0820               	movf	??_setTxData,w
 15354  0F55  0022               	movlb	2	; select bank2
 15355  0F56  00A1               	movwf	(_RF_Data^(0+256)+1)
 15356                           
 15357                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15358  0F57  0021               	movlb	1	; select bank1
 15359  0F58  086E               	movf	_product^(0+128),w
 15360  0F59  0086               	movwf	6
 15361  0F5A  3002               	movlw	2	; select bank4/5
 15362  0F5B  0087               	movwf	7
 15363  0F5C  3002               	movlw	2	; select bank4/5
 15364  0F5D  3F42               	moviw [2]fsr1
 15365  0F5E  0022               	movlb	2	; select bank2
 15366  0F5F  00A2               	movwf	(_RF_Data^(0+256)+2)
 15367                           
 15368                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15369  0F60  0021               	movlb	1	; select bank1
 15370  0F61  086E               	movf	_product^(0+128),w
 15371  0F62  0086               	movwf	6
 15372  0F63  3002               	movlw	2	; select bank4/5
 15373  0F64  0087               	movwf	7
 15374  0F65  3002               	movlw	2	; select bank4/5
 15375  0F66  3F43               	moviw [3]fsr1
 15376  0F67  0022               	movlb	2	; select bank2
 15377  0F68  00A3               	movwf	(_RF_Data^(0+256)+3)
 15378                           
 15379                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15380  0F69  0021               	movlb	1	; select bank1
 15381  0F6A  086E               	movf	_product^(0+128),w
 15382  0F6B  0086               	movwf	6
 15383  0F6C  3002               	movlw	2	; select bank4/5
 15384  0F6D  0087               	movwf	7
 15385  0F6E  3002               	movlw	2	; select bank4/5
 15386  0F6F  3F44               	moviw [4]fsr1
 15387  0F70  0022               	movlb	2	; select bank2
 15388  0F71  00A4               	movwf	(_RF_Data^(0+256)+4)
 15389                           
 15390                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15391  0F72  0021               	movlb	1	; select bank1
 15392  0F73  086E               	movf	_product^(0+128),w
 15393  0F74  0086               	movwf	6
 15394  0F75  3002               	movlw	2	; select bank4/5
 15395  0F76  0087               	movwf	7
 15396  0F77  3002               	movlw	2	; select bank4/5
 15397  0F78  3F45               	moviw [5]fsr1
 15398  0F79  0022               	movlb	2	; select bank2
 15399  0F7A  00A5               	movwf	(_RF_Data^(0+256)+5)
 15400                           
 15401                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15402  0F7B  0021               	movlb	1	; select bank1
 15403  0F7C  086E               	movf	_product^(0+128),w
 15404  0F7D  0086               	movwf	6
 15405  0F7E  3002               	movlw	2	; select bank4/5
 15406  0F7F  0087               	movwf	7
 15407  0F80  3002               	movlw	2	; select bank4/5
 15408  0F81  3F46               	moviw [6]fsr1
 15409  0F82  0022               	movlb	2	; select bank2
 15410  0F83  00A6               	movwf	(_RF_Data^(0+256)+6)
 15411                           
 15412                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15413  0F84  0021               	movlb	1	; select bank1
 15414  0F85  086E               	movf	_product^(0+128),w
 15415  0F86  0086               	movwf	6
 15416  0F87  3002               	movlw	2	; select bank4/5
 15417  0F88  0087               	movwf	7
 15418  0F89  3002               	movlw	2	; select bank4/5
 15419  0F8A  3F47               	moviw [7]fsr1
 15420  0F8B  0022               	movlb	2	; select bank2
 15421  0F8C  00A7               	movwf	(_RF_Data^(0+256)+7)
 15422                           
 15423                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15424  0F8D  0021               	movlb	1	; select bank1
 15425  0F8E  086E               	movf	_product^(0+128),w
 15426  0F8F  0086               	movwf	6
 15427  0F90  3002               	movlw	2	; select bank4/5
 15428  0F91  0087               	movwf	7
 15429  0F92  3002               	movlw	2	; select bank4/5
 15430  0F93  3F48               	moviw [8]fsr1
 15431  0F94  0022               	movlb	2	; select bank2
 15432  0F95  00A8               	movwf	(_RF_Data^(0+256)+8)
 15433                           
 15434                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15435  0F96  0021               	movlb	1	; select bank1
 15436  0F97  086E               	movf	_product^(0+128),w
 15437  0F98  0086               	movwf	6
 15438  0F99  3002               	movlw	2	; select bank4/5
 15439  0F9A  0087               	movwf	7
 15440  0F9B  3002               	movlw	2	; select bank4/5
 15441  0F9C  3F49               	moviw [9]fsr1
 15442  0F9D  0022               	movlb	2	; select bank2
 15443  0F9E  00A9               	movwf	(_RF_Data^(0+256)+9)
 15444                           
 15445                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15446  0F9F  0021               	movlb	1	; select bank1
 15447  0FA0  086E               	movf	_product^(0+128),w
 15448  0FA1  0086               	movwf	6
 15449  0FA2  3002               	movlw	2	; select bank4/5
 15450  0FA3  0087               	movwf	7
 15451  0FA4  3002               	movlw	2	; select bank4/5
 15452  0FA5  3F4A               	moviw [10]fsr1
 15453  0FA6  0022               	movlb	2	; select bank2
 15454  0FA7  00AA               	movwf	(_RF_Data^(0+256)+10)
 15455                           
 15456                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15457  0FA8  0021               	movlb	1	; select bank1
 15458  0FA9  086E               	movf	_product^(0+128),w
 15459  0FAA  0086               	movwf	6
 15460  0FAB  3002               	movlw	2	; select bank4/5
 15461  0FAC  0087               	movwf	7
 15462  0FAD  3002               	movlw	2	; select bank4/5
 15463  0FAE  3F4B               	moviw [11]fsr1
 15464  0FAF  0022               	movlb	2	; select bank2
 15465  0FB0  00AB               	movwf	(_RF_Data^(0+256)+11)
 15466                           
 15467                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15468  0FB1  0021               	movlb	1	; select bank1
 15469  0FB2  086E               	movf	_product^(0+128),w
 15470  0FB3  0086               	movwf	6
 15471  0FB4  3002               	movlw	2	; select bank4/5
 15472  0FB5  0087               	movwf	7
 15473  0FB6  3002               	movlw	2	; select bank4/5
 15474  0FB7  3F4C               	moviw [12]fsr1
 15475  0FB8  0022               	movlb	2	; select bank2
 15476  0FB9  00AC               	movwf	(_RF_Data^(0+256)+12)
 15477                           
 15478                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15479  0FBA  0021               	movlb	1	; select bank1
 15480  0FBB  086E               	movf	_product^(0+128),w
 15481  0FBC  0086               	movwf	6
 15482  0FBD  3002               	movlw	2	; select bank4/5
 15483  0FBE  0087               	movwf	7
 15484  0FBF  3002               	movlw	2	; select bank4/5
 15485  0FC0  3F4D               	moviw [13]fsr1
 15486  0FC1  0022               	movlb	2	; select bank2
 15487  0FC2  00AD               	movwf	(_RF_Data^(0+256)+13)
 15488                           
 15489                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15490  0FC3  0021               	movlb	1	; select bank1
 15491  0FC4  086E               	movf	_product^(0+128),w
 15492  0FC5  0086               	movwf	6
 15493  0FC6  3002               	movlw	2	; select bank4/5
 15494  0FC7  0087               	movwf	7
 15495  0FC8  3002               	movlw	2	; select bank4/5
 15496  0FC9  3F4E               	moviw [14]fsr1
 15497  0FCA  0022               	movlb	2	; select bank2
 15498  0FCB  00AE               	movwf	(_RF_Data^(0+256)+14)
 15499                           
 15500                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15501  0FCC  0021               	movlb	1	; select bank1
 15502  0FCD  086E               	movf	_product^(0+128),w
 15503  0FCE  0086               	movwf	6
 15504  0FCF  3002               	movlw	2	; select bank4/5
 15505  0FD0  0087               	movwf	7
 15506  0FD1  3002               	movlw	2	; select bank4/5
 15507  0FD2  3F4F               	moviw [15]fsr1
 15508  0FD3  0022               	movlb	2	; select bank2
 15509  0FD4  00AF               	movwf	(_RF_Data^(0+256)+15)
 15510                           
 15511                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15512  0FD5  0021               	movlb	1	; select bank1
 15513  0FD6  086E               	movf	_product^(0+128),w
 15514  0FD7  0086               	movwf	6
 15515  0FD8  3002               	movlw	2	; select bank4/5
 15516  0FD9  0087               	movwf	7
 15517  0FDA  3002               	movlw	2	; select bank4/5
 15518  0FDB  3F50               	moviw [16]fsr1
 15519  0FDC  0022               	movlb	2	; select bank2
 15520  0FDD  00B0               	movwf	(_RF_Data^(0+256)+16)
 15521                           
 15522                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15523  0FDE  0021               	movlb	1	; select bank1
 15524  0FDF  086E               	movf	_product^(0+128),w
 15525  0FE0  0086               	movwf	6
 15526  0FE1  3002               	movlw	2	; select bank4/5
 15527  0FE2  0087               	movwf	7
 15528  0FE3  3002               	movlw	2	; select bank4/5
 15529  0FE4  3F51               	moviw [17]fsr1
 15530  0FE5  0022               	movlb	2	; select bank2
 15531  0FE6  00B1               	movwf	(_RF_Data^(0+256)+17)
 15532                           
 15533                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15534  0FE7  0021               	movlb	1	; select bank1
 15535  0FE8  086E               	movf	_product^(0+128),w
 15536  0FE9  0086               	movwf	6
 15537  0FEA  3002               	movlw	2	; select bank4/5
 15538  0FEB  0087               	movwf	7
 15539  0FEC  3002               	movlw	2	; select bank4/5
 15540  0FED  3F52               	moviw [18]fsr1
 15541  0FEE  0022               	movlb	2	; select bank2
 15542  0FEF  00B2               	movwf	(_RF_Data^(0+256)+18)
 15543                           
 15544                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15545  0FF0  0021               	movlb	1	; select bank1
 15546  0FF1  086E               	movf	_product^(0+128),w
 15547  0FF2  0086               	movwf	6
 15548  0FF3  3002               	movlw	2	; select bank4/5
 15549  0FF4  0087               	movwf	7
 15550  0FF5  3002               	movlw	2	; select bank4/5
 15551  0FF6  3F53               	moviw [19]fsr1
 15552  0FF7  0022               	movlb	2	; select bank2
 15553  0FF8  00B3               	movwf	(_RF_Data^(0+256)+19)
 15554                           
 15555                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15556  0FF9  30D1               	movlw	209
 15557  0FFA  0020               	movlb	0	; select bank0
 15558  0FFB  00A0               	movwf	??_setTxData
 15559  0FFC  0820               	movf	??_setTxData,w
 15560  0FFD  0022               	movlb	2	; select bank2
 15561  0FFE  00B4               	movwf	(_RF_Data^(0+256)+20)
 15562  0FFF  0008               	return
 15563  1000                     __end_of_setTxData:	
 15564                           
 15565                           	psect	text104
 15566  1D75                     __ptext104:	
 15567 ;; *************** function _setRF_TransceiveGO *****************
 15568 ;; Defined at:
 15569 ;;		line 461 in file "../src/RF_Control_B1.c"
 15570 ;; Parameters:    Size  Location     Type
 15571 ;;  command         1    wreg     unsigned char 
 15572 ;; Auto vars:     Size  Location     Type
 15573 ;;  command         1    1[BANK0 ] unsigned char 
 15574 ;; Return value:  Size  Location     Type
 15575 ;;		None               void
 15576 ;; Registers used:
 15577 ;;		wreg, status,2, status,0
 15578 ;; Tracked objects:
 15579 ;;		On entry : 0/0
 15580 ;;		On exit  : 0/0
 15581 ;;		Unchanged: 0/0
 15582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;Total ram usage:        2 bytes
 15588 ;; Hardware stack levels used:    1
 15589 ;; Hardware stack levels required when called:    4
 15590 ;; This function calls:
 15591 ;;		Nothing
 15592 ;; This function is called by:
 15593 ;;		_setDimmerLights_Dimming
 15594 ;; This function uses a non-reentrant model
 15595 ;;
 15596                           
 15597                           
 15598                           ;psect for function _setRF_TransceiveGO
 15599  1D75                     _setRF_TransceiveGO:	
 15600                           
 15601                           ;incstack = 0
 15602                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15603                           ;setRF_TransceiveGO@command stored from wreg
 15604  1D75  0020               	movlb	0	; select bank0
 15605  1D76  00A1               	movwf	setRF_TransceiveGO@command
 15606                           
 15607                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15608  1D77  0821               	movf	setRF_TransceiveGO@command,w
 15609  1D78  3A01               	xorlw	1
 15610  1D79  3000               	movlw	0
 15611  1D7A  1903               	skipnz
 15612  1D7B  3001               	movlw	1
 15613  1D7C  00A0               	movwf	??_setRF_TransceiveGO
 15614  1D7D  0DA0               	rlf	??_setRF_TransceiveGO,f
 15615  1D7E  0DA0               	rlf	??_setRF_TransceiveGO,f
 15616  1D7F  0021               	movlb	1	; select bank1
 15617  1D80  0820               	movf	_RF1^(0+128),w
 15618  1D81  0020               	movlb	0	; select bank0
 15619  1D82  0620               	xorwf	??_setRF_TransceiveGO,w
 15620  1D83  39FB               	andlw	-5
 15621  1D84  0620               	xorwf	??_setRF_TransceiveGO,w
 15622  1D85  0021               	movlb	1	; select bank1
 15623  1D86  00A0               	movwf	_RF1^(0+128)
 15624  1D87  0008               	return
 15625  1D88                     __end_of_setRF_TransceiveGO:	
 15626                           
 15627                           	psect	text105
 15628  179B                     __ptext105:	
 15629 ;; *************** function _setRF_DimmerLights *****************
 15630 ;; Defined at:
 15631 ;;		line 446 in file "../src/RF_Control_B1.c"
 15632 ;; Parameters:    Size  Location     Type
 15633 ;;  lights          1    wreg     unsigned char 
 15634 ;;  on              1   69[BANK0 ] unsigned char 
 15635 ;; Auto vars:     Size  Location     Type
 15636 ;;  lights          1   73[BANK0 ] unsigned char 
 15637 ;;  status          1   72[BANK0 ] unsigned char 
 15638 ;; Return value:  Size  Location     Type
 15639 ;;		None               void
 15640 ;; Registers used:
 15641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15642 ;; Tracked objects:
 15643 ;;		On entry : 0/0
 15644 ;;		On exit  : 0/0
 15645 ;;		Unchanged: 0/0
 15646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15647 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15648 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15649 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15650 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;Total ram usage:        5 bytes
 15652 ;; Hardware stack levels used:    1
 15653 ;; Hardware stack levels required when called:    5
 15654 ;; This function calls:
 15655 ;;		_setProductData
 15656 ;; This function is called by:
 15657 ;;		_setDimmerLights_OnOff
 15658 ;;		_setDimmerLights_Dimming
 15659 ;;		_setRFSW_Control
 15660 ;; This function uses a non-reentrant model
 15661 ;;
 15662                           
 15663                           
 15664                           ;psect for function _setRF_DimmerLights
 15665  179B                     _setRF_DimmerLights:	
 15666                           
 15667                           ;incstack = 0
 15668                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15669                           ;setRF_DimmerLights@lights stored from wreg
 15670  179B  0020               	movlb	0	; select bank0
 15671  179C  00E9               	movwf	setRF_DimmerLights@lights
 15672                           
 15673                           ;RF_Control_B1.c: 447: char status = 1;
 15674  179D  01E8               	clrf	setRF_DimmerLights@status
 15675  179E  0AE8               	incf	setRF_DimmerLights@status,f
 15676                           
 15677                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15678  179F  0869               	movf	setRF_DimmerLights@lights,w
 15679  17A0  3EFF               	addlw	-1
 15680  17A1  0A89               	incf	9,f
 15681  17A2  2FA5               	goto	u5200
 15682  17A3                     u5205:	
 15683  17A3  1003               	clrc
 15684  17A4  0DE8               	rlf	setRF_DimmerLights@status,f
 15685  17A5                     u5200:	
 15686  17A5  3EFF               	addlw	-1
 15687  17A6  1D03               	skipz
 15688  17A7  2FA3               	goto	u5205
 15689                           
 15690                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15691  17A8  0869               	movf	setRF_DimmerLights@lights,w
 15692  17A9  00E6               	movwf	??_setRF_DimmerLights
 15693  17AA  0866               	movf	??_setRF_DimmerLights,w
 15694  17AB  00E2               	movwf	setProductData@value
 15695  17AC  300B               	movlw	11
 15696  17AD  319C  240F  3197   	fcall	_setProductData
 15697                           
 15698                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15699  17B0  0020               	movlb	0	; select bank0
 15700  17B1  0869               	movf	setRF_DimmerLights@lights,w
 15701  17B2  3E1A               	addlw	26
 15702  17B3  0021               	movlb	1	; select bank1
 15703  17B4  076E               	addwf	_product^(0+128),w
 15704  17B5  0020               	movlb	0	; select bank0
 15705  17B6  00E6               	movwf	??_setRF_DimmerLights
 15706  17B7  0866               	movf	??_setRF_DimmerLights,w
 15707  17B8  0086               	movwf	6
 15708  17B9  3002               	movlw	2	; select bank4/5
 15709  17BA  0087               	movwf	7
 15710  17BB  0801               	movf	1,w
 15711  17BC  00E7               	movwf	??_setRF_DimmerLights+1
 15712  17BD  0867               	movf	??_setRF_DimmerLights+1,w
 15713  17BE  00E2               	movwf	setProductData@value
 15714  17BF  3011               	movlw	17
 15715  17C0  319C  240F  3197   	fcall	_setProductData
 15716                           
 15717                           ;RF_Control_B1.c: 451: if (on == 1) {
 15718  17C3  0020               	movlb	0	; select bank0
 15719  17C4  0865               	movf	setRF_DimmerLights@on,w
 15720  17C5  3A01               	xorlw	1
 15721  17C6  1D03               	skipz
 15722  17C7  2FEA               	goto	l6072
 15723                           
 15724                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15725  17C8  0869               	movf	setRF_DimmerLights@lights,w
 15726  17C9  3E14               	addlw	20
 15727  17CA  0021               	movlb	1	; select bank1
 15728  17CB  076E               	addwf	_product^(0+128),w
 15729  17CC  0020               	movlb	0	; select bank0
 15730  17CD  00E6               	movwf	??_setRF_DimmerLights
 15731  17CE  0866               	movf	??_setRF_DimmerLights,w
 15732  17CF  0086               	movwf	6
 15733  17D0  3002               	movlw	2	; select bank4/5
 15734  17D1  0087               	movwf	7
 15735  17D2  0801               	movf	1,w
 15736  17D3  00E7               	movwf	??_setRF_DimmerLights+1
 15737  17D4  0867               	movf	??_setRF_DimmerLights+1,w
 15738  17D5  00E2               	movwf	setProductData@value
 15739  17D6  3009               	movlw	9
 15740  17D7  319C  240F  3197   	fcall	_setProductData
 15741                           
 15742                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15743  17DA  0021               	movlb	1	; select bank1
 15744  17DB  086E               	movf	_product^(0+128),w
 15745  17DC  3E0F               	addlw	15
 15746  17DD  0086               	movwf	6
 15747  17DE  3002               	movlw	2	; select bank4/5
 15748  17DF  0087               	movwf	7
 15749  17E0  0801               	movf	1,w
 15750  17E1  0020               	movlb	0	; select bank0
 15751  17E2  0468               	iorwf	setRF_DimmerLights@status,w
 15752  17E3  00E6               	movwf	??_setRF_DimmerLights
 15753  17E4  0866               	movf	??_setRF_DimmerLights,w
 15754  17E5  00E2               	movwf	setProductData@value
 15755  17E6  300F               	movlw	15
 15756  17E7  319C  240F         	fcall	_setProductData
 15757                           
 15758                           ;RF_Control_B1.c: 454: } else {
 15759  17E9  0008               	return
 15760  17EA                     l6072:	
 15761                           
 15762                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15763  17EA  0020               	movlb	0	; select bank0
 15764  17EB  01E2               	clrf	setProductData@value
 15765  17EC  3009               	movlw	9
 15766  17ED  319C  240F  3197   	fcall	_setProductData
 15767                           
 15768                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15769  17F0  0021               	movlb	1	; select bank1
 15770  17F1  086E               	movf	_product^(0+128),w
 15771  17F2  3E0F               	addlw	15
 15772  17F3  0086               	movwf	6
 15773  17F4  3002               	movlw	2	; select bank4/5
 15774  17F5  0087               	movwf	7
 15775  17F6  0020               	movlb	0	; select bank0
 15776  17F7  0968               	comf	setRF_DimmerLights@status,w
 15777  17F8  0501               	andwf	1,w
 15778  17F9  00E6               	movwf	??_setRF_DimmerLights
 15779  17FA  0866               	movf	??_setRF_DimmerLights,w
 15780  17FB  00E2               	movwf	setProductData@value
 15781  17FC  300F               	movlw	15
 15782  17FD  319C  240F         	fcall	_setProductData
 15783  17FF  0008               	return
 15784  1800                     __end_of_setRF_DimmerLights:	
 15785                           
 15786                           	psect	text106
 15787  1CC6                     __ptext106:	
 15788 ;; *************** function _setDimmerLights_Line *****************
 15789 ;; Defined at:
 15790 ;;		line 955 in file "../src/Dimmer_B1.c"
 15791 ;; Parameters:    Size  Location     Type
 15792 ;;  lights          1    wreg     unsigned char 
 15793 ;; Auto vars:     Size  Location     Type
 15794 ;;  lights          1    0[BANK0 ] unsigned char 
 15795 ;; Return value:  Size  Location     Type
 15796 ;;		None               void
 15797 ;; Registers used:
 15798 ;;		wreg
 15799 ;; Tracked objects:
 15800 ;;		On entry : 0/0
 15801 ;;		On exit  : 0/0
 15802 ;;		Unchanged: 0/0
 15803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15807 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;Total ram usage:        1 bytes
 15809 ;; Hardware stack levels used:    1
 15810 ;; Hardware stack levels required when called:    4
 15811 ;; This function calls:
 15812 ;;		Nothing
 15813 ;; This function is called by:
 15814 ;;		_setDimmerLights_OnOff
 15815 ;;		_setDimmerLights_Dimming
 15816 ;; This function uses a non-reentrant model
 15817 ;;
 15818                           
 15819                           
 15820                           ;psect for function _setDimmerLights_Line
 15821  1CC6                     _setDimmerLights_Line:	
 15822                           
 15823                           ;incstack = 0
 15824                           ; Regs used in _setDimmerLights_Line: [wreg]
 15825                           ;setDimmerLights_Line@lights stored from wreg
 15826  1CC6  0020               	movlb	0	; select bank0
 15827  1CC7  00A0               	movwf	setDimmerLights_Line@lights
 15828                           
 15829                           ;Dimmer_B1.c: 956: Dimmer.LoadGO = 1;
 15830  1CC8  0023               	movlb	3	; select bank3
 15831  1CC9  14A0               	bsf	_Dimmer^(0+384),1
 15832                           
 15833                           ;Dimmer_B1.c: 958: DimmerLights1.Line = 0;
 15834  1CCA  10D4               	bcf	(_DimmerLights1^(0+384)+1),1
 15835                           
 15836                           ;Dimmer_B1.c: 959: if (lights == 1 && lights != 0) {
 15837  1CCB  0020               	movlb	0	; select bank0
 15838  1CCC  0820               	movf	setDimmerLights_Line@lights,w
 15839  1CCD  3A01               	xorlw	1
 15840  1CCE  1D03               	skipz
 15841  1CCF  0008               	return
 15842  1CD0  0820               	movf	setDimmerLights_Line@lights,w
 15843  1CD1  1903               	btfsc	3,2
 15844  1CD2  0008               	return
 15845                           
 15846                           ;Dimmer_B1.c: 960: DimmerLights1.Line = 1;
 15847  1CD3  0023               	movlb	3	; select bank3
 15848  1CD4  14D4               	bsf	(_DimmerLights1^(0+384)+1),1
 15849  1CD5  0020               	movlb	0	; select bank0
 15850  1CD6  0008               	return
 15851  1CD7                     __end_of_setDimmerLights_Line:	
 15852                           
 15853                           	psect	text107
 15854  1C1B                     __ptext107:	
 15855 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15856 ;; Defined at:
 15857 ;;		line 89 in file "../src/Dimmer_B1.c"
 15858 ;; Parameters:    Size  Location     Type
 15859 ;;  lights          1    wreg     unsigned char 
 15860 ;;  value           1   66[BANK0 ] unsigned char 
 15861 ;; Auto vars:     Size  Location     Type
 15862 ;;  lights          1   68[BANK0 ] unsigned char 
 15863 ;; Return value:  Size  Location     Type
 15864 ;;		None               void
 15865 ;; Registers used:
 15866 ;;		wreg
 15867 ;; Tracked objects:
 15868 ;;		On entry : 0/0
 15869 ;;		On exit  : 0/0
 15870 ;;		Unchanged: 0/0
 15871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15872 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15875 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15876 ;;Total ram usage:        3 bytes
 15877 ;; Hardware stack levels used:    1
 15878 ;; Hardware stack levels required when called:    4
 15879 ;; This function calls:
 15880 ;;		Nothing
 15881 ;; This function is called by:
 15882 ;;		_setDimmerLights_OnOff
 15883 ;;		_setDimmerLights_Dimming
 15884 ;;		_setRFSW_AdjControl
 15885 ;; This function uses a non-reentrant model
 15886 ;;
 15887                           
 15888                           
 15889                           ;psect for function _setDimmerIntr_MaxmumValue
 15890  1C1B                     _setDimmerIntr_MaxmumValue:	
 15891                           
 15892                           ;incstack = 0
 15893                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15894                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15895  1C1B  0020               	movlb	0	; select bank0
 15896  1C1C  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15897                           
 15898                           ;Dimmer_B1.c: 91: if (lights == 1) {
 15899  1C1D  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15900  1C1E  3A01               	xorlw	1
 15901  1C1F  1D03               	skipz
 15902  1C20  0008               	return
 15903                           
 15904                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 15905  1C21  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15906  1C22  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15907  1C23  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15908  1C24  0021               	movlb	1	; select bank1
 15909  1C25  00CC               	movwf	(_DimmerIntr1^(0+128)+5)
 15910  1C26  0008               	return
 15911  1C27                     __end_of_setDimmerIntr_MaxmumValue:	
 15912                           
 15913                           	psect	text108
 15914  1E52                     __ptext108:	
 15915 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15916 ;; Defined at:
 15917 ;;		line 166 in file "../src/Dimmer_B1.c"
 15918 ;; Parameters:    Size  Location     Type
 15919 ;;  lights          1    wreg     unsigned char 
 15920 ;;  command         1    0[BANK0 ] unsigned char 
 15921 ;; Auto vars:     Size  Location     Type
 15922 ;;  lights          1    2[BANK0 ] unsigned char 
 15923 ;; Return value:  Size  Location     Type
 15924 ;;		None               void
 15925 ;; Registers used:
 15926 ;;		wreg, status,2, status,0
 15927 ;; Tracked objects:
 15928 ;;		On entry : 0/0
 15929 ;;		On exit  : 0/0
 15930 ;;		Unchanged: 0/0
 15931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15932 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15934 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15935 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;Total ram usage:        3 bytes
 15937 ;; Hardware stack levels used:    1
 15938 ;; Hardware stack levels required when called:    4
 15939 ;; This function calls:
 15940 ;;		Nothing
 15941 ;; This function is called by:
 15942 ;;		_setDimmerLights_Dimming
 15943 ;; This function uses a non-reentrant model
 15944 ;;
 15945                           
 15946                           
 15947                           ;psect for function _setDimmerIntr_Dimming_Sw
 15948  1E52                     _setDimmerIntr_Dimming_Sw:	
 15949                           
 15950                           ;incstack = 0
 15951                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15952                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15953  1E52  0020               	movlb	0	; select bank0
 15954  1E53  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15955                           
 15956                           ;Dimmer_B1.c: 168: if (lights == 1) {
 15957  1E54  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15958  1E55  3A01               	xorlw	1
 15959  1E56  1D03               	skipz
 15960  1E57  0008               	return
 15961                           
 15962                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15963  1E58  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15964  1E59  3A01               	xorlw	1
 15965  1E5A  3000               	movlw	0
 15966  1E5B  1903               	skipnz
 15967  1E5C  3001               	movlw	1
 15968  1E5D  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 15969  1E5E  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15970  1E5F  0021               	movlb	1	; select bank1
 15971  1E60  0847               	movf	_DimmerIntr1^(0+128),w
 15972  1E61  0020               	movlb	0	; select bank0
 15973  1E62  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15974  1E63  39EF               	andlw	-17
 15975  1E64  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15976  1E65  0021               	movlb	1	; select bank1
 15977  1E66  00C7               	movwf	_DimmerIntr1^(0+128)
 15978  1E67  0008               	return
 15979  1E68                     __end_of_setDimmerIntr_Dimming_Sw:	
 15980                           
 15981                           	psect	text109
 15982  1736                     __ptext109:	
 15983 ;; *************** function _getDimmerLights_ValueToPercent *****************
 15984 ;; Defined at:
 15985 ;;		line 1055 in file "../src/Dimmer_B1.c"
 15986 ;; Parameters:    Size  Location     Type
 15987 ;;  value           1    wreg     unsigned char 
 15988 ;; Auto vars:     Size  Location     Type
 15989 ;;  value           1   62[BANK0 ] unsigned char 
 15990 ;;  i               3   63[BANK0 ] float 
 15991 ;; Return value:  Size  Location     Type
 15992 ;;                  1    wreg      unsigned char 
 15993 ;; Registers used:
 15994 ;;		wreg, status,2, status,0, pclath, cstack
 15995 ;; Tracked objects:
 15996 ;;		On entry : 0/0
 15997 ;;		On exit  : 0/0
 15998 ;;		Unchanged: 0/0
 15999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16001 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16003 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;Total ram usage:        6 bytes
 16005 ;; Hardware stack levels used:    1
 16006 ;; Hardware stack levels required when called:    6
 16007 ;; This function calls:
 16008 ;;		___awtoft
 16009 ;;		___ftadd
 16010 ;;		___ftdiv
 16011 ;;		___ftneg
 16012 ;;		___fttol
 16013 ;; This function is called by:
 16014 ;;		_setDimmerLights_OnOff
 16015 ;;		_setDimmerLights_Dimming
 16016 ;;		_Flash_Memory_Initialization
 16017 ;; This function uses a non-reentrant model
 16018 ;;
 16019                           
 16020                           
 16021                           ;psect for function _getDimmerLights_ValueToPercent
 16022  1736                     _getDimmerLights_ValueToPercent:	
 16023                           
 16024                           ;incstack = 0
 16025                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16026                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16027  1736  0020               	movlb	0	; select bank0
 16028  1737  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16029                           
 16030                           ;Dimmer_B1.c: 1063: float i = ((char)(70*0.6)) - ((char)(10*0.6));
 16031  1738  3000               	movlw	0
 16032  1739  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16033  173A  3010               	movlw	16
 16034  173B  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16035  173C  3042               	movlw	66
 16036  173D  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16037                           
 16038                           ;Dimmer_B1.c: 1064: i /= 100;
 16039  173E  3000               	movlw	0
 16040  173F  00AE               	movwf	___ftdiv@f2
 16041  1740  30C8               	movlw	200
 16042  1741  00AF               	movwf	___ftdiv@f2+1
 16043  1742  3042               	movlw	66
 16044  1743  00B0               	movwf	___ftdiv@f2+2
 16045  1744  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16046  1745  00B1               	movwf	___ftdiv@f1
 16047  1746  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16048  1747  00B2               	movwf	___ftdiv@f1+1
 16049  1748  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16050  1749  00B3               	movwf	___ftdiv@f1+2
 16051  174A  318D  2537  3197   	fcall	___ftdiv
 16052  174D  0020               	movlb	0	; select bank0
 16053  174E  082E               	movf	?___ftdiv,w
 16054  174F  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16055  1750  082F               	movf	?___ftdiv+1,w
 16056  1751  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16057  1752  0830               	movf	?___ftdiv+2,w
 16058  1753  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16059                           
 16060                           ;Dimmer_B1.c: 1066: return (char) (100 - ((((char)(70*0.6)) - value) / i));
 16061  1754  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16062  1755  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16063  1756  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16064  1757  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16065  1758  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16066  1759  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16067  175A  1903               	skipnz
 16068  175B  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16069  175C  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16070  175D  3E2A               	addlw	42
 16071  175E  00A8               	movwf	___awtoft@c
 16072  175F  3000               	movlw	0
 16073  1760  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16074  1761  00A9               	movwf	___awtoft@c+1
 16075  1762  3190  20A3  3197   	fcall	___awtoft
 16076  1765  0020               	movlb	0	; select bank0
 16077  1766  0828               	movf	?___awtoft,w
 16078  1767  00B1               	movwf	___ftdiv@f1
 16079  1768  0829               	movf	?___awtoft+1,w
 16080  1769  00B2               	movwf	___ftdiv@f1+1
 16081  176A  082A               	movf	?___awtoft+2,w
 16082  176B  00B3               	movwf	___ftdiv@f1+2
 16083  176C  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16084  176D  00AE               	movwf	___ftdiv@f2
 16085  176E  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16086  176F  00AF               	movwf	___ftdiv@f2+1
 16087  1770  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16088  1771  00B0               	movwf	___ftdiv@f2+2
 16089  1772  318D  2537  3197   	fcall	___ftdiv
 16090  1775  0020               	movlb	0	; select bank0
 16091  1776  082E               	movf	?___ftdiv,w
 16092  1777  00BE               	movwf	___ftneg@f1
 16093  1778  082F               	movf	?___ftdiv+1,w
 16094  1779  00BF               	movwf	___ftneg@f1+1
 16095  177A  0830               	movf	?___ftdiv+2,w
 16096  177B  00C0               	movwf	___ftneg@f1+2
 16097  177C  319B  23B0  3197   	fcall	___ftneg
 16098  177F  0020               	movlb	0	; select bank0
 16099  1780  083E               	movf	?___ftneg,w
 16100  1781  00C4               	movwf	___ftadd@f2
 16101  1782  083F               	movf	?___ftneg+1,w
 16102  1783  00C5               	movwf	___ftadd@f2+1
 16103  1784  0840               	movf	?___ftneg+2,w
 16104  1785  00C6               	movwf	___ftadd@f2+2
 16105  1786  3000               	movlw	0
 16106  1787  00C1               	movwf	___ftadd@f1
 16107  1788  30C8               	movlw	200
 16108  1789  00C2               	movwf	___ftadd@f1+1
 16109  178A  3042               	movlw	66
 16110  178B  00C3               	movwf	___ftadd@f1+2
 16111  178C  3183  2382  3197   	fcall	___ftadd
 16112  178F  0020               	movlb	0	; select bank0
 16113  1790  0841               	movf	?___ftadd,w
 16114  1791  00CE               	movwf	___fttol@f1
 16115  1792  0842               	movf	?___ftadd+1,w
 16116  1793  00CF               	movwf	___fttol@f1+1
 16117  1794  0843               	movf	?___ftadd+2,w
 16118  1795  00D0               	movwf	___fttol@f1+2
 16119  1796  318C  2424         	fcall	___fttol
 16120  1798  0020               	movlb	0	; select bank0
 16121  1799  084E               	movf	?___fttol,w
 16122  179A  0008               	return
 16123  179B                     __end_of_getDimmerLights_ValueToPercent:	
 16124                           
 16125                           	psect	text110
 16126  0C24                     __ptext110:	
 16127 ;; *************** function ___fttol *****************
 16128 ;; Defined at:
 16129 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16130 ;; Parameters:    Size  Location     Type
 16131 ;;  f1              3   46[BANK0 ] float 
 16132 ;; Auto vars:     Size  Location     Type
 16133 ;;  lval            4   55[BANK0 ] unsigned long 
 16134 ;;  exp1            1   59[BANK0 ] unsigned char 
 16135 ;;  sign1           1   54[BANK0 ] unsigned char 
 16136 ;; Return value:  Size  Location     Type
 16137 ;;                  4   46[BANK0 ] long 
 16138 ;; Registers used:
 16139 ;;		wreg, status,2, status,0
 16140 ;; Tracked objects:
 16141 ;;		On entry : 0/0
 16142 ;;		On exit  : 0/0
 16143 ;;		Unchanged: 0/0
 16144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16145 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16146 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16147 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16148 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16149 ;;Total ram usage:       14 bytes
 16150 ;; Hardware stack levels used:    1
 16151 ;; Hardware stack levels required when called:    4
 16152 ;; This function calls:
 16153 ;;		Nothing
 16154 ;; This function is called by:
 16155 ;;		_getDimmerLights_PercentToValue
 16156 ;;		_getDimmerLights_ValueToPercent
 16157 ;; This function uses a non-reentrant model
 16158 ;;
 16159                           
 16160                           
 16161                           ;psect for function ___fttol
 16162  0C24                     ___fttol:	
 16163                           
 16164                           ;incstack = 0
 16165                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16166  0C24  0020               	movlb	0	; select bank0
 16167  0C25  084E               	movf	___fttol@f1,w
 16168  0C26  00D2               	movwf	??___fttol
 16169  0C27  084F               	movf	___fttol@f1+1,w
 16170  0C28  00D3               	movwf	??___fttol+1
 16171  0C29  0850               	movf	___fttol@f1+2,w
 16172  0C2A  00D4               	movwf	??___fttol+2
 16173  0C2B  1003               	clrc
 16174  0C2C  0D53               	rlf	??___fttol+1,w
 16175  0C2D  0D54               	rlf	??___fttol+2,w
 16176  0C2E  00D5               	movwf	??___fttol+3
 16177  0C2F  0855               	movf	??___fttol+3,w
 16178  0C30  00DB               	movwf	___fttol@exp1
 16179  0C31  08DB               	movf	___fttol@exp1,f
 16180  0C32  1D03               	skipz
 16181  0C33  2C3D               	goto	l5908
 16182  0C34  3000               	movlw	0
 16183  0C35  00D1               	movwf	?___fttol+3
 16184  0C36  3000               	movlw	0
 16185  0C37  00D0               	movwf	?___fttol+2
 16186  0C38  3000               	movlw	0
 16187  0C39  00CF               	movwf	?___fttol+1
 16188  0C3A  3000               	movlw	0
 16189  0C3B  00CE               	movwf	?___fttol
 16190  0C3C  0008               	return
 16191  0C3D                     l5908:	
 16192  0C3D  084E               	movf	___fttol@f1,w
 16193  0C3E  00D2               	movwf	??___fttol
 16194  0C3F  084F               	movf	___fttol@f1+1,w
 16195  0C40  00D3               	movwf	??___fttol+1
 16196  0C41  0850               	movf	___fttol@f1+2,w
 16197  0C42  00D4               	movwf	??___fttol+2
 16198  0C43  3017               	movlw	23
 16199  0C44                     u4945:	
 16200  0C44  36D4               	lsrf	??___fttol+2,f
 16201  0C45  0CD3               	rrf	??___fttol+1,f
 16202  0C46  0CD2               	rrf	??___fttol,f
 16203  0C47  0B89               	decfsz	9,f
 16204  0C48  2C44               	goto	u4945
 16205  0C49  0852               	movf	??___fttol,w
 16206  0C4A  00D5               	movwf	??___fttol+3
 16207  0C4B  0855               	movf	??___fttol+3,w
 16208  0C4C  00D6               	movwf	___fttol@sign1
 16209  0C4D  17CF               	bsf	___fttol@f1+1,7
 16210  0C4E  30FF               	movlw	255
 16211  0C4F  05CE               	andwf	___fttol@f1,f
 16212  0C50  30FF               	movlw	255
 16213  0C51  05CF               	andwf	___fttol@f1+1,f
 16214  0C52  3000               	movlw	0
 16215  0C53  05D0               	andwf	___fttol@f1+2,f
 16216  0C54  084E               	movf	___fttol@f1,w
 16217  0C55  00D7               	movwf	___fttol@lval
 16218  0C56  084F               	movf	___fttol@f1+1,w
 16219  0C57  00D8               	movwf	___fttol@lval+1
 16220  0C58  0850               	movf	___fttol@f1+2,w
 16221  0C59  00D9               	movwf	___fttol@lval+2
 16222  0C5A  01DA               	clrf	___fttol@lval+3
 16223  0C5B  308E               	movlw	142
 16224  0C5C  02DB               	subwf	___fttol@exp1,f
 16225  0C5D  1FDB               	btfss	___fttol@exp1,7
 16226  0C5E  2C7B               	goto	l5928
 16227  0C5F  085B               	movf	___fttol@exp1,w
 16228  0C60  3A80               	xorlw	128
 16229  0C61  3E8F               	addlw	143
 16230  0C62  1803               	skipnc
 16231  0C63  2C6D               	goto	l5926
 16232  0C64  3000               	movlw	0
 16233  0C65  00D1               	movwf	?___fttol+3
 16234  0C66  3000               	movlw	0
 16235  0C67  00D0               	movwf	?___fttol+2
 16236  0C68  3000               	movlw	0
 16237  0C69  00CF               	movwf	?___fttol+1
 16238  0C6A  3000               	movlw	0
 16239  0C6B  00CE               	movwf	?___fttol
 16240  0C6C  0008               	return
 16241  0C6D                     l5926:	
 16242  0C6D  3001               	movlw	1
 16243  0C6E                     u4975:	
 16244  0C6E  36DA               	lsrf	___fttol@lval+3,f
 16245  0C6F  0CD9               	rrf	___fttol@lval+2,f
 16246  0C70  0CD8               	rrf	___fttol@lval+1,f
 16247  0C71  0CD7               	rrf	___fttol@lval,f
 16248  0C72  0B89               	decfsz	9,f
 16249  0C73  2C6E               	goto	u4975
 16250  0C74  3001               	movlw	1
 16251  0C75  00D2               	movwf	??___fttol
 16252  0C76  0852               	movf	??___fttol,w
 16253  0C77  07DB               	addwf	___fttol@exp1,f
 16254  0C78  1903               	btfsc	3,2
 16255  0C79  2C94               	goto	l5938
 16256  0C7A  2C6D               	goto	l5926
 16257  0C7B                     l5928:	
 16258  0C7B  3018               	movlw	24
 16259  0C7C  025B               	subwf	___fttol@exp1,w
 16260  0C7D  1C03               	skipc
 16261  0C7E  2C91               	goto	l5936
 16262  0C7F  3000               	movlw	0
 16263  0C80  00D1               	movwf	?___fttol+3
 16264  0C81  3000               	movlw	0
 16265  0C82  00D0               	movwf	?___fttol+2
 16266  0C83  3000               	movlw	0
 16267  0C84  00CF               	movwf	?___fttol+1
 16268  0C85  3000               	movlw	0
 16269  0C86  00CE               	movwf	?___fttol
 16270  0C87  0008               	return
 16271  0C88                     l5934:	
 16272  0C88  3001               	movlw	1
 16273  0C89                     u5005:	
 16274  0C89  35D7               	lslf	___fttol@lval,f
 16275  0C8A  0DD8               	rlf	___fttol@lval+1,f
 16276  0C8B  0DD9               	rlf	___fttol@lval+2,f
 16277  0C8C  0DDA               	rlf	___fttol@lval+3,f
 16278  0C8D  0B89               	decfsz	9,f
 16279  0C8E  2C89               	goto	u5005
 16280  0C8F  3001               	movlw	1
 16281  0C90  02DB               	subwf	___fttol@exp1,f
 16282  0C91                     l5936:	
 16283  0C91  08DB               	movf	___fttol@exp1,f
 16284  0C92  1D03               	skipz
 16285  0C93  2C88               	goto	l5934
 16286  0C94                     l5938:	
 16287  0C94  0856               	movf	___fttol@sign1,w
 16288  0C95  1903               	btfsc	3,2
 16289  0C96  2CA2               	goto	l5942
 16290  0C97  09D7               	comf	___fttol@lval,f
 16291  0C98  09D8               	comf	___fttol@lval+1,f
 16292  0C99  09D9               	comf	___fttol@lval+2,f
 16293  0C9A  09DA               	comf	___fttol@lval+3,f
 16294  0C9B  0AD7               	incf	___fttol@lval,f
 16295  0C9C  1903               	skipnz
 16296  0C9D  0AD8               	incf	___fttol@lval+1,f
 16297  0C9E  1903               	skipnz
 16298  0C9F  0AD9               	incf	___fttol@lval+2,f
 16299  0CA0  1903               	skipnz
 16300  0CA1  0ADA               	incf	___fttol@lval+3,f
 16301  0CA2                     l5942:	
 16302  0CA2  085A               	movf	___fttol@lval+3,w
 16303  0CA3  00D1               	movwf	?___fttol+3
 16304  0CA4  0859               	movf	___fttol@lval+2,w
 16305  0CA5  00D0               	movwf	?___fttol+2
 16306  0CA6  0858               	movf	___fttol@lval+1,w
 16307  0CA7  00CF               	movwf	?___fttol+1
 16308  0CA8  0857               	movf	___fttol@lval,w
 16309  0CA9  00CE               	movwf	?___fttol
 16310  0CAA  0008               	return
 16311  0CAB                     __end_of___fttol:	
 16312                           
 16313                           	psect	text111
 16314  1BB0                     __ptext111:	
 16315 ;; *************** function ___ftneg *****************
 16316 ;; Defined at:
 16317 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16318 ;; Parameters:    Size  Location     Type
 16319 ;;  f1              3   30[BANK0 ] float 
 16320 ;; Auto vars:     Size  Location     Type
 16321 ;;		None
 16322 ;; Return value:  Size  Location     Type
 16323 ;;                  3   30[BANK0 ] float 
 16324 ;; Registers used:
 16325 ;;		wreg
 16326 ;; Tracked objects:
 16327 ;;		On entry : 0/0
 16328 ;;		On exit  : 0/0
 16329 ;;		Unchanged: 0/0
 16330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16331 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16334 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;Total ram usage:        3 bytes
 16336 ;; Hardware stack levels used:    1
 16337 ;; Hardware stack levels required when called:    4
 16338 ;; This function calls:
 16339 ;;		Nothing
 16340 ;; This function is called by:
 16341 ;;		_getDimmerLights_PercentToValue
 16342 ;;		_getDimmerLights_ValueToPercent
 16343 ;; This function uses a non-reentrant model
 16344 ;;
 16345                           
 16346                           
 16347                           ;psect for function ___ftneg
 16348  1BB0                     ___ftneg:	
 16349                           
 16350                           ;incstack = 0
 16351                           ; Regs used in ___ftneg: [wreg]
 16352  1BB0  0020               	movlb	0	; select bank0
 16353  1BB1  0840               	movf	___ftneg@f1+2,w
 16354  1BB2  043F               	iorwf	___ftneg@f1+1,w
 16355  1BB3  043E               	iorwf	___ftneg@f1,w
 16356  1BB4  1903               	skipnz
 16357  1BB5  0008               	return
 16358  1BB6  3080               	movlw	128
 16359  1BB7  06C0               	xorwf	___ftneg@f1+2,f
 16360  1BB8  0008               	return
 16361  1BB9                     __end_of___ftneg:	
 16362                           
 16363                           	psect	text112
 16364  0D37                     __ptext112:	
 16365 ;; *************** function ___ftdiv *****************
 16366 ;; Defined at:
 16367 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16368 ;; Parameters:    Size  Location     Type
 16369 ;;  f2              3   14[BANK0 ] float 
 16370 ;;  f1              3   17[BANK0 ] float 
 16371 ;; Auto vars:     Size  Location     Type
 16372 ;;  f3              3   25[BANK0 ] float 
 16373 ;;  sign            1   29[BANK0 ] unsigned char 
 16374 ;;  exp             1   28[BANK0 ] unsigned char 
 16375 ;;  cntr            1   24[BANK0 ] unsigned char 
 16376 ;; Return value:  Size  Location     Type
 16377 ;;                  3   14[BANK0 ] float 
 16378 ;; Registers used:
 16379 ;;		wreg, status,2, status,0, pclath, cstack
 16380 ;; Tracked objects:
 16381 ;;		On entry : 0/0
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16385 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16388 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16389 ;;Total ram usage:       16 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; Hardware stack levels required when called:    5
 16392 ;; This function calls:
 16393 ;;		___ftpack
 16394 ;; This function is called by:
 16395 ;;		_getDimmerLights_PercentToValue
 16396 ;;		_getDimmerLights_ValueToPercent
 16397 ;; This function uses a non-reentrant model
 16398 ;;
 16399                           
 16400                           
 16401                           ;psect for function ___ftdiv
 16402  0D37                     ___ftdiv:	
 16403                           
 16404                           ;incstack = 0
 16405                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16406  0D37  0020               	movlb	0	; select bank0
 16407  0D38  0831               	movf	___ftdiv@f1,w
 16408  0D39  00B4               	movwf	??___ftdiv
 16409  0D3A  0832               	movf	___ftdiv@f1+1,w
 16410  0D3B  00B5               	movwf	??___ftdiv+1
 16411  0D3C  0833               	movf	___ftdiv@f1+2,w
 16412  0D3D  00B6               	movwf	??___ftdiv+2
 16413  0D3E  1003               	clrc
 16414  0D3F  0D35               	rlf	??___ftdiv+1,w
 16415  0D40  0D36               	rlf	??___ftdiv+2,w
 16416  0D41  00B7               	movwf	??___ftdiv+3
 16417  0D42  0837               	movf	??___ftdiv+3,w
 16418  0D43  00BC               	movwf	___ftdiv@exp
 16419  0D44  08BC               	movf	___ftdiv@exp,f
 16420  0D45  1D03               	skipz
 16421  0D46  2D4E               	goto	l5808
 16422  0D47  3000               	movlw	0
 16423  0D48  00AE               	movwf	?___ftdiv
 16424  0D49  3000               	movlw	0
 16425  0D4A  00AF               	movwf	?___ftdiv+1
 16426  0D4B  3000               	movlw	0
 16427  0D4C  00B0               	movwf	?___ftdiv+2
 16428  0D4D  0008               	return
 16429  0D4E                     l5808:	
 16430  0D4E  082E               	movf	___ftdiv@f2,w
 16431  0D4F  00B4               	movwf	??___ftdiv
 16432  0D50  082F               	movf	___ftdiv@f2+1,w
 16433  0D51  00B5               	movwf	??___ftdiv+1
 16434  0D52  0830               	movf	___ftdiv@f2+2,w
 16435  0D53  00B6               	movwf	??___ftdiv+2
 16436  0D54  1003               	clrc
 16437  0D55  0D35               	rlf	??___ftdiv+1,w
 16438  0D56  0D36               	rlf	??___ftdiv+2,w
 16439  0D57  00B7               	movwf	??___ftdiv+3
 16440  0D58  0837               	movf	??___ftdiv+3,w
 16441  0D59  00BD               	movwf	___ftdiv@sign
 16442  0D5A  08BD               	movf	___ftdiv@sign,f
 16443  0D5B  1D03               	skipz
 16444  0D5C  2D64               	goto	l5814
 16445  0D5D  3000               	movlw	0
 16446  0D5E  00AE               	movwf	?___ftdiv
 16447  0D5F  3000               	movlw	0
 16448  0D60  00AF               	movwf	?___ftdiv+1
 16449  0D61  3000               	movlw	0
 16450  0D62  00B0               	movwf	?___ftdiv+2
 16451  0D63  0008               	return
 16452  0D64                     l5814:	
 16453  0D64  3000               	movlw	0
 16454  0D65  00B9               	movwf	___ftdiv@f3
 16455  0D66  3000               	movlw	0
 16456  0D67  00BA               	movwf	___ftdiv@f3+1
 16457  0D68  3000               	movlw	0
 16458  0D69  00BB               	movwf	___ftdiv@f3+2
 16459  0D6A  3089               	movlw	137
 16460  0D6B  073D               	addwf	___ftdiv@sign,w
 16461  0D6C  00B4               	movwf	??___ftdiv
 16462  0D6D  0834               	movf	??___ftdiv,w
 16463  0D6E  02BC               	subwf	___ftdiv@exp,f
 16464  0D6F  0831               	movf	___ftdiv@f1,w
 16465  0D70  00B4               	movwf	??___ftdiv
 16466  0D71  0832               	movf	___ftdiv@f1+1,w
 16467  0D72  00B5               	movwf	??___ftdiv+1
 16468  0D73  0833               	movf	___ftdiv@f1+2,w
 16469  0D74  00B6               	movwf	??___ftdiv+2
 16470  0D75  3010               	movlw	16
 16471  0D76                     u4745:	
 16472  0D76  36B6               	lsrf	??___ftdiv+2,f
 16473  0D77  0CB5               	rrf	??___ftdiv+1,f
 16474  0D78  0CB4               	rrf	??___ftdiv,f
 16475  0D79  0B89               	decfsz	9,f
 16476  0D7A  2D76               	goto	u4745
 16477  0D7B  0834               	movf	??___ftdiv,w
 16478  0D7C  00B7               	movwf	??___ftdiv+3
 16479  0D7D  0837               	movf	??___ftdiv+3,w
 16480  0D7E  00BD               	movwf	___ftdiv@sign
 16481  0D7F  082E               	movf	___ftdiv@f2,w
 16482  0D80  00B4               	movwf	??___ftdiv
 16483  0D81  082F               	movf	___ftdiv@f2+1,w
 16484  0D82  00B5               	movwf	??___ftdiv+1
 16485  0D83  0830               	movf	___ftdiv@f2+2,w
 16486  0D84  00B6               	movwf	??___ftdiv+2
 16487  0D85  3010               	movlw	16
 16488  0D86                     u4755:	
 16489  0D86  36B6               	lsrf	??___ftdiv+2,f
 16490  0D87  0CB5               	rrf	??___ftdiv+1,f
 16491  0D88  0CB4               	rrf	??___ftdiv,f
 16492  0D89  0B89               	decfsz	9,f
 16493  0D8A  2D86               	goto	u4755
 16494  0D8B  0834               	movf	??___ftdiv,w
 16495  0D8C  00B7               	movwf	??___ftdiv+3
 16496  0D8D  0837               	movf	??___ftdiv+3,w
 16497  0D8E  06BD               	xorwf	___ftdiv@sign,f
 16498  0D8F  3080               	movlw	128
 16499  0D90  00B4               	movwf	??___ftdiv
 16500  0D91  0834               	movf	??___ftdiv,w
 16501  0D92  05BD               	andwf	___ftdiv@sign,f
 16502  0D93  17B2               	bsf	___ftdiv@f1+1,7
 16503  0D94  30FF               	movlw	255
 16504  0D95  05B1               	andwf	___ftdiv@f1,f
 16505  0D96  30FF               	movlw	255
 16506  0D97  05B2               	andwf	___ftdiv@f1+1,f
 16507  0D98  3000               	movlw	0
 16508  0D99  05B3               	andwf	___ftdiv@f1+2,f
 16509  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 16510  0D9B  30FF               	movlw	255
 16511  0D9C  05AE               	andwf	___ftdiv@f2,f
 16512  0D9D  30FF               	movlw	255
 16513  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 16514  0D9F  3000               	movlw	0
 16515  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 16516  0DA1  3018               	movlw	24
 16517  0DA2  00B4               	movwf	??___ftdiv
 16518  0DA3  0834               	movf	??___ftdiv,w
 16519  0DA4  00B8               	movwf	___ftdiv@cntr
 16520  0DA5                     l5828:	
 16521  0DA5  3001               	movlw	1
 16522  0DA6                     u4765:	
 16523  0DA6  35B9               	lslf	___ftdiv@f3,f
 16524  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 16525  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 16526  0DA9  0B89               	decfsz	9,f
 16527  0DAA  2DA6               	goto	u4765
 16528  0DAB  0830               	movf	___ftdiv@f2+2,w
 16529  0DAC  0233               	subwf	___ftdiv@f1+2,w
 16530  0DAD  1D03               	skipz
 16531  0DAE  2DB5               	goto	u4775
 16532  0DAF  082F               	movf	___ftdiv@f2+1,w
 16533  0DB0  0232               	subwf	___ftdiv@f1+1,w
 16534  0DB1  1D03               	skipz
 16535  0DB2  2DB5               	goto	u4775
 16536  0DB3  082E               	movf	___ftdiv@f2,w
 16537  0DB4  0231               	subwf	___ftdiv@f1,w
 16538  0DB5                     u4775:	
 16539  0DB5  1C03               	skipc
 16540  0DB6  2DBE               	goto	l5836
 16541  0DB7  082E               	movf	___ftdiv@f2,w
 16542  0DB8  02B1               	subwf	___ftdiv@f1,f
 16543  0DB9  082F               	movf	___ftdiv@f2+1,w
 16544  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 16545  0DBB  0830               	movf	___ftdiv@f2+2,w
 16546  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 16547  0DBD  1439               	bsf	___ftdiv@f3,0
 16548  0DBE                     l5836:	
 16549  0DBE  3001               	movlw	1
 16550  0DBF                     u4785:	
 16551  0DBF  35B1               	lslf	___ftdiv@f1,f
 16552  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 16553  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 16554  0DC2  0B89               	decfsz	9,f
 16555  0DC3  2DBF               	goto	u4785
 16556  0DC4  3001               	movlw	1
 16557  0DC5  02B8               	subwf	___ftdiv@cntr,f
 16558  0DC6  1D03               	btfss	3,2
 16559  0DC7  2DA5               	goto	l5828
 16560  0DC8  0839               	movf	___ftdiv@f3,w
 16561  0DC9  00A0               	movwf	___ftpack@arg
 16562  0DCA  083A               	movf	___ftdiv@f3+1,w
 16563  0DCB  00A1               	movwf	___ftpack@arg+1
 16564  0DCC  083B               	movf	___ftdiv@f3+2,w
 16565  0DCD  00A2               	movwf	___ftpack@arg+2
 16566  0DCE  083C               	movf	___ftdiv@exp,w
 16567  0DCF  00B4               	movwf	??___ftdiv
 16568  0DD0  0834               	movf	??___ftdiv,w
 16569  0DD1  00A3               	movwf	___ftpack@exp
 16570  0DD2  083D               	movf	___ftdiv@sign,w
 16571  0DD3  00B5               	movwf	??___ftdiv+1
 16572  0DD4  0835               	movf	??___ftdiv+1,w
 16573  0DD5  00A4               	movwf	___ftpack@sign
 16574  0DD6  3196  2671         	fcall	___ftpack
 16575  0DD8  0020               	movlb	0	; select bank0
 16576  0DD9  0820               	movf	?___ftpack,w
 16577  0DDA  00AE               	movwf	?___ftdiv
 16578  0DDB  0821               	movf	?___ftpack+1,w
 16579  0DDC  00AF               	movwf	?___ftdiv+1
 16580  0DDD  0822               	movf	?___ftpack+2,w
 16581  0DDE  00B0               	movwf	?___ftdiv+2
 16582  0DDF  0008               	return
 16583  0DE0                     __end_of___ftdiv:	
 16584                           
 16585                           	psect	text113
 16586  0382                     __ptext113:	
 16587 ;; *************** function ___ftadd *****************
 16588 ;; Defined at:
 16589 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16590 ;; Parameters:    Size  Location     Type
 16591 ;;  f1              3   33[BANK0 ] float 
 16592 ;;  f2              3   36[BANK0 ] float 
 16593 ;; Auto vars:     Size  Location     Type
 16594 ;;  exp1            1   45[BANK0 ] unsigned char 
 16595 ;;  exp2            1   44[BANK0 ] unsigned char 
 16596 ;;  sign            1   43[BANK0 ] unsigned char 
 16597 ;; Return value:  Size  Location     Type
 16598 ;;                  3   33[BANK0 ] float 
 16599 ;; Registers used:
 16600 ;;		wreg, status,2, status,0, pclath, cstack
 16601 ;; Tracked objects:
 16602 ;;		On entry : 0/0
 16603 ;;		On exit  : 0/0
 16604 ;;		Unchanged: 0/0
 16605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16606 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16608 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;Total ram usage:       13 bytes
 16611 ;; Hardware stack levels used:    1
 16612 ;; Hardware stack levels required when called:    5
 16613 ;; This function calls:
 16614 ;;		___ftpack
 16615 ;; This function is called by:
 16616 ;;		_getDimmerLights_PercentToValue
 16617 ;;		_getDimmerLights_ValueToPercent
 16618 ;; This function uses a non-reentrant model
 16619 ;;
 16620                           
 16621                           
 16622                           ;psect for function ___ftadd
 16623  0382                     ___ftadd:	
 16624                           
 16625                           ;incstack = 0
 16626                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16627  0382  0020               	movlb	0	; select bank0
 16628  0383  0841               	movf	___ftadd@f1,w
 16629  0384  00C7               	movwf	??___ftadd
 16630  0385  0842               	movf	___ftadd@f1+1,w
 16631  0386  00C8               	movwf	??___ftadd+1
 16632  0387  0843               	movf	___ftadd@f1+2,w
 16633  0388  00C9               	movwf	??___ftadd+2
 16634  0389  1003               	clrc
 16635  038A  0D48               	rlf	??___ftadd+1,w
 16636  038B  0D49               	rlf	??___ftadd+2,w
 16637  038C  00CA               	movwf	??___ftadd+3
 16638  038D  084A               	movf	??___ftadd+3,w
 16639  038E  00CD               	movwf	___ftadd@exp1
 16640  038F  0844               	movf	___ftadd@f2,w
 16641  0390  00C7               	movwf	??___ftadd
 16642  0391  0845               	movf	___ftadd@f2+1,w
 16643  0392  00C8               	movwf	??___ftadd+1
 16644  0393  0846               	movf	___ftadd@f2+2,w
 16645  0394  00C9               	movwf	??___ftadd+2
 16646  0395  1003               	clrc
 16647  0396  0D48               	rlf	??___ftadd+1,w
 16648  0397  0D49               	rlf	??___ftadd+2,w
 16649  0398  00CA               	movwf	??___ftadd+3
 16650  0399  084A               	movf	??___ftadd+3,w
 16651  039A  00CC               	movwf	___ftadd@exp2
 16652  039B  084D               	movf	___ftadd@exp1,w
 16653  039C  1903               	btfsc	3,2
 16654  039D  2BAA               	goto	l5738
 16655  039E  084C               	movf	___ftadd@exp2,w
 16656  039F  024D               	subwf	___ftadd@exp1,w
 16657  03A0  1803               	skipnc
 16658  03A1  2BB1               	goto	l5742
 16659  03A2  034D               	decf	___ftadd@exp1,w
 16660  03A3  3AFF               	xorlw	255
 16661  03A4  074C               	addwf	___ftadd@exp2,w
 16662  03A5  00C7               	movwf	??___ftadd
 16663  03A6  3019               	movlw	25
 16664  03A7  0247               	subwf	??___ftadd,w
 16665  03A8  1C03               	skipc
 16666  03A9  2BB1               	goto	l5742
 16667  03AA                     l5738:	
 16668  03AA  0844               	movf	___ftadd@f2,w
 16669  03AB  00C1               	movwf	?___ftadd
 16670  03AC  0845               	movf	___ftadd@f2+1,w
 16671  03AD  00C2               	movwf	?___ftadd+1
 16672  03AE  0846               	movf	___ftadd@f2+2,w
 16673  03AF  00C3               	movwf	?___ftadd+2
 16674  03B0  0008               	return
 16675  03B1                     l5742:	
 16676  03B1  084C               	movf	___ftadd@exp2,w
 16677  03B2  1903               	btfsc	3,2
 16678  03B3  0008               	return
 16679  03B4  084D               	movf	___ftadd@exp1,w
 16680  03B5  024C               	subwf	___ftadd@exp2,w
 16681  03B6  1803               	skipnc
 16682  03B7  2BC0               	goto	l5748
 16683  03B8  034C               	decf	___ftadd@exp2,w
 16684  03B9  3AFF               	xorlw	255
 16685  03BA  074D               	addwf	___ftadd@exp1,w
 16686  03BB  00C7               	movwf	??___ftadd
 16687  03BC  3019               	movlw	25
 16688  03BD  0247               	subwf	??___ftadd,w
 16689  03BE  1803               	btfsc	3,0
 16690  03BF  0008               	return
 16691  03C0                     l5748:	
 16692  03C0  3006               	movlw	6
 16693  03C1  00C7               	movwf	??___ftadd
 16694  03C2  0847               	movf	??___ftadd,w
 16695  03C3  00CB               	movwf	___ftadd@sign
 16696  03C4  1BC3               	btfsc	___ftadd@f1+2,7
 16697  03C5  17CB               	bsf	___ftadd@sign,7
 16698  03C6  1BC6               	btfsc	___ftadd@f2+2,7
 16699  03C7  174B               	bsf	___ftadd@sign,6
 16700  03C8  17C2               	bsf	___ftadd@f1+1,7
 16701  03C9  30FF               	movlw	255
 16702  03CA  05C1               	andwf	___ftadd@f1,f
 16703  03CB  30FF               	movlw	255
 16704  03CC  05C2               	andwf	___ftadd@f1+1,f
 16705  03CD  3000               	movlw	0
 16706  03CE  05C3               	andwf	___ftadd@f1+2,f
 16707  03CF  17C5               	bsf	___ftadd@f2+1,7
 16708  03D0  30FF               	movlw	255
 16709  03D1  05C4               	andwf	___ftadd@f2,f
 16710  03D2  30FF               	movlw	255
 16711  03D3  05C5               	andwf	___ftadd@f2+1,f
 16712  03D4  3000               	movlw	0
 16713  03D5  05C6               	andwf	___ftadd@f2+2,f
 16714  03D6  084C               	movf	___ftadd@exp2,w
 16715  03D7  024D               	subwf	___ftadd@exp1,w
 16716  03D8  1803               	skipnc
 16717  03D9  2BFC               	goto	l5770
 16718  03DA                     l5760:	
 16719  03DA  3001               	movlw	1
 16720  03DB                     u4585:	
 16721  03DB  35C4               	lslf	___ftadd@f2,f
 16722  03DC  0DC5               	rlf	___ftadd@f2+1,f
 16723  03DD  0DC6               	rlf	___ftadd@f2+2,f
 16724  03DE  0B89               	decfsz	9,f
 16725  03DF  2BDB               	goto	u4585
 16726  03E0  3001               	movlw	1
 16727  03E1  02CC               	subwf	___ftadd@exp2,f
 16728  03E2  084C               	movf	___ftadd@exp2,w
 16729  03E3  064D               	xorwf	___ftadd@exp1,w
 16730  03E4  1903               	skipnz
 16731  03E5  2BF7               	goto	l5768
 16732  03E6  3001               	movlw	1
 16733  03E7  02CB               	subwf	___ftadd@sign,f
 16734  03E8  084B               	movf	___ftadd@sign,w
 16735  03E9  3907               	andlw	7
 16736  03EA  1903               	btfsc	3,2
 16737  03EB  2BF7               	goto	l5768
 16738  03EC  2BDA               	goto	l5760
 16739  03ED                     l5766:	
 16740  03ED  3001               	movlw	1
 16741  03EE                     u4615:	
 16742  03EE  36C3               	lsrf	___ftadd@f1+2,f
 16743  03EF  0CC2               	rrf	___ftadd@f1+1,f
 16744  03F0  0CC1               	rrf	___ftadd@f1,f
 16745  03F1  0B89               	decfsz	9,f
 16746  03F2  2BEE               	goto	u4615
 16747  03F3  3001               	movlw	1
 16748  03F4  00C7               	movwf	??___ftadd
 16749  03F5  0847               	movf	??___ftadd,w
 16750  03F6  07CD               	addwf	___ftadd@exp1,f
 16751  03F7                     l5768:	
 16752  03F7  084D               	movf	___ftadd@exp1,w
 16753  03F8  064C               	xorwf	___ftadd@exp2,w
 16754  03F9  1903               	btfsc	3,2
 16755  03FA  2C21               	goto	l2841
 16756  03FB  2BED               	goto	l5766
 16757  03FC                     l5770:	
 16758  03FC  084D               	movf	___ftadd@exp1,w
 16759  03FD  024C               	subwf	___ftadd@exp2,w
 16760  03FE  1803               	skipnc
 16761  03FF  2C21               	goto	l2841
 16762  0400                     l5772:	
 16763  0400  3001               	movlw	1
 16764  0401                     u4645:	
 16765  0401  35C1               	lslf	___ftadd@f1,f
 16766  0402  0DC2               	rlf	___ftadd@f1+1,f
 16767  0403  0DC3               	rlf	___ftadd@f1+2,f
 16768  0404  0B89               	decfsz	9,f
 16769  0405  2C01               	goto	u4645
 16770  0406  3001               	movlw	1
 16771  0407  02CD               	subwf	___ftadd@exp1,f
 16772  0408  084C               	movf	___ftadd@exp2,w
 16773  0409  064D               	xorwf	___ftadd@exp1,w
 16774  040A  1903               	skipnz
 16775  040B  2C1D               	goto	l5780
 16776  040C  3001               	movlw	1
 16777  040D  02CB               	subwf	___ftadd@sign,f
 16778  040E  084B               	movf	___ftadd@sign,w
 16779  040F  3907               	andlw	7
 16780  0410  1903               	btfsc	3,2
 16781  0411  2C1D               	goto	l5780
 16782  0412  2C00               	goto	l5772
 16783  0413                     l5778:	
 16784  0413  3001               	movlw	1
 16785  0414                     u4675:	
 16786  0414  36C6               	lsrf	___ftadd@f2+2,f
 16787  0415  0CC5               	rrf	___ftadd@f2+1,f
 16788  0416  0CC4               	rrf	___ftadd@f2,f
 16789  0417  0B89               	decfsz	9,f
 16790  0418  2C14               	goto	u4675
 16791  0419  3001               	movlw	1
 16792  041A  00C7               	movwf	??___ftadd
 16793  041B  0847               	movf	??___ftadd,w
 16794  041C  07CC               	addwf	___ftadd@exp2,f
 16795  041D                     l5780:	
 16796  041D  084D               	movf	___ftadd@exp1,w
 16797  041E  064C               	xorwf	___ftadd@exp2,w
 16798  041F  1D03               	skipz
 16799  0420  2C13               	goto	l5778
 16800  0421                     l2841:	
 16801  0421  1FCB               	btfss	___ftadd@sign,7
 16802  0422  2C33               	goto	l5784
 16803  0423  30FF               	movlw	255
 16804  0424  06C1               	xorwf	___ftadd@f1,f
 16805  0425  30FF               	movlw	255
 16806  0426  06C2               	xorwf	___ftadd@f1+1,f
 16807  0427  30FF               	movlw	255
 16808  0428  06C3               	xorwf	___ftadd@f1+2,f
 16809  0429  3001               	movlw	1
 16810  042A  07C1               	addwf	___ftadd@f1,f
 16811  042B  3000               	movlw	0
 16812  042C  1803               	skipnc
 16813  042D  3001               	movlw	1
 16814  042E  07C2               	addwf	___ftadd@f1+1,f
 16815  042F  3000               	movlw	0
 16816  0430  1803               	skipnc
 16817  0431  3001               	movlw	1
 16818  0432  07C3               	addwf	___ftadd@f1+2,f
 16819  0433                     l5784:	
 16820  0433  1F4B               	btfss	___ftadd@sign,6
 16821  0434  2C45               	goto	l5788
 16822  0435  30FF               	movlw	255
 16823  0436  06C4               	xorwf	___ftadd@f2,f
 16824  0437  30FF               	movlw	255
 16825  0438  06C5               	xorwf	___ftadd@f2+1,f
 16826  0439  30FF               	movlw	255
 16827  043A  06C6               	xorwf	___ftadd@f2+2,f
 16828  043B  3001               	movlw	1
 16829  043C  07C4               	addwf	___ftadd@f2,f
 16830  043D  3000               	movlw	0
 16831  043E  1803               	skipnc
 16832  043F  3001               	movlw	1
 16833  0440  07C5               	addwf	___ftadd@f2+1,f
 16834  0441  3000               	movlw	0
 16835  0442  1803               	skipnc
 16836  0443  3001               	movlw	1
 16837  0444  07C6               	addwf	___ftadd@f2+2,f
 16838  0445                     l5788:	
 16839  0445  01CB               	clrf	___ftadd@sign
 16840  0446  0841               	movf	___ftadd@f1,w
 16841  0447  07C4               	addwf	___ftadd@f2,f
 16842  0448  0842               	movf	___ftadd@f1+1,w
 16843  0449  3DC5               	addwfc	___ftadd@f2+1,f
 16844  044A  0843               	movf	___ftadd@f1+2,w
 16845  044B  3DC6               	addwfc	___ftadd@f2+2,f
 16846  044C  1FC6               	btfss	___ftadd@f2+2,7
 16847  044D  2C60               	goto	l5798
 16848  044E  30FF               	movlw	255
 16849  044F  06C4               	xorwf	___ftadd@f2,f
 16850  0450  30FF               	movlw	255
 16851  0451  06C5               	xorwf	___ftadd@f2+1,f
 16852  0452  30FF               	movlw	255
 16853  0453  06C6               	xorwf	___ftadd@f2+2,f
 16854  0454  3001               	movlw	1
 16855  0455  07C4               	addwf	___ftadd@f2,f
 16856  0456  3000               	movlw	0
 16857  0457  1803               	skipnc
 16858  0458  3001               	movlw	1
 16859  0459  07C5               	addwf	___ftadd@f2+1,f
 16860  045A  3000               	movlw	0
 16861  045B  1803               	skipnc
 16862  045C  3001               	movlw	1
 16863  045D  07C6               	addwf	___ftadd@f2+2,f
 16864  045E  01CB               	clrf	___ftadd@sign
 16865  045F  0ACB               	incf	___ftadd@sign,f
 16866  0460                     l5798:	
 16867  0460  0844               	movf	___ftadd@f2,w
 16868  0461  00A0               	movwf	___ftpack@arg
 16869  0462  0845               	movf	___ftadd@f2+1,w
 16870  0463  00A1               	movwf	___ftpack@arg+1
 16871  0464  0846               	movf	___ftadd@f2+2,w
 16872  0465  00A2               	movwf	___ftpack@arg+2
 16873  0466  084D               	movf	___ftadd@exp1,w
 16874  0467  00C7               	movwf	??___ftadd
 16875  0468  0847               	movf	??___ftadd,w
 16876  0469  00A3               	movwf	___ftpack@exp
 16877  046A  084B               	movf	___ftadd@sign,w
 16878  046B  00C8               	movwf	??___ftadd+1
 16879  046C  0848               	movf	??___ftadd+1,w
 16880  046D  00A4               	movwf	___ftpack@sign
 16881  046E  3196  2671         	fcall	___ftpack
 16882  0470  0020               	movlb	0	; select bank0
 16883  0471  0820               	movf	?___ftpack,w
 16884  0472  00C1               	movwf	?___ftadd
 16885  0473  0821               	movf	?___ftpack+1,w
 16886  0474  00C2               	movwf	?___ftadd+1
 16887  0475  0822               	movf	?___ftpack+2,w
 16888  0476  00C3               	movwf	?___ftadd+2
 16889  0477  0008               	return
 16890  0478                     __end_of___ftadd:	
 16891                           
 16892                           	psect	text114
 16893  10A3                     __ptext114:	
 16894 ;; *************** function ___awtoft *****************
 16895 ;; Defined at:
 16896 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16897 ;; Parameters:    Size  Location     Type
 16898 ;;  c               2    8[BANK0 ] int 
 16899 ;; Auto vars:     Size  Location     Type
 16900 ;;  sign            1   13[BANK0 ] unsigned char 
 16901 ;; Return value:  Size  Location     Type
 16902 ;;                  3    8[BANK0 ] float 
 16903 ;; Registers used:
 16904 ;;		wreg, status,2, status,0, pclath, cstack
 16905 ;; Tracked objects:
 16906 ;;		On entry : 0/0
 16907 ;;		On exit  : 0/0
 16908 ;;		Unchanged: 0/0
 16909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16910 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16914 ;;Total ram usage:        6 bytes
 16915 ;; Hardware stack levels used:    1
 16916 ;; Hardware stack levels required when called:    5
 16917 ;; This function calls:
 16918 ;;		___ftpack
 16919 ;; This function is called by:
 16920 ;;		_getDimmerLights_PercentToValue
 16921 ;;		_getDimmerLights_ValueToPercent
 16922 ;; This function uses a non-reentrant model
 16923 ;;
 16924                           
 16925                           
 16926                           ;psect for function ___awtoft
 16927  10A3                     ___awtoft:	
 16928                           
 16929                           ;incstack = 0
 16930                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16931  10A3  0020               	movlb	0	; select bank0
 16932  10A4  01AD               	clrf	___awtoft@sign
 16933  10A5  1FA9               	btfss	___awtoft@c+1,7
 16934  10A6  28AE               	goto	l5726
 16935  10A7  09A8               	comf	___awtoft@c,f
 16936  10A8  09A9               	comf	___awtoft@c+1,f
 16937  10A9  0AA8               	incf	___awtoft@c,f
 16938  10AA  1903               	skipnz
 16939  10AB  0AA9               	incf	___awtoft@c+1,f
 16940  10AC  01AD               	clrf	___awtoft@sign
 16941  10AD  0AAD               	incf	___awtoft@sign,f
 16942  10AE                     l5726:	
 16943  10AE  0828               	movf	___awtoft@c,w
 16944  10AF  00A0               	movwf	___ftpack@arg
 16945  10B0  0829               	movf	___awtoft@c+1,w
 16946  10B1  00A1               	movwf	___ftpack@arg+1
 16947  10B2  01A2               	clrf	___ftpack@arg+2
 16948  10B3  308E               	movlw	142
 16949  10B4  00AB               	movwf	??___awtoft
 16950  10B5  082B               	movf	??___awtoft,w
 16951  10B6  00A3               	movwf	___ftpack@exp
 16952  10B7  082D               	movf	___awtoft@sign,w
 16953  10B8  00AC               	movwf	??___awtoft+1
 16954  10B9  082C               	movf	??___awtoft+1,w
 16955  10BA  00A4               	movwf	___ftpack@sign
 16956  10BB  3196  2671         	fcall	___ftpack
 16957  10BD  0020               	movlb	0	; select bank0
 16958  10BE  0820               	movf	?___ftpack,w
 16959  10BF  00A8               	movwf	?___awtoft
 16960  10C0  0821               	movf	?___ftpack+1,w
 16961  10C1  00A9               	movwf	?___awtoft+1
 16962  10C2  0822               	movf	?___ftpack+2,w
 16963  10C3  00AA               	movwf	?___awtoft+2
 16964  10C4  0008               	return
 16965  10C5                     __end_of___awtoft:	
 16966                           
 16967                           	psect	text115
 16968  1671                     __ptext115:	
 16969 ;; *************** function ___ftpack *****************
 16970 ;; Defined at:
 16971 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16972 ;; Parameters:    Size  Location     Type
 16973 ;;  arg             3    0[BANK0 ] unsigned um
 16974 ;;  exp             1    3[BANK0 ] unsigned char 
 16975 ;;  sign            1    4[BANK0 ] unsigned char 
 16976 ;; Auto vars:     Size  Location     Type
 16977 ;;		None
 16978 ;; Return value:  Size  Location     Type
 16979 ;;                  3    0[BANK0 ] float 
 16980 ;; Registers used:
 16981 ;;		wreg, status,2, status,0
 16982 ;; Tracked objects:
 16983 ;;		On entry : 0/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16987 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16991 ;;Total ram usage:        8 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    4
 16994 ;; This function calls:
 16995 ;;		Nothing
 16996 ;; This function is called by:
 16997 ;;		___awtoft
 16998 ;;		___ftadd
 16999 ;;		___ftdiv
 17000 ;;		___ftmul
 17001 ;; This function uses a non-reentrant model
 17002 ;;
 17003                           
 17004                           
 17005                           ;psect for function ___ftpack
 17006  1671                     ___ftpack:	
 17007                           
 17008                           ;incstack = 0
 17009                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17010  1671  0020               	movlb	0	; select bank0
 17011  1672  0823               	movf	___ftpack@exp,w
 17012  1673  1903               	btfsc	3,2
 17013  1674  2E7A               	goto	l5594
 17014  1675  0822               	movf	___ftpack@arg+2,w
 17015  1676  0421               	iorwf	___ftpack@arg+1,w
 17016  1677  0420               	iorwf	___ftpack@arg,w
 17017  1678  1D03               	skipz
 17018  1679  2E8B               	goto	l5600
 17019  167A                     l5594:	
 17020  167A  3000               	movlw	0
 17021  167B  00A0               	movwf	?___ftpack
 17022  167C  3000               	movlw	0
 17023  167D  00A1               	movwf	?___ftpack+1
 17024  167E  3000               	movlw	0
 17025  167F  00A2               	movwf	?___ftpack+2
 17026  1680  0008               	return
 17027  1681                     l5598:	
 17028  1681  3001               	movlw	1
 17029  1682  00A5               	movwf	??___ftpack
 17030  1683  0825               	movf	??___ftpack,w
 17031  1684  07A3               	addwf	___ftpack@exp,f
 17032  1685  3001               	movlw	1
 17033  1686                     u4215:	
 17034  1686  36A2               	lsrf	___ftpack@arg+2,f
 17035  1687  0CA1               	rrf	___ftpack@arg+1,f
 17036  1688  0CA0               	rrf	___ftpack@arg,f
 17037  1689  0B89               	decfsz	9,f
 17038  168A  2E86               	goto	u4215
 17039  168B                     l5600:	
 17040  168B  30FE               	movlw	254
 17041  168C  0522               	andwf	___ftpack@arg+2,w
 17042  168D  1903               	btfsc	3,2
 17043  168E  2EA4               	goto	l2812
 17044  168F  2E81               	goto	l5598
 17045  1690                     l5602:	
 17046  1690  3001               	movlw	1
 17047  1691  00A5               	movwf	??___ftpack
 17048  1692  0825               	movf	??___ftpack,w
 17049  1693  07A3               	addwf	___ftpack@exp,f
 17050  1694  3001               	movlw	1
 17051  1695  07A0               	addwf	___ftpack@arg,f
 17052  1696  3000               	movlw	0
 17053  1697  1803               	skipnc
 17054  1698  3001               	movlw	1
 17055  1699  07A1               	addwf	___ftpack@arg+1,f
 17056  169A  3000               	movlw	0
 17057  169B  1803               	skipnc
 17058  169C  3001               	movlw	1
 17059  169D  07A2               	addwf	___ftpack@arg+2,f
 17060  169E  3001               	movlw	1
 17061  169F                     u4235:	
 17062  169F  36A2               	lsrf	___ftpack@arg+2,f
 17063  16A0  0CA1               	rrf	___ftpack@arg+1,f
 17064  16A1  0CA0               	rrf	___ftpack@arg,f
 17065  16A2  0B89               	decfsz	9,f
 17066  16A3  2E9F               	goto	u4235
 17067  16A4                     l2812:	
 17068  16A4  30FF               	movlw	255
 17069  16A5  0522               	andwf	___ftpack@arg+2,w
 17070  16A6  1903               	btfsc	3,2
 17071  16A7  2EB1               	goto	l5610
 17072  16A8  2E90               	goto	l5602
 17073  16A9                     l5608:	
 17074  16A9  3001               	movlw	1
 17075  16AA  02A3               	subwf	___ftpack@exp,f
 17076  16AB  3001               	movlw	1
 17077  16AC                     u4255:	
 17078  16AC  35A0               	lslf	___ftpack@arg,f
 17079  16AD  0DA1               	rlf	___ftpack@arg+1,f
 17080  16AE  0DA2               	rlf	___ftpack@arg+2,f
 17081  16AF  0B89               	decfsz	9,f
 17082  16B0  2EAC               	goto	u4255
 17083  16B1                     l5610:	
 17084  16B1  1FA1               	btfss	___ftpack@arg+1,7
 17085  16B2  2EA9               	goto	l5608
 17086  16B3  1823               	btfsc	___ftpack@exp,0
 17087  16B4  2EBB               	goto	l2818
 17088  16B5  30FF               	movlw	255
 17089  16B6  05A0               	andwf	___ftpack@arg,f
 17090  16B7  307F               	movlw	127
 17091  16B8  05A1               	andwf	___ftpack@arg+1,f
 17092  16B9  30FF               	movlw	255
 17093  16BA  05A2               	andwf	___ftpack@arg+2,f
 17094  16BB                     l2818:	
 17095  16BB  1003               	clrc
 17096  16BC  0CA3               	rrf	___ftpack@exp,f
 17097  16BD  0823               	movf	___ftpack@exp,w
 17098  16BE  00A5               	movwf	??___ftpack
 17099  16BF  01A6               	clrf	??___ftpack+1
 17100  16C0  01A7               	clrf	??___ftpack+2
 17101  16C1  3010               	movlw	16
 17102  16C2                     u4285:	
 17103  16C2  35A5               	lslf	??___ftpack,f
 17104  16C3  0DA6               	rlf	??___ftpack+1,f
 17105  16C4  0DA7               	rlf	??___ftpack+2,f
 17106  16C5  0B89               	decfsz	9,f
 17107  16C6  2EC2               	goto	u4285
 17108  16C7  0825               	movf	??___ftpack,w
 17109  16C8  04A0               	iorwf	___ftpack@arg,f
 17110  16C9  0826               	movf	??___ftpack+1,w
 17111  16CA  04A1               	iorwf	___ftpack@arg+1,f
 17112  16CB  0827               	movf	??___ftpack+2,w
 17113  16CC  04A2               	iorwf	___ftpack@arg+2,f
 17114  16CD  0824               	movf	___ftpack@sign,w
 17115  16CE  1903               	btfsc	3,2
 17116  16CF  0008               	return
 17117  16D0  17A2               	bsf	___ftpack@arg+2,7
 17118  16D1  0008               	return
 17119  16D2                     __end_of___ftpack:	
 17120                           
 17121                           	psect	text116
 17122  1C87                     __ptext116:	
 17123 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17124 ;; Defined at:
 17125 ;;		line 67 in file "../src/Dimmer_B1.c"
 17126 ;; Parameters:    Size  Location     Type
 17127 ;;  lights          1    wreg     unsigned char 
 17128 ;; Auto vars:     Size  Location     Type
 17129 ;;  lights          1    1[BANK0 ] unsigned char 
 17130 ;;  value           1    2[BANK0 ] unsigned char 
 17131 ;; Return value:  Size  Location     Type
 17132 ;;                  1    wreg      unsigned char 
 17133 ;; Registers used:
 17134 ;;		wreg, status,2
 17135 ;; Tracked objects:
 17136 ;;		On entry : 0/0
 17137 ;;		On exit  : 0/0
 17138 ;;		Unchanged: 0/0
 17139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17143 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17144 ;;Total ram usage:        3 bytes
 17145 ;; Hardware stack levels used:    1
 17146 ;; Hardware stack levels required when called:    4
 17147 ;; This function calls:
 17148 ;;		Nothing
 17149 ;; This function is called by:
 17150 ;;		_setDimmerLights_Dimming
 17151 ;; This function uses a non-reentrant model
 17152 ;;
 17153                           
 17154                           
 17155                           ;psect for function _getDimmerIntr_DimmingValue
 17156  1C87                     _getDimmerIntr_DimmingValue:	
 17157                           
 17158                           ;incstack = 0
 17159                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17160                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17161  1C87  0020               	movlb	0	; select bank0
 17162  1C88  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 17163                           
 17164                           ;Dimmer_B1.c: 68: char value = 0;
 17165  1C89  01A2               	clrf	getDimmerIntr_DimmingValue@value
 17166                           
 17167                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17168  1C8A  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 17169  1C8B  3A01               	xorlw	1
 17170  1C8C  1D03               	skipz
 17171  1C8D  2C94               	goto	l683
 17172                           
 17173                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17174  1C8E  0021               	movlb	1	; select bank1
 17175  1C8F  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 17176  1C90  0020               	movlb	0	; select bank0
 17177  1C91  00A0               	movwf	??_getDimmerIntr_DimmingValue
 17178  1C92  0820               	movf	??_getDimmerIntr_DimmingValue,w
 17179  1C93  00A2               	movwf	getDimmerIntr_DimmingValue@value
 17180  1C94                     l683:	
 17181                           
 17182                           ;Dimmer_B1.c: 72: }
 17183                           ;Dimmer_B1.c: 84: return value;
 17184  1C94  0822               	movf	getDimmerIntr_DimmingValue@value,w
 17185  1C95  0008               	return
 17186  1C96                     __end_of_getDimmerIntr_DimmingValue:	
 17187                           
 17188                           	psect	text117
 17189  1E3C                     __ptext117:	
 17190 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17191 ;; Defined at:
 17192 ;;		line 916 in file "../src/Dimmer_B1.c"
 17193 ;; Parameters:    Size  Location     Type
 17194 ;;  lights          1    wreg     unsigned char 
 17195 ;; Auto vars:     Size  Location     Type
 17196 ;;  lights          1    0[COMMON] unsigned char 
 17197 ;;  allow           1    2[BANK0 ] unsigned char 
 17198 ;; Return value:  Size  Location     Type
 17199 ;;                  1    wreg      unsigned char 
 17200 ;; Registers used:
 17201 ;;		wreg, status,2, pclath, cstack
 17202 ;; Tracked objects:
 17203 ;;		On entry : 0/0
 17204 ;;		On exit  : 0/0
 17205 ;;		Unchanged: 0/0
 17206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17208 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17210 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17211 ;;Total ram usage:        3 bytes
 17212 ;; Hardware stack levels used:    1
 17213 ;; Hardware stack levels required when called:    5
 17214 ;; This function calls:
 17215 ;;		_getLoad_OK
 17216 ;; This function is called by:
 17217 ;;		_setDimmerLights_Main
 17218 ;; This function uses a non-reentrant model
 17219 ;;
 17220                           
 17221                           
 17222                           ;psect for function _getDimmerLights_Allow_Condition
 17223  1E3C                     _getDimmerLights_Allow_Condition:	
 17224                           
 17225                           ;Dimmer_B1.c: 917: char allow = 0;
 17226                           
 17227                           ;incstack = 0
 17228                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 17229  1E3C  0020               	movlb	0	; select bank0
 17230  1E3D  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 17231                           
 17232                           ;Dimmer_B1.c: 923: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17233  1E3E  01A3               	clrf	_getDimmerLights_Allow_Condition$2141
 17234  1E3F  0AA3               	incf	_getDimmerLights_Allow_Condition$2141,f
 17235  1E40  319B  238F  319E   	fcall	_getLoad_OK
 17236  1E43  3800               	iorlw	0
 17237  1E44  1D03               	skipz
 17238  1E45  2E4B               	goto	l6632
 17239  1E46  0023               	movlb	3	; select bank3
 17240  1E47  18A0               	btfsc	_Dimmer^(0+384),1
 17241  1E48  2E4B               	goto	l6632
 17242  1E49  0020               	movlb	0	; select bank0
 17243  1E4A  01A3               	clrf	_getDimmerLights_Allow_Condition$2141
 17244  1E4B                     l6632:	
 17245  1E4B  0020               	movlb	0	; select bank0
 17246  1E4C  0823               	movf	_getDimmerLights_Allow_Condition$2141,w
 17247  1E4D  00A1               	movwf	??_getDimmerLights_Allow_Condition
 17248  1E4E  0821               	movf	??_getDimmerLights_Allow_Condition,w
 17249  1E4F  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 17250                           
 17251                           ;Dimmer_B1.c: 950: return allow;
 17252  1E50  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 17253  1E51  0008               	return
 17254  1E52                     __end_of_getDimmerLights_Allow_Condition:	
 17255                           
 17256                           	psect	text118
 17257  1B8F                     __ptext118:	
 17258 ;; *************** function _getLoad_OK *****************
 17259 ;; Defined at:
 17260 ;;		line 272 in file "../src/OverLoad_B1.c"
 17261 ;; Parameters:    Size  Location     Type
 17262 ;;		None
 17263 ;; Auto vars:     Size  Location     Type
 17264 ;;  ok              1    0[BANK0 ] unsigned char 
 17265 ;; Return value:  Size  Location     Type
 17266 ;;                  1    wreg      unsigned char 
 17267 ;; Registers used:
 17268 ;;		wreg, status,2
 17269 ;; Tracked objects:
 17270 ;;		On entry : 0/0
 17271 ;;		On exit  : 0/0
 17272 ;;		Unchanged: 0/0
 17273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17275 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17277 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17278 ;;Total ram usage:        1 bytes
 17279 ;; Hardware stack levels used:    1
 17280 ;; Hardware stack levels required when called:    4
 17281 ;; This function calls:
 17282 ;;		Nothing
 17283 ;; This function is called by:
 17284 ;;		_DimmerLights_Main
 17285 ;;		_getDimmerLights_Allow_Condition
 17286 ;; This function uses a non-reentrant model
 17287 ;;
 17288                           
 17289                           
 17290                           ;psect for function _getLoad_OK
 17291  1B8F                     _getLoad_OK:	
 17292                           
 17293                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17294                           
 17295                           ;incstack = 0
 17296                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17297  1B8F  3000               	movlw	0
 17298  1B90  0022               	movlb	2	; select bank2
 17299  1B91  1BC8               	btfsc	_Load^(0+256),7
 17300  1B92  3001               	movlw	1
 17301  1B93  0020               	movlb	0	; select bank0
 17302  1B94  00A0               	movwf	getLoad_OK@ok
 17303                           
 17304                           ;OverLoad_B1.c: 274: return ok;
 17305  1B95  0820               	movf	getLoad_OK@ok,w
 17306  1B96  0008               	return
 17307  1B97                     __end_of_getLoad_OK:	
 17308                           
 17309                           	psect	text119
 17310  11AF                     __ptext119:	
 17311 ;; *************** function _getMain_All_Error_Status *****************
 17312 ;; Defined at:
 17313 ;;		line 424 in file "../src/Main_B1.c"
 17314 ;; Parameters:    Size  Location     Type
 17315 ;;  command         1    wreg     unsigned char 
 17316 ;; Auto vars:     Size  Location     Type
 17317 ;;  command         1    5[BANK0 ] unsigned char 
 17318 ;;  status          1    6[BANK0 ] unsigned char 
 17319 ;; Return value:  Size  Location     Type
 17320 ;;                  1    wreg      unsigned char 
 17321 ;; Registers used:
 17322 ;;		wreg, status,2, status,0
 17323 ;; Tracked objects:
 17324 ;;		On entry : 0/0
 17325 ;;		On exit  : 0/0
 17326 ;;		Unchanged: 0/0
 17327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17329 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17331 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17332 ;;Total ram usage:        7 bytes
 17333 ;; Hardware stack levels used:    1
 17334 ;; Hardware stack levels required when called:    4
 17335 ;; This function calls:
 17336 ;;		Nothing
 17337 ;; This function is called by:
 17338 ;;		_DimmerLights_Main
 17339 ;;		_Exception_Main
 17340 ;;		_Load_Main
 17341 ;;		_setTemp_Main
 17342 ;;		_getRxData
 17343 ;;		_setSw_Main
 17344 ;; This function uses a non-reentrant model
 17345 ;;
 17346                           
 17347                           
 17348                           ;psect for function _getMain_All_Error_Status
 17349  11AF                     _getMain_All_Error_Status:	
 17350                           
 17351                           ;incstack = 0
 17352                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17353                           ;getMain_All_Error_Status@command stored from wreg
 17354  11AF  0020               	movlb	0	; select bank0
 17355  11B0  00A5               	movwf	getMain_All_Error_Status@command
 17356                           
 17357                           ;Main_B1.c: 425: char status = 0;
 17358  11B1  01A6               	clrf	getMain_All_Error_Status@status
 17359                           
 17360                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 17361  11B2  08A6               	movf	getMain_All_Error_Status@status,f
 17362  11B3  1D03               	skipz
 17363  11B4  29C9               	goto	l6396
 17364  11B5  0825               	movf	getMain_All_Error_Status@command,w
 17365  11B6  3A02               	xorlw	2
 17366  11B7  1903               	skipnz
 17367  11B8  29C9               	goto	l6396
 17368                           
 17369                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17370  11B9  0021               	movlb	1	; select bank1
 17371  11BA  18DC               	btfsc	_Temp^(0+128),1
 17372  11BB  29C0               	goto	l6394
 17373  11BC  0020               	movlb	0	; select bank0
 17374  11BD  01A1               	clrf	_getMain_All_Error_Status$3400
 17375  11BE  01A2               	clrf	_getMain_All_Error_Status$3400+1
 17376  11BF  29C5               	goto	l1446
 17377  11C0                     l6394:	
 17378  11C0  3002               	movlw	2
 17379  11C1  0020               	movlb	0	; select bank0
 17380  11C2  00A1               	movwf	_getMain_All_Error_Status$3400
 17381  11C3  3000               	movlw	0
 17382  11C4  00A2               	movwf	_getMain_All_Error_Status$3400+1
 17383  11C5                     l1446:	
 17384  11C5  0821               	movf	_getMain_All_Error_Status$3400,w
 17385  11C6  00A0               	movwf	??_getMain_All_Error_Status
 17386  11C7  0820               	movf	??_getMain_All_Error_Status,w
 17387  11C8  00A6               	movwf	getMain_All_Error_Status@status
 17388  11C9                     l6396:	
 17389                           
 17390                           ;Main_B1.c: 438: }
 17391                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 17392  11C9  08A6               	movf	getMain_All_Error_Status@status,f
 17393  11CA  1D03               	skipz
 17394  11CB  29E0               	goto	l1447
 17395  11CC  0825               	movf	getMain_All_Error_Status@command,w
 17396  11CD  3A03               	xorlw	3
 17397  11CE  1903               	skipnz
 17398  11CF  29E0               	goto	l1447
 17399                           
 17400                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 17401  11D0  0022               	movlb	2	; select bank2
 17402  11D1  1AC8               	btfsc	_Load^(0+256),5
 17403  11D2  29D7               	goto	l6404
 17404  11D3  0020               	movlb	0	; select bank0
 17405  11D4  01A3               	clrf	_getMain_All_Error_Status$3401
 17406  11D5  01A4               	clrf	_getMain_All_Error_Status$3401+1
 17407  11D6  29DC               	goto	l1451
 17408  11D7                     l6404:	
 17409  11D7  3003               	movlw	3
 17410  11D8  0020               	movlb	0	; select bank0
 17411  11D9  00A3               	movwf	_getMain_All_Error_Status$3401
 17412  11DA  3000               	movlw	0
 17413  11DB  00A4               	movwf	_getMain_All_Error_Status$3401+1
 17414  11DC                     l1451:	
 17415  11DC  0823               	movf	_getMain_All_Error_Status$3401,w
 17416  11DD  00A0               	movwf	??_getMain_All_Error_Status
 17417  11DE  0820               	movf	??_getMain_All_Error_Status,w
 17418  11DF  00A6               	movwf	getMain_All_Error_Status@status
 17419  11E0                     l1447:	
 17420                           
 17421                           ;Main_B1.c: 445: }
 17422                           ;Main_B1.c: 455: return status;
 17423  11E0  0826               	movf	getMain_All_Error_Status@status,w
 17424  11E1  0008               	return
 17425  11E2                     __end_of_getMain_All_Error_Status:	
 17426                           
 17427                           	psect	text120
 17428  1B7A                     __ptext120:	
 17429 ;; *************** function _DimmerLights_Initialization *****************
 17430 ;; Defined at:
 17431 ;;		line 597 in file "../src/Dimmer_B1.c"
 17432 ;; Parameters:    Size  Location     Type
 17433 ;;		None
 17434 ;; Auto vars:     Size  Location     Type
 17435 ;;		None
 17436 ;; Return value:  Size  Location     Type
 17437 ;;		None               void
 17438 ;; Registers used:
 17439 ;;		wreg, status,2, status,0, pclath, cstack
 17440 ;; Tracked objects:
 17441 ;;		On entry : 0/0
 17442 ;;		On exit  : 0/0
 17443 ;;		Unchanged: 0/0
 17444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;Total ram usage:        0 bytes
 17450 ;; Hardware stack levels used:    1
 17451 ;; Hardware stack levels required when called:    5
 17452 ;; This function calls:
 17453 ;;		_DimmerIntr_Initialization
 17454 ;;		_setDimmerLights_Initialization
 17455 ;; This function is called by:
 17456 ;;		_main
 17457 ;; This function uses a non-reentrant model
 17458 ;;
 17459                           
 17460                           
 17461                           ;psect for function _DimmerLights_Initialization
 17462  1B7A                     _DimmerLights_Initialization:	
 17463                           
 17464                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 17465                           
 17466                           ;incstack = 0
 17467                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17468  1B7A  3001               	movlw	1
 17469  1B7B  319B  2328  319B   	fcall	_setDimmerLights_Initialization
 17470                           
 17471                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 17472  1B7E  319E  2698         	fcall	_DimmerIntr_Initialization
 17473  1B80  0008               	return
 17474  1B81                     __end_of_DimmerLights_Initialization:	
 17475                           
 17476                           	psect	text121
 17477  1B28                     __ptext121:	
 17478 ;; *************** function _setDimmerLights_Initialization *****************
 17479 ;; Defined at:
 17480 ;;		line 613 in file "../src/Dimmer_B1.c"
 17481 ;; Parameters:    Size  Location     Type
 17482 ;;  lights          1    wreg     unsigned char 
 17483 ;; Auto vars:     Size  Location     Type
 17484 ;;  lights          1    0[COMMON] unsigned char 
 17485 ;; Return value:  Size  Location     Type
 17486 ;;		None               void
 17487 ;; Registers used:
 17488 ;;		wreg
 17489 ;; Tracked objects:
 17490 ;;		On entry : 0/0
 17491 ;;		On exit  : 0/0
 17492 ;;		Unchanged: 0/0
 17493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17498 ;;Total ram usage:        0 bytes
 17499 ;; Hardware stack levels used:    1
 17500 ;; Hardware stack levels required when called:    4
 17501 ;; This function calls:
 17502 ;;		Nothing
 17503 ;; This function is called by:
 17504 ;;		_DimmerLights_Initialization
 17505 ;; This function uses a non-reentrant model
 17506 ;;
 17507                           
 17508                           
 17509                           ;psect for function _setDimmerLights_Initialization
 17510  1B28                     _setDimmerLights_Initialization:	
 17511                           
 17512                           ;incstack = 0
 17513                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17514  1B28  0008               	return
 17515  1B29                     __end_of_setDimmerLights_Initialization:	
 17516                           
 17517                           	psect	text122
 17518  1E98                     __ptext122:	
 17519 ;; *************** function _DimmerIntr_Initialization *****************
 17520 ;; Defined at:
 17521 ;;		line 7 in file "../src/Dimmer_B1.c"
 17522 ;; Parameters:    Size  Location     Type
 17523 ;;		None
 17524 ;; Auto vars:     Size  Location     Type
 17525 ;;		None
 17526 ;; Return value:  Size  Location     Type
 17527 ;;		None               void
 17528 ;; Registers used:
 17529 ;;		wreg
 17530 ;; Tracked objects:
 17531 ;;		On entry : 0/0
 17532 ;;		On exit  : 0/0
 17533 ;;		Unchanged: 0/0
 17534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;Total ram usage:        1 bytes
 17540 ;; Hardware stack levels used:    1
 17541 ;; Hardware stack levels required when called:    4
 17542 ;; This function calls:
 17543 ;;		Nothing
 17544 ;; This function is called by:
 17545 ;;		_DimmerLights_Initialization
 17546 ;; This function uses a non-reentrant model
 17547 ;;
 17548                           
 17549                           
 17550                           ;psect for function _DimmerIntr_Initialization
 17551  1E98                     _DimmerIntr_Initialization:	
 17552                           
 17553                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 17554                           
 17555                           ;incstack = 0
 17556                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17557  1E98  3007               	movlw	7
 17558  1E99  0020               	movlb	0	; select bank0
 17559  1E9A  00A0               	movwf	??_DimmerIntr_Initialization
 17560  1E9B  0820               	movf	??_DimmerIntr_Initialization,w
 17561  1E9C  0021               	movlb	1	; select bank1
 17562  1E9D  00CA               	movwf	(_DimmerIntr1^(0+128)+3)
 17563                           
 17564                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(70*0.6));
 17565  1E9E  302A               	movlw	42
 17566  1E9F  0020               	movlb	0	; select bank0
 17567  1EA0  00A0               	movwf	??_DimmerIntr_Initialization
 17568  1EA1  0820               	movf	??_DimmerIntr_Initialization,w
 17569  1EA2  0021               	movlb	1	; select bank1
 17570  1EA3  00CC               	movwf	(_DimmerIntr1^(0+128)+5)
 17571                           
 17572                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 17573  1EA4  3006               	movlw	6
 17574  1EA5  0020               	movlb	0	; select bank0
 17575  1EA6  00A0               	movwf	??_DimmerIntr_Initialization
 17576  1EA7  0820               	movf	??_DimmerIntr_Initialization,w
 17577  1EA8  0021               	movlb	1	; select bank1
 17578  1EA9  00CD               	movwf	(_DimmerIntr1^(0+128)+6)
 17579                           
 17580                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(70*0.6));
 17581  1EAA  302A               	movlw	42
 17582  1EAB  0020               	movlb	0	; select bank0
 17583  1EAC  00A0               	movwf	??_DimmerIntr_Initialization
 17584  1EAD  0820               	movf	??_DimmerIntr_Initialization,w
 17585  1EAE  0021               	movlb	1	; select bank1
 17586  1EAF  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 17587  1EB0  0008               	return
 17588  1EB1                     __end_of_DimmerIntr_Initialization:	
 17589                           
 17590                           	psect	text123
 17591  1B3F                     __ptext123:	
 17592 ;; *************** function _DelayOff_Main *****************
 17593 ;; Defined at:
 17594 ;;		line 41 in file "../src/DelayOff_B1.c"
 17595 ;; Parameters:    Size  Location     Type
 17596 ;;		None
 17597 ;; Auto vars:     Size  Location     Type
 17598 ;;		None
 17599 ;; Return value:  Size  Location     Type
 17600 ;;		None               void
 17601 ;; Registers used:
 17602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17603 ;; Tracked objects:
 17604 ;;		On entry : 0/0
 17605 ;;		On exit  : 0/0
 17606 ;;		Unchanged: 0/0
 17607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17612 ;;Total ram usage:        0 bytes
 17613 ;; Hardware stack levels used:    1
 17614 ;; Hardware stack levels required when called:    8
 17615 ;; This function calls:
 17616 ;;		_DlyOff_Main
 17617 ;; This function is called by:
 17618 ;;		_main
 17619 ;; This function uses a non-reentrant model
 17620 ;;
 17621                           
 17622                           
 17623                           ;psect for function _DelayOff_Main
 17624  1B3F                     _DelayOff_Main:	
 17625                           
 17626                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17627                           
 17628                           ;incstack = 0
 17629                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17630  1B3F  3001               	movlw	1
 17631  1B40  3189  21DF         	fcall	_DlyOff_Main
 17632  1B42  0008               	return
 17633  1B43                     __end_of_DelayOff_Main:	
 17634                           
 17635                           	psect	text124
 17636  09DF                     __ptext124:	
 17637 ;; *************** function _DlyOff_Main *****************
 17638 ;; Defined at:
 17639 ;;		line 61 in file "../src/DelayOff_B1.c"
 17640 ;; Parameters:    Size  Location     Type
 17641 ;;  sw              1    wreg     unsigned char 
 17642 ;; Auto vars:     Size  Location     Type
 17643 ;;  sw              1   71[BANK0 ] unsigned char 
 17644 ;; Return value:  Size  Location     Type
 17645 ;;		None               void
 17646 ;; Registers used:
 17647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17648 ;; Tracked objects:
 17649 ;;		On entry : 0/0
 17650 ;;		On exit  : 0/0
 17651 ;;		Unchanged: 0/0
 17652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17656 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17657 ;;Total ram usage:        3 bytes
 17658 ;; Hardware stack levels used:    1
 17659 ;; Hardware stack levels required when called:    7
 17660 ;; This function calls:
 17661 ;;		_DelayOffPointSelect
 17662 ;;		_getDimmerLights_Status
 17663 ;;		_setDimmerLights_SwOff
 17664 ;;		_setDimmerLights_SwOn
 17665 ;;		_setProductData
 17666 ;; This function is called by:
 17667 ;;		_DelayOff_Main
 17668 ;; This function uses a non-reentrant model
 17669 ;;
 17670                           
 17671                           
 17672                           ;psect for function _DlyOff_Main
 17673  09DF                     _DlyOff_Main:	
 17674                           
 17675                           ;incstack = 0
 17676                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17677                           ;DlyOff_Main@sw stored from wreg
 17678  09DF  0020               	movlb	0	; select bank0
 17679  09E0  00E7               	movwf	DlyOff_Main@sw
 17680                           
 17681                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17682  09E1  0867               	movf	DlyOff_Main@sw,w
 17683  09E2  319B  23F7  3189   	fcall	_DelayOffPointSelect
 17684                           
 17685                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17686  09E5  0021               	movlb	1	; select bank1
 17687  09E6  0851               	movf	_DelayOff^(0+128),w
 17688  09E7  0086               	movwf	6
 17689  09E8  3001               	movlw	1	; select bank2/3
 17690  09E9  0087               	movwf	7
 17691  09EA  1C81               	btfss	1,1
 17692  09EB  0008               	return
 17693                           
 17694                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17695  09EC  0851               	movf	_DelayOff^(0+128),w
 17696  09ED  3E02               	addlw	2
 17697  09EE  0086               	movwf	6
 17698  09EF  3001               	movlw	1	; select bank2/3
 17699  09F0  0087               	movwf	7
 17700  09F1  3001               	movlw	1
 17701  09F2  0781               	addwf	1,f
 17702  09F3  3141               	addfsr 1,1
 17703  09F4  1803               	skipnc
 17704  09F5  0A81               	incf	1,f
 17705                           
 17706                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17707  09F6  0851               	movf	_DelayOff^(0+128),w
 17708  09F7  3E02               	addlw	2
 17709  09F8  0086               	movwf	6
 17710  09F9  3001               	movlw	1	; select bank2/3
 17711  09FA  0087               	movwf	7
 17712  09FB  3F40               	moviw [0]fsr1
 17713  09FC  0020               	movlb	0	; select bank0
 17714  09FD  00E5               	movwf	??_DlyOff_Main
 17715  09FE  3F41               	moviw [1]fsr1
 17716  09FF  00E6               	movwf	??_DlyOff_Main+1
 17717  0A00  300B               	movlw	11
 17718  0A01  0266               	subwf	??_DlyOff_Main+1,w
 17719  0A02  30B8               	movlw	184
 17720  0A03  1903               	skipnz
 17721  0A04  0265               	subwf	??_DlyOff_Main,w
 17722  0A05  1C03               	skipc
 17723  0A06  0008               	return
 17724                           
 17725                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17726  0A07  0021               	movlb	1	; select bank1
 17727  0A08  0851               	movf	_DelayOff^(0+128),w
 17728  0A09  3E02               	addlw	2
 17729  0A0A  0086               	movwf	6
 17730  0A0B  3001               	movlw	1	; select bank2/3
 17731  0A0C  0087               	movwf	7
 17732  0A0D  3000               	movlw	0
 17733  0A0E  3FC0               	movwi [0]fsr1
 17734  0A0F  3FC1               	movwi [1]fsr1
 17735                           
 17736                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17737  0A10  3001               	movlw	1
 17738  0A11  0020               	movlb	0	; select bank0
 17739  0A12  00E5               	movwf	??_DlyOff_Main
 17740  0A13  0021               	movlb	1	; select bank1
 17741  0A14  0851               	movf	_DelayOff^(0+128),w
 17742  0A15  3E04               	addlw	4
 17743  0A16  0086               	movwf	6
 17744  0A17  3001               	movlw	1	; select bank2/3
 17745  0A18  0087               	movwf	7
 17746  0A19  0020               	movlb	0	; select bank0
 17747  0A1A  0865               	movf	??_DlyOff_Main,w
 17748  0A1B  0781               	addwf	1,f
 17749                           
 17750                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17751  0A1C  0021               	movlb	1	; select bank1
 17752  0A1D  0851               	movf	_DelayOff^(0+128),w
 17753  0A1E  3E04               	addlw	4
 17754  0A1F  0086               	movwf	6
 17755  0A20  3001               	movlw	1	; select bank2/3
 17756  0A21  0087               	movwf	7
 17757  0A22  0A51               	incf	_DelayOff^(0+128),w
 17758  0A23  0084               	movwf	4
 17759  0A24  3001               	movlw	1	; select bank2/3
 17760  0A25  0085               	movwf	5
 17761  0A26  0800               	movf	0,w
 17762  0A27  0201               	subwf	1,w
 17763  0A28  1C03               	skipc
 17764  0A29  0008               	return
 17765                           
 17766                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17767  0A2A  0851               	movf	_DelayOff^(0+128),w
 17768  0A2B  3E04               	addlw	4
 17769  0A2C  0086               	movwf	6
 17770  0A2D  3001               	movlw	1	; select bank2/3
 17771  0A2E  0087               	movwf	7
 17772  0A2F  0181               	clrf	1
 17773                           
 17774                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17775  0A30  0851               	movf	_DelayOff^(0+128),w
 17776  0A31  0086               	movwf	6
 17777  0A32  3001               	movlw	1	; select bank2/3
 17778  0A33  0087               	movwf	7
 17779  0A34  1081               	bcf	1,1
 17780                           
 17781                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17782  0A35  0020               	movlb	0	; select bank0
 17783  0A36  0867               	movf	DlyOff_Main@sw,w
 17784  0A37  319C  24B5  3189   	fcall	_getDimmerLights_Status
 17785  0A3A  3A01               	xorlw	1
 17786  0A3B  1D03               	skipz
 17787  0A3C  2A47               	goto	l531
 17788                           
 17789                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17790  0A3D  0020               	movlb	0	; select bank0
 17791  0A3E  0867               	movf	DlyOff_Main@sw,w
 17792  0A3F  3192  2216  3189   	fcall	_setDimmerLights_SwOn
 17793                           
 17794                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17795  0A42  0020               	movlb	0	; select bank0
 17796  0A43  0867               	movf	DlyOff_Main@sw,w
 17797  0A44  3192  22B7  3189   	fcall	_setDimmerLights_SwOff
 17798  0A47                     l531:	
 17799                           
 17800                           ;DelayOff_B1.c: 78: }
 17801                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17802  0A47  0020               	movlb	0	; select bank0
 17803  0A48  01E2               	clrf	setProductData@value
 17804  0A49  0867               	movf	DlyOff_Main@sw,w
 17805  0A4A  3E1A               	addlw	26
 17806  0A4B  319C  240F         	fcall	_setProductData
 17807  0A4D  0008               	return
 17808  0A4E                     __end_of_DlyOff_Main:	
 17809                           
 17810                           	psect	text125
 17811  1C0F                     __ptext125:	
 17812 ;; *************** function _setProductData *****************
 17813 ;; Defined at:
 17814 ;;		line 645 in file "../src/Main_B1.c"
 17815 ;; Parameters:    Size  Location     Type
 17816 ;;  address         1    wreg     unsigned char 
 17817 ;;  value           1   66[BANK0 ] unsigned char 
 17818 ;; Auto vars:     Size  Location     Type
 17819 ;;  address         1   68[BANK0 ] unsigned char 
 17820 ;; Return value:  Size  Location     Type
 17821 ;;		None               void
 17822 ;; Registers used:
 17823 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17824 ;; Tracked objects:
 17825 ;;		On entry : 0/0
 17826 ;;		On exit  : 0/0
 17827 ;;		Unchanged: 0/0
 17828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17829 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17831 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17832 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;Total ram usage:        3 bytes
 17834 ;; Hardware stack levels used:    1
 17835 ;; Hardware stack levels required when called:    4
 17836 ;; This function calls:
 17837 ;;		Nothing
 17838 ;; This function is called by:
 17839 ;;		_DlyOff_Main
 17840 ;;		_setDelayOff_GO
 17841 ;;		_setDimmerLights_OnOff
 17842 ;;		_setDimmerLights_Dimming
 17843 ;;		_setTemp_Main
 17844 ;;		_setLog_Code
 17845 ;;		_setControl_Lights_Table
 17846 ;;		_setRFSW_AdjControl
 17847 ;;		_setRF_DimmerLights
 17848 ;; This function uses a non-reentrant model
 17849 ;;
 17850                           
 17851                           
 17852                           ;psect for function _setProductData
 17853  1C0F                     _setProductData:	
 17854                           
 17855                           ;incstack = 0
 17856                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17857                           ;setProductData@address stored from wreg
 17858  1C0F  0020               	movlb	0	; select bank0
 17859  1C10  00E4               	movwf	setProductData@address
 17860                           
 17861                           ;Main_B1.c: 646: _product.Data[address] = value;
 17862  1C11  0862               	movf	setProductData@value,w
 17863  1C12  00E3               	movwf	??_setProductData
 17864  1C13  0864               	movf	setProductData@address,w
 17865  1C14  3E20               	addlw	__product& (0+255)
 17866  1C15  0086               	movwf	6
 17867  1C16  3002               	movlw	2	; select bank4/5
 17868  1C17  0087               	movwf	7
 17869  1C18  0863               	movf	??_setProductData,w
 17870  1C19  0081               	movwf	1
 17871  1C1A  0008               	return
 17872  1C1B                     __end_of_setProductData:	
 17873                           
 17874                           	psect	text126
 17875  1216                     __ptext126:	
 17876 ;; *************** function _setDimmerLights_SwOn *****************
 17877 ;; Defined at:
 17878 ;;		line 653 in file "../src/Dimmer_B1.c"
 17879 ;; Parameters:    Size  Location     Type
 17880 ;;  sw              1    wreg     unsigned char 
 17881 ;; Auto vars:     Size  Location     Type
 17882 ;;  sw              1   13[BANK0 ] unsigned char 
 17883 ;;  idle            1   14[BANK0 ] unsigned char 
 17884 ;; Return value:  Size  Location     Type
 17885 ;;		None               void
 17886 ;; Registers used:
 17887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17888 ;; Tracked objects:
 17889 ;;		On entry : 0/0
 17890 ;;		On exit  : 0/0
 17891 ;;		Unchanged: 0/0
 17892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17896 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17897 ;;Total ram usage:        2 bytes
 17898 ;; Hardware stack levels used:    1
 17899 ;; Hardware stack levels required when called:    6
 17900 ;; This function calls:
 17901 ;;		_DimmerLights_SelectPointer
 17902 ;;		_setBuz
 17903 ;; This function is called by:
 17904 ;;		_DlyOff_Main
 17905 ;;		_setControl_Lights_Table
 17906 ;;		_setRFSW_Control
 17907 ;;		_setRFSW_AdjControl
 17908 ;;		_setSw_Main
 17909 ;; This function uses a non-reentrant model
 17910 ;;
 17911                           
 17912                           
 17913                           ;psect for function _setDimmerLights_SwOn
 17914  1216                     _setDimmerLights_SwOn:	
 17915                           
 17916                           ;incstack = 0
 17917                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17918                           ;setDimmerLights_SwOn@sw stored from wreg
 17919  1216  0020               	movlb	0	; select bank0
 17920  1217  00AD               	movwf	setDimmerLights_SwOn@sw
 17921                           
 17922                           ;Dimmer_B1.c: 654: char idle = 0;
 17923  1218  01AE               	clrf	setDimmerLights_SwOn@idle
 17924                           
 17925                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 17926  1219  082D               	movf	setDimmerLights_SwOn@sw,w
 17927  121A  319C  2403  3192   	fcall	_DimmerLights_SelectPointer
 17928                           
 17929                           ;Dimmer_B1.c: 680: if (idle == 0) {
 17930  121D  0020               	movlb	0	; select bank0
 17931  121E  08AE               	movf	setDimmerLights_SwOn@idle,f
 17932  121F  1D03               	skipz
 17933  1220  0008               	return
 17934                           
 17935                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 17936  1221  0021               	movlb	1	; select bank1
 17937  1222  0852               	movf	_DimmerLights^(0+128),w
 17938  1223  0086               	movwf	6
 17939  1224  3001               	movlw	1	; select bank2/3
 17940  1225  0087               	movwf	7
 17941  1226  1401               	bsf	1,0
 17942                           
 17943                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 17944  1227  0A52               	incf	_DimmerLights^(0+128),w
 17945  1228  0086               	movwf	6
 17946  1229  3001               	movlw	1	; select bank2/3
 17947  122A  0087               	movwf	7
 17948  122B  1801               	btfsc	1,0
 17949  122C  2A3D               	goto	l5990
 17950                           
 17951                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 17952  122D  0A52               	incf	_DimmerLights^(0+128),w
 17953  122E  0086               	movwf	6
 17954  122F  3001               	movlw	1	; select bank2/3
 17955  1230  0087               	movwf	7
 17956  1231  1401               	bsf	1,0
 17957                           
 17958                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 17959  1232  0852               	movf	_DimmerLights^(0+128),w
 17960  1233  0086               	movwf	6
 17961  1234  3001               	movlw	1	; select bank2/3
 17962  1235  0087               	movwf	7
 17963  1236  1481               	bsf	1,1
 17964                           
 17965                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 17966  1237  0852               	movf	_DimmerLights^(0+128),w
 17967  1238  0086               	movwf	6
 17968  1239  3001               	movlw	1	; select bank2/3
 17969  123A  0087               	movwf	7
 17970  123B  1501               	bsf	1,2
 17971                           
 17972                           ;Dimmer_B1.c: 686: } else {
 17973  123C  2A42               	goto	l5992
 17974  123D                     l5990:	
 17975                           
 17976                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 17977  123D  0A52               	incf	_DimmerLights^(0+128),w
 17978  123E  0086               	movwf	6
 17979  123F  3001               	movlw	1	; select bank2/3
 17980  1240  0087               	movwf	7
 17981  1241  1001               	bcf	1,0
 17982  1242                     l5992:	
 17983                           
 17984                           ;Dimmer_B1.c: 688: }
 17985                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 17986  1242  3064               	movlw	100
 17987  1243  0020               	movlb	0	; select bank0
 17988  1244  00A9               	movwf	setBuz@time
 17989  1245  3000               	movlw	0
 17990  1246  00AA               	movwf	setBuz@time+1
 17991  1247  3001               	movlw	1
 17992  1248  3195  25BD         	fcall	_setBuz
 17993  124A  0008               	return
 17994  124B                     __end_of_setDimmerLights_SwOn:	
 17995                           
 17996                           	psect	text127
 17997  15BD                     __ptext127:	
 17998 ;; *************** function _setBuz *****************
 17999 ;; Defined at:
 18000 ;;		line 22 in file "../src/Buzzer_B1.c"
 18001 ;; Parameters:    Size  Location     Type
 18002 ;;  count           1    wreg     unsigned char 
 18003 ;;  time            2    9[BANK0 ] int 
 18004 ;; Auto vars:     Size  Location     Type
 18005 ;;  count           1   12[BANK0 ] unsigned char 
 18006 ;; Return value:  Size  Location     Type
 18007 ;;		None               void
 18008 ;; Registers used:
 18009 ;;		wreg, status,2, status,0, pclath, cstack
 18010 ;; Tracked objects:
 18011 ;;		On entry : 0/0
 18012 ;;		On exit  : 0/0
 18013 ;;		Unchanged: 0/0
 18014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18015 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;Total ram usage:        4 bytes
 18020 ;; Hardware stack levels used:    1
 18021 ;; Hardware stack levels required when called:    5
 18022 ;; This function calls:
 18023 ;;		___awdiv
 18024 ;; This function is called by:
 18025 ;;		_setDimmerLights_SwOn
 18026 ;;		_setDimmerLights_Dimming
 18027 ;;		_my_MainTimer
 18028 ;;		_Exception_Main
 18029 ;;		_setTemp_Main
 18030 ;;		_setLog_Code
 18031 ;;		_setRFSW_Control
 18032 ;;		_setSw_Main
 18033 ;; This function uses a non-reentrant model
 18034 ;;
 18035                           
 18036                           
 18037                           ;psect for function _setBuz
 18038  15BD                     _setBuz:	
 18039                           
 18040                           ;incstack = 0
 18041                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18042                           ;setBuz@count stored from wreg
 18043  15BD  0020               	movlb	0	; select bank0
 18044  15BE  00AC               	movwf	setBuz@count
 18045                           
 18046                           ;Buzzer_B1.c: 23: time /= 20;
 18047  15BF  3014               	movlw	20
 18048  15C0  00A0               	movwf	___awdiv@divisor
 18049  15C1  3000               	movlw	0
 18050  15C2  00A1               	movwf	___awdiv@divisor+1
 18051  15C3  082A               	movf	setBuz@time+1,w
 18052  15C4  01A3               	clrf	___awdiv@dividend+1
 18053  15C5  07A3               	addwf	___awdiv@dividend+1,f
 18054  15C6  0829               	movf	setBuz@time,w
 18055  15C7  01A2               	clrf	___awdiv@dividend
 18056  15C8  07A2               	addwf	___awdiv@dividend,f
 18057  15C9  3195  2569  3195   	fcall	___awdiv
 18058  15CC  0020               	movlb	0	; select bank0
 18059  15CD  0821               	movf	?___awdiv+1,w
 18060  15CE  01AA               	clrf	setBuz@time+1
 18061  15CF  07AA               	addwf	setBuz@time+1,f
 18062  15D0  0820               	movf	?___awdiv,w
 18063  15D1  01A9               	clrf	setBuz@time
 18064  15D2  07A9               	addwf	setBuz@time,f
 18065                           
 18066                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18067  15D3  0021               	movlb	1	; select bank1
 18068  15D4  1C3B               	btfss	_Buz1^(0+128),0
 18069  15D5  0008               	return
 18070                           
 18071                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18072  15D6  18BB               	btfsc	_Buz1^(0+128),1
 18073  15D7  2DEE               	goto	l86
 18074                           
 18075                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18076  15D8  14BB               	bsf	_Buz1^(0+128),1
 18077                           
 18078                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18079  15D9  01BC               	clrf	(_Buz1^(0+128)+1)
 18080  15DA  01BD               	clrf	((_Buz1+1)^(0+128)+1)
 18081                           
 18082                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18083  15DB  0020               	movlb	0	; select bank0
 18084  15DC  082C               	movf	setBuz@count,w
 18085  15DD  00AB               	movwf	??_setBuz
 18086  15DE  082B               	movf	??_setBuz,w
 18087  15DF  0021               	movlb	1	; select bank1
 18088  15E0  00BE               	movwf	(_Buz1^(0+128)+3)
 18089                           
 18090                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18091  15E1  0020               	movlb	0	; select bank0
 18092  15E2  082A               	movf	setBuz@time+1,w
 18093  15E3  0021               	movlb	1	; select bank1
 18094  15E4  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 18095  15E5  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 18096  15E6  0020               	movlb	0	; select bank0
 18097  15E7  0829               	movf	setBuz@time,w
 18098  15E8  0021               	movlb	1	; select bank1
 18099  15E9  01C1               	clrf	(_Buz1^(0+128)+6)
 18100  15EA  07C1               	addwf	(_Buz1^(0+128)+6),f
 18101                           
 18102                           ;Buzzer_B1.c: 30: RB3 = 1;
 18103  15EB  0020               	movlb	0	; select bank0
 18104  15EC  158D               	bsf	13,3	;volatile
 18105                           
 18106                           ;Buzzer_B1.c: 31: } else {
 18107  15ED  0008               	return
 18108  15EE                     l86:	
 18109                           
 18110                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18111  15EE  19BB               	btfsc	_Buz1^(0+128),3
 18112  15EF  2E02               	goto	l88
 18113                           
 18114                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18115  15F0  15BB               	bsf	_Buz1^(0+128),3
 18116                           
 18117                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18118  15F1  0020               	movlb	0	; select bank0
 18119  15F2  082C               	movf	setBuz@count,w
 18120  15F3  00AB               	movwf	??_setBuz
 18121  15F4  082B               	movf	??_setBuz,w
 18122  15F5  0021               	movlb	1	; select bank1
 18123  15F6  00BF               	movwf	(_Buz1^(0+128)+4)
 18124                           
 18125                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18126  15F7  0020               	movlb	0	; select bank0
 18127  15F8  082A               	movf	setBuz@time+1,w
 18128  15F9  0021               	movlb	1	; select bank1
 18129  15FA  01C4               	clrf	((_Buz1+1)^(0+128)+8)
 18130  15FB  07C4               	addwf	((_Buz1+1)^(0+128)+8),f
 18131  15FC  0020               	movlb	0	; select bank0
 18132  15FD  0829               	movf	setBuz@time,w
 18133  15FE  0021               	movlb	1	; select bank1
 18134  15FF  01C3               	clrf	(_Buz1^(0+128)+8)
 18135  1600  07C3               	addwf	(_Buz1^(0+128)+8),f
 18136                           
 18137                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18138  1601  0008               	return
 18139  1602                     l88:	
 18140  1602  1A3B               	btfsc	_Buz1^(0+128),4
 18141  1603  0008               	return
 18142                           
 18143                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18144  1604  163B               	bsf	_Buz1^(0+128),4
 18145                           
 18146                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18147  1605  0020               	movlb	0	; select bank0
 18148  1606  082C               	movf	setBuz@count,w
 18149  1607  00AB               	movwf	??_setBuz
 18150  1608  082B               	movf	??_setBuz,w
 18151  1609  0021               	movlb	1	; select bank1
 18152  160A  00C0               	movwf	(_Buz1^(0+128)+5)
 18153                           
 18154                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18155  160B  0020               	movlb	0	; select bank0
 18156  160C  082A               	movf	setBuz@time+1,w
 18157  160D  0021               	movlb	1	; select bank1
 18158  160E  01C6               	clrf	((_Buz1+1)^(0+128)+10)
 18159  160F  07C6               	addwf	((_Buz1+1)^(0+128)+10),f
 18160  1610  0020               	movlb	0	; select bank0
 18161  1611  0829               	movf	setBuz@time,w
 18162  1612  0021               	movlb	1	; select bank1
 18163  1613  01C5               	clrf	(_Buz1^(0+128)+10)
 18164  1614  07C5               	addwf	(_Buz1^(0+128)+10),f
 18165  1615  0008               	return
 18166  1616                     __end_of_setBuz:	
 18167                           
 18168                           	psect	text128
 18169  1569                     __ptext128:	
 18170 ;; *************** function ___awdiv *****************
 18171 ;; Defined at:
 18172 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18173 ;; Parameters:    Size  Location     Type
 18174 ;;  divisor         2    0[BANK0 ] int 
 18175 ;;  dividend        2    2[BANK0 ] int 
 18176 ;; Auto vars:     Size  Location     Type
 18177 ;;  quotient        2    7[BANK0 ] int 
 18178 ;;  sign            1    6[BANK0 ] unsigned char 
 18179 ;;  counter         1    5[BANK0 ] unsigned char 
 18180 ;; Return value:  Size  Location     Type
 18181 ;;                  2    0[BANK0 ] int 
 18182 ;; Registers used:
 18183 ;;		wreg, status,2, status,0
 18184 ;; Tracked objects:
 18185 ;;		On entry : 0/0
 18186 ;;		On exit  : 0/0
 18187 ;;		Unchanged: 0/0
 18188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18189 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18190 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18192 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18193 ;;Total ram usage:        9 bytes
 18194 ;; Hardware stack levels used:    1
 18195 ;; Hardware stack levels required when called:    4
 18196 ;; This function calls:
 18197 ;;		Nothing
 18198 ;; This function is called by:
 18199 ;;		_setBuz
 18200 ;; This function uses a non-reentrant model
 18201 ;;
 18202                           
 18203                           
 18204                           ;psect for function ___awdiv
 18205  1569                     ___awdiv:	
 18206                           
 18207                           ;incstack = 0
 18208                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18209  1569  0020               	movlb	0	; select bank0
 18210  156A  01A6               	clrf	___awdiv@sign
 18211  156B  1FA1               	btfss	___awdiv@divisor+1,7
 18212  156C  2D74               	goto	l5628
 18213  156D  09A0               	comf	___awdiv@divisor,f
 18214  156E  09A1               	comf	___awdiv@divisor+1,f
 18215  156F  0AA0               	incf	___awdiv@divisor,f
 18216  1570  1903               	skipnz
 18217  1571  0AA1               	incf	___awdiv@divisor+1,f
 18218  1572  01A6               	clrf	___awdiv@sign
 18219  1573  0AA6               	incf	___awdiv@sign,f
 18220  1574                     l5628:	
 18221  1574  1FA3               	btfss	___awdiv@dividend+1,7
 18222  1575  2D7F               	goto	l5634
 18223  1576  09A2               	comf	___awdiv@dividend,f
 18224  1577  09A3               	comf	___awdiv@dividend+1,f
 18225  1578  0AA2               	incf	___awdiv@dividend,f
 18226  1579  1903               	skipnz
 18227  157A  0AA3               	incf	___awdiv@dividend+1,f
 18228  157B  3001               	movlw	1
 18229  157C  00A4               	movwf	??___awdiv
 18230  157D  0824               	movf	??___awdiv,w
 18231  157E  06A6               	xorwf	___awdiv@sign,f
 18232  157F                     l5634:	
 18233  157F  01A7               	clrf	___awdiv@quotient
 18234  1580  01A8               	clrf	___awdiv@quotient+1
 18235  1581  0821               	movf	___awdiv@divisor+1,w
 18236  1582  0420               	iorwf	___awdiv@divisor,w
 18237  1583  1903               	skipnz
 18238  1584  2DAE               	goto	l5656
 18239  1585  01A5               	clrf	___awdiv@counter
 18240  1586  0AA5               	incf	___awdiv@counter,f
 18241  1587                     l5644:	
 18242  1587  1BA1               	btfsc	___awdiv@divisor+1,7
 18243  1588  2D93               	goto	l5646
 18244  1589  3001               	movlw	1
 18245  158A                     u4335:	
 18246  158A  35A0               	lslf	___awdiv@divisor,f
 18247  158B  0DA1               	rlf	___awdiv@divisor+1,f
 18248  158C  0B89               	decfsz	9,f
 18249  158D  2D8A               	goto	u4335
 18250  158E  3001               	movlw	1
 18251  158F  00A4               	movwf	??___awdiv
 18252  1590  0824               	movf	??___awdiv,w
 18253  1591  07A5               	addwf	___awdiv@counter,f
 18254  1592  2D87               	goto	l5644
 18255  1593                     l5646:	
 18256  1593  3001               	movlw	1
 18257  1594                     u4355:	
 18258  1594  35A7               	lslf	___awdiv@quotient,f
 18259  1595  0DA8               	rlf	___awdiv@quotient+1,f
 18260  1596  0B89               	decfsz	9,f
 18261  1597  2D94               	goto	u4355
 18262  1598  0821               	movf	___awdiv@divisor+1,w
 18263  1599  0223               	subwf	___awdiv@dividend+1,w
 18264  159A  1D03               	skipz
 18265  159B  2D9E               	goto	u4365
 18266  159C  0820               	movf	___awdiv@divisor,w
 18267  159D  0222               	subwf	___awdiv@dividend,w
 18268  159E                     u4365:	
 18269  159E  1C03               	skipc
 18270  159F  2DA5               	goto	l5652
 18271  15A0  0820               	movf	___awdiv@divisor,w
 18272  15A1  02A2               	subwf	___awdiv@dividend,f
 18273  15A2  0821               	movf	___awdiv@divisor+1,w
 18274  15A3  3BA3               	subwfb	___awdiv@dividend+1,f
 18275  15A4  1427               	bsf	___awdiv@quotient,0
 18276  15A5                     l5652:	
 18277  15A5  3001               	movlw	1
 18278  15A6                     u4375:	
 18279  15A6  36A1               	lsrf	___awdiv@divisor+1,f
 18280  15A7  0CA0               	rrf	___awdiv@divisor,f
 18281  15A8  0B89               	decfsz	9,f
 18282  15A9  2DA6               	goto	u4375
 18283  15AA  3001               	movlw	1
 18284  15AB  02A5               	subwf	___awdiv@counter,f
 18285  15AC  1D03               	btfss	3,2
 18286  15AD  2D93               	goto	l5646
 18287  15AE                     l5656:	
 18288  15AE  0826               	movf	___awdiv@sign,w
 18289  15AF  1903               	btfsc	3,2
 18290  15B0  2DB6               	goto	l5660
 18291  15B1  09A7               	comf	___awdiv@quotient,f
 18292  15B2  09A8               	comf	___awdiv@quotient+1,f
 18293  15B3  0AA7               	incf	___awdiv@quotient,f
 18294  15B4  1903               	skipnz
 18295  15B5  0AA8               	incf	___awdiv@quotient+1,f
 18296  15B6                     l5660:	
 18297  15B6  0828               	movf	___awdiv@quotient+1,w
 18298  15B7  01A1               	clrf	?___awdiv+1
 18299  15B8  07A1               	addwf	?___awdiv+1,f
 18300  15B9  0827               	movf	___awdiv@quotient,w
 18301  15BA  01A0               	clrf	?___awdiv
 18302  15BB  07A0               	addwf	?___awdiv,f
 18303  15BC  0008               	return
 18304  15BD                     __end_of___awdiv:	
 18305                           
 18306                           	psect	text129
 18307  12B7                     __ptext129:	
 18308 ;; *************** function _setDimmerLights_SwOff *****************
 18309 ;; Defined at:
 18310 ;;		line 694 in file "../src/Dimmer_B1.c"
 18311 ;; Parameters:    Size  Location     Type
 18312 ;;  sw              1    wreg     unsigned char 
 18313 ;; Auto vars:     Size  Location     Type
 18314 ;;  sw              1    2[BANK0 ] unsigned char 
 18315 ;; Return value:  Size  Location     Type
 18316 ;;		None               void
 18317 ;; Registers used:
 18318 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18319 ;; Tracked objects:
 18320 ;;		On entry : 0/0
 18321 ;;		On exit  : 0/0
 18322 ;;		Unchanged: 0/0
 18323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18325 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18327 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18328 ;;Total ram usage:        1 bytes
 18329 ;; Hardware stack levels used:    1
 18330 ;; Hardware stack levels required when called:    5
 18331 ;; This function calls:
 18332 ;;		_DimmerLights_SelectPointer
 18333 ;; This function is called by:
 18334 ;;		_DlyOff_Main
 18335 ;;		_Exception_Main
 18336 ;;		_setControl_Lights_Table
 18337 ;;		_setRFSW_Control
 18338 ;;		_setRFSW_AdjControl
 18339 ;;		_setSw_Main
 18340 ;; This function uses a non-reentrant model
 18341 ;;
 18342                           
 18343                           
 18344                           ;psect for function _setDimmerLights_SwOff
 18345  12B7                     _setDimmerLights_SwOff:	
 18346                           
 18347                           ;incstack = 0
 18348                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18349                           ;setDimmerLights_SwOff@sw stored from wreg
 18350  12B7  0020               	movlb	0	; select bank0
 18351  12B8  00A2               	movwf	setDimmerLights_SwOff@sw
 18352                           
 18353                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 18354  12B9  0822               	movf	setDimmerLights_SwOff@sw,w
 18355  12BA  319C  2403  3192   	fcall	_DimmerLights_SelectPointer
 18356                           
 18357                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 18358  12BD  0021               	movlb	1	; select bank1
 18359  12BE  0852               	movf	_DimmerLights^(0+128),w
 18360  12BF  0086               	movwf	6
 18361  12C0  3001               	movlw	1	; select bank2/3
 18362  12C1  0087               	movwf	7
 18363  12C2  1C01               	btfss	1,0
 18364  12C3  0008               	return
 18365                           
 18366                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 18367  12C4  0852               	movf	_DimmerLights^(0+128),w
 18368  12C5  0086               	movwf	6
 18369  12C6  3001               	movlw	1	; select bank2/3
 18370  12C7  0087               	movwf	7
 18371  12C8  1001               	bcf	1,0
 18372                           
 18373                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 18374  12C9  0A52               	incf	_DimmerLights^(0+128),w
 18375  12CA  0086               	movwf	6
 18376  12CB  3001               	movlw	1	; select bank2/3
 18377  12CC  0087               	movwf	7
 18378  12CD  1C01               	btfss	1,0
 18379  12CE  2AE5               	goto	l6004
 18380                           
 18381                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 18382  12CF  0852               	movf	_DimmerLights^(0+128),w
 18383  12D0  0086               	movwf	6
 18384  12D1  3001               	movlw	1	; select bank2/3
 18385  12D2  0087               	movwf	7
 18386  12D3  1D81               	btfss	1,3
 18387  12D4  0008               	return
 18388                           
 18389                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 18390  12D5  0852               	movf	_DimmerLights^(0+128),w
 18391  12D6  0086               	movwf	6
 18392  12D7  3001               	movlw	1	; select bank2/3
 18393  12D8  0087               	movwf	7
 18394  12D9  1181               	bcf	1,3
 18395                           
 18396                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 18397  12DA  0852               	movf	_DimmerLights^(0+128),w
 18398  12DB  0086               	movwf	6
 18399  12DC  3001               	movlw	1	; select bank2/3
 18400  12DD  0087               	movwf	7
 18401  12DE  1601               	bsf	1,4
 18402                           
 18403                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 18404  12DF  0852               	movf	_DimmerLights^(0+128),w
 18405  12E0  0086               	movwf	6
 18406  12E1  3001               	movlw	1	; select bank2/3
 18407  12E2  0087               	movwf	7
 18408  12E3  1281               	bcf	1,5
 18409                           
 18410                           ;Dimmer_B1.c: 705: }
 18411                           ;Dimmer_B1.c: 706: } else {
 18412  12E4  0008               	return
 18413  12E5                     l6004:	
 18414                           
 18415                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 18416  12E5  0852               	movf	_DimmerLights^(0+128),w
 18417  12E6  0086               	movwf	6
 18418  12E7  3001               	movlw	1	; select bank2/3
 18419  12E8  0087               	movwf	7
 18420  12E9  1481               	bsf	1,1
 18421                           
 18422                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 18423  12EA  0852               	movf	_DimmerLights^(0+128),w
 18424  12EB  0086               	movwf	6
 18425  12EC  3001               	movlw	1	; select bank2/3
 18426  12ED  0087               	movwf	7
 18427  12EE  1101               	bcf	1,2
 18428  12EF  0008               	return
 18429  12F0                     __end_of_setDimmerLights_SwOff:	
 18430                           
 18431                           	psect	text130
 18432  1CB5                     __ptext130:	
 18433 ;; *************** function _getDimmerLights_Status *****************
 18434 ;; Defined at:
 18435 ;;		line 1006 in file "../src/Dimmer_B1.c"
 18436 ;; Parameters:    Size  Location     Type
 18437 ;;  lights          1    wreg     unsigned char 
 18438 ;; Auto vars:     Size  Location     Type
 18439 ;;  lights          1    2[BANK0 ] unsigned char 
 18440 ;;  status          1    3[BANK0 ] unsigned char 
 18441 ;; Return value:  Size  Location     Type
 18442 ;;                  1    wreg      unsigned char 
 18443 ;; Registers used:
 18444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18445 ;; Tracked objects:
 18446 ;;		On entry : 0/0
 18447 ;;		On exit  : 0/0
 18448 ;;		Unchanged: 0/0
 18449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18451 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18454 ;;Total ram usage:        2 bytes
 18455 ;; Hardware stack levels used:    1
 18456 ;; Hardware stack levels required when called:    5
 18457 ;; This function calls:
 18458 ;;		_DimmerLights_SelectPointer
 18459 ;; This function is called by:
 18460 ;;		_DlyOff_Main
 18461 ;;		_Exception_Main
 18462 ;;		_setControl_Lights_Table
 18463 ;;		_setRFSW_Control
 18464 ;;		_setRFSW_AdjControl
 18465 ;; This function uses a non-reentrant model
 18466 ;;
 18467                           
 18468                           
 18469                           ;psect for function _getDimmerLights_Status
 18470  1CB5                     _getDimmerLights_Status:	
 18471                           
 18472                           ;incstack = 0
 18473                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18474                           ;getDimmerLights_Status@lights stored from wreg
 18475  1CB5  0020               	movlb	0	; select bank0
 18476  1CB6  00A2               	movwf	getDimmerLights_Status@lights
 18477                           
 18478                           ;Dimmer_B1.c: 1007: DimmerLights_SelectPointer(lights);
 18479  1CB7  0822               	movf	getDimmerLights_Status@lights,w
 18480  1CB8  319C  2403         	fcall	_DimmerLights_SelectPointer
 18481                           
 18482                           ;Dimmer_B1.c: 1008: char status = DimmerLights->Status == 1 ? 1 : 0;
 18483  1CBA  0021               	movlb	1	; select bank1
 18484  1CBB  0A52               	incf	_DimmerLights^(0+128),w
 18485  1CBC  0086               	movwf	6
 18486  1CBD  3001               	movlw	1	; select bank2/3
 18487  1CBE  0087               	movwf	7
 18488  1CBF  3000               	movlw	0
 18489  1CC0  1801               	btfsc	1,0
 18490  1CC1  3001               	movlw	1
 18491  1CC2  0020               	movlb	0	; select bank0
 18492  1CC3  00A3               	movwf	getDimmerLights_Status@status
 18493                           
 18494                           ;Dimmer_B1.c: 1009: return status;
 18495  1CC4  0823               	movf	getDimmerLights_Status@status,w
 18496  1CC5  0008               	return
 18497  1CC6                     __end_of_getDimmerLights_Status:	
 18498                           
 18499                           	psect	text131
 18500  1C03                     __ptext131:	
 18501 ;; *************** function _DimmerLights_SelectPointer *****************
 18502 ;; Defined at:
 18503 ;;		line 576 in file "../src/Dimmer_B1.c"
 18504 ;; Parameters:    Size  Location     Type
 18505 ;;  lights          1    wreg     unsigned char 
 18506 ;; Auto vars:     Size  Location     Type
 18507 ;;  lights          1    1[BANK0 ] unsigned char 
 18508 ;; Return value:  Size  Location     Type
 18509 ;;		None               void
 18510 ;; Registers used:
 18511 ;;		wreg
 18512 ;; Tracked objects:
 18513 ;;		On entry : 0/0
 18514 ;;		On exit  : 0/0
 18515 ;;		Unchanged: 0/0
 18516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18520 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18521 ;;Total ram usage:        2 bytes
 18522 ;; Hardware stack levels used:    1
 18523 ;; Hardware stack levels required when called:    4
 18524 ;; This function calls:
 18525 ;;		Nothing
 18526 ;; This function is called by:
 18527 ;;		_setDimmerLights_SwOn
 18528 ;;		_setDimmerLights_SwOff
 18529 ;;		_setDimmerLights_DimmingOn
 18530 ;;		_setDimmerLights_Main
 18531 ;;		_getDimmerLights_Status
 18532 ;;		_setDimmerLights_DimmingRun
 18533 ;;		_setDimmerLights_Status
 18534 ;; This function uses a non-reentrant model
 18535 ;;
 18536                           
 18537                           
 18538                           ;psect for function _DimmerLights_SelectPointer
 18539  1C03                     _DimmerLights_SelectPointer:	
 18540                           
 18541                           ;incstack = 0
 18542                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18543                           ;DimmerLights_SelectPointer@lights stored from wreg
 18544  1C03  0020               	movlb	0	; select bank0
 18545  1C04  00A1               	movwf	DimmerLights_SelectPointer@lights
 18546                           
 18547                           ;Dimmer_B1.c: 578: if (lights == 1) {
 18548  1C05  0821               	movf	DimmerLights_SelectPointer@lights,w
 18549  1C06  3A01               	xorlw	1
 18550  1C07  1D03               	skipz
 18551  1C08  0008               	return
 18552                           
 18553                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 18554  1C09  30D3               	movlw	_DimmerLights1& (0+255)
 18555  1C0A  00A0               	movwf	??_DimmerLights_SelectPointer
 18556  1C0B  0820               	movf	??_DimmerLights_SelectPointer,w
 18557  1C0C  0021               	movlb	1	; select bank1
 18558  1C0D  00D2               	movwf	_DimmerLights^(0+128)
 18559  1C0E  0008               	return
 18560  1C0F                     __end_of_DimmerLights_SelectPointer:	
 18561                           
 18562                           	psect	text132
 18563  1B3B                     __ptext132:	
 18564 ;; *************** function _DelayOff_Initialization *****************
 18565 ;; Defined at:
 18566 ;;		line 26 in file "../src/DelayOff_B1.c"
 18567 ;; Parameters:    Size  Location     Type
 18568 ;;		None
 18569 ;; Auto vars:     Size  Location     Type
 18570 ;;		None
 18571 ;; Return value:  Size  Location     Type
 18572 ;;		None               void
 18573 ;; Registers used:
 18574 ;;		wreg, status,2, status,0, pclath, cstack
 18575 ;; Tracked objects:
 18576 ;;		On entry : 0/0
 18577 ;;		On exit  : 0/0
 18578 ;;		Unchanged: 0/0
 18579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18584 ;;Total ram usage:        0 bytes
 18585 ;; Hardware stack levels used:    1
 18586 ;; Hardware stack levels required when called:    6
 18587 ;; This function calls:
 18588 ;;		_DlyOff_Initialization
 18589 ;; This function is called by:
 18590 ;;		_main
 18591 ;; This function uses a non-reentrant model
 18592 ;;
 18593                           
 18594                           
 18595                           ;psect for function _DelayOff_Initialization
 18596  1B3B                     _DelayOff_Initialization:	
 18597                           
 18598                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18599                           
 18600                           ;incstack = 0
 18601                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18602  1B3B  3001               	movlw	1
 18603  1B3C  319B  2368         	fcall	_DlyOff_Initialization
 18604  1B3E  0008               	return
 18605  1B3F                     __end_of_DelayOff_Initialization:	
 18606                           
 18607                           	psect	text133
 18608  1B68                     __ptext133:	
 18609 ;; *************** function _DlyOff_Initialization *****************
 18610 ;; Defined at:
 18611 ;;		line 56 in file "../src/DelayOff_B1.c"
 18612 ;; Parameters:    Size  Location     Type
 18613 ;;  sw              1    wreg     unsigned char 
 18614 ;; Auto vars:     Size  Location     Type
 18615 ;;  sw              1    2[BANK0 ] unsigned char 
 18616 ;; Return value:  Size  Location     Type
 18617 ;;		None               void
 18618 ;; Registers used:
 18619 ;;		wreg, status,2, status,0, pclath, cstack
 18620 ;; Tracked objects:
 18621 ;;		On entry : 0/0
 18622 ;;		On exit  : 0/0
 18623 ;;		Unchanged: 0/0
 18624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18628 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18629 ;;Total ram usage:        1 bytes
 18630 ;; Hardware stack levels used:    1
 18631 ;; Hardware stack levels required when called:    5
 18632 ;; This function calls:
 18633 ;;		_DelayOffPointSelect
 18634 ;; This function is called by:
 18635 ;;		_DelayOff_Initialization
 18636 ;; This function uses a non-reentrant model
 18637 ;;
 18638                           
 18639                           
 18640                           ;psect for function _DlyOff_Initialization
 18641  1B68                     _DlyOff_Initialization:	
 18642                           
 18643                           ;incstack = 0
 18644                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18645                           ;DlyOff_Initialization@sw stored from wreg
 18646  1B68  0020               	movlb	0	; select bank0
 18647  1B69  00A2               	movwf	DlyOff_Initialization@sw
 18648                           
 18649                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18650  1B6A  0822               	movf	DlyOff_Initialization@sw,w
 18651  1B6B  319B  23F7         	fcall	_DelayOffPointSelect
 18652  1B6D  0008               	return
 18653  1B6E                     __end_of_DlyOff_Initialization:	
 18654                           
 18655                           	psect	text134
 18656  1BF7                     __ptext134:	
 18657 ;; *************** function _DelayOffPointSelect *****************
 18658 ;; Defined at:
 18659 ;;		line 7 in file "../src/DelayOff_B1.c"
 18660 ;; Parameters:    Size  Location     Type
 18661 ;;  sw              1    wreg     unsigned char 
 18662 ;; Auto vars:     Size  Location     Type
 18663 ;;  sw              1    1[BANK0 ] unsigned char 
 18664 ;; Return value:  Size  Location     Type
 18665 ;;		None               void
 18666 ;; Registers used:
 18667 ;;		wreg
 18668 ;; Tracked objects:
 18669 ;;		On entry : 0/0
 18670 ;;		On exit  : 0/0
 18671 ;;		Unchanged: 0/0
 18672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18677 ;;Total ram usage:        2 bytes
 18678 ;; Hardware stack levels used:    1
 18679 ;; Hardware stack levels required when called:    4
 18680 ;; This function calls:
 18681 ;;		Nothing
 18682 ;; This function is called by:
 18683 ;;		_DlyOff_Initialization
 18684 ;;		_DlyOff_Main
 18685 ;;		_setDelayOff_GO
 18686 ;;		_getDelayOff_GO
 18687 ;; This function uses a non-reentrant model
 18688 ;;
 18689                           
 18690                           
 18691                           ;psect for function _DelayOffPointSelect
 18692  1BF7                     _DelayOffPointSelect:	
 18693                           
 18694                           ;incstack = 0
 18695                           ; Regs used in _DelayOffPointSelect: [wreg]
 18696                           ;DelayOffPointSelect@sw stored from wreg
 18697  1BF7  0020               	movlb	0	; select bank0
 18698  1BF8  00A1               	movwf	DelayOffPointSelect@sw
 18699                           
 18700                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18701  1BF9  0821               	movf	DelayOffPointSelect@sw,w
 18702  1BFA  3A01               	xorlw	1
 18703  1BFB  1D03               	skipz
 18704  1BFC  0008               	return
 18705                           
 18706                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18707  1BFD  30DB               	movlw	_DlySw1& (0+255)
 18708  1BFE  00A0               	movwf	??_DelayOffPointSelect
 18709  1BFF  0820               	movf	??_DelayOffPointSelect,w
 18710  1C00  0021               	movlb	1	; select bank1
 18711  1C01  00D1               	movwf	_DelayOff^(0+128)
 18712  1C02  0008               	return
 18713  1C03                     __end_of_DelayOffPointSelect:	
 18714                           
 18715                           	psect	text135
 18716  1429                     __ptext135:	
 18717 ;; *************** function _Buzzer_Main *****************
 18718 ;; Defined at:
 18719 ;;		line 46 in file "../src/Buzzer_B1.c"
 18720 ;; Parameters:    Size  Location     Type
 18721 ;;		None
 18722 ;; Auto vars:     Size  Location     Type
 18723 ;;		None
 18724 ;; Return value:  Size  Location     Type
 18725 ;;		None               void
 18726 ;; Registers used:
 18727 ;;		wreg, status,2, status,0
 18728 ;; Tracked objects:
 18729 ;;		On entry : 0/0
 18730 ;;		On exit  : 0/0
 18731 ;;		Unchanged: 0/0
 18732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18736 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18737 ;;Total ram usage:        1 bytes
 18738 ;; Hardware stack levels used:    1
 18739 ;; Hardware stack levels required when called:    4
 18740 ;; This function calls:
 18741 ;;		Nothing
 18742 ;; This function is called by:
 18743 ;;		_main
 18744 ;; This function uses a non-reentrant model
 18745 ;;
 18746                           
 18747                           
 18748                           ;psect for function _Buzzer_Main
 18749  1429                     _Buzzer_Main:	
 18750                           
 18751                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18752                           
 18753                           ;incstack = 0
 18754                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18755  1429  0021               	movlb	1	; select bank1
 18756  142A  1CBB               	btfss	_Buz1^(0+128),1
 18757  142B  0008               	return
 18758                           
 18759                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18760  142C  3001               	movlw	1
 18761  142D  07BC               	addwf	(_Buz1^(0+128)+1),f
 18762  142E  3000               	movlw	0
 18763  142F  3DBD               	addwfc	((_Buz1+1)^(0+128)+1),f
 18764                           
 18765                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18766  1430  0842               	movf	((_Buz1+1)^(0+128)+6),w
 18767  1431  023D               	subwf	((_Buz1+1)^(0+128)+1),w
 18768  1432  1D03               	skipz
 18769  1433  2C36               	goto	u7415
 18770  1434  0841               	movf	(_Buz1^(0+128)+6),w
 18771  1435  023C               	subwf	(_Buz1^(0+128)+1),w
 18772  1436                     u7415:	
 18773  1436  1C03               	skipc
 18774  1437  0008               	return
 18775                           
 18776                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18777  1438  01BC               	clrf	(_Buz1^(0+128)+1)
 18778  1439  01BD               	clrf	((_Buz1+1)^(0+128)+1)
 18779                           
 18780                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18781  143A  12BB               	bcf	_Buz1^(0+128),5
 18782  143B  0020               	movlb	0	; select bank0
 18783  143C  1D8D               	btfss	13,3	;volatile
 18784  143D  2C40               	goto	l7512
 18785  143E  0021               	movlb	1	; select bank1
 18786  143F  16BB               	bsf	_Buz1^(0+128),5
 18787  1440                     l7512:	
 18788                           
 18789                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18790  1440  0021               	movlb	1	; select bank1
 18791  1441  1ABB               	btfsc	_Buz1^(0+128),5
 18792  1442  2C6C               	goto	l96
 18793                           
 18794                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18795  1443  08BE               	movf	(_Buz1^(0+128)+3),f
 18796  1444  1D03               	skipz
 18797  1445  2C68               	goto	l97
 18798                           
 18799                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18800  1446  1DBB               	btfss	_Buz1^(0+128),3
 18801  1447  2C56               	goto	l98
 18802                           
 18803                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18804  1448  11BB               	bcf	_Buz1^(0+128),3
 18805                           
 18806                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18807  1449  083F               	movf	(_Buz1^(0+128)+4),w
 18808  144A  0020               	movlb	0	; select bank0
 18809  144B  00A0               	movwf	??_Buzzer_Main
 18810  144C  0820               	movf	??_Buzzer_Main,w
 18811  144D  0021               	movlb	1	; select bank1
 18812  144E  00BE               	movwf	(_Buz1^(0+128)+3)
 18813                           
 18814                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18815  144F  0844               	movf	((_Buz1+1)^(0+128)+8),w
 18816  1450  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 18817  1451  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 18818  1452  0843               	movf	(_Buz1^(0+128)+8),w
 18819  1453  01C1               	clrf	(_Buz1^(0+128)+6)
 18820  1454  07C1               	addwf	(_Buz1^(0+128)+6),f
 18821                           
 18822                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18823  1455  0008               	return
 18824  1456                     l98:	
 18825  1456  1E3B               	btfss	_Buz1^(0+128),4
 18826  1457  2C66               	goto	l100
 18827                           
 18828                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18829  1458  123B               	bcf	_Buz1^(0+128),4
 18830                           
 18831                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18832  1459  0840               	movf	(_Buz1^(0+128)+5),w
 18833  145A  0020               	movlb	0	; select bank0
 18834  145B  00A0               	movwf	??_Buzzer_Main
 18835  145C  0820               	movf	??_Buzzer_Main,w
 18836  145D  0021               	movlb	1	; select bank1
 18837  145E  00BE               	movwf	(_Buz1^(0+128)+3)
 18838                           
 18839                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18840  145F  0846               	movf	((_Buz1+1)^(0+128)+10),w
 18841  1460  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 18842  1461  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 18843  1462  0845               	movf	(_Buz1^(0+128)+10),w
 18844  1463  01C1               	clrf	(_Buz1^(0+128)+6)
 18845  1464  07C1               	addwf	(_Buz1^(0+128)+6),f
 18846                           
 18847                           ;Buzzer_B1.c: 62: } else {
 18848  1465  0008               	return
 18849  1466                     l100:	
 18850                           
 18851                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18852  1466  10BB               	bcf	_Buz1^(0+128),1
 18853                           
 18854                           ;Buzzer_B1.c: 64: }
 18855                           ;Buzzer_B1.c: 65: } else {
 18856  1467  0008               	return
 18857  1468                     l97:	
 18858                           
 18859                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18860  1468  16BB               	bsf	_Buz1^(0+128),5
 18861                           
 18862                           ;Buzzer_B1.c: 68: RB3 = 1;
 18863  1469  0020               	movlb	0	; select bank0
 18864  146A  158D               	bsf	13,3	;volatile
 18865                           
 18866                           ;Buzzer_B1.c: 69: }
 18867                           ;Buzzer_B1.c: 70: } else {
 18868  146B  0008               	return
 18869  146C                     l96:	
 18870                           
 18871                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18872  146C  12BB               	bcf	_Buz1^(0+128),5
 18873                           
 18874                           ;Buzzer_B1.c: 73: RB3 = 0;
 18875  146D  0020               	movlb	0	; select bank0
 18876  146E  118D               	bcf	13,3	;volatile
 18877                           
 18878                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18879  146F  3001               	movlw	1
 18880  1470  0021               	movlb	1	; select bank1
 18881  1471  02BE               	subwf	(_Buz1^(0+128)+3),f
 18882  1472  0008               	return
 18883  1473                     __end_of_Buzzer_Main:	
 18884                           
 18885                           	psect	text136
 18886  1B29                     __ptext136:	
 18887 ;; *************** function _Buzzer_Initialization *****************
 18888 ;; Defined at:
 18889 ;;		line 11 in file "../src/Buzzer_B1.c"
 18890 ;; Parameters:    Size  Location     Type
 18891 ;;		None
 18892 ;; Auto vars:     Size  Location     Type
 18893 ;;		None
 18894 ;; Return value:  Size  Location     Type
 18895 ;;		None               void
 18896 ;; Registers used:
 18897 ;;		None
 18898 ;; Tracked objects:
 18899 ;;		On entry : 0/0
 18900 ;;		On exit  : 0/0
 18901 ;;		Unchanged: 0/0
 18902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18907 ;;Total ram usage:        0 bytes
 18908 ;; Hardware stack levels used:    1
 18909 ;; Hardware stack levels required when called:    4
 18910 ;; This function calls:
 18911 ;;		Nothing
 18912 ;; This function is called by:
 18913 ;;		_main
 18914 ;; This function uses a non-reentrant model
 18915 ;;
 18916                           
 18917                           
 18918                           ;psect for function _Buzzer_Initialization
 18919  1B29                     _Buzzer_Initialization:	
 18920                           
 18921                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18922                           
 18923                           ;incstack = 0
 18924                           ; Regs used in _Buzzer_Initialization: []
 18925  1B29  0021               	movlb	1	; select bank1
 18926  1B2A  143B               	bsf	_Buz1^(0+128),0
 18927  1B2B  0008               	return
 18928  1B2C                     __end_of_Buzzer_Initialization:	
 18929                           
 18930                           	psect	intentry
 18931  0004                     __pintentry:	
 18932 ;; *************** function _ISR *****************
 18933 ;; Defined at:
 18934 ;;		line 116 in file "../src/MCU_B1.c"
 18935 ;; Parameters:    Size  Location     Type
 18936 ;;		None
 18937 ;; Auto vars:     Size  Location     Type
 18938 ;;		None
 18939 ;; Return value:  Size  Location     Type
 18940 ;;		None               void
 18941 ;; Registers used:
 18942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18943 ;; Tracked objects:
 18944 ;;		On entry : 0/0
 18945 ;;		On exit  : 0/0
 18946 ;;		Unchanged: 0/0
 18947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18951 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18952 ;;Total ram usage:        1 bytes
 18953 ;; Hardware stack levels used:    1
 18954 ;; Hardware stack levels required when called:    3
 18955 ;; This function calls:
 18956 ;;		_IOC_ISR
 18957 ;;		_TMR1_ISR
 18958 ;; This function is called by:
 18959 ;;		Interrupt level 1
 18960 ;; This function uses a non-reentrant model
 18961 ;;
 18962                           
 18963  0004                     _ISR:	
 18964                           
 18965                           ;incstack = 0
 18966                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18967  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18968  0005  3180               	pagesel	$
 18969  0006  0020               	movlb	0	; select bank0
 18970  0007  087F               	movf	127,w
 18971  0008  00FC               	movwf	??_ISR
 18972                           
 18973                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 18974  0009  0021               	movlb	1	; select bank1
 18975  000A  1C11               	btfss	17,0	;volatile
 18976  000B  2813               	goto	i1l1185
 18977  000C  0020               	movlb	0	; select bank0
 18978  000D  1C11               	btfss	17,0	;volatile
 18979  000E  2813               	goto	i1l1185
 18980                           
 18981                           ;MCU_B1.c: 126: TMR1_ISR();
 18982  000F  319F  27A2  3180   	fcall	_TMR1_ISR
 18983                           
 18984                           ;MCU_B1.c: 127: }
 18985  0012  281B               	goto	i1l1188
 18986  0013                     i1l1185:	
 18987                           
 18988                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18989  0013  198B               	btfsc	11,3	;volatile
 18990  0014  1C0B               	btfss	11,0	;volatile
 18991  0015  281B               	goto	i1l1188
 18992  0016  0027               	movlb	7	; select bank7
 18993  0017  1D16               	btfss	22,2	;volatile
 18994  0018  281B               	goto	i1l1188
 18995                           
 18996                           ;MCU_B1.c: 139: IOC_ISR();
 18997  0019  319B  23A7         	fcall	_IOC_ISR
 18998  001B                     i1l1188:	
 18999                           ;MCU_B1.c: 140: }
 19000                           ;MCU_B1.c: 148: return;
 19001                           
 19002  001B  087C               	movf	??_ISR,w
 19003  001C  0020               	movlb	0	; select bank0
 19004  001D  00FF               	movwf	127
 19005  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19006  001F  0009               	retfie
 19007  0020                     __end_of_ISR:	
 19008                           
 19009                           	psect	text138
 19010  1FA2                     __ptext138:	
 19011 ;; *************** function _TMR1_ISR *****************
 19012 ;; Defined at:
 19013 ;;		line 236 in file "../src/MCU_B1.c"
 19014 ;; Parameters:    Size  Location     Type
 19015 ;;		None
 19016 ;; Auto vars:     Size  Location     Type
 19017 ;;		None
 19018 ;; Return value:  Size  Location     Type
 19019 ;;		None               void
 19020 ;; Registers used:
 19021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19022 ;; Tracked objects:
 19023 ;;		On entry : 0/0
 19024 ;;		On exit  : 0/0
 19025 ;;		Unchanged: 0/0
 19026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19031 ;;Total ram usage:        0 bytes
 19032 ;; Hardware stack levels used:    1
 19033 ;; Hardware stack levels required when called:    1
 19034 ;; This function calls:
 19035 ;;		_DimmerLights_TMR_1
 19036 ;; This function is called by:
 19037 ;;		_ISR
 19038 ;; This function uses a non-reentrant model
 19039 ;;
 19040                           
 19041                           
 19042                           ;psect for function _TMR1_ISR
 19043  1FA2                     _TMR1_ISR:	
 19044                           
 19045                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19046                           
 19047                           ;incstack = 0
 19048                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19049  1FA2  30FA               	movlw	250
 19050  1FA3  0020               	movlb	0	; select bank0
 19051  1FA4  0097               	movwf	23	;volatile
 19052                           
 19053                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19054  1FA5  3038               	movlw	56
 19055  1FA6  0096               	movwf	22	;volatile
 19056                           
 19057                           ;MCU_B1.c: 240: TMR1IF = 0;
 19058  1FA7  1011               	bcf	17,0	;volatile
 19059                           
 19060                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19061  1FA8  3196  26D2  319F   	fcall	_DimmerLights_TMR_1
 19062                           
 19063                           ;MCU_B1.c: 271: Timer1.Count++;
 19064  1FAB  3001               	movlw	1
 19065  1FAC  0022               	movlb	2	; select bank2
 19066  1FAD  07BF               	addwf	(_Timer1^(0+256)+1),f
 19067  1FAE  3000               	movlw	0
 19068  1FAF  3DC0               	addwfc	((_Timer1+1)^(0+256)+1),f
 19069                           
 19070                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19071  1FB0  3001               	movlw	1
 19072  1FB1  3E3E               	addlw	_Timer1& (0+255)
 19073  1FB2  0086               	movwf	6
 19074  1FB3  3001               	movlw	1	; select bank2/3
 19075  1FB4  0087               	movwf	7
 19076  1FB5  3F40               	moviw [0]fsr1
 19077  1FB6  3AC8               	xorlw	200
 19078  1FB7  1D03               	skipz
 19079  1FB8  2FBB               	goto	u751_25
 19080  1FB9  3F41               	moviw [1]fsr1
 19081  1FBA  3A00               	xorlw	0
 19082  1FBB                     u751_25:	
 19083  1FBB  1D03               	skipz
 19084  1FBC  0008               	return
 19085                           
 19086                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19087  1FBD  01BF               	clrf	(_Timer1^(0+256)+1)
 19088  1FBE  01C0               	clrf	((_Timer1+1)^(0+256)+1)
 19089                           
 19090                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19091  1FBF  143E               	bsf	_Timer1^(0+256),0
 19092  1FC0  0008               	return
 19093  1FC1                     __end_of_TMR1_ISR:	
 19094                           
 19095                           	psect	text139
 19096  16D2                     __ptext139:	
 19097 ;; *************** function _DimmerLights_TMR_1 *****************
 19098 ;; Defined at:
 19099 ;;		line 1307 in file "../src/Dimmer_B1.c"
 19100 ;; Parameters:    Size  Location     Type
 19101 ;;		None
 19102 ;; Auto vars:     Size  Location     Type
 19103 ;;		None
 19104 ;; Return value:  Size  Location     Type
 19105 ;;		None               void
 19106 ;; Registers used:
 19107 ;;		wreg, status,2, status,0
 19108 ;; Tracked objects:
 19109 ;;		On entry : 0/0
 19110 ;;		On exit  : 0/0
 19111 ;;		Unchanged: 0/0
 19112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19115 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19116 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19117 ;;Total ram usage:        1 bytes
 19118 ;; Hardware stack levels used:    1
 19119 ;; This function calls:
 19120 ;;		Nothing
 19121 ;; This function is called by:
 19122 ;;		_TMR1_ISR
 19123 ;; This function uses a non-reentrant model
 19124 ;;
 19125                           
 19126                           
 19127                           ;psect for function _DimmerLights_TMR_1
 19128  16D2                     _DimmerLights_TMR_1:	
 19129                           
 19130                           ;Dimmer_B1.c: 1308: if (DimmerIntr1.Start == 1) {
 19131                           
 19132                           ;incstack = 0
 19133                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19134  16D2  0021               	movlb	1	; select bank1
 19135  16D3  1D47               	btfss	_DimmerIntr1^(0+128),2
 19136  16D4  2EDF               	goto	i1l7050
 19137                           
 19138                           ;Dimmer_B1.c: 1309: DimmerIntr1.Count++;
 19139  16D5  3001               	movlw	1
 19140  16D6  00F0               	movwf	??_DimmerLights_TMR_1
 19141  16D7  0870               	movf	??_DimmerLights_TMR_1,w
 19142  16D8  07C8               	addwf	(_DimmerIntr1^(0+128)+1),f
 19143                           
 19144                           ;Dimmer_B1.c: 1310: if (DimmerIntr1.Count >= ((char)(70*0.6)) + 1) {
 19145  16D9  302B               	movlw	43
 19146  16DA  0248               	subwf	(_DimmerIntr1^(0+128)+1),w
 19147  16DB  1C03               	skipc
 19148  16DC  2EDF               	goto	i1l7050
 19149                           
 19150                           ;Dimmer_B1.c: 1311: DimmerIntr1.Count = 0;
 19151  16DD  01C8               	clrf	(_DimmerIntr1^(0+128)+1)
 19152                           
 19153                           ;Dimmer_B1.c: 1312: DimmerIntr1.Start = 0;
 19154  16DE  1147               	bcf	_DimmerIntr1^(0+128),2
 19155  16DF                     i1l7050:	
 19156                           
 19157                           ;Dimmer_B1.c: 1313: }
 19158                           ;Dimmer_B1.c: 1314: }
 19159                           ;Dimmer_B1.c: 1317: if (DimmerIntr1.Trigger == 1) {
 19160  16DF  1FC7               	btfss	_DimmerIntr1^(0+128),7
 19161  16E0  2EF0               	goto	i1l832
 19162                           
 19163                           ;Dimmer_B1.c: 1318: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19164  16E1  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19165  16E2  0248               	subwf	(_DimmerIntr1^(0+128)+1),w
 19166  16E3  1C03               	skipc
 19167  16E4  2EF0               	goto	i1l832
 19168                           
 19169                           ;Dimmer_B1.c: 1319: DimmerIntr1.Trigger = 0;
 19170  16E5  13C7               	bcf	_DimmerIntr1^(0+128),7
 19171                           
 19172                           ;Dimmer_B1.c: 1320: DimmerIntr1.GO = 1;
 19173  16E6  1447               	bsf	_DimmerIntr1^(0+128),0
 19174                           
 19175                           ;Dimmer_B1.c: 1321: DimmerIntr1.DimmingValue = (DimmerIntr1.TuneValue + DimmerIntr1.Dimm
      +                          ingValue);
 19176  16E7  084E               	movf	(_DimmerIntr1^(0+128)+7),w
 19177  16E8  074B               	addwf	(_DimmerIntr1^(0+128)+4),w
 19178  16E9  00F0               	movwf	??_DimmerLights_TMR_1
 19179  16EA  0870               	movf	??_DimmerLights_TMR_1,w
 19180  16EB  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 19181                           
 19182                           ;Dimmer_B1.c: 1322: if (DimmerIntr1.ControlStatus == 1) {
 19183  16EC  1DC7               	btfss	_DimmerIntr1^(0+128),3
 19184  16ED  2EF0               	goto	i1l832
 19185                           
 19186                           ;Dimmer_B1.c: 1323: RB1 = 1;
 19187  16EE  0020               	movlb	0	; select bank0
 19188  16EF  148D               	bsf	13,1	;volatile
 19189  16F0                     i1l832:	
 19190                           
 19191                           ;Dimmer_B1.c: 1325: }
 19192                           ;Dimmer_B1.c: 1326: }
 19193                           ;Dimmer_B1.c: 1327: }
 19194                           ;Dimmer_B1.c: 1330: if (DimmerIntr1.GO == 1) {
 19195  16F0  0021               	movlb	1	; select bank1
 19196  16F1  1C47               	btfss	_DimmerIntr1^(0+128),0
 19197  16F2  2EFE               	goto	i1l835
 19198                           
 19199                           ;Dimmer_B1.c: 1331: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19200  16F3  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19201  16F4  0248               	subwf	(_DimmerIntr1^(0+128)+1),w
 19202  16F5  1C03               	skipc
 19203  16F6  0008               	return
 19204                           
 19205                           ;Dimmer_B1.c: 1332: DimmerIntr1.GO = 0;
 19206  16F7  1047               	bcf	_DimmerIntr1^(0+128),0
 19207                           
 19208                           ;Dimmer_B1.c: 1333: DimmerIntr1.Tune = 1;
 19209  16F8  14C7               	bsf	_DimmerIntr1^(0+128),1
 19210                           
 19211                           ;Dimmer_B1.c: 1335: if (DimmerIntr1.ControlStatus == 1) {
 19212  16F9  1DC7               	btfss	_DimmerIntr1^(0+128),3
 19213  16FA  0008               	return
 19214                           
 19215                           ;Dimmer_B1.c: 1336: RB1 = 0;
 19216  16FB  0020               	movlb	0	; select bank0
 19217  16FC  108D               	bcf	13,1	;volatile
 19218                           
 19219                           ;Dimmer_B1.c: 1338: }
 19220                           ;Dimmer_B1.c: 1339: }
 19221                           ;Dimmer_B1.c: 1340: } else {
 19222  16FD  0008               	return
 19223  16FE                     i1l835:	
 19224                           
 19225                           ;Dimmer_B1.c: 1341: if (DimmerIntr1.Tune == 1) {
 19226  16FE  1CC7               	btfss	_DimmerIntr1^(0+128),1
 19227  16FF  0008               	return
 19228                           
 19229                           ;Dimmer_B1.c: 1342: DimmerIntr1.Tune = 0;
 19230  1700  10C7               	bcf	_DimmerIntr1^(0+128),1
 19231                           
 19232                           ;Dimmer_B1.c: 1343: DimmerIntr1.TuneTime++;
 19233  1701  3001               	movlw	1
 19234  1702  00F0               	movwf	??_DimmerLights_TMR_1
 19235  1703  0870               	movf	??_DimmerLights_TMR_1,w
 19236  1704  07C9               	addwf	(_DimmerIntr1^(0+128)+2),f
 19237                           
 19238                           ;Dimmer_B1.c: 1344: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19239  1705  084A               	movf	(_DimmerIntr1^(0+128)+3),w
 19240  1706  0249               	subwf	(_DimmerIntr1^(0+128)+2),w
 19241  1707  1C03               	skipc
 19242  1708  0008               	return
 19243                           
 19244                           ;Dimmer_B1.c: 1345: DimmerIntr1.TuneTime = 0;
 19245  1709  01C9               	clrf	(_DimmerIntr1^(0+128)+2)
 19246                           
 19247                           ;Dimmer_B1.c: 1346: if (DimmerIntr1.Dimming_Sw == 1) {
 19248  170A  1E47               	btfss	_DimmerIntr1^(0+128),4
 19249  170B  2F22               	goto	i1l841
 19250                           
 19251                           ;Dimmer_B1.c: 1347: if (DimmerIntr1.Dimming_Status == 0) {
 19252  170C  1AC7               	btfsc	_DimmerIntr1^(0+128),5
 19253  170D  2F19               	goto	i1l7084
 19254                           
 19255                           ;Dimmer_B1.c: 1348: if (DimmerIntr1.DimmingValue < ((char)(70*0.6))) {
 19256  170E  302A               	movlw	42
 19257  170F  024B               	subwf	(_DimmerIntr1^(0+128)+4),w
 19258  1710  1803               	skipnc
 19259  1711  2F17               	goto	i1l843
 19260                           
 19261                           ;Dimmer_B1.c: 1349: DimmerIntr1.DimmingValue++;
 19262  1712  3001               	movlw	1
 19263  1713  00F0               	movwf	??_DimmerLights_TMR_1
 19264  1714  0870               	movf	??_DimmerLights_TMR_1,w
 19265  1715  07CB               	addwf	(_DimmerIntr1^(0+128)+4),f
 19266                           
 19267                           ;Dimmer_B1.c: 1350: } else {
 19268  1716  0008               	return
 19269  1717                     i1l843:	
 19270                           
 19271                           ;Dimmer_B1.c: 1351: DimmerIntr1.Dimming_Status = 1;
 19272  1717  16C7               	bsf	_DimmerIntr1^(0+128),5
 19273                           
 19274                           ;Dimmer_B1.c: 1352: }
 19275                           ;Dimmer_B1.c: 1353: } else {
 19276  1718  0008               	return
 19277  1719                     i1l7084:	
 19278                           
 19279                           ;Dimmer_B1.c: 1354: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 19280  1719  3007               	movlw	7
 19281  171A  024B               	subwf	(_DimmerIntr1^(0+128)+4),w
 19282  171B  1C03               	skipc
 19283  171C  2F20               	goto	i1l846
 19284                           
 19285                           ;Dimmer_B1.c: 1355: DimmerIntr1.DimmingValue--;
 19286  171D  3001               	movlw	1
 19287  171E  02CB               	subwf	(_DimmerIntr1^(0+128)+4),f
 19288                           
 19289                           ;Dimmer_B1.c: 1356: } else {
 19290  171F  0008               	return
 19291  1720                     i1l846:	
 19292                           
 19293                           ;Dimmer_B1.c: 1357: DimmerIntr1.Dimming_Status = 0;
 19294  1720  12C7               	bcf	_DimmerIntr1^(0+128),5
 19295                           
 19296                           ;Dimmer_B1.c: 1358: }
 19297                           ;Dimmer_B1.c: 1359: }
 19298                           ;Dimmer_B1.c: 1360: } else if (DimmerIntr1.Dimming_RF == 1) {
 19299  1721  0008               	return
 19300  1722                     i1l841:	
 19301  1722  1F47               	btfss	_DimmerIntr1^(0+128),6
 19302  1723  0008               	return
 19303                           
 19304                           ;Dimmer_B1.c: 1361: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19305  1724  084C               	movf	(_DimmerIntr1^(0+128)+5),w
 19306  1725  024B               	subwf	(_DimmerIntr1^(0+128)+4),w
 19307  1726  1803               	skipnc
 19308  1727  2F2D               	goto	i1l7092
 19309                           
 19310                           ;Dimmer_B1.c: 1362: DimmerIntr1.DimmingValue++;
 19311  1728  3001               	movlw	1
 19312  1729  00F0               	movwf	??_DimmerLights_TMR_1
 19313  172A  0870               	movf	??_DimmerLights_TMR_1,w
 19314  172B  07CB               	addwf	(_DimmerIntr1^(0+128)+4),f
 19315                           
 19316                           ;Dimmer_B1.c: 1363: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19317  172C  0008               	return
 19318  172D                     i1l7092:	
 19319  172D  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19320  172E  024C               	subwf	(_DimmerIntr1^(0+128)+5),w
 19321  172F  1803               	skipnc
 19322  1730  2F34               	goto	i1l852
 19323                           
 19324                           ;Dimmer_B1.c: 1364: DimmerIntr1.DimmingValue--;
 19325  1731  3001               	movlw	1
 19326  1732  02CB               	subwf	(_DimmerIntr1^(0+128)+4),f
 19327                           
 19328                           ;Dimmer_B1.c: 1365: } else {
 19329  1733  0008               	return
 19330  1734                     i1l852:	
 19331                           
 19332                           ;Dimmer_B1.c: 1366: DimmerIntr1.Dimming_RF = 0;
 19333  1734  1347               	bcf	_DimmerIntr1^(0+128),6
 19334  1735  0008               	return
 19335  1736                     __end_of_DimmerLights_TMR_1:	
 19336                           
 19337                           	psect	text140
 19338  1BA7                     __ptext140:	
 19339 ;; *************** function _IOC_ISR *****************
 19340 ;; Defined at:
 19341 ;;		line 394 in file "../src/MCU_B1.c"
 19342 ;; Parameters:    Size  Location     Type
 19343 ;;		None
 19344 ;; Auto vars:     Size  Location     Type
 19345 ;;		None
 19346 ;; Return value:  Size  Location     Type
 19347 ;;		None               void
 19348 ;; Registers used:
 19349 ;;		wreg, status,2, status,0, pclath, cstack
 19350 ;; Tracked objects:
 19351 ;;		On entry : 0/0
 19352 ;;		On exit  : 0/0
 19353 ;;		Unchanged: 0/0
 19354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19359 ;;Total ram usage:        0 bytes
 19360 ;; Hardware stack levels used:    1
 19361 ;; Hardware stack levels required when called:    2
 19362 ;; This function calls:
 19363 ;;		_DimmerLights_IOC_1
 19364 ;; This function is called by:
 19365 ;;		_ISR
 19366 ;; This function uses a non-reentrant model
 19367 ;;
 19368                           
 19369                           
 19370                           ;psect for function _IOC_ISR
 19371  1BA7                     _IOC_ISR:	
 19372                           
 19373                           ;MCU_B1.c: 395: IOCBF2 = 0;
 19374                           
 19375                           ;incstack = 0
 19376                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19377  1BA7  0027               	movlb	7	; select bank7
 19378  1BA8  1116               	bcf	22,2	;volatile
 19379                           
 19380                           ;MCU_B1.c: 396: IOCIF = 0;
 19381  1BA9  100B               	bcf	11,0	;volatile
 19382                           
 19383                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19384  1BAA  0021               	movlb	1	; select bank1
 19385  1BAB  1C2E               	btfss	_myMain^(0+128),0
 19386  1BAC  0008               	return
 19387                           
 19388                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 19389  1BAD  3190  20C5         	fcall	_DimmerLights_IOC_1
 19390  1BAF  0008               	return
 19391  1BB0                     __end_of_IOC_ISR:	
 19392                           
 19393                           	psect	text141
 19394  10C5                     __ptext141:	
 19395 ;; *************** function _DimmerLights_IOC_1 *****************
 19396 ;; Defined at:
 19397 ;;		line 1374 in file "../src/Dimmer_B1.c"
 19398 ;; Parameters:    Size  Location     Type
 19399 ;;		None
 19400 ;; Auto vars:     Size  Location     Type
 19401 ;;		None
 19402 ;; Return value:  Size  Location     Type
 19403 ;;		None               void
 19404 ;; Registers used:
 19405 ;;		wreg, status,2, status,0, pclath, cstack
 19406 ;; Tracked objects:
 19407 ;;		On entry : 0/0
 19408 ;;		On exit  : 0/0
 19409 ;;		Unchanged: 0/0
 19410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19413 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19414 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19415 ;;Total ram usage:        3 bytes
 19416 ;; Hardware stack levels used:    1
 19417 ;; Hardware stack levels required when called:    1
 19418 ;; This function calls:
 19419 ;;		i1___awdiv
 19420 ;; This function is called by:
 19421 ;;		_IOC_ISR
 19422 ;; This function uses a non-reentrant model
 19423 ;;
 19424                           
 19425                           
 19426                           ;psect for function _DimmerLights_IOC_1
 19427  10C5                     _DimmerLights_IOC_1:	
 19428                           
 19429                           ;Dimmer_B1.c: 1375: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 19430                           
 19431                           ;incstack = 0
 19432                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19433  10C5  0021               	movlb	1	; select bank1
 19434  10C6  1947               	btfsc	_DimmerIntr1^(0+128),2
 19435  10C7  0008               	return
 19436  10C8  0020               	movlb	0	; select bank0
 19437  10C9  1D0D               	btfss	13,2	;volatile
 19438  10CA  0008               	return
 19439                           
 19440                           ;Dimmer_B1.c: 1376: DimmerIntr1.Start = 1;
 19441  10CB  0021               	movlb	1	; select bank1
 19442  10CC  1547               	bsf	_DimmerIntr1^(0+128),2
 19443                           
 19444                           ;Dimmer_B1.c: 1378: DimmerIntr1.Trigger = 1;
 19445  10CD  17C7               	bsf	_DimmerIntr1^(0+128),7
 19446                           
 19447                           ;Dimmer_B1.c: 1379: DimmerIntr1.TuneValue = DimmerIntr1.DimmingValue;
 19448  10CE  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 19449  10CF  00F9               	movwf	??_DimmerLights_IOC_1
 19450  10D0  0879               	movf	??_DimmerLights_IOC_1,w
 19451  10D1  00CE               	movwf	(_DimmerIntr1^(0+128)+7)
 19452                           
 19453                           ;Dimmer_B1.c: 1380: DimmerIntr1.DimmingValue = (char)(60/2) - (DimmerIntr1.TuneValue / 2
      +                          );
 19454  10D2  3002               	movlw	2
 19455  10D3  00F0               	movwf	i1___awdiv@divisor
 19456  10D4  3000               	movlw	0
 19457  10D5  00F1               	movwf	i1___awdiv@divisor+1
 19458  10D6  084E               	movf	(_DimmerIntr1^(0+128)+7),w
 19459  10D7  00F9               	movwf	??_DimmerLights_IOC_1
 19460  10D8  01FA               	clrf	??_DimmerLights_IOC_1+1
 19461  10D9  0879               	movf	??_DimmerLights_IOC_1,w
 19462  10DA  00F2               	movwf	i1___awdiv@dividend
 19463  10DB  087A               	movf	??_DimmerLights_IOC_1+1,w
 19464  10DC  00F3               	movwf	i1___awdiv@dividend+1
 19465  10DD  3195  2516         	fcall	i1___awdiv
 19466  10DF  0870               	movf	?i1___awdiv,w
 19467  10E0  3AFF               	xorlw	255
 19468  10E1  3E01               	addlw	1
 19469  10E2  3E1E               	addlw	30
 19470  10E3  00FB               	movwf	??_DimmerLights_IOC_1+2
 19471  10E4  087B               	movf	??_DimmerLights_IOC_1+2,w
 19472  10E5  0021               	movlb	1	; select bank1
 19473  10E6  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 19474  10E7  0008               	return
 19475  10E8                     __end_of_DimmerLights_IOC_1:	
 19476                           
 19477                           	psect	text142
 19478  1516                     __ptext142:	
 19479 ;; *************** function i1___awdiv *****************
 19480 ;; Defined at:
 19481 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19482 ;; Parameters:    Size  Location     Type
 19483 ;;  divisor         2    0[COMMON] int 
 19484 ;;  dividend        2    2[COMMON] int 
 19485 ;; Auto vars:     Size  Location     Type
 19486 ;;  __awdiv         2    7[COMMON] int 
 19487 ;;  __awdiv         1    6[COMMON] unsigned char 
 19488 ;;  __awdiv         1    5[COMMON] unsigned char 
 19489 ;; Return value:  Size  Location     Type
 19490 ;;                  2    0[COMMON] int 
 19491 ;; Registers used:
 19492 ;;		wreg, status,2, status,0
 19493 ;; Tracked objects:
 19494 ;;		On entry : 0/0
 19495 ;;		On exit  : 0/0
 19496 ;;		Unchanged: 0/0
 19497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19498 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19499 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19501 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19502 ;;Total ram usage:        9 bytes
 19503 ;; Hardware stack levels used:    1
 19504 ;; This function calls:
 19505 ;;		Nothing
 19506 ;; This function is called by:
 19507 ;;		_DimmerLights_IOC_1
 19508 ;; This function uses a non-reentrant model
 19509 ;;
 19510                           
 19511                           
 19512                           ;psect for function i1___awdiv
 19513  1516                     i1___awdiv:	
 19514                           
 19515                           ;incstack = 0
 19516                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
 19517  1516  01F6               	clrf	i1___awdiv@sign
 19518  1517  1FF1               	btfss	i1___awdiv@divisor+1,7
 19519  1518  2D20               	goto	i1l6916
 19520  1519  09F0               	comf	i1___awdiv@divisor,f
 19521  151A  09F1               	comf	i1___awdiv@divisor+1,f
 19522  151B  0AF0               	incf	i1___awdiv@divisor,f
 19523  151C  1903               	skipnz
 19524  151D  0AF1               	incf	i1___awdiv@divisor+1,f
 19525  151E  01F6               	clrf	i1___awdiv@sign
 19526  151F  0AF6               	incf	i1___awdiv@sign,f
 19527  1520                     i1l6916:	
 19528  1520  1FF3               	btfss	i1___awdiv@dividend+1,7
 19529  1521  2D2B               	goto	i1l6922
 19530  1522  09F2               	comf	i1___awdiv@dividend,f
 19531  1523  09F3               	comf	i1___awdiv@dividend+1,f
 19532  1524  0AF2               	incf	i1___awdiv@dividend,f
 19533  1525  1903               	skipnz
 19534  1526  0AF3               	incf	i1___awdiv@dividend+1,f
 19535  1527  3001               	movlw	1
 19536  1528  00F4               	movwf	??i1___awdiv
 19537  1529  0874               	movf	??i1___awdiv,w
 19538  152A  06F6               	xorwf	i1___awdiv@sign,f
 19539  152B                     i1l6922:	
 19540  152B  01F7               	clrf	i1___awdiv@quotient
 19541  152C  01F8               	clrf	i1___awdiv@quotient+1
 19542  152D  0871               	movf	i1___awdiv@divisor+1,w
 19543  152E  0470               	iorwf	i1___awdiv@divisor,w
 19544  152F  1903               	skipnz
 19545  1530  2D5A               	goto	i1l6944
 19546  1531  01F5               	clrf	i1___awdiv@counter
 19547  1532  0AF5               	incf	i1___awdiv@counter,f
 19548  1533                     i1l6932:	
 19549  1533  1BF1               	btfsc	i1___awdiv@divisor+1,7
 19550  1534  2D3F               	goto	i1l6934
 19551  1535  3001               	movlw	1
 19552  1536                     u639_25:	
 19553  1536  35F0               	lslf	i1___awdiv@divisor,f
 19554  1537  0DF1               	rlf	i1___awdiv@divisor+1,f
 19555  1538  0B89               	decfsz	9,f
 19556  1539  2D36               	goto	u639_25
 19557  153A  3001               	movlw	1
 19558  153B  00F4               	movwf	??i1___awdiv
 19559  153C  0874               	movf	??i1___awdiv,w
 19560  153D  07F5               	addwf	i1___awdiv@counter,f
 19561  153E  2D33               	goto	i1l6932
 19562  153F                     i1l6934:	
 19563  153F  3001               	movlw	1
 19564  1540                     u641_25:	
 19565  1540  35F7               	lslf	i1___awdiv@quotient,f
 19566  1541  0DF8               	rlf	i1___awdiv@quotient+1,f
 19567  1542  0B89               	decfsz	9,f
 19568  1543  2D40               	goto	u641_25
 19569  1544  0871               	movf	i1___awdiv@divisor+1,w
 19570  1545  0273               	subwf	i1___awdiv@dividend+1,w
 19571  1546  1D03               	skipz
 19572  1547  2D4A               	goto	u642_25
 19573  1548  0870               	movf	i1___awdiv@divisor,w
 19574  1549  0272               	subwf	i1___awdiv@dividend,w
 19575  154A                     u642_25:	
 19576  154A  1C03               	skipc
 19577  154B  2D51               	goto	i1l6940
 19578  154C  0870               	movf	i1___awdiv@divisor,w
 19579  154D  02F2               	subwf	i1___awdiv@dividend,f
 19580  154E  0871               	movf	i1___awdiv@divisor+1,w
 19581  154F  3BF3               	subwfb	i1___awdiv@dividend+1,f
 19582  1550  1477               	bsf	i1___awdiv@quotient,0
 19583  1551                     i1l6940:	
 19584  1551  3001               	movlw	1
 19585  1552                     u643_25:	
 19586  1552  36F1               	lsrf	i1___awdiv@divisor+1,f
 19587  1553  0CF0               	rrf	i1___awdiv@divisor,f
 19588  1554  0B89               	decfsz	9,f
 19589  1555  2D52               	goto	u643_25
 19590  1556  3001               	movlw	1
 19591  1557  02F5               	subwf	i1___awdiv@counter,f
 19592  1558  1D03               	btfss	3,2
 19593  1559  2D3F               	goto	i1l6934
 19594  155A                     i1l6944:	
 19595  155A  0876               	movf	i1___awdiv@sign,w
 19596  155B  1903               	btfsc	3,2
 19597  155C  2D62               	goto	i1l6948
 19598  155D  09F7               	comf	i1___awdiv@quotient,f
 19599  155E  09F8               	comf	i1___awdiv@quotient+1,f
 19600  155F  0AF7               	incf	i1___awdiv@quotient,f
 19601  1560  1903               	skipnz
 19602  1561  0AF8               	incf	i1___awdiv@quotient+1,f
 19603  1562                     i1l6948:	
 19604  1562  0878               	movf	i1___awdiv@quotient+1,w
 19605  1563  01F1               	clrf	?i1___awdiv+1
 19606  1564  07F1               	addwf	?i1___awdiv+1,f
 19607  1565  0877               	movf	i1___awdiv@quotient,w
 19608  1566  01F0               	clrf	?i1___awdiv
 19609  1567  07F0               	addwf	?i1___awdiv,f
 19610  1568  0008               	return
 19611  1569                     __end_ofi1___awdiv:	
 19612  007E                     btemp	set	126	;btemp
 19613  007E                     pic14e$flags	set	126
 19614  007E                     wtemp	set	126
 19615  007E                     wtemp0	set	126
 19616  0080                     wtemp1	set	128
 19617  0082                     wtemp2	set	130
 19618  0084                     wtemp3	set	132
 19619  0086                     wtemp4	set	134
 19620  0088                     wtemp5	set	136
 19621  007F                     wtemp6	set	127
 19622  007E                     ttemp	set	126
 19623  007E                     ttemp0	set	126
 19624  0081                     ttemp1	set	129
 19625  0084                     ttemp2	set	132
 19626  0087                     ttemp3	set	135
 19627  007F                     ttemp4	set	127
 19628  007E                     ltemp	set	126
 19629  007E                     ltemp0	set	126
 19630  0082                     ltemp1	set	130
 19631  0086                     ltemp2	set	134
 19632  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         218
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      80
    BANK3            80      0      68
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK3[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1___awdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  144646
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1560
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4709
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    4709
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3638
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3638
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   44950
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   44950
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   40554
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4407
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35963
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10444
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20732
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1990
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1188
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3062
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   60480
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   60272
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   39509
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3786
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   20492
                                             74 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3226
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     400
                                             66 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4673
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4673
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2803
                                             66 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1627
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1560
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     604
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     352
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     352
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  3     3      0     352
                                              9 COMMON     3     3      0
                          i1___awdiv
 ---------------------------------------------------------------------------------
 (12) i1___awdiv                                           9     5      4     352
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1___awdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     162      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     162      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Jan 19 17:22:33 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1ECA  
                          ___bmul@product 0022                 getMain_Lights_Count@count 0020  
                                      l86 15EE                                        l96 146C  
                                      l88 1602                                        l97 1468  
                                      l98 1456                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 110B                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 00D6  
                          setTemp_Main@AD 006C                       ___wmul@multiplicand 0022  
                    _getDimmerLights_Line 1BD6                    __end_of_setDelayOff_GO 0D37  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 089D  
                    _setDimmerLights_Line 1CC6                              ___ftadd@sign 004B  
                                     l100 1466                                       l303 1ED6  
                                     l304 1ED8                                       l235 09B7  
                    _setDimmerLights_SwOn 1216                                       l531 0A47  
                                     l347 1135                                       l752 1F62  
                                     l683 1C94                                       l776 079A  
                                     _GIE 005F                                       _CRC 00CF  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0007                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00D3  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0143                                       _Cmd 00D0  
            getDimmerLights_Status@lights 0022                                       _Sw1 01CA  
              ??_setDimmerIntr_Dimming_RF 0021                ??_setDimmerIntr_Dimming_Sw 0021  
         setDimmerIntr_Dimming_RF@command 0020                  __end_of_CC2500_WriteByte 1EE3  
                   _Buzzer_Initialization 1B29                           __end_of_ADC_Set 1B88  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0023       __end_of_setDimmerIntr_ControlStatus 1E80  
             _setDimmerIntr_ControlStatus 1E68                         ??_getSw_KeyStatus 0020  
                                    ?_ISR 0070                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1BB0                     _setDimmerLights_OnOff 0710  
        setDimmerLights_DimmingRun@lights 0024                                Load_Main@i 0030  
                            ___ftdiv@sign 003D                                      l1223 127B  
                                    l2124 1C9B                                      l1237 11A8  
                                    l1246 150E                                      l1423 1363  
                                    l1600 01F8                                      l1610 01D4  
                                    l1602 0084                                      l2154 1212  
                                    l1451 11DC                                      l1611 01D2  
                                    l1603 0080                                      l2139 0B30  
                                    l1604 007B                                      l1446 11C5  
                                    l2094 0637                                      l1447 11E0  
                                    l2167 0ABF                                      l2098 0586  
                                    l2099 05D7                                      l2452 1E2E  
                         __end_of_IOC_Set 1BD6                                      l1478 070F  
                                    l1487 1EC9                                      l2472 037A  
                                    l2474 0246                                      l1762 0E8D  
                                    l2651 1F8D                                      l6004 12E5  
                                    l2812 16A4                                      l1773 0E85  
                                    l6040 0D2D                                      l7000 08C5  
                                    l1768 0E00                                      l2841 0421  
                          _Load_Main$3755 002A                                      l2818 16BB  
                                    l6202 1EB4                                      l6026 0CE9  
                                    l7002 08CC                                      l6036 0D19  
                                    l7012 08F4                                      l6206 1EC3  
                                    l7014 08FB                                      l5600 168B  
                                    l6072 17EA                                      l7024 1BDE  
                                    l6240 0BBB                                      l5610 16B1  
                                    l5602 1690                                      l7202 14E0  
                                    l6404 11D7                                      l6172 1146  
                                    l6244 0BC0                                      l6228 1398  
                                    l7300 0E74                                      l6430 1308  
                                    l6174 1151                                      l6254 0C10  
                                    l6502 0AB0                                      l5608 16A9  
                                    l5704 1D30                                      l6424 12FF  
                                    l5634 157F                                      l8210 10FA  
                                    l7250 0E03                                      l5660 15B6  
                                    l5652 15A5                                      l5644 1587  
                                    l5628 1574                                      l6452 1D1F  
                                    l5708 1D36                                      l8204 10F1  
                                    l7412 0230                                      l7180 1FEE  
                   _setDimmerLights_SwOff 12B7                                      l5646 1593  
                                    l5726 10AE                                      l5742 03B1  
                                    l5814 0D64                                      l6438 131E  
                                    l8206 10F4                                      l8222 1115  
                                    l7512 1440                                      l5656 15AE  
                                    l6632 1E4B                                      l5760 03DA  
                                    l5808 0D4E                                      l6456 1D26  
                                    l8224 1118                                      l7256 0E12  
                                    l7184 1FF3                                      l6394 11C0  
                                    l5594 167A                                      l5770 03FC  
                                    l5738 03AA                                      l6458 1D2B  
                                    l5850 0EA8                                      l8170 1F20  
                                    l8250 140A                                      l8322 098C  
                                    l6802 1D04                                      l6490 0A64  
                                    l7258 0E15                                      l7178 1FEB  
                                    l6396 11C9                                      l5780 041D  
                                    l5772 0400                                      l5748 03C0  
                                    l5836 0DBE                                      l5828 0DA5  
                                    l5908 0C3D                                      l6660 077A  
                                    l7196 14CB                                      l6900 0828  
                                    l8172 1F23                                      l8260 141A  
                                    l8252 140D                                      l8228 111E  
                                    l8340 09BD                                      l8316 0983  
                                    l6492 0A6B                                      l6484 0A4F  
                                    l7452 02EE                                      l7428 0279  
                                    l5598 1681                                      l5766 03ED  
                                    l5942 0CA2                                      l5934 0C88  
                                    l5926 0C6D                                      l8262 141D  
                                    l8350 09CD                                      l8342 09C0  
                                    l8318 0986                                      l6494 0A86  
                                    l6822 0AD6                                      l7438 02AE  
                                    l7462 0322                                      l7710 0B9F  
                                    l5784 0433                                      l5768 03F7  
                                    l5936 0C91                                      l5928 0C7B  
                                    l5880 0F15                                      l5872 0F01  
                                    l5856 0EBE                                      l6656 0761  
                                    l6904 0831                                      l8176 1F29  
                                    l8256 1413                                      l8336 099E  
                                    l6496 0AA8                                      l7288 0E5D  
                                    l5778 0413                                      l5938 0C94  
                                    l6674 07A9                                      l7546 1F64  
                                    l8266 1423                                      l8194 1076  
                                    l8354 09D3                                      l8346 09C6  
                                    l6498 0AAC                                      l6850 0B0C  
                                    l6834 0AEE                                      l8450 05D2  
                                    l7394 1E33                                      l7298 0E72  
                                    l5788 0445                                      l5884 0F1D  
                                    l5868 0EF9                                      l7492 1F87  
                                    l8196 107C                                      l8372 091B  
                                    l8348 09CA                                      l5990 123D  
                                    l5798 0460                                      l6694 148C  
                                    l6758 1190                                      l7814 00D9  
                                    l8374 091E                                      l6838 0AF7  
                                    l7398 1E39                                      l7726 13D5  
                                    l7742 1343                                      l8542 163A  
                                    l5992 1242                                      l6688 07D5  
                                    l7840 015C                                      l7808 00A7  
                                    l8464 05E6                                      l7594 04F6  
                                    l7906 01E7                                      l7850 0188  
                                    l8394 0936                                      l8378 0924  
                                    l7690 0B70                                      l7682 0B51  
                                    l8546 1645                                      l6892 080A  
                                    l7860 01A4                                      l8396 094F  
                                    l8492 0630                                      l6876 1D15  
                   _myMain_Initialization 1DC1                                      l7942 0669  
                                    l6894 0816                                      l7870 01BA  
                                    l7846 016B                                      l7854 0194  
                                    l7774 0062                                      l8478 0618  
                                    l7694 0B78                                      l7936 0659  
                                    l7792 0083                                      l7954 06A0  
                                    l7946 0678                                      l6986 1D99  
                                    l7972 06E2                                      l7956 067B  
                                    l7974 06BD                                      l7958 06A8  
                                    l7976 06EA                                      l7984 0705  
                                    _CFGS 0CAE                                      l7978 06F4  
                            __CFG_WDTE$ON 0000                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5005 0C89  
                                    u4215 1686                                      u5200 17A5  
                                    u4235 169F                                      u5205 17A3  
                                    u4335 158A                                      u4255 16AC  
                                    u5305 113B                                      u4355 1594  
                                    _PEIE 005E                                      u4365 159E  
                                    u4285 16C2                                      u5165 0CF5  
                                    u7005 0E64                                      u4375 15A6  
                                    u4615 03EE                                      u6305 080D  
                                    u4645 0401                                      u6325 0817  
                                    u6335 0821                                      u8200 06E8  
                                    u4585 03DB                                      u4745 0D76  
                                    u4905 0F24                                      u4825 0ECA  
                                    u6345 0829                                      u4675 0414  
                                    u4755 0D86                                      u4835 0EDA  
                                    u8035 019B                                      u4765 0DA6  
                                    u8205 06C6                                      u7415 1436  
                                    u4775 0DB5                                      u4855 0F02  
                                    u4785 0DBF                                      u4945 0C44  
                                    u4865 0F08                                      u8170 06A6  
                                    u4975 0C6E                                      u4895 0F1E  
                                    u8175 0684                                      u7375 1F8E  
                                    u7385 1F93                                      u7705 0B8F  
                                    u8375 1DF7                                      u7655 0B60  
                                    u7595 1272                                      u5995 1E21  
                                    u7755 13C9                                      u7935 00A5  
                                    u7945 00D7                                      u8825 0607  
                                    u6985 0E46                                      u7955 011B  
                                    u7795 135B                                      u8795 05AA  
                                    _LWLO 0CAD                                      _RSSI 0147  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1F4C                _setDimmerLights_DimmingRun 1F31  
                                    _Buz1 00BB                                      _Load 0148  
                                    _Temp 00DC                                      _main 1616  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0A4E  
                         __end_of_RF_Main 1B35                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1C6F  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0C24  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2141 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1E52  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1E3C                    _getDimmerLights_Status 1CB5  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 1B4B  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 0145  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                            i1___awdiv@sign 0076  
                         __end_of___awdiv 15BD                           __end_of___ftadd 0478  
                         __end_of___ftdiv 0DE0                           __end_of___ftneg 1BB9  
                         __end_of___ftmul 0F45                           ___awdiv@divisor 0020  
                                   _T1CON 0018                           __end_of___fttol 0CAB  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 0838  
                                   i1l832 16F0                                     i1l841 1722  
                                   i1l843 1717                                     i1l835 16FE  
                                   i1l852 1734                                     i1l846 1720  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1E27                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 179B   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 1736                                     _Light 0146  
                        __end_of_TMR1_ISR 1FC1                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C63  
                                   _getAD 1FE0                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1D75  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1BEC                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1D51                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___awdiv 0053  
                      _setRF_DimmerLights 179B               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0011                              __end_of_main 1671  
                     ?_setRF_DimmerLights 0065                          __end_of_Fosc_Set 1B4F  
          getMain_All_LightsStatus@status 0020                        ??_setMemory_Modify 0020  
            setDimmerLights_OnOff@command 006D                            _Exception_Main 063B  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                    _setSw_Initialization 1CA5                                    ??_main 0070  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0020              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0A4E                            _setMemory_Data 1C3F  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 1473                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00C7  
                _getMain_All_LightsStatus 1BC2                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1DE8                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 09DF  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1B9F  
                               ??_WDT_Set 0020                          __end_of___awtoft 10C5  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 16D2  
                _getMain_All_Error_Status 11AF                                    _IOCBF2 1CB2  
                                  i1l1185 0013                                    i1l1188 001B  
                                  i1l7050 16DF                                    i1l7092 172D  
                                  i1l7084 1719                                    i1l6922 152B  
                                  i1l6940 1551                                    i1l6932 1533  
                                  i1l6916 1520                                    i1l6934 153F  
                                  i1l6944 155A                                    i1l6948 1562  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0022  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  u641_25 1540                                    _OSCCON 0099  
                                  u642_25 154A                                    u643_25 1552  
                      __size_of_Load_Main 01B2                                    u639_25 1536  
                                  u751_25 1FBB                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1EFD  
                                  _WDTCON 0097                      Exception_Main@i_3412 0032  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0063             __end_of_CC2500_PowerOnInitial 1E12  
                                  _Dimmer 01A0                                    _DlySw1 01DB  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1D2D  
              __end_of_Mcu_Initialization 1D63                       __end_of_Buzzer_Main 1473  
                                  _Memory 01A5                                    _Timer1 013E  
                                  ___bmul 1D2D                    __end_of_Exception_Main 0710  
                    Exception_Main@lights 0034                                    ___wmul 1F84  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 00DA                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1D9B  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1D88                                    _s_data 00DB  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 12F0  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1C4B                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 15BD  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 1B2F          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070          __end_of_setDimmerIntr_Dimming_RF 1E98  
        __end_of_setDimmerIntr_Dimming_Sw 1E68                     ___ftmul@f3_as_product 0039  
                       __end_ofi1___awdiv 1569                 _setDimmerLights_DimmingOn 07D8  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1DC1               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 0023                     __end_of_SwPointSelect 1C87  
             __size_of_DimmerLights_TMR_1 0064              __size_of_Flash_Memory_Modify 0052  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 006B                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1E27  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0048  
         getDimmerIntr_DimmingValue@value 0022           setDimmerIntr_DimmingValue@value 0020  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5085 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1083                             __end_of_getAD 2000  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
                      _LED_Initialization 1B43                           _getSw_KeyStatus 1D0A  
               ??_setControl_Lights_Table 0070                        getRF_KeyStatus@key 0021  
                         ?_setMemory_Data 0020          ??_getDimmerLights_PercentToValue 005C  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006B  
           ??_Flash_Memory_Initialization 0062                      _getMain_Lights_Count 1BE1  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01FE  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1C1B                __end_of_set_TimeoutCleared 1B68  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1C0F                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1B35                        ??_CC2500_WriteByte 0020  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 1429                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 1B3B  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B3B                             ??_Switch_Main 0032  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00D2  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0020  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1616                            _getDelayOff_GO 1CD7  
                     _CC2500_WriteCommand 1F17                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 1EB1             ??_DimmerLights_Initialization 0021  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070                                _getLoad_AD 0B32  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1B8F  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1B81                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 13A5        __end_of_DimmerLights_SelectPointer 1C0F  
              _DimmerLights_SelectPointer 1C03                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 1BF7                        _setRFSW_AdjControl 0BA4  
                  __end_of_setProductData 1C1B                        i1___awdiv@dividend 0072  
           setDimmerLights_Dimming@lights 006C                                   _IOC_ISR 1BA7  
                                 _IOC_Set 1BCC                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006A     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 124B  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1EE3  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 0120  
                                 _RF_Main 1B32                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1C63  
         __end_of_setControl_Lights_Table 0AC0                           setRF_Main@error 00E9  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 14C4  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 1C7B                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 0018  
       __size_of_setDimmerIntr_Dimming_Sw 0016                         __end_of_getBuz_GO 1CF9  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1CE8            __end_of_getDimmerLights_Status 1CC6  
                       __end_of_getRxData 0B32                   __end_of_getSw_KeyStatus 1D1B  
                _CC2500_registers_address 1000                        i1___awdiv@quotient 0077  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 1569  
                                 ___ftadd 0382                                   ___ftdiv 0D37  
                                 ___ftneg 1BB0                           __size_of___wmul 001E  
                                 ___ftmul 0E91                                   ___fttol 0C24  
                     __end_of_Switch_Main 1B8F                                   ___lwdiv 0801  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1CF9                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 1329                                   __ptext2 1DC1  
                                 __ptext3 13A5                                   __ptext4 0B32  
                                 __ptext5 1FE0                                   __ptext6 1D63  
                                 __ptext7 0002                                   __ptext8 1B38  
                                 __ptext9 0DE0                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001C                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1281                 __end_of_Flash_Memory_Read 1EFD  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 0566  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1B3F  
                       _DimmerLights_Main 1F4C            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1B6E                __end_of_CC2500_ClearRXFIFO 1B57  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1B5B  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EE                            _LedPointSelect 1C33  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1BF7  
                                 clrloop0 1B75            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1B63                      end_of_initialization 0048  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1156  
                           _DelayTime_1us 1130                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 11AF        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1B6E                __end_of_setRF_TransceiveGO 1D88  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1B6F  
                              _setSw_Main 01FE                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 110B  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1D3F  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0908                             _CC2500_TxData 0973  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 14C4  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                           _setCmd_Status 1EB1                       _Flash_Memory_Unlock 1BB9  
                     ??_CC2500_ReadStatus 0022                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                   setTemp_Main@DangerValue 0069  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1F68  
                      _Mcu_Initialization 1D51                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1B53                      __end_of_my_MainTimer 1365  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C3F                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0022  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___awdiv 1516  
               __end_of_CC2500_InitSetREG 1180                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 1130  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 0800                          ??_Exception_Main 002D  
                          __end_of_IO_Set 1F17                      _setRF_Initialization 1BEC  
                      _setMemory_LoopSave 1DAE                               _Switch_Main 1B88  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1D0A                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1DFD  
             ??_DimmerIntr_Initialization 0020                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1D3F       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1FA2  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 1329  
                           __pbitbssBANK1 0778             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 0035                            __end_of_setBuz 1616  
              __end_of_DimmerLights_IOC_1 10E8                      _CC2500_FrequencyCabr 1C6F  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 1365                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 1736                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 004C  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1B97                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___awdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1FE0  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 089D  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 0838  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1B63         __end_of_setDimmerIntr_MaxmumValue 1C27  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 01E0                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0040                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 1B38  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00D4                     setProductData@address 0064  
                     Exception_Main@count 002F                       Exception_Main@error 0035  
                                ??___bmul 0021                                  ??___wmul 0024  
                  __size_of_SwPointSelect 000C          __end_of_getMain_All_LightsStatus 1BCC  
                               _Tx_Length 00D8                               __pdataBANK4 0220  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0068  
                       ??_CC2500_ReadByte 0020               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 11E2                          _CC2500_SIDLEMode 1B5B  
              __size_of_DimmerLights_Main 001C                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0022  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002E  
                               ___latbits 0003                          _setMemory_Modify 1D9B  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E6                 setRF_TransceiveGO@command 0021  
                    ??_set_TimeoutCleared 0020                 _DimmerIntr_Initialization 1E98  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0067                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0021                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0062               setDimmerLights_DimmingOn@sw 0022  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 01D3                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0065            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1F84  
                setRFSW_AdjControl@status 0067                           ??_CC2500_TxData 0024  
                               __pnvBANK1 00EE                            getRxData@error 00E7  
             __size_of_LED_Initialization 0004                      _setRF_TimeoutCleared 1B4F  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0030  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                           _getCmd_Status 1D1B                                setBuz@time 0029  
                         ??_setCmd_Status 0021                       setDelayOff_GO@value 0066  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002C                    _setTemp_Initialization 0800  
                               _getBuz_GO 1CE8                  ?_setDimmerLights_Dimming 006A  
     __end_of_Flash_Memory_Initialization 0566               _Flash_Memory_Initialization 0478  
                                ?___awdiv 0020                                 __ptext100 1CD7  
                               __ptext101 1D1B                                 __ptext110 0C24  
                               __ptext102 1473                                 __ptext111 1BB0  
                               __ptext103 0F45                                 __ptext120 1B7A  
                               __ptext112 0D37                                 __ptext104 1D75  
                               __ptext121 1B28                                 __ptext113 0382  
                               __ptext105 179B                                 __ptext130 1CB5  
                               __ptext122 1E98                                 __ptext114 10A3  
                               __ptext106 1CC6                                 __ptext131 1C03  
                               __ptext123 1B3F                                 __ptext115 1671  
                               __ptext107 1C1B                                 __ptext140 1BA7  
                               __ptext132 1B3B                                 __ptext124 09DF  
                               __ptext116 1C87                                 __ptext108 1E52  
                               __ptext141 10C5                                 __ptext133 1B68  
                               __ptext125 1C0F                                 __ptext117 1E3C  
                               __ptext109 1736                                  ?___ftadd 0041  
                               __ptext142 1516                                 __ptext134 1BF7  
                               __ptext126 1216                                 __ptext118 1B8F  
                               __ptext135 1429                                 __ptext127 15BD  
                               __ptext119 11AF                                 __ptext136 1B29  
                               __ptext128 1569                                 __ptext129 12B7  
                               __ptext138 1FA2                                 __ptext139 16D2  
                               _getRxData 0AC0                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 13A5  
                        ??_setProductData 0063                         i1___awdiv@divisor 0070  
                       i1___awdiv@counter 0075             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1B2C  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1E3C                       __size_of_setSw_Main 0184  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1C96  
            ??_setDimmerIntr_DimmingValue 0021                _getDimmerIntr_DimmingValue 1C87  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00C8  
                               _r_address 00D9             __end_of_setDimmerLights_OnOff 07D8  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 12F0              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1DD4                               ??i1___awdiv 0074  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0025  
                           _SwPointSelect 1C7B                       __end_of_setLED_Main 12B7  
                        ??_getDelayOff_GO 0022                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1B38                         _CC2500_rfSettings 102F  
                          ___wmul@product 0024                                  _LED_Main 1B47  
                         SwPointSelect@sw 0021                                 clear_ram0 1B74  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1329                                 _setTxData 0F45  
     __end_of_DimmerLights_Initialization 1B81               _DimmerLights_Initialization 1B7A  
                      _CC2500_ClearRXFIFO 1B53                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1B57                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1DE8  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 1180                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1FA2  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1C57  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1D75                                  _RF_Count 0141  
                    __end_of_RF_RxDisable 1CA5                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1F31                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1D63                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B1                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00D1  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000A              __end_of_Flash_Memory_Erasing 1C57  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1216  
                   _DlyOff_Initialization 1B68         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1E80  
             setDimmerLights_OnOff@lights 00E6                  _setDimmerIntr_Dimming_Sw 1E52  
                                _Fosc_Set 1B4B                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 006E                        __end_of_getLoad_AD 0BA4  
                      __end_of_getLoad_OK 1B97                     _Switch_Initialization 1B5F  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 13E5                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1ECA  
                       getLoad_AD@channel 0026       __size_of_DimmerLights_SelectPointer 000C  
                    ??_setRF_TransceiveGO 0020              Flash_Memory_Initialization@i 0063  
                                _SwDetect 00D7                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3400 0021  
           _getMain_All_Error_Status$3401 0023                  __end_of_getDimmer_LoadGO 1B9F  
                     _Load_Initialization 1B2C          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 0DE0                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 10A3                          ??_LedPointSelect 0020  
                                ___ftpack 1671             __size_of_getMain_Lights_Count 000B  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E8                      CC2500_WriteREG@value 0022  
                             _setLED_Main 1281                __end_of_setRF_DimmerLights 1800  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 1BA7                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 1B35  
                                __ptext11 0800                                  __ptext20 1E12  
                                __ptext12 1B88                                  __ptext21 1B5F  
                                __ptext13 01FE                                  __ptext30 0BA4  
                                __ptext22 1CA5                                  __ptext14 1DD4  
                                __ptext31 1D9B                                  __ptext23 1B32  
                                __ptext15 07D8                                  __ptext40 1DFD  
                                __ptext32 1F31                                  __ptext24 0566  
                                __ptext16 1D0A                                  __ptext41 1B5B  
                                __ptext33 1CF9                                  __ptext25 0AC0  
                                __ptext17 1C7B                                  __ptext50 1F17  
                                __ptext42 13E5                                  __ptext34 1CE8  
                                __ptext26 11E2                                  __ptext18 1E27  
                                __ptext51 1B4F                                  __ptext43 1156  
                                __ptext35 1C96                                  __ptext27 1DAE  
                                __ptext19 1B63                                  __ptext60 1BCC  
                                __ptext52 1DE8                                  __ptext44 1FC1  
                                __ptext36 0973                                  __ptext28 0A4E  
                                __ptext61 1B4B                                  __ptext53 1ECA  
                                __ptext45 10E8                                  __ptext37 0908  
                                __ptext29 1365                                  __ptext70 1B2C  
                                __ptext62 1B81                                  __ptext54 1B2F  
                                __ptext46 1C6F                                  __ptext38 110B  
                                __ptext71 1F68                                  __ptext63 004C  
                                __ptext55 1BEC                                  __ptext47 1130  
                                __ptext39 1066                                  __ptext80 1C3F  
                                __ptext72 1B47                                  __ptext64 1BE1  
                                __ptext56 1D51                                  __ptext48 1B57  
                                __ptext81 1180                                  __ptext73 1281  
                                __ptext65 1B9F                                  __ptext57 1C63  
                                __ptext49 1B53                                  __ptext90 1C33  
                                __ptext82 1BB9                                  __ptext74 1B43  
                                __ptext66 1B97                                  __ptext58 1C57  
                                __ptext91 1E80                                  __ptext83 1EE3  
                                __ptext75 1D3F                                  __ptext67 1D88  
                                __ptext59 1EFD                                  __ptext92 1C27  
                                __ptext84 063B                                  __ptext76 124B  
                                __ptext68 1F84                                  __ptext93 1E68  
                                __ptext85 1BD6                                  __ptext77 14C4  
                                __ptext69 0801                                  __ptext94 0CAB  
                                __ptext86 1F4C                                  __ptext78 1C4B  
                                __ptext95 1D2D                                  __ptext87 089D  
                                __ptext79 0478                                  __ptext96 1EB1  
                                __ptext88 0710                                  __ptext97 1BC2  
                                __ptext89 12F0                                  __ptext98 0838  
                                __ptext99 0E91                                  __product 0220  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1BE1              __end_of_setDimmerLights_Main 0908  
            __end_of_setDimmerLights_Line 1CD7                        _DimmerLights_IOC_1 10C5  
            __end_of_setDimmerLights_SwOn 124B                              ??_setSw_Main 002F  
                  ??_setRF_TimeoutCleared 0020              ??_setDimmerLights_DimmingRun 0023  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1DD4        __size_of_DimmerIntr_Initialization 0019  
                         ??_getCmd_Status 0020                        _DimmerLights_TMR_1 16D2  
                __end_of_CC2500_SIDLEMode 1B5F                setDimmerLights_Main@lights 00E7  
             __end_of_DelayOffPointSelect 1C03                CC2500_WriteCommand@command 0023  
                         _CC2500_ReadByte 1066                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1FC1                  __end_of_setMemory_Modify 1DAE  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 063B  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 105E  
                             ??_getRxData 00E6                              getLoad_OK@ok 0020  
              __end_of_RF_Timeout_Counter 1DFD                                  main@argc 00EA  
                                main@argv 00EC                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6073 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 13E5                  __size_of_getSw_KeyStatus 0011  
      __end_of_setDimmerIntr_DimmingValue 1C33                _setDimmerIntr_DimmingValue 1C27  
             __end_of_Flash_Memory_Modify 1516                               _setLog_Code 11E2  
             __end_of_Flash_Memory_Unlock 1BC2                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 10E8                        __end_of_setSw_Main 0382  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 0079  
         getDimmerLights_PercentToValue@i 005F       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0067  
  __end_of_setDimmerLights_Initialization 1B29   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1B28                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1B2F  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1C4B  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D5  
                 __size_of_Exception_Main 00D5           __end_of_DelayOff_Initialization 1B3F  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1B43  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0CAB               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 0072          __size_of_setDimmerLights_Dimming 0051  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00EE  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0065  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1156  
                 __end_of_CC2500_ReadByte 1083              __end_of_setSw_Initialization 1CB5  
                         _Timeout_Counter 1E12           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1C96  
              __end_of_LED_Initialization 1B47            __end_of_setTemp_Initialization 0801  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 1B32  
                   __end_of_CC2500_RxData 0973                     __end_of_CC2500_TxData 09DF  
                   _setLoad_AH_AL_Restore 1F68                   __end_of_CC2500_PowerRST 1429  
