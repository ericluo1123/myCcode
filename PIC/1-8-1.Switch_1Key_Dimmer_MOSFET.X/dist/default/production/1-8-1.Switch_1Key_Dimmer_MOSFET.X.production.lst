

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Dec 11 13:42:01 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	intentry,global,class=CODE,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	dabs	1,0x7E,2
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  0116                     	;# 
   201  0117                     	;# 
   202  011D                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  018E                     	;# 
   206  0191                     	;# 
   207  0191                     	;# 
   208  0192                     	;# 
   209  0193                     	;# 
   210  0193                     	;# 
   211  0194                     	;# 
   212  0195                     	;# 
   213  0196                     	;# 
   214  0197                     	;# 
   215  0199                     	;# 
   216  019A                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019C                     	;# 
   222  019C                     	;# 
   223  019D                     	;# 
   224  019E                     	;# 
   225  019F                     	;# 
   226  020D                     	;# 
   227  0210                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0213                     	;# 
   234  0214                     	;# 
   235  0214                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0216                     	;# 
   240  0216                     	;# 
   241  0217                     	;# 
   242  0217                     	;# 
   243  0291                     	;# 
   244  0291                     	;# 
   245  0292                     	;# 
   246  0293                     	;# 
   247  0298                     	;# 
   248  0298                     	;# 
   249  0299                     	;# 
   250  029A                     	;# 
   251  0394                     	;# 
   252  0395                     	;# 
   253  0396                     	;# 
   254  0FE4                     	;# 
   255  0FE5                     	;# 
   256  0FE6                     	;# 
   257  0FE7                     	;# 
   258  0FE8                     	;# 
   259  0FE9                     	;# 
   260  0FEA                     	;# 
   261  0FEB                     	;# 
   262  0FED                     	;# 
   263  0FEE                     	;# 
   264  0FEF                     	;# 
   265  0000                     	;# 
   266  0001                     	;# 
   267  0002                     	;# 
   268  0003                     	;# 
   269  0004                     	;# 
   270  0005                     	;# 
   271  0006                     	;# 
   272  0007                     	;# 
   273  0008                     	;# 
   274  0009                     	;# 
   275  000A                     	;# 
   276  000B                     	;# 
   277  000C                     	;# 
   278  000D                     	;# 
   279  000E                     	;# 
   280  0010                     	;# 
   281  0011                     	;# 
   282  0012                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  008C                     	;# 
   293  008D                     	;# 
   294  008E                     	;# 
   295  0090                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0095                     	;# 
   299  0096                     	;# 
   300  0097                     	;# 
   301  0099                     	;# 
   302  009A                     	;# 
   303  009B                     	;# 
   304  009B                     	;# 
   305  009C                     	;# 
   306  009D                     	;# 
   307  009E                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  010E                     	;# 
   311  0116                     	;# 
   312  0117                     	;# 
   313  011D                     	;# 
   314  018C                     	;# 
   315  018D                     	;# 
   316  018E                     	;# 
   317  0191                     	;# 
   318  0191                     	;# 
   319  0192                     	;# 
   320  0193                     	;# 
   321  0193                     	;# 
   322  0194                     	;# 
   323  0195                     	;# 
   324  0196                     	;# 
   325  0197                     	;# 
   326  0199                     	;# 
   327  019A                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019C                     	;# 
   333  019C                     	;# 
   334  019D                     	;# 
   335  019E                     	;# 
   336  019F                     	;# 
   337  020D                     	;# 
   338  0210                     	;# 
   339  0211                     	;# 
   340  0211                     	;# 
   341  0212                     	;# 
   342  0212                     	;# 
   343  0213                     	;# 
   344  0213                     	;# 
   345  0214                     	;# 
   346  0214                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0216                     	;# 
   351  0216                     	;# 
   352  0217                     	;# 
   353  0217                     	;# 
   354  0291                     	;# 
   355  0291                     	;# 
   356  0292                     	;# 
   357  0293                     	;# 
   358  0298                     	;# 
   359  0298                     	;# 
   360  0299                     	;# 
   361  029A                     	;# 
   362  0394                     	;# 
   363  0395                     	;# 
   364  0396                     	;# 
   365  0FE4                     	;# 
   366  0FE5                     	;# 
   367  0FE6                     	;# 
   368  0FE7                     	;# 
   369  0FE8                     	;# 
   370  0FE9                     	;# 
   371  0FEA                     	;# 
   372  0FEB                     	;# 
   373  0FED                     	;# 
   374  0FEE                     	;# 
   375  0FEF                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0015                     	;# 
   395  0016                     	;# 
   396  0016                     	;# 
   397  0017                     	;# 
   398  0018                     	;# 
   399  0019                     	;# 
   400  001A                     	;# 
   401  001B                     	;# 
   402  001C                     	;# 
   403  008C                     	;# 
   404  008D                     	;# 
   405  008E                     	;# 
   406  0090                     	;# 
   407  0091                     	;# 
   408  0092                     	;# 
   409  0095                     	;# 
   410  0096                     	;# 
   411  0097                     	;# 
   412  0099                     	;# 
   413  009A                     	;# 
   414  009B                     	;# 
   415  009B                     	;# 
   416  009C                     	;# 
   417  009D                     	;# 
   418  009E                     	;# 
   419  010C                     	;# 
   420  010D                     	;# 
   421  010E                     	;# 
   422  0116                     	;# 
   423  0117                     	;# 
   424  011D                     	;# 
   425  018C                     	;# 
   426  018D                     	;# 
   427  018E                     	;# 
   428  0191                     	;# 
   429  0191                     	;# 
   430  0192                     	;# 
   431  0193                     	;# 
   432  0193                     	;# 
   433  0194                     	;# 
   434  0195                     	;# 
   435  0196                     	;# 
   436  0197                     	;# 
   437  0199                     	;# 
   438  019A                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019C                     	;# 
   444  019C                     	;# 
   445  019D                     	;# 
   446  019E                     	;# 
   447  019F                     	;# 
   448  020D                     	;# 
   449  0210                     	;# 
   450  0211                     	;# 
   451  0211                     	;# 
   452  0212                     	;# 
   453  0212                     	;# 
   454  0213                     	;# 
   455  0213                     	;# 
   456  0214                     	;# 
   457  0214                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0216                     	;# 
   462  0216                     	;# 
   463  0217                     	;# 
   464  0217                     	;# 
   465  0291                     	;# 
   466  0291                     	;# 
   467  0292                     	;# 
   468  0293                     	;# 
   469  0298                     	;# 
   470  0298                     	;# 
   471  0299                     	;# 
   472  029A                     	;# 
   473  0394                     	;# 
   474  0395                     	;# 
   475  0396                     	;# 
   476  0FE4                     	;# 
   477  0FE5                     	;# 
   478  0FE6                     	;# 
   479  0FE7                     	;# 
   480  0FE8                     	;# 
   481  0FE9                     	;# 
   482  0FEA                     	;# 
   483  0FEB                     	;# 
   484  0FED                     	;# 
   485  0FEE                     	;# 
   486  0FEF                     	;# 
   487  0000                     	;# 
   488  0001                     	;# 
   489  0002                     	;# 
   490  0003                     	;# 
   491  0004                     	;# 
   492  0005                     	;# 
   493  0006                     	;# 
   494  0007                     	;# 
   495  0008                     	;# 
   496  0009                     	;# 
   497  000A                     	;# 
   498  000B                     	;# 
   499  000C                     	;# 
   500  000D                     	;# 
   501  000E                     	;# 
   502  0010                     	;# 
   503  0011                     	;# 
   504  0012                     	;# 
   505  0015                     	;# 
   506  0016                     	;# 
   507  0016                     	;# 
   508  0017                     	;# 
   509  0018                     	;# 
   510  0019                     	;# 
   511  001A                     	;# 
   512  001B                     	;# 
   513  001C                     	;# 
   514  008C                     	;# 
   515  008D                     	;# 
   516  008E                     	;# 
   517  0090                     	;# 
   518  0091                     	;# 
   519  0092                     	;# 
   520  0095                     	;# 
   521  0096                     	;# 
   522  0097                     	;# 
   523  0099                     	;# 
   524  009A                     	;# 
   525  009B                     	;# 
   526  009B                     	;# 
   527  009C                     	;# 
   528  009D                     	;# 
   529  009E                     	;# 
   530  010C                     	;# 
   531  010D                     	;# 
   532  010E                     	;# 
   533  0116                     	;# 
   534  0117                     	;# 
   535  011D                     	;# 
   536  018C                     	;# 
   537  018D                     	;# 
   538  018E                     	;# 
   539  0191                     	;# 
   540  0191                     	;# 
   541  0192                     	;# 
   542  0193                     	;# 
   543  0193                     	;# 
   544  0194                     	;# 
   545  0195                     	;# 
   546  0196                     	;# 
   547  0197                     	;# 
   548  0199                     	;# 
   549  019A                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019C                     	;# 
   555  019C                     	;# 
   556  019D                     	;# 
   557  019E                     	;# 
   558  019F                     	;# 
   559  020D                     	;# 
   560  0210                     	;# 
   561  0211                     	;# 
   562  0211                     	;# 
   563  0212                     	;# 
   564  0212                     	;# 
   565  0213                     	;# 
   566  0213                     	;# 
   567  0214                     	;# 
   568  0214                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0216                     	;# 
   573  0216                     	;# 
   574  0217                     	;# 
   575  0217                     	;# 
   576  0291                     	;# 
   577  0291                     	;# 
   578  0292                     	;# 
   579  0293                     	;# 
   580  0298                     	;# 
   581  0298                     	;# 
   582  0299                     	;# 
   583  029A                     	;# 
   584  0394                     	;# 
   585  0395                     	;# 
   586  0396                     	;# 
   587  0FE4                     	;# 
   588  0FE5                     	;# 
   589  0FE6                     	;# 
   590  0FE7                     	;# 
   591  0FE8                     	;# 
   592  0FE9                     	;# 
   593  0FEA                     	;# 
   594  0FEB                     	;# 
   595  0FED                     	;# 
   596  0FEE                     	;# 
   597  0FEF                     	;# 
   598  0000                     	;# 
   599  0001                     	;# 
   600  0002                     	;# 
   601  0003                     	;# 
   602  0004                     	;# 
   603  0005                     	;# 
   604  0006                     	;# 
   605  0007                     	;# 
   606  0008                     	;# 
   607  0009                     	;# 
   608  000A                     	;# 
   609  000B                     	;# 
   610  000C                     	;# 
   611  000D                     	;# 
   612  000E                     	;# 
   613  0010                     	;# 
   614  0011                     	;# 
   615  0012                     	;# 
   616  0015                     	;# 
   617  0016                     	;# 
   618  0016                     	;# 
   619  0017                     	;# 
   620  0018                     	;# 
   621  0019                     	;# 
   622  001A                     	;# 
   623  001B                     	;# 
   624  001C                     	;# 
   625  008C                     	;# 
   626  008D                     	;# 
   627  008E                     	;# 
   628  0090                     	;# 
   629  0091                     	;# 
   630  0092                     	;# 
   631  0095                     	;# 
   632  0096                     	;# 
   633  0097                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009B                     	;# 
   638  009C                     	;# 
   639  009D                     	;# 
   640  009E                     	;# 
   641  010C                     	;# 
   642  010D                     	;# 
   643  010E                     	;# 
   644  0116                     	;# 
   645  0117                     	;# 
   646  011D                     	;# 
   647  018C                     	;# 
   648  018D                     	;# 
   649  018E                     	;# 
   650  0191                     	;# 
   651  0191                     	;# 
   652  0192                     	;# 
   653  0193                     	;# 
   654  0193                     	;# 
   655  0194                     	;# 
   656  0195                     	;# 
   657  0196                     	;# 
   658  0197                     	;# 
   659  0199                     	;# 
   660  019A                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019C                     	;# 
   666  019C                     	;# 
   667  019D                     	;# 
   668  019E                     	;# 
   669  019F                     	;# 
   670  020D                     	;# 
   671  0210                     	;# 
   672  0211                     	;# 
   673  0211                     	;# 
   674  0212                     	;# 
   675  0212                     	;# 
   676  0213                     	;# 
   677  0213                     	;# 
   678  0214                     	;# 
   679  0214                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0216                     	;# 
   684  0216                     	;# 
   685  0217                     	;# 
   686  0217                     	;# 
   687  0291                     	;# 
   688  0291                     	;# 
   689  0292                     	;# 
   690  0293                     	;# 
   691  0298                     	;# 
   692  0298                     	;# 
   693  0299                     	;# 
   694  029A                     	;# 
   695  0394                     	;# 
   696  0395                     	;# 
   697  0396                     	;# 
   698  0FE4                     	;# 
   699  0FE5                     	;# 
   700  0FE6                     	;# 
   701  0FE7                     	;# 
   702  0FE8                     	;# 
   703  0FE9                     	;# 
   704  0FEA                     	;# 
   705  0FEB                     	;# 
   706  0FED                     	;# 
   707  0FEE                     	;# 
   708  0FEF                     	;# 
   709  0000                     	;# 
   710  0001                     	;# 
   711  0002                     	;# 
   712  0003                     	;# 
   713  0004                     	;# 
   714  0005                     	;# 
   715  0006                     	;# 
   716  0007                     	;# 
   717  0008                     	;# 
   718  0009                     	;# 
   719  000A                     	;# 
   720  000B                     	;# 
   721  000C                     	;# 
   722  000D                     	;# 
   723  000E                     	;# 
   724  0010                     	;# 
   725  0011                     	;# 
   726  0012                     	;# 
   727  0015                     	;# 
   728  0016                     	;# 
   729  0016                     	;# 
   730  0017                     	;# 
   731  0018                     	;# 
   732  0019                     	;# 
   733  001A                     	;# 
   734  001B                     	;# 
   735  001C                     	;# 
   736  008C                     	;# 
   737  008D                     	;# 
   738  008E                     	;# 
   739  0090                     	;# 
   740  0091                     	;# 
   741  0092                     	;# 
   742  0095                     	;# 
   743  0096                     	;# 
   744  0097                     	;# 
   745  0099                     	;# 
   746  009A                     	;# 
   747  009B                     	;# 
   748  009B                     	;# 
   749  009C                     	;# 
   750  009D                     	;# 
   751  009E                     	;# 
   752  010C                     	;# 
   753  010D                     	;# 
   754  010E                     	;# 
   755  0116                     	;# 
   756  0117                     	;# 
   757  011D                     	;# 
   758  018C                     	;# 
   759  018D                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0194                     	;# 
   767  0195                     	;# 
   768  0196                     	;# 
   769  0197                     	;# 
   770  0199                     	;# 
   771  019A                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019C                     	;# 
   777  019C                     	;# 
   778  019D                     	;# 
   779  019E                     	;# 
   780  019F                     	;# 
   781  020D                     	;# 
   782  0210                     	;# 
   783  0211                     	;# 
   784  0211                     	;# 
   785  0212                     	;# 
   786  0212                     	;# 
   787  0213                     	;# 
   788  0213                     	;# 
   789  0214                     	;# 
   790  0214                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0216                     	;# 
   795  0216                     	;# 
   796  0217                     	;# 
   797  0217                     	;# 
   798  0291                     	;# 
   799  0291                     	;# 
   800  0292                     	;# 
   801  0293                     	;# 
   802  0298                     	;# 
   803  0298                     	;# 
   804  0299                     	;# 
   805  029A                     	;# 
   806  0394                     	;# 
   807  0395                     	;# 
   808  0396                     	;# 
   809  0FE4                     	;# 
   810  0FE5                     	;# 
   811  0FE6                     	;# 
   812  0FE7                     	;# 
   813  0FE8                     	;# 
   814  0FE9                     	;# 
   815  0FEA                     	;# 
   816  0FEB                     	;# 
   817  0FED                     	;# 
   818  0FEE                     	;# 
   819  0FEF                     	;# 
   820  0000                     	;# 
   821  0001                     	;# 
   822  0002                     	;# 
   823  0003                     	;# 
   824  0004                     	;# 
   825  0005                     	;# 
   826  0006                     	;# 
   827  0007                     	;# 
   828  0008                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  0010                     	;# 
   836  0011                     	;# 
   837  0012                     	;# 
   838  0015                     	;# 
   839  0016                     	;# 
   840  0016                     	;# 
   841  0017                     	;# 
   842  0018                     	;# 
   843  0019                     	;# 
   844  001A                     	;# 
   845  001B                     	;# 
   846  001C                     	;# 
   847  008C                     	;# 
   848  008D                     	;# 
   849  008E                     	;# 
   850  0090                     	;# 
   851  0091                     	;# 
   852  0092                     	;# 
   853  0095                     	;# 
   854  0096                     	;# 
   855  0097                     	;# 
   856  0099                     	;# 
   857  009A                     	;# 
   858  009B                     	;# 
   859  009B                     	;# 
   860  009C                     	;# 
   861  009D                     	;# 
   862  009E                     	;# 
   863  010C                     	;# 
   864  010D                     	;# 
   865  010E                     	;# 
   866  0116                     	;# 
   867  0117                     	;# 
   868  011D                     	;# 
   869  018C                     	;# 
   870  018D                     	;# 
   871  018E                     	;# 
   872  0191                     	;# 
   873  0191                     	;# 
   874  0192                     	;# 
   875  0193                     	;# 
   876  0193                     	;# 
   877  0194                     	;# 
   878  0195                     	;# 
   879  0196                     	;# 
   880  0197                     	;# 
   881  0199                     	;# 
   882  019A                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019C                     	;# 
   888  019C                     	;# 
   889  019D                     	;# 
   890  019E                     	;# 
   891  019F                     	;# 
   892  020D                     	;# 
   893  0210                     	;# 
   894  0211                     	;# 
   895  0211                     	;# 
   896  0212                     	;# 
   897  0212                     	;# 
   898  0213                     	;# 
   899  0213                     	;# 
   900  0214                     	;# 
   901  0214                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0216                     	;# 
   906  0216                     	;# 
   907  0217                     	;# 
   908  0217                     	;# 
   909  0291                     	;# 
   910  0291                     	;# 
   911  0292                     	;# 
   912  0293                     	;# 
   913  0298                     	;# 
   914  0298                     	;# 
   915  0299                     	;# 
   916  029A                     	;# 
   917  0394                     	;# 
   918  0395                     	;# 
   919  0396                     	;# 
   920  0FE4                     	;# 
   921  0FE5                     	;# 
   922  0FE6                     	;# 
   923  0FE7                     	;# 
   924  0FE8                     	;# 
   925  0FE9                     	;# 
   926  0FEA                     	;# 
   927  0FEB                     	;# 
   928  0FED                     	;# 
   929  0FEE                     	;# 
   930  0FEF                     	;# 
   931  0000                     	;# 
   932  0001                     	;# 
   933  0002                     	;# 
   934  0003                     	;# 
   935  0004                     	;# 
   936  0005                     	;# 
   937  0006                     	;# 
   938  0007                     	;# 
   939  0008                     	;# 
   940  0009                     	;# 
   941  000A                     	;# 
   942  000B                     	;# 
   943  000C                     	;# 
   944  000D                     	;# 
   945  000E                     	;# 
   946  0010                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  0090                     	;# 
   962  0091                     	;# 
   963  0092                     	;# 
   964  0095                     	;# 
   965  0096                     	;# 
   966  0097                     	;# 
   967  0099                     	;# 
   968  009A                     	;# 
   969  009B                     	;# 
   970  009B                     	;# 
   971  009C                     	;# 
   972  009D                     	;# 
   973  009E                     	;# 
   974  010C                     	;# 
   975  010D                     	;# 
   976  010E                     	;# 
   977  0116                     	;# 
   978  0117                     	;# 
   979  011D                     	;# 
   980  018C                     	;# 
   981  018D                     	;# 
   982  018E                     	;# 
   983  0191                     	;# 
   984  0191                     	;# 
   985  0192                     	;# 
   986  0193                     	;# 
   987  0193                     	;# 
   988  0194                     	;# 
   989  0195                     	;# 
   990  0196                     	;# 
   991  0197                     	;# 
   992  0199                     	;# 
   993  019A                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019C                     	;# 
   999  019C                     	;# 
  1000  019D                     	;# 
  1001  019E                     	;# 
  1002  019F                     	;# 
  1003  020D                     	;# 
  1004  0210                     	;# 
  1005  0211                     	;# 
  1006  0211                     	;# 
  1007  0212                     	;# 
  1008  0212                     	;# 
  1009  0213                     	;# 
  1010  0213                     	;# 
  1011  0214                     	;# 
  1012  0214                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0216                     	;# 
  1017  0216                     	;# 
  1018  0217                     	;# 
  1019  0217                     	;# 
  1020  0291                     	;# 
  1021  0291                     	;# 
  1022  0292                     	;# 
  1023  0293                     	;# 
  1024  0298                     	;# 
  1025  0298                     	;# 
  1026  0299                     	;# 
  1027  029A                     	;# 
  1028  0394                     	;# 
  1029  0395                     	;# 
  1030  0396                     	;# 
  1031  0FE4                     	;# 
  1032  0FE5                     	;# 
  1033  0FE6                     	;# 
  1034  0FE7                     	;# 
  1035  0FE8                     	;# 
  1036  0FE9                     	;# 
  1037  0FEA                     	;# 
  1038  0FEB                     	;# 
  1039  0FED                     	;# 
  1040  0FEE                     	;# 
  1041  0FEF                     	;# 
  1042  0000                     	;# 
  1043  0001                     	;# 
  1044  0002                     	;# 
  1045  0003                     	;# 
  1046  0004                     	;# 
  1047  0005                     	;# 
  1048  0006                     	;# 
  1049  0007                     	;# 
  1050  0008                     	;# 
  1051  0009                     	;# 
  1052  000A                     	;# 
  1053  000B                     	;# 
  1054  000C                     	;# 
  1055  000D                     	;# 
  1056  000E                     	;# 
  1057  0010                     	;# 
  1058  0011                     	;# 
  1059  0012                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  008C                     	;# 
  1070  008D                     	;# 
  1071  008E                     	;# 
  1072  0090                     	;# 
  1073  0091                     	;# 
  1074  0092                     	;# 
  1075  0095                     	;# 
  1076  0096                     	;# 
  1077  0097                     	;# 
  1078  0099                     	;# 
  1079  009A                     	;# 
  1080  009B                     	;# 
  1081  009B                     	;# 
  1082  009C                     	;# 
  1083  009D                     	;# 
  1084  009E                     	;# 
  1085  010C                     	;# 
  1086  010D                     	;# 
  1087  010E                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  011D                     	;# 
  1091  018C                     	;# 
  1092  018D                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0197                     	;# 
  1103  0199                     	;# 
  1104  019A                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019C                     	;# 
  1110  019C                     	;# 
  1111  019D                     	;# 
  1112  019E                     	;# 
  1113  019F                     	;# 
  1114  020D                     	;# 
  1115  0210                     	;# 
  1116  0211                     	;# 
  1117  0211                     	;# 
  1118  0212                     	;# 
  1119  0212                     	;# 
  1120  0213                     	;# 
  1121  0213                     	;# 
  1122  0214                     	;# 
  1123  0214                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  0291                     	;# 
  1132  0291                     	;# 
  1133  0292                     	;# 
  1134  0293                     	;# 
  1135  0298                     	;# 
  1136  0298                     	;# 
  1137  0299                     	;# 
  1138  029A                     	;# 
  1139  0394                     	;# 
  1140  0395                     	;# 
  1141  0396                     	;# 
  1142  0FE4                     	;# 
  1143  0FE5                     	;# 
  1144  0FE6                     	;# 
  1145  0FE7                     	;# 
  1146  0FE8                     	;# 
  1147  0FE9                     	;# 
  1148  0FEA                     	;# 
  1149  0FEB                     	;# 
  1150  0FED                     	;# 
  1151  0FEE                     	;# 
  1152  0FEF                     	;# 
  1153  0000                     	;# 
  1154  0001                     	;# 
  1155  0002                     	;# 
  1156  0003                     	;# 
  1157  0004                     	;# 
  1158  0005                     	;# 
  1159  0006                     	;# 
  1160  0007                     	;# 
  1161  0008                     	;# 
  1162  0009                     	;# 
  1163  000A                     	;# 
  1164  000B                     	;# 
  1165  000C                     	;# 
  1166  000D                     	;# 
  1167  000E                     	;# 
  1168  0010                     	;# 
  1169  0011                     	;# 
  1170  0012                     	;# 
  1171  0015                     	;# 
  1172  0016                     	;# 
  1173  0016                     	;# 
  1174  0017                     	;# 
  1175  0018                     	;# 
  1176  0019                     	;# 
  1177  001A                     	;# 
  1178  001B                     	;# 
  1179  001C                     	;# 
  1180  008C                     	;# 
  1181  008D                     	;# 
  1182  008E                     	;# 
  1183  0090                     	;# 
  1184  0091                     	;# 
  1185  0092                     	;# 
  1186  0095                     	;# 
  1187  0096                     	;# 
  1188  0097                     	;# 
  1189  0099                     	;# 
  1190  009A                     	;# 
  1191  009B                     	;# 
  1192  009B                     	;# 
  1193  009C                     	;# 
  1194  009D                     	;# 
  1195  009E                     	;# 
  1196  010C                     	;# 
  1197  010D                     	;# 
  1198  010E                     	;# 
  1199  0116                     	;# 
  1200  0117                     	;# 
  1201  011D                     	;# 
  1202  018C                     	;# 
  1203  018D                     	;# 
  1204  018E                     	;# 
  1205  0191                     	;# 
  1206  0191                     	;# 
  1207  0192                     	;# 
  1208  0193                     	;# 
  1209  0193                     	;# 
  1210  0194                     	;# 
  1211  0195                     	;# 
  1212  0196                     	;# 
  1213  0197                     	;# 
  1214  0199                     	;# 
  1215  019A                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019C                     	;# 
  1221  019C                     	;# 
  1222  019D                     	;# 
  1223  019E                     	;# 
  1224  019F                     	;# 
  1225  020D                     	;# 
  1226  0210                     	;# 
  1227  0211                     	;# 
  1228  0211                     	;# 
  1229  0212                     	;# 
  1230  0212                     	;# 
  1231  0213                     	;# 
  1232  0213                     	;# 
  1233  0214                     	;# 
  1234  0214                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0216                     	;# 
  1239  0216                     	;# 
  1240  0217                     	;# 
  1241  0217                     	;# 
  1242  0291                     	;# 
  1243  0291                     	;# 
  1244  0292                     	;# 
  1245  0293                     	;# 
  1246  0298                     	;# 
  1247  0298                     	;# 
  1248  0299                     	;# 
  1249  029A                     	;# 
  1250  0394                     	;# 
  1251  0395                     	;# 
  1252  0396                     	;# 
  1253  0FE4                     	;# 
  1254  0FE5                     	;# 
  1255  0FE6                     	;# 
  1256  0FE7                     	;# 
  1257  0FE8                     	;# 
  1258  0FE9                     	;# 
  1259  0FEA                     	;# 
  1260  0FEB                     	;# 
  1261  0FED                     	;# 
  1262  0FEE                     	;# 
  1263  0FEF                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0008                     	;# 
  1273  0009                     	;# 
  1274  000A                     	;# 
  1275  000B                     	;# 
  1276  000C                     	;# 
  1277  000D                     	;# 
  1278  000E                     	;# 
  1279  0010                     	;# 
  1280  0011                     	;# 
  1281  0012                     	;# 
  1282  0015                     	;# 
  1283  0016                     	;# 
  1284  0016                     	;# 
  1285  0017                     	;# 
  1286  0018                     	;# 
  1287  0019                     	;# 
  1288  001A                     	;# 
  1289  001B                     	;# 
  1290  001C                     	;# 
  1291  008C                     	;# 
  1292  008D                     	;# 
  1293  008E                     	;# 
  1294  0090                     	;# 
  1295  0091                     	;# 
  1296  0092                     	;# 
  1297  0095                     	;# 
  1298  0096                     	;# 
  1299  0097                     	;# 
  1300  0099                     	;# 
  1301  009A                     	;# 
  1302  009B                     	;# 
  1303  009B                     	;# 
  1304  009C                     	;# 
  1305  009D                     	;# 
  1306  009E                     	;# 
  1307  010C                     	;# 
  1308  010D                     	;# 
  1309  010E                     	;# 
  1310  0116                     	;# 
  1311  0117                     	;# 
  1312  011D                     	;# 
  1313  018C                     	;# 
  1314  018D                     	;# 
  1315  018E                     	;# 
  1316  0191                     	;# 
  1317  0191                     	;# 
  1318  0192                     	;# 
  1319  0193                     	;# 
  1320  0193                     	;# 
  1321  0194                     	;# 
  1322  0195                     	;# 
  1323  0196                     	;# 
  1324  0197                     	;# 
  1325  0199                     	;# 
  1326  019A                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019C                     	;# 
  1332  019C                     	;# 
  1333  019D                     	;# 
  1334  019E                     	;# 
  1335  019F                     	;# 
  1336  020D                     	;# 
  1337  0210                     	;# 
  1338  0211                     	;# 
  1339  0211                     	;# 
  1340  0212                     	;# 
  1341  0212                     	;# 
  1342  0213                     	;# 
  1343  0213                     	;# 
  1344  0214                     	;# 
  1345  0214                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0216                     	;# 
  1350  0216                     	;# 
  1351  0217                     	;# 
  1352  0217                     	;# 
  1353  0291                     	;# 
  1354  0291                     	;# 
  1355  0292                     	;# 
  1356  0293                     	;# 
  1357  0298                     	;# 
  1358  0298                     	;# 
  1359  0299                     	;# 
  1360  029A                     	;# 
  1361  0394                     	;# 
  1362  0395                     	;# 
  1363  0396                     	;# 
  1364  0FE4                     	;# 
  1365  0FE5                     	;# 
  1366  0FE6                     	;# 
  1367  0FE7                     	;# 
  1368  0FE8                     	;# 
  1369  0FE9                     	;# 
  1370  0FEA                     	;# 
  1371  0FEB                     	;# 
  1372  0FED                     	;# 
  1373  0FEE                     	;# 
  1374  0FEF                     	;# 
  1375  0000                     	;# 
  1376  0001                     	;# 
  1377  0002                     	;# 
  1378  0003                     	;# 
  1379  0004                     	;# 
  1380  0005                     	;# 
  1381  0006                     	;# 
  1382  0007                     	;# 
  1383  0008                     	;# 
  1384  0009                     	;# 
  1385  000A                     	;# 
  1386  000B                     	;# 
  1387  000C                     	;# 
  1388  000D                     	;# 
  1389  000E                     	;# 
  1390  0010                     	;# 
  1391  0011                     	;# 
  1392  0012                     	;# 
  1393  0015                     	;# 
  1394  0016                     	;# 
  1395  0016                     	;# 
  1396  0017                     	;# 
  1397  0018                     	;# 
  1398  0019                     	;# 
  1399  001A                     	;# 
  1400  001B                     	;# 
  1401  001C                     	;# 
  1402  008C                     	;# 
  1403  008D                     	;# 
  1404  008E                     	;# 
  1405  0090                     	;# 
  1406  0091                     	;# 
  1407  0092                     	;# 
  1408  0095                     	;# 
  1409  0096                     	;# 
  1410  0097                     	;# 
  1411  0099                     	;# 
  1412  009A                     	;# 
  1413  009B                     	;# 
  1414  009B                     	;# 
  1415  009C                     	;# 
  1416  009D                     	;# 
  1417  009E                     	;# 
  1418  010C                     	;# 
  1419  010D                     	;# 
  1420  010E                     	;# 
  1421  0116                     	;# 
  1422  0117                     	;# 
  1423  011D                     	;# 
  1424  018C                     	;# 
  1425  018D                     	;# 
  1426  018E                     	;# 
  1427  0191                     	;# 
  1428  0191                     	;# 
  1429  0192                     	;# 
  1430  0193                     	;# 
  1431  0193                     	;# 
  1432  0194                     	;# 
  1433  0195                     	;# 
  1434  0196                     	;# 
  1435  0197                     	;# 
  1436  0199                     	;# 
  1437  019A                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019C                     	;# 
  1443  019C                     	;# 
  1444  019D                     	;# 
  1445  019E                     	;# 
  1446  019F                     	;# 
  1447  020D                     	;# 
  1448  0210                     	;# 
  1449  0211                     	;# 
  1450  0211                     	;# 
  1451  0212                     	;# 
  1452  0212                     	;# 
  1453  0213                     	;# 
  1454  0213                     	;# 
  1455  0214                     	;# 
  1456  0214                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0216                     	;# 
  1461  0216                     	;# 
  1462  0217                     	;# 
  1463  0217                     	;# 
  1464  0291                     	;# 
  1465  0291                     	;# 
  1466  0292                     	;# 
  1467  0293                     	;# 
  1468  0298                     	;# 
  1469  0298                     	;# 
  1470  0299                     	;# 
  1471  029A                     	;# 
  1472  0394                     	;# 
  1473  0395                     	;# 
  1474  0396                     	;# 
  1475  0FE4                     	;# 
  1476  0FE5                     	;# 
  1477  0FE6                     	;# 
  1478  0FE7                     	;# 
  1479  0FE8                     	;# 
  1480  0FE9                     	;# 
  1481  0FEA                     	;# 
  1482  0FEB                     	;# 
  1483  0FED                     	;# 
  1484  0FEE                     	;# 
  1485  0FEF                     	;# 
  1486  0000                     	;# 
  1487  0001                     	;# 
  1488  0002                     	;# 
  1489  0003                     	;# 
  1490  0004                     	;# 
  1491  0005                     	;# 
  1492  0006                     	;# 
  1493  0007                     	;# 
  1494  0008                     	;# 
  1495  0009                     	;# 
  1496  000A                     	;# 
  1497  000B                     	;# 
  1498  000C                     	;# 
  1499  000D                     	;# 
  1500  000E                     	;# 
  1501  0010                     	;# 
  1502  0011                     	;# 
  1503  0012                     	;# 
  1504  0015                     	;# 
  1505  0016                     	;# 
  1506  0016                     	;# 
  1507  0017                     	;# 
  1508  0018                     	;# 
  1509  0019                     	;# 
  1510  001A                     	;# 
  1511  001B                     	;# 
  1512  001C                     	;# 
  1513  008C                     	;# 
  1514  008D                     	;# 
  1515  008E                     	;# 
  1516  0090                     	;# 
  1517  0091                     	;# 
  1518  0092                     	;# 
  1519  0095                     	;# 
  1520  0096                     	;# 
  1521  0097                     	;# 
  1522  0099                     	;# 
  1523  009A                     	;# 
  1524  009B                     	;# 
  1525  009B                     	;# 
  1526  009C                     	;# 
  1527  009D                     	;# 
  1528  009E                     	;# 
  1529  010C                     	;# 
  1530  010D                     	;# 
  1531  010E                     	;# 
  1532  0116                     	;# 
  1533  0117                     	;# 
  1534  011D                     	;# 
  1535  018C                     	;# 
  1536  018D                     	;# 
  1537  018E                     	;# 
  1538  0191                     	;# 
  1539  0191                     	;# 
  1540  0192                     	;# 
  1541  0193                     	;# 
  1542  0193                     	;# 
  1543  0194                     	;# 
  1544  0195                     	;# 
  1545  0196                     	;# 
  1546  0197                     	;# 
  1547  0199                     	;# 
  1548  019A                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019C                     	;# 
  1554  019C                     	;# 
  1555  019D                     	;# 
  1556  019E                     	;# 
  1557  019F                     	;# 
  1558  020D                     	;# 
  1559  0210                     	;# 
  1560  0211                     	;# 
  1561  0211                     	;# 
  1562  0212                     	;# 
  1563  0212                     	;# 
  1564  0213                     	;# 
  1565  0213                     	;# 
  1566  0214                     	;# 
  1567  0214                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0216                     	;# 
  1572  0216                     	;# 
  1573  0217                     	;# 
  1574  0217                     	;# 
  1575  0291                     	;# 
  1576  0291                     	;# 
  1577  0292                     	;# 
  1578  0293                     	;# 
  1579  0298                     	;# 
  1580  0298                     	;# 
  1581  0299                     	;# 
  1582  029A                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  0FE4                     	;# 
  1587  0FE5                     	;# 
  1588  0FE6                     	;# 
  1589  0FE7                     	;# 
  1590  0FE8                     	;# 
  1591  0FE9                     	;# 
  1592  0FEA                     	;# 
  1593  0FEB                     	;# 
  1594  0FED                     	;# 
  1595  0FEE                     	;# 
  1596  0FEF                     	;# 
  1597  0000                     	;# 
  1598  0001                     	;# 
  1599  0002                     	;# 
  1600  0003                     	;# 
  1601  0004                     	;# 
  1602  0005                     	;# 
  1603  0006                     	;# 
  1604  0007                     	;# 
  1605  0008                     	;# 
  1606  0009                     	;# 
  1607  000A                     	;# 
  1608  000B                     	;# 
  1609  000C                     	;# 
  1610  000D                     	;# 
  1611  000E                     	;# 
  1612  0010                     	;# 
  1613  0011                     	;# 
  1614  0012                     	;# 
  1615  0015                     	;# 
  1616  0016                     	;# 
  1617  0016                     	;# 
  1618  0017                     	;# 
  1619  0018                     	;# 
  1620  0019                     	;# 
  1621  001A                     	;# 
  1622  001B                     	;# 
  1623  001C                     	;# 
  1624  008C                     	;# 
  1625  008D                     	;# 
  1626  008E                     	;# 
  1627  0090                     	;# 
  1628  0091                     	;# 
  1629  0092                     	;# 
  1630  0095                     	;# 
  1631  0096                     	;# 
  1632  0097                     	;# 
  1633  0099                     	;# 
  1634  009A                     	;# 
  1635  009B                     	;# 
  1636  009B                     	;# 
  1637  009C                     	;# 
  1638  009D                     	;# 
  1639  009E                     	;# 
  1640  010C                     	;# 
  1641  010D                     	;# 
  1642  010E                     	;# 
  1643  0116                     	;# 
  1644  0117                     	;# 
  1645  011D                     	;# 
  1646  018C                     	;# 
  1647  018D                     	;# 
  1648  018E                     	;# 
  1649  0191                     	;# 
  1650  0191                     	;# 
  1651  0192                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0194                     	;# 
  1655  0195                     	;# 
  1656  0196                     	;# 
  1657  0197                     	;# 
  1658  0199                     	;# 
  1659  019A                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019C                     	;# 
  1665  019C                     	;# 
  1666  019D                     	;# 
  1667  019E                     	;# 
  1668  019F                     	;# 
  1669  020D                     	;# 
  1670  0210                     	;# 
  1671  0211                     	;# 
  1672  0211                     	;# 
  1673  0212                     	;# 
  1674  0212                     	;# 
  1675  0213                     	;# 
  1676  0213                     	;# 
  1677  0214                     	;# 
  1678  0214                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0216                     	;# 
  1683  0216                     	;# 
  1684  0217                     	;# 
  1685  0217                     	;# 
  1686  0291                     	;# 
  1687  0291                     	;# 
  1688  0292                     	;# 
  1689  0293                     	;# 
  1690  0298                     	;# 
  1691  0298                     	;# 
  1692  0299                     	;# 
  1693  029A                     	;# 
  1694  0394                     	;# 
  1695  0395                     	;# 
  1696  0396                     	;# 
  1697  0FE4                     	;# 
  1698  0FE5                     	;# 
  1699  0FE6                     	;# 
  1700  0FE7                     	;# 
  1701  0FE8                     	;# 
  1702  0FE9                     	;# 
  1703  0FEA                     	;# 
  1704  0FEB                     	;# 
  1705  0FED                     	;# 
  1706  0FEE                     	;# 
  1707  0FEF                     	;# 
  1708  0000                     	;# 
  1709  0001                     	;# 
  1710  0002                     	;# 
  1711  0003                     	;# 
  1712  0004                     	;# 
  1713  0005                     	;# 
  1714  0006                     	;# 
  1715  0007                     	;# 
  1716  0008                     	;# 
  1717  0009                     	;# 
  1718  000A                     	;# 
  1719  000B                     	;# 
  1720  000C                     	;# 
  1721  000D                     	;# 
  1722  000E                     	;# 
  1723  0010                     	;# 
  1724  0011                     	;# 
  1725  0012                     	;# 
  1726  0015                     	;# 
  1727  0016                     	;# 
  1728  0016                     	;# 
  1729  0017                     	;# 
  1730  0018                     	;# 
  1731  0019                     	;# 
  1732  001A                     	;# 
  1733  001B                     	;# 
  1734  001C                     	;# 
  1735  008C                     	;# 
  1736  008D                     	;# 
  1737  008E                     	;# 
  1738  0090                     	;# 
  1739  0091                     	;# 
  1740  0092                     	;# 
  1741  0095                     	;# 
  1742  0096                     	;# 
  1743  0097                     	;# 
  1744  0099                     	;# 
  1745  009A                     	;# 
  1746  009B                     	;# 
  1747  009B                     	;# 
  1748  009C                     	;# 
  1749  009D                     	;# 
  1750  009E                     	;# 
  1751  010C                     	;# 
  1752  010D                     	;# 
  1753  010E                     	;# 
  1754  0116                     	;# 
  1755  0117                     	;# 
  1756  011D                     	;# 
  1757  018C                     	;# 
  1758  018D                     	;# 
  1759  018E                     	;# 
  1760  0191                     	;# 
  1761  0191                     	;# 
  1762  0192                     	;# 
  1763  0193                     	;# 
  1764  0193                     	;# 
  1765  0194                     	;# 
  1766  0195                     	;# 
  1767  0196                     	;# 
  1768  0197                     	;# 
  1769  0199                     	;# 
  1770  019A                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019C                     	;# 
  1776  019C                     	;# 
  1777  019D                     	;# 
  1778  019E                     	;# 
  1779  019F                     	;# 
  1780  020D                     	;# 
  1781  0210                     	;# 
  1782  0211                     	;# 
  1783  0211                     	;# 
  1784  0212                     	;# 
  1785  0212                     	;# 
  1786  0213                     	;# 
  1787  0213                     	;# 
  1788  0214                     	;# 
  1789  0214                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0216                     	;# 
  1794  0216                     	;# 
  1795  0217                     	;# 
  1796  0217                     	;# 
  1797  0291                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0293                     	;# 
  1801  0298                     	;# 
  1802  0298                     	;# 
  1803  0299                     	;# 
  1804  029A                     	;# 
  1805  0394                     	;# 
  1806  0395                     	;# 
  1807  0396                     	;# 
  1808  0FE4                     	;# 
  1809  0FE5                     	;# 
  1810  0FE6                     	;# 
  1811  0FE7                     	;# 
  1812  0FE8                     	;# 
  1813  0FE9                     	;# 
  1814  0FEA                     	;# 
  1815  0FEB                     	;# 
  1816  0FED                     	;# 
  1817  0FEE                     	;# 
  1818  0FEF                     	;# 
  1819  0000                     	;# 
  1820  0001                     	;# 
  1821  0002                     	;# 
  1822  0003                     	;# 
  1823  0004                     	;# 
  1824  0005                     	;# 
  1825  0006                     	;# 
  1826  0007                     	;# 
  1827  0008                     	;# 
  1828  0009                     	;# 
  1829  000A                     	;# 
  1830  000B                     	;# 
  1831  000C                     	;# 
  1832  000D                     	;# 
  1833  000E                     	;# 
  1834  0010                     	;# 
  1835  0011                     	;# 
  1836  0012                     	;# 
  1837  0015                     	;# 
  1838  0016                     	;# 
  1839  0016                     	;# 
  1840  0017                     	;# 
  1841  0018                     	;# 
  1842  0019                     	;# 
  1843  001A                     	;# 
  1844  001B                     	;# 
  1845  001C                     	;# 
  1846  008C                     	;# 
  1847  008D                     	;# 
  1848  008E                     	;# 
  1849  0090                     	;# 
  1850  0091                     	;# 
  1851  0092                     	;# 
  1852  0095                     	;# 
  1853  0096                     	;# 
  1854  0097                     	;# 
  1855  0099                     	;# 
  1856  009A                     	;# 
  1857  009B                     	;# 
  1858  009B                     	;# 
  1859  009C                     	;# 
  1860  009D                     	;# 
  1861  009E                     	;# 
  1862  010C                     	;# 
  1863  010D                     	;# 
  1864  010E                     	;# 
  1865  0116                     	;# 
  1866  0117                     	;# 
  1867  011D                     	;# 
  1868  018C                     	;# 
  1869  018D                     	;# 
  1870  018E                     	;# 
  1871  0191                     	;# 
  1872  0191                     	;# 
  1873  0192                     	;# 
  1874  0193                     	;# 
  1875  0193                     	;# 
  1876  0194                     	;# 
  1877  0195                     	;# 
  1878  0196                     	;# 
  1879  0197                     	;# 
  1880  0199                     	;# 
  1881  019A                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019C                     	;# 
  1887  019C                     	;# 
  1888  019D                     	;# 
  1889  019E                     	;# 
  1890  019F                     	;# 
  1891  020D                     	;# 
  1892  0210                     	;# 
  1893  0211                     	;# 
  1894  0211                     	;# 
  1895  0212                     	;# 
  1896  0212                     	;# 
  1897  0213                     	;# 
  1898  0213                     	;# 
  1899  0214                     	;# 
  1900  0214                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0216                     	;# 
  1905  0216                     	;# 
  1906  0217                     	;# 
  1907  0217                     	;# 
  1908  0291                     	;# 
  1909  0291                     	;# 
  1910  0292                     	;# 
  1911  0293                     	;# 
  1912  0298                     	;# 
  1913  0298                     	;# 
  1914  0299                     	;# 
  1915  029A                     	;# 
  1916  0394                     	;# 
  1917  0395                     	;# 
  1918  0396                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930  0000                     	;# 
  1931  0001                     	;# 
  1932  0002                     	;# 
  1933  0003                     	;# 
  1934  0004                     	;# 
  1935  0005                     	;# 
  1936  0006                     	;# 
  1937  0007                     	;# 
  1938  0008                     	;# 
  1939  0009                     	;# 
  1940  000A                     	;# 
  1941  000B                     	;# 
  1942  000C                     	;# 
  1943  000D                     	;# 
  1944  000E                     	;# 
  1945  0010                     	;# 
  1946  0011                     	;# 
  1947  0012                     	;# 
  1948  0015                     	;# 
  1949  0016                     	;# 
  1950  0016                     	;# 
  1951  0017                     	;# 
  1952  0018                     	;# 
  1953  0019                     	;# 
  1954  001A                     	;# 
  1955  001B                     	;# 
  1956  001C                     	;# 
  1957  008C                     	;# 
  1958  008D                     	;# 
  1959  008E                     	;# 
  1960  0090                     	;# 
  1961  0091                     	;# 
  1962  0092                     	;# 
  1963  0095                     	;# 
  1964  0096                     	;# 
  1965  0097                     	;# 
  1966  0099                     	;# 
  1967  009A                     	;# 
  1968  009B                     	;# 
  1969  009B                     	;# 
  1970  009C                     	;# 
  1971  009D                     	;# 
  1972  009E                     	;# 
  1973  010C                     	;# 
  1974  010D                     	;# 
  1975  010E                     	;# 
  1976  0116                     	;# 
  1977  0117                     	;# 
  1978  011D                     	;# 
  1979  018C                     	;# 
  1980  018D                     	;# 
  1981  018E                     	;# 
  1982  0191                     	;# 
  1983  0191                     	;# 
  1984  0192                     	;# 
  1985  0193                     	;# 
  1986  0193                     	;# 
  1987  0194                     	;# 
  1988  0195                     	;# 
  1989  0196                     	;# 
  1990  0197                     	;# 
  1991  0199                     	;# 
  1992  019A                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019C                     	;# 
  1998  019C                     	;# 
  1999  019D                     	;# 
  2000  019E                     	;# 
  2001  019F                     	;# 
  2002  020D                     	;# 
  2003  0210                     	;# 
  2004  0211                     	;# 
  2005  0211                     	;# 
  2006  0212                     	;# 
  2007  0212                     	;# 
  2008  0213                     	;# 
  2009  0213                     	;# 
  2010  0214                     	;# 
  2011  0214                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0216                     	;# 
  2016  0216                     	;# 
  2017  0217                     	;# 
  2018  0217                     	;# 
  2019  0291                     	;# 
  2020  0291                     	;# 
  2021  0292                     	;# 
  2022  0293                     	;# 
  2023  0298                     	;# 
  2024  0298                     	;# 
  2025  0299                     	;# 
  2026  029A                     	;# 
  2027  0394                     	;# 
  2028  0395                     	;# 
  2029  0396                     	;# 
  2030  0FE4                     	;# 
  2031  0FE5                     	;# 
  2032  0FE6                     	;# 
  2033  0FE7                     	;# 
  2034  0FE8                     	;# 
  2035  0FE9                     	;# 
  2036  0FEA                     	;# 
  2037  0FEB                     	;# 
  2038  0FED                     	;# 
  2039  0FEE                     	;# 
  2040  0FEF                     	;# 
  2041  0000                     	;# 
  2042  0001                     	;# 
  2043  0002                     	;# 
  2044  0003                     	;# 
  2045  0004                     	;# 
  2046  0005                     	;# 
  2047  0006                     	;# 
  2048  0007                     	;# 
  2049  0008                     	;# 
  2050  0009                     	;# 
  2051  000A                     	;# 
  2052  000B                     	;# 
  2053  000C                     	;# 
  2054  000D                     	;# 
  2055  000E                     	;# 
  2056  0010                     	;# 
  2057  0011                     	;# 
  2058  0012                     	;# 
  2059  0015                     	;# 
  2060  0016                     	;# 
  2061  0016                     	;# 
  2062  0017                     	;# 
  2063  0018                     	;# 
  2064  0019                     	;# 
  2065  001A                     	;# 
  2066  001B                     	;# 
  2067  001C                     	;# 
  2068  008C                     	;# 
  2069  008D                     	;# 
  2070  008E                     	;# 
  2071  0090                     	;# 
  2072  0091                     	;# 
  2073  0092                     	;# 
  2074  0095                     	;# 
  2075  0096                     	;# 
  2076  0097                     	;# 
  2077  0099                     	;# 
  2078  009A                     	;# 
  2079  009B                     	;# 
  2080  009B                     	;# 
  2081  009C                     	;# 
  2082  009D                     	;# 
  2083  009E                     	;# 
  2084  010C                     	;# 
  2085  010D                     	;# 
  2086  010E                     	;# 
  2087  0116                     	;# 
  2088  0117                     	;# 
  2089  011D                     	;# 
  2090  018C                     	;# 
  2091  018D                     	;# 
  2092  018E                     	;# 
  2093  0191                     	;# 
  2094  0191                     	;# 
  2095  0192                     	;# 
  2096  0193                     	;# 
  2097  0193                     	;# 
  2098  0194                     	;# 
  2099  0195                     	;# 
  2100  0196                     	;# 
  2101  0197                     	;# 
  2102  0199                     	;# 
  2103  019A                     	;# 
  2104  019B                     	;# 
  2105  019B                     	;# 
  2106  019B                     	;# 
  2107  019B                     	;# 
  2108  019C                     	;# 
  2109  019C                     	;# 
  2110  019D                     	;# 
  2111  019E                     	;# 
  2112  019F                     	;# 
  2113  020D                     	;# 
  2114  0210                     	;# 
  2115  0211                     	;# 
  2116  0211                     	;# 
  2117  0212                     	;# 
  2118  0212                     	;# 
  2119  0213                     	;# 
  2120  0213                     	;# 
  2121  0214                     	;# 
  2122  0214                     	;# 
  2123  0215                     	;# 
  2124  0215                     	;# 
  2125  0215                     	;# 
  2126  0216                     	;# 
  2127  0216                     	;# 
  2128  0217                     	;# 
  2129  0217                     	;# 
  2130  0291                     	;# 
  2131  0291                     	;# 
  2132  0292                     	;# 
  2133  0293                     	;# 
  2134  0298                     	;# 
  2135  0298                     	;# 
  2136  0299                     	;# 
  2137  029A                     	;# 
  2138  0394                     	;# 
  2139  0395                     	;# 
  2140  0396                     	;# 
  2141  0FE4                     	;# 
  2142  0FE5                     	;# 
  2143  0FE6                     	;# 
  2144  0FE7                     	;# 
  2145  0FE8                     	;# 
  2146  0FE9                     	;# 
  2147  0FEA                     	;# 
  2148  0FEB                     	;# 
  2149  0FED                     	;# 
  2150  0FEE                     	;# 
  2151  0FEF                     	;# 
  2152                           
  2153                           	psect	idataBANK4
  2154  1EBB                     __pidataBANK4:	
  2155                           
  2156                           ;initializer for __product
  2157  1EBB  3463               	retlw	99
  2158  1EBC  3402               	retlw	2
  2159  1EBD  3400               	retlw	0
  2160  1EBE  3400               	retlw	0
  2161  1EBF  3400               	retlw	0
  2162  1EC0  3400               	retlw	0
  2163  1EC1  3400               	retlw	0
  2164  1EC2  3400               	retlw	0
  2165  1EC3  3400               	retlw	0
  2166  1EC4  3400               	retlw	0
  2167  1EC5  3400               	retlw	0
  2168  1EC6  3400               	retlw	0
  2169  1EC7  34FF               	retlw	255
  2170  1EC8  34FF               	retlw	255
  2171  1EC9  34FF               	retlw	255
  2172  1ECA  3400               	retlw	0
  2173  1ECB  3400               	retlw	0
  2174  1ECC  3400               	retlw	0
  2175  1ECD  3400               	retlw	0
  2176  1ECE  3400               	retlw	0
  2177  1ECF  3400               	retlw	0
  2178  1ED0  3400               	retlw	0
  2179  1ED1  3400               	retlw	0
  2180  1ED2  3400               	retlw	0
  2181  1ED3  3400               	retlw	0
  2182  1ED4  3400               	retlw	0
  2183  1ED5  3400               	retlw	0
  2184  1ED6  3400               	retlw	0
  2185  1ED7  3400               	retlw	0
  2186  1ED8  3400               	retlw	0
  2187  1ED9  3400               	retlw	0
  2188  1EDA  3400               	retlw	0
  2189                           
  2190                           	psect	stringtext
  2191  1000                     __pstringtext:	
  2192  1000                     _CC2500_registers_address:	
  2193  1000  3403               	retlw	3
  2194  1001  3416               	retlw	22
  2195  1002  3417               	retlw	23
  2196  1003  341E               	retlw	30
  2197  1004  341F               	retlw	31
  2198  1005  3420               	retlw	32
  2199  1006  342A               	retlw	42
  2200  1007  342B               	retlw	43
  2201  1008  340B               	retlw	11
  2202  1009  340C               	retlw	12
  2203  100A  340D               	retlw	13
  2204  100B  340E               	retlw	14
  2205  100C  340F               	retlw	15
  2206  100D  3410               	retlw	16
  2207  100E  3411               	retlw	17
  2208  100F  3412               	retlw	18
  2209  1010  3413               	retlw	19
  2210  1011  3414               	retlw	20
  2211  1012  340A               	retlw	10
  2212  1013  3415               	retlw	21
  2213  1014  3421               	retlw	33
  2214  1015  3422               	retlw	34
  2215  1016  3418               	retlw	24
  2216  1017  3419               	retlw	25
  2217  1018  341A               	retlw	26
  2218  1019  341B               	retlw	27
  2219  101A  341C               	retlw	28
  2220  101B  341D               	retlw	29
  2221  101C  3423               	retlw	35
  2222  101D  3424               	retlw	36
  2223  101E  3425               	retlw	37
  2224  101F  3426               	retlw	38
  2225  1020  3429               	retlw	41
  2226  1021  342C               	retlw	44
  2227  1022  342D               	retlw	45
  2228  1023  342E               	retlw	46
  2229  1024  3400               	retlw	0
  2230  1025  3401               	retlw	1
  2231  1026  3402               	retlw	2
  2232  1027  3407               	retlw	7
  2233  1028  3408               	retlw	8
  2234  1029  3409               	retlw	9
  2235  102A  3406               	retlw	6
  2236  102B  3404               	retlw	4
  2237  102C  3405               	retlw	5
  2238  102D  3427               	retlw	39
  2239  102E  3428               	retlw	40
  2240  102F                     __end_of_CC2500_registers_address:	
  2241  102F                     _CC2500_rfSettings:	
  2242  102F  3407               	retlw	7
  2243  1030  3407               	retlw	7
  2244  1031  3430               	retlw	48
  2245  1032  3487               	retlw	135
  2246  1033  346B               	retlw	107
  2247  1034  34F8               	retlw	248
  2248  1035  347F               	retlw	127
  2249  1036  343F               	retlw	63
  2250  1037  3409               	retlw	9
  2251  1038  3400               	retlw	0
  2252  1039  345C               	retlw	92
  2253  103A  34A7               	retlw	167
  2254  103B  3462               	retlw	98
  2255  103C  3486               	retlw	134
  2256  103D  3483               	retlw	131
  2257  103E  3403               	retlw	3
  2258  103F  3422               	retlw	34
  2259  1040  34F8               	retlw	248
  2260  1041  3400               	retlw	0
  2261  1042  3444               	retlw	68
  2262  1043  34B6               	retlw	182
  2263  1044  3410               	retlw	16
  2264  1045  3418               	retlw	24
  2265  1046  341D               	retlw	29
  2266  1047  341C               	retlw	28
  2267  1048  34C7               	retlw	199
  2268  1049  3400               	retlw	0
  2269  104A  34B2               	retlw	178
  2270  104B  34EA               	retlw	234
  2271  104C  340A               	retlw	10
  2272  104D  3400               	retlw	0
  2273  104E  3411               	retlw	17
  2274  104F  3459               	retlw	89
  2275  1050  3488               	retlw	136
  2276  1051  3431               	retlw	49
  2277  1052  340B               	retlw	11
  2278  1053  342F               	retlw	47
  2279  1054  342E               	retlw	46
  2280  1055  3406               	retlw	6
  2281  1056  3404               	retlw	4
  2282  1057  3405               	retlw	5
  2283  1058  3400               	retlw	0
  2284  1059  3430               	retlw	48
  2285  105A  34D3               	retlw	211
  2286  105B  3491               	retlw	145
  2287  105C  3441               	retlw	65
  2288  105D  3400               	retlw	0
  2289  105E                     __end_of_CC2500_rfSettings:	
  2290  105E                     _CC2500_patable_vaule:	
  2291  105E  34FE               	retlw	254
  2292  105F  34FE               	retlw	254
  2293  1060  34FE               	retlw	254
  2294  1061  34FE               	retlw	254
  2295  1062  34FE               	retlw	254
  2296  1063  34FE               	retlw	254
  2297  1064  34FE               	retlw	254
  2298  1065  34FE               	retlw	254
  2299  1066                     __end_of_CC2500_patable_vaule:	
  2300                           
  2301                           	psect	nvBANK0
  2302  006E                     __pnvBANK0:	
  2303  006E                     _product:	
  2304  006E                     	ds	1
  2305  000C                     _PORTA	set	12
  2306  000D                     _PORTB	set	13
  2307  000E                     _PORTC	set	14
  2308  0018                     _T1CON	set	24
  2309  0017                     _TMR1H	set	23
  2310  0016                     _TMR1L	set	22
  2311  005F                     _GIE	set	95
  2312  005B                     _IOCIE	set	91
  2313  0058                     _IOCIF	set	88
  2314  005E                     _PEIE	set	94
  2315  0060                     _RA0	set	96
  2316  0064                     _RA4	set	100
  2317  0066                     _RA6	set	102
  2318  0067                     _RA7	set	103
  2319  0068                     _RB0	set	104
  2320  0069                     _RB1	set	105
  2321  006A                     _RB2	set	106
  2322  006B                     _RB3	set	107
  2323  006D                     _RB5	set	109
  2324  0070                     _RC0	set	112
  2325  0071                     _RC1	set	113
  2326  0073                     _RC3	set	115
  2327  0074                     _RC4	set	116
  2328  0075                     _RC5	set	117
  2329  0088                     _TMR1IF	set	136
  2330  009D                     _ADCON0	set	157
  2331  009E                     _ADCON1	set	158
  2332  009C                     _ADRESH	set	156
  2333  009B                     _ADRESL	set	155
  2334  0099                     _OSCCON	set	153
  2335  008C                     _TRISA	set	140
  2336  008D                     _TRISB	set	141
  2337  008E                     _TRISC	set	142
  2338  0097                     _WDTCON	set	151
  2339  04E9                     _GO_nDONE	set	1257
  2340  0488                     _TMR1IE	set	1160
  2341  0117                     _FVRCON	set	279
  2342  010C                     _LATA	set	268
  2343  010D                     _LATB	set	269
  2344  010E                     _LATC	set	270
  2345  018C                     _ANSELA	set	396
  2346  018D                     _ANSELB	set	397
  2347  018E                     _ANSELC	set	398
  2348  0192                     _PMADRH	set	402
  2349  0191                     _PMADRL	set	401
  2350  0196                     _PMCON2	set	406
  2351  0194                     _PMDATH	set	404
  2352  0193                     _PMDATL	set	403
  2353  0CAE                     _CFGS	set	3246
  2354  0CAC                     _FREE	set	3244
  2355  0CAD                     _LWLO	set	3245
  2356  0CA8                     _RD	set	3240
  2357  0CA9                     _WR	set	3241
  2358  0CAA                     _WREN	set	3242
  2359  1069                     _WPUB1	set	4201
  2360  106A                     _WPUB2	set	4202
  2361  0396                     _IOCBF	set	918
  2362  0395                     _IOCBN	set	917
  2363  0394                     _IOCBP	set	916
  2364  1CB2                     _IOCBF2	set	7346
  2365                           
  2366                           ; #config settings
  2367  0000                     
  2368                           	psect	cinit
  2369  0015                     start_initialization:	
  2370  0015                     __initialization:	
  2371                           
  2372                           ; Clear objects allocated to BITCOMMON
  2373  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2374                           
  2375                           ; Clear objects allocated to COMMON
  2376  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2377  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2378  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2379  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2380  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2381                           
  2382                           ; Clear objects allocated to BANK0
  2383  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK1
  2386  001C  30A0               	movlw	low __pbssBANK1
  2387  001D  0084               	movwf	4
  2388  001E  3000               	movlw	high __pbssBANK1
  2389  001F  0085               	movwf	5
  2390  0020  3049               	movlw	73
  2391  0021  319B  23B8  3180   	fcall	clear_ram0
  2392                           
  2393                           ; Clear objects allocated to BANK2
  2394  0024  3020               	movlw	low __pbssBANK2
  2395  0025  0084               	movwf	4
  2396  0026  3001               	movlw	high __pbssBANK2
  2397  0027  0085               	movwf	5
  2398  0028  304F               	movlw	79
  2399  0029  319B  23B8  3180   	fcall	clear_ram0
  2400                           
  2401                           ; Clear objects allocated to BANK3
  2402  002C  30A0               	movlw	low __pbssBANK3
  2403  002D  0084               	movwf	4
  2404  002E  3001               	movlw	high __pbssBANK3
  2405  002F  0085               	movwf	5
  2406  0030  3048               	movlw	72
  2407  0031  319B  23B8  3180   	fcall	clear_ram0
  2408                           
  2409                           ; Initialize objects allocated to BANK4
  2410  0034  30BB               	movlw	low __pidataBANK4
  2411  0035  0084               	movwf	4
  2412  0036  309E               	movlw	(high __pidataBANK4)| (0+128)
  2413  0037  0085               	movwf	5
  2414  0038  3020               	movlw	low __pdataBANK4
  2415  0039  0086               	movwf	6
  2416  003A  3002               	movlw	high __pdataBANK4
  2417  003B  0087               	movwf	7
  2418  003C  3020               	movlw	32
  2419  003D  319B  23B2         	fcall	init_ram
  2420  003F                     end_of_initialization:	
  2421                           ;End of C runtime variable initialization code
  2422                           
  2423  003F                     __end_of__initialization:	
  2424  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2425  0040  0020               	movlb	0
  2426  0041  3196  2EEC         	ljmp	_main	;jump to C main() function
  2427                           
  2428                           	psect	bitbssCOMMON
  2429  03E8                     __pbitbssCOMMON:	
  2430  03E8                     _Receive_OK:	
  2431  03E8                     	ds	1
  2432  03E9                     _Transceive_OK:	
  2433  03E9                     	ds	1
  2434                           
  2435                           	psect	bssCOMMON
  2436  0078                     __pbssCOMMON:	
  2437  0078                     _DelayOff:	
  2438  0078                     	ds	1
  2439  0079                     _DimmerLightsIntr:	
  2440  0079                     	ds	1
  2441  007A                     _LED:	
  2442  007A                     	ds	1
  2443  007B                     _SPI0Buffer:	
  2444  007B                     	ds	1
  2445  007C                     _Sw:	
  2446  007C                     	ds	1
  2447                           
  2448                           	psect	bssBANK0
  2449  006F                     __pbssBANK0:	
  2450  006F                     _DimmerLights:	
  2451  006F                     	ds	1
  2452                           
  2453                           	psect	bssBANK1
  2454  00A0                     __pbssBANK1:	
  2455  00A0                     _myMain:	
  2456  00A0                     	ds	14
  2457  00AE                     _Buz1:	
  2458  00AE                     	ds	12
  2459  00BA                     _RF1:	
  2460  00BA                     	ds	12
  2461  00C6                     _Dimmer:	
  2462  00C6                     	ds	3
  2463  00C9                     _RF_Count:	
  2464  00C9                     	ds	2
  2465  00CB                     _WDT:	
  2466  00CB                     	ds	2
  2467  00CD                     _CRC:	
  2468  00CD                     	ds	1
  2469  00CE                     _DimmerLights11:	
  2470  00CE                     	ds	1
  2471  00CF                     _DimmerLightsIntrIOC:	
  2472  00CF                     	ds	1
  2473  00D0                     _RSSI:	
  2474  00D0                     	ds	1
  2475  00D1                     _Rx_Length:	
  2476  00D1                     	ds	1
  2477  00D2                     _SwDetect:	
  2478  00D2                     	ds	1
  2479  00D3                     _Tx_Length:	
  2480  00D3                     	ds	1
  2481  00D4                     _r_address:	
  2482  00D4                     	ds	1
  2483  00D5                     _r_data:	
  2484  00D5                     	ds	1
  2485  00D6                     _s_data:	
  2486  00D6                     	ds	1
  2487  00D7                     _Temp:	
  2488  00D7                     	ds	18
  2489                           
  2490                           	psect	bssBANK2
  2491  0120                     __pbssBANK2:	
  2492  0120                     _RF_Data:	
  2493  0120                     	ds	30
  2494  013E                     _Timer1:	
  2495  013E                     	ds	3
  2496  0141                     _Load:	
  2497  0141                     	ds	46
  2498                           
  2499                           	psect	bssBANK3
  2500  01A0                     __pbssBANK3:	
  2501  01A0                     _Memory:	
  2502  01A0                     	ds	37
  2503  01C5                     _DimmerLights1:	
  2504  01C5                     	ds	17
  2505  01D6                     _Sw1:	
  2506  01D6                     	ds	9
  2507  01DF                     _DlySw1:	
  2508  01DF                     	ds	5
  2509  01E4                     _VarErrLED:	
  2510  01E4                     	ds	4
  2511                           
  2512                           	psect	dataBANK4
  2513  0220                     __pdataBANK4:	
  2514  0220                     __product:	
  2515  0220                     	ds	32
  2516                           
  2517                           	psect	clrtext
  2518  1BB8                     clear_ram0:	
  2519                           ;	Called with FSR0 containing the base address, and
  2520                           ;	WREG with the size to clear
  2521                           
  2522  1BB8  0064               	clrwdt	;clear the watchdog before getting into this loop
  2523  1BB9                     clrloop0:	
  2524  1BB9  0180               	clrf	0	;clear RAM location pointed to by FSR
  2525  1BBA  3101               	addfsr 0,1
  2526  1BBB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2527  1BBC  2BB9               	goto	clrloop0	;have we reached the end yet?
  2528  1BBD  3400               	retlw	0	;all done for this memory range, return
  2529                           
  2530                           	psect	inittext
  2531  1BB2                     init_ram:	
  2532  1BB2  00FE               	movwf	126
  2533  1BB3                     initloop:	
  2534  1BB3  0012               	moviw fsr0++
  2535  1BB4  001E               	movwi fsr1++
  2536  1BB5  0BFE               	decfsz	126,f
  2537  1BB6  2BB3               	goto	initloop
  2538  1BB7  3400               	retlw	0
  2539                           
  2540                           	psect	cstackBANK1
  2541  00E9                     __pcstackBANK1:	
  2542  00E9                     setRF_Main@loop_f:	
  2543                           
  2544                           ; 1 bytes @ 0x0
  2545  00E9                     	ds	1
  2546  00EA                     setRF_Main@Receive_OK:	
  2547                           
  2548                           ; 1 bytes @ 0x1
  2549  00EA                     	ds	1
  2550  00EB                     setRF_Main@error:	
  2551                           
  2552                           ; 1 bytes @ 0x2
  2553  00EB                     	ds	1
  2554  00EC                     ?_main:	
  2555  00EC                     main@argc:	
  2556                           ; 2 bytes @ 0x3
  2557                           
  2558                           
  2559                           ; 2 bytes @ 0x3
  2560  00EC                     	ds	2
  2561  00EE                     main@argv:	
  2562                           
  2563                           ; 2 bytes @ 0x5
  2564  00EE                     	ds	2
  2565                           
  2566                           	psect	cstackCOMMON
  2567  0070                     __pcstackCOMMON:	
  2568  0070                     ?_Timeout_Counter:	
  2569  0070                     ?_set_TimeoutCleared:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_CC2500_WriteByte:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_CC2500_WriteCommand:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_CC2500_ReadStatus:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_CC2500_ReadByte:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_CC2500_PowerRST:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_CC2500_InitSetREG:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_InitPATable:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_ClearTXFIFO:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_ClearRXFIFO:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_FrequencyCabr:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_SIDLEMode:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_DlyOff_Initialization:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_DlyOff_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setDimmerLights_ErrorClose:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setDimmerLights_Initialization:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setDimmerLights_Main:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setDimmerLights_Line:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setTxData:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setLED_Initialization:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setLED_Main:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_Fosc_Set:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_IO_Set:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_TMR1_Set:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_ADC_Set:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_IOC_Set:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_WDT_Set:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_IOC_ISR:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_TMR1_ISR:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_Flash_Memory_Write:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_Flash_Memory_Modify:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_WDT_Clearing:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_myMain_Initialization:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_Temp_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_Load_Initialization:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Switch_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_RF_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_getLoad_AD:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_getTemp_AD:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_my_MainTimer:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Temp_Main:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Load_Main:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Switch_Main:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_RF_Main:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Exception_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setLoad_AH_AL_Restore:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setTemp_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setTemp_Main:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setRF_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_setRF_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_RF_RxDisable:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_getRxData:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setLog_Code:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setControl_Lights_Table:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setRFSW_Control:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRFSW_AdjControl:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setRF_DimmerValue:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setSw_Initialization:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setSw_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Buzzer_Initialization:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Buzzer_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_CC2500_TxData:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_CC2500_RxData:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_CC2500_PowerOnInitial:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_DelayOffPointSelect:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayOff_Initialization:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DelayOff_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DimmerIntrIOCPointSelect:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ??_DimmerIntrIOCPointSelect:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_DimmerIntrPointSelect:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ??_DimmerIntrPointSelect:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setDimmerLights_IntrControl:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DimmerLightsPointSelect:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerLights_Initialization:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerLights_Main:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setDimmerLights_SwOn:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setDimmerLights_SwOff:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_AdjControl:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_AdjRF:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_LedPointSelect:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LED_Initialization:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_LED_Main:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_Mcu_Initialization:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_ISR:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_setDimmerReClock:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_Flash_Memory_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Main:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Flash_Memory_Unlock:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_Flash_Memory_Erasing:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setMemory_Modify:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setMemory_LoopSave:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_WDT_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_setRF_Learn:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_TouchPower:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_SwPointSelect:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_DelayTimejudge:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_getMain_All_Error_Status:	
  2861                           ; 1 bytes @ 0x0
  2862                           
  2863  0070                     ?_getLoad_OK:	
  2864                           ; 1 bytes @ 0x0
  2865                           
  2866  0070                     ?_getMain_LightsStatus:	
  2867                           ; 1 bytes @ 0x0
  2868                           
  2869  0070                     ?_setPercentValue:	
  2870                           ; 1 bytes @ 0x0
  2871                           
  2872  0070                     ?_getPercentValue:	
  2873                           ; 1 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Read:	
  2876                           ; 1 bytes @ 0x0
  2877                           
  2878  0070                     ?_getRF_KeyStatus:	
  2879                           ; 1 bytes @ 0x0
  2880                           
  2881  0070                     ?_getSw_KeyStatus:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_getDelayOff_GO:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getDimmerLights_Status:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getAll_DimmerLights_AdjGO:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmer_LoadOK:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getDimmerLights_Line:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getMain_Lights_Count:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getMain_LoadOK:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     getAll_DimmerLights_AdjGO@sw:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     getSw_KeyStatus@sw:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911                           
  2912                           ; 1 bytes @ 0x0
  2913  0070                     	ds	1
  2914  0071                     DimmerIntrIOCPointSelect@lights:	
  2915  0071                     DimmerIntrPointSelect@lights:	
  2916                           ; 1 bytes @ 0x1
  2917                           
  2918                           
  2919                           ; 1 bytes @ 0x1
  2920  0071                     	ds	1
  2921  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2922  0072                     ??_setDimmerLights_IntrControl:	
  2923                           ; 0 bytes @ 0x2
  2924                           
  2925  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2926                           ; 0 bytes @ 0x2
  2927                           
  2928                           
  2929                           ; 1 bytes @ 0x2
  2930  0072                     	ds	1
  2931  0073                     ??_IOC_ISR:	
  2932  0073                     ??_setDimmerReClock:	
  2933                           ; 0 bytes @ 0x3
  2934                           
  2935                           
  2936                           ; 0 bytes @ 0x3
  2937  0073                     	ds	3
  2938  0076                     setDimmerLights_IntrControl@lights:	
  2939                           
  2940                           ; 1 bytes @ 0x6
  2941  0076                     	ds	1
  2942  0077                     ??_TMR1_ISR:	
  2943  0077                     ??_ISR:	
  2944                           ; 0 bytes @ 0x7
  2945                           
  2946                           
  2947                           ; 0 bytes @ 0x7
  2948  0077                     	ds	1
  2949                           
  2950                           	psect	cstackBANK0
  2951  0020                     __pcstackBANK0:	
  2952  0020                     ??_Timeout_Counter:	
  2953  0020                     ??_set_TimeoutCleared:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0020                     ??_CC2500_WriteByte:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0020                     ??_CC2500_ReadByte:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0020                     ?_DelayTime_1us:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0020                     ??_getMain_All_Error_Status:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0020                     ??_getLoad_OK:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0020                     ??_setDimmerLights_Line:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0020                     ?_setRF_DimmerLights:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0020                     ??_setTxData:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0020                     ??_Fosc_Set:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_IO_Set:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_TMR1_Set:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ??_ADC_Set:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_IOC_Set:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_WDT_Set:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_Flash_Memory_Read:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ?_setMemory_Data:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_Flash_Memory_Write:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_WDT_Clearing:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_myMain_Initialization:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_Temp_Initialization:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_setLoad_AH_AL_Restore:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_setTemp_Initialization:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_setRF_Initialization:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_getRF_KeyStatus:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_getSw_KeyStatus:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_Buzzer_Initialization:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_Buzzer_Main:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_DelayOffPointSelect:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_DimmerLightsPointSelect:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_getAll_DimmerLights_AdjGO:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_getDimmer_LoadOK:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_getDimmerLights_Line:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_LedPointSelect:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_Flash_Memory_Unlock:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_Flash_Memory_Erasing:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_setMemory_Modify:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_setMemory_LoopSave:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_WDT_Main:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_getMain_Lights_Count:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_setRF_Learn:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_TouchPower:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_SwPointSelect:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ?___bmul:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ?_getBuz_GO:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0020                     ?_getAD:	
  3089                           ; 2 bytes @ 0x0
  3090                           
  3091  0020                     ?___awdiv:	
  3092                           ; 2 bytes @ 0x0
  3093                           
  3094  0020                     ?___lwdiv:	
  3095                           ; 2 bytes @ 0x0
  3096                           
  3097  0020                     ?___ftpack:	
  3098                           ; 2 bytes @ 0x0
  3099                           
  3100  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3101                           ; 3 bytes @ 0x0
  3102                           
  3103  0020                     getDimmer_LoadOK@status:	
  3104                           ; 1 bytes @ 0x0
  3105                           
  3106  0020                     setDimmerLights_Line@lights:	
  3107                           ; 1 bytes @ 0x0
  3108                           
  3109  0020                     getDimmerLights_Line@line:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0020                     getAD@adcon1:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0020                     setMemory_Data@data:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0020                     getMain_Lights_Count@count:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0020                     getLoad_OK@ok:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0020                     setRF_DimmerLights@on:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0020                     ___bmul@multiplicand:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0020                     DelayTime_1us@count:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0020                     ___awdiv@divisor:	
  3134                           ; 2 bytes @ 0x0
  3135                           
  3136  0020                     ___lwdiv@divisor:	
  3137                           ; 2 bytes @ 0x0
  3138                           
  3139  0020                     ___ftpack@arg:	
  3140                           ; 2 bytes @ 0x0
  3141                           
  3142                           
  3143                           ; 3 bytes @ 0x0
  3144  0020                     	ds	1
  3145  0021                     ??_setRF_DimmerLights:	
  3146  0021                     ??_setMemory_Data:	
  3147                           ; 0 bytes @ 0x1
  3148                           
  3149  0021                     ??_RF_Initialization:	
  3150                           ; 0 bytes @ 0x1
  3151                           
  3152  0021                     ??_Mcu_Initialization:	
  3153                           ; 0 bytes @ 0x1
  3154                           
  3155  0021                     ??_getMain_LoadOK:	
  3156                           ; 0 bytes @ 0x1
  3157                           
  3158  0021                     ??___bmul:	
  3159                           ; 0 bytes @ 0x1
  3160                           
  3161  0021                     CC2500_WriteByte@loop_a:	
  3162                           ; 0 bytes @ 0x1
  3163                           
  3164  0021                     CC2500_ReadByte@loop_b:	
  3165                           ; 1 bytes @ 0x1
  3166                           
  3167  0021                     DelayOffPointSelect@sw:	
  3168                           ; 1 bytes @ 0x1
  3169                           
  3170  0021                     DimmerLightsPointSelect@lights:	
  3171                           ; 1 bytes @ 0x1
  3172                           
  3173  0021                     LedPointSelect@led:	
  3174                           ; 1 bytes @ 0x1
  3175                           
  3176  0021                     Flash_Memory_Read@i:	
  3177                           ; 1 bytes @ 0x1
  3178                           
  3179  0021                     Flash_Memory_Write@i:	
  3180                           ; 1 bytes @ 0x1
  3181                           
  3182  0021                     setMemory_Modify@command:	
  3183                           ; 1 bytes @ 0x1
  3184                           
  3185  0021                     setMemory_LoopSave@command:	
  3186                           ; 1 bytes @ 0x1
  3187                           
  3188  0021                     getMain_Lights_Count@status2:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  0021                     setLoad_AH_AL_Restore@i:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  0021                     setRF_Learn@command:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  0021                     getRF_KeyStatus@key:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  0021                     SwPointSelect@sw:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203  0021                     getSw_KeyStatus@status:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  0021                     _getMain_All_Error_Status$3401:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209                           
  3210                           ; 2 bytes @ 0x1
  3211  0021                     	ds	1
  3212  0022                     ??_CC2500_WriteCommand:	
  3213  0022                     ??_CC2500_ReadStatus:	
  3214                           ; 0 bytes @ 0x2
  3215                           
  3216  0022                     ??_DelayTime_1us:	
  3217                           ; 0 bytes @ 0x2
  3218                           
  3219  0022                     ?_CC2500_WriteREG:	
  3220                           ; 0 bytes @ 0x2
  3221                           
  3222  0022                     ??_DlyOff_Initialization:	
  3223                           ; 0 bytes @ 0x2
  3224                           
  3225  0022                     ??_setDimmerLights_Initialization:	
  3226                           ; 0 bytes @ 0x2
  3227                           
  3228  0022                     ?_setLED:	
  3229                           ; 0 bytes @ 0x2
  3230                           
  3231  0022                     ??_setLED_Main:	
  3232                           ; 0 bytes @ 0x2
  3233                           
  3234  0022                     ??_Load_Initialization:	
  3235                           ; 0 bytes @ 0x2
  3236                           
  3237  0022                     ??_getBuz_GO:	
  3238                           ; 0 bytes @ 0x2
  3239                           
  3240  0022                     ??_getDelayOff_GO:	
  3241                           ; 0 bytes @ 0x2
  3242                           
  3243  0022                     ??_getDimmerLights_Status:	
  3244                           ; 0 bytes @ 0x2
  3245                           
  3246  0022                     ??_setDimmerLights_AdjControl:	
  3247                           ; 0 bytes @ 0x2
  3248                           
  3249  0022                     CC2500_WriteREG@value:	
  3250                           ; 0 bytes @ 0x2
  3251                           
  3252  0022                     DlyOff_Initialization@sw:	
  3253                           ; 1 bytes @ 0x2
  3254                           
  3255  0022                     getDelayOff_GO@sw:	
  3256                           ; 1 bytes @ 0x2
  3257                           
  3258  0022                     getDimmerLights_Status@lights:	
  3259                           ; 1 bytes @ 0x2
  3260                           
  3261  0022                     setLED@command:	
  3262                           ; 1 bytes @ 0x2
  3263                           
  3264  0022                     Flash_Memory_Read@address:	
  3265                           ; 1 bytes @ 0x2
  3266                           
  3267  0022                     setMemory_Data@address:	
  3268                           ; 1 bytes @ 0x2
  3269                           
  3270  0022                     getMain_Lights_Count@status3:	
  3271                           ; 1 bytes @ 0x2
  3272                           
  3273  0022                     getMain_LoadOK@ok:	
  3274                           ; 1 bytes @ 0x2
  3275                           
  3276  0022                     _getRF_KeyStatus$5012:	
  3277                           ; 1 bytes @ 0x2
  3278                           
  3279  0022                     _getSw_KeyStatus$5977:	
  3280                           ; 1 bytes @ 0x2
  3281                           
  3282  0022                     ___bmul@product:	
  3283                           ; 1 bytes @ 0x2
  3284                           
  3285  0022                     DelayTime_1us@i:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  0022                     ___awdiv@dividend:	
  3289                           ; 2 bytes @ 0x2
  3290                           
  3291  0022                     ___lwdiv@dividend:	
  3292                           ; 2 bytes @ 0x2
  3293                           
  3294                           
  3295                           ; 2 bytes @ 0x2
  3296  0022                     	ds	1
  3297  0023                     ??_CC2500_WriteREG:	
  3298  0023                     ??_setLED:	
  3299                           ; 0 bytes @ 0x3
  3300                           
  3301  0023                     ??_DelayOff_Initialization:	
  3302                           ; 0 bytes @ 0x3
  3303                           
  3304  0023                     ??_getAD:	
  3305                           ; 0 bytes @ 0x3
  3306                           
  3307  0023                     CC2500_WriteCommand@command:	
  3308                           ; 0 bytes @ 0x3
  3309                           
  3310  0023                     CC2500_ReadStatus@status_addr:	
  3311                           ; 1 bytes @ 0x3
  3312                           
  3313  0023                     getDelayOff_GO@go:	
  3314                           ; 1 bytes @ 0x3
  3315                           
  3316  0023                     setDimmerLights_Initialization@lights:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  0023                     getDimmerLights_Status@status:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  0023                     setDimmerLights_AdjControl@idle:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  0023                     setLED@led:	
  3326                           ; 1 bytes @ 0x3
  3327                           
  3328  0023                     getAD@adcon0:	
  3329                           ; 1 bytes @ 0x3
  3330                           
  3331  0023                     Flash_Memory_Read@ret:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0023                     getMain_Lights_Count@status1:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  0023                     setRF_DimmerLights@status:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340  0023                     ___bmul@multiplier:	
  3341                           ; 1 bytes @ 0x3
  3342                           
  3343  0023                     ___ftpack@exp:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  0023                     _getMain_All_Error_Status$3402:	
  3347                           ; 1 bytes @ 0x3
  3348                           
  3349                           
  3350                           ; 2 bytes @ 0x3
  3351  0023                     	ds	1
  3352  0024                     ??_CC2500_ClearTXFIFO:	
  3353  0024                     ??_CC2500_ClearRXFIFO:	
  3354                           ; 0 bytes @ 0x4
  3355                           
  3356  0024                     ??_CC2500_SIDLEMode:	
  3357                           ; 0 bytes @ 0x4
  3358                           
  3359  0024                     ??_DelayTimejudge:	
  3360                           ; 0 bytes @ 0x4
  3361                           
  3362  0024                     ??_getMain_LightsStatus:	
  3363                           ; 0 bytes @ 0x4
  3364                           
  3365  0024                     ??_setLED_Initialization:	
  3366                           ; 0 bytes @ 0x4
  3367                           
  3368  0024                     ??_Flash_Memory_Modify:	
  3369                           ; 0 bytes @ 0x4
  3370                           
  3371  0024                     ??_getLoad_AD:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0024                     ??_getTemp_AD:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0024                     ??_RF_RxDisable:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0024                     ??_setSw_Initialization:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0024                     ??_CC2500_TxData:	
  3384                           ; 0 bytes @ 0x4
  3385                           
  3386  0024                     ??_CC2500_RxData:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0024                     ??_DimmerLights_Initialization:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0024                     ??___awdiv:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0024                     ??___lwdiv:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0024                     CC2500_WriteREG@w_addr:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0024                     _setDimmerLights_AdjControl$2164:	
  3402                           ; 1 bytes @ 0x4
  3403                           
  3404  0024                     setLED_Initialization@led:	
  3405                           ; 1 bytes @ 0x4
  3406                           
  3407  0024                     setLED_Main@led:	
  3408                           ; 1 bytes @ 0x4
  3409                           
  3410  0024                     setRF_DimmerLights@lights:	
  3411                           ; 1 bytes @ 0x4
  3412                           
  3413  0024                     setSw_Initialization@sw:	
  3414                           ; 1 bytes @ 0x4
  3415                           
  3416  0024                     ___ftpack@sign:	
  3417                           ; 1 bytes @ 0x4
  3418                           
  3419  0024                     getBuz_GO@i:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0024                     DelayTime_1us@j:	
  3423                           ; 2 bytes @ 0x4
  3424                           
  3425                           
  3426                           ; 2 bytes @ 0x4
  3427  0024                     	ds	1
  3428  0025                     ??_CC2500_InitSetREG:	
  3429  0025                     ??_CC2500_InitPATable:	
  3430                           ; 0 bytes @ 0x5
  3431                           
  3432  0025                     ??_Switch_Initialization:	
  3433                           ; 0 bytes @ 0x5
  3434                           
  3435  0025                     ??___ftpack:	
  3436                           ; 0 bytes @ 0x5
  3437                           
  3438  0025                     ??_LED_Initialization:	
  3439                           ; 0 bytes @ 0x5
  3440                           
  3441  0025                     ??_LED_Main:	
  3442                           ; 0 bytes @ 0x5
  3443                           
  3444  0025                     CC2500_TxData@loop_e:	
  3445                           ; 0 bytes @ 0x5
  3446                           
  3447  0025                     CC2500_RxData@loop_f:	
  3448                           ; 1 bytes @ 0x5
  3449                           
  3450  0025                     setDimmerLights_AdjControl@sw:	
  3451                           ; 1 bytes @ 0x5
  3452                           
  3453  0025                     Flash_Memory_Modify@i:	
  3454                           ; 1 bytes @ 0x5
  3455                           
  3456  0025                     getMain_LightsStatus@count:	
  3457                           ; 1 bytes @ 0x5
  3458                           
  3459  0025                     getMain_All_Error_Status@command:	
  3460                           ; 1 bytes @ 0x5
  3461                           
  3462  0025                     getTemp_AD@channel:	
  3463                           ; 1 bytes @ 0x5
  3464                           
  3465  0025                     ___awdiv@counter:	
  3466                           ; 1 bytes @ 0x5
  3467                           
  3468  0025                     ___lwdiv@quotient:	
  3469                           ; 1 bytes @ 0x5
  3470                           
  3471                           
  3472                           ; 2 bytes @ 0x5
  3473  0025                     	ds	1
  3474  0026                     ??_CC2500_PowerRST:	
  3475  0026                     ??_CC2500_FrequencyCabr:	
  3476                           ; 0 bytes @ 0x6
  3477                           
  3478  0026                     CC2500_InitSetREG@temp1:	
  3479                           ; 0 bytes @ 0x6
  3480                           
  3481  0026                     CC2500_InitPATable@temp:	
  3482                           ; 1 bytes @ 0x6
  3483                           
  3484  0026                     DelayTimejudge@i:	
  3485                           ; 1 bytes @ 0x6
  3486                           
  3487  0026                     getMain_All_Error_Status@status:	
  3488                           ; 1 bytes @ 0x6
  3489                           
  3490  0026                     getLoad_AD@channel:	
  3491                           ; 1 bytes @ 0x6
  3492                           
  3493  0026                     ___awdiv@sign:	
  3494                           ; 1 bytes @ 0x6
  3495                           
  3496  0026                     getMain_LightsStatus@i:	
  3497                           ; 1 bytes @ 0x6
  3498                           
  3499                           
  3500                           ; 2 bytes @ 0x6
  3501  0026                     	ds	1
  3502  0027                     CC2500_InitSetREG@temp2:	
  3503  0027                     CC2500_InitPATable@loop_d:	
  3504                           ; 1 bytes @ 0x7
  3505                           
  3506  0027                     DelayTimejudge@j:	
  3507                           ; 1 bytes @ 0x7
  3508                           
  3509  0027                     getLoad_AD@k:	
  3510                           ; 1 bytes @ 0x7
  3511                           
  3512  0027                     ___lwdiv@counter:	
  3513                           ; 1 bytes @ 0x7
  3514                           
  3515  0027                     ___awdiv@quotient:	
  3516                           ; 1 bytes @ 0x7
  3517                           
  3518                           
  3519                           ; 2 bytes @ 0x7
  3520  0027                     	ds	1
  3521  0028                     ?___awtoft:	
  3522  0028                     CC2500_InitSetREG@loop_c:	
  3523                           ; 3 bytes @ 0x8
  3524                           
  3525  0028                     DelayTimejudge@k:	
  3526                           ; 1 bytes @ 0x8
  3527                           
  3528  0028                     getMain_LightsStatus@status:	
  3529                           ; 1 bytes @ 0x8
  3530                           
  3531  0028                     getLoad_AD@j:	
  3532                           ; 1 bytes @ 0x8
  3533                           
  3534  0028                     ___awtoft@c:	
  3535                           ; 1 bytes @ 0x8
  3536                           
  3537                           
  3538                           ; 2 bytes @ 0x8
  3539  0028                     	ds	1
  3540  0029                     ??_Load_Main:	
  3541  0029                     ?_setBuz:	
  3542                           ; 0 bytes @ 0x9
  3543                           
  3544  0029                     ??_CC2500_PowerOnInitial:	
  3545                           ; 0 bytes @ 0x9
  3546                           
  3547  0029                     ??_Flash_Memory_Main:	
  3548                           ; 0 bytes @ 0x9
  3549                           
  3550  0029                     DelayTimejudge@value:	
  3551                           ; 0 bytes @ 0x9
  3552                           
  3553  0029                     getLoad_AD@i:	
  3554                           ; 1 bytes @ 0x9
  3555                           
  3556  0029                     setBuz@time:	
  3557                           ; 1 bytes @ 0x9
  3558                           
  3559                           
  3560                           ; 2 bytes @ 0x9
  3561  0029                     	ds	1
  3562  002A                     ?_setDelayOff_GO:	
  3563  002A                     setDelayOff_GO@command:	
  3564                           ; 0 bytes @ 0xA
  3565                           
  3566                           
  3567                           ; 1 bytes @ 0xA
  3568  002A                     	ds	1
  3569  002B                     ??_setBuz:	
  3570  002B                     ??___awtoft:	
  3571                           ; 0 bytes @ 0xB
  3572                           
  3573  002B                     setDelayOff_GO@value:	
  3574                           ; 0 bytes @ 0xB
  3575                           
  3576  002B                     Load_Main@j:	
  3577                           ; 1 bytes @ 0xB
  3578                           
  3579                           
  3580                           ; 1 bytes @ 0xB
  3581  002B                     	ds	1
  3582  002C                     ??_setDelayOff_GO:	
  3583  002C                     setBuz@count:	
  3584                           ; 0 bytes @ 0xC
  3585                           
  3586  002C                     Load_Main@sw:	
  3587                           ; 1 bytes @ 0xC
  3588                           
  3589                           
  3590                           ; 1 bytes @ 0xC
  3591  002C                     	ds	1
  3592  002D                     ??_my_MainTimer:	
  3593  002D                     ??_setTemp_Main:	
  3594                           ; 0 bytes @ 0xD
  3595                           
  3596  002D                     ??_setLog_Code:	
  3597                           ; 0 bytes @ 0xD
  3598                           
  3599  002D                     ??_setDimmerLights_SwOn:	
  3600                           ; 0 bytes @ 0xD
  3601                           
  3602  002D                     Load_Main@adjgo:	
  3603                           ; 0 bytes @ 0xD
  3604                           
  3605  002D                     ___awtoft@sign:	
  3606                           ; 1 bytes @ 0xD
  3607                           
  3608                           
  3609                           ; 1 bytes @ 0xD
  3610  002D                     	ds	1
  3611  002E                     ?___ftdiv:	
  3612  002E                     ?___ftmul:	
  3613                           ; 3 bytes @ 0xE
  3614                           
  3615  002E                     setDelayOff_GO@sw:	
  3616                           ; 3 bytes @ 0xE
  3617                           
  3618  002E                     setDimmerLights_SwOn@idle:	
  3619                           ; 1 bytes @ 0xE
  3620                           
  3621  002E                     _Load_Main$3733:	
  3622                           ; 1 bytes @ 0xE
  3623                           
  3624  002E                     ___ftdiv@f2:	
  3625                           ; 1 bytes @ 0xE
  3626                           
  3627  002E                     ___ftmul@f1:	
  3628                           ; 3 bytes @ 0xE
  3629                           
  3630                           
  3631                           ; 3 bytes @ 0xE
  3632  002E                     	ds	1
  3633  002F                     ??_setDimmerLights_SwOff:	
  3634  002F                     setDimmerLights_SwOn@sw:	
  3635                           ; 0 bytes @ 0xF
  3636                           
  3637  002F                     setDimmerLights_SwOff@command:	
  3638                           ; 1 bytes @ 0xF
  3639                           
  3640  002F                     Load_Main@error:	
  3641                           ; 1 bytes @ 0xF
  3642                           
  3643  002F                     setTemp_Main@error:	
  3644                           ; 1 bytes @ 0xF
  3645                           
  3646                           
  3647                           ; 1 bytes @ 0xF
  3648  002F                     	ds	1
  3649  0030                     ??_Temp_Main:	
  3650  0030                     setDimmerLights_SwOff@sw:	
  3651                           ; 0 bytes @ 0x10
  3652                           
  3653  0030                     Load_Main@i:	
  3654                           ; 1 bytes @ 0x10
  3655                           
  3656                           
  3657                           ; 1 bytes @ 0x10
  3658  0030                     	ds	1
  3659  0031                     ??_setDimmerLights_ErrorClose:	
  3660  0031                     ??_Exception_Main:	
  3661                           ; 0 bytes @ 0x11
  3662                           
  3663  0031                     ??_setRFSW_Control:	
  3664                           ; 0 bytes @ 0x11
  3665                           
  3666  0031                     ??_setSw_Main:	
  3667                           ; 0 bytes @ 0x11
  3668                           
  3669  0031                     ___ftdiv@f1:	
  3670                           ; 0 bytes @ 0x11
  3671                           
  3672  0031                     ___ftmul@f2:	
  3673                           ; 3 bytes @ 0x11
  3674                           
  3675                           
  3676                           ; 3 bytes @ 0x11
  3677  0031                     	ds	1
  3678  0032                     setDimmerLights_ErrorClose@count:	
  3679  0032                     Exception_Main@count:	
  3680                           ; 1 bytes @ 0x12
  3681                           
  3682  0032                     setRFSW_Control@status:	
  3683                           ; 1 bytes @ 0x12
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x12
  3687  0032                     	ds	1
  3688  0033                     setDimmerLights_ErrorClose@lights:	
  3689  0033                     Exception_Main@error:	
  3690                           ; 1 bytes @ 0x13
  3691                           
  3692  0033                     setRFSW_Control@sw:	
  3693                           ; 1 bytes @ 0x13
  3694                           
  3695  0033                     setSw_Main@sw:	
  3696                           ; 1 bytes @ 0x13
  3697                           
  3698                           
  3699                           ; 1 bytes @ 0x13
  3700  0033                     	ds	1
  3701  0034                     ??_Switch_Main:	
  3702  0034                     ??___ftdiv:	
  3703                           ; 0 bytes @ 0x14
  3704                           
  3705  0034                     ??___ftmul:	
  3706                           ; 0 bytes @ 0x14
  3707                           
  3708  0034                     Exception_Main@lights:	
  3709                           ; 0 bytes @ 0x14
  3710                           
  3711  0034                     setDimmerLights_ErrorClose@i:	
  3712                           ; 1 bytes @ 0x14
  3713                           
  3714                           
  3715                           ; 2 bytes @ 0x14
  3716  0034                     	ds	1
  3717  0035                     Exception_Main@i:	
  3718                           
  3719                           ; 2 bytes @ 0x15
  3720  0035                     	ds	1
  3721  0036                     ??_DlyOff_Main:	
  3722                           
  3723                           ; 0 bytes @ 0x16
  3724  0036                     	ds	2
  3725  0038                     DlyOff_Main@sw:	
  3726  0038                     ___ftdiv@cntr:	
  3727                           ; 1 bytes @ 0x18
  3728                           
  3729  0038                     ___ftmul@exp:	
  3730                           ; 1 bytes @ 0x18
  3731                           
  3732                           
  3733                           ; 1 bytes @ 0x18
  3734  0038                     	ds	1
  3735  0039                     ??_DelayOff_Main:	
  3736  0039                     ___ftdiv@f3:	
  3737                           ; 0 bytes @ 0x19
  3738                           
  3739  0039                     ___ftmul@f3_as_product:	
  3740                           ; 3 bytes @ 0x19
  3741                           
  3742                           
  3743                           ; 3 bytes @ 0x19
  3744  0039                     	ds	3
  3745  003C                     ___ftdiv@exp:	
  3746  003C                     ___ftmul@cntr:	
  3747                           ; 1 bytes @ 0x1C
  3748                           
  3749                           
  3750                           ; 1 bytes @ 0x1C
  3751  003C                     	ds	1
  3752  003D                     ___ftdiv@sign:	
  3753  003D                     ___ftmul@sign:	
  3754                           ; 1 bytes @ 0x1D
  3755                           
  3756                           
  3757                           ; 1 bytes @ 0x1D
  3758  003D                     	ds	1
  3759  003E                     ?___ftneg:	
  3760  003E                     ___ftneg@f1:	
  3761                           ; 3 bytes @ 0x1E
  3762                           
  3763                           
  3764                           ; 3 bytes @ 0x1E
  3765  003E                     	ds	3
  3766  0041                     ??___ftneg:	
  3767  0041                     ?___ftadd:	
  3768                           ; 0 bytes @ 0x21
  3769                           
  3770  0041                     ___ftadd@f1:	
  3771                           ; 3 bytes @ 0x21
  3772                           
  3773                           
  3774                           ; 3 bytes @ 0x21
  3775  0041                     	ds	3
  3776  0044                     ___ftadd@f2:	
  3777                           
  3778                           ; 3 bytes @ 0x24
  3779  0044                     	ds	3
  3780  0047                     ??___ftadd:	
  3781                           
  3782                           ; 0 bytes @ 0x27
  3783  0047                     	ds	4
  3784  004B                     ___ftadd@sign:	
  3785                           
  3786                           ; 1 bytes @ 0x2B
  3787  004B                     	ds	1
  3788  004C                     ___ftadd@exp2:	
  3789                           
  3790                           ; 1 bytes @ 0x2C
  3791  004C                     	ds	1
  3792  004D                     ___ftadd@exp1:	
  3793                           
  3794                           ; 1 bytes @ 0x2D
  3795  004D                     	ds	1
  3796  004E                     ?___fttol:	
  3797  004E                     ___fttol@f1:	
  3798                           ; 4 bytes @ 0x2E
  3799                           
  3800                           
  3801                           ; 3 bytes @ 0x2E
  3802  004E                     	ds	4
  3803  0052                     ??___fttol:	
  3804                           
  3805                           ; 0 bytes @ 0x32
  3806  0052                     	ds	4
  3807  0056                     ___fttol@sign1:	
  3808                           
  3809                           ; 1 bytes @ 0x36
  3810  0056                     	ds	1
  3811  0057                     ___fttol@lval:	
  3812                           
  3813                           ; 4 bytes @ 0x37
  3814  0057                     	ds	4
  3815  005B                     ___fttol@exp1:	
  3816                           
  3817                           ; 1 bytes @ 0x3B
  3818  005B                     	ds	1
  3819  005C                     ??_setPercentValue:	
  3820  005C                     ??_getPercentValue:	
  3821                           ; 0 bytes @ 0x3C
  3822                           
  3823                           
  3824                           ; 0 bytes @ 0x3C
  3825  005C                     	ds	2
  3826  005E                     getPercentValue@value:	
  3827  005E                     setPercentValue@value:	
  3828                           ; 1 bytes @ 0x3E
  3829                           
  3830                           
  3831                           ; 1 bytes @ 0x3E
  3832  005E                     	ds	1
  3833  005F                     getPercentValue@i:	
  3834  005F                     setPercentValue@i:	
  3835                           ; 3 bytes @ 0x3F
  3836                           
  3837                           
  3838                           ; 3 bytes @ 0x3F
  3839  005F                     	ds	3
  3840  0062                     ?_setDimmerLights:	
  3841  0062                     ?_setDimmerLights_Adj:	
  3842                           ; 0 bytes @ 0x42
  3843                           
  3844  0062                     ??_setDimmerLights_AdjRF:	
  3845                           ; 0 bytes @ 0x42
  3846                           
  3847  0062                     ??_Flash_Memory_Initialization:	
  3848                           ; 0 bytes @ 0x42
  3849                           
  3850  0062                     setDimmerLights@status:	
  3851                           ; 0 bytes @ 0x42
  3852                           
  3853  0062                     setDimmerLights_Adj@status:	
  3854                           ; 1 bytes @ 0x42
  3855                           
  3856                           
  3857                           ; 1 bytes @ 0x42
  3858  0062                     	ds	1
  3859  0063                     ??_setDimmerLights:	
  3860  0063                     ??_setDimmerLights_Adj:	
  3861                           ; 0 bytes @ 0x43
  3862                           
  3863  0063                     setDimmerLights_AdjRF@lights:	
  3864                           ; 0 bytes @ 0x43
  3865                           
  3866  0063                     Flash_Memory_Initialization@i:	
  3867                           ; 1 bytes @ 0x43
  3868                           
  3869                           
  3870                           ; 1 bytes @ 0x43
  3871  0063                     	ds	1
  3872  0064                     ??_setRF_DimmerValue:	
  3873                           
  3874                           ; 0 bytes @ 0x44
  3875  0064                     	ds	1
  3876  0065                     setDimmerLights@lights:	
  3877  0065                     setDimmerLights_Adj@lights:	
  3878                           ; 1 bytes @ 0x45
  3879                           
  3880                           
  3881                           ; 1 bytes @ 0x45
  3882  0065                     	ds	1
  3883  0066                     ??_setDimmerLights_Main:	
  3884  0066                     setDimmerLights_Main@lights:	
  3885                           ; 0 bytes @ 0x46
  3886                           
  3887  0066                     setRF_DimmerValue@lights:	
  3888                           ; 1 bytes @ 0x46
  3889                           
  3890                           
  3891                           ; 1 bytes @ 0x46
  3892  0066                     	ds	1
  3893  0067                     ??_setRFSW_AdjControl:	
  3894  0067                     ??_DimmerLights_Main:	
  3895                           ; 0 bytes @ 0x47
  3896                           
  3897                           
  3898                           ; 0 bytes @ 0x47
  3899  0067                     	ds	2
  3900  0069                     setRFSW_AdjControl@status:	
  3901  0069                     _DimmerLights_Main$2139:	
  3902                           ; 1 bytes @ 0x49
  3903                           
  3904                           
  3905                           ; 2 bytes @ 0x49
  3906  0069                     	ds	1
  3907  006A                     setRFSW_AdjControl@sw:	
  3908                           
  3909                           ; 1 bytes @ 0x4A
  3910  006A                     	ds	1
  3911  006B                     ??_getRxData:	
  3912  006B                     ??_setControl_Lights_Table:	
  3913                           ; 0 bytes @ 0x4B
  3914                           
  3915                           
  3916                           ; 0 bytes @ 0x4B
  3917  006B                     	ds	1
  3918  006C                     getRxData@error:	
  3919                           
  3920                           ; 1 bytes @ 0x4C
  3921  006C                     	ds	1
  3922  006D                     ??_setRF_Main:	
  3923                           
  3924                           ; 0 bytes @ 0x4D
  3925  006D                     	ds	1
  3926  006E                     ??_RF_Main:	
  3927  006E                     ??_main:	
  3928                           ; 0 bytes @ 0x4E
  3929                           
  3930                           
  3931                           	psect	maintext
  3932  16EC                     __pmaintext:	
  3933                           ; 0 bytes @ 0x4E
  3934 ;;
  3935 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3936 ;;
  3937 ;; *************** function _main *****************
  3938 ;; Defined at:
  3939 ;;		line 7 in file "../src/Main_B1.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  argc            2    3[BANK1 ] int 
  3942 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  2    3[BANK1 ] int 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 17F/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3954 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;Total ram usage:        4 bytes
  3959 ;; Hardware stack levels required when called:   15
  3960 ;; This function calls:
  3961 ;;		_Buzzer_Initialization
  3962 ;;		_Buzzer_Main
  3963 ;;		_CC2500_PowerOnInitial
  3964 ;;		_DelayOff_Initialization
  3965 ;;		_DelayOff_Main
  3966 ;;		_DimmerLights_Initialization
  3967 ;;		_DimmerLights_Main
  3968 ;;		_Exception_Main
  3969 ;;		_Flash_Memory_Initialization
  3970 ;;		_Flash_Memory_Main
  3971 ;;		_LED_Initialization
  3972 ;;		_LED_Main
  3973 ;;		_Load_Initialization
  3974 ;;		_Load_Main
  3975 ;;		_Mcu_Initialization
  3976 ;;		_RF_Initialization
  3977 ;;		_RF_Main
  3978 ;;		_Switch_Initialization
  3979 ;;		_Switch_Main
  3980 ;;		_Temp_Initialization
  3981 ;;		_Temp_Main
  3982 ;;		_WDT_Main
  3983 ;;		_getLoad_AD
  3984 ;;		_getTemp_AD
  3985 ;;		_myMain_Initialization
  3986 ;;		_my_MainTimer
  3987 ;; This function is called by:
  3988 ;;		Startup code after reset
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           
  3993                           ;psect for function _main
  3994  16EC                     _main:	
  3995                           
  3996                           ;Main_B1.c: 8: myMain_Initialization();
  3997                           
  3998                           ;incstack = 0
  3999                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4000  16EC  3188  2000  3196   	fcall	_myMain_Initialization
  4001                           
  4002                           ;Main_B1.c: 9: Mcu_Initialization();
  4003  16EF  319D  2562  3196   	fcall	_Mcu_Initialization
  4004                           
  4005                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4006  16F2  3186  2650  3196   	fcall	_Flash_Memory_Initialization
  4007                           
  4008                           ;Main_B1.c: 11: LED_Initialization();
  4009  16F5  319B  2392  3196   	fcall	_LED_Initialization
  4010                           
  4011                           ;Main_B1.c: 12: Buzzer_Initialization();
  4012  16F8  319B  236B  3196   	fcall	_Buzzer_Initialization
  4013                           
  4014                           ;Main_B1.c: 14: ;;
  4015                           ;Main_B1.c: 15: Temp_Initialization();
  4016  16FB  319B  2374  3196   	fcall	_Temp_Initialization
  4017                           
  4018                           ;Main_B1.c: 16: Load_Initialization();
  4019  16FE  319B  23A7  3196   	fcall	_Load_Initialization
  4020                           
  4021                           ;Main_B1.c: 17: ;;
  4022                           ;Main_B1.c: 18: DelayOff_Initialization();
  4023  1701  319B  238A  3196   	fcall	_DelayOff_Initialization
  4024                           
  4025                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4026  1704  319C  2401  3196   	fcall	_DimmerLights_Initialization
  4027                           
  4028                           ;Main_B1.c: 21: ;;
  4029                           ;Main_B1.c: 22: ;;
  4030                           ;Main_B1.c: 23: ;;
  4031                           ;Main_B1.c: 24: Switch_Initialization();
  4032  1707  319B  23EE  3196   	fcall	_Switch_Initialization
  4033                           
  4034                           ;Main_B1.c: 25: RF_Initialization();
  4035  170A  319B  236E  3196   	fcall	_RF_Initialization
  4036                           
  4037                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4038  170D  319D  25E9  3196   	fcall	_CC2500_PowerOnInitial
  4039  1710                     l7998:	
  4040                           ;Main_B1.c: 27: ;;
  4041                           ;Main_B1.c: 28: ;;
  4042                           ;Main_B1.c: 30: while (1) {
  4043                           
  4044                           
  4045                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4046  1710  0021               	movlb	1	; select bank1
  4047  1711  1C20               	btfss	_myMain^(0+128),0
  4048  1712  2F1B               	goto	l8002
  4049                           
  4050                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4051  1713  3005               	movlw	5
  4052  1714  318B  2325  3196   	fcall	_getLoad_AD
  4053                           
  4054                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4055  1717  3009               	movlw	9
  4056  1718  3193  2345  3196   	fcall	_getTemp_AD
  4057  171B                     l8002:	
  4058                           
  4059                           ;Main_B1.c: 57: }
  4060                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4061  171B  0022               	movlb	2	; select bank2
  4062  171C  1C3E               	btfss	_Timer1^(0+256),0
  4063  171D  2F10               	goto	l7998
  4064                           
  4065                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4066  171E  103E               	bcf	_Timer1^(0+256),0
  4067                           
  4068                           ;Main_B1.c: 96: my_MainTimer();
  4069  171F  3192  22CB  3196   	fcall	_my_MainTimer
  4070                           
  4071                           ;Main_B1.c: 97: WDT_Main();
  4072  1722  319D  2574  3196   	fcall	_WDT_Main
  4073                           
  4074                           ;Main_B1.c: 98: ;;
  4075                           ;Main_B1.c: 99: ;;
  4076                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4077  1725  0021               	movlb	1	; select bank1
  4078  1726  1C20               	btfss	_myMain^(0+128),0
  4079  1727  2F10               	goto	l7998
  4080                           
  4081                           ;Main_B1.c: 101: Flash_Memory_Main();
  4082  1728  3192  2228  3196   	fcall	_Flash_Memory_Main
  4083                           
  4084                           ;Main_B1.c: 103: LED_Main();
  4085  172B  319B  2396  3196   	fcall	_LED_Main
  4086                           
  4087                           ;Main_B1.c: 104: Buzzer_Main();
  4088  172E  3194  244D  3196   	fcall	_Buzzer_Main
  4089                           
  4090                           ;Main_B1.c: 106: ;;
  4091                           ;Main_B1.c: 107: Temp_Main();
  4092  1731  319B  2377  3196   	fcall	_Temp_Main
  4093                           
  4094                           ;Main_B1.c: 108: Load_Main();
  4095  1734  3180  2043  3196   	fcall	_Load_Main
  4096                           
  4097                           ;Main_B1.c: 109: ;;
  4098                           ;Main_B1.c: 111: ;;
  4099                           ;Main_B1.c: 112: DimmerLights_Main();
  4100  1737  3190  20F7  3196   	fcall	_DimmerLights_Main
  4101                           
  4102                           ;Main_B1.c: 113: Switch_Main();
  4103  173A  319B  23C5  3196   	fcall	_Switch_Main
  4104                           
  4105                           ;Main_B1.c: 114: ;;
  4106                           ;Main_B1.c: 115: ;;
  4107                           ;Main_B1.c: 117: RF_Main();
  4108  173D  319B  2371  3196   	fcall	_RF_Main
  4109                           
  4110                           ;Main_B1.c: 118: DelayOff_Main();
  4111  1740  319B  238E  3196   	fcall	_DelayOff_Main
  4112                           
  4113                           ;Main_B1.c: 119: ;;
  4114                           ;Main_B1.c: 120: ;;
  4115                           ;Main_B1.c: 121: Exception_Main();
  4116  1743  318D  25EC  3196   	fcall	_Exception_Main
  4117  1746  2F10               	goto	l7998
  4118  1747                     __end_of_main:	
  4119                           ;Main_B1.c: 128: }
  4120                           ;Main_B1.c: 129: }
  4121                           ;Main_B1.c: 163: }
  4122                           ;Main_B1.c: 164: return (0);
  4123                           ;	Return value of _main is never used
  4124                           
  4125                           
  4126                           	psect	text1
  4127  12CB                     __ptext1:	
  4128 ;; *************** function _my_MainTimer *****************
  4129 ;; Defined at:
  4130 ;;		line 185 in file "../src/Main_B1.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;		None               void
  4137 ;; Registers used:
  4138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4147 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4148 ;;Total ram usage:        1 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    7
  4151 ;; This function calls:
  4152 ;;		_setBuz
  4153 ;; This function is called by:
  4154 ;;		_main
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           
  4159                           ;psect for function _my_MainTimer
  4160  12CB                     _my_MainTimer:	
  4161                           
  4162                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4163                           
  4164                           ;incstack = 0
  4165                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4166  12CB  0021               	movlb	1	; select bank1
  4167  12CC  1820               	btfsc	_myMain^(0+128),0
  4168  12CD  2AE5               	goto	l7690
  4169                           
  4170                           ;Main_B1.c: 189: myMain.PowerCount++;
  4171  12CE  3001               	movlw	1
  4172  12CF  0020               	movlb	0	; select bank0
  4173  12D0  00AD               	movwf	??_my_MainTimer
  4174  12D1  082D               	movf	??_my_MainTimer,w
  4175  12D2  0021               	movlb	1	; select bank1
  4176  12D3  07A1               	addwf	(_myMain^(0+128)+1),f
  4177                           
  4178                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4179  12D4  0821               	movf	(_myMain^(0+128)+1),w
  4180  12D5  3A96               	xorlw	150
  4181  12D6  1D03               	skipz
  4182  12D7  0008               	return
  4183                           
  4184                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4185  12D8  01A1               	clrf	(_myMain^(0+128)+1)
  4186                           
  4187                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4188  12D9  1420               	bsf	_myMain^(0+128),0
  4189                           
  4190                           ;Main_B1.c: 197: setBuz(3, 50);
  4191  12DA  3032               	movlw	50
  4192  12DB  0020               	movlb	0	; select bank0
  4193  12DC  00A9               	movwf	setBuz@time
  4194  12DD  3000               	movlw	0
  4195  12DE  00AA               	movwf	setBuz@time+1
  4196  12DF  3003               	movlw	3
  4197  12E0  3195  25E0         	fcall	_setBuz
  4198                           
  4199                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4200  12E2  0021               	movlb	1	; select bank1
  4201  12E3  1620               	bsf	_myMain^(0+128),4
  4202                           
  4203                           ;Main_B1.c: 207: }
  4204                           ;Main_B1.c: 208: } else {
  4205  12E4  0008               	return
  4206  12E5                     l7690:	
  4207                           
  4208                           ;Main_B1.c: 209: myMain.PowerCount++;
  4209  12E5  3001               	movlw	1
  4210  12E6  0020               	movlb	0	; select bank0
  4211  12E7  00AD               	movwf	??_my_MainTimer
  4212  12E8  082D               	movf	??_my_MainTimer,w
  4213  12E9  0021               	movlb	1	; select bank1
  4214  12EA  07A1               	addwf	(_myMain^(0+128)+1),f
  4215                           
  4216                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4217  12EB  0821               	movf	(_myMain^(0+128)+1),w
  4218  12EC  3A64               	xorlw	100
  4219  12ED  1903               	btfsc	3,2
  4220                           
  4221                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4222  12EE  01A1               	clrf	(_myMain^(0+128)+1)
  4223                           
  4224                           ;Main_B1.c: 226: }
  4225                           ;Main_B1.c: 228: myMain.Count1++;
  4226  12EF  3001               	movlw	1
  4227  12F0  07A4               	addwf	(_myMain^(0+128)+4),f
  4228  12F1  3000               	movlw	0
  4229  12F2  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4230                           
  4231                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4232  12F3  3004               	movlw	4
  4233  12F4  3EA0               	addlw	_myMain& (0+255)
  4234  12F5  0086               	movwf	6
  4235  12F6  0187               	clrf	7
  4236  12F7  3F40               	moviw [0]fsr1
  4237  12F8  3A64               	xorlw	100
  4238  12F9  1D03               	skipz
  4239  12FA  2AFD               	goto	u7685
  4240  12FB  3F41               	moviw [1]fsr1
  4241  12FC  3A00               	xorlw	0
  4242  12FD                     u7685:	
  4243  12FD  1D03               	skipz
  4244  12FE  0008               	return
  4245                           
  4246                           ;Main_B1.c: 230: {
  4247                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4248  12FF  01A4               	clrf	(_myMain^(0+128)+4)
  4249  1300  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4250                           
  4251                           ;Main_B1.c: 243: if (myMain.Flag) {
  4252  1301  1CA0               	btfss	_myMain^(0+128),1
  4253  1302  2B05               	goto	l1385
  4254                           
  4255                           ;Main_B1.c: 244: myMain.Flag = 0;
  4256  1303  10A0               	bcf	_myMain^(0+128),1
  4257                           
  4258                           ;Main_B1.c: 253: } else {
  4259  1304  0008               	return
  4260  1305                     l1385:	
  4261                           
  4262                           ;Main_B1.c: 254: myMain.Flag = 1;
  4263  1305  14A0               	bsf	_myMain^(0+128),1
  4264  1306  0008               	return
  4265  1307                     __end_of_my_MainTimer:	
  4266                           
  4267                           	psect	text2
  4268  0800                     __ptext2:	
  4269 ;; *************** function _myMain_Initialization *****************
  4270 ;; Defined at:
  4271 ;;		line 170 in file "../src/Main_B1.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;		None
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;		None               void
  4278 ;; Registers used:
  4279 ;;		wreg, fsr1l, fsr1h
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;Total ram usage:        1 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    5
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_main
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           
  4300                           ;psect for function _myMain_Initialization
  4301  0800                     _myMain_Initialization:	
  4302                           
  4303                           ;Main_B1.c: 173: product = &_product;
  4304                           
  4305                           ;incstack = 0
  4306                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4307  0800  3020               	movlw	__product& (0+255)
  4308  0801  0020               	movlb	0	; select bank0
  4309  0802  00A0               	movwf	??_myMain_Initialization
  4310  0803  0820               	movf	??_myMain_Initialization,w
  4311  0804  00EE               	movwf	_product
  4312                           
  4313                           ;Main_B1.c: 174: product->Data[20] = 209;
  4314  0805  30D1               	movlw	209
  4315  0806  00A0               	movwf	??_myMain_Initialization
  4316  0807  086E               	movf	_product,w
  4317  0808  3E14               	addlw	20
  4318  0809  0086               	movwf	6
  4319  080A  3002               	movlw	2	; select bank4/5
  4320  080B  0087               	movwf	7
  4321  080C  0820               	movf	??_myMain_Initialization,w
  4322  080D  0081               	movwf	1
  4323  080E  0008               	return
  4324  080F                     __end_of_myMain_Initialization:	
  4325                           
  4326                           	psect	text3
  4327  1345                     __ptext3:	
  4328 ;; *************** function _getTemp_AD *****************
  4329 ;; Defined at:
  4330 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  channel         1    wreg     unsigned char 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  channel         1    5[BANK0 ] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;		None               void
  4337 ;; Registers used:
  4338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;Total ram usage:        2 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    7
  4351 ;; This function calls:
  4352 ;;		_getAD
  4353 ;; This function is called by:
  4354 ;;		_main
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           
  4359                           ;psect for function _getTemp_AD
  4360  1345                     _getTemp_AD:	
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4364                           ;getTemp_AD@channel stored from wreg
  4365  1345  0020               	movlb	0	; select bank0
  4366  1346  00A5               	movwf	getTemp_AD@channel
  4367                           
  4368                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4369  1347  0021               	movlb	1	; select bank1
  4370  1348  1D57               	btfss	_Temp^(0+128),2
  4371  1349  0008               	return
  4372                           
  4373                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4374  134A  30F0               	movlw	240
  4375  134B  0020               	movlb	0	; select bank0
  4376  134C  00A4               	movwf	??_getTemp_AD
  4377  134D  0824               	movf	??_getTemp_AD,w
  4378  134E  00A0               	movwf	getAD@adcon1
  4379  134F  0825               	movf	getTemp_AD@channel,w
  4380  1350  319E  269B  3193   	fcall	_getAD
  4381  1353  0020               	movlb	0	; select bank0
  4382  1354  0821               	movf	?_getAD+1,w
  4383  1355  0021               	movlb	1	; select bank1
  4384  1356  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4385  1357  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4386  1358  0020               	movlb	0	; select bank0
  4387  1359  0820               	movf	?_getAD,w
  4388  135A  0021               	movlb	1	; select bank1
  4389  135B  01E3               	clrf	(_Temp^(0+128)+12)
  4390  135C  07E3               	addwf	(_Temp^(0+128)+12),f
  4391                           
  4392                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4393  135D  300C               	movlw	12
  4394  135E  3ED7               	addlw	_Temp& (0+255)
  4395  135F  0086               	movwf	6
  4396  1360  0187               	clrf	7
  4397  1361  0016               	moviw fsr1++
  4398  1362  0401               	iorwf	1,w
  4399  1363  1903               	skipnz
  4400  1364  0008               	return
  4401                           
  4402                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4403  1365  0864               	movf	((_Temp+1)^(0+128)+12),w
  4404  1366  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4405  1367  1D03               	skipz
  4406  1368  2B6B               	goto	u7635
  4407  1369  0863               	movf	(_Temp^(0+128)+12),w
  4408  136A  025F               	subwf	(_Temp^(0+128)+8),w
  4409  136B                     u7635:	
  4410  136B  1803               	skipnc
  4411  136C  2B74               	goto	l7672
  4412                           
  4413                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4414  136D  0864               	movf	((_Temp+1)^(0+128)+12),w
  4415  136E  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4416  136F  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4417  1370  0863               	movf	(_Temp^(0+128)+12),w
  4418  1371  01DF               	clrf	(_Temp^(0+128)+8)
  4419  1372  07DF               	addwf	(_Temp^(0+128)+8),f
  4420                           
  4421                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4422  1373  0008               	return
  4423  1374                     l7672:	
  4424  1374  0864               	movf	((_Temp+1)^(0+128)+12),w
  4425  1375  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4426  1376  1D03               	skipz
  4427  1377  2B7A               	goto	u7645
  4428  1378  0863               	movf	(_Temp^(0+128)+12),w
  4429  1379  0261               	subwf	(_Temp^(0+128)+10),w
  4430  137A                     u7645:	
  4431  137A  1803               	skipnc
  4432  137B  0008               	return
  4433                           
  4434                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4435  137C  0864               	movf	((_Temp+1)^(0+128)+12),w
  4436  137D  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4437  137E  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4438  137F  0863               	movf	(_Temp^(0+128)+12),w
  4439  1380  01E1               	clrf	(_Temp^(0+128)+10)
  4440  1381  07E1               	addwf	(_Temp^(0+128)+10),f
  4441  1382  0008               	return
  4442  1383                     __end_of_getTemp_AD:	
  4443                           
  4444                           	psect	text4
  4445  0B25                     __ptext4:	
  4446 ;; *************** function _getLoad_AD *****************
  4447 ;; Defined at:
  4448 ;;		line 15 in file "../src/OverLoad_B1.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  channel         1    wreg     unsigned char 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;  channel         1    6[BANK0 ] unsigned char 
  4453 ;;  i               1    9[BANK0 ] unsigned char 
  4454 ;;  j               1    8[BANK0 ] unsigned char 
  4455 ;;  k               1    7[BANK0 ] unsigned char 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;		None               void
  4458 ;; Registers used:
  4459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;Total ram usage:        6 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    7
  4472 ;; This function calls:
  4473 ;;		_getAD
  4474 ;; This function is called by:
  4475 ;;		_main
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           
  4480                           ;psect for function _getLoad_AD
  4481  0B25                     _getLoad_AD:	
  4482                           
  4483                           ;incstack = 0
  4484                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4485                           ;getLoad_AD@channel stored from wreg
  4486  0B25  0020               	movlb	0	; select bank0
  4487  0B26  00A6               	movwf	getLoad_AD@channel
  4488                           
  4489                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4490  0B27  01A9               	clrf	getLoad_AD@i
  4491  0B28  01A8               	clrf	getLoad_AD@j
  4492  0B29  01A7               	clrf	getLoad_AD@k
  4493                           
  4494                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4495  0B2A  0022               	movlb	2	; select bank2
  4496  0B2B  1E41               	btfss	_Load^(0+256),4
  4497  0B2C  0008               	return
  4498                           
  4499                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4500  0B2D  30F3               	movlw	243
  4501  0B2E  0020               	movlb	0	; select bank0
  4502  0B2F  00A4               	movwf	??_getLoad_AD
  4503  0B30  0824               	movf	??_getLoad_AD,w
  4504  0B31  00A0               	movwf	getAD@adcon1
  4505  0B32  0826               	movf	getLoad_AD@channel,w
  4506  0B33  319E  269B  318B   	fcall	_getAD
  4507  0B36  0020               	movlb	0	; select bank0
  4508  0B37  0821               	movf	?_getAD+1,w
  4509  0B38  0022               	movlb	2	; select bank2
  4510  0B39  01E3               	clrf	((_Load+1)^(0+256)+33)
  4511  0B3A  07E3               	addwf	((_Load+1)^(0+256)+33),f
  4512  0B3B  0020               	movlb	0	; select bank0
  4513  0B3C  0820               	movf	?_getAD,w
  4514  0B3D  0022               	movlb	2	; select bank2
  4515  0B3E  01E2               	clrf	(_Load^(0+256)+33)
  4516  0B3F  07E2               	addwf	(_Load^(0+256)+33),f
  4517                           
  4518                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4519  0B40  0020               	movlb	0	; select bank0
  4520  0B41  01A9               	clrf	getLoad_AD@i
  4521  0B42  3004               	movlw	4
  4522  0B43  0229               	subwf	getLoad_AD@i,w
  4523  0B44  1803               	btfsc	3,0
  4524  0B45  2B73               	goto	l7642
  4525  0B46                     l7630:	
  4526                           
  4527                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4528  0B46  3529               	lslf	getLoad_AD@i,w
  4529  0B47  3E4C               	addlw	(_Load+11)& (0+255)
  4530  0B48  0086               	movwf	6
  4531  0B49  3001               	movlw	1	; select bank2/3
  4532  0B4A  0087               	movwf	7
  4533  0B4B  3F40               	moviw [0]fsr1
  4534  0B4C  00A4               	movwf	??_getLoad_AD
  4535  0B4D  3F41               	moviw [1]fsr1
  4536  0B4E  00A5               	movwf	??_getLoad_AD+1
  4537  0B4F  0022               	movlb	2	; select bank2
  4538  0B50  0863               	movf	((_Load+1)^(0+256)+33),w
  4539  0B51  0020               	movlb	0	; select bank0
  4540  0B52  0225               	subwf	??_getLoad_AD+1,w
  4541  0B53  1D03               	skipz
  4542  0B54  2B59               	goto	u7535
  4543  0B55  0022               	movlb	2	; select bank2
  4544  0B56  0862               	movf	(_Load^(0+256)+33),w
  4545  0B57  0020               	movlb	0	; select bank0
  4546  0B58  0224               	subwf	??_getLoad_AD,w
  4547  0B59                     u7535:	
  4548  0B59  1803               	skipnc
  4549  0B5A  2B6B               	goto	l7638
  4550  0B5B  08A8               	movf	getLoad_AD@j,f
  4551  0B5C  1D03               	skipz
  4552  0B5D  2B6B               	goto	l7638
  4553                           
  4554                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4555  0B5E  3529               	lslf	getLoad_AD@i,w
  4556  0B5F  3E4C               	addlw	(_Load+11)& (0+255)
  4557  0B60  0086               	movwf	6
  4558  0B61  3001               	movlw	1	; select bank2/3
  4559  0B62  0087               	movwf	7
  4560  0B63  0022               	movlb	2	; select bank2
  4561  0B64  0862               	movf	(_Load^(0+256)+33),w
  4562  0B65  3FC0               	movwi [0]fsr1
  4563  0B66  0863               	movf	((_Load+1)^(0+256)+33),w
  4564  0B67  3FC1               	movwi [1]fsr1
  4565                           
  4566                           ;OverLoad_B1.c: 24: j = 1;
  4567  0B68  0020               	movlb	0	; select bank0
  4568  0B69  01A8               	clrf	getLoad_AD@j
  4569  0B6A  0AA8               	incf	getLoad_AD@j,f
  4570  0B6B                     l7638:	
  4571  0B6B  3001               	movlw	1
  4572  0B6C  00A4               	movwf	??_getLoad_AD
  4573  0B6D  0824               	movf	??_getLoad_AD,w
  4574  0B6E  07A9               	addwf	getLoad_AD@i,f
  4575  0B6F  3004               	movlw	4
  4576  0B70  0229               	subwf	getLoad_AD@i,w
  4577  0B71  1C03               	skipc
  4578  0B72  2B46               	goto	l7630
  4579  0B73                     l7642:	
  4580                           
  4581                           ;OverLoad_B1.c: 25: }
  4582                           ;OverLoad_B1.c: 26: }
  4583                           ;OverLoad_B1.c: 27: if (j == 0) {
  4584  0B73  08A8               	movf	getLoad_AD@j,f
  4585  0B74  1D03               	skipz
  4586  0B75  0008               	return
  4587                           
  4588                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4589  0B76  01A9               	clrf	getLoad_AD@i
  4590  0B77                     L1:	
  4591  0B77  3004               	movlw	4
  4592  0B78  0229               	subwf	getLoad_AD@i,w
  4593  0B79  1803               	btfsc	3,0
  4594  0B7A  0008               	return
  4595                           
  4596                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4597  0B7B  3529               	lslf	getLoad_AD@i,w
  4598  0B7C  3E56               	addlw	(_Load+21)& (0+255)
  4599  0B7D  0086               	movwf	6
  4600  0B7E  3001               	movlw	1	; select bank2/3
  4601  0B7F  0087               	movwf	7
  4602  0B80  3F40               	moviw [0]fsr1
  4603  0B81  00A4               	movwf	??_getLoad_AD
  4604  0B82  3F41               	moviw [1]fsr1
  4605  0B83  00A5               	movwf	??_getLoad_AD+1
  4606  0B84  0825               	movf	??_getLoad_AD+1,w
  4607  0B85  0022               	movlb	2	; select bank2
  4608  0B86  0263               	subwf	((_Load+1)^(0+256)+33),w
  4609  0B87  1D03               	skipz
  4610  0B88  2B8D               	goto	u7585
  4611  0B89  0020               	movlb	0	; select bank0
  4612  0B8A  0824               	movf	??_getLoad_AD,w
  4613  0B8B  0022               	movlb	2	; select bank2
  4614  0B8C  0262               	subwf	(_Load^(0+256)+33),w
  4615  0B8D                     u7585:	
  4616  0B8D  1803               	skipnc
  4617  0B8E  2BA0               	goto	l7658
  4618  0B8F  0020               	movlb	0	; select bank0
  4619  0B90  08A7               	movf	getLoad_AD@k,f
  4620  0B91  1D03               	skipz
  4621  0B92  2BA0               	goto	l7658
  4622                           
  4623                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4624  0B93  3529               	lslf	getLoad_AD@i,w
  4625  0B94  3E56               	addlw	(_Load+21)& (0+255)
  4626  0B95  0086               	movwf	6
  4627  0B96  3001               	movlw	1	; select bank2/3
  4628  0B97  0087               	movwf	7
  4629  0B98  0022               	movlb	2	; select bank2
  4630  0B99  0862               	movf	(_Load^(0+256)+33),w
  4631  0B9A  3FC0               	movwi [0]fsr1
  4632  0B9B  0863               	movf	((_Load+1)^(0+256)+33),w
  4633  0B9C  3FC1               	movwi [1]fsr1
  4634                           
  4635                           ;OverLoad_B1.c: 31: k = 1;
  4636  0B9D  0020               	movlb	0	; select bank0
  4637  0B9E  01A7               	clrf	getLoad_AD@k
  4638  0B9F  0AA7               	incf	getLoad_AD@k,f
  4639  0BA0                     l7658:	
  4640  0BA0  3001               	movlw	1
  4641  0BA1  0020               	movlb	0	; select bank0
  4642  0BA2  00A4               	movwf	??_getLoad_AD
  4643  0BA3  0824               	movf	??_getLoad_AD,w
  4644  0BA4  07A9               	addwf	getLoad_AD@i,f
  4645  0BA5  2B77               	goto	L1
  4646  0BA6                     __end_of_getLoad_AD:	
  4647                           
  4648                           	psect	text5
  4649  1E9B                     __ptext5:	
  4650 ;; *************** function _getAD *****************
  4651 ;; Defined at:
  4652 ;;		line 454 in file "../src/MCU_B1.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  adcon0          1    wreg     unsigned char 
  4655 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  2    0[BANK0 ] int 
  4660 ;; Registers used:
  4661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4667 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;Total ram usage:        4 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    6
  4674 ;; This function calls:
  4675 ;;		_Timeout_Counter
  4676 ;;		_set_TimeoutCleared
  4677 ;; This function is called by:
  4678 ;;		_getLoad_AD
  4679 ;;		_getTemp_AD
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           
  4684                           ;psect for function _getAD
  4685  1E9B                     _getAD:	
  4686                           
  4687                           ;incstack = 0
  4688                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4689                           ;getAD@adcon0 stored from wreg
  4690  1E9B  0020               	movlb	0	; select bank0
  4691  1E9C  00A3               	movwf	getAD@adcon0
  4692                           
  4693                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4694  1E9D  0823               	movf	getAD@adcon0,w
  4695  1E9E  0021               	movlb	1	; select bank1
  4696  1E9F  009D               	movwf	29	;volatile
  4697                           
  4698                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4699  1EA0  0020               	movlb	0	; select bank0
  4700  1EA1  0820               	movf	getAD@adcon1,w
  4701  1EA2  0021               	movlb	1	; select bank1
  4702  1EA3  009E               	movwf	30	;volatile
  4703                           
  4704                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4705  1EA4  149D               	bsf	29,1	;volatile
  4706                           
  4707                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4708  1EA5  2EA9               	goto	l7058
  4709  1EA6                     l7056:	
  4710                           
  4711                           ;MCU_B1.c: 459: Timeout_Counter();
  4712  1EA6  319D  25D4  319E   	fcall	_Timeout_Counter
  4713  1EA9                     l7058:	
  4714  1EA9  0021               	movlb	1	; select bank1
  4715  1EAA  1C9D               	btfss	29,1	;volatile
  4716  1EAB  2EAE               	goto	l7062
  4717  1EAC  1D2B               	btfss	(_myMain^(0+128)+11),2
  4718  1EAD  2EA6               	goto	l7056
  4719  1EAE                     l7062:	
  4720                           
  4721                           ;MCU_B1.c: 460: };
  4722                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4723  1EAE  319B  23A2         	fcall	_set_TimeoutCleared
  4724                           
  4725                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4726  1EB0  0021               	movlb	1	; select bank1
  4727  1EB1  081C               	movf	28,w	;volatile
  4728  1EB2  0020               	movlb	0	; select bank0
  4729  1EB3  01A1               	clrf	?_getAD+1
  4730  1EB4  07A1               	addwf	?_getAD+1,f
  4731  1EB5  0021               	movlb	1	; select bank1
  4732  1EB6  081B               	movf	27,w	;volatile
  4733  1EB7  0020               	movlb	0	; select bank0
  4734  1EB8  01A0               	clrf	?_getAD
  4735  1EB9  07A0               	addwf	?_getAD,f
  4736  1EBA  0008               	return
  4737  1EBB                     __end_of_getAD:	
  4738                           
  4739                           	psect	text6
  4740  1D74                     __ptext6:	
  4741 ;; *************** function _WDT_Main *****************
  4742 ;; Defined at:
  4743 ;;		line 1098 in file "../src/MCU_B1.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;		None
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;		None
  4748 ;; Return value:  Size  Location     Type
  4749 ;;		None               void
  4750 ;; Registers used:
  4751 ;;		wreg, status,2, status,0, pclath, cstack
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4760 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4761 ;;Total ram usage:        1 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    6
  4764 ;; This function calls:
  4765 ;;		_WDT_Clearing
  4766 ;; This function is called by:
  4767 ;;		_main
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           
  4772                           ;psect for function _WDT_Main
  4773  1D74                     _WDT_Main:	
  4774                           
  4775                           ;MCU_B1.c: 1099: if (WDT.Enable == 1) {
  4776                           
  4777                           ;incstack = 0
  4778                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4779  1D74  0021               	movlb	1	; select bank1
  4780  1D75  1C4B               	btfss	_WDT^(0+128),0
  4781  1D76  0008               	return
  4782                           
  4783                           ;MCU_B1.c: 1100: if (WDT.Timer-- > 0) {
  4784  1D77  3001               	movlw	1
  4785  1D78  02CC               	subwf	(_WDT^(0+128)+1),f
  4786  1D79  084C               	movf	(_WDT^(0+128)+1),w
  4787  1D7A  3AFF               	xorlw	255
  4788  1D7B  1903               	skipnz
  4789  1D7C  0008               	return
  4790                           
  4791                           ;MCU_B1.c: 1101: WDT.Timer = 100;
  4792  1D7D  3064               	movlw	100
  4793  1D7E  0020               	movlb	0	; select bank0
  4794  1D7F  00A0               	movwf	??_WDT_Main
  4795  1D80  0820               	movf	??_WDT_Main,w
  4796  1D81  0021               	movlb	1	; select bank1
  4797  1D82  00CC               	movwf	(_WDT^(0+128)+1)
  4798                           
  4799                           ;MCU_B1.c: 1102: WDT_Clearing();
  4800  1D83  3180  2002         	fcall	_WDT_Clearing
  4801  1D85  0008               	return
  4802  1D86                     __end_of_WDT_Main:	
  4803                           
  4804                           	psect	text7
  4805  0002                     __ptext7:	
  4806 ;; *************** function _WDT_Clearing *****************
  4807 ;; Defined at:
  4808 ;;		line 1108 in file "../src/MCU_B1.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		None
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;Total ram usage:        0 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    5
  4829 ;; This function calls:
  4830 ;;		Nothing
  4831 ;; This function is called by:
  4832 ;;		_WDT_Main
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _WDT_Clearing
  4838  0002                     _WDT_Clearing:	
  4839                           
  4840                           ;incstack = 0
  4841                           ; Regs used in _WDT_Clearing: []
  4842  0002  0064               	clrwdt	;# 
  4843  0003  0008               	return
  4844  0004                     __end_of_WDT_Clearing:	
  4845                           
  4846                           	psect	text8
  4847  1B77                     __ptext8:	
  4848 ;; *************** function _Temp_Main *****************
  4849 ;; Defined at:
  4850 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;		None
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;		None
  4855 ;; Return value:  Size  Location     Type
  4856 ;;		None               void
  4857 ;; Registers used:
  4858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;Total ram usage:        0 bytes
  4869 ;; Hardware stack levels used:    1
  4870 ;; Hardware stack levels required when called:    8
  4871 ;; This function calls:
  4872 ;;		_setTemp_Main
  4873 ;; This function is called by:
  4874 ;;		_main
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           
  4879                           ;psect for function _Temp_Main
  4880  1B77                     _Temp_Main:	
  4881                           
  4882                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4883                           
  4884                           ;incstack = 0
  4885                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4886  1B77  318E  2699         	fcall	_setTemp_Main
  4887  1B79  0008               	return
  4888  1B7A                     __end_of_Temp_Main:	
  4889                           
  4890                           	psect	text9
  4891  0E99                     __ptext9:	
  4892 ;; *************** function _setTemp_Main *****************
  4893 ;; Defined at:
  4894 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;		None
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;  error           1   15[BANK0 ] unsigned char 
  4899 ;; Return value:  Size  Location     Type
  4900 ;;		None               void
  4901 ;; Registers used:
  4902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;Total ram usage:        3 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:    7
  4915 ;; This function calls:
  4916 ;;		_getMain_All_Error_Status
  4917 ;;		_setBuz
  4918 ;; This function is called by:
  4919 ;;		_Temp_Main
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           
  4924                           ;psect for function _setTemp_Main
  4925  0E99                     _setTemp_Main:	
  4926                           
  4927                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4928                           
  4929                           ;incstack = 0
  4930                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4931  0E99  3000               	movlw	0
  4932  0E9A  3191  218C  318E   	fcall	_getMain_All_Error_Status
  4933  0E9D  0020               	movlb	0	; select bank0
  4934  0E9E  00AD               	movwf	??_setTemp_Main
  4935  0E9F  082D               	movf	??_setTemp_Main,w
  4936  0EA0  00AF               	movwf	setTemp_Main@error
  4937                           
  4938                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4939  0EA1  0021               	movlb	1	; select bank1
  4940  0EA2  1C57               	btfss	_Temp^(0+128),0
  4941  0EA3  2F48               	goto	l1706
  4942                           
  4943                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4944  0EA4  1957               	btfsc	_Temp^(0+128),2
  4945  0EA5  2EB5               	goto	l7134
  4946                           
  4947                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4948  0EA6  3001               	movlw	1
  4949  0EA7  07D8               	addwf	(_Temp^(0+128)+1),f
  4950  0EA8  3000               	movlw	0
  4951  0EA9  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4952                           
  4953                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4954  0EAA  3001               	movlw	1
  4955  0EAB  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4956  0EAC  30F4               	movlw	244
  4957  0EAD  1903               	skipnz
  4958  0EAE  0258               	subwf	(_Temp^(0+128)+1),w
  4959  0EAF  1C03               	skipc
  4960  0EB0  0008               	return
  4961                           
  4962                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4963  0EB1  01D8               	clrf	(_Temp^(0+128)+1)
  4964  0EB2  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4965                           
  4966                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4967  0EB3  1557               	bsf	_Temp^(0+128),2
  4968                           
  4969                           ;OverTemperature_B1.c: 70: }
  4970                           ;OverTemperature_B1.c: 71: } else {
  4971  0EB4  0008               	return
  4972  0EB5                     l7134:	
  4973                           
  4974                           ;OverTemperature_B1.c: 72: Temp.Time++;
  4975  0EB5  3001               	movlw	1
  4976  0EB6  07D8               	addwf	(_Temp^(0+128)+1),f
  4977  0EB7  3000               	movlw	0
  4978  0EB8  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4979                           
  4980                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  4981  0EB9  3000               	movlw	0
  4982  0EBA  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4983  0EBB  3005               	movlw	5
  4984  0EBC  1903               	skipnz
  4985  0EBD  0258               	subwf	(_Temp^(0+128)+1),w
  4986  0EBE  1C03               	skipc
  4987  0EBF  0008               	return
  4988                           
  4989                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  4990  0EC0  01D8               	clrf	(_Temp^(0+128)+1)
  4991  0EC1  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4992                           
  4993                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  4994  0EC2  3008               	movlw	8
  4995  0EC3  3ED7               	addlw	_Temp& (0+255)
  4996  0EC4  0086               	movwf	6
  4997  0EC5  0187               	clrf	7
  4998  0EC6  0016               	moviw fsr1++
  4999  0EC7  0401               	iorwf	1,w
  5000  0EC8  1903               	skipnz
  5001  0EC9  2F42               	goto	l7180
  5002  0ECA  300A               	movlw	10
  5003  0ECB  3ED7               	addlw	_Temp& (0+255)
  5004  0ECC  0086               	movwf	6
  5005  0ECD  0187               	clrf	7
  5006  0ECE  0016               	moviw fsr1++
  5007  0ECF  0401               	iorwf	1,w
  5008  0ED0  1903               	skipnz
  5009  0ED1  2F42               	goto	l7180
  5010                           
  5011                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5012  0ED2  1157               	bcf	_Temp^(0+128),2
  5013                           
  5014                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5015  0ED3  300A               	movlw	10
  5016  0ED4  3ED7               	addlw	_Temp& (0+255)
  5017  0ED5  0086               	movwf	6
  5018  0ED6  0187               	clrf	7
  5019  0ED7  3008               	movlw	8
  5020  0ED8  3ED7               	addlw	_Temp& (0+255)
  5021  0ED9  0084               	movwf	4
  5022  0EDA  0185               	clrf	5
  5023  0EDB  3F40               	moviw [0]fsr1
  5024  0EDC  0700               	addwf	0,w
  5025  0EDD  0020               	movlb	0	; select bank0
  5026  0EDE  00AD               	movwf	??_setTemp_Main
  5027  0EDF  3101               	addfsr 0,1
  5028  0EE0  3F41               	moviw [1]fsr1
  5029  0EE1  3D00               	addwfc	0,w
  5030  0EE2  00AE               	movwf	??_setTemp_Main+1
  5031  0EE3  36AE               	lsrf	??_setTemp_Main+1,f
  5032  0EE4  0CAD               	rrf	??_setTemp_Main,f
  5033  0EE5  082D               	movf	??_setTemp_Main,w
  5034  0EE6  0021               	movlb	1	; select bank1
  5035  0EE7  00DD               	movwf	(_Temp^(0+128)+6)
  5036  0EE8  0020               	movlb	0	; select bank0
  5037  0EE9  082E               	movf	??_setTemp_Main+1,w
  5038  0EEA  0021               	movlb	1	; select bank1
  5039  0EEB  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5040                           
  5041                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5042  0EEC  3090               	movlw	144
  5043  0EED  00E5               	movwf	(_Temp^(0+128)+14)
  5044  0EEE  3001               	movlw	1
  5045  0EEF  00E6               	movwf	(_Temp^(0+128)+15)
  5046                           
  5047                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5048  0EF0  3059               	movlw	89
  5049  0EF1  00E7               	movwf	(_Temp^(0+128)+16)
  5050  0EF2  3001               	movlw	1
  5051  0EF3  00E8               	movwf	(_Temp^(0+128)+17)
  5052                           
  5053                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5054  0EF4  1CD7               	btfss	_Temp^(0+128),1
  5055  0EF5  2F16               	goto	l7166
  5056                           
  5057                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5058  0EF6  0866               	movf	((_Temp+1)^(0+128)+14),w
  5059  0EF7  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5060  0EF8  1D03               	skipz
  5061  0EF9  2EFC               	goto	u6665
  5062  0EFA  0865               	movf	(_Temp^(0+128)+14),w
  5063  0EFB  025D               	subwf	(_Temp^(0+128)+6),w
  5064  0EFC                     u6665:	
  5065  0EFC  1C03               	skipc
  5066  0EFD  2F14               	goto	l7164
  5067                           
  5068                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5069  0EFE  3001               	movlw	1
  5070  0EFF  0020               	movlb	0	; select bank0
  5071  0F00  00AD               	movwf	??_setTemp_Main
  5072  0F01  082D               	movf	??_setTemp_Main,w
  5073  0F02  0021               	movlb	1	; select bank1
  5074  0F03  07DA               	addwf	(_Temp^(0+128)+3),f
  5075                           
  5076                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5077  0F04  3003               	movlw	3
  5078  0F05  025A               	subwf	(_Temp^(0+128)+3),w
  5079  0F06  1C03               	skipc
  5080  0F07  2F2C               	goto	l7178
  5081                           
  5082                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5083  0F08  01DA               	clrf	(_Temp^(0+128)+3)
  5084                           
  5085                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5086  0F09  10D7               	bcf	_Temp^(0+128),1
  5087                           
  5088                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5089  0F0A  3064               	movlw	100
  5090  0F0B  0020               	movlb	0	; select bank0
  5091  0F0C  00A9               	movwf	setBuz@time
  5092  0F0D  3000               	movlw	0
  5093  0F0E  00AA               	movwf	setBuz@time+1
  5094  0F0F  3002               	movlw	2
  5095  0F10  3195  25E0  318E   	fcall	_setBuz
  5096                           
  5097                           ;OverTemperature_B1.c: 103: }
  5098                           ;OverTemperature_B1.c: 104: } else {
  5099  0F13  2F2C               	goto	l7178
  5100  0F14                     l7164:	
  5101                           
  5102                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5103  0F14  0021               	movlb	1	; select bank1
  5104  0F15  2F2B               	goto	l7176
  5105  0F16                     l7166:	
  5106                           ;OverTemperature_B1.c: 106: }
  5107                           ;OverTemperature_B1.c: 107: } else {
  5108                           
  5109                           
  5110                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5111  0F16  085E               	movf	((_Temp+1)^(0+128)+6),w
  5112  0F17  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5113  0F18  1D03               	skipz
  5114  0F19  2F1C               	goto	u6685
  5115  0F1A  085D               	movf	(_Temp^(0+128)+6),w
  5116  0F1B  0267               	subwf	(_Temp^(0+128)+16),w
  5117  0F1C                     u6685:	
  5118  0F1C  1C03               	skipc
  5119  0F1D  2F2B               	goto	l7176
  5120                           
  5121                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5122  0F1E  3001               	movlw	1
  5123  0F1F  0020               	movlb	0	; select bank0
  5124  0F20  00AD               	movwf	??_setTemp_Main
  5125  0F21  082D               	movf	??_setTemp_Main,w
  5126  0F22  0021               	movlb	1	; select bank1
  5127  0F23  07DA               	addwf	(_Temp^(0+128)+3),f
  5128                           
  5129                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5130  0F24  3003               	movlw	3
  5131  0F25  025A               	subwf	(_Temp^(0+128)+3),w
  5132  0F26  1C03               	skipc
  5133  0F27  2F2C               	goto	l7178
  5134                           
  5135                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5136  0F28  01DA               	clrf	(_Temp^(0+128)+3)
  5137                           
  5138                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5139  0F29  14D7               	bsf	_Temp^(0+128),1
  5140                           
  5141                           ;OverTemperature_B1.c: 113: }
  5142                           ;OverTemperature_B1.c: 114: } else {
  5143  0F2A  2F2C               	goto	l7178
  5144  0F2B                     l7176:	
  5145                           
  5146                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5147  0F2B  01DA               	clrf	(_Temp^(0+128)+3)
  5148  0F2C                     l7178:	
  5149                           
  5150                           ;OverTemperature_B1.c: 116: }
  5151                           ;OverTemperature_B1.c: 117: }
  5152                           ;OverTemperature_B1.c: 118: product->Data[24]=Temp.AD >> 8;
  5153  0F2C  0021               	movlb	1	; select bank1
  5154  0F2D  085E               	movf	((_Temp+1)^(0+128)+6),w
  5155  0F2E  0020               	movlb	0	; select bank0
  5156  0F2F  00AD               	movwf	??_setTemp_Main
  5157  0F30  086E               	movf	_product,w
  5158  0F31  3E18               	addlw	24
  5159  0F32  0086               	movwf	6
  5160  0F33  3002               	movlw	2	; select bank4/5
  5161  0F34  0087               	movwf	7
  5162  0F35  082D               	movf	??_setTemp_Main,w
  5163  0F36  0081               	movwf	1
  5164                           
  5165                           ;OverTemperature_B1.c: 119: product->Data[25]=Temp.AD;
  5166  0F37  0021               	movlb	1	; select bank1
  5167  0F38  085D               	movf	(_Temp^(0+128)+6),w
  5168  0F39  0020               	movlb	0	; select bank0
  5169  0F3A  00AD               	movwf	??_setTemp_Main
  5170  0F3B  086E               	movf	_product,w
  5171  0F3C  3E19               	addlw	25
  5172  0F3D  0086               	movwf	6
  5173  0F3E  3002               	movlw	2	; select bank4/5
  5174  0F3F  0087               	movwf	7
  5175  0F40  082D               	movf	??_setTemp_Main,w
  5176  0F41  0081               	movwf	1
  5177  0F42                     l7180:	
  5178                           
  5179                           ;OverTemperature_B1.c: 135: }
  5180                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5181  0F42  0021               	movlb	1	; select bank1
  5182  0F43  01DF               	clrf	(_Temp^(0+128)+8)
  5183  0F44  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5184                           
  5185                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5186  0F45  01E1               	clrf	(_Temp^(0+128)+10)
  5187  0F46  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5188                           
  5189                           ;OverTemperature_B1.c: 138: }
  5190                           ;OverTemperature_B1.c: 139: }
  5191                           ;OverTemperature_B1.c: 141: } else {
  5192  0F47  0008               	return
  5193  0F48                     l1706:	
  5194                           
  5195                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5196  0F48  1C20               	btfss	_myMain^(0+128),0
  5197  0F49  0008               	return
  5198                           
  5199                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5200  0F4A  1457               	bsf	_Temp^(0+128),0
  5201  0F4B  0008               	return
  5202  0F4C                     __end_of_setTemp_Main:	
  5203                           
  5204                           	psect	text10
  5205  1B74                     __ptext10:	
  5206 ;; *************** function _Temp_Initialization *****************
  5207 ;; Defined at:
  5208 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;		None
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;		None
  5213 ;; Return value:  Size  Location     Type
  5214 ;;		None               void
  5215 ;; Registers used:
  5216 ;;		status,2, status,0, pclath, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;Total ram usage:        0 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    6
  5229 ;; This function calls:
  5230 ;;		_setTemp_Initialization
  5231 ;; This function is called by:
  5232 ;;		_main
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           
  5237                           ;psect for function _Temp_Initialization
  5238  1B74                     _Temp_Initialization:	
  5239                           
  5240                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5241                           
  5242                           ;incstack = 0
  5243                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5244  1B74  3190  2066         	fcall	_setTemp_Initialization
  5245  1B76  0008               	return
  5246  1B77                     __end_of_Temp_Initialization:	
  5247                           
  5248                           	psect	text11
  5249  1066                     __ptext11:	
  5250 ;; *************** function _setTemp_Initialization *****************
  5251 ;; Defined at:
  5252 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;		None
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;		None
  5257 ;; Return value:  Size  Location     Type
  5258 ;;		None               void
  5259 ;; Registers used:
  5260 ;;		None
  5261 ;; Tracked objects:
  5262 ;;		On entry : 0/0
  5263 ;;		On exit  : 0/0
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;Total ram usage:        0 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    5
  5273 ;; This function calls:
  5274 ;;		Nothing
  5275 ;; This function is called by:
  5276 ;;		_Temp_Initialization
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _setTemp_Initialization
  5282  1066                     _setTemp_Initialization:	
  5283                           
  5284                           ;incstack = 0
  5285                           ; Regs used in _setTemp_Initialization: []
  5286  1066  0008               	return
  5287  1067                     __end_of_setTemp_Initialization:	
  5288                           
  5289                           	psect	text12
  5290  1BC5                     __ptext12:	
  5291 ;; *************** function _Switch_Main *****************
  5292 ;; Defined at:
  5293 ;;		line 72 in file "../src/Switch_B1.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;		None
  5298 ;; Return value:  Size  Location     Type
  5299 ;;		None               void
  5300 ;; Registers used:
  5301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5311 ;;Total ram usage:        0 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:   10
  5314 ;; This function calls:
  5315 ;;		_TouchPower
  5316 ;;		_setSw_Main
  5317 ;; This function is called by:
  5318 ;;		_main
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           
  5323                           ;psect for function _Switch_Main
  5324  1BC5                     _Switch_Main:	
  5325                           
  5326                           ;Switch_B1.c: 75: setSw_Main(1);
  5327                           
  5328                           ;incstack = 0
  5329                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5330  1BC5  3001               	movlw	1
  5331  1BC6  3181  21C4  319B   	fcall	_setSw_Main
  5332                           
  5333                           ;Switch_B1.c: 87: TouchPower();
  5334  1BC9  3187  27EB         	fcall	_TouchPower
  5335  1BCB  0008               	return
  5336  1BCC                     __end_of_Switch_Main:	
  5337                           
  5338                           	psect	text13
  5339  01C4                     __ptext13:	
  5340 ;; *************** function _setSw_Main *****************
  5341 ;; Defined at:
  5342 ;;		line 121 in file "../src/Switch_B1.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  sw              1    wreg     unsigned char 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  sw              1   19[BANK0 ] unsigned char 
  5347 ;; Return value:  Size  Location     Type
  5348 ;;		None               void
  5349 ;; Registers used:
  5350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;Total ram usage:        3 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    9
  5363 ;; This function calls:
  5364 ;;		_SwPointSelect
  5365 ;;		_getMain_All_Error_Status
  5366 ;;		_getSw_KeyStatus
  5367 ;;		_setBuz
  5368 ;;		_setDimmerLights_AdjControl
  5369 ;;		_setDimmerLights_SwOff
  5370 ;;		_setDimmerLights_SwOn
  5371 ;;		_setRF_Learn
  5372 ;; This function is called by:
  5373 ;;		_Switch_Main
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           
  5378                           ;psect for function _setSw_Main
  5379  01C4                     _setSw_Main:	
  5380                           
  5381                           ;incstack = 0
  5382                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5383                           ;setSw_Main@sw stored from wreg
  5384  01C4  0020               	movlb	0	; select bank0
  5385  01C5  00B3               	movwf	setSw_Main@sw
  5386                           
  5387                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5388  01C6  0833               	movf	setSw_Main@sw,w
  5389  01C7  319C  2458  3181   	fcall	_SwPointSelect
  5390                           
  5391                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5392  01CA  087C               	movf	_Sw,w
  5393  01CB  0086               	movwf	6
  5394  01CC  3001               	movlw	1	; select bank2/3
  5395  01CD  0087               	movwf	7
  5396  01CE  1C01               	btfss	1,0
  5397  01CF  2B2E               	goto	l2405
  5398                           
  5399                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5400  01D0  3000               	movlw	0
  5401  01D1  3191  218C  3181   	fcall	_getMain_All_Error_Status
  5402  01D4  3800               	iorlw	0
  5403  01D5  1D03               	skipz
  5404  01D6  29F2               	goto	l7316
  5405                           
  5406                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5407  01D7  0A7C               	incf	_Sw,w
  5408  01D8  0086               	movwf	6
  5409  01D9  3001               	movlw	1	; select bank2/3
  5410  01DA  0087               	movwf	7
  5411  01DB  1081               	bcf	1,1
  5412                           
  5413                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5414  01DC  0020               	movlb	0	; select bank0
  5415  01DD  0833               	movf	setSw_Main@sw,w
  5416  01DE  319D  253F  3181   	fcall	_getSw_KeyStatus
  5417  01E1  3A01               	xorlw	1
  5418  01E2  3000               	movlw	0
  5419  01E3  1903               	skipnz
  5420  01E4  3001               	movlw	1
  5421  01E5  0020               	movlb	0	; select bank0
  5422  01E6  00B1               	movwf	??_setSw_Main
  5423  01E7  087C               	movf	_Sw,w
  5424  01E8  0086               	movwf	6
  5425  01E9  3001               	movlw	1	; select bank2/3
  5426  01EA  0087               	movwf	7
  5427  01EB  0DB1               	rlf	??_setSw_Main,f
  5428  01EC  0801               	movf	1,w
  5429  01ED  0631               	xorwf	??_setSw_Main,w
  5430  01EE  39FD               	andlw	-3
  5431  01EF  0631               	xorwf	??_setSw_Main,w
  5432  01F0  0081               	movwf	1
  5433                           
  5434                           ;Switch_B1.c: 128: } else {
  5435  01F1  2A07               	goto	l2407
  5436  01F2                     l7316:	
  5437                           
  5438                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5439  01F2  0A7C               	incf	_Sw,w
  5440  01F3  0086               	movwf	6
  5441  01F4  3001               	movlw	1	; select bank2/3
  5442  01F5  0087               	movwf	7
  5443  01F6  1881               	btfsc	1,1
  5444  01F7  2A07               	goto	l2407
  5445                           
  5446                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5447  01F8  0A7C               	incf	_Sw,w
  5448  01F9  0086               	movwf	6
  5449  01FA  3001               	movlw	1	; select bank2/3
  5450  01FB  0087               	movwf	7
  5451  01FC  1481               	bsf	1,1
  5452                           
  5453                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5454  01FD  087C               	movf	_Sw,w
  5455  01FE  0086               	movwf	6
  5456  01FF  3001               	movlw	1	; select bank2/3
  5457  0200  0087               	movwf	7
  5458  0201  1081               	bcf	1,1
  5459                           
  5460                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5461  0202  087C               	movf	_Sw,w
  5462  0203  0086               	movwf	6
  5463  0204  3001               	movlw	1	; select bank2/3
  5464  0205  0087               	movwf	7
  5465  0206  1501               	bsf	1,2
  5466  0207                     l2407:	
  5467                           
  5468                           ;Switch_B1.c: 133: }
  5469                           ;Switch_B1.c: 134: }
  5470                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5471  0207  087C               	movf	_Sw,w
  5472  0208  0086               	movwf	6
  5473  0209  3001               	movlw	1	; select bank2/3
  5474  020A  0087               	movwf	7
  5475  020B  1C81               	btfss	1,1
  5476  020C  2AD7               	goto	l7366
  5477                           
  5478                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5479  020D  087C               	movf	_Sw,w
  5480  020E  0086               	movwf	6
  5481  020F  3001               	movlw	1	; select bank2/3
  5482  0210  0087               	movwf	7
  5483  0211  1901               	btfsc	1,2
  5484  0212  2A35               	goto	l7332
  5485                           
  5486                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5487  0213  3001               	movlw	1
  5488  0214  0020               	movlb	0	; select bank0
  5489  0215  00B1               	movwf	??_setSw_Main
  5490  0216  087C               	movf	_Sw,w
  5491  0217  3E02               	addlw	2
  5492  0218  0086               	movwf	6
  5493  0219  3001               	movlw	1	; select bank2/3
  5494  021A  0087               	movwf	7
  5495  021B  0831               	movf	??_setSw_Main,w
  5496  021C  0781               	addwf	1,f
  5497                           
  5498                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5499  021D  087C               	movf	_Sw,w
  5500  021E  3E02               	addlw	2
  5501  021F  0086               	movwf	6
  5502  0220  3001               	movlw	1	; select bank2/3
  5503  0221  0087               	movwf	7
  5504  0222  3005               	movlw	5
  5505  0223  0201               	subwf	1,w
  5506  0224  1C03               	skipc
  5507  0225  0008               	return
  5508                           
  5509                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5510  0226  087C               	movf	_Sw,w
  5511  0227  3E02               	addlw	2
  5512  0228  0086               	movwf	6
  5513  0229  3001               	movlw	1	; select bank2/3
  5514  022A  0087               	movwf	7
  5515  022B  0181               	clrf	1
  5516                           
  5517                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5518  022C  087C               	movf	_Sw,w
  5519  022D  0086               	movwf	6
  5520  022E  3001               	movlw	1	; select bank2/3
  5521  022F  0087               	movwf	7
  5522  0230  1501               	bsf	1,2
  5523                           
  5524                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5525  0231  0833               	movf	setSw_Main@sw,w
  5526  0232  3194  2406         	fcall	_setDimmerLights_SwOn
  5527                           
  5528                           ;Switch_B1.c: 147: }
  5529                           ;Switch_B1.c: 148: } else {
  5530  0234  0008               	return
  5531  0235                     l7332:	
  5532                           
  5533                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5534  0235  087C               	movf	_Sw,w
  5535  0236  0086               	movwf	6
  5536  0237  3001               	movlw	1	; select bank2/3
  5537  0238  0087               	movwf	7
  5538  0239  1981               	btfsc	1,3
  5539  023A  2A67               	goto	l7342
  5540                           
  5541                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5542  023B  087C               	movf	_Sw,w
  5543  023C  3E03               	addlw	3
  5544  023D  0086               	movwf	6
  5545  023E  3001               	movlw	1	; select bank2/3
  5546  023F  0087               	movwf	7
  5547  0240  3001               	movlw	1
  5548  0241  0781               	addwf	1,f
  5549  0242  3141               	addfsr 1,1
  5550  0243  1803               	skipnc
  5551  0244  0A81               	incf	1,f
  5552                           
  5553                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5554  0245  087C               	movf	_Sw,w
  5555  0246  3E03               	addlw	3
  5556  0247  0086               	movwf	6
  5557  0248  3001               	movlw	1	; select bank2/3
  5558  0249  0087               	movwf	7
  5559  024A  3F40               	moviw [0]fsr1
  5560  024B  0020               	movlb	0	; select bank0
  5561  024C  00B1               	movwf	??_setSw_Main
  5562  024D  3F41               	moviw [1]fsr1
  5563  024E  00B2               	movwf	??_setSw_Main+1
  5564  024F  3000               	movlw	0
  5565  0250  0232               	subwf	??_setSw_Main+1,w
  5566  0251  3096               	movlw	150
  5567  0252  1903               	skipnz
  5568  0253  0231               	subwf	??_setSw_Main,w
  5569  0254  1C03               	skipc
  5570  0255  0008               	return
  5571                           
  5572                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5573  0256  087C               	movf	_Sw,w
  5574  0257  3E03               	addlw	3
  5575  0258  0086               	movwf	6
  5576  0259  3001               	movlw	1	; select bank2/3
  5577  025A  0087               	movwf	7
  5578  025B  3000               	movlw	0
  5579  025C  3FC0               	movwi [0]fsr1
  5580  025D  3FC1               	movwi [1]fsr1
  5581                           
  5582                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5583  025E  087C               	movf	_Sw,w
  5584  025F  0086               	movwf	6
  5585  0260  3001               	movlw	1	; select bank2/3
  5586  0261  0087               	movwf	7
  5587  0262  1581               	bsf	1,3
  5588                           
  5589                           ;Switch_B1.c: 156: setDimmerLights_AdjControl(sw);
  5590  0263  0833               	movf	setSw_Main@sw,w
  5591  0264  3193  2307         	fcall	_setDimmerLights_AdjControl
  5592                           
  5593                           ;Switch_B1.c: 159: }
  5594                           ;Switch_B1.c: 160: } else {
  5595  0266  0008               	return
  5596  0267                     l7342:	
  5597                           
  5598                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5599  0267  087C               	movf	_Sw,w
  5600  0268  0086               	movwf	6
  5601  0269  3001               	movlw	1	; select bank2/3
  5602  026A  0087               	movwf	7
  5603  026B  1A01               	btfsc	1,4
  5604  026C  2AA5               	goto	l7356
  5605                           
  5606                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5607  026D  087C               	movf	_Sw,w
  5608  026E  3E05               	addlw	5
  5609  026F  0086               	movwf	6
  5610  0270  3001               	movlw	1	; select bank2/3
  5611  0271  0087               	movwf	7
  5612  0272  3001               	movlw	1
  5613  0273  0781               	addwf	1,f
  5614  0274  3141               	addfsr 1,1
  5615  0275  1803               	skipnc
  5616  0276  0A81               	incf	1,f
  5617                           
  5618                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5619  0277  087C               	movf	_Sw,w
  5620  0278  3E05               	addlw	5
  5621  0279  0086               	movwf	6
  5622  027A  3001               	movlw	1	; select bank2/3
  5623  027B  0087               	movwf	7
  5624  027C  3F40               	moviw [0]fsr1
  5625  027D  0020               	movlb	0	; select bank0
  5626  027E  00B1               	movwf	??_setSw_Main
  5627  027F  3F41               	moviw [1]fsr1
  5628  0280  00B2               	movwf	??_setSw_Main+1
  5629  0281  3000               	movlw	0
  5630  0282  0232               	subwf	??_setSw_Main+1,w
  5631  0283  3096               	movlw	150
  5632  0284  1903               	skipnz
  5633  0285  0231               	subwf	??_setSw_Main,w
  5634  0286  1C03               	skipc
  5635  0287  0008               	return
  5636                           
  5637                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5638  0288  087C               	movf	_Sw,w
  5639  0289  3E05               	addlw	5
  5640  028A  0086               	movwf	6
  5641  028B  3001               	movlw	1	; select bank2/3
  5642  028C  0087               	movwf	7
  5643  028D  3000               	movlw	0
  5644  028E  3FC0               	movwi [0]fsr1
  5645  028F  3FC1               	movwi [1]fsr1
  5646                           
  5647                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5648  0290  087C               	movf	_Sw,w
  5649  0291  0086               	movwf	6
  5650  0292  3001               	movlw	1	; select bank2/3
  5651  0293  0087               	movwf	7
  5652  0294  1601               	bsf	1,4
  5653                           
  5654                           ;Switch_B1.c: 168: setRF_Learn(1);
  5655  0295  3001               	movlw	1
  5656  0296  319D  25C0  3181   	fcall	_setRF_Learn
  5657                           
  5658                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5659  0299  0021               	movlb	1	; select bank1
  5660  029A  1EA0               	btfss	_myMain^(0+128),5
  5661  029B  0008               	return
  5662                           
  5663                           ;Switch_B1.c: 171: setBuz(2, 100);
  5664  029C  3064               	movlw	100
  5665  029D  0020               	movlb	0	; select bank0
  5666  029E  00A9               	movwf	setBuz@time
  5667  029F  3000               	movlw	0
  5668  02A0  00AA               	movwf	setBuz@time+1
  5669  02A1  3002               	movlw	2
  5670  02A2  3195  25E0         	fcall	_setBuz
  5671                           
  5672                           ;Switch_B1.c: 172: }
  5673                           ;Switch_B1.c: 174: }
  5674                           ;Switch_B1.c: 175: } else {
  5675  02A4  0008               	return
  5676  02A5                     l7356:	
  5677                           
  5678                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5679  02A5  087C               	movf	_Sw,w
  5680  02A6  0086               	movwf	6
  5681  02A7  3001               	movlw	1	; select bank2/3
  5682  02A8  0087               	movwf	7
  5683  02A9  1A81               	btfsc	1,5
  5684  02AA  0008               	return
  5685                           
  5686                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5687  02AB  087C               	movf	_Sw,w
  5688  02AC  3E07               	addlw	7
  5689  02AD  0086               	movwf	6
  5690  02AE  3001               	movlw	1	; select bank2/3
  5691  02AF  0087               	movwf	7
  5692  02B0  3001               	movlw	1
  5693  02B1  0781               	addwf	1,f
  5694  02B2  3141               	addfsr 1,1
  5695  02B3  1803               	skipnc
  5696  02B4  0A81               	incf	1,f
  5697                           
  5698                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5699  02B5  087C               	movf	_Sw,w
  5700  02B6  3E07               	addlw	7
  5701  02B7  0086               	movwf	6
  5702  02B8  3001               	movlw	1	; select bank2/3
  5703  02B9  0087               	movwf	7
  5704  02BA  3F40               	moviw [0]fsr1
  5705  02BB  0020               	movlb	0	; select bank0
  5706  02BC  00B1               	movwf	??_setSw_Main
  5707  02BD  3F41               	moviw [1]fsr1
  5708  02BE  00B2               	movwf	??_setSw_Main+1
  5709  02BF  3001               	movlw	1
  5710  02C0  0232               	subwf	??_setSw_Main+1,w
  5711  02C1  302C               	movlw	44
  5712  02C2  1903               	skipnz
  5713  02C3  0231               	subwf	??_setSw_Main,w
  5714  02C4  1C03               	skipc
  5715  02C5  0008               	return
  5716                           
  5717                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5718  02C6  087C               	movf	_Sw,w
  5719  02C7  3E07               	addlw	7
  5720  02C8  0086               	movwf	6
  5721  02C9  3001               	movlw	1	; select bank2/3
  5722  02CA  0087               	movwf	7
  5723  02CB  3000               	movlw	0
  5724  02CC  3FC0               	movwi [0]fsr1
  5725  02CD  3FC1               	movwi [1]fsr1
  5726                           
  5727                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5728  02CE  087C               	movf	_Sw,w
  5729  02CF  0086               	movwf	6
  5730  02D0  3001               	movlw	1	; select bank2/3
  5731  02D1  0087               	movwf	7
  5732  02D2  1681               	bsf	1,5
  5733                           
  5734                           ;Switch_B1.c: 183: setRF_Learn(0);
  5735  02D3  3000               	movlw	0
  5736  02D4  319D  25C0         	fcall	_setRF_Learn
  5737                           
  5738                           ;Switch_B1.c: 186: }
  5739                           ;Switch_B1.c: 187: }
  5740                           ;Switch_B1.c: 188: }
  5741                           ;Switch_B1.c: 189: }
  5742                           ;Switch_B1.c: 190: }
  5743                           ;Switch_B1.c: 191: } else {
  5744  02D6  0008               	return
  5745  02D7                     l7366:	
  5746                           
  5747                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5748  02D7  087C               	movf	_Sw,w
  5749  02D8  0086               	movwf	6
  5750  02D9  3001               	movlw	1	; select bank2/3
  5751  02DA  0087               	movwf	7
  5752  02DB  1D01               	btfss	1,2
  5753  02DC  0008               	return
  5754                           
  5755                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5756  02DD  3001               	movlw	1
  5757  02DE  0020               	movlb	0	; select bank0
  5758  02DF  00B1               	movwf	??_setSw_Main
  5759  02E0  087C               	movf	_Sw,w
  5760  02E1  3E02               	addlw	2
  5761  02E2  0086               	movwf	6
  5762  02E3  3001               	movlw	1	; select bank2/3
  5763  02E4  0087               	movwf	7
  5764  02E5  0831               	movf	??_setSw_Main,w
  5765  02E6  0781               	addwf	1,f
  5766                           
  5767                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5768  02E7  087C               	movf	_Sw,w
  5769  02E8  3E02               	addlw	2
  5770  02E9  0086               	movwf	6
  5771  02EA  3001               	movlw	1	; select bank2/3
  5772  02EB  0087               	movwf	7
  5773  02EC  3005               	movlw	5
  5774  02ED  0201               	subwf	1,w
  5775  02EE  1C03               	skipc
  5776  02EF  0008               	return
  5777                           
  5778                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5779  02F0  087C               	movf	_Sw,w
  5780  02F1  3E02               	addlw	2
  5781  02F2  0086               	movwf	6
  5782  02F3  3001               	movlw	1	; select bank2/3
  5783  02F4  0087               	movwf	7
  5784  02F5  0181               	clrf	1
  5785                           
  5786                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5787  02F6  087C               	movf	_Sw,w
  5788  02F7  0086               	movwf	6
  5789  02F8  3001               	movlw	1	; select bank2/3
  5790  02F9  0087               	movwf	7
  5791  02FA  1101               	bcf	1,2
  5792                           
  5793                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5794  02FB  087C               	movf	_Sw,w
  5795  02FC  3E03               	addlw	3
  5796  02FD  0086               	movwf	6
  5797  02FE  3001               	movlw	1	; select bank2/3
  5798  02FF  0087               	movwf	7
  5799  0300  3000               	movlw	0
  5800  0301  3FC0               	movwi [0]fsr1
  5801  0302  3FC1               	movwi [1]fsr1
  5802                           
  5803                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5804  0303  087C               	movf	_Sw,w
  5805  0304  0086               	movwf	6
  5806  0305  3001               	movlw	1	; select bank2/3
  5807  0306  0087               	movwf	7
  5808  0307  1181               	bcf	1,3
  5809                           
  5810                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5811  0308  087C               	movf	_Sw,w
  5812  0309  3E05               	addlw	5
  5813  030A  0086               	movwf	6
  5814  030B  3001               	movlw	1	; select bank2/3
  5815  030C  0087               	movwf	7
  5816  030D  3000               	movlw	0
  5817  030E  3FC0               	movwi [0]fsr1
  5818  030F  3FC1               	movwi [1]fsr1
  5819                           
  5820                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5821  0310  087C               	movf	_Sw,w
  5822  0311  0086               	movwf	6
  5823  0312  3001               	movlw	1	; select bank2/3
  5824  0313  0087               	movwf	7
  5825  0314  1201               	bcf	1,4
  5826                           
  5827                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5828  0315  087C               	movf	_Sw,w
  5829  0316  3E07               	addlw	7
  5830  0317  0086               	movwf	6
  5831  0318  3001               	movlw	1	; select bank2/3
  5832  0319  0087               	movwf	7
  5833  031A  3000               	movlw	0
  5834  031B  3FC0               	movwi [0]fsr1
  5835  031C  3FC1               	movwi [1]fsr1
  5836                           
  5837                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5838  031D  087C               	movf	_Sw,w
  5839  031E  0086               	movwf	6
  5840  031F  3001               	movlw	1	; select bank2/3
  5841  0320  0087               	movwf	7
  5842  0321  1281               	bcf	1,5
  5843                           
  5844                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5845  0322  0021               	movlb	1	; select bank1
  5846  0323  1852               	btfsc	_SwDetect^(0+128),0
  5847  0324  2B2A               	goto	l7392
  5848                           
  5849                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5850  0325  0020               	movlb	0	; select bank0
  5851  0326  0833               	movf	setSw_Main@sw,w
  5852  0327  3195  2588  3181   	fcall	_setDimmerLights_SwOff
  5853  032A                     l7392:	
  5854                           
  5855                           ;Switch_B1.c: 206: }
  5856                           ;Switch_B1.c: 209: setRF_Learn(0);
  5857  032A  3000               	movlw	0
  5858  032B  319D  25C0         	fcall	_setRF_Learn
  5859                           
  5860                           ;Switch_B1.c: 211: }
  5861                           ;Switch_B1.c: 212: }
  5862                           ;Switch_B1.c: 213: }
  5863                           ;Switch_B1.c: 214: } else {
  5864  032D  0008               	return
  5865  032E                     l2405:	
  5866                           
  5867                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5868  032E  0021               	movlb	1	; select bank1
  5869  032F  1C20               	btfss	_myMain^(0+128),0
  5870  0330  0008               	return
  5871                           
  5872                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5873  0331  087C               	movf	_Sw,w
  5874  0332  0086               	movwf	6
  5875  0333  3001               	movlw	1	; select bank2/3
  5876  0334  0087               	movwf	7
  5877  0335  1401               	bsf	1,0
  5878  0336  0008               	return
  5879  0337                     __end_of_setSw_Main:	
  5880                           
  5881                           	psect	text14
  5882  1DC0                     __ptext14:	
  5883 ;; *************** function _setRF_Learn *****************
  5884 ;; Defined at:
  5885 ;;		line 23 in file "../src/RF_Control_B1.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  command         1    wreg     unsigned char 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  command         1    1[BANK0 ] unsigned char 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;		None               void
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;Total ram usage:        2 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    5
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_setSw_Main
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           
  5914                           ;psect for function _setRF_Learn
  5915  1DC0                     _setRF_Learn:	
  5916                           
  5917                           ;incstack = 0
  5918                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5919                           ;setRF_Learn@command stored from wreg
  5920  1DC0  0020               	movlb	0	; select bank0
  5921  1DC1  00A1               	movwf	setRF_Learn@command
  5922                           
  5923                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5924  1DC2  0821               	movf	setRF_Learn@command,w
  5925  1DC3  3A01               	xorlw	1
  5926  1DC4  3000               	movlw	0
  5927  1DC5  1903               	skipnz
  5928  1DC6  3001               	movlw	1
  5929  1DC7  00A0               	movwf	??_setRF_Learn
  5930  1DC8  0EA0               	swapf	??_setRF_Learn,f
  5931  1DC9  0DA0               	rlf	??_setRF_Learn,f
  5932  1DCA  0DA0               	rlf	??_setRF_Learn,f
  5933  1DCB  0021               	movlb	1	; select bank1
  5934  1DCC  083A               	movf	_RF1^(0+128),w
  5935  1DCD  0020               	movlb	0	; select bank0
  5936  1DCE  0620               	xorwf	??_setRF_Learn,w
  5937  1DCF  39BF               	andlw	-65
  5938  1DD0  0620               	xorwf	??_setRF_Learn,w
  5939  1DD1  0021               	movlb	1	; select bank1
  5940  1DD2  00BA               	movwf	_RF1^(0+128)
  5941  1DD3  0008               	return
  5942  1DD4                     __end_of_setRF_Learn:	
  5943                           
  5944                           	psect	text15
  5945  1307                     __ptext15:	
  5946 ;; *************** function _setDimmerLights_AdjControl *****************
  5947 ;; Defined at:
  5948 ;;		line 567 in file "../src/Dimmer_B1.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;  sw              1    wreg     unsigned char 
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  sw              1    5[BANK0 ] unsigned char 
  5953 ;;  idle            1    3[BANK0 ] unsigned char 
  5954 ;; Return value:  Size  Location     Type
  5955 ;;		None               void
  5956 ;; Registers used:
  5957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5964 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;Total ram usage:        4 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    6
  5970 ;; This function calls:
  5971 ;;		_DimmerLightsPointSelect
  5972 ;;		_getAll_DimmerLights_AdjGO
  5973 ;; This function is called by:
  5974 ;;		_setSw_Main
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           
  5979                           ;psect for function _setDimmerLights_AdjControl
  5980  1307                     _setDimmerLights_AdjControl:	
  5981                           
  5982                           ;incstack = 0
  5983                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5984                           ;setDimmerLights_AdjControl@sw stored from wreg
  5985  1307  0020               	movlb	0	; select bank0
  5986  1308  00A5               	movwf	setDimmerLights_AdjControl@sw
  5987                           
  5988                           ;Dimmer_B1.c: 568: DimmerLightsPointSelect(sw);
  5989  1309  0825               	movf	setDimmerLights_AdjControl@sw,w
  5990  130A  319C  2421  3193   	fcall	_DimmerLightsPointSelect
  5991                           
  5992                           ;Dimmer_B1.c: 569: char idle = 0;
  5993  130D  0020               	movlb	0	; select bank0
  5994  130E  01A3               	clrf	setDimmerLights_AdjControl@idle
  5995                           
  5996                           ;Dimmer_B1.c: 571: idle = getAll_DimmerLights_AdjGO(sw) == 1 && Dimmer.LoadOK == 1 ? 1 :
      +                           0;
  5997  130F  01A4               	clrf	_setDimmerLights_AdjControl$2164
  5998  1310  0825               	movf	setDimmerLights_AdjControl@sw,w
  5999  1311  319B  239A  3193   	fcall	_getAll_DimmerLights_AdjGO
  6000  1314  3A01               	xorlw	1
  6001  1315  1D03               	skipz
  6002  1316  2B1D               	goto	l6558
  6003  1317  0021               	movlb	1	; select bank1
  6004  1318  1CC6               	btfss	_Dimmer^(0+128),1	;volatile
  6005  1319  2B1D               	goto	l6558
  6006  131A  0020               	movlb	0	; select bank0
  6007  131B  01A4               	clrf	_setDimmerLights_AdjControl$2164
  6008  131C  0AA4               	incf	_setDimmerLights_AdjControl$2164,f
  6009  131D                     l6558:	
  6010  131D  0020               	movlb	0	; select bank0
  6011  131E  0824               	movf	_setDimmerLights_AdjControl$2164,w
  6012  131F  00A2               	movwf	??_setDimmerLights_AdjControl
  6013  1320  0822               	movf	??_setDimmerLights_AdjControl,w
  6014  1321  00A3               	movwf	setDimmerLights_AdjControl@idle
  6015                           
  6016                           ;Dimmer_B1.c: 573: if (idle == 0) {
  6017  1322  08A3               	movf	setDimmerLights_AdjControl@idle,f
  6018  1323  1D03               	skipz
  6019  1324  0008               	return
  6020                           
  6021                           ;Dimmer_B1.c: 574: if (DimmerLights->SwFlag == 1) {
  6022  1325  086F               	movf	_DimmerLights,w
  6023  1326  3E0B               	addlw	11
  6024  1327  0086               	movwf	6
  6025  1328  3001               	movlw	1	; select bank2/3
  6026  1329  0087               	movwf	7
  6027  132A  1C81               	btfss	1,1
  6028  132B  0008               	return
  6029                           
  6030                           ;Dimmer_B1.c: 575: DimmerLights->SwAdj = 1;
  6031  132C  086F               	movf	_DimmerLights,w
  6032  132D  3E0B               	addlw	11
  6033  132E  0086               	movwf	6
  6034  132F  3001               	movlw	1	; select bank2/3
  6035  1330  0087               	movwf	7
  6036  1331  1501               	bsf	1,2
  6037                           
  6038                           ;Dimmer_B1.c: 576: DimmerLights->Status = 1;
  6039  1332  086F               	movf	_DimmerLights,w
  6040  1333  3E02               	addlw	2
  6041  1334  0086               	movwf	6
  6042  1335  3001               	movlw	1	; select bank2/3
  6043  1336  0087               	movwf	7
  6044  1337  1481               	bsf	1,1
  6045                           
  6046                           ;Dimmer_B1.c: 577: DimmerLights->TriggerAdj = 1;
  6047  1338  086F               	movf	_DimmerLights,w
  6048  1339  3E0A               	addlw	10
  6049  133A  0086               	movwf	6
  6050  133B  3001               	movlw	1	; select bank2/3
  6051  133C  0087               	movwf	7
  6052  133D  1581               	bsf	1,3
  6053                           
  6054                           ;Dimmer_B1.c: 578: DimmerLights->AdjGo = 1;
  6055  133E  086F               	movf	_DimmerLights,w
  6056  133F  3E0A               	addlw	10
  6057  1340  0086               	movwf	6
  6058  1341  3001               	movlw	1	; select bank2/3
  6059  1342  0087               	movwf	7
  6060  1343  1501               	bsf	1,2
  6061  1344  0008               	return
  6062  1345                     __end_of_setDimmerLights_AdjControl:	
  6063                           
  6064                           	psect	text16
  6065  1D3F                     __ptext16:	
  6066 ;; *************** function _getSw_KeyStatus *****************
  6067 ;; Defined at:
  6068 ;;		line 222 in file "../src/Switch_B1.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  sw              1    wreg     unsigned char 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  sw              1    0[COMMON] unsigned char 
  6073 ;;  status          1    1[BANK0 ] unsigned char 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      unsigned char 
  6076 ;; Registers used:
  6077 ;;		wreg, status,2
  6078 ;; Tracked objects:
  6079 ;;		On entry : 0/0
  6080 ;;		On exit  : 0/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;Total ram usage:        3 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:    5
  6090 ;; This function calls:
  6091 ;;		Nothing
  6092 ;; This function is called by:
  6093 ;;		_setSw_Main
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           
  6098                           ;psect for function _getSw_KeyStatus
  6099  1D3F                     _getSw_KeyStatus:	
  6100                           
  6101                           ;Switch_B1.c: 223: char status = 0;
  6102                           
  6103                           ;incstack = 0
  6104                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6105  1D3F  0020               	movlb	0	; select bank0
  6106  1D40  01A1               	clrf	getSw_KeyStatus@status
  6107                           
  6108                           ;Switch_B1.c: 243: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6109  1D41  01A2               	clrf	_getSw_KeyStatus$5977
  6110  1D42  0AA2               	incf	_getSw_KeyStatus$5977,f
  6111  1D43  1F0C               	btfss	12,6	;volatile
  6112  1D44  1A0C               	btfsc	12,4	;volatile
  6113  1D45  2D4A               	goto	l6744
  6114  1D46  1C0C               	btfss	12,0	;volatile
  6115  1D47  1B8C               	btfsc	12,7	;volatile
  6116  1D48  2D4A               	goto	l6744
  6117  1D49  01A2               	clrf	_getSw_KeyStatus$5977
  6118  1D4A                     l6744:	
  6119  1D4A  0822               	movf	_getSw_KeyStatus$5977,w
  6120  1D4B  00A0               	movwf	??_getSw_KeyStatus
  6121  1D4C  0820               	movf	??_getSw_KeyStatus,w
  6122  1D4D  00A1               	movwf	getSw_KeyStatus@status
  6123                           
  6124                           ;Switch_B1.c: 246: return status;
  6125  1D4E  0821               	movf	getSw_KeyStatus@status,w
  6126  1D4F  0008               	return
  6127  1D50                     __end_of_getSw_KeyStatus:	
  6128                           
  6129                           	psect	text17
  6130  1C58                     __ptext17:	
  6131 ;; *************** function _SwPointSelect *****************
  6132 ;; Defined at:
  6133 ;;		line 25 in file "../src/Switch_B1.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  sw              1    wreg     unsigned char 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  sw              1    1[BANK0 ] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;		None               void
  6140 ;; Registers used:
  6141 ;;		wreg
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;Total ram usage:        2 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    5
  6154 ;; This function calls:
  6155 ;;		Nothing
  6156 ;; This function is called by:
  6157 ;;		_setSw_Main
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           
  6162                           ;psect for function _SwPointSelect
  6163  1C58                     _SwPointSelect:	
  6164                           
  6165                           ;incstack = 0
  6166                           ; Regs used in _SwPointSelect: [wreg]
  6167                           ;SwPointSelect@sw stored from wreg
  6168  1C58  0020               	movlb	0	; select bank0
  6169  1C59  00A1               	movwf	SwPointSelect@sw
  6170                           
  6171                           ;Switch_B1.c: 28: if (sw == 1) {
  6172  1C5A  0821               	movf	SwPointSelect@sw,w
  6173  1C5B  3A01               	xorlw	1
  6174  1C5C  1D03               	skipz
  6175  1C5D  0008               	return
  6176                           
  6177                           ;Switch_B1.c: 29: Sw = &Sw1;
  6178  1C5E  30D6               	movlw	_Sw1& (0+255)
  6179  1C5F  00A0               	movwf	??_SwPointSelect
  6180  1C60  0820               	movf	??_SwPointSelect,w
  6181  1C61  00FC               	movwf	_Sw
  6182  1C62  0008               	return
  6183  1C63                     __end_of_SwPointSelect:	
  6184                           
  6185                           	psect	text18
  6186  1BEE                     __ptext18:	
  6187 ;; *************** function _Switch_Initialization *****************
  6188 ;; Defined at:
  6189 ;;		line 46 in file "../src/Switch_B1.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;		None
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;		None               void
  6196 ;; Registers used:
  6197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;Total ram usage:        0 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    8
  6210 ;; This function calls:
  6211 ;;		_TouchPower
  6212 ;;		_setSw_Initialization
  6213 ;; This function is called by:
  6214 ;;		_main
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           
  6219                           ;psect for function _Switch_Initialization
  6220  1BEE                     _Switch_Initialization:	
  6221                           
  6222                           ;Switch_B1.c: 47: TouchPower();
  6223                           
  6224                           ;incstack = 0
  6225                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6226  1BEE  3187  27EB  319B   	fcall	_TouchPower
  6227                           
  6228                           ;Switch_B1.c: 49: WPUB1 = 0;
  6229  1BF1  0024               	movlb	4	; select bank4
  6230  1BF2  108D               	bcf	13,1	;volatile
  6231                           
  6232                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6233  1BF3  3001               	movlw	1
  6234  1BF4  319C  24EB         	fcall	_setSw_Initialization
  6235  1BF6  0008               	return
  6236  1BF7                     __end_of_Switch_Initialization:	
  6237                           
  6238                           	psect	text19
  6239  1CEB                     __ptext19:	
  6240 ;; *************** function _setSw_Initialization *****************
  6241 ;; Defined at:
  6242 ;;		line 93 in file "../src/Switch_B1.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  sw              1    wreg     unsigned char 
  6245 ;; Auto vars:     Size  Location     Type
  6246 ;;  sw              1    4[BANK0 ] unsigned char 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;		None               void
  6249 ;; Registers used:
  6250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;Total ram usage:        1 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    7
  6263 ;; This function calls:
  6264 ;;		_setLED
  6265 ;; This function is called by:
  6266 ;;		_Switch_Initialization
  6267 ;; This function uses a non-reentrant model
  6268 ;;
  6269                           
  6270                           
  6271                           ;psect for function _setSw_Initialization
  6272  1CEB                     _setSw_Initialization:	
  6273                           
  6274                           ;incstack = 0
  6275                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6276                           ;setSw_Initialization@sw stored from wreg
  6277  1CEB  0020               	movlb	0	; select bank0
  6278  1CEC  00A4               	movwf	setSw_Initialization@sw
  6279                           
  6280                           ;Switch_B1.c: 94: setLED(sw, 1);
  6281  1CED  01A2               	clrf	setLED@command
  6282  1CEE  0AA2               	incf	setLED@command,f
  6283  1CEF  0824               	movf	setSw_Initialization@sw,w
  6284  1CF0  3191  21F2  319C   	fcall	_setLED
  6285                           
  6286                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6287  1CF3  0020               	movlb	0	; select bank0
  6288  1CF4  01A2               	clrf	setLED@command
  6289  1CF5  0AA2               	incf	setLED@command,f
  6290  1CF6  0824               	movf	setSw_Initialization@sw,w
  6291  1CF7  3E01               	addlw	1
  6292  1CF8  3191  21F2         	fcall	_setLED
  6293  1CFA  0008               	return
  6294  1CFB                     __end_of_setSw_Initialization:	
  6295                           
  6296                           	psect	text20
  6297  07EB                     __ptext20:	
  6298 ;; *************** function _TouchPower *****************
  6299 ;; Defined at:
  6300 ;;		line 10 in file "../src/Switch_B1.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;		None
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;		None
  6305 ;; Return value:  Size  Location     Type
  6306 ;;		None               void
  6307 ;; Registers used:
  6308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;Total ram usage:        0 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    6
  6321 ;; This function calls:
  6322 ;;		_Timeout_Counter
  6323 ;;		_set_TimeoutCleared
  6324 ;; This function is called by:
  6325 ;;		_Switch_Initialization
  6326 ;;		_Switch_Main
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           
  6331                           ;psect for function _TouchPower
  6332  07EB                     _TouchPower:	
  6333                           
  6334                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6335                           
  6336                           ;incstack = 0
  6337                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6338  07EB  0020               	movlb	0	; select bank0
  6339  07EC  180D               	btfsc	13,0	;volatile
  6340  07ED  0008               	return
  6341                           
  6342                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6343  07EE  0021               	movlb	1	; select bank1
  6344  07EF  1C20               	btfss	_myMain^(0+128),0
  6345  07F0  0008               	return
  6346  07F1  2FF7               	goto	l7298
  6347  07F2                     l2385:	
  6348                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6349                           
  6350                           
  6351                           ;Switch_B1.c: 14: RB0 = 1;
  6352  07F2  0020               	movlb	0	; select bank0
  6353  07F3  140D               	bsf	13,0	;volatile
  6354                           
  6355                           ;Switch_B1.c: 15: Timeout_Counter();
  6356  07F4  319D  25D4  3187   	fcall	_Timeout_Counter
  6357  07F7                     l7298:	
  6358  07F7  0020               	movlb	0	; select bank0
  6359  07F8  180D               	btfsc	13,0	;volatile
  6360  07F9  2FFD               	goto	l7302
  6361  07FA  0021               	movlb	1	; select bank1
  6362  07FB  1D2B               	btfss	(_myMain^(0+128)+11),2
  6363  07FC  2FF2               	goto	l2385
  6364  07FD                     l7302:	
  6365                           
  6366                           ;Switch_B1.c: 16: }
  6367                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6368  07FD  319B  23A2         	fcall	_set_TimeoutCleared
  6369  07FF  0008               	return
  6370  0800                     __end_of_TouchPower:	
  6371                           
  6372                           	psect	text21
  6373  1B71                     __ptext21:	
  6374 ;; *************** function _RF_Main *****************
  6375 ;; Defined at:
  6376 ;;		line 16 in file "../src/RF_Control_B1.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;		None
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;		None
  6381 ;; Return value:  Size  Location     Type
  6382 ;;		None               void
  6383 ;; Registers used:
  6384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:        0 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:   14
  6397 ;; This function calls:
  6398 ;;		_setRF_Main
  6399 ;; This function is called by:
  6400 ;;		_main
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           
  6405                           ;psect for function _RF_Main
  6406  1B71                     _RF_Main:	
  6407                           
  6408                           ;RF_Control_B1.c: 18: setRF_Main();
  6409                           
  6410                           ;incstack = 0
  6411                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6412  1B71  3185  2571         	fcall	_setRF_Main
  6413  1B73  0008               	return
  6414  1B74                     __end_of_RF_Main:	
  6415                           
  6416                           	psect	text22
  6417  0571                     __ptext22:	
  6418 ;; *************** function _setRF_Main *****************
  6419 ;; Defined at:
  6420 ;;		line 52 in file "../src/RF_Control_B1.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;		None
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;  error           1    2[BANK1 ] unsigned char 
  6425 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6426 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6427 ;; Return value:  Size  Location     Type
  6428 ;;		None               void
  6429 ;; Registers used:
  6430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;Total ram usage:        4 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:   13
  6443 ;; This function calls:
  6444 ;;		_CC2500_RxData
  6445 ;;		_CC2500_TxData
  6446 ;;		_CC2500_WriteCommand
  6447 ;;		_RF_RxDisable
  6448 ;;		_getBuz_GO
  6449 ;;		_getMain_All_Error_Status
  6450 ;;		_getRF_KeyStatus
  6451 ;;		_getRxData
  6452 ;; This function is called by:
  6453 ;;		_RF_Main
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           
  6458                           ;psect for function _setRF_Main
  6459  0571                     _setRF_Main:	
  6460                           
  6461                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6462                           
  6463                           ;incstack = 0
  6464                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6465  0571  0021               	movlb	1	; select bank1
  6466  0572  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6467  0573  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6468  0574  01EB               	clrf	setRF_Main@error^(0+128)
  6469                           
  6470                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6471  0575  1C3A               	btfss	_RF1^(0+128),0
  6472  0576  2E4C               	goto	l2022
  6473                           
  6474                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6475  0577  319D  251D  3185   	fcall	_getBuz_GO
  6476  057A  0020               	movlb	0	; select bank0
  6477  057B  0821               	movf	?_getBuz_GO+1,w
  6478  057C  0420               	iorwf	?_getBuz_GO,w
  6479  057D  1D03               	skipz
  6480  057E  0008               	return
  6481                           
  6482                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6483  057F  3000               	movlw	0
  6484  0580  3191  218C  3185   	fcall	_getMain_All_Error_Status
  6485  0583  3800               	iorlw	0
  6486  0584  1D03               	skipz
  6487  0585  2D9A               	goto	l2024
  6488                           
  6489                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6490  0586  319D  252E  3185   	fcall	_getRF_KeyStatus
  6491  0589  3A01               	xorlw	1
  6492  058A  3000               	movlw	0
  6493  058B  1903               	skipnz
  6494  058C  3001               	movlw	1
  6495  058D  0020               	movlb	0	; select bank0
  6496  058E  00ED               	movwf	??_setRF_Main
  6497  058F  0CED               	rrf	??_setRF_Main,f
  6498  0590  0CED               	rrf	??_setRF_Main,f
  6499  0591  0021               	movlb	1	; select bank1
  6500  0592  083A               	movf	_RF1^(0+128),w
  6501  0593  0020               	movlb	0	; select bank0
  6502  0594  066D               	xorwf	??_setRF_Main,w
  6503  0595  397F               	andlw	-129
  6504  0596  066D               	xorwf	??_setRF_Main,w
  6505  0597  0021               	movlb	1	; select bank1
  6506  0598  00BA               	movwf	_RF1^(0+128)
  6507                           
  6508                           ;RF_Control_B1.c: 65: } else {
  6509  0599  2D9C               	goto	l2025
  6510  059A                     l2024:	
  6511                           
  6512                           ;RF_Control_B1.c: 66: RF1.Key = 0;
  6513  059A  0021               	movlb	1	; select bank1
  6514  059B  13BA               	bcf	_RF1^(0+128),7
  6515  059C                     l2025:	
  6516                           
  6517                           ;RF_Control_B1.c: 67: }
  6518                           ;RF_Control_B1.c: 69: if (RF1.Key == 1 && RF1.Learn == 0) {
  6519  059C  1BBA               	btfsc	_RF1^(0+128),7
  6520  059D  1B3A               	btfsc	_RF1^(0+128),6
  6521  059E  2DA4               	goto	l2026
  6522                           
  6523                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6524  059F  01BC               	clrf	(_RF1^(0+128)+2)
  6525  05A0  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6526                           
  6527                           ;RF_Control_B1.c: 71: RF1.Run = 1;
  6528  05A1  14BB               	bsf	(_RF1^(0+128)+1),1
  6529                           
  6530                           ;RF_Control_B1.c: 72: RF1.RxStatus = 0;
  6531  05A2  11BA               	bcf	_RF1^(0+128),3
  6532                           
  6533                           ;RF_Control_B1.c: 73: } else {
  6534  05A3  0008               	return
  6535  05A4                     l2026:	
  6536                           
  6537                           ;RF_Control_B1.c: 74: if (RF1.Run == 1 && RF1.Learn == 0) {
  6538  05A4  18BB               	btfsc	(_RF1^(0+128)+1),1
  6539  05A5  1B3A               	btfsc	_RF1^(0+128),6
  6540  05A6  2DBB               	goto	l7216
  6541                           
  6542                           ;RF_Control_B1.c: 75: RF1.Count++;
  6543  05A7  3001               	movlw	1
  6544  05A8  07BC               	addwf	(_RF1^(0+128)+2),f
  6545  05A9  3000               	movlw	0
  6546  05AA  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6547                           
  6548                           ;RF_Control_B1.c: 76: if (RF1.Count == RF1.RunTime) {
  6549  05AB  3002               	movlw	2
  6550  05AC  3EBA               	addlw	_RF1& (0+255)
  6551  05AD  0086               	movwf	6
  6552  05AE  0187               	clrf	7
  6553  05AF  3F40               	moviw [0]fsr1
  6554  05B0  0641               	xorwf	(_RF1^(0+128)+7),w
  6555  05B1  1D03               	skipz
  6556  05B2  2DB5               	goto	u6785
  6557  05B3  3F41               	moviw [1]fsr1
  6558  05B4  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6559  05B5                     u6785:	
  6560  05B5  1D03               	skipz
  6561  05B6  2E19               	goto	l7268
  6562                           
  6563                           ;RF_Control_B1.c: 77: RF1.Count = 0;
  6564  05B7  01BC               	clrf	(_RF1^(0+128)+2)
  6565  05B8  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6566                           
  6567                           ;RF_Control_B1.c: 78: RF1.Run = 0;
  6568  05B9  10BB               	bcf	(_RF1^(0+128)+1),1
  6569                           
  6570                           ;RF_Control_B1.c: 79: }
  6571                           ;RF_Control_B1.c: 80: } else {
  6572  05BA  2E19               	goto	l7268
  6573  05BB                     l7216:	
  6574                           
  6575                           ;RF_Control_B1.c: 81: RF1.Count = 0;
  6576  05BB  01BC               	clrf	(_RF1^(0+128)+2)
  6577  05BC  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6578                           
  6579                           ;RF_Control_B1.c: 82: RF1.Run = 0;
  6580  05BD  10BB               	bcf	(_RF1^(0+128)+1),1
  6581                           
  6582                           ;RF_Control_B1.c: 84: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6583  05BE  193A               	btfsc	_RF1^(0+128),2
  6584  05BF  1B3A               	btfsc	_RF1^(0+128),6
  6585  05C0  2DCF               	goto	l2031
  6586                           
  6587                           ;RF_Control_B1.c: 85: RF1.TransceiveGO = 0;
  6588  05C1  113A               	bcf	_RF1^(0+128),2
  6589                           
  6590                           ;RF_Control_B1.c: 86: RF1.RxStatus = 0;
  6591  05C2  11BA               	bcf	_RF1^(0+128),3
  6592                           
  6593                           ;RF_Control_B1.c: 87: RF1.ReceiveGO = 0;
  6594  05C3  10BA               	bcf	_RF1^(0+128),1
  6595                           
  6596                           ;RF_Control_B1.c: 88: RF1.RunTime = 5;
  6597  05C4  3005               	movlw	5
  6598  05C5  00C1               	movwf	(_RF1^(0+128)+7)
  6599  05C6  3000               	movlw	0
  6600  05C7  00C2               	movwf	(_RF1^(0+128)+8)
  6601                           
  6602                           ;RF_Control_B1.c: 92: RF_RxDisable();
  6603  05C8  319C  24BC  3185   	fcall	_RF_RxDisable
  6604                           
  6605                           ;RF_Control_B1.c: 99: CC2500_TxData();
  6606  05CB  3189  212D  3185   	fcall	_CC2500_TxData
  6607                           
  6608                           ;RF_Control_B1.c: 101: } else {
  6609  05CE  2E19               	goto	l7268
  6610  05CF                     l2031:	
  6611                           
  6612                           ;RF_Control_B1.c: 103: if (RF1.RxStatus == 1) {
  6613  05CF  1DBA               	btfss	_RF1^(0+128),3
  6614  05D0  2E08               	goto	l2033
  6615                           
  6616                           ;RF_Control_B1.c: 105: CC2500_RxData();
  6617  05D1  318A  22BB  3185   	fcall	_CC2500_RxData
  6618                           
  6619                           ;RF_Control_B1.c: 107: if (RF1.ReceiveGO == 1) {
  6620  05D4  0021               	movlb	1	; select bank1
  6621  05D5  1CBA               	btfss	_RF1^(0+128),1
  6622  05D6  2E19               	goto	l7268
  6623                           
  6624                           ;RF_Control_B1.c: 108: RF1.ReceiveGO = 0;
  6625  05D7  10BA               	bcf	_RF1^(0+128),1
  6626                           
  6627                           ;RF_Control_B1.c: 109: RF1.Correction = 0;
  6628  05D8  12BB               	bcf	(_RF1^(0+128)+1),5
  6629                           
  6630                           ;RF_Control_B1.c: 110: RF1.CorrectionCounter = 0;
  6631  05D9  01C4               	clrf	(_RF1^(0+128)+10)
  6632  05DA  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6633                           
  6634                           ;RF_Control_B1.c: 121: getRxData();
  6635  05DB  318C  24B3  3185   	fcall	_getRxData
  6636                           
  6637                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6638  05DE  0021               	movlb	1	; select bank1
  6639  05DF  14BB               	bsf	(_RF1^(0+128)+1),1
  6640                           
  6641                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  6642  05E0  1DBB               	btfss	(_RF1^(0+128)+1),3
  6643  05E1  2DEF               	goto	l7252
  6644                           
  6645                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 5) {
  6646  05E2  3000               	movlw	0
  6647  05E3  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6648  05E4  3006               	movlw	6
  6649  05E5  1903               	skipnz
  6650  05E6  0241               	subwf	(_RF1^(0+128)+7),w
  6651  05E7  1C03               	skipc
  6652  05E8  2DED               	goto	l7250
  6653                           
  6654                           ;RF_Control_B1.c: 126: RF1.RunTime = 5;
  6655  05E9  3005               	movlw	5
  6656  05EA  00C1               	movwf	(_RF1^(0+128)+7)
  6657  05EB  3000               	movlw	0
  6658  05EC  00C2               	movwf	(_RF1^(0+128)+8)
  6659  05ED                     l7250:	
  6660                           
  6661                           ;RF_Control_B1.c: 127: }
  6662                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6663  05ED  01BE               	clrf	(_RF1^(0+128)+4)
  6664                           
  6665                           ;RF_Control_B1.c: 129: } else {
  6666  05EE  2E19               	goto	l7268
  6667  05EF                     l7252:	
  6668                           
  6669                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  6670  05EF  3001               	movlw	1
  6671  05F0  0020               	movlb	0	; select bank0
  6672  05F1  00ED               	movwf	??_setRF_Main
  6673  05F2  086D               	movf	??_setRF_Main,w
  6674  05F3  0021               	movlb	1	; select bank1
  6675  05F4  07BE               	addwf	(_RF1^(0+128)+4),f
  6676                           
  6677                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  6678  05F5  083E               	movf	(_RF1^(0+128)+4),w
  6679  05F6  3A02               	xorlw	2
  6680  05F7  1D03               	skipz
  6681  05F8  2E19               	goto	l7268
  6682                           
  6683                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6684  05F9  01BE               	clrf	(_RF1^(0+128)+4)
  6685                           
  6686                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  6687  05FA  01BF               	clrf	(_RF1^(0+128)+5)
  6688  05FB  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6689                           
  6690                           ;RF_Control_B1.c: 135: if (RF1.RunTime < (5 * 20)) {
  6691  05FC  3000               	movlw	0
  6692  05FD  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6693  05FE  3064               	movlw	100
  6694  05FF  1903               	skipnz
  6695  0600  0241               	subwf	(_RF1^(0+128)+7),w
  6696  0601  1803               	skipnc
  6697  0602  2E19               	goto	l7268
  6698                           
  6699                           ;RF_Control_B1.c: 136: RF1.RunTime += 5;
  6700  0603  3005               	movlw	5
  6701  0604  07C1               	addwf	(_RF1^(0+128)+7),f
  6702  0605  3000               	movlw	0
  6703  0606  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  6704                           
  6705                           ;RF_Control_B1.c: 137: }
  6706                           ;RF_Control_B1.c: 138: }
  6707                           ;RF_Control_B1.c: 139: }
  6708                           ;RF_Control_B1.c: 140: }
  6709                           ;RF_Control_B1.c: 141: } else {
  6710  0607  2E19               	goto	l7268
  6711  0608                     l2033:	
  6712                           
  6713                           ;RF_Control_B1.c: 143: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6714  0608  1DBA               	btfss	_RF1^(0+128),3
  6715  0609  18BA               	btfsc	_RF1^(0+128),1
  6716  060A  2E19               	goto	l7268
  6717                           
  6718                           ;RF_Control_B1.c: 144: RF1.RxStatus = 1;
  6719  060B  15BA               	bsf	_RF1^(0+128),3
  6720                           
  6721                           ;RF_Control_B1.c: 145: RF1.Correction = 1;
  6722  060C  16BB               	bsf	(_RF1^(0+128)+1),5
  6723                           
  6724                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x36);
  6725  060D  3036               	movlw	54
  6726  060E  319E  262D  3185   	fcall	_CC2500_WriteCommand
  6727                           
  6728                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x3A);
  6729  0611  303A               	movlw	58
  6730  0612  319E  262D  3185   	fcall	_CC2500_WriteCommand
  6731                           
  6732                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x34);
  6733  0615  3034               	movlw	52
  6734  0616  319E  262D  3185   	fcall	_CC2500_WriteCommand
  6735  0619                     l7268:	
  6736                           
  6737                           ;RF_Control_B1.c: 151: }
  6738                           ;RF_Control_B1.c: 153: }
  6739                           ;RF_Control_B1.c: 154: }
  6740                           ;RF_Control_B1.c: 155: }
  6741                           ;RF_Control_B1.c: 157: if (RF1.RxStatus == 1) {
  6742  0619  0021               	movlb	1	; select bank1
  6743  061A  1DBA               	btfss	_RF1^(0+128),3
  6744  061B  2E3A               	goto	l7280
  6745                           
  6746                           ;RF_Control_B1.c: 158: RF1.CheckedCounter++;
  6747  061C  3001               	movlw	1
  6748  061D  07BF               	addwf	(_RF1^(0+128)+5),f
  6749  061E  3000               	movlw	0
  6750  061F  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  6751                           
  6752                           ;RF_Control_B1.c: 159: if (RF1.CheckedCounter == 100) {
  6753  0620  3005               	movlw	5
  6754  0621  3EBA               	addlw	_RF1& (0+255)
  6755  0622  0086               	movwf	6
  6756  0623  0187               	clrf	7
  6757  0624  3F40               	moviw [0]fsr1
  6758  0625  3A64               	xorlw	100
  6759  0626  1D03               	skipz
  6760  0627  2E2A               	goto	u6905
  6761  0628  3F41               	moviw [1]fsr1
  6762  0629  3A00               	xorlw	0
  6763  062A                     u6905:	
  6764  062A  1D03               	skipz
  6765  062B  2E3A               	goto	l7280
  6766                           
  6767                           ;RF_Control_B1.c: 160: RF1.CheckedCounter = 0;
  6768  062C  01BF               	clrf	(_RF1^(0+128)+5)
  6769  062D  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6770                           
  6771                           ;RF_Control_B1.c: 161: RF1.CheckCount = 0;
  6772  062E  01BE               	clrf	(_RF1^(0+128)+4)
  6773                           
  6774                           ;RF_Control_B1.c: 162: if (RF1.RunTime > 5) {
  6775  062F  3000               	movlw	0
  6776  0630  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6777  0631  3006               	movlw	6
  6778  0632  1903               	skipnz
  6779  0633  0241               	subwf	(_RF1^(0+128)+7),w
  6780  0634  1C03               	skipc
  6781  0635  2E3A               	goto	l7280
  6782                           
  6783                           ;RF_Control_B1.c: 163: RF1.RunTime -= 5;
  6784  0636  3005               	movlw	5
  6785  0637  02C1               	subwf	(_RF1^(0+128)+7),f
  6786  0638  3000               	movlw	0
  6787  0639  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  6788  063A                     l7280:	
  6789                           
  6790                           ;RF_Control_B1.c: 164: }
  6791                           ;RF_Control_B1.c: 165: }
  6792                           ;RF_Control_B1.c: 166: }
  6793                           ;RF_Control_B1.c: 167: if (RF1.Correction == 1) {
  6794  063A  1EBB               	btfss	(_RF1^(0+128)+1),5
  6795  063B  0008               	return
  6796                           
  6797                           ;RF_Control_B1.c: 168: RF1.CorrectionCounter++;
  6798  063C  3001               	movlw	1
  6799  063D  07C4               	addwf	(_RF1^(0+128)+10),f
  6800  063E  3000               	movlw	0
  6801  063F  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  6802                           
  6803                           ;RF_Control_B1.c: 169: if (RF1.CorrectionCounter >= 6000) {
  6804  0640  3017               	movlw	23
  6805  0641  0245               	subwf	((_RF1+1)^(0+128)+10),w
  6806  0642  3070               	movlw	112
  6807  0643  1903               	skipnz
  6808  0644  0244               	subwf	(_RF1^(0+128)+10),w
  6809  0645  1C03               	skipc
  6810  0646  0008               	return
  6811                           
  6812                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter = 0;
  6813  0647  01C4               	clrf	(_RF1^(0+128)+10)
  6814  0648  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6815                           
  6816                           ;RF_Control_B1.c: 171: RF_RxDisable();
  6817  0649  319C  24BC         	fcall	_RF_RxDisable
  6818                           
  6819                           ;RF_Control_B1.c: 172: }
  6820                           ;RF_Control_B1.c: 173: }
  6821                           ;RF_Control_B1.c: 174: }
  6822                           ;RF_Control_B1.c: 175: }
  6823                           ;RF_Control_B1.c: 182: } else {
  6824  064B  0008               	return
  6825  064C                     l2022:	
  6826                           
  6827                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  6828  064C  1C20               	btfss	_myMain^(0+128),0
  6829  064D  0008               	return
  6830                           
  6831                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  6832  064E  143A               	bsf	_RF1^(0+128),0
  6833  064F  0008               	return
  6834  0650                     __end_of_setRF_Main:	
  6835                           
  6836                           	psect	text23
  6837  0CB3                     __ptext23:	
  6838 ;; *************** function _getRxData *****************
  6839 ;; Defined at:
  6840 ;;		line 278 in file "../src/RF_Control_B1.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;  error           1   76[BANK0 ] unsigned char 
  6845 ;; Return value:  Size  Location     Type
  6846 ;;		None               void
  6847 ;; Registers used:
  6848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6849 ;; Tracked objects:
  6850 ;;		On entry : 0/0
  6851 ;;		On exit  : 0/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;Total ram usage:        2 bytes
  6859 ;; Hardware stack levels used:    1
  6860 ;; Hardware stack levels required when called:   12
  6861 ;; This function calls:
  6862 ;;		_getMain_All_Error_Status
  6863 ;;		_setControl_Lights_Table
  6864 ;;		_setLog_Code
  6865 ;;		_setTxData
  6866 ;; This function is called by:
  6867 ;;		_setRF_Main
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           
  6872                           ;psect for function _getRxData
  6873  0CB3                     _getRxData:	
  6874                           
  6875                           ;RF_Control_B1.c: 279: char error = getMain_All_Error_Status(0);
  6876                           
  6877                           ;incstack = 0
  6878                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6879  0CB3  3000               	movlw	0
  6880  0CB4  3191  218C  318C   	fcall	_getMain_All_Error_Status
  6881  0CB7  0020               	movlb	0	; select bank0
  6882  0CB8  00EB               	movwf	??_getRxData
  6883  0CB9  086B               	movf	??_getRxData,w
  6884  0CBA  00EC               	movwf	getRxData@error
  6885                           
  6886                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6887  0CBB  0022               	movlb	2	; select bank2
  6888  0CBC  0820               	movf	_RF_Data^(0+256),w
  6889  0CBD  3AAA               	xorlw	170
  6890  0CBE  1D03               	skipz
  6891  0CBF  2CD6               	goto	l6680
  6892  0CC0  0821               	movf	(_RF_Data^(0+256)+1),w
  6893  0CC1  3A01               	xorlw	1
  6894  0CC2  1D03               	skipz
  6895  0CC3  2CD6               	goto	l6680
  6896                           
  6897                           ;RF_Control_B1.c: 282: product->Data[2] = 0x55;
  6898  0CC4  3055               	movlw	85
  6899  0CC5  0020               	movlb	0	; select bank0
  6900  0CC6  00EB               	movwf	??_getRxData
  6901  0CC7  086E               	movf	_product,w
  6902  0CC8  3E02               	addlw	2
  6903  0CC9  0086               	movwf	6
  6904  0CCA  3002               	movlw	2	; select bank4/5
  6905  0CCB  0087               	movwf	7
  6906  0CCC  086B               	movf	??_getRxData,w
  6907  0CCD  0081               	movwf	1
  6908                           
  6909                           ;RF_Control_B1.c: 283: setTxData();
  6910  0CCE  3187  272C         	fcall	_setTxData
  6911                           
  6912                           ;RF_Control_B1.c: 284: RF1.RunTime = 10;
  6913  0CD0  300A               	movlw	10
  6914  0CD1  0021               	movlb	1	; select bank1
  6915  0CD2  00C1               	movwf	(_RF1^(0+128)+7)
  6916  0CD3  3000               	movlw	0
  6917  0CD4  00C2               	movwf	(_RF1^(0+128)+8)
  6918                           
  6919                           ;RF_Control_B1.c: 290: } else {
  6920  0CD5  0008               	return
  6921  0CD6                     l6680:	
  6922                           
  6923                           ;RF_Control_B1.c: 292: if (error == 0) {
  6924  0CD6  0020               	movlb	0	; select bank0
  6925  0CD7  08EC               	movf	getRxData@error,f
  6926  0CD8  1D03               	skipz
  6927  0CD9  0008               	return
  6928                           
  6929                           ;RF_Control_B1.c: 293: if (RF1.Learn == 1) {
  6930  0CDA  0021               	movlb	1	; select bank1
  6931  0CDB  1F3A               	btfss	_RF1^(0+128),6
  6932  0CDC  2CED               	goto	l6692
  6933                           
  6934                           ;RF_Control_B1.c: 294: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6935  0CDD  0022               	movlb	2	; select bank2
  6936  0CDE  08A0               	movf	_RF_Data^(0+256),f
  6937  0CDF  1D03               	skipz
  6938  0CE0  2CEA               	goto	l2075
  6939  0CE1  0821               	movf	(_RF_Data^(0+256)+1),w
  6940  0CE2  3A64               	xorlw	100
  6941  0CE3  1D03               	skipz
  6942  0CE4  2CEA               	goto	l2075
  6943                           
  6944                           ;RF_Control_B1.c: 295: setLog_Code();
  6945  0CE5  3192  225E         	fcall	_setLog_Code
  6946                           
  6947                           ;RF_Control_B1.c: 296: RF1.Checked = 1;
  6948  0CE7  0021               	movlb	1	; select bank1
  6949  0CE8  15BB               	bsf	(_RF1^(0+128)+1),3
  6950                           
  6951                           ;RF_Control_B1.c: 297: } else {
  6952  0CE9  0008               	return
  6953  0CEA                     l2075:	
  6954                           
  6955                           ;RF_Control_B1.c: 298: RF1.Checked = 0;
  6956  0CEA  0021               	movlb	1	; select bank1
  6957  0CEB  11BB               	bcf	(_RF1^(0+128)+1),3
  6958                           
  6959                           ;RF_Control_B1.c: 299: }
  6960                           ;RF_Control_B1.c: 300: } else {
  6961  0CEC  0008               	return
  6962  0CED                     l6692:	
  6963                           
  6964                           ;RF_Control_B1.c: 301: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6965  0CED  0022               	movlb	2	; select bank2
  6966  0CEE  08A0               	movf	_RF_Data^(0+256),f
  6967  0CEF  1D03               	skipz
  6968  0CF0  2D2B               	goto	l6714
  6969  0CF1  0821               	movf	(_RF_Data^(0+256)+1),w
  6970  0CF2  3A02               	xorlw	2
  6971  0CF3  1D03               	skipz
  6972  0CF4  2D2B               	goto	l6714
  6973                           
  6974                           ;RF_Control_B1.c: 303: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6975  0CF5  082C               	movf	(_RF_Data^(0+256)+12),w
  6976  0CF6  3AFF               	xorlw	255
  6977  0CF7  1D03               	skipz
  6978  0CF8  2D05               	goto	l6704
  6979  0CF9  082D               	movf	(_RF_Data^(0+256)+13),w
  6980  0CFA  3AFF               	xorlw	255
  6981  0CFB  1D03               	skipz
  6982  0CFC  2D05               	goto	l6704
  6983  0CFD  082E               	movf	(_RF_Data^(0+256)+14),w
  6984  0CFE  3AFF               	xorlw	255
  6985  0CFF  1D03               	skipz
  6986  0D00  2D05               	goto	l6704
  6987                           
  6988                           ;RF_Control_B1.c: 304: __nop();
  6989  0D01  0000               	nop
  6990                           
  6991                           ;RF_Control_B1.c: 305: RF1.Checked = 0;
  6992  0D02  0021               	movlb	1	; select bank1
  6993  0D03  11BB               	bcf	(_RF1^(0+128)+1),3
  6994                           
  6995                           ;RF_Control_B1.c: 306: } else {
  6996  0D04  0008               	return
  6997  0D05                     l6704:	
  6998                           
  6999                           ;RF_Control_B1.c: 307: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7000  0D05  0020               	movlb	0	; select bank0
  7001  0D06  086E               	movf	_product,w
  7002  0D07  3E0C               	addlw	12
  7003  0D08  0086               	movwf	6
  7004  0D09  3002               	movlw	2	; select bank4/5
  7005  0D0A  0087               	movwf	7
  7006  0D0B  0022               	movlb	2	; select bank2
  7007  0D0C  082C               	movf	(_RF_Data^(0+256)+12),w
  7008  0D0D  0601               	xorwf	1,w
  7009  0D0E  1D03               	skipz
  7010  0D0F  0008               	return
  7011  0D10  0020               	movlb	0	; select bank0
  7012  0D11  086E               	movf	_product,w
  7013  0D12  3E0D               	addlw	13
  7014  0D13  0086               	movwf	6
  7015  0D14  3002               	movlw	2	; select bank4/5
  7016  0D15  0087               	movwf	7
  7017  0D16  0022               	movlb	2	; select bank2
  7018  0D17  082D               	movf	(_RF_Data^(0+256)+13),w
  7019  0D18  0601               	xorwf	1,w
  7020  0D19  1D03               	skipz
  7021  0D1A  0008               	return
  7022  0D1B  0020               	movlb	0	; select bank0
  7023  0D1C  086E               	movf	_product,w
  7024  0D1D  3E0E               	addlw	14
  7025  0D1E  0086               	movwf	6
  7026  0D1F  3002               	movlw	2	; select bank4/5
  7027  0D20  0087               	movwf	7
  7028  0D21  0022               	movlb	2	; select bank2
  7029  0D22  082E               	movf	(_RF_Data^(0+256)+14),w
  7030  0D23  0601               	xorwf	1,w
  7031  0D24  1D03               	skipz
  7032  0D25  0008               	return
  7033                           
  7034                           ;RF_Control_B1.c: 308: setControl_Lights_Table();
  7035  0D26  3188  206C         	fcall	_setControl_Lights_Table
  7036                           
  7037                           ;RF_Control_B1.c: 309: RF1.Checked = 1;
  7038  0D28  0021               	movlb	1	; select bank1
  7039  0D29  15BB               	bsf	(_RF1^(0+128)+1),3
  7040                           
  7041                           ;RF_Control_B1.c: 310: }
  7042                           ;RF_Control_B1.c: 311: }
  7043                           ;RF_Control_B1.c: 312: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7044  0D2A  0008               	return
  7045  0D2B                     l6714:	
  7046  0D2B  0022               	movlb	2	; select bank2
  7047  0D2C  0820               	movf	_RF_Data^(0+256),w
  7048  0D2D  3AFF               	xorlw	255
  7049  0D2E  1D03               	skipz
  7050  0D2F  2D36               	goto	l6720
  7051  0D30  0821               	movf	(_RF_Data^(0+256)+1),w
  7052  0D31  3A02               	xorlw	2
  7053  0D32  1D03               	skipz
  7054  0D33  2D36               	goto	l6720
  7055                           
  7056                           ;RF_Control_B1.c: 313: __nop();
  7057  0D34  0000               	nop
  7058                           
  7059                           ;RF_Control_B1.c: 314: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7060  0D35  0008               	return
  7061  0D36                     l6720:	
  7062  0D36  0022               	movlb	2	; select bank2
  7063  0D37  08A0               	movf	_RF_Data^(0+256),f
  7064  0D38  1D03               	skipz
  7065  0D39  2D40               	goto	l2085
  7066  0D3A  0821               	movf	(_RF_Data^(0+256)+1),w
  7067  0D3B  3A65               	xorlw	101
  7068  0D3C  1D03               	skipz
  7069  0D3D  2D40               	goto	l2085
  7070                           
  7071                           ;RF_Control_B1.c: 315: __nop();
  7072  0D3E  0000               	nop
  7073                           
  7074                           ;RF_Control_B1.c: 316: } else {
  7075  0D3F  0008               	return
  7076  0D40                     l2085:	
  7077                           
  7078                           ;RF_Control_B1.c: 317: RF1.Checked = 0;
  7079  0D40  0021               	movlb	1	; select bank1
  7080  0D41  11BB               	bcf	(_RF1^(0+128)+1),3
  7081                           
  7082                           ;RF_Control_B1.c: 325: ;
  7083                           
  7084                           ;RF_Control_B1.c: 318: }
  7085                           ;RF_Control_B1.c: 323: }
  7086                           ;RF_Control_B1.c: 324: } else {
  7087  0D42  0008               	return
  7088  0D43                     __end_of_getRxData:	
  7089                           
  7090                           	psect	text24
  7091  125E                     __ptext24:	
  7092 ;; *************** function _setLog_Code *****************
  7093 ;; Defined at:
  7094 ;;		line 331 in file "../src/RF_Control_B1.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;		None
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;		None
  7099 ;; Return value:  Size  Location     Type
  7100 ;;		None               void
  7101 ;; Registers used:
  7102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;Total ram usage:        1 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; Hardware stack levels required when called:    7
  7115 ;; This function calls:
  7116 ;;		_setBuz
  7117 ;;		_setMemory_LoopSave
  7118 ;;		_setMemory_Modify
  7119 ;; This function is called by:
  7120 ;;		_getRxData
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           
  7125                           ;psect for function _setLog_Code
  7126  125E                     _setLog_Code:	
  7127                           
  7128                           ;RF_Control_B1.c: 332: RF1.Learn = 0;
  7129                           
  7130                           ;incstack = 0
  7131                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7132  125E  0021               	movlb	1	; select bank1
  7133  125F  133A               	bcf	_RF1^(0+128),6
  7134                           
  7135                           ;RF_Control_B1.c: 333: product->Data[12]=RF_Data[12];
  7136  1260  0022               	movlb	2	; select bank2
  7137  1261  082C               	movf	(_RF_Data^(0+256)+12),w
  7138  1262  0020               	movlb	0	; select bank0
  7139  1263  00AD               	movwf	??_setLog_Code
  7140  1264  086E               	movf	_product,w
  7141  1265  3E0C               	addlw	12
  7142  1266  0086               	movwf	6
  7143  1267  3002               	movlw	2	; select bank4/5
  7144  1268  0087               	movwf	7
  7145  1269  082D               	movf	??_setLog_Code,w
  7146  126A  0081               	movwf	1
  7147                           
  7148                           ;RF_Control_B1.c: 334: product->Data[13]=RF_Data[13];
  7149  126B  0022               	movlb	2	; select bank2
  7150  126C  082D               	movf	(_RF_Data^(0+256)+13),w
  7151  126D  0020               	movlb	0	; select bank0
  7152  126E  00AD               	movwf	??_setLog_Code
  7153  126F  086E               	movf	_product,w
  7154  1270  3E0D               	addlw	13
  7155  1271  0086               	movwf	6
  7156  1272  3002               	movlw	2	; select bank4/5
  7157  1273  0087               	movwf	7
  7158  1274  082D               	movf	??_setLog_Code,w
  7159  1275  0081               	movwf	1
  7160                           
  7161                           ;RF_Control_B1.c: 335: product->Data[14]=RF_Data[14];
  7162  1276  0022               	movlb	2	; select bank2
  7163  1277  082E               	movf	(_RF_Data^(0+256)+14),w
  7164  1278  0020               	movlb	0	; select bank0
  7165  1279  00AD               	movwf	??_setLog_Code
  7166  127A  086E               	movf	_product,w
  7167  127B  3E0E               	addlw	14
  7168  127C  0086               	movwf	6
  7169  127D  3002               	movlw	2	; select bank4/5
  7170  127E  0087               	movwf	7
  7171  127F  082D               	movf	??_setLog_Code,w
  7172  1280  0081               	movwf	1
  7173                           
  7174                           ;RF_Control_B1.c: 336: setBuz(1, 100);
  7175  1281  3064               	movlw	100
  7176  1282  00A9               	movwf	setBuz@time
  7177  1283  3000               	movlw	0
  7178  1284  00AA               	movwf	setBuz@time+1
  7179  1285  3001               	movlw	1
  7180  1286  3195  25E0  3192   	fcall	_setBuz
  7181                           
  7182                           ;RF_Control_B1.c: 337: if (myMain.First == 1) {
  7183  1289  0021               	movlb	1	; select bank1
  7184  128A  1EA0               	btfss	_myMain^(0+128),5
  7185  128B  2A90               	goto	l2091
  7186                           
  7187                           ;RF_Control_B1.c: 338: setMemory_LoopSave(1);
  7188  128C  3001               	movlw	1
  7189  128D  319D  2599  3192   	fcall	_setMemory_LoopSave
  7190  1290                     l2091:	
  7191                           
  7192                           ;RF_Control_B1.c: 339: }
  7193                           ;RF_Control_B1.c: 340: setMemory_Modify(1);
  7194  1290  3001               	movlw	1
  7195  1291  319D  2586         	fcall	_setMemory_Modify
  7196  1293  0008               	return
  7197  1294                     __end_of_setLog_Code:	
  7198                           
  7199                           	psect	text25
  7200  1D99                     __ptext25:	
  7201 ;; *************** function _setMemory_LoopSave *****************
  7202 ;; Defined at:
  7203 ;;		line 1071 in file "../src/MCU_B1.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  command         1    wreg     unsigned char 
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;  command         1    1[BANK0 ] unsigned char 
  7208 ;; Return value:  Size  Location     Type
  7209 ;;		None               void
  7210 ;; Registers used:
  7211 ;;		wreg, status,2, status,0
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;Total ram usage:        2 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; Hardware stack levels required when called:    5
  7224 ;; This function calls:
  7225 ;;		Nothing
  7226 ;; This function is called by:
  7227 ;;		_setLog_Code
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           
  7232                           ;psect for function _setMemory_LoopSave
  7233  1D99                     _setMemory_LoopSave:	
  7234                           
  7235                           ;incstack = 0
  7236                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7237                           ;setMemory_LoopSave@command stored from wreg
  7238  1D99  0020               	movlb	0	; select bank0
  7239  1D9A  00A1               	movwf	setMemory_LoopSave@command
  7240                           
  7241                           ;MCU_B1.c: 1072: Memory.LoopSave = command == 1 ? 1 : 0;
  7242  1D9B  0821               	movf	setMemory_LoopSave@command,w
  7243  1D9C  3A01               	xorlw	1
  7244  1D9D  3000               	movlw	0
  7245  1D9E  1903               	skipnz
  7246  1D9F  3001               	movlw	1
  7247  1DA0  00A0               	movwf	??_setMemory_LoopSave
  7248  1DA1  0DA0               	rlf	??_setMemory_LoopSave,f
  7249  1DA2  0DA0               	rlf	??_setMemory_LoopSave,f
  7250  1DA3  0023               	movlb	3	; select bank3
  7251  1DA4  0844               	movf	(_Memory^(0+384)+36),w
  7252  1DA5  0020               	movlb	0	; select bank0
  7253  1DA6  0620               	xorwf	??_setMemory_LoopSave,w
  7254  1DA7  39FB               	andlw	-5
  7255  1DA8  0620               	xorwf	??_setMemory_LoopSave,w
  7256  1DA9  0023               	movlb	3	; select bank3
  7257  1DAA  00C4               	movwf	(_Memory^(0+384)+36)
  7258  1DAB  0008               	return
  7259  1DAC                     __end_of_setMemory_LoopSave:	
  7260                           
  7261                           	psect	text26
  7262  086C                     __ptext26:	
  7263 ;; *************** function _setControl_Lights_Table *****************
  7264 ;; Defined at:
  7265 ;;		line 344 in file "../src/RF_Control_B1.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;		None
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;		None
  7270 ;; Return value:  Size  Location     Type
  7271 ;;		None               void
  7272 ;; Registers used:
  7273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;Total ram usage:        0 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:   11
  7286 ;; This function calls:
  7287 ;;		_setBuz
  7288 ;;		_setDimmerLights_ErrorClose
  7289 ;;		_setRFSW_AdjControl
  7290 ;;		_setRFSW_Control
  7291 ;;		_setTxData
  7292 ;; This function is called by:
  7293 ;;		_getRxData
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           
  7298                           ;psect for function _setControl_Lights_Table
  7299  086C                     _setControl_Lights_Table:	
  7300                           
  7301                           ;RF_Control_B1.c: 345: switch (RF_Data[15]) {
  7302                           
  7303                           ;incstack = 0
  7304                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7305  086C  28B0               	goto	l6330
  7306  086D                     l6308:	
  7307                           ;RF_Control_B1.c: 346: case 0x00:
  7308                           
  7309                           
  7310                           ;RF_Control_B1.c: 348: setDimmerLights_ErrorClose(255);
  7311  086D  30FF               	movlw	255
  7312  086E  3196  2692  3188   	fcall	_setDimmerLights_ErrorClose
  7313                           
  7314                           ;RF_Control_B1.c: 350: product->Data[9]=0;
  7315  0871  0020               	movlb	0	; select bank0
  7316  0872  086E               	movf	_product,w
  7317  0873  3E09               	addlw	9
  7318  0874  0086               	movwf	6
  7319  0875  3002               	movlw	2	; select bank4/5
  7320  0876  0087               	movwf	7
  7321  0877  0181               	clrf	1
  7322                           
  7323                           ;RF_Control_B1.c: 351: product->Data[11]=0;
  7324  0878  086E               	movf	_product,w
  7325  0879  3E0B               	addlw	11
  7326  087A  0086               	movwf	6
  7327  087B  3002               	movlw	2	; select bank4/5
  7328  087C  0087               	movwf	7
  7329  087D  0181               	clrf	1
  7330                           
  7331                           ;RF_Control_B1.c: 352: product->Data[15]=0;
  7332  087E  086E               	movf	_product,w
  7333  087F  3E0F               	addlw	15
  7334  0880  0086               	movwf	6
  7335  0881  3002               	movlw	2	; select bank4/5
  7336  0882  0087               	movwf	7
  7337  0883  0181               	clrf	1
  7338                           
  7339                           ;RF_Control_B1.c: 353: product->Data[17]=0;
  7340  0884  086E               	movf	_product,w
  7341  0885  3E11               	addlw	17
  7342  0886  0086               	movwf	6
  7343  0887  3002               	movlw	2	; select bank4/5
  7344  0888  0087               	movwf	7
  7345  0889  0181               	clrf	1
  7346                           
  7347                           ;RF_Control_B1.c: 354: setBuz(1, 100);
  7348  088A  3064               	movlw	100
  7349  088B  00A9               	movwf	setBuz@time
  7350  088C  3000               	movlw	0
  7351  088D  00AA               	movwf	setBuz@time+1
  7352  088E  3001               	movlw	1
  7353  088F  3195  25E0         	fcall	_setBuz
  7354                           
  7355                           ;RF_Control_B1.c: 356: break;
  7356  0891  0008               	return
  7357  0892                     l6320:	
  7358                           ;RF_Control_B1.c: 357: case 0x20:
  7359                           
  7360                           
  7361                           ;RF_Control_B1.c: 358: product->Data[9]=0;
  7362  0892  0020               	movlb	0	; select bank0
  7363  0893  086E               	movf	_product,w
  7364  0894  3E09               	addlw	9
  7365  0895  0086               	movwf	6
  7366  0896  3002               	movlw	2	; select bank4/5
  7367  0897  0087               	movwf	7
  7368  0898  0181               	clrf	1
  7369                           
  7370                           ;RF_Control_B1.c: 359: product->Data[11]=0;
  7371  0899  086E               	movf	_product,w
  7372  089A  3E0B               	addlw	11
  7373  089B  0086               	movwf	6
  7374  089C  3002               	movlw	2	; select bank4/5
  7375  089D  0087               	movwf	7
  7376  089E  0181               	clrf	1
  7377                           
  7378                           ;RF_Control_B1.c: 360: product->Data[17]=0;
  7379  089F  086E               	movf	_product,w
  7380  08A0  3E11               	addlw	17
  7381  08A1  0086               	movwf	6
  7382  08A2  3002               	movlw	2	; select bank4/5
  7383  08A3  0087               	movwf	7
  7384  08A4  0181               	clrf	1
  7385                           
  7386                           ;RF_Control_B1.c: 361: setTxData();
  7387  08A5  3187  272C         	fcall	_setTxData
  7388                           
  7389                           ;RF_Control_B1.c: 362: break;
  7390  08A7  0008               	return
  7391  08A8                     l6324:	
  7392                           ;RF_Control_B1.c: 363: case 0x01:
  7393                           
  7394                           
  7395                           ;RF_Control_B1.c: 365: setRFSW_Control(1);
  7396  08A8  3001               	movlw	1
  7397  08A9  3194  24E5         	fcall	_setRFSW_Control
  7398                           
  7399                           ;RF_Control_B1.c: 377: break;
  7400                           
  7401                           ;RF_Control_B1.c: 373: case 0x03:
  7402                           
  7403                           ;RF_Control_B1.c: 372: break;
  7404                           
  7405                           ;RF_Control_B1.c: 368: case 0x02:
  7406                           
  7407                           ;RF_Control_B1.c: 367: break;
  7408  08AB  0008               	return
  7409  08AC                     l6326:	
  7410                           ;RF_Control_B1.c: 378: case 0x11:
  7411                           
  7412                           
  7413                           ;RF_Control_B1.c: 381: setRFSW_AdjControl(1);
  7414  08AC  3001               	movlw	1
  7415  08AD  3193  2383         	fcall	_setRFSW_AdjControl
  7416                           
  7417                           ;RF_Control_B1.c: 399: }
  7418                           
  7419                           ;RF_Control_B1.c: 398: break;
  7420                           
  7421                           ;RF_Control_B1.c: 392: case 0x31:
  7422                           
  7423                           ;RF_Control_B1.c: 391: break;
  7424                           
  7425                           ;RF_Control_B1.c: 385: case 0x21:
  7426                           
  7427                           ;RF_Control_B1.c: 384: break;
  7428  08AF  0008               	return
  7429  08B0                     l6330:	
  7430  08B0  0022               	movlb	2	; select bank2
  7431  08B1  082F               	movf	(_RF_Data^(0+256)+15),w
  7432                           
  7433                           ; Switch size 1, requested type "space"
  7434                           ; Number of cases is 8, Range of values is 0 to 49
  7435                           ; switch strategies available:
  7436                           ; Name         Instructions Cycles
  7437                           ; simple_byte           25    13 (average)
  7438                           ; direct_byte          106     6 (fixed)
  7439                           ; jumptable            260     6 (fixed)
  7440                           ;	Chosen strategy is simple_byte
  7441  08B2  3A00               	xorlw	0	; case 0
  7442  08B3  1903               	skipnz
  7443  08B4  286D               	goto	l6308
  7444  08B5  3A01               	xorlw	1	; case 1
  7445  08B6  1903               	skipnz
  7446  08B7  28A8               	goto	l6324
  7447  08B8  3A03               	xorlw	3	; case 2
  7448  08B9  1903               	skipnz
  7449  08BA  28CB               	goto	l2105
  7450  08BB  3A01               	xorlw	1	; case 3
  7451  08BC  1903               	skipnz
  7452  08BD  28CB               	goto	l2105
  7453  08BE  3A12               	xorlw	18	; case 17
  7454  08BF  1903               	skipnz
  7455  08C0  28AC               	goto	l6326
  7456  08C1  3A31               	xorlw	49	; case 32
  7457  08C2  1903               	skipnz
  7458  08C3  2892               	goto	l6320
  7459  08C4  3A01               	xorlw	1	; case 33
  7460  08C5  1903               	skipnz
  7461  08C6  28CB               	goto	l2105
  7462  08C7  3A10               	xorlw	16	; case 49
  7463  08C8  1903               	skipnz
  7464  08C9  28CB               	goto	l2105
  7465  08CA  28CB               	goto	l2105
  7466  08CB                     l2105:	
  7467  08CB  0008               	return
  7468  08CC                     __end_of_setControl_Lights_Table:	
  7469                           
  7470                           	psect	text27
  7471  14E5                     __ptext27:	
  7472 ;; *************** function _setRFSW_Control *****************
  7473 ;; Defined at:
  7474 ;;		line 426 in file "../src/RF_Control_B1.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;  sw              1    wreg     unsigned char 
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  sw              1   19[BANK0 ] unsigned char 
  7479 ;;  status          1   18[BANK0 ] unsigned char 
  7480 ;; Return value:  Size  Location     Type
  7481 ;;		None               void
  7482 ;; Registers used:
  7483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;Total ram usage:        3 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    9
  7496 ;; This function calls:
  7497 ;;		_getDelayOff_GO
  7498 ;;		_getDimmerLights_Status
  7499 ;;		_setBuz
  7500 ;;		_setDelayOff_GO
  7501 ;;		_setDimmerLights_SwOff
  7502 ;;		_setDimmerLights_SwOn
  7503 ;;		_setRF_DimmerLights
  7504 ;;		_setTxData
  7505 ;; This function is called by:
  7506 ;;		_setControl_Lights_Table
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function _setRFSW_Control
  7512  14E5                     _setRFSW_Control:	
  7513                           
  7514                           ;incstack = 0
  7515                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7516                           ;setRFSW_Control@sw stored from wreg
  7517  14E5  0020               	movlb	0	; select bank0
  7518  14E6  00B3               	movwf	setRFSW_Control@sw
  7519                           
  7520                           ;RF_Control_B1.c: 427: char status = 0;
  7521  14E7  01B2               	clrf	setRFSW_Control@status
  7522                           
  7523                           ;RF_Control_B1.c: 430: if (RF_Data[16] == 0x80) {
  7524  14E8  0022               	movlb	2	; select bank2
  7525  14E9  0830               	movf	(_RF_Data^(0+256)+16),w
  7526  14EA  3A80               	xorlw	128
  7527  14EB  1D03               	skipz
  7528  14EC  2D18               	goto	l6162
  7529                           
  7530                           ;RF_Control_B1.c: 431: setDelayOff_GO(sw, 1, RF_Data[17]);
  7531  14ED  0020               	movlb	0	; select bank0
  7532  14EE  01AA               	clrf	setDelayOff_GO@command
  7533  14EF  0AAA               	incf	setDelayOff_GO@command,f
  7534  14F0  0022               	movlb	2	; select bank2
  7535  14F1  0831               	movf	(_RF_Data^(0+256)+17),w
  7536  14F2  0020               	movlb	0	; select bank0
  7537  14F3  00B1               	movwf	??_setRFSW_Control
  7538  14F4  0831               	movf	??_setRFSW_Control,w
  7539  14F5  00AB               	movwf	setDelayOff_GO@value
  7540  14F6  0833               	movf	setRFSW_Control@sw,w
  7541  14F7  3197  27A3  3194   	fcall	_setDelayOff_GO
  7542                           
  7543                           ;RF_Control_B1.c: 432: if (getDimmerLights_Status(sw) == 1) {
  7544  14FA  0020               	movlb	0	; select bank0
  7545  14FB  0833               	movf	setRFSW_Control@sw,w
  7546  14FC  319C  24FB  3194   	fcall	_getDimmerLights_Status
  7547  14FF  3A01               	xorlw	1
  7548  1500  1D03               	skipz
  7549  1501  2D27               	goto	l6166
  7550                           
  7551                           ;RF_Control_B1.c: 433: setBuz(1, 100);
  7552  1502  3064               	movlw	100
  7553  1503  0020               	movlb	0	; select bank0
  7554  1504  00A9               	movwf	setBuz@time
  7555  1505  3000               	movlw	0
  7556  1506  00AA               	movwf	setBuz@time+1
  7557  1507  3001               	movlw	1
  7558  1508  3195  25E0  3194   	fcall	_setBuz
  7559                           
  7560                           ;RF_Control_B1.c: 434: status = 1;
  7561  150B  0020               	movlb	0	; select bank0
  7562  150C  01B2               	clrf	setRFSW_Control@status
  7563  150D  0AB2               	incf	setRFSW_Control@status,f
  7564                           
  7565                           ;RF_Control_B1.c: 435: setRF_DimmerLights(sw, 1);
  7566  150E  01A0               	clrf	setRF_DimmerLights@on
  7567  150F  0AA0               	incf	setRF_DimmerLights@on,f
  7568  1510  0833               	movf	setRFSW_Control@sw,w
  7569  1511  3197  2747  3194   	fcall	_setRF_DimmerLights
  7570                           
  7571                           ;RF_Control_B1.c: 436: setTxData();
  7572  1514  3187  272C  3194   	fcall	_setTxData
  7573                           
  7574                           ;RF_Control_B1.c: 438: }
  7575                           ;RF_Control_B1.c: 439: } else {
  7576  1517  2D27               	goto	l6166
  7577  1518                     l6162:	
  7578                           
  7579                           ;RF_Control_B1.c: 441: if (getDelayOff_GO(sw) == 1) {
  7580  1518  0020               	movlb	0	; select bank0
  7581  1519  0833               	movf	setRFSW_Control@sw,w
  7582  151A  319C  24CB  3194   	fcall	_getDelayOff_GO
  7583  151D  3A01               	xorlw	1
  7584  151E  1D03               	skipz
  7585  151F  2D27               	goto	l6166
  7586                           
  7587                           ;RF_Control_B1.c: 442: setDelayOff_GO(sw, 0, 0);
  7588  1520  0020               	movlb	0	; select bank0
  7589  1521  01AA               	clrf	setDelayOff_GO@command
  7590  1522  01AB               	clrf	setDelayOff_GO@value
  7591  1523  0833               	movf	setRFSW_Control@sw,w
  7592  1524  3197  27A3  3194   	fcall	_setDelayOff_GO
  7593  1527                     l6166:	
  7594                           
  7595                           ;RF_Control_B1.c: 443: }
  7596                           ;RF_Control_B1.c: 445: }
  7597                           ;RF_Control_B1.c: 446: if (status == 0) {
  7598  1527  0020               	movlb	0	; select bank0
  7599  1528  08B2               	movf	setRFSW_Control@status,f
  7600  1529  1D03               	skipz
  7601  152A  0008               	return
  7602                           
  7603                           ;RF_Control_B1.c: 448: setDimmerLights_SwOn(sw);
  7604  152B  0833               	movf	setRFSW_Control@sw,w
  7605  152C  3194  2406  3194   	fcall	_setDimmerLights_SwOn
  7606                           
  7607                           ;RF_Control_B1.c: 449: setDimmerLights_SwOff(sw);
  7608  152F  0020               	movlb	0	; select bank0
  7609  1530  0833               	movf	setRFSW_Control@sw,w
  7610  1531  3195  2588         	fcall	_setDimmerLights_SwOff
  7611  1533  0008               	return
  7612  1534                     __end_of_setRFSW_Control:	
  7613                           
  7614                           	psect	text28
  7615  1406                     __ptext28:	
  7616 ;; *************** function _setDimmerLights_SwOn *****************
  7617 ;; Defined at:
  7618 ;;		line 520 in file "../src/Dimmer_B1.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  sw              1    wreg     unsigned char 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  sw              1   15[BANK0 ] unsigned char 
  7623 ;;  idle            1   14[BANK0 ] unsigned char 
  7624 ;; Return value:  Size  Location     Type
  7625 ;;		None               void
  7626 ;; Registers used:
  7627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;Total ram usage:        3 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    7
  7640 ;; This function calls:
  7641 ;;		_DimmerLightsPointSelect
  7642 ;;		_getAll_DimmerLights_AdjGO
  7643 ;;		_setBuz
  7644 ;; This function is called by:
  7645 ;;		_setRFSW_Control
  7646 ;;		_setSw_Main
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           
  7651                           ;psect for function _setDimmerLights_SwOn
  7652  1406                     _setDimmerLights_SwOn:	
  7653                           
  7654                           ;incstack = 0
  7655                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7656                           ;setDimmerLights_SwOn@sw stored from wreg
  7657  1406  0020               	movlb	0	; select bank0
  7658  1407  00AF               	movwf	setDimmerLights_SwOn@sw
  7659                           
  7660                           ;Dimmer_B1.c: 521: DimmerLightsPointSelect(sw);
  7661  1408  082F               	movf	setDimmerLights_SwOn@sw,w
  7662  1409  319C  2421  3194   	fcall	_DimmerLightsPointSelect
  7663                           
  7664                           ;Dimmer_B1.c: 522: char idle = 0;
  7665  140C  0020               	movlb	0	; select bank0
  7666  140D  01AE               	clrf	setDimmerLights_SwOn@idle
  7667                           
  7668                           ;Dimmer_B1.c: 524: idle = getAll_DimmerLights_AdjGO(sw) == 1 ? 1 : 0;
  7669  140E  082F               	movf	setDimmerLights_SwOn@sw,w
  7670  140F  319B  239A  3194   	fcall	_getAll_DimmerLights_AdjGO
  7671  1412  3A01               	xorlw	1
  7672  1413  3000               	movlw	0
  7673  1414  1903               	skipnz
  7674  1415  3001               	movlw	1
  7675  1416  0020               	movlb	0	; select bank0
  7676  1417  00AD               	movwf	??_setDimmerLights_SwOn
  7677  1418  082D               	movf	??_setDimmerLights_SwOn,w
  7678  1419  00AE               	movwf	setDimmerLights_SwOn@idle
  7679                           
  7680                           ;Dimmer_B1.c: 526: if (idle == 0) {
  7681  141A  08AE               	movf	setDimmerLights_SwOn@idle,f
  7682  141B  1D03               	skipz
  7683  141C  0008               	return
  7684                           
  7685                           ;Dimmer_B1.c: 527: DimmerLights->SwFlag = 1;
  7686  141D  086F               	movf	_DimmerLights,w
  7687  141E  3E0B               	addlw	11
  7688  141F  0086               	movwf	6
  7689  1420  3001               	movlw	1	; select bank2/3
  7690  1421  0087               	movwf	7
  7691  1422  1481               	bsf	1,1
  7692                           
  7693                           ;Dimmer_B1.c: 528: setBuz(1, 100);
  7694  1423  3064               	movlw	100
  7695  1424  00A9               	movwf	setBuz@time
  7696  1425  3000               	movlw	0
  7697  1426  00AA               	movwf	setBuz@time+1
  7698  1427  3001               	movlw	1
  7699  1428  3195  25E0  3194   	fcall	_setBuz
  7700                           
  7701                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 0) {
  7702  142B  0020               	movlb	0	; select bank0
  7703  142C  086F               	movf	_DimmerLights,w
  7704  142D  3E02               	addlw	2
  7705  142E  0086               	movwf	6
  7706  142F  3001               	movlw	1	; select bank2/3
  7707  1430  0087               	movwf	7
  7708  1431  1881               	btfsc	1,1
  7709  1432  2C46               	goto	l5974
  7710                           
  7711                           ;Dimmer_B1.c: 530: DimmerLights->Status = 1;
  7712  1433  086F               	movf	_DimmerLights,w
  7713  1434  3E02               	addlw	2
  7714  1435  0086               	movwf	6
  7715  1436  3001               	movlw	1	; select bank2/3
  7716  1437  0087               	movwf	7
  7717  1438  1481               	bsf	1,1
  7718                           
  7719                           ;Dimmer_B1.c: 531: DimmerLights->Trigger = 1;
  7720  1439  086F               	movf	_DimmerLights,w
  7721  143A  3E0A               	addlw	10
  7722  143B  0086               	movwf	6
  7723  143C  3001               	movlw	1	; select bank2/3
  7724  143D  0087               	movwf	7
  7725  143E  1481               	bsf	1,1
  7726                           
  7727                           ;Dimmer_B1.c: 532: DimmerLights->Switch = 1;
  7728  143F  086F               	movf	_DimmerLights,w
  7729  1440  3E0A               	addlw	10
  7730  1441  0086               	movwf	6
  7731  1442  3001               	movlw	1	; select bank2/3
  7732  1443  0087               	movwf	7
  7733  1444  1401               	bsf	1,0
  7734                           
  7735                           ;Dimmer_B1.c: 534: } else {
  7736  1445  0008               	return
  7737  1446                     l5974:	
  7738                           
  7739                           ;Dimmer_B1.c: 535: DimmerLights->Status = 0;
  7740  1446  086F               	movf	_DimmerLights,w
  7741  1447  3E02               	addlw	2
  7742  1448  0086               	movwf	6
  7743  1449  3001               	movlw	1	; select bank2/3
  7744  144A  0087               	movwf	7
  7745  144B  1081               	bcf	1,1
  7746  144C  0008               	return
  7747  144D                     __end_of_setDimmerLights_SwOn:	
  7748                           
  7749                           	psect	text29
  7750  1383                     __ptext29:	
  7751 ;; *************** function _setRFSW_AdjControl *****************
  7752 ;; Defined at:
  7753 ;;		line 455 in file "../src/RF_Control_B1.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;  sw              1    wreg     unsigned char 
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  sw              1   74[BANK0 ] unsigned char 
  7758 ;;  status          1   73[BANK0 ] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;		None               void
  7761 ;; Registers used:
  7762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:        4 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:   10
  7775 ;; This function calls:
  7776 ;;		_getDimmerLights_Status
  7777 ;;		_setMemory_Modify
  7778 ;;		_setRF_DimmerValue
  7779 ;;		_setTxData
  7780 ;; This function is called by:
  7781 ;;		_setControl_Lights_Table
  7782 ;; This function uses a non-reentrant model
  7783 ;;
  7784                           
  7785                           
  7786                           ;psect for function _setRFSW_AdjControl
  7787  1383                     _setRFSW_AdjControl:	
  7788                           
  7789                           ;incstack = 0
  7790                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7791                           ;setRFSW_AdjControl@sw stored from wreg
  7792  1383  0020               	movlb	0	; select bank0
  7793  1384  00EA               	movwf	setRFSW_AdjControl@sw
  7794                           
  7795                           ;RF_Control_B1.c: 456: char status = 0;
  7796  1385  01E9               	clrf	setRFSW_AdjControl@status
  7797                           
  7798                           ;RF_Control_B1.c: 458: status = getDimmerLights_Status(sw);
  7799  1386  086A               	movf	setRFSW_AdjControl@sw,w
  7800  1387  319C  24FB  3193   	fcall	_getDimmerLights_Status
  7801  138A  0020               	movlb	0	; select bank0
  7802  138B  00E7               	movwf	??_setRFSW_AdjControl
  7803  138C  0867               	movf	??_setRFSW_AdjControl,w
  7804  138D  00E9               	movwf	setRFSW_AdjControl@status
  7805                           
  7806                           ;RF_Control_B1.c: 461: if (status == 1) {
  7807  138E  0869               	movf	setRFSW_AdjControl@status,w
  7808  138F  3A01               	xorlw	1
  7809  1390  1D03               	skipz
  7810  1391  2B9C               	goto	l6180
  7811                           
  7812                           ;RF_Control_B1.c: 462: setMemory_Modify(1);
  7813  1392  3001               	movlw	1
  7814  1393  319D  2586  3193   	fcall	_setMemory_Modify
  7815                           
  7816                           ;RF_Control_B1.c: 463: setRF_DimmerValue(sw);
  7817  1396  0020               	movlb	0	; select bank0
  7818  1397  086A               	movf	setRFSW_AdjControl@sw,w
  7819  1398  3191  2127  3193   	fcall	_setRF_DimmerValue
  7820                           
  7821                           ;RF_Control_B1.c: 464: } else {
  7822  139B  2BAE               	goto	l2117
  7823  139C                     l6180:	
  7824                           
  7825                           ;RF_Control_B1.c: 465: product->Data[9]=product->Data[20 + sw];
  7826  139C  0020               	movlb	0	; select bank0
  7827  139D  086A               	movf	setRFSW_AdjControl@sw,w
  7828  139E  3E14               	addlw	20
  7829  139F  076E               	addwf	_product,w
  7830  13A0  00E7               	movwf	??_setRFSW_AdjControl
  7831  13A1  0867               	movf	??_setRFSW_AdjControl,w
  7832  13A2  0086               	movwf	6
  7833  13A3  3002               	movlw	2	; select bank4/5
  7834  13A4  0087               	movwf	7
  7835  13A5  0801               	movf	1,w
  7836  13A6  00E8               	movwf	??_setRFSW_AdjControl+1
  7837  13A7  086E               	movf	_product,w
  7838  13A8  3E09               	addlw	9
  7839  13A9  0086               	movwf	6
  7840  13AA  3002               	movlw	2	; select bank4/5
  7841  13AB  0087               	movwf	7
  7842  13AC  0868               	movf	??_setRFSW_AdjControl+1,w
  7843  13AD  0081               	movwf	1
  7844  13AE                     l2117:	
  7845                           
  7846                           ;RF_Control_B1.c: 466: }
  7847                           ;RF_Control_B1.c: 467: product->Data[17]=product->Data[26 + sw];
  7848  13AE  0020               	movlb	0	; select bank0
  7849  13AF  086A               	movf	setRFSW_AdjControl@sw,w
  7850  13B0  3E1A               	addlw	26
  7851  13B1  076E               	addwf	_product,w
  7852  13B2  00E7               	movwf	??_setRFSW_AdjControl
  7853  13B3  0867               	movf	??_setRFSW_AdjControl,w
  7854  13B4  0086               	movwf	6
  7855  13B5  3002               	movlw	2	; select bank4/5
  7856  13B6  0087               	movwf	7
  7857  13B7  0801               	movf	1,w
  7858  13B8  00E8               	movwf	??_setRFSW_AdjControl+1
  7859  13B9  086E               	movf	_product,w
  7860  13BA  3E11               	addlw	17
  7861  13BB  0086               	movwf	6
  7862  13BC  3002               	movlw	2	; select bank4/5
  7863  13BD  0087               	movwf	7
  7864  13BE  0868               	movf	??_setRFSW_AdjControl+1,w
  7865  13BF  0081               	movwf	1
  7866                           
  7867                           ;RF_Control_B1.c: 468: setTxData();
  7868  13C0  3187  272C         	fcall	_setTxData
  7869  13C2  0008               	return
  7870  13C3                     __end_of_setRFSW_AdjControl:	
  7871                           
  7872                           	psect	text30
  7873  1127                     __ptext30:	
  7874 ;; *************** function _setRF_DimmerValue *****************
  7875 ;; Defined at:
  7876 ;;		line 473 in file "../src/RF_Control_B1.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  lights          1    wreg     unsigned char 
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;  lights          1   70[BANK0 ] unsigned char 
  7881 ;; Return value:  Size  Location     Type
  7882 ;;		None               void
  7883 ;; Registers used:
  7884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;Total ram usage:        3 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    9
  7897 ;; This function calls:
  7898 ;;		_setDimmerLights_AdjRF
  7899 ;; This function is called by:
  7900 ;;		_setRFSW_AdjControl
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           
  7905                           ;psect for function _setRF_DimmerValue
  7906  1127                     _setRF_DimmerValue:	
  7907                           
  7908                           ;incstack = 0
  7909                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7910                           ;setRF_DimmerValue@lights stored from wreg
  7911  1127  0020               	movlb	0	; select bank0
  7912  1128  00E6               	movwf	setRF_DimmerValue@lights
  7913                           
  7914                           ;RF_Control_B1.c: 474: if (RF_Data[9] > 0x64) {
  7915  1129  3065               	movlw	101
  7916  112A  0022               	movlb	2	; select bank2
  7917  112B  0229               	subwf	(_RF_Data^(0+256)+9),w
  7918  112C  1C03               	skipc
  7919  112D  2934               	goto	l6062
  7920                           
  7921                           ;RF_Control_B1.c: 475: RF_Data[9] = 0x64;
  7922  112E  3064               	movlw	100
  7923  112F  0020               	movlb	0	; select bank0
  7924  1130  00E4               	movwf	??_setRF_DimmerValue
  7925  1131  0864               	movf	??_setRF_DimmerValue,w
  7926  1132  0022               	movlb	2	; select bank2
  7927  1133  00A9               	movwf	(_RF_Data^(0+256)+9)
  7928  1134                     l6062:	
  7929                           
  7930                           ;RF_Control_B1.c: 476: }
  7931                           ;RF_Control_B1.c: 477: product->Data[9]=RF_Data[9];
  7932  1134  0829               	movf	(_RF_Data^(0+256)+9),w
  7933  1135  0020               	movlb	0	; select bank0
  7934  1136  00E4               	movwf	??_setRF_DimmerValue
  7935  1137  086E               	movf	_product,w
  7936  1138  3E09               	addlw	9
  7937  1139  0086               	movwf	6
  7938  113A  3002               	movlw	2	; select bank4/5
  7939  113B  0087               	movwf	7
  7940  113C  0864               	movf	??_setRF_DimmerValue,w
  7941  113D  0081               	movwf	1
  7942                           
  7943                           ;RF_Control_B1.c: 478: product->Data[11]=lights;
  7944  113E  0866               	movf	setRF_DimmerValue@lights,w
  7945  113F  00E4               	movwf	??_setRF_DimmerValue
  7946  1140  086E               	movf	_product,w
  7947  1141  3E0B               	addlw	11
  7948  1142  0086               	movwf	6
  7949  1143  3002               	movlw	2	; select bank4/5
  7950  1144  0087               	movwf	7
  7951  1145  0864               	movf	??_setRF_DimmerValue,w
  7952  1146  0081               	movwf	1
  7953                           
  7954                           ;RF_Control_B1.c: 479: product->Data[(20 + lights)]=RF_Data[9];
  7955  1147  0022               	movlb	2	; select bank2
  7956  1148  0829               	movf	(_RF_Data^(0+256)+9),w
  7957  1149  0020               	movlb	0	; select bank0
  7958  114A  00E4               	movwf	??_setRF_DimmerValue
  7959  114B  0866               	movf	setRF_DimmerValue@lights,w
  7960  114C  3E14               	addlw	20
  7961  114D  076E               	addwf	_product,w
  7962  114E  00E5               	movwf	??_setRF_DimmerValue+1
  7963  114F  0865               	movf	??_setRF_DimmerValue+1,w
  7964  1150  0086               	movwf	6
  7965  1151  3002               	movlw	2	; select bank4/5
  7966  1152  0087               	movwf	7
  7967  1153  0864               	movf	??_setRF_DimmerValue,w
  7968  1154  0081               	movwf	1
  7969                           
  7970                           ;RF_Control_B1.c: 480: setDimmerLights_AdjRF(lights);
  7971  1155  0866               	movf	setRF_DimmerValue@lights,w
  7972  1156  319F  2740         	fcall	_setDimmerLights_AdjRF
  7973  1158  0008               	return
  7974  1159                     __end_of_setRF_DimmerValue:	
  7975                           
  7976                           	psect	text31
  7977  1F40                     __ptext31:	
  7978 ;; *************** function _setDimmerLights_AdjRF *****************
  7979 ;; Defined at:
  7980 ;;		line 770 in file "../src/Dimmer_B1.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;  lights          1    wreg     unsigned char 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  lights          1   67[BANK0 ] unsigned char 
  7985 ;; Return value:  Size  Location     Type
  7986 ;;		None               void
  7987 ;; Registers used:
  7988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7989 ;; Tracked objects:
  7990 ;;		On entry : 0/0
  7991 ;;		On exit  : 0/0
  7992 ;;		Unchanged: 0/0
  7993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;Total ram usage:        2 bytes
  7999 ;; Hardware stack levels used:    1
  8000 ;; Hardware stack levels required when called:    8
  8001 ;; This function calls:
  8002 ;;		_DimmerLightsPointSelect
  8003 ;;		_getPercentValue
  8004 ;; This function is called by:
  8005 ;;		_setRF_DimmerValue
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           
  8010                           ;psect for function _setDimmerLights_AdjRF
  8011  1F40                     _setDimmerLights_AdjRF:	
  8012                           
  8013                           ;incstack = 0
  8014                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8015                           ;setDimmerLights_AdjRF@lights stored from wreg
  8016  1F40  0020               	movlb	0	; select bank0
  8017  1F41  00E3               	movwf	setDimmerLights_AdjRF@lights
  8018                           
  8019                           ;Dimmer_B1.c: 771: DimmerLightsPointSelect(lights);
  8020  1F42  0863               	movf	setDimmerLights_AdjRF@lights,w
  8021  1F43  319C  2421  319F   	fcall	_DimmerLightsPointSelect
  8022                           
  8023                           ;Dimmer_B1.c: 772: DimmerLights->AdjRF = 1;
  8024  1F46  0020               	movlb	0	; select bank0
  8025  1F47  086F               	movf	_DimmerLights,w
  8026  1F48  3E02               	addlw	2
  8027  1F49  0086               	movwf	6
  8028  1F4A  3001               	movlw	1	; select bank2/3
  8029  1F4B  0087               	movwf	7
  8030  1F4C  1401               	bsf	1,0
  8031                           
  8032                           ;Dimmer_B1.c: 773: DimmerLights->Signal = 1;
  8033  1F4D  0A6F               	incf	_DimmerLights,w
  8034  1F4E  0086               	movwf	6
  8035  1F4F  3001               	movlw	1	; select bank2/3
  8036  1F50  0087               	movwf	7
  8037  1F51  1681               	bsf	1,5
  8038                           
  8039                           ;Dimmer_B1.c: 774: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8040  1F52  086E               	movf	_product,w
  8041  1F53  3E09               	addlw	9
  8042  1F54  0086               	movwf	6
  8043  1F55  3002               	movlw	2	; select bank4/5
  8044  1F56  0087               	movwf	7
  8045  1F57  0801               	movf	1,w
  8046  1F58  318A  2256         	fcall	_getPercentValue
  8047  1F5A  0020               	movlb	0	; select bank0
  8048  1F5B  00E2               	movwf	??_setDimmerLights_AdjRF
  8049  1F5C  086F               	movf	_DimmerLights,w
  8050  1F5D  3E06               	addlw	6
  8051  1F5E  0086               	movwf	6
  8052  1F5F  3001               	movlw	1	; select bank2/3
  8053  1F60  0087               	movwf	7
  8054  1F61  0862               	movf	??_setDimmerLights_AdjRF,w
  8055  1F62  0081               	movwf	1
  8056  1F63  0008               	return
  8057  1F64                     __end_of_setDimmerLights_AdjRF:	
  8058                           
  8059                           	psect	text32
  8060  0A56                     __ptext32:	
  8061 ;; *************** function _getPercentValue *****************
  8062 ;; Defined at:
  8063 ;;		line 882 in file "../src/Dimmer_B1.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  value           1    wreg     unsigned char 
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;  value           1   62[BANK0 ] unsigned char 
  8068 ;;  i               3   63[BANK0 ] float 
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      unsigned char 
  8071 ;; Registers used:
  8072 ;;		wreg, status,2, status,0, pclath, cstack
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;Total ram usage:        6 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    7
  8085 ;; This function calls:
  8086 ;;		___awtoft
  8087 ;;		___ftadd
  8088 ;;		___ftdiv
  8089 ;;		___ftmul
  8090 ;;		___ftneg
  8091 ;;		___fttol
  8092 ;; This function is called by:
  8093 ;;		_setDimmerLights_AdjRF
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           
  8098                           ;psect for function _getPercentValue
  8099  0A56                     _getPercentValue:	
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8103                           ;getPercentValue@value stored from wreg
  8104  0A56  0020               	movlb	0	; select bank0
  8105  0A57  00DE               	movwf	getPercentValue@value
  8106                           
  8107                           ;Dimmer_B1.c: 890: float i = ((char)(65*0.8)) - ((char)(15*0.8));
  8108  0A58  3000               	movlw	0
  8109  0A59  00DF               	movwf	getPercentValue@i
  8110  0A5A  3020               	movlw	32
  8111  0A5B  00E0               	movwf	getPercentValue@i+1
  8112  0A5C  3042               	movlw	66
  8113  0A5D  00E1               	movwf	getPercentValue@i+2
  8114                           
  8115                           ;Dimmer_B1.c: 891: i /= 100;
  8116  0A5E  3000               	movlw	0
  8117  0A5F  00AE               	movwf	___ftdiv@f2
  8118  0A60  30C8               	movlw	200
  8119  0A61  00AF               	movwf	___ftdiv@f2+1
  8120  0A62  3042               	movlw	66
  8121  0A63  00B0               	movwf	___ftdiv@f2+2
  8122  0A64  085F               	movf	getPercentValue@i,w
  8123  0A65  00B1               	movwf	___ftdiv@f1
  8124  0A66  0860               	movf	getPercentValue@i+1,w
  8125  0A67  00B2               	movwf	___ftdiv@f1+1
  8126  0A68  0861               	movf	getPercentValue@i+2,w
  8127  0A69  00B3               	movwf	___ftdiv@f1+2
  8128  0A6A  318D  2543  318A   	fcall	___ftdiv
  8129  0A6D  0020               	movlb	0	; select bank0
  8130  0A6E  082E               	movf	?___ftdiv,w
  8131  0A6F  00DF               	movwf	getPercentValue@i
  8132  0A70  082F               	movf	?___ftdiv+1,w
  8133  0A71  00E0               	movwf	getPercentValue@i+1
  8134  0A72  0830               	movf	?___ftdiv+2,w
  8135  0A73  00E1               	movwf	getPercentValue@i+2
  8136                           
  8137                           ;Dimmer_B1.c: 893: return (char) (((char)(65*0.8)) - ((100 - value) * i));
  8138  0A74  085E               	movf	getPercentValue@value,w
  8139  0A75  00DC               	movwf	??_getPercentValue
  8140  0A76  01DD               	clrf	??_getPercentValue+1
  8141  0A77  09DC               	comf	??_getPercentValue,f
  8142  0A78  09DD               	comf	??_getPercentValue+1,f
  8143  0A79  0ADC               	incf	??_getPercentValue,f
  8144  0A7A  1903               	skipnz
  8145  0A7B  0ADD               	incf	??_getPercentValue+1,f
  8146  0A7C  085C               	movf	??_getPercentValue,w
  8147  0A7D  3E64               	addlw	100
  8148  0A7E  00A8               	movwf	___awtoft@c
  8149  0A7F  3000               	movlw	0
  8150  0A80  3D5D               	addwfc	??_getPercentValue+1,w
  8151  0A81  00A9               	movwf	___awtoft@c+1
  8152  0A82  319E  26FC  318A   	fcall	___awtoft
  8153  0A85  0020               	movlb	0	; select bank0
  8154  0A86  0828               	movf	?___awtoft,w
  8155  0A87  00B1               	movwf	___ftmul@f2
  8156  0A88  0829               	movf	?___awtoft+1,w
  8157  0A89  00B2               	movwf	___ftmul@f2+1
  8158  0A8A  082A               	movf	?___awtoft+2,w
  8159  0A8B  00B3               	movwf	___ftmul@f2+2
  8160  0A8C  085F               	movf	getPercentValue@i,w
  8161  0A8D  00AE               	movwf	___ftmul@f1
  8162  0A8E  0860               	movf	getPercentValue@i+1,w
  8163  0A8F  00AF               	movwf	___ftmul@f1+1
  8164  0A90  0861               	movf	getPercentValue@i+2,w
  8165  0A91  00B0               	movwf	___ftmul@f1+2
  8166  0A92  318F  274C  318A   	fcall	___ftmul
  8167  0A95  0020               	movlb	0	; select bank0
  8168  0A96  082E               	movf	?___ftmul,w
  8169  0A97  00BE               	movwf	___ftneg@f1
  8170  0A98  082F               	movf	?___ftmul+1,w
  8171  0A99  00BF               	movwf	___ftneg@f1+1
  8172  0A9A  0830               	movf	?___ftmul+2,w
  8173  0A9B  00C0               	movwf	___ftneg@f1+2
  8174  0A9C  319B  23DC  318A   	fcall	___ftneg
  8175  0A9F  0020               	movlb	0	; select bank0
  8176  0AA0  083E               	movf	?___ftneg,w
  8177  0AA1  00C4               	movwf	___ftadd@f2
  8178  0AA2  083F               	movf	?___ftneg+1,w
  8179  0AA3  00C5               	movwf	___ftadd@f2+1
  8180  0AA4  0840               	movf	?___ftneg+2,w
  8181  0AA5  00C6               	movwf	___ftadd@f2+2
  8182  0AA6  3000               	movlw	0
  8183  0AA7  00C1               	movwf	___ftadd@f1
  8184  0AA8  3050               	movlw	80
  8185  0AA9  00C2               	movwf	___ftadd@f1+1
  8186  0AAA  3042               	movlw	66
  8187  0AAB  00C3               	movwf	___ftadd@f1+2
  8188  0AAC  3184  247B  318A   	fcall	___ftadd
  8189  0AAF  0020               	movlb	0	; select bank0
  8190  0AB0  0841               	movf	?___ftadd,w
  8191  0AB1  00CE               	movwf	___fttol@f1
  8192  0AB2  0842               	movf	?___ftadd+1,w
  8193  0AB3  00CF               	movwf	___fttol@f1+1
  8194  0AB4  0843               	movf	?___ftadd+2,w
  8195  0AB5  00D0               	movwf	___fttol@f1+2
  8196  0AB6  318C  242C         	fcall	___fttol
  8197  0AB8  0020               	movlb	0	; select bank0
  8198  0AB9  084E               	movf	?___fttol,w
  8199  0ABA  0008               	return
  8200  0ABB                     __end_of_getPercentValue:	
  8201                           
  8202                           	psect	text33
  8203  0F4C                     __ptext33:	
  8204 ;; *************** function ___ftmul *****************
  8205 ;; Defined at:
  8206 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8207 ;; Parameters:    Size  Location     Type
  8208 ;;  f1              3   14[BANK0 ] float 
  8209 ;;  f2              3   17[BANK0 ] float 
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8212 ;;  sign            1   29[BANK0 ] unsigned char 
  8213 ;;  cntr            1   28[BANK0 ] unsigned char 
  8214 ;;  exp             1   24[BANK0 ] unsigned char 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  3   14[BANK0 ] float 
  8217 ;; Registers used:
  8218 ;;		wreg, status,2, status,0, pclath, cstack
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8224 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;Total ram usage:       16 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    6
  8231 ;; This function calls:
  8232 ;;		___ftpack
  8233 ;; This function is called by:
  8234 ;;		_getPercentValue
  8235 ;; This function uses a non-reentrant model
  8236 ;;
  8237                           
  8238                           
  8239                           ;psect for function ___ftmul
  8240  0F4C                     ___ftmul:	
  8241                           
  8242                           ;incstack = 0
  8243                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8244  0F4C  0020               	movlb	0	; select bank0
  8245  0F4D  082E               	movf	___ftmul@f1,w
  8246  0F4E  00B4               	movwf	??___ftmul
  8247  0F4F  082F               	movf	___ftmul@f1+1,w
  8248  0F50  00B5               	movwf	??___ftmul+1
  8249  0F51  0830               	movf	___ftmul@f1+2,w
  8250  0F52  00B6               	movwf	??___ftmul+2
  8251  0F53  1003               	clrc
  8252  0F54  0D35               	rlf	??___ftmul+1,w
  8253  0F55  0D36               	rlf	??___ftmul+2,w
  8254  0F56  00B7               	movwf	??___ftmul+3
  8255  0F57  0837               	movf	??___ftmul+3,w
  8256  0F58  00B8               	movwf	___ftmul@exp
  8257  0F59  08B8               	movf	___ftmul@exp,f
  8258  0F5A  1D03               	skipz
  8259  0F5B  2F63               	goto	l5706
  8260  0F5C  3000               	movlw	0
  8261  0F5D  00AE               	movwf	?___ftmul
  8262  0F5E  3000               	movlw	0
  8263  0F5F  00AF               	movwf	?___ftmul+1
  8264  0F60  3000               	movlw	0
  8265  0F61  00B0               	movwf	?___ftmul+2
  8266  0F62  0008               	return
  8267  0F63                     l5706:	
  8268  0F63  0831               	movf	___ftmul@f2,w
  8269  0F64  00B4               	movwf	??___ftmul
  8270  0F65  0832               	movf	___ftmul@f2+1,w
  8271  0F66  00B5               	movwf	??___ftmul+1
  8272  0F67  0833               	movf	___ftmul@f2+2,w
  8273  0F68  00B6               	movwf	??___ftmul+2
  8274  0F69  1003               	clrc
  8275  0F6A  0D35               	rlf	??___ftmul+1,w
  8276  0F6B  0D36               	rlf	??___ftmul+2,w
  8277  0F6C  00B7               	movwf	??___ftmul+3
  8278  0F6D  0837               	movf	??___ftmul+3,w
  8279  0F6E  00BD               	movwf	___ftmul@sign
  8280  0F6F  08BD               	movf	___ftmul@sign,f
  8281  0F70  1D03               	skipz
  8282  0F71  2F79               	goto	l5712
  8283  0F72  3000               	movlw	0
  8284  0F73  00AE               	movwf	?___ftmul
  8285  0F74  3000               	movlw	0
  8286  0F75  00AF               	movwf	?___ftmul+1
  8287  0F76  3000               	movlw	0
  8288  0F77  00B0               	movwf	?___ftmul+2
  8289  0F78  0008               	return
  8290  0F79                     l5712:	
  8291  0F79  083D               	movf	___ftmul@sign,w
  8292  0F7A  3E7B               	addlw	123
  8293  0F7B  00B4               	movwf	??___ftmul
  8294  0F7C  0834               	movf	??___ftmul,w
  8295  0F7D  07B8               	addwf	___ftmul@exp,f
  8296  0F7E  082E               	movf	___ftmul@f1,w
  8297  0F7F  00B4               	movwf	??___ftmul
  8298  0F80  082F               	movf	___ftmul@f1+1,w
  8299  0F81  00B5               	movwf	??___ftmul+1
  8300  0F82  0830               	movf	___ftmul@f1+2,w
  8301  0F83  00B6               	movwf	??___ftmul+2
  8302  0F84  3010               	movlw	16
  8303  0F85                     u4555:	
  8304  0F85  36B6               	lsrf	??___ftmul+2,f
  8305  0F86  0CB5               	rrf	??___ftmul+1,f
  8306  0F87  0CB4               	rrf	??___ftmul,f
  8307  0F88  0B89               	decfsz	9,f
  8308  0F89  2F85               	goto	u4555
  8309  0F8A  0834               	movf	??___ftmul,w
  8310  0F8B  00B7               	movwf	??___ftmul+3
  8311  0F8C  0837               	movf	??___ftmul+3,w
  8312  0F8D  00BD               	movwf	___ftmul@sign
  8313  0F8E  0831               	movf	___ftmul@f2,w
  8314  0F8F  00B4               	movwf	??___ftmul
  8315  0F90  0832               	movf	___ftmul@f2+1,w
  8316  0F91  00B5               	movwf	??___ftmul+1
  8317  0F92  0833               	movf	___ftmul@f2+2,w
  8318  0F93  00B6               	movwf	??___ftmul+2
  8319  0F94  3010               	movlw	16
  8320  0F95                     u4565:	
  8321  0F95  36B6               	lsrf	??___ftmul+2,f
  8322  0F96  0CB5               	rrf	??___ftmul+1,f
  8323  0F97  0CB4               	rrf	??___ftmul,f
  8324  0F98  0B89               	decfsz	9,f
  8325  0F99  2F95               	goto	u4565
  8326  0F9A  0834               	movf	??___ftmul,w
  8327  0F9B  00B7               	movwf	??___ftmul+3
  8328  0F9C  0837               	movf	??___ftmul+3,w
  8329  0F9D  06BD               	xorwf	___ftmul@sign,f
  8330  0F9E  3080               	movlw	128
  8331  0F9F  00B4               	movwf	??___ftmul
  8332  0FA0  0834               	movf	??___ftmul,w
  8333  0FA1  05BD               	andwf	___ftmul@sign,f
  8334  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8335  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8336  0FA4  30FF               	movlw	255
  8337  0FA5  05B1               	andwf	___ftmul@f2,f
  8338  0FA6  30FF               	movlw	255
  8339  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8340  0FA8  3000               	movlw	0
  8341  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8342  0FAA  3000               	movlw	0
  8343  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8344  0FAC  3000               	movlw	0
  8345  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8346  0FAE  3000               	movlw	0
  8347  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8348  0FB0  3007               	movlw	7
  8349  0FB1  00B4               	movwf	??___ftmul
  8350  0FB2  0834               	movf	??___ftmul,w
  8351  0FB3  00BC               	movwf	___ftmul@cntr
  8352  0FB4                     l5724:	
  8353  0FB4  1C2E               	btfss	___ftmul@f1,0
  8354  0FB5  2FBC               	goto	l5728
  8355  0FB6  0831               	movf	___ftmul@f2,w
  8356  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8357  0FB8  0832               	movf	___ftmul@f2+1,w
  8358  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8359  0FBA  0833               	movf	___ftmul@f2+2,w
  8360  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8361  0FBC                     l5728:	
  8362  0FBC  3001               	movlw	1
  8363  0FBD                     u4585:	
  8364  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8365  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8366  0FBF  0CAE               	rrf	___ftmul@f1,f
  8367  0FC0  0B89               	decfsz	9,f
  8368  0FC1  2FBD               	goto	u4585
  8369  0FC2  3001               	movlw	1
  8370  0FC3                     u4595:	
  8371  0FC3  35B1               	lslf	___ftmul@f2,f
  8372  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8373  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8374  0FC6  0B89               	decfsz	9,f
  8375  0FC7  2FC3               	goto	u4595
  8376  0FC8  3001               	movlw	1
  8377  0FC9  02BC               	subwf	___ftmul@cntr,f
  8378  0FCA  1D03               	btfss	3,2
  8379  0FCB  2FB4               	goto	l5724
  8380  0FCC  3009               	movlw	9
  8381  0FCD  00B4               	movwf	??___ftmul
  8382  0FCE  0834               	movf	??___ftmul,w
  8383  0FCF  00BC               	movwf	___ftmul@cntr
  8384  0FD0                     l5736:	
  8385  0FD0  1C2E               	btfss	___ftmul@f1,0
  8386  0FD1  2FD8               	goto	l5740
  8387  0FD2  0831               	movf	___ftmul@f2,w
  8388  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8389  0FD4  0832               	movf	___ftmul@f2+1,w
  8390  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8391  0FD6  0833               	movf	___ftmul@f2+2,w
  8392  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8393  0FD8                     l5740:	
  8394  0FD8  3001               	movlw	1
  8395  0FD9                     u4625:	
  8396  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8397  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8398  0FDB  0CAE               	rrf	___ftmul@f1,f
  8399  0FDC  0B89               	decfsz	9,f
  8400  0FDD  2FD9               	goto	u4625
  8401  0FDE  3001               	movlw	1
  8402  0FDF                     u4635:	
  8403  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8404  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8405  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8406  0FE2  0B89               	decfsz	9,f
  8407  0FE3  2FDF               	goto	u4635
  8408  0FE4  3001               	movlw	1
  8409  0FE5  02BC               	subwf	___ftmul@cntr,f
  8410  0FE6  1D03               	btfss	3,2
  8411  0FE7  2FD0               	goto	l5736
  8412  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8413  0FE9  00A0               	movwf	___ftpack@arg
  8414  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8415  0FEB  00A1               	movwf	___ftpack@arg+1
  8416  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8417  0FED  00A2               	movwf	___ftpack@arg+2
  8418  0FEE  0838               	movf	___ftmul@exp,w
  8419  0FEF  00B4               	movwf	??___ftmul
  8420  0FF0  0834               	movf	??___ftmul,w
  8421  0FF1  00A3               	movwf	___ftpack@exp
  8422  0FF2  083D               	movf	___ftmul@sign,w
  8423  0FF3  00B5               	movwf	??___ftmul+1
  8424  0FF4  0835               	movf	??___ftmul+1,w
  8425  0FF5  00A4               	movwf	___ftpack@sign
  8426  0FF6  3188  20CC         	fcall	___ftpack
  8427  0FF8  0020               	movlb	0	; select bank0
  8428  0FF9  0820               	movf	?___ftpack,w
  8429  0FFA  00AE               	movwf	?___ftmul
  8430  0FFB  0821               	movf	?___ftpack+1,w
  8431  0FFC  00AF               	movwf	?___ftmul+1
  8432  0FFD  0822               	movf	?___ftpack+2,w
  8433  0FFE  00B0               	movwf	?___ftmul+2
  8434  0FFF  0008               	return
  8435  1000                     __end_of___ftmul:	
  8436                           
  8437                           	psect	text34
  8438  1D86                     __ptext34:	
  8439 ;; *************** function _setMemory_Modify *****************
  8440 ;; Defined at:
  8441 ;;		line 1065 in file "../src/MCU_B1.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;  command         1    wreg     unsigned char 
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  command         1    1[BANK0 ] unsigned char 
  8446 ;; Return value:  Size  Location     Type
  8447 ;;		None               void
  8448 ;; Registers used:
  8449 ;;		wreg, status,2, status,0
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;Total ram usage:        2 bytes
  8460 ;; Hardware stack levels used:    1
  8461 ;; Hardware stack levels required when called:    5
  8462 ;; This function calls:
  8463 ;;		Nothing
  8464 ;; This function is called by:
  8465 ;;		_setLog_Code
  8466 ;;		_setRFSW_AdjControl
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           
  8471                           ;psect for function _setMemory_Modify
  8472  1D86                     _setMemory_Modify:	
  8473                           
  8474                           ;incstack = 0
  8475                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8476                           ;setMemory_Modify@command stored from wreg
  8477  1D86  0020               	movlb	0	; select bank0
  8478  1D87  00A1               	movwf	setMemory_Modify@command
  8479                           
  8480                           ;MCU_B1.c: 1066: Memory.Modify = command == 1 ? 1 : 0;
  8481  1D88  0821               	movf	setMemory_Modify@command,w
  8482  1D89  3A01               	xorlw	1
  8483  1D8A  3000               	movlw	0
  8484  1D8B  1903               	skipnz
  8485  1D8C  3001               	movlw	1
  8486  1D8D  00A0               	movwf	??_setMemory_Modify
  8487  1D8E  0023               	movlb	3	; select bank3
  8488  1D8F  0844               	movf	(_Memory^(0+384)+36),w
  8489  1D90  0020               	movlb	0	; select bank0
  8490  1D91  0620               	xorwf	??_setMemory_Modify,w
  8491  1D92  39FE               	andlw	-2
  8492  1D93  0620               	xorwf	??_setMemory_Modify,w
  8493  1D94  0023               	movlb	3	; select bank3
  8494  1D95  00C4               	movwf	(_Memory^(0+384)+36)
  8495                           
  8496                           ;MCU_B1.c: 1067: Memory.Time = 0;
  8497  1D96  01C2               	clrf	(_Memory^(0+384)+34)
  8498  1D97  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8499  1D98  0008               	return
  8500  1D99                     __end_of_setMemory_Modify:	
  8501                           
  8502                           	psect	text35
  8503  1D2E                     __ptext35:	
  8504 ;; *************** function _getRF_KeyStatus *****************
  8505 ;; Defined at:
  8506 ;;		line 190 in file "../src/RF_Control_B1.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;		None
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;  key             1    1[BANK0 ] unsigned char 
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  1    wreg      unsigned char 
  8513 ;; Registers used:
  8514 ;;		wreg, status,2
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;Total ram usage:        3 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    5
  8527 ;; This function calls:
  8528 ;;		Nothing
  8529 ;; This function is called by:
  8530 ;;		_setRF_Main
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           
  8535                           ;psect for function _getRF_KeyStatus
  8536  1D2E                     _getRF_KeyStatus:	
  8537                           
  8538                           ;RF_Control_B1.c: 191: char key = 0;
  8539                           
  8540                           ;incstack = 0
  8541                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8542  1D2E  0020               	movlb	0	; select bank0
  8543  1D2F  01A1               	clrf	getRF_KeyStatus@key
  8544                           
  8545                           ;RF_Control_B1.c: 201: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8546  1D30  01A2               	clrf	_getRF_KeyStatus$5012
  8547  1D31  0AA2               	incf	_getRF_KeyStatus$5012,f
  8548  1D32  1F0C               	btfss	12,6	;volatile
  8549  1D33  1A0C               	btfsc	12,4	;volatile
  8550  1D34  2D39               	goto	l6656
  8551  1D35  1C0C               	btfss	12,0	;volatile
  8552  1D36  1B8C               	btfsc	12,7	;volatile
  8553  1D37  2D39               	goto	l6656
  8554  1D38  01A2               	clrf	_getRF_KeyStatus$5012
  8555  1D39                     l6656:	
  8556  1D39  0822               	movf	_getRF_KeyStatus$5012,w
  8557  1D3A  00A0               	movwf	??_getRF_KeyStatus
  8558  1D3B  0820               	movf	??_getRF_KeyStatus,w
  8559  1D3C  00A1               	movwf	getRF_KeyStatus@key
  8560                           
  8561                           ;RF_Control_B1.c: 203: return key;
  8562  1D3D  0821               	movf	getRF_KeyStatus@key,w
  8563  1D3E  0008               	return
  8564  1D3F                     __end_of_getRF_KeyStatus:	
  8565                           
  8566                           	psect	text36
  8567  1D1D                     __ptext36:	
  8568 ;; *************** function _getBuz_GO *****************
  8569 ;; Defined at:
  8570 ;;		line 82 in file "../src/Buzzer_B1.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;		None
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;  i               2    4[BANK0 ] int 
  8575 ;; Return value:  Size  Location     Type
  8576 ;;                  2    0[BANK0 ] int 
  8577 ;; Registers used:
  8578 ;;		wreg, status,2, status,0
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8584 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;Total ram usage:        6 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; Hardware stack levels required when called:    5
  8591 ;; This function calls:
  8592 ;;		Nothing
  8593 ;; This function is called by:
  8594 ;;		_setRF_Main
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           
  8599                           ;psect for function _getBuz_GO
  8600  1D1D                     _getBuz_GO:	
  8601                           
  8602                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8603                           
  8604                           ;incstack = 0
  8605                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8606  1D1D  0021               	movlb	1	; select bank1
  8607  1D1E  0C2E               	rrf	_Buz1^(0+128),w
  8608  1D1F  3901               	andlw	1
  8609  1D20  0020               	movlb	0	; select bank0
  8610  1D21  00A2               	movwf	??_getBuz_GO
  8611  1D22  01A3               	clrf	??_getBuz_GO+1
  8612  1D23  0822               	movf	??_getBuz_GO,w
  8613  1D24  00A4               	movwf	getBuz_GO@i
  8614  1D25  0823               	movf	??_getBuz_GO+1,w
  8615  1D26  00A5               	movwf	getBuz_GO@i+1
  8616                           
  8617                           ;Buzzer_B1.c: 84: return i;
  8618  1D27  0825               	movf	getBuz_GO@i+1,w
  8619  1D28  01A1               	clrf	?_getBuz_GO+1
  8620  1D29  07A1               	addwf	?_getBuz_GO+1,f
  8621  1D2A  0824               	movf	getBuz_GO@i,w
  8622  1D2B  01A0               	clrf	?_getBuz_GO
  8623  1D2C  07A0               	addwf	?_getBuz_GO,f
  8624  1D2D  0008               	return
  8625  1D2E                     __end_of_getBuz_GO:	
  8626                           
  8627                           	psect	text37
  8628  1CBC                     __ptext37:	
  8629 ;; *************** function _RF_RxDisable *****************
  8630 ;; Defined at:
  8631 ;;		line 265 in file "../src/RF_Control_B1.c"
  8632 ;; Parameters:    Size  Location     Type
  8633 ;;		None
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;		None
  8636 ;; Return value:  Size  Location     Type
  8637 ;;		None               void
  8638 ;; Registers used:
  8639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;Total ram usage:        0 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    7
  8652 ;; This function calls:
  8653 ;;		_CC2500_WriteCommand
  8654 ;; This function is called by:
  8655 ;;		_setRF_Main
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           
  8660                           ;psect for function _RF_RxDisable
  8661  1CBC                     _RF_RxDisable:	
  8662                           
  8663                           ;RF_Control_B1.c: 266: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8664                           
  8665                           ;incstack = 0
  8666                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8667  1CBC  0021               	movlb	1	; select bank1
  8668  1CBD  18BA               	btfsc	_RF1^(0+128),1
  8669  1CBE  2CC1               	goto	l2067
  8670  1CBF  1DBA               	btfss	_RF1^(0+128),3
  8671  1CC0  0008               	return
  8672  1CC1                     l2067:	
  8673                           
  8674                           ;RF_Control_B1.c: 267: RF1.RxStatus = 0;
  8675  1CC1  11BA               	bcf	_RF1^(0+128),3
  8676                           
  8677                           ;RF_Control_B1.c: 268: RF1.ReceiveGO = 0;
  8678  1CC2  10BA               	bcf	_RF1^(0+128),1
  8679                           
  8680                           ;RF_Control_B1.c: 269: CC2500_WriteCommand(0x36);
  8681  1CC3  3036               	movlw	54
  8682  1CC4  319E  262D  319C   	fcall	_CC2500_WriteCommand
  8683                           
  8684                           ;RF_Control_B1.c: 271: CC2500_WriteCommand(0x3A);
  8685  1CC7  303A               	movlw	58
  8686  1CC8  319E  262D         	fcall	_CC2500_WriteCommand
  8687  1CCA  0008               	return
  8688  1CCB                     __end_of_RF_RxDisable:	
  8689                           
  8690                           	psect	text38
  8691  092D                     __ptext38:	
  8692 ;; *************** function _CC2500_TxData *****************
  8693 ;; Defined at:
  8694 ;;		line 32 in file "../src/CC2500_B1.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;		None
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8699 ;; Return value:  Size  Location     Type
  8700 ;;		None               void
  8701 ;; Registers used:
  8702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;Total ram usage:        2 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    7
  8715 ;; This function calls:
  8716 ;;		_CC2500_WriteByte
  8717 ;;		_CC2500_WriteCommand
  8718 ;;		_Timeout_Counter
  8719 ;;		_set_TimeoutCleared
  8720 ;; This function is called by:
  8721 ;;		_setRF_Main
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function _CC2500_TxData
  8727  092D                     _CC2500_TxData:	
  8728                           
  8729                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8730                           ;CC2500_B1.c: 35: RC0 = 0;
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8734  092D  0020               	movlb	0	; select bank0
  8735  092E  100E               	bcf	14,0	;volatile
  8736                           
  8737                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8738  092F  307F               	movlw	127
  8739  0930  00A4               	movwf	??_CC2500_TxData
  8740  0931  0824               	movf	??_CC2500_TxData,w
  8741  0932  00FB               	movwf	_SPI0Buffer
  8742                           
  8743                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8744  0933  2937               	goto	l6342
  8745  0934                     l6340:	
  8746                           
  8747                           ;CC2500_B1.c: 38: Timeout_Counter();
  8748  0934  319D  25D4  3189   	fcall	_Timeout_Counter
  8749  0937                     l6342:	
  8750  0937  0020               	movlb	0	; select bank0
  8751  0938  1E8E               	btfss	14,5	;volatile
  8752  0939  293D               	goto	l6346
  8753  093A  0021               	movlb	1	; select bank1
  8754  093B  1D2B               	btfss	(_myMain^(0+128)+11),2
  8755  093C  2934               	goto	l6340
  8756  093D                     l6346:	
  8757                           
  8758                           ;CC2500_B1.c: 39: };
  8759                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8760  093D  319B  23A2  3189   	fcall	_set_TimeoutCleared
  8761                           
  8762                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8763  0940  319D  25AC  3189   	fcall	_CC2500_WriteByte
  8764                           
  8765                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8766  0943  0021               	movlb	1	; select bank1
  8767  0944  0853               	movf	_Tx_Length^(0+128),w
  8768  0945  0020               	movlb	0	; select bank0
  8769  0946  00A4               	movwf	??_CC2500_TxData
  8770  0947  0824               	movf	??_CC2500_TxData,w
  8771  0948  00FB               	movwf	_SPI0Buffer
  8772                           
  8773                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8774  0949  319D  25AC  3189   	fcall	_CC2500_WriteByte
  8775                           
  8776                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8777  094C  0020               	movlb	0	; select bank0
  8778  094D  01A5               	clrf	CC2500_TxData@loop_e
  8779  094E                     l6360:	
  8780  094E  0021               	movlb	1	; select bank1
  8781  094F  0853               	movf	_Tx_Length^(0+128),w
  8782  0950  0020               	movlb	0	; select bank0
  8783  0951  0225               	subwf	CC2500_TxData@loop_e,w
  8784  0952  1803               	btfsc	3,0
  8785  0953  2966               	goto	l231
  8786                           
  8787                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8788  0954  0825               	movf	CC2500_TxData@loop_e,w
  8789  0955  3E20               	addlw	_RF_Data& (0+255)
  8790  0956  0086               	movwf	6
  8791  0957  3001               	movlw	1	; select bank2/3
  8792  0958  0087               	movwf	7
  8793  0959  0801               	movf	1,w
  8794  095A  00A4               	movwf	??_CC2500_TxData
  8795  095B  0824               	movf	??_CC2500_TxData,w
  8796  095C  00FB               	movwf	_SPI0Buffer
  8797                           
  8798                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8799  095D  319D  25AC  3189   	fcall	_CC2500_WriteByte
  8800  0960  3001               	movlw	1
  8801  0961  0020               	movlb	0	; select bank0
  8802  0962  00A4               	movwf	??_CC2500_TxData
  8803  0963  0824               	movf	??_CC2500_TxData,w
  8804  0964  07A5               	addwf	CC2500_TxData@loop_e,f
  8805  0965  294E               	goto	l6360
  8806  0966                     l231:	
  8807                           
  8808                           ;CC2500_B1.c: 48: }
  8809                           ;CC2500_B1.c: 49: RC0 = 1;
  8810  0966  140E               	bsf	14,0	;volatile
  8811                           
  8812                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8813  0967  3035               	movlw	53
  8814  0968  319E  262D  3189   	fcall	_CC2500_WriteCommand
  8815                           
  8816                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  8817  096B  296F               	goto	l6366
  8818  096C                     l6364:	
  8819                           
  8820                           ;CC2500_B1.c: 52: Timeout_Counter();
  8821  096C  319D  25D4  3189   	fcall	_Timeout_Counter
  8822  096F                     l6366:	
  8823  096F  0020               	movlb	0	; select bank0
  8824  0970  188E               	btfsc	14,1	;volatile
  8825  0971  2975               	goto	l6370
  8826  0972  0021               	movlb	1	; select bank1
  8827  0973  1D2B               	btfss	(_myMain^(0+128)+11),2
  8828  0974  296C               	goto	l6364
  8829  0975                     l6370:	
  8830                           
  8831                           ;CC2500_B1.c: 53: };
  8832                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8833  0975  319B  23A2  3189   	fcall	_set_TimeoutCleared
  8834                           
  8835                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  8836  0978  297C               	goto	l6374
  8837  0979                     l6372:	
  8838                           
  8839                           ;CC2500_B1.c: 57: Timeout_Counter();
  8840  0979  319D  25D4  3189   	fcall	_Timeout_Counter
  8841  097C                     l6374:	
  8842  097C  0020               	movlb	0	; select bank0
  8843  097D  1C8E               	btfss	14,1	;volatile
  8844  097E  2982               	goto	l6378
  8845  097F  0021               	movlb	1	; select bank1
  8846  0980  1D2B               	btfss	(_myMain^(0+128)+11),2
  8847  0981  2979               	goto	l6372
  8848  0982                     l6378:	
  8849                           
  8850                           ;CC2500_B1.c: 58: };
  8851                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8852  0982  319B  23A2  3189   	fcall	_set_TimeoutCleared
  8853                           
  8854                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8855  0985  3036               	movlw	54
  8856  0986  319E  262D  3189   	fcall	_CC2500_WriteCommand
  8857                           
  8858                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8859  0989  303B               	movlw	59
  8860  098A  319E  262D         	fcall	_CC2500_WriteCommand
  8861                           
  8862                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8863  098C  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8864  098D  0008               	return
  8865  098E                     __end_of_CC2500_TxData:	
  8866                           
  8867                           	psect	text39
  8868  0ABB                     __ptext39:	
  8869 ;; *************** function _CC2500_RxData *****************
  8870 ;; Defined at:
  8871 ;;		line 70 in file "../src/CC2500_B1.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;		None
  8874 ;; Auto vars:     Size  Location     Type
  8875 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8876 ;; Return value:  Size  Location     Type
  8877 ;;		None               void
  8878 ;; Registers used:
  8879 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8880 ;; Tracked objects:
  8881 ;;		On entry : 0/0
  8882 ;;		On exit  : 0/0
  8883 ;;		Unchanged: 0/0
  8884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;Total ram usage:        2 bytes
  8890 ;; Hardware stack levels used:    1
  8891 ;; Hardware stack levels required when called:    7
  8892 ;; This function calls:
  8893 ;;		_CC2500_ReadByte
  8894 ;;		_CC2500_ReadStatus
  8895 ;;		_CC2500_WriteByte
  8896 ;;		_Timeout_Counter
  8897 ;;		_set_TimeoutCleared
  8898 ;; This function is called by:
  8899 ;;		_setRF_Main
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           
  8904                           ;psect for function _CC2500_RxData
  8905  0ABB                     _CC2500_RxData:	
  8906                           
  8907                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8908                           ;CC2500_B1.c: 75: if (RC1 == 1)
  8909                           
  8910                           ;incstack = 0
  8911                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8912  0ABB  0020               	movlb	0	; select bank0
  8913  0ABC  188E               	btfsc	14,1	;volatile
  8914  0ABD  2AC2               	goto	l6392
  8915  0ABE  2ACB               	goto	l6398
  8916  0ABF                     l6390:	
  8917                           ;CC2500_B1.c: 76: {
  8918                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  8919                           
  8920                           
  8921                           ;CC2500_B1.c: 78: Timeout_Counter();
  8922  0ABF  319D  25D4  318A   	fcall	_Timeout_Counter
  8923  0AC2                     l6392:	
  8924  0AC2  0020               	movlb	0	; select bank0
  8925  0AC3  1C8E               	btfss	14,1	;volatile
  8926  0AC4  2AC8               	goto	l6396
  8927  0AC5  0021               	movlb	1	; select bank1
  8928  0AC6  1D2B               	btfss	(_myMain^(0+128)+11),2
  8929  0AC7  2ABF               	goto	l6390
  8930  0AC8                     l6396:	
  8931                           
  8932                           ;CC2500_B1.c: 79: };
  8933                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8934  0AC8  319B  23A2  318A   	fcall	_set_TimeoutCleared
  8935  0ACB                     l6398:	
  8936                           
  8937                           ;CC2500_B1.c: 81: }
  8938                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8939  0ACB  303B               	movlw	59
  8940  0ACC  319F  271E  318A   	fcall	_CC2500_ReadStatus
  8941                           
  8942                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8943  0ACF  0021               	movlb	1	; select bank1
  8944  0AD0  0856               	movf	_s_data^(0+128),w
  8945  0AD1  1903               	btfsc	3,2
  8946  0AD2  0008               	return
  8947                           
  8948                           ;CC2500_B1.c: 86: RC0 = 0;
  8949  0AD3  0020               	movlb	0	; select bank0
  8950  0AD4  100E               	bcf	14,0	;volatile
  8951                           
  8952                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8953  0AD5  30FF               	movlw	255
  8954  0AD6  00A4               	movwf	??_CC2500_RxData
  8955  0AD7  0824               	movf	??_CC2500_RxData,w
  8956  0AD8  00FB               	movwf	_SPI0Buffer
  8957                           
  8958                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  8959  0AD9  2ADD               	goto	l6408
  8960  0ADA                     l6406:	
  8961                           
  8962                           ;CC2500_B1.c: 89: Timeout_Counter();
  8963  0ADA  319D  25D4  318A   	fcall	_Timeout_Counter
  8964  0ADD                     l6408:	
  8965  0ADD  0020               	movlb	0	; select bank0
  8966  0ADE  1E8E               	btfss	14,5	;volatile
  8967  0ADF  2AE3               	goto	l6412
  8968  0AE0  0021               	movlb	1	; select bank1
  8969  0AE1  1D2B               	btfss	(_myMain^(0+128)+11),2
  8970  0AE2  2ADA               	goto	l6406
  8971  0AE3                     l6412:	
  8972                           
  8973                           ;CC2500_B1.c: 90: };
  8974                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8975  0AE3  319B  23A2  318A   	fcall	_set_TimeoutCleared
  8976                           
  8977                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8978  0AE6  319D  25AC  318A   	fcall	_CC2500_WriteByte
  8979                           
  8980                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8981  0AE9  319D  25FE  318A   	fcall	_CC2500_ReadByte
  8982                           
  8983                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8984  0AEC  087B               	movf	_SPI0Buffer,w
  8985  0AED  0020               	movlb	0	; select bank0
  8986  0AEE  00A4               	movwf	??_CC2500_RxData
  8987  0AEF  0824               	movf	??_CC2500_RxData,w
  8988  0AF0  0021               	movlb	1	; select bank1
  8989  0AF1  00D1               	movwf	_Rx_Length^(0+128)
  8990                           
  8991                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8992  0AF2  0020               	movlb	0	; select bank0
  8993  0AF3  01A5               	clrf	CC2500_RxData@loop_f
  8994  0AF4                     l6428:	
  8995  0AF4  0021               	movlb	1	; select bank1
  8996  0AF5  0851               	movf	_Rx_Length^(0+128),w
  8997  0AF6  0020               	movlb	0	; select bank0
  8998  0AF7  0225               	subwf	CC2500_RxData@loop_f,w
  8999  0AF8  1803               	btfsc	3,0
  9000  0AF9  2B0C               	goto	l6430
  9001                           
  9002                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9003  0AFA  319D  25FE  318A   	fcall	_CC2500_ReadByte
  9004                           
  9005                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9006  0AFD  087B               	movf	_SPI0Buffer,w
  9007  0AFE  0020               	movlb	0	; select bank0
  9008  0AFF  00A4               	movwf	??_CC2500_RxData
  9009  0B00  0825               	movf	CC2500_RxData@loop_f,w
  9010  0B01  3E20               	addlw	_RF_Data& (0+255)
  9011  0B02  0086               	movwf	6
  9012  0B03  3001               	movlw	1	; select bank2/3
  9013  0B04  0087               	movwf	7
  9014  0B05  0824               	movf	??_CC2500_RxData,w
  9015  0B06  0081               	movwf	1
  9016  0B07  3001               	movlw	1
  9017  0B08  00A4               	movwf	??_CC2500_RxData
  9018  0B09  0824               	movf	??_CC2500_RxData,w
  9019  0B0A  07A5               	addwf	CC2500_RxData@loop_f,f
  9020  0B0B  2AF4               	goto	l6428
  9021  0B0C                     l6430:	
  9022                           
  9023                           ;CC2500_B1.c: 99: }
  9024                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9025  0B0C  319D  25FE  318A   	fcall	_CC2500_ReadByte
  9026                           
  9027                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9028  0B0F  087B               	movf	_SPI0Buffer,w
  9029  0B10  0020               	movlb	0	; select bank0
  9030  0B11  00A4               	movwf	??_CC2500_RxData
  9031  0B12  0824               	movf	??_CC2500_RxData,w
  9032  0B13  0021               	movlb	1	; select bank1
  9033  0B14  00D0               	movwf	_RSSI^(0+128)
  9034                           
  9035                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9036  0B15  319D  25FE         	fcall	_CC2500_ReadByte
  9037                           
  9038                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9039  0B17  087B               	movf	_SPI0Buffer,w
  9040  0B18  0020               	movlb	0	; select bank0
  9041  0B19  00A4               	movwf	??_CC2500_RxData
  9042  0B1A  0824               	movf	??_CC2500_RxData,w
  9043  0B1B  0021               	movlb	1	; select bank1
  9044  0B1C  00CD               	movwf	_CRC^(0+128)
  9045                           
  9046                           ;CC2500_B1.c: 104: RC0 = 1;
  9047  0B1D  0020               	movlb	0	; select bank0
  9048  0B1E  140E               	bsf	14,0	;volatile
  9049                           
  9050                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9051  0B1F  0021               	movlb	1	; select bank1
  9052  0B20  1BCD               	btfsc	_CRC^(0+128),7
  9053                           
  9054                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9055  0B21  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9056                           
  9057                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9058  0B22  11BA               	bcf	_RF1^(0+128),3
  9059                           
  9060                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9061  0B23  14BA               	bsf	_RF1^(0+128),1
  9062  0B24  0008               	return
  9063  0B25                     __end_of_CC2500_RxData:	
  9064                           
  9065                           	psect	text40
  9066  1F1E                     __ptext40:	
  9067 ;; *************** function _CC2500_ReadStatus *****************
  9068 ;; Defined at:
  9069 ;;		line 301 in file "../src/CC2500_B1.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;  status_addr     1    wreg     unsigned char 
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9074 ;; Return value:  Size  Location     Type
  9075 ;;		None               void
  9076 ;; Registers used:
  9077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9078 ;; Tracked objects:
  9079 ;;		On entry : 0/0
  9080 ;;		On exit  : 0/0
  9081 ;;		Unchanged: 0/0
  9082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;Total ram usage:        2 bytes
  9088 ;; Hardware stack levels used:    1
  9089 ;; Hardware stack levels required when called:    6
  9090 ;; This function calls:
  9091 ;;		_CC2500_ReadByte
  9092 ;;		_CC2500_WriteByte
  9093 ;;		_Timeout_Counter
  9094 ;;		_set_TimeoutCleared
  9095 ;; This function is called by:
  9096 ;;		_CC2500_RxData
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           
  9101                           ;psect for function _CC2500_ReadStatus
  9102  1F1E                     _CC2500_ReadStatus:	
  9103                           
  9104                           ;incstack = 0
  9105                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9106                           ;CC2500_ReadStatus@status_addr stored from wreg
  9107  1F1E  0020               	movlb	0	; select bank0
  9108  1F1F  00A3               	movwf	CC2500_ReadStatus@status_addr
  9109                           
  9110                           ;CC2500_B1.c: 302: RC0 = 0;
  9111  1F20  100E               	bcf	14,0	;volatile
  9112                           
  9113                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9114  1F21  0823               	movf	CC2500_ReadStatus@status_addr,w
  9115  1F22  3EC0               	addlw	192
  9116  1F23  00A2               	movwf	??_CC2500_ReadStatus
  9117  1F24  0822               	movf	??_CC2500_ReadStatus,w
  9118  1F25  00FB               	movwf	_SPI0Buffer
  9119                           
  9120                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  9121  1F26  2F2A               	goto	l6206
  9122  1F27                     l6204:	
  9123                           
  9124                           ;CC2500_B1.c: 306: Timeout_Counter();
  9125  1F27  319D  25D4  319F   	fcall	_Timeout_Counter
  9126  1F2A                     l6206:	
  9127  1F2A  0020               	movlb	0	; select bank0
  9128  1F2B  1E8E               	btfss	14,5	;volatile
  9129  1F2C  2F30               	goto	l6210
  9130  1F2D  0021               	movlb	1	; select bank1
  9131  1F2E  1D2B               	btfss	(_myMain^(0+128)+11),2
  9132  1F2F  2F27               	goto	l6204
  9133  1F30                     l6210:	
  9134                           
  9135                           ;CC2500_B1.c: 307: };
  9136                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9137  1F30  319B  23A2  319F   	fcall	_set_TimeoutCleared
  9138                           
  9139                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9140  1F33  319D  25AC  319F   	fcall	_CC2500_WriteByte
  9141                           
  9142                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9143  1F36  319D  25FE         	fcall	_CC2500_ReadByte
  9144                           
  9145                           ;CC2500_B1.c: 312: RC0 = 1;
  9146  1F38  0020               	movlb	0	; select bank0
  9147  1F39  140E               	bsf	14,0	;volatile
  9148                           
  9149                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9150  1F3A  087B               	movf	_SPI0Buffer,w
  9151  1F3B  00A2               	movwf	??_CC2500_ReadStatus
  9152  1F3C  0822               	movf	??_CC2500_ReadStatus,w
  9153  1F3D  0021               	movlb	1	; select bank1
  9154  1F3E  00D6               	movwf	_s_data^(0+128)
  9155  1F3F  0008               	return
  9156  1F40                     __end_of_CC2500_ReadStatus:	
  9157                           
  9158                           	psect	text41
  9159  1DFE                     __ptext41:	
  9160 ;; *************** function _CC2500_ReadByte *****************
  9161 ;; Defined at:
  9162 ;;		line 235 in file "../src/CC2500_B1.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9167 ;; Return value:  Size  Location     Type
  9168 ;;		None               void
  9169 ;; Registers used:
  9170 ;;		wreg, status,2, status,0
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;Total ram usage:        2 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    5
  9183 ;; This function calls:
  9184 ;;		Nothing
  9185 ;; This function is called by:
  9186 ;;		_CC2500_RxData
  9187 ;;		_CC2500_ReadStatus
  9188 ;;		_CC2500_ReadREG
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           
  9193                           ;psect for function _CC2500_ReadByte
  9194  1DFE                     _CC2500_ReadByte:	
  9195                           
  9196                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9197                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9198                           
  9199                           ;incstack = 0
  9200                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9201  1DFE  0020               	movlb	0	; select bank0
  9202  1DFF  01A1               	clrf	CC2500_ReadByte@loop_b
  9203  1E00                     L2:	
  9204  1E00  3008               	movlw	8
  9205  1E01  0221               	subwf	CC2500_ReadByte@loop_b,w
  9206  1E02  1803               	btfsc	3,0
  9207  1E03  0008               	return
  9208                           
  9209                           ;CC2500_B1.c: 238: RC3 = 1;
  9210  1E04  158E               	bsf	14,3	;volatile
  9211                           
  9212                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9213  1E05  1003               	clrc
  9214  1E06  0DFB               	rlf	_SPI0Buffer,f
  9215                           
  9216                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9217  1E07  1E8E               	btfss	14,5	;volatile
  9218  1E08  2E0B               	goto	l6110
  9219                           
  9220                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9221  1E09  147B               	bsf	_SPI0Buffer,0
  9222  1E0A  2E0F               	goto	l6112
  9223  1E0B                     l6110:	
  9224                           
  9225                           ;CC2500_B1.c: 242: else
  9226                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9227  1E0B  30FE               	movlw	254
  9228  1E0C  00A0               	movwf	??_CC2500_ReadByte
  9229  1E0D  0820               	movf	??_CC2500_ReadByte,w
  9230  1E0E  05FB               	andwf	_SPI0Buffer,f
  9231  1E0F                     l6112:	
  9232                           
  9233                           ;CC2500_B1.c: 244: RC3 = 0;
  9234  1E0F  118E               	bcf	14,3	;volatile
  9235  1E10  3001               	movlw	1
  9236  1E11  00A0               	movwf	??_CC2500_ReadByte
  9237  1E12  0820               	movf	??_CC2500_ReadByte,w
  9238  1E13  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9239  1E14  2E00               	goto	L2
  9240  1E15                     __end_of_CC2500_ReadByte:	
  9241                           
  9242                           	psect	text42
  9243  1B6E                     __ptext42:	
  9244 ;; *************** function _RF_Initialization *****************
  9245 ;; Defined at:
  9246 ;;		line 9 in file "../src/RF_Control_B1.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;		None
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;		None
  9251 ;; Return value:  Size  Location     Type
  9252 ;;		None               void
  9253 ;; Registers used:
  9254 ;;		wreg, status,2, status,0, pclath, cstack
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;Total ram usage:        0 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    6
  9267 ;; This function calls:
  9268 ;;		_setRF_Initialization
  9269 ;; This function is called by:
  9270 ;;		_main
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           
  9275                           ;psect for function _RF_Initialization
  9276  1B6E                     _RF_Initialization:	
  9277                           
  9278                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9279                           
  9280                           ;incstack = 0
  9281                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9282  1B6E  319C  244D         	fcall	_setRF_Initialization
  9283  1B70  0008               	return
  9284  1B71                     __end_of_RF_Initialization:	
  9285                           
  9286                           	psect	text43
  9287  1C4D                     __ptext43:	
  9288 ;; *************** function _setRF_Initialization *****************
  9289 ;; Defined at:
  9290 ;;		line 43 in file "../src/RF_Control_B1.c"
  9291 ;; Parameters:    Size  Location     Type
  9292 ;;		None
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;		None
  9295 ;; Return value:  Size  Location     Type
  9296 ;;		None               void
  9297 ;; Registers used:
  9298 ;;		wreg
  9299 ;; Tracked objects:
  9300 ;;		On entry : 0/0
  9301 ;;		On exit  : 0/0
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;Total ram usage:        1 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:    5
  9311 ;; This function calls:
  9312 ;;		Nothing
  9313 ;; This function is called by:
  9314 ;;		_RF_Initialization
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           
  9319                           ;psect for function _setRF_Initialization
  9320  1C4D                     _setRF_Initialization:	
  9321                           
  9322                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9323                           
  9324                           ;incstack = 0
  9325                           ; Regs used in _setRF_Initialization: [wreg]
  9326  1C4D  3015               	movlw	21
  9327  1C4E  0020               	movlb	0	; select bank0
  9328  1C4F  00A0               	movwf	??_setRF_Initialization
  9329  1C50  0820               	movf	??_setRF_Initialization,w
  9330  1C51  0021               	movlb	1	; select bank1
  9331  1C52  00D3               	movwf	_Tx_Length^(0+128)
  9332                           
  9333                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9334  1C53  3005               	movlw	5
  9335  1C54  00C1               	movwf	(_RF1^(0+128)+7)
  9336  1C55  3000               	movlw	0
  9337  1C56  00C2               	movwf	(_RF1^(0+128)+8)
  9338  1C57  0008               	return
  9339  1C58                     __end_of_setRF_Initialization:	
  9340                           
  9341                           	psect	text44
  9342  1D62                     __ptext44:	
  9343 ;; *************** function _Mcu_Initialization *****************
  9344 ;; Defined at:
  9345 ;;		line 30 in file "../src/MCU_B1.c"
  9346 ;; Parameters:    Size  Location     Type
  9347 ;;		None
  9348 ;; Auto vars:     Size  Location     Type
  9349 ;;		None
  9350 ;; Return value:  Size  Location     Type
  9351 ;;		None               void
  9352 ;; Registers used:
  9353 ;;		wreg, status,2, status,0, pclath, cstack
  9354 ;; Tracked objects:
  9355 ;;		On entry : 0/0
  9356 ;;		On exit  : 0/0
  9357 ;;		Unchanged: 0/0
  9358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;Total ram usage:        0 bytes
  9364 ;; Hardware stack levels used:    1
  9365 ;; Hardware stack levels required when called:    6
  9366 ;; This function calls:
  9367 ;;		_ADC_Set
  9368 ;;		_Fosc_Set
  9369 ;;		_IOC_Set
  9370 ;;		_IO_Set
  9371 ;;		_TMR1_Set
  9372 ;;		_WDT_Set
  9373 ;; This function is called by:
  9374 ;;		_main
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           
  9379                           ;psect for function _Mcu_Initialization
  9380  1D62                     _Mcu_Initialization:	
  9381                           
  9382                           ;MCU_B1.c: 32: Fosc_Set();
  9383                           
  9384                           ;incstack = 0
  9385                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9386  1D62  319B  239E  319D   	fcall	_Fosc_Set
  9387                           
  9388                           ;MCU_B1.c: 34: IO_Set();
  9389  1D65  319E  2615  319D   	fcall	_IO_Set
  9390                           
  9391                           ;MCU_B1.c: 36: ;;
  9392                           ;MCU_B1.c: 38: TMR1_Set();
  9393  1D68  3190  2067  319D   	fcall	_TMR1_Set
  9394                           
  9395                           ;MCU_B1.c: 40: ADC_Set();
  9396  1D6B  319B  23BE  319D   	fcall	_ADC_Set
  9397                           
  9398                           ;MCU_B1.c: 42: ;;
  9399                           ;MCU_B1.c: 44: ;;
  9400                           ;MCU_B1.c: 46: IOC_Set();
  9401  1D6E  319C  2493  319D   	fcall	_IOC_Set
  9402                           
  9403                           ;MCU_B1.c: 48: ;;
  9404                           ;MCU_B1.c: 50: ;;
  9405                           ;MCU_B1.c: 52: WDT_Set();
  9406  1D71  319C  2442         	fcall	_WDT_Set
  9407  1D73  0008               	return
  9408  1D74                     __end_of_Mcu_Initialization:	
  9409                           
  9410                           	psect	text45
  9411  1C42                     __ptext45:	
  9412 ;; *************** function _WDT_Set *****************
  9413 ;; Defined at:
  9414 ;;		line 1084 in file "../src/MCU_B1.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;		None
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;		None
  9419 ;; Return value:  Size  Location     Type
  9420 ;;		None               void
  9421 ;; Registers used:
  9422 ;;		wreg
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;Total ram usage:        1 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    5
  9435 ;; This function calls:
  9436 ;;		Nothing
  9437 ;; This function is called by:
  9438 ;;		_Mcu_Initialization
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           
  9443                           ;psect for function _WDT_Set
  9444  1C42                     _WDT_Set:	
  9445                           
  9446                           ;MCU_B1.c: 1091: WDTCON = 0b00010111;;
  9447                           
  9448                           ;incstack = 0
  9449                           ; Regs used in _WDT_Set: [wreg]
  9450  1C42  3017               	movlw	23
  9451  1C43  0021               	movlb	1	; select bank1
  9452  1C44  0097               	movwf	23	;volatile
  9453                           
  9454                           ;MCU_B1.c: 1093: WDT.Enable = 1;
  9455  1C45  144B               	bsf	_WDT^(0+128),0
  9456                           
  9457                           ;MCU_B1.c: 1094: WDT.Timer = 10;
  9458  1C46  300A               	movlw	10
  9459  1C47  0020               	movlb	0	; select bank0
  9460  1C48  00A0               	movwf	??_WDT_Set
  9461  1C49  0820               	movf	??_WDT_Set,w
  9462  1C4A  0021               	movlb	1	; select bank1
  9463  1C4B  00CC               	movwf	(_WDT^(0+128)+1)
  9464  1C4C  0008               	return
  9465  1C4D                     __end_of_WDT_Set:	
  9466                           
  9467                           	psect	text46
  9468  1067                     __ptext46:	
  9469 ;; *************** function _TMR1_Set *****************
  9470 ;; Defined at:
  9471 ;;		line 199 in file "../src/MCU_B1.c"
  9472 ;; Parameters:    Size  Location     Type
  9473 ;;		None
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;		None
  9476 ;; Return value:  Size  Location     Type
  9477 ;;		None               void
  9478 ;; Registers used:
  9479 ;;		wreg
  9480 ;; Tracked objects:
  9481 ;;		On entry : 0/0
  9482 ;;		On exit  : 0/0
  9483 ;;		Unchanged: 0/0
  9484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;Total ram usage:        0 bytes
  9490 ;; Hardware stack levels used:    1
  9491 ;; Hardware stack levels required when called:    5
  9492 ;; This function calls:
  9493 ;;		Nothing
  9494 ;; This function is called by:
  9495 ;;		_Mcu_Initialization
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           
  9500                           ;psect for function _TMR1_Set
  9501  1067                     _TMR1_Set:	
  9502                           
  9503                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9504                           
  9505                           ;incstack = 0
  9506                           ; Regs used in _TMR1_Set: [wreg]
  9507  1067  3041               	movlw	65
  9508  1068  0020               	movlb	0	; select bank0
  9509  1069  0098               	movwf	24	;volatile
  9510                           
  9511                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9512  106A  30FA               	movlw	250
  9513  106B  0097               	movwf	23	;volatile
  9514                           
  9515                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9516  106C  3038               	movlw	56
  9517  106D  0096               	movwf	22	;volatile
  9518                           
  9519                           ;MCU_B1.c: 203: TMR1IE = 1;
  9520  106E  0021               	movlb	1	; select bank1
  9521  106F  1411               	bsf	17,0	;volatile
  9522                           
  9523                           ;MCU_B1.c: 204: PEIE = 1;
  9524  1070  170B               	bsf	11,6	;volatile
  9525                           
  9526                           ;MCU_B1.c: 205: GIE = 1;
  9527  1071  178B               	bsf	11,7	;volatile
  9528  1072  0008               	return
  9529  1073                     __end_of_TMR1_Set:	
  9530                           
  9531                           	psect	text47
  9532  1E15                     __ptext47:	
  9533 ;; *************** function _IO_Set *****************
  9534 ;; Defined at:
  9535 ;;		line 60 in file "../src/MCU_B1.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;		None
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;		None
  9540 ;; Return value:  Size  Location     Type
  9541 ;;		None               void
  9542 ;; Registers used:
  9543 ;;		wreg, status,2
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;Total ram usage:        0 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    5
  9556 ;; This function calls:
  9557 ;;		Nothing
  9558 ;; This function is called by:
  9559 ;;		_Mcu_Initialization
  9560 ;; This function uses a non-reentrant model
  9561 ;;
  9562                           
  9563                           
  9564                           ;psect for function _IO_Set
  9565  1E15                     _IO_Set:	
  9566                           
  9567                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9568                           
  9569                           ;incstack = 0
  9570                           ; Regs used in _IO_Set: [wreg+status,2]
  9571  1E15  30F7               	movlw	247
  9572  1E16  0021               	movlb	1	; select bank1
  9573  1E17  008C               	movwf	12	;volatile
  9574                           
  9575                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9576  1E18  3004               	movlw	4
  9577  1E19  008D               	movwf	13	;volatile
  9578                           
  9579                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9580  1E1A  3026               	movlw	38
  9581  1E1B  008E               	movwf	14	;volatile
  9582                           
  9583                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9584  1E1C  0022               	movlb	2	; select bank2
  9585  1E1D  018C               	clrf	12	;volatile
  9586                           
  9587                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9588  1E1E  018D               	clrf	13	;volatile
  9589                           
  9590                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9591  1E1F  018E               	clrf	14	;volatile
  9592                           
  9593                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9594  1E20  300E               	movlw	14
  9595  1E21  0023               	movlb	3	; select bank3
  9596  1E22  008C               	movwf	12	;volatile
  9597                           
  9598                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9599  1E23  018D               	clrf	13	;volatile
  9600                           
  9601                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9602  1E24  018E               	clrf	14	;volatile
  9603                           
  9604                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9605  1E25  30F7               	movlw	247
  9606  1E26  0020               	movlb	0	; select bank0
  9607  1E27  008C               	movwf	12	;volatile
  9608                           
  9609                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9610  1E28  3004               	movlw	4
  9611  1E29  008D               	movwf	13	;volatile
  9612                           
  9613                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9614  1E2A  3026               	movlw	38
  9615  1E2B  008E               	movwf	14	;volatile
  9616  1E2C  0008               	return
  9617  1E2D                     __end_of_IO_Set:	
  9618                           
  9619                           	psect	text48
  9620  1C93                     __ptext48:	
  9621 ;; *************** function _IOC_Set *****************
  9622 ;; Defined at:
  9623 ;;		line 365 in file "../src/MCU_B1.c"
  9624 ;; Parameters:    Size  Location     Type
  9625 ;;		None
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;		None
  9628 ;; Return value:  Size  Location     Type
  9629 ;;		None               void
  9630 ;; Registers used:
  9631 ;;		wreg, status,2
  9632 ;; Tracked objects:
  9633 ;;		On entry : 0/0
  9634 ;;		On exit  : 0/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9641 ;;Total ram usage:        0 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:    5
  9644 ;; This function calls:
  9645 ;;		Nothing
  9646 ;; This function is called by:
  9647 ;;		_Mcu_Initialization
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           
  9652                           ;psect for function _IOC_Set
  9653  1C93                     _IOC_Set:	
  9654                           
  9655                           ;MCU_B1.c: 366: WPUB2 = 0;
  9656                           
  9657                           ;incstack = 0
  9658                           ; Regs used in _IOC_Set: [wreg+status,2]
  9659  1C93  0024               	movlb	4	; select bank4
  9660  1C94  110D               	bcf	13,2	;volatile
  9661                           
  9662                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9663  1C95  0027               	movlb	7	; select bank7
  9664  1C96  0194               	clrf	20	;volatile
  9665                           
  9666                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9667  1C97  3004               	movlw	4
  9668  1C98  0095               	movwf	21	;volatile
  9669                           
  9670                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9671  1C99  0196               	clrf	22	;volatile
  9672                           
  9673                           ;MCU_B1.c: 393: IOCIE = 1;
  9674  1C9A  158B               	bsf	11,3	;volatile
  9675                           
  9676                           ;MCU_B1.c: 394: IOCIF = 0;
  9677  1C9B  100B               	bcf	11,0	;volatile
  9678                           
  9679                           ;MCU_B1.c: 395: PEIE = 1;
  9680  1C9C  170B               	bsf	11,6	;volatile
  9681                           
  9682                           ;MCU_B1.c: 396: GIE = 1;
  9683  1C9D  178B               	bsf	11,7	;volatile
  9684  1C9E  0008               	return
  9685  1C9F                     __end_of_IOC_Set:	
  9686                           
  9687                           	psect	text49
  9688  1B9E                     __ptext49:	
  9689 ;; *************** function _Fosc_Set *****************
  9690 ;; Defined at:
  9691 ;;		line 56 in file "../src/MCU_B1.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;		None
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;		None
  9696 ;; Return value:  Size  Location     Type
  9697 ;;		None               void
  9698 ;; Registers used:
  9699 ;;		wreg
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;Total ram usage:        0 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    5
  9712 ;; This function calls:
  9713 ;;		Nothing
  9714 ;; This function is called by:
  9715 ;;		_Mcu_Initialization
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           
  9720                           ;psect for function _Fosc_Set
  9721  1B9E                     _Fosc_Set:	
  9722                           
  9723                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9724                           
  9725                           ;incstack = 0
  9726                           ; Regs used in _Fosc_Set: [wreg]
  9727  1B9E  3078               	movlw	120
  9728  1B9F  0021               	movlb	1	; select bank1
  9729  1BA0  0099               	movwf	25	;volatile
  9730  1BA1  0008               	return
  9731  1BA2                     __end_of_Fosc_Set:	
  9732                           
  9733                           	psect	text50
  9734  1BBE                     __ptext50:	
  9735 ;; *************** function _ADC_Set *****************
  9736 ;; Defined at:
  9737 ;;		line 420 in file "../src/MCU_B1.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;		None
  9740 ;; Auto vars:     Size  Location     Type
  9741 ;;		None
  9742 ;; Return value:  Size  Location     Type
  9743 ;;		None               void
  9744 ;; Registers used:
  9745 ;;		wreg
  9746 ;; Tracked objects:
  9747 ;;		On entry : 0/0
  9748 ;;		On exit  : 0/0
  9749 ;;		Unchanged: 0/0
  9750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;Total ram usage:        0 bytes
  9756 ;; Hardware stack levels used:    1
  9757 ;; Hardware stack levels required when called:    5
  9758 ;; This function calls:
  9759 ;;		Nothing
  9760 ;; This function is called by:
  9761 ;;		_Mcu_Initialization
  9762 ;; This function uses a non-reentrant model
  9763 ;;
  9764                           
  9765                           
  9766                           ;psect for function _ADC_Set
  9767  1BBE                     _ADC_Set:	
  9768                           
  9769                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9770                           
  9771                           ;incstack = 0
  9772                           ; Regs used in _ADC_Set: [wreg]
  9773  1BBE  30F3               	movlw	243
  9774  1BBF  0021               	movlb	1	; select bank1
  9775  1BC0  009E               	movwf	30	;volatile
  9776                           
  9777                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9778  1BC1  30C1               	movlw	193
  9779  1BC2  0022               	movlb	2	; select bank2
  9780  1BC3  0097               	movwf	23	;volatile
  9781  1BC4  0008               	return
  9782  1BC5                     __end_of_ADC_Set:	
  9783                           
  9784                           	psect	text51
  9785  0043                     __ptext51:	
  9786 ;; *************** function _Load_Main *****************
  9787 ;; Defined at:
  9788 ;;		line 39 in file "../src/OverLoad_B1.c"
  9789 ;; Parameters:    Size  Location     Type
  9790 ;;		None
  9791 ;; Auto vars:     Size  Location     Type
  9792 ;;  sw              1   12[BANK0 ] unsigned char 
  9793 ;;  i               1   16[BANK0 ] unsigned char 
  9794 ;;  error           1   15[BANK0 ] unsigned char 
  9795 ;;  adjgo           1   13[BANK0 ] unsigned char 
  9796 ;;  j               1   11[BANK0 ] unsigned char 
  9797 ;; Return value:  Size  Location     Type
  9798 ;;		None               void
  9799 ;; Registers used:
  9800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9801 ;; Tracked objects:
  9802 ;;		On entry : 0/0
  9803 ;;		On exit  : 0/0
  9804 ;;		Unchanged: 0/0
  9805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;Total ram usage:        8 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; Hardware stack levels required when called:    8
  9813 ;; This function calls:
  9814 ;;		___lwdiv
  9815 ;;		_getAll_DimmerLights_AdjGO
  9816 ;;		_getMain_All_Error_Status
  9817 ;;		_getMain_LightsStatus
  9818 ;;		_getMain_Lights_Count
  9819 ;;		_getMain_LoadOK
  9820 ;;		_setLoad_AH_AL_Restore
  9821 ;; This function is called by:
  9822 ;;		_main
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           
  9827                           ;psect for function _Load_Main
  9828  0043                     _Load_Main:	
  9829                           
  9830                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  9831                           
  9832                           ;incstack = 0
  9833                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9834  0043  0020               	movlb	0	; select bank0
  9835  0044  01B0               	clrf	Load_Main@i
  9836  0045  01AB               	clrf	Load_Main@j
  9837  0046  3000               	movlw	0
  9838  0047  3191  218C  3180   	fcall	_getMain_All_Error_Status
  9839  004A  0020               	movlb	0	; select bank0
  9840  004B  00A9               	movwf	??_Load_Main
  9841  004C  0829               	movf	??_Load_Main,w
  9842  004D  00AF               	movwf	Load_Main@error
  9843  004E  01AD               	clrf	Load_Main@adjgo
  9844                           
  9845                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  9846  004F  0022               	movlb	2	; select bank2
  9847  0050  1C41               	btfss	_Load^(0+256),0
  9848  0051  29BE               	goto	l1560
  9849                           
  9850                           ;OverLoad_B1.c: 46: char sw = 1;
  9851  0052  0020               	movlb	0	; select bank0
  9852  0053  01AC               	clrf	Load_Main@sw
  9853  0054  0AAC               	incf	Load_Main@sw,f
  9854                           
  9855                           ;OverLoad_B1.c: 55: adjgo = getAll_DimmerLights_AdjGO(sw);
  9856  0055  082C               	movf	Load_Main@sw,w
  9857  0056  319B  239A  3180   	fcall	_getAll_DimmerLights_AdjGO
  9858  0059  0020               	movlb	0	; select bank0
  9859  005A  00A9               	movwf	??_Load_Main
  9860  005B  0829               	movf	??_Load_Main,w
  9861  005C  00AD               	movwf	Load_Main@adjgo
  9862                           
  9863                           ;OverLoad_B1.c: 57: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  9864  005D  01AE               	clrf	_Load_Main$3733
  9865  005E  3190  209D  3180   	fcall	_getMain_LightsStatus
  9866  0061  3A01               	xorlw	1
  9867  0062  1D03               	skipz
  9868  0063  286D               	goto	l7730
  9869  0064  0020               	movlb	0	; select bank0
  9870  0065  08AF               	movf	Load_Main@error,f
  9871  0066  1D03               	skipz
  9872  0067  286D               	goto	l7730
  9873  0068  08AD               	movf	Load_Main@adjgo,f
  9874  0069  1D03               	skipz
  9875  006A  286D               	goto	l7730
  9876  006B  01AE               	clrf	_Load_Main$3733
  9877  006C  0AAE               	incf	_Load_Main$3733,f
  9878  006D                     l7730:	
  9879  006D  0020               	movlb	0	; select bank0
  9880  006E  082E               	movf	_Load_Main$3733,w
  9881  006F  0022               	movlb	2	; select bank2
  9882  0070  10C1               	bcf	_Load^(0+256),1
  9883  0071  1D03               	skipz
  9884  0072  14C1               	bsf	_Load^(0+256),1
  9885                           
  9886                           ;OverLoad_B1.c: 58: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  9887  0073  319C  249F  3180   	fcall	_getMain_LoadOK
  9888  0076  3A01               	xorlw	1
  9889  0077  1D03               	skipz
  9890  0078  287E               	goto	l1563
  9891  0079  0022               	movlb	2	; select bank2
  9892  007A  19C1               	btfsc	_Load^(0+256),3
  9893  007B  287E               	goto	l1563
  9894                           
  9895                           ;OverLoad_B1.c: 59: Load.Run = 1;
  9896  007C  15C1               	bsf	_Load^(0+256),3
  9897                           
  9898                           ;OverLoad_B1.c: 60: Load.OK = 0;
  9899  007D  13C1               	bcf	_Load^(0+256),7
  9900  007E                     l1563:	
  9901                           
  9902                           ;OverLoad_B1.c: 61: }
  9903                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
  9904  007E  0022               	movlb	2	; select bank2
  9905  007F  1CC1               	btfss	_Load^(0+256),1
  9906  0080  298E               	goto	l1564
  9907                           
  9908                           ;OverLoad_B1.c: 65: Load.LightsON = 1;
  9909  0081  1541               	bsf	_Load^(0+256),2
  9910                           
  9911                           ;OverLoad_B1.c: 67: if (Load.ADtoGO == 1) {
  9912  0082  1E41               	btfss	_Load^(0+256),4
  9913  0083  298C               	goto	l1565
  9914                           
  9915                           ;OverLoad_B1.c: 68: Load.Time++;
  9916  0084  3001               	movlw	1
  9917  0085  07C2               	addwf	(_Load^(0+256)+1),f
  9918  0086  3000               	movlw	0
  9919  0087  3DC3               	addwfc	((_Load+1)^(0+256)+1),f
  9920                           
  9921                           ;OverLoad_B1.c: 69: if (Load.Time >= 5) {
  9922  0088  3000               	movlw	0
  9923  0089  0243               	subwf	((_Load+1)^(0+256)+1),w
  9924  008A  3005               	movlw	5
  9925  008B  1903               	skipnz
  9926  008C  0242               	subwf	(_Load^(0+256)+1),w
  9927  008D  1C03               	skipc
  9928  008E  0008               	return
  9929                           
  9930                           ;OverLoad_B1.c: 70: Load.Time = 0;
  9931  008F  01C2               	clrf	(_Load^(0+256)+1)
  9932  0090  01C3               	clrf	((_Load+1)^(0+256)+1)
  9933                           
  9934                           ;OverLoad_B1.c: 71: Load.ADtoGO = 0;
  9935  0091  1241               	bcf	_Load^(0+256),4
  9936                           
  9937                           ;OverLoad_B1.c: 73: for (i = 1; i < 4; i++) {
  9938  0092  0020               	movlb	0	; select bank0
  9939  0093  01B0               	clrf	Load_Main@i
  9940  0094  0AB0               	incf	Load_Main@i,f
  9941  0095  3004               	movlw	4
  9942  0096  0230               	subwf	Load_Main@i,w
  9943  0097  1803               	btfsc	3,0
  9944  0098  28C3               	goto	l7758
  9945  0099                     l7752:	
  9946                           
  9947                           ;OverLoad_B1.c: 74: Load.ADH += Load.AH[i];
  9948  0099  3530               	lslf	Load_Main@i,w
  9949  009A  3E4C               	addlw	(_Load+11)& (0+255)
  9950  009B  0086               	movwf	6
  9951  009C  3001               	movlw	1	; select bank2/3
  9952  009D  0087               	movwf	7
  9953  009E  3F40               	moviw [0]fsr1
  9954  009F  00A9               	movwf	??_Load_Main
  9955  00A0  3F41               	moviw [1]fsr1
  9956  00A1  00AA               	movwf	??_Load_Main+1
  9957  00A2  0829               	movf	??_Load_Main,w
  9958  00A3  0022               	movlb	2	; select bank2
  9959  00A4  07C6               	addwf	(_Load^(0+256)+5),f
  9960  00A5  0020               	movlb	0	; select bank0
  9961  00A6  082A               	movf	??_Load_Main+1,w
  9962  00A7  0022               	movlb	2	; select bank2
  9963  00A8  3DC7               	addwfc	((_Load+1)^(0+256)+5),f
  9964                           
  9965                           ;OverLoad_B1.c: 75: Load.ADL += Load.AL[i];
  9966  00A9  0020               	movlb	0	; select bank0
  9967  00AA  3530               	lslf	Load_Main@i,w
  9968  00AB  3E56               	addlw	(_Load+21)& (0+255)
  9969  00AC  0086               	movwf	6
  9970  00AD  3001               	movlw	1	; select bank2/3
  9971  00AE  0087               	movwf	7
  9972  00AF  3F40               	moviw [0]fsr1
  9973  00B0  00A9               	movwf	??_Load_Main
  9974  00B1  3F41               	moviw [1]fsr1
  9975  00B2  00AA               	movwf	??_Load_Main+1
  9976  00B3  0829               	movf	??_Load_Main,w
  9977  00B4  0022               	movlb	2	; select bank2
  9978  00B5  07C8               	addwf	(_Load^(0+256)+7),f
  9979  00B6  0020               	movlb	0	; select bank0
  9980  00B7  082A               	movf	??_Load_Main+1,w
  9981  00B8  0022               	movlb	2	; select bank2
  9982  00B9  3DC9               	addwfc	((_Load+1)^(0+256)+7),f
  9983  00BA  3001               	movlw	1
  9984  00BB  0020               	movlb	0	; select bank0
  9985  00BC  00A9               	movwf	??_Load_Main
  9986  00BD  0829               	movf	??_Load_Main,w
  9987  00BE  07B0               	addwf	Load_Main@i,f
  9988  00BF  3004               	movlw	4
  9989  00C0  0230               	subwf	Load_Main@i,w
  9990  00C1  1C03               	skipc
  9991  00C2  2899               	goto	l7752
  9992  00C3                     l7758:	
  9993                           
  9994                           ;OverLoad_B1.c: 76: }
  9995                           ;OverLoad_B1.c: 77: Load.ADH /= 3;
  9996  00C3  3003               	movlw	3
  9997  00C4  00A0               	movwf	___lwdiv@divisor
  9998  00C5  3000               	movlw	0
  9999  00C6  00A1               	movwf	___lwdiv@divisor+1
 10000  00C7  0022               	movlb	2	; select bank2
 10001  00C8  0847               	movf	((_Load+1)^(0+256)+5),w
 10002  00C9  0020               	movlb	0	; select bank0
 10003  00CA  01A3               	clrf	___lwdiv@dividend+1
 10004  00CB  07A3               	addwf	___lwdiv@dividend+1,f
 10005  00CC  0022               	movlb	2	; select bank2
 10006  00CD  0846               	movf	(_Load^(0+256)+5),w
 10007  00CE  0020               	movlb	0	; select bank0
 10008  00CF  01A2               	clrf	___lwdiv@dividend
 10009  00D0  07A2               	addwf	___lwdiv@dividend,f
 10010  00D1  3192  2294  3180   	fcall	___lwdiv
 10011  00D4  0020               	movlb	0	; select bank0
 10012  00D5  0821               	movf	?___lwdiv+1,w
 10013  00D6  0022               	movlb	2	; select bank2
 10014  00D7  01C7               	clrf	((_Load+1)^(0+256)+5)
 10015  00D8  07C7               	addwf	((_Load+1)^(0+256)+5),f
 10016  00D9  0020               	movlb	0	; select bank0
 10017  00DA  0820               	movf	?___lwdiv,w
 10018  00DB  0022               	movlb	2	; select bank2
 10019  00DC  01C6               	clrf	(_Load^(0+256)+5)
 10020  00DD  07C6               	addwf	(_Load^(0+256)+5),f
 10021                           
 10022                           ;OverLoad_B1.c: 78: Load.ADL /= 3;
 10023  00DE  3003               	movlw	3
 10024  00DF  0020               	movlb	0	; select bank0
 10025  00E0  00A0               	movwf	___lwdiv@divisor
 10026  00E1  3000               	movlw	0
 10027  00E2  00A1               	movwf	___lwdiv@divisor+1
 10028  00E3  0022               	movlb	2	; select bank2
 10029  00E4  0849               	movf	((_Load+1)^(0+256)+7),w
 10030  00E5  0020               	movlb	0	; select bank0
 10031  00E6  01A3               	clrf	___lwdiv@dividend+1
 10032  00E7  07A3               	addwf	___lwdiv@dividend+1,f
 10033  00E8  0022               	movlb	2	; select bank2
 10034  00E9  0848               	movf	(_Load^(0+256)+7),w
 10035  00EA  0020               	movlb	0	; select bank0
 10036  00EB  01A2               	clrf	___lwdiv@dividend
 10037  00EC  07A2               	addwf	___lwdiv@dividend,f
 10038  00ED  3192  2294  3180   	fcall	___lwdiv
 10039  00F0  0020               	movlb	0	; select bank0
 10040  00F1  0821               	movf	?___lwdiv+1,w
 10041  00F2  0022               	movlb	2	; select bank2
 10042  00F3  01C9               	clrf	((_Load+1)^(0+256)+7)
 10043  00F4  07C9               	addwf	((_Load+1)^(0+256)+7),f
 10044  00F5  0020               	movlb	0	; select bank0
 10045  00F6  0820               	movf	?___lwdiv,w
 10046  00F7  0022               	movlb	2	; select bank2
 10047  00F8  01C8               	clrf	(_Load^(0+256)+7)
 10048  00F9  07C8               	addwf	(_Load^(0+256)+7),f
 10049                           
 10050                           ;OverLoad_B1.c: 79: setLoad_AH_AL_Restore();
 10051  00FA  319E  2660  3180   	fcall	_setLoad_AH_AL_Restore
 10052                           
 10053                           ;OverLoad_B1.c: 81: if (Load.ADH > Load.ADL) {
 10054  00FD  0022               	movlb	2	; select bank2
 10055  00FE  0847               	movf	((_Load+1)^(0+256)+5),w
 10056  00FF  0249               	subwf	((_Load+1)^(0+256)+7),w
 10057  0100  1D03               	skipz
 10058  0101  2904               	goto	u7815
 10059  0102  0846               	movf	(_Load^(0+256)+5),w
 10060  0103  0248               	subwf	(_Load^(0+256)+7),w
 10061  0104                     u7815:	
 10062  0104  1803               	skipnc
 10063  0105  0008               	return
 10064                           
 10065                           ;OverLoad_B1.c: 82: Load.AD = Load.ADH - Load.ADL;
 10066  0106  3005               	movlw	5
 10067  0107  3E41               	addlw	_Load& (0+255)
 10068  0108  0086               	movwf	6
 10069  0109  3001               	movlw	1	; select bank2/3
 10070  010A  0087               	movwf	7
 10071  010B  0948               	comf	(_Load^(0+256)+7),w
 10072  010C  0020               	movlb	0	; select bank0
 10073  010D  00A9               	movwf	??_Load_Main
 10074  010E  0022               	movlb	2	; select bank2
 10075  010F  0949               	comf	((_Load+1)^(0+256)+7),w
 10076  0110  0020               	movlb	0	; select bank0
 10077  0111  00AA               	movwf	??_Load_Main+1
 10078  0112  0AA9               	incf	??_Load_Main,f
 10079  0113  1903               	skipnz
 10080  0114  0AAA               	incf	??_Load_Main+1,f
 10081  0115  3F40               	moviw [0]fsr1
 10082  0116  0729               	addwf	??_Load_Main,w
 10083  0117  0022               	movlb	2	; select bank2
 10084  0118  00E0               	movwf	(_Load^(0+256)+31)
 10085  0119  3F41               	moviw [1]fsr1
 10086  011A  0020               	movlb	0	; select bank0
 10087  011B  3D2A               	addwfc	??_Load_Main+1,w
 10088  011C  0022               	movlb	2	; select bank2
 10089  011D  00E1               	movwf	(_Load^(0+256)+32)
 10090                           
 10091                           ;OverLoad_B1.c: 83: Load.ADH = 0;
 10092  011E  01C6               	clrf	(_Load^(0+256)+5)
 10093  011F  01C7               	clrf	((_Load+1)^(0+256)+5)
 10094                           
 10095                           ;OverLoad_B1.c: 84: Load.ADL = 0;
 10096  0120  01C8               	clrf	(_Load^(0+256)+7)
 10097  0121  01C9               	clrf	((_Load+1)^(0+256)+7)
 10098                           
 10099                           ;OverLoad_B1.c: 85: Load.LightsCount = getMain_Lights_Count();
 10100  0122  319C  24DB  3180   	fcall	_getMain_Lights_Count
 10101  0125  0020               	movlb	0	; select bank0
 10102  0126  00A9               	movwf	??_Load_Main
 10103  0127  0829               	movf	??_Load_Main,w
 10104  0128  0022               	movlb	2	; select bank2
 10105  0129  00ED               	movwf	(_Load^(0+256)+44)
 10106                           
 10107                           ;OverLoad_B1.c: 87: if (Load.Run == 1) {
 10108  012A  1DC1               	btfss	_Load^(0+256),3
 10109  012B  2957               	goto	l7790
 10110                           
 10111                           ;OverLoad_B1.c: 88: if (Load.Count < 2) {
 10112  012C  3002               	movlw	2
 10113  012D  026A               	subwf	(_Load^(0+256)+41),w
 10114  012E  1803               	skipnc
 10115  012F  2957               	goto	l7790
 10116                           
 10117                           ;OverLoad_B1.c: 89: Load.Count++;
 10118  0130  3001               	movlw	1
 10119  0131  0020               	movlb	0	; select bank0
 10120  0132  00A9               	movwf	??_Load_Main
 10121  0133  0829               	movf	??_Load_Main,w
 10122  0134  0022               	movlb	2	; select bank2
 10123  0135  07EA               	addwf	(_Load^(0+256)+41),f
 10124                           
 10125                           ;OverLoad_B1.c: 90: if (Load.Count == 1) {
 10126  0136  086A               	movf	(_Load^(0+256)+41),w
 10127  0137  3A01               	xorlw	1
 10128  0138  1D03               	skipz
 10129  0139  2944               	goto	l7782
 10130                           
 10131                           ;OverLoad_B1.c: 91: Load.ErrorCountValue = 2;
 10132  013A  3002               	movlw	2
 10133  013B  0020               	movlb	0	; select bank0
 10134  013C  00A9               	movwf	??_Load_Main
 10135  013D  0829               	movf	??_Load_Main,w
 10136  013E  0022               	movlb	2	; select bank2
 10137  013F  00EC               	movwf	(_Load^(0+256)+43)
 10138                           
 10139                           ;OverLoad_B1.c: 92: Load.JudgeValue = (20*57);
 10140  0140  3074               	movlw	116
 10141  0141  00E6               	movwf	(_Load^(0+256)+37)
 10142  0142  3004               	movlw	4
 10143  0143  294F               	goto	L3
 10144  0144                     l7782:	
 10145                           ;OverLoad_B1.c: 93: } else if (Load.Count == 2) {
 10146                           
 10147  0144  086A               	movf	(_Load^(0+256)+41),w
 10148  0145  3A02               	xorlw	2
 10149  0146  1D03               	skipz
 10150  0147  2957               	goto	l7790
 10151                           
 10152                           ;OverLoad_B1.c: 94: if (Load.LightsCount == 1) {
 10153  0148  086D               	movf	(_Load^(0+256)+44),w
 10154  0149  3A01               	xorlw	1
 10155  014A  1D03               	skipz
 10156  014B  2951               	goto	l7788
 10157                           
 10158                           ;OverLoad_B1.c: 95: Load.JudgeValue = (int)(2.5*57);
 10159  014C  308E               	movlw	142
 10160  014D  00E6               	movwf	(_Load^(0+256)+37)
 10161  014E  3000               	movlw	0
 10162  014F                     L3:	
 10163  014F  00E7               	movwf	(_Load^(0+256)+38)
 10164                           
 10165                           ;OverLoad_B1.c: 96: } else {
 10166  0150  2957               	goto	l7790
 10167  0151                     l7788:	
 10168                           
 10169                           ;OverLoad_B1.c: 97: Load.JudgeValue = (int)(2.5*57) + Load.TotalLoad;
 10170  0151  084A               	movf	(_Load^(0+256)+9),w
 10171  0152  3E8E               	addlw	142
 10172  0153  00E6               	movwf	(_Load^(0+256)+37)
 10173  0154  3000               	movlw	0
 10174  0155  3D4B               	addwfc	((_Load+1)^(0+256)+9),w
 10175  0156  00E7               	movwf	((_Load+1)^(0+256)+37)
 10176  0157                     l7790:	
 10177                           
 10178                           ;OverLoad_B1.c: 98: }
 10179                           ;OverLoad_B1.c: 99: }
 10180                           ;OverLoad_B1.c: 100: }
 10181                           ;OverLoad_B1.c: 101: }
 10182                           ;OverLoad_B1.c: 103: if (Load.AD >= Load.JudgeValue) {
 10183  0157  0867               	movf	((_Load+1)^(0+256)+37),w
 10184  0158  0261               	subwf	((_Load+1)^(0+256)+31),w
 10185  0159  1D03               	skipz
 10186  015A  295D               	goto	u7875
 10187  015B  0866               	movf	(_Load^(0+256)+37),w
 10188  015C  0260               	subwf	(_Load^(0+256)+31),w
 10189  015D                     u7875:	
 10190  015D  1C03               	skipc
 10191  015E  296C               	goto	l7800
 10192                           
 10193                           ;OverLoad_B1.c: 104: Load.ErrorCount++;
 10194  015F  3001               	movlw	1
 10195  0160  0020               	movlb	0	; select bank0
 10196  0161  00A9               	movwf	??_Load_Main
 10197  0162  0829               	movf	??_Load_Main,w
 10198  0163  0022               	movlb	2	; select bank2
 10199  0164  07EB               	addwf	(_Load^(0+256)+42),f
 10200                           
 10201                           ;OverLoad_B1.c: 105: if (Load.ErrorCount > Load.ErrorCountValue) {
 10202  0165  086B               	movf	(_Load^(0+256)+42),w
 10203  0166  026C               	subwf	(_Load^(0+256)+43),w
 10204  0167  1803               	skipnc
 10205  0168  0008               	return
 10206                           
 10207                           ;OverLoad_B1.c: 106: Load.ErrorCount = 0;
 10208  0169  01EB               	clrf	(_Load^(0+256)+42)
 10209                           
 10210                           ;OverLoad_B1.c: 107: Load.ERROR = 1;
 10211  016A  16C1               	bsf	_Load^(0+256),5
 10212                           
 10213                           ;OverLoad_B1.c: 128: }
 10214                           ;OverLoad_B1.c: 129: } else {
 10215  016B  0008               	return
 10216  016C                     l7800:	
 10217                           
 10218                           ;OverLoad_B1.c: 130: Load.ErrorCount = 0;
 10219  016C  01EB               	clrf	(_Load^(0+256)+42)
 10220                           
 10221                           ;OverLoad_B1.c: 131: if (Load.Run == 1) {
 10222  016D  1DC1               	btfss	_Load^(0+256),3
 10223  016E  0008               	return
 10224                           
 10225                           ;OverLoad_B1.c: 132: if (Load.OK == 0) {
 10226  016F  1BC1               	btfsc	_Load^(0+256),7
 10227  0170  0008               	return
 10228                           
 10229                           ;OverLoad_B1.c: 133: Load.SafeCount++;
 10230  0171  3001               	movlw	1
 10231  0172  0020               	movlb	0	; select bank0
 10232  0173  00A9               	movwf	??_Load_Main
 10233  0174  0829               	movf	??_Load_Main,w
 10234  0175  0022               	movlb	2	; select bank2
 10235  0176  07EE               	addwf	(_Load^(0+256)+45),f
 10236                           
 10237                           ;OverLoad_B1.c: 134: if (Load.SafeCount >= 3) {
 10238  0177  3003               	movlw	3
 10239  0178  026E               	subwf	(_Load^(0+256)+45),w
 10240  0179  1C03               	skipc
 10241  017A  0008               	return
 10242                           
 10243                           ;OverLoad_B1.c: 135: Load.SafeCount = 0;
 10244  017B  01EE               	clrf	(_Load^(0+256)+45)
 10245                           
 10246                           ;OverLoad_B1.c: 136: Load.OK = 1;
 10247  017C  17C1               	bsf	_Load^(0+256),7
 10248                           
 10249                           ;OverLoad_B1.c: 137: Load.Run = 0;
 10250  017D  11C1               	bcf	_Load^(0+256),3
 10251                           
 10252                           ;OverLoad_B1.c: 138: Load.Count = 0;
 10253  017E  01EA               	clrf	(_Load^(0+256)+41)
 10254                           
 10255                           ;OverLoad_B1.c: 139: Load.TotalLoad = Load.AD;
 10256  017F  0861               	movf	((_Load+1)^(0+256)+31),w
 10257  0180  01CB               	clrf	((_Load+1)^(0+256)+9)
 10258  0181  07CB               	addwf	((_Load+1)^(0+256)+9),f
 10259  0182  0860               	movf	(_Load^(0+256)+31),w
 10260  0183  01CA               	clrf	(_Load^(0+256)+9)
 10261  0184  07CA               	addwf	(_Load^(0+256)+9),f
 10262                           
 10263                           ;OverLoad_B1.c: 140: Load.ErrorCountValue = 3;
 10264  0185  3003               	movlw	3
 10265  0186  0020               	movlb	0	; select bank0
 10266  0187  00A9               	movwf	??_Load_Main
 10267  0188  0829               	movf	??_Load_Main,w
 10268  0189  0022               	movlb	2	; select bank2
 10269  018A  00EC               	movwf	(_Load^(0+256)+43)
 10270                           
 10271                           ;OverLoad_B1.c: 164: }
 10272                           ;OverLoad_B1.c: 165: }
 10273                           ;OverLoad_B1.c: 166: }
 10274                           ;OverLoad_B1.c: 167: }
 10275                           ;OverLoad_B1.c: 168: }
 10276                           ;OverLoad_B1.c: 169: }
 10277                           ;OverLoad_B1.c: 170: } else {
 10278  018B  0008               	return
 10279  018C                     l1565:	
 10280                           
 10281                           ;OverLoad_B1.c: 171: Load.ADtoGO = 1;
 10282  018C  1641               	bsf	_Load^(0+256),4
 10283                           
 10284                           ;OverLoad_B1.c: 172: }
 10285                           ;OverLoad_B1.c: 173: } else {
 10286  018D  0008               	return
 10287  018E                     l1564:	
 10288                           
 10289                           ;OverLoad_B1.c: 174: if (Load.LightsON == 1 && error != 3) {
 10290  018E  1D41               	btfss	_Load^(0+256),2
 10291  018F  29AC               	goto	l7850
 10292  0190  0020               	movlb	0	; select bank0
 10293  0191  082F               	movf	Load_Main@error,w
 10294  0192  3A03               	xorlw	3
 10295  0193  1903               	skipnz
 10296  0194  29AC               	goto	l7850
 10297                           
 10298                           ;OverLoad_B1.c: 175: Load.LightsON = 0;
 10299  0195  0022               	movlb	2	; select bank2
 10300  0196  1141               	bcf	_Load^(0+256),2
 10301                           
 10302                           ;OverLoad_B1.c: 177: Load.Time = 0;
 10303  0197  01C2               	clrf	(_Load^(0+256)+1)
 10304  0198  01C3               	clrf	((_Load+1)^(0+256)+1)
 10305                           
 10306                           ;OverLoad_B1.c: 178: Load.ADtoGO = 0;
 10307  0199  1241               	bcf	_Load^(0+256),4
 10308                           
 10309                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 10310  019A  319E  2660  3180   	fcall	_setLoad_AH_AL_Restore
 10311                           
 10312                           ;OverLoad_B1.c: 180: Load.Count = 0;
 10313  019D  0022               	movlb	2	; select bank2
 10314  019E  01EA               	clrf	(_Load^(0+256)+41)
 10315                           
 10316                           ;OverLoad_B1.c: 181: Load.ErrorCount = 0;
 10317  019F  01EB               	clrf	(_Load^(0+256)+42)
 10318                           
 10319                           ;OverLoad_B1.c: 182: Load.SafeCount = 0;
 10320  01A0  01EE               	clrf	(_Load^(0+256)+45)
 10321                           
 10322                           ;OverLoad_B1.c: 184: Load.ADH = 0;
 10323  01A1  01C6               	clrf	(_Load^(0+256)+5)
 10324  01A2  01C7               	clrf	((_Load+1)^(0+256)+5)
 10325                           
 10326                           ;OverLoad_B1.c: 185: Load.ADL = 0;
 10327  01A3  01C8               	clrf	(_Load^(0+256)+7)
 10328  01A4  01C9               	clrf	((_Load+1)^(0+256)+7)
 10329                           
 10330                           ;OverLoad_B1.c: 186: Load.AD = 0;
 10331  01A5  01E0               	clrf	(_Load^(0+256)+31)
 10332  01A6  01E1               	clrf	((_Load+1)^(0+256)+31)
 10333                           
 10334                           ;OverLoad_B1.c: 187: Load.JudgeValue = 0;
 10335  01A7  01E6               	clrf	(_Load^(0+256)+37)
 10336  01A8  01E7               	clrf	((_Load+1)^(0+256)+37)
 10337                           
 10338                           ;OverLoad_B1.c: 188: Load.LightsCount = 0;
 10339  01A9  01ED               	clrf	(_Load^(0+256)+44)
 10340                           
 10341                           ;OverLoad_B1.c: 189: Load.Run = 0;
 10342  01AA  11C1               	bcf	_Load^(0+256),3
 10343                           
 10344                           ;OverLoad_B1.c: 190: Load.OK = 1;
 10345  01AB  17C1               	bsf	_Load^(0+256),7
 10346  01AC                     l7850:	
 10347                           
 10348                           ;OverLoad_B1.c: 211: }
 10349                           ;OverLoad_B1.c: 212: if (Load.ERROR == 1) {
 10350  01AC  0022               	movlb	2	; select bank2
 10351  01AD  1EC1               	btfss	_Load^(0+256),5
 10352  01AE  0008               	return
 10353                           
 10354                           ;OverLoad_B1.c: 213: Load.ErrorTime++;
 10355  01AF  3001               	movlw	1
 10356  01B0  07C4               	addwf	(_Load^(0+256)+3),f
 10357  01B1  3000               	movlw	0
 10358  01B2  3DC5               	addwfc	((_Load+1)^(0+256)+3),f
 10359                           
 10360                           ;OverLoad_B1.c: 214: if (Load.ErrorTime >= 1000) {
 10361  01B3  3003               	movlw	3
 10362  01B4  0245               	subwf	((_Load+1)^(0+256)+3),w
 10363  01B5  30E8               	movlw	232
 10364  01B6  1903               	skipnz
 10365  01B7  0244               	subwf	(_Load^(0+256)+3),w
 10366  01B8  1C03               	skipc
 10367  01B9  0008               	return
 10368                           
 10369                           ;OverLoad_B1.c: 215: Load.ErrorTime = 0;
 10370  01BA  01C4               	clrf	(_Load^(0+256)+3)
 10371  01BB  01C5               	clrf	((_Load+1)^(0+256)+3)
 10372                           
 10373                           ;OverLoad_B1.c: 216: Load.ERROR = 0;
 10374  01BC  12C1               	bcf	_Load^(0+256),5
 10375                           
 10376                           ;OverLoad_B1.c: 217: }
 10377                           ;OverLoad_B1.c: 218: }
 10378                           ;OverLoad_B1.c: 219: }
 10379                           ;OverLoad_B1.c: 220: } else {
 10380  01BD  0008               	return
 10381  01BE                     l1560:	
 10382                           
 10383                           ;OverLoad_B1.c: 221: if (myMain.PowerON == 1) {
 10384  01BE  0021               	movlb	1	; select bank1
 10385  01BF  1C20               	btfss	_myMain^(0+128),0
 10386  01C0  0008               	return
 10387                           
 10388                           ;OverLoad_B1.c: 223: Load.Enable = 1;
 10389  01C1  0022               	movlb	2	; select bank2
 10390  01C2  1441               	bsf	_Load^(0+256),0
 10391  01C3  0008               	return
 10392  01C4                     __end_of_Load_Main:	
 10393                           
 10394                           	psect	text52
 10395  1C9F                     __ptext52:	
 10396 ;; *************** function _getMain_LoadOK *****************
 10397 ;; Defined at:
 10398 ;;		line 475 in file "../src/Main_B1.c"
 10399 ;; Parameters:    Size  Location     Type
 10400 ;;		None
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;  ok              1    2[BANK0 ] unsigned char 
 10403 ;; Return value:  Size  Location     Type
 10404 ;;                  1    wreg      unsigned char 
 10405 ;; Registers used:
 10406 ;;		wreg, status,2, pclath, cstack
 10407 ;; Tracked objects:
 10408 ;;		On entry : 0/0
 10409 ;;		On exit  : 0/0
 10410 ;;		Unchanged: 0/0
 10411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;Total ram usage:        2 bytes
 10417 ;; Hardware stack levels used:    1
 10418 ;; Hardware stack levels required when called:    6
 10419 ;; This function calls:
 10420 ;;		_getDimmer_LoadOK
 10421 ;; This function is called by:
 10422 ;;		_Load_Main
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           
 10427                           ;psect for function _getMain_LoadOK
 10428  1C9F                     _getMain_LoadOK:	
 10429                           
 10430                           ;Main_B1.c: 476: char ok = 0;
 10431                           
 10432                           ;incstack = 0
 10433                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10434  1C9F  0020               	movlb	0	; select bank0
 10435  1CA0  01A2               	clrf	getMain_LoadOK@ok
 10436                           
 10437                           ;Main_B1.c: 482: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10438  1CA1  319B  23D4         	fcall	_getDimmer_LoadOK
 10439  1CA3  3A01               	xorlw	1
 10440  1CA4  3000               	movlw	0
 10441  1CA5  1903               	skipnz
 10442  1CA6  3001               	movlw	1
 10443  1CA7  0020               	movlb	0	; select bank0
 10444  1CA8  00A1               	movwf	??_getMain_LoadOK
 10445  1CA9  0821               	movf	??_getMain_LoadOK,w
 10446  1CAA  00A2               	movwf	getMain_LoadOK@ok
 10447                           
 10448                           ;Main_B1.c: 484: return ok;
 10449  1CAB  0822               	movf	getMain_LoadOK@ok,w
 10450  1CAC  0008               	return
 10451  1CAD                     __end_of_getMain_LoadOK:	
 10452                           
 10453                           	psect	text53
 10454  1BD4                     __ptext53:	
 10455 ;; *************** function _getDimmer_LoadOK *****************
 10456 ;; Defined at:
 10457 ;;		line 622 in file "../src/Dimmer_B1.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;		None
 10460 ;; Auto vars:     Size  Location     Type
 10461 ;;  status          1    0[BANK0 ] unsigned char 
 10462 ;; Return value:  Size  Location     Type
 10463 ;;                  1    wreg      unsigned char 
 10464 ;; Registers used:
 10465 ;;		wreg, status,2
 10466 ;; Tracked objects:
 10467 ;;		On entry : 0/0
 10468 ;;		On exit  : 0/0
 10469 ;;		Unchanged: 0/0
 10470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;Total ram usage:        1 bytes
 10476 ;; Hardware stack levels used:    1
 10477 ;; Hardware stack levels required when called:    5
 10478 ;; This function calls:
 10479 ;;		Nothing
 10480 ;; This function is called by:
 10481 ;;		_getMain_LoadOK
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function _getDimmer_LoadOK
 10487  1BD4                     _getDimmer_LoadOK:	
 10488                           
 10489                           ;Dimmer_B1.c: 623: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10490                           
 10491                           ;incstack = 0
 10492                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10493  1BD4  3000               	movlw	0
 10494  1BD5  0021               	movlb	1	; select bank1
 10495  1BD6  18C6               	btfsc	_Dimmer^(0+128),1	;volatile
 10496  1BD7  3001               	movlw	1
 10497  1BD8  0020               	movlb	0	; select bank0
 10498  1BD9  00A0               	movwf	getDimmer_LoadOK@status
 10499                           
 10500                           ;Dimmer_B1.c: 624: return status;
 10501  1BDA  0820               	movf	getDimmer_LoadOK@status,w
 10502  1BDB  0008               	return
 10503  1BDC                     __end_of_getDimmer_LoadOK:	
 10504                           
 10505                           	psect	text54
 10506  1CDB                     __ptext54:	
 10507 ;; *************** function _getMain_Lights_Count *****************
 10508 ;; Defined at:
 10509 ;;		line 445 in file "../src/Main_B1.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;		None
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;  status1         1    3[BANK0 ] unsigned char 
 10514 ;;  status3         1    2[BANK0 ] unsigned char 
 10515 ;;  status2         1    1[BANK0 ] unsigned char 
 10516 ;;  count           1    0[BANK0 ] unsigned char 
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  1    wreg      unsigned char 
 10519 ;; Registers used:
 10520 ;;		wreg, status,2, status,0
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;Total ram usage:        4 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; Hardware stack levels required when called:    5
 10533 ;; This function calls:
 10534 ;;		Nothing
 10535 ;; This function is called by:
 10536 ;;		_Load_Main
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           
 10541                           ;psect for function _getMain_Lights_Count
 10542  1CDB                     _getMain_Lights_Count:	
 10543                           
 10544                           ;Main_B1.c: 446: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10545                           
 10546                           ;incstack = 0
 10547                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10548  1CDB  0020               	movlb	0	; select bank0
 10549  1CDC  01A3               	clrf	getMain_Lights_Count@status1
 10550  1CDD  01A1               	clrf	getMain_Lights_Count@status2
 10551  1CDE  01A2               	clrf	getMain_Lights_Count@status3
 10552  1CDF  01A0               	clrf	getMain_Lights_Count@count
 10553                           
 10554                           ;Main_B1.c: 450: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10555  1CE0  3000               	movlw	0
 10556  1CE1  0023               	movlb	3	; select bank3
 10557  1CE2  1BCF               	btfsc	(_DimmerLights1^(0+384)+10),7	;volatile
 10558  1CE3  3001               	movlw	1
 10559  1CE4  0020               	movlb	0	; select bank0
 10560  1CE5  00A3               	movwf	getMain_Lights_Count@status1
 10561                           
 10562                           ;Main_B1.c: 471: return count = (status1 + status2 + status3);
 10563  1CE6  0823               	movf	getMain_Lights_Count@status1,w
 10564  1CE7  0721               	addwf	getMain_Lights_Count@status2,w
 10565  1CE8  0722               	addwf	getMain_Lights_Count@status3,w
 10566  1CE9  00A0               	movwf	getMain_Lights_Count@count
 10567  1CEA  0008               	return
 10568  1CEB                     __end_of_getMain_Lights_Count:	
 10569                           
 10570                           	psect	text55
 10571  1B9A                     __ptext55:	
 10572 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10573 ;; Defined at:
 10574 ;;		line 490 in file "../src/Dimmer_B1.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;  sw              1    wreg     unsigned char 
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;  sw              1    0[COMMON] unsigned char 
 10579 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10580 ;; Return value:  Size  Location     Type
 10581 ;;                  1    wreg      unsigned char 
 10582 ;; Registers used:
 10583 ;;		wreg, status,2
 10584 ;; Tracked objects:
 10585 ;;		On entry : 0/0
 10586 ;;		On exit  : 0/0
 10587 ;;		Unchanged: 0/0
 10588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;Total ram usage:        1 bytes
 10594 ;; Hardware stack levels used:    1
 10595 ;; Hardware stack levels required when called:    5
 10596 ;; This function calls:
 10597 ;;		Nothing
 10598 ;; This function is called by:
 10599 ;;		_setDimmerLights_SwOn
 10600 ;;		_setDimmerLights_AdjControl
 10601 ;;		_Load_Main
 10602 ;; This function uses a non-reentrant model
 10603 ;;
 10604                           
 10605                           
 10606                           ;psect for function _getAll_DimmerLights_AdjGO
 10607  1B9A                     _getAll_DimmerLights_AdjGO:	
 10608                           
 10609                           ;Dimmer_B1.c: 491: char adjgo = 0;
 10610                           
 10611                           ;incstack = 0
 10612                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10613  1B9A  0020               	movlb	0	; select bank0
 10614  1B9B  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10615                           
 10616                           ;Dimmer_B1.c: 516: return adjgo;
 10617  1B9C  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10618  1B9D  0008               	return
 10619  1B9E                     __end_of_getAll_DimmerLights_AdjGO:	
 10620                           
 10621                           	psect	text56
 10622  1294                     __ptext56:	
 10623 ;; *************** function ___lwdiv *****************
 10624 ;; Defined at:
 10625 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;  divisor         2    0[BANK0 ] unsigned int 
 10628 ;;  dividend        2    2[BANK0 ] unsigned int 
 10629 ;; Auto vars:     Size  Location     Type
 10630 ;;  quotient        2    5[BANK0 ] unsigned int 
 10631 ;;  counter         1    7[BANK0 ] unsigned char 
 10632 ;; Return value:  Size  Location     Type
 10633 ;;                  2    0[BANK0 ] unsigned int 
 10634 ;; Registers used:
 10635 ;;		wreg, status,2, status,0
 10636 ;; Tracked objects:
 10637 ;;		On entry : 0/0
 10638 ;;		On exit  : 0/0
 10639 ;;		Unchanged: 0/0
 10640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10641 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10642 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;Total ram usage:        8 bytes
 10646 ;; Hardware stack levels used:    1
 10647 ;; Hardware stack levels required when called:    5
 10648 ;; This function calls:
 10649 ;;		Nothing
 10650 ;; This function is called by:
 10651 ;;		_Load_Main
 10652 ;; This function uses a non-reentrant model
 10653 ;;
 10654                           
 10655                           
 10656                           ;psect for function ___lwdiv
 10657  1294                     ___lwdiv:	
 10658                           
 10659                           ;incstack = 0
 10660                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10661  1294  0020               	movlb	0	; select bank0
 10662  1295  01A5               	clrf	___lwdiv@quotient
 10663  1296  01A6               	clrf	___lwdiv@quotient+1
 10664  1297  0821               	movf	___lwdiv@divisor+1,w
 10665  1298  0420               	iorwf	___lwdiv@divisor,w
 10666  1299  1903               	skipnz
 10667  129A  2AC4               	goto	l7418
 10668  129B  01A7               	clrf	___lwdiv@counter
 10669  129C  0AA7               	incf	___lwdiv@counter,f
 10670  129D                     l7406:	
 10671  129D  1BA1               	btfsc	___lwdiv@divisor+1,7
 10672  129E  2AA9               	goto	l7408
 10673  129F  3001               	movlw	1
 10674  12A0                     u7175:	
 10675  12A0  35A0               	lslf	___lwdiv@divisor,f
 10676  12A1  0DA1               	rlf	___lwdiv@divisor+1,f
 10677  12A2  0B89               	decfsz	9,f
 10678  12A3  2AA0               	goto	u7175
 10679  12A4  3001               	movlw	1
 10680  12A5  00A4               	movwf	??___lwdiv
 10681  12A6  0824               	movf	??___lwdiv,w
 10682  12A7  07A7               	addwf	___lwdiv@counter,f
 10683  12A8  2A9D               	goto	l7406
 10684  12A9                     l7408:	
 10685  12A9  3001               	movlw	1
 10686  12AA                     u7195:	
 10687  12AA  35A5               	lslf	___lwdiv@quotient,f
 10688  12AB  0DA6               	rlf	___lwdiv@quotient+1,f
 10689  12AC  0B89               	decfsz	9,f
 10690  12AD  2AAA               	goto	u7195
 10691  12AE  0821               	movf	___lwdiv@divisor+1,w
 10692  12AF  0223               	subwf	___lwdiv@dividend+1,w
 10693  12B0  1D03               	skipz
 10694  12B1  2AB4               	goto	u7205
 10695  12B2  0820               	movf	___lwdiv@divisor,w
 10696  12B3  0222               	subwf	___lwdiv@dividend,w
 10697  12B4                     u7205:	
 10698  12B4  1C03               	skipc
 10699  12B5  2ABB               	goto	l7414
 10700  12B6  0820               	movf	___lwdiv@divisor,w
 10701  12B7  02A2               	subwf	___lwdiv@dividend,f
 10702  12B8  0821               	movf	___lwdiv@divisor+1,w
 10703  12B9  3BA3               	subwfb	___lwdiv@dividend+1,f
 10704  12BA  1425               	bsf	___lwdiv@quotient,0
 10705  12BB                     l7414:	
 10706  12BB  3001               	movlw	1
 10707  12BC                     u7215:	
 10708  12BC  36A1               	lsrf	___lwdiv@divisor+1,f
 10709  12BD  0CA0               	rrf	___lwdiv@divisor,f
 10710  12BE  0B89               	decfsz	9,f
 10711  12BF  2ABC               	goto	u7215
 10712  12C0  3001               	movlw	1
 10713  12C1  02A7               	subwf	___lwdiv@counter,f
 10714  12C2  1D03               	btfss	3,2
 10715  12C3  2AA9               	goto	l7408
 10716  12C4                     l7418:	
 10717  12C4  0826               	movf	___lwdiv@quotient+1,w
 10718  12C5  01A1               	clrf	?___lwdiv+1
 10719  12C6  07A1               	addwf	?___lwdiv+1,f
 10720  12C7  0825               	movf	___lwdiv@quotient,w
 10721  12C8  01A0               	clrf	?___lwdiv
 10722  12C9  07A0               	addwf	?___lwdiv,f
 10723  12CA  0008               	return
 10724  12CB                     __end_of___lwdiv:	
 10725                           
 10726                           	psect	text57
 10727  1BA7                     __ptext57:	
 10728 ;; *************** function _Load_Initialization *****************
 10729 ;; Defined at:
 10730 ;;		line 9 in file "../src/OverLoad_B1.c"
 10731 ;; Parameters:    Size  Location     Type
 10732 ;;		None
 10733 ;; Auto vars:     Size  Location     Type
 10734 ;;		None
 10735 ;; Return value:  Size  Location     Type
 10736 ;;		None               void
 10737 ;; Registers used:
 10738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10739 ;; Tracked objects:
 10740 ;;		On entry : 0/0
 10741 ;;		On exit  : 0/0
 10742 ;;		Unchanged: 0/0
 10743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;Total ram usage:        0 bytes
 10749 ;; Hardware stack levels used:    1
 10750 ;; Hardware stack levels required when called:    6
 10751 ;; This function calls:
 10752 ;;		_setLoad_AH_AL_Restore
 10753 ;; This function is called by:
 10754 ;;		_main
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           
 10759                           ;psect for function _Load_Initialization
 10760  1BA7                     _Load_Initialization:	
 10761                           
 10762                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10763                           
 10764                           ;incstack = 0
 10765                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10766  1BA7  0022               	movlb	2	; select bank2
 10767  1BA8  17C1               	bsf	_Load^(0+256),7
 10768                           
 10769                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10770  1BA9  319E  2660         	fcall	_setLoad_AH_AL_Restore
 10771  1BAB  0008               	return
 10772  1BAC                     __end_of_Load_Initialization:	
 10773                           
 10774                           	psect	text58
 10775  1E60                     __ptext58:	
 10776 ;; *************** function _setLoad_AH_AL_Restore *****************
 10777 ;; Defined at:
 10778 ;;		line 251 in file "../src/OverLoad_B1.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;		None
 10781 ;; Auto vars:     Size  Location     Type
 10782 ;;  i               1    1[BANK0 ] unsigned char 
 10783 ;; Return value:  Size  Location     Type
 10784 ;;		None               void
 10785 ;; Registers used:
 10786 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10787 ;; Tracked objects:
 10788 ;;		On entry : 0/0
 10789 ;;		On exit  : 0/0
 10790 ;;		Unchanged: 0/0
 10791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;Total ram usage:        2 bytes
 10797 ;; Hardware stack levels used:    1
 10798 ;; Hardware stack levels required when called:    5
 10799 ;; This function calls:
 10800 ;;		Nothing
 10801 ;; This function is called by:
 10802 ;;		_Load_Initialization
 10803 ;;		_Load_Main
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           
 10808                           ;psect for function _setLoad_AH_AL_Restore
 10809  1E60                     _setLoad_AH_AL_Restore:	
 10810                           
 10811                           ;OverLoad_B1.c: 252: char i;
 10812                           ;OverLoad_B1.c: 253: for (i = 0; i < 5; i++) {
 10813                           
 10814                           ;incstack = 0
 10815                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10816  1E60  0020               	movlb	0	; select bank0
 10817  1E61  01A1               	clrf	setLoad_AH_AL_Restore@i
 10818  1E62                     L4:	
 10819  1E62  3005               	movlw	5
 10820  1E63  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10821  1E64  1803               	btfsc	3,0
 10822  1E65  0008               	return
 10823                           
 10824                           ;OverLoad_B1.c: 254: Load.AH[i] = 0;
 10825  1E66  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10826  1E67  3E4C               	addlw	(_Load+11)& (0+255)
 10827  1E68  0086               	movwf	6
 10828  1E69  3001               	movlw	1	; select bank2/3
 10829  1E6A  0087               	movwf	7
 10830  1E6B  3000               	movlw	0
 10831  1E6C  3FC0               	movwi [0]fsr1
 10832  1E6D  3FC1               	movwi [1]fsr1
 10833                           
 10834                           ;OverLoad_B1.c: 255: Load.AL[i] = 0xffff;
 10835  1E6E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10836  1E6F  3E56               	addlw	(_Load+21)& (0+255)
 10837  1E70  0086               	movwf	6
 10838  1E71  3001               	movlw	1	; select bank2/3
 10839  1E72  0087               	movwf	7
 10840  1E73  30FF               	movlw	255
 10841  1E74  3FC0               	movwi [0]fsr1
 10842  1E75  30FF               	movlw	255
 10843  1E76  3FC1               	movwi [1]fsr1
 10844  1E77  3001               	movlw	1
 10845  1E78  00A0               	movwf	??_setLoad_AH_AL_Restore
 10846  1E79  0820               	movf	??_setLoad_AH_AL_Restore,w
 10847  1E7A  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10848  1E7B  2E62               	goto	L4
 10849  1E7C                     __end_of_setLoad_AH_AL_Restore:	
 10850                           
 10851                           	psect	text59
 10852  1B96                     __ptext59:	
 10853 ;; *************** function _LED_Main *****************
 10854 ;; Defined at:
 10855 ;;		line 47 in file "../src/LED_B1.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;		None
 10858 ;; Auto vars:     Size  Location     Type
 10859 ;;		None
 10860 ;; Return value:  Size  Location     Type
 10861 ;;		None               void
 10862 ;; Registers used:
 10863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10864 ;; Tracked objects:
 10865 ;;		On entry : 0/0
 10866 ;;		On exit  : 0/0
 10867 ;;		Unchanged: 0/0
 10868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;Total ram usage:        0 bytes
 10874 ;; Hardware stack levels used:    1
 10875 ;; Hardware stack levels required when called:    7
 10876 ;; This function calls:
 10877 ;;		_setLED_Main
 10878 ;; This function is called by:
 10879 ;;		_main
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           
 10883                           
 10884                           ;psect for function _LED_Main
 10885  1B96                     _LED_Main:	
 10886                           
 10887                           ;LED_B1.c: 62: setLED_Main(99);
 10888                           
 10889                           ;incstack = 0
 10890                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10891  1B96  3063               	movlw	99
 10892  1B97  3191  21BF         	fcall	_setLED_Main
 10893  1B99  0008               	return
 10894  1B9A                     __end_of_LED_Main:	
 10895                           
 10896                           	psect	text60
 10897  11BF                     __ptext60:	
 10898 ;; *************** function _setLED_Main *****************
 10899 ;; Defined at:
 10900 ;;		line 221 in file "../src/LED_B1.c"
 10901 ;; Parameters:    Size  Location     Type
 10902 ;;  led             1    wreg     unsigned char 
 10903 ;; Auto vars:     Size  Location     Type
 10904 ;;  led             1    4[BANK0 ] unsigned char 
 10905 ;; Return value:  Size  Location     Type
 10906 ;;		None               void
 10907 ;; Registers used:
 10908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10909 ;; Tracked objects:
 10910 ;;		On entry : 0/0
 10911 ;;		On exit  : 0/0
 10912 ;;		Unchanged: 0/0
 10913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;Total ram usage:        3 bytes
 10919 ;; Hardware stack levels used:    1
 10920 ;; Hardware stack levels required when called:    6
 10921 ;; This function calls:
 10922 ;;		_LedPointSelect
 10923 ;; This function is called by:
 10924 ;;		_LED_Main
 10925 ;; This function uses a non-reentrant model
 10926 ;;
 10927                           
 10928                           
 10929                           ;psect for function _setLED_Main
 10930  11BF                     _setLED_Main:	
 10931                           
 10932                           ;incstack = 0
 10933                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10934                           ;setLED_Main@led stored from wreg
 10935  11BF  0020               	movlb	0	; select bank0
 10936  11C0  00A4               	movwf	setLED_Main@led
 10937                           
 10938                           ;LED_B1.c: 222: LedPointSelect(led);
 10939  11C1  0824               	movf	setLED_Main@led,w
 10940  11C2  319C  242C  3191   	fcall	_LedPointSelect
 10941                           
 10942                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10943  11C5  087A               	movf	_LED,w
 10944  11C6  0086               	movwf	6
 10945  11C7  3001               	movlw	1	; select bank2/3
 10946  11C8  0087               	movwf	7
 10947  11C9  1C81               	btfss	1,1
 10948  11CA  0008               	return
 10949                           
 10950                           ;LED_B1.c: 224: LED->Time++;
 10951  11CB  0A7A               	incf	_LED,w
 10952  11CC  0086               	movwf	6
 10953  11CD  3001               	movlw	1	; select bank2/3
 10954  11CE  0087               	movwf	7
 10955  11CF  3001               	movlw	1
 10956  11D0  0781               	addwf	1,f
 10957  11D1  3141               	addfsr 1,1
 10958  11D2  1803               	skipnc
 10959  11D3  0A81               	incf	1,f
 10960                           
 10961                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10962  11D4  0A7A               	incf	_LED,w
 10963  11D5  0086               	movwf	6
 10964  11D6  3001               	movlw	1	; select bank2/3
 10965  11D7  0087               	movwf	7
 10966  11D8  3F40               	moviw [0]fsr1
 10967  11D9  0020               	movlb	0	; select bank0
 10968  11DA  00A2               	movwf	??_setLED_Main
 10969  11DB  3F41               	moviw [1]fsr1
 10970  11DC  00A3               	movwf	??_setLED_Main+1
 10971  11DD  3000               	movlw	0
 10972  11DE  0223               	subwf	??_setLED_Main+1,w
 10973  11DF  3032               	movlw	50
 10974  11E0  1903               	skipnz
 10975  11E1  0222               	subwf	??_setLED_Main,w
 10976  11E2  1C03               	skipc
 10977  11E3  0008               	return
 10978                           
 10979                           ;LED_B1.c: 226: LED->Time = 0;
 10980  11E4  0A7A               	incf	_LED,w
 10981  11E5  0086               	movwf	6
 10982  11E6  3001               	movlw	1	; select bank2/3
 10983  11E7  0087               	movwf	7
 10984  11E8  3000               	movlw	0
 10985  11E9  3FC0               	movwi [0]fsr1
 10986  11EA  3FC1               	movwi [1]fsr1
 10987                           
 10988                           ;LED_B1.c: 243: if (led == 99) {
 10989  11EB  0824               	movf	setLED_Main@led,w
 10990  11EC  3A63               	xorlw	99
 10991  11ED  1D03               	skipz
 10992  11EE  0008               	return
 10993                           
 10994                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10995  11EF  3020               	movlw	32
 10996  11F0  068D               	xorwf	13,f
 10997  11F1  0008               	return
 10998  11F2                     __end_of_setLED_Main:	
 10999                           
 11000                           	psect	text61
 11001  1B92                     __ptext61:	
 11002 ;; *************** function _LED_Initialization *****************
 11003 ;; Defined at:
 11004 ;;		line 31 in file "../src/LED_B1.c"
 11005 ;; Parameters:    Size  Location     Type
 11006 ;;		None
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;		None
 11009 ;; Return value:  Size  Location     Type
 11010 ;;		None               void
 11011 ;; Registers used:
 11012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;Total ram usage:        0 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; Hardware stack levels required when called:    8
 11025 ;; This function calls:
 11026 ;;		_setLED_Initialization
 11027 ;; This function is called by:
 11028 ;;		_main
 11029 ;; This function uses a non-reentrant model
 11030 ;;
 11031                           
 11032                           
 11033                           ;psect for function _LED_Initialization
 11034  1B92                     _LED_Initialization:	
 11035                           
 11036                           ;LED_B1.c: 42: setLED_Initialization(99);
 11037                           
 11038                           ;incstack = 0
 11039                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11040  1B92  3063               	movlw	99
 11041  1B93  319D  250C         	fcall	_setLED_Initialization
 11042  1B95  0008               	return
 11043  1B96                     __end_of_LED_Initialization:	
 11044                           
 11045                           	psect	text62
 11046  1D0C                     __ptext62:	
 11047 ;; *************** function _setLED_Initialization *****************
 11048 ;; Defined at:
 11049 ;;		line 69 in file "../src/LED_B1.c"
 11050 ;; Parameters:    Size  Location     Type
 11051 ;;  led             1    wreg     unsigned char 
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;  led             1    4[BANK0 ] unsigned char 
 11054 ;; Return value:  Size  Location     Type
 11055 ;;		None               void
 11056 ;; Registers used:
 11057 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;Total ram usage:        1 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    7
 11070 ;; This function calls:
 11071 ;;		_LedPointSelect
 11072 ;;		_setLED
 11073 ;; This function is called by:
 11074 ;;		_LED_Initialization
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           
 11078                           
 11079                           ;psect for function _setLED_Initialization
 11080  1D0C                     _setLED_Initialization:	
 11081                           
 11082                           ;incstack = 0
 11083                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11084                           ;setLED_Initialization@led stored from wreg
 11085  1D0C  0020               	movlb	0	; select bank0
 11086  1D0D  00A4               	movwf	setLED_Initialization@led
 11087                           
 11088                           ;LED_B1.c: 70: LedPointSelect(led);
 11089  1D0E  0824               	movf	setLED_Initialization@led,w
 11090  1D0F  319C  242C  319D   	fcall	_LedPointSelect
 11091                           
 11092                           ;LED_B1.c: 71: LED->Enable = 1;
 11093  1D12  087A               	movf	_LED,w
 11094  1D13  0086               	movwf	6
 11095  1D14  3001               	movlw	1	; select bank2/3
 11096  1D15  0087               	movwf	7
 11097  1D16  1401               	bsf	1,0
 11098                           
 11099                           ;LED_B1.c: 72: setLED(led, 0);
 11100  1D17  0020               	movlb	0	; select bank0
 11101  1D18  01A2               	clrf	setLED@command
 11102  1D19  0824               	movf	setLED_Initialization@led,w
 11103  1D1A  3191  21F2         	fcall	_setLED
 11104  1D1C  0008               	return
 11105  1D1D                     __end_of_setLED_Initialization:	
 11106                           
 11107                           	psect	text63
 11108  1228                     __ptext63:	
 11109 ;; *************** function _Flash_Memory_Main *****************
 11110 ;; Defined at:
 11111 ;;		line 966 in file "../src/MCU_B1.c"
 11112 ;; Parameters:    Size  Location     Type
 11113 ;;		None
 11114 ;; Auto vars:     Size  Location     Type
 11115 ;;		None
 11116 ;; Return value:  Size  Location     Type
 11117 ;;		None               void
 11118 ;; Registers used:
 11119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11120 ;; Tracked objects:
 11121 ;;		On entry : 0/0
 11122 ;;		On exit  : 0/0
 11123 ;;		Unchanged: 0/0
 11124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;Total ram usage:        1 bytes
 11130 ;; Hardware stack levels used:    1
 11131 ;; Hardware stack levels required when called:    8
 11132 ;; This function calls:
 11133 ;;		_Flash_Memory_Modify
 11134 ;;		_getMain_LightsStatus
 11135 ;; This function is called by:
 11136 ;;		_main
 11137 ;; This function uses a non-reentrant model
 11138 ;;
 11139                           
 11140                           
 11141                           ;psect for function _Flash_Memory_Main
 11142  1228                     _Flash_Memory_Main:	
 11143                           
 11144                           ;MCU_B1.c: 967: if (Memory.Modify == 1) {
 11145                           
 11146                           ;incstack = 0
 11147                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11148  1228  0023               	movlb	3	; select bank3
 11149  1229  1C44               	btfss	(_Memory^(0+384)+36),0
 11150  122A  0008               	return
 11151                           
 11152                           ;MCU_B1.c: 968: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11153  122B  3190  209D  3192   	fcall	_getMain_LightsStatus
 11154  122E  3A00               	xorlw	0
 11155  122F  3000               	movlw	0
 11156  1230  1903               	skipnz
 11157  1231  3001               	movlw	1
 11158  1232  0020               	movlb	0	; select bank0
 11159  1233  00A9               	movwf	??_Flash_Memory_Main
 11160  1234  0DA9               	rlf	??_Flash_Memory_Main,f
 11161  1235  0023               	movlb	3	; select bank3
 11162  1236  0844               	movf	(_Memory^(0+384)+36),w
 11163  1237  0020               	movlb	0	; select bank0
 11164  1238  0629               	xorwf	??_Flash_Memory_Main,w
 11165  1239  39FD               	andlw	-3
 11166  123A  0629               	xorwf	??_Flash_Memory_Main,w
 11167  123B  0023               	movlb	3	; select bank3
 11168  123C  00C4               	movwf	(_Memory^(0+384)+36)
 11169                           
 11170                           ;MCU_B1.c: 969: if (Memory.GO == 1) {
 11171  123D  1CC4               	btfss	(_Memory^(0+384)+36),1
 11172  123E  2A58               	goto	l1179
 11173                           
 11174                           ;MCU_B1.c: 970: Memory.Runtime = 1;
 11175  123F  15C4               	bsf	(_Memory^(0+384)+36),3
 11176                           
 11177                           ;MCU_B1.c: 971: Memory.Time++;
 11178  1240  3001               	movlw	1
 11179  1241  07C2               	addwf	(_Memory^(0+384)+34),f
 11180  1242  3000               	movlw	0
 11181  1243  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11182                           
 11183                           ;MCU_B1.c: 972: if (Memory.Time == 25) {
 11184  1244  3022               	movlw	34
 11185  1245  3EA0               	addlw	_Memory& (0+255)
 11186  1246  0086               	movwf	6
 11187  1247  3001               	movlw	1	; select bank3/4
 11188  1248  0087               	movwf	7
 11189  1249  3F40               	moviw [0]fsr1
 11190  124A  3A19               	xorlw	25
 11191  124B  1D03               	skipz
 11192  124C  2A4F               	goto	u7475
 11193  124D  3F41               	moviw [1]fsr1
 11194  124E  3A00               	xorlw	0
 11195  124F                     u7475:	
 11196  124F  1D03               	skipz
 11197  1250  0008               	return
 11198                           
 11199                           ;MCU_B1.c: 973: Memory.Time = 0;
 11200  1251  01C2               	clrf	(_Memory^(0+384)+34)
 11201  1252  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11202                           
 11203                           ;MCU_B1.c: 974: Memory.Modify = 0;
 11204  1253  1044               	bcf	(_Memory^(0+384)+36),0
 11205                           
 11206                           ;MCU_B1.c: 975: Memory.GO = 0;
 11207  1254  10C4               	bcf	(_Memory^(0+384)+36),1
 11208                           
 11209                           ;MCU_B1.c: 976: Flash_Memory_Modify();
 11210  1255  3194  2497         	fcall	_Flash_Memory_Modify
 11211                           
 11212                           ;MCU_B1.c: 977: }
 11213                           ;MCU_B1.c: 978: } else {
 11214  1257  0008               	return
 11215  1258                     l1179:	
 11216                           
 11217                           ;MCU_B1.c: 979: if (Memory.Runtime == 1) {
 11218  1258  1DC4               	btfss	(_Memory^(0+384)+36),3
 11219  1259  0008               	return
 11220                           
 11221                           ;MCU_B1.c: 980: Memory.Runtime = 0;
 11222  125A  11C4               	bcf	(_Memory^(0+384)+36),3
 11223                           
 11224                           ;MCU_B1.c: 981: Memory.Time = 0;
 11225  125B  01C2               	clrf	(_Memory^(0+384)+34)
 11226  125C  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11227  125D  0008               	return
 11228  125E                     __end_of_Flash_Memory_Main:	
 11229                           
 11230                           	psect	text64
 11231  1497                     __ptext64:	
 11232 ;; *************** function _Flash_Memory_Modify *****************
 11233 ;; Defined at:
 11234 ;;		line 1039 in file "../src/MCU_B1.c"
 11235 ;; Parameters:    Size  Location     Type
 11236 ;;		None
 11237 ;; Auto vars:     Size  Location     Type
 11238 ;;  i               1    5[BANK0 ] unsigned char 
 11239 ;; Return value:  Size  Location     Type
 11240 ;;		None               void
 11241 ;; Registers used:
 11242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11243 ;; Tracked objects:
 11244 ;;		On entry : 0/0
 11245 ;;		On exit  : 0/0
 11246 ;;		Unchanged: 0/0
 11247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;Total ram usage:        2 bytes
 11253 ;; Hardware stack levels used:    1
 11254 ;; Hardware stack levels required when called:    7
 11255 ;; This function calls:
 11256 ;;		_Flash_Memory_Erasing
 11257 ;;		_Flash_Memory_Read
 11258 ;;		_Flash_Memory_Write
 11259 ;;		_setMemory_Data
 11260 ;; This function is called by:
 11261 ;;		_Flash_Memory_Main
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           
 11266                           ;psect for function _Flash_Memory_Modify
 11267  1497                     _Flash_Memory_Modify:	
 11268                           
 11269                           ;MCU_B1.c: 1040: char i = 0;
 11270                           
 11271                           ;incstack = 0
 11272                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11273  1497  0020               	movlb	0	; select bank0
 11274  1498  01A5               	clrf	Flash_Memory_Modify@i
 11275                           
 11276                           ;MCU_B1.c: 1041: for (i = 0; i < 32; i++) {
 11277  1499  01A5               	clrf	Flash_Memory_Modify@i
 11278  149A  3020               	movlw	32
 11279  149B  0225               	subwf	Flash_Memory_Modify@i,w
 11280  149C  1803               	btfsc	3,0
 11281  149D  2CB3               	goto	l7080
 11282  149E                     l7074:	
 11283                           
 11284                           ;MCU_B1.c: 1042: Memory.Data[i] = Flash_Memory_Read(i);
 11285  149E  0825               	movf	Flash_Memory_Modify@i,w
 11286  149F  319E  2646  3194   	fcall	_Flash_Memory_Read
 11287  14A2  0020               	movlb	0	; select bank0
 11288  14A3  00A4               	movwf	??_Flash_Memory_Modify
 11289  14A4  0825               	movf	Flash_Memory_Modify@i,w
 11290  14A5  3EA0               	addlw	_Memory& (0+255)
 11291  14A6  0086               	movwf	6
 11292  14A7  3001               	movlw	1	; select bank3/4
 11293  14A8  0087               	movwf	7
 11294  14A9  0824               	movf	??_Flash_Memory_Modify,w
 11295  14AA  0081               	movwf	1
 11296  14AB  3001               	movlw	1
 11297  14AC  00A4               	movwf	??_Flash_Memory_Modify
 11298  14AD  0824               	movf	??_Flash_Memory_Modify,w
 11299  14AE  07A5               	addwf	Flash_Memory_Modify@i,f
 11300  14AF  3020               	movlw	32
 11301  14B0  0225               	subwf	Flash_Memory_Modify@i,w
 11302  14B1  1C03               	skipc
 11303  14B2  2C9E               	goto	l7074
 11304  14B3                     l7080:	
 11305                           
 11306                           ;MCU_B1.c: 1043: }
 11307                           ;MCU_B1.c: 1044: setMemory_Data(0, product->Data[12]);
 11308  14B3  086E               	movf	_product,w
 11309  14B4  0086               	movwf	6
 11310  14B5  3002               	movlw	2	; select bank4/5
 11311  14B6  0087               	movwf	7
 11312  14B7  3002               	movlw	2	; select bank4/5
 11313  14B8  3F4C               	moviw [12]fsr1
 11314  14B9  00A0               	movwf	setMemory_Data@data
 11315  14BA  3000               	movlw	0
 11316  14BB  319C  247B  3194   	fcall	_setMemory_Data
 11317                           
 11318                           ;MCU_B1.c: 1045: setMemory_Data(1, product->Data[13]);
 11319  14BE  0020               	movlb	0	; select bank0
 11320  14BF  086E               	movf	_product,w
 11321  14C0  0086               	movwf	6
 11322  14C1  3002               	movlw	2	; select bank4/5
 11323  14C2  0087               	movwf	7
 11324  14C3  3002               	movlw	2	; select bank4/5
 11325  14C4  3F4D               	moviw [13]fsr1
 11326  14C5  00A0               	movwf	setMemory_Data@data
 11327  14C6  3001               	movlw	1
 11328  14C7  319C  247B  3194   	fcall	_setMemory_Data
 11329                           
 11330                           ;MCU_B1.c: 1046: setMemory_Data(2, product->Data[14]);
 11331  14CA  0020               	movlb	0	; select bank0
 11332  14CB  086E               	movf	_product,w
 11333  14CC  0086               	movwf	6
 11334  14CD  3002               	movlw	2	; select bank4/5
 11335  14CE  0087               	movwf	7
 11336  14CF  3002               	movlw	2	; select bank4/5
 11337  14D0  3F4E               	moviw [14]fsr1
 11338  14D1  00A0               	movwf	setMemory_Data@data
 11339  14D2  3002               	movlw	2
 11340  14D3  319C  247B  3194   	fcall	_setMemory_Data
 11341                           
 11342                           ;MCU_B1.c: 1052: if (Memory.LoopSave == 1) {
 11343  14D6  0023               	movlb	3	; select bank3
 11344  14D7  1D44               	btfss	(_Memory^(0+384)+36),2
 11345  14D8  2CDD               	goto	l1202
 11346                           
 11347                           ;MCU_B1.c: 1053: Memory.LoopSave = 0;
 11348  14D9  1144               	bcf	(_Memory^(0+384)+36),2
 11349                           
 11350                           ;MCU_B1.c: 1054: myMain.FirstOpen = 0;
 11351  14DA  0021               	movlb	1	; select bank1
 11352  14DB  11A0               	bcf	_myMain^(0+128),3
 11353                           
 11354                           ;MCU_B1.c: 1055: myMain.First = 0;
 11355  14DC  12A0               	bcf	_myMain^(0+128),5
 11356  14DD                     l1202:	
 11357                           
 11358                           ;MCU_B1.c: 1057: }
 11359                           ;MCU_B1.c: 1058: GIE = 0;
 11360  14DD  138B               	bcf	11,7	;volatile
 11361                           
 11362                           ;MCU_B1.c: 1059: Flash_Memory_Erasing();
 11363  14DE  319C  2487  3194   	fcall	_Flash_Memory_Erasing
 11364                           
 11365                           ;MCU_B1.c: 1060: Flash_Memory_Write();
 11366  14E1  3190  20C8         	fcall	_Flash_Memory_Write
 11367                           
 11368                           ;MCU_B1.c: 1061: GIE = 1;
 11369  14E3  178B               	bsf	11,7	;volatile
 11370  14E4  0008               	return
 11371  14E5                     __end_of_Flash_Memory_Modify:	
 11372                           
 11373                           	psect	text65
 11374  1C87                     __ptext65:	
 11375 ;; *************** function _Flash_Memory_Erasing *****************
 11376 ;; Defined at:
 11377 ;;		line 1028 in file "../src/MCU_B1.c"
 11378 ;; Parameters:    Size  Location     Type
 11379 ;;		None
 11380 ;; Auto vars:     Size  Location     Type
 11381 ;;		None
 11382 ;; Return value:  Size  Location     Type
 11383 ;;		None               void
 11384 ;; Registers used:
 11385 ;;		wreg, status,2, status,0, pclath, cstack
 11386 ;; Tracked objects:
 11387 ;;		On entry : 0/0
 11388 ;;		On exit  : 0/0
 11389 ;;		Unchanged: 0/0
 11390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;Total ram usage:        0 bytes
 11396 ;; Hardware stack levels used:    1
 11397 ;; Hardware stack levels required when called:    6
 11398 ;; This function calls:
 11399 ;;		_Flash_Memory_Unlock
 11400 ;; This function is called by:
 11401 ;;		_Flash_Memory_Modify
 11402 ;; This function uses a non-reentrant model
 11403 ;;
 11404                           
 11405                           
 11406                           ;psect for function _Flash_Memory_Erasing
 11407  1C87                     _Flash_Memory_Erasing:	
 11408                           
 11409                           ;MCU_B1.c: 1029: CFGS = 0;
 11410                           
 11411                           ;incstack = 0
 11412                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11413  1C87  0023               	movlb	3	; select bank3
 11414  1C88  1315               	bcf	21,6	;volatile
 11415                           
 11416                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 11417  1C89  3030               	movlw	48
 11418  1C8A  0092               	movwf	18	;volatile
 11419                           
 11420                           ;MCU_B1.c: 1031: PMADRL = 0x00;
 11421  1C8B  0191               	clrf	17	;volatile
 11422                           
 11423                           ;MCU_B1.c: 1032: FREE = 1;
 11424  1C8C  1615               	bsf	21,4	;volatile
 11425                           
 11426                           ;MCU_B1.c: 1033: WREN = 1;
 11427  1C8D  1515               	bsf	21,2	;volatile
 11428                           
 11429                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 11430  1C8E  319B  23E5         	fcall	_Flash_Memory_Unlock
 11431                           
 11432                           ;MCU_B1.c: 1035: WREN = 0;
 11433  1C90  0023               	movlb	3	; select bank3
 11434  1C91  1115               	bcf	21,2	;volatile
 11435  1C92  0008               	return
 11436  1C93                     __end_of_Flash_Memory_Erasing:	
 11437                           
 11438                           	psect	text66
 11439  0650                     __ptext66:	
 11440 ;; *************** function _Flash_Memory_Initialization *****************
 11441 ;; Defined at:
 11442 ;;		line 925 in file "../src/MCU_B1.c"
 11443 ;; Parameters:    Size  Location     Type
 11444 ;;		None
 11445 ;; Auto vars:     Size  Location     Type
 11446 ;;  i               1   67[BANK0 ] unsigned char 
 11447 ;; Return value:  Size  Location     Type
 11448 ;;		None               void
 11449 ;; Registers used:
 11450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11451 ;; Tracked objects:
 11452 ;;		On entry : 0/0
 11453 ;;		On exit  : 0/0
 11454 ;;		Unchanged: 0/0
 11455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;Total ram usage:        2 bytes
 11461 ;; Hardware stack levels used:    1
 11462 ;; Hardware stack levels required when called:    8
 11463 ;; This function calls:
 11464 ;;		_Flash_Memory_Read
 11465 ;;		_Flash_Memory_Write
 11466 ;;		_setMemory_Data
 11467 ;;		_setPercentValue
 11468 ;; This function is called by:
 11469 ;;		_main
 11470 ;; This function uses a non-reentrant model
 11471 ;;
 11472                           
 11473                           
 11474                           ;psect for function _Flash_Memory_Initialization
 11475  0650                     _Flash_Memory_Initialization:	
 11476                           
 11477                           ;MCU_B1.c: 926: char i = 0;
 11478                           
 11479                           ;incstack = 0
 11480                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11481  0650  0020               	movlb	0	; select bank0
 11482  0651  01E3               	clrf	Flash_Memory_Initialization@i
 11483                           
 11484                           ;MCU_B1.c: 927: if (Flash_Memory_Read(31) == 0xaa) {
 11485  0652  301F               	movlw	31
 11486  0653  319E  2646  3186   	fcall	_Flash_Memory_Read
 11487  0656  3AAA               	xorlw	170
 11488  0657  1D03               	skipz
 11489  0658  2EC2               	goto	l7538
 11490                           
 11491                           ;MCU_B1.c: 928: product->Data[12] = Flash_Memory_Read(0);
 11492  0659  3000               	movlw	0
 11493  065A  319E  2646  3186   	fcall	_Flash_Memory_Read
 11494  065D  0020               	movlb	0	; select bank0
 11495  065E  00E2               	movwf	??_Flash_Memory_Initialization
 11496  065F  086E               	movf	_product,w
 11497  0660  3E0C               	addlw	12
 11498  0661  0086               	movwf	6
 11499  0662  3002               	movlw	2	; select bank4/5
 11500  0663  0087               	movwf	7
 11501  0664  0862               	movf	??_Flash_Memory_Initialization,w
 11502  0665  0081               	movwf	1
 11503                           
 11504                           ;MCU_B1.c: 929: product->Data[13] = Flash_Memory_Read(1);
 11505  0666  3001               	movlw	1
 11506  0667  319E  2646  3186   	fcall	_Flash_Memory_Read
 11507  066A  0020               	movlb	0	; select bank0
 11508  066B  00E2               	movwf	??_Flash_Memory_Initialization
 11509  066C  086E               	movf	_product,w
 11510  066D  3E0D               	addlw	13
 11511  066E  0086               	movwf	6
 11512  066F  3002               	movlw	2	; select bank4/5
 11513  0670  0087               	movwf	7
 11514  0671  0862               	movf	??_Flash_Memory_Initialization,w
 11515  0672  0081               	movwf	1
 11516                           
 11517                           ;MCU_B1.c: 930: product->Data[14] = Flash_Memory_Read(2);
 11518  0673  3002               	movlw	2
 11519  0674  319E  2646  3186   	fcall	_Flash_Memory_Read
 11520  0677  0020               	movlb	0	; select bank0
 11521  0678  00E2               	movwf	??_Flash_Memory_Initialization
 11522  0679  086E               	movf	_product,w
 11523  067A  3E0E               	addlw	14
 11524  067B  0086               	movwf	6
 11525  067C  3002               	movlw	2	; select bank4/5
 11526  067D  0087               	movwf	7
 11527  067E  0862               	movf	??_Flash_Memory_Initialization,w
 11528  067F  0081               	movwf	1
 11529                           
 11530                           ;MCU_B1.c: 936: i = setPercentValue(((char)(65*0.8)));
 11531  0680  3034               	movlw	52
 11532  0681  3189  21F1  3186   	fcall	_setPercentValue
 11533  0684  0020               	movlb	0	; select bank0
 11534  0685  00E2               	movwf	??_Flash_Memory_Initialization
 11535  0686  0862               	movf	??_Flash_Memory_Initialization,w
 11536  0687  00E3               	movwf	Flash_Memory_Initialization@i
 11537                           
 11538                           ;MCU_B1.c: 937: product->Data[21] = i;
 11539  0688  0863               	movf	Flash_Memory_Initialization@i,w
 11540  0689  00E2               	movwf	??_Flash_Memory_Initialization
 11541  068A  086E               	movf	_product,w
 11542  068B  3E15               	addlw	21
 11543  068C  0086               	movwf	6
 11544  068D  3002               	movlw	2	; select bank4/5
 11545  068E  0087               	movwf	7
 11546  068F  0862               	movf	??_Flash_Memory_Initialization,w
 11547  0690  0081               	movwf	1
 11548                           
 11549                           ;MCU_B1.c: 938: product->Data[22] = i;
 11550  0691  0863               	movf	Flash_Memory_Initialization@i,w
 11551  0692  00E2               	movwf	??_Flash_Memory_Initialization
 11552  0693  086E               	movf	_product,w
 11553  0694  3E16               	addlw	22
 11554  0695  0086               	movwf	6
 11555  0696  3002               	movlw	2	; select bank4/5
 11556  0697  0087               	movwf	7
 11557  0698  0862               	movf	??_Flash_Memory_Initialization,w
 11558  0699  0081               	movwf	1
 11559                           
 11560                           ;MCU_B1.c: 939: product->Data[23] = i;
 11561  069A  0863               	movf	Flash_Memory_Initialization@i,w
 11562  069B  00E2               	movwf	??_Flash_Memory_Initialization
 11563  069C  086E               	movf	_product,w
 11564  069D  3E17               	addlw	23
 11565  069E  0086               	movwf	6
 11566  069F  3002               	movlw	2	; select bank4/5
 11567  06A0  0087               	movwf	7
 11568  06A1  0862               	movf	??_Flash_Memory_Initialization,w
 11569  06A2  0081               	movwf	1
 11570                           
 11571                           ;MCU_B1.c: 941: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11572  06A3  086E               	movf	_product,w
 11573  06A4  3E0C               	addlw	12
 11574  06A5  0086               	movwf	6
 11575  06A6  3002               	movlw	2	; select bank4/5
 11576  06A7  0087               	movwf	7
 11577  06A8  0801               	movf	1,w
 11578  06A9  3AFF               	xorlw	255
 11579  06AA  1D03               	skipz
 11580  06AB  0008               	return
 11581  06AC  086E               	movf	_product,w
 11582  06AD  3E0D               	addlw	13
 11583  06AE  0086               	movwf	6
 11584  06AF  3002               	movlw	2	; select bank4/5
 11585  06B0  0087               	movwf	7
 11586  06B1  0801               	movf	1,w
 11587  06B2  3AFF               	xorlw	255
 11588  06B3  1D03               	skipz
 11589  06B4  0008               	return
 11590  06B5  086E               	movf	_product,w
 11591  06B6  3E0E               	addlw	14
 11592  06B7  0086               	movwf	6
 11593  06B8  3002               	movlw	2	; select bank4/5
 11594  06B9  0087               	movwf	7
 11595  06BA  0801               	movf	1,w
 11596  06BB  3AFF               	xorlw	255
 11597  06BC  1D03               	skipz
 11598  06BD  0008               	return
 11599                           
 11600                           ;MCU_B1.c: 942: myMain.FirstOpen = 1;
 11601  06BE  0021               	movlb	1	; select bank1
 11602  06BF  15A0               	bsf	_myMain^(0+128),3
 11603                           
 11604                           ;MCU_B1.c: 943: myMain.First = 1;
 11605  06C0  16A0               	bsf	_myMain^(0+128),5
 11606                           
 11607                           ;MCU_B1.c: 944: }
 11608                           ;MCU_B1.c: 945: } else {
 11609  06C1  0008               	return
 11610  06C2                     l7538:	
 11611                           
 11612                           ;MCU_B1.c: 946: i = setPercentValue(((char)(65*0.8)));
 11613  06C2  3034               	movlw	52
 11614  06C3  3189  21F1  3186   	fcall	_setPercentValue
 11615  06C6  0020               	movlb	0	; select bank0
 11616  06C7  00E2               	movwf	??_Flash_Memory_Initialization
 11617  06C8  0862               	movf	??_Flash_Memory_Initialization,w
 11618  06C9  00E3               	movwf	Flash_Memory_Initialization@i
 11619                           
 11620                           ;MCU_B1.c: 947: setMemory_Data(0, 0xff);
 11621  06CA  30FF               	movlw	255
 11622  06CB  00E2               	movwf	??_Flash_Memory_Initialization
 11623  06CC  0862               	movf	??_Flash_Memory_Initialization,w
 11624  06CD  00A0               	movwf	setMemory_Data@data
 11625  06CE  3000               	movlw	0
 11626  06CF  319C  247B  3186   	fcall	_setMemory_Data
 11627                           
 11628                           ;MCU_B1.c: 948: setMemory_Data(1, 0xff);
 11629  06D2  30FF               	movlw	255
 11630  06D3  0020               	movlb	0	; select bank0
 11631  06D4  00E2               	movwf	??_Flash_Memory_Initialization
 11632  06D5  0862               	movf	??_Flash_Memory_Initialization,w
 11633  06D6  00A0               	movwf	setMemory_Data@data
 11634  06D7  3001               	movlw	1
 11635  06D8  319C  247B  3186   	fcall	_setMemory_Data
 11636                           
 11637                           ;MCU_B1.c: 949: setMemory_Data(2, 0xff);
 11638  06DB  30FF               	movlw	255
 11639  06DC  0020               	movlb	0	; select bank0
 11640  06DD  00E2               	movwf	??_Flash_Memory_Initialization
 11641  06DE  0862               	movf	??_Flash_Memory_Initialization,w
 11642  06DF  00A0               	movwf	setMemory_Data@data
 11643  06E0  3002               	movlw	2
 11644  06E1  319C  247B  3186   	fcall	_setMemory_Data
 11645                           
 11646                           ;MCU_B1.c: 950: setMemory_Data(3, 0xff);
 11647  06E4  30FF               	movlw	255
 11648  06E5  0020               	movlb	0	; select bank0
 11649  06E6  00E2               	movwf	??_Flash_Memory_Initialization
 11650  06E7  0862               	movf	??_Flash_Memory_Initialization,w
 11651  06E8  00A0               	movwf	setMemory_Data@data
 11652  06E9  3003               	movlw	3
 11653  06EA  319C  247B  3186   	fcall	_setMemory_Data
 11654                           
 11655                           ;MCU_B1.c: 951: setMemory_Data(4, 0xff);
 11656  06ED  30FF               	movlw	255
 11657  06EE  0020               	movlb	0	; select bank0
 11658  06EF  00E2               	movwf	??_Flash_Memory_Initialization
 11659  06F0  0862               	movf	??_Flash_Memory_Initialization,w
 11660  06F1  00A0               	movwf	setMemory_Data@data
 11661  06F2  3004               	movlw	4
 11662  06F3  319C  247B  3186   	fcall	_setMemory_Data
 11663                           
 11664                           ;MCU_B1.c: 952: setMemory_Data(5, 0xff);
 11665  06F6  30FF               	movlw	255
 11666  06F7  0020               	movlb	0	; select bank0
 11667  06F8  00E2               	movwf	??_Flash_Memory_Initialization
 11668  06F9  0862               	movf	??_Flash_Memory_Initialization,w
 11669  06FA  00A0               	movwf	setMemory_Data@data
 11670  06FB  3005               	movlw	5
 11671  06FC  319C  247B  3186   	fcall	_setMemory_Data
 11672                           
 11673                           ;MCU_B1.c: 953: setMemory_Data(31, 0xaa);
 11674  06FF  30AA               	movlw	170
 11675  0700  0020               	movlb	0	; select bank0
 11676  0701  00E2               	movwf	??_Flash_Memory_Initialization
 11677  0702  0862               	movf	??_Flash_Memory_Initialization,w
 11678  0703  00A0               	movwf	setMemory_Data@data
 11679  0704  301F               	movlw	31
 11680  0705  319C  247B  3186   	fcall	_setMemory_Data
 11681                           
 11682                           ;MCU_B1.c: 954: product->Data[21] = i;
 11683  0708  0020               	movlb	0	; select bank0
 11684  0709  0863               	movf	Flash_Memory_Initialization@i,w
 11685  070A  00E2               	movwf	??_Flash_Memory_Initialization
 11686  070B  086E               	movf	_product,w
 11687  070C  3E15               	addlw	21
 11688  070D  0086               	movwf	6
 11689  070E  3002               	movlw	2	; select bank4/5
 11690  070F  0087               	movwf	7
 11691  0710  0862               	movf	??_Flash_Memory_Initialization,w
 11692  0711  0081               	movwf	1
 11693                           
 11694                           ;MCU_B1.c: 955: product->Data[22] = i;
 11695  0712  0863               	movf	Flash_Memory_Initialization@i,w
 11696  0713  00E2               	movwf	??_Flash_Memory_Initialization
 11697  0714  086E               	movf	_product,w
 11698  0715  3E16               	addlw	22
 11699  0716  0086               	movwf	6
 11700  0717  3002               	movlw	2	; select bank4/5
 11701  0718  0087               	movwf	7
 11702  0719  0862               	movf	??_Flash_Memory_Initialization,w
 11703  071A  0081               	movwf	1
 11704                           
 11705                           ;MCU_B1.c: 956: product->Data[23] = i;
 11706  071B  0863               	movf	Flash_Memory_Initialization@i,w
 11707  071C  00E2               	movwf	??_Flash_Memory_Initialization
 11708  071D  086E               	movf	_product,w
 11709  071E  3E17               	addlw	23
 11710  071F  0086               	movwf	6
 11711  0720  3002               	movlw	2	; select bank4/5
 11712  0721  0087               	movwf	7
 11713  0722  0862               	movf	??_Flash_Memory_Initialization,w
 11714  0723  0081               	movwf	1
 11715                           
 11716                           ;MCU_B1.c: 957: GIE = 0;
 11717  0724  138B               	bcf	11,7	;volatile
 11718                           
 11719                           ;MCU_B1.c: 958: Flash_Memory_Write();
 11720  0725  3190  20C8         	fcall	_Flash_Memory_Write
 11721                           
 11722                           ;MCU_B1.c: 959: GIE = 1;
 11723  0727  178B               	bsf	11,7	;volatile
 11724                           
 11725                           ;MCU_B1.c: 960: myMain.FirstOpen = 1;
 11726  0728  0021               	movlb	1	; select bank1
 11727  0729  15A0               	bsf	_myMain^(0+128),3
 11728                           
 11729                           ;MCU_B1.c: 961: myMain.First = 1;
 11730  072A  16A0               	bsf	_myMain^(0+128),5
 11731  072B  0008               	return
 11732  072C                     __end_of_Flash_Memory_Initialization:	
 11733                           
 11734                           	psect	text67
 11735  1C7B                     __ptext67:	
 11736 ;; *************** function _setMemory_Data *****************
 11737 ;; Defined at:
 11738 ;;		line 1076 in file "../src/MCU_B1.c"
 11739 ;; Parameters:    Size  Location     Type
 11740 ;;  address         1    wreg     unsigned char 
 11741 ;;  data            1    0[BANK0 ] unsigned char 
 11742 ;; Auto vars:     Size  Location     Type
 11743 ;;  address         1    2[BANK0 ] unsigned char 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;		None               void
 11746 ;; Registers used:
 11747 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11753 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;Total ram usage:        3 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    5
 11760 ;; This function calls:
 11761 ;;		Nothing
 11762 ;; This function is called by:
 11763 ;;		_Flash_Memory_Initialization
 11764 ;;		_Flash_Memory_Modify
 11765 ;; This function uses a non-reentrant model
 11766 ;;
 11767                           
 11768                           
 11769                           ;psect for function _setMemory_Data
 11770  1C7B                     _setMemory_Data:	
 11771                           
 11772                           ;incstack = 0
 11773                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11774                           ;setMemory_Data@address stored from wreg
 11775  1C7B  0020               	movlb	0	; select bank0
 11776  1C7C  00A2               	movwf	setMemory_Data@address
 11777                           
 11778                           ;MCU_B1.c: 1077: Memory.Data[address] = data;
 11779  1C7D  0820               	movf	setMemory_Data@data,w
 11780  1C7E  00A1               	movwf	??_setMemory_Data
 11781  1C7F  0822               	movf	setMemory_Data@address,w
 11782  1C80  3EA0               	addlw	_Memory& (0+255)
 11783  1C81  0086               	movwf	6
 11784  1C82  3001               	movlw	1	; select bank3/4
 11785  1C83  0087               	movwf	7
 11786  1C84  0821               	movf	??_setMemory_Data,w
 11787  1C85  0081               	movwf	1
 11788  1C86  0008               	return
 11789  1C87                     __end_of_setMemory_Data:	
 11790                           
 11791                           	psect	text68
 11792  10C8                     __ptext68:	
 11793 ;; *************** function _Flash_Memory_Write *****************
 11794 ;; Defined at:
 11795 ;;		line 1009 in file "../src/MCU_B1.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;		None
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;  i               1    1[BANK0 ] unsigned char 
 11800 ;; Return value:  Size  Location     Type
 11801 ;;		None               void
 11802 ;; Registers used:
 11803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11804 ;; Tracked objects:
 11805 ;;		On entry : 0/0
 11806 ;;		On exit  : 0/0
 11807 ;;		Unchanged: 0/0
 11808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11813 ;;Total ram usage:        2 bytes
 11814 ;; Hardware stack levels used:    1
 11815 ;; Hardware stack levels required when called:    6
 11816 ;; This function calls:
 11817 ;;		_Flash_Memory_Unlock
 11818 ;; This function is called by:
 11819 ;;		_Flash_Memory_Initialization
 11820 ;;		_Flash_Memory_Modify
 11821 ;; This function uses a non-reentrant model
 11822 ;;
 11823                           
 11824                           
 11825                           ;psect for function _Flash_Memory_Write
 11826  10C8                     _Flash_Memory_Write:	
 11827                           
 11828                           ;MCU_B1.c: 1010: char i = 0;
 11829                           
 11830                           ;incstack = 0
 11831                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11832  10C8  0020               	movlb	0	; select bank0
 11833  10C9  01A1               	clrf	Flash_Memory_Write@i
 11834                           
 11835                           ;MCU_B1.c: 1011: CFGS = 0;
 11836  10CA  0023               	movlb	3	; select bank3
 11837  10CB  1315               	bcf	21,6	;volatile
 11838                           
 11839                           ;MCU_B1.c: 1012: PMADRH = 0x30;
 11840  10CC  3030               	movlw	48
 11841  10CD  0092               	movwf	18	;volatile
 11842                           
 11843                           ;MCU_B1.c: 1013: PMDATH = 0;
 11844  10CE  0194               	clrf	20	;volatile
 11845                           
 11846                           ;MCU_B1.c: 1014: FREE = 0;
 11847  10CF  1215               	bcf	21,4	;volatile
 11848                           
 11849                           ;MCU_B1.c: 1015: LWLO = 1;
 11850  10D0  1695               	bsf	21,5	;volatile
 11851                           
 11852                           ;MCU_B1.c: 1016: WREN = 1;
 11853  10D1  1515               	bsf	21,2	;volatile
 11854                           
 11855                           ;MCU_B1.c: 1017: for (i = 0; i < 32; i++) {
 11856  10D2  0020               	movlb	0	; select bank0
 11857  10D3  01A1               	clrf	Flash_Memory_Write@i
 11858  10D4  3020               	movlw	32
 11859  10D5  0221               	subwf	Flash_Memory_Write@i,w
 11860  10D6  1803               	btfsc	3,0
 11861  10D7  28F0               	goto	l1193
 11862  10D8                     l6612:	
 11863                           
 11864                           ;MCU_B1.c: 1018: PMADRL = i;
 11865  10D8  0821               	movf	Flash_Memory_Write@i,w
 11866  10D9  0023               	movlb	3	; select bank3
 11867  10DA  0091               	movwf	17	;volatile
 11868                           
 11869                           ;MCU_B1.c: 1019: PMDATL = Memory.Data[i];
 11870  10DB  0020               	movlb	0	; select bank0
 11871  10DC  0821               	movf	Flash_Memory_Write@i,w
 11872  10DD  3EA0               	addlw	_Memory& (0+255)
 11873  10DE  0086               	movwf	6
 11874  10DF  3001               	movlw	1	; select bank3/4
 11875  10E0  0087               	movwf	7
 11876  10E1  0801               	movf	1,w
 11877  10E2  0023               	movlb	3	; select bank3
 11878  10E3  0093               	movwf	19	;volatile
 11879                           
 11880                           ;MCU_B1.c: 1020: Flash_Memory_Unlock();
 11881  10E4  319B  23E5  3190   	fcall	_Flash_Memory_Unlock
 11882  10E7  3001               	movlw	1
 11883  10E8  0020               	movlb	0	; select bank0
 11884  10E9  00A0               	movwf	??_Flash_Memory_Write
 11885  10EA  0820               	movf	??_Flash_Memory_Write,w
 11886  10EB  07A1               	addwf	Flash_Memory_Write@i,f
 11887  10EC  3020               	movlw	32
 11888  10ED  0221               	subwf	Flash_Memory_Write@i,w
 11889  10EE  1C03               	skipc
 11890  10EF  28D8               	goto	l6612
 11891  10F0                     l1193:	
 11892                           
 11893                           ;MCU_B1.c: 1021: }
 11894                           ;MCU_B1.c: 1022: LWLO = 0;
 11895  10F0  0023               	movlb	3	; select bank3
 11896  10F1  1295               	bcf	21,5	;volatile
 11897                           
 11898                           ;MCU_B1.c: 1023: Flash_Memory_Unlock();
 11899  10F2  319B  23E5         	fcall	_Flash_Memory_Unlock
 11900                           
 11901                           ;MCU_B1.c: 1024: WREN = 0;
 11902  10F4  0023               	movlb	3	; select bank3
 11903  10F5  1115               	bcf	21,2	;volatile
 11904  10F6  0008               	return
 11905  10F7                     __end_of_Flash_Memory_Write:	
 11906                           
 11907                           	psect	text69
 11908  1BE5                     __ptext69:	
 11909 ;; *************** function _Flash_Memory_Unlock *****************
 11910 ;; Defined at:
 11911 ;;		line 988 in file "../src/MCU_B1.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;		None
 11914 ;; Auto vars:     Size  Location     Type
 11915 ;;		None
 11916 ;; Return value:  Size  Location     Type
 11917 ;;		None               void
 11918 ;; Registers used:
 11919 ;;		wreg
 11920 ;; Tracked objects:
 11921 ;;		On entry : 0/0
 11922 ;;		On exit  : 0/0
 11923 ;;		Unchanged: 0/0
 11924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;Total ram usage:        0 bytes
 11930 ;; Hardware stack levels used:    1
 11931 ;; Hardware stack levels required when called:    5
 11932 ;; This function calls:
 11933 ;;		Nothing
 11934 ;; This function is called by:
 11935 ;;		_Flash_Memory_Write
 11936 ;;		_Flash_Memory_Erasing
 11937 ;; This function uses a non-reentrant model
 11938 ;;
 11939                           
 11940                           
 11941                           ;psect for function _Flash_Memory_Unlock
 11942  1BE5                     _Flash_Memory_Unlock:	
 11943                           
 11944                           ;MCU_B1.c: 989: PMCON2 = 0x55;
 11945                           
 11946                           ;incstack = 0
 11947                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11948  1BE5  3055               	movlw	85
 11949  1BE6  0023               	movlb	3	; select bank3
 11950  1BE7  0096               	movwf	22	;volatile
 11951                           
 11952                           ;MCU_B1.c: 990: PMCON2 = 0xaa;
 11953  1BE8  30AA               	movlw	170
 11954  1BE9  0096               	movwf	22	;volatile
 11955                           
 11956                           ;MCU_B1.c: 991: WR = 1;
 11957  1BEA  1495               	bsf	21,1	;volatile
 11958                           
 11959                           ;MCU_B1.c: 992: __nop();
 11960  1BEB  0000               	nop
 11961                           
 11962                           ;MCU_B1.c: 993: __nop();
 11963  1BEC  0000               	nop
 11964  1BED  0008               	return
 11965  1BEE                     __end_of_Flash_Memory_Unlock:	
 11966                           
 11967                           	psect	text70
 11968  1E46                     __ptext70:	
 11969 ;; *************** function _Flash_Memory_Read *****************
 11970 ;; Defined at:
 11971 ;;		line 997 in file "../src/MCU_B1.c"
 11972 ;; Parameters:    Size  Location     Type
 11973 ;;  address         1    wreg     unsigned char 
 11974 ;; Auto vars:     Size  Location     Type
 11975 ;;  address         1    2[BANK0 ] unsigned char 
 11976 ;;  ret             1    3[BANK0 ] unsigned char 
 11977 ;;  i               1    1[BANK0 ] unsigned char 
 11978 ;; Return value:  Size  Location     Type
 11979 ;;                  1    wreg      unsigned char 
 11980 ;; Registers used:
 11981 ;;		wreg, status,2
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;Total ram usage:        4 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    5
 11994 ;; This function calls:
 11995 ;;		Nothing
 11996 ;; This function is called by:
 11997 ;;		_Flash_Memory_Initialization
 11998 ;;		_Flash_Memory_Modify
 11999 ;; This function uses a non-reentrant model
 12000 ;;
 12001                           
 12002                           
 12003                           ;psect for function _Flash_Memory_Read
 12004  1E46                     _Flash_Memory_Read:	
 12005                           
 12006                           ;incstack = 0
 12007                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12008                           ;Flash_Memory_Read@address stored from wreg
 12009  1E46  0020               	movlb	0	; select bank0
 12010  1E47  00A2               	movwf	Flash_Memory_Read@address
 12011                           
 12012                           ;MCU_B1.c: 998: char i = 0, ret = 0;
 12013  1E48  01A1               	clrf	Flash_Memory_Read@i
 12014  1E49  01A3               	clrf	Flash_Memory_Read@ret
 12015                           
 12016                           ;MCU_B1.c: 999: PMADRH = 0x30;
 12017  1E4A  3030               	movlw	48
 12018  1E4B  0023               	movlb	3	; select bank3
 12019  1E4C  0092               	movwf	18	;volatile
 12020                           
 12021                           ;MCU_B1.c: 1000: PMADRL = address;
 12022  1E4D  0020               	movlb	0	; select bank0
 12023  1E4E  0822               	movf	Flash_Memory_Read@address,w
 12024  1E4F  0023               	movlb	3	; select bank3
 12025  1E50  0091               	movwf	17	;volatile
 12026                           
 12027                           ;MCU_B1.c: 1001: CFGS = 0;
 12028  1E51  1315               	bcf	21,6	;volatile
 12029                           
 12030                           ;MCU_B1.c: 1002: RD = 1;
 12031  1E52  1415               	bsf	21,0	;volatile
 12032                           
 12033                           ;MCU_B1.c: 1003: i = PMDATH;
 12034  1E53  0814               	movf	20,w	;volatile
 12035  1E54  0020               	movlb	0	; select bank0
 12036  1E55  00A0               	movwf	??_Flash_Memory_Read
 12037  1E56  0820               	movf	??_Flash_Memory_Read,w
 12038  1E57  00A1               	movwf	Flash_Memory_Read@i
 12039                           
 12040                           ;MCU_B1.c: 1004: ret = PMDATL;
 12041  1E58  0023               	movlb	3	; select bank3
 12042  1E59  0813               	movf	19,w	;volatile
 12043  1E5A  0020               	movlb	0	; select bank0
 12044  1E5B  00A0               	movwf	??_Flash_Memory_Read
 12045  1E5C  0820               	movf	??_Flash_Memory_Read,w
 12046  1E5D  00A3               	movwf	Flash_Memory_Read@ret
 12047                           
 12048                           ;MCU_B1.c: 1005: return ret;
 12049  1E5E  0823               	movf	Flash_Memory_Read@ret,w
 12050  1E5F  0008               	return
 12051  1E60                     __end_of_Flash_Memory_Read:	
 12052                           
 12053                           	psect	text71
 12054  0DEC                     __ptext71:	
 12055 ;; *************** function _Exception_Main *****************
 12056 ;; Defined at:
 12057 ;;		line 488 in file "../src/Main_B1.c"
 12058 ;; Parameters:    Size  Location     Type
 12059 ;;		None
 12060 ;; Auto vars:     Size  Location     Type
 12061 ;;  i               2   21[BANK0 ] int 
 12062 ;;  lights          1   20[BANK0 ] unsigned char 
 12063 ;;  count           1   18[BANK0 ] unsigned char 
 12064 ;;  error           1   19[BANK0 ] unsigned char 
 12065 ;; Return value:  Size  Location     Type
 12066 ;;		None               void
 12067 ;; Registers used:
 12068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12069 ;; Tracked objects:
 12070 ;;		On entry : 0/0
 12071 ;;		On exit  : 0/0
 12072 ;;		Unchanged: 0/0
 12073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12075 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;Total ram usage:        6 bytes
 12079 ;; Hardware stack levels used:    1
 12080 ;; Hardware stack levels required when called:    9
 12081 ;; This function calls:
 12082 ;;		_DimmerLightsPointSelect
 12083 ;;		_getDimmerLights_Line
 12084 ;;		_getDimmerLights_Status
 12085 ;;		_getMain_All_Error_Status
 12086 ;;		_getMain_LightsStatus
 12087 ;;		_setBuz
 12088 ;;		_setDimmerLights_SwOff
 12089 ;;		_setLED
 12090 ;; This function is called by:
 12091 ;;		_main
 12092 ;; This function uses a non-reentrant model
 12093 ;;
 12094                           
 12095                           
 12096                           ;psect for function _Exception_Main
 12097  0DEC                     _Exception_Main:	
 12098                           
 12099                           ;Main_B1.c: 489: char error = getMain_All_Error_Status(0);
 12100                           
 12101                           ;incstack = 0
 12102                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12103  0DEC  3000               	movlw	0
 12104  0DED  3191  218C  318D   	fcall	_getMain_All_Error_Status
 12105  0DF0  0020               	movlb	0	; select bank0
 12106  0DF1  00B1               	movwf	??_Exception_Main
 12107  0DF2  0831               	movf	??_Exception_Main,w
 12108  0DF3  00B3               	movwf	Exception_Main@error
 12109                           
 12110                           ;Main_B1.c: 491: if (myMain.Error_Run == 1) {
 12111  0DF4  0021               	movlb	1	; select bank1
 12112  0DF5  1DAB               	btfss	(_myMain^(0+128)+11),3
 12113  0DF6  2E06               	goto	l7874
 12114                           
 12115                           ;Main_B1.c: 492: if (error == 0) {
 12116  0DF7  0020               	movlb	0	; select bank0
 12117  0DF8  08B3               	movf	Exception_Main@error,f
 12118  0DF9  1D03               	skipz
 12119  0DFA  0008               	return
 12120                           
 12121                           ;Main_B1.c: 493: myMain.Error_Run = 0;
 12122  0DFB  0021               	movlb	1	; select bank1
 12123  0DFC  11AB               	bcf	(_myMain^(0+128)+11),3
 12124                           
 12125                           ;Main_B1.c: 498: setLED(99, 10);
 12126  0DFD  300A               	movlw	10
 12127  0DFE  0020               	movlb	0	; select bank0
 12128  0DFF  00B1               	movwf	??_Exception_Main
 12129  0E00  0831               	movf	??_Exception_Main,w
 12130  0E01  00A2               	movwf	setLED@command
 12131  0E02  3063               	movlw	99
 12132  0E03  3191  21F2         	fcall	_setLED
 12133                           
 12134                           ;Main_B1.c: 500: }
 12135                           ;Main_B1.c: 501: } else {
 12136  0E05  0008               	return
 12137  0E06                     l7874:	
 12138                           
 12139                           ;Main_B1.c: 502: if (error != 0) {
 12140  0E06  0020               	movlb	0	; select bank0
 12141  0E07  0833               	movf	Exception_Main@error,w
 12142  0E08  1903               	btfsc	3,2
 12143  0E09  0008               	return
 12144                           
 12145                           ;Main_B1.c: 503: myMain.Error_Run = 1;
 12146  0E0A  0021               	movlb	1	; select bank1
 12147  0E0B  15AB               	bsf	(_myMain^(0+128)+11),3
 12148                           
 12149                           ;Main_B1.c: 506: setLED(99, 11);
 12150  0E0C  300B               	movlw	11
 12151  0E0D  0020               	movlb	0	; select bank0
 12152  0E0E  00B1               	movwf	??_Exception_Main
 12153  0E0F  0831               	movf	??_Exception_Main,w
 12154  0E10  00A2               	movwf	setLED@command
 12155  0E11  3063               	movlw	99
 12156  0E12  3191  21F2  318D   	fcall	_setLED
 12157                           
 12158                           ;Main_B1.c: 508: switch (error) {
 12159  0E15  2E8E               	goto	l7914
 12160  0E16                     l7880:	
 12161                           ;Main_B1.c: 509: case 2:
 12162                           
 12163                           
 12164                           ;Main_B1.c: 510: if (getMain_LightsStatus() == 1) {
 12165  0E16  3190  209D  318D   	fcall	_getMain_LightsStatus
 12166  0E19  3A01               	xorlw	1
 12167  0E1A  1D03               	skipz
 12168  0E1B  2E25               	goto	l7884
 12169                           
 12170                           ;Main_B1.c: 511: setBuz(10, 300);
 12171  0E1C  302C               	movlw	44
 12172  0E1D  0020               	movlb	0	; select bank0
 12173  0E1E  00A9               	movwf	setBuz@time
 12174  0E1F  3001               	movlw	1
 12175  0E20  00AA               	movwf	setBuz@time+1
 12176  0E21  300A               	movlw	10
 12177  0E22  3195  25E0  318D   	fcall	_setBuz
 12178  0E25                     l7884:	
 12179                           
 12180                           ;Main_B1.c: 512: }
 12181                           ;Main_B1.c: 515: char count = 1;
 12182  0E25  0020               	movlb	0	; select bank0
 12183  0E26  01B2               	clrf	Exception_Main@count
 12184  0E27  0AB2               	incf	Exception_Main@count,f
 12185                           
 12186                           ;Main_B1.c: 523: for (int i = 0; i < count; i++) {
 12187  0E28  01B5               	clrf	Exception_Main@i
 12188  0E29  01B6               	clrf	Exception_Main@i+1
 12189  0E2A                     l7898:	
 12190  0E2A  0836               	movf	Exception_Main@i+1,w
 12191  0E2B  3A80               	xorlw	128
 12192  0E2C  00B1               	movwf	??_Exception_Main
 12193  0E2D  3080               	movlw	128
 12194  0E2E  0231               	subwf	??_Exception_Main,w
 12195  0E2F  1D03               	skipz
 12196  0E30  2E33               	goto	u8025
 12197  0E31  0832               	movf	Exception_Main@count,w
 12198  0E32  0235               	subwf	Exception_Main@i,w
 12199  0E33                     u8025:	
 12200  0E33  1803               	btfsc	3,0
 12201  0E34  2E5C               	goto	u8020
 12202                           
 12203                           ;Main_B1.c: 524: DimmerLightsPointSelect(i + 1);
 12204  0E35  0020               	movlb	0	; select bank0
 12205  0E36  0835               	movf	Exception_Main@i,w
 12206  0E37  3E01               	addlw	1
 12207  0E38  319C  2421  318D   	fcall	_DimmerLightsPointSelect
 12208                           
 12209                           ;Main_B1.c: 525: if (getDimmerLights_Status(i + 1) == 1) {
 12210  0E3B  0020               	movlb	0	; select bank0
 12211  0E3C  0835               	movf	Exception_Main@i,w
 12212  0E3D  3E01               	addlw	1
 12213  0E3E  319C  24FB  318D   	fcall	_getDimmerLights_Status
 12214  0E41  3A01               	xorlw	1
 12215  0E42  1D03               	skipz
 12216  0E43  2E56               	goto	l7896
 12217                           
 12218                           ;Main_B1.c: 526: DimmerLights->SwFlag = 1;
 12219  0E44  0020               	movlb	0	; select bank0
 12220  0E45  086F               	movf	_DimmerLights,w
 12221  0E46  3E0B               	addlw	11
 12222  0E47  0086               	movwf	6
 12223  0E48  3001               	movlw	1	; select bank2/3
 12224  0E49  0087               	movwf	7
 12225  0E4A  1481               	bsf	1,1
 12226                           
 12227                           ;Main_B1.c: 527: DimmerLights->Status = 0;
 12228  0E4B  086F               	movf	_DimmerLights,w
 12229  0E4C  3E02               	addlw	2
 12230  0E4D  0086               	movwf	6
 12231  0E4E  3001               	movlw	1	; select bank2/3
 12232  0E4F  0087               	movwf	7
 12233  0E50  1081               	bcf	1,1
 12234                           
 12235                           ;Main_B1.c: 528: setDimmerLights_SwOff(i + 1);
 12236  0E51  0835               	movf	Exception_Main@i,w
 12237  0E52  3E01               	addlw	1
 12238  0E53  3195  2588  318D   	fcall	_setDimmerLights_SwOff
 12239  0E56                     l7896:	
 12240  0E56  3001               	movlw	1
 12241  0E57  0020               	movlb	0	; select bank0
 12242  0E58  07B5               	addwf	Exception_Main@i,f
 12243  0E59  3000               	movlw	0
 12244  0E5A  3DB6               	addwfc	Exception_Main@i+1,f
 12245  0E5B  2E2A               	goto	l7898
 12246  0E5C                     u8020:	
 12247  0E5C  0020               	movlb	0	; select bank0
 12248  0E5D  0008               	return
 12249  0E5E                     l7900:	
 12250                           ;Main_B1.c: 532: case 3:
 12251                           
 12252                           ;Main_B1.c: 529: }
 12253                           ;Main_B1.c: 530: }
 12254                           ;Main_B1.c: 531: break;
 12255                           
 12256                           
 12257                           ;Main_B1.c: 533: setBuz(5, 300);
 12258  0E5E  302C               	movlw	44
 12259  0E5F  0020               	movlb	0	; select bank0
 12260  0E60  00A9               	movwf	setBuz@time
 12261  0E61  3001               	movlw	1
 12262  0E62  00AA               	movwf	setBuz@time+1
 12263  0E63  3005               	movlw	5
 12264  0E64  3195  25E0  318D   	fcall	_setBuz
 12265                           
 12266                           ;Main_B1.c: 534: char lights = getDimmerLights_Line();
 12267  0E67  319C  2437  318D   	fcall	_getDimmerLights_Line
 12268  0E6A  0020               	movlb	0	; select bank0
 12269  0E6B  00B1               	movwf	??_Exception_Main
 12270  0E6C  0831               	movf	??_Exception_Main,w
 12271  0E6D  00B4               	movwf	Exception_Main@lights
 12272                           
 12273                           ;Main_B1.c: 535: DimmerLightsPointSelect(lights);
 12274  0E6E  0834               	movf	Exception_Main@lights,w
 12275  0E6F  319C  2421  318D   	fcall	_DimmerLightsPointSelect
 12276                           
 12277                           ;Main_B1.c: 536: if (getDimmerLights_Status(lights) == 1) {
 12278  0E72  0020               	movlb	0	; select bank0
 12279  0E73  0834               	movf	Exception_Main@lights,w
 12280  0E74  319C  24FB  318D   	fcall	_getDimmerLights_Status
 12281  0E77  3A01               	xorlw	1
 12282  0E78  1903               	btfsc	3,2
 12283  0E79  2E7C               	goto	l7908
 12284  0E7A  0020               	movlb	0	; select bank0
 12285  0E7B  0008               	return
 12286  0E7C                     l7908:	
 12287                           
 12288                           ;Main_B1.c: 537: DimmerLights->SwFlag = 1;
 12289  0E7C  0020               	movlb	0	; select bank0
 12290  0E7D  086F               	movf	_DimmerLights,w
 12291  0E7E  3E0B               	addlw	11
 12292  0E7F  0086               	movwf	6
 12293  0E80  3001               	movlw	1	; select bank2/3
 12294  0E81  0087               	movwf	7
 12295  0E82  1481               	bsf	1,1
 12296                           
 12297                           ;Main_B1.c: 538: DimmerLights->Status = 0;
 12298  0E83  086F               	movf	_DimmerLights,w
 12299  0E84  3E02               	addlw	2
 12300  0E85  0086               	movwf	6
 12301  0E86  3001               	movlw	1	; select bank2/3
 12302  0E87  0087               	movwf	7
 12303  0E88  1081               	bcf	1,1
 12304                           
 12305                           ;Main_B1.c: 539: setDimmerLights_SwOff(lights);
 12306  0E89  0834               	movf	Exception_Main@lights,w
 12307  0E8A  3195  2588         	fcall	_setDimmerLights_SwOff
 12308  0E8C  0020               	movlb	0	; select bank0
 12309  0E8D  0008               	return
 12310  0E8E                     l7914:	
 12311                           ;Main_B1.c: 542: }
 12312                           
 12313                           ;Main_B1.c: 540: }
 12314                           ;Main_B1.c: 541: break;
 12315                           
 12316  0E8E  0020               	movlb	0	; select bank0
 12317  0E8F  0833               	movf	Exception_Main@error,w
 12318                           
 12319                           ; Switch size 1, requested type "space"
 12320                           ; Number of cases is 2, Range of values is 2 to 3
 12321                           ; switch strategies available:
 12322                           ; Name         Instructions Cycles
 12323                           ; simple_byte            7     4 (average)
 12324                           ; direct_byte           13     9 (fixed)
 12325                           ; jumptable            263     9 (fixed)
 12326                           ;	Chosen strategy is simple_byte
 12327  0E90  3A02               	xorlw	2	; case 2
 12328  0E91  1903               	skipnz
 12329  0E92  2E16               	goto	l7880
 12330  0E93  3A01               	xorlw	1	; case 3
 12331  0E94  1903               	skipnz
 12332  0E95  2E5E               	goto	l7900
 12333  0E96  2E98               	goto	l1457
 12334  0E97  0008               	return
 12335  0E98                     l1457:	
 12336  0E98  0008               	return
 12337  0E99                     __end_of_Exception_Main:	
 12338                           
 12339                           	psect	text72
 12340  1C37                     __ptext72:	
 12341 ;; *************** function _getDimmerLights_Line *****************
 12342 ;; Defined at:
 12343 ;;		line 718 in file "../src/Dimmer_B1.c"
 12344 ;; Parameters:    Size  Location     Type
 12345 ;;		None
 12346 ;; Auto vars:     Size  Location     Type
 12347 ;;  line            1    0[BANK0 ] unsigned char 
 12348 ;; Return value:  Size  Location     Type
 12349 ;;                  1    wreg      unsigned char 
 12350 ;; Registers used:
 12351 ;;		wreg, status,2
 12352 ;; Tracked objects:
 12353 ;;		On entry : 0/0
 12354 ;;		On exit  : 0/0
 12355 ;;		Unchanged: 0/0
 12356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;Total ram usage:        1 bytes
 12362 ;; Hardware stack levels used:    1
 12363 ;; Hardware stack levels required when called:    5
 12364 ;; This function calls:
 12365 ;;		Nothing
 12366 ;; This function is called by:
 12367 ;;		_Exception_Main
 12368 ;;		_setMain_Exception
 12369 ;; This function uses a non-reentrant model
 12370 ;;
 12371                           
 12372                           
 12373                           ;psect for function _getDimmerLights_Line
 12374  1C37                     _getDimmerLights_Line:	
 12375                           
 12376                           ;Dimmer_B1.c: 719: char line = 0;
 12377                           
 12378                           ;incstack = 0
 12379                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12380  1C37  0020               	movlb	0	; select bank0
 12381  1C38  01A0               	clrf	getDimmerLights_Line@line
 12382                           
 12383                           ;Dimmer_B1.c: 721: if (DimmerLights1.Line == 1) {
 12384  1C39  0023               	movlb	3	; select bank3
 12385  1C3A  1F4F               	btfss	(_DimmerLights1^(0+384)+10),6	;volatile
 12386  1C3B  2C3F               	goto	l6978
 12387                           
 12388                           ;Dimmer_B1.c: 722: line = 1;
 12389  1C3C  0020               	movlb	0	; select bank0
 12390  1C3D  01A0               	clrf	getDimmerLights_Line@line
 12391  1C3E  0AA0               	incf	getDimmerLights_Line@line,f
 12392  1C3F                     l6978:	
 12393                           
 12394                           ;Dimmer_B1.c: 723: }
 12395                           ;Dimmer_B1.c: 735: return line;
 12396  1C3F  0020               	movlb	0	; select bank0
 12397  1C40  0820               	movf	getDimmerLights_Line@line,w
 12398  1C41  0008               	return
 12399  1C42                     __end_of_getDimmerLights_Line:	
 12400                           
 12401                           	psect	text73
 12402  10F7                     __ptext73:	
 12403 ;; *************** function _DimmerLights_Main *****************
 12404 ;; Defined at:
 12405 ;;		line 390 in file "../src/Dimmer_B1.c"
 12406 ;; Parameters:    Size  Location     Type
 12407 ;;		None
 12408 ;; Auto vars:     Size  Location     Type
 12409 ;;		None
 12410 ;; Return value:  Size  Location     Type
 12411 ;;		None               void
 12412 ;; Registers used:
 12413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12414 ;; Tracked objects:
 12415 ;;		On entry : 0/0
 12416 ;;		On exit  : 0/0
 12417 ;;		Unchanged: 0/0
 12418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;Total ram usage:        4 bytes
 12424 ;; Hardware stack levels used:    1
 12425 ;; Hardware stack levels required when called:   10
 12426 ;; This function calls:
 12427 ;;		_getLoad_OK
 12428 ;;		_getMain_All_Error_Status
 12429 ;;		_getMain_LightsStatus
 12430 ;;		_setDimmerLights_Main
 12431 ;; This function is called by:
 12432 ;;		_main
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           
 12437                           ;psect for function _DimmerLights_Main
 12438  10F7                     _DimmerLights_Main:	
 12439                           
 12440                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 12441                           
 12442                           ;incstack = 0
 12443                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12444  10F7  3000               	movlw	0
 12445  10F8  3191  218C  3190   	fcall	_getMain_All_Error_Status
 12446  10FB  3800               	iorlw	0
 12447  10FC  1D03               	skipz
 12448  10FD  2921               	goto	l705
 12449                           
 12450                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 12451  10FE  0021               	movlb	1	; select bank1
 12452  10FF  1CC6               	btfss	_Dimmer^(0+128),1	;volatile
 12453  1100  2923               	goto	l7480
 12454                           
 12455                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12456  1101  319B  23CC  3190   	fcall	_getLoad_OK
 12457  1104  3A01               	xorlw	1
 12458  1105  1903               	skipnz
 12459  1106  2918               	goto	l7476
 12460  1107  3190  209D  3190   	fcall	_getMain_LightsStatus
 12461  110A  3A00               	xorlw	0
 12462  110B  1903               	skipnz
 12463  110C  2918               	goto	l7476
 12464  110D  0021               	movlb	1	; select bank1
 12465  110E  0C46               	rrf	_Dimmer^(0+128),w	;volatile
 12466  110F  3901               	andlw	1
 12467  1110  0020               	movlb	0	; select bank0
 12468  1111  00E7               	movwf	??_DimmerLights_Main
 12469  1112  01E8               	clrf	??_DimmerLights_Main+1
 12470  1113  0867               	movf	??_DimmerLights_Main,w
 12471  1114  00E9               	movwf	_DimmerLights_Main$2139
 12472  1115  0868               	movf	??_DimmerLights_Main+1,w
 12473  1116  00EA               	movwf	_DimmerLights_Main$2139+1
 12474  1117  291B               	goto	l7478
 12475  1118                     l7476:	
 12476  1118  0020               	movlb	0	; select bank0
 12477  1119  01E9               	clrf	_DimmerLights_Main$2139
 12478  111A  01EA               	clrf	_DimmerLights_Main$2139+1
 12479  111B                     l7478:	
 12480  111B  0869               	movf	_DimmerLights_Main$2139,w
 12481  111C  0021               	movlb	1	; select bank1
 12482  111D  10C6               	bcf	_Dimmer^(0+128),1	;volatile
 12483  111E  1D03               	skipz
 12484  111F  14C6               	bsf	_Dimmer^(0+128),1	;volatile
 12485                           
 12486                           ;Dimmer_B1.c: 395: }
 12487                           ;Dimmer_B1.c: 396: } else {
 12488  1120  2923               	goto	l7480
 12489  1121                     l705:	
 12490                           
 12491                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 12492  1121  0021               	movlb	1	; select bank1
 12493  1122  10C6               	bcf	_Dimmer^(0+128),1	;volatile
 12494  1123                     l7480:	
 12495                           
 12496                           ;Dimmer_B1.c: 398: }
 12497                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 12498  1123  3001               	movlw	1
 12499  1124  3196  2639         	fcall	_setDimmerLights_Main
 12500  1126  0008               	return
 12501  1127                     __end_of_DimmerLights_Main:	
 12502                           
 12503                           	psect	text74
 12504  1639                     __ptext74:	
 12505 ;; *************** function _setDimmerLights_Main *****************
 12506 ;; Defined at:
 12507 ;;		line 416 in file "../src/Dimmer_B1.c"
 12508 ;; Parameters:    Size  Location     Type
 12509 ;;  lights          1    wreg     unsigned char 
 12510 ;; Auto vars:     Size  Location     Type
 12511 ;;  lights          1   70[BANK0 ] unsigned char 
 12512 ;; Return value:  Size  Location     Type
 12513 ;;		None               void
 12514 ;; Registers used:
 12515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12516 ;; Tracked objects:
 12517 ;;		On entry : 0/0
 12518 ;;		On exit  : 0/0
 12519 ;;		Unchanged: 0/0
 12520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;Total ram usage:        1 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; Hardware stack levels required when called:    9
 12528 ;; This function calls:
 12529 ;;		_DimmerLightsPointSelect
 12530 ;;		_setBuz
 12531 ;;		_setDimmerLights
 12532 ;;		_setDimmerLights_Adj
 12533 ;; This function is called by:
 12534 ;;		_DimmerLights_Main
 12535 ;; This function uses a non-reentrant model
 12536 ;;
 12537                           
 12538                           
 12539                           ;psect for function _setDimmerLights_Main
 12540  1639                     _setDimmerLights_Main:	
 12541                           
 12542                           ;incstack = 0
 12543                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12544                           ;setDimmerLights_Main@lights stored from wreg
 12545  1639  0020               	movlb	0	; select bank0
 12546  163A  00E6               	movwf	setDimmerLights_Main@lights
 12547                           
 12548                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 12549  163B  0866               	movf	setDimmerLights_Main@lights,w
 12550  163C  319C  2421  3196   	fcall	_DimmerLightsPointSelect
 12551                           
 12552                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 12553  163F  0020               	movlb	0	; select bank0
 12554  1640  086F               	movf	_DimmerLights,w
 12555  1641  3E0A               	addlw	10
 12556  1642  0086               	movwf	6
 12557  1643  3001               	movlw	1	; select bank2/3
 12558  1644  0087               	movwf	7
 12559  1645  1C81               	btfss	1,1
 12560  1646  2E64               	goto	l6960
 12561                           
 12562                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 12563  1647  0021               	movlb	1	; select bank1
 12564  1648  18C6               	btfsc	_Dimmer^(0+128),1	;volatile
 12565  1649  0008               	return
 12566                           
 12567                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 12568  164A  0020               	movlb	0	; select bank0
 12569  164B  086F               	movf	_DimmerLights,w
 12570  164C  3E0A               	addlw	10
 12571  164D  0086               	movwf	6
 12572  164E  3001               	movlw	1	; select bank2/3
 12573  164F  0087               	movwf	7
 12574  1650  1081               	bcf	1,1
 12575                           
 12576                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 12577  1651  086F               	movf	_DimmerLights,w
 12578  1652  3E0A               	addlw	10
 12579  1653  0086               	movwf	6
 12580  1654  3001               	movlw	1	; select bank2/3
 12581  1655  0087               	movwf	7
 12582  1656  1C01               	btfss	1,0
 12583  1657  2E5E               	goto	l6958
 12584                           
 12585                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 12586  1658  01E2               	clrf	setDimmerLights@status
 12587  1659  0AE2               	incf	setDimmerLights@status,f
 12588  165A  0866               	movf	setDimmerLights_Main@lights,w
 12589  165B  318B  23A6         	fcall	_setDimmerLights
 12590                           
 12591                           ;Dimmer_B1.c: 425: } else {
 12592  165D  0008               	return
 12593  165E                     l6958:	
 12594                           
 12595                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 12596  165E  0020               	movlb	0	; select bank0
 12597  165F  01E2               	clrf	setDimmerLights@status
 12598  1660  0866               	movf	setDimmerLights_Main@lights,w
 12599  1661  318B  23A6         	fcall	_setDimmerLights
 12600                           
 12601                           ;Dimmer_B1.c: 427: }
 12602                           ;Dimmer_B1.c: 428: }
 12603                           ;Dimmer_B1.c: 429: } else {
 12604  1663  0008               	return
 12605  1664                     l6960:	
 12606                           
 12607                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 12608  1664  0020               	movlb	0	; select bank0
 12609  1665  086F               	movf	_DimmerLights,w
 12610  1666  3E0A               	addlw	10
 12611  1667  0086               	movwf	6
 12612  1668  3001               	movlw	1	; select bank2/3
 12613  1669  0087               	movwf	7
 12614  166A  1D81               	btfss	1,3
 12615  166B  0008               	return
 12616                           
 12617                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 12618  166C  0021               	movlb	1	; select bank1
 12619  166D  18C6               	btfsc	_Dimmer^(0+128),1	;volatile
 12620  166E  0008               	return
 12621                           
 12622                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 12623  166F  0020               	movlb	0	; select bank0
 12624  1670  086F               	movf	_DimmerLights,w
 12625  1671  3E0A               	addlw	10
 12626  1672  0086               	movwf	6
 12627  1673  3001               	movlw	1	; select bank2/3
 12628  1674  0087               	movwf	7
 12629  1675  1181               	bcf	1,3
 12630                           
 12631                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 12632  1676  086F               	movf	_DimmerLights,w
 12633  1677  3E0A               	addlw	10
 12634  1678  0086               	movwf	6
 12635  1679  3001               	movlw	1	; select bank2/3
 12636  167A  0087               	movwf	7
 12637  167B  1D01               	btfss	1,2
 12638  167C  2E8C               	goto	l6970
 12639                           
 12640                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 12641  167D  01E2               	clrf	setDimmerLights_Adj@status
 12642  167E  0AE2               	incf	setDimmerLights_Adj@status,f
 12643  167F  0866               	movf	setDimmerLights_Main@lights,w
 12644  1680  3189  218E  3196   	fcall	_setDimmerLights_Adj
 12645                           
 12646                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 12647  1683  3064               	movlw	100
 12648  1684  0020               	movlb	0	; select bank0
 12649  1685  00A9               	movwf	setBuz@time
 12650  1686  3000               	movlw	0
 12651  1687  00AA               	movwf	setBuz@time+1
 12652  1688  3001               	movlw	1
 12653  1689  3195  25E0         	fcall	_setBuz
 12654                           
 12655                           ;Dimmer_B1.c: 436: } else {
 12656  168B  0008               	return
 12657  168C                     l6970:	
 12658                           
 12659                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 12660  168C  0020               	movlb	0	; select bank0
 12661  168D  01E2               	clrf	setDimmerLights_Adj@status
 12662  168E  0866               	movf	setDimmerLights_Main@lights,w
 12663  168F  3189  218E         	fcall	_setDimmerLights_Adj
 12664  1691  0008               	return
 12665  1692                     __end_of_setDimmerLights_Main:	
 12666                           
 12667                           	psect	text75
 12668  098E                     __ptext75:	
 12669 ;; *************** function _setDimmerLights_Adj *****************
 12670 ;; Defined at:
 12671 ;;		line 739 in file "../src/Dimmer_B1.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;  lights          1    wreg     unsigned char 
 12674 ;;  status          1   66[BANK0 ] unsigned char 
 12675 ;; Auto vars:     Size  Location     Type
 12676 ;;  lights          1   69[BANK0 ] unsigned char 
 12677 ;; Return value:  Size  Location     Type
 12678 ;;		None               void
 12679 ;; Registers used:
 12680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12681 ;; Tracked objects:
 12682 ;;		On entry : 0/0
 12683 ;;		On exit  : 0/0
 12684 ;;		Unchanged: 0/0
 12685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12686 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;Total ram usage:        4 bytes
 12691 ;; Hardware stack levels used:    1
 12692 ;; Hardware stack levels required when called:    8
 12693 ;; This function calls:
 12694 ;;		_getMain_All_Error_Status
 12695 ;;		_setPercentValue
 12696 ;;		_setRF_DimmerLights
 12697 ;;		_setTxData
 12698 ;; This function is called by:
 12699 ;;		_setDimmerLights_Main
 12700 ;; This function uses a non-reentrant model
 12701 ;;
 12702                           
 12703                           
 12704                           ;psect for function _setDimmerLights_Adj
 12705  098E                     _setDimmerLights_Adj:	
 12706                           
 12707                           ;incstack = 0
 12708                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12709                           ;setDimmerLights_Adj@lights stored from wreg
 12710  098E  0020               	movlb	0	; select bank0
 12711  098F  00E5               	movwf	setDimmerLights_Adj@lights
 12712                           
 12713                           ;Dimmer_B1.c: 741: if (status == 1) {
 12714  0990  0862               	movf	setDimmerLights_Adj@status,w
 12715  0991  3A01               	xorlw	1
 12716  0992  1D03               	skipz
 12717  0993  299F               	goto	l6532
 12718                           
 12719                           ;Dimmer_B1.c: 742: DimmerLights->AdjFlag = 1;
 12720  0994  0A6F               	incf	_DimmerLights,w
 12721  0995  0086               	movwf	6
 12722  0996  3001               	movlw	1	; select bank2/3
 12723  0997  0087               	movwf	7
 12724  0998  1701               	bsf	1,6
 12725                           
 12726                           ;Dimmer_B1.c: 743: DimmerLights->Signal = 1;
 12727  0999  0A6F               	incf	_DimmerLights,w
 12728  099A  0086               	movwf	6
 12729  099B  3001               	movlw	1	; select bank2/3
 12730  099C  0087               	movwf	7
 12731  099D  1681               	bsf	1,5
 12732                           
 12733                           ;Dimmer_B1.c: 744: } else {
 12734  099E  0008               	return
 12735  099F                     l6532:	
 12736                           
 12737                           ;Dimmer_B1.c: 745: if (DimmerLights->AdjFlag == 1) {
 12738  099F  0A6F               	incf	_DimmerLights,w
 12739  09A0  0086               	movwf	6
 12740  09A1  3001               	movlw	1	; select bank2/3
 12741  09A2  0087               	movwf	7
 12742  09A3  1F01               	btfss	1,6
 12743  09A4  0008               	return
 12744                           
 12745                           ;Dimmer_B1.c: 746: DimmerLights->Signal = 0;
 12746  09A5  0A6F               	incf	_DimmerLights,w
 12747  09A6  0086               	movwf	6
 12748  09A7  3001               	movlw	1	; select bank2/3
 12749  09A8  0087               	movwf	7
 12750  09A9  1281               	bcf	1,5
 12751                           
 12752                           ;Dimmer_B1.c: 747: DimmerLights->AdjFlag = 0;
 12753  09AA  0A6F               	incf	_DimmerLights,w
 12754  09AB  0086               	movwf	6
 12755  09AC  3001               	movlw	1	; select bank2/3
 12756  09AD  0087               	movwf	7
 12757  09AE  1301               	bcf	1,6
 12758                           
 12759                           ;Dimmer_B1.c: 748: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12760  09AF  086F               	movf	_DimmerLights,w
 12761  09B0  3E04               	addlw	4
 12762  09B1  0086               	movwf	6
 12763  09B2  3001               	movlw	1	; select bank2/3
 12764  09B3  0087               	movwf	7
 12765  09B4  0801               	movf	1,w
 12766  09B5  00E3               	movwf	??_setDimmerLights_Adj
 12767  09B6  086F               	movf	_DimmerLights,w
 12768  09B7  3E06               	addlw	6
 12769  09B8  0086               	movwf	6
 12770  09B9  3001               	movlw	1	; select bank2/3
 12771  09BA  0087               	movwf	7
 12772  09BB  0863               	movf	??_setDimmerLights_Adj,w
 12773  09BC  0081               	movwf	1
 12774                           
 12775                           ;Dimmer_B1.c: 749: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12776  09BD  086F               	movf	_DimmerLights,w
 12777  09BE  3E04               	addlw	4
 12778  09BF  0086               	movwf	6
 12779  09C0  3001               	movlw	1	; select bank2/3
 12780  09C1  0087               	movwf	7
 12781  09C2  0801               	movf	1,w
 12782  09C3  3189  21F1  3189   	fcall	_setPercentValue
 12783  09C6  0020               	movlb	0	; select bank0
 12784  09C7  00E3               	movwf	??_setDimmerLights_Adj
 12785  09C8  0865               	movf	setDimmerLights_Adj@lights,w
 12786  09C9  3E14               	addlw	20
 12787  09CA  076E               	addwf	_product,w
 12788  09CB  00E4               	movwf	??_setDimmerLights_Adj+1
 12789  09CC  0864               	movf	??_setDimmerLights_Adj+1,w
 12790  09CD  0086               	movwf	6
 12791  09CE  3002               	movlw	2	; select bank4/5
 12792  09CF  0087               	movwf	7
 12793  09D0  0863               	movf	??_setDimmerLights_Adj,w
 12794  09D1  0081               	movwf	1
 12795                           
 12796                           ;Dimmer_B1.c: 759: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12797  09D2  3000               	movlw	0
 12798  09D3  3191  218C  3189   	fcall	_getMain_All_Error_Status
 12799  09D6  3A00               	xorlw	0
 12800  09D7  3000               	movlw	0
 12801  09D8  1903               	skipnz
 12802  09D9  3001               	movlw	1
 12803  09DA  0020               	movlb	0	; select bank0
 12804  09DB  00E3               	movwf	??_setDimmerLights_Adj
 12805  09DC  0DE3               	rlf	??_setDimmerLights_Adj,f
 12806  09DD  0021               	movlb	1	; select bank1
 12807  09DE  0846               	movf	_Dimmer^(0+128),w	;volatile
 12808  09DF  0020               	movlb	0	; select bank0
 12809  09E0  0663               	xorwf	??_setDimmerLights_Adj,w
 12810  09E1  39FD               	andlw	-3
 12811  09E2  0663               	xorwf	??_setDimmerLights_Adj,w
 12812  09E3  0021               	movlb	1	; select bank1
 12813  09E4  00C6               	movwf	_Dimmer^(0+128)	;volatile
 12814                           
 12815                           ;Dimmer_B1.c: 762: setRF_DimmerLights(lights, 1);
 12816  09E5  0020               	movlb	0	; select bank0
 12817  09E6  01A0               	clrf	setRF_DimmerLights@on
 12818  09E7  0AA0               	incf	setRF_DimmerLights@on,f
 12819  09E8  0865               	movf	setDimmerLights_Adj@lights,w
 12820  09E9  3197  2747  3189   	fcall	_setRF_DimmerLights
 12821                           
 12822                           ;Dimmer_B1.c: 763: setTxData();
 12823  09EC  3187  272C         	fcall	_setTxData
 12824                           
 12825                           ;Dimmer_B1.c: 764: RB5 = 0;
 12826  09EE  0020               	movlb	0	; select bank0
 12827  09EF  128D               	bcf	13,5	;volatile
 12828  09F0  0008               	return
 12829  09F1                     __end_of_setDimmerLights_Adj:	
 12830                           
 12831                           	psect	text76
 12832  0BA6                     __ptext76:	
 12833 ;; *************** function _setDimmerLights *****************
 12834 ;; Defined at:
 12835 ;;		line 634 in file "../src/Dimmer_B1.c"
 12836 ;; Parameters:    Size  Location     Type
 12837 ;;  lights          1    wreg     unsigned char 
 12838 ;;  status          1   66[BANK0 ] unsigned char 
 12839 ;; Auto vars:     Size  Location     Type
 12840 ;;  lights          1   69[BANK0 ] unsigned char 
 12841 ;; Return value:  Size  Location     Type
 12842 ;;		None               void
 12843 ;; Registers used:
 12844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12845 ;; Tracked objects:
 12846 ;;		On entry : 0/0
 12847 ;;		On exit  : 0/0
 12848 ;;		Unchanged: 0/0
 12849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12850 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12854 ;;Total ram usage:        4 bytes
 12855 ;; Hardware stack levels used:    1
 12856 ;; Hardware stack levels required when called:    8
 12857 ;; This function calls:
 12858 ;;		_getMain_All_Error_Status
 12859 ;;		_setDimmerLights_Line
 12860 ;;		_setLED
 12861 ;;		_setPercentValue
 12862 ;;		_setRF_DimmerLights
 12863 ;;		_setTxData
 12864 ;; This function is called by:
 12865 ;;		_setDimmerLights_Main
 12866 ;; This function uses a non-reentrant model
 12867 ;;
 12868                           
 12869                           
 12870                           ;psect for function _setDimmerLights
 12871  0BA6                     _setDimmerLights:	
 12872                           
 12873                           ;incstack = 0
 12874                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12875                           ;setDimmerLights@lights stored from wreg
 12876  0BA6  0020               	movlb	0	; select bank0
 12877  0BA7  00E5               	movwf	setDimmerLights@lights
 12878                           
 12879                           ;Dimmer_B1.c: 638: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12880  0BA8  3000               	movlw	0
 12881  0BA9  3191  218C  318B   	fcall	_getMain_All_Error_Status
 12882  0BAC  3A00               	xorlw	0
 12883  0BAD  3000               	movlw	0
 12884  0BAE  1903               	skipnz
 12885  0BAF  3001               	movlw	1
 12886  0BB0  0020               	movlb	0	; select bank0
 12887  0BB1  00E3               	movwf	??_setDimmerLights
 12888  0BB2  0DE3               	rlf	??_setDimmerLights,f
 12889  0BB3  0021               	movlb	1	; select bank1
 12890  0BB4  0846               	movf	_Dimmer^(0+128),w	;volatile
 12891  0BB5  0020               	movlb	0	; select bank0
 12892  0BB6  0663               	xorwf	??_setDimmerLights,w
 12893  0BB7  39FD               	andlw	-3
 12894  0BB8  0663               	xorwf	??_setDimmerLights,w
 12895  0BB9  0021               	movlb	1	; select bank1
 12896  0BBA  00C6               	movwf	_Dimmer^(0+128)	;volatile
 12897                           
 12898                           ;Dimmer_B1.c: 642: if (status == 1) {
 12899  0BBB  0020               	movlb	0	; select bank0
 12900  0BBC  0862               	movf	setDimmerLights@status,w
 12901  0BBD  3A01               	xorlw	1
 12902  0BBE  1D03               	skipz
 12903  0BBF  2BF0               	goto	l6514
 12904                           
 12905                           ;Dimmer_B1.c: 643: DimmerLights->Loop = 1;
 12906  0BC0  086F               	movf	_DimmerLights,w
 12907  0BC1  3E0A               	addlw	10
 12908  0BC2  0086               	movwf	6
 12909  0BC3  3001               	movlw	1	; select bank2/3
 12910  0BC4  0087               	movwf	7
 12911  0BC5  1781               	bsf	1,7
 12912                           
 12913                           ;Dimmer_B1.c: 644: setLED(lights, 0);
 12914  0BC6  01A2               	clrf	setLED@command
 12915  0BC7  0865               	movf	setDimmerLights@lights,w
 12916  0BC8  3191  21F2  318B   	fcall	_setLED
 12917                           
 12918                           ;Dimmer_B1.c: 645: ;;
 12919                           ;Dimmer_B1.c: 646: setDimmerLights_Line(lights);
 12920  0BCB  0020               	movlb	0	; select bank0
 12921  0BCC  0865               	movf	setDimmerLights@lights,w
 12922  0BCD  319C  246F  318B   	fcall	_setDimmerLights_Line
 12923                           
 12924                           ;Dimmer_B1.c: 647: DimmerLights->StatusFlag = 1;
 12925  0BD0  0020               	movlb	0	; select bank0
 12926  0BD1  0A6F               	incf	_DimmerLights,w
 12927  0BD2  0086               	movwf	6
 12928  0BD3  3001               	movlw	1	; select bank2/3
 12929  0BD4  0087               	movwf	7
 12930  0BD5  1501               	bsf	1,2
 12931                           
 12932                           ;Dimmer_B1.c: 654: DimmerLights->DimmingValue = ((char)(65*0.8));
 12933  0BD6  3034               	movlw	52
 12934  0BD7  00E3               	movwf	??_setDimmerLights
 12935  0BD8  086F               	movf	_DimmerLights,w
 12936  0BD9  3E04               	addlw	4
 12937  0BDA  0086               	movwf	6
 12938  0BDB  3001               	movlw	1	; select bank2/3
 12939  0BDC  0087               	movwf	7
 12940  0BDD  0863               	movf	??_setDimmerLights,w
 12941  0BDE  0081               	movwf	1
 12942                           
 12943                           ;Dimmer_B1.c: 655: product->Data[(20 + lights)]=setPercentValue(((char)(65*0.8)));
 12944  0BDF  3034               	movlw	52
 12945  0BE0  3189  21F1  318B   	fcall	_setPercentValue
 12946  0BE3  0020               	movlb	0	; select bank0
 12947  0BE4  00E3               	movwf	??_setDimmerLights
 12948  0BE5  0865               	movf	setDimmerLights@lights,w
 12949  0BE6  3E14               	addlw	20
 12950  0BE7  076E               	addwf	_product,w
 12951  0BE8  00E4               	movwf	??_setDimmerLights+1
 12952  0BE9  0864               	movf	??_setDimmerLights+1,w
 12953  0BEA  0086               	movwf	6
 12954  0BEB  3002               	movlw	2	; select bank4/5
 12955  0BEC  0087               	movwf	7
 12956  0BED  0863               	movf	??_setDimmerLights,w
 12957  0BEE  0081               	movwf	1
 12958  0BEF  2C18               	goto	l6526
 12959  0BF0                     l6514:	
 12960                           ;Dimmer_B1.c: 665: } else {
 12961                           
 12962                           ;Dimmer_B1.c: 663: DimmerLights->DimmingTimeValue = 7;
 12963                           
 12964                           
 12965                           ;Dimmer_B1.c: 666: DimmerLights->StatusFlag = 0;
 12966  0BF0  0A6F               	incf	_DimmerLights,w
 12967  0BF1  0086               	movwf	6
 12968  0BF2  3001               	movlw	1	; select bank2/3
 12969  0BF3  0087               	movwf	7
 12970  0BF4  1101               	bcf	1,2
 12971                           
 12972                           ;Dimmer_B1.c: 667: DimmerLights->Loop = 0;
 12973  0BF5  086F               	movf	_DimmerLights,w
 12974  0BF6  3E0A               	addlw	10
 12975  0BF7  0086               	movwf	6
 12976  0BF8  3001               	movlw	1	; select bank2/3
 12977  0BF9  0087               	movwf	7
 12978  0BFA  1381               	bcf	1,7
 12979                           
 12980                           ;Dimmer_B1.c: 668: setLED(lights, 1);
 12981  0BFB  01A2               	clrf	setLED@command
 12982  0BFC  0AA2               	incf	setLED@command,f
 12983  0BFD  0865               	movf	setDimmerLights@lights,w
 12984  0BFE  3191  21F2  318B   	fcall	_setLED
 12985                           
 12986                           ;Dimmer_B1.c: 669: ;;
 12987                           ;Dimmer_B1.c: 676: DimmerLights->MosfetClose = 1;
 12988  0C01  0020               	movlb	0	; select bank0
 12989  0C02  086F               	movf	_DimmerLights,w
 12990  0C03  3E0A               	addlw	10
 12991  0C04  0086               	movwf	6
 12992  0C05  3001               	movlw	1	; select bank2/3
 12993  0C06  0087               	movwf	7
 12994  0C07  1681               	bsf	1,5
 12995                           
 12996                           ;Dimmer_B1.c: 679: DimmerLights->AdjFlag = 0;
 12997  0C08  0A6F               	incf	_DimmerLights,w
 12998  0C09  0086               	movwf	6
 12999  0C0A  3001               	movlw	1	; select bank2/3
 13000  0C0B  0087               	movwf	7
 13001  0C0C  1301               	bcf	1,6
 13002                           
 13003                           ;Dimmer_B1.c: 680: DimmerLights->AdjStatus = 0;
 13004  0C0D  0A6F               	incf	_DimmerLights,w
 13005  0C0E  0086               	movwf	6
 13006  0C0F  3001               	movlw	1	; select bank2/3
 13007  0C10  0087               	movwf	7
 13008  0C11  1381               	bcf	1,7
 13009                           
 13010                           ;Dimmer_B1.c: 681: DimmerLights->AdjRF = 0;
 13011  0C12  086F               	movf	_DimmerLights,w
 13012  0C13  3E02               	addlw	2
 13013  0C14  0086               	movwf	6
 13014  0C15  3001               	movlw	1	; select bank2/3
 13015  0C16  0087               	movwf	7
 13016  0C17  1001               	bcf	1,0
 13017  0C18                     l6526:	
 13018                           
 13019                           ;Dimmer_B1.c: 682: DimmerLights->DimmingTimeValue = 7;
 13020  0C18  3007               	movlw	7
 13021  0C19  00E3               	movwf	??_setDimmerLights
 13022  0C1A  086F               	movf	_DimmerLights,w
 13023  0C1B  3E08               	addlw	8
 13024  0C1C  0086               	movwf	6
 13025  0C1D  3001               	movlw	1	; select bank2/3
 13026  0C1E  0087               	movwf	7
 13027  0C1F  0863               	movf	??_setDimmerLights,w
 13028  0C20  0081               	movwf	1
 13029                           
 13030                           ;Dimmer_B1.c: 684: }
 13031                           ;Dimmer_B1.c: 685: setRF_DimmerLights(lights, status);
 13032  0C21  0862               	movf	setDimmerLights@status,w
 13033  0C22  00E3               	movwf	??_setDimmerLights
 13034  0C23  0863               	movf	??_setDimmerLights,w
 13035  0C24  00A0               	movwf	setRF_DimmerLights@on
 13036  0C25  0865               	movf	setDimmerLights@lights,w
 13037  0C26  3197  2747  318B   	fcall	_setRF_DimmerLights
 13038                           
 13039                           ;Dimmer_B1.c: 686: setTxData();
 13040  0C29  3187  272C         	fcall	_setTxData
 13041  0C2B  0008               	return
 13042  0C2C                     __end_of_setDimmerLights:	
 13043                           
 13044                           	psect	text77
 13045  072C                     __ptext77:	
 13046 ;; *************** function _setTxData *****************
 13047 ;; Defined at:
 13048 ;;		line 207 in file "../src/RF_Control_B1.c"
 13049 ;; Parameters:    Size  Location     Type
 13050 ;;		None
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;  i               1    0        unsigned char 
 13053 ;; Return value:  Size  Location     Type
 13054 ;;		None               void
 13055 ;; Registers used:
 13056 ;;		wreg, fsr1l, fsr1h
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13066 ;;Total ram usage:        1 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    5
 13069 ;; This function calls:
 13070 ;;		Nothing
 13071 ;; This function is called by:
 13072 ;;		_setDimmerLights
 13073 ;;		_setDimmerLights_Adj
 13074 ;;		_getRxData
 13075 ;;		_setControl_Lights_Table
 13076 ;;		_setRFSW_Control
 13077 ;;		_setRFSW_AdjControl
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           
 13082                           ;psect for function _setTxData
 13083  072C                     _setTxData:	
 13084                           
 13085                           ;RF_Control_B1.c: 208: char i;
 13086                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 13087                           
 13088                           ;incstack = 0
 13089                           ; Regs used in _setTxData: [wregfsr1]
 13090  072C  0021               	movlb	1	; select bank1
 13091  072D  1C3A               	btfss	_RF1^(0+128),0
 13092  072E  0008               	return
 13093                           
 13094                           ;RF_Control_B1.c: 211: if (RF1.TransceiveGO == 0) {
 13095  072F  193A               	btfsc	_RF1^(0+128),2
 13096  0730  0008               	return
 13097                           
 13098                           ;RF_Control_B1.c: 212: RF1.TransceiveGO = 1;
 13099  0731  153A               	bsf	_RF1^(0+128),2
 13100                           
 13101                           ;RF_Control_B1.c: 213: RF1.RunTime = 20;
 13102  0732  3014               	movlw	20
 13103  0733  00C1               	movwf	(_RF1^(0+128)+7)
 13104  0734  3000               	movlw	0
 13105  0735  00C2               	movwf	(_RF1^(0+128)+8)
 13106                           
 13107                           ;RF_Control_B1.c: 225: RF_Data[0] = 0x63;
 13108  0736  3063               	movlw	99
 13109  0737  0020               	movlb	0	; select bank0
 13110  0738  00A0               	movwf	??_setTxData
 13111  0739  0820               	movf	??_setTxData,w
 13112  073A  0022               	movlb	2	; select bank2
 13113  073B  00A0               	movwf	_RF_Data^(0+256)
 13114                           
 13115                           ;RF_Control_B1.c: 226: RF_Data[1] = 0x02;
 13116  073C  3002               	movlw	2
 13117  073D  0020               	movlb	0	; select bank0
 13118  073E  00A0               	movwf	??_setTxData
 13119  073F  0820               	movf	??_setTxData,w
 13120  0740  0022               	movlb	2	; select bank2
 13121  0741  00A1               	movwf	(_RF_Data^(0+256)+1)
 13122                           
 13123                           ;RF_Control_B1.c: 228: RF_Data[2] = product->Data[2];
 13124  0742  0020               	movlb	0	; select bank0
 13125  0743  086E               	movf	_product,w
 13126  0744  0086               	movwf	6
 13127  0745  3002               	movlw	2	; select bank4/5
 13128  0746  0087               	movwf	7
 13129  0747  3002               	movlw	2	; select bank4/5
 13130  0748  3F42               	moviw [2]fsr1
 13131  0749  0022               	movlb	2	; select bank2
 13132  074A  00A2               	movwf	(_RF_Data^(0+256)+2)
 13133                           
 13134                           ;RF_Control_B1.c: 229: RF_Data[3] = product->Data[3];
 13135  074B  0020               	movlb	0	; select bank0
 13136  074C  086E               	movf	_product,w
 13137  074D  0086               	movwf	6
 13138  074E  3002               	movlw	2	; select bank4/5
 13139  074F  0087               	movwf	7
 13140  0750  3002               	movlw	2	; select bank4/5
 13141  0751  3F43               	moviw [3]fsr1
 13142  0752  0022               	movlb	2	; select bank2
 13143  0753  00A3               	movwf	(_RF_Data^(0+256)+3)
 13144                           
 13145                           ;RF_Control_B1.c: 230: RF_Data[4] = product->Data[4];
 13146  0754  0020               	movlb	0	; select bank0
 13147  0755  086E               	movf	_product,w
 13148  0756  0086               	movwf	6
 13149  0757  3002               	movlw	2	; select bank4/5
 13150  0758  0087               	movwf	7
 13151  0759  3002               	movlw	2	; select bank4/5
 13152  075A  3F44               	moviw [4]fsr1
 13153  075B  0022               	movlb	2	; select bank2
 13154  075C  00A4               	movwf	(_RF_Data^(0+256)+4)
 13155                           
 13156                           ;RF_Control_B1.c: 231: RF_Data[5] = product->Data[5];
 13157  075D  0020               	movlb	0	; select bank0
 13158  075E  086E               	movf	_product,w
 13159  075F  0086               	movwf	6
 13160  0760  3002               	movlw	2	; select bank4/5
 13161  0761  0087               	movwf	7
 13162  0762  3002               	movlw	2	; select bank4/5
 13163  0763  3F45               	moviw [5]fsr1
 13164  0764  0022               	movlb	2	; select bank2
 13165  0765  00A5               	movwf	(_RF_Data^(0+256)+5)
 13166                           
 13167                           ;RF_Control_B1.c: 232: RF_Data[6] = product->Data[6];
 13168  0766  0020               	movlb	0	; select bank0
 13169  0767  086E               	movf	_product,w
 13170  0768  0086               	movwf	6
 13171  0769  3002               	movlw	2	; select bank4/5
 13172  076A  0087               	movwf	7
 13173  076B  3002               	movlw	2	; select bank4/5
 13174  076C  3F46               	moviw [6]fsr1
 13175  076D  0022               	movlb	2	; select bank2
 13176  076E  00A6               	movwf	(_RF_Data^(0+256)+6)
 13177                           
 13178                           ;RF_Control_B1.c: 233: RF_Data[7] = product->Data[7];
 13179  076F  0020               	movlb	0	; select bank0
 13180  0770  086E               	movf	_product,w
 13181  0771  0086               	movwf	6
 13182  0772  3002               	movlw	2	; select bank4/5
 13183  0773  0087               	movwf	7
 13184  0774  3002               	movlw	2	; select bank4/5
 13185  0775  3F47               	moviw [7]fsr1
 13186  0776  0022               	movlb	2	; select bank2
 13187  0777  00A7               	movwf	(_RF_Data^(0+256)+7)
 13188                           
 13189                           ;RF_Control_B1.c: 234: RF_Data[8] = product->Data[8];
 13190  0778  0020               	movlb	0	; select bank0
 13191  0779  086E               	movf	_product,w
 13192  077A  0086               	movwf	6
 13193  077B  3002               	movlw	2	; select bank4/5
 13194  077C  0087               	movwf	7
 13195  077D  3002               	movlw	2	; select bank4/5
 13196  077E  3F48               	moviw [8]fsr1
 13197  077F  0022               	movlb	2	; select bank2
 13198  0780  00A8               	movwf	(_RF_Data^(0+256)+8)
 13199                           
 13200                           ;RF_Control_B1.c: 235: RF_Data[9] = product->Data[9];
 13201  0781  0020               	movlb	0	; select bank0
 13202  0782  086E               	movf	_product,w
 13203  0783  0086               	movwf	6
 13204  0784  3002               	movlw	2	; select bank4/5
 13205  0785  0087               	movwf	7
 13206  0786  3002               	movlw	2	; select bank4/5
 13207  0787  3F49               	moviw [9]fsr1
 13208  0788  0022               	movlb	2	; select bank2
 13209  0789  00A9               	movwf	(_RF_Data^(0+256)+9)
 13210                           
 13211                           ;RF_Control_B1.c: 236: RF_Data[10] = product->Data[10];
 13212  078A  0020               	movlb	0	; select bank0
 13213  078B  086E               	movf	_product,w
 13214  078C  0086               	movwf	6
 13215  078D  3002               	movlw	2	; select bank4/5
 13216  078E  0087               	movwf	7
 13217  078F  3002               	movlw	2	; select bank4/5
 13218  0790  3F4A               	moviw [10]fsr1
 13219  0791  0022               	movlb	2	; select bank2
 13220  0792  00AA               	movwf	(_RF_Data^(0+256)+10)
 13221                           
 13222                           ;RF_Control_B1.c: 237: RF_Data[11] = product->Data[11];
 13223  0793  0020               	movlb	0	; select bank0
 13224  0794  086E               	movf	_product,w
 13225  0795  0086               	movwf	6
 13226  0796  3002               	movlw	2	; select bank4/5
 13227  0797  0087               	movwf	7
 13228  0798  3002               	movlw	2	; select bank4/5
 13229  0799  3F4B               	moviw [11]fsr1
 13230  079A  0022               	movlb	2	; select bank2
 13231  079B  00AB               	movwf	(_RF_Data^(0+256)+11)
 13232                           
 13233                           ;RF_Control_B1.c: 238: RF_Data[12] = product->Data[12];
 13234  079C  0020               	movlb	0	; select bank0
 13235  079D  086E               	movf	_product,w
 13236  079E  0086               	movwf	6
 13237  079F  3002               	movlw	2	; select bank4/5
 13238  07A0  0087               	movwf	7
 13239  07A1  3002               	movlw	2	; select bank4/5
 13240  07A2  3F4C               	moviw [12]fsr1
 13241  07A3  0022               	movlb	2	; select bank2
 13242  07A4  00AC               	movwf	(_RF_Data^(0+256)+12)
 13243                           
 13244                           ;RF_Control_B1.c: 239: RF_Data[13] = product->Data[13];
 13245  07A5  0020               	movlb	0	; select bank0
 13246  07A6  086E               	movf	_product,w
 13247  07A7  0086               	movwf	6
 13248  07A8  3002               	movlw	2	; select bank4/5
 13249  07A9  0087               	movwf	7
 13250  07AA  3002               	movlw	2	; select bank4/5
 13251  07AB  3F4D               	moviw [13]fsr1
 13252  07AC  0022               	movlb	2	; select bank2
 13253  07AD  00AD               	movwf	(_RF_Data^(0+256)+13)
 13254                           
 13255                           ;RF_Control_B1.c: 240: RF_Data[14] = product->Data[14];
 13256  07AE  0020               	movlb	0	; select bank0
 13257  07AF  086E               	movf	_product,w
 13258  07B0  0086               	movwf	6
 13259  07B1  3002               	movlw	2	; select bank4/5
 13260  07B2  0087               	movwf	7
 13261  07B3  3002               	movlw	2	; select bank4/5
 13262  07B4  3F4E               	moviw [14]fsr1
 13263  07B5  0022               	movlb	2	; select bank2
 13264  07B6  00AE               	movwf	(_RF_Data^(0+256)+14)
 13265                           
 13266                           ;RF_Control_B1.c: 241: RF_Data[15] = product->Data[15];
 13267  07B7  0020               	movlb	0	; select bank0
 13268  07B8  086E               	movf	_product,w
 13269  07B9  0086               	movwf	6
 13270  07BA  3002               	movlw	2	; select bank4/5
 13271  07BB  0087               	movwf	7
 13272  07BC  3002               	movlw	2	; select bank4/5
 13273  07BD  3F4F               	moviw [15]fsr1
 13274  07BE  0022               	movlb	2	; select bank2
 13275  07BF  00AF               	movwf	(_RF_Data^(0+256)+15)
 13276                           
 13277                           ;RF_Control_B1.c: 242: RF_Data[16] = product->Data[16];
 13278  07C0  0020               	movlb	0	; select bank0
 13279  07C1  086E               	movf	_product,w
 13280  07C2  0086               	movwf	6
 13281  07C3  3002               	movlw	2	; select bank4/5
 13282  07C4  0087               	movwf	7
 13283  07C5  3002               	movlw	2	; select bank4/5
 13284  07C6  3F50               	moviw [16]fsr1
 13285  07C7  0022               	movlb	2	; select bank2
 13286  07C8  00B0               	movwf	(_RF_Data^(0+256)+16)
 13287                           
 13288                           ;RF_Control_B1.c: 243: RF_Data[17] = product->Data[17];
 13289  07C9  0020               	movlb	0	; select bank0
 13290  07CA  086E               	movf	_product,w
 13291  07CB  0086               	movwf	6
 13292  07CC  3002               	movlw	2	; select bank4/5
 13293  07CD  0087               	movwf	7
 13294  07CE  3002               	movlw	2	; select bank4/5
 13295  07CF  3F51               	moviw [17]fsr1
 13296  07D0  0022               	movlb	2	; select bank2
 13297  07D1  00B1               	movwf	(_RF_Data^(0+256)+17)
 13298                           
 13299                           ;RF_Control_B1.c: 244: RF_Data[18] = product->Data[18];
 13300  07D2  0020               	movlb	0	; select bank0
 13301  07D3  086E               	movf	_product,w
 13302  07D4  0086               	movwf	6
 13303  07D5  3002               	movlw	2	; select bank4/5
 13304  07D6  0087               	movwf	7
 13305  07D7  3002               	movlw	2	; select bank4/5
 13306  07D8  3F52               	moviw [18]fsr1
 13307  07D9  0022               	movlb	2	; select bank2
 13308  07DA  00B2               	movwf	(_RF_Data^(0+256)+18)
 13309                           
 13310                           ;RF_Control_B1.c: 245: RF_Data[19] = product->Data[19];
 13311  07DB  0020               	movlb	0	; select bank0
 13312  07DC  086E               	movf	_product,w
 13313  07DD  0086               	movwf	6
 13314  07DE  3002               	movlw	2	; select bank4/5
 13315  07DF  0087               	movwf	7
 13316  07E0  3002               	movlw	2	; select bank4/5
 13317  07E1  3F53               	moviw [19]fsr1
 13318  07E2  0022               	movlb	2	; select bank2
 13319  07E3  00B3               	movwf	(_RF_Data^(0+256)+19)
 13320                           
 13321                           ;RF_Control_B1.c: 246: RF_Data[20] = 209;
 13322  07E4  30D1               	movlw	209
 13323  07E5  0020               	movlb	0	; select bank0
 13324  07E6  00A0               	movwf	??_setTxData
 13325  07E7  0820               	movf	??_setTxData,w
 13326  07E8  0022               	movlb	2	; select bank2
 13327  07E9  00B4               	movwf	(_RF_Data^(0+256)+20)
 13328  07EA  0008               	return
 13329  07EB                     __end_of_setTxData:	
 13330                           
 13331                           	psect	text78
 13332  1747                     __ptext78:	
 13333 ;; *************** function _setRF_DimmerLights *****************
 13334 ;; Defined at:
 13335 ;;		line 484 in file "../src/RF_Control_B1.c"
 13336 ;; Parameters:    Size  Location     Type
 13337 ;;  lights          1    wreg     unsigned char 
 13338 ;;  on              1    0[BANK0 ] unsigned char 
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;  lights          1    4[BANK0 ] unsigned char 
 13341 ;;  status          1    3[BANK0 ] unsigned char 
 13342 ;; Return value:  Size  Location     Type
 13343 ;;		None               void
 13344 ;; Registers used:
 13345 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13346 ;; Tracked objects:
 13347 ;;		On entry : 0/0
 13348 ;;		On exit  : 0/0
 13349 ;;		Unchanged: 0/0
 13350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13351 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13352 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13353 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13354 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13355 ;;Total ram usage:        5 bytes
 13356 ;; Hardware stack levels used:    1
 13357 ;; Hardware stack levels required when called:    5
 13358 ;; This function calls:
 13359 ;;		Nothing
 13360 ;; This function is called by:
 13361 ;;		_setDimmerLights
 13362 ;;		_setDimmerLights_Adj
 13363 ;;		_setRFSW_Control
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           
 13368                           ;psect for function _setRF_DimmerLights
 13369  1747                     _setRF_DimmerLights:	
 13370                           
 13371                           ;incstack = 0
 13372                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13373                           ;setRF_DimmerLights@lights stored from wreg
 13374  1747  0020               	movlb	0	; select bank0
 13375  1748  00A4               	movwf	setRF_DimmerLights@lights
 13376                           
 13377                           ;RF_Control_B1.c: 485: char status = 1;
 13378  1749  01A3               	clrf	setRF_DimmerLights@status
 13379  174A  0AA3               	incf	setRF_DimmerLights@status,f
 13380                           
 13381                           ;RF_Control_B1.c: 486: status <<= (lights - 1);
 13382  174B  0824               	movf	setRF_DimmerLights@lights,w
 13383  174C  3EFF               	addlw	-1
 13384  174D  0A89               	incf	9,f
 13385  174E  2F51               	goto	u5040
 13386  174F                     u5045:	
 13387  174F  1003               	clrc
 13388  1750  0DA3               	rlf	setRF_DimmerLights@status,f
 13389  1751                     u5040:	
 13390  1751  3EFF               	addlw	-1
 13391  1752  1D03               	skipz
 13392  1753  2F4F               	goto	u5045
 13393                           
 13394                           ;RF_Control_B1.c: 487: product->Data[11]=lights;
 13395  1754  0824               	movf	setRF_DimmerLights@lights,w
 13396  1755  00A1               	movwf	??_setRF_DimmerLights
 13397  1756  086E               	movf	_product,w
 13398  1757  3E0B               	addlw	11
 13399  1758  0086               	movwf	6
 13400  1759  3002               	movlw	2	; select bank4/5
 13401  175A  0087               	movwf	7
 13402  175B  0821               	movf	??_setRF_DimmerLights,w
 13403  175C  0081               	movwf	1
 13404                           
 13405                           ;RF_Control_B1.c: 495: product->Data[9]=product->Data[20 + lights];
 13406  175D  0824               	movf	setRF_DimmerLights@lights,w
 13407  175E  3E14               	addlw	20
 13408  175F  076E               	addwf	_product,w
 13409  1760  00A1               	movwf	??_setRF_DimmerLights
 13410  1761  0821               	movf	??_setRF_DimmerLights,w
 13411  1762  0086               	movwf	6
 13412  1763  3002               	movlw	2	; select bank4/5
 13413  1764  0087               	movwf	7
 13414  1765  0801               	movf	1,w
 13415  1766  00A2               	movwf	??_setRF_DimmerLights+1
 13416  1767  086E               	movf	_product,w
 13417  1768  3E09               	addlw	9
 13418  1769  0086               	movwf	6
 13419  176A  3002               	movlw	2	; select bank4/5
 13420  176B  0087               	movwf	7
 13421  176C  0822               	movf	??_setRF_DimmerLights+1,w
 13422  176D  0081               	movwf	1
 13423                           
 13424                           ;RF_Control_B1.c: 496: product->Data[17]=product->Data[26 + lights];
 13425  176E  0824               	movf	setRF_DimmerLights@lights,w
 13426  176F  3E1A               	addlw	26
 13427  1770  076E               	addwf	_product,w
 13428  1771  00A1               	movwf	??_setRF_DimmerLights
 13429  1772  0821               	movf	??_setRF_DimmerLights,w
 13430  1773  0086               	movwf	6
 13431  1774  3002               	movlw	2	; select bank4/5
 13432  1775  0087               	movwf	7
 13433  1776  0801               	movf	1,w
 13434  1777  00A2               	movwf	??_setRF_DimmerLights+1
 13435  1778  086E               	movf	_product,w
 13436  1779  3E11               	addlw	17
 13437  177A  0086               	movwf	6
 13438  177B  3002               	movlw	2	; select bank4/5
 13439  177C  0087               	movwf	7
 13440  177D  0822               	movf	??_setRF_DimmerLights+1,w
 13441  177E  0081               	movwf	1
 13442                           
 13443                           ;RF_Control_B1.c: 497: if (on == 1) {
 13444  177F  0820               	movf	setRF_DimmerLights@on,w
 13445  1780  3A01               	xorlw	1
 13446  1781  1D03               	skipz
 13447  1782  2F93               	goto	l6008
 13448                           
 13449                           ;RF_Control_B1.c: 498: product->Data[15]=(product->Data[15] | status);
 13450  1783  086E               	movf	_product,w
 13451  1784  3E0F               	addlw	15
 13452  1785  0086               	movwf	6
 13453  1786  3002               	movlw	2	; select bank4/5
 13454  1787  0087               	movwf	7
 13455  1788  0801               	movf	1,w
 13456  1789  0423               	iorwf	setRF_DimmerLights@status,w
 13457  178A  00A1               	movwf	??_setRF_DimmerLights
 13458  178B  086E               	movf	_product,w
 13459  178C  3E0F               	addlw	15
 13460  178D  0086               	movwf	6
 13461  178E  3002               	movlw	2	; select bank4/5
 13462  178F  0087               	movwf	7
 13463  1790  0821               	movf	??_setRF_DimmerLights,w
 13464  1791  0081               	movwf	1
 13465                           
 13466                           ;RF_Control_B1.c: 499: } else {
 13467  1792  0008               	return
 13468  1793                     l6008:	
 13469                           
 13470                           ;RF_Control_B1.c: 500: product->Data[15]=(product->Data[15]&(~status));
 13471  1793  086E               	movf	_product,w
 13472  1794  3E0F               	addlw	15
 13473  1795  0086               	movwf	6
 13474  1796  3002               	movlw	2	; select bank4/5
 13475  1797  0087               	movwf	7
 13476  1798  0923               	comf	setRF_DimmerLights@status,w
 13477  1799  0501               	andwf	1,w
 13478  179A  00A1               	movwf	??_setRF_DimmerLights
 13479  179B  086E               	movf	_product,w
 13480  179C  3E0F               	addlw	15
 13481  179D  0086               	movwf	6
 13482  179E  3002               	movlw	2	; select bank4/5
 13483  179F  0087               	movwf	7
 13484  17A0  0821               	movf	??_setRF_DimmerLights,w
 13485  17A1  0081               	movwf	1
 13486  17A2  0008               	return
 13487  17A3                     __end_of_setRF_DimmerLights:	
 13488                           
 13489                           	psect	text79
 13490  09F1                     __ptext79:	
 13491 ;; *************** function _setPercentValue *****************
 13492 ;; Defined at:
 13493 ;;		line 898 in file "../src/Dimmer_B1.c"
 13494 ;; Parameters:    Size  Location     Type
 13495 ;;  value           1    wreg     unsigned char 
 13496 ;; Auto vars:     Size  Location     Type
 13497 ;;  value           1   62[BANK0 ] unsigned char 
 13498 ;;  i               3   63[BANK0 ] float 
 13499 ;; Return value:  Size  Location     Type
 13500 ;;                  1    wreg      unsigned char 
 13501 ;; Registers used:
 13502 ;;		wreg, status,2, status,0, pclath, cstack
 13503 ;; Tracked objects:
 13504 ;;		On entry : 0/0
 13505 ;;		On exit  : 0/0
 13506 ;;		Unchanged: 0/0
 13507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13510 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13511 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;Total ram usage:        6 bytes
 13513 ;; Hardware stack levels used:    1
 13514 ;; Hardware stack levels required when called:    7
 13515 ;; This function calls:
 13516 ;;		___awtoft
 13517 ;;		___ftadd
 13518 ;;		___ftdiv
 13519 ;;		___ftneg
 13520 ;;		___fttol
 13521 ;; This function is called by:
 13522 ;;		_setDimmerLights
 13523 ;;		_setDimmerLights_Adj
 13524 ;;		_Flash_Memory_Initialization
 13525 ;; This function uses a non-reentrant model
 13526 ;;
 13527                           
 13528                           
 13529                           ;psect for function _setPercentValue
 13530  09F1                     _setPercentValue:	
 13531                           
 13532                           ;incstack = 0
 13533                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13534                           ;setPercentValue@value stored from wreg
 13535  09F1  0020               	movlb	0	; select bank0
 13536  09F2  00DE               	movwf	setPercentValue@value
 13537                           
 13538                           ;Dimmer_B1.c: 906: float i = ((char)(65*0.8)) - ((char)(15*0.8));
 13539  09F3  3000               	movlw	0
 13540  09F4  00DF               	movwf	setPercentValue@i
 13541  09F5  3020               	movlw	32
 13542  09F6  00E0               	movwf	setPercentValue@i+1
 13543  09F7  3042               	movlw	66
 13544  09F8  00E1               	movwf	setPercentValue@i+2
 13545                           
 13546                           ;Dimmer_B1.c: 907: i /= 100;
 13547  09F9  3000               	movlw	0
 13548  09FA  00AE               	movwf	___ftdiv@f2
 13549  09FB  30C8               	movlw	200
 13550  09FC  00AF               	movwf	___ftdiv@f2+1
 13551  09FD  3042               	movlw	66
 13552  09FE  00B0               	movwf	___ftdiv@f2+2
 13553  09FF  085F               	movf	setPercentValue@i,w
 13554  0A00  00B1               	movwf	___ftdiv@f1
 13555  0A01  0860               	movf	setPercentValue@i+1,w
 13556  0A02  00B2               	movwf	___ftdiv@f1+1
 13557  0A03  0861               	movf	setPercentValue@i+2,w
 13558  0A04  00B3               	movwf	___ftdiv@f1+2
 13559  0A05  318D  2543  3189   	fcall	___ftdiv
 13560  0A08  0020               	movlb	0	; select bank0
 13561  0A09  082E               	movf	?___ftdiv,w
 13562  0A0A  00DF               	movwf	setPercentValue@i
 13563  0A0B  082F               	movf	?___ftdiv+1,w
 13564  0A0C  00E0               	movwf	setPercentValue@i+1
 13565  0A0D  0830               	movf	?___ftdiv+2,w
 13566  0A0E  00E1               	movwf	setPercentValue@i+2
 13567                           
 13568                           ;Dimmer_B1.c: 909: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 13569  0A0F  085E               	movf	setPercentValue@value,w
 13570  0A10  00DC               	movwf	??_setPercentValue
 13571  0A11  01DD               	clrf	??_setPercentValue+1
 13572  0A12  09DC               	comf	??_setPercentValue,f
 13573  0A13  09DD               	comf	??_setPercentValue+1,f
 13574  0A14  0ADC               	incf	??_setPercentValue,f
 13575  0A15  1903               	skipnz
 13576  0A16  0ADD               	incf	??_setPercentValue+1,f
 13577  0A17  085C               	movf	??_setPercentValue,w
 13578  0A18  3E34               	addlw	52
 13579  0A19  00A8               	movwf	___awtoft@c
 13580  0A1A  3000               	movlw	0
 13581  0A1B  3D5D               	addwfc	??_setPercentValue+1,w
 13582  0A1C  00A9               	movwf	___awtoft@c+1
 13583  0A1D  319E  26FC  3189   	fcall	___awtoft
 13584  0A20  0020               	movlb	0	; select bank0
 13585  0A21  0828               	movf	?___awtoft,w
 13586  0A22  00B1               	movwf	___ftdiv@f1
 13587  0A23  0829               	movf	?___awtoft+1,w
 13588  0A24  00B2               	movwf	___ftdiv@f1+1
 13589  0A25  082A               	movf	?___awtoft+2,w
 13590  0A26  00B3               	movwf	___ftdiv@f1+2
 13591  0A27  085F               	movf	setPercentValue@i,w
 13592  0A28  00AE               	movwf	___ftdiv@f2
 13593  0A29  0860               	movf	setPercentValue@i+1,w
 13594  0A2A  00AF               	movwf	___ftdiv@f2+1
 13595  0A2B  0861               	movf	setPercentValue@i+2,w
 13596  0A2C  00B0               	movwf	___ftdiv@f2+2
 13597  0A2D  318D  2543  3189   	fcall	___ftdiv
 13598  0A30  0020               	movlb	0	; select bank0
 13599  0A31  082E               	movf	?___ftdiv,w
 13600  0A32  00BE               	movwf	___ftneg@f1
 13601  0A33  082F               	movf	?___ftdiv+1,w
 13602  0A34  00BF               	movwf	___ftneg@f1+1
 13603  0A35  0830               	movf	?___ftdiv+2,w
 13604  0A36  00C0               	movwf	___ftneg@f1+2
 13605  0A37  319B  23DC  3189   	fcall	___ftneg
 13606  0A3A  0020               	movlb	0	; select bank0
 13607  0A3B  083E               	movf	?___ftneg,w
 13608  0A3C  00C4               	movwf	___ftadd@f2
 13609  0A3D  083F               	movf	?___ftneg+1,w
 13610  0A3E  00C5               	movwf	___ftadd@f2+1
 13611  0A3F  0840               	movf	?___ftneg+2,w
 13612  0A40  00C6               	movwf	___ftadd@f2+2
 13613  0A41  3000               	movlw	0
 13614  0A42  00C1               	movwf	___ftadd@f1
 13615  0A43  30C8               	movlw	200
 13616  0A44  00C2               	movwf	___ftadd@f1+1
 13617  0A45  3042               	movlw	66
 13618  0A46  00C3               	movwf	___ftadd@f1+2
 13619  0A47  3184  247B  3189   	fcall	___ftadd
 13620  0A4A  0020               	movlb	0	; select bank0
 13621  0A4B  0841               	movf	?___ftadd,w
 13622  0A4C  00CE               	movwf	___fttol@f1
 13623  0A4D  0842               	movf	?___ftadd+1,w
 13624  0A4E  00CF               	movwf	___fttol@f1+1
 13625  0A4F  0843               	movf	?___ftadd+2,w
 13626  0A50  00D0               	movwf	___fttol@f1+2
 13627  0A51  318C  242C         	fcall	___fttol
 13628  0A53  0020               	movlb	0	; select bank0
 13629  0A54  084E               	movf	?___fttol,w
 13630  0A55  0008               	return
 13631  0A56                     __end_of_setPercentValue:	
 13632                           
 13633                           	psect	text80
 13634  0C2C                     __ptext80:	
 13635 ;; *************** function ___fttol *****************
 13636 ;; Defined at:
 13637 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13638 ;; Parameters:    Size  Location     Type
 13639 ;;  f1              3   46[BANK0 ] float 
 13640 ;; Auto vars:     Size  Location     Type
 13641 ;;  lval            4   55[BANK0 ] unsigned long 
 13642 ;;  exp1            1   59[BANK0 ] unsigned char 
 13643 ;;  sign1           1   54[BANK0 ] unsigned char 
 13644 ;; Return value:  Size  Location     Type
 13645 ;;                  4   46[BANK0 ] long 
 13646 ;; Registers used:
 13647 ;;		wreg, status,2, status,0
 13648 ;; Tracked objects:
 13649 ;;		On entry : 0/0
 13650 ;;		On exit  : 0/0
 13651 ;;		Unchanged: 0/0
 13652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13653 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13656 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;Total ram usage:       14 bytes
 13658 ;; Hardware stack levels used:    1
 13659 ;; Hardware stack levels required when called:    5
 13660 ;; This function calls:
 13661 ;;		Nothing
 13662 ;; This function is called by:
 13663 ;;		_getPercentValue
 13664 ;;		_setPercentValue
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           
 13669                           ;psect for function ___fttol
 13670  0C2C                     ___fttol:	
 13671                           
 13672                           ;incstack = 0
 13673                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13674  0C2C  0020               	movlb	0	; select bank0
 13675  0C2D  084E               	movf	___fttol@f1,w
 13676  0C2E  00D2               	movwf	??___fttol
 13677  0C2F  084F               	movf	___fttol@f1+1,w
 13678  0C30  00D3               	movwf	??___fttol+1
 13679  0C31  0850               	movf	___fttol@f1+2,w
 13680  0C32  00D4               	movwf	??___fttol+2
 13681  0C33  1003               	clrc
 13682  0C34  0D53               	rlf	??___fttol+1,w
 13683  0C35  0D54               	rlf	??___fttol+2,w
 13684  0C36  00D5               	movwf	??___fttol+3
 13685  0C37  0855               	movf	??___fttol+3,w
 13686  0C38  00DB               	movwf	___fttol@exp1
 13687  0C39  08DB               	movf	___fttol@exp1,f
 13688  0C3A  1D03               	skipz
 13689  0C3B  2C45               	goto	l5764
 13690  0C3C  3000               	movlw	0
 13691  0C3D  00D1               	movwf	?___fttol+3
 13692  0C3E  3000               	movlw	0
 13693  0C3F  00D0               	movwf	?___fttol+2
 13694  0C40  3000               	movlw	0
 13695  0C41  00CF               	movwf	?___fttol+1
 13696  0C42  3000               	movlw	0
 13697  0C43  00CE               	movwf	?___fttol
 13698  0C44  0008               	return
 13699  0C45                     l5764:	
 13700  0C45  084E               	movf	___fttol@f1,w
 13701  0C46  00D2               	movwf	??___fttol
 13702  0C47  084F               	movf	___fttol@f1+1,w
 13703  0C48  00D3               	movwf	??___fttol+1
 13704  0C49  0850               	movf	___fttol@f1+2,w
 13705  0C4A  00D4               	movwf	??___fttol+2
 13706  0C4B  3017               	movlw	23
 13707  0C4C                     u4675:	
 13708  0C4C  36D4               	lsrf	??___fttol+2,f
 13709  0C4D  0CD3               	rrf	??___fttol+1,f
 13710  0C4E  0CD2               	rrf	??___fttol,f
 13711  0C4F  0B89               	decfsz	9,f
 13712  0C50  2C4C               	goto	u4675
 13713  0C51  0852               	movf	??___fttol,w
 13714  0C52  00D5               	movwf	??___fttol+3
 13715  0C53  0855               	movf	??___fttol+3,w
 13716  0C54  00D6               	movwf	___fttol@sign1
 13717  0C55  17CF               	bsf	___fttol@f1+1,7
 13718  0C56  30FF               	movlw	255
 13719  0C57  05CE               	andwf	___fttol@f1,f
 13720  0C58  30FF               	movlw	255
 13721  0C59  05CF               	andwf	___fttol@f1+1,f
 13722  0C5A  3000               	movlw	0
 13723  0C5B  05D0               	andwf	___fttol@f1+2,f
 13724  0C5C  084E               	movf	___fttol@f1,w
 13725  0C5D  00D7               	movwf	___fttol@lval
 13726  0C5E  084F               	movf	___fttol@f1+1,w
 13727  0C5F  00D8               	movwf	___fttol@lval+1
 13728  0C60  0850               	movf	___fttol@f1+2,w
 13729  0C61  00D9               	movwf	___fttol@lval+2
 13730  0C62  01DA               	clrf	___fttol@lval+3
 13731  0C63  308E               	movlw	142
 13732  0C64  02DB               	subwf	___fttol@exp1,f
 13733  0C65  1FDB               	btfss	___fttol@exp1,7
 13734  0C66  2C83               	goto	l5784
 13735  0C67  085B               	movf	___fttol@exp1,w
 13736  0C68  3A80               	xorlw	128
 13737  0C69  3E8F               	addlw	143
 13738  0C6A  1803               	skipnc
 13739  0C6B  2C75               	goto	l5782
 13740  0C6C  3000               	movlw	0
 13741  0C6D  00D1               	movwf	?___fttol+3
 13742  0C6E  3000               	movlw	0
 13743  0C6F  00D0               	movwf	?___fttol+2
 13744  0C70  3000               	movlw	0
 13745  0C71  00CF               	movwf	?___fttol+1
 13746  0C72  3000               	movlw	0
 13747  0C73  00CE               	movwf	?___fttol
 13748  0C74  0008               	return
 13749  0C75                     l5782:	
 13750  0C75  3001               	movlw	1
 13751  0C76                     u4705:	
 13752  0C76  36DA               	lsrf	___fttol@lval+3,f
 13753  0C77  0CD9               	rrf	___fttol@lval+2,f
 13754  0C78  0CD8               	rrf	___fttol@lval+1,f
 13755  0C79  0CD7               	rrf	___fttol@lval,f
 13756  0C7A  0B89               	decfsz	9,f
 13757  0C7B  2C76               	goto	u4705
 13758  0C7C  3001               	movlw	1
 13759  0C7D  00D2               	movwf	??___fttol
 13760  0C7E  0852               	movf	??___fttol,w
 13761  0C7F  07DB               	addwf	___fttol@exp1,f
 13762  0C80  1903               	btfsc	3,2
 13763  0C81  2C9C               	goto	l5794
 13764  0C82  2C75               	goto	l5782
 13765  0C83                     l5784:	
 13766  0C83  3018               	movlw	24
 13767  0C84  025B               	subwf	___fttol@exp1,w
 13768  0C85  1C03               	skipc
 13769  0C86  2C99               	goto	l5792
 13770  0C87  3000               	movlw	0
 13771  0C88  00D1               	movwf	?___fttol+3
 13772  0C89  3000               	movlw	0
 13773  0C8A  00D0               	movwf	?___fttol+2
 13774  0C8B  3000               	movlw	0
 13775  0C8C  00CF               	movwf	?___fttol+1
 13776  0C8D  3000               	movlw	0
 13777  0C8E  00CE               	movwf	?___fttol
 13778  0C8F  0008               	return
 13779  0C90                     l5790:	
 13780  0C90  3001               	movlw	1
 13781  0C91                     u4735:	
 13782  0C91  35D7               	lslf	___fttol@lval,f
 13783  0C92  0DD8               	rlf	___fttol@lval+1,f
 13784  0C93  0DD9               	rlf	___fttol@lval+2,f
 13785  0C94  0DDA               	rlf	___fttol@lval+3,f
 13786  0C95  0B89               	decfsz	9,f
 13787  0C96  2C91               	goto	u4735
 13788  0C97  3001               	movlw	1
 13789  0C98  02DB               	subwf	___fttol@exp1,f
 13790  0C99                     l5792:	
 13791  0C99  08DB               	movf	___fttol@exp1,f
 13792  0C9A  1D03               	skipz
 13793  0C9B  2C90               	goto	l5790
 13794  0C9C                     l5794:	
 13795  0C9C  0856               	movf	___fttol@sign1,w
 13796  0C9D  1903               	btfsc	3,2
 13797  0C9E  2CAA               	goto	l5798
 13798  0C9F  09D7               	comf	___fttol@lval,f
 13799  0CA0  09D8               	comf	___fttol@lval+1,f
 13800  0CA1  09D9               	comf	___fttol@lval+2,f
 13801  0CA2  09DA               	comf	___fttol@lval+3,f
 13802  0CA3  0AD7               	incf	___fttol@lval,f
 13803  0CA4  1903               	skipnz
 13804  0CA5  0AD8               	incf	___fttol@lval+1,f
 13805  0CA6  1903               	skipnz
 13806  0CA7  0AD9               	incf	___fttol@lval+2,f
 13807  0CA8  1903               	skipnz
 13808  0CA9  0ADA               	incf	___fttol@lval+3,f
 13809  0CAA                     l5798:	
 13810  0CAA  085A               	movf	___fttol@lval+3,w
 13811  0CAB  00D1               	movwf	?___fttol+3
 13812  0CAC  0859               	movf	___fttol@lval+2,w
 13813  0CAD  00D0               	movwf	?___fttol+2
 13814  0CAE  0858               	movf	___fttol@lval+1,w
 13815  0CAF  00CF               	movwf	?___fttol+1
 13816  0CB0  0857               	movf	___fttol@lval,w
 13817  0CB1  00CE               	movwf	?___fttol
 13818  0CB2  0008               	return
 13819  0CB3                     __end_of___fttol:	
 13820                           
 13821                           	psect	text81
 13822  1BDC                     __ptext81:	
 13823 ;; *************** function ___ftneg *****************
 13824 ;; Defined at:
 13825 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13826 ;; Parameters:    Size  Location     Type
 13827 ;;  f1              3   30[BANK0 ] float 
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;		None
 13830 ;; Return value:  Size  Location     Type
 13831 ;;                  3   30[BANK0 ] float 
 13832 ;; Registers used:
 13833 ;;		wreg
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13839 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;Total ram usage:        3 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    5
 13846 ;; This function calls:
 13847 ;;		Nothing
 13848 ;; This function is called by:
 13849 ;;		_getPercentValue
 13850 ;;		_setPercentValue
 13851 ;; This function uses a non-reentrant model
 13852 ;;
 13853                           
 13854                           
 13855                           ;psect for function ___ftneg
 13856  1BDC                     ___ftneg:	
 13857                           
 13858                           ;incstack = 0
 13859                           ; Regs used in ___ftneg: [wreg]
 13860  1BDC  0020               	movlb	0	; select bank0
 13861  1BDD  0840               	movf	___ftneg@f1+2,w
 13862  1BDE  043F               	iorwf	___ftneg@f1+1,w
 13863  1BDF  043E               	iorwf	___ftneg@f1,w
 13864  1BE0  1903               	skipnz
 13865  1BE1  0008               	return
 13866  1BE2  3080               	movlw	128
 13867  1BE3  06C0               	xorwf	___ftneg@f1+2,f
 13868  1BE4  0008               	return
 13869  1BE5                     __end_of___ftneg:	
 13870                           
 13871                           	psect	text82
 13872  0D43                     __ptext82:	
 13873 ;; *************** function ___ftdiv *****************
 13874 ;; Defined at:
 13875 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13876 ;; Parameters:    Size  Location     Type
 13877 ;;  f2              3   14[BANK0 ] float 
 13878 ;;  f1              3   17[BANK0 ] float 
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;  f3              3   25[BANK0 ] float 
 13881 ;;  sign            1   29[BANK0 ] unsigned char 
 13882 ;;  exp             1   28[BANK0 ] unsigned char 
 13883 ;;  cntr            1   24[BANK0 ] unsigned char 
 13884 ;; Return value:  Size  Location     Type
 13885 ;;                  3   14[BANK0 ] float 
 13886 ;; Registers used:
 13887 ;;		wreg, status,2, status,0, pclath, cstack
 13888 ;; Tracked objects:
 13889 ;;		On entry : 0/0
 13890 ;;		On exit  : 0/0
 13891 ;;		Unchanged: 0/0
 13892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13893 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13895 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13896 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13897 ;;Total ram usage:       16 bytes
 13898 ;; Hardware stack levels used:    1
 13899 ;; Hardware stack levels required when called:    6
 13900 ;; This function calls:
 13901 ;;		___ftpack
 13902 ;; This function is called by:
 13903 ;;		_getPercentValue
 13904 ;;		_setPercentValue
 13905 ;; This function uses a non-reentrant model
 13906 ;;
 13907                           
 13908                           
 13909                           ;psect for function ___ftdiv
 13910  0D43                     ___ftdiv:	
 13911                           
 13912                           ;incstack = 0
 13913                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13914  0D43  0020               	movlb	0	; select bank0
 13915  0D44  0831               	movf	___ftdiv@f1,w
 13916  0D45  00B4               	movwf	??___ftdiv
 13917  0D46  0832               	movf	___ftdiv@f1+1,w
 13918  0D47  00B5               	movwf	??___ftdiv+1
 13919  0D48  0833               	movf	___ftdiv@f1+2,w
 13920  0D49  00B6               	movwf	??___ftdiv+2
 13921  0D4A  1003               	clrc
 13922  0D4B  0D35               	rlf	??___ftdiv+1,w
 13923  0D4C  0D36               	rlf	??___ftdiv+2,w
 13924  0D4D  00B7               	movwf	??___ftdiv+3
 13925  0D4E  0837               	movf	??___ftdiv+3,w
 13926  0D4F  00BC               	movwf	___ftdiv@exp
 13927  0D50  08BC               	movf	___ftdiv@exp,f
 13928  0D51  1D03               	skipz
 13929  0D52  2D5A               	goto	l5664
 13930  0D53  3000               	movlw	0
 13931  0D54  00AE               	movwf	?___ftdiv
 13932  0D55  3000               	movlw	0
 13933  0D56  00AF               	movwf	?___ftdiv+1
 13934  0D57  3000               	movlw	0
 13935  0D58  00B0               	movwf	?___ftdiv+2
 13936  0D59  0008               	return
 13937  0D5A                     l5664:	
 13938  0D5A  082E               	movf	___ftdiv@f2,w
 13939  0D5B  00B4               	movwf	??___ftdiv
 13940  0D5C  082F               	movf	___ftdiv@f2+1,w
 13941  0D5D  00B5               	movwf	??___ftdiv+1
 13942  0D5E  0830               	movf	___ftdiv@f2+2,w
 13943  0D5F  00B6               	movwf	??___ftdiv+2
 13944  0D60  1003               	clrc
 13945  0D61  0D35               	rlf	??___ftdiv+1,w
 13946  0D62  0D36               	rlf	??___ftdiv+2,w
 13947  0D63  00B7               	movwf	??___ftdiv+3
 13948  0D64  0837               	movf	??___ftdiv+3,w
 13949  0D65  00BD               	movwf	___ftdiv@sign
 13950  0D66  08BD               	movf	___ftdiv@sign,f
 13951  0D67  1D03               	skipz
 13952  0D68  2D70               	goto	l5670
 13953  0D69  3000               	movlw	0
 13954  0D6A  00AE               	movwf	?___ftdiv
 13955  0D6B  3000               	movlw	0
 13956  0D6C  00AF               	movwf	?___ftdiv+1
 13957  0D6D  3000               	movlw	0
 13958  0D6E  00B0               	movwf	?___ftdiv+2
 13959  0D6F  0008               	return
 13960  0D70                     l5670:	
 13961  0D70  3000               	movlw	0
 13962  0D71  00B9               	movwf	___ftdiv@f3
 13963  0D72  3000               	movlw	0
 13964  0D73  00BA               	movwf	___ftdiv@f3+1
 13965  0D74  3000               	movlw	0
 13966  0D75  00BB               	movwf	___ftdiv@f3+2
 13967  0D76  3089               	movlw	137
 13968  0D77  073D               	addwf	___ftdiv@sign,w
 13969  0D78  00B4               	movwf	??___ftdiv
 13970  0D79  0834               	movf	??___ftdiv,w
 13971  0D7A  02BC               	subwf	___ftdiv@exp,f
 13972  0D7B  0831               	movf	___ftdiv@f1,w
 13973  0D7C  00B4               	movwf	??___ftdiv
 13974  0D7D  0832               	movf	___ftdiv@f1+1,w
 13975  0D7E  00B5               	movwf	??___ftdiv+1
 13976  0D7F  0833               	movf	___ftdiv@f1+2,w
 13977  0D80  00B6               	movwf	??___ftdiv+2
 13978  0D81  3010               	movlw	16
 13979  0D82                     u4475:	
 13980  0D82  36B6               	lsrf	??___ftdiv+2,f
 13981  0D83  0CB5               	rrf	??___ftdiv+1,f
 13982  0D84  0CB4               	rrf	??___ftdiv,f
 13983  0D85  0B89               	decfsz	9,f
 13984  0D86  2D82               	goto	u4475
 13985  0D87  0834               	movf	??___ftdiv,w
 13986  0D88  00B7               	movwf	??___ftdiv+3
 13987  0D89  0837               	movf	??___ftdiv+3,w
 13988  0D8A  00BD               	movwf	___ftdiv@sign
 13989  0D8B  082E               	movf	___ftdiv@f2,w
 13990  0D8C  00B4               	movwf	??___ftdiv
 13991  0D8D  082F               	movf	___ftdiv@f2+1,w
 13992  0D8E  00B5               	movwf	??___ftdiv+1
 13993  0D8F  0830               	movf	___ftdiv@f2+2,w
 13994  0D90  00B6               	movwf	??___ftdiv+2
 13995  0D91  3010               	movlw	16
 13996  0D92                     u4485:	
 13997  0D92  36B6               	lsrf	??___ftdiv+2,f
 13998  0D93  0CB5               	rrf	??___ftdiv+1,f
 13999  0D94  0CB4               	rrf	??___ftdiv,f
 14000  0D95  0B89               	decfsz	9,f
 14001  0D96  2D92               	goto	u4485
 14002  0D97  0834               	movf	??___ftdiv,w
 14003  0D98  00B7               	movwf	??___ftdiv+3
 14004  0D99  0837               	movf	??___ftdiv+3,w
 14005  0D9A  06BD               	xorwf	___ftdiv@sign,f
 14006  0D9B  3080               	movlw	128
 14007  0D9C  00B4               	movwf	??___ftdiv
 14008  0D9D  0834               	movf	??___ftdiv,w
 14009  0D9E  05BD               	andwf	___ftdiv@sign,f
 14010  0D9F  17B2               	bsf	___ftdiv@f1+1,7
 14011  0DA0  30FF               	movlw	255
 14012  0DA1  05B1               	andwf	___ftdiv@f1,f
 14013  0DA2  30FF               	movlw	255
 14014  0DA3  05B2               	andwf	___ftdiv@f1+1,f
 14015  0DA4  3000               	movlw	0
 14016  0DA5  05B3               	andwf	___ftdiv@f1+2,f
 14017  0DA6  17AF               	bsf	___ftdiv@f2+1,7
 14018  0DA7  30FF               	movlw	255
 14019  0DA8  05AE               	andwf	___ftdiv@f2,f
 14020  0DA9  30FF               	movlw	255
 14021  0DAA  05AF               	andwf	___ftdiv@f2+1,f
 14022  0DAB  3000               	movlw	0
 14023  0DAC  05B0               	andwf	___ftdiv@f2+2,f
 14024  0DAD  3018               	movlw	24
 14025  0DAE  00B4               	movwf	??___ftdiv
 14026  0DAF  0834               	movf	??___ftdiv,w
 14027  0DB0  00B8               	movwf	___ftdiv@cntr
 14028  0DB1                     l5684:	
 14029  0DB1  3001               	movlw	1
 14030  0DB2                     u4495:	
 14031  0DB2  35B9               	lslf	___ftdiv@f3,f
 14032  0DB3  0DBA               	rlf	___ftdiv@f3+1,f
 14033  0DB4  0DBB               	rlf	___ftdiv@f3+2,f
 14034  0DB5  0B89               	decfsz	9,f
 14035  0DB6  2DB2               	goto	u4495
 14036  0DB7  0830               	movf	___ftdiv@f2+2,w
 14037  0DB8  0233               	subwf	___ftdiv@f1+2,w
 14038  0DB9  1D03               	skipz
 14039  0DBA  2DC1               	goto	u4505
 14040  0DBB  082F               	movf	___ftdiv@f2+1,w
 14041  0DBC  0232               	subwf	___ftdiv@f1+1,w
 14042  0DBD  1D03               	skipz
 14043  0DBE  2DC1               	goto	u4505
 14044  0DBF  082E               	movf	___ftdiv@f2,w
 14045  0DC0  0231               	subwf	___ftdiv@f1,w
 14046  0DC1                     u4505:	
 14047  0DC1  1C03               	skipc
 14048  0DC2  2DCA               	goto	l5692
 14049  0DC3  082E               	movf	___ftdiv@f2,w
 14050  0DC4  02B1               	subwf	___ftdiv@f1,f
 14051  0DC5  082F               	movf	___ftdiv@f2+1,w
 14052  0DC6  3BB2               	subwfb	___ftdiv@f1+1,f
 14053  0DC7  0830               	movf	___ftdiv@f2+2,w
 14054  0DC8  3BB3               	subwfb	___ftdiv@f1+2,f
 14055  0DC9  1439               	bsf	___ftdiv@f3,0
 14056  0DCA                     l5692:	
 14057  0DCA  3001               	movlw	1
 14058  0DCB                     u4515:	
 14059  0DCB  35B1               	lslf	___ftdiv@f1,f
 14060  0DCC  0DB2               	rlf	___ftdiv@f1+1,f
 14061  0DCD  0DB3               	rlf	___ftdiv@f1+2,f
 14062  0DCE  0B89               	decfsz	9,f
 14063  0DCF  2DCB               	goto	u4515
 14064  0DD0  3001               	movlw	1
 14065  0DD1  02B8               	subwf	___ftdiv@cntr,f
 14066  0DD2  1D03               	btfss	3,2
 14067  0DD3  2DB1               	goto	l5684
 14068  0DD4  0839               	movf	___ftdiv@f3,w
 14069  0DD5  00A0               	movwf	___ftpack@arg
 14070  0DD6  083A               	movf	___ftdiv@f3+1,w
 14071  0DD7  00A1               	movwf	___ftpack@arg+1
 14072  0DD8  083B               	movf	___ftdiv@f3+2,w
 14073  0DD9  00A2               	movwf	___ftpack@arg+2
 14074  0DDA  083C               	movf	___ftdiv@exp,w
 14075  0DDB  00B4               	movwf	??___ftdiv
 14076  0DDC  0834               	movf	??___ftdiv,w
 14077  0DDD  00A3               	movwf	___ftpack@exp
 14078  0DDE  083D               	movf	___ftdiv@sign,w
 14079  0DDF  00B5               	movwf	??___ftdiv+1
 14080  0DE0  0835               	movf	??___ftdiv+1,w
 14081  0DE1  00A4               	movwf	___ftpack@sign
 14082  0DE2  3188  20CC         	fcall	___ftpack
 14083  0DE4  0020               	movlb	0	; select bank0
 14084  0DE5  0820               	movf	?___ftpack,w
 14085  0DE6  00AE               	movwf	?___ftdiv
 14086  0DE7  0821               	movf	?___ftpack+1,w
 14087  0DE8  00AF               	movwf	?___ftdiv+1
 14088  0DE9  0822               	movf	?___ftpack+2,w
 14089  0DEA  00B0               	movwf	?___ftdiv+2
 14090  0DEB  0008               	return
 14091  0DEC                     __end_of___ftdiv:	
 14092                           
 14093                           	psect	text83
 14094  047B                     __ptext83:	
 14095 ;; *************** function ___ftadd *****************
 14096 ;; Defined at:
 14097 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14098 ;; Parameters:    Size  Location     Type
 14099 ;;  f1              3   33[BANK0 ] float 
 14100 ;;  f2              3   36[BANK0 ] float 
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;  exp1            1   45[BANK0 ] unsigned char 
 14103 ;;  exp2            1   44[BANK0 ] unsigned char 
 14104 ;;  sign            1   43[BANK0 ] unsigned char 
 14105 ;; Return value:  Size  Location     Type
 14106 ;;                  3   33[BANK0 ] float 
 14107 ;; Registers used:
 14108 ;;		wreg, status,2, status,0, pclath, cstack
 14109 ;; Tracked objects:
 14110 ;;		On entry : 0/0
 14111 ;;		On exit  : 0/0
 14112 ;;		Unchanged: 0/0
 14113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14114 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14117 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14118 ;;Total ram usage:       13 bytes
 14119 ;; Hardware stack levels used:    1
 14120 ;; Hardware stack levels required when called:    6
 14121 ;; This function calls:
 14122 ;;		___ftpack
 14123 ;; This function is called by:
 14124 ;;		_getPercentValue
 14125 ;;		_setPercentValue
 14126 ;; This function uses a non-reentrant model
 14127 ;;
 14128                           
 14129                           
 14130                           ;psect for function ___ftadd
 14131  047B                     ___ftadd:	
 14132                           
 14133                           ;incstack = 0
 14134                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14135  047B  0020               	movlb	0	; select bank0
 14136  047C  0841               	movf	___ftadd@f1,w
 14137  047D  00C7               	movwf	??___ftadd
 14138  047E  0842               	movf	___ftadd@f1+1,w
 14139  047F  00C8               	movwf	??___ftadd+1
 14140  0480  0843               	movf	___ftadd@f1+2,w
 14141  0481  00C9               	movwf	??___ftadd+2
 14142  0482  1003               	clrc
 14143  0483  0D48               	rlf	??___ftadd+1,w
 14144  0484  0D49               	rlf	??___ftadd+2,w
 14145  0485  00CA               	movwf	??___ftadd+3
 14146  0486  084A               	movf	??___ftadd+3,w
 14147  0487  00CD               	movwf	___ftadd@exp1
 14148  0488  0844               	movf	___ftadd@f2,w
 14149  0489  00C7               	movwf	??___ftadd
 14150  048A  0845               	movf	___ftadd@f2+1,w
 14151  048B  00C8               	movwf	??___ftadd+1
 14152  048C  0846               	movf	___ftadd@f2+2,w
 14153  048D  00C9               	movwf	??___ftadd+2
 14154  048E  1003               	clrc
 14155  048F  0D48               	rlf	??___ftadd+1,w
 14156  0490  0D49               	rlf	??___ftadd+2,w
 14157  0491  00CA               	movwf	??___ftadd+3
 14158  0492  084A               	movf	??___ftadd+3,w
 14159  0493  00CC               	movwf	___ftadd@exp2
 14160  0494  084D               	movf	___ftadd@exp1,w
 14161  0495  1903               	btfsc	3,2
 14162  0496  2CA3               	goto	l5594
 14163  0497  084C               	movf	___ftadd@exp2,w
 14164  0498  024D               	subwf	___ftadd@exp1,w
 14165  0499  1803               	skipnc
 14166  049A  2CAA               	goto	l5598
 14167  049B  034D               	decf	___ftadd@exp1,w
 14168  049C  3AFF               	xorlw	255
 14169  049D  074C               	addwf	___ftadd@exp2,w
 14170  049E  00C7               	movwf	??___ftadd
 14171  049F  3019               	movlw	25
 14172  04A0  0247               	subwf	??___ftadd,w
 14173  04A1  1C03               	skipc
 14174  04A2  2CAA               	goto	l5598
 14175  04A3                     l5594:	
 14176  04A3  0844               	movf	___ftadd@f2,w
 14177  04A4  00C1               	movwf	?___ftadd
 14178  04A5  0845               	movf	___ftadd@f2+1,w
 14179  04A6  00C2               	movwf	?___ftadd+1
 14180  04A7  0846               	movf	___ftadd@f2+2,w
 14181  04A8  00C3               	movwf	?___ftadd+2
 14182  04A9  0008               	return
 14183  04AA                     l5598:	
 14184  04AA  084C               	movf	___ftadd@exp2,w
 14185  04AB  1903               	btfsc	3,2
 14186  04AC  0008               	return
 14187  04AD  084D               	movf	___ftadd@exp1,w
 14188  04AE  024C               	subwf	___ftadd@exp2,w
 14189  04AF  1803               	skipnc
 14190  04B0  2CB9               	goto	l5604
 14191  04B1  034C               	decf	___ftadd@exp2,w
 14192  04B2  3AFF               	xorlw	255
 14193  04B3  074D               	addwf	___ftadd@exp1,w
 14194  04B4  00C7               	movwf	??___ftadd
 14195  04B5  3019               	movlw	25
 14196  04B6  0247               	subwf	??___ftadd,w
 14197  04B7  1803               	btfsc	3,0
 14198  04B8  0008               	return
 14199  04B9                     l5604:	
 14200  04B9  3006               	movlw	6
 14201  04BA  00C7               	movwf	??___ftadd
 14202  04BB  0847               	movf	??___ftadd,w
 14203  04BC  00CB               	movwf	___ftadd@sign
 14204  04BD  1BC3               	btfsc	___ftadd@f1+2,7
 14205  04BE  17CB               	bsf	___ftadd@sign,7
 14206  04BF  1BC6               	btfsc	___ftadd@f2+2,7
 14207  04C0  174B               	bsf	___ftadd@sign,6
 14208  04C1  17C2               	bsf	___ftadd@f1+1,7
 14209  04C2  30FF               	movlw	255
 14210  04C3  05C1               	andwf	___ftadd@f1,f
 14211  04C4  30FF               	movlw	255
 14212  04C5  05C2               	andwf	___ftadd@f1+1,f
 14213  04C6  3000               	movlw	0
 14214  04C7  05C3               	andwf	___ftadd@f1+2,f
 14215  04C8  17C5               	bsf	___ftadd@f2+1,7
 14216  04C9  30FF               	movlw	255
 14217  04CA  05C4               	andwf	___ftadd@f2,f
 14218  04CB  30FF               	movlw	255
 14219  04CC  05C5               	andwf	___ftadd@f2+1,f
 14220  04CD  3000               	movlw	0
 14221  04CE  05C6               	andwf	___ftadd@f2+2,f
 14222  04CF  084C               	movf	___ftadd@exp2,w
 14223  04D0  024D               	subwf	___ftadd@exp1,w
 14224  04D1  1803               	skipnc
 14225  04D2  2CF5               	goto	l5626
 14226  04D3                     l5616:	
 14227  04D3  3001               	movlw	1
 14228  04D4                     u4315:	
 14229  04D4  35C4               	lslf	___ftadd@f2,f
 14230  04D5  0DC5               	rlf	___ftadd@f2+1,f
 14231  04D6  0DC6               	rlf	___ftadd@f2+2,f
 14232  04D7  0B89               	decfsz	9,f
 14233  04D8  2CD4               	goto	u4315
 14234  04D9  3001               	movlw	1
 14235  04DA  02CC               	subwf	___ftadd@exp2,f
 14236  04DB  084C               	movf	___ftadd@exp2,w
 14237  04DC  064D               	xorwf	___ftadd@exp1,w
 14238  04DD  1903               	skipnz
 14239  04DE  2CF0               	goto	l5624
 14240  04DF  3001               	movlw	1
 14241  04E0  02CB               	subwf	___ftadd@sign,f
 14242  04E1  084B               	movf	___ftadd@sign,w
 14243  04E2  3907               	andlw	7
 14244  04E3  1903               	btfsc	3,2
 14245  04E4  2CF0               	goto	l5624
 14246  04E5  2CD3               	goto	l5616
 14247  04E6                     l5622:	
 14248  04E6  3001               	movlw	1
 14249  04E7                     u4345:	
 14250  04E7  36C3               	lsrf	___ftadd@f1+2,f
 14251  04E8  0CC2               	rrf	___ftadd@f1+1,f
 14252  04E9  0CC1               	rrf	___ftadd@f1,f
 14253  04EA  0B89               	decfsz	9,f
 14254  04EB  2CE7               	goto	u4345
 14255  04EC  3001               	movlw	1
 14256  04ED  00C7               	movwf	??___ftadd
 14257  04EE  0847               	movf	??___ftadd,w
 14258  04EF  07CD               	addwf	___ftadd@exp1,f
 14259  04F0                     l5624:	
 14260  04F0  084D               	movf	___ftadd@exp1,w
 14261  04F1  064C               	xorwf	___ftadd@exp2,w
 14262  04F2  1903               	btfsc	3,2
 14263  04F3  2D1A               	goto	l2771
 14264  04F4  2CE6               	goto	l5622
 14265  04F5                     l5626:	
 14266  04F5  084D               	movf	___ftadd@exp1,w
 14267  04F6  024C               	subwf	___ftadd@exp2,w
 14268  04F7  1803               	skipnc
 14269  04F8  2D1A               	goto	l2771
 14270  04F9                     l5628:	
 14271  04F9  3001               	movlw	1
 14272  04FA                     u4375:	
 14273  04FA  35C1               	lslf	___ftadd@f1,f
 14274  04FB  0DC2               	rlf	___ftadd@f1+1,f
 14275  04FC  0DC3               	rlf	___ftadd@f1+2,f
 14276  04FD  0B89               	decfsz	9,f
 14277  04FE  2CFA               	goto	u4375
 14278  04FF  3001               	movlw	1
 14279  0500  02CD               	subwf	___ftadd@exp1,f
 14280  0501  084C               	movf	___ftadd@exp2,w
 14281  0502  064D               	xorwf	___ftadd@exp1,w
 14282  0503  1903               	skipnz
 14283  0504  2D16               	goto	l5636
 14284  0505  3001               	movlw	1
 14285  0506  02CB               	subwf	___ftadd@sign,f
 14286  0507  084B               	movf	___ftadd@sign,w
 14287  0508  3907               	andlw	7
 14288  0509  1903               	btfsc	3,2
 14289  050A  2D16               	goto	l5636
 14290  050B  2CF9               	goto	l5628
 14291  050C                     l5634:	
 14292  050C  3001               	movlw	1
 14293  050D                     u4405:	
 14294  050D  36C6               	lsrf	___ftadd@f2+2,f
 14295  050E  0CC5               	rrf	___ftadd@f2+1,f
 14296  050F  0CC4               	rrf	___ftadd@f2,f
 14297  0510  0B89               	decfsz	9,f
 14298  0511  2D0D               	goto	u4405
 14299  0512  3001               	movlw	1
 14300  0513  00C7               	movwf	??___ftadd
 14301  0514  0847               	movf	??___ftadd,w
 14302  0515  07CC               	addwf	___ftadd@exp2,f
 14303  0516                     l5636:	
 14304  0516  084D               	movf	___ftadd@exp1,w
 14305  0517  064C               	xorwf	___ftadd@exp2,w
 14306  0518  1D03               	skipz
 14307  0519  2D0C               	goto	l5634
 14308  051A                     l2771:	
 14309  051A  1FCB               	btfss	___ftadd@sign,7
 14310  051B  2D2C               	goto	l5640
 14311  051C  30FF               	movlw	255
 14312  051D  06C1               	xorwf	___ftadd@f1,f
 14313  051E  30FF               	movlw	255
 14314  051F  06C2               	xorwf	___ftadd@f1+1,f
 14315  0520  30FF               	movlw	255
 14316  0521  06C3               	xorwf	___ftadd@f1+2,f
 14317  0522  3001               	movlw	1
 14318  0523  07C1               	addwf	___ftadd@f1,f
 14319  0524  3000               	movlw	0
 14320  0525  1803               	skipnc
 14321  0526  3001               	movlw	1
 14322  0527  07C2               	addwf	___ftadd@f1+1,f
 14323  0528  3000               	movlw	0
 14324  0529  1803               	skipnc
 14325  052A  3001               	movlw	1
 14326  052B  07C3               	addwf	___ftadd@f1+2,f
 14327  052C                     l5640:	
 14328  052C  1F4B               	btfss	___ftadd@sign,6
 14329  052D  2D3E               	goto	l5644
 14330  052E  30FF               	movlw	255
 14331  052F  06C4               	xorwf	___ftadd@f2,f
 14332  0530  30FF               	movlw	255
 14333  0531  06C5               	xorwf	___ftadd@f2+1,f
 14334  0532  30FF               	movlw	255
 14335  0533  06C6               	xorwf	___ftadd@f2+2,f
 14336  0534  3001               	movlw	1
 14337  0535  07C4               	addwf	___ftadd@f2,f
 14338  0536  3000               	movlw	0
 14339  0537  1803               	skipnc
 14340  0538  3001               	movlw	1
 14341  0539  07C5               	addwf	___ftadd@f2+1,f
 14342  053A  3000               	movlw	0
 14343  053B  1803               	skipnc
 14344  053C  3001               	movlw	1
 14345  053D  07C6               	addwf	___ftadd@f2+2,f
 14346  053E                     l5644:	
 14347  053E  01CB               	clrf	___ftadd@sign
 14348  053F  0841               	movf	___ftadd@f1,w
 14349  0540  07C4               	addwf	___ftadd@f2,f
 14350  0541  0842               	movf	___ftadd@f1+1,w
 14351  0542  3DC5               	addwfc	___ftadd@f2+1,f
 14352  0543  0843               	movf	___ftadd@f1+2,w
 14353  0544  3DC6               	addwfc	___ftadd@f2+2,f
 14354  0545  1FC6               	btfss	___ftadd@f2+2,7
 14355  0546  2D59               	goto	l5654
 14356  0547  30FF               	movlw	255
 14357  0548  06C4               	xorwf	___ftadd@f2,f
 14358  0549  30FF               	movlw	255
 14359  054A  06C5               	xorwf	___ftadd@f2+1,f
 14360  054B  30FF               	movlw	255
 14361  054C  06C6               	xorwf	___ftadd@f2+2,f
 14362  054D  3001               	movlw	1
 14363  054E  07C4               	addwf	___ftadd@f2,f
 14364  054F  3000               	movlw	0
 14365  0550  1803               	skipnc
 14366  0551  3001               	movlw	1
 14367  0552  07C5               	addwf	___ftadd@f2+1,f
 14368  0553  3000               	movlw	0
 14369  0554  1803               	skipnc
 14370  0555  3001               	movlw	1
 14371  0556  07C6               	addwf	___ftadd@f2+2,f
 14372  0557  01CB               	clrf	___ftadd@sign
 14373  0558  0ACB               	incf	___ftadd@sign,f
 14374  0559                     l5654:	
 14375  0559  0844               	movf	___ftadd@f2,w
 14376  055A  00A0               	movwf	___ftpack@arg
 14377  055B  0845               	movf	___ftadd@f2+1,w
 14378  055C  00A1               	movwf	___ftpack@arg+1
 14379  055D  0846               	movf	___ftadd@f2+2,w
 14380  055E  00A2               	movwf	___ftpack@arg+2
 14381  055F  084D               	movf	___ftadd@exp1,w
 14382  0560  00C7               	movwf	??___ftadd
 14383  0561  0847               	movf	??___ftadd,w
 14384  0562  00A3               	movwf	___ftpack@exp
 14385  0563  084B               	movf	___ftadd@sign,w
 14386  0564  00C8               	movwf	??___ftadd+1
 14387  0565  0848               	movf	??___ftadd+1,w
 14388  0566  00A4               	movwf	___ftpack@sign
 14389  0567  3188  20CC         	fcall	___ftpack
 14390  0569  0020               	movlb	0	; select bank0
 14391  056A  0820               	movf	?___ftpack,w
 14392  056B  00C1               	movwf	?___ftadd
 14393  056C  0821               	movf	?___ftpack+1,w
 14394  056D  00C2               	movwf	?___ftadd+1
 14395  056E  0822               	movf	?___ftpack+2,w
 14396  056F  00C3               	movwf	?___ftadd+2
 14397  0570  0008               	return
 14398  0571                     __end_of___ftadd:	
 14399                           
 14400                           	psect	text84
 14401  1EFC                     __ptext84:	
 14402 ;; *************** function ___awtoft *****************
 14403 ;; Defined at:
 14404 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14405 ;; Parameters:    Size  Location     Type
 14406 ;;  c               2    8[BANK0 ] int 
 14407 ;; Auto vars:     Size  Location     Type
 14408 ;;  sign            1   13[BANK0 ] unsigned char 
 14409 ;; Return value:  Size  Location     Type
 14410 ;;                  3    8[BANK0 ] float 
 14411 ;; Registers used:
 14412 ;;		wreg, status,2, status,0, pclath, cstack
 14413 ;; Tracked objects:
 14414 ;;		On entry : 0/0
 14415 ;;		On exit  : 0/0
 14416 ;;		Unchanged: 0/0
 14417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14418 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14421 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;Total ram usage:        6 bytes
 14423 ;; Hardware stack levels used:    1
 14424 ;; Hardware stack levels required when called:    6
 14425 ;; This function calls:
 14426 ;;		___ftpack
 14427 ;; This function is called by:
 14428 ;;		_getPercentValue
 14429 ;;		_setPercentValue
 14430 ;; This function uses a non-reentrant model
 14431 ;;
 14432                           
 14433                           
 14434                           ;psect for function ___awtoft
 14435  1EFC                     ___awtoft:	
 14436                           
 14437                           ;incstack = 0
 14438                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14439  1EFC  0020               	movlb	0	; select bank0
 14440  1EFD  01AD               	clrf	___awtoft@sign
 14441  1EFE  1FA9               	btfss	___awtoft@c+1,7
 14442  1EFF  2F07               	goto	l5582
 14443  1F00  09A8               	comf	___awtoft@c,f
 14444  1F01  09A9               	comf	___awtoft@c+1,f
 14445  1F02  0AA8               	incf	___awtoft@c,f
 14446  1F03  1903               	skipnz
 14447  1F04  0AA9               	incf	___awtoft@c+1,f
 14448  1F05  01AD               	clrf	___awtoft@sign
 14449  1F06  0AAD               	incf	___awtoft@sign,f
 14450  1F07                     l5582:	
 14451  1F07  0828               	movf	___awtoft@c,w
 14452  1F08  00A0               	movwf	___ftpack@arg
 14453  1F09  0829               	movf	___awtoft@c+1,w
 14454  1F0A  00A1               	movwf	___ftpack@arg+1
 14455  1F0B  01A2               	clrf	___ftpack@arg+2
 14456  1F0C  308E               	movlw	142
 14457  1F0D  00AB               	movwf	??___awtoft
 14458  1F0E  082B               	movf	??___awtoft,w
 14459  1F0F  00A3               	movwf	___ftpack@exp
 14460  1F10  082D               	movf	___awtoft@sign,w
 14461  1F11  00AC               	movwf	??___awtoft+1
 14462  1F12  082C               	movf	??___awtoft+1,w
 14463  1F13  00A4               	movwf	___ftpack@sign
 14464  1F14  3188  20CC         	fcall	___ftpack
 14465  1F16  0020               	movlb	0	; select bank0
 14466  1F17  0820               	movf	?___ftpack,w
 14467  1F18  00A8               	movwf	?___awtoft
 14468  1F19  0821               	movf	?___ftpack+1,w
 14469  1F1A  00A9               	movwf	?___awtoft+1
 14470  1F1B  0822               	movf	?___ftpack+2,w
 14471  1F1C  00AA               	movwf	?___awtoft+2
 14472  1F1D  0008               	return
 14473  1F1E                     __end_of___awtoft:	
 14474                           
 14475                           	psect	text85
 14476  08CC                     __ptext85:	
 14477 ;; *************** function ___ftpack *****************
 14478 ;; Defined at:
 14479 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14480 ;; Parameters:    Size  Location     Type
 14481 ;;  arg             3    0[BANK0 ] unsigned um
 14482 ;;  exp             1    3[BANK0 ] unsigned char 
 14483 ;;  sign            1    4[BANK0 ] unsigned char 
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;		None
 14486 ;; Return value:  Size  Location     Type
 14487 ;;                  3    0[BANK0 ] float 
 14488 ;; Registers used:
 14489 ;;		wreg, status,2, status,0
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14495 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;Total ram usage:        8 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    5
 14502 ;; This function calls:
 14503 ;;		Nothing
 14504 ;; This function is called by:
 14505 ;;		___awtoft
 14506 ;;		___ftadd
 14507 ;;		___ftdiv
 14508 ;;		___ftmul
 14509 ;; This function uses a non-reentrant model
 14510 ;;
 14511                           
 14512                           
 14513                           ;psect for function ___ftpack
 14514  08CC                     ___ftpack:	
 14515                           
 14516                           ;incstack = 0
 14517                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14518  08CC  0020               	movlb	0	; select bank0
 14519  08CD  0823               	movf	___ftpack@exp,w
 14520  08CE  1903               	btfsc	3,2
 14521  08CF  28D5               	goto	l5532
 14522  08D0  0822               	movf	___ftpack@arg+2,w
 14523  08D1  0421               	iorwf	___ftpack@arg+1,w
 14524  08D2  0420               	iorwf	___ftpack@arg,w
 14525  08D3  1D03               	skipz
 14526  08D4  28E6               	goto	l5538
 14527  08D5                     l5532:	
 14528  08D5  3000               	movlw	0
 14529  08D6  00A0               	movwf	?___ftpack
 14530  08D7  3000               	movlw	0
 14531  08D8  00A1               	movwf	?___ftpack+1
 14532  08D9  3000               	movlw	0
 14533  08DA  00A2               	movwf	?___ftpack+2
 14534  08DB  0008               	return
 14535  08DC                     l5536:	
 14536  08DC  3001               	movlw	1
 14537  08DD  00A5               	movwf	??___ftpack
 14538  08DE  0825               	movf	??___ftpack,w
 14539  08DF  07A3               	addwf	___ftpack@exp,f
 14540  08E0  3001               	movlw	1
 14541  08E1                     u4105:	
 14542  08E1  36A2               	lsrf	___ftpack@arg+2,f
 14543  08E2  0CA1               	rrf	___ftpack@arg+1,f
 14544  08E3  0CA0               	rrf	___ftpack@arg,f
 14545  08E4  0B89               	decfsz	9,f
 14546  08E5  28E1               	goto	u4105
 14547  08E6                     l5538:	
 14548  08E6  30FE               	movlw	254
 14549  08E7  0522               	andwf	___ftpack@arg+2,w
 14550  08E8  1903               	btfsc	3,2
 14551  08E9  28FF               	goto	l2742
 14552  08EA  28DC               	goto	l5536
 14553  08EB                     l5540:	
 14554  08EB  3001               	movlw	1
 14555  08EC  00A5               	movwf	??___ftpack
 14556  08ED  0825               	movf	??___ftpack,w
 14557  08EE  07A3               	addwf	___ftpack@exp,f
 14558  08EF  3001               	movlw	1
 14559  08F0  07A0               	addwf	___ftpack@arg,f
 14560  08F1  3000               	movlw	0
 14561  08F2  1803               	skipnc
 14562  08F3  3001               	movlw	1
 14563  08F4  07A1               	addwf	___ftpack@arg+1,f
 14564  08F5  3000               	movlw	0
 14565  08F6  1803               	skipnc
 14566  08F7  3001               	movlw	1
 14567  08F8  07A2               	addwf	___ftpack@arg+2,f
 14568  08F9  3001               	movlw	1
 14569  08FA                     u4125:	
 14570  08FA  36A2               	lsrf	___ftpack@arg+2,f
 14571  08FB  0CA1               	rrf	___ftpack@arg+1,f
 14572  08FC  0CA0               	rrf	___ftpack@arg,f
 14573  08FD  0B89               	decfsz	9,f
 14574  08FE  28FA               	goto	u4125
 14575  08FF                     l2742:	
 14576  08FF  30FF               	movlw	255
 14577  0900  0522               	andwf	___ftpack@arg+2,w
 14578  0901  1903               	btfsc	3,2
 14579  0902  290C               	goto	l5548
 14580  0903  28EB               	goto	l5540
 14581  0904                     l5546:	
 14582  0904  3001               	movlw	1
 14583  0905  02A3               	subwf	___ftpack@exp,f
 14584  0906  3001               	movlw	1
 14585  0907                     u4145:	
 14586  0907  35A0               	lslf	___ftpack@arg,f
 14587  0908  0DA1               	rlf	___ftpack@arg+1,f
 14588  0909  0DA2               	rlf	___ftpack@arg+2,f
 14589  090A  0B89               	decfsz	9,f
 14590  090B  2907               	goto	u4145
 14591  090C                     l5548:	
 14592  090C  1FA1               	btfss	___ftpack@arg+1,7
 14593  090D  2904               	goto	l5546
 14594  090E  1823               	btfsc	___ftpack@exp,0
 14595  090F  2916               	goto	l2748
 14596  0910  30FF               	movlw	255
 14597  0911  05A0               	andwf	___ftpack@arg,f
 14598  0912  307F               	movlw	127
 14599  0913  05A1               	andwf	___ftpack@arg+1,f
 14600  0914  30FF               	movlw	255
 14601  0915  05A2               	andwf	___ftpack@arg+2,f
 14602  0916                     l2748:	
 14603  0916  1003               	clrc
 14604  0917  0CA3               	rrf	___ftpack@exp,f
 14605  0918  0823               	movf	___ftpack@exp,w
 14606  0919  00A5               	movwf	??___ftpack
 14607  091A  01A6               	clrf	??___ftpack+1
 14608  091B  01A7               	clrf	??___ftpack+2
 14609  091C  3010               	movlw	16
 14610  091D                     u4175:	
 14611  091D  35A5               	lslf	??___ftpack,f
 14612  091E  0DA6               	rlf	??___ftpack+1,f
 14613  091F  0DA7               	rlf	??___ftpack+2,f
 14614  0920  0B89               	decfsz	9,f
 14615  0921  291D               	goto	u4175
 14616  0922  0825               	movf	??___ftpack,w
 14617  0923  04A0               	iorwf	___ftpack@arg,f
 14618  0924  0826               	movf	??___ftpack+1,w
 14619  0925  04A1               	iorwf	___ftpack@arg+1,f
 14620  0926  0827               	movf	??___ftpack+2,w
 14621  0927  04A2               	iorwf	___ftpack@arg+2,f
 14622  0928  0824               	movf	___ftpack@sign,w
 14623  0929  1903               	btfsc	3,2
 14624  092A  0008               	return
 14625  092B  17A2               	bsf	___ftpack@arg+2,7
 14626  092C  0008               	return
 14627  092D                     __end_of___ftpack:	
 14628                           
 14629                           	psect	text86
 14630  11F2                     __ptext86:	
 14631 ;; *************** function _setLED *****************
 14632 ;; Defined at:
 14633 ;;		line 76 in file "../src/LED_B1.c"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;  led             1    wreg     unsigned char 
 14636 ;;  command         1    2[BANK0 ] unsigned char 
 14637 ;; Auto vars:     Size  Location     Type
 14638 ;;  led             1    3[BANK0 ] unsigned char 
 14639 ;; Return value:  Size  Location     Type
 14640 ;;		None               void
 14641 ;; Registers used:
 14642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14643 ;; Tracked objects:
 14644 ;;		On entry : 0/0
 14645 ;;		On exit  : 0/0
 14646 ;;		Unchanged: 0/0
 14647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14648 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14651 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14652 ;;Total ram usage:        2 bytes
 14653 ;; Hardware stack levels used:    1
 14654 ;; Hardware stack levels required when called:    6
 14655 ;; This function calls:
 14656 ;;		_LedPointSelect
 14657 ;; This function is called by:
 14658 ;;		_setDimmerLights
 14659 ;;		_setLED_Initialization
 14660 ;;		_Exception_Main
 14661 ;;		_setSw_Initialization
 14662 ;;		_setMain_Exception
 14663 ;; This function uses a non-reentrant model
 14664 ;;
 14665                           
 14666                           
 14667                           ;psect for function _setLED
 14668  11F2                     _setLED:	
 14669                           
 14670                           ;incstack = 0
 14671                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14672                           ;setLED@led stored from wreg
 14673  11F2  0020               	movlb	0	; select bank0
 14674  11F3  00A3               	movwf	setLED@led
 14675                           
 14676                           ;LED_B1.c: 77: LedPointSelect(led);
 14677  11F4  0823               	movf	setLED@led,w
 14678  11F5  319C  242C  3191   	fcall	_LedPointSelect
 14679                           
 14680                           ;LED_B1.c: 78: if (command == 0) {
 14681  11F8  0020               	movlb	0	; select bank0
 14682  11F9  08A2               	movf	setLED@command,f
 14683  11FA  1D03               	skipz
 14684  11FB  2A01               	goto	l6256
 14685                           
 14686                           ;LED_B1.c: 107: if (led == 99) {
 14687  11FC  0823               	movf	setLED@led,w
 14688  11FD  3A63               	xorlw	99
 14689  11FE  1D03               	skipz
 14690  11FF  2A01               	goto	l6256
 14691                           
 14692                           ;LED_B1.c: 111: RB5 = 1;
 14693  1200  168D               	bsf	13,5	;volatile
 14694  1201                     l6256:	
 14695                           
 14696                           ;LED_B1.c: 113: }
 14697                           ;LED_B1.c: 115: }
 14698                           ;LED_B1.c: 116: if (command == 1) {
 14699  1201  0822               	movf	setLED@command,w
 14700  1202  3A01               	xorlw	1
 14701  1203  1D03               	skipz
 14702  1204  2A0A               	goto	l6262
 14703                           
 14704                           ;LED_B1.c: 145: if (led == 99) {
 14705  1205  0823               	movf	setLED@led,w
 14706  1206  3A63               	xorlw	99
 14707  1207  1D03               	skipz
 14708  1208  2A0A               	goto	l6262
 14709                           
 14710                           ;LED_B1.c: 149: RB5 = 0;
 14711  1209  128D               	bcf	13,5	;volatile
 14712  120A                     l6262:	
 14713                           
 14714                           ;LED_B1.c: 151: }
 14715                           ;LED_B1.c: 153: }
 14716                           ;LED_B1.c: 154: if (command == 10) {
 14717  120A  0822               	movf	setLED@command,w
 14718  120B  3A0A               	xorlw	10
 14719  120C  1D03               	skipz
 14720  120D  2A1E               	goto	l6270
 14721                           
 14722                           ;LED_B1.c: 155: LED->GO = 0;
 14723  120E  087A               	movf	_LED,w
 14724  120F  0086               	movwf	6
 14725  1210  3001               	movlw	1	; select bank2/3
 14726  1211  0087               	movwf	7
 14727  1212  1081               	bcf	1,1
 14728                           
 14729                           ;LED_B1.c: 156: LED->Time = 0;
 14730  1213  0A7A               	incf	_LED,w
 14731  1214  0086               	movwf	6
 14732  1215  3001               	movlw	1	; select bank2/3
 14733  1216  0087               	movwf	7
 14734  1217  3000               	movlw	0
 14735  1218  3FC0               	movwi [0]fsr1
 14736  1219  3FC1               	movwi [1]fsr1
 14737                           
 14738                           ;LED_B1.c: 185: if (led == 99) {
 14739  121A  0823               	movf	setLED@led,w
 14740  121B  3A63               	xorlw	99
 14741  121C  1903               	btfsc	3,2
 14742                           
 14743                           ;LED_B1.c: 189: RB5 = 1;
 14744  121D  168D               	bsf	13,5	;volatile
 14745  121E                     l6270:	
 14746                           
 14747                           ;LED_B1.c: 191: }
 14748                           ;LED_B1.c: 193: }
 14749                           ;LED_B1.c: 194: if (command == 11) {
 14750  121E  0822               	movf	setLED@command,w
 14751  121F  3A0B               	xorlw	11
 14752  1220  1D03               	skipz
 14753  1221  0008               	return
 14754                           
 14755                           ;LED_B1.c: 195: LED->GO = 1;
 14756  1222  087A               	movf	_LED,w
 14757  1223  0086               	movwf	6
 14758  1224  3001               	movlw	1	; select bank2/3
 14759  1225  0087               	movwf	7
 14760  1226  1481               	bsf	1,1
 14761  1227  0008               	return
 14762  1228                     __end_of_setLED:	
 14763                           
 14764                           	psect	text87
 14765  1C2C                     __ptext87:	
 14766 ;; *************** function _LedPointSelect *****************
 14767 ;; Defined at:
 14768 ;;		line 7 in file "../src/LED_B1.c"
 14769 ;; Parameters:    Size  Location     Type
 14770 ;;  led             1    wreg     unsigned char 
 14771 ;; Auto vars:     Size  Location     Type
 14772 ;;  led             1    1[BANK0 ] unsigned char 
 14773 ;; Return value:  Size  Location     Type
 14774 ;;		None               void
 14775 ;; Registers used:
 14776 ;;		wreg
 14777 ;; Tracked objects:
 14778 ;;		On entry : 0/0
 14779 ;;		On exit  : 0/0
 14780 ;;		Unchanged: 0/0
 14781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;Total ram usage:        2 bytes
 14787 ;; Hardware stack levels used:    1
 14788 ;; Hardware stack levels required when called:    5
 14789 ;; This function calls:
 14790 ;;		Nothing
 14791 ;; This function is called by:
 14792 ;;		_setLED_Initialization
 14793 ;;		_setLED
 14794 ;;		_setLED_Main
 14795 ;; This function uses a non-reentrant model
 14796 ;;
 14797                           
 14798                           
 14799                           ;psect for function _LedPointSelect
 14800  1C2C                     _LedPointSelect:	
 14801                           
 14802                           ;incstack = 0
 14803                           ; Regs used in _LedPointSelect: [wreg]
 14804                           ;LedPointSelect@led stored from wreg
 14805  1C2C  0020               	movlb	0	; select bank0
 14806  1C2D  00A1               	movwf	LedPointSelect@led
 14807                           
 14808                           ;LED_B1.c: 24: if (led == 99) {
 14809  1C2E  0821               	movf	LedPointSelect@led,w
 14810  1C2F  3A63               	xorlw	99
 14811  1C30  1D03               	skipz
 14812  1C31  0008               	return
 14813                           
 14814                           ;LED_B1.c: 25: LED = &VarErrLED;
 14815  1C32  30E4               	movlw	_VarErrLED& (0+255)
 14816  1C33  00A0               	movwf	??_LedPointSelect
 14817  1C34  0820               	movf	??_LedPointSelect,w
 14818  1C35  00FA               	movwf	_LED
 14819  1C36  0008               	return
 14820  1C37                     __end_of_LedPointSelect:	
 14821                           
 14822                           	psect	text88
 14823  1C6F                     __ptext88:	
 14824 ;; *************** function _setDimmerLights_Line *****************
 14825 ;; Defined at:
 14826 ;;		line 690 in file "../src/Dimmer_B1.c"
 14827 ;; Parameters:    Size  Location     Type
 14828 ;;  lights          1    wreg     unsigned char 
 14829 ;; Auto vars:     Size  Location     Type
 14830 ;;  lights          1    0[BANK0 ] unsigned char 
 14831 ;; Return value:  Size  Location     Type
 14832 ;;		None               void
 14833 ;; Registers used:
 14834 ;;		wreg
 14835 ;; Tracked objects:
 14836 ;;		On entry : 0/0
 14837 ;;		On exit  : 0/0
 14838 ;;		Unchanged: 0/0
 14839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;Total ram usage:        1 bytes
 14845 ;; Hardware stack levels used:    1
 14846 ;; Hardware stack levels required when called:    5
 14847 ;; This function calls:
 14848 ;;		Nothing
 14849 ;; This function is called by:
 14850 ;;		_setDimmerLights
 14851 ;; This function uses a non-reentrant model
 14852 ;;
 14853                           
 14854                           
 14855                           ;psect for function _setDimmerLights_Line
 14856  1C6F                     _setDimmerLights_Line:	
 14857                           
 14858                           ;incstack = 0
 14859                           ; Regs used in _setDimmerLights_Line: [wreg]
 14860                           ;setDimmerLights_Line@lights stored from wreg
 14861  1C6F  0020               	movlb	0	; select bank0
 14862  1C70  00A0               	movwf	setDimmerLights_Line@lights
 14863                           
 14864                           ;Dimmer_B1.c: 692: DimmerLights1.Line = 0;
 14865  1C71  0023               	movlb	3	; select bank3
 14866  1C72  134F               	bcf	(_DimmerLights1^(0+384)+10),6	;volatile
 14867                           
 14868                           ;Dimmer_B1.c: 701: if (lights == 1) {
 14869  1C73  0020               	movlb	0	; select bank0
 14870  1C74  0820               	movf	setDimmerLights_Line@lights,w
 14871  1C75  3A01               	xorlw	1
 14872  1C76  1D03               	skipz
 14873  1C77  0008               	return
 14874                           
 14875                           ;Dimmer_B1.c: 702: DimmerLights1.Line = 1;
 14876  1C78  0023               	movlb	3	; select bank3
 14877  1C79  174F               	bsf	(_DimmerLights1^(0+384)+10),6	;volatile
 14878  1C7A  0008               	return
 14879  1C7B                     __end_of_setDimmerLights_Line:	
 14880                           
 14881                           	psect	text89
 14882  118C                     __ptext89:	
 14883 ;; *************** function _getMain_All_Error_Status *****************
 14884 ;; Defined at:
 14885 ;;		line 404 in file "../src/Main_B1.c"
 14886 ;; Parameters:    Size  Location     Type
 14887 ;;  command         1    wreg     unsigned char 
 14888 ;; Auto vars:     Size  Location     Type
 14889 ;;  command         1    5[BANK0 ] unsigned char 
 14890 ;;  status          1    6[BANK0 ] unsigned char 
 14891 ;; Return value:  Size  Location     Type
 14892 ;;                  1    wreg      unsigned char 
 14893 ;; Registers used:
 14894 ;;		wreg, status,2, status,0
 14895 ;; Tracked objects:
 14896 ;;		On entry : 0/0
 14897 ;;		On exit  : 0/0
 14898 ;;		Unchanged: 0/0
 14899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14903 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14904 ;;Total ram usage:        7 bytes
 14905 ;; Hardware stack levels used:    1
 14906 ;; Hardware stack levels required when called:    5
 14907 ;; This function calls:
 14908 ;;		Nothing
 14909 ;; This function is called by:
 14910 ;;		_DimmerLights_Main
 14911 ;;		_setDimmerLights
 14912 ;;		_setDimmerLights_Adj
 14913 ;;		_Exception_Main
 14914 ;;		_Load_Main
 14915 ;;		_setTemp_Main
 14916 ;;		_setRF_Main
 14917 ;;		_getRxData
 14918 ;;		_setSw_Main
 14919 ;; This function uses a non-reentrant model
 14920 ;;
 14921                           
 14922                           
 14923                           ;psect for function _getMain_All_Error_Status
 14924  118C                     _getMain_All_Error_Status:	
 14925                           
 14926                           ;incstack = 0
 14927                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14928                           ;getMain_All_Error_Status@command stored from wreg
 14929  118C  0020               	movlb	0	; select bank0
 14930  118D  00A5               	movwf	getMain_All_Error_Status@command
 14931                           
 14932                           ;Main_B1.c: 405: char status = 0;
 14933  118E  01A6               	clrf	getMain_All_Error_Status@status
 14934                           
 14935                           ;Main_B1.c: 416: if (status == 0 && command != 2) {
 14936  118F  08A6               	movf	getMain_All_Error_Status@status,f
 14937  1190  1D03               	skipz
 14938  1191  29A6               	goto	l6236
 14939  1192  0825               	movf	getMain_All_Error_Status@command,w
 14940  1193  3A02               	xorlw	2
 14941  1194  1903               	skipnz
 14942  1195  29A6               	goto	l6236
 14943                           
 14944                           ;Main_B1.c: 417: status = Temp.ERROR == 1 ? 2 : 0;
 14945  1196  0021               	movlb	1	; select bank1
 14946  1197  18D7               	btfsc	_Temp^(0+128),1
 14947  1198  299D               	goto	l6234
 14948  1199  0020               	movlb	0	; select bank0
 14949  119A  01A1               	clrf	_getMain_All_Error_Status$3401
 14950  119B  01A2               	clrf	_getMain_All_Error_Status$3401+1
 14951  119C  29A2               	goto	l1428
 14952  119D                     l6234:	
 14953  119D  3002               	movlw	2
 14954  119E  0020               	movlb	0	; select bank0
 14955  119F  00A1               	movwf	_getMain_All_Error_Status$3401
 14956  11A0  3000               	movlw	0
 14957  11A1  00A2               	movwf	_getMain_All_Error_Status$3401+1
 14958  11A2                     l1428:	
 14959  11A2  0821               	movf	_getMain_All_Error_Status$3401,w
 14960  11A3  00A0               	movwf	??_getMain_All_Error_Status
 14961  11A4  0820               	movf	??_getMain_All_Error_Status,w
 14962  11A5  00A6               	movwf	getMain_All_Error_Status@status
 14963  11A6                     l6236:	
 14964                           
 14965                           ;Main_B1.c: 418: }
 14966                           ;Main_B1.c: 423: if (status == 0 && command != 3) {
 14967  11A6  08A6               	movf	getMain_All_Error_Status@status,f
 14968  11A7  1D03               	skipz
 14969  11A8  29BD               	goto	l1429
 14970  11A9  0825               	movf	getMain_All_Error_Status@command,w
 14971  11AA  3A03               	xorlw	3
 14972  11AB  1903               	skipnz
 14973  11AC  29BD               	goto	l1429
 14974                           
 14975                           ;Main_B1.c: 424: status = Load.ERROR == 1 ? 3 : 0;
 14976  11AD  0022               	movlb	2	; select bank2
 14977  11AE  1AC1               	btfsc	_Load^(0+256),5
 14978  11AF  29B4               	goto	l6244
 14979  11B0  0020               	movlb	0	; select bank0
 14980  11B1  01A3               	clrf	_getMain_All_Error_Status$3402
 14981  11B2  01A4               	clrf	_getMain_All_Error_Status$3402+1
 14982  11B3  29B9               	goto	l1433
 14983  11B4                     l6244:	
 14984  11B4  3003               	movlw	3
 14985  11B5  0020               	movlb	0	; select bank0
 14986  11B6  00A3               	movwf	_getMain_All_Error_Status$3402
 14987  11B7  3000               	movlw	0
 14988  11B8  00A4               	movwf	_getMain_All_Error_Status$3402+1
 14989  11B9                     l1433:	
 14990  11B9  0823               	movf	_getMain_All_Error_Status$3402,w
 14991  11BA  00A0               	movwf	??_getMain_All_Error_Status
 14992  11BB  0820               	movf	??_getMain_All_Error_Status,w
 14993  11BC  00A6               	movwf	getMain_All_Error_Status@status
 14994  11BD                     l1429:	
 14995                           
 14996                           ;Main_B1.c: 425: }
 14997                           ;Main_B1.c: 441: return status;
 14998  11BD  0826               	movf	getMain_All_Error_Status@status,w
 14999  11BE  0008               	return
 15000  11BF                     __end_of_getMain_All_Error_Status:	
 15001                           
 15002                           	psect	text90
 15003  109D                     __ptext90:	
 15004 ;; *************** function _getMain_LightsStatus *****************
 15005 ;; Defined at:
 15006 ;;		line 375 in file "../src/Main_B1.c"
 15007 ;; Parameters:    Size  Location     Type
 15008 ;;		None
 15009 ;; Auto vars:     Size  Location     Type
 15010 ;;  i               2    6[BANK0 ] int 
 15011 ;;  status          1    8[BANK0 ] unsigned char 
 15012 ;;  count           1    5[BANK0 ] unsigned char 
 15013 ;; Return value:  Size  Location     Type
 15014 ;;                  1    wreg      unsigned char 
 15015 ;; Registers used:
 15016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15017 ;; Tracked objects:
 15018 ;;		On entry : 0/0
 15019 ;;		On exit  : 0/0
 15020 ;;		Unchanged: 0/0
 15021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15026 ;;Total ram usage:        5 bytes
 15027 ;; Hardware stack levels used:    1
 15028 ;; Hardware stack levels required when called:    7
 15029 ;; This function calls:
 15030 ;;		_getDimmerLights_Status
 15031 ;; This function is called by:
 15032 ;;		_DimmerLights_Main
 15033 ;;		_Flash_Memory_Main
 15034 ;;		_Exception_Main
 15035 ;;		_Load_Main
 15036 ;;		_setMain_Exception
 15037 ;; This function uses a non-reentrant model
 15038 ;;
 15039                           
 15040                           
 15041                           ;psect for function _getMain_LightsStatus
 15042  109D                     _getMain_LightsStatus:	
 15043                           
 15044                           ;Main_B1.c: 376: char status = 0, count = 0;
 15045                           
 15046                           ;incstack = 0
 15047                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15048  109D  0020               	movlb	0	; select bank0
 15049  109E  01A8               	clrf	getMain_LightsStatus@status
 15050  109F  01A5               	clrf	getMain_LightsStatus@count
 15051                           
 15052                           ;Main_B1.c: 379: count = 1;
 15053  10A0  01A5               	clrf	getMain_LightsStatus@count
 15054  10A1  0AA5               	incf	getMain_LightsStatus@count,f
 15055                           
 15056                           ;Main_B1.c: 390: for (int i = 0; i < count; i++) {
 15057  10A2  01A6               	clrf	getMain_LightsStatus@i
 15058  10A3  01A7               	clrf	getMain_LightsStatus@i+1
 15059  10A4                     l6942:	
 15060  10A4  0827               	movf	getMain_LightsStatus@i+1,w
 15061  10A5  3A80               	xorlw	128
 15062  10A6  00A4               	movwf	??_getMain_LightsStatus
 15063  10A7  3080               	movlw	128
 15064  10A8  0224               	subwf	??_getMain_LightsStatus,w
 15065  10A9  1D03               	skipz
 15066  10AA  28AD               	goto	u6415
 15067  10AB  0825               	movf	getMain_LightsStatus@count,w
 15068  10AC  0226               	subwf	getMain_LightsStatus@i,w
 15069  10AD                     u6415:	
 15070  10AD  1803               	btfsc	3,0
 15071  10AE  28C5               	goto	l6944
 15072                           
 15073                           ;Main_B1.c: 391: if (status == 0) {
 15074  10AF  0020               	movlb	0	; select bank0
 15075  10B0  08A8               	movf	getMain_LightsStatus@status,f
 15076  10B1  1D03               	skipz
 15077  10B2  28C0               	goto	l6940
 15078                           
 15079                           ;Main_B1.c: 396: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 15080  10B3  0826               	movf	getMain_LightsStatus@i,w
 15081  10B4  3E01               	addlw	1
 15082  10B5  319C  24FB  3190   	fcall	_getDimmerLights_Status
 15083  10B8  3A01               	xorlw	1
 15084  10B9  3000               	movlw	0
 15085  10BA  1903               	skipnz
 15086  10BB  3001               	movlw	1
 15087  10BC  0020               	movlb	0	; select bank0
 15088  10BD  00A4               	movwf	??_getMain_LightsStatus
 15089  10BE  0824               	movf	??_getMain_LightsStatus,w
 15090  10BF  00A8               	movwf	getMain_LightsStatus@status
 15091  10C0                     l6940:	
 15092  10C0  3001               	movlw	1
 15093  10C1  07A6               	addwf	getMain_LightsStatus@i,f
 15094  10C2  3000               	movlw	0
 15095  10C3  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15096  10C4  28A4               	goto	l6942
 15097  10C5                     l6944:	
 15098                           
 15099                           ;Main_B1.c: 398: }
 15100                           ;Main_B1.c: 399: }
 15101                           ;Main_B1.c: 400: return status;
 15102  10C5  0020               	movlb	0	; select bank0
 15103  10C6  0828               	movf	getMain_LightsStatus@status,w
 15104  10C7  0008               	return
 15105  10C8                     __end_of_getMain_LightsStatus:	
 15106                           
 15107                           	psect	text91
 15108  1BCC                     __ptext91:	
 15109 ;; *************** function _getLoad_OK *****************
 15110 ;; Defined at:
 15111 ;;		line 230 in file "../src/OverLoad_B1.c"
 15112 ;; Parameters:    Size  Location     Type
 15113 ;;		None
 15114 ;; Auto vars:     Size  Location     Type
 15115 ;;  ok              1    0[BANK0 ] unsigned char 
 15116 ;; Return value:  Size  Location     Type
 15117 ;;                  1    wreg      unsigned char 
 15118 ;; Registers used:
 15119 ;;		wreg, status,2
 15120 ;; Tracked objects:
 15121 ;;		On entry : 0/0
 15122 ;;		On exit  : 0/0
 15123 ;;		Unchanged: 0/0
 15124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;Total ram usage:        1 bytes
 15130 ;; Hardware stack levels used:    1
 15131 ;; Hardware stack levels required when called:    5
 15132 ;; This function calls:
 15133 ;;		Nothing
 15134 ;; This function is called by:
 15135 ;;		_DimmerLights_Main
 15136 ;; This function uses a non-reentrant model
 15137 ;;
 15138                           
 15139                           
 15140                           ;psect for function _getLoad_OK
 15141  1BCC                     _getLoad_OK:	
 15142                           
 15143                           ;OverLoad_B1.c: 231: char ok = Load.OK == 1 ? 1 : 0;
 15144                           
 15145                           ;incstack = 0
 15146                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15147  1BCC  3000               	movlw	0
 15148  1BCD  0022               	movlb	2	; select bank2
 15149  1BCE  1BC1               	btfsc	_Load^(0+256),7
 15150  1BCF  3001               	movlw	1
 15151  1BD0  0020               	movlb	0	; select bank0
 15152  1BD1  00A0               	movwf	getLoad_OK@ok
 15153                           
 15154                           ;OverLoad_B1.c: 233: return ok;
 15155  1BD2  0820               	movf	getLoad_OK@ok,w
 15156  1BD3  0008               	return
 15157  1BD4                     __end_of_getLoad_OK:	
 15158                           
 15159                           	psect	text92
 15160  1C01                     __ptext92:	
 15161 ;; *************** function _DimmerLights_Initialization *****************
 15162 ;; Defined at:
 15163 ;;		line 329 in file "../src/Dimmer_B1.c"
 15164 ;; Parameters:    Size  Location     Type
 15165 ;;		None
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;		None
 15168 ;; Return value:  Size  Location     Type
 15169 ;;		None               void
 15170 ;; Registers used:
 15171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;Total ram usage:        1 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:    7
 15184 ;; This function calls:
 15185 ;;		_setDimmerLights_Initialization
 15186 ;; This function is called by:
 15187 ;;		_main
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function _DimmerLights_Initialization
 15193  1C01                     _DimmerLights_Initialization:	
 15194                           
 15195                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 15196                           
 15197                           ;incstack = 0
 15198                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15199  1C01  30C5               	movlw	_DimmerLights1& (0+255)
 15200  1C02  0020               	movlb	0	; select bank0
 15201  1C03  00A4               	movwf	??_DimmerLights_Initialization
 15202  1C04  0824               	movf	??_DimmerLights_Initialization,w
 15203  1C05  0021               	movlb	1	; select bank1
 15204  1C06  00CE               	movwf	_DimmerLights11^(0+128)
 15205                           
 15206                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 15207  1C07  3001               	movlw	1
 15208  1C08  319F  27AF         	fcall	_setDimmerLights_Initialization
 15209  1C0A  0008               	return
 15210  1C0B                     __end_of_DimmerLights_Initialization:	
 15211                           
 15212                           	psect	text93
 15213  1FAF                     __ptext93:	
 15214 ;; *************** function _setDimmerLights_Initialization *****************
 15215 ;; Defined at:
 15216 ;;		line 352 in file "../src/Dimmer_B1.c"
 15217 ;; Parameters:    Size  Location     Type
 15218 ;;  lights          1    wreg     unsigned char 
 15219 ;; Auto vars:     Size  Location     Type
 15220 ;;  lights          1    3[BANK0 ] unsigned char 
 15221 ;; Return value:  Size  Location     Type
 15222 ;;		None               void
 15223 ;; Registers used:
 15224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15225 ;; Tracked objects:
 15226 ;;		On entry : 0/0
 15227 ;;		On exit  : 0/0
 15228 ;;		Unchanged: 0/0
 15229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15234 ;;Total ram usage:        2 bytes
 15235 ;; Hardware stack levels used:    1
 15236 ;; Hardware stack levels required when called:    6
 15237 ;; This function calls:
 15238 ;;		_DimmerLightsPointSelect
 15239 ;; This function is called by:
 15240 ;;		_DimmerLights_Initialization
 15241 ;; This function uses a non-reentrant model
 15242 ;;
 15243                           
 15244                           
 15245                           ;psect for function _setDimmerLights_Initialization
 15246  1FAF                     _setDimmerLights_Initialization:	
 15247                           
 15248                           ;incstack = 0
 15249                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15250                           ;setDimmerLights_Initialization@lights stored from wreg
 15251  1FAF  0020               	movlb	0	; select bank0
 15252  1FB0  00A3               	movwf	setDimmerLights_Initialization@lights
 15253                           
 15254                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 15255  1FB1  0823               	movf	setDimmerLights_Initialization@lights,w
 15256  1FB2  319C  2421         	fcall	_DimmerLightsPointSelect
 15257                           
 15258                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(65*0.8));
 15259  1FB4  3034               	movlw	52
 15260  1FB5  0020               	movlb	0	; select bank0
 15261  1FB6  00A2               	movwf	??_setDimmerLights_Initialization
 15262  1FB7  086F               	movf	_DimmerLights,w
 15263  1FB8  3E06               	addlw	6
 15264  1FB9  0086               	movwf	6
 15265  1FBA  3001               	movlw	1	; select bank2/3
 15266  1FBB  0087               	movwf	7
 15267  1FBC  0822               	movf	??_setDimmerLights_Initialization,w
 15268  1FBD  0081               	movwf	1
 15269                           
 15270                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 15271  1FBE  300C               	movlw	12
 15272  1FBF  00A2               	movwf	??_setDimmerLights_Initialization
 15273  1FC0  086F               	movf	_DimmerLights,w
 15274  1FC1  3E09               	addlw	9
 15275  1FC2  0086               	movwf	6
 15276  1FC3  3001               	movlw	1	; select bank2/3
 15277  1FC4  0087               	movwf	7
 15278  1FC5  0822               	movf	??_setDimmerLights_Initialization,w
 15279  1FC6  0081               	movwf	1
 15280                           
 15281                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15282  1FC7  086F               	movf	_DimmerLights,w
 15283  1FC8  3E06               	addlw	6
 15284  1FC9  0086               	movwf	6
 15285  1FCA  3001               	movlw	1	; select bank2/3
 15286  1FCB  0087               	movwf	7
 15287  1FCC  0801               	movf	1,w
 15288  1FCD  00A2               	movwf	??_setDimmerLights_Initialization
 15289  1FCE  086F               	movf	_DimmerLights,w
 15290  1FCF  3E04               	addlw	4
 15291  1FD0  0086               	movwf	6
 15292  1FD1  3001               	movlw	1	; select bank2/3
 15293  1FD2  0087               	movwf	7
 15294  1FD3  0822               	movf	??_setDimmerLights_Initialization,w
 15295  1FD4  0081               	movwf	1
 15296  1FD5  0008               	return
 15297  1FD6                     __end_of_setDimmerLights_Initialization:	
 15298                           
 15299                           	psect	text94
 15300  1B8E                     __ptext94:	
 15301 ;; *************** function _DelayOff_Main *****************
 15302 ;; Defined at:
 15303 ;;		line 41 in file "../src/DelayOff_B1.c"
 15304 ;; Parameters:    Size  Location     Type
 15305 ;;		None
 15306 ;; Auto vars:     Size  Location     Type
 15307 ;;		None
 15308 ;; Return value:  Size  Location     Type
 15309 ;;		None               void
 15310 ;; Registers used:
 15311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15312 ;; Tracked objects:
 15313 ;;		On entry : 0/0
 15314 ;;		On exit  : 0/0
 15315 ;;		Unchanged: 0/0
 15316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15321 ;;Total ram usage:        0 bytes
 15322 ;; Hardware stack levels used:    1
 15323 ;; Hardware stack levels required when called:   11
 15324 ;; This function calls:
 15325 ;;		_DlyOff_Main
 15326 ;; This function is called by:
 15327 ;;		_main
 15328 ;; This function uses a non-reentrant model
 15329 ;;
 15330                           
 15331                           
 15332                           ;psect for function _DelayOff_Main
 15333  1B8E                     _DelayOff_Main:	
 15334                           
 15335                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15336                           
 15337                           ;incstack = 0
 15338                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15339  1B8E  3001               	movlw	1
 15340  1B8F  3188  200F         	fcall	_DlyOff_Main
 15341  1B91  0008               	return
 15342  1B92                     __end_of_DelayOff_Main:	
 15343                           
 15344                           	psect	text95
 15345  080F                     __ptext95:	
 15346 ;; *************** function _DlyOff_Main *****************
 15347 ;; Defined at:
 15348 ;;		line 61 in file "../src/DelayOff_B1.c"
 15349 ;; Parameters:    Size  Location     Type
 15350 ;;  sw              1    wreg     unsigned char 
 15351 ;; Auto vars:     Size  Location     Type
 15352 ;;  sw              1   24[BANK0 ] unsigned char 
 15353 ;; Return value:  Size  Location     Type
 15354 ;;		None               void
 15355 ;; Registers used:
 15356 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15357 ;; Tracked objects:
 15358 ;;		On entry : 0/0
 15359 ;;		On exit  : 0/0
 15360 ;;		Unchanged: 0/0
 15361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15364 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15365 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15366 ;;Total ram usage:        3 bytes
 15367 ;; Hardware stack levels used:    1
 15368 ;; Hardware stack levels required when called:   10
 15369 ;; This function calls:
 15370 ;;		_DelayOffPointSelect
 15371 ;;		_setBuz
 15372 ;;		_setDimmerLights_ErrorClose
 15373 ;; This function is called by:
 15374 ;;		_DelayOff_Main
 15375 ;; This function uses a non-reentrant model
 15376 ;;
 15377                           
 15378                           
 15379                           ;psect for function _DlyOff_Main
 15380  080F                     _DlyOff_Main:	
 15381                           
 15382                           ;incstack = 0
 15383                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15384                           ;DlyOff_Main@sw stored from wreg
 15385  080F  0020               	movlb	0	; select bank0
 15386  0810  00B8               	movwf	DlyOff_Main@sw
 15387                           
 15388                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15389  0811  0838               	movf	DlyOff_Main@sw,w
 15390  0812  319C  2416  3188   	fcall	_DelayOffPointSelect
 15391                           
 15392                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15393  0815  0878               	movf	_DelayOff,w
 15394  0816  0086               	movwf	6
 15395  0817  3001               	movlw	1	; select bank2/3
 15396  0818  0087               	movwf	7
 15397  0819  1C81               	btfss	1,1
 15398  081A  0008               	return
 15399                           
 15400                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15401  081B  0878               	movf	_DelayOff,w
 15402  081C  3E02               	addlw	2
 15403  081D  0086               	movwf	6
 15404  081E  3001               	movlw	1	; select bank2/3
 15405  081F  0087               	movwf	7
 15406  0820  3001               	movlw	1
 15407  0821  0781               	addwf	1,f
 15408  0822  3141               	addfsr 1,1
 15409  0823  1803               	skipnc
 15410  0824  0A81               	incf	1,f
 15411                           
 15412                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15413  0825  0878               	movf	_DelayOff,w
 15414  0826  3E02               	addlw	2
 15415  0827  0086               	movwf	6
 15416  0828  3001               	movlw	1	; select bank2/3
 15417  0829  0087               	movwf	7
 15418  082A  3F40               	moviw [0]fsr1
 15419  082B  0020               	movlb	0	; select bank0
 15420  082C  00B6               	movwf	??_DlyOff_Main
 15421  082D  3F41               	moviw [1]fsr1
 15422  082E  00B7               	movwf	??_DlyOff_Main+1
 15423  082F  3017               	movlw	23
 15424  0830  0237               	subwf	??_DlyOff_Main+1,w
 15425  0831  3070               	movlw	112
 15426  0832  1903               	skipnz
 15427  0833  0236               	subwf	??_DlyOff_Main,w
 15428  0834  1C03               	skipc
 15429  0835  0008               	return
 15430                           
 15431                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15432  0836  0878               	movf	_DelayOff,w
 15433  0837  3E02               	addlw	2
 15434  0838  0086               	movwf	6
 15435  0839  3001               	movlw	1	; select bank2/3
 15436  083A  0087               	movwf	7
 15437  083B  3000               	movlw	0
 15438  083C  3FC0               	movwi [0]fsr1
 15439  083D  3FC1               	movwi [1]fsr1
 15440                           
 15441                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15442  083E  3001               	movlw	1
 15443  083F  00B6               	movwf	??_DlyOff_Main
 15444  0840  0878               	movf	_DelayOff,w
 15445  0841  3E04               	addlw	4
 15446  0842  0086               	movwf	6
 15447  0843  3001               	movlw	1	; select bank2/3
 15448  0844  0087               	movwf	7
 15449  0845  0836               	movf	??_DlyOff_Main,w
 15450  0846  0781               	addwf	1,f
 15451                           
 15452                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15453  0847  0878               	movf	_DelayOff,w
 15454  0848  3E04               	addlw	4
 15455  0849  0086               	movwf	6
 15456  084A  3001               	movlw	1	; select bank2/3
 15457  084B  0087               	movwf	7
 15458  084C  0A78               	incf	_DelayOff,w
 15459  084D  0084               	movwf	4
 15460  084E  3001               	movlw	1	; select bank2/3
 15461  084F  0085               	movwf	5
 15462  0850  0800               	movf	0,w
 15463  0851  0201               	subwf	1,w
 15464  0852  1C03               	skipc
 15465  0853  0008               	return
 15466                           
 15467                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15468  0854  0878               	movf	_DelayOff,w
 15469  0855  3E04               	addlw	4
 15470  0856  0086               	movwf	6
 15471  0857  3001               	movlw	1	; select bank2/3
 15472  0858  0087               	movwf	7
 15473  0859  0181               	clrf	1
 15474                           
 15475                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15476  085A  0878               	movf	_DelayOff,w
 15477  085B  0086               	movwf	6
 15478  085C  3001               	movlw	1	; select bank2/3
 15479  085D  0087               	movwf	7
 15480  085E  1081               	bcf	1,1
 15481                           
 15482                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15483  085F  3064               	movlw	100
 15484  0860  00A9               	movwf	setBuz@time
 15485  0861  3000               	movlw	0
 15486  0862  00AA               	movwf	setBuz@time+1
 15487  0863  3001               	movlw	1
 15488  0864  3195  25E0  3188   	fcall	_setBuz
 15489                           
 15490                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15491  0867  0020               	movlb	0	; select bank0
 15492  0868  0838               	movf	DlyOff_Main@sw,w
 15493  0869  3196  2692         	fcall	_setDimmerLights_ErrorClose
 15494  086B  0008               	return
 15495  086C                     __end_of_DlyOff_Main:	
 15496                           
 15497                           	psect	text96
 15498  1692                     __ptext96:	
 15499 ;; *************** function _setDimmerLights_ErrorClose *****************
 15500 ;; Defined at:
 15501 ;;		line 585 in file "../src/Dimmer_B1.c"
 15502 ;; Parameters:    Size  Location     Type
 15503 ;;  lights          1    wreg     unsigned char 
 15504 ;; Auto vars:     Size  Location     Type
 15505 ;;  lights          1   19[BANK0 ] unsigned char 
 15506 ;;  i               2   20[BANK0 ] int 
 15507 ;;  count           1   18[BANK0 ] unsigned char 
 15508 ;; Return value:  Size  Location     Type
 15509 ;;		None               void
 15510 ;; Registers used:
 15511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15512 ;; Tracked objects:
 15513 ;;		On entry : 0/0
 15514 ;;		On exit  : 0/0
 15515 ;;		Unchanged: 0/0
 15516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15521 ;;Total ram usage:        5 bytes
 15522 ;; Hardware stack levels used:    1
 15523 ;; Hardware stack levels required when called:    9
 15524 ;; This function calls:
 15525 ;;		_DimmerLightsPointSelect
 15526 ;;		_getDimmerLights_Status
 15527 ;;		_setDimmerLights_SwOff
 15528 ;; This function is called by:
 15529 ;;		_DlyOff_Main
 15530 ;;		_setControl_Lights_Table
 15531 ;;		_setMain_Exception
 15532 ;; This function uses a non-reentrant model
 15533 ;;
 15534                           
 15535                           
 15536                           ;psect for function _setDimmerLights_ErrorClose
 15537  1692                     _setDimmerLights_ErrorClose:	
 15538                           
 15539                           ;incstack = 0
 15540                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15541                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15542  1692  0020               	movlb	0	; select bank0
 15543  1693  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15544                           
 15545                           ;Dimmer_B1.c: 586: if (lights == 255) {
 15546  1694  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15547  1695  3AFF               	xorlw	255
 15548  1696  1D03               	skipz
 15549  1697  2ECE               	goto	l6134
 15550                           
 15551                           ;Dimmer_B1.c: 588: char count = 1;
 15552  1698  01B2               	clrf	setDimmerLights_ErrorClose@count
 15553  1699  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 15554                           
 15555                           ;Dimmer_B1.c: 596: for (int i = 0; i < count; i++) {
 15556  169A  01B4               	clrf	setDimmerLights_ErrorClose@i
 15557  169B  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15558  169C                     l6132:	
 15559  169C  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15560  169D  3A80               	xorlw	128
 15561  169E  00B1               	movwf	??_setDimmerLights_ErrorClose
 15562  169F  3080               	movlw	128
 15563  16A0  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15564  16A1  1D03               	skipz
 15565  16A2  2EA5               	goto	u5185
 15566  16A3  0832               	movf	setDimmerLights_ErrorClose@count,w
 15567  16A4  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15568  16A5                     u5185:	
 15569  16A5  1803               	btfsc	3,0
 15570  16A6  0008               	return
 15571                           
 15572                           ;Dimmer_B1.c: 597: DimmerLightsPointSelect(i + 1);
 15573  16A7  0020               	movlb	0	; select bank0
 15574  16A8  0834               	movf	setDimmerLights_ErrorClose@i,w
 15575  16A9  3E01               	addlw	1
 15576  16AA  319C  2421  3196   	fcall	_DimmerLightsPointSelect
 15577                           
 15578                           ;Dimmer_B1.c: 598: if (getDimmerLights_Status(i + 1) == 1) {
 15579  16AD  0020               	movlb	0	; select bank0
 15580  16AE  0834               	movf	setDimmerLights_ErrorClose@i,w
 15581  16AF  3E01               	addlw	1
 15582  16B0  319C  24FB  3196   	fcall	_getDimmerLights_Status
 15583  16B3  3A01               	xorlw	1
 15584  16B4  1D03               	skipz
 15585  16B5  2EC8               	goto	l6130
 15586                           
 15587                           ;Dimmer_B1.c: 599: DimmerLights->SwFlag = 1;
 15588  16B6  0020               	movlb	0	; select bank0
 15589  16B7  086F               	movf	_DimmerLights,w
 15590  16B8  3E0B               	addlw	11
 15591  16B9  0086               	movwf	6
 15592  16BA  3001               	movlw	1	; select bank2/3
 15593  16BB  0087               	movwf	7
 15594  16BC  1481               	bsf	1,1
 15595                           
 15596                           ;Dimmer_B1.c: 600: DimmerLights->Status = 0;
 15597  16BD  086F               	movf	_DimmerLights,w
 15598  16BE  3E02               	addlw	2
 15599  16BF  0086               	movwf	6
 15600  16C0  3001               	movlw	1	; select bank2/3
 15601  16C1  0087               	movwf	7
 15602  16C2  1081               	bcf	1,1
 15603                           
 15604                           ;Dimmer_B1.c: 601: setDimmerLights_SwOff(i + 1);
 15605  16C3  0834               	movf	setDimmerLights_ErrorClose@i,w
 15606  16C4  3E01               	addlw	1
 15607  16C5  3195  2588  3196   	fcall	_setDimmerLights_SwOff
 15608  16C8                     l6130:	
 15609  16C8  3001               	movlw	1
 15610  16C9  0020               	movlb	0	; select bank0
 15611  16CA  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15612  16CB  3000               	movlw	0
 15613  16CC  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15614  16CD  2E9C               	goto	l6132
 15615  16CE                     l6134:	
 15616                           ;Dimmer_B1.c: 602: }
 15617                           ;Dimmer_B1.c: 603: }
 15618                           ;Dimmer_B1.c: 604: } else {
 15619                           
 15620                           
 15621                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(lights);
 15622  16CE  0020               	movlb	0	; select bank0
 15623  16CF  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15624  16D0  319C  2421  3196   	fcall	_DimmerLightsPointSelect
 15625                           
 15626                           ;Dimmer_B1.c: 606: if (getDimmerLights_Status(lights) == 1) {
 15627  16D3  0020               	movlb	0	; select bank0
 15628  16D4  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15629  16D5  319C  24FB  3196   	fcall	_getDimmerLights_Status
 15630  16D8  3A01               	xorlw	1
 15631  16D9  1D03               	skipz
 15632  16DA  0008               	return
 15633                           
 15634                           ;Dimmer_B1.c: 607: DimmerLights->SwFlag = 1;
 15635  16DB  0020               	movlb	0	; select bank0
 15636  16DC  086F               	movf	_DimmerLights,w
 15637  16DD  3E0B               	addlw	11
 15638  16DE  0086               	movwf	6
 15639  16DF  3001               	movlw	1	; select bank2/3
 15640  16E0  0087               	movwf	7
 15641  16E1  1481               	bsf	1,1
 15642                           
 15643                           ;Dimmer_B1.c: 608: DimmerLights->Status = 0;
 15644  16E2  086F               	movf	_DimmerLights,w
 15645  16E3  3E02               	addlw	2
 15646  16E4  0086               	movwf	6
 15647  16E5  3001               	movlw	1	; select bank2/3
 15648  16E6  0087               	movwf	7
 15649  16E7  1081               	bcf	1,1
 15650                           
 15651                           ;Dimmer_B1.c: 609: setDimmerLights_SwOff(lights);
 15652  16E8  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15653  16E9  3195  2588         	fcall	_setDimmerLights_SwOff
 15654  16EB  0008               	return
 15655  16EC                     __end_of_setDimmerLights_ErrorClose:	
 15656                           
 15657                           	psect	text97
 15658  1588                     __ptext97:	
 15659 ;; *************** function _setDimmerLights_SwOff *****************
 15660 ;; Defined at:
 15661 ;;		line 541 in file "../src/Dimmer_B1.c"
 15662 ;; Parameters:    Size  Location     Type
 15663 ;;  sw              1    wreg     unsigned char 
 15664 ;; Auto vars:     Size  Location     Type
 15665 ;;  sw              1   16[BANK0 ] unsigned char 
 15666 ;;  command         1   15[BANK0 ] unsigned char 
 15667 ;; Return value:  Size  Location     Type
 15668 ;;		None               void
 15669 ;; Registers used:
 15670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15671 ;; Tracked objects:
 15672 ;;		On entry : 0/0
 15673 ;;		On exit  : 0/0
 15674 ;;		Unchanged: 0/0
 15675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15677 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15680 ;;Total ram usage:        2 bytes
 15681 ;; Hardware stack levels used:    1
 15682 ;; Hardware stack levels required when called:    8
 15683 ;; This function calls:
 15684 ;;		_DimmerLightsPointSelect
 15685 ;;		_getDelayOff_GO
 15686 ;;		_setDelayOff_GO
 15687 ;; This function is called by:
 15688 ;;		_setDimmerLights_ErrorClose
 15689 ;;		_Exception_Main
 15690 ;;		_setRFSW_Control
 15691 ;;		_setSw_Main
 15692 ;; This function uses a non-reentrant model
 15693 ;;
 15694                           
 15695                           
 15696                           ;psect for function _setDimmerLights_SwOff
 15697  1588                     _setDimmerLights_SwOff:	
 15698                           
 15699                           ;incstack = 0
 15700                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15701                           ;setDimmerLights_SwOff@sw stored from wreg
 15702  1588  0020               	movlb	0	; select bank0
 15703  1589  00B0               	movwf	setDimmerLights_SwOff@sw
 15704                           
 15705                           ;Dimmer_B1.c: 542: DimmerLightsPointSelect(sw);
 15706  158A  0830               	movf	setDimmerLights_SwOff@sw,w
 15707  158B  319C  2421  3195   	fcall	_DimmerLightsPointSelect
 15708                           
 15709                           ;Dimmer_B1.c: 543: char command = DimmerLights->Status == 1 ? 1 : 0;
 15710  158E  0020               	movlb	0	; select bank0
 15711  158F  086F               	movf	_DimmerLights,w
 15712  1590  3E02               	addlw	2
 15713  1591  0086               	movwf	6
 15714  1592  3001               	movlw	1	; select bank2/3
 15715  1593  0087               	movwf	7
 15716  1594  3000               	movlw	0
 15717  1595  1881               	btfsc	1,1
 15718  1596  3001               	movlw	1
 15719  1597  00AF               	movwf	setDimmerLights_SwOff@command
 15720                           
 15721                           ;Dimmer_B1.c: 544: if (DimmerLights->SwFlag == 1) {
 15722  1598  086F               	movf	_DimmerLights,w
 15723  1599  3E0B               	addlw	11
 15724  159A  0086               	movwf	6
 15725  159B  3001               	movlw	1	; select bank2/3
 15726  159C  0087               	movwf	7
 15727  159D  1C81               	btfss	1,1
 15728  159E  0008               	return
 15729                           
 15730                           ;Dimmer_B1.c: 545: DimmerLights->SwFlag = 0;
 15731  159F  086F               	movf	_DimmerLights,w
 15732  15A0  3E0B               	addlw	11
 15733  15A1  0086               	movwf	6
 15734  15A2  3001               	movlw	1	; select bank2/3
 15735  15A3  0087               	movwf	7
 15736  15A4  1081               	bcf	1,1
 15737                           
 15738                           ;Dimmer_B1.c: 546: if (DimmerLights->Status == 1) {
 15739  15A5  086F               	movf	_DimmerLights,w
 15740  15A6  3E02               	addlw	2
 15741  15A7  0086               	movwf	6
 15742  15A8  3001               	movlw	1	; select bank2/3
 15743  15A9  0087               	movwf	7
 15744  15AA  1C81               	btfss	1,1
 15745  15AB  2DC6               	goto	l5988
 15746                           
 15747                           ;Dimmer_B1.c: 547: if (DimmerLights->SwAdj == 1) {
 15748  15AC  086F               	movf	_DimmerLights,w
 15749  15AD  3E0B               	addlw	11
 15750  15AE  0086               	movwf	6
 15751  15AF  3001               	movlw	1	; select bank2/3
 15752  15B0  0087               	movwf	7
 15753  15B1  1D01               	btfss	1,2
 15754  15B2  0008               	return
 15755                           
 15756                           ;Dimmer_B1.c: 548: DimmerLights->SwAdj = 0;
 15757  15B3  086F               	movf	_DimmerLights,w
 15758  15B4  3E0B               	addlw	11
 15759  15B5  0086               	movwf	6
 15760  15B6  3001               	movlw	1	; select bank2/3
 15761  15B7  0087               	movwf	7
 15762  15B8  1101               	bcf	1,2
 15763                           
 15764                           ;Dimmer_B1.c: 549: DimmerLights->TriggerAdj = 1;
 15765  15B9  086F               	movf	_DimmerLights,w
 15766  15BA  3E0A               	addlw	10
 15767  15BB  0086               	movwf	6
 15768  15BC  3001               	movlw	1	; select bank2/3
 15769  15BD  0087               	movwf	7
 15770  15BE  1581               	bsf	1,3
 15771                           
 15772                           ;Dimmer_B1.c: 550: DimmerLights->AdjGo = 0;
 15773  15BF  086F               	movf	_DimmerLights,w
 15774  15C0  3E0A               	addlw	10
 15775  15C1  0086               	movwf	6
 15776  15C2  3001               	movlw	1	; select bank2/3
 15777  15C3  0087               	movwf	7
 15778  15C4  1101               	bcf	1,2
 15779                           
 15780                           ;Dimmer_B1.c: 552: }
 15781                           ;Dimmer_B1.c: 553: } else {
 15782  15C5  0008               	return
 15783  15C6                     l5988:	
 15784                           
 15785                           ;Dimmer_B1.c: 554: DimmerLights->Trigger = 1;
 15786  15C6  086F               	movf	_DimmerLights,w
 15787  15C7  3E0A               	addlw	10
 15788  15C8  0086               	movwf	6
 15789  15C9  3001               	movlw	1	; select bank2/3
 15790  15CA  0087               	movwf	7
 15791  15CB  1481               	bsf	1,1
 15792                           
 15793                           ;Dimmer_B1.c: 555: DimmerLights->Switch = 0;
 15794  15CC  086F               	movf	_DimmerLights,w
 15795  15CD  3E0A               	addlw	10
 15796  15CE  0086               	movwf	6
 15797  15CF  3001               	movlw	1	; select bank2/3
 15798  15D0  0087               	movwf	7
 15799  15D1  1001               	bcf	1,0
 15800                           
 15801                           ;Dimmer_B1.c: 558: if (getDelayOff_GO(sw) == 1) {
 15802  15D2  0830               	movf	setDimmerLights_SwOff@sw,w
 15803  15D3  319C  24CB  3195   	fcall	_getDelayOff_GO
 15804  15D6  3A01               	xorlw	1
 15805  15D7  1D03               	skipz
 15806  15D8  0008               	return
 15807                           
 15808                           ;Dimmer_B1.c: 559: setDelayOff_GO(sw, 0, 0);
 15809  15D9  0020               	movlb	0	; select bank0
 15810  15DA  01AA               	clrf	setDelayOff_GO@command
 15811  15DB  01AB               	clrf	setDelayOff_GO@value
 15812  15DC  0830               	movf	setDimmerLights_SwOff@sw,w
 15813  15DD  3197  27A3         	fcall	_setDelayOff_GO
 15814  15DF  0008               	return
 15815  15E0                     __end_of_setDimmerLights_SwOff:	
 15816                           
 15817                           	psect	text98
 15818  17A3                     __ptext98:	
 15819 ;; *************** function _setDelayOff_GO *****************
 15820 ;; Defined at:
 15821 ;;		line 83 in file "../src/DelayOff_B1.c"
 15822 ;; Parameters:    Size  Location     Type
 15823 ;;  sw              1    wreg     unsigned char 
 15824 ;;  command         1   10[BANK0 ] unsigned char 
 15825 ;;  value           1   11[BANK0 ] unsigned char 
 15826 ;; Auto vars:     Size  Location     Type
 15827 ;;  sw              1   14[BANK0 ] unsigned char 
 15828 ;; Return value:  Size  Location     Type
 15829 ;;		None               void
 15830 ;; Registers used:
 15831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15832 ;; Tracked objects:
 15833 ;;		On entry : 0/0
 15834 ;;		On exit  : 0/0
 15835 ;;		Unchanged: 0/0
 15836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15837 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15839 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15840 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15841 ;;Total ram usage:        5 bytes
 15842 ;; Hardware stack levels used:    1
 15843 ;; Hardware stack levels required when called:    7
 15844 ;; This function calls:
 15845 ;;		_DelayOffPointSelect
 15846 ;;		_DelayTimejudge
 15847 ;; This function is called by:
 15848 ;;		_setDimmerLights_SwOff
 15849 ;;		_setRFSW_Control
 15850 ;; This function uses a non-reentrant model
 15851 ;;
 15852                           
 15853                           
 15854                           ;psect for function _setDelayOff_GO
 15855  17A3                     _setDelayOff_GO:	
 15856                           
 15857                           ;incstack = 0
 15858                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15859                           ;setDelayOff_GO@sw stored from wreg
 15860  17A3  0020               	movlb	0	; select bank0
 15861  17A4  00AE               	movwf	setDelayOff_GO@sw
 15862                           
 15863                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15864  17A5  082E               	movf	setDelayOff_GO@sw,w
 15865  17A6  319C  2416  3197   	fcall	_DelayOffPointSelect
 15866                           
 15867                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15868  17A9  0020               	movlb	0	; select bank0
 15869  17AA  082A               	movf	setDelayOff_GO@command,w
 15870  17AB  3A01               	xorlw	1
 15871  17AC  3000               	movlw	0
 15872  17AD  1903               	skipnz
 15873  17AE  3001               	movlw	1
 15874  17AF  00AC               	movwf	??_setDelayOff_GO
 15875  17B0  0878               	movf	_DelayOff,w
 15876  17B1  0086               	movwf	6
 15877  17B2  3001               	movlw	1	; select bank2/3
 15878  17B3  0087               	movwf	7
 15879  17B4  0DAC               	rlf	??_setDelayOff_GO,f
 15880  17B5  0801               	movf	1,w
 15881  17B6  062C               	xorwf	??_setDelayOff_GO,w
 15882  17B7  39FD               	andlw	-3
 15883  17B8  062C               	xorwf	??_setDelayOff_GO,w
 15884  17B9  0081               	movwf	1
 15885                           
 15886                           ;DelayOff_B1.c: 89: if (command == 1) {
 15887  17BA  082A               	movf	setDelayOff_GO@command,w
 15888  17BB  3A01               	xorlw	1
 15889  17BC  1D03               	skipz
 15890  17BD  2FE8               	goto	l5924
 15891                           
 15892                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15893  17BE  082B               	movf	setDelayOff_GO@value,w
 15894  17BF  3190  2073  3197   	fcall	_DelayTimejudge
 15895  17C2  0020               	movlb	0	; select bank0
 15896  17C3  00AC               	movwf	??_setDelayOff_GO
 15897  17C4  0A78               	incf	_DelayOff,w
 15898  17C5  0086               	movwf	6
 15899  17C6  3001               	movlw	1	; select bank2/3
 15900  17C7  0087               	movwf	7
 15901  17C8  082C               	movf	??_setDelayOff_GO,w
 15902  17C9  0081               	movwf	1
 15903                           
 15904                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15905  17CA  300F               	movlw	15
 15906  17CB  052B               	andwf	setDelayOff_GO@value,w
 15907  17CC  00AC               	movwf	??_setDelayOff_GO
 15908  17CD  082C               	movf	??_setDelayOff_GO,w
 15909  17CE  3A05               	xorlw	5
 15910  17CF  1903               	skipnz
 15911  17D0  2FD5               	goto	l5918
 15912  17D1  082B               	movf	setDelayOff_GO@value,w
 15913  17D2  390F               	andlw	15
 15914  17D3  1D03               	btfss	3,2
 15915  17D4  2FDB               	goto	l5922
 15916  17D5                     l5918:	
 15917  17D5  3026               	movlw	38
 15918  17D6  022B               	subwf	setDelayOff_GO@value,w
 15919  17D7  1803               	skipnc
 15920  17D8  2FDB               	goto	l5922
 15921                           
 15922                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 15923  17D9  082B               	movf	setDelayOff_GO@value,w
 15924  17DA  2FDC               	goto	L5
 15925  17DB                     l5922:	
 15926                           ;DelayOff_B1.c: 93: } else {
 15927                           
 15928                           
 15929                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 15930  17DB  3005               	movlw	5
 15931  17DC                     L5:	
 15932  17DC  00AC               	movwf	??_setDelayOff_GO
 15933  17DD  082E               	movf	setDelayOff_GO@sw,w
 15934  17DE  3E1A               	addlw	26
 15935  17DF  076E               	addwf	_product,w
 15936  17E0  00AD               	movwf	??_setDelayOff_GO+1
 15937  17E1  082D               	movf	??_setDelayOff_GO+1,w
 15938  17E2  0086               	movwf	6
 15939  17E3  3002               	movlw	2	; select bank4/5
 15940  17E4  0087               	movwf	7
 15941  17E5  082C               	movf	??_setDelayOff_GO,w
 15942  17E6  0081               	movwf	1
 15943                           
 15944                           ;DelayOff_B1.c: 95: }
 15945                           ;DelayOff_B1.c: 96: } else {
 15946  17E7  2FF1               	goto	l5926
 15947  17E8                     l5924:	
 15948                           
 15949                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 15950  17E8  082E               	movf	setDelayOff_GO@sw,w
 15951  17E9  3E1A               	addlw	26
 15952  17EA  076E               	addwf	_product,w
 15953  17EB  00AC               	movwf	??_setDelayOff_GO
 15954  17EC  082C               	movf	??_setDelayOff_GO,w
 15955  17ED  0086               	movwf	6
 15956  17EE  3002               	movlw	2	; select bank4/5
 15957  17EF  0087               	movwf	7
 15958  17F0  0181               	clrf	1
 15959  17F1                     l5926:	
 15960                           
 15961                           ;DelayOff_B1.c: 98: }
 15962                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15963  17F1  0878               	movf	_DelayOff,w
 15964  17F2  3E02               	addlw	2
 15965  17F3  0086               	movwf	6
 15966  17F4  3001               	movlw	1	; select bank2/3
 15967  17F5  0087               	movwf	7
 15968  17F6  3000               	movlw	0
 15969  17F7  3FC0               	movwi [0]fsr1
 15970  17F8  3FC1               	movwi [1]fsr1
 15971                           
 15972                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15973  17F9  0878               	movf	_DelayOff,w
 15974  17FA  3E04               	addlw	4
 15975  17FB  0086               	movwf	6
 15976  17FC  3001               	movlw	1	; select bank2/3
 15977  17FD  0087               	movwf	7
 15978  17FE  0181               	clrf	1
 15979  17FF  0008               	return
 15980  1800                     __end_of_setDelayOff_GO:	
 15981                           
 15982                           	psect	text99
 15983  1073                     __ptext99:	
 15984 ;; *************** function _DelayTimejudge *****************
 15985 ;; Defined at:
 15986 ;;		line 112 in file "../src/DelayOff_B1.c"
 15987 ;; Parameters:    Size  Location     Type
 15988 ;;  value           1    wreg     unsigned char 
 15989 ;; Auto vars:     Size  Location     Type
 15990 ;;  value           1    9[BANK0 ] unsigned char 
 15991 ;;  k               1    8[BANK0 ] unsigned char 
 15992 ;;  j               1    7[BANK0 ] unsigned char 
 15993 ;;  i               1    6[BANK0 ] unsigned char 
 15994 ;; Return value:  Size  Location     Type
 15995 ;;                  1    wreg      unsigned char 
 15996 ;; Registers used:
 15997 ;;		wreg, status,2, status,0, pclath, cstack
 15998 ;; Tracked objects:
 15999 ;;		On entry : 0/0
 16000 ;;		On exit  : 0/0
 16001 ;;		Unchanged: 0/0
 16002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;Total ram usage:        6 bytes
 16008 ;; Hardware stack levels used:    1
 16009 ;; Hardware stack levels required when called:    6
 16010 ;; This function calls:
 16011 ;;		___bmul
 16012 ;; This function is called by:
 16013 ;;		_setDelayOff_GO
 16014 ;; This function uses a non-reentrant model
 16015 ;;
 16016                           
 16017                           
 16018                           ;psect for function _DelayTimejudge
 16019  1073                     _DelayTimejudge:	
 16020                           
 16021                           ;incstack = 0
 16022                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16023                           ;DelayTimejudge@value stored from wreg
 16024  1073  0020               	movlb	0	; select bank0
 16025  1074  00A9               	movwf	DelayTimejudge@value
 16026                           
 16027                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16028  1075  3005               	movlw	5
 16029  1076  00A4               	movwf	??_DelayTimejudge
 16030  1077  0824               	movf	??_DelayTimejudge,w
 16031  1078  00A6               	movwf	DelayTimejudge@i
 16032  1079  01A7               	clrf	DelayTimejudge@j
 16033  107A  01A8               	clrf	DelayTimejudge@k
 16034                           
 16035                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16036  107B  3031               	movlw	49
 16037  107C  0229               	subwf	DelayTimejudge@value,w
 16038  107D  1803               	skipnc
 16039  107E  289B               	goto	l5818
 16040                           
 16041                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16042  107F  0829               	movf	DelayTimejudge@value,w
 16043  1080  390F               	andlw	15
 16044  1081  00A4               	movwf	??_DelayTimejudge
 16045  1082  0824               	movf	??_DelayTimejudge,w
 16046  1083  00A7               	movwf	DelayTimejudge@j
 16047                           
 16048                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16049  1084  0829               	movf	DelayTimejudge@value,w
 16050  1085  00A4               	movwf	??_DelayTimejudge
 16051  1086  3004               	movlw	4
 16052  1087                     u4785:	
 16053  1087  36A4               	lsrf	??_DelayTimejudge,f
 16054  1088  0B89               	decfsz	9,f
 16055  1089  2887               	goto	u4785
 16056  108A  0824               	movf	??_DelayTimejudge,w
 16057  108B  390F               	andlw	15
 16058  108C  00A5               	movwf	??_DelayTimejudge+1
 16059  108D  0825               	movf	??_DelayTimejudge+1,w
 16060  108E  00A8               	movwf	DelayTimejudge@k
 16061                           
 16062                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16063  108F  300A               	movlw	10
 16064  1090  00A4               	movwf	??_DelayTimejudge
 16065  1091  0824               	movf	??_DelayTimejudge,w
 16066  1092  00A0               	movwf	___bmul@multiplicand
 16067  1093  0828               	movf	DelayTimejudge@k,w
 16068  1094  319D  2550         	fcall	___bmul
 16069  1096  0020               	movlb	0	; select bank0
 16070  1097  0727               	addwf	DelayTimejudge@j,w
 16071  1098  00A5               	movwf	??_DelayTimejudge+1
 16072  1099  0825               	movf	??_DelayTimejudge+1,w
 16073  109A  00A6               	movwf	DelayTimejudge@i
 16074  109B                     l5818:	
 16075                           
 16076                           ;DelayOff_B1.c: 118: }
 16077                           ;DelayOff_B1.c: 139: return i;
 16078  109B  0826               	movf	DelayTimejudge@i,w
 16079  109C  0008               	return
 16080  109D                     __end_of_DelayTimejudge:	
 16081                           
 16082                           	psect	text100
 16083  1D50                     __ptext100:	
 16084 ;; *************** function ___bmul *****************
 16085 ;; Defined at:
 16086 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16087 ;; Parameters:    Size  Location     Type
 16088 ;;  multiplier      1    wreg     unsigned char 
 16089 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16090 ;; Auto vars:     Size  Location     Type
 16091 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16092 ;;  product         1    2[BANK0 ] unsigned char 
 16093 ;; Return value:  Size  Location     Type
 16094 ;;                  1    wreg      unsigned char 
 16095 ;; Registers used:
 16096 ;;		wreg, status,2, status,0
 16097 ;; Tracked objects:
 16098 ;;		On entry : 0/0
 16099 ;;		On exit  : 0/0
 16100 ;;		Unchanged: 0/0
 16101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16102 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16103 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;Total ram usage:        4 bytes
 16107 ;; Hardware stack levels used:    1
 16108 ;; Hardware stack levels required when called:    5
 16109 ;; This function calls:
 16110 ;;		Nothing
 16111 ;; This function is called by:
 16112 ;;		_DelayTimejudge
 16113 ;; This function uses a non-reentrant model
 16114 ;;
 16115                           
 16116                           
 16117                           ;psect for function ___bmul
 16118  1D50                     ___bmul:	
 16119                           
 16120                           ;incstack = 0
 16121                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16122                           ;___bmul@multiplier stored from wreg
 16123  1D50  0020               	movlb	0	; select bank0
 16124  1D51  00A3               	movwf	___bmul@multiplier
 16125  1D52  01A2               	clrf	___bmul@product
 16126  1D53                     l5560:	
 16127  1D53  1C23               	btfss	___bmul@multiplier,0
 16128  1D54  2D59               	goto	l5564
 16129  1D55  0820               	movf	___bmul@multiplicand,w
 16130  1D56  00A1               	movwf	??___bmul
 16131  1D57  0821               	movf	??___bmul,w
 16132  1D58  07A2               	addwf	___bmul@product,f
 16133  1D59                     l5564:	
 16134  1D59  1003               	clrc
 16135  1D5A  0DA0               	rlf	___bmul@multiplicand,f
 16136  1D5B  1003               	clrc
 16137  1D5C  0CA3               	rrf	___bmul@multiplier,f
 16138  1D5D  08A3               	movf	___bmul@multiplier,f
 16139  1D5E  1D03               	skipz
 16140  1D5F  2D53               	goto	l5560
 16141  1D60  0822               	movf	___bmul@product,w
 16142  1D61  0008               	return
 16143  1D62                     __end_of___bmul:	
 16144                           
 16145                           	psect	text101
 16146  1CCB                     __ptext101:	
 16147 ;; *************** function _getDelayOff_GO *****************
 16148 ;; Defined at:
 16149 ;;		line 105 in file "../src/DelayOff_B1.c"
 16150 ;; Parameters:    Size  Location     Type
 16151 ;;  sw              1    wreg     unsigned char 
 16152 ;; Auto vars:     Size  Location     Type
 16153 ;;  sw              1    2[BANK0 ] unsigned char 
 16154 ;;  go              1    3[BANK0 ] unsigned char 
 16155 ;; Return value:  Size  Location     Type
 16156 ;;                  1    wreg      unsigned char 
 16157 ;; Registers used:
 16158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16159 ;; Tracked objects:
 16160 ;;		On entry : 0/0
 16161 ;;		On exit  : 0/0
 16162 ;;		Unchanged: 0/0
 16163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;Total ram usage:        2 bytes
 16169 ;; Hardware stack levels used:    1
 16170 ;; Hardware stack levels required when called:    6
 16171 ;; This function calls:
 16172 ;;		_DelayOffPointSelect
 16173 ;; This function is called by:
 16174 ;;		_setDimmerLights_SwOff
 16175 ;;		_setRFSW_Control
 16176 ;; This function uses a non-reentrant model
 16177 ;;
 16178                           
 16179                           
 16180                           ;psect for function _getDelayOff_GO
 16181  1CCB                     _getDelayOff_GO:	
 16182                           
 16183                           ;incstack = 0
 16184                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16185                           ;getDelayOff_GO@sw stored from wreg
 16186  1CCB  0020               	movlb	0	; select bank0
 16187  1CCC  00A2               	movwf	getDelayOff_GO@sw
 16188                           
 16189                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16190  1CCD  0822               	movf	getDelayOff_GO@sw,w
 16191  1CCE  319C  2416         	fcall	_DelayOffPointSelect
 16192                           
 16193                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16194  1CD0  0878               	movf	_DelayOff,w
 16195  1CD1  0086               	movwf	6
 16196  1CD2  3001               	movlw	1	; select bank2/3
 16197  1CD3  0087               	movwf	7
 16198  1CD4  3000               	movlw	0
 16199  1CD5  1881               	btfsc	1,1
 16200  1CD6  3001               	movlw	1
 16201  1CD7  0020               	movlb	0	; select bank0
 16202  1CD8  00A3               	movwf	getDelayOff_GO@go
 16203                           
 16204                           ;DelayOff_B1.c: 108: return go;
 16205  1CD9  0823               	movf	getDelayOff_GO@go,w
 16206  1CDA  0008               	return
 16207  1CDB                     __end_of_getDelayOff_GO:	
 16208                           
 16209                           	psect	text102
 16210  1CFB                     __ptext102:	
 16211 ;; *************** function _getDimmerLights_Status *****************
 16212 ;; Defined at:
 16213 ;;		line 445 in file "../src/Dimmer_B1.c"
 16214 ;; Parameters:    Size  Location     Type
 16215 ;;  lights          1    wreg     unsigned char 
 16216 ;; Auto vars:     Size  Location     Type
 16217 ;;  lights          1    2[BANK0 ] unsigned char 
 16218 ;;  status          1    3[BANK0 ] unsigned char 
 16219 ;; Return value:  Size  Location     Type
 16220 ;;                  1    wreg      unsigned char 
 16221 ;; Registers used:
 16222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16223 ;; Tracked objects:
 16224 ;;		On entry : 0/0
 16225 ;;		On exit  : 0/0
 16226 ;;		Unchanged: 0/0
 16227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;Total ram usage:        2 bytes
 16233 ;; Hardware stack levels used:    1
 16234 ;; Hardware stack levels required when called:    6
 16235 ;; This function calls:
 16236 ;;		_DimmerLightsPointSelect
 16237 ;; This function is called by:
 16238 ;;		_setDimmerLights_ErrorClose
 16239 ;;		_getMain_LightsStatus
 16240 ;;		_Exception_Main
 16241 ;;		_setRFSW_Control
 16242 ;;		_setRFSW_AdjControl
 16243 ;; This function uses a non-reentrant model
 16244 ;;
 16245                           
 16246                           
 16247                           ;psect for function _getDimmerLights_Status
 16248  1CFB                     _getDimmerLights_Status:	
 16249                           
 16250                           ;incstack = 0
 16251                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16252                           ;getDimmerLights_Status@lights stored from wreg
 16253  1CFB  0020               	movlb	0	; select bank0
 16254  1CFC  00A2               	movwf	getDimmerLights_Status@lights
 16255                           
 16256                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 16257  1CFD  0822               	movf	getDimmerLights_Status@lights,w
 16258  1CFE  319C  2421         	fcall	_DimmerLightsPointSelect
 16259                           
 16260                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 16261  1D00  0020               	movlb	0	; select bank0
 16262  1D01  086F               	movf	_DimmerLights,w
 16263  1D02  3E02               	addlw	2
 16264  1D03  0086               	movwf	6
 16265  1D04  3001               	movlw	1	; select bank2/3
 16266  1D05  0087               	movwf	7
 16267  1D06  3000               	movlw	0
 16268  1D07  1881               	btfsc	1,1
 16269  1D08  3001               	movlw	1
 16270  1D09  00A3               	movwf	getDimmerLights_Status@status
 16271                           
 16272                           ;Dimmer_B1.c: 448: return status;
 16273  1D0A  0823               	movf	getDimmerLights_Status@status,w
 16274  1D0B  0008               	return
 16275  1D0C                     __end_of_getDimmerLights_Status:	
 16276                           
 16277                           	psect	text103
 16278  1C21                     __ptext103:	
 16279 ;; *************** function _DimmerLightsPointSelect *****************
 16280 ;; Defined at:
 16281 ;;		line 310 in file "../src/Dimmer_B1.c"
 16282 ;; Parameters:    Size  Location     Type
 16283 ;;  lights          1    wreg     unsigned char 
 16284 ;; Auto vars:     Size  Location     Type
 16285 ;;  lights          1    1[BANK0 ] unsigned char 
 16286 ;; Return value:  Size  Location     Type
 16287 ;;		None               void
 16288 ;; Registers used:
 16289 ;;		wreg
 16290 ;; Tracked objects:
 16291 ;;		On entry : 0/0
 16292 ;;		On exit  : 0/0
 16293 ;;		Unchanged: 0/0
 16294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16299 ;;Total ram usage:        2 bytes
 16300 ;; Hardware stack levels used:    1
 16301 ;; Hardware stack levels required when called:    5
 16302 ;; This function calls:
 16303 ;;		Nothing
 16304 ;; This function is called by:
 16305 ;;		_setDimmerLights_Initialization
 16306 ;;		_setDimmerLights_Main
 16307 ;;		_getDimmerLights_Status
 16308 ;;		_setDimmerLights_SwOn
 16309 ;;		_setDimmerLights_SwOff
 16310 ;;		_setDimmerLights_AdjControl
 16311 ;;		_setDimmerLights_ErrorClose
 16312 ;;		_setDimmerLights_AdjRF
 16313 ;;		_Exception_Main
 16314 ;;		_setDimmerLights_Status
 16315 ;;		_setDimmerLights_GO
 16316 ;;		_setDimmerLights_MaxmumValue
 16317 ;;		_setDimmerLights_Trigger
 16318 ;;		_setDimmerLights_TriggerAdj
 16319 ;; This function uses a non-reentrant model
 16320 ;;
 16321                           
 16322                           
 16323                           ;psect for function _DimmerLightsPointSelect
 16324  1C21                     _DimmerLightsPointSelect:	
 16325                           
 16326                           ;incstack = 0
 16327                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16328                           ;DimmerLightsPointSelect@lights stored from wreg
 16329  1C21  0020               	movlb	0	; select bank0
 16330  1C22  00A1               	movwf	DimmerLightsPointSelect@lights
 16331                           
 16332                           ;Dimmer_B1.c: 312: if (lights == 1) {
 16333  1C23  0821               	movf	DimmerLightsPointSelect@lights,w
 16334  1C24  3A01               	xorlw	1
 16335  1C25  1D03               	skipz
 16336  1C26  0008               	return
 16337                           
 16338                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 16339  1C27  30C5               	movlw	_DimmerLights1& (0+255)
 16340  1C28  00A0               	movwf	??_DimmerLightsPointSelect
 16341  1C29  0820               	movf	??_DimmerLightsPointSelect,w
 16342  1C2A  00EF               	movwf	_DimmerLights
 16343  1C2B  0008               	return
 16344  1C2C                     __end_of_DimmerLightsPointSelect:	
 16345                           
 16346                           	psect	text104
 16347  15E0                     __ptext104:	
 16348 ;; *************** function _setBuz *****************
 16349 ;; Defined at:
 16350 ;;		line 22 in file "../src/Buzzer_B1.c"
 16351 ;; Parameters:    Size  Location     Type
 16352 ;;  count           1    wreg     unsigned char 
 16353 ;;  time            2    9[BANK0 ] int 
 16354 ;; Auto vars:     Size  Location     Type
 16355 ;;  count           1   12[BANK0 ] unsigned char 
 16356 ;; Return value:  Size  Location     Type
 16357 ;;		None               void
 16358 ;; Registers used:
 16359 ;;		wreg, status,2, status,0, pclath, cstack
 16360 ;; Tracked objects:
 16361 ;;		On entry : 0/0
 16362 ;;		On exit  : 0/0
 16363 ;;		Unchanged: 0/0
 16364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16365 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16368 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;Total ram usage:        4 bytes
 16370 ;; Hardware stack levels used:    1
 16371 ;; Hardware stack levels required when called:    6
 16372 ;; This function calls:
 16373 ;;		___awdiv
 16374 ;; This function is called by:
 16375 ;;		_DlyOff_Main
 16376 ;;		_setDimmerLights_Main
 16377 ;;		_setDimmerLights_SwOn
 16378 ;;		_my_MainTimer
 16379 ;;		_Exception_Main
 16380 ;;		_setTemp_Main
 16381 ;;		_setLog_Code
 16382 ;;		_setControl_Lights_Table
 16383 ;;		_setRFSW_Control
 16384 ;;		_setSw_Main
 16385 ;;		_setMain_Exception
 16386 ;; This function uses a non-reentrant model
 16387 ;;
 16388                           
 16389                           
 16390                           ;psect for function _setBuz
 16391  15E0                     _setBuz:	
 16392                           
 16393                           ;incstack = 0
 16394                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16395                           ;setBuz@count stored from wreg
 16396  15E0  0020               	movlb	0	; select bank0
 16397  15E1  00AC               	movwf	setBuz@count
 16398                           
 16399                           ;Buzzer_B1.c: 23: time /= 10;
 16400  15E2  300A               	movlw	10
 16401  15E3  00A0               	movwf	___awdiv@divisor
 16402  15E4  3000               	movlw	0
 16403  15E5  00A1               	movwf	___awdiv@divisor+1
 16404  15E6  082A               	movf	setBuz@time+1,w
 16405  15E7  01A3               	clrf	___awdiv@dividend+1
 16406  15E8  07A3               	addwf	___awdiv@dividend+1,f
 16407  15E9  0829               	movf	setBuz@time,w
 16408  15EA  01A2               	clrf	___awdiv@dividend
 16409  15EB  07A2               	addwf	___awdiv@dividend,f
 16410  15EC  3195  2534  3195   	fcall	___awdiv
 16411  15EF  0020               	movlb	0	; select bank0
 16412  15F0  0821               	movf	?___awdiv+1,w
 16413  15F1  01AA               	clrf	setBuz@time+1
 16414  15F2  07AA               	addwf	setBuz@time+1,f
 16415  15F3  0820               	movf	?___awdiv,w
 16416  15F4  01A9               	clrf	setBuz@time
 16417  15F5  07A9               	addwf	setBuz@time,f
 16418                           
 16419                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16420  15F6  0021               	movlb	1	; select bank1
 16421  15F7  1C2E               	btfss	_Buz1^(0+128),0
 16422  15F8  0008               	return
 16423                           
 16424                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16425  15F9  18AE               	btfsc	_Buz1^(0+128),1
 16426  15FA  2E11               	goto	l84
 16427                           
 16428                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16429  15FB  14AE               	bsf	_Buz1^(0+128),1
 16430                           
 16431                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16432  15FC  01AF               	clrf	(_Buz1^(0+128)+1)
 16433  15FD  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16434                           
 16435                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16436  15FE  0020               	movlb	0	; select bank0
 16437  15FF  082C               	movf	setBuz@count,w
 16438  1600  00AB               	movwf	??_setBuz
 16439  1601  082B               	movf	??_setBuz,w
 16440  1602  0021               	movlb	1	; select bank1
 16441  1603  00B1               	movwf	(_Buz1^(0+128)+3)
 16442                           
 16443                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16444  1604  0020               	movlb	0	; select bank0
 16445  1605  082A               	movf	setBuz@time+1,w
 16446  1606  0021               	movlb	1	; select bank1
 16447  1607  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16448  1608  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16449  1609  0020               	movlb	0	; select bank0
 16450  160A  0829               	movf	setBuz@time,w
 16451  160B  0021               	movlb	1	; select bank1
 16452  160C  01B4               	clrf	(_Buz1^(0+128)+6)
 16453  160D  07B4               	addwf	(_Buz1^(0+128)+6),f
 16454                           
 16455                           ;Buzzer_B1.c: 30: RB3 = 1;
 16456  160E  0020               	movlb	0	; select bank0
 16457  160F  158D               	bsf	13,3	;volatile
 16458                           
 16459                           ;Buzzer_B1.c: 31: } else {
 16460  1610  0008               	return
 16461  1611                     l84:	
 16462                           
 16463                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16464  1611  19AE               	btfsc	_Buz1^(0+128),3
 16465  1612  2E25               	goto	l86
 16466                           
 16467                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16468  1613  15AE               	bsf	_Buz1^(0+128),3
 16469                           
 16470                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16471  1614  0020               	movlb	0	; select bank0
 16472  1615  082C               	movf	setBuz@count,w
 16473  1616  00AB               	movwf	??_setBuz
 16474  1617  082B               	movf	??_setBuz,w
 16475  1618  0021               	movlb	1	; select bank1
 16476  1619  00B2               	movwf	(_Buz1^(0+128)+4)
 16477                           
 16478                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16479  161A  0020               	movlb	0	; select bank0
 16480  161B  082A               	movf	setBuz@time+1,w
 16481  161C  0021               	movlb	1	; select bank1
 16482  161D  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16483  161E  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16484  161F  0020               	movlb	0	; select bank0
 16485  1620  0829               	movf	setBuz@time,w
 16486  1621  0021               	movlb	1	; select bank1
 16487  1622  01B6               	clrf	(_Buz1^(0+128)+8)
 16488  1623  07B6               	addwf	(_Buz1^(0+128)+8),f
 16489                           
 16490                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16491  1624  0008               	return
 16492  1625                     l86:	
 16493  1625  1A2E               	btfsc	_Buz1^(0+128),4
 16494  1626  0008               	return
 16495                           
 16496                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16497  1627  162E               	bsf	_Buz1^(0+128),4
 16498                           
 16499                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16500  1628  0020               	movlb	0	; select bank0
 16501  1629  082C               	movf	setBuz@count,w
 16502  162A  00AB               	movwf	??_setBuz
 16503  162B  082B               	movf	??_setBuz,w
 16504  162C  0021               	movlb	1	; select bank1
 16505  162D  00B3               	movwf	(_Buz1^(0+128)+5)
 16506                           
 16507                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16508  162E  0020               	movlb	0	; select bank0
 16509  162F  082A               	movf	setBuz@time+1,w
 16510  1630  0021               	movlb	1	; select bank1
 16511  1631  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16512  1632  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16513  1633  0020               	movlb	0	; select bank0
 16514  1634  0829               	movf	setBuz@time,w
 16515  1635  0021               	movlb	1	; select bank1
 16516  1636  01B8               	clrf	(_Buz1^(0+128)+10)
 16517  1637  07B8               	addwf	(_Buz1^(0+128)+10),f
 16518  1638  0008               	return
 16519  1639                     __end_of_setBuz:	
 16520                           
 16521                           	psect	text105
 16522  1534                     __ptext105:	
 16523 ;; *************** function ___awdiv *****************
 16524 ;; Defined at:
 16525 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16526 ;; Parameters:    Size  Location     Type
 16527 ;;  divisor         2    0[BANK0 ] int 
 16528 ;;  dividend        2    2[BANK0 ] int 
 16529 ;; Auto vars:     Size  Location     Type
 16530 ;;  quotient        2    7[BANK0 ] int 
 16531 ;;  sign            1    6[BANK0 ] unsigned char 
 16532 ;;  counter         1    5[BANK0 ] unsigned char 
 16533 ;; Return value:  Size  Location     Type
 16534 ;;                  2    0[BANK0 ] int 
 16535 ;; Registers used:
 16536 ;;		wreg, status,2, status,0
 16537 ;; Tracked objects:
 16538 ;;		On entry : 0/0
 16539 ;;		On exit  : 0/0
 16540 ;;		Unchanged: 0/0
 16541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16542 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16543 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16545 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16546 ;;Total ram usage:        9 bytes
 16547 ;; Hardware stack levels used:    1
 16548 ;; Hardware stack levels required when called:    5
 16549 ;; This function calls:
 16550 ;;		Nothing
 16551 ;; This function is called by:
 16552 ;;		_setBuz
 16553 ;; This function uses a non-reentrant model
 16554 ;;
 16555                           
 16556                           
 16557                           ;psect for function ___awdiv
 16558  1534                     ___awdiv:	
 16559                           
 16560                           ;incstack = 0
 16561                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16562  1534  0020               	movlb	0	; select bank0
 16563  1535  01A6               	clrf	___awdiv@sign
 16564  1536  1FA1               	btfss	___awdiv@divisor+1,7
 16565  1537  2D3F               	goto	l5842
 16566  1538  09A0               	comf	___awdiv@divisor,f
 16567  1539  09A1               	comf	___awdiv@divisor+1,f
 16568  153A  0AA0               	incf	___awdiv@divisor,f
 16569  153B  1903               	skipnz
 16570  153C  0AA1               	incf	___awdiv@divisor+1,f
 16571  153D  01A6               	clrf	___awdiv@sign
 16572  153E  0AA6               	incf	___awdiv@sign,f
 16573  153F                     l5842:	
 16574  153F  1FA3               	btfss	___awdiv@dividend+1,7
 16575  1540  2D4A               	goto	l5848
 16576  1541  09A2               	comf	___awdiv@dividend,f
 16577  1542  09A3               	comf	___awdiv@dividend+1,f
 16578  1543  0AA2               	incf	___awdiv@dividend,f
 16579  1544  1903               	skipnz
 16580  1545  0AA3               	incf	___awdiv@dividend+1,f
 16581  1546  3001               	movlw	1
 16582  1547  00A4               	movwf	??___awdiv
 16583  1548  0824               	movf	??___awdiv,w
 16584  1549  06A6               	xorwf	___awdiv@sign,f
 16585  154A                     l5848:	
 16586  154A  01A7               	clrf	___awdiv@quotient
 16587  154B  01A8               	clrf	___awdiv@quotient+1
 16588  154C  0821               	movf	___awdiv@divisor+1,w
 16589  154D  0420               	iorwf	___awdiv@divisor,w
 16590  154E  1903               	skipnz
 16591  154F  2D79               	goto	l5870
 16592  1550  01A5               	clrf	___awdiv@counter
 16593  1551  0AA5               	incf	___awdiv@counter,f
 16594  1552                     l5858:	
 16595  1552  1BA1               	btfsc	___awdiv@divisor+1,7
 16596  1553  2D5E               	goto	l5860
 16597  1554  3001               	movlw	1
 16598  1555                     u4835:	
 16599  1555  35A0               	lslf	___awdiv@divisor,f
 16600  1556  0DA1               	rlf	___awdiv@divisor+1,f
 16601  1557  0B89               	decfsz	9,f
 16602  1558  2D55               	goto	u4835
 16603  1559  3001               	movlw	1
 16604  155A  00A4               	movwf	??___awdiv
 16605  155B  0824               	movf	??___awdiv,w
 16606  155C  07A5               	addwf	___awdiv@counter,f
 16607  155D  2D52               	goto	l5858
 16608  155E                     l5860:	
 16609  155E  3001               	movlw	1
 16610  155F                     u4855:	
 16611  155F  35A7               	lslf	___awdiv@quotient,f
 16612  1560  0DA8               	rlf	___awdiv@quotient+1,f
 16613  1561  0B89               	decfsz	9,f
 16614  1562  2D5F               	goto	u4855
 16615  1563  0821               	movf	___awdiv@divisor+1,w
 16616  1564  0223               	subwf	___awdiv@dividend+1,w
 16617  1565  1D03               	skipz
 16618  1566  2D69               	goto	u4865
 16619  1567  0820               	movf	___awdiv@divisor,w
 16620  1568  0222               	subwf	___awdiv@dividend,w
 16621  1569                     u4865:	
 16622  1569  1C03               	skipc
 16623  156A  2D70               	goto	l5866
 16624  156B  0820               	movf	___awdiv@divisor,w
 16625  156C  02A2               	subwf	___awdiv@dividend,f
 16626  156D  0821               	movf	___awdiv@divisor+1,w
 16627  156E  3BA3               	subwfb	___awdiv@dividend+1,f
 16628  156F  1427               	bsf	___awdiv@quotient,0
 16629  1570                     l5866:	
 16630  1570  3001               	movlw	1
 16631  1571                     u4875:	
 16632  1571  36A1               	lsrf	___awdiv@divisor+1,f
 16633  1572  0CA0               	rrf	___awdiv@divisor,f
 16634  1573  0B89               	decfsz	9,f
 16635  1574  2D71               	goto	u4875
 16636  1575  3001               	movlw	1
 16637  1576  02A5               	subwf	___awdiv@counter,f
 16638  1577  1D03               	btfss	3,2
 16639  1578  2D5E               	goto	l5860
 16640  1579                     l5870:	
 16641  1579  0826               	movf	___awdiv@sign,w
 16642  157A  1903               	btfsc	3,2
 16643  157B  2D81               	goto	l5874
 16644  157C  09A7               	comf	___awdiv@quotient,f
 16645  157D  09A8               	comf	___awdiv@quotient+1,f
 16646  157E  0AA7               	incf	___awdiv@quotient,f
 16647  157F  1903               	skipnz
 16648  1580  0AA8               	incf	___awdiv@quotient+1,f
 16649  1581                     l5874:	
 16650  1581  0828               	movf	___awdiv@quotient+1,w
 16651  1582  01A1               	clrf	?___awdiv+1
 16652  1583  07A1               	addwf	?___awdiv+1,f
 16653  1584  0827               	movf	___awdiv@quotient,w
 16654  1585  01A0               	clrf	?___awdiv
 16655  1586  07A0               	addwf	?___awdiv,f
 16656  1587  0008               	return
 16657  1588                     __end_of___awdiv:	
 16658                           
 16659                           	psect	text106
 16660  1B8A                     __ptext106:	
 16661 ;; *************** function _DelayOff_Initialization *****************
 16662 ;; Defined at:
 16663 ;;		line 26 in file "../src/DelayOff_B1.c"
 16664 ;; Parameters:    Size  Location     Type
 16665 ;;		None
 16666 ;; Auto vars:     Size  Location     Type
 16667 ;;		None
 16668 ;; Return value:  Size  Location     Type
 16669 ;;		None               void
 16670 ;; Registers used:
 16671 ;;		wreg, status,2, status,0, pclath, cstack
 16672 ;; Tracked objects:
 16673 ;;		On entry : 0/0
 16674 ;;		On exit  : 0/0
 16675 ;;		Unchanged: 0/0
 16676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;Total ram usage:        0 bytes
 16682 ;; Hardware stack levels used:    1
 16683 ;; Hardware stack levels required when called:    7
 16684 ;; This function calls:
 16685 ;;		_DlyOff_Initialization
 16686 ;; This function is called by:
 16687 ;;		_main
 16688 ;; This function uses a non-reentrant model
 16689 ;;
 16690                           
 16691                           
 16692                           ;psect for function _DelayOff_Initialization
 16693  1B8A                     _DelayOff_Initialization:	
 16694                           
 16695                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16696                           
 16697                           ;incstack = 0
 16698                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16699  1B8A  3001               	movlw	1
 16700  1B8B  319B  23AC         	fcall	_DlyOff_Initialization
 16701  1B8D  0008               	return
 16702  1B8E                     __end_of_DelayOff_Initialization:	
 16703                           
 16704                           	psect	text107
 16705  1BAC                     __ptext107:	
 16706 ;; *************** function _DlyOff_Initialization *****************
 16707 ;; Defined at:
 16708 ;;		line 56 in file "../src/DelayOff_B1.c"
 16709 ;; Parameters:    Size  Location     Type
 16710 ;;  sw              1    wreg     unsigned char 
 16711 ;; Auto vars:     Size  Location     Type
 16712 ;;  sw              1    2[BANK0 ] unsigned char 
 16713 ;; Return value:  Size  Location     Type
 16714 ;;		None               void
 16715 ;; Registers used:
 16716 ;;		wreg, status,2, status,0, pclath, cstack
 16717 ;; Tracked objects:
 16718 ;;		On entry : 0/0
 16719 ;;		On exit  : 0/0
 16720 ;;		Unchanged: 0/0
 16721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16723 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16725 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;Total ram usage:        1 bytes
 16727 ;; Hardware stack levels used:    1
 16728 ;; Hardware stack levels required when called:    6
 16729 ;; This function calls:
 16730 ;;		_DelayOffPointSelect
 16731 ;; This function is called by:
 16732 ;;		_DelayOff_Initialization
 16733 ;; This function uses a non-reentrant model
 16734 ;;
 16735                           
 16736                           
 16737                           ;psect for function _DlyOff_Initialization
 16738  1BAC                     _DlyOff_Initialization:	
 16739                           
 16740                           ;incstack = 0
 16741                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16742                           ;DlyOff_Initialization@sw stored from wreg
 16743  1BAC  0020               	movlb	0	; select bank0
 16744  1BAD  00A2               	movwf	DlyOff_Initialization@sw
 16745                           
 16746                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16747  1BAE  0822               	movf	DlyOff_Initialization@sw,w
 16748  1BAF  319C  2416         	fcall	_DelayOffPointSelect
 16749  1BB1  0008               	return
 16750  1BB2                     __end_of_DlyOff_Initialization:	
 16751                           
 16752                           	psect	text108
 16753  1C16                     __ptext108:	
 16754 ;; *************** function _DelayOffPointSelect *****************
 16755 ;; Defined at:
 16756 ;;		line 7 in file "../src/DelayOff_B1.c"
 16757 ;; Parameters:    Size  Location     Type
 16758 ;;  sw              1    wreg     unsigned char 
 16759 ;; Auto vars:     Size  Location     Type
 16760 ;;  sw              1    1[BANK0 ] unsigned char 
 16761 ;; Return value:  Size  Location     Type
 16762 ;;		None               void
 16763 ;; Registers used:
 16764 ;;		wreg
 16765 ;; Tracked objects:
 16766 ;;		On entry : 0/0
 16767 ;;		On exit  : 0/0
 16768 ;;		Unchanged: 0/0
 16769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16774 ;;Total ram usage:        2 bytes
 16775 ;; Hardware stack levels used:    1
 16776 ;; Hardware stack levels required when called:    5
 16777 ;; This function calls:
 16778 ;;		Nothing
 16779 ;; This function is called by:
 16780 ;;		_DlyOff_Initialization
 16781 ;;		_DlyOff_Main
 16782 ;;		_setDelayOff_GO
 16783 ;;		_getDelayOff_GO
 16784 ;; This function uses a non-reentrant model
 16785 ;;
 16786                           
 16787                           
 16788                           ;psect for function _DelayOffPointSelect
 16789  1C16                     _DelayOffPointSelect:	
 16790                           
 16791                           ;incstack = 0
 16792                           ; Regs used in _DelayOffPointSelect: [wreg]
 16793                           ;DelayOffPointSelect@sw stored from wreg
 16794  1C16  0020               	movlb	0	; select bank0
 16795  1C17  00A1               	movwf	DelayOffPointSelect@sw
 16796                           
 16797                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16798  1C18  0821               	movf	DelayOffPointSelect@sw,w
 16799  1C19  3A01               	xorlw	1
 16800  1C1A  1D03               	skipz
 16801  1C1B  0008               	return
 16802                           
 16803                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16804  1C1C  30DF               	movlw	_DlySw1& (0+255)
 16805  1C1D  00A0               	movwf	??_DelayOffPointSelect
 16806  1C1E  0820               	movf	??_DelayOffPointSelect,w
 16807  1C1F  00F8               	movwf	_DelayOff
 16808  1C20  0008               	return
 16809  1C21                     __end_of_DelayOffPointSelect:	
 16810                           
 16811                           	psect	text109
 16812  1DE9                     __ptext109:	
 16813 ;; *************** function _CC2500_PowerOnInitial *****************
 16814 ;; Defined at:
 16815 ;;		line 119 in file "../src/CC2500_B1.c"
 16816 ;; Parameters:    Size  Location     Type
 16817 ;;		None
 16818 ;; Auto vars:     Size  Location     Type
 16819 ;;		None
 16820 ;; Return value:  Size  Location     Type
 16821 ;;		None               void
 16822 ;; Registers used:
 16823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16824 ;; Tracked objects:
 16825 ;;		On entry : 0/0
 16826 ;;		On exit  : 0/0
 16827 ;;		Unchanged: 0/0
 16828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16833 ;;Total ram usage:        0 bytes
 16834 ;; Hardware stack levels used:    1
 16835 ;; Hardware stack levels required when called:    8
 16836 ;; This function calls:
 16837 ;;		_CC2500_ClearRXFIFO
 16838 ;;		_CC2500_ClearTXFIFO
 16839 ;;		_CC2500_FrequencyCabr
 16840 ;;		_CC2500_InitPATable
 16841 ;;		_CC2500_InitSetREG
 16842 ;;		_CC2500_PowerRST
 16843 ;;		_CC2500_SIDLEMode
 16844 ;; This function is called by:
 16845 ;;		_main
 16846 ;; This function uses a non-reentrant model
 16847 ;;
 16848                           
 16849                           
 16850                           ;psect for function _CC2500_PowerOnInitial
 16851  1DE9                     _CC2500_PowerOnInitial:	
 16852                           
 16853                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16854                           
 16855                           ;incstack = 0
 16856                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16857  1DE9  3193  23C3  319D   	fcall	_CC2500_PowerRST
 16858                           
 16859                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16860  1DEC  319F  27D6  319D   	fcall	_CC2500_InitSetREG
 16861                           
 16862                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16863  1DEF  319E  267C  319D   	fcall	_CC2500_InitPATable
 16864                           
 16865                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16866  1DF2  319B  2382  319D   	fcall	_CC2500_ClearTXFIFO
 16867                           
 16868                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16869  1DF5  319B  237E  319D   	fcall	_CC2500_ClearRXFIFO
 16870                           
 16871                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16872  1DF8  319C  2463  319D   	fcall	_CC2500_FrequencyCabr
 16873                           
 16874                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16875  1DFB  319B  2386         	fcall	_CC2500_SIDLEMode
 16876  1DFD  0008               	return
 16877  1DFE                     __end_of_CC2500_PowerOnInitial:	
 16878                           
 16879                           	psect	text110
 16880  1B86                     __ptext110:	
 16881 ;; *************** function _CC2500_SIDLEMode *****************
 16882 ;; Defined at:
 16883 ;;		line 209 in file "../src/CC2500_B1.c"
 16884 ;; Parameters:    Size  Location     Type
 16885 ;;		None
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;		None
 16888 ;; Return value:  Size  Location     Type
 16889 ;;		None               void
 16890 ;; Registers used:
 16891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16892 ;; Tracked objects:
 16893 ;;		On entry : 0/0
 16894 ;;		On exit  : 0/0
 16895 ;;		Unchanged: 0/0
 16896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16901 ;;Total ram usage:        0 bytes
 16902 ;; Hardware stack levels used:    1
 16903 ;; Hardware stack levels required when called:    7
 16904 ;; This function calls:
 16905 ;;		_CC2500_WriteCommand
 16906 ;; This function is called by:
 16907 ;;		_CC2500_PowerOnInitial
 16908 ;; This function uses a non-reentrant model
 16909 ;;
 16910                           
 16911                           
 16912                           ;psect for function _CC2500_SIDLEMode
 16913  1B86                     _CC2500_SIDLEMode:	
 16914                           
 16915                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16916                           
 16917                           ;incstack = 0
 16918                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16919  1B86  3036               	movlw	54
 16920  1B87  319E  262D         	fcall	_CC2500_WriteCommand
 16921  1B89  0008               	return
 16922  1B8A                     __end_of_CC2500_SIDLEMode:	
 16923                           
 16924                           	psect	text111
 16925  13C3                     __ptext111:	
 16926 ;; *************** function _CC2500_PowerRST *****************
 16927 ;; Defined at:
 16928 ;;		line 132 in file "../src/CC2500_B1.c"
 16929 ;; Parameters:    Size  Location     Type
 16930 ;;		None
 16931 ;; Auto vars:     Size  Location     Type
 16932 ;;		None
 16933 ;; Return value:  Size  Location     Type
 16934 ;;		None               void
 16935 ;; Registers used:
 16936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16937 ;; Tracked objects:
 16938 ;;		On entry : 0/0
 16939 ;;		On exit  : 0/0
 16940 ;;		Unchanged: 0/0
 16941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16944 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16945 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;Total ram usage:        1 bytes
 16947 ;; Hardware stack levels used:    1
 16948 ;; Hardware stack levels required when called:    6
 16949 ;; This function calls:
 16950 ;;		_CC2500_WriteByte
 16951 ;;		_DelayTime_1us
 16952 ;;		_Timeout_Counter
 16953 ;;		_set_TimeoutCleared
 16954 ;; This function is called by:
 16955 ;;		_CC2500_PowerOnInitial
 16956 ;; This function uses a non-reentrant model
 16957 ;;
 16958                           
 16959                           
 16960                           ;psect for function _CC2500_PowerRST
 16961  13C3                     _CC2500_PowerRST:	
 16962                           
 16963                           ;CC2500_B1.c: 133: RC3 = 0;
 16964                           
 16965                           ;incstack = 0
 16966                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16967  13C3  0020               	movlb	0	; select bank0
 16968  13C4  118E               	bcf	14,3	;volatile
 16969                           
 16970                           ;CC2500_B1.c: 134: RC4 = 0;
 16971  13C5  120E               	bcf	14,4	;volatile
 16972                           
 16973                           ;CC2500_B1.c: 135: RC0 = 1;
 16974  13C6  140E               	bsf	14,0	;volatile
 16975                           
 16976                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16977  13C7  300A               	movlw	10
 16978  13C8  00A0               	movwf	DelayTime_1us@count
 16979  13C9  3000               	movlw	0
 16980  13CA  00A1               	movwf	DelayTime_1us@count+1
 16981  13CB  319F  2789  3193   	fcall	_DelayTime_1us
 16982                           
 16983                           ;CC2500_B1.c: 137: RC0 = 0;
 16984  13CE  0020               	movlb	0	; select bank0
 16985  13CF  100E               	bcf	14,0	;volatile
 16986                           
 16987                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16988  13D0  300A               	movlw	10
 16989  13D1  00A0               	movwf	DelayTime_1us@count
 16990  13D2  3000               	movlw	0
 16991  13D3  00A1               	movwf	DelayTime_1us@count+1
 16992  13D4  319F  2789  3193   	fcall	_DelayTime_1us
 16993                           
 16994                           ;CC2500_B1.c: 139: RC0 = 1;
 16995  13D7  0020               	movlb	0	; select bank0
 16996  13D8  140E               	bsf	14,0	;volatile
 16997                           
 16998                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16999  13D9  3028               	movlw	40
 17000  13DA  00A0               	movwf	DelayTime_1us@count
 17001  13DB  3000               	movlw	0
 17002  13DC  00A1               	movwf	DelayTime_1us@count+1
 17003  13DD  319F  2789  3193   	fcall	_DelayTime_1us
 17004                           
 17005                           ;CC2500_B1.c: 141: RC0 = 0;
 17006  13E0  0020               	movlb	0	; select bank0
 17007  13E1  100E               	bcf	14,0	;volatile
 17008                           
 17009                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17010  13E2  3030               	movlw	48
 17011  13E3  00A6               	movwf	??_CC2500_PowerRST
 17012  13E4  0826               	movf	??_CC2500_PowerRST,w
 17013  13E5  00FB               	movwf	_SPI0Buffer
 17014                           
 17015                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 17016  13E6  2BEA               	goto	l6764
 17017  13E7                     l6762:	
 17018                           
 17019                           ;CC2500_B1.c: 144: Timeout_Counter();
 17020  13E7  319D  25D4  3193   	fcall	_Timeout_Counter
 17021  13EA                     l6764:	
 17022  13EA  0020               	movlb	0	; select bank0
 17023  13EB  1E8E               	btfss	14,5	;volatile
 17024  13EC  2BF0               	goto	l6768
 17025  13ED  0021               	movlb	1	; select bank1
 17026  13EE  1D2B               	btfss	(_myMain^(0+128)+11),2
 17027  13EF  2BE7               	goto	l6762
 17028  13F0                     l6768:	
 17029                           
 17030                           ;CC2500_B1.c: 145: };
 17031                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17032  13F0  319B  23A2  3193   	fcall	_set_TimeoutCleared
 17033                           
 17034                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17035  13F3  319D  25AC  3193   	fcall	_CC2500_WriteByte
 17036                           
 17037                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17038  13F6  2BFA               	goto	l6774
 17039  13F7                     l6772:	
 17040                           
 17041                           ;CC2500_B1.c: 149: Timeout_Counter();
 17042  13F7  319D  25D4  3193   	fcall	_Timeout_Counter
 17043  13FA                     l6774:	
 17044  13FA  0020               	movlb	0	; select bank0
 17045  13FB  1E8E               	btfss	14,5	;volatile
 17046  13FC  2C00               	goto	l6778
 17047  13FD  0021               	movlb	1	; select bank1
 17048  13FE  1D2B               	btfss	(_myMain^(0+128)+11),2
 17049  13FF  2BF7               	goto	l6772
 17050  1400                     l6778:	
 17051                           
 17052                           ;CC2500_B1.c: 150: };
 17053                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17054  1400  319B  23A2         	fcall	_set_TimeoutCleared
 17055                           
 17056                           ;CC2500_B1.c: 152: RC4 = 0;
 17057  1402  0020               	movlb	0	; select bank0
 17058  1403  120E               	bcf	14,4	;volatile
 17059                           
 17060                           ;CC2500_B1.c: 153: RC0 = 1;
 17061  1404  140E               	bsf	14,0	;volatile
 17062  1405  0008               	return
 17063  1406                     __end_of_CC2500_PowerRST:	
 17064                           
 17065                           	psect	text112
 17066  1FD6                     __ptext112:	
 17067 ;; *************** function _CC2500_InitSetREG *****************
 17068 ;; Defined at:
 17069 ;;		line 159 in file "../src/CC2500_B1.c"
 17070 ;; Parameters:    Size  Location     Type
 17071 ;;		None
 17072 ;; Auto vars:     Size  Location     Type
 17073 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17074 ;;  temp2           1    7[BANK0 ] unsigned char 
 17075 ;;  temp1           1    6[BANK0 ] unsigned char 
 17076 ;; Return value:  Size  Location     Type
 17077 ;;		None               void
 17078 ;; Registers used:
 17079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17080 ;; Tracked objects:
 17081 ;;		On entry : 0/0
 17082 ;;		On exit  : 0/0
 17083 ;;		Unchanged: 0/0
 17084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17086 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;Total ram usage:        4 bytes
 17090 ;; Hardware stack levels used:    1
 17091 ;; Hardware stack levels required when called:    7
 17092 ;; This function calls:
 17093 ;;		_CC2500_WriteREG
 17094 ;; This function is called by:
 17095 ;;		_CC2500_PowerOnInitial
 17096 ;; This function uses a non-reentrant model
 17097 ;;
 17098                           
 17099                           
 17100                           ;psect for function _CC2500_InitSetREG
 17101  1FD6                     _CC2500_InitSetREG:	
 17102                           
 17103                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17104                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17105                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17106                           
 17107                           ;incstack = 0
 17108                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17109  1FD6  0020               	movlb	0	; select bank0
 17110  1FD7  01A8               	clrf	CC2500_InitSetREG@loop_c
 17111  1FD8                     L6:	
 17112  1FD8  302F               	movlw	47
 17113  1FD9  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17114  1FDA  1803               	btfsc	3,0
 17115  1FDB  0008               	return
 17116                           
 17117                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17118  1FDC  0828               	movf	CC2500_InitSetREG@loop_c,w
 17119  1FDD  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17120  1FDE  0084               	movwf	4
 17121  1FDF  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17122  1FE0  1803               	skipnc
 17123  1FE1  3E01               	addlw	1
 17124  1FE2  0085               	movwf	5
 17125  1FE3  0800               	movf	0,w	;code access
 17126  1FE4  00A5               	movwf	??_CC2500_InitSetREG
 17127  1FE5  0825               	movf	??_CC2500_InitSetREG,w
 17128  1FE6  00A6               	movwf	CC2500_InitSetREG@temp1
 17129                           
 17130                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17131  1FE7  0828               	movf	CC2500_InitSetREG@loop_c,w
 17132  1FE8  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17133  1FE9  0084               	movwf	4
 17134  1FEA  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17135  1FEB  1803               	skipnc
 17136  1FEC  3E01               	addlw	1
 17137  1FED  0085               	movwf	5
 17138  1FEE  0800               	movf	0,w	;code access
 17139  1FEF  00A5               	movwf	??_CC2500_InitSetREG
 17140  1FF0  0825               	movf	??_CC2500_InitSetREG,w
 17141  1FF1  00A7               	movwf	CC2500_InitSetREG@temp2
 17142                           
 17143                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17144  1FF2  0827               	movf	CC2500_InitSetREG@temp2,w
 17145  1FF3  00A5               	movwf	??_CC2500_InitSetREG
 17146  1FF4  0825               	movf	??_CC2500_InitSetREG,w
 17147  1FF5  00A2               	movwf	CC2500_WriteREG@value
 17148  1FF6  0826               	movf	CC2500_InitSetREG@temp1,w
 17149  1FF7  319E  26DB  319F   	fcall	_CC2500_WriteREG
 17150  1FFA  3001               	movlw	1
 17151  1FFB  0020               	movlb	0	; select bank0
 17152  1FFC  00A5               	movwf	??_CC2500_InitSetREG
 17153  1FFD  0825               	movf	??_CC2500_InitSetREG,w
 17154  1FFE  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17155  1FFF  2FD8               	goto	L6
 17156  2000                     __end_of_CC2500_InitSetREG:	
 17157                           
 17158                           	psect	text113
 17159  1E7C                     __ptext113:	
 17160 ;; *************** function _CC2500_InitPATable *****************
 17161 ;; Defined at:
 17162 ;;		line 174 in file "../src/CC2500_B1.c"
 17163 ;; Parameters:    Size  Location     Type
 17164 ;;		None
 17165 ;; Auto vars:     Size  Location     Type
 17166 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17167 ;;  temp            1    6[BANK0 ] unsigned char 
 17168 ;; Return value:  Size  Location     Type
 17169 ;;		None               void
 17170 ;; Registers used:
 17171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17172 ;; Tracked objects:
 17173 ;;		On entry : 0/0
 17174 ;;		On exit  : 0/0
 17175 ;;		Unchanged: 0/0
 17176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;Total ram usage:        3 bytes
 17182 ;; Hardware stack levels used:    1
 17183 ;; Hardware stack levels required when called:    7
 17184 ;; This function calls:
 17185 ;;		_CC2500_WriteREG
 17186 ;; This function is called by:
 17187 ;;		_CC2500_PowerOnInitial
 17188 ;; This function uses a non-reentrant model
 17189 ;;
 17190                           
 17191                           
 17192                           ;psect for function _CC2500_InitPATable
 17193  1E7C                     _CC2500_InitPATable:	
 17194                           
 17195                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17196                           ;CC2500_B1.c: 176: unsigned char temp;
 17197                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17198                           
 17199                           ;incstack = 0
 17200                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17201  1E7C  0020               	movlb	0	; select bank0
 17202  1E7D  01A7               	clrf	CC2500_InitPATable@loop_d
 17203  1E7E                     L7:	
 17204  1E7E  3008               	movlw	8
 17205  1E7F  0227               	subwf	CC2500_InitPATable@loop_d,w
 17206  1E80  1803               	btfsc	3,0
 17207  1E81  0008               	return
 17208                           
 17209                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17210  1E82  0827               	movf	CC2500_InitPATable@loop_d,w
 17211  1E83  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17212  1E84  0084               	movwf	4
 17213  1E85  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17214  1E86  1803               	skipnc
 17215  1E87  3E01               	addlw	1
 17216  1E88  0085               	movwf	5
 17217  1E89  0800               	movf	0,w	;code access
 17218  1E8A  00A5               	movwf	??_CC2500_InitPATable
 17219  1E8B  0825               	movf	??_CC2500_InitPATable,w
 17220  1E8C  00A6               	movwf	CC2500_InitPATable@temp
 17221                           
 17222                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17223  1E8D  0826               	movf	CC2500_InitPATable@temp,w
 17224  1E8E  00A5               	movwf	??_CC2500_InitPATable
 17225  1E8F  0825               	movf	??_CC2500_InitPATable,w
 17226  1E90  00A2               	movwf	CC2500_WriteREG@value
 17227  1E91  303E               	movlw	62
 17228  1E92  319E  26DB  319E   	fcall	_CC2500_WriteREG
 17229  1E95  3001               	movlw	1
 17230  1E96  0020               	movlb	0	; select bank0
 17231  1E97  00A5               	movwf	??_CC2500_InitPATable
 17232  1E98  0825               	movf	??_CC2500_InitPATable,w
 17233  1E99  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17234  1E9A  2E7E               	goto	L7
 17235  1E9B                     __end_of_CC2500_InitPATable:	
 17236                           
 17237                           	psect	text114
 17238  1EDB                     __ptext114:	
 17239 ;; *************** function _CC2500_WriteREG *****************
 17240 ;; Defined at:
 17241 ;;		line 251 in file "../src/CC2500_B1.c"
 17242 ;; Parameters:    Size  Location     Type
 17243 ;;  w_addr          1    wreg     unsigned char 
 17244 ;;  value           1    2[BANK0 ] unsigned char 
 17245 ;; Auto vars:     Size  Location     Type
 17246 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17247 ;; Return value:  Size  Location     Type
 17248 ;;		None               void
 17249 ;; Registers used:
 17250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17251 ;; Tracked objects:
 17252 ;;		On entry : 0/0
 17253 ;;		On exit  : 0/0
 17254 ;;		Unchanged: 0/0
 17255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17256 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17259 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17260 ;;Total ram usage:        3 bytes
 17261 ;; Hardware stack levels used:    1
 17262 ;; Hardware stack levels required when called:    6
 17263 ;; This function calls:
 17264 ;;		_CC2500_WriteByte
 17265 ;;		_Timeout_Counter
 17266 ;;		_set_TimeoutCleared
 17267 ;; This function is called by:
 17268 ;;		_CC2500_InitSetREG
 17269 ;;		_CC2500_InitPATable
 17270 ;; This function uses a non-reentrant model
 17271 ;;
 17272                           
 17273                           
 17274                           ;psect for function _CC2500_WriteREG
 17275  1EDB                     _CC2500_WriteREG:	
 17276                           
 17277                           ;incstack = 0
 17278                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17279                           ;CC2500_WriteREG@w_addr stored from wreg
 17280  1EDB  0020               	movlb	0	; select bank0
 17281  1EDC  00A4               	movwf	CC2500_WriteREG@w_addr
 17282                           
 17283                           ;CC2500_B1.c: 252: RC0 = 0;
 17284  1EDD  100E               	bcf	14,0	;volatile
 17285                           
 17286                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17287  1EDE  0824               	movf	CC2500_WriteREG@w_addr,w
 17288  1EDF  00A3               	movwf	??_CC2500_WriteREG
 17289  1EE0  0823               	movf	??_CC2500_WriteREG,w
 17290  1EE1  00FB               	movwf	_SPI0Buffer
 17291                           
 17292                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17293  1EE2  2EE6               	goto	l6460
 17294  1EE3                     l6458:	
 17295                           
 17296                           ;CC2500_B1.c: 255: Timeout_Counter();
 17297  1EE3  319D  25D4  319E   	fcall	_Timeout_Counter
 17298  1EE6                     l6460:	
 17299  1EE6  0020               	movlb	0	; select bank0
 17300  1EE7  1E8E               	btfss	14,5	;volatile
 17301  1EE8  2EEC               	goto	l6464
 17302  1EE9  0021               	movlb	1	; select bank1
 17303  1EEA  1D2B               	btfss	(_myMain^(0+128)+11),2
 17304  1EEB  2EE3               	goto	l6458
 17305  1EEC                     l6464:	
 17306                           
 17307                           ;CC2500_B1.c: 256: };
 17308                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17309  1EEC  319B  23A2  319E   	fcall	_set_TimeoutCleared
 17310                           
 17311                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17312  1EEF  319D  25AC  319E   	fcall	_CC2500_WriteByte
 17313                           
 17314                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17315  1EF2  0020               	movlb	0	; select bank0
 17316  1EF3  0822               	movf	CC2500_WriteREG@value,w
 17317  1EF4  00A3               	movwf	??_CC2500_WriteREG
 17318  1EF5  0823               	movf	??_CC2500_WriteREG,w
 17319  1EF6  00FB               	movwf	_SPI0Buffer
 17320                           
 17321                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17322  1EF7  319D  25AC         	fcall	_CC2500_WriteByte
 17323                           
 17324                           ;CC2500_B1.c: 262: RC0 = 1;
 17325  1EF9  0020               	movlb	0	; select bank0
 17326  1EFA  140E               	bsf	14,0	;volatile
 17327  1EFB  0008               	return
 17328  1EFC                     __end_of_CC2500_WriteREG:	
 17329                           
 17330                           	psect	text115
 17331  1C63                     __ptext115:	
 17332 ;; *************** function _CC2500_FrequencyCabr *****************
 17333 ;; Defined at:
 17334 ;;		line 201 in file "../src/CC2500_B1.c"
 17335 ;; Parameters:    Size  Location     Type
 17336 ;;		None
 17337 ;; Auto vars:     Size  Location     Type
 17338 ;;		None
 17339 ;; Return value:  Size  Location     Type
 17340 ;;		None               void
 17341 ;; Registers used:
 17342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17343 ;; Tracked objects:
 17344 ;;		On entry : 0/0
 17345 ;;		On exit  : 0/0
 17346 ;;		Unchanged: 0/0
 17347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;Total ram usage:        0 bytes
 17353 ;; Hardware stack levels used:    1
 17354 ;; Hardware stack levels required when called:    7
 17355 ;; This function calls:
 17356 ;;		_CC2500_WriteCommand
 17357 ;;		_DelayTime_1us
 17358 ;; This function is called by:
 17359 ;;		_CC2500_PowerOnInitial
 17360 ;; This function uses a non-reentrant model
 17361 ;;
 17362                           
 17363                           
 17364                           ;psect for function _CC2500_FrequencyCabr
 17365  1C63                     _CC2500_FrequencyCabr:	
 17366                           
 17367                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17368                           
 17369                           ;incstack = 0
 17370                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17371  1C63  3033               	movlw	51
 17372  1C64  319E  262D  319C   	fcall	_CC2500_WriteCommand
 17373                           
 17374                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17375  1C67  30E8               	movlw	232
 17376  1C68  0020               	movlb	0	; select bank0
 17377  1C69  00A0               	movwf	DelayTime_1us@count
 17378  1C6A  3003               	movlw	3
 17379  1C6B  00A1               	movwf	DelayTime_1us@count+1
 17380  1C6C  319F  2789         	fcall	_DelayTime_1us
 17381  1C6E  0008               	return
 17382  1C6F                     __end_of_CC2500_FrequencyCabr:	
 17383                           
 17384                           	psect	text116
 17385  1F89                     __ptext116:	
 17386 ;; *************** function _DelayTime_1us *****************
 17387 ;; Defined at:
 17388 ;;		line 320 in file "../src/CC2500_B1.c"
 17389 ;; Parameters:    Size  Location     Type
 17390 ;;  count           2    0[BANK0 ] int 
 17391 ;; Auto vars:     Size  Location     Type
 17392 ;;  j               2    4[BANK0 ] unsigned int 
 17393 ;;  i               2    2[BANK0 ] unsigned int 
 17394 ;; Return value:  Size  Location     Type
 17395 ;;		None               void
 17396 ;; Registers used:
 17397 ;;		wreg, status,2
 17398 ;; Tracked objects:
 17399 ;;		On entry : 0/0
 17400 ;;		On exit  : 0/0
 17401 ;;		Unchanged: 0/0
 17402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17403 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17404 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17406 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17407 ;;Total ram usage:        6 bytes
 17408 ;; Hardware stack levels used:    1
 17409 ;; Hardware stack levels required when called:    5
 17410 ;; This function calls:
 17411 ;;		Nothing
 17412 ;; This function is called by:
 17413 ;;		_CC2500_PowerRST
 17414 ;;		_CC2500_FrequencyCabr
 17415 ;; This function uses a non-reentrant model
 17416 ;;
 17417                           
 17418                           
 17419                           ;psect for function _DelayTime_1us
 17420  1F89                     _DelayTime_1us:	
 17421                           
 17422                           ;CC2500_B1.c: 321: unsigned int i, j;
 17423                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17424                           
 17425                           ;incstack = 0
 17426                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17427  1F89  3001               	movlw	1
 17428  1F8A  0020               	movlb	0	; select bank0
 17429  1F8B  00A2               	movwf	DelayTime_1us@i
 17430  1F8C  3000               	movlw	0
 17431  1F8D  00A3               	movwf	DelayTime_1us@i+1
 17432  1F8E                     l348:	
 17433  1F8E  0821               	movf	DelayTime_1us@count+1,w
 17434  1F8F  0223               	subwf	DelayTime_1us@i+1,w
 17435  1F90  1D03               	skipz
 17436  1F91  2F94               	goto	u5635
 17437  1F92  0820               	movf	DelayTime_1us@count,w
 17438  1F93  0222               	subwf	DelayTime_1us@i,w
 17439  1F94                     u5635:	
 17440  1F94  1803               	btfsc	3,0
 17441  1F95  0008               	return
 17442                           
 17443                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17444  1F96  01A4               	clrf	DelayTime_1us@j
 17445  1F97  01A5               	clrf	DelayTime_1us@j+1
 17446  1F98  3000               	movlw	0
 17447  1F99  0225               	subwf	DelayTime_1us@j+1,w
 17448  1F9A  3002               	movlw	2
 17449  1F9B  1903               	skipnz
 17450  1F9C  0224               	subwf	DelayTime_1us@j,w
 17451  1F9D  1803               	btfsc	3,0
 17452  1F9E  2FAA               	goto	l6452
 17453  1F9F                     l6450:	
 17454  1F9F  3001               	movlw	1
 17455  1FA0  07A4               	addwf	DelayTime_1us@j,f
 17456  1FA1  3000               	movlw	0
 17457  1FA2  3DA5               	addwfc	DelayTime_1us@j+1,f
 17458  1FA3  3000               	movlw	0
 17459  1FA4  0225               	subwf	DelayTime_1us@j+1,w
 17460  1FA5  3002               	movlw	2
 17461  1FA6  1903               	skipnz
 17462  1FA7  0224               	subwf	DelayTime_1us@j,w
 17463  1FA8  1C03               	skipc
 17464  1FA9  2F9F               	goto	l6450
 17465  1FAA                     l6452:	
 17466  1FAA  3001               	movlw	1
 17467  1FAB  07A2               	addwf	DelayTime_1us@i,f
 17468  1FAC  3000               	movlw	0
 17469  1FAD  3DA3               	addwfc	DelayTime_1us@i+1,f
 17470  1FAE  2F8E               	goto	l348
 17471  1FAF                     __end_of_DelayTime_1us:	
 17472                           
 17473                           	psect	text117
 17474  1B82                     __ptext117:	
 17475 ;; *************** function _CC2500_ClearTXFIFO *****************
 17476 ;; Defined at:
 17477 ;;		line 187 in file "../src/CC2500_B1.c"
 17478 ;; Parameters:    Size  Location     Type
 17479 ;;		None
 17480 ;; Auto vars:     Size  Location     Type
 17481 ;;		None
 17482 ;; Return value:  Size  Location     Type
 17483 ;;		None               void
 17484 ;; Registers used:
 17485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17486 ;; Tracked objects:
 17487 ;;		On entry : 0/0
 17488 ;;		On exit  : 0/0
 17489 ;;		Unchanged: 0/0
 17490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;Total ram usage:        0 bytes
 17496 ;; Hardware stack levels used:    1
 17497 ;; Hardware stack levels required when called:    7
 17498 ;; This function calls:
 17499 ;;		_CC2500_WriteCommand
 17500 ;; This function is called by:
 17501 ;;		_CC2500_PowerOnInitial
 17502 ;; This function uses a non-reentrant model
 17503 ;;
 17504                           
 17505                           
 17506                           ;psect for function _CC2500_ClearTXFIFO
 17507  1B82                     _CC2500_ClearTXFIFO:	
 17508                           
 17509                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17510                           
 17511                           ;incstack = 0
 17512                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17513  1B82  303B               	movlw	59
 17514  1B83  319E  262D         	fcall	_CC2500_WriteCommand
 17515  1B85  0008               	return
 17516  1B86                     __end_of_CC2500_ClearTXFIFO:	
 17517                           
 17518                           	psect	text118
 17519  1B7E                     __ptext118:	
 17520 ;; *************** function _CC2500_ClearRXFIFO *****************
 17521 ;; Defined at:
 17522 ;;		line 194 in file "../src/CC2500_B1.c"
 17523 ;; Parameters:    Size  Location     Type
 17524 ;;		None
 17525 ;; Auto vars:     Size  Location     Type
 17526 ;;		None
 17527 ;; Return value:  Size  Location     Type
 17528 ;;		None               void
 17529 ;; Registers used:
 17530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17531 ;; Tracked objects:
 17532 ;;		On entry : 0/0
 17533 ;;		On exit  : 0/0
 17534 ;;		Unchanged: 0/0
 17535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;Total ram usage:        0 bytes
 17541 ;; Hardware stack levels used:    1
 17542 ;; Hardware stack levels required when called:    7
 17543 ;; This function calls:
 17544 ;;		_CC2500_WriteCommand
 17545 ;; This function is called by:
 17546 ;;		_CC2500_PowerOnInitial
 17547 ;; This function uses a non-reentrant model
 17548 ;;
 17549                           
 17550                           
 17551                           ;psect for function _CC2500_ClearRXFIFO
 17552  1B7E                     _CC2500_ClearRXFIFO:	
 17553                           
 17554                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17555                           
 17556                           ;incstack = 0
 17557                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17558  1B7E  303A               	movlw	58
 17559  1B7F  319E  262D         	fcall	_CC2500_WriteCommand
 17560  1B81  0008               	return
 17561  1B82                     __end_of_CC2500_ClearRXFIFO:	
 17562                           
 17563                           	psect	text119
 17564  1E2D                     __ptext119:	
 17565 ;; *************** function _CC2500_WriteCommand *****************
 17566 ;; Defined at:
 17567 ;;		line 285 in file "../src/CC2500_B1.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  command         1    wreg     unsigned char 
 17570 ;; Auto vars:     Size  Location     Type
 17571 ;;  command         1    3[BANK0 ] unsigned char 
 17572 ;; Return value:  Size  Location     Type
 17573 ;;		None               void
 17574 ;; Registers used:
 17575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17576 ;; Tracked objects:
 17577 ;;		On entry : 0/0
 17578 ;;		On exit  : 0/0
 17579 ;;		Unchanged: 0/0
 17580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17585 ;;Total ram usage:        2 bytes
 17586 ;; Hardware stack levels used:    1
 17587 ;; Hardware stack levels required when called:    6
 17588 ;; This function calls:
 17589 ;;		_CC2500_WriteByte
 17590 ;;		_Timeout_Counter
 17591 ;;		_set_TimeoutCleared
 17592 ;; This function is called by:
 17593 ;;		_CC2500_TxData
 17594 ;;		_CC2500_ClearTXFIFO
 17595 ;;		_CC2500_ClearRXFIFO
 17596 ;;		_CC2500_FrequencyCabr
 17597 ;;		_CC2500_SIDLEMode
 17598 ;;		_setRF_Main
 17599 ;;		_RF_RxDisable
 17600 ;; This function uses a non-reentrant model
 17601 ;;
 17602                           
 17603                           
 17604                           ;psect for function _CC2500_WriteCommand
 17605  1E2D                     _CC2500_WriteCommand:	
 17606                           
 17607                           ;incstack = 0
 17608                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17609                           ;CC2500_WriteCommand@command stored from wreg
 17610  1E2D  0020               	movlb	0	; select bank0
 17611  1E2E  00A3               	movwf	CC2500_WriteCommand@command
 17612                           
 17613                           ;CC2500_B1.c: 286: RC0 = 0;
 17614  1E2F  100E               	bcf	14,0	;volatile
 17615                           
 17616                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17617  1E30  0823               	movf	CC2500_WriteCommand@command,w
 17618  1E31  00A2               	movwf	??_CC2500_WriteCommand
 17619  1E32  0822               	movf	??_CC2500_WriteCommand,w
 17620  1E33  00FB               	movwf	_SPI0Buffer
 17621                           
 17622                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17623  1E34  2E38               	goto	l6190
 17624  1E35                     l6188:	
 17625                           
 17626                           ;CC2500_B1.c: 290: Timeout_Counter();
 17627  1E35  319D  25D4  319E   	fcall	_Timeout_Counter
 17628  1E38                     l6190:	
 17629  1E38  0020               	movlb	0	; select bank0
 17630  1E39  1E8E               	btfss	14,5	;volatile
 17631  1E3A  2E3E               	goto	l6194
 17632  1E3B  0021               	movlb	1	; select bank1
 17633  1E3C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17634  1E3D  2E35               	goto	l6188
 17635  1E3E                     l6194:	
 17636                           
 17637                           ;CC2500_B1.c: 291: };
 17638                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17639  1E3E  319B  23A2  319E   	fcall	_set_TimeoutCleared
 17640                           
 17641                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17642  1E41  319D  25AC         	fcall	_CC2500_WriteByte
 17643                           
 17644                           ;CC2500_B1.c: 295: RC0 = 1;
 17645  1E43  0020               	movlb	0	; select bank0
 17646  1E44  140E               	bsf	14,0	;volatile
 17647  1E45  0008               	return
 17648  1E46                     __end_of_CC2500_WriteCommand:	
 17649                           
 17650                           	psect	text120
 17651  1BA2                     __ptext120:	
 17652 ;; *************** function _set_TimeoutCleared *****************
 17653 ;; Defined at:
 17654 ;;		line 283 in file "../src/Main_B1.c"
 17655 ;; Parameters:    Size  Location     Type
 17656 ;;		None
 17657 ;; Auto vars:     Size  Location     Type
 17658 ;;		None
 17659 ;; Return value:  Size  Location     Type
 17660 ;;		None               void
 17661 ;; Registers used:
 17662 ;;		status,2
 17663 ;; Tracked objects:
 17664 ;;		On entry : 0/0
 17665 ;;		On exit  : 0/0
 17666 ;;		Unchanged: 0/0
 17667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;Total ram usage:        0 bytes
 17673 ;; Hardware stack levels used:    1
 17674 ;; Hardware stack levels required when called:    5
 17675 ;; This function calls:
 17676 ;;		Nothing
 17677 ;; This function is called by:
 17678 ;;		_CC2500_TxData
 17679 ;;		_CC2500_RxData
 17680 ;;		_CC2500_PowerRST
 17681 ;;		_CC2500_WriteREG
 17682 ;;		_CC2500_WriteCommand
 17683 ;;		_CC2500_ReadStatus
 17684 ;;		_getAD
 17685 ;;		_TouchPower
 17686 ;;		_CC2500_ReadREG
 17687 ;; This function uses a non-reentrant model
 17688 ;;
 17689                           
 17690                           
 17691                           ;psect for function _set_TimeoutCleared
 17692  1BA2                     _set_TimeoutCleared:	
 17693                           
 17694                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17695                           
 17696                           ;incstack = 0
 17697                           ; Regs used in _set_TimeoutCleared: [status,2]
 17698  1BA2  0021               	movlb	1	; select bank1
 17699  1BA3  112B               	bcf	(_myMain^(0+128)+11),2
 17700                           
 17701                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17702  1BA4  01AC               	clrf	(_myMain^(0+128)+12)
 17703  1BA5  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17704  1BA6  0008               	return
 17705  1BA7                     __end_of_set_TimeoutCleared:	
 17706                           
 17707                           	psect	text121
 17708  1DD4                     __ptext121:	
 17709 ;; *************** function _Timeout_Counter *****************
 17710 ;; Defined at:
 17711 ;;		line 274 in file "../src/Main_B1.c"
 17712 ;; Parameters:    Size  Location     Type
 17713 ;;		None
 17714 ;; Auto vars:     Size  Location     Type
 17715 ;;		None
 17716 ;; Return value:  Size  Location     Type
 17717 ;;		None               void
 17718 ;; Registers used:
 17719 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17720 ;; Tracked objects:
 17721 ;;		On entry : 0/0
 17722 ;;		On exit  : 0/0
 17723 ;;		Unchanged: 0/0
 17724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17729 ;;Total ram usage:        0 bytes
 17730 ;; Hardware stack levels used:    1
 17731 ;; Hardware stack levels required when called:    5
 17732 ;; This function calls:
 17733 ;;		Nothing
 17734 ;; This function is called by:
 17735 ;;		_CC2500_TxData
 17736 ;;		_CC2500_RxData
 17737 ;;		_CC2500_PowerRST
 17738 ;;		_CC2500_WriteREG
 17739 ;;		_CC2500_WriteCommand
 17740 ;;		_CC2500_ReadStatus
 17741 ;;		_getAD
 17742 ;;		_TouchPower
 17743 ;;		_CC2500_ReadREG
 17744 ;; This function uses a non-reentrant model
 17745 ;;
 17746                           
 17747                           
 17748                           ;psect for function _Timeout_Counter
 17749  1DD4                     _Timeout_Counter:	
 17750                           
 17751                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17752                           
 17753                           ;incstack = 0
 17754                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17755  1DD4  3001               	movlw	1
 17756  1DD5  0021               	movlb	1	; select bank1
 17757  1DD6  07AC               	addwf	(_myMain^(0+128)+12),f
 17758  1DD7  3000               	movlw	0
 17759  1DD8  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17760                           
 17761                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 17762  1DD9  300C               	movlw	12
 17763  1DDA  3EA0               	addlw	_myMain& (0+255)
 17764  1DDB  0086               	movwf	6
 17765  1DDC  0187               	clrf	7
 17766  1DDD  3F40               	moviw [0]fsr1
 17767  1DDE  3A10               	xorlw	16
 17768  1DDF  1D03               	skipz
 17769  1DE0  2DE3               	goto	u5095
 17770  1DE1  3F41               	moviw [1]fsr1
 17771  1DE2  3A27               	xorlw	39
 17772  1DE3                     u5095:	
 17773  1DE3  1D03               	skipz
 17774  1DE4  0008               	return
 17775                           
 17776                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17777  1DE5  01AC               	clrf	(_myMain^(0+128)+12)
 17778  1DE6  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17779                           
 17780                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17781  1DE7  152B               	bsf	(_myMain^(0+128)+11),2
 17782  1DE8  0008               	return
 17783  1DE9                     __end_of_Timeout_Counter:	
 17784                           
 17785                           	psect	text122
 17786  1DAC                     __ptext122:	
 17787 ;; *************** function _CC2500_WriteByte *****************
 17788 ;; Defined at:
 17789 ;;		line 219 in file "../src/CC2500_B1.c"
 17790 ;; Parameters:    Size  Location     Type
 17791 ;;		None
 17792 ;; Auto vars:     Size  Location     Type
 17793 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17794 ;; Return value:  Size  Location     Type
 17795 ;;		None               void
 17796 ;; Registers used:
 17797 ;;		wreg, status,2, status,0
 17798 ;; Tracked objects:
 17799 ;;		On entry : 0/0
 17800 ;;		On exit  : 0/0
 17801 ;;		Unchanged: 0/0
 17802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;Total ram usage:        2 bytes
 17808 ;; Hardware stack levels used:    1
 17809 ;; Hardware stack levels required when called:    5
 17810 ;; This function calls:
 17811 ;;		Nothing
 17812 ;; This function is called by:
 17813 ;;		_CC2500_TxData
 17814 ;;		_CC2500_RxData
 17815 ;;		_CC2500_PowerRST
 17816 ;;		_CC2500_WriteREG
 17817 ;;		_CC2500_WriteCommand
 17818 ;;		_CC2500_ReadStatus
 17819 ;;		_CC2500_ReadREG
 17820 ;; This function uses a non-reentrant model
 17821 ;;
 17822                           
 17823                           
 17824                           ;psect for function _CC2500_WriteByte
 17825  1DAC                     _CC2500_WriteByte:	
 17826                           
 17827                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17828                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17829                           
 17830                           ;incstack = 0
 17831                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17832  1DAC  0020               	movlb	0	; select bank0
 17833  1DAD  01A1               	clrf	CC2500_WriteByte@loop_a
 17834  1DAE                     L8:	
 17835  1DAE  3008               	movlw	8
 17836  1DAF  0221               	subwf	CC2500_WriteByte@loop_a,w
 17837  1DB0  1803               	btfsc	3,0
 17838  1DB1  0008               	return
 17839                           
 17840                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17841  1DB2  1FFB               	btfss	_SPI0Buffer,7
 17842  1DB3  2DB6               	goto	l304
 17843                           
 17844                           ;CC2500_B1.c: 223: RC4 = 1;
 17845  1DB4  160E               	bsf	14,4	;volatile
 17846  1DB5  2DB7               	goto	l305
 17847  1DB6                     l304:	
 17848                           
 17849                           ;CC2500_B1.c: 224: else
 17850                           ;CC2500_B1.c: 225: RC4 = 0;
 17851  1DB6  120E               	bcf	14,4	;volatile
 17852  1DB7                     l305:	
 17853                           
 17854                           ;CC2500_B1.c: 226: RC3 = 1;
 17855  1DB7  158E               	bsf	14,3	;volatile
 17856                           
 17857                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17858  1DB8  1003               	clrc
 17859  1DB9  0DFB               	rlf	_SPI0Buffer,f
 17860                           
 17861                           ;CC2500_B1.c: 228: RC3 = 0;
 17862  1DBA  118E               	bcf	14,3	;volatile
 17863  1DBB  3001               	movlw	1
 17864  1DBC  00A0               	movwf	??_CC2500_WriteByte
 17865  1DBD  0820               	movf	??_CC2500_WriteByte,w
 17866  1DBE  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17867  1DBF  2DAE               	goto	L8
 17868  1DC0                     __end_of_CC2500_WriteByte:	
 17869                           
 17870                           	psect	text123
 17871  144D                     __ptext123:	
 17872 ;; *************** function _Buzzer_Main *****************
 17873 ;; Defined at:
 17874 ;;		line 46 in file "../src/Buzzer_B1.c"
 17875 ;; Parameters:    Size  Location     Type
 17876 ;;		None
 17877 ;; Auto vars:     Size  Location     Type
 17878 ;;		None
 17879 ;; Return value:  Size  Location     Type
 17880 ;;		None               void
 17881 ;; Registers used:
 17882 ;;		wreg, status,2, status,0
 17883 ;; Tracked objects:
 17884 ;;		On entry : 0/0
 17885 ;;		On exit  : 0/0
 17886 ;;		Unchanged: 0/0
 17887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17892 ;;Total ram usage:        1 bytes
 17893 ;; Hardware stack levels used:    1
 17894 ;; Hardware stack levels required when called:    5
 17895 ;; This function calls:
 17896 ;;		Nothing
 17897 ;; This function is called by:
 17898 ;;		_main
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           
 17903                           ;psect for function _Buzzer_Main
 17904  144D                     _Buzzer_Main:	
 17905                           
 17906                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17907                           
 17908                           ;incstack = 0
 17909                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17910  144D  0021               	movlb	1	; select bank1
 17911  144E  1CAE               	btfss	_Buz1^(0+128),1
 17912  144F  0008               	return
 17913                           
 17914                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17915  1450  3001               	movlw	1
 17916  1451  07AF               	addwf	(_Buz1^(0+128)+1),f
 17917  1452  3000               	movlw	0
 17918  1453  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 17919                           
 17920                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17921  1454  0835               	movf	((_Buz1+1)^(0+128)+6),w
 17922  1455  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 17923  1456  1D03               	skipz
 17924  1457  2C5A               	goto	u7245
 17925  1458  0834               	movf	(_Buz1^(0+128)+6),w
 17926  1459  022F               	subwf	(_Buz1^(0+128)+1),w
 17927  145A                     u7245:	
 17928  145A  1C03               	skipc
 17929  145B  0008               	return
 17930                           
 17931                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17932  145C  01AF               	clrf	(_Buz1^(0+128)+1)
 17933  145D  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17934                           
 17935                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17936  145E  12AE               	bcf	_Buz1^(0+128),5
 17937  145F  0020               	movlb	0	; select bank0
 17938  1460  1D8D               	btfss	13,3	;volatile
 17939  1461  2C64               	goto	l7432
 17940  1462  0021               	movlb	1	; select bank1
 17941  1463  16AE               	bsf	_Buz1^(0+128),5
 17942  1464                     l7432:	
 17943                           
 17944                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17945  1464  0021               	movlb	1	; select bank1
 17946  1465  1AAE               	btfsc	_Buz1^(0+128),5
 17947  1466  2C90               	goto	l94
 17948                           
 17949                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17950  1467  08B1               	movf	(_Buz1^(0+128)+3),f
 17951  1468  1D03               	skipz
 17952  1469  2C8C               	goto	l95
 17953                           
 17954                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17955  146A  1DAE               	btfss	_Buz1^(0+128),3
 17956  146B  2C7A               	goto	l96
 17957                           
 17958                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17959  146C  11AE               	bcf	_Buz1^(0+128),3
 17960                           
 17961                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17962  146D  0832               	movf	(_Buz1^(0+128)+4),w
 17963  146E  0020               	movlb	0	; select bank0
 17964  146F  00A0               	movwf	??_Buzzer_Main
 17965  1470  0820               	movf	??_Buzzer_Main,w
 17966  1471  0021               	movlb	1	; select bank1
 17967  1472  00B1               	movwf	(_Buz1^(0+128)+3)
 17968                           
 17969                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17970  1473  0837               	movf	((_Buz1+1)^(0+128)+8),w
 17971  1474  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17972  1475  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17973  1476  0836               	movf	(_Buz1^(0+128)+8),w
 17974  1477  01B4               	clrf	(_Buz1^(0+128)+6)
 17975  1478  07B4               	addwf	(_Buz1^(0+128)+6),f
 17976                           
 17977                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17978  1479  0008               	return
 17979  147A                     l96:	
 17980  147A  1E2E               	btfss	_Buz1^(0+128),4
 17981  147B  2C8A               	goto	l98
 17982                           
 17983                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17984  147C  122E               	bcf	_Buz1^(0+128),4
 17985                           
 17986                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17987  147D  0833               	movf	(_Buz1^(0+128)+5),w
 17988  147E  0020               	movlb	0	; select bank0
 17989  147F  00A0               	movwf	??_Buzzer_Main
 17990  1480  0820               	movf	??_Buzzer_Main,w
 17991  1481  0021               	movlb	1	; select bank1
 17992  1482  00B1               	movwf	(_Buz1^(0+128)+3)
 17993                           
 17994                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17995  1483  0839               	movf	((_Buz1+1)^(0+128)+10),w
 17996  1484  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17997  1485  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17998  1486  0838               	movf	(_Buz1^(0+128)+10),w
 17999  1487  01B4               	clrf	(_Buz1^(0+128)+6)
 18000  1488  07B4               	addwf	(_Buz1^(0+128)+6),f
 18001                           
 18002                           ;Buzzer_B1.c: 62: } else {
 18003  1489  0008               	return
 18004  148A                     l98:	
 18005                           
 18006                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18007  148A  10AE               	bcf	_Buz1^(0+128),1
 18008                           
 18009                           ;Buzzer_B1.c: 64: }
 18010                           ;Buzzer_B1.c: 65: } else {
 18011  148B  0008               	return
 18012  148C                     l95:	
 18013                           
 18014                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18015  148C  16AE               	bsf	_Buz1^(0+128),5
 18016                           
 18017                           ;Buzzer_B1.c: 68: RB3 = 1;
 18018  148D  0020               	movlb	0	; select bank0
 18019  148E  158D               	bsf	13,3	;volatile
 18020                           
 18021                           ;Buzzer_B1.c: 69: }
 18022                           ;Buzzer_B1.c: 70: } else {
 18023  148F  0008               	return
 18024  1490                     l94:	
 18025                           
 18026                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18027  1490  12AE               	bcf	_Buz1^(0+128),5
 18028                           
 18029                           ;Buzzer_B1.c: 73: RB3 = 0;
 18030  1491  0020               	movlb	0	; select bank0
 18031  1492  118D               	bcf	13,3	;volatile
 18032                           
 18033                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18034  1493  3001               	movlw	1
 18035  1494  0021               	movlb	1	; select bank1
 18036  1495  02B1               	subwf	(_Buz1^(0+128)+3),f
 18037  1496  0008               	return
 18038  1497                     __end_of_Buzzer_Main:	
 18039                           
 18040                           	psect	text124
 18041  1B6B                     __ptext124:	
 18042 ;; *************** function _Buzzer_Initialization *****************
 18043 ;; Defined at:
 18044 ;;		line 11 in file "../src/Buzzer_B1.c"
 18045 ;; Parameters:    Size  Location     Type
 18046 ;;		None
 18047 ;; Auto vars:     Size  Location     Type
 18048 ;;		None
 18049 ;; Return value:  Size  Location     Type
 18050 ;;		None               void
 18051 ;; Registers used:
 18052 ;;		None
 18053 ;; Tracked objects:
 18054 ;;		On entry : 0/0
 18055 ;;		On exit  : 0/0
 18056 ;;		Unchanged: 0/0
 18057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;Total ram usage:        0 bytes
 18063 ;; Hardware stack levels used:    1
 18064 ;; Hardware stack levels required when called:    5
 18065 ;; This function calls:
 18066 ;;		Nothing
 18067 ;; This function is called by:
 18068 ;;		_main
 18069 ;; This function uses a non-reentrant model
 18070 ;;
 18071                           
 18072                           
 18073                           ;psect for function _Buzzer_Initialization
 18074  1B6B                     _Buzzer_Initialization:	
 18075                           
 18076                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18077                           
 18078                           ;incstack = 0
 18079                           ; Regs used in _Buzzer_Initialization: []
 18080  1B6B  0021               	movlb	1	; select bank1
 18081  1B6C  142E               	bsf	_Buz1^(0+128),0
 18082  1B6D  0008               	return
 18083  1B6E                     __end_of_Buzzer_Initialization:	
 18084                           
 18085                           	psect	intentry
 18086  0004                     __pintentry:	
 18087 ;; *************** function _ISR *****************
 18088 ;; Defined at:
 18089 ;;		line 107 in file "../src/MCU_B1.c"
 18090 ;; Parameters:    Size  Location     Type
 18091 ;;		None
 18092 ;; Auto vars:     Size  Location     Type
 18093 ;;		None
 18094 ;; Return value:  Size  Location     Type
 18095 ;;		None               void
 18096 ;; Registers used:
 18097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18098 ;; Tracked objects:
 18099 ;;		On entry : 0/0
 18100 ;;		On exit  : 0/0
 18101 ;;		Unchanged: 0/0
 18102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;Total ram usage:        1 bytes
 18108 ;; Hardware stack levels used:    1
 18109 ;; Hardware stack levels required when called:    4
 18110 ;; This function calls:
 18111 ;;		_IOC_ISR
 18112 ;;		_TMR1_ISR
 18113 ;; This function is called by:
 18114 ;;		Interrupt level 1
 18115 ;; This function uses a non-reentrant model
 18116 ;;
 18117                           
 18118  0004                     _ISR:	
 18119                           
 18120                           ;incstack = 0
 18121                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18122  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18123  0005  3180               	pagesel	$
 18124  0006  0020               	movlb	0	; select bank0
 18125  0007  087F               	movf	127,w
 18126  0008  00F7               	movwf	??_ISR
 18127                           
 18128                           ;MCU_B1.c: 109: IOC_ISR();
 18129  0009  319C  24AD  3180   	fcall	_IOC_ISR
 18130                           
 18131                           ;MCU_B1.c: 111: ;;
 18132                           ;MCU_B1.c: 113: TMR1_ISR();
 18133  000C  319F  2764         	fcall	_TMR1_ISR
 18134  000E  0877               	movf	??_ISR,w
 18135  000F  0020               	movlb	0	; select bank0
 18136  0010  00FF               	movwf	127
 18137  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18138  0012  0009               	retfie
 18139  0013                     __end_of_ISR:	
 18140                           
 18141                           	psect	text126
 18142  1F64                     __ptext126:	
 18143 ;; *************** function _TMR1_ISR *****************
 18144 ;; Defined at:
 18145 ;;		line 209 in file "../src/MCU_B1.c"
 18146 ;; Parameters:    Size  Location     Type
 18147 ;;		None
 18148 ;; Auto vars:     Size  Location     Type
 18149 ;;		None
 18150 ;; Return value:  Size  Location     Type
 18151 ;;		None               void
 18152 ;; Registers used:
 18153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18154 ;; Tracked objects:
 18155 ;;		On entry : 0/0
 18156 ;;		On exit  : 0/0
 18157 ;;		Unchanged: 0/0
 18158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18163 ;;Total ram usage:        0 bytes
 18164 ;; Hardware stack levels used:    1
 18165 ;; Hardware stack levels required when called:    2
 18166 ;; This function calls:
 18167 ;;		_setDimmerLights_IntrControl
 18168 ;; This function is called by:
 18169 ;;		_ISR
 18170 ;; This function uses a non-reentrant model
 18171 ;;
 18172                           
 18173                           
 18174                           ;psect for function _TMR1_ISR
 18175  1F64                     _TMR1_ISR:	
 18176                           
 18177                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18178                           
 18179                           ;incstack = 0
 18180                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18181  1F64  0021               	movlb	1	; select bank1
 18182  1F65  1C11               	btfss	17,0	;volatile
 18183  1F66  0008               	return
 18184  1F67  0020               	movlb	0	; select bank0
 18185  1F68  1C11               	btfss	17,0	;volatile
 18186  1F69  0008               	return
 18187                           
 18188                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18189  1F6A  30FA               	movlw	250
 18190  1F6B  0097               	movwf	23	;volatile
 18191                           
 18192                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18193  1F6C  3038               	movlw	56
 18194  1F6D  0096               	movwf	22	;volatile
 18195                           
 18196                           ;MCU_B1.c: 214: TMR1IF = 0;
 18197  1F6E  1011               	bcf	17,0	;volatile
 18198                           
 18199                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18200  1F6F  3001               	movlw	1
 18201  1F70  3183  2337  319F   	fcall	_setDimmerLights_IntrControl
 18202                           
 18203                           ;MCU_B1.c: 234: Timer1.Count++;
 18204  1F73  3001               	movlw	1
 18205  1F74  0022               	movlb	2	; select bank2
 18206  1F75  07BF               	addwf	(_Timer1^(0+256)+1),f
 18207  1F76  3000               	movlw	0
 18208  1F77  3DC0               	addwfc	((_Timer1+1)^(0+256)+1),f
 18209                           
 18210                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
 18211  1F78  3001               	movlw	1
 18212  1F79  3E3E               	addlw	_Timer1& (0+255)
 18213  1F7A  0086               	movwf	6
 18214  1F7B  3001               	movlw	1	; select bank2/3
 18215  1F7C  0087               	movwf	7
 18216  1F7D  3F40               	moviw [0]fsr1
 18217  1F7E  3A64               	xorlw	100
 18218  1F7F  1D03               	skipz
 18219  1F80  2F83               	goto	u740_25
 18220  1F81  3F41               	moviw [1]fsr1
 18221  1F82  3A00               	xorlw	0
 18222  1F83                     u740_25:	
 18223  1F83  1D03               	skipz
 18224  1F84  0008               	return
 18225                           
 18226                           ;MCU_B1.c: 236: Timer1.Count = 0;
 18227  1F85  01BF               	clrf	(_Timer1^(0+256)+1)
 18228  1F86  01C0               	clrf	((_Timer1+1)^(0+256)+1)
 18229                           
 18230                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
 18231  1F87  143E               	bsf	_Timer1^(0+256),0
 18232  1F88  0008               	return
 18233  1F89                     __end_of_TMR1_ISR:	
 18234                           
 18235                           	psect	text127
 18236  0337                     __ptext127:	
 18237 ;; *************** function _setDimmerLights_IntrControl *****************
 18238 ;; Defined at:
 18239 ;;		line 94 in file "../src/Dimmer_B1.c"
 18240 ;; Parameters:    Size  Location     Type
 18241 ;;  lights          1    wreg     unsigned char 
 18242 ;; Auto vars:     Size  Location     Type
 18243 ;;  lights          1    6[COMMON] unsigned char 
 18244 ;; Return value:  Size  Location     Type
 18245 ;;		None               void
 18246 ;; Registers used:
 18247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18248 ;; Tracked objects:
 18249 ;;		On entry : 0/0
 18250 ;;		On exit  : 0/0
 18251 ;;		Unchanged: 0/0
 18252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18255 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18256 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18257 ;;Total ram usage:        5 bytes
 18258 ;; Hardware stack levels used:    1
 18259 ;; Hardware stack levels required when called:    1
 18260 ;; This function calls:
 18261 ;;		_DimmerIntrPointSelect
 18262 ;; This function is called by:
 18263 ;;		_TMR1_ISR
 18264 ;; This function uses a non-reentrant model
 18265 ;;
 18266                           
 18267                           
 18268                           ;psect for function _setDimmerLights_IntrControl
 18269  0337                     _setDimmerLights_IntrControl:	
 18270                           
 18271                           ;incstack = 0
 18272                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18273                           ;setDimmerLights_IntrControl@lights stored from wreg
 18274  0337  00F6               	movwf	setDimmerLights_IntrControl@lights
 18275                           
 18276                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 18277  0338  0876               	movf	setDimmerLights_IntrControl@lights,w
 18278  0339  319B  23F7  3183   	fcall	_DimmerIntrPointSelect
 18279                           
 18280                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 18281  033C  0A79               	incf	_DimmerLightsIntr,w
 18282  033D  0086               	movwf	6
 18283  033E  3001               	movlw	1	; select bank2/3
 18284  033F  0087               	movwf	7
 18285  0340  1C01               	btfss	1,0
 18286  0341  2B90               	goto	i1l6866
 18287                           
 18288                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 18289  0342  3001               	movlw	1
 18290  0343  00F2               	movwf	??_setDimmerLights_IntrControl
 18291  0344  0879               	movf	_DimmerLightsIntr,w
 18292  0345  3E03               	addlw	3
 18293  0346  0086               	movwf	6
 18294  0347  3001               	movlw	1	; select bank2/3
 18295  0348  0087               	movwf	7
 18296  0349  0872               	movf	??_setDimmerLights_IntrControl,w
 18297  034A  0781               	addwf	1,f
 18298                           
 18299                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 18300                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18301  034B  0021               	movlb	1	; select bank1
 18302  034C  0848               	movf	(_Dimmer^(0+128)+2),w	;volatile
 18303  034D  00F2               	movwf	??_setDimmerLights_IntrControl
 18304  034E  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18305  034F  09F2               	comf	??_setDimmerLights_IntrControl,f
 18306  0350  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18307  0351  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18308  0352  1903               	skipnz
 18309  0353  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18310  0354  0879               	movf	_DimmerLightsIntr,w
 18311  0355  3E04               	addlw	4
 18312  0356  0086               	movwf	6
 18313  0357  3001               	movlw	1	; select bank2/3
 18314  0358  0087               	movwf	7
 18315  0359  0801               	movf	1,w
 18316  035A  0772               	addwf	??_setDimmerLights_IntrControl,w
 18317  035B  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18318  035C  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18319  035D  1803               	skipnc
 18320  035E  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18321  035F  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18322  0360  0879               	movf	_DimmerLightsIntr,w
 18323  0361  3E03               	addlw	3
 18324  0362  0086               	movwf	6
 18325  0363  3001               	movlw	1	; select bank2/3
 18326  0364  0087               	movwf	7
 18327  0365  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18328  0366  3A80               	xorlw	128
 18329  0367  3C80               	sublw	128
 18330  0368  1D03               	skipz
 18331  0369  2B6C               	goto	u622_25
 18332  036A  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18333  036B  0201               	subwf	1,w
 18334  036C                     u622_25:	
 18335  036C  1C03               	skipc
 18336  036D  0008               	return
 18337                           
 18338                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 18339  036E  0879               	movf	_DimmerLightsIntr,w
 18340  036F  3E03               	addlw	3
 18341  0370  0086               	movwf	6
 18342  0371  3001               	movlw	1	; select bank2/3
 18343  0372  0087               	movwf	7
 18344  0373  0181               	clrf	1
 18345                           
 18346                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 18347  0374  0A79               	incf	_DimmerLightsIntr,w
 18348  0375  0086               	movwf	6
 18349  0376  3001               	movlw	1	; select bank2/3
 18350  0377  0087               	movwf	7
 18351  0378  1001               	bcf	1,0
 18352                           
 18353                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 18354  0379  0A79               	incf	_DimmerLightsIntr,w
 18355  037A  0086               	movwf	6
 18356  037B  3001               	movlw	1	; select bank2/3
 18357  037C  0087               	movwf	7
 18358  037D  1581               	bsf	1,3
 18359                           
 18360                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 18361  037E  0879               	movf	_DimmerLightsIntr,w
 18362  037F  0086               	movwf	6
 18363  0380  3001               	movlw	1	; select bank2/3
 18364  0381  0087               	movwf	7
 18365  0382  1C01               	btfss	1,0
 18366  0383  0008               	return
 18367                           
 18368                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 18369  0384  0879               	movf	_DimmerLightsIntr,w
 18370  0385  0086               	movwf	6
 18371  0386  3001               	movlw	1	; select bank2/3
 18372  0387  0087               	movwf	7
 18373  0388  1001               	bcf	1,0
 18374                           
 18375                           ;Dimmer_B1.c: 243: if (lights == 1) {
 18376  0389  0876               	movf	setDimmerLights_IntrControl@lights,w
 18377  038A  3A01               	xorlw	1
 18378  038B  1D03               	skipz
 18379  038C  0008               	return
 18380                           
 18381                           ;Dimmer_B1.c: 244: RB1 = 0;
 18382  038D  0020               	movlb	0	; select bank0
 18383  038E  108D               	bcf	13,1	;volatile
 18384                           
 18385                           ;Dimmer_B1.c: 246: }
 18386                           ;Dimmer_B1.c: 253: }
 18387                           ;Dimmer_B1.c: 254: }
 18388                           ;Dimmer_B1.c: 255: } else {
 18389  038F  0008               	return
 18390  0390                     i1l6866:	
 18391                           
 18392                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 18393  0390  0A79               	incf	_DimmerLightsIntr,w
 18394  0391  0086               	movwf	6
 18395  0392  3001               	movlw	1	; select bank2/3
 18396  0393  0087               	movwf	7
 18397  0394  1D81               	btfss	1,3
 18398  0395  2C57               	goto	i1l674
 18399                           
 18400                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 18401  0396  0A79               	incf	_DimmerLightsIntr,w
 18402  0397  0086               	movwf	6
 18403  0398  3001               	movlw	1	; select bank2/3
 18404  0399  0087               	movwf	7
 18405  039A  1181               	bcf	1,3
 18406                           
 18407                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 18408  039B  0A79               	incf	_DimmerLightsIntr,w
 18409  039C  0086               	movwf	6
 18410  039D  3001               	movlw	1	; select bank2/3
 18411  039E  0087               	movwf	7
 18412  039F  1E81               	btfss	1,5
 18413  03A0  2C57               	goto	i1l674
 18414                           
 18415                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 18416  03A1  3001               	movlw	1
 18417  03A2  00F2               	movwf	??_setDimmerLights_IntrControl
 18418  03A3  0879               	movf	_DimmerLightsIntr,w
 18419  03A4  3E05               	addlw	5
 18420  03A5  0086               	movwf	6
 18421  03A6  3001               	movlw	1	; select bank2/3
 18422  03A7  0087               	movwf	7
 18423  03A8  0872               	movf	??_setDimmerLights_IntrControl,w
 18424  03A9  0781               	addwf	1,f
 18425                           
 18426                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18427  03AA  0879               	movf	_DimmerLightsIntr,w
 18428  03AB  3E05               	addlw	5
 18429  03AC  0086               	movwf	6
 18430  03AD  3001               	movlw	1	; select bank2/3
 18431  03AE  0087               	movwf	7
 18432  03AF  0879               	movf	_DimmerLightsIntr,w
 18433  03B0  3E08               	addlw	8
 18434  03B1  0084               	movwf	4
 18435  03B2  3001               	movlw	1	; select bank2/3
 18436  03B3  0085               	movwf	5
 18437  03B4  0800               	movf	0,w
 18438  03B5  0201               	subwf	1,w
 18439  03B6  1C03               	skipc
 18440  03B7  2C57               	goto	i1l674
 18441                           
 18442                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 18443  03B8  0879               	movf	_DimmerLightsIntr,w
 18444  03B9  3E05               	addlw	5
 18445  03BA  0086               	movwf	6
 18446  03BB  3001               	movlw	1	; select bank2/3
 18447  03BC  0087               	movwf	7
 18448  03BD  0181               	clrf	1
 18449                           
 18450                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 18451  03BE  0A79               	incf	_DimmerLightsIntr,w
 18452  03BF  0086               	movwf	6
 18453  03C0  3001               	movlw	1	; select bank2/3
 18454  03C1  0087               	movwf	7
 18455  03C2  1F01               	btfss	1,6
 18456  03C3  2C0A               	goto	i1l6896
 18457                           
 18458                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 18459  03C4  0A79               	incf	_DimmerLightsIntr,w
 18460  03C5  0086               	movwf	6
 18461  03C6  3001               	movlw	1	; select bank2/3
 18462  03C7  0087               	movwf	7
 18463  03C8  1B81               	btfsc	1,7
 18464  03C9  2BEB               	goto	i1l6888
 18465                           
 18466                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(65*0.8))) {
 18467  03CA  0879               	movf	_DimmerLightsIntr,w
 18468  03CB  3E04               	addlw	4
 18469  03CC  0086               	movwf	6
 18470  03CD  3001               	movlw	1	; select bank2/3
 18471  03CE  0087               	movwf	7
 18472  03CF  3034               	movlw	52
 18473  03D0  0201               	subwf	1,w
 18474  03D1  1803               	skipnc
 18475  03D2  2BDC               	goto	i1l6884
 18476                           
 18477                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 18478  03D3  3001               	movlw	1
 18479  03D4  00F2               	movwf	??_setDimmerLights_IntrControl
 18480  03D5  0879               	movf	_DimmerLightsIntr,w
 18481  03D6  3E04               	addlw	4
 18482  03D7  0086               	movwf	6
 18483  03D8  3001               	movlw	1	; select bank2/3
 18484  03D9  0087               	movwf	7
 18485  03DA  0872               	movf	??_setDimmerLights_IntrControl,w
 18486  03DB  0781               	addwf	1,f
 18487  03DC                     i1l6884:	
 18488                           
 18489                           ;Dimmer_B1.c: 266: }
 18490                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(65*0.8))) {
 18491  03DC  0879               	movf	_DimmerLightsIntr,w
 18492  03DD  3E04               	addlw	4
 18493  03DE  0086               	movwf	6
 18494  03DF  3001               	movlw	1	; select bank2/3
 18495  03E0  0087               	movwf	7
 18496  03E1  0801               	movf	1,w
 18497  03E2  3A34               	xorlw	52
 18498  03E3  1D03               	skipz
 18499  03E4  2C57               	goto	i1l674
 18500                           
 18501                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 18502  03E5  0A79               	incf	_DimmerLightsIntr,w
 18503  03E6  0086               	movwf	6
 18504  03E7  3001               	movlw	1	; select bank2/3
 18505  03E8  0087               	movwf	7
 18506  03E9  1781               	bsf	1,7
 18507                           
 18508                           ;Dimmer_B1.c: 269: }
 18509                           ;Dimmer_B1.c: 270: } else {
 18510  03EA  2C57               	goto	i1l674
 18511  03EB                     i1l6888:	
 18512                           
 18513                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18514  03EB  0879               	movf	_DimmerLightsIntr,w
 18515  03EC  3E04               	addlw	4
 18516  03ED  0086               	movwf	6
 18517  03EE  3001               	movlw	1	; select bank2/3
 18518  03EF  0087               	movwf	7
 18519  03F0  300D               	movlw	13
 18520  03F1  0201               	subwf	1,w
 18521  03F2  1C03               	skipc
 18522  03F3  2BFB               	goto	i1l6892
 18523                           
 18524                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 18525  03F4  0879               	movf	_DimmerLightsIntr,w
 18526  03F5  3E04               	addlw	4
 18527  03F6  0086               	movwf	6
 18528  03F7  3001               	movlw	1	; select bank2/3
 18529  03F8  0087               	movwf	7
 18530  03F9  3001               	movlw	1
 18531  03FA  0281               	subwf	1,f
 18532  03FB                     i1l6892:	
 18533                           
 18534                           ;Dimmer_B1.c: 273: }
 18535                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18536  03FB  0879               	movf	_DimmerLightsIntr,w
 18537  03FC  3E04               	addlw	4
 18538  03FD  0086               	movwf	6
 18539  03FE  3001               	movlw	1	; select bank2/3
 18540  03FF  0087               	movwf	7
 18541  0400  0801               	movf	1,w
 18542  0401  3A0C               	xorlw	12
 18543  0402  1D03               	skipz
 18544  0403  2C57               	goto	i1l674
 18545                           
 18546                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 18547  0404  0A79               	incf	_DimmerLightsIntr,w
 18548  0405  0086               	movwf	6
 18549  0406  3001               	movlw	1	; select bank2/3
 18550  0407  0087               	movwf	7
 18551  0408  1381               	bcf	1,7
 18552                           
 18553                           ;Dimmer_B1.c: 276: }
 18554                           ;Dimmer_B1.c: 277: }
 18555                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 18556  0409  2C57               	goto	i1l674
 18557  040A                     i1l6896:	
 18558  040A  0879               	movf	_DimmerLightsIntr,w
 18559  040B  3E02               	addlw	2
 18560  040C  0086               	movwf	6
 18561  040D  3001               	movlw	1	; select bank2/3
 18562  040E  0087               	movwf	7
 18563  040F  1C01               	btfss	1,0
 18564  0410  2C57               	goto	i1l674
 18565                           
 18566                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18567  0411  0879               	movf	_DimmerLightsIntr,w
 18568  0412  3E04               	addlw	4
 18569  0413  0086               	movwf	6
 18570  0414  3001               	movlw	1	; select bank2/3
 18571  0415  0087               	movwf	7
 18572  0416  0879               	movf	_DimmerLightsIntr,w
 18573  0417  3E06               	addlw	6
 18574  0418  0084               	movwf	4
 18575  0419  3001               	movlw	1	; select bank2/3
 18576  041A  0085               	movwf	5
 18577  041B  0800               	movf	0,w
 18578  041C  0201               	subwf	1,w
 18579  041D  1803               	skipnc
 18580  041E  2C29               	goto	i1l6902
 18581                           
 18582                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 18583  041F  3001               	movlw	1
 18584  0420  00F2               	movwf	??_setDimmerLights_IntrControl
 18585  0421  0879               	movf	_DimmerLightsIntr,w
 18586  0422  3E04               	addlw	4
 18587  0423  0086               	movwf	6
 18588  0424  3001               	movlw	1	; select bank2/3
 18589  0425  0087               	movwf	7
 18590  0426  0872               	movf	??_setDimmerLights_IntrControl,w
 18591  0427  0781               	addwf	1,f
 18592                           
 18593                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18594  0428  2C3E               	goto	i1l6906
 18595  0429                     i1l6902:	
 18596  0429  0879               	movf	_DimmerLightsIntr,w
 18597  042A  3E06               	addlw	6
 18598  042B  0086               	movwf	6
 18599  042C  3001               	movlw	1	; select bank2/3
 18600  042D  0087               	movwf	7
 18601  042E  0879               	movf	_DimmerLightsIntr,w
 18602  042F  3E04               	addlw	4
 18603  0430  0084               	movwf	4
 18604  0431  3001               	movlw	1	; select bank2/3
 18605  0432  0085               	movwf	5
 18606  0433  0800               	movf	0,w
 18607  0434  0201               	subwf	1,w
 18608  0435  1803               	skipnc
 18609  0436  2C3E               	goto	i1l6906
 18610                           
 18611                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 18612  0437  0879               	movf	_DimmerLightsIntr,w
 18613  0438  3E04               	addlw	4
 18614  0439  0086               	movwf	6
 18615  043A  3001               	movlw	1	; select bank2/3
 18616  043B  0087               	movwf	7
 18617  043C  3001               	movlw	1
 18618  043D  0281               	subwf	1,f
 18619  043E                     i1l6906:	
 18620                           
 18621                           ;Dimmer_B1.c: 283: }
 18622                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18623  043E  0879               	movf	_DimmerLightsIntr,w
 18624  043F  3E06               	addlw	6
 18625  0440  0086               	movwf	6
 18626  0441  3001               	movlw	1	; select bank2/3
 18627  0442  0087               	movwf	7
 18628  0443  0879               	movf	_DimmerLightsIntr,w
 18629  0444  3E04               	addlw	4
 18630  0445  0084               	movwf	4
 18631  0446  3001               	movlw	1	; select bank2/3
 18632  0447  0085               	movwf	5
 18633  0448  0800               	movf	0,w
 18634  0449  0601               	xorwf	1,w
 18635  044A  1D03               	skipz
 18636  044B  2C57               	goto	i1l674
 18637                           
 18638                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 18639  044C  0879               	movf	_DimmerLightsIntr,w
 18640  044D  3E02               	addlw	2
 18641  044E  0086               	movwf	6
 18642  044F  3001               	movlw	1	; select bank2/3
 18643  0450  0087               	movwf	7
 18644  0451  1001               	bcf	1,0
 18645                           
 18646                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 18647  0452  0A79               	incf	_DimmerLightsIntr,w
 18648  0453  0086               	movwf	6
 18649  0454  3001               	movlw	1	; select bank2/3
 18650  0455  0087               	movwf	7
 18651  0456  1281               	bcf	1,5
 18652  0457                     i1l674:	
 18653                           
 18654                           ;Dimmer_B1.c: 287: }
 18655                           ;Dimmer_B1.c: 288: }
 18656                           ;Dimmer_B1.c: 289: }
 18657                           ;Dimmer_B1.c: 290: }
 18658                           ;Dimmer_B1.c: 291: }
 18659                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 18660  0457  0A79               	incf	_DimmerLightsIntr,w
 18661  0458  0086               	movwf	6
 18662  0459  3001               	movlw	1	; select bank2/3
 18663  045A  0087               	movwf	7
 18664  045B  1C81               	btfss	1,1
 18665  045C  0008               	return
 18666                           
 18667                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 18668  045D  3001               	movlw	1
 18669  045E  00F2               	movwf	??_setDimmerLights_IntrControl
 18670  045F  0879               	movf	_DimmerLightsIntr,w
 18671  0460  3E0D               	addlw	13
 18672  0461  0086               	movwf	6
 18673  0462  3001               	movlw	1	; select bank2/3
 18674  0463  0087               	movwf	7
 18675  0464  0872               	movf	??_setDimmerLights_IntrControl,w
 18676  0465  0781               	addwf	1,f
 18677                           
 18678                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18679  0466  0879               	movf	_DimmerLightsIntr,w
 18680  0467  3E0D               	addlw	13
 18681  0468  0086               	movwf	6
 18682  0469  3001               	movlw	1	; select bank2/3
 18683  046A  0087               	movwf	7
 18684  046B  0801               	movf	1,w
 18685  046C  3A05               	xorlw	5
 18686  046D  1D03               	skipz
 18687  046E  0008               	return
 18688                           
 18689                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 18690  046F  0879               	movf	_DimmerLightsIntr,w
 18691  0470  3E0D               	addlw	13
 18692  0471  0086               	movwf	6
 18693  0472  3001               	movlw	1	; select bank2/3
 18694  0473  0087               	movwf	7
 18695  0474  0181               	clrf	1
 18696                           
 18697                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 18698  0475  0A79               	incf	_DimmerLightsIntr,w
 18699  0476  0086               	movwf	6
 18700  0477  3001               	movlw	1	; select bank2/3
 18701  0478  0087               	movwf	7
 18702  0479  1081               	bcf	1,1
 18703  047A  0008               	return
 18704  047B                     __end_of_setDimmerLights_IntrControl:	
 18705                           
 18706                           	psect	text128
 18707  1BF7                     __ptext128:	
 18708 ;; *************** function _DimmerIntrPointSelect *****************
 18709 ;; Defined at:
 18710 ;;		line 72 in file "../src/Dimmer_B1.c"
 18711 ;; Parameters:    Size  Location     Type
 18712 ;;  lights          1    wreg     unsigned char 
 18713 ;; Auto vars:     Size  Location     Type
 18714 ;;  lights          1    1[COMMON] unsigned char 
 18715 ;; Return value:  Size  Location     Type
 18716 ;;		None               void
 18717 ;; Registers used:
 18718 ;;		wreg
 18719 ;; Tracked objects:
 18720 ;;		On entry : 0/0
 18721 ;;		On exit  : 0/0
 18722 ;;		Unchanged: 0/0
 18723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18726 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18727 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18728 ;;Total ram usage:        2 bytes
 18729 ;; Hardware stack levels used:    1
 18730 ;; This function calls:
 18731 ;;		Nothing
 18732 ;; This function is called by:
 18733 ;;		_setDimmerLights_IntrControl
 18734 ;; This function uses a non-reentrant model
 18735 ;;
 18736                           
 18737                           
 18738                           ;psect for function _DimmerIntrPointSelect
 18739  1BF7                     _DimmerIntrPointSelect:	
 18740                           
 18741                           ;incstack = 0
 18742                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18743                           ;DimmerIntrPointSelect@lights stored from wreg
 18744  1BF7  00F1               	movwf	DimmerIntrPointSelect@lights
 18745                           
 18746                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18747  1BF8  0871               	movf	DimmerIntrPointSelect@lights,w
 18748  1BF9  3A01               	xorlw	1
 18749  1BFA  1D03               	skipz
 18750  1BFB  0008               	return
 18751                           
 18752                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18753  1BFC  30C5               	movlw	_DimmerLights1& (0+255)
 18754  1BFD  00F0               	movwf	??_DimmerIntrPointSelect
 18755  1BFE  0870               	movf	??_DimmerIntrPointSelect,w
 18756  1BFF  00F9               	movwf	_DimmerLightsIntr
 18757  1C00  0008               	return
 18758  1C01                     __end_of_DimmerIntrPointSelect:	
 18759                           
 18760                           	psect	text129
 18761  1CAD                     __ptext129:	
 18762 ;; *************** function _IOC_ISR *****************
 18763 ;; Defined at:
 18764 ;;		line 400 in file "../src/MCU_B1.c"
 18765 ;; Parameters:    Size  Location     Type
 18766 ;;		None
 18767 ;; Auto vars:     Size  Location     Type
 18768 ;;		None
 18769 ;; Return value:  Size  Location     Type
 18770 ;;		None               void
 18771 ;; Registers used:
 18772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18773 ;; Tracked objects:
 18774 ;;		On entry : 0/0
 18775 ;;		On exit  : 0/0
 18776 ;;		Unchanged: 0/0
 18777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18782 ;;Total ram usage:        0 bytes
 18783 ;; Hardware stack levels used:    1
 18784 ;; Hardware stack levels required when called:    3
 18785 ;; This function calls:
 18786 ;;		_setDimmerReClock
 18787 ;; This function is called by:
 18788 ;;		_ISR
 18789 ;; This function uses a non-reentrant model
 18790 ;;
 18791                           
 18792                           
 18793                           ;psect for function _IOC_ISR
 18794  1CAD                     _IOC_ISR:	
 18795                           
 18796                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18797                           
 18798                           ;incstack = 0
 18799                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18800  1CAD  1D8B               	btfss	11,3	;volatile
 18801  1CAE  0008               	return
 18802  1CAF  1C0B               	btfss	11,0	;volatile
 18803  1CB0  0008               	return
 18804  1CB1  0027               	movlb	7	; select bank7
 18805  1CB2  1D16               	btfss	22,2	;volatile
 18806  1CB3  0008               	return
 18807                           
 18808                           ;MCU_B1.c: 402: IOCBF2 = 0;
 18809  1CB4  1116               	bcf	22,2	;volatile
 18810                           
 18811                           ;MCU_B1.c: 403: IOCIF = 0;
 18812  1CB5  100B               	bcf	11,0	;volatile
 18813                           
 18814                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 18815  1CB6  0021               	movlb	1	; select bank1
 18816  1CB7  1C20               	btfss	_myMain^(0+128),0
 18817  1CB8  0008               	return
 18818                           
 18819                           ;MCU_B1.c: 407: setDimmerReClock();
 18820  1CB9  319B  237A         	fcall	_setDimmerReClock
 18821  1CBB  0008               	return
 18822  1CBC                     __end_of_IOC_ISR:	
 18823                           
 18824                           	psect	text130
 18825  1B7A                     __ptext130:	
 18826 ;; *************** function _setDimmerReClock *****************
 18827 ;; Defined at:
 18828 ;;		line 243 in file "../src/MCU_B1.c"
 18829 ;; Parameters:    Size  Location     Type
 18830 ;;		None
 18831 ;; Auto vars:     Size  Location     Type
 18832 ;;		None
 18833 ;; Return value:  Size  Location     Type
 18834 ;;		None               void
 18835 ;; Registers used:
 18836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18837 ;; Tracked objects:
 18838 ;;		On entry : 0/0
 18839 ;;		On exit  : 0/0
 18840 ;;		Unchanged: 0/0
 18841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18846 ;;Total ram usage:        0 bytes
 18847 ;; Hardware stack levels used:    1
 18848 ;; Hardware stack levels required when called:    2
 18849 ;; This function calls:
 18850 ;;		_setDimmerLights_IntrIOC_GO
 18851 ;; This function is called by:
 18852 ;;		_IOC_ISR
 18853 ;; This function uses a non-reentrant model
 18854 ;;
 18855                           
 18856                           
 18857                           ;psect for function _setDimmerReClock
 18858  1B7A                     _setDimmerReClock:	
 18859                           
 18860                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 18861                           
 18862                           ;incstack = 0
 18863                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18864  1B7A  3001               	movlw	1
 18865  1B7B  3191  2159         	fcall	_setDimmerLights_IntrIOC_GO
 18866  1B7D  0008               	return
 18867  1B7E                     __end_of_setDimmerReClock:	
 18868                           
 18869                           	psect	text131
 18870  1159                     __ptext131:	
 18871 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18872 ;; Defined at:
 18873 ;;		line 28 in file "../src/Dimmer_B1.c"
 18874 ;; Parameters:    Size  Location     Type
 18875 ;;  lights          1    wreg     unsigned char 
 18876 ;; Auto vars:     Size  Location     Type
 18877 ;;  lights          1    2[COMMON] unsigned char 
 18878 ;; Return value:  Size  Location     Type
 18879 ;;		None               void
 18880 ;; Registers used:
 18881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18882 ;; Tracked objects:
 18883 ;;		On entry : 0/0
 18884 ;;		On exit  : 0/0
 18885 ;;		Unchanged: 0/0
 18886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18890 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18891 ;;Total ram usage:        1 bytes
 18892 ;; Hardware stack levels used:    1
 18893 ;; Hardware stack levels required when called:    1
 18894 ;; This function calls:
 18895 ;;		_DimmerIntrIOCPointSelect
 18896 ;; This function is called by:
 18897 ;;		_setDimmerReClock
 18898 ;; This function uses a non-reentrant model
 18899 ;;
 18900                           
 18901                           
 18902                           ;psect for function _setDimmerLights_IntrIOC_GO
 18903  1159                     _setDimmerLights_IntrIOC_GO:	
 18904                           
 18905                           ;incstack = 0
 18906                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18907                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18908  1159  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18909                           
 18910                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18911  115A  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18912  115B  319C  240B  3191   	fcall	_DimmerIntrIOCPointSelect
 18913                           
 18914                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 18915  115E  0021               	movlb	1	; select bank1
 18916  115F  0A4F               	incf	_DimmerLightsIntrIOC^(0+128),w
 18917  1160  0086               	movwf	6
 18918  1161  3001               	movlw	1	; select bank2/3
 18919  1162  0087               	movwf	7
 18920  1163  1801               	btfsc	1,0
 18921  1164  0008               	return
 18922  1165  0A4F               	incf	_DimmerLightsIntrIOC^(0+128),w
 18923  1166  0086               	movwf	6
 18924  1167  3001               	movlw	1	; select bank2/3
 18925  1168  0087               	movwf	7
 18926  1169  1881               	btfsc	1,1
 18927  116A  0008               	return
 18928  116B  0020               	movlb	0	; select bank0
 18929  116C  190D               	btfsc	13,2	;volatile
 18930  116D  0008               	return
 18931                           
 18932                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 18933  116E  0021               	movlb	1	; select bank1
 18934  116F  0A4F               	incf	_DimmerLightsIntrIOC^(0+128),w
 18935  1170  0086               	movwf	6
 18936  1171  3001               	movlw	1	; select bank2/3
 18937  1172  0087               	movwf	7
 18938  1173  1401               	bsf	1,0
 18939                           
 18940                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 18941  1174  0A4F               	incf	_DimmerLightsIntrIOC^(0+128),w
 18942  1175  0086               	movwf	6
 18943  1176  3001               	movlw	1	; select bank2/3
 18944  1177  0087               	movwf	7
 18945  1178  1481               	bsf	1,1
 18946                           
 18947                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 18948  1179  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 18949                           
 18950                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18951  117A  0A4F               	incf	_DimmerLightsIntrIOC^(0+128),w
 18952  117B  0086               	movwf	6
 18953  117C  3001               	movlw	1	; select bank2/3
 18954  117D  0087               	movwf	7
 18955  117E  1D01               	btfss	1,2
 18956  117F  0008               	return
 18957                           
 18958                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 18959  1180  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 18960  1181  0086               	movwf	6
 18961  1182  3001               	movlw	1	; select bank2/3
 18962  1183  0087               	movwf	7
 18963  1184  1401               	bsf	1,0
 18964                           
 18965                           ;Dimmer_B1.c: 53: if (lights == 1) {
 18966  1185  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18967  1186  3A01               	xorlw	1
 18968  1187  1D03               	skipz
 18969  1188  0008               	return
 18970                           
 18971                           ;Dimmer_B1.c: 54: RB1 = 1;
 18972  1189  0020               	movlb	0	; select bank0
 18973  118A  148D               	bsf	13,1	;volatile
 18974  118B  0008               	return
 18975  118C                     __end_of_setDimmerLights_IntrIOC_GO:	
 18976                           
 18977                           	psect	text132
 18978  1C0B                     __ptext132:	
 18979 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18980 ;; Defined at:
 18981 ;;		line 8 in file "../src/Dimmer_B1.c"
 18982 ;; Parameters:    Size  Location     Type
 18983 ;;  lights          1    wreg     unsigned char 
 18984 ;; Auto vars:     Size  Location     Type
 18985 ;;  lights          1    1[COMMON] unsigned char 
 18986 ;; Return value:  Size  Location     Type
 18987 ;;		None               void
 18988 ;; Registers used:
 18989 ;;		wreg
 18990 ;; Tracked objects:
 18991 ;;		On entry : 0/0
 18992 ;;		On exit  : 0/0
 18993 ;;		Unchanged: 0/0
 18994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18999 ;;Total ram usage:        2 bytes
 19000 ;; Hardware stack levels used:    1
 19001 ;; This function calls:
 19002 ;;		Nothing
 19003 ;; This function is called by:
 19004 ;;		_setDimmerLights_IntrIOC_GO
 19005 ;; This function uses a non-reentrant model
 19006 ;;
 19007                           
 19008                           
 19009                           ;psect for function _DimmerIntrIOCPointSelect
 19010  1C0B                     _DimmerIntrIOCPointSelect:	
 19011                           
 19012                           ;incstack = 0
 19013                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19014                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19015  1C0B  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19016                           
 19017                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19018  1C0C  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19019  1C0D  3A01               	xorlw	1
 19020  1C0E  1D03               	skipz
 19021  1C0F  0008               	return
 19022                           
 19023                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19024  1C10  30C5               	movlw	_DimmerLights1& (0+255)
 19025  1C11  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19026  1C12  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19027  1C13  0021               	movlb	1	; select bank1
 19028  1C14  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19029  1C15  0008               	return
 19030  1C16                     __end_of_DimmerIntrIOCPointSelect:	
 19031  007E                     btemp	set	126	;btemp
 19032  007E                     pic14e$flags	set	126
 19033  007E                     wtemp	set	126
 19034  007E                     wtemp0	set	126
 19035  0080                     wtemp1	set	128
 19036  0082                     wtemp2	set	130
 19037  0084                     wtemp3	set	132
 19038  0086                     wtemp4	set	134
 19039  0088                     wtemp5	set	136
 19040  007F                     wtemp6	set	127
 19041  007E                     ttemp	set	126
 19042  007E                     ttemp0	set	126
 19043  0081                     ttemp1	set	129
 19044  0084                     ttemp2	set	132
 19045  0087                     ttemp3	set	135
 19046  007F                     ttemp4	set	127
 19047  007E                     ltemp	set	126
 19048  007E                     ltemp0	set	126
 19049  0082                     ltemp1	set	130
 19050  0086                     ltemp2	set	134
 19051  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      79
    BANK3            80      0      72
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK3[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK3[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK3[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK3[17]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   75165
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1415
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     445
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1577
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    1577
                                             13 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4541
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4541
                                             17 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     137
                                              2 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     818
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     818
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   22531
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   22531
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   21748
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1459
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   20105
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    5643
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1528
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   11659
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11458
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11392
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11348
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            8     8      0    1202
                                              9 BANK0      8     8      0
                            ___lwdiv
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            2     2      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     840
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     840
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1097
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    9804
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       6     6      0    3991
                                             17 BANK0      6     6      0
            _DimmerLightsPointSelect
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   21920
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   21529
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1    9549
                                             66 BANK0      4     3      1
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   10433
                                             66 BANK0      4     3      1
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     348
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0    8846
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     380
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     173
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3246
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     774
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 5     5      0     183
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    2869
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    2869
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    1388
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1098
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     942
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1415
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Exception_Main
     _DimmerLightsPointSelect
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      48      11       90.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     165      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     165      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Dec 11 13:42:01 2014

                   __size_of_Switch_Main 0007                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002                           ___bmul@product 0022  
              getMain_Lights_Count@count 0020                                       l84 1611  
                                     l94 1490                                       l86 1625  
                                     l95 148C                                       l96 147A  
                                     l98 148A                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1EFC                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007C  
                   _getDimmerLights_Line 1C37                   __end_of_setDelayOff_GO 1800  
                           ___ftadd@exp1 004D                             ___ftadd@exp2 004C  
              setDimmerLights_Adj@lights 0065                 __size_of_getRF_KeyStatus 0011  
                   _setDimmerLights_Main 1639                     _setDimmerLights_Line 1C6F  
                           ___ftadd@sign 004B                                      l231 0966  
                                    l304 1DB6                                      l305 1DB7  
                   _setDimmerLights_SwOn 1406                                      l348 1F8E  
                                    l705 1121                                      _GIE 005F  
                                    _CRC 00CD                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000A  
                                    _RB1 0069                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 007A                                      _RC1 0071  
                                    _RB3 006B                                      _RA6 0066  
                                    _RC3 0073                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RF1 00BA  
                                    _ISR 0004                                      _WDT 00CB  
           getDimmerLights_Status@lights 0022                                      _Sw1 01D6  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1DC0  
                  _Buzzer_Initialization 1B6B                          __end_of_ADC_Set 1BC5  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0BA6                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1F40                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1CBC                               Load_Main@i 0030  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l1202 14DD                                     l2022 064C  
                                   l2031 05CF                                     l2024 059A  
                                   l2105 08CB                                     l2033 0608  
                                   l2025 059C                                     l2026 05A4  
                                   l2117 13AE                                     l1433 11B9  
                                   l1193 10F0                 ?_DimmerLightsPointSelect 0070  
                                   l1179 1258                                     l2067 1CC1  
                                   l2091 1290                                     l2075 0CEA  
                                   l1428 11A2                                     l1429 11BD  
                                   l2085 0D40                                     l2405 032E  
                                   l2407 0207                                     l1560 01BE  
                                   l1457 0E98                                     l1385 1305  
                                   l1706 0F48                                     l1563 007E  
                                   l1564 018E                                     l1565 018C  
                        __end_of_IOC_Set 1C9F                                     l2385 07F2  
                         _Load_Main$3733 002E                                     l2742 08FF  
                                   l6110 1E0B                                     l6008 1793  
                                   l6112 1E0F                                     l6130 16C8  
                                   l6210 1F30                                     l2771 051A  
                                   l6132 169C                                     l2748 0916  
                                   l6204 1F27                                     l6134 16CE  
                                   l6206 1F2A                                     l6062 1134  
                                   l6320 0892                                     l6234 119D  
                                   l6162 1518                                     l6330 08B0  
                                   l8002 171B                                     l6244 11B4  
                                   l6236 11A6                                     l5540 08EB  
                                   l5532 08D5                                     l5604 04B9  
                                   l6412 0AE3                                     l6340 0934  
                                   l6180 139C                                     l6324 08A8  
                                   l6308 086D                                     l6190 1E38  
                                   l6270 121E                                     l6262 120A  
                                   l5622 04E6                                     l6430 0B0C  
                                   l6406 0ADA                                     l6342 0937  
                                   l6166 1527                                     l6326 08AC  
                                   l7302 07FD                                     l7134 0EB5  
                                   l7062 1EAE                                     l5560 1D53  
                                   l6256 1201                                     l5536 08DC  
                                   l5640 052C                                     l5624 04F0  
                                   l5616 04D3                                     l7080 14B3  
                                   l6408 0ADD                                     l6360 094E  
                                   l5712 0F79                                     l7216 05BB  
                                   l7056 1EA6                                     l6194 1E3E  
                                   l6450 1F9F                                     l5546 0904  
                                   l5538 08E6                                     l5634 050C  
                                   l5626 04F5                                     l6514 0BF0  
                                   l7074 149E                                     l6370 0975  
                                   l6346 093D                                     l5706 0F63  
                                   l7250 05ED                                     l7058 1EA9  
                                   l6188 1E35                                     l6452 1FAA  
                                   l6460 1EE6                                     l5564 1D59  
                                   l5548 090C                                     l5644 053E  
                                   l5636 0516                                     l5628 04F9  
                                   l6532 099F                                     l6612 10D8  
                                   l6428 0AF4                                     l6372 0979  
                                   l6364 096C                                     l5740 0FD8  
                                   l5724 0FB4                                     l7252 05EF  
                                   l7332 0235                                     l7316 01F2  
                                   l7164 0F14                                     l7180 0F42  
                  _setDimmerLights_SwOff 1588                                     l5582 1F07  
                                   l5654 0559                                     l5670 0D70  
                                   l6526 0C18                                     l7414 12BB  
                                   l7406 129D                                     l6390 0ABF  
                                   l6374 097C                                     l6366 096F  
                                   l7342 0267                                     l7166 0F16  
                                   l7432 1464                                     l6464 1EEC  
                                   l5664 0D5A                                     l7408 12A9  
                                   l6392 0AC2                                     l5736 0FD0  
                                   l5728 0FBC                                     l6720 0D36  
                                   l6704 0D05                                     l7280 063A  
                                   l7176 0F2B                                     l6458 1EE3  
                                   l5842 153F                                     l5818 109B  
                                   l5922 17DB                                     l5594 04A3  
                                   l7418 12C4                                     l6378 0982  
                                   l6714 0D2B                                     l7178 0F2C  
                                   l5860 155E                                     l5924 17E8  
                                   l5692 0DCA                                     l5684 0DB1  
                                   l5764 0C45                                     l6396 0AC8  
                                   l7268 0619                                     l7356 02A5  
                                   l5870 1579                                     l5926 17F1  
                                   l5918 17D5                                     l5598 04AA  
                                   l5790 0C90                                     l5782 0C75  
                                   l6398 0ACB                                     l6558 131D  
                                   l7366 02D7                                     l7630 0B46  
                                   l5848 154A                                     l5792 0C99  
                                   l5784 0C83                                     l7480 1123  
                                   l7800 016C                                     l6656 1D39  
                                   l6680 0CD6                                     l6744 1D4A  
                                   l7392 032A                                     l6762 13E7  
                                   l5874 1581                                     l5866 1570  
                                   l5858 1552                                     l5794 0C9C  
                                   l7538 06C2                                     l7730 006D  
                                   l7298 07F7                                     l7642 0B73  
                                   l6772 13F7                                     l6764 13EA  
                                   l6940 10C0                                     l7476 1118  
                                   l7900 0E5E                                     l6692 0CED  
                                   l6774 13FA                                     l6942 10A4  
                                   l5798 0CAA                                     l7478 111B  
                                   l5974 1446                                     l7638 0B6B  
                                   l6768 13F0                                     l6944 10C5  
                                   l6960 1664                                     l7752 0099  
                                   l7672 1374                                     l6778 1400  
                                   l6970 168C                                     l7914 0E8E  
                                   l7850 01AC                                     l7658 0BA0  
                                   l7690 12E5                                     l5988 15C6  
                                   l7908 0E7C                    _myMain_Initialization 0800  
                                   l6958 165E                                     l7782 0144  
                                   l7790 0157                                     l7758 00C3  
                                   l7880 0E16                                     l6978 1C3F  
                                   l7874 0E06                                     l7884 0E25  
                                   l7788 0151                                     l7896 0E56  
                                   _CFGS 0CAE                                     l7898 0E2A  
                                   l7998 1710                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4105 08E1                                     u4125 08FA  
                                   u5040 1751                                     u4145 0907  
                                   u4315 04D4                                     u4405 050D  
                                   u5045 174F                                     u4175 091D  
                                   u4345 04E7                                     u4505 0DC1  
                                   u4515 0DCB                                     _PEIE 005E  
                                   u5095 1DE3                                     u4375 04FA  
                                   u5185 16A5                                     u4705 0C76  
                                   u4625 0FD9                                     u4475 0D82  
                                   u4635 0FDF                                     u4555 0F85  
                                   u8020 0E5C                                     u4485 0D92  
                                   u7205 12B4                                     u4565 0F95  
                                   u6415 10AD                                     u4495 0DB2  
                                   u4735 0C91                                     u7215 12BC  
                                   u8025 0E33                                     u4585 0FBD  
                                   u5635 1F94                                     u4835 1555  
                                   u4675 0C4C                                     u4595 0FC3  
                                   u7245 145A                                     u4855 155F  
                                   u7175 12A0                                     u4865 1569  
                                   u4785 1087                                     u4875 1571  
                                   u7195 12AA                                     u7535 0B59  
                                   u6905 062A                                     u6665 0EFC  
                                   u7475 124F                                     u7635 136B  
                                   u6685 0F1C                                     u7645 137A  
                                   u7815 0104                                     u6785 05B5  
                                   u7585 0B8D                                     u7685 12FD  
                                   u7875 015D                                     _LWLO 0CAD  
                                   _RSSI 00D0                                     _WREN 0CAA  
                                   _Buz1 00AE                                     _Load 0141  
                                   _Temp 00D7                                     _main 16EC  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 086C  
                        __end_of_RF_Main 1B74                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
                                   btemp 007E                          __end_of_WDT_Set 1C4D  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1B7A                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 13C3  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                      ?_getDimmer_LoadOK 0070                                    ??_ISR 0077  
                           ___fttol@exp1 005B                             ___fttol@lval 0057  
                 _getDimmerLights_Status 1CFB                       ??_getDimmer_LoadOK 0020  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1B9A  
       setDimmerLights_ErrorClose@lights 0033            __end_of_DimmerIntrPointSelect 1C01  
                  ?_getDimmerLights_Line 0070                              Load_Main@sw 002C  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EC                          __end_of___awdiv 1588  
                        __end_of___ftadd 0571                          __end_of___ftdiv 0DEC  
                        __end_of___ftneg 1BE5                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CB3                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 12CB                                    i1l674 0457  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 1DE9                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 118C               _setDimmerLights_IntrIOC_GO 1159  
                       __end_of_TMR1_ISR 1F89             __size_of_CC2500_WriteCommand 0019  
     __end_of_setDimmerLights_ErrorClose 16EC               _setDimmerLights_ErrorClose 1692  
                       __end_of_TMR1_Set 1073                                    _getAD 1E9B  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1D86  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E8                           __CFG_BOREN$OFF 0000  
           __end_of_getMain_Lights_Count 1CEB                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
           __end_of_getMain_LightsStatus 10C8            __end_of_setLED_Initialization 1D1D  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1747              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
       __size_of_DelayOff_Initialization 0004                   ?_setLoad_AH_AL_Restore 0070  
                      setTemp_Main@error 002F                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0A56                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 1747  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 1BA2  
                     ??_setMemory_Modify 0020                           _Exception_Main 0DEC  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0C2C                     _setSw_Initialization 1CEB  
                                 ??_main 006E                            ___fttol@sign1 0056  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 086C  
                         _setMemory_Data 1C7B                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 000B                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03E8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1C2C                   ?_setDimmerLights_AdjRF 0070  
               __size_of_setRFSW_Control 004F                  ??_Switch_Initialization 0025  
                   ??_setRF_DimmerLights 0021                                   ?_getAD 0020  
           setDimmerLights_AdjControl@sw 0025                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 080F  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006E  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1F1E                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 092D                 _getMain_All_Error_Status 118C  
                                 _IOCBF2 1CB2                                   i1l6902 0429  
                                 i1l6906 043E                                   i1l6866 0390  
                                 i1l6892 03FB                                   i1l6884 03DC  
                                 i1l6888 03EB                                   i1l6896 040A  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u622_25 036C                                   _OSCCON 0099  
                                 u740_25 1F83                       __size_of_Load_Main 0181  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1E15                                   _WDTCON 0097  
                     DelayTime_1us@count 0020           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1DFE                                   _Dimmer 00C6  
                                 _DlySw1 01DF               __end_of_Mcu_Initialization 1D74  
                    __end_of_Buzzer_Main 1497                                   _Memory 01A0  
                                 _Timer1 013E                                   ___bmul 1D50  
                 __end_of_Exception_Main 0E99                     Exception_Main@lights 0034  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
                              ??___lwdiv 0024              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D5                                   _s_data 00D6  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 11F2  
                                 _myMain 00A0                   __end_of_setMemory_Data 1C87  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 15E0                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1BAC         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 047B  
            _setDimmerLights_IntrControl 0337                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1DAC  
            getMain_Lights_Count@status1 0023              getMain_Lights_Count@status2 0021  
            getMain_Lights_Count@status3 0022                    __end_of_SwPointSelect 1C63  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 000B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 07EB  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0ABB  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 003F  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$5012 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                          ?_Exception_Main 0070  
                           __pidataBANK4 1EBB                            __end_of_getAD 1EBB  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0063                       _LED_Initialization 1B92  
                        _getSw_KeyStatus 1D3F                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1CDB  
                              ?_WDT_Main 0070                        __end_of_Load_Main 01C4  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 109D  
             __end_of_set_TimeoutCleared 1BA7                 __end_of_setDimmerReClock 1B7E  
                     __size_of_getRxData 0090                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CE                     __size_of_setLED_Main 0033  
                                ??_getAD 0023                      _Temp_Initialization 1B74  
                     ??_CC2500_WriteByte 0020                               __pbssBANK0 006F  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 144D                        ??_setRFSW_Control 0031  
                      __end_of_Temp_Main 1B7A                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1B8A  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 0034  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 16EC  
                         _getDelayOff_GO 1CCB                      _CC2500_WriteCommand 1E2D  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0B25  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1BCC  
                     __size_of_setTxData 00BF                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1BBE                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1345                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1C58  
                     _setRFSW_AdjControl 1383                                  _IOC_ISR 1CAD  
                                _IOC_Set 1C93                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1228  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 1E46  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 006A  
                 __size_of_CC2500_TxData 0061              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 1B71                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1C42  
        __end_of_setControl_Lights_Table 08CC                          setRF_Main@error 00EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 09F1                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1C6F  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1D2E  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1CDB           __end_of_getDimmerLights_Status 1D0C  
                      __end_of_getRxData 0D43                  __end_of_getSw_KeyStatus 1D50  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C16  
                  ??_Temp_Initialization 0020                     ??_setRFSW_AdjControl 0067  
                         ??_setTemp_Main 002D                          __size_of___bmul 0012  
                                ___awdiv 1534                                  ___ftadd 047B  
                                ___ftdiv 0D43                                  ___ftneg 1BDC  
                                ___ftmul 0F4C                                  ___fttol 0C2C  
                    __end_of_Switch_Main 1BCC                                  ___lwdiv 1294  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1D2E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0036                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 12CB  
                                __ptext2 0800                                  __ptext3 1345  
                                __ptext4 0B25                                  __ptext5 1E9B  
                                __ptext6 1D74                                  __ptext7 0002  
                                __ptext8 1B77                                  __ptext9 0E99  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1BF7                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 125E  
              __end_of_Flash_Memory_Read 1E60                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 0571                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1B8E                        _DimmerLights_Main 10F7  
         __size_of_DlyOff_Initialization 0006                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1BB2  
             __end_of_CC2500_ClearRXFIFO 1B82                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1B86            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1C2C  
                    _DelayOffPointSelect 1C16                           _getMain_LoadOK 1C9F  
                                clrloop0 1BB9           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 1BF7                     end_of_initialization 003F  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1FD6  
                          _DelayTime_1us 1F89                        __end_of_setTxData 07EB  
             __end_of_Flash_Memory_Write 10F7                                  init_ram 1BB2  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1BB3  
                             _setSw_Main 01C4                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002F                        _CC2500_ReadStatus 1F1E  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1D0C  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0ABB                            _CC2500_TxData 092D  
                    ??_CC2500_InitSetREG 0025            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1497  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1BE5                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1127                       _Mcu_Initialization 1D62  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 1307  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1C37                  __end_of_setPercentValue 0A56  
                 __end_of_getMain_LoadOK 1CAD                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 2000                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 098E  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1F40  
                          ?_RF_RxDisable 0070              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                       ??_Exception_Main 0031                           __end_of_IO_Set 1E2D  
                   _setRF_Initialization 1C4D                       _setMemory_LoopSave 1D99  
                            _Switch_Main 1BC5                        __size_of_LED_Main 0004  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C21  
                __end_of_getRF_KeyStatus 1D3F                         ??_setMemory_Data 0021  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1DE9  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1D62  
                   setRF_DimmerLights@on 0020          _setDimmerLights_AdjControl$2164 0024  
               _DimmerIntrIOCPointSelect 1C0B                        getSw_KeyStatus@sw 0070  
                      __size_of_TMR1_ISR 0025            __size_of_getDimmerLights_Line 000B  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0059                           __end_of_setLED 1228  
          __size_of_setDimmerLights_Line 000C            __size_of_setDimmerLights_SwOn 0047  
                         __end_of_setBuz 1639                     _CC2500_FrequencyCabr 1C63  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 14E5  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1127  
                        ?_LedPointSelect 0070                                _Load_Main 0043  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1BD4                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E9B  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                     __end_of_setTemp_Main 0F4C  
                         ??_RF_RxDisable 0024                      __size_of_getLoad_AD 0081  
                           ?_Buzzer_Main 0070                      __size_of_getLoad_OK 0008  
                     _set_TimeoutCleared 1BA2                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 01E4  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0064  
                    __size_of_getTemp_AD 003E                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1B77  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                      Exception_Main@count 0032  
                setRF_DimmerValue@lights 0066                      Exception_Main@error 0033  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00D3  
                            __pdataBANK4 0220                _getAll_DimmerLights_AdjGO 1B9A  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 11BF  
                       _CC2500_SIDLEMode 1B86               __size_of_DimmerLights_Main 0030  
              __end_of_setRF_DimmerValue 1159                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1D86                               ?_Load_Main 0070  
                          __pcstackBANK0 0020                            __pcstackBANK1 00E9  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0086                            DlyOff_Main@sw 0038  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 005D               __size_of_CC2500_ReadStatus 0022  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01C5                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1E7C                 setRFSW_AdjControl@status 0069  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                         getRxData@error 006C              __size_of_LED_Initialization 0004  
                 ?_CC2500_PowerOnInitial 0070                          Exception_Main@i 0035  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00DF  
                         Load_Main@adjgo 002D                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002F  
                 _setTemp_Initialization 1066                                _getBuz_GO 1D1D  
    __end_of_Flash_Memory_Initialization 072C              _Flash_Memory_Initialization 0650  
                               ?___awdiv 0020                                __ptext100 1D50  
                              __ptext101 1CCB                                __ptext110 1B86  
                              __ptext102 1CFB                                __ptext111 13C3  
                              __ptext103 1C21                                __ptext120 1BA2  
                              __ptext112 1FD6                                __ptext104 15E0  
                              __ptext121 1DD4                                __ptext113 1E7C  
                              __ptext105 1534                                __ptext130 1B7A  
                              __ptext122 1DAC                                __ptext114 1EDB  
                              __ptext106 1B8A                                __ptext131 1159  
                              __ptext123 144D                                __ptext115 1C63  
                              __ptext107 1BAC                                __ptext132 1C0B  
                              __ptext124 1B6B                                __ptext116 1F89  
                              __ptext108 1C16                                __ptext117 1B82  
                              __ptext109 1DE9                                 ?___ftadd 0041  
                              __ptext126 1F64                                __ptext118 1B7E  
                              __ptext127 0337                                __ptext119 1E2D  
                              __ptext128 1BF7                                __ptext129 1CAD  
                              _getRxData 0CB3                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 003C  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 1534  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B6E  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0020  
                     __end_of_TouchPower 0800                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 0173             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0024            __end_of_setDimmerLights_AdjRF 1F64  
                 CC2500_WriteByte@loop_a 0021                   _DimmerLights_Main$2139 0069  
                              _r_address 00D4           __size_of_setDimmerLights_SwOff 0058  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 15E0  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 080F  
                         __size_of_getAD 0020                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1C58  
                    __end_of_setLED_Main 11F2                         ??_getDelayOff_GO 0022  
                    _DimmerLightsIntrIOC 00CF                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1B77             setDimmerLights_SwOff@command 002F  
                      _CC2500_rfSettings 102F                                 _LED_Main 1B96  
                        SwPointSelect@sw 0021                                clear_ram0 1BB8  
               CC2500_InitPATable@loop_d 0027                             _my_MainTimer 12CB  
                              _setTxData 072C      __end_of_DimmerLights_Initialization 1C0B  
            _DimmerLights_Initialization 1C01                       _CC2500_ClearRXFIFO 1B7E  
            getAll_DimmerLights_AdjGO@sw 0070                       _CC2500_ClearTXFIFO 1B82  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1DD4                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 0065  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 10C8                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 1F64  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1067  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                               _RF_Count 00C9                     __end_of_RF_RxDisable 1CCB  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1E46  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1D74  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0021  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0032  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 00E9  
                  __size_of_setTemp_Main 00B3                  __size_of_setDelayOff_GO 005D  
           ??_setDimmerLights_AdjControl 0022                                 _DelayOff 0078  
                           setSw_Main@sw 0033         setDimmerLights_IntrIOC_GO@lights 0072  
                            ??_Load_Main 0029                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0026  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1C93  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 1294  
                  _DlyOff_Initialization 1BAC                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1B9E  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 0032  
                     __end_of_getLoad_AD 0BA6                       __end_of_getLoad_OK 1BD4  
                  _Switch_Initialization 1BEE        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1383                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1DAC                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00D2  
                            ??_Temp_Main 0030                        setRFSW_Control@sw 0033  
          _getMain_All_Error_Status$3401 0021            _getMain_All_Error_Status$3402 0023  
               __end_of_getDimmer_LoadOK 1BDC                      _Load_Initialization 1BA7  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 003E                             _setTemp_Main 0E99  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 1EFC  
                       ??_LedPointSelect 0020                                 ___ftpack 08CC  
          __size_of_getMain_Lights_Count 0010                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002B                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 11BF               __end_of_setRF_DimmerLights 17A3  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
                        ___lwdiv@divisor 0020       __size_of_getAll_DimmerLights_AdjGO 0004  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 1B74                                 __ptext11 1066  
                               __ptext20 07EB                                 __ptext12 1BC5  
                               __ptext21 1B71                                 __ptext13 01C4  
                               __ptext30 1127                                 __ptext22 0571  
                               __ptext14 1DC0                                 __ptext31 1F40  
                               __ptext23 0CB3                                 __ptext15 1307  
                               __ptext40 1F1E                                 __ptext32 0A56  
                               __ptext24 125E                                 __ptext16 1D3F  
                               __ptext41 1DFE                                 __ptext33 0F4C  
                               __ptext25 1D99                                 __ptext17 1C58  
                               __ptext50 1BBE                                 __ptext42 1B6E  
                               __ptext34 1D86                                 __ptext26 086C  
                               __ptext18 1BEE                                 __ptext51 0043  
                               __ptext43 1C4D                                 __ptext35 1D2E  
                               __ptext27 14E5                                 __ptext19 1CEB  
                               __ptext60 11BF                                 __ptext52 1C9F  
                               __ptext44 1D62                                 __ptext36 1D1D  
                               __ptext28 1406                                 __ptext61 1B92  
                               __ptext53 1BD4                                 __ptext45 1C42  
                               __ptext37 1CBC                                 __ptext29 1383  
                               __ptext70 1E46                                 __ptext62 1D0C  
                               __ptext54 1CDB                                 __ptext46 1067  
                               __ptext38 092D                                 __ptext71 0DEC  
                               __ptext63 1228                                 __ptext55 1B9A  
                               __ptext47 1E15                                 __ptext39 0ABB  
                               __ptext80 0C2C                                 __ptext72 1C37  
                               __ptext64 1497                                 __ptext56 1294  
                               __ptext48 1C93                                 __ptext81 1BDC  
                               __ptext73 10F7                                 __ptext65 1C87  
                               __ptext57 1BA7                                 __ptext49 1B9E  
                               __ptext90 109D                                 __ptext82 0D43  
                               __ptext74 1639                                 __ptext66 0650  
                               __ptext58 1E60                                 __ptext91 1BCC  
                               __ptext83 047B                                 __ptext75 098E  
                               __ptext67 1C7B                                 __ptext59 1B96  
                               __ptext92 1C01                                 __ptext84 1EFC  
                               __ptext76 0BA6                                 __ptext68 10C8  
                               __ptext93 1FAF                                 __ptext85 08CC  
                               __ptext77 072C                                 __ptext69 1BE5  
                               __ptext94 1B8E                                 __ptext86 11F2  
                               __ptext78 1747                                 __ptext95 080F  
                               __ptext87 1C2C                                 __ptext79 09F1  
                               __ptext96 1692                                 __ptext88 1C6F  
                               __ptext97 1588                                 __ptext89 118C  
                               __ptext98 17A3                                 __ptext99 1073  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
           __end_of_getDimmerLights_Line 1C42             __end_of_setDimmerLights_Main 1692  
           __end_of_setDimmerLights_Line 1C7B             __end_of_setDimmerLights_SwOn 144D  
                 getDimmer_LoadOK@status 0020                             ??_setSw_Main 0031  
                          setLED@command 0022                            __size_of_main 005B  
                            _setRF_Learn 1DC0                 __end_of_CC2500_SIDLEMode 1B8A  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1C21  
             CC2500_WriteCommand@command 0023                     setRF_Main@Receive_OK 00EA  
              __size_of_setDimmerReClock 0004           setDimmerLights_AdjControl@idle 0023  
                        _CC2500_ReadByte 1DFE                       _CC2500_InitPATable 1E7C  
               __end_of_setMemory_Modify 1D99                       __end_of_setRF_Main 0650  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
                               main@argc 00EC                                 main@argv 00EE  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$5977 0022  
                        _CC2500_PowerRST 13C3                 __size_of_getSw_KeyStatus 0011  
            __end_of_Flash_Memory_Modify 14E5                        ??_getPercentValue 005C  
                            _setLog_Code 125E              __end_of_Flash_Memory_Unlock 1BEE  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1EDB  
                     __end_of_setSw_Main 0337                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E9                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 1073                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0031                  setDimmerLights_SwOff@sw 0030  
      __end_of_getAll_DimmerLights_AdjGO 1B9E              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1FD6  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 1FAF              __end_of_setDimmerLights_Adj 09F1  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 000F  
                      _RF_Initialization 1B6E     __size_of_setDimmerLights_IntrControl 0144  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1C87  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
                __size_of_Exception_Main 00AD          __end_of_DelayOff_Initialization 1B8E  
    __size_of_setDimmerLights_IntrIOC_GO 0033      __size_of_setDimmerLights_ErrorClose 005A  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1B92  
     __end_of_setDimmerLights_AdjControl 1345               _setDimmerLights_AdjControl 1307  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 17A3         __size_of_setControl_Lights_Table 0060  
                 __end_of_DelayTimejudge 109D     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0036  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 1FAF  
                __end_of_CC2500_ReadByte 1E15             __end_of_setSw_Initialization 1CFB  
                        _Timeout_Counter 1DD4          __size_of_getDimmerLights_Status 0011  
                   getPercentValue@value 005E                             _RF_RxDisable 1CBC  
             __end_of_LED_Initialization 1B96           __end_of_setTemp_Initialization 1067  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1B71  
                  __end_of_CC2500_RxData 0B25                    __end_of_CC2500_TxData 098E  
                  _setLoad_AH_AL_Restore 1E60                  __end_of_CC2500_PowerRST 1406  
         getAll_DimmerLights_AdjGO@adjgo 0020  
