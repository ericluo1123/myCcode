

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Jan 27 13:19:33 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	intentry,global,class=CODE,delta=2
   157                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text143,local,class=CODE,merge=1,delta=2
   163                           	dabs	1,0x7E,2
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020D                     	;# 
   237  0210                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  029A                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  0010                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0099                     	;# 
   312  009A                     	;# 
   313  009B                     	;# 
   314  009B                     	;# 
   315  009C                     	;# 
   316  009D                     	;# 
   317  009E                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  0116                     	;# 
   322  0117                     	;# 
   323  011D                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0194                     	;# 
   333  0195                     	;# 
   334  0196                     	;# 
   335  0197                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019C                     	;# 
   343  019C                     	;# 
   344  019D                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  020D                     	;# 
   348  0210                     	;# 
   349  0211                     	;# 
   350  0211                     	;# 
   351  0212                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0213                     	;# 
   355  0214                     	;# 
   356  0214                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0216                     	;# 
   361  0216                     	;# 
   362  0217                     	;# 
   363  0217                     	;# 
   364  0291                     	;# 
   365  0291                     	;# 
   366  0292                     	;# 
   367  0293                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  0394                     	;# 
   373  0395                     	;# 
   374  0396                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0090                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  011D                     	;# 
   435  018C                     	;# 
   436  018D                     	;# 
   437  018E                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0194                     	;# 
   444  0195                     	;# 
   445  0196                     	;# 
   446  0197                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019C                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020D                     	;# 
   459  0210                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0291                     	;# 
   476  0291                     	;# 
   477  0292                     	;# 
   478  0293                     	;# 
   479  0298                     	;# 
   480  0298                     	;# 
   481  0299                     	;# 
   482  029A                     	;# 
   483  0394                     	;# 
   484  0395                     	;# 
   485  0396                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0116                     	;# 
   544  0117                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548  018E                     	;# 
   549  0191                     	;# 
   550  0191                     	;# 
   551  0192                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0197                     	;# 
   558  0199                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019C                     	;# 
   565  019C                     	;# 
   566  019D                     	;# 
   567  019E                     	;# 
   568  019F                     	;# 
   569  020D                     	;# 
   570  0210                     	;# 
   571  0211                     	;# 
   572  0211                     	;# 
   573  0212                     	;# 
   574  0212                     	;# 
   575  0213                     	;# 
   576  0213                     	;# 
   577  0214                     	;# 
   578  0214                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0216                     	;# 
   583  0216                     	;# 
   584  0217                     	;# 
   585  0217                     	;# 
   586  0291                     	;# 
   587  0291                     	;# 
   588  0292                     	;# 
   589  0293                     	;# 
   590  0298                     	;# 
   591  0298                     	;# 
   592  0299                     	;# 
   593  029A                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  0FE4                     	;# 
   598  0FE5                     	;# 
   599  0FE6                     	;# 
   600  0FE7                     	;# 
   601  0FE8                     	;# 
   602  0FE9                     	;# 
   603  0FEA                     	;# 
   604  0FEB                     	;# 
   605  0FED                     	;# 
   606  0FEE                     	;# 
   607  0FEF                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  0010                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0016                     	;# 
   629  0017                     	;# 
   630  0018                     	;# 
   631  0019                     	;# 
   632  001A                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0097                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009C                     	;# 
   649  009D                     	;# 
   650  009E                     	;# 
   651  010C                     	;# 
   652  010D                     	;# 
   653  010E                     	;# 
   654  0116                     	;# 
   655  0117                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  018E                     	;# 
   660  0191                     	;# 
   661  0191                     	;# 
   662  0192                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0197                     	;# 
   669  0199                     	;# 
   670  019A                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019E                     	;# 
   679  019F                     	;# 
   680  020D                     	;# 
   681  0210                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0213                     	;# 
   688  0214                     	;# 
   689  0214                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0216                     	;# 
   694  0216                     	;# 
   695  0217                     	;# 
   696  0217                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0298                     	;# 
   702  0298                     	;# 
   703  0299                     	;# 
   704  029A                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000D                     	;# 
   733  000E                     	;# 
   734  0010                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0015                     	;# 
   738  0016                     	;# 
   739  0016                     	;# 
   740  0017                     	;# 
   741  0018                     	;# 
   742  0019                     	;# 
   743  001A                     	;# 
   744  001B                     	;# 
   745  001C                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0097                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0116                     	;# 
   766  0117                     	;# 
   767  011D                     	;# 
   768  018C                     	;# 
   769  018D                     	;# 
   770  018E                     	;# 
   771  0191                     	;# 
   772  0191                     	;# 
   773  0192                     	;# 
   774  0193                     	;# 
   775  0193                     	;# 
   776  0194                     	;# 
   777  0195                     	;# 
   778  0196                     	;# 
   779  0197                     	;# 
   780  0199                     	;# 
   781  019A                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019C                     	;# 
   787  019C                     	;# 
   788  019D                     	;# 
   789  019E                     	;# 
   790  019F                     	;# 
   791  020D                     	;# 
   792  0210                     	;# 
   793  0211                     	;# 
   794  0211                     	;# 
   795  0212                     	;# 
   796  0212                     	;# 
   797  0213                     	;# 
   798  0213                     	;# 
   799  0214                     	;# 
   800  0214                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0216                     	;# 
   805  0216                     	;# 
   806  0217                     	;# 
   807  0217                     	;# 
   808  0291                     	;# 
   809  0291                     	;# 
   810  0292                     	;# 
   811  0293                     	;# 
   812  0298                     	;# 
   813  0298                     	;# 
   814  0299                     	;# 
   815  029A                     	;# 
   816  0394                     	;# 
   817  0395                     	;# 
   818  0396                     	;# 
   819  0FE4                     	;# 
   820  0FE5                     	;# 
   821  0FE6                     	;# 
   822  0FE7                     	;# 
   823  0FE8                     	;# 
   824  0FE9                     	;# 
   825  0FEA                     	;# 
   826  0FEB                     	;# 
   827  0FED                     	;# 
   828  0FEE                     	;# 
   829  0FEF                     	;# 
   830  0000                     	;# 
   831  0001                     	;# 
   832  0002                     	;# 
   833  0003                     	;# 
   834  0004                     	;# 
   835  0005                     	;# 
   836  0006                     	;# 
   837  0007                     	;# 
   838  0008                     	;# 
   839  0009                     	;# 
   840  000A                     	;# 
   841  000B                     	;# 
   842  000C                     	;# 
   843  000D                     	;# 
   844  000E                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  008C                     	;# 
   858  008D                     	;# 
   859  008E                     	;# 
   860  0090                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0099                     	;# 
   867  009A                     	;# 
   868  009B                     	;# 
   869  009B                     	;# 
   870  009C                     	;# 
   871  009D                     	;# 
   872  009E                     	;# 
   873  010C                     	;# 
   874  010D                     	;# 
   875  010E                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  011D                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  018E                     	;# 
   882  0191                     	;# 
   883  0191                     	;# 
   884  0192                     	;# 
   885  0193                     	;# 
   886  0193                     	;# 
   887  0194                     	;# 
   888  0195                     	;# 
   889  0196                     	;# 
   890  0197                     	;# 
   891  0199                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019C                     	;# 
   898  019C                     	;# 
   899  019D                     	;# 
   900  019E                     	;# 
   901  019F                     	;# 
   902  020D                     	;# 
   903  0210                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0291                     	;# 
   920  0291                     	;# 
   921  0292                     	;# 
   922  0293                     	;# 
   923  0298                     	;# 
   924  0298                     	;# 
   925  0299                     	;# 
   926  029A                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0FE4                     	;# 
   931  0FE5                     	;# 
   932  0FE6                     	;# 
   933  0FE7                     	;# 
   934  0FE8                     	;# 
   935  0FE9                     	;# 
   936  0FEA                     	;# 
   937  0FEB                     	;# 
   938  0FED                     	;# 
   939  0FEE                     	;# 
   940  0FEF                     	;# 
   941  0000                     	;# 
   942  0001                     	;# 
   943  0002                     	;# 
   944  0003                     	;# 
   945  0004                     	;# 
   946  0005                     	;# 
   947  0006                     	;# 
   948  0007                     	;# 
   949  0008                     	;# 
   950  0009                     	;# 
   951  000A                     	;# 
   952  000B                     	;# 
   953  000C                     	;# 
   954  000D                     	;# 
   955  000E                     	;# 
   956  0010                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0090                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0197                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020D                     	;# 
  1014  0210                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0298                     	;# 
  1035  0298                     	;# 
  1036  0299                     	;# 
  1037  029A                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  000E                     	;# 
  1067  0010                     	;# 
  1068  0011                     	;# 
  1069  0012                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  008C                     	;# 
  1080  008D                     	;# 
  1081  008E                     	;# 
  1082  0090                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  0116                     	;# 
  1099  0117                     	;# 
  1100  011D                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  018E                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0194                     	;# 
  1110  0195                     	;# 
  1111  0196                     	;# 
  1112  0197                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020D                     	;# 
  1125  0210                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0298                     	;# 
  1146  0298                     	;# 
  1147  0299                     	;# 
  1148  029A                     	;# 
  1149  0394                     	;# 
  1150  0395                     	;# 
  1151  0396                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163  0000                     	;# 
  1164  0001                     	;# 
  1165  0002                     	;# 
  1166  0003                     	;# 
  1167  0004                     	;# 
  1168  0005                     	;# 
  1169  0006                     	;# 
  1170  0007                     	;# 
  1171  0008                     	;# 
  1172  0009                     	;# 
  1173  000A                     	;# 
  1174  000B                     	;# 
  1175  000C                     	;# 
  1176  000D                     	;# 
  1177  000E                     	;# 
  1178  0010                     	;# 
  1179  0011                     	;# 
  1180  0012                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0090                     	;# 
  1194  0091                     	;# 
  1195  0092                     	;# 
  1196  0095                     	;# 
  1197  0096                     	;# 
  1198  0097                     	;# 
  1199  0099                     	;# 
  1200  009A                     	;# 
  1201  009B                     	;# 
  1202  009B                     	;# 
  1203  009C                     	;# 
  1204  009D                     	;# 
  1205  009E                     	;# 
  1206  010C                     	;# 
  1207  010D                     	;# 
  1208  010E                     	;# 
  1209  0116                     	;# 
  1210  0117                     	;# 
  1211  011D                     	;# 
  1212  018C                     	;# 
  1213  018D                     	;# 
  1214  018E                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0194                     	;# 
  1221  0195                     	;# 
  1222  0196                     	;# 
  1223  0197                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020D                     	;# 
  1236  0210                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0298                     	;# 
  1257  0298                     	;# 
  1258  0299                     	;# 
  1259  029A                     	;# 
  1260  0394                     	;# 
  1261  0395                     	;# 
  1262  0396                     	;# 
  1263  0FE4                     	;# 
  1264  0FE5                     	;# 
  1265  0FE6                     	;# 
  1266  0FE7                     	;# 
  1267  0FE8                     	;# 
  1268  0FE9                     	;# 
  1269  0FEA                     	;# 
  1270  0FEB                     	;# 
  1271  0FED                     	;# 
  1272  0FEE                     	;# 
  1273  0FEF                     	;# 
  1274  0000                     	;# 
  1275  0001                     	;# 
  1276  0002                     	;# 
  1277  0003                     	;# 
  1278  0004                     	;# 
  1279  0005                     	;# 
  1280  0006                     	;# 
  1281  0007                     	;# 
  1282  0008                     	;# 
  1283  0009                     	;# 
  1284  000A                     	;# 
  1285  000B                     	;# 
  1286  000C                     	;# 
  1287  000D                     	;# 
  1288  000E                     	;# 
  1289  0010                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0015                     	;# 
  1293  0016                     	;# 
  1294  0016                     	;# 
  1295  0017                     	;# 
  1296  0018                     	;# 
  1297  0019                     	;# 
  1298  001A                     	;# 
  1299  001B                     	;# 
  1300  001C                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0090                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  010C                     	;# 
  1318  010D                     	;# 
  1319  010E                     	;# 
  1320  0116                     	;# 
  1321  0117                     	;# 
  1322  011D                     	;# 
  1323  018C                     	;# 
  1324  018D                     	;# 
  1325  018E                     	;# 
  1326  0191                     	;# 
  1327  0191                     	;# 
  1328  0192                     	;# 
  1329  0193                     	;# 
  1330  0193                     	;# 
  1331  0194                     	;# 
  1332  0195                     	;# 
  1333  0196                     	;# 
  1334  0197                     	;# 
  1335  0199                     	;# 
  1336  019A                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019C                     	;# 
  1342  019C                     	;# 
  1343  019D                     	;# 
  1344  019E                     	;# 
  1345  019F                     	;# 
  1346  020D                     	;# 
  1347  0210                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  0291                     	;# 
  1364  0291                     	;# 
  1365  0292                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  0394                     	;# 
  1372  0395                     	;# 
  1373  0396                     	;# 
  1374  0FE4                     	;# 
  1375  0FE5                     	;# 
  1376  0FE6                     	;# 
  1377  0FE7                     	;# 
  1378  0FE8                     	;# 
  1379  0FE9                     	;# 
  1380  0FEA                     	;# 
  1381  0FEB                     	;# 
  1382  0FED                     	;# 
  1383  0FEE                     	;# 
  1384  0FEF                     	;# 
  1385  0000                     	;# 
  1386  0001                     	;# 
  1387  0002                     	;# 
  1388  0003                     	;# 
  1389  0004                     	;# 
  1390  0005                     	;# 
  1391  0006                     	;# 
  1392  0007                     	;# 
  1393  0008                     	;# 
  1394  0009                     	;# 
  1395  000A                     	;# 
  1396  000B                     	;# 
  1397  000C                     	;# 
  1398  000D                     	;# 
  1399  000E                     	;# 
  1400  0010                     	;# 
  1401  0011                     	;# 
  1402  0012                     	;# 
  1403  0015                     	;# 
  1404  0016                     	;# 
  1405  0016                     	;# 
  1406  0017                     	;# 
  1407  0018                     	;# 
  1408  0019                     	;# 
  1409  001A                     	;# 
  1410  001B                     	;# 
  1411  001C                     	;# 
  1412  008C                     	;# 
  1413  008D                     	;# 
  1414  008E                     	;# 
  1415  0090                     	;# 
  1416  0091                     	;# 
  1417  0092                     	;# 
  1418  0095                     	;# 
  1419  0096                     	;# 
  1420  0097                     	;# 
  1421  0099                     	;# 
  1422  009A                     	;# 
  1423  009B                     	;# 
  1424  009B                     	;# 
  1425  009C                     	;# 
  1426  009D                     	;# 
  1427  009E                     	;# 
  1428  010C                     	;# 
  1429  010D                     	;# 
  1430  010E                     	;# 
  1431  0116                     	;# 
  1432  0117                     	;# 
  1433  011D                     	;# 
  1434  018C                     	;# 
  1435  018D                     	;# 
  1436  018E                     	;# 
  1437  0191                     	;# 
  1438  0191                     	;# 
  1439  0192                     	;# 
  1440  0193                     	;# 
  1441  0193                     	;# 
  1442  0194                     	;# 
  1443  0195                     	;# 
  1444  0196                     	;# 
  1445  0197                     	;# 
  1446  0199                     	;# 
  1447  019A                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019C                     	;# 
  1453  019C                     	;# 
  1454  019D                     	;# 
  1455  019E                     	;# 
  1456  019F                     	;# 
  1457  020D                     	;# 
  1458  0210                     	;# 
  1459  0211                     	;# 
  1460  0211                     	;# 
  1461  0212                     	;# 
  1462  0212                     	;# 
  1463  0213                     	;# 
  1464  0213                     	;# 
  1465  0214                     	;# 
  1466  0214                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0216                     	;# 
  1471  0216                     	;# 
  1472  0217                     	;# 
  1473  0217                     	;# 
  1474  0291                     	;# 
  1475  0291                     	;# 
  1476  0292                     	;# 
  1477  0293                     	;# 
  1478  0298                     	;# 
  1479  0298                     	;# 
  1480  0299                     	;# 
  1481  029A                     	;# 
  1482  0394                     	;# 
  1483  0395                     	;# 
  1484  0396                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0010                     	;# 
  1512  0011                     	;# 
  1513  0012                     	;# 
  1514  0015                     	;# 
  1515  0016                     	;# 
  1516  0016                     	;# 
  1517  0017                     	;# 
  1518  0018                     	;# 
  1519  0019                     	;# 
  1520  001A                     	;# 
  1521  001B                     	;# 
  1522  001C                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0197                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020D                     	;# 
  1569  0210                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0298                     	;# 
  1590  0298                     	;# 
  1591  0299                     	;# 
  1592  029A                     	;# 
  1593  0394                     	;# 
  1594  0395                     	;# 
  1595  0396                     	;# 
  1596  0FE4                     	;# 
  1597  0FE5                     	;# 
  1598  0FE6                     	;# 
  1599  0FE7                     	;# 
  1600  0FE8                     	;# 
  1601  0FE9                     	;# 
  1602  0FEA                     	;# 
  1603  0FEB                     	;# 
  1604  0FED                     	;# 
  1605  0FEE                     	;# 
  1606  0FEF                     	;# 
  1607  0000                     	;# 
  1608  0001                     	;# 
  1609  0002                     	;# 
  1610  0003                     	;# 
  1611  0004                     	;# 
  1612  0005                     	;# 
  1613  0006                     	;# 
  1614  0007                     	;# 
  1615  0008                     	;# 
  1616  0009                     	;# 
  1617  000A                     	;# 
  1618  000B                     	;# 
  1619  000C                     	;# 
  1620  000D                     	;# 
  1621  000E                     	;# 
  1622  0010                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0015                     	;# 
  1626  0016                     	;# 
  1627  0016                     	;# 
  1628  0017                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  001B                     	;# 
  1633  001C                     	;# 
  1634  008C                     	;# 
  1635  008D                     	;# 
  1636  008E                     	;# 
  1637  0090                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0116                     	;# 
  1654  0117                     	;# 
  1655  011D                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  0191                     	;# 
  1660  0191                     	;# 
  1661  0192                     	;# 
  1662  0193                     	;# 
  1663  0193                     	;# 
  1664  0194                     	;# 
  1665  0195                     	;# 
  1666  0196                     	;# 
  1667  0197                     	;# 
  1668  0199                     	;# 
  1669  019A                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019C                     	;# 
  1675  019C                     	;# 
  1676  019D                     	;# 
  1677  019E                     	;# 
  1678  019F                     	;# 
  1679  020D                     	;# 
  1680  0210                     	;# 
  1681  0211                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0213                     	;# 
  1687  0214                     	;# 
  1688  0214                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0216                     	;# 
  1693  0216                     	;# 
  1694  0217                     	;# 
  1695  0217                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0298                     	;# 
  1701  0298                     	;# 
  1702  0299                     	;# 
  1703  029A                     	;# 
  1704  0394                     	;# 
  1705  0395                     	;# 
  1706  0396                     	;# 
  1707  0FE4                     	;# 
  1708  0FE5                     	;# 
  1709  0FE6                     	;# 
  1710  0FE7                     	;# 
  1711  0FE8                     	;# 
  1712  0FE9                     	;# 
  1713  0FEA                     	;# 
  1714  0FEB                     	;# 
  1715  0FED                     	;# 
  1716  0FEE                     	;# 
  1717  0FEF                     	;# 
  1718  0000                     	;# 
  1719  0001                     	;# 
  1720  0002                     	;# 
  1721  0003                     	;# 
  1722  0004                     	;# 
  1723  0005                     	;# 
  1724  0006                     	;# 
  1725  0007                     	;# 
  1726  0008                     	;# 
  1727  0009                     	;# 
  1728  000A                     	;# 
  1729  000B                     	;# 
  1730  000C                     	;# 
  1731  000D                     	;# 
  1732  000E                     	;# 
  1733  0010                     	;# 
  1734  0011                     	;# 
  1735  0012                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008D                     	;# 
  1747  008E                     	;# 
  1748  0090                     	;# 
  1749  0091                     	;# 
  1750  0092                     	;# 
  1751  0095                     	;# 
  1752  0096                     	;# 
  1753  0097                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  010C                     	;# 
  1762  010D                     	;# 
  1763  010E                     	;# 
  1764  0116                     	;# 
  1765  0117                     	;# 
  1766  011D                     	;# 
  1767  018C                     	;# 
  1768  018D                     	;# 
  1769  018E                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  019A                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019C                     	;# 
  1786  019C                     	;# 
  1787  019D                     	;# 
  1788  019E                     	;# 
  1789  019F                     	;# 
  1790  020D                     	;# 
  1791  0210                     	;# 
  1792  0211                     	;# 
  1793  0211                     	;# 
  1794  0212                     	;# 
  1795  0212                     	;# 
  1796  0213                     	;# 
  1797  0213                     	;# 
  1798  0214                     	;# 
  1799  0214                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0216                     	;# 
  1804  0216                     	;# 
  1805  0217                     	;# 
  1806  0217                     	;# 
  1807  0291                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0293                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  0FE4                     	;# 
  1819  0FE5                     	;# 
  1820  0FE6                     	;# 
  1821  0FE7                     	;# 
  1822  0FE8                     	;# 
  1823  0FE9                     	;# 
  1824  0FEA                     	;# 
  1825  0FEB                     	;# 
  1826  0FED                     	;# 
  1827  0FEE                     	;# 
  1828  0FEF                     	;# 
  1829  0000                     	;# 
  1830  0001                     	;# 
  1831  0002                     	;# 
  1832  0003                     	;# 
  1833  0004                     	;# 
  1834  0005                     	;# 
  1835  0006                     	;# 
  1836  0007                     	;# 
  1837  0008                     	;# 
  1838  0009                     	;# 
  1839  000A                     	;# 
  1840  000B                     	;# 
  1841  000C                     	;# 
  1842  000D                     	;# 
  1843  000E                     	;# 
  1844  0010                     	;# 
  1845  0011                     	;# 
  1846  0012                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  008C                     	;# 
  1857  008D                     	;# 
  1858  008E                     	;# 
  1859  0090                     	;# 
  1860  0091                     	;# 
  1861  0092                     	;# 
  1862  0095                     	;# 
  1863  0096                     	;# 
  1864  0097                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0116                     	;# 
  1876  0117                     	;# 
  1877  011D                     	;# 
  1878  018C                     	;# 
  1879  018D                     	;# 
  1880  018E                     	;# 
  1881  0191                     	;# 
  1882  0191                     	;# 
  1883  0192                     	;# 
  1884  0193                     	;# 
  1885  0193                     	;# 
  1886  0194                     	;# 
  1887  0195                     	;# 
  1888  0196                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  019A                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019C                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  020D                     	;# 
  1902  0210                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0216                     	;# 
  1915  0216                     	;# 
  1916  0217                     	;# 
  1917  0217                     	;# 
  1918  0291                     	;# 
  1919  0291                     	;# 
  1920  0292                     	;# 
  1921  0293                     	;# 
  1922  0298                     	;# 
  1923  0298                     	;# 
  1924  0299                     	;# 
  1925  029A                     	;# 
  1926  0394                     	;# 
  1927  0395                     	;# 
  1928  0396                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0015                     	;# 
  1959  0016                     	;# 
  1960  0016                     	;# 
  1961  0017                     	;# 
  1962  0018                     	;# 
  1963  0019                     	;# 
  1964  001A                     	;# 
  1965  001B                     	;# 
  1966  001C                     	;# 
  1967  008C                     	;# 
  1968  008D                     	;# 
  1969  008E                     	;# 
  1970  0090                     	;# 
  1971  0091                     	;# 
  1972  0092                     	;# 
  1973  0095                     	;# 
  1974  0096                     	;# 
  1975  0097                     	;# 
  1976  0099                     	;# 
  1977  009A                     	;# 
  1978  009B                     	;# 
  1979  009B                     	;# 
  1980  009C                     	;# 
  1981  009D                     	;# 
  1982  009E                     	;# 
  1983  010C                     	;# 
  1984  010D                     	;# 
  1985  010E                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  011D                     	;# 
  1989  018C                     	;# 
  1990  018D                     	;# 
  1991  018E                     	;# 
  1992  0191                     	;# 
  1993  0191                     	;# 
  1994  0192                     	;# 
  1995  0193                     	;# 
  1996  0193                     	;# 
  1997  0194                     	;# 
  1998  0195                     	;# 
  1999  0196                     	;# 
  2000  0197                     	;# 
  2001  0199                     	;# 
  2002  019A                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019E                     	;# 
  2011  019F                     	;# 
  2012  020D                     	;# 
  2013  0210                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0216                     	;# 
  2026  0216                     	;# 
  2027  0217                     	;# 
  2028  0217                     	;# 
  2029  0291                     	;# 
  2030  0291                     	;# 
  2031  0292                     	;# 
  2032  0293                     	;# 
  2033  0298                     	;# 
  2034  0298                     	;# 
  2035  0299                     	;# 
  2036  029A                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  0FE4                     	;# 
  2041  0FE5                     	;# 
  2042  0FE6                     	;# 
  2043  0FE7                     	;# 
  2044  0FE8                     	;# 
  2045  0FE9                     	;# 
  2046  0FEA                     	;# 
  2047  0FEB                     	;# 
  2048  0FED                     	;# 
  2049  0FEE                     	;# 
  2050  0FEF                     	;# 
  2051  0000                     	;# 
  2052  0001                     	;# 
  2053  0002                     	;# 
  2054  0003                     	;# 
  2055  0004                     	;# 
  2056  0005                     	;# 
  2057  0006                     	;# 
  2058  0007                     	;# 
  2059  0008                     	;# 
  2060  0009                     	;# 
  2061  000A                     	;# 
  2062  000B                     	;# 
  2063  000C                     	;# 
  2064  000D                     	;# 
  2065  000E                     	;# 
  2066  0010                     	;# 
  2067  0011                     	;# 
  2068  0012                     	;# 
  2069  0015                     	;# 
  2070  0016                     	;# 
  2071  0016                     	;# 
  2072  0017                     	;# 
  2073  0018                     	;# 
  2074  0019                     	;# 
  2075  001A                     	;# 
  2076  001B                     	;# 
  2077  001C                     	;# 
  2078  008C                     	;# 
  2079  008D                     	;# 
  2080  008E                     	;# 
  2081  0090                     	;# 
  2082  0091                     	;# 
  2083  0092                     	;# 
  2084  0095                     	;# 
  2085  0096                     	;# 
  2086  0097                     	;# 
  2087  0099                     	;# 
  2088  009A                     	;# 
  2089  009B                     	;# 
  2090  009B                     	;# 
  2091  009C                     	;# 
  2092  009D                     	;# 
  2093  009E                     	;# 
  2094  010C                     	;# 
  2095  010D                     	;# 
  2096  010E                     	;# 
  2097  0116                     	;# 
  2098  0117                     	;# 
  2099  011D                     	;# 
  2100  018C                     	;# 
  2101  018D                     	;# 
  2102  018E                     	;# 
  2103  0191                     	;# 
  2104  0191                     	;# 
  2105  0192                     	;# 
  2106  0193                     	;# 
  2107  0193                     	;# 
  2108  0194                     	;# 
  2109  0195                     	;# 
  2110  0196                     	;# 
  2111  0197                     	;# 
  2112  0199                     	;# 
  2113  019A                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019C                     	;# 
  2119  019C                     	;# 
  2120  019D                     	;# 
  2121  019E                     	;# 
  2122  019F                     	;# 
  2123  020D                     	;# 
  2124  0210                     	;# 
  2125  0211                     	;# 
  2126  0211                     	;# 
  2127  0212                     	;# 
  2128  0212                     	;# 
  2129  0213                     	;# 
  2130  0213                     	;# 
  2131  0214                     	;# 
  2132  0214                     	;# 
  2133  0215                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0216                     	;# 
  2137  0216                     	;# 
  2138  0217                     	;# 
  2139  0217                     	;# 
  2140  0291                     	;# 
  2141  0291                     	;# 
  2142  0292                     	;# 
  2143  0293                     	;# 
  2144  0298                     	;# 
  2145  0298                     	;# 
  2146  0299                     	;# 
  2147  029A                     	;# 
  2148  0394                     	;# 
  2149  0395                     	;# 
  2150  0396                     	;# 
  2151  0FE4                     	;# 
  2152  0FE5                     	;# 
  2153  0FE6                     	;# 
  2154  0FE7                     	;# 
  2155  0FE8                     	;# 
  2156  0FE9                     	;# 
  2157  0FEA                     	;# 
  2158  0FEB                     	;# 
  2159  0FED                     	;# 
  2160  0FEE                     	;# 
  2161  0FEF                     	;# 
  2162                           
  2163                           	psect	idataBANK4
  2164  107F                     __pidataBANK4:	
  2165                           
  2166                           ;initializer for __product
  2167  107F  3463               	retlw	99
  2168  1080  3402               	retlw	2
  2169  1081  3400               	retlw	0
  2170  1082  3400               	retlw	0
  2171  1083  3400               	retlw	0
  2172  1084  3400               	retlw	0
  2173  1085  3400               	retlw	0
  2174  1086  3400               	retlw	0
  2175  1087  3400               	retlw	0
  2176  1088  3400               	retlw	0
  2177  1089  3400               	retlw	0
  2178  108A  3400               	retlw	0
  2179  108B  34FF               	retlw	255
  2180  108C  34FF               	retlw	255
  2181  108D  34FF               	retlw	255
  2182  108E  3400               	retlw	0
  2183  108F  3400               	retlw	0
  2184  1090  3400               	retlw	0
  2185  1091  3400               	retlw	0
  2186  1092  3400               	retlw	0
  2187  1093  3400               	retlw	0
  2188  1094  3400               	retlw	0
  2189  1095  3400               	retlw	0
  2190  1096  3400               	retlw	0
  2191  1097  3400               	retlw	0
  2192  1098  3400               	retlw	0
  2193  1099  3400               	retlw	0
  2194  109A  3400               	retlw	0
  2195  109B  3400               	retlw	0
  2196  109C  3400               	retlw	0
  2197  109D  3400               	retlw	0
  2198  109E  3400               	retlw	0
  2199                           
  2200                           	psect	stringtext
  2201  1000                     __pstringtext:	
  2202  1000                     _CC2500_registers_address:	
  2203  1000  3403               	retlw	3
  2204  1001  3416               	retlw	22
  2205  1002  3417               	retlw	23
  2206  1003  341E               	retlw	30
  2207  1004  341F               	retlw	31
  2208  1005  3420               	retlw	32
  2209  1006  342A               	retlw	42
  2210  1007  342B               	retlw	43
  2211  1008  340B               	retlw	11
  2212  1009  340C               	retlw	12
  2213  100A  340D               	retlw	13
  2214  100B  340E               	retlw	14
  2215  100C  340F               	retlw	15
  2216  100D  3410               	retlw	16
  2217  100E  3411               	retlw	17
  2218  100F  3412               	retlw	18
  2219  1010  3413               	retlw	19
  2220  1011  3414               	retlw	20
  2221  1012  340A               	retlw	10
  2222  1013  3415               	retlw	21
  2223  1014  3421               	retlw	33
  2224  1015  3422               	retlw	34
  2225  1016  3418               	retlw	24
  2226  1017  3419               	retlw	25
  2227  1018  341A               	retlw	26
  2228  1019  341B               	retlw	27
  2229  101A  341C               	retlw	28
  2230  101B  341D               	retlw	29
  2231  101C  3423               	retlw	35
  2232  101D  3424               	retlw	36
  2233  101E  3425               	retlw	37
  2234  101F  3426               	retlw	38
  2235  1020  3429               	retlw	41
  2236  1021  342C               	retlw	44
  2237  1022  342D               	retlw	45
  2238  1023  342E               	retlw	46
  2239  1024  3400               	retlw	0
  2240  1025  3401               	retlw	1
  2241  1026  3402               	retlw	2
  2242  1027  3407               	retlw	7
  2243  1028  3408               	retlw	8
  2244  1029  3409               	retlw	9
  2245  102A  3406               	retlw	6
  2246  102B  3404               	retlw	4
  2247  102C  3405               	retlw	5
  2248  102D  3427               	retlw	39
  2249  102E  3428               	retlw	40
  2250  102F                     __end_of_CC2500_registers_address:	
  2251  102F                     _CC2500_rfSettings:	
  2252  102F  3407               	retlw	7
  2253  1030  3407               	retlw	7
  2254  1031  3430               	retlw	48
  2255  1032  3487               	retlw	135
  2256  1033  346B               	retlw	107
  2257  1034  34F8               	retlw	248
  2258  1035  347F               	retlw	127
  2259  1036  343F               	retlw	63
  2260  1037  3409               	retlw	9
  2261  1038  3400               	retlw	0
  2262  1039  345C               	retlw	92
  2263  103A  34A7               	retlw	167
  2264  103B  3462               	retlw	98
  2265  103C  3486               	retlw	134
  2266  103D  3483               	retlw	131
  2267  103E  3403               	retlw	3
  2268  103F  3422               	retlw	34
  2269  1040  34F8               	retlw	248
  2270  1041  3400               	retlw	0
  2271  1042  3444               	retlw	68
  2272  1043  34B6               	retlw	182
  2273  1044  3410               	retlw	16
  2274  1045  3418               	retlw	24
  2275  1046  341D               	retlw	29
  2276  1047  341C               	retlw	28
  2277  1048  34C7               	retlw	199
  2278  1049  3400               	retlw	0
  2279  104A  34B2               	retlw	178
  2280  104B  34EA               	retlw	234
  2281  104C  340A               	retlw	10
  2282  104D  3400               	retlw	0
  2283  104E  3411               	retlw	17
  2284  104F  3459               	retlw	89
  2285  1050  3488               	retlw	136
  2286  1051  3431               	retlw	49
  2287  1052  340B               	retlw	11
  2288  1053  342F               	retlw	47
  2289  1054  342E               	retlw	46
  2290  1055  3406               	retlw	6
  2291  1056  3404               	retlw	4
  2292  1057  3405               	retlw	5
  2293  1058  3400               	retlw	0
  2294  1059  3430               	retlw	48
  2295  105A  34D3               	retlw	211
  2296  105B  3491               	retlw	145
  2297  105C  3441               	retlw	65
  2298  105D  3400               	retlw	0
  2299  105E                     __end_of_CC2500_rfSettings:	
  2300  105E                     _CC2500_patable_vaule:	
  2301  105E  34FE               	retlw	254
  2302  105F  34FE               	retlw	254
  2303  1060  34FE               	retlw	254
  2304  1061  34FE               	retlw	254
  2305  1062  34FE               	retlw	254
  2306  1063  34FE               	retlw	254
  2307  1064  34FE               	retlw	254
  2308  1065  34FE               	retlw	254
  2309  1066                     __end_of_CC2500_patable_vaule:	
  2310                           
  2311                           	psect	nvBANK1
  2312  00ED                     __pnvBANK1:	
  2313  00ED                     _product:	
  2314  00ED                     	ds	1
  2315  000C                     _PORTA	set	12
  2316  000D                     _PORTB	set	13
  2317  000E                     _PORTC	set	14
  2318  0018                     _T1CON	set	24
  2319  0017                     _TMR1H	set	23
  2320  0016                     _TMR1L	set	22
  2321  005F                     _GIE	set	95
  2322  005B                     _IOCIE	set	91
  2323  0058                     _IOCIF	set	88
  2324  005E                     _PEIE	set	94
  2325  0060                     _RA0	set	96
  2326  0064                     _RA4	set	100
  2327  0066                     _RA6	set	102
  2328  0067                     _RA7	set	103
  2329  0068                     _RB0	set	104
  2330  0069                     _RB1	set	105
  2331  006B                     _RB3	set	107
  2332  006D                     _RB5	set	109
  2333  0070                     _RC0	set	112
  2334  0071                     _RC1	set	113
  2335  0073                     _RC3	set	115
  2336  0074                     _RC4	set	116
  2337  0075                     _RC5	set	117
  2338  0088                     _TMR1IF	set	136
  2339  009D                     _ADCON0	set	157
  2340  009E                     _ADCON1	set	158
  2341  009C                     _ADRESH	set	156
  2342  009B                     _ADRESL	set	155
  2343  0099                     _OSCCON	set	153
  2344  008C                     _TRISA	set	140
  2345  008D                     _TRISB	set	141
  2346  008E                     _TRISC	set	142
  2347  0097                     _WDTCON	set	151
  2348  04E9                     _GO_nDONE	set	1257
  2349  0488                     _TMR1IE	set	1160
  2350  0117                     _FVRCON	set	279
  2351  010C                     _LATA	set	268
  2352  010D                     _LATB	set	269
  2353  010E                     _LATC	set	270
  2354  018C                     _ANSELA	set	396
  2355  018D                     _ANSELB	set	397
  2356  018E                     _ANSELC	set	398
  2357  0192                     _PMADRH	set	402
  2358  0191                     _PMADRL	set	401
  2359  0196                     _PMCON2	set	406
  2360  0194                     _PMDATH	set	404
  2361  0193                     _PMDATL	set	403
  2362  0CAE                     _CFGS	set	3246
  2363  0CAC                     _FREE	set	3244
  2364  0CAD                     _LWLO	set	3245
  2365  0CA8                     _RD	set	3240
  2366  0CA9                     _WR	set	3241
  2367  0CAA                     _WREN	set	3242
  2368  020D                     _WPUB	set	525
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0022                     start_initialization:	
  2378  0022                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITBANK0
  2381  0022  01EE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to BANK1
  2384  0023  30A0               	movlw	low __pbssBANK1
  2385  0024  0084               	movwf	4
  2386  0025  3000               	movlw	high __pbssBANK1
  2387  0026  0085               	movwf	5
  2388  0027  3045               	movlw	69
  2389  0028  319B  2383  3180   	fcall	clear_ram0
  2390                           
  2391                           ; Clear objects allocated to BANK2
  2392  002B  3020               	movlw	low __pbssBANK2
  2393  002C  0084               	movwf	4
  2394  002D  3001               	movlw	high __pbssBANK2
  2395  002E  0085               	movwf	5
  2396  002F  304D               	movlw	77
  2397  0030  319B  2383  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Clear objects allocated to BANK3
  2400  0033  30A0               	movlw	low __pbssBANK3
  2401  0034  0084               	movwf	4
  2402  0035  3001               	movlw	high __pbssBANK3
  2403  0036  0085               	movwf	5
  2404  0037  304C               	movlw	76
  2405  0038  319B  2383  3180   	fcall	clear_ram0
  2406                           
  2407                           ; Initialize objects allocated to BANK4
  2408  003B  307F               	movlw	low __pidataBANK4
  2409  003C  0084               	movwf	4
  2410  003D  3090               	movlw	(high __pidataBANK4)| (0+128)
  2411  003E  0085               	movwf	5
  2412  003F  3020               	movlw	low __pdataBANK4
  2413  0040  0086               	movwf	6
  2414  0041  3002               	movlw	high __pdataBANK4
  2415  0042  0087               	movwf	7
  2416  0043  3020               	movlw	32
  2417  0044  319B  237D         	fcall	init_ram
  2418  0046                     end_of_initialization:	
  2419                           ;End of C runtime variable initialization code
  2420                           
  2421  0046                     __end_of__initialization:	
  2422  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2423  0047  0020               	movlb	0
  2424  0048  3196  2E15         	ljmp	_main	;jump to C main() function
  2425                           
  2426                           	psect	bitbssBANK0
  2427  0370                     __pbitbssBANK0:	
  2428  0370                     _Receive_OK:	
  2429  0370                     	ds	1
  2430  0371                     _Transceive_OK:	
  2431  0371                     	ds	1
  2432                           
  2433                           	psect	bssBANK1
  2434  00A0                     __pbssBANK1:	
  2435  00A0                     _RF1:	
  2436  00A0                     	ds	14
  2437  00AE                     _Buz1:	
  2438  00AE                     	ds	12
  2439  00BA                     _DimmerIntr1:	
  2440  00BA                     	ds	12
  2441  00C6                     _Timer1:	
  2442  00C6                     	ds	3
  2443  00C9                     _WDT:	
  2444  00C9                     	ds	2
  2445  00CB                     _CRC:	
  2446  00CB                     	ds	1
  2447  00CC                     _Cmd:	
  2448  00CC                     	ds	1
  2449  00CD                     _DelayOff:	
  2450  00CD                     	ds	1
  2451  00CE                     _DimmerIntr:	
  2452  00CE                     	ds	1
  2453  00CF                     _DimmerLights:	
  2454  00CF                     	ds	1
  2455  00D0                     _LED:	
  2456  00D0                     	ds	1
  2457  00D1                     _Light:	
  2458  00D1                     	ds	1
  2459  00D2                     _RSSI:	
  2460  00D2                     	ds	1
  2461  00D3                     _Rx_Length:	
  2462  00D3                     	ds	1
  2463  00D4                     _SPI0Buffer:	
  2464  00D4                     	ds	1
  2465  00D5                     _Sw:	
  2466  00D5                     	ds	1
  2467  00D6                     _SwDetect:	
  2468  00D6                     	ds	1
  2469  00D7                     _Tx_Length:	
  2470  00D7                     	ds	1
  2471  00D8                     _r_address:	
  2472  00D8                     	ds	1
  2473  00D9                     _r_data:	
  2474  00D9                     	ds	1
  2475  00DA                     _s_data:	
  2476  00DA                     	ds	1
  2477  00DB                     _Temp:	
  2478  00DB                     	ds	10
  2479                           
  2480                           	psect	bssBANK2
  2481  0120                     __pbssBANK2:	
  2482  0120                     _myMain:	
  2483  0120                     	ds	13
  2484  012D                     _Dimmer:	
  2485  012D                     	ds	5
  2486  0132                     _RF_Count:	
  2487  0132                     	ds	2
  2488  0134                     _Load:	
  2489  0134                     	ds	40
  2490  015C                     _DimmerLights1:	
  2491  015C                     	ds	8
  2492  0164                     _DlySw1:	
  2493  0164                     	ds	5
  2494  0169                     _VarErrLED:	
  2495  0169                     	ds	4
  2496                           
  2497                           	psect	bssBANK3
  2498  01A0                     __pbssBANK3:	
  2499  01A0                     _RF_Data:	
  2500  01A0                     	ds	30
  2501  01BE                     _Memory:	
  2502  01BE                     	ds	37
  2503  01E3                     _Sw1:	
  2504  01E3                     	ds	9
  2505                           
  2506                           	psect	dataBANK4
  2507  0220                     __pdataBANK4:	
  2508  0220                     __product:	
  2509  0220                     	ds	32
  2510                           
  2511                           	psect	clrtext
  2512  1B83                     clear_ram0:	
  2513                           ;	Called with FSR0 containing the base address, and
  2514                           ;	WREG with the size to clear
  2515                           
  2516  1B83  0064               	clrwdt	;clear the watchdog before getting into this loop
  2517  1B84                     clrloop0:	
  2518  1B84  0180               	clrf	0	;clear RAM location pointed to by FSR
  2519  1B85  3101               	addfsr 0,1
  2520  1B86  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2521  1B87  2B84               	goto	clrloop0	;have we reached the end yet?
  2522  1B88  3400               	retlw	0	;all done for this memory range, return
  2523                           
  2524                           	psect	inittext
  2525  1B7D                     init_ram:	
  2526  1B7D  00FE               	movwf	126
  2527  1B7E                     initloop:	
  2528  1B7E  0012               	moviw fsr0++
  2529  1B7F  001E               	movwi fsr1++
  2530  1B80  0BFE               	decfsz	126,f
  2531  1B81  2B7E               	goto	initloop
  2532  1B82  3400               	retlw	0
  2533                           
  2534                           	psect	cstackBANK3
  2535  01EC                     __pcstackBANK3:	
  2536  01EC                     ?_main:	
  2537  01EC                     main@argc:	
  2538                           ; 2 bytes @ 0x0
  2539                           
  2540                           
  2541                           ; 2 bytes @ 0x0
  2542  01EC                     	ds	2
  2543  01EE                     main@argv:	
  2544                           
  2545                           ; 2 bytes @ 0x2
  2546  01EE                     	ds	2
  2547                           
  2548                           	psect	cstackBANK1
  2549  00E5                     __pcstackBANK1:	
  2550  00E5                     ?_setDimmerLights_OnOff:	
  2551  00E5                     ??_setRFSW_Control:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  00E5                     setDimmerLights_OnOff@command:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  00E5                     setTemp_Main@error:	
  2558                           ; 1 bytes @ 0x0
  2559                           
  2560                           
  2561                           ; 1 bytes @ 0x0
  2562  00E5                     	ds	1
  2563  00E6                     ??_setDimmerLights_OnOff:	
  2564  00E6                     setTemp_Main@TempGO:	
  2565                           ; 0 bytes @ 0x1
  2566                           
  2567  00E6                     setRFSW_Control@status:	
  2568                           ; 1 bytes @ 0x1
  2569                           
  2570                           
  2571                           ; 1 bytes @ 0x1
  2572  00E6                     	ds	1
  2573  00E7                     setRFSW_Control@sw:	
  2574  00E7                     setTemp_Main@SafeValue:	
  2575                           ; 1 bytes @ 0x2
  2576                           
  2577                           
  2578                           ; 2 bytes @ 0x2
  2579  00E7                     	ds	1
  2580  00E8                     ??_getRxData:	
  2581  00E8                     setDimmerLights_OnOff@lights:	
  2582                           ; 0 bytes @ 0x3
  2583                           
  2584                           
  2585                           ; 1 bytes @ 0x3
  2586  00E8                     	ds	1
  2587  00E9                     setDimmerLights_Main@lights:	
  2588  00E9                     getRxData@error:	
  2589                           ; 1 bytes @ 0x4
  2590                           
  2591  00E9                     setTemp_Main@DangerValue:	
  2592                           ; 1 bytes @ 0x4
  2593                           
  2594                           
  2595                           ; 2 bytes @ 0x4
  2596  00E9                     	ds	1
  2597  00EA                     ??_setRF_Main:	
  2598                           
  2599                           ; 0 bytes @ 0x5
  2600  00EA                     	ds	1
  2601  00EB                     setRF_Main@error:	
  2602  00EB                     setTemp_Main@AD:	
  2603                           ; 1 bytes @ 0x6
  2604                           
  2605                           
  2606                           ; 2 bytes @ 0x6
  2607  00EB                     	ds	2
  2608                           
  2609                           	psect	cstackCOMMON
  2610  0070                     __pcstackCOMMON:	
  2611  0070                     ?_CC2500_WriteCommand:	
  2612  0070                     ?_RF_Timeout_Counter:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_setRF_TimeoutCleared:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_WriteByte:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_ReadStatus:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_ReadByte:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_PowerRST:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_InitSetREG:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_CC2500_InitPATable:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_CC2500_ClearTXFIFO:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_CC2500_ClearRXFIFO:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_CC2500_FrequencyCabr:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_CC2500_SIDLEMode:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_DlyOff_Initialization:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_DlyOff_Main:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setDimmerLights_SwOn:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setDimmerLights_SwOff:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setDimmerLights_Initialization:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setDimmerLights_Main:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setDimmerLights_Line:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setTxData:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_setRF_TransceiveGO:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_setLED_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_setLED_Main:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Fosc_Set:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_IO_Set:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_TMR1_Set:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_ADC_Set:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_IOC_Set:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_WDT_Set:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_TMR1_ISR:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_IOC_ISR:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Timeout_Counter:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_set_TimeoutCleared:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Flash_Memory_Write:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Flash_Memory_Modify:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_WDT_Clearing:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_myMain_Initialization:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Temp_Initialization:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_Load_Initialization:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_Switch_Initialization:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_RF_Initialization:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_getLoad_AD:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_getTemp_AD:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_my_MainTimer:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Temp_Main:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_Load_Main:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_Switch_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_RF_Main:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_Exception_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setLoad_AH_AL_Restore:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setTemp_Initialization:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setTemp_Main:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setRF_Initialization:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setRF_Main:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_RF_RxDisable:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_getRxData:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_setLog_Code:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_setControl_Lights_Table:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_setRFSW_Control:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_setRFSW_AdjControl:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_setSw_Initialization:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_setSw_Main:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_Buzzer_Initialization:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_Buzzer_Main:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_CC2500_TxData:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_CC2500_RxData:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_CC2500_PowerOnInitial:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DelayOffPointSelect:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_DelayOff_Initialization:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_DelayOff_Main:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_DimmerIntr_Initialization:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_DimmerLights_SelectPointer:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_DimmerLights_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_setDimmerLights_DimmingOn:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_DimmerLights_Main:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_DimmerLights_TMR_1:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ??_DimmerLights_TMR_1:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_DimmerLights_IOC_1:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_LedPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_LED_Initialization:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_LED_Main:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_Mcu_Initialization:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_ISR:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_Flash_Memory_Initialization:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_Flash_Memory_Main:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_Flash_Memory_Unlock:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_Flash_Memory_Erasing:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_setMemory_Modify:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_setMemory_LoopSave:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_WDT_Main:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_setRF_Learn:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_TouchPower:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_SwPointSelect:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_getDimmerLights_Status:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_getLoad_OK:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getMain_All_Error_Status:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getMain_All_LightsStatus:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getDimmerLights_Allow_Condition:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getDimmerLights_PercentToValue:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getDimmerLights_ValueToPercent:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getCmd_Status:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_Flash_Memory_Read:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getRF_KeyStatus:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getSw_KeyStatus:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getDelayOff_GO:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getDimmerIntr_DimmingValue:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_getDimmerLights_Line:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_getDimmer_LoadGO:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_getDimmer_Load_Status:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_getMain_Lights_Count:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?___lbdiv:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     setDimmerLights_Initialization@lights:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     getDimmerLights_Allow_Condition@lights:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     getSw_KeyStatus@sw:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ___lbdiv@divisor:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960                           
  2961                           ; 1 bytes @ 0x0
  2962  0070                     	ds	1
  2963  0071                     ??___lbdiv:	
  2964  0071                     DimmerLights_TMR_1@count:	
  2965                           ; 0 bytes @ 0x1
  2966                           
  2967                           
  2968                           ; 1 bytes @ 0x1
  2969  0071                     	ds	1
  2970  0072                     ??_TMR1_ISR:	
  2971  0072                     ___lbdiv@dividend:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974                           
  2975                           ; 1 bytes @ 0x2
  2976  0072                     	ds	1
  2977  0073                     ___lbdiv@counter:	
  2978                           
  2979                           ; 1 bytes @ 0x3
  2980  0073                     	ds	1
  2981  0074                     ___lbdiv@quotient:	
  2982                           
  2983                           ; 1 bytes @ 0x4
  2984  0074                     	ds	1
  2985  0075                     ?_Division:	
  2986  0075                     Division@num:	
  2987                           ; 1 bytes @ 0x5
  2988                           
  2989                           
  2990                           ; 1 bytes @ 0x5
  2991  0075                     	ds	1
  2992  0076                     ??_Division:	
  2993                           
  2994                           ; 0 bytes @ 0x6
  2995  0076                     	ds	2
  2996  0078                     Division@value:	
  2997                           
  2998                           ; 1 bytes @ 0x8
  2999  0078                     	ds	1
  3000  0079                     Division@result:	
  3001                           
  3002                           ; 1 bytes @ 0x9
  3003  0079                     	ds	1
  3004  007A                     ??_DimmerLights_IOC_1:	
  3005                           
  3006                           ; 0 bytes @ 0xA
  3007  007A                     	ds	2
  3008  007C                     DimmerLights_IOC_1@count:	
  3009                           
  3010                           ; 1 bytes @ 0xC
  3011  007C                     	ds	1
  3012  007D                     DimmerLights_IOC_1@dimming:	
  3013                           
  3014                           ; 1 bytes @ 0xD
  3015  007D                     	ds	1
  3016  007E                     ??_IOC_ISR:	
  3017                           
  3018                           	psect	cstackBANK0
  3019  0020                     __pcstackBANK0:	
  3020                           ; 0 bytes @ 0xE
  3021                           
  3022  0020                     ??_ISR:	
  3023                           
  3024                           ; 0 bytes @ 0x0
  3025  0020                     	ds	1
  3026  0021                     ??_RF_Timeout_Counter:	
  3027  0021                     ??_setRF_TimeoutCleared:	
  3028                           ; 0 bytes @ 0x1
  3029                           
  3030  0021                     ??_CC2500_WriteByte:	
  3031                           ; 0 bytes @ 0x1
  3032                           
  3033  0021                     ??_CC2500_ReadByte:	
  3034                           ; 0 bytes @ 0x1
  3035                           
  3036  0021                     ?_DelayTime_1us:	
  3037                           ; 0 bytes @ 0x1
  3038                           
  3039  0021                     ??_setDimmerLights_Initialization:	
  3040                           ; 0 bytes @ 0x1
  3041                           
  3042  0021                     ??_getLoad_OK:	
  3043                           ; 0 bytes @ 0x1
  3044                           
  3045  0021                     ??_getMain_All_Error_Status:	
  3046                           ; 0 bytes @ 0x1
  3047                           
  3048  0021                     ??_getMain_All_LightsStatus:	
  3049                           ; 0 bytes @ 0x1
  3050                           
  3051  0021                     ??_setDimmerLights_Line:	
  3052                           ; 0 bytes @ 0x1
  3053                           
  3054  0021                     ??_getCmd_Status:	
  3055                           ; 0 bytes @ 0x1
  3056                           
  3057  0021                     ?_setCmd_Status:	
  3058                           ; 0 bytes @ 0x1
  3059                           
  3060  0021                     ??_setTxData:	
  3061                           ; 0 bytes @ 0x1
  3062                           
  3063  0021                     ??_setRF_TransceiveGO:	
  3064                           ; 0 bytes @ 0x1
  3065                           
  3066  0021                     ??_Fosc_Set:	
  3067                           ; 0 bytes @ 0x1
  3068                           
  3069  0021                     ??_IO_Set:	
  3070                           ; 0 bytes @ 0x1
  3071                           
  3072  0021                     ??_TMR1_Set:	
  3073                           ; 0 bytes @ 0x1
  3074                           
  3075  0021                     ??_ADC_Set:	
  3076                           ; 0 bytes @ 0x1
  3077                           
  3078  0021                     ??_IOC_Set:	
  3079                           ; 0 bytes @ 0x1
  3080                           
  3081  0021                     ??_WDT_Set:	
  3082                           ; 0 bytes @ 0x1
  3083                           
  3084  0021                     ??_Timeout_Counter:	
  3085                           ; 0 bytes @ 0x1
  3086                           
  3087  0021                     ??_set_TimeoutCleared:	
  3088                           ; 0 bytes @ 0x1
  3089                           
  3090  0021                     ??_Flash_Memory_Read:	
  3091                           ; 0 bytes @ 0x1
  3092                           
  3093  0021                     ?_setMemory_Data:	
  3094                           ; 0 bytes @ 0x1
  3095                           
  3096  0021                     ??_Flash_Memory_Write:	
  3097                           ; 0 bytes @ 0x1
  3098                           
  3099  0021                     ??_WDT_Clearing:	
  3100                           ; 0 bytes @ 0x1
  3101                           
  3102  0021                     ??_myMain_Initialization:	
  3103                           ; 0 bytes @ 0x1
  3104                           
  3105  0021                     ??_Temp_Initialization:	
  3106                           ; 0 bytes @ 0x1
  3107                           
  3108  0021                     ??_setLoad_AH_AL_Restore:	
  3109                           ; 0 bytes @ 0x1
  3110                           
  3111  0021                     ??_setTemp_Initialization:	
  3112                           ; 0 bytes @ 0x1
  3113                           
  3114  0021                     ??_setRF_Initialization:	
  3115                           ; 0 bytes @ 0x1
  3116                           
  3117  0021                     ??_getRF_KeyStatus:	
  3118                           ; 0 bytes @ 0x1
  3119                           
  3120  0021                     ??_getSw_KeyStatus:	
  3121                           ; 0 bytes @ 0x1
  3122                           
  3123  0021                     ??_Buzzer_Initialization:	
  3124                           ; 0 bytes @ 0x1
  3125                           
  3126  0021                     ??_Buzzer_Main:	
  3127                           ; 0 bytes @ 0x1
  3128                           
  3129  0021                     ??_DelayOffPointSelect:	
  3130                           ; 0 bytes @ 0x1
  3131                           
  3132  0021                     ??_DimmerIntr_Initialization:	
  3133                           ; 0 bytes @ 0x1
  3134                           
  3135  0021                     ?_setDimmerIntr_ControlStatus:	
  3136                           ; 0 bytes @ 0x1
  3137                           
  3138  0021                     ?_setDimmerIntr_DimmingValue:	
  3139                           ; 0 bytes @ 0x1
  3140                           
  3141  0021                     ??_getDimmerIntr_DimmingValue:	
  3142                           ; 0 bytes @ 0x1
  3143                           
  3144  0021                     ?_setDimmerIntr_Dimming_Sw:	
  3145                           ; 0 bytes @ 0x1
  3146                           
  3147  0021                     ?_setDimmerIntr_Dimming_RF:	
  3148                           ; 0 bytes @ 0x1
  3149                           
  3150  0021                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3151                           ; 0 bytes @ 0x1
  3152                           
  3153  0021                     ??_DimmerLights_SelectPointer:	
  3154                           ; 0 bytes @ 0x1
  3155                           
  3156  0021                     ??_getDimmerLights_Line:	
  3157                           ; 0 bytes @ 0x1
  3158                           
  3159  0021                     ??_getDimmer_LoadGO:	
  3160                           ; 0 bytes @ 0x1
  3161                           
  3162  0021                     ??_getDimmer_Load_Status:	
  3163                           ; 0 bytes @ 0x1
  3164                           
  3165  0021                     ??_LedPointSelect:	
  3166                           ; 0 bytes @ 0x1
  3167                           
  3168  0021                     ??_Flash_Memory_Unlock:	
  3169                           ; 0 bytes @ 0x1
  3170                           
  3171  0021                     ??_Flash_Memory_Erasing:	
  3172                           ; 0 bytes @ 0x1
  3173                           
  3174  0021                     ??_setMemory_Modify:	
  3175                           ; 0 bytes @ 0x1
  3176                           
  3177  0021                     ??_setMemory_LoopSave:	
  3178                           ; 0 bytes @ 0x1
  3179                           
  3180  0021                     ??_WDT_Main:	
  3181                           ; 0 bytes @ 0x1
  3182                           
  3183  0021                     ??_getMain_Lights_Count:	
  3184                           ; 0 bytes @ 0x1
  3185                           
  3186  0021                     ??_setRF_Learn:	
  3187                           ; 0 bytes @ 0x1
  3188                           
  3189  0021                     ??_TouchPower:	
  3190                           ; 0 bytes @ 0x1
  3191                           
  3192  0021                     ??_SwPointSelect:	
  3193                           ; 0 bytes @ 0x1
  3194                           
  3195  0021                     ?___bmul:	
  3196                           ; 0 bytes @ 0x1
  3197                           
  3198  0021                     ?_getBuz_GO:	
  3199                           ; 1 bytes @ 0x1
  3200                           
  3201  0021                     ?_getAD:	
  3202                           ; 2 bytes @ 0x1
  3203                           
  3204  0021                     ?___wmul:	
  3205                           ; 2 bytes @ 0x1
  3206                           
  3207  0021                     ?___awdiv:	
  3208                           ; 2 bytes @ 0x1
  3209                           
  3210  0021                     ?___lwdiv:	
  3211                           ; 2 bytes @ 0x1
  3212                           
  3213  0021                     ?___ftpack:	
  3214                           ; 2 bytes @ 0x1
  3215                           
  3216  0021                     setDimmerIntr_ControlStatus@command:	
  3217                           ; 3 bytes @ 0x1
  3218                           
  3219  0021                     setDimmerIntr_DimmingValue@value:	
  3220                           ; 1 bytes @ 0x1
  3221                           
  3222  0021                     setDimmerIntr_Dimming_Sw@command:	
  3223                           ; 1 bytes @ 0x1
  3224                           
  3225  0021                     setDimmerIntr_Dimming_RF@command:	
  3226                           ; 1 bytes @ 0x1
  3227                           
  3228  0021                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3229                           ; 1 bytes @ 0x1
  3230                           
  3231  0021                     setDimmerLights_Line@lights:	
  3232                           ; 1 bytes @ 0x1
  3233                           
  3234  0021                     getDimmerLights_Line@line:	
  3235                           ; 1 bytes @ 0x1
  3236                           
  3237  0021                     getDimmer_LoadGO@loadgo:	
  3238                           ; 1 bytes @ 0x1
  3239                           
  3240  0021                     getDimmer_Load_Status@status:	
  3241                           ; 1 bytes @ 0x1
  3242                           
  3243  0021                     getAD@adcon1:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246  0021                     setMemory_Data@data:	
  3247                           ; 1 bytes @ 0x1
  3248                           
  3249  0021                     getMain_All_LightsStatus@status:	
  3250                           ; 1 bytes @ 0x1
  3251                           
  3252  0021                     getMain_Lights_Count@count:	
  3253                           ; 1 bytes @ 0x1
  3254                           
  3255  0021                     setCmd_Status@cmd:	
  3256                           ; 1 bytes @ 0x1
  3257                           
  3258  0021                     getCmd_Status@number:	
  3259                           ; 1 bytes @ 0x1
  3260                           
  3261  0021                     getLoad_OK@ok:	
  3262                           ; 1 bytes @ 0x1
  3263                           
  3264  0021                     ___bmul@multiplicand:	
  3265                           ; 1 bytes @ 0x1
  3266                           
  3267  0021                     DelayTime_1us@count:	
  3268                           ; 1 bytes @ 0x1
  3269                           
  3270  0021                     ___wmul@multiplier:	
  3271                           ; 2 bytes @ 0x1
  3272                           
  3273  0021                     ___awdiv@divisor:	
  3274                           ; 2 bytes @ 0x1
  3275                           
  3276  0021                     ___lwdiv@divisor:	
  3277                           ; 2 bytes @ 0x1
  3278                           
  3279  0021                     ___ftpack@arg:	
  3280                           ; 2 bytes @ 0x1
  3281                           
  3282                           
  3283                           ; 3 bytes @ 0x1
  3284  0021                     	ds	1
  3285  0022                     ??_getDimmerLights_Allow_Condition:	
  3286  0022                     ??_setCmd_Status:	
  3287                           ; 0 bytes @ 0x2
  3288                           
  3289  0022                     ??_setMemory_Data:	
  3290                           ; 0 bytes @ 0x2
  3291                           
  3292  0022                     ??_RF_Initialization:	
  3293                           ; 0 bytes @ 0x2
  3294                           
  3295  0022                     ??_setDimmerIntr_ControlStatus:	
  3296                           ; 0 bytes @ 0x2
  3297                           
  3298  0022                     ??_setDimmerIntr_DimmingValue:	
  3299                           ; 0 bytes @ 0x2
  3300                           
  3301  0022                     ??_setDimmerIntr_Dimming_Sw:	
  3302                           ; 0 bytes @ 0x2
  3303                           
  3304  0022                     ??_setDimmerIntr_Dimming_RF:	
  3305                           ; 0 bytes @ 0x2
  3306                           
  3307  0022                     ??_DimmerLights_Initialization:	
  3308                           ; 0 bytes @ 0x2
  3309                           
  3310  0022                     ??_Mcu_Initialization:	
  3311                           ; 0 bytes @ 0x2
  3312                           
  3313  0022                     ??___bmul:	
  3314                           ; 0 bytes @ 0x2
  3315                           
  3316  0022                     CC2500_WriteByte@loop_a:	
  3317                           ; 0 bytes @ 0x2
  3318                           
  3319  0022                     CC2500_ReadByte@loop_b:	
  3320                           ; 1 bytes @ 0x2
  3321                           
  3322  0022                     DelayOffPointSelect@sw:	
  3323                           ; 1 bytes @ 0x2
  3324                           
  3325  0022                     getDimmerIntr_DimmingValue@lights:	
  3326                           ; 1 bytes @ 0x2
  3327                           
  3328  0022                     DimmerLights_SelectPointer@lights:	
  3329                           ; 1 bytes @ 0x2
  3330                           
  3331  0022                     LedPointSelect@led:	
  3332                           ; 1 bytes @ 0x2
  3333                           
  3334  0022                     Flash_Memory_Read@i:	
  3335                           ; 1 bytes @ 0x2
  3336                           
  3337  0022                     Flash_Memory_Write@i:	
  3338                           ; 1 bytes @ 0x2
  3339                           
  3340  0022                     setMemory_Modify@command:	
  3341                           ; 1 bytes @ 0x2
  3342                           
  3343  0022                     setMemory_LoopSave@command:	
  3344                           ; 1 bytes @ 0x2
  3345                           
  3346  0022                     getMain_Lights_Count@status1:	
  3347                           ; 1 bytes @ 0x2
  3348                           
  3349  0022                     getCmd_Status@cmd:	
  3350                           ; 1 bytes @ 0x2
  3351                           
  3352  0022                     setLoad_AH_AL_Restore@i:	
  3353                           ; 1 bytes @ 0x2
  3354                           
  3355  0022                     setRF_Learn@command:	
  3356                           ; 1 bytes @ 0x2
  3357                           
  3358  0022                     getRF_KeyStatus@key:	
  3359                           ; 1 bytes @ 0x2
  3360                           
  3361  0022                     setRF_TransceiveGO@command:	
  3362                           ; 1 bytes @ 0x2
  3363                           
  3364  0022                     SwPointSelect@sw:	
  3365                           ; 1 bytes @ 0x2
  3366                           
  3367  0022                     getSw_KeyStatus@status:	
  3368                           ; 1 bytes @ 0x2
  3369                           
  3370  0022                     _getMain_All_Error_Status$3523:	
  3371                           ; 1 bytes @ 0x2
  3372                           
  3373                           
  3374                           ; 2 bytes @ 0x2
  3375  0022                     	ds	1
  3376  0023                     ??_CC2500_WriteCommand:	
  3377  0023                     ??_CC2500_ReadStatus:	
  3378                           ; 0 bytes @ 0x3
  3379                           
  3380  0023                     ??_DelayTime_1us:	
  3381                           ; 0 bytes @ 0x3
  3382                           
  3383  0023                     ?_CC2500_WriteREG:	
  3384                           ; 0 bytes @ 0x3
  3385                           
  3386  0023                     ??_DlyOff_Initialization:	
  3387                           ; 0 bytes @ 0x3
  3388                           
  3389  0023                     ??_getDimmerLights_Status:	
  3390                           ; 0 bytes @ 0x3
  3391                           
  3392  0023                     ??_setDimmerLights_SwOff:	
  3393                           ; 0 bytes @ 0x3
  3394                           
  3395  0023                     ?_setLED:	
  3396                           ; 0 bytes @ 0x3
  3397                           
  3398  0023                     ??_setLED_Main:	
  3399                           ; 0 bytes @ 0x3
  3400                           
  3401  0023                     ??_Load_Initialization:	
  3402                           ; 0 bytes @ 0x3
  3403                           
  3404  0023                     ??_getBuz_GO:	
  3405                           ; 0 bytes @ 0x3
  3406                           
  3407  0023                     ??_getDelayOff_GO:	
  3408                           ; 0 bytes @ 0x3
  3409                           
  3410  0023                     ??_setDimmerLights_DimmingOn:	
  3411                           ; 0 bytes @ 0x3
  3412                           
  3413  0023                     ?_setDimmerLights_DimmingRun:	
  3414                           ; 0 bytes @ 0x3
  3415                           
  3416  0023                     CC2500_WriteREG@value:	
  3417                           ; 0 bytes @ 0x3
  3418                           
  3419  0023                     DlyOff_Initialization@sw:	
  3420                           ; 1 bytes @ 0x3
  3421                           
  3422  0023                     getDelayOff_GO@sw:	
  3423                           ; 1 bytes @ 0x3
  3424                           
  3425  0023                     setDimmerIntr_ControlStatus@lights:	
  3426                           ; 1 bytes @ 0x3
  3427                           
  3428  0023                     setDimmerIntr_DimmingValue@lights:	
  3429                           ; 1 bytes @ 0x3
  3430                           
  3431  0023                     getDimmerIntr_DimmingValue@value:	
  3432                           ; 1 bytes @ 0x3
  3433                           
  3434  0023                     setDimmerIntr_Dimming_Sw@lights:	
  3435                           ; 1 bytes @ 0x3
  3436                           
  3437  0023                     setDimmerIntr_Dimming_RF@lights:	
  3438                           ; 1 bytes @ 0x3
  3439                           
  3440  0023                     setDimmerLights_SwOff@sw:	
  3441                           ; 1 bytes @ 0x3
  3442                           
  3443  0023                     setDimmerLights_DimmingOn@sw:	
  3444                           ; 1 bytes @ 0x3
  3445                           
  3446  0023                     getDimmerLights_Allow_Condition@allow:	
  3447                           ; 1 bytes @ 0x3
  3448                           
  3449  0023                     getDimmerLights_Status@lights:	
  3450                           ; 1 bytes @ 0x3
  3451                           
  3452  0023                     setDimmerLights_DimmingRun@command:	
  3453                           ; 1 bytes @ 0x3
  3454                           
  3455  0023                     setLED@command:	
  3456                           ; 1 bytes @ 0x3
  3457                           
  3458  0023                     Flash_Memory_Read@address:	
  3459                           ; 1 bytes @ 0x3
  3460                           
  3461  0023                     setMemory_Data@address:	
  3462                           ; 1 bytes @ 0x3
  3463                           
  3464  0023                     setCmd_Status@number:	
  3465                           ; 1 bytes @ 0x3
  3466                           
  3467  0023                     _getRF_KeyStatus$5273:	
  3468                           ; 1 bytes @ 0x3
  3469                           
  3470  0023                     _getSw_KeyStatus$6300:	
  3471                           ; 1 bytes @ 0x3
  3472                           
  3473  0023                     ___bmul@product:	
  3474                           ; 1 bytes @ 0x3
  3475                           
  3476  0023                     DelayTime_1us@i:	
  3477                           ; 1 bytes @ 0x3
  3478                           
  3479  0023                     ___wmul@multiplicand:	
  3480                           ; 2 bytes @ 0x3
  3481                           
  3482  0023                     ___awdiv@dividend:	
  3483                           ; 2 bytes @ 0x3
  3484                           
  3485  0023                     ___lwdiv@dividend:	
  3486                           ; 2 bytes @ 0x3
  3487                           
  3488                           
  3489                           ; 2 bytes @ 0x3
  3490  0023                     	ds	1
  3491  0024                     ??_CC2500_WriteREG:	
  3492  0024                     ??_setLED:	
  3493                           ; 0 bytes @ 0x4
  3494                           
  3495  0024                     ??_DelayOff_Initialization:	
  3496                           ; 0 bytes @ 0x4
  3497                           
  3498  0024                     ??_setDimmerLights_DimmingRun:	
  3499                           ; 0 bytes @ 0x4
  3500                           
  3501  0024                     ??_getAD:	
  3502                           ; 0 bytes @ 0x4
  3503                           
  3504  0024                     CC2500_WriteCommand@command:	
  3505                           ; 0 bytes @ 0x4
  3506                           
  3507  0024                     CC2500_ReadStatus@status_addr:	
  3508                           ; 1 bytes @ 0x4
  3509                           
  3510  0024                     getDelayOff_GO@go:	
  3511                           ; 1 bytes @ 0x4
  3512                           
  3513  0024                     _getDimmerLights_Allow_Condition$2216:	
  3514                           ; 1 bytes @ 0x4
  3515                           
  3516  0024                     getDimmerLights_Status@status:	
  3517                           ; 1 bytes @ 0x4
  3518                           
  3519  0024                     setLED@led:	
  3520                           ; 1 bytes @ 0x4
  3521                           
  3522  0024                     getAD@adcon0:	
  3523                           ; 1 bytes @ 0x4
  3524                           
  3525  0024                     Flash_Memory_Read@ret:	
  3526                           ; 1 bytes @ 0x4
  3527                           
  3528  0024                     ___bmul@multiplier:	
  3529                           ; 1 bytes @ 0x4
  3530                           
  3531  0024                     ___ftpack@exp:	
  3532                           ; 1 bytes @ 0x4
  3533                           
  3534  0024                     _getMain_All_Error_Status$3524:	
  3535                           ; 1 bytes @ 0x4
  3536                           
  3537                           
  3538                           ; 2 bytes @ 0x4
  3539  0024                     	ds	1
  3540  0025                     ??_CC2500_ClearTXFIFO:	
  3541  0025                     ??_CC2500_ClearRXFIFO:	
  3542                           ; 0 bytes @ 0x5
  3543                           
  3544  0025                     ??_CC2500_SIDLEMode:	
  3545                           ; 0 bytes @ 0x5
  3546                           
  3547  0025                     ??_setLED_Initialization:	
  3548                           ; 0 bytes @ 0x5
  3549                           
  3550  0025                     ??_Flash_Memory_Modify:	
  3551                           ; 0 bytes @ 0x5
  3552                           
  3553  0025                     ??_getLoad_AD:	
  3554                           ; 0 bytes @ 0x5
  3555                           
  3556  0025                     ??_getTemp_AD:	
  3557                           ; 0 bytes @ 0x5
  3558                           
  3559  0025                     ??_RF_RxDisable:	
  3560                           ; 0 bytes @ 0x5
  3561                           
  3562  0025                     ??_setSw_Initialization:	
  3563                           ; 0 bytes @ 0x5
  3564                           
  3565  0025                     ??_CC2500_TxData:	
  3566                           ; 0 bytes @ 0x5
  3567                           
  3568  0025                     ??_CC2500_RxData:	
  3569                           ; 0 bytes @ 0x5
  3570                           
  3571  0025                     ??___wmul:	
  3572                           ; 0 bytes @ 0x5
  3573                           
  3574  0025                     ??___awdiv:	
  3575                           ; 0 bytes @ 0x5
  3576                           
  3577  0025                     ??___lwdiv:	
  3578                           ; 0 bytes @ 0x5
  3579                           
  3580  0025                     CC2500_WriteREG@w_addr:	
  3581                           ; 0 bytes @ 0x5
  3582                           
  3583  0025                     setDimmerLights_DimmingRun@lights:	
  3584                           ; 1 bytes @ 0x5
  3585                           
  3586  0025                     setLED_Initialization@led:	
  3587                           ; 1 bytes @ 0x5
  3588                           
  3589  0025                     setLED_Main@led:	
  3590                           ; 1 bytes @ 0x5
  3591                           
  3592  0025                     setSw_Initialization@sw:	
  3593                           ; 1 bytes @ 0x5
  3594                           
  3595  0025                     ___ftpack@sign:	
  3596                           ; 1 bytes @ 0x5
  3597                           
  3598  0025                     getBuz_GO@i:	
  3599                           ; 1 bytes @ 0x5
  3600                           
  3601  0025                     DelayTime_1us@j:	
  3602                           ; 2 bytes @ 0x5
  3603                           
  3604  0025                     ___wmul@product:	
  3605                           ; 2 bytes @ 0x5
  3606                           
  3607                           
  3608                           ; 2 bytes @ 0x5
  3609  0025                     	ds	1
  3610  0026                     ??_CC2500_InitSetREG:	
  3611  0026                     ??_CC2500_InitPATable:	
  3612                           ; 0 bytes @ 0x6
  3613                           
  3614  0026                     ??_Switch_Initialization:	
  3615                           ; 0 bytes @ 0x6
  3616                           
  3617  0026                     ??___ftpack:	
  3618                           ; 0 bytes @ 0x6
  3619                           
  3620  0026                     ??_LED_Initialization:	
  3621                           ; 0 bytes @ 0x6
  3622                           
  3623  0026                     ??_LED_Main:	
  3624                           ; 0 bytes @ 0x6
  3625                           
  3626  0026                     CC2500_TxData@loop_e:	
  3627                           ; 0 bytes @ 0x6
  3628                           
  3629  0026                     CC2500_RxData@loop_f:	
  3630                           ; 1 bytes @ 0x6
  3631                           
  3632  0026                     Flash_Memory_Modify@i:	
  3633                           ; 1 bytes @ 0x6
  3634                           
  3635  0026                     getMain_All_Error_Status@command:	
  3636                           ; 1 bytes @ 0x6
  3637                           
  3638  0026                     getTemp_AD@channel:	
  3639                           ; 1 bytes @ 0x6
  3640                           
  3641  0026                     ___awdiv@counter:	
  3642                           ; 1 bytes @ 0x6
  3643                           
  3644  0026                     ___lwdiv@quotient:	
  3645                           ; 1 bytes @ 0x6
  3646                           
  3647                           
  3648                           ; 2 bytes @ 0x6
  3649  0026                     	ds	1
  3650  0027                     ??_CC2500_PowerRST:	
  3651  0027                     ??_CC2500_FrequencyCabr:	
  3652                           ; 0 bytes @ 0x7
  3653                           
  3654  0027                     ??_Flash_Memory_Main:	
  3655                           ; 0 bytes @ 0x7
  3656                           
  3657  0027                     CC2500_InitSetREG@temp1:	
  3658                           ; 0 bytes @ 0x7
  3659                           
  3660  0027                     CC2500_InitPATable@temp:	
  3661                           ; 1 bytes @ 0x7
  3662                           
  3663  0027                     getMain_All_Error_Status@status:	
  3664                           ; 1 bytes @ 0x7
  3665                           
  3666  0027                     getLoad_AD@channel:	
  3667                           ; 1 bytes @ 0x7
  3668                           
  3669  0027                     ___awdiv@sign:	
  3670                           ; 1 bytes @ 0x7
  3671                           
  3672  0027                     getTemp_AD@ADRES:	
  3673                           ; 1 bytes @ 0x7
  3674                           
  3675                           
  3676                           ; 2 bytes @ 0x7
  3677  0027                     	ds	1
  3678  0028                     CC2500_InitSetREG@temp2:	
  3679  0028                     CC2500_InitPATable@loop_d:	
  3680                           ; 1 bytes @ 0x8
  3681                           
  3682  0028                     getLoad_AD@k:	
  3683                           ; 1 bytes @ 0x8
  3684                           
  3685  0028                     ___lwdiv@counter:	
  3686                           ; 1 bytes @ 0x8
  3687                           
  3688  0028                     ___awdiv@quotient:	
  3689                           ; 1 bytes @ 0x8
  3690                           
  3691                           
  3692                           ; 2 bytes @ 0x8
  3693  0028                     	ds	1
  3694  0029                     ??_Load_Main:	
  3695  0029                     ?___awtoft:	
  3696                           ; 0 bytes @ 0x9
  3697                           
  3698  0029                     CC2500_InitSetREG@loop_c:	
  3699                           ; 3 bytes @ 0x9
  3700                           
  3701  0029                     getLoad_AD@j:	
  3702                           ; 1 bytes @ 0x9
  3703                           
  3704  0029                     ___awtoft@c:	
  3705                           ; 1 bytes @ 0x9
  3706                           
  3707                           
  3708                           ; 2 bytes @ 0x9
  3709  0029                     	ds	1
  3710  002A                     ?_setBuz:	
  3711  002A                     ??_CC2500_PowerOnInitial:	
  3712                           ; 0 bytes @ 0xA
  3713                           
  3714  002A                     setBuz@time:	
  3715                           ; 0 bytes @ 0xA
  3716                           
  3717  002A                     getLoad_AD@ADRES:	
  3718                           ; 2 bytes @ 0xA
  3719                           
  3720                           
  3721                           ; 2 bytes @ 0xA
  3722  002A                     	ds	1
  3723  002B                     Load_Main@error:	
  3724                           
  3725                           ; 1 bytes @ 0xB
  3726  002B                     	ds	1
  3727  002C                     ??_setBuz:	
  3728  002C                     ??___awtoft:	
  3729                           ; 0 bytes @ 0xC
  3730                           
  3731  002C                     getLoad_AD@i:	
  3732                           ; 0 bytes @ 0xC
  3733                           
  3734  002C                     _Load_Main$3891:	
  3735                           ; 1 bytes @ 0xC
  3736                           
  3737                           
  3738                           ; 2 bytes @ 0xC
  3739  002C                     	ds	1
  3740  002D                     setBuz@count:	
  3741                           
  3742                           ; 1 bytes @ 0xD
  3743  002D                     	ds	1
  3744  002E                     ??_setDimmerLights_SwOn:	
  3745  002E                     ??_my_MainTimer:	
  3746                           ; 0 bytes @ 0xE
  3747                           
  3748  002E                     ??_Exception_Main:	
  3749                           ; 0 bytes @ 0xE
  3750                           
  3751  002E                     setDimmerLights_SwOn@sw:	
  3752                           ; 0 bytes @ 0xE
  3753                           
  3754  002E                     Load_Main@ErrorCountValue:	
  3755                           ; 1 bytes @ 0xE
  3756                           
  3757  002E                     ___awtoft@sign:	
  3758                           ; 1 bytes @ 0xE
  3759                           
  3760                           
  3761                           ; 1 bytes @ 0xE
  3762  002E                     	ds	1
  3763  002F                     ?___ftdiv:	
  3764  002F                     ?___ftmul:	
  3765                           ; 3 bytes @ 0xF
  3766                           
  3767  002F                     setDimmerLights_SwOn@idle:	
  3768                           ; 3 bytes @ 0xF
  3769                           
  3770  002F                     Exception_Main@status:	
  3771                           ; 1 bytes @ 0xF
  3772                           
  3773  002F                     Load_Main@Load_RunStatus:	
  3774                           ; 1 bytes @ 0xF
  3775                           
  3776  002F                     ___ftdiv@f2:	
  3777                           ; 1 bytes @ 0xF
  3778                           
  3779  002F                     ___ftmul@f1:	
  3780                           ; 3 bytes @ 0xF
  3781                           
  3782                           
  3783                           ; 3 bytes @ 0xF
  3784  002F                     	ds	1
  3785  0030                     ??_setSw_Main:	
  3786  0030                     Exception_Main@count:	
  3787                           ; 0 bytes @ 0x10
  3788                           
  3789  0030                     Load_Main@LightsCount:	
  3790                           ; 1 bytes @ 0x10
  3791                           
  3792                           
  3793                           ; 1 bytes @ 0x10
  3794  0030                     	ds	1
  3795  0031                     Exception_Main@i:	
  3796  0031                     Load_Main@i:	
  3797                           ; 2 bytes @ 0x11
  3798                           
  3799                           
  3800                           ; 2 bytes @ 0x11
  3801  0031                     	ds	1
  3802  0032                     setSw_Main@sw:	
  3803  0032                     ___ftdiv@f1:	
  3804                           ; 1 bytes @ 0x12
  3805                           
  3806  0032                     ___ftmul@f2:	
  3807                           ; 3 bytes @ 0x12
  3808                           
  3809                           
  3810                           ; 3 bytes @ 0x12
  3811  0032                     	ds	1
  3812  0033                     ??_Switch_Main:	
  3813  0033                     Exception_Main@i_3535:	
  3814                           ; 0 bytes @ 0x13
  3815                           
  3816                           
  3817                           ; 2 bytes @ 0x13
  3818  0033                     	ds	2
  3819  0035                     ??___ftdiv:	
  3820  0035                     ??___ftmul:	
  3821                           ; 0 bytes @ 0x15
  3822                           
  3823  0035                     Exception_Main@lights:	
  3824                           ; 0 bytes @ 0x15
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0x15
  3828  0035                     	ds	1
  3829  0036                     Exception_Main@error:	
  3830                           
  3831                           ; 1 bytes @ 0x16
  3832  0036                     	ds	3
  3833  0039                     ___ftdiv@cntr:	
  3834  0039                     ___ftmul@exp:	
  3835                           ; 1 bytes @ 0x19
  3836                           
  3837                           
  3838                           ; 1 bytes @ 0x19
  3839  0039                     	ds	1
  3840  003A                     ___ftdiv@f3:	
  3841  003A                     ___ftmul@f3_as_product:	
  3842                           ; 3 bytes @ 0x1A
  3843                           
  3844                           
  3845                           ; 3 bytes @ 0x1A
  3846  003A                     	ds	3
  3847  003D                     ___ftdiv@exp:	
  3848  003D                     ___ftmul@cntr:	
  3849                           ; 1 bytes @ 0x1D
  3850                           
  3851                           
  3852                           ; 1 bytes @ 0x1D
  3853  003D                     	ds	1
  3854  003E                     ___ftdiv@sign:	
  3855  003E                     ___ftmul@sign:	
  3856                           ; 1 bytes @ 0x1E
  3857                           
  3858                           
  3859                           ; 1 bytes @ 0x1E
  3860  003E                     	ds	1
  3861  003F                     ?___ftneg:	
  3862  003F                     ___ftneg@f1:	
  3863                           ; 3 bytes @ 0x1F
  3864                           
  3865                           
  3866                           ; 3 bytes @ 0x1F
  3867  003F                     	ds	3
  3868  0042                     ??___ftneg:	
  3869  0042                     ?___ftadd:	
  3870                           ; 0 bytes @ 0x22
  3871                           
  3872  0042                     ___ftadd@f1:	
  3873                           ; 3 bytes @ 0x22
  3874                           
  3875                           
  3876                           ; 3 bytes @ 0x22
  3877  0042                     	ds	3
  3878  0045                     ___ftadd@f2:	
  3879                           
  3880                           ; 3 bytes @ 0x25
  3881  0045                     	ds	3
  3882  0048                     ??___ftadd:	
  3883                           
  3884                           ; 0 bytes @ 0x28
  3885  0048                     	ds	4
  3886  004C                     ___ftadd@sign:	
  3887                           
  3888                           ; 1 bytes @ 0x2C
  3889  004C                     	ds	1
  3890  004D                     ___ftadd@exp2:	
  3891                           
  3892                           ; 1 bytes @ 0x2D
  3893  004D                     	ds	1
  3894  004E                     ___ftadd@exp1:	
  3895                           
  3896                           ; 1 bytes @ 0x2E
  3897  004E                     	ds	1
  3898  004F                     ?___fttol:	
  3899  004F                     ___fttol@f1:	
  3900                           ; 4 bytes @ 0x2F
  3901                           
  3902                           
  3903                           ; 3 bytes @ 0x2F
  3904  004F                     	ds	4
  3905  0053                     ??___fttol:	
  3906                           
  3907                           ; 0 bytes @ 0x33
  3908  0053                     	ds	4
  3909  0057                     ___fttol@sign1:	
  3910                           
  3911                           ; 1 bytes @ 0x37
  3912  0057                     	ds	1
  3913  0058                     ___fttol@lval:	
  3914                           
  3915                           ; 4 bytes @ 0x38
  3916  0058                     	ds	4
  3917  005C                     ___fttol@exp1:	
  3918                           
  3919                           ; 1 bytes @ 0x3C
  3920  005C                     	ds	1
  3921  005D                     ??_getDimmerLights_PercentToValue:	
  3922  005D                     ??_getDimmerLights_ValueToPercent:	
  3923                           ; 0 bytes @ 0x3D
  3924                           
  3925                           
  3926                           ; 0 bytes @ 0x3D
  3927  005D                     	ds	2
  3928  005F                     getDimmerLights_PercentToValue@value:	
  3929  005F                     getDimmerLights_ValueToPercent@value:	
  3930                           ; 1 bytes @ 0x3F
  3931                           
  3932                           
  3933                           ; 1 bytes @ 0x3F
  3934  005F                     	ds	1
  3935  0060                     getDimmerLights_PercentToValue@i:	
  3936  0060                     getDimmerLights_ValueToPercent@i:	
  3937                           ; 3 bytes @ 0x40
  3938                           
  3939                           
  3940                           ; 3 bytes @ 0x40
  3941  0060                     	ds	3
  3942  0063                     ?_setProductData:	
  3943  0063                     ?_setDimmerIntr_MaxmumValue:	
  3944                           ; 0 bytes @ 0x43
  3945                           
  3946  0063                     ??_Flash_Memory_Initialization:	
  3947                           ; 0 bytes @ 0x43
  3948                           
  3949  0063                     setDimmerIntr_MaxmumValue@value:	
  3950                           ; 0 bytes @ 0x43
  3951                           
  3952  0063                     setProductData@value:	
  3953                           ; 1 bytes @ 0x43
  3954                           
  3955                           
  3956                           ; 1 bytes @ 0x43
  3957  0063                     	ds	1
  3958  0064                     ??_setProductData:	
  3959  0064                     ??_setDimmerIntr_MaxmumValue:	
  3960                           ; 0 bytes @ 0x44
  3961                           
  3962  0064                     Flash_Memory_Initialization@i:	
  3963                           ; 0 bytes @ 0x44
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x44
  3967  0064                     	ds	1
  3968  0065                     setDimmerIntr_MaxmumValue@lights:	
  3969  0065                     setProductData@address:	
  3970                           ; 1 bytes @ 0x45
  3971                           
  3972                           
  3973                           ; 1 bytes @ 0x45
  3974  0065                     	ds	1
  3975  0066                     ??_DlyOff_Main:	
  3976  0066                     ?_setRF_DimmerLights:	
  3977                           ; 0 bytes @ 0x46
  3978                           
  3979  0066                     ??_setTemp_Main:	
  3980                           ; 0 bytes @ 0x46
  3981                           
  3982  0066                     ??_setLog_Code:	
  3983                           ; 0 bytes @ 0x46
  3984                           
  3985  0066                     ??_setRFSW_AdjControl:	
  3986                           ; 0 bytes @ 0x46
  3987                           
  3988  0066                     ?_setDelayOff_GO:	
  3989                           ; 0 bytes @ 0x46
  3990                           
  3991  0066                     setDelayOff_GO@command:	
  3992                           ; 0 bytes @ 0x46
  3993                           
  3994  0066                     setRF_DimmerLights@on:	
  3995                           ; 1 bytes @ 0x46
  3996                           
  3997                           
  3998                           ; 1 bytes @ 0x46
  3999  0066                     	ds	1
  4000  0067                     ??_setRF_DimmerLights:	
  4001  0067                     ??_Temp_Main:	
  4002                           ; 0 bytes @ 0x47
  4003                           
  4004  0067                     setDelayOff_GO@value:	
  4005                           ; 0 bytes @ 0x47
  4006                           
  4007                           
  4008                           ; 1 bytes @ 0x47
  4009  0067                     	ds	1
  4010  0068                     ??_setDelayOff_GO:	
  4011  0068                     DlyOff_Main@sw:	
  4012                           ; 0 bytes @ 0x48
  4013                           
  4014  0068                     setRFSW_AdjControl@status:	
  4015                           ; 1 bytes @ 0x48
  4016                           
  4017                           
  4018                           ; 1 bytes @ 0x48
  4019  0068                     	ds	1
  4020  0069                     ??_DelayOff_Main:	
  4021  0069                     setRFSW_AdjControl@sw:	
  4022                           ; 0 bytes @ 0x49
  4023                           
  4024  0069                     setRF_DimmerLights@status:	
  4025                           ; 1 bytes @ 0x49
  4026                           
  4027                           
  4028                           ; 1 bytes @ 0x49
  4029  0069                     	ds	1
  4030  006A                     setDelayOff_GO@i:	
  4031  006A                     setRF_DimmerLights@lights:	
  4032                           ; 1 bytes @ 0x4A
  4033                           
  4034                           
  4035                           ; 1 bytes @ 0x4A
  4036  006A                     	ds	1
  4037  006B                     ?_setDimmerLights_Dimming:	
  4038  006B                     setDelayOff_GO@j:	
  4039                           ; 0 bytes @ 0x4B
  4040                           
  4041  006B                     setDimmerLights_Dimming@status:	
  4042                           ; 1 bytes @ 0x4B
  4043                           
  4044                           
  4045                           ; 1 bytes @ 0x4B
  4046  006B                     	ds	1
  4047  006C                     ??_setDimmerLights_Dimming:	
  4048  006C                     setDelayOff_GO@k:	
  4049                           ; 0 bytes @ 0x4C
  4050                           
  4051                           
  4052                           ; 1 bytes @ 0x4C
  4053  006C                     	ds	1
  4054  006D                     setDelayOff_GO@sw:	
  4055  006D                     setDimmerLights_Dimming@lights:	
  4056                           ; 1 bytes @ 0x4D
  4057                           
  4058                           
  4059                           ; 1 bytes @ 0x4D
  4060  006D                     	ds	1
  4061  006E                     ??_setDimmerLights_Main:	
  4062  006E                     ??_RF_Main:	
  4063                           ; 0 bytes @ 0x4E
  4064                           
  4065  006E                     ??_setControl_Lights_Table:	
  4066                           ; 0 bytes @ 0x4E
  4067                           
  4068  006E                     ??_DimmerLights_Main:	
  4069                           ; 0 bytes @ 0x4E
  4070                           
  4071  006E                     ??_main:	
  4072                           ; 0 bytes @ 0x4E
  4073                           
  4074                           
  4075                           	psect	maintext
  4076  1615                     __pmaintext:	
  4077                           ; 0 bytes @ 0x4E
  4078 ;;
  4079 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4080 ;;
  4081 ;; *************** function _main *****************
  4082 ;; Defined at:
  4083 ;;		line 7 in file "../src/Main_B1.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  argc            2    0[BANK3 ] int 
  4086 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;		None
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  2    0[BANK3 ] int 
  4091 ;; Registers used:
  4092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4093 ;; Tracked objects:
  4094 ;;		On entry : 17F/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4098 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4101 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4102 ;;Total ram usage:        4 bytes
  4103 ;; Hardware stack levels required when called:   13
  4104 ;; This function calls:
  4105 ;;		_Buzzer_Initialization
  4106 ;;		_Buzzer_Main
  4107 ;;		_CC2500_PowerOnInitial
  4108 ;;		_DelayOff_Initialization
  4109 ;;		_DelayOff_Main
  4110 ;;		_DimmerLights_Initialization
  4111 ;;		_DimmerLights_Main
  4112 ;;		_Exception_Main
  4113 ;;		_Flash_Memory_Initialization
  4114 ;;		_Flash_Memory_Main
  4115 ;;		_LED_Initialization
  4116 ;;		_LED_Main
  4117 ;;		_Load_Initialization
  4118 ;;		_Load_Main
  4119 ;;		_Mcu_Initialization
  4120 ;;		_RF_Initialization
  4121 ;;		_RF_Main
  4122 ;;		_Switch_Initialization
  4123 ;;		_Switch_Main
  4124 ;;		_Temp_Initialization
  4125 ;;		_Temp_Main
  4126 ;;		_WDT_Main
  4127 ;;		_getLoad_AD
  4128 ;;		_getTemp_AD
  4129 ;;		_myMain_Initialization
  4130 ;;		_my_MainTimer
  4131 ;; This function is called by:
  4132 ;;		Startup code after reset
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           
  4137                           ;psect for function _main
  4138  1615                     _main:	
  4139                           
  4140                           ;Main_B1.c: 8: myMain_Initialization();
  4141                           
  4142                           ;incstack = 0
  4143                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4144  1615  319D  25DD  3196   	fcall	_myMain_Initialization
  4145                           
  4146                           ;Main_B1.c: 9: Mcu_Initialization();
  4147  1618  319D  256D  3196   	fcall	_Mcu_Initialization
  4148                           
  4149                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4150  161B  3184  2476  3196   	fcall	_Flash_Memory_Initialization
  4151                           
  4152                           ;Main_B1.c: 11: LED_Initialization();
  4153  161E  319B  2352  3196   	fcall	_LED_Initialization
  4154                           
  4155                           ;Main_B1.c: 12: Buzzer_Initialization();
  4156  1621  319B  2338  3196   	fcall	_Buzzer_Initialization
  4157                           
  4158                           ;Main_B1.c: 14: ;;
  4159                           ;Main_B1.c: 15: Temp_Initialization();
  4160  1624  319B  2344  3196   	fcall	_Temp_Initialization
  4161                           
  4162                           ;Main_B1.c: 16: Load_Initialization();
  4163  1627  319B  233B  3196   	fcall	_Load_Initialization
  4164                           
  4165                           ;Main_B1.c: 17: ;;
  4166                           ;Main_B1.c: 18: DelayOff_Initialization();
  4167  162A  319B  234A  3196   	fcall	_DelayOff_Initialization
  4168                           
  4169                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4170  162D  319B  2389  3196   	fcall	_DimmerLights_Initialization
  4171                           
  4172                           ;Main_B1.c: 21: ;;
  4173                           ;Main_B1.c: 22: ;;
  4174                           ;Main_B1.c: 23: ;;
  4175                           ;Main_B1.c: 24: Switch_Initialization();
  4176  1630  319B  236E  3196   	fcall	_Switch_Initialization
  4177                           
  4178                           ;Main_B1.c: 25: RF_Initialization();
  4179  1633  319B  233E  3196   	fcall	_RF_Initialization
  4180                           
  4181                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4182  1636  319E  2619  3196   	fcall	_CC2500_PowerOnInitial
  4183  1639                     l9113:	
  4184                           ;Main_B1.c: 27: ;;
  4185                           ;Main_B1.c: 28: ;;
  4186                           ;Main_B1.c: 30: while (1) {
  4187                           
  4188                           
  4189                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4190  1639  0022               	movlb	2	; select bank2
  4191  163A  1C20               	btfss	_myMain^(0+256),0
  4192  163B  2E44               	goto	l9117
  4193                           
  4194                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4195  163C  3005               	movlw	5
  4196  163D  318B  2333  3196   	fcall	_getLoad_AD
  4197                           
  4198                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4199  1640  3009               	movlw	9
  4200  1641  3193  23B4  3196   	fcall	_getTemp_AD
  4201  1644                     l9117:	
  4202                           
  4203                           ;Main_B1.c: 57: }
  4204                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4205  1644  0021               	movlb	1	; select bank1
  4206  1645  1C46               	btfss	_Timer1^(0+128),0
  4207  1646  2E39               	goto	l9113
  4208                           
  4209                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4210  1647  1046               	bcf	_Timer1^(0+128),0
  4211                           
  4212                           ;Main_B1.c: 96: my_MainTimer();
  4213  1648  3193  2377  3196   	fcall	_my_MainTimer
  4214                           
  4215                           ;Main_B1.c: 97: WDT_Main();
  4216  164B  319D  257F  3196   	fcall	_WDT_Main
  4217                           
  4218                           ;Main_B1.c: 98: ;;
  4219                           ;Main_B1.c: 99: ;;
  4220                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4221  164E  0022               	movlb	2	; select bank2
  4222  164F  1C20               	btfss	_myMain^(0+256),0
  4223  1650  2E39               	goto	l9113
  4224                           
  4225                           ;Main_B1.c: 101: Flash_Memory_Main();
  4226  1651  3192  2262  3196   	fcall	_Flash_Memory_Main
  4227                           
  4228                           ;Main_B1.c: 103: LED_Main();
  4229  1654  319B  2356  3196   	fcall	_LED_Main
  4230                           
  4231                           ;Main_B1.c: 104: Buzzer_Main();
  4232  1657  3194  247B  3196   	fcall	_Buzzer_Main
  4233                           
  4234                           ;Main_B1.c: 106: ;;
  4235                           ;Main_B1.c: 107: Temp_Main();
  4236  165A  319B  2347  3196   	fcall	_Temp_Main
  4237                           
  4238                           ;Main_B1.c: 108: Load_Main();
  4239  165D  3180  204A  3196   	fcall	_Load_Main
  4240                           
  4241                           ;Main_B1.c: 109: ;;
  4242                           ;Main_B1.c: 111: ;;
  4243                           ;Main_B1.c: 112: DimmerLights_Main();
  4244  1660  319F  2750  3196   	fcall	_DimmerLights_Main
  4245                           
  4246                           ;Main_B1.c: 113: Switch_Main();
  4247  1663  319B  2397  3196   	fcall	_Switch_Main
  4248                           
  4249                           ;Main_B1.c: 114: ;;
  4250                           ;Main_B1.c: 115: ;;
  4251                           ;Main_B1.c: 117: RF_Main();
  4252  1666  319B  2341  3196   	fcall	_RF_Main
  4253                           
  4254                           ;Main_B1.c: 118: DelayOff_Main();
  4255  1669  319B  234E  3196   	fcall	_DelayOff_Main
  4256                           
  4257                           ;Main_B1.c: 119: ;;
  4258                           ;Main_B1.c: 120: ;;
  4259                           ;Main_B1.c: 121: Exception_Main();
  4260  166C  3186  263C  3196   	fcall	_Exception_Main
  4261  166F  2E39               	goto	l9113
  4262  1670                     __end_of_main:	
  4263                           ;Main_B1.c: 128: }
  4264                           ;Main_B1.c: 129: }
  4265                           ;Main_B1.c: 163: }
  4266                           ;Main_B1.c: 164: return (0);
  4267                           ;	Return value of _main is never used
  4268                           
  4269                           
  4270                           	psect	text1
  4271  1377                     __ptext1:	
  4272 ;; *************** function _my_MainTimer *****************
  4273 ;; Defined at:
  4274 ;;		line 185 in file "../src/Main_B1.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;		None
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;		None               void
  4281 ;; Registers used:
  4282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;Total ram usage:        1 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    7
  4295 ;; This function calls:
  4296 ;;		_setBuz
  4297 ;; This function is called by:
  4298 ;;		_main
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           
  4303                           ;psect for function _my_MainTimer
  4304  1377                     _my_MainTimer:	
  4305                           
  4306                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4307                           
  4308                           ;incstack = 0
  4309                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4310  1377  0022               	movlb	2	; select bank2
  4311  1378  1820               	btfsc	_myMain^(0+256),0
  4312  1379  2B91               	goto	l8849
  4313                           
  4314                           ;Main_B1.c: 188: myMain.PowerCount++;
  4315  137A  3001               	movlw	1
  4316  137B  0020               	movlb	0	; select bank0
  4317  137C  00AE               	movwf	??_my_MainTimer
  4318  137D  082E               	movf	??_my_MainTimer,w
  4319  137E  0022               	movlb	2	; select bank2
  4320  137F  07A1               	addwf	(_myMain^(0+256)+1),f
  4321                           
  4322                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4323  1380  0821               	movf	(_myMain^(0+256)+1),w
  4324  1381  3A4B               	xorlw	75
  4325  1382  1D03               	skipz
  4326  1383  0008               	return
  4327                           
  4328                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4329  1384  01A1               	clrf	(_myMain^(0+256)+1)
  4330                           
  4331                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4332  1385  1420               	bsf	_myMain^(0+256),0
  4333                           
  4334                           ;Main_B1.c: 196: setBuz(3, 50);
  4335  1386  3032               	movlw	50
  4336  1387  0020               	movlb	0	; select bank0
  4337  1388  00AA               	movwf	setBuz@time
  4338  1389  3000               	movlw	0
  4339  138A  00AB               	movwf	setBuz@time+1
  4340  138B  3003               	movlw	3
  4341  138C  3195  25BC         	fcall	_setBuz
  4342                           
  4343                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4344  138E  0022               	movlb	2	; select bank2
  4345  138F  1620               	bsf	_myMain^(0+256),4
  4346                           
  4347                           ;Main_B1.c: 206: }
  4348                           ;Main_B1.c: 207: } else {
  4349  1390  0008               	return
  4350  1391                     l8849:	
  4351                           
  4352                           ;Main_B1.c: 208: myMain.PowerCount++;
  4353  1391  3001               	movlw	1
  4354  1392  0020               	movlb	0	; select bank0
  4355  1393  00AE               	movwf	??_my_MainTimer
  4356  1394  082E               	movf	??_my_MainTimer,w
  4357  1395  0022               	movlb	2	; select bank2
  4358  1396  07A1               	addwf	(_myMain^(0+256)+1),f
  4359                           
  4360                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4361  1397  0821               	movf	(_myMain^(0+256)+1),w
  4362  1398  3A32               	xorlw	50
  4363  1399  1903               	btfsc	3,2
  4364                           
  4365                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4366  139A  01A1               	clrf	(_myMain^(0+256)+1)
  4367                           
  4368                           ;Main_B1.c: 226: }
  4369                           ;Main_B1.c: 228: myMain.Count1++;
  4370  139B  3001               	movlw	1
  4371  139C  07A4               	addwf	(_myMain^(0+256)+4),f
  4372  139D  3000               	movlw	0
  4373  139E  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4374                           
  4375                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4376  139F  3004               	movlw	4
  4377  13A0  3E20               	addlw	_myMain& (0+255)
  4378  13A1  0086               	movwf	6
  4379  13A2  3001               	movlw	1	; select bank2/3
  4380  13A3  0087               	movwf	7
  4381  13A4  3F40               	moviw [0]fsr1
  4382  13A5  3A32               	xorlw	50
  4383  13A6  1D03               	skipz
  4384  13A7  2BAA               	goto	u9625
  4385  13A8  3F41               	moviw [1]fsr1
  4386  13A9  3A00               	xorlw	0
  4387  13AA                     u9625:	
  4388  13AA  1D03               	skipz
  4389  13AB  0008               	return
  4390                           
  4391                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4392  13AC  01A4               	clrf	(_myMain^(0+256)+4)
  4393  13AD  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4394                           
  4395                           ;Main_B1.c: 242: if (myMain.Flag) {
  4396  13AE  1CA0               	btfss	_myMain^(0+256),1
  4397  13AF  2BB2               	goto	l1428
  4398                           
  4399                           ;Main_B1.c: 243: myMain.Flag = 0;
  4400  13B0  10A0               	bcf	_myMain^(0+256),1
  4401                           
  4402                           ;Main_B1.c: 252: } else {
  4403  13B1  0008               	return
  4404  13B2                     l1428:	
  4405                           
  4406                           ;Main_B1.c: 253: myMain.Flag = 1;
  4407  13B2  14A0               	bsf	_myMain^(0+256),1
  4408  13B3  0008               	return
  4409  13B4                     __end_of_my_MainTimer:	
  4410                           
  4411                           	psect	text2
  4412  1DDD                     __ptext2:	
  4413 ;; *************** function _myMain_Initialization *****************
  4414 ;; Defined at:
  4415 ;;		line 170 in file "../src/Main_B1.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;		None               void
  4422 ;; Registers used:
  4423 ;;		wreg, fsr1l, fsr1h
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;Total ram usage:        1 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    5
  4436 ;; This function calls:
  4437 ;;		Nothing
  4438 ;; This function is called by:
  4439 ;;		_main
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           
  4444                           ;psect for function _myMain_Initialization
  4445  1DDD                     _myMain_Initialization:	
  4446                           
  4447                           ;Main_B1.c: 173: product = &_product;
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4451  1DDD  3020               	movlw	__product& (0+255)
  4452  1DDE  0020               	movlb	0	; select bank0
  4453  1DDF  00A1               	movwf	??_myMain_Initialization
  4454  1DE0  0821               	movf	??_myMain_Initialization,w
  4455  1DE1  0021               	movlb	1	; select bank1
  4456  1DE2  00ED               	movwf	_product^(0+128)
  4457                           
  4458                           ;Main_B1.c: 174: product->Data[20] = 209;
  4459  1DE3  30D1               	movlw	209
  4460  1DE4  0020               	movlb	0	; select bank0
  4461  1DE5  00A1               	movwf	??_myMain_Initialization
  4462  1DE6  0021               	movlb	1	; select bank1
  4463  1DE7  086D               	movf	_product^(0+128),w
  4464  1DE8  3E14               	addlw	20
  4465  1DE9  0086               	movwf	6
  4466  1DEA  3002               	movlw	2	; select bank4/5
  4467  1DEB  0087               	movwf	7
  4468  1DEC  0020               	movlb	0	; select bank0
  4469  1DED  0821               	movf	??_myMain_Initialization,w
  4470  1DEE  0081               	movwf	1
  4471  1DEF  0008               	return
  4472  1DF0                     __end_of_myMain_Initialization:	
  4473                           
  4474                           	psect	text3
  4475  13B4                     __ptext3:	
  4476 ;; *************** function _getTemp_AD *****************
  4477 ;; Defined at:
  4478 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  channel         1    wreg     unsigned char 
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;  channel         1    6[BANK0 ] unsigned char 
  4483 ;;  ADRES           2    7[BANK0 ] unsigned int 
  4484 ;; Return value:  Size  Location     Type
  4485 ;;		None               void
  4486 ;; Registers used:
  4487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4497 ;;Total ram usage:        4 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    7
  4500 ;; This function calls:
  4501 ;;		_getAD
  4502 ;; This function is called by:
  4503 ;;		_main
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function _getTemp_AD
  4509  13B4                     _getTemp_AD:	
  4510                           
  4511                           ;incstack = 0
  4512                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4513                           ;getTemp_AD@channel stored from wreg
  4514  13B4  0020               	movlb	0	; select bank0
  4515  13B5  00A6               	movwf	getTemp_AD@channel
  4516                           
  4517                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4518  13B6  01A7               	clrf	getTemp_AD@ADRES
  4519  13B7  01A8               	clrf	getTemp_AD@ADRES+1
  4520                           
  4521                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4522  13B8  0021               	movlb	1	; select bank1
  4523  13B9  1D5B               	btfss	_Temp^(0+128),2
  4524  13BA  2BE4               	goto	l7739
  4525                           
  4526                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4527  13BB  30F0               	movlw	240
  4528  13BC  0020               	movlb	0	; select bank0
  4529  13BD  00A5               	movwf	??_getTemp_AD
  4530  13BE  0825               	movf	??_getTemp_AD,w
  4531  13BF  00A1               	movwf	getAD@adcon1
  4532  13C0  0826               	movf	getTemp_AD@channel,w
  4533  13C1  3190  20C0  3193   	fcall	_getAD
  4534  13C4  0020               	movlb	0	; select bank0
  4535  13C5  0822               	movf	?_getAD+1,w
  4536  13C6  01A8               	clrf	getTemp_AD@ADRES+1
  4537  13C7  07A8               	addwf	getTemp_AD@ADRES+1,f
  4538  13C8  0821               	movf	?_getAD,w
  4539  13C9  01A7               	clrf	getTemp_AD@ADRES
  4540  13CA  07A7               	addwf	getTemp_AD@ADRES,f
  4541                           
  4542                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4543  13CB  0828               	movf	getTemp_AD@ADRES+1,w
  4544  13CC  0427               	iorwf	getTemp_AD@ADRES,w
  4545  13CD  1903               	skipnz
  4546  13CE  2BE4               	goto	l7739
  4547                           
  4548                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4549  13CF  0828               	movf	getTemp_AD@ADRES+1,w
  4550  13D0  0021               	movlb	1	; select bank1
  4551  13D1  0264               	subwf	((_Temp+1)^(0+128)+8),w
  4552  13D2  1D03               	skipz
  4553  13D3  2BD8               	goto	u7695
  4554  13D4  0020               	movlb	0	; select bank0
  4555  13D5  0827               	movf	getTemp_AD@ADRES,w
  4556  13D6  0021               	movlb	1	; select bank1
  4557  13D7  0263               	subwf	(_Temp^(0+128)+8),w
  4558  13D8                     u7695:	
  4559  13D8  1803               	skipnc
  4560  13D9  2BE4               	goto	l7739
  4561                           
  4562                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4563  13DA  0020               	movlb	0	; select bank0
  4564  13DB  0828               	movf	getTemp_AD@ADRES+1,w
  4565  13DC  0021               	movlb	1	; select bank1
  4566  13DD  01E4               	clrf	((_Temp+1)^(0+128)+8)
  4567  13DE  07E4               	addwf	((_Temp+1)^(0+128)+8),f
  4568  13DF  0020               	movlb	0	; select bank0
  4569  13E0  0827               	movf	getTemp_AD@ADRES,w
  4570  13E1  0021               	movlb	1	; select bank1
  4571  13E2  01E3               	clrf	(_Temp^(0+128)+8)
  4572  13E3  07E3               	addwf	(_Temp^(0+128)+8),f
  4573  13E4                     l7739:	
  4574                           
  4575                           ;OverTemperature_B1.c: 32: }
  4576                           ;OverTemperature_B1.c: 33: }
  4577                           ;OverTemperature_B1.c: 34: }
  4578                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4579  13E4  30F0               	movlw	240
  4580  13E5  0020               	movlb	0	; select bank0
  4581  13E6  00A5               	movwf	??_getTemp_AD
  4582  13E7  0825               	movf	??_getTemp_AD,w
  4583  13E8  00A1               	movwf	getAD@adcon1
  4584  13E9  0826               	movf	getTemp_AD@channel,w
  4585  13EA  3190  20C0         	fcall	_getAD
  4586  13EC  0020               	movlb	0	; select bank0
  4587  13ED  0822               	movf	?_getAD+1,w
  4588  13EE  01A8               	clrf	getTemp_AD@ADRES+1
  4589  13EF  07A8               	addwf	getTemp_AD@ADRES+1,f
  4590  13F0  0821               	movf	?_getAD,w
  4591  13F1  01A7               	clrf	getTemp_AD@ADRES
  4592  13F2  07A7               	addwf	getTemp_AD@ADRES,f
  4593  13F3  0008               	return
  4594  13F4                     __end_of_getTemp_AD:	
  4595                           
  4596                           	psect	text4
  4597  0B33                     __ptext4:	
  4598 ;; *************** function _getLoad_AD *****************
  4599 ;; Defined at:
  4600 ;;		line 15 in file "../src/OverLoad_B1.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;  channel         1    wreg     unsigned char 
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;  channel         1    7[BANK0 ] unsigned char 
  4605 ;;  ADRES           2   10[BANK0 ] unsigned int 
  4606 ;;  i               1   12[BANK0 ] unsigned char 
  4607 ;;  j               1    9[BANK0 ] unsigned char 
  4608 ;;  k               1    8[BANK0 ] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;		None               void
  4611 ;; Registers used:
  4612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;Total ram usage:        8 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    7
  4625 ;; This function calls:
  4626 ;;		_getAD
  4627 ;; This function is called by:
  4628 ;;		_main
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           
  4633                           ;psect for function _getLoad_AD
  4634  0B33                     _getLoad_AD:	
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4638                           ;getLoad_AD@channel stored from wreg
  4639  0B33  0020               	movlb	0	; select bank0
  4640  0B34  00A7               	movwf	getLoad_AD@channel
  4641                           
  4642                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4643  0B35  01AC               	clrf	getLoad_AD@i
  4644  0B36  01A9               	clrf	getLoad_AD@j
  4645  0B37  01A8               	clrf	getLoad_AD@k
  4646                           
  4647                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4648  0B38  01AA               	clrf	getLoad_AD@ADRES
  4649  0B39  01AB               	clrf	getLoad_AD@ADRES+1
  4650                           
  4651                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4652  0B3A  0022               	movlb	2	; select bank2
  4653  0B3B  1E34               	btfss	_Load^(0+256),4
  4654  0B3C  0008               	return
  4655                           
  4656                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4657  0B3D  30F3               	movlw	243
  4658  0B3E  0020               	movlb	0	; select bank0
  4659  0B3F  00A5               	movwf	??_getLoad_AD
  4660  0B40  0825               	movf	??_getLoad_AD,w
  4661  0B41  00A1               	movwf	getAD@adcon1
  4662  0B42  0827               	movf	getLoad_AD@channel,w
  4663  0B43  3190  20C0  318B   	fcall	_getAD
  4664  0B46  0020               	movlb	0	; select bank0
  4665  0B47  0822               	movf	?_getAD+1,w
  4666  0B48  01AB               	clrf	getLoad_AD@ADRES+1
  4667  0B49  07AB               	addwf	getLoad_AD@ADRES+1,f
  4668  0B4A  0821               	movf	?_getAD,w
  4669  0B4B  01AA               	clrf	getLoad_AD@ADRES
  4670  0B4C  07AA               	addwf	getLoad_AD@ADRES,f
  4671                           
  4672                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4673  0B4D  01AC               	clrf	getLoad_AD@i
  4674  0B4E  3004               	movlw	4
  4675  0B4F  022C               	subwf	getLoad_AD@i,w
  4676  0B50  1803               	btfsc	3,0
  4677  0B51  2B79               	goto	l7707
  4678  0B52                     l7695:	
  4679                           
  4680                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4681  0B52  352C               	lslf	getLoad_AD@i,w
  4682  0B53  3E3F               	addlw	(_Load+11)& (0+255)
  4683  0B54  0086               	movwf	6
  4684  0B55  3001               	movlw	1	; select bank2/3
  4685  0B56  0087               	movwf	7
  4686  0B57  3F40               	moviw [0]fsr1
  4687  0B58  00A5               	movwf	??_getLoad_AD
  4688  0B59  3F41               	moviw [1]fsr1
  4689  0B5A  00A6               	movwf	??_getLoad_AD+1
  4690  0B5B  082B               	movf	getLoad_AD@ADRES+1,w
  4691  0B5C  0226               	subwf	??_getLoad_AD+1,w
  4692  0B5D  1D03               	skipz
  4693  0B5E  2B61               	goto	u7595
  4694  0B5F  082A               	movf	getLoad_AD@ADRES,w
  4695  0B60  0225               	subwf	??_getLoad_AD,w
  4696  0B61                     u7595:	
  4697  0B61  1803               	skipnc
  4698  0B62  2B71               	goto	l7703
  4699  0B63  08A9               	movf	getLoad_AD@j,f
  4700  0B64  1D03               	skipz
  4701  0B65  2B71               	goto	l7703
  4702                           
  4703                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4704  0B66  352C               	lslf	getLoad_AD@i,w
  4705  0B67  3E3F               	addlw	(_Load+11)& (0+255)
  4706  0B68  0086               	movwf	6
  4707  0B69  3001               	movlw	1	; select bank2/3
  4708  0B6A  0087               	movwf	7
  4709  0B6B  082A               	movf	getLoad_AD@ADRES,w
  4710  0B6C  3FC0               	movwi [0]fsr1
  4711  0B6D  082B               	movf	getLoad_AD@ADRES+1,w
  4712  0B6E  3FC1               	movwi [1]fsr1
  4713                           
  4714                           ;OverLoad_B1.c: 24: j = 1;
  4715  0B6F  01A9               	clrf	getLoad_AD@j
  4716  0B70  0AA9               	incf	getLoad_AD@j,f
  4717  0B71                     l7703:	
  4718  0B71  3001               	movlw	1
  4719  0B72  00A5               	movwf	??_getLoad_AD
  4720  0B73  0825               	movf	??_getLoad_AD,w
  4721  0B74  07AC               	addwf	getLoad_AD@i,f
  4722  0B75  3004               	movlw	4
  4723  0B76  022C               	subwf	getLoad_AD@i,w
  4724  0B77  1C03               	skipc
  4725  0B78  2B52               	goto	l7695
  4726  0B79                     l7707:	
  4727                           
  4728                           ;OverLoad_B1.c: 25: }
  4729                           ;OverLoad_B1.c: 26: }
  4730                           ;OverLoad_B1.c: 27: if (j == 0) {
  4731  0B79  08A9               	movf	getLoad_AD@j,f
  4732  0B7A  1D03               	skipz
  4733  0B7B  0008               	return
  4734                           
  4735                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4736  0B7C  01AC               	clrf	getLoad_AD@i
  4737  0B7D                     L1:	
  4738  0B7D  3004               	movlw	4
  4739  0B7E  022C               	subwf	getLoad_AD@i,w
  4740  0B7F  1803               	btfsc	3,0
  4741  0B80  0008               	return
  4742                           
  4743                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4744  0B81  352C               	lslf	getLoad_AD@i,w
  4745  0B82  3E49               	addlw	(_Load+21)& (0+255)
  4746  0B83  0086               	movwf	6
  4747  0B84  3001               	movlw	1	; select bank2/3
  4748  0B85  0087               	movwf	7
  4749  0B86  3F40               	moviw [0]fsr1
  4750  0B87  00A5               	movwf	??_getLoad_AD
  4751  0B88  3F41               	moviw [1]fsr1
  4752  0B89  00A6               	movwf	??_getLoad_AD+1
  4753  0B8A  0826               	movf	??_getLoad_AD+1,w
  4754  0B8B  022B               	subwf	getLoad_AD@ADRES+1,w
  4755  0B8C  1D03               	skipz
  4756  0B8D  2B90               	goto	u7645
  4757  0B8E  0825               	movf	??_getLoad_AD,w
  4758  0B8F  022A               	subwf	getLoad_AD@ADRES,w
  4759  0B90                     u7645:	
  4760  0B90  1803               	skipnc
  4761  0B91  2BA0               	goto	l7723
  4762  0B92  08A8               	movf	getLoad_AD@k,f
  4763  0B93  1D03               	skipz
  4764  0B94  2BA0               	goto	l7723
  4765                           
  4766                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4767  0B95  352C               	lslf	getLoad_AD@i,w
  4768  0B96  3E49               	addlw	(_Load+21)& (0+255)
  4769  0B97  0086               	movwf	6
  4770  0B98  3001               	movlw	1	; select bank2/3
  4771  0B99  0087               	movwf	7
  4772  0B9A  082A               	movf	getLoad_AD@ADRES,w
  4773  0B9B  3FC0               	movwi [0]fsr1
  4774  0B9C  082B               	movf	getLoad_AD@ADRES+1,w
  4775  0B9D  3FC1               	movwi [1]fsr1
  4776                           
  4777                           ;OverLoad_B1.c: 31: k = 1;
  4778  0B9E  01A8               	clrf	getLoad_AD@k
  4779  0B9F  0AA8               	incf	getLoad_AD@k,f
  4780  0BA0                     l7723:	
  4781  0BA0  3001               	movlw	1
  4782  0BA1  00A5               	movwf	??_getLoad_AD
  4783  0BA2  0825               	movf	??_getLoad_AD,w
  4784  0BA3  07AC               	addwf	getLoad_AD@i,f
  4785  0BA4  2B7D               	goto	L1
  4786  0BA5                     __end_of_getLoad_AD:	
  4787                           
  4788                           	psect	text5
  4789  10C0                     __ptext5:	
  4790 ;; *************** function _getAD *****************
  4791 ;; Defined at:
  4792 ;;		line 459 in file "../src/MCU_B1.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  adcon0          1    wreg     unsigned char 
  4795 ;;  adcon1          1    1[BANK0 ] unsigned char 
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;  adcon0          1    4[BANK0 ] unsigned char 
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  2    1[BANK0 ] int 
  4800 ;; Registers used:
  4801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4807 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;Total ram usage:        4 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    6
  4814 ;; This function calls:
  4815 ;;		_Timeout_Counter
  4816 ;;		_set_TimeoutCleared
  4817 ;; This function is called by:
  4818 ;;		_getLoad_AD
  4819 ;;		_getTemp_AD
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function _getAD
  4825  10C0                     _getAD:	
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4829                           ;getAD@adcon0 stored from wreg
  4830  10C0  0020               	movlb	0	; select bank0
  4831  10C1  00A4               	movwf	getAD@adcon0
  4832                           
  4833                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4834  10C2  0824               	movf	getAD@adcon0,w
  4835  10C3  0021               	movlb	1	; select bank1
  4836  10C4  009D               	movwf	29	;volatile
  4837                           
  4838                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4839  10C5  0020               	movlb	0	; select bank0
  4840  10C6  0821               	movf	getAD@adcon1,w
  4841  10C7  0021               	movlb	1	; select bank1
  4842  10C8  009E               	movwf	30	;volatile
  4843                           
  4844                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4845  10C9  149D               	bsf	29,1	;volatile
  4846                           
  4847                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4848  10CA  28CE               	goto	l7193
  4849  10CB                     l7191:	
  4850                           
  4851                           ;MCU_B1.c: 464: Timeout_Counter();
  4852  10CB  319E  266F  3190   	fcall	_Timeout_Counter
  4853  10CE                     l7193:	
  4854  10CE  0021               	movlb	1	; select bank1
  4855  10CF  1C9D               	btfss	29,1	;volatile
  4856  10D0  28D4               	goto	l7197
  4857  10D1  0022               	movlb	2	; select bank2
  4858  10D2  1D2A               	btfss	(_myMain^(0+256)+10),2
  4859  10D3  28CB               	goto	l7191
  4860  10D4                     l7197:	
  4861                           
  4862                           ;MCU_B1.c: 465: };
  4863                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4864  10D4  319B  2372         	fcall	_set_TimeoutCleared
  4865                           
  4866                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4867  10D6  0021               	movlb	1	; select bank1
  4868  10D7  081C               	movf	28,w	;volatile
  4869  10D8  0020               	movlb	0	; select bank0
  4870  10D9  01A2               	clrf	?_getAD+1
  4871  10DA  07A2               	addwf	?_getAD+1,f
  4872  10DB  0021               	movlb	1	; select bank1
  4873  10DC  081B               	movf	27,w	;volatile
  4874  10DD  0020               	movlb	0	; select bank0
  4875  10DE  01A1               	clrf	?_getAD
  4876  10DF  07A1               	addwf	?_getAD,f
  4877  10E0  0008               	return
  4878  10E1                     __end_of_getAD:	
  4879                           
  4880                           	psect	text6
  4881  1D7F                     __ptext6:	
  4882 ;; *************** function _WDT_Main *****************
  4883 ;; Defined at:
  4884 ;;		line 1103 in file "../src/MCU_B1.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;		None               void
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, status,0, pclath, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;Total ram usage:        1 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    6
  4905 ;; This function calls:
  4906 ;;		_WDT_Clearing
  4907 ;; This function is called by:
  4908 ;;		_main
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           
  4913                           ;psect for function _WDT_Main
  4914  1D7F                     _WDT_Main:	
  4915                           
  4916                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  4917                           
  4918                           ;incstack = 0
  4919                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4920  1D7F  0021               	movlb	1	; select bank1
  4921  1D80  1C49               	btfss	_WDT^(0+128),0
  4922  1D81  0008               	return
  4923                           
  4924                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  4925  1D82  3001               	movlw	1
  4926  1D83  02CA               	subwf	(_WDT^(0+128)+1),f
  4927  1D84  084A               	movf	(_WDT^(0+128)+1),w
  4928  1D85  3AFF               	xorlw	255
  4929  1D86  1903               	skipnz
  4930  1D87  0008               	return
  4931                           
  4932                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  4933  1D88  3064               	movlw	100
  4934  1D89  0020               	movlb	0	; select bank0
  4935  1D8A  00A1               	movwf	??_WDT_Main
  4936  1D8B  0821               	movf	??_WDT_Main,w
  4937  1D8C  0021               	movlb	1	; select bank1
  4938  1D8D  00CA               	movwf	(_WDT^(0+128)+1)
  4939                           
  4940                           ;MCU_B1.c: 1107: WDT_Clearing();
  4941  1D8E  3180  2002         	fcall	_WDT_Clearing
  4942  1D90  0008               	return
  4943  1D91                     __end_of_WDT_Main:	
  4944                           
  4945                           	psect	text7
  4946  0002                     __ptext7:	
  4947 ;; *************** function _WDT_Clearing *****************
  4948 ;; Defined at:
  4949 ;;		line 1113 in file "../src/MCU_B1.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;		None
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;		None
  4954 ;; Return value:  Size  Location     Type
  4955 ;;		None               void
  4956 ;; Registers used:
  4957 ;;		None
  4958 ;; Tracked objects:
  4959 ;;		On entry : 0/0
  4960 ;;		On exit  : 0/0
  4961 ;;		Unchanged: 0/0
  4962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;Total ram usage:        0 bytes
  4968 ;; Hardware stack levels used:    1
  4969 ;; Hardware stack levels required when called:    5
  4970 ;; This function calls:
  4971 ;;		Nothing
  4972 ;; This function is called by:
  4973 ;;		_WDT_Main
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           
  4978                           ;psect for function _WDT_Clearing
  4979  0002                     _WDT_Clearing:	
  4980                           
  4981                           ;incstack = 0
  4982                           ; Regs used in _WDT_Clearing: []
  4983  0002  0064               	clrwdt	;# 
  4984  0003  0008               	return
  4985  0004                     __end_of_WDT_Clearing:	
  4986                           
  4987                           	psect	text8
  4988  1B47                     __ptext8:	
  4989 ;; *************** function _Temp_Main *****************
  4990 ;; Defined at:
  4991 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;		None
  4996 ;; Return value:  Size  Location     Type
  4997 ;;		None               void
  4998 ;; Registers used:
  4999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5009 ;;Total ram usage:        0 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    8
  5012 ;; This function calls:
  5013 ;;		_setTemp_Main
  5014 ;; This function is called by:
  5015 ;;		_main
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           
  5020                           ;psect for function _Temp_Main
  5021  1B47                     _Temp_Main:	
  5022                           
  5023                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5024                           
  5025                           ;incstack = 0
  5026                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5027  1B47  318D  25E1         	fcall	_setTemp_Main
  5028  1B49  0008               	return
  5029  1B4A                     __end_of_Temp_Main:	
  5030                           
  5031                           	psect	text9
  5032  0DE1                     __ptext9:	
  5033 ;; *************** function _setTemp_Main *****************
  5034 ;; Defined at:
  5035 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  AD              2    6[BANK1 ] unsigned int 
  5040 ;;  DangerValue     2    4[BANK1 ] unsigned int 
  5041 ;;  SafeValue       2    2[BANK1 ] unsigned int 
  5042 ;;  TempGO          1    1[BANK1 ] unsigned char 
  5043 ;;  error           1    0[BANK1 ] unsigned char 
  5044 ;; Return value:  Size  Location     Type
  5045 ;;		None               void
  5046 ;; Registers used:
  5047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5054 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;Total ram usage:        9 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; Hardware stack levels required when called:    7
  5060 ;; This function calls:
  5061 ;;		_getMain_All_Error_Status
  5062 ;;		_getMain_All_LightsStatus
  5063 ;;		_setBuz
  5064 ;;		_setProductData
  5065 ;; This function is called by:
  5066 ;;		_Temp_Main
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           
  5071                           ;psect for function _setTemp_Main
  5072  0DE1                     _setTemp_Main:	
  5073                           
  5074                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5075                           
  5076                           ;incstack = 0
  5077                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5078  0DE1  3000               	movlw	0
  5079  0DE2  3191  21FA  318D   	fcall	_getMain_All_Error_Status
  5080  0DE5  0020               	movlb	0	; select bank0
  5081  0DE6  00E6               	movwf	??_setTemp_Main
  5082  0DE7  0866               	movf	??_setTemp_Main,w
  5083  0DE8  0021               	movlb	1	; select bank1
  5084  0DE9  00E5               	movwf	setTemp_Main@error^(0+128)
  5085                           
  5086                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5087  0DEA  01E7               	clrf	setTemp_Main@SafeValue^(0+128)
  5088  0DEB  01E8               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5089  0DEC  01E9               	clrf	setTemp_Main@DangerValue^(0+128)
  5090  0DED  01EA               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5091                           
  5092                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5093  0DEE  319B  23D1  318D   	fcall	_getMain_All_LightsStatus
  5094  0DF1  0020               	movlb	0	; select bank0
  5095  0DF2  00E6               	movwf	??_setTemp_Main
  5096  0DF3  0866               	movf	??_setTemp_Main,w
  5097  0DF4  0021               	movlb	1	; select bank1
  5098  0DF5  00E6               	movwf	setTemp_Main@TempGO^(0+128)
  5099                           
  5100                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5101  0DF6  1C5B               	btfss	_Temp^(0+128),0
  5102  0DF7  2E8B               	goto	l1767
  5103                           
  5104                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5105  0DF8  195B               	btfsc	_Temp^(0+128),2
  5106  0DF9  2E14               	goto	l8585
  5107                           
  5108                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5109  0DFA  0866               	movf	setTemp_Main@TempGO^(0+128),w
  5110  0DFB  3A01               	xorlw	1
  5111  0DFC  1D03               	skipz
  5112  0DFD  2E00               	goto	l1773
  5113  0DFE  1CDB               	btfss	_Temp^(0+128),1
  5114  0DFF  2E02               	goto	l8577
  5115  0E00                     l1773:	
  5116  0E00  1CDB               	btfss	_Temp^(0+128),1
  5117  0E01  2E11               	goto	l8583
  5118  0E02                     l8577:	
  5119                           
  5120                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5121  0E02  3001               	movlw	1
  5122  0E03  07DC               	addwf	(_Temp^(0+128)+1),f
  5123  0E04  3000               	movlw	0
  5124  0E05  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5125                           
  5126                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5127  0E06  3000               	movlw	0
  5128  0E07  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5129  0E08  30FA               	movlw	250
  5130  0E09  1903               	skipnz
  5131  0E0A  025C               	subwf	(_Temp^(0+128)+1),w
  5132  0E0B  1C03               	skipc
  5133  0E0C  0008               	return
  5134                           
  5135                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5136  0E0D  01DC               	clrf	(_Temp^(0+128)+1)
  5137  0E0E  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5138                           
  5139                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5140  0E0F  155B               	bsf	_Temp^(0+128),2
  5141                           
  5142                           ;OverTemperature_B1.c: 83: }
  5143                           ;OverTemperature_B1.c: 84: } else {
  5144  0E10  0008               	return
  5145  0E11                     l8583:	
  5146                           
  5147                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5148  0E11  01DC               	clrf	(_Temp^(0+128)+1)
  5149  0E12  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5150                           
  5151                           ;OverTemperature_B1.c: 86: }
  5152                           ;OverTemperature_B1.c: 87: } else {
  5153  0E13  0008               	return
  5154  0E14                     l8585:	
  5155                           
  5156                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5157  0E14  3001               	movlw	1
  5158  0E15  07DC               	addwf	(_Temp^(0+128)+1),f
  5159  0E16  3000               	movlw	0
  5160  0E17  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5161                           
  5162                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5163  0E18  3000               	movlw	0
  5164  0E19  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5165  0E1A  3005               	movlw	5
  5166  0E1B  1903               	skipnz
  5167  0E1C  025C               	subwf	(_Temp^(0+128)+1),w
  5168  0E1D  1C03               	skipc
  5169  0E1E  0008               	return
  5170                           
  5171                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5172  0E1F  01DC               	clrf	(_Temp^(0+128)+1)
  5173  0E20  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5174                           
  5175                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5176  0E21  3008               	movlw	8
  5177  0E22  3EDB               	addlw	_Temp& (0+255)
  5178  0E23  0086               	movwf	6
  5179  0E24  0187               	clrf	7
  5180  0E25  0016               	moviw fsr1++
  5181  0E26  0401               	iorwf	1,w
  5182  0E27  1903               	skipnz
  5183  0E28  2E83               	goto	l1778
  5184                           
  5185                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5186  0E29  115B               	bcf	_Temp^(0+128),2
  5187                           
  5188                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5189  0E2A  0864               	movf	((_Temp+1)^(0+128)+8),w
  5190  0E2B  01EC               	clrf	(setTemp_Main@AD+1)^(0+128)
  5191  0E2C  07EC               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5192  0E2D  0863               	movf	(_Temp^(0+128)+8),w
  5193  0E2E  01EB               	clrf	setTemp_Main@AD^(0+128)
  5194  0E2F  07EB               	addwf	setTemp_Main@AD^(0+128),f
  5195                           
  5196                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5197  0E30  3090               	movlw	144
  5198  0E31  00E7               	movwf	setTemp_Main@SafeValue^(0+128)
  5199  0E32  3001               	movlw	1
  5200  0E33  00E8               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5201                           
  5202                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5203  0E34  3059               	movlw	89
  5204  0E35  00E9               	movwf	setTemp_Main@DangerValue^(0+128)
  5205  0E36  3001               	movlw	1
  5206  0E37  00EA               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5207                           
  5208                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5209  0E38  1CDB               	btfss	_Temp^(0+128),1
  5210  0E39  2E5A               	goto	l8615
  5211                           
  5212                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5213  0E3A  0868               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5214  0E3B  026C               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5215  0E3C  1D03               	skipz
  5216  0E3D  2E40               	goto	u9175
  5217  0E3E  0867               	movf	setTemp_Main@SafeValue^(0+128),w
  5218  0E3F  026B               	subwf	setTemp_Main@AD^(0+128),w
  5219  0E40                     u9175:	
  5220  0E40  1C03               	skipc
  5221  0E41  2E58               	goto	l8613
  5222                           
  5223                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5224  0E42  3001               	movlw	1
  5225  0E43  0020               	movlb	0	; select bank0
  5226  0E44  00E6               	movwf	??_setTemp_Main
  5227  0E45  0866               	movf	??_setTemp_Main,w
  5228  0E46  0021               	movlb	1	; select bank1
  5229  0E47  07DE               	addwf	(_Temp^(0+128)+3),f
  5230                           
  5231                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5232  0E48  3003               	movlw	3
  5233  0E49  025E               	subwf	(_Temp^(0+128)+3),w
  5234  0E4A  1C03               	skipc
  5235  0E4B  2E70               	goto	l8627
  5236                           
  5237                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5238  0E4C  01DE               	clrf	(_Temp^(0+128)+3)
  5239                           
  5240                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5241  0E4D  10DB               	bcf	_Temp^(0+128),1
  5242                           
  5243                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5244  0E4E  3064               	movlw	100
  5245  0E4F  0020               	movlb	0	; select bank0
  5246  0E50  00AA               	movwf	setBuz@time
  5247  0E51  3000               	movlw	0
  5248  0E52  00AB               	movwf	setBuz@time+1
  5249  0E53  3002               	movlw	2
  5250  0E54  3195  25BC  318D   	fcall	_setBuz
  5251                           
  5252                           ;OverTemperature_B1.c: 126: }
  5253                           ;OverTemperature_B1.c: 127: } else {
  5254  0E57  2E70               	goto	l8627
  5255  0E58                     l8613:	
  5256                           
  5257                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5258  0E58  0021               	movlb	1	; select bank1
  5259  0E59  2E6F               	goto	l8625
  5260  0E5A                     l8615:	
  5261                           ;OverTemperature_B1.c: 129: }
  5262                           ;OverTemperature_B1.c: 130: } else {
  5263                           
  5264                           
  5265                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5266  0E5A  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5267  0E5B  026A               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5268  0E5C  1D03               	skipz
  5269  0E5D  2E60               	goto	u9195
  5270  0E5E  086B               	movf	setTemp_Main@AD^(0+128),w
  5271  0E5F  0269               	subwf	setTemp_Main@DangerValue^(0+128),w
  5272  0E60                     u9195:	
  5273  0E60  1C03               	skipc
  5274  0E61  2E6F               	goto	l8625
  5275                           
  5276                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5277  0E62  3001               	movlw	1
  5278  0E63  0020               	movlb	0	; select bank0
  5279  0E64  00E6               	movwf	??_setTemp_Main
  5280  0E65  0866               	movf	??_setTemp_Main,w
  5281  0E66  0021               	movlb	1	; select bank1
  5282  0E67  07DE               	addwf	(_Temp^(0+128)+3),f
  5283                           
  5284                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5285  0E68  3003               	movlw	3
  5286  0E69  025E               	subwf	(_Temp^(0+128)+3),w
  5287  0E6A  1C03               	skipc
  5288  0E6B  2E70               	goto	l8627
  5289                           
  5290                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5291  0E6C  01DE               	clrf	(_Temp^(0+128)+3)
  5292                           
  5293                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5294  0E6D  14DB               	bsf	_Temp^(0+128),1
  5295                           
  5296                           ;OverTemperature_B1.c: 136: }
  5297                           ;OverTemperature_B1.c: 137: } else {
  5298  0E6E  2E70               	goto	l8627
  5299  0E6F                     l8625:	
  5300                           
  5301                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5302  0E6F  01DE               	clrf	(_Temp^(0+128)+3)
  5303  0E70                     l8627:	
  5304                           
  5305                           ;OverTemperature_B1.c: 139: }
  5306                           ;OverTemperature_B1.c: 140: }
  5307                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5308  0E70  0021               	movlb	1	; select bank1
  5309  0E71  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5310  0E72  0020               	movlb	0	; select bank0
  5311  0E73  00E6               	movwf	??_setTemp_Main
  5312  0E74  0866               	movf	??_setTemp_Main,w
  5313  0E75  00E3               	movwf	setProductData@value
  5314  0E76  3018               	movlw	24
  5315  0E77  319C  242A  318D   	fcall	_setProductData
  5316                           
  5317                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5318  0E7A  0021               	movlb	1	; select bank1
  5319  0E7B  086B               	movf	setTemp_Main@AD^(0+128),w
  5320  0E7C  0020               	movlb	0	; select bank0
  5321  0E7D  00E6               	movwf	??_setTemp_Main
  5322  0E7E  0866               	movf	??_setTemp_Main,w
  5323  0E7F  00E3               	movwf	setProductData@value
  5324  0E80  3019               	movlw	25
  5325  0E81  319C  242A         	fcall	_setProductData
  5326  0E83                     l1778:	
  5327                           
  5328                           ;OverTemperature_B1.c: 158: }
  5329                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5330  0E83  0021               	movlb	1	; select bank1
  5331  0E84  01DF               	clrf	(_Temp^(0+128)+4)
  5332  0E85  01E0               	clrf	((_Temp+1)^(0+128)+4)
  5333                           
  5334                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5335  0E86  01E1               	clrf	(_Temp^(0+128)+6)
  5336  0E87  01E2               	clrf	((_Temp+1)^(0+128)+6)
  5337                           
  5338                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5339  0E88  01E3               	clrf	(_Temp^(0+128)+8)
  5340  0E89  01E4               	clrf	((_Temp+1)^(0+128)+8)
  5341                           
  5342                           ;OverTemperature_B1.c: 162: }
  5343                           ;OverTemperature_B1.c: 163: }
  5344                           ;OverTemperature_B1.c: 166: } else {
  5345  0E8A  0008               	return
  5346  0E8B                     l1767:	
  5347                           
  5348                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5349  0E8B  0022               	movlb	2	; select bank2
  5350  0E8C  1C20               	btfss	_myMain^(0+256),0
  5351  0E8D  0008               	return
  5352                           
  5353                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5354  0E8E  0021               	movlb	1	; select bank1
  5355  0E8F  145B               	bsf	_Temp^(0+128),0
  5356  0E90  0008               	return
  5357  0E91                     __end_of_setTemp_Main:	
  5358                           
  5359                           	psect	text10
  5360  1B44                     __ptext10:	
  5361 ;; *************** function _Temp_Initialization *****************
  5362 ;; Defined at:
  5363 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;		None
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;		None
  5368 ;; Return value:  Size  Location     Type
  5369 ;;		None               void
  5370 ;; Registers used:
  5371 ;;		status,2, status,0, pclath, cstack
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;Total ram usage:        0 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    6
  5384 ;; This function calls:
  5385 ;;		_setTemp_Initialization
  5386 ;; This function is called by:
  5387 ;;		_main
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           
  5392                           ;psect for function _Temp_Initialization
  5393  1B44                     _Temp_Initialization:	
  5394                           
  5395                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5396                           
  5397                           ;incstack = 0
  5398                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5399  1B44  319B  2337         	fcall	_setTemp_Initialization
  5400  1B46  0008               	return
  5401  1B47                     __end_of_Temp_Initialization:	
  5402                           
  5403                           	psect	text11
  5404  1B37                     __ptext11:	
  5405 ;; *************** function _setTemp_Initialization *****************
  5406 ;; Defined at:
  5407 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;		None
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;		None               void
  5414 ;; Registers used:
  5415 ;;		None
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;Total ram usage:        0 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    5
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_Temp_Initialization
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           
  5436                           ;psect for function _setTemp_Initialization
  5437  1B37                     _setTemp_Initialization:	
  5438                           
  5439                           ;incstack = 0
  5440                           ; Regs used in _setTemp_Initialization: []
  5441  1B37  0008               	return
  5442  1B38                     __end_of_setTemp_Initialization:	
  5443                           
  5444                           	psect	text12
  5445  1B97                     __ptext12:	
  5446 ;; *************** function _Switch_Main *****************
  5447 ;; Defined at:
  5448 ;;		line 76 in file "../src/Switch_B1.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;		None
  5451 ;; Auto vars:     Size  Location     Type
  5452 ;;		None
  5453 ;; Return value:  Size  Location     Type
  5454 ;;		None               void
  5455 ;; Registers used:
  5456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;Total ram usage:        0 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:    9
  5469 ;; This function calls:
  5470 ;;		_TouchPower
  5471 ;;		_setSw_Main
  5472 ;; This function is called by:
  5473 ;;		_main
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _Switch_Main
  5479  1B97                     _Switch_Main:	
  5480                           
  5481                           ;Switch_B1.c: 79: setSw_Main(1);
  5482                           
  5483                           ;incstack = 0
  5484                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5485  1B97  3001               	movlw	1
  5486  1B98  3181  21FA  319B   	fcall	_setSw_Main
  5487                           
  5488                           ;Switch_B1.c: 91: TouchPower();
  5489  1B9B  319E  262E         	fcall	_TouchPower
  5490  1B9D  0008               	return
  5491  1B9E                     __end_of_Switch_Main:	
  5492                           
  5493                           	psect	text13
  5494  01FA                     __ptext13:	
  5495 ;; *************** function _setSw_Main *****************
  5496 ;; Defined at:
  5497 ;;		line 117 in file "../src/Switch_B1.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;  sw              1    wreg     unsigned char 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  sw              1   18[BANK0 ] unsigned char 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;		None               void
  5504 ;; Registers used:
  5505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5512 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;Total ram usage:        3 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    8
  5518 ;; This function calls:
  5519 ;;		_SwPointSelect
  5520 ;;		_getMain_All_Error_Status
  5521 ;;		_getSw_KeyStatus
  5522 ;;		_setBuz
  5523 ;;		_setDimmerLights_DimmingOn
  5524 ;;		_setDimmerLights_SwOff
  5525 ;;		_setDimmerLights_SwOn
  5526 ;;		_setRF_Learn
  5527 ;; This function is called by:
  5528 ;;		_Switch_Main
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _setSw_Main
  5534  01FA                     _setSw_Main:	
  5535                           
  5536                           ;incstack = 0
  5537                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5538                           ;setSw_Main@sw stored from wreg
  5539  01FA  0020               	movlb	0	; select bank0
  5540  01FB  00B2               	movwf	setSw_Main@sw
  5541                           
  5542                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5543  01FC  0832               	movf	setSw_Main@sw,w
  5544  01FD  319C  248A  3181   	fcall	_SwPointSelect
  5545                           
  5546                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5547  0200  0021               	movlb	1	; select bank1
  5548  0201  0855               	movf	_Sw^(0+128),w
  5549  0202  0086               	movwf	6
  5550  0203  3001               	movlw	1	; select bank2/3
  5551  0204  0087               	movwf	7
  5552  0205  1C01               	btfss	1,0
  5553  0206  2B76               	goto	l2477
  5554                           
  5555                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5556  0207  3000               	movlw	0
  5557  0208  3191  21FA  3181   	fcall	_getMain_All_Error_Status
  5558  020B  3800               	iorlw	0
  5559  020C  1D03               	skipz
  5560  020D  2A2C               	goto	l8721
  5561                           
  5562                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5563  020E  0021               	movlb	1	; select bank1
  5564  020F  0A55               	incf	_Sw^(0+128),w
  5565  0210  0086               	movwf	6
  5566  0211  3001               	movlw	1	; select bank2/3
  5567  0212  0087               	movwf	7
  5568  0213  1081               	bcf	1,1
  5569                           
  5570                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5571  0214  0020               	movlb	0	; select bank0
  5572  0215  0832               	movf	setSw_Main@sw,w
  5573  0216  319D  2526  3181   	fcall	_getSw_KeyStatus
  5574  0219  3A01               	xorlw	1
  5575  021A  3000               	movlw	0
  5576  021B  1903               	skipnz
  5577  021C  3001               	movlw	1
  5578  021D  0020               	movlb	0	; select bank0
  5579  021E  00B0               	movwf	??_setSw_Main
  5580  021F  0021               	movlb	1	; select bank1
  5581  0220  0855               	movf	_Sw^(0+128),w
  5582  0221  0086               	movwf	6
  5583  0222  3001               	movlw	1	; select bank2/3
  5584  0223  0087               	movwf	7
  5585  0224  0020               	movlb	0	; select bank0
  5586  0225  0DB0               	rlf	??_setSw_Main,f
  5587  0226  0801               	movf	1,w
  5588  0227  0630               	xorwf	??_setSw_Main,w
  5589  0228  39FD               	andlw	-3
  5590  0229  0630               	xorwf	??_setSw_Main,w
  5591  022A  0081               	movwf	1
  5592                           
  5593                           ;Switch_B1.c: 124: } else {
  5594  022B  2A42               	goto	l2479
  5595  022C                     l8721:	
  5596                           
  5597                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5598  022C  0021               	movlb	1	; select bank1
  5599  022D  0A55               	incf	_Sw^(0+128),w
  5600  022E  0086               	movwf	6
  5601  022F  3001               	movlw	1	; select bank2/3
  5602  0230  0087               	movwf	7
  5603  0231  1881               	btfsc	1,1
  5604  0232  2A42               	goto	l2479
  5605                           
  5606                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5607  0233  0A55               	incf	_Sw^(0+128),w
  5608  0234  0086               	movwf	6
  5609  0235  3001               	movlw	1	; select bank2/3
  5610  0236  0087               	movwf	7
  5611  0237  1481               	bsf	1,1
  5612                           
  5613                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5614  0238  0855               	movf	_Sw^(0+128),w
  5615  0239  0086               	movwf	6
  5616  023A  3001               	movlw	1	; select bank2/3
  5617  023B  0087               	movwf	7
  5618  023C  1081               	bcf	1,1
  5619                           
  5620                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5621  023D  0855               	movf	_Sw^(0+128),w
  5622  023E  0086               	movwf	6
  5623  023F  3001               	movlw	1	; select bank2/3
  5624  0240  0087               	movwf	7
  5625  0241  1501               	bsf	1,2
  5626  0242                     l2479:	
  5627                           
  5628                           ;Switch_B1.c: 130: }
  5629                           ;Switch_B1.c: 131: }
  5630                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5631  0242  0021               	movlb	1	; select bank1
  5632  0243  0855               	movf	_Sw^(0+128),w
  5633  0244  0086               	movwf	6
  5634  0245  3001               	movlw	1	; select bank2/3
  5635  0246  0087               	movwf	7
  5636  0247  1C81               	btfss	1,1
  5637  0248  2B1E               	goto	l8771
  5638                           
  5639                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5640  0249  0855               	movf	_Sw^(0+128),w
  5641  024A  0086               	movwf	6
  5642  024B  3001               	movlw	1	; select bank2/3
  5643  024C  0087               	movwf	7
  5644  024D  1901               	btfsc	1,2
  5645  024E  2A75               	goto	l8737
  5646                           
  5647                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5648  024F  3001               	movlw	1
  5649  0250  0020               	movlb	0	; select bank0
  5650  0251  00B0               	movwf	??_setSw_Main
  5651  0252  0021               	movlb	1	; select bank1
  5652  0253  0855               	movf	_Sw^(0+128),w
  5653  0254  3E02               	addlw	2
  5654  0255  0086               	movwf	6
  5655  0256  3001               	movlw	1	; select bank2/3
  5656  0257  0087               	movwf	7
  5657  0258  0020               	movlb	0	; select bank0
  5658  0259  0830               	movf	??_setSw_Main,w
  5659  025A  0781               	addwf	1,f
  5660                           
  5661                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5662  025B  0021               	movlb	1	; select bank1
  5663  025C  0855               	movf	_Sw^(0+128),w
  5664  025D  3E02               	addlw	2
  5665  025E  0086               	movwf	6
  5666  025F  3001               	movlw	1	; select bank2/3
  5667  0260  0087               	movwf	7
  5668  0261  3003               	movlw	3
  5669  0262  0201               	subwf	1,w
  5670  0263  1C03               	skipc
  5671  0264  0008               	return
  5672                           
  5673                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5674  0265  0855               	movf	_Sw^(0+128),w
  5675  0266  3E02               	addlw	2
  5676  0267  0086               	movwf	6
  5677  0268  3001               	movlw	1	; select bank2/3
  5678  0269  0087               	movwf	7
  5679  026A  0181               	clrf	1
  5680                           
  5681                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5682  026B  0855               	movf	_Sw^(0+128),w
  5683  026C  0086               	movwf	6
  5684  026D  3001               	movlw	1	; select bank2/3
  5685  026E  0087               	movwf	7
  5686  026F  1501               	bsf	1,2
  5687                           
  5688                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5689  0270  0020               	movlb	0	; select bank0
  5690  0271  0832               	movf	setSw_Main@sw,w
  5691  0272  3192  222D         	fcall	_setDimmerLights_SwOn
  5692                           
  5693                           ;Switch_B1.c: 146: }
  5694                           ;Switch_B1.c: 147: } else {
  5695  0274  0008               	return
  5696  0275                     l8737:	
  5697                           
  5698                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5699  0275  0021               	movlb	1	; select bank1
  5700  0276  0855               	movf	_Sw^(0+128),w
  5701  0277  0086               	movwf	6
  5702  0278  3001               	movlw	1	; select bank2/3
  5703  0279  0087               	movwf	7
  5704  027A  1981               	btfsc	1,3
  5705  027B  2AAA               	goto	l8747
  5706                           
  5707                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5708  027C  0855               	movf	_Sw^(0+128),w
  5709  027D  3E03               	addlw	3
  5710  027E  0086               	movwf	6
  5711  027F  3001               	movlw	1	; select bank2/3
  5712  0280  0087               	movwf	7
  5713  0281  3001               	movlw	1
  5714  0282  0781               	addwf	1,f
  5715  0283  3141               	addfsr 1,1
  5716  0284  1803               	skipnc
  5717  0285  0A81               	incf	1,f
  5718                           
  5719                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5720  0286  0855               	movf	_Sw^(0+128),w
  5721  0287  3E03               	addlw	3
  5722  0288  0086               	movwf	6
  5723  0289  3001               	movlw	1	; select bank2/3
  5724  028A  0087               	movwf	7
  5725  028B  3F40               	moviw [0]fsr1
  5726  028C  0020               	movlb	0	; select bank0
  5727  028D  00B0               	movwf	??_setSw_Main
  5728  028E  3F41               	moviw [1]fsr1
  5729  028F  00B1               	movwf	??_setSw_Main+1
  5730  0290  3000               	movlw	0
  5731  0291  0231               	subwf	??_setSw_Main+1,w
  5732  0292  304B               	movlw	75
  5733  0293  1903               	skipnz
  5734  0294  0230               	subwf	??_setSw_Main,w
  5735  0295  1C03               	skipc
  5736  0296  0008               	return
  5737                           
  5738                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5739  0297  0021               	movlb	1	; select bank1
  5740  0298  0855               	movf	_Sw^(0+128),w
  5741  0299  3E03               	addlw	3
  5742  029A  0086               	movwf	6
  5743  029B  3001               	movlw	1	; select bank2/3
  5744  029C  0087               	movwf	7
  5745  029D  3000               	movlw	0
  5746  029E  3FC0               	movwi [0]fsr1
  5747  029F  3FC1               	movwi [1]fsr1
  5748                           
  5749                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5750  02A0  0855               	movf	_Sw^(0+128),w
  5751  02A1  0086               	movwf	6
  5752  02A2  3001               	movlw	1	; select bank2/3
  5753  02A3  0087               	movwf	7
  5754  02A4  1581               	bsf	1,3
  5755                           
  5756                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5757  02A5  0020               	movlb	0	; select bank0
  5758  02A6  0832               	movf	setSw_Main@sw,w
  5759  02A7  3191  214F         	fcall	_setDimmerLights_DimmingOn
  5760                           
  5761                           ;Switch_B1.c: 161: }
  5762                           ;Switch_B1.c: 162: } else {
  5763  02A9  0008               	return
  5764  02AA                     l8747:	
  5765                           
  5766                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5767  02AA  0021               	movlb	1	; select bank1
  5768  02AB  0855               	movf	_Sw^(0+128),w
  5769  02AC  0086               	movwf	6
  5770  02AD  3001               	movlw	1	; select bank2/3
  5771  02AE  0087               	movwf	7
  5772  02AF  1A01               	btfsc	1,4
  5773  02B0  2AEA               	goto	l8761
  5774                           
  5775                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5776  02B1  0855               	movf	_Sw^(0+128),w
  5777  02B2  3E05               	addlw	5
  5778  02B3  0086               	movwf	6
  5779  02B4  3001               	movlw	1	; select bank2/3
  5780  02B5  0087               	movwf	7
  5781  02B6  3001               	movlw	1
  5782  02B7  0781               	addwf	1,f
  5783  02B8  3141               	addfsr 1,1
  5784  02B9  1803               	skipnc
  5785  02BA  0A81               	incf	1,f
  5786                           
  5787                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5788  02BB  0855               	movf	_Sw^(0+128),w
  5789  02BC  3E05               	addlw	5
  5790  02BD  0086               	movwf	6
  5791  02BE  3001               	movlw	1	; select bank2/3
  5792  02BF  0087               	movwf	7
  5793  02C0  3F40               	moviw [0]fsr1
  5794  02C1  0020               	movlb	0	; select bank0
  5795  02C2  00B0               	movwf	??_setSw_Main
  5796  02C3  3F41               	moviw [1]fsr1
  5797  02C4  00B1               	movwf	??_setSw_Main+1
  5798  02C5  3000               	movlw	0
  5799  02C6  0231               	subwf	??_setSw_Main+1,w
  5800  02C7  304B               	movlw	75
  5801  02C8  1903               	skipnz
  5802  02C9  0230               	subwf	??_setSw_Main,w
  5803  02CA  1C03               	skipc
  5804  02CB  0008               	return
  5805                           
  5806                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5807  02CC  0021               	movlb	1	; select bank1
  5808  02CD  0855               	movf	_Sw^(0+128),w
  5809  02CE  3E05               	addlw	5
  5810  02CF  0086               	movwf	6
  5811  02D0  3001               	movlw	1	; select bank2/3
  5812  02D1  0087               	movwf	7
  5813  02D2  3000               	movlw	0
  5814  02D3  3FC0               	movwi [0]fsr1
  5815  02D4  3FC1               	movwi [1]fsr1
  5816                           
  5817                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5818  02D5  0855               	movf	_Sw^(0+128),w
  5819  02D6  0086               	movwf	6
  5820  02D7  3001               	movlw	1	; select bank2/3
  5821  02D8  0087               	movwf	7
  5822  02D9  1601               	bsf	1,4
  5823                           
  5824                           ;Switch_B1.c: 171: setRF_Learn(1);
  5825  02DA  3001               	movlw	1
  5826  02DB  319D  25F0  3181   	fcall	_setRF_Learn
  5827                           
  5828                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5829  02DE  0022               	movlb	2	; select bank2
  5830  02DF  1EA0               	btfss	_myMain^(0+256),5
  5831  02E0  0008               	return
  5832                           
  5833                           ;Switch_B1.c: 173: setBuz(2, 100);
  5834  02E1  3064               	movlw	100
  5835  02E2  0020               	movlb	0	; select bank0
  5836  02E3  00AA               	movwf	setBuz@time
  5837  02E4  3000               	movlw	0
  5838  02E5  00AB               	movwf	setBuz@time+1
  5839  02E6  3002               	movlw	2
  5840  02E7  3195  25BC         	fcall	_setBuz
  5841                           
  5842                           ;Switch_B1.c: 174: }
  5843                           ;Switch_B1.c: 178: }
  5844                           ;Switch_B1.c: 179: } else {
  5845  02E9  0008               	return
  5846  02EA                     l8761:	
  5847                           
  5848                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5849  02EA  0021               	movlb	1	; select bank1
  5850  02EB  0855               	movf	_Sw^(0+128),w
  5851  02EC  0086               	movwf	6
  5852  02ED  3001               	movlw	1	; select bank2/3
  5853  02EE  0087               	movwf	7
  5854  02EF  1A81               	btfsc	1,5
  5855  02F0  0008               	return
  5856                           
  5857                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5858  02F1  0855               	movf	_Sw^(0+128),w
  5859  02F2  3E07               	addlw	7
  5860  02F3  0086               	movwf	6
  5861  02F4  3001               	movlw	1	; select bank2/3
  5862  02F5  0087               	movwf	7
  5863  02F6  3001               	movlw	1
  5864  02F7  0781               	addwf	1,f
  5865  02F8  3141               	addfsr 1,1
  5866  02F9  1803               	skipnc
  5867  02FA  0A81               	incf	1,f
  5868                           
  5869                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5870  02FB  0855               	movf	_Sw^(0+128),w
  5871  02FC  3E07               	addlw	7
  5872  02FD  0086               	movwf	6
  5873  02FE  3001               	movlw	1	; select bank2/3
  5874  02FF  0087               	movwf	7
  5875  0300  3F40               	moviw [0]fsr1
  5876  0301  0020               	movlb	0	; select bank0
  5877  0302  00B0               	movwf	??_setSw_Main
  5878  0303  3F41               	moviw [1]fsr1
  5879  0304  00B1               	movwf	??_setSw_Main+1
  5880  0305  3000               	movlw	0
  5881  0306  0231               	subwf	??_setSw_Main+1,w
  5882  0307  3096               	movlw	150
  5883  0308  1903               	skipnz
  5884  0309  0230               	subwf	??_setSw_Main,w
  5885  030A  1C03               	skipc
  5886  030B  0008               	return
  5887                           
  5888                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5889  030C  0021               	movlb	1	; select bank1
  5890  030D  0855               	movf	_Sw^(0+128),w
  5891  030E  3E07               	addlw	7
  5892  030F  0086               	movwf	6
  5893  0310  3001               	movlw	1	; select bank2/3
  5894  0311  0087               	movwf	7
  5895  0312  3000               	movlw	0
  5896  0313  3FC0               	movwi [0]fsr1
  5897  0314  3FC1               	movwi [1]fsr1
  5898                           
  5899                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5900  0315  0855               	movf	_Sw^(0+128),w
  5901  0316  0086               	movwf	6
  5902  0317  3001               	movlw	1	; select bank2/3
  5903  0318  0087               	movwf	7
  5904  0319  1681               	bsf	1,5
  5905                           
  5906                           ;Switch_B1.c: 187: setRF_Learn(0);
  5907  031A  3000               	movlw	0
  5908  031B  319D  25F0         	fcall	_setRF_Learn
  5909                           
  5910                           ;Switch_B1.c: 190: }
  5911                           ;Switch_B1.c: 191: }
  5912                           ;Switch_B1.c: 192: }
  5913                           ;Switch_B1.c: 194: }
  5914                           ;Switch_B1.c: 195: }
  5915                           ;Switch_B1.c: 196: } else {
  5916  031D  0008               	return
  5917  031E                     l8771:	
  5918                           
  5919                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5920  031E  0021               	movlb	1	; select bank1
  5921  031F  0855               	movf	_Sw^(0+128),w
  5922  0320  0086               	movwf	6
  5923  0321  3001               	movlw	1	; select bank2/3
  5924  0322  0087               	movwf	7
  5925  0323  1D01               	btfss	1,2
  5926  0324  0008               	return
  5927                           
  5928                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5929  0325  3001               	movlw	1
  5930  0326  0020               	movlb	0	; select bank0
  5931  0327  00B0               	movwf	??_setSw_Main
  5932  0328  0021               	movlb	1	; select bank1
  5933  0329  0855               	movf	_Sw^(0+128),w
  5934  032A  3E02               	addlw	2
  5935  032B  0086               	movwf	6
  5936  032C  3001               	movlw	1	; select bank2/3
  5937  032D  0087               	movwf	7
  5938  032E  0020               	movlb	0	; select bank0
  5939  032F  0830               	movf	??_setSw_Main,w
  5940  0330  0781               	addwf	1,f
  5941                           
  5942                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5943  0331  0021               	movlb	1	; select bank1
  5944  0332  0855               	movf	_Sw^(0+128),w
  5945  0333  3E02               	addlw	2
  5946  0334  0086               	movwf	6
  5947  0335  3001               	movlw	1	; select bank2/3
  5948  0336  0087               	movwf	7
  5949  0337  3003               	movlw	3
  5950  0338  0201               	subwf	1,w
  5951  0339  1C03               	skipc
  5952  033A  0008               	return
  5953                           
  5954                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5955  033B  0855               	movf	_Sw^(0+128),w
  5956  033C  3E02               	addlw	2
  5957  033D  0086               	movwf	6
  5958  033E  3001               	movlw	1	; select bank2/3
  5959  033F  0087               	movwf	7
  5960  0340  0181               	clrf	1
  5961                           
  5962                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5963  0341  0855               	movf	_Sw^(0+128),w
  5964  0342  0086               	movwf	6
  5965  0343  3001               	movlw	1	; select bank2/3
  5966  0344  0087               	movwf	7
  5967  0345  1101               	bcf	1,2
  5968                           
  5969                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5970  0346  0855               	movf	_Sw^(0+128),w
  5971  0347  3E03               	addlw	3
  5972  0348  0086               	movwf	6
  5973  0349  3001               	movlw	1	; select bank2/3
  5974  034A  0087               	movwf	7
  5975  034B  3000               	movlw	0
  5976  034C  3FC0               	movwi [0]fsr1
  5977  034D  3FC1               	movwi [1]fsr1
  5978                           
  5979                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5980  034E  0855               	movf	_Sw^(0+128),w
  5981  034F  0086               	movwf	6
  5982  0350  3001               	movlw	1	; select bank2/3
  5983  0351  0087               	movwf	7
  5984  0352  1181               	bcf	1,3
  5985                           
  5986                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  5987  0353  0855               	movf	_Sw^(0+128),w
  5988  0354  0086               	movwf	6
  5989  0355  3001               	movlw	1	; select bank2/3
  5990  0356  0087               	movwf	7
  5991  0357  1201               	bcf	1,4
  5992                           
  5993                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  5994  0358  0855               	movf	_Sw^(0+128),w
  5995  0359  0086               	movwf	6
  5996  035A  3001               	movlw	1	; select bank2/3
  5997  035B  0087               	movwf	7
  5998  035C  1281               	bcf	1,5
  5999                           
  6000                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6001  035D  0855               	movf	_Sw^(0+128),w
  6002  035E  3E05               	addlw	5
  6003  035F  0086               	movwf	6
  6004  0360  3001               	movlw	1	; select bank2/3
  6005  0361  0087               	movwf	7
  6006  0362  3000               	movlw	0
  6007  0363  3FC0               	movwi [0]fsr1
  6008  0364  3FC1               	movwi [1]fsr1
  6009                           
  6010                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6011  0365  0855               	movf	_Sw^(0+128),w
  6012  0366  3E07               	addlw	7
  6013  0367  0086               	movwf	6
  6014  0368  3001               	movlw	1	; select bank2/3
  6015  0369  0087               	movwf	7
  6016  036A  3000               	movlw	0
  6017  036B  3FC0               	movwi [0]fsr1
  6018  036C  3FC1               	movwi [1]fsr1
  6019                           
  6020                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6021  036D  0020               	movlb	0	; select bank0
  6022  036E  0832               	movf	setSw_Main@sw,w
  6023  036F  3193  2305  3181   	fcall	_setDimmerLights_SwOff
  6024                           
  6025                           ;Switch_B1.c: 219: setRF_Learn(0);
  6026  0372  3000               	movlw	0
  6027  0373  319D  25F0         	fcall	_setRF_Learn
  6028                           
  6029                           ;Switch_B1.c: 221: }
  6030                           ;Switch_B1.c: 222: }
  6031                           ;Switch_B1.c: 223: }
  6032                           ;Switch_B1.c: 224: } else {
  6033  0375  0008               	return
  6034  0376                     l2477:	
  6035                           
  6036                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6037  0376  0022               	movlb	2	; select bank2
  6038  0377  1C20               	btfss	_myMain^(0+256),0
  6039  0378  0008               	return
  6040                           
  6041                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6042  0379  0021               	movlb	1	; select bank1
  6043  037A  0855               	movf	_Sw^(0+128),w
  6044  037B  0086               	movwf	6
  6045  037C  3001               	movlw	1	; select bank2/3
  6046  037D  0087               	movwf	7
  6047  037E  1401               	bsf	1,0
  6048  037F  0008               	return
  6049  0380                     __end_of_setSw_Main:	
  6050                           
  6051                           	psect	text14
  6052  1DF0                     __ptext14:	
  6053 ;; *************** function _setRF_Learn *****************
  6054 ;; Defined at:
  6055 ;;		line 33 in file "../src/RF_Control_B1.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  command         1    wreg     unsigned char 
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  command         1    2[BANK0 ] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;		None               void
  6062 ;; Registers used:
  6063 ;;		wreg, status,2, status,0
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;Total ram usage:        2 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    5
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_setSw_Main
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function _setRF_Learn
  6085  1DF0                     _setRF_Learn:	
  6086                           
  6087                           ;incstack = 0
  6088                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6089                           ;setRF_Learn@command stored from wreg
  6090  1DF0  0020               	movlb	0	; select bank0
  6091  1DF1  00A2               	movwf	setRF_Learn@command
  6092                           
  6093                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6094  1DF2  0822               	movf	setRF_Learn@command,w
  6095  1DF3  3A01               	xorlw	1
  6096  1DF4  3000               	movlw	0
  6097  1DF5  1903               	skipnz
  6098  1DF6  3001               	movlw	1
  6099  1DF7  00A1               	movwf	??_setRF_Learn
  6100  1DF8  0EA1               	swapf	??_setRF_Learn,f
  6101  1DF9  0DA1               	rlf	??_setRF_Learn,f
  6102  1DFA  0DA1               	rlf	??_setRF_Learn,f
  6103  1DFB  0021               	movlb	1	; select bank1
  6104  1DFC  0820               	movf	_RF1^(0+128),w
  6105  1DFD  0020               	movlb	0	; select bank0
  6106  1DFE  0621               	xorwf	??_setRF_Learn,w
  6107  1DFF  39BF               	andlw	-65
  6108  1E00  0621               	xorwf	??_setRF_Learn,w
  6109  1E01  0021               	movlb	1	; select bank1
  6110  1E02  00A0               	movwf	_RF1^(0+128)
  6111  1E03  0008               	return
  6112  1E04                     __end_of_setRF_Learn:	
  6113                           
  6114                           	psect	text15
  6115  114F                     __ptext15:	
  6116 ;; *************** function _setDimmerLights_DimmingOn *****************
  6117 ;; Defined at:
  6118 ;;		line 715 in file "../src/Dimmer_B1.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;  sw              1    wreg     unsigned char 
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  sw              1    3[BANK0 ] unsigned char 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;		None               void
  6125 ;; Registers used:
  6126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;Total ram usage:        1 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    6
  6139 ;; This function calls:
  6140 ;;		_DimmerLights_SelectPointer
  6141 ;; This function is called by:
  6142 ;;		_setSw_Main
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           
  6147                           ;psect for function _setDimmerLights_DimmingOn
  6148  114F                     _setDimmerLights_DimmingOn:	
  6149                           
  6150                           ;incstack = 0
  6151                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6152                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6153  114F  0020               	movlb	0	; select bank0
  6154  1150  00A3               	movwf	setDimmerLights_DimmingOn@sw
  6155                           
  6156                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6157  1151  0823               	movf	setDimmerLights_DimmingOn@sw,w
  6158  1152  319C  241E  3191   	fcall	_DimmerLights_SelectPointer
  6159                           
  6160                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6161  1155  0021               	movlb	1	; select bank1
  6162  1156  084F               	movf	_DimmerLights^(0+128),w
  6163  1157  0086               	movwf	6
  6164  1158  3001               	movlw	1	; select bank2/3
  6165  1159  0087               	movwf	7
  6166  115A  1881               	btfsc	1,1
  6167  115B  0008               	return
  6168                           
  6169                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6170  115C  084F               	movf	_DimmerLights^(0+128),w
  6171  115D  0086               	movwf	6
  6172  115E  3001               	movlw	1	; select bank2/3
  6173  115F  0087               	movwf	7
  6174  1160  1C01               	btfss	1,0
  6175  1161  0008               	return
  6176                           
  6177                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6178  1162  0A4F               	incf	_DimmerLights^(0+128),w
  6179  1163  0086               	movwf	6
  6180  1164  3001               	movlw	1	; select bank2/3
  6181  1165  0087               	movwf	7
  6182  1166  1401               	bsf	1,0
  6183                           
  6184                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6185  1167  084F               	movf	_DimmerLights^(0+128),w
  6186  1168  0086               	movwf	6
  6187  1169  3001               	movlw	1	; select bank2/3
  6188  116A  0087               	movwf	7
  6189  116B  1581               	bsf	1,3
  6190                           
  6191                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6192  116C  084F               	movf	_DimmerLights^(0+128),w
  6193  116D  0086               	movwf	6
  6194  116E  3001               	movlw	1	; select bank2/3
  6195  116F  0087               	movwf	7
  6196  1170  1601               	bsf	1,4
  6197                           
  6198                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6199  1171  084F               	movf	_DimmerLights^(0+128),w
  6200  1172  0086               	movwf	6
  6201  1173  3001               	movlw	1	; select bank2/3
  6202  1174  0087               	movwf	7
  6203  1175  1681               	bsf	1,5
  6204  1176  0008               	return
  6205  1177                     __end_of_setDimmerLights_DimmingOn:	
  6206                           
  6207                           	psect	text16
  6208  1D26                     __ptext16:	
  6209 ;; *************** function _getSw_KeyStatus *****************
  6210 ;; Defined at:
  6211 ;;		line 237 in file "../src/Switch_B1.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;  sw              1    wreg     unsigned char 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  sw              1    0[COMMON] unsigned char 
  6216 ;;  status          1    2[BANK0 ] unsigned char 
  6217 ;; Return value:  Size  Location     Type
  6218 ;;                  1    wreg      unsigned char 
  6219 ;; Registers used:
  6220 ;;		wreg, status,2
  6221 ;; Tracked objects:
  6222 ;;		On entry : 0/0
  6223 ;;		On exit  : 0/0
  6224 ;;		Unchanged: 0/0
  6225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;Total ram usage:        3 bytes
  6231 ;; Hardware stack levels used:    1
  6232 ;; Hardware stack levels required when called:    5
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_setSw_Main
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           
  6241                           ;psect for function _getSw_KeyStatus
  6242  1D26                     _getSw_KeyStatus:	
  6243                           
  6244                           ;Switch_B1.c: 238: char status = 0;
  6245                           
  6246                           ;incstack = 0
  6247                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6248  1D26  0020               	movlb	0	; select bank0
  6249  1D27  01A2               	clrf	getSw_KeyStatus@status
  6250                           
  6251                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6252  1D28  01A3               	clrf	_getSw_KeyStatus$6300
  6253  1D29  0AA3               	incf	_getSw_KeyStatus$6300,f
  6254  1D2A  1F0C               	btfss	12,6	;volatile
  6255  1D2B  1A0C               	btfsc	12,4	;volatile
  6256  1D2C  2D31               	goto	l6917
  6257  1D2D  1C0C               	btfss	12,0	;volatile
  6258  1D2E  1B8C               	btfsc	12,7	;volatile
  6259  1D2F  2D31               	goto	l6917
  6260  1D30  01A3               	clrf	_getSw_KeyStatus$6300
  6261  1D31                     l6917:	
  6262  1D31  0823               	movf	_getSw_KeyStatus$6300,w
  6263  1D32  00A1               	movwf	??_getSw_KeyStatus
  6264  1D33  0821               	movf	??_getSw_KeyStatus,w
  6265  1D34  00A2               	movwf	getSw_KeyStatus@status
  6266                           
  6267                           ;Switch_B1.c: 275: return status;
  6268  1D35  0822               	movf	getSw_KeyStatus@status,w
  6269  1D36  0008               	return
  6270  1D37                     __end_of_getSw_KeyStatus:	
  6271                           
  6272                           	psect	text17
  6273  1C8A                     __ptext17:	
  6274 ;; *************** function _SwPointSelect *****************
  6275 ;; Defined at:
  6276 ;;		line 25 in file "../src/Switch_B1.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  sw              1    wreg     unsigned char 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  sw              1    2[BANK0 ] unsigned char 
  6281 ;; Return value:  Size  Location     Type
  6282 ;;		None               void
  6283 ;; Registers used:
  6284 ;;		wreg
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;Total ram usage:        2 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    5
  6297 ;; This function calls:
  6298 ;;		Nothing
  6299 ;; This function is called by:
  6300 ;;		_setSw_Main
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           
  6305                           ;psect for function _SwPointSelect
  6306  1C8A                     _SwPointSelect:	
  6307                           
  6308                           ;incstack = 0
  6309                           ; Regs used in _SwPointSelect: [wreg]
  6310                           ;SwPointSelect@sw stored from wreg
  6311  1C8A  0020               	movlb	0	; select bank0
  6312  1C8B  00A2               	movwf	SwPointSelect@sw
  6313                           
  6314                           ;Switch_B1.c: 28: if (sw == 1) {
  6315  1C8C  0822               	movf	SwPointSelect@sw,w
  6316  1C8D  3A01               	xorlw	1
  6317  1C8E  1D03               	skipz
  6318  1C8F  0008               	return
  6319                           
  6320                           ;Switch_B1.c: 29: Sw = &Sw1;
  6321  1C90  30E3               	movlw	_Sw1& (0+255)
  6322  1C91  00A1               	movwf	??_SwPointSelect
  6323  1C92  0821               	movf	??_SwPointSelect,w
  6324  1C93  0021               	movlb	1	; select bank1
  6325  1C94  00D5               	movwf	_Sw^(0+128)
  6326  1C95  0008               	return
  6327  1C96                     __end_of_SwPointSelect:	
  6328                           
  6329                           	psect	text18
  6330  1E2E                     __ptext18:	
  6331 ;; *************** function _TouchPower *****************
  6332 ;; Defined at:
  6333 ;;		line 10 in file "../src/Switch_B1.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;		None
  6338 ;; Return value:  Size  Location     Type
  6339 ;;		None               void
  6340 ;; Registers used:
  6341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;Total ram usage:        0 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    6
  6354 ;; This function calls:
  6355 ;;		_Timeout_Counter
  6356 ;;		_set_TimeoutCleared
  6357 ;; This function is called by:
  6358 ;;		_Switch_Main
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           
  6363                           ;psect for function _TouchPower
  6364  1E2E                     _TouchPower:	
  6365                           
  6366                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6367                           
  6368                           ;incstack = 0
  6369                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6370  1E2E  0022               	movlb	2	; select bank2
  6371  1E2F  1C20               	btfss	_myMain^(0+256),0
  6372  1E30  0008               	return
  6373                           
  6374                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6375  1E31  0020               	movlb	0	; select bank0
  6376  1E32  180D               	btfsc	13,0	;volatile
  6377  1E33  0008               	return
  6378  1E34  2E3A               	goto	l7407
  6379  1E35                     l2457:	
  6380                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6381                           
  6382                           
  6383                           ;Switch_B1.c: 14: RB0 = 1;
  6384  1E35  0020               	movlb	0	; select bank0
  6385  1E36  140D               	bsf	13,0	;volatile
  6386                           
  6387                           ;Switch_B1.c: 15: Timeout_Counter();
  6388  1E37  319E  266F  319E   	fcall	_Timeout_Counter
  6389  1E3A                     l7407:	
  6390  1E3A  0020               	movlb	0	; select bank0
  6391  1E3B  180D               	btfsc	13,0	;volatile
  6392  1E3C  2E40               	goto	l7411
  6393  1E3D  0022               	movlb	2	; select bank2
  6394  1E3E  1D2A               	btfss	(_myMain^(0+256)+10),2
  6395  1E3F  2E35               	goto	l2457
  6396  1E40                     l7411:	
  6397                           
  6398                           ;Switch_B1.c: 16: }
  6399                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6400  1E40  319B  2372         	fcall	_set_TimeoutCleared
  6401  1E42  0008               	return
  6402  1E43                     __end_of_TouchPower:	
  6403                           
  6404                           	psect	text19
  6405  1B72                     __ptext19:	
  6406 ;; *************** function _set_TimeoutCleared *****************
  6407 ;; Defined at:
  6408 ;;		line 281 in file "../src/Main_B1.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;		None               void
  6415 ;; Registers used:
  6416 ;;		status,2
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;Total ram usage:        0 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    5
  6429 ;; This function calls:
  6430 ;;		Nothing
  6431 ;; This function is called by:
  6432 ;;		_getAD
  6433 ;;		_TouchPower
  6434 ;; This function uses a non-reentrant model
  6435 ;;
  6436                           
  6437                           
  6438                           ;psect for function _set_TimeoutCleared
  6439  1B72                     _set_TimeoutCleared:	
  6440                           
  6441                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6442                           
  6443                           ;incstack = 0
  6444                           ; Regs used in _set_TimeoutCleared: [status,2]
  6445  1B72  0022               	movlb	2	; select bank2
  6446  1B73  112A               	bcf	(_myMain^(0+256)+10),2
  6447                           
  6448                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6449  1B74  01AB               	clrf	(_myMain^(0+256)+11)
  6450  1B75  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6451  1B76  0008               	return
  6452  1B77                     __end_of_set_TimeoutCleared:	
  6453                           
  6454                           	psect	text20
  6455  1E6F                     __ptext20:	
  6456 ;; *************** function _Timeout_Counter *****************
  6457 ;; Defined at:
  6458 ;;		line 272 in file "../src/Main_B1.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;		None               void
  6465 ;; Registers used:
  6466 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;Total ram usage:        0 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    5
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		_getAD
  6483 ;;		_TouchPower
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _Timeout_Counter
  6489  1E6F                     _Timeout_Counter:	
  6490                           
  6491                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6495  1E6F  3001               	movlw	1
  6496  1E70  0022               	movlb	2	; select bank2
  6497  1E71  07AB               	addwf	(_myMain^(0+256)+11),f
  6498  1E72  3000               	movlw	0
  6499  1E73  3DAC               	addwfc	((_myMain+1)^(0+256)+11),f
  6500                           
  6501                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6502  1E74  300B               	movlw	11
  6503  1E75  3E20               	addlw	_myMain& (0+255)
  6504  1E76  0086               	movwf	6
  6505  1E77  3001               	movlw	1	; select bank2/3
  6506  1E78  0087               	movwf	7
  6507  1E79  3F40               	moviw [0]fsr1
  6508  1E7A  3AA8               	xorlw	168
  6509  1E7B  1D03               	skipz
  6510  1E7C  2E7F               	goto	u6005
  6511  1E7D  3F41               	moviw [1]fsr1
  6512  1E7E  3A61               	xorlw	97
  6513  1E7F                     u6005:	
  6514  1E7F  1D03               	skipz
  6515  1E80  0008               	return
  6516                           
  6517                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6518  1E81  01AB               	clrf	(_myMain^(0+256)+11)
  6519  1E82  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6520                           
  6521                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6522  1E83  152A               	bsf	(_myMain^(0+256)+10),2
  6523  1E84  0008               	return
  6524  1E85                     __end_of_Timeout_Counter:	
  6525                           
  6526                           	psect	text21
  6527  1B6E                     __ptext21:	
  6528 ;; *************** function _Switch_Initialization *****************
  6529 ;; Defined at:
  6530 ;;		line 46 in file "../src/Switch_B1.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;		None
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;		None
  6535 ;; Return value:  Size  Location     Type
  6536 ;;		None               void
  6537 ;; Registers used:
  6538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;Total ram usage:        0 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    8
  6551 ;; This function calls:
  6552 ;;		_setSw_Initialization
  6553 ;; This function is called by:
  6554 ;;		_main
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           
  6559                           ;psect for function _Switch_Initialization
  6560  1B6E                     _Switch_Initialization:	
  6561                           
  6562                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6563                           
  6564                           ;incstack = 0
  6565                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6566  1B6E  3001               	movlw	1
  6567  1B6F  319C  24C1         	fcall	_setSw_Initialization
  6568  1B71  0008               	return
  6569  1B72                     __end_of_Switch_Initialization:	
  6570                           
  6571                           	psect	text22
  6572  1CC1                     __ptext22:	
  6573 ;; *************** function _setSw_Initialization *****************
  6574 ;; Defined at:
  6575 ;;		line 66 in file "../src/Switch_B1.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  sw              1    wreg     unsigned char 
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;  sw              1    5[BANK0 ] unsigned char 
  6580 ;; Return value:  Size  Location     Type
  6581 ;;		None               void
  6582 ;; Registers used:
  6583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;Total ram usage:        1 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    7
  6596 ;; This function calls:
  6597 ;;		_setLED
  6598 ;; This function is called by:
  6599 ;;		_Switch_Initialization
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           
  6604                           ;psect for function _setSw_Initialization
  6605  1CC1                     _setSw_Initialization:	
  6606                           
  6607                           ;incstack = 0
  6608                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6609                           ;setSw_Initialization@sw stored from wreg
  6610  1CC1  0020               	movlb	0	; select bank0
  6611  1CC2  00A5               	movwf	setSw_Initialization@sw
  6612                           
  6613                           ;Switch_B1.c: 68: setLED(sw, 1);
  6614  1CC3  01A3               	clrf	setLED@command
  6615  1CC4  0AA3               	incf	setLED@command,f
  6616  1CC5  0825               	movf	setSw_Initialization@sw,w
  6617  1CC6  3193  233E  319C   	fcall	_setLED
  6618                           
  6619                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6620  1CC9  0020               	movlb	0	; select bank0
  6621  1CCA  01A3               	clrf	setLED@command
  6622  1CCB  0AA3               	incf	setLED@command,f
  6623  1CCC  0825               	movf	setSw_Initialization@sw,w
  6624  1CCD  3E01               	addlw	1
  6625  1CCE  3193  233E         	fcall	_setLED
  6626  1CD0  0008               	return
  6627  1CD1                     __end_of_setSw_Initialization:	
  6628                           
  6629                           	psect	text23
  6630  1B41                     __ptext23:	
  6631 ;; *************** function _RF_Main *****************
  6632 ;; Defined at:
  6633 ;;		line 26 in file "../src/RF_Control_B1.c"
  6634 ;; Parameters:    Size  Location     Type
  6635 ;;		None
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;		None
  6638 ;; Return value:  Size  Location     Type
  6639 ;;		None               void
  6640 ;; Registers used:
  6641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6651 ;;Total ram usage:        0 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:   12
  6654 ;; This function calls:
  6655 ;;		_setRF_Main
  6656 ;; This function is called by:
  6657 ;;		_main
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           
  6662                           ;psect for function _RF_Main
  6663  1B41                     _RF_Main:	
  6664                           
  6665                           ;RF_Control_B1.c: 28: setRF_Main();
  6666                           
  6667                           ;incstack = 0
  6668                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6669  1B41  3185  2565         	fcall	_setRF_Main
  6670  1B43  0008               	return
  6671  1B44                     __end_of_RF_Main:	
  6672                           
  6673                           	psect	text24
  6674  0565                     __ptext24:	
  6675 ;; *************** function _setRF_Main *****************
  6676 ;; Defined at:
  6677 ;;		line 53 in file "../src/RF_Control_B1.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;		None
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  error           1    6[BANK1 ] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;		None               void
  6684 ;; Registers used:
  6685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;Total ram usage:        2 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:   11
  6698 ;; This function calls:
  6699 ;;		_CC2500_PowerOnInitial
  6700 ;;		_CC2500_RxData
  6701 ;;		_CC2500_TxData
  6702 ;;		_CC2500_WriteCommand
  6703 ;;		_RF_RxDisable
  6704 ;;		___lwdiv
  6705 ;;		_getBuz_GO
  6706 ;;		_getRF_KeyStatus
  6707 ;;		_getRxData
  6708 ;; This function is called by:
  6709 ;;		_RF_Main
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _setRF_Main
  6715  0565                     _setRF_Main:	
  6716                           
  6717                           ;RF_Control_B1.c: 54: char error = 0;
  6718                           
  6719                           ;incstack = 0
  6720                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6721  0565  0021               	movlb	1	; select bank1
  6722  0566  01EB               	clrf	setRF_Main@error^(0+128)
  6723                           
  6724                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6725  0567  1C20               	btfss	_RF1^(0+128),0
  6726  0568  2E36               	goto	l2099
  6727                           
  6728                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6729  0569  319D  2504  3185   	fcall	_getBuz_GO
  6730  056C  0020               	movlb	0	; select bank0
  6731  056D  0822               	movf	?_getBuz_GO+1,w
  6732  056E  0421               	iorwf	?_getBuz_GO,w
  6733  056F  1D03               	skipz
  6734  0570  2E17               	goto	l8689
  6735                           
  6736                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6737  0571  319D  2515  3185   	fcall	_getRF_KeyStatus
  6738  0574  3A01               	xorlw	1
  6739  0575  3000               	movlw	0
  6740  0576  1903               	skipnz
  6741  0577  3001               	movlw	1
  6742  0578  0021               	movlb	1	; select bank1
  6743  0579  00EA               	movwf	??_setRF_Main^(0+128)
  6744  057A  0CEA               	rrf	??_setRF_Main^(0+128),f
  6745  057B  0CEA               	rrf	??_setRF_Main^(0+128),f
  6746  057C  0820               	movf	_RF1^(0+128),w
  6747  057D  066A               	xorwf	??_setRF_Main^(0+128),w
  6748  057E  397F               	andlw	-129
  6749  057F  066A               	xorwf	??_setRF_Main^(0+128),w
  6750  0580  00A0               	movwf	_RF1^(0+128)
  6751                           
  6752                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6753  0581  1FA0               	btfss	_RF1^(0+128),7
  6754  0582  2D85               	goto	l2103
  6755  0583  1F20               	btfss	_RF1^(0+128),6
  6756  0584  2E17               	goto	l8689
  6757  0585                     l2103:	
  6758                           
  6759                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6760  0585  1D20               	btfss	_RF1^(0+128),2
  6761  0586  2DD6               	goto	l2104
  6762                           
  6763                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6764  0587  1B20               	btfsc	_RF1^(0+128),6
  6765  0588  2DD1               	goto	l8661
  6766                           
  6767                           ;RF_Control_B1.c: 68: RF1.Count++;
  6768  0589  3001               	movlw	1
  6769  058A  07A2               	addwf	(_RF1^(0+128)+2),f
  6770  058B  3000               	movlw	0
  6771  058C  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6772                           
  6773                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6774  058D  3014               	movlw	20
  6775  058E  0020               	movlb	0	; select bank0
  6776  058F  00A1               	movwf	___lwdiv@divisor
  6777  0590  3000               	movlw	0
  6778  0591  00A2               	movwf	___lwdiv@divisor+1
  6779  0592  0021               	movlb	1	; select bank1
  6780  0593  0828               	movf	((_RF1+1)^(0+128)+7),w
  6781  0594  0020               	movlb	0	; select bank0
  6782  0595  01A4               	clrf	___lwdiv@dividend+1
  6783  0596  07A4               	addwf	___lwdiv@dividend+1,f
  6784  0597  0021               	movlb	1	; select bank1
  6785  0598  0827               	movf	(_RF1^(0+128)+7),w
  6786  0599  0020               	movlb	0	; select bank0
  6787  059A  01A3               	clrf	___lwdiv@dividend
  6788  059B  07A3               	addwf	___lwdiv@dividend,f
  6789  059C  3192  22CE  3185   	fcall	___lwdiv
  6790  059F  0020               	movlb	0	; select bank0
  6791  05A0  0822               	movf	?___lwdiv+1,w
  6792  05A1  0021               	movlb	1	; select bank1
  6793  05A2  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6794  05A3  1D03               	skipz
  6795  05A4  2DA9               	goto	u9285
  6796  05A5  0020               	movlb	0	; select bank0
  6797  05A6  0821               	movf	?___lwdiv,w
  6798  05A7  0021               	movlb	1	; select bank1
  6799  05A8  0222               	subwf	(_RF1^(0+128)+2),w
  6800  05A9                     u9285:	
  6801  05A9  1C03               	skipc
  6802  05AA  2E17               	goto	l8689
  6803                           
  6804                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6805  05AB  3014               	movlw	20
  6806  05AC  0020               	movlb	0	; select bank0
  6807  05AD  00A1               	movwf	___lwdiv@divisor
  6808  05AE  3000               	movlw	0
  6809  05AF  00A2               	movwf	___lwdiv@divisor+1
  6810  05B0  0021               	movlb	1	; select bank1
  6811  05B1  0828               	movf	((_RF1+1)^(0+128)+7),w
  6812  05B2  0020               	movlb	0	; select bank0
  6813  05B3  01A4               	clrf	___lwdiv@dividend+1
  6814  05B4  07A4               	addwf	___lwdiv@dividend+1,f
  6815  05B5  0021               	movlb	1	; select bank1
  6816  05B6  0827               	movf	(_RF1^(0+128)+7),w
  6817  05B7  0020               	movlb	0	; select bank0
  6818  05B8  01A3               	clrf	___lwdiv@dividend
  6819  05B9  07A3               	addwf	___lwdiv@dividend,f
  6820  05BA  3192  22CE  3185   	fcall	___lwdiv
  6821  05BD  0020               	movlb	0	; select bank0
  6822  05BE  0822               	movf	?___lwdiv+1,w
  6823  05BF  0021               	movlb	1	; select bank1
  6824  05C0  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6825  05C1  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6826  05C2  0020               	movlb	0	; select bank0
  6827  05C3  0821               	movf	?___lwdiv,w
  6828  05C4  0021               	movlb	1	; select bank1
  6829  05C5  01A2               	clrf	(_RF1^(0+128)+2)
  6830  05C6  07A2               	addwf	(_RF1^(0+128)+2),f
  6831                           
  6832                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6833  05C7  1120               	bcf	_RF1^(0+128),2
  6834                           
  6835                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6836  05C8  01AA               	clrf	(_RF1^(0+128)+10)
  6837  05C9  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6838                           
  6839                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6840  05CA  319C  24B2  3185   	fcall	_RF_RxDisable
  6841                           
  6842                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6843  05CD  3189  2105  3185   	fcall	_CC2500_TxData
  6844                           
  6845                           ;RF_Control_B1.c: 77: }
  6846                           ;RF_Control_B1.c: 78: } else {
  6847  05D0  2E17               	goto	l8689
  6848  05D1                     l8661:	
  6849                           
  6850                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6851  05D1  0021               	movlb	1	; select bank1
  6852  05D2  01A2               	clrf	(_RF1^(0+128)+2)
  6853  05D3  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6854                           
  6855                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6856  05D4  1120               	bcf	_RF1^(0+128),2
  6857                           
  6858                           ;RF_Control_B1.c: 81: }
  6859                           ;RF_Control_B1.c: 82: } else {
  6860  05D5  2E17               	goto	l8689
  6861  05D6                     l2104:	
  6862                           
  6863                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6864  05D6  1DA0               	btfss	_RF1^(0+128),3
  6865  05D7  2DE5               	goto	l8675
  6866                           
  6867                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6868  05D8  3189  2172  3185   	fcall	_CC2500_RxData
  6869                           
  6870                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6871  05DB  0021               	movlb	1	; select bank1
  6872  05DC  1CA0               	btfss	_RF1^(0+128),1
  6873  05DD  2E17               	goto	l8689
  6874                           
  6875                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6876  05DE  10A0               	bcf	_RF1^(0+128),1
  6877                           
  6878                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6879  05DF  01AA               	clrf	(_RF1^(0+128)+10)
  6880  05E0  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6881                           
  6882                           ;RF_Control_B1.c: 97: getRxData();
  6883  05E1  318A  22C1  3185   	fcall	_getRxData
  6884                           
  6885                           ;RF_Control_B1.c: 100: }
  6886                           ;RF_Control_B1.c: 101: } else {
  6887  05E4  2E17               	goto	l8689
  6888  05E5                     l8675:	
  6889                           
  6890                           ;RF_Control_B1.c: 102: RF1.Count++;
  6891  05E5  3001               	movlw	1
  6892  05E6  0021               	movlb	1	; select bank1
  6893  05E7  07A2               	addwf	(_RF1^(0+128)+2),f
  6894  05E8  3000               	movlw	0
  6895  05E9  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6896                           
  6897                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6898  05EA  3014               	movlw	20
  6899  05EB  0020               	movlb	0	; select bank0
  6900  05EC  00A1               	movwf	___lwdiv@divisor
  6901  05ED  3000               	movlw	0
  6902  05EE  00A2               	movwf	___lwdiv@divisor+1
  6903  05EF  0021               	movlb	1	; select bank1
  6904  05F0  0828               	movf	((_RF1+1)^(0+128)+7),w
  6905  05F1  0020               	movlb	0	; select bank0
  6906  05F2  01A4               	clrf	___lwdiv@dividend+1
  6907  05F3  07A4               	addwf	___lwdiv@dividend+1,f
  6908  05F4  0021               	movlb	1	; select bank1
  6909  05F5  0827               	movf	(_RF1^(0+128)+7),w
  6910  05F6  0020               	movlb	0	; select bank0
  6911  05F7  01A3               	clrf	___lwdiv@dividend
  6912  05F8  07A3               	addwf	___lwdiv@dividend,f
  6913  05F9  3192  22CE  3185   	fcall	___lwdiv
  6914  05FC  0020               	movlb	0	; select bank0
  6915  05FD  0822               	movf	?___lwdiv+1,w
  6916  05FE  0021               	movlb	1	; select bank1
  6917  05FF  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6918  0600  1D03               	skipz
  6919  0601  2E06               	goto	u9315
  6920  0602  0020               	movlb	0	; select bank0
  6921  0603  0821               	movf	?___lwdiv,w
  6922  0604  0021               	movlb	1	; select bank1
  6923  0605  0222               	subwf	(_RF1^(0+128)+2),w
  6924  0606                     u9315:	
  6925  0606  1C03               	skipc
  6926  0607  2E17               	goto	l8689
  6927                           
  6928                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6929  0608  01A2               	clrf	(_RF1^(0+128)+2)
  6930  0609  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6931                           
  6932                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6933  060A  15A0               	bsf	_RF1^(0+128),3
  6934                           
  6935                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6936  060B  3036               	movlw	54
  6937  060C  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6938                           
  6939                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6940  060F  303A               	movlw	58
  6941  0610  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6942                           
  6943                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6944  0613  3034               	movlw	52
  6945  0614  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6946  0617                     l8689:	
  6947                           
  6948                           ;RF_Control_B1.c: 111: }
  6949                           ;RF_Control_B1.c: 112: }
  6950                           ;RF_Control_B1.c: 113: }
  6951                           ;RF_Control_B1.c: 114: }
  6952                           ;RF_Control_B1.c: 115: }
  6953                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6954  0617  3001               	movlw	1
  6955  0618  0021               	movlb	1	; select bank1
  6956  0619  07AA               	addwf	(_RF1^(0+128)+10),f
  6957  061A  3000               	movlw	0
  6958  061B  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6959                           
  6960                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6961  061C  300B               	movlw	11
  6962  061D  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6963  061E  30B9               	movlw	185
  6964  061F  1903               	skipnz
  6965  0620  022A               	subwf	(_RF1^(0+128)+10),w
  6966  0621  1C03               	skipc
  6967  0622  2E2F               	goto	l8703
  6968                           
  6969                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6970  0623  01AA               	clrf	(_RF1^(0+128)+10)
  6971  0624  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6972                           
  6973                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6974  0625  11A0               	bcf	_RF1^(0+128),3
  6975                           
  6976                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6977  0626  10A0               	bcf	_RF1^(0+128),1
  6978                           
  6979                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6980  0627  3036               	movlw	54
  6981  0628  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6982                           
  6983                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6984  062B  303A               	movlw	58
  6985  062C  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6986  062F                     l8703:	
  6987                           
  6988                           ;RF_Control_B1.c: 125: }
  6989                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6990  062F  0021               	movlb	1	; select bank1
  6991  0630  1F21               	btfss	(_RF1^(0+128)+1),6
  6992  0631  0008               	return
  6993                           
  6994                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6995  0632  1321               	bcf	(_RF1^(0+128)+1),6
  6996                           
  6997                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6998  0633  319E  2619         	fcall	_CC2500_PowerOnInitial
  6999                           
  7000                           ;RF_Control_B1.c: 130: }
  7001                           ;RF_Control_B1.c: 132: } else {
  7002  0635  0008               	return
  7003  0636                     l2099:	
  7004                           
  7005                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7006  0636  0022               	movlb	2	; select bank2
  7007  0637  1C20               	btfss	_myMain^(0+256),0
  7008  0638  0008               	return
  7009                           
  7010                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7011  0639  0021               	movlb	1	; select bank1
  7012  063A  1420               	bsf	_RF1^(0+128),0
  7013  063B  0008               	return
  7014  063C                     __end_of_setRF_Main:	
  7015                           
  7016                           	psect	text25
  7017  0AC1                     __ptext25:	
  7018 ;; *************** function _getRxData *****************
  7019 ;; Defined at:
  7020 ;;		line 227 in file "../src/RF_Control_B1.c"
  7021 ;; Parameters:    Size  Location     Type
  7022 ;;		None
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  error           1    4[BANK1 ] unsigned char 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;		None               void
  7027 ;; Registers used:
  7028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7029 ;; Tracked objects:
  7030 ;;		On entry : 0/0
  7031 ;;		On exit  : 0/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;Total ram usage:        2 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; Hardware stack levels required when called:   10
  7041 ;; This function calls:
  7042 ;;		_getMain_All_Error_Status
  7043 ;;		_setControl_Lights_Table
  7044 ;;		_setLog_Code
  7045 ;;		_setTxData
  7046 ;; This function is called by:
  7047 ;;		_setRF_Main
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           
  7052                           ;psect for function _getRxData
  7053  0AC1                     _getRxData:	
  7054                           
  7055                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7056                           
  7057                           ;incstack = 0
  7058                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7059  0AC1  0023               	movlb	3	; select bank3
  7060  0AC2  0820               	movf	_RF_Data^(0+384),w
  7061  0AC3  3AAA               	xorlw	170
  7062  0AC4  1D03               	skipz
  7063  0AC5  2AD7               	goto	l8475
  7064  0AC6  0821               	movf	(_RF_Data^(0+384)+1),w
  7065  0AC7  3A01               	xorlw	1
  7066  0AC8  1D03               	skipz
  7067  0AC9  2AD7               	goto	l8475
  7068                           
  7069                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7070  0ACA  3055               	movlw	85
  7071  0ACB  0021               	movlb	1	; select bank1
  7072  0ACC  00E8               	movwf	??_getRxData^(0+128)
  7073  0ACD  086D               	movf	_product^(0+128),w
  7074  0ACE  3E02               	addlw	2
  7075  0ACF  0086               	movwf	6
  7076  0AD0  3002               	movlw	2	; select bank4/5
  7077  0AD1  0087               	movwf	7
  7078  0AD2  0868               	movf	??_getRxData^(0+128),w
  7079  0AD3  0081               	movwf	1
  7080                           
  7081                           ;RF_Control_B1.c: 231: setTxData();
  7082  0AD4  318F  2745         	fcall	_setTxData
  7083                           
  7084                           ;RF_Control_B1.c: 235: } else {
  7085  0AD6  0008               	return
  7086  0AD7                     l8475:	
  7087                           
  7088                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7089  0AD7  3000               	movlw	0
  7090  0AD8  3191  21FA  318A   	fcall	_getMain_All_Error_Status
  7091  0ADB  0021               	movlb	1	; select bank1
  7092  0ADC  00E8               	movwf	??_getRxData^(0+128)
  7093  0ADD  0868               	movf	??_getRxData^(0+128),w
  7094  0ADE  00E9               	movwf	getRxData@error^(0+128)
  7095                           
  7096                           ;RF_Control_B1.c: 237: if (error == 0) {
  7097  0ADF  08E9               	movf	getRxData@error^(0+128),f
  7098  0AE0  1D03               	skipz
  7099  0AE1  2B31               	goto	l2144
  7100                           
  7101                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7102  0AE2  1F20               	btfss	_RF1^(0+128),6
  7103  0AE3  2AEF               	goto	l8487
  7104                           
  7105                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7106  0AE4  0023               	movlb	3	; select bank3
  7107  0AE5  08A0               	movf	_RF_Data^(0+384),f
  7108  0AE6  1D03               	skipz
  7109  0AE7  0008               	return
  7110  0AE8  0821               	movf	(_RF_Data^(0+384)+1),w
  7111  0AE9  3A64               	xorlw	100
  7112  0AEA  1D03               	skipz
  7113  0AEB  0008               	return
  7114                           
  7115                           ;RF_Control_B1.c: 241: setLog_Code();
  7116  0AEC  3188  2000         	fcall	_setLog_Code
  7117                           
  7118                           ;RF_Control_B1.c: 242: }
  7119                           ;RF_Control_B1.c: 243: } else {
  7120  0AEE  0008               	return
  7121  0AEF                     l8487:	
  7122                           
  7123                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7124  0AEF  0023               	movlb	3	; select bank3
  7125  0AF0  0834               	movf	(_RF_Data^(0+384)+20),w
  7126  0AF1  3AD1               	xorlw	209
  7127  0AF2  1903               	skipnz
  7128  0AF3  2AF8               	goto	l8491
  7129  0AF4  0834               	movf	(_RF_Data^(0+384)+20),w
  7130  0AF5  3A0A               	xorlw	10
  7131  0AF6  1D03               	skipz
  7132  0AF7  0008               	return
  7133  0AF8                     l8491:	
  7134                           
  7135                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7136  0AF8  08A0               	movf	_RF_Data^(0+384),f
  7137  0AF9  1D03               	skipz
  7138  0AFA  0008               	return
  7139  0AFB  0821               	movf	(_RF_Data^(0+384)+1),w
  7140  0AFC  3A02               	xorlw	2
  7141  0AFD  1D03               	skipz
  7142  0AFE  0008               	return
  7143                           
  7144                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7145  0AFF  082C               	movf	(_RF_Data^(0+384)+12),w
  7146  0B00  3AFF               	xorlw	255
  7147  0B01  1D03               	skipz
  7148  0B02  2B0D               	goto	l8503
  7149  0B03  082D               	movf	(_RF_Data^(0+384)+13),w
  7150  0B04  3AFF               	xorlw	255
  7151  0B05  1D03               	skipz
  7152  0B06  2B0D               	goto	l8503
  7153  0B07  082E               	movf	(_RF_Data^(0+384)+14),w
  7154  0B08  3AFF               	xorlw	255
  7155  0B09  1D03               	skipz
  7156  0B0A  2B0D               	goto	l8503
  7157                           
  7158                           ;RF_Control_B1.c: 249: __nop();
  7159  0B0B  0000               	nop
  7160                           
  7161                           ;RF_Control_B1.c: 250: } else {
  7162  0B0C  0008               	return
  7163  0B0D                     l8503:	
  7164                           
  7165                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7166  0B0D  0021               	movlb	1	; select bank1
  7167  0B0E  086D               	movf	_product^(0+128),w
  7168  0B0F  3E0C               	addlw	12
  7169  0B10  0086               	movwf	6
  7170  0B11  3002               	movlw	2	; select bank4/5
  7171  0B12  0087               	movwf	7
  7172  0B13  0023               	movlb	3	; select bank3
  7173  0B14  082C               	movf	(_RF_Data^(0+384)+12),w
  7174  0B15  0601               	xorwf	1,w
  7175  0B16  1D03               	skipz
  7176  0B17  0008               	return
  7177  0B18  0021               	movlb	1	; select bank1
  7178  0B19  086D               	movf	_product^(0+128),w
  7179  0B1A  3E0D               	addlw	13
  7180  0B1B  0086               	movwf	6
  7181  0B1C  3002               	movlw	2	; select bank4/5
  7182  0B1D  0087               	movwf	7
  7183  0B1E  0023               	movlb	3	; select bank3
  7184  0B1F  082D               	movf	(_RF_Data^(0+384)+13),w
  7185  0B20  0601               	xorwf	1,w
  7186  0B21  1D03               	skipz
  7187  0B22  0008               	return
  7188  0B23  0021               	movlb	1	; select bank1
  7189  0B24  086D               	movf	_product^(0+128),w
  7190  0B25  3E0E               	addlw	14
  7191  0B26  0086               	movwf	6
  7192  0B27  3002               	movlw	2	; select bank4/5
  7193  0B28  0087               	movwf	7
  7194  0B29  0023               	movlb	3	; select bank3
  7195  0B2A  082E               	movf	(_RF_Data^(0+384)+14),w
  7196  0B2B  0601               	xorwf	1,w
  7197  0B2C  1D03               	skipz
  7198  0B2D  0008               	return
  7199                           
  7200                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7201  0B2E  318A  224F         	fcall	_setControl_Lights_Table
  7202                           
  7203                           ;RF_Control_B1.c: 253: }
  7204                           ;RF_Control_B1.c: 254: }
  7205                           ;RF_Control_B1.c: 256: }
  7206                           ;RF_Control_B1.c: 267: }
  7207                           ;RF_Control_B1.c: 268: }
  7208                           ;RF_Control_B1.c: 269: } else {
  7209  0B30  0008               	return
  7210  0B31                     l2144:	
  7211                           
  7212                           ;RF_Control_B1.c: 270: __nop();
  7213  0B31  0000               	nop
  7214  0B32  0008               	return
  7215  0B33                     __end_of_getRxData:	
  7216                           
  7217                           	psect	text26
  7218  0800                     __ptext26:	
  7219 ;; *************** function _setLog_Code *****************
  7220 ;; Defined at:
  7221 ;;		line 276 in file "../src/RF_Control_B1.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;		None
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;		None
  7226 ;; Return value:  Size  Location     Type
  7227 ;;		None               void
  7228 ;; Registers used:
  7229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7238 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;Total ram usage:        1 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:    7
  7242 ;; This function calls:
  7243 ;;		_setBuz
  7244 ;;		_setMemory_LoopSave
  7245 ;;		_setMemory_Modify
  7246 ;;		_setProductData
  7247 ;; This function is called by:
  7248 ;;		_getRxData
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           
  7253                           ;psect for function _setLog_Code
  7254  0800                     _setLog_Code:	
  7255                           
  7256                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7257                           
  7258                           ;incstack = 0
  7259                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7260  0800  0021               	movlb	1	; select bank1
  7261  0801  1320               	bcf	_RF1^(0+128),6
  7262                           
  7263                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7264  0802  0023               	movlb	3	; select bank3
  7265  0803  082C               	movf	(_RF_Data^(0+384)+12),w
  7266  0804  0020               	movlb	0	; select bank0
  7267  0805  00E6               	movwf	??_setLog_Code
  7268  0806  0866               	movf	??_setLog_Code,w
  7269  0807  00E3               	movwf	setProductData@value
  7270  0808  300C               	movlw	12
  7271  0809  319C  242A  3188   	fcall	_setProductData
  7272                           
  7273                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7274  080C  0023               	movlb	3	; select bank3
  7275  080D  082D               	movf	(_RF_Data^(0+384)+13),w
  7276  080E  0020               	movlb	0	; select bank0
  7277  080F  00E6               	movwf	??_setLog_Code
  7278  0810  0866               	movf	??_setLog_Code,w
  7279  0811  00E3               	movwf	setProductData@value
  7280  0812  300D               	movlw	13
  7281  0813  319C  242A  3188   	fcall	_setProductData
  7282                           
  7283                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7284  0816  0023               	movlb	3	; select bank3
  7285  0817  082E               	movf	(_RF_Data^(0+384)+14),w
  7286  0818  0020               	movlb	0	; select bank0
  7287  0819  00E6               	movwf	??_setLog_Code
  7288  081A  0866               	movf	??_setLog_Code,w
  7289  081B  00E3               	movwf	setProductData@value
  7290  081C  300E               	movlw	14
  7291  081D  319C  242A  3188   	fcall	_setProductData
  7292                           
  7293                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7294  0820  3064               	movlw	100
  7295  0821  0020               	movlb	0	; select bank0
  7296  0822  00AA               	movwf	setBuz@time
  7297  0823  3000               	movlw	0
  7298  0824  00AB               	movwf	setBuz@time+1
  7299  0825  3001               	movlw	1
  7300  0826  3195  25BC  3188   	fcall	_setBuz
  7301                           
  7302                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7303  0829  0022               	movlb	2	; select bank2
  7304  082A  1EA0               	btfss	_myMain^(0+256),5
  7305  082B  2830               	goto	l2159
  7306                           
  7307                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7308  082C  3001               	movlw	1
  7309  082D  319D  25CA  3188   	fcall	_setMemory_LoopSave
  7310  0830                     l2159:	
  7311                           
  7312                           ;RF_Control_B1.c: 284: }
  7313                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7314  0830  3001               	movlw	1
  7315  0831  319D  25B7         	fcall	_setMemory_Modify
  7316  0833  0008               	return
  7317  0834                     __end_of_setLog_Code:	
  7318                           
  7319                           	psect	text27
  7320  1DCA                     __ptext27:	
  7321 ;; *************** function _setMemory_LoopSave *****************
  7322 ;; Defined at:
  7323 ;;		line 1076 in file "../src/MCU_B1.c"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;  command         1    wreg     unsigned char 
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;  command         1    2[BANK0 ] unsigned char 
  7328 ;; Return value:  Size  Location     Type
  7329 ;;		None               void
  7330 ;; Registers used:
  7331 ;;		wreg, status,2, status,0
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;Total ram usage:        2 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; Hardware stack levels required when called:    5
  7344 ;; This function calls:
  7345 ;;		Nothing
  7346 ;; This function is called by:
  7347 ;;		_setLog_Code
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           
  7352                           ;psect for function _setMemory_LoopSave
  7353  1DCA                     _setMemory_LoopSave:	
  7354                           
  7355                           ;incstack = 0
  7356                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7357                           ;setMemory_LoopSave@command stored from wreg
  7358  1DCA  0020               	movlb	0	; select bank0
  7359  1DCB  00A2               	movwf	setMemory_LoopSave@command
  7360                           
  7361                           ;MCU_B1.c: 1077: Memory.LoopSave = command == 1 ? 1 : 0;
  7362  1DCC  0822               	movf	setMemory_LoopSave@command,w
  7363  1DCD  3A01               	xorlw	1
  7364  1DCE  3000               	movlw	0
  7365  1DCF  1903               	skipnz
  7366  1DD0  3001               	movlw	1
  7367  1DD1  00A1               	movwf	??_setMemory_LoopSave
  7368  1DD2  0DA1               	rlf	??_setMemory_LoopSave,f
  7369  1DD3  0DA1               	rlf	??_setMemory_LoopSave,f
  7370  1DD4  0023               	movlb	3	; select bank3
  7371  1DD5  0862               	movf	(_Memory^(0+384)+36),w
  7372  1DD6  0020               	movlb	0	; select bank0
  7373  1DD7  0621               	xorwf	??_setMemory_LoopSave,w
  7374  1DD8  39FB               	andlw	-5
  7375  1DD9  0621               	xorwf	??_setMemory_LoopSave,w
  7376  1DDA  0023               	movlb	3	; select bank3
  7377  1DDB  00E2               	movwf	(_Memory^(0+384)+36)
  7378  1DDC  0008               	return
  7379  1DDD                     __end_of_setMemory_LoopSave:	
  7380                           
  7381                           	psect	text28
  7382  0A4F                     __ptext28:	
  7383 ;; *************** function _setControl_Lights_Table *****************
  7384 ;; Defined at:
  7385 ;;		line 289 in file "../src/RF_Control_B1.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;		None
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;		None               void
  7392 ;; Registers used:
  7393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;Total ram usage:        0 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    9
  7406 ;; This function calls:
  7407 ;;		_getDimmerLights_Status
  7408 ;;		_getMain_All_LightsStatus
  7409 ;;		_setCmd_Status
  7410 ;;		_setDimmerLights_SwOff
  7411 ;;		_setDimmerLights_SwOn
  7412 ;;		_setProductData
  7413 ;;		_setRFSW_AdjControl
  7414 ;;		_setRFSW_Control
  7415 ;;		_setTxData
  7416 ;; This function is called by:
  7417 ;;		_getRxData
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           
  7422                           ;psect for function _setControl_Lights_Table
  7423  0A4F                     _setControl_Lights_Table:	
  7424                           
  7425                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7426                           
  7427                           ;incstack = 0
  7428                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7429  0A4F  2AB1               	goto	l8397
  7430  0A50                     l8379:	
  7431                           ;RF_Control_B1.c: 292: case 0x00:
  7432                           
  7433                           
  7434                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7435  0A50  319B  23D1  318A   	fcall	_getMain_All_LightsStatus
  7436  0A53  3A01               	xorlw	1
  7437  0A54  1D03               	skipz
  7438  0A55  2A6C               	goto	l8387
  7439                           
  7440                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7441  0A56  3001               	movlw	1
  7442  0A57  319C  24D1  318A   	fcall	_getDimmerLights_Status
  7443  0A5A  3A01               	xorlw	1
  7444  0A5B  1D03               	skipz
  7445  0A5C  2A65               	goto	l8385
  7446                           
  7447                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7448  0A5D  3001               	movlw	1
  7449  0A5E  3192  222D  318A   	fcall	_setDimmerLights_SwOn
  7450                           
  7451                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7452  0A61  3001               	movlw	1
  7453  0A62  3193  2305  318A   	fcall	_setDimmerLights_SwOff
  7454  0A65                     l8385:	
  7455                           
  7456                           ;RF_Control_B1.c: 299: }
  7457                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7458  0A65  0020               	movlb	0	; select bank0
  7459  0A66  01A1               	clrf	setCmd_Status@cmd
  7460  0A67  0AA1               	incf	setCmd_Status@cmd,f
  7461  0A68  3001               	movlw	1
  7462  0A69  319E  26CE         	fcall	_setCmd_Status
  7463                           
  7464                           ;RF_Control_B1.c: 315: } else {
  7465  0A6B  0008               	return
  7466  0A6C                     l8387:	
  7467                           
  7468                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7469  0A6C  0020               	movlb	0	; select bank0
  7470  0A6D  01E3               	clrf	setProductData@value
  7471  0A6E  3009               	movlw	9
  7472  0A6F  319C  242A  318A   	fcall	_setProductData
  7473                           
  7474                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7475  0A72  0020               	movlb	0	; select bank0
  7476  0A73  01E3               	clrf	setProductData@value
  7477  0A74  300B               	movlw	11
  7478  0A75  319C  242A  318A   	fcall	_setProductData
  7479                           
  7480                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7481  0A78  0020               	movlb	0	; select bank0
  7482  0A79  01E3               	clrf	setProductData@value
  7483  0A7A  300F               	movlw	15
  7484  0A7B  319C  242A  318A   	fcall	_setProductData
  7485                           
  7486                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7487  0A7E  0020               	movlb	0	; select bank0
  7488  0A7F  01E3               	clrf	setProductData@value
  7489  0A80  3011               	movlw	17
  7490  0A81  319C  242A  318A   	fcall	_setProductData
  7491                           
  7492                           ;RF_Control_B1.c: 320: setTxData();
  7493  0A84  318F  2745         	fcall	_setTxData
  7494                           
  7495                           ;RF_Control_B1.c: 321: }
  7496                           ;RF_Control_B1.c: 322: break;
  7497  0A86  0008               	return
  7498  0A87                     l8389:	
  7499                           ;RF_Control_B1.c: 324: case 0x20:
  7500                           
  7501                           
  7502                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7503  0A87  0020               	movlb	0	; select bank0
  7504  0A88  01E3               	clrf	setProductData@value
  7505  0A89  3009               	movlw	9
  7506  0A8A  319C  242A  318A   	fcall	_setProductData
  7507                           
  7508                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7509  0A8D  0020               	movlb	0	; select bank0
  7510  0A8E  01E3               	clrf	setProductData@value
  7511  0A8F  300B               	movlw	11
  7512  0A90  319C  242A  318A   	fcall	_setProductData
  7513                           
  7514                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7515  0A93  0021               	movlb	1	; select bank1
  7516  0A94  086D               	movf	_product^(0+128),w
  7517  0A95  0086               	movwf	6
  7518  0A96  3002               	movlw	2	; select bank4/5
  7519  0A97  0087               	movwf	7
  7520  0A98  3002               	movlw	2	; select bank4/5
  7521  0A99  3F4F               	moviw [15]fsr1
  7522  0A9A  0020               	movlb	0	; select bank0
  7523  0A9B  00E3               	movwf	setProductData@value
  7524  0A9C  300F               	movlw	15
  7525  0A9D  319C  242A  318A   	fcall	_setProductData
  7526                           
  7527                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7528  0AA0  0020               	movlb	0	; select bank0
  7529  0AA1  01E3               	clrf	setProductData@value
  7530  0AA2  3011               	movlw	17
  7531  0AA3  319C  242A  318A   	fcall	_setProductData
  7532                           
  7533                           ;RF_Control_B1.c: 329: setTxData();
  7534  0AA6  318F  2745         	fcall	_setTxData
  7535                           
  7536                           ;RF_Control_B1.c: 330: break;
  7537  0AA8  0008               	return
  7538  0AA9                     l8391:	
  7539                           ;RF_Control_B1.c: 333: case 0x01:
  7540                           
  7541                           
  7542                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7543  0AA9  3001               	movlw	1
  7544  0AAA  3193  23F4         	fcall	_setRFSW_Control
  7545                           
  7546                           ;RF_Control_B1.c: 335: break;
  7547  0AAC  0008               	return
  7548  0AAD                     l8393:	
  7549                           ;RF_Control_B1.c: 339: case 0x11:
  7550                           
  7551                           
  7552                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7553  0AAD  3001               	movlw	1
  7554  0AAE  318B  23A5         	fcall	_setRFSW_AdjControl
  7555                           
  7556                           ;RF_Control_B1.c: 370: }
  7557                           
  7558                           ;RF_Control_B1.c: 341: break;
  7559  0AB0  0008               	return
  7560  0AB1                     l8397:	
  7561  0AB1  0023               	movlb	3	; select bank3
  7562  0AB2  082F               	movf	(_RF_Data^(0+384)+15),w
  7563                           
  7564                           ; Switch size 1, requested type "space"
  7565                           ; Number of cases is 4, Range of values is 0 to 32
  7566                           ; switch strategies available:
  7567                           ; Name         Instructions Cycles
  7568                           ; simple_byte           13     7 (average)
  7569                           ; direct_byte           72     6 (fixed)
  7570                           ; jumptable            260     6 (fixed)
  7571                           ;	Chosen strategy is simple_byte
  7572  0AB3  3A00               	xorlw	0	; case 0
  7573  0AB4  1903               	skipnz
  7574  0AB5  2A50               	goto	l8379
  7575  0AB6  3A01               	xorlw	1	; case 1
  7576  0AB7  1903               	skipnz
  7577  0AB8  2AA9               	goto	l8391
  7578  0AB9  3A10               	xorlw	16	; case 17
  7579  0ABA  1903               	skipnz
  7580  0ABB  2AAD               	goto	l8393
  7581  0ABC  3A31               	xorlw	49	; case 32
  7582  0ABD  1903               	skipnz
  7583  0ABE  2A87               	goto	l8389
  7584  0ABF  2AC0               	goto	l2172
  7585  0AC0                     l2172:	
  7586  0AC0  0008               	return
  7587  0AC1                     __end_of_setControl_Lights_Table:	
  7588                           
  7589                           	psect	text29
  7590  13F4                     __ptext29:	
  7591 ;; *************** function _setRFSW_Control *****************
  7592 ;; Defined at:
  7593 ;;		line 378 in file "../src/RF_Control_B1.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;  sw              1    wreg     unsigned char 
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;  sw              1    2[BANK1 ] unsigned char 
  7598 ;;  status          1    1[BANK1 ] unsigned char 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;		None               void
  7601 ;; Registers used:
  7602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;Total ram usage:        3 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    8
  7615 ;; This function calls:
  7616 ;;		_getDimmerLights_Status
  7617 ;;		_setBuz
  7618 ;;		_setDelayOff_GO
  7619 ;;		_setDimmerLights_SwOff
  7620 ;;		_setDimmerLights_SwOn
  7621 ;;		_setRF_DimmerLights
  7622 ;;		_setTxData
  7623 ;; This function is called by:
  7624 ;;		_setControl_Lights_Table
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           
  7629                           ;psect for function _setRFSW_Control
  7630  13F4                     _setRFSW_Control:	
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7634                           ;setRFSW_Control@sw stored from wreg
  7635  13F4  0021               	movlb	1	; select bank1
  7636  13F5  00E7               	movwf	setRFSW_Control@sw^(0+128)
  7637                           
  7638                           ;RF_Control_B1.c: 379: char status = 0;
  7639  13F6  01E6               	clrf	setRFSW_Control@status^(0+128)
  7640                           
  7641                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7642  13F7  0023               	movlb	3	; select bank3
  7643  13F8  0830               	movf	(_RF_Data^(0+384)+16),w
  7644  13F9  3A80               	xorlw	128
  7645  13FA  1D03               	skipz
  7646  13FB  2C2A               	goto	l8313
  7647                           
  7648                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7649  13FC  0020               	movlb	0	; select bank0
  7650  13FD  01E6               	clrf	setDelayOff_GO@command
  7651  13FE  0AE6               	incf	setDelayOff_GO@command,f
  7652  13FF  0023               	movlb	3	; select bank3
  7653  1400  0831               	movf	(_RF_Data^(0+384)+17),w
  7654  1401  0021               	movlb	1	; select bank1
  7655  1402  00E5               	movwf	??_setRFSW_Control^(0+128)
  7656  1403  0865               	movf	??_setRFSW_Control^(0+128),w
  7657  1404  0020               	movlb	0	; select bank0
  7658  1405  00E7               	movwf	setDelayOff_GO@value
  7659  1406  0021               	movlb	1	; select bank1
  7660  1407  0867               	movf	setRFSW_Control@sw^(0+128),w
  7661  1408  318C  24AC  3193   	fcall	_setDelayOff_GO
  7662                           
  7663                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7664  140B  0021               	movlb	1	; select bank1
  7665  140C  0867               	movf	setRFSW_Control@sw^(0+128),w
  7666  140D  319C  24D1  3193   	fcall	_getDimmerLights_Status
  7667  1410  3A01               	xorlw	1
  7668  1411  1D03               	skipz
  7669  1412  2C2A               	goto	l8313
  7670                           
  7671                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7672  1413  3064               	movlw	100
  7673  1414  0020               	movlb	0	; select bank0
  7674  1415  00AA               	movwf	setBuz@time
  7675  1416  3000               	movlw	0
  7676  1417  00AB               	movwf	setBuz@time+1
  7677  1418  3001               	movlw	1
  7678  1419  3195  25BC  3193   	fcall	_setBuz
  7679                           
  7680                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7681  141C  0020               	movlb	0	; select bank0
  7682  141D  01E6               	clrf	setRF_DimmerLights@on
  7683  141E  0AE6               	incf	setRF_DimmerLights@on,f
  7684  141F  0021               	movlb	1	; select bank1
  7685  1420  0867               	movf	setRFSW_Control@sw^(0+128),w
  7686  1421  3197  2736  3193   	fcall	_setRF_DimmerLights
  7687                           
  7688                           ;RF_Control_B1.c: 386: setTxData();
  7689  1424  318F  2745  3193   	fcall	_setTxData
  7690                           
  7691                           ;RF_Control_B1.c: 387: status = 1;
  7692  1427  0021               	movlb	1	; select bank1
  7693  1428  01E6               	clrf	setRFSW_Control@status^(0+128)
  7694  1429  0AE6               	incf	setRFSW_Control@status^(0+128),f
  7695  142A                     l8313:	
  7696                           
  7697                           ;RF_Control_B1.c: 388: }
  7698                           ;RF_Control_B1.c: 389: }
  7699                           ;RF_Control_B1.c: 391: if (status == 0) {
  7700  142A  0021               	movlb	1	; select bank1
  7701  142B  08E6               	movf	setRFSW_Control@status^(0+128),f
  7702  142C  1D03               	skipz
  7703  142D  0008               	return
  7704                           
  7705                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7706  142E  0867               	movf	setRFSW_Control@sw^(0+128),w
  7707  142F  3192  222D  3193   	fcall	_setDimmerLights_SwOn
  7708                           
  7709                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7710  1432  0021               	movlb	1	; select bank1
  7711  1433  0867               	movf	setRFSW_Control@sw^(0+128),w
  7712  1434  3193  2305         	fcall	_setDimmerLights_SwOff
  7713  1436  0008               	return
  7714  1437                     __end_of_setRFSW_Control:	
  7715                           
  7716                           	psect	text30
  7717  0BA5                     __ptext30:	
  7718 ;; *************** function _setRFSW_AdjControl *****************
  7719 ;; Defined at:
  7720 ;;		line 400 in file "../src/RF_Control_B1.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;  sw              1    wreg     unsigned char 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  sw              1   73[BANK0 ] unsigned char 
  7725 ;;  status          1   72[BANK0 ] unsigned char 
  7726 ;; Return value:  Size  Location     Type
  7727 ;;		None               void
  7728 ;; Registers used:
  7729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7730 ;; Tracked objects:
  7731 ;;		On entry : 0/0
  7732 ;;		On exit  : 0/0
  7733 ;;		Unchanged: 0/0
  7734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7739 ;;Total ram usage:        4 bytes
  7740 ;; Hardware stack levels used:    1
  7741 ;; Hardware stack levels required when called:    8
  7742 ;; This function calls:
  7743 ;;		_getDimmerLights_PercentToValue
  7744 ;;		_getDimmerLights_Status
  7745 ;;		_setDimmerIntr_Dimming_RF
  7746 ;;		_setDimmerIntr_MaxmumValue
  7747 ;;		_setDimmerLights_DimmingRun
  7748 ;;		_setDimmerLights_SwOff
  7749 ;;		_setDimmerLights_SwOn
  7750 ;;		_setMemory_Modify
  7751 ;;		_setProductData
  7752 ;;		_setTxData
  7753 ;; This function is called by:
  7754 ;;		_setControl_Lights_Table
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           
  7759                           ;psect for function _setRFSW_AdjControl
  7760  0BA5                     _setRFSW_AdjControl:	
  7761                           
  7762                           ;incstack = 0
  7763                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7764                           ;setRFSW_AdjControl@sw stored from wreg
  7765  0BA5  0020               	movlb	0	; select bank0
  7766  0BA6  00E9               	movwf	setRFSW_AdjControl@sw
  7767                           
  7768                           ;RF_Control_B1.c: 401: char status = 0;
  7769  0BA7  01E8               	clrf	setRFSW_AdjControl@status
  7770                           
  7771                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7772  0BA8  0869               	movf	setRFSW_AdjControl@sw,w
  7773  0BA9  319C  24D1  318B   	fcall	_getDimmerLights_Status
  7774  0BAC  0020               	movlb	0	; select bank0
  7775  0BAD  00E6               	movwf	??_setRFSW_AdjControl
  7776  0BAE  0866               	movf	??_setRFSW_AdjControl,w
  7777  0BAF  00E8               	movwf	setRFSW_AdjControl@status
  7778                           
  7779                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7780  0BB0  3065               	movlw	101
  7781  0BB1  0023               	movlb	3	; select bank3
  7782  0BB2  0229               	subwf	(_RF_Data^(0+384)+9),w
  7783  0BB3  1C03               	skipc
  7784  0BB4  2BBC               	goto	l8325
  7785                           
  7786                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7787  0BB5  3064               	movlw	100
  7788  0BB6  0020               	movlb	0	; select bank0
  7789  0BB7  00E6               	movwf	??_setRFSW_AdjControl
  7790  0BB8  0866               	movf	??_setRFSW_AdjControl,w
  7791  0BB9  0023               	movlb	3	; select bank3
  7792  0BBA  00A9               	movwf	(_RF_Data^(0+384)+9)
  7793                           
  7794                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7795  0BBB  2BC1               	goto	l8329
  7796  0BBC                     l8325:	
  7797  0BBC  08A9               	movf	(_RF_Data^(0+384)+9),f
  7798  0BBD  1D03               	skipz
  7799  0BBE  2BC1               	goto	l8329
  7800                           
  7801                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7802  0BBF  01A9               	clrf	(_RF_Data^(0+384)+9)
  7803  0BC0  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7804  0BC1                     l8329:	
  7805                           
  7806                           ;RF_Control_B1.c: 409: }
  7807                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7808  0BC1  0829               	movf	(_RF_Data^(0+384)+9),w
  7809  0BC2  0020               	movlb	0	; select bank0
  7810  0BC3  00E6               	movwf	??_setRFSW_AdjControl
  7811  0BC4  0866               	movf	??_setRFSW_AdjControl,w
  7812  0BC5  00E3               	movwf	setProductData@value
  7813  0BC6  3009               	movlw	9
  7814  0BC7  319C  242A  318B   	fcall	_setProductData
  7815                           
  7816                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7817  0BCA  0020               	movlb	0	; select bank0
  7818  0BCB  0869               	movf	setRFSW_AdjControl@sw,w
  7819  0BCC  00E6               	movwf	??_setRFSW_AdjControl
  7820  0BCD  0866               	movf	??_setRFSW_AdjControl,w
  7821  0BCE  00E3               	movwf	setProductData@value
  7822  0BCF  300B               	movlw	11
  7823  0BD0  319C  242A  318B   	fcall	_setProductData
  7824                           
  7825                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7826  0BD3  0020               	movlb	0	; select bank0
  7827  0BD4  0869               	movf	setRFSW_AdjControl@sw,w
  7828  0BD5  3E1A               	addlw	26
  7829  0BD6  0021               	movlb	1	; select bank1
  7830  0BD7  076D               	addwf	_product^(0+128),w
  7831  0BD8  0020               	movlb	0	; select bank0
  7832  0BD9  00E6               	movwf	??_setRFSW_AdjControl
  7833  0BDA  0866               	movf	??_setRFSW_AdjControl,w
  7834  0BDB  0086               	movwf	6
  7835  0BDC  3002               	movlw	2	; select bank4/5
  7836  0BDD  0087               	movwf	7
  7837  0BDE  0801               	movf	1,w
  7838  0BDF  00E7               	movwf	??_setRFSW_AdjControl+1
  7839  0BE0  0867               	movf	??_setRFSW_AdjControl+1,w
  7840  0BE1  00E3               	movwf	setProductData@value
  7841  0BE2  3011               	movlw	17
  7842  0BE3  319C  242A  318B   	fcall	_setProductData
  7843                           
  7844                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7845  0BE6  0023               	movlb	3	; select bank3
  7846  0BE7  0829               	movf	(_RF_Data^(0+384)+9),w
  7847  0BE8  0020               	movlb	0	; select bank0
  7848  0BE9  00E6               	movwf	??_setRFSW_AdjControl
  7849  0BEA  0866               	movf	??_setRFSW_AdjControl,w
  7850  0BEB  00E3               	movwf	setProductData@value
  7851  0BEC  0869               	movf	setRFSW_AdjControl@sw,w
  7852  0BED  3E14               	addlw	20
  7853  0BEE  319C  242A  318B   	fcall	_setProductData
  7854                           
  7855                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7856  0BF1  3001               	movlw	1
  7857  0BF2  319D  25B7  318B   	fcall	_setMemory_Modify
  7858                           
  7859                           ;RF_Control_B1.c: 416: if (status == 1) {
  7860  0BF5  0020               	movlb	0	; select bank0
  7861  0BF6  0868               	movf	setRFSW_AdjControl@status,w
  7862  0BF7  3A01               	xorlw	1
  7863  0BF8  1D03               	skipz
  7864  0BF9  2C11               	goto	l8339
  7865                           
  7866                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7867  0BFA  0023               	movlb	3	; select bank3
  7868  0BFB  0829               	movf	(_RF_Data^(0+384)+9),w
  7869  0BFC  3197  279B  318B   	fcall	_getDimmerLights_PercentToValue
  7870  0BFF  0020               	movlb	0	; select bank0
  7871  0C00  00E6               	movwf	??_setRFSW_AdjControl
  7872  0C01  0866               	movf	??_setRFSW_AdjControl,w
  7873  0C02  00E3               	movwf	setDimmerIntr_MaxmumValue@value
  7874  0C03  0869               	movf	setRFSW_AdjControl@sw,w
  7875  0C04  319C  2436  318B   	fcall	_setDimmerIntr_MaxmumValue
  7876                           
  7877                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7878  0C07  0020               	movlb	0	; select bank0
  7879  0C08  01A1               	clrf	setDimmerIntr_Dimming_RF@command
  7880  0C09  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
  7881  0C0A  0869               	movf	setRFSW_AdjControl@sw,w
  7882  0C0B  319E  269D  318B   	fcall	_setDimmerIntr_Dimming_RF
  7883                           
  7884                           ;RF_Control_B1.c: 419: setTxData();
  7885  0C0E  318F  2745         	fcall	_setTxData
  7886                           
  7887                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7888  0C10  0008               	return
  7889  0C11                     l8339:	
  7890  0C11  0020               	movlb	0	; select bank0
  7891  0C12  08E8               	movf	setRFSW_AdjControl@status,f
  7892  0C13  1D03               	skipz
  7893  0C14  0008               	return
  7894                           
  7895                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7896  0C15  01A3               	clrf	setDimmerLights_DimmingRun@command
  7897  0C16  0AA3               	incf	setDimmerLights_DimmingRun@command,f
  7898  0C17  0869               	movf	setRFSW_AdjControl@sw,w
  7899  0C18  319F  2735  318B   	fcall	_setDimmerLights_DimmingRun
  7900                           
  7901                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7902  0C1B  0020               	movlb	0	; select bank0
  7903  0C1C  0869               	movf	setRFSW_AdjControl@sw,w
  7904  0C1D  3192  222D  318B   	fcall	_setDimmerLights_SwOn
  7905                           
  7906                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7907  0C20  0020               	movlb	0	; select bank0
  7908  0C21  0869               	movf	setRFSW_AdjControl@sw,w
  7909  0C22  3193  2305         	fcall	_setDimmerLights_SwOff
  7910  0C24  0008               	return
  7911  0C25                     __end_of_setRFSW_AdjControl:	
  7912                           
  7913                           	psect	text31
  7914  1DB7                     __ptext31:	
  7915 ;; *************** function _setMemory_Modify *****************
  7916 ;; Defined at:
  7917 ;;		line 1070 in file "../src/MCU_B1.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;  command         1    wreg     unsigned char 
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;  command         1    2[BANK0 ] unsigned char 
  7922 ;; Return value:  Size  Location     Type
  7923 ;;		None               void
  7924 ;; Registers used:
  7925 ;;		wreg, status,2, status,0
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;Total ram usage:        2 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    5
  7938 ;; This function calls:
  7939 ;;		Nothing
  7940 ;; This function is called by:
  7941 ;;		_setLog_Code
  7942 ;;		_setRFSW_AdjControl
  7943 ;; This function uses a non-reentrant model
  7944 ;;
  7945                           
  7946                           
  7947                           ;psect for function _setMemory_Modify
  7948  1DB7                     _setMemory_Modify:	
  7949                           
  7950                           ;incstack = 0
  7951                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7952                           ;setMemory_Modify@command stored from wreg
  7953  1DB7  0020               	movlb	0	; select bank0
  7954  1DB8  00A2               	movwf	setMemory_Modify@command
  7955                           
  7956                           ;MCU_B1.c: 1071: Memory.Modify = command == 1 ? 1 : 0;
  7957  1DB9  0822               	movf	setMemory_Modify@command,w
  7958  1DBA  3A01               	xorlw	1
  7959  1DBB  3000               	movlw	0
  7960  1DBC  1903               	skipnz
  7961  1DBD  3001               	movlw	1
  7962  1DBE  00A1               	movwf	??_setMemory_Modify
  7963  1DBF  0023               	movlb	3	; select bank3
  7964  1DC0  0862               	movf	(_Memory^(0+384)+36),w
  7965  1DC1  0020               	movlb	0	; select bank0
  7966  1DC2  0621               	xorwf	??_setMemory_Modify,w
  7967  1DC3  39FE               	andlw	-2
  7968  1DC4  0621               	xorwf	??_setMemory_Modify,w
  7969  1DC5  0023               	movlb	3	; select bank3
  7970  1DC6  00E2               	movwf	(_Memory^(0+384)+36)
  7971                           
  7972                           ;MCU_B1.c: 1072: Memory.Time = 0;
  7973  1DC7  01E0               	clrf	(_Memory^(0+384)+34)
  7974  1DC8  01E1               	clrf	((_Memory+1)^(0+384)+34)
  7975  1DC9  0008               	return
  7976  1DCA                     __end_of_setMemory_Modify:	
  7977                           
  7978                           	psect	text32
  7979  1F35                     __ptext32:	
  7980 ;; *************** function _setDimmerLights_DimmingRun *****************
  7981 ;; Defined at:
  7982 ;;		line 1012 in file "../src/Dimmer_B1.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;  lights          1    wreg     unsigned char 
  7985 ;;  command         1    3[BANK0 ] unsigned char 
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;  lights          1    5[BANK0 ] unsigned char 
  7988 ;; Return value:  Size  Location     Type
  7989 ;;		None               void
  7990 ;; Registers used:
  7991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7992 ;; Tracked objects:
  7993 ;;		On entry : 0/0
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7997 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;Total ram usage:        3 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    6
  8004 ;; This function calls:
  8005 ;;		_DimmerLights_SelectPointer
  8006 ;; This function is called by:
  8007 ;;		_setRFSW_AdjControl
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           
  8012                           ;psect for function _setDimmerLights_DimmingRun
  8013  1F35                     _setDimmerLights_DimmingRun:	
  8014                           
  8015                           ;incstack = 0
  8016                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8017                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8018  1F35  0020               	movlb	0	; select bank0
  8019  1F36  00A5               	movwf	setDimmerLights_DimmingRun@lights
  8020                           
  8021                           ;Dimmer_B1.c: 1013: DimmerLights_SelectPointer(lights);
  8022  1F37  0825               	movf	setDimmerLights_DimmingRun@lights,w
  8023  1F38  319C  241E         	fcall	_DimmerLights_SelectPointer
  8024                           
  8025                           ;Dimmer_B1.c: 1014: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8026  1F3A  0020               	movlb	0	; select bank0
  8027  1F3B  0823               	movf	setDimmerLights_DimmingRun@command,w
  8028  1F3C  3A01               	xorlw	1
  8029  1F3D  3000               	movlw	0
  8030  1F3E  1903               	skipnz
  8031  1F3F  3001               	movlw	1
  8032  1F40  00A4               	movwf	??_setDimmerLights_DimmingRun
  8033  1F41  0021               	movlb	1	; select bank1
  8034  1F42  0A4F               	incf	_DimmerLights^(0+128),w
  8035  1F43  0086               	movwf	6
  8036  1F44  3001               	movlw	1	; select bank2/3
  8037  1F45  0087               	movwf	7
  8038  1F46  0020               	movlb	0	; select bank0
  8039  1F47  0EA4               	swapf	??_setDimmerLights_DimmingRun,f
  8040  1F48  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8041  1F49  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8042  1F4A  0801               	movf	1,w
  8043  1F4B  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8044  1F4C  39BF               	andlw	-65
  8045  1F4D  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8046  1F4E  0081               	movwf	1
  8047  1F4F  0008               	return
  8048  1F50                     __end_of_setDimmerLights_DimmingRun:	
  8049                           
  8050                           	psect	text33
  8051  1D15                     __ptext33:	
  8052 ;; *************** function _getRF_KeyStatus *****************
  8053 ;; Defined at:
  8054 ;;		line 166 in file "../src/RF_Control_B1.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;		None
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;  key             1    2[BANK0 ] unsigned char 
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  1    wreg      unsigned char 
  8061 ;; Registers used:
  8062 ;;		wreg, status,2
  8063 ;; Tracked objects:
  8064 ;;		On entry : 0/0
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;Total ram usage:        3 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; Hardware stack levels required when called:    5
  8075 ;; This function calls:
  8076 ;;		Nothing
  8077 ;; This function is called by:
  8078 ;;		_setRF_Main
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           
  8083                           ;psect for function _getRF_KeyStatus
  8084  1D15                     _getRF_KeyStatus:	
  8085                           
  8086                           ;RF_Control_B1.c: 167: char key = 0;
  8087                           
  8088                           ;incstack = 0
  8089                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8090  1D15  0020               	movlb	0	; select bank0
  8091  1D16  01A2               	clrf	getRF_KeyStatus@key
  8092                           
  8093                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8094  1D17  01A3               	clrf	_getRF_KeyStatus$5273
  8095  1D18  0AA3               	incf	_getRF_KeyStatus$5273,f
  8096  1D19  1F0C               	btfss	12,6	;volatile
  8097  1D1A  1A0C               	btfsc	12,4	;volatile
  8098  1D1B  2D20               	goto	l6843
  8099  1D1C  1C0C               	btfss	12,0	;volatile
  8100  1D1D  1B8C               	btfsc	12,7	;volatile
  8101  1D1E  2D20               	goto	l6843
  8102  1D1F  01A3               	clrf	_getRF_KeyStatus$5273
  8103  1D20                     l6843:	
  8104  1D20  0823               	movf	_getRF_KeyStatus$5273,w
  8105  1D21  00A1               	movwf	??_getRF_KeyStatus
  8106  1D22  0821               	movf	??_getRF_KeyStatus,w
  8107  1D23  00A2               	movwf	getRF_KeyStatus@key
  8108                           
  8109                           ;RF_Control_B1.c: 179: return key;
  8110  1D24  0822               	movf	getRF_KeyStatus@key,w
  8111  1D25  0008               	return
  8112  1D26                     __end_of_getRF_KeyStatus:	
  8113                           
  8114                           	psect	text34
  8115  1D04                     __ptext34:	
  8116 ;; *************** function _getBuz_GO *****************
  8117 ;; Defined at:
  8118 ;;		line 82 in file "../src/Buzzer_B1.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;		None
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  i               2    5[BANK0 ] int 
  8123 ;; Return value:  Size  Location     Type
  8124 ;;                  2    1[BANK0 ] int 
  8125 ;; Registers used:
  8126 ;;		wreg, status,2, status,0
  8127 ;; Tracked objects:
  8128 ;;		On entry : 0/0
  8129 ;;		On exit  : 0/0
  8130 ;;		Unchanged: 0/0
  8131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8132 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8133 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;Total ram usage:        6 bytes
  8137 ;; Hardware stack levels used:    1
  8138 ;; Hardware stack levels required when called:    5
  8139 ;; This function calls:
  8140 ;;		Nothing
  8141 ;; This function is called by:
  8142 ;;		_setRF_Main
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           
  8147                           ;psect for function _getBuz_GO
  8148  1D04                     _getBuz_GO:	
  8149                           
  8150                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8151                           
  8152                           ;incstack = 0
  8153                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8154  1D04  0021               	movlb	1	; select bank1
  8155  1D05  0C2E               	rrf	_Buz1^(0+128),w
  8156  1D06  3901               	andlw	1
  8157  1D07  0020               	movlb	0	; select bank0
  8158  1D08  00A3               	movwf	??_getBuz_GO
  8159  1D09  01A4               	clrf	??_getBuz_GO+1
  8160  1D0A  0823               	movf	??_getBuz_GO,w
  8161  1D0B  00A5               	movwf	getBuz_GO@i
  8162  1D0C  0824               	movf	??_getBuz_GO+1,w
  8163  1D0D  00A6               	movwf	getBuz_GO@i+1
  8164                           
  8165                           ;Buzzer_B1.c: 84: return i;
  8166  1D0E  0826               	movf	getBuz_GO@i+1,w
  8167  1D0F  01A2               	clrf	?_getBuz_GO+1
  8168  1D10  07A2               	addwf	?_getBuz_GO+1,f
  8169  1D11  0825               	movf	getBuz_GO@i,w
  8170  1D12  01A1               	clrf	?_getBuz_GO
  8171  1D13  07A1               	addwf	?_getBuz_GO,f
  8172  1D14  0008               	return
  8173  1D15                     __end_of_getBuz_GO:	
  8174                           
  8175                           	psect	text35
  8176  1CB2                     __ptext35:	
  8177 ;; *************** function _RF_RxDisable *****************
  8178 ;; Defined at:
  8179 ;;		line 154 in file "../src/RF_Control_B1.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;		None
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;		None
  8184 ;; Return value:  Size  Location     Type
  8185 ;;		None               void
  8186 ;; Registers used:
  8187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8188 ;; Tracked objects:
  8189 ;;		On entry : 0/0
  8190 ;;		On exit  : 0/0
  8191 ;;		Unchanged: 0/0
  8192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;Total ram usage:        0 bytes
  8198 ;; Hardware stack levels used:    1
  8199 ;; Hardware stack levels required when called:    7
  8200 ;; This function calls:
  8201 ;;		_CC2500_WriteCommand
  8202 ;; This function is called by:
  8203 ;;		_setRF_Main
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           
  8208                           ;psect for function _RF_RxDisable
  8209  1CB2                     _RF_RxDisable:	
  8210                           
  8211                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8212                           
  8213                           ;incstack = 0
  8214                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8215  1CB2  0021               	movlb	1	; select bank1
  8216  1CB3  18A0               	btfsc	_RF1^(0+128),1
  8217  1CB4  2CB7               	goto	l2129
  8218  1CB5  1DA0               	btfss	_RF1^(0+128),3
  8219  1CB6  0008               	return
  8220  1CB7                     l2129:	
  8221                           
  8222                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8223  1CB7  11A0               	bcf	_RF1^(0+128),3
  8224                           
  8225                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8226  1CB8  10A0               	bcf	_RF1^(0+128),1
  8227                           
  8228                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8229  1CB9  3036               	movlw	54
  8230  1CBA  319F  271B  319C   	fcall	_CC2500_WriteCommand
  8231                           
  8232                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8233  1CBD  303A               	movlw	58
  8234  1CBE  319F  271B         	fcall	_CC2500_WriteCommand
  8235  1CC0  0008               	return
  8236  1CC1                     __end_of_RF_RxDisable:	
  8237                           
  8238                           	psect	text36
  8239  0905                     __ptext36:	
  8240 ;; *************** function _CC2500_TxData *****************
  8241 ;; Defined at:
  8242 ;;		line 32 in file "../src/CC2500_B1.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;		None
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;  loop_e          1    6[BANK0 ] unsigned char 
  8247 ;; Return value:  Size  Location     Type
  8248 ;;		None               void
  8249 ;; Registers used:
  8250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/0
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;Total ram usage:        2 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    7
  8263 ;; This function calls:
  8264 ;;		_CC2500_WriteByte
  8265 ;;		_CC2500_WriteCommand
  8266 ;;		_RF_Timeout_Counter
  8267 ;;		_setRF_TimeoutCleared
  8268 ;; This function is called by:
  8269 ;;		_setRF_Main
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           
  8274                           ;psect for function _CC2500_TxData
  8275  0905                     _CC2500_TxData:	
  8276                           
  8277                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8278                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8279                           
  8280                           ;incstack = 0
  8281                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8282  0905  3036               	movlw	54
  8283  0906  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8284                           
  8285                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8286  0909  303B               	movlw	59
  8287  090A  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8288                           
  8289                           ;CC2500_B1.c: 38: RC0 = 0;
  8290  090D  0020               	movlb	0	; select bank0
  8291  090E  100E               	bcf	14,0	;volatile
  8292                           
  8293                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8294  090F  307F               	movlw	127
  8295  0910  00A5               	movwf	??_CC2500_TxData
  8296  0911  0825               	movf	??_CC2500_TxData,w
  8297  0912  0021               	movlb	1	; select bank1
  8298  0913  00D4               	movwf	_SPI0Buffer^(0+128)
  8299                           
  8300                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8301  0914  2918               	goto	l6551
  8302  0915                     l6549:	
  8303                           
  8304                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8305  0915  319E  2604  3189   	fcall	_RF_Timeout_Counter
  8306  0918                     l6551:	
  8307  0918  0020               	movlb	0	; select bank0
  8308  0919  1E8E               	btfss	14,5	;volatile
  8309  091A  291E               	goto	l6555
  8310  091B  0021               	movlb	1	; select bank1
  8311  091C  1F21               	btfss	(_RF1^(0+128)+1),6
  8312  091D  2915               	goto	l6549
  8313  091E                     l6555:	
  8314                           
  8315                           ;CC2500_B1.c: 42: };
  8316                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8317  091E  319B  235E  3189   	fcall	_setRF_TimeoutCleared
  8318                           
  8319                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8320  0921  3190  2066  3189   	fcall	_CC2500_WriteByte
  8321                           
  8322                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8323  0924  0021               	movlb	1	; select bank1
  8324  0925  0857               	movf	_Tx_Length^(0+128),w
  8325  0926  0020               	movlb	0	; select bank0
  8326  0927  00A5               	movwf	??_CC2500_TxData
  8327  0928  0825               	movf	??_CC2500_TxData,w
  8328  0929  0021               	movlb	1	; select bank1
  8329  092A  00D4               	movwf	_SPI0Buffer^(0+128)
  8330                           
  8331                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8332  092B  3190  2066  3189   	fcall	_CC2500_WriteByte
  8333                           
  8334                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8335  092E  0020               	movlb	0	; select bank0
  8336  092F  01A6               	clrf	CC2500_TxData@loop_e
  8337  0930                     l6569:	
  8338  0930  0021               	movlb	1	; select bank1
  8339  0931  0857               	movf	_Tx_Length^(0+128),w
  8340  0932  0020               	movlb	0	; select bank0
  8341  0933  0226               	subwf	CC2500_TxData@loop_e,w
  8342  0934  1803               	btfsc	3,0
  8343  0935  2949               	goto	l235
  8344                           
  8345                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8346  0936  0826               	movf	CC2500_TxData@loop_e,w
  8347  0937  3EA0               	addlw	_RF_Data& (0+255)
  8348  0938  0086               	movwf	6
  8349  0939  3001               	movlw	1	; select bank3/4
  8350  093A  0087               	movwf	7
  8351  093B  0801               	movf	1,w
  8352  093C  00A5               	movwf	??_CC2500_TxData
  8353  093D  0825               	movf	??_CC2500_TxData,w
  8354  093E  0021               	movlb	1	; select bank1
  8355  093F  00D4               	movwf	_SPI0Buffer^(0+128)
  8356                           
  8357                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8358  0940  3190  2066  3189   	fcall	_CC2500_WriteByte
  8359  0943  3001               	movlw	1
  8360  0944  0020               	movlb	0	; select bank0
  8361  0945  00A5               	movwf	??_CC2500_TxData
  8362  0946  0825               	movf	??_CC2500_TxData,w
  8363  0947  07A6               	addwf	CC2500_TxData@loop_e,f
  8364  0948  2930               	goto	l6569
  8365  0949                     l235:	
  8366                           
  8367                           ;CC2500_B1.c: 51: }
  8368                           ;CC2500_B1.c: 52: RC0 = 1;
  8369  0949  140E               	bsf	14,0	;volatile
  8370                           
  8371                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8372  094A  3035               	movlw	53
  8373  094B  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8374                           
  8375                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8376  094E  2952               	goto	l6575
  8377  094F                     l6573:	
  8378                           
  8379                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8380  094F  319E  2604  3189   	fcall	_RF_Timeout_Counter
  8381  0952                     l6575:	
  8382  0952  0020               	movlb	0	; select bank0
  8383  0953  188E               	btfsc	14,1	;volatile
  8384  0954  2958               	goto	l6579
  8385  0955  0021               	movlb	1	; select bank1
  8386  0956  1F21               	btfss	(_RF1^(0+128)+1),6
  8387  0957  294F               	goto	l6573
  8388  0958                     l6579:	
  8389                           
  8390                           ;CC2500_B1.c: 56: };
  8391                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8392  0958  319B  235E  3189   	fcall	_setRF_TimeoutCleared
  8393                           
  8394                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8395  095B  295F               	goto	l6583
  8396  095C                     l6581:	
  8397                           
  8398                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8399  095C  319E  2604  3189   	fcall	_RF_Timeout_Counter
  8400  095F                     l6583:	
  8401  095F  0020               	movlb	0	; select bank0
  8402  0960  1C8E               	btfss	14,1	;volatile
  8403  0961  2965               	goto	l6587
  8404  0962  0021               	movlb	1	; select bank1
  8405  0963  1F21               	btfss	(_RF1^(0+128)+1),6
  8406  0964  295C               	goto	l6581
  8407  0965                     l6587:	
  8408                           
  8409                           ;CC2500_B1.c: 61: };
  8410                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8411  0965  319B  235E  3189   	fcall	_setRF_TimeoutCleared
  8412                           
  8413                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8414  0968  3036               	movlw	54
  8415  0969  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8416                           
  8417                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8418  096C  303B               	movlw	59
  8419  096D  319F  271B         	fcall	_CC2500_WriteCommand
  8420                           
  8421                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8422  096F  0020               	movlb	0	; select bank0
  8423  0970  14EE               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8424  0971  0008               	return
  8425  0972                     __end_of_CC2500_TxData:	
  8426                           
  8427                           	psect	text37
  8428  0972                     __ptext37:	
  8429 ;; *************** function _CC2500_RxData *****************
  8430 ;; Defined at:
  8431 ;;		line 73 in file "../src/CC2500_B1.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;		None
  8434 ;; Auto vars:     Size  Location     Type
  8435 ;;  loop_f          1    6[BANK0 ] unsigned char 
  8436 ;; Return value:  Size  Location     Type
  8437 ;;		None               void
  8438 ;; Registers used:
  8439 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8440 ;; Tracked objects:
  8441 ;;		On entry : 0/0
  8442 ;;		On exit  : 0/0
  8443 ;;		Unchanged: 0/0
  8444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;Total ram usage:        2 bytes
  8450 ;; Hardware stack levels used:    1
  8451 ;; Hardware stack levels required when called:    7
  8452 ;; This function calls:
  8453 ;;		_CC2500_ReadByte
  8454 ;;		_CC2500_ReadStatus
  8455 ;;		_CC2500_WriteByte
  8456 ;;		_CC2500_WriteCommand
  8457 ;;		_RF_Timeout_Counter
  8458 ;;		_setRF_TimeoutCleared
  8459 ;; This function is called by:
  8460 ;;		_setRF_Main
  8461 ;; This function uses a non-reentrant model
  8462 ;;
  8463                           
  8464                           
  8465                           ;psect for function _CC2500_RxData
  8466  0972                     _CC2500_RxData:	
  8467                           
  8468                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8469                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8470                           
  8471                           ;incstack = 0
  8472                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8473  0972  0020               	movlb	0	; select bank0
  8474  0973  188E               	btfsc	14,1	;volatile
  8475  0974  0008               	return
  8476                           
  8477                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8478  0975  303B               	movlw	59
  8479  0976  3191  2104  3189   	fcall	_CC2500_ReadStatus
  8480                           
  8481                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8482  0979  0021               	movlb	1	; select bank1
  8483  097A  085A               	movf	_s_data^(0+128),w
  8484  097B  1903               	btfsc	3,2
  8485  097C  0008               	return
  8486                           
  8487                           ;CC2500_B1.c: 90: RC0 = 0;
  8488  097D  0020               	movlb	0	; select bank0
  8489  097E  100E               	bcf	14,0	;volatile
  8490                           
  8491                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8492  097F  30FF               	movlw	255
  8493  0980  00A5               	movwf	??_CC2500_RxData
  8494  0981  0825               	movf	??_CC2500_RxData,w
  8495  0982  0021               	movlb	1	; select bank1
  8496  0983  00D4               	movwf	_SPI0Buffer^(0+128)
  8497                           
  8498                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8499  0984  2988               	goto	l6607
  8500  0985                     l6605:	
  8501                           
  8502                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8503  0985  319E  2604  3189   	fcall	_RF_Timeout_Counter
  8504  0988                     l6607:	
  8505  0988  0020               	movlb	0	; select bank0
  8506  0989  1E8E               	btfss	14,5	;volatile
  8507  098A  298E               	goto	l6611
  8508  098B  0021               	movlb	1	; select bank1
  8509  098C  1F21               	btfss	(_RF1^(0+128)+1),6
  8510  098D  2985               	goto	l6605
  8511  098E                     l6611:	
  8512                           
  8513                           ;CC2500_B1.c: 95: };
  8514                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8515  098E  319B  235E  3189   	fcall	_setRF_TimeoutCleared
  8516                           
  8517                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8518  0991  3190  2066  3189   	fcall	_CC2500_WriteByte
  8519                           
  8520                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8521  0994  319F  2788  3189   	fcall	_CC2500_ReadByte
  8522                           
  8523                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8524  0997  0021               	movlb	1	; select bank1
  8525  0998  0854               	movf	_SPI0Buffer^(0+128),w
  8526  0999  0020               	movlb	0	; select bank0
  8527  099A  00A5               	movwf	??_CC2500_RxData
  8528  099B  0825               	movf	??_CC2500_RxData,w
  8529  099C  0021               	movlb	1	; select bank1
  8530  099D  00D3               	movwf	_Rx_Length^(0+128)
  8531                           
  8532                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8533  099E  0020               	movlb	0	; select bank0
  8534  099F  01A6               	clrf	CC2500_RxData@loop_f
  8535  09A0                     l6627:	
  8536  09A0  0021               	movlb	1	; select bank1
  8537  09A1  0853               	movf	_Rx_Length^(0+128),w
  8538  09A2  0020               	movlb	0	; select bank0
  8539  09A3  0226               	subwf	CC2500_RxData@loop_f,w
  8540  09A4  1803               	btfsc	3,0
  8541  09A5  29B9               	goto	l6629
  8542                           
  8543                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8544  09A6  319F  2788  3189   	fcall	_CC2500_ReadByte
  8545                           
  8546                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8547  09A9  0021               	movlb	1	; select bank1
  8548  09AA  0854               	movf	_SPI0Buffer^(0+128),w
  8549  09AB  0020               	movlb	0	; select bank0
  8550  09AC  00A5               	movwf	??_CC2500_RxData
  8551  09AD  0826               	movf	CC2500_RxData@loop_f,w
  8552  09AE  3EA0               	addlw	_RF_Data& (0+255)
  8553  09AF  0086               	movwf	6
  8554  09B0  3001               	movlw	1	; select bank3/4
  8555  09B1  0087               	movwf	7
  8556  09B2  0825               	movf	??_CC2500_RxData,w
  8557  09B3  0081               	movwf	1
  8558  09B4  3001               	movlw	1
  8559  09B5  00A5               	movwf	??_CC2500_RxData
  8560  09B6  0825               	movf	??_CC2500_RxData,w
  8561  09B7  07A6               	addwf	CC2500_RxData@loop_f,f
  8562  09B8  29A0               	goto	l6627
  8563  09B9                     l6629:	
  8564                           
  8565                           ;CC2500_B1.c: 104: }
  8566                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8567  09B9  319F  2788  3189   	fcall	_CC2500_ReadByte
  8568                           
  8569                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8570  09BC  0021               	movlb	1	; select bank1
  8571  09BD  0854               	movf	_SPI0Buffer^(0+128),w
  8572  09BE  0020               	movlb	0	; select bank0
  8573  09BF  00A5               	movwf	??_CC2500_RxData
  8574  09C0  0825               	movf	??_CC2500_RxData,w
  8575  09C1  0021               	movlb	1	; select bank1
  8576  09C2  00D2               	movwf	_RSSI^(0+128)
  8577                           
  8578                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8579  09C3  319F  2788  3189   	fcall	_CC2500_ReadByte
  8580                           
  8581                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8582  09C6  0021               	movlb	1	; select bank1
  8583  09C7  0854               	movf	_SPI0Buffer^(0+128),w
  8584  09C8  0020               	movlb	0	; select bank0
  8585  09C9  00A5               	movwf	??_CC2500_RxData
  8586  09CA  0825               	movf	??_CC2500_RxData,w
  8587  09CB  0021               	movlb	1	; select bank1
  8588  09CC  00CB               	movwf	_CRC^(0+128)
  8589                           
  8590                           ;CC2500_B1.c: 109: RC0 = 1;
  8591  09CD  0020               	movlb	0	; select bank0
  8592  09CE  140E               	bsf	14,0	;volatile
  8593                           
  8594                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8595  09CF  0021               	movlb	1	; select bank1
  8596  09D0  1FCB               	btfss	_CRC^(0+128),7
  8597  09D1  29D4               	goto	l259
  8598                           
  8599                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8600  09D2  0020               	movlb	0	; select bank0
  8601  09D3  146E               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8602  09D4                     l259:	
  8603                           
  8604                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8605  09D4  0021               	movlb	1	; select bank1
  8606  09D5  11A0               	bcf	_RF1^(0+128),3
  8607                           
  8608                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8609  09D6  14A0               	bsf	_RF1^(0+128),1
  8610                           
  8611                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8612  09D7  3036               	movlw	54
  8613  09D8  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8614                           
  8615                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8616  09DB  303A               	movlw	58
  8617  09DC  319F  271B         	fcall	_CC2500_WriteCommand
  8618  09DE  0021               	movlb	1	; select bank1
  8619  09DF  0008               	return
  8620  09E0                     __end_of_CC2500_RxData:	
  8621                           
  8622                           	psect	text38
  8623  1104                     __ptext38:	
  8624 ;; *************** function _CC2500_ReadStatus *****************
  8625 ;; Defined at:
  8626 ;;		line 308 in file "../src/CC2500_B1.c"
  8627 ;; Parameters:    Size  Location     Type
  8628 ;;  status_addr     1    wreg     unsigned char 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  status_addr     1    4[BANK0 ] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;		None               void
  8633 ;; Registers used:
  8634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;Total ram usage:        2 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    6
  8647 ;; This function calls:
  8648 ;;		_CC2500_ReadByte
  8649 ;;		_CC2500_WriteByte
  8650 ;;		_RF_Timeout_Counter
  8651 ;;		_setRF_TimeoutCleared
  8652 ;; This function is called by:
  8653 ;;		_CC2500_RxData
  8654 ;; This function uses a non-reentrant model
  8655 ;;
  8656                           
  8657                           
  8658                           ;psect for function _CC2500_ReadStatus
  8659  1104                     _CC2500_ReadStatus:	
  8660                           
  8661                           ;incstack = 0
  8662                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8663                           ;CC2500_ReadStatus@status_addr stored from wreg
  8664  1104  0020               	movlb	0	; select bank0
  8665  1105  00A4               	movwf	CC2500_ReadStatus@status_addr
  8666                           
  8667                           ;CC2500_B1.c: 309: RC0 = 0;
  8668  1106  100E               	bcf	14,0	;volatile
  8669                           
  8670                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8671  1107  0824               	movf	CC2500_ReadStatus@status_addr,w
  8672  1108  3EC0               	addlw	192
  8673  1109  00A3               	movwf	??_CC2500_ReadStatus
  8674  110A  0823               	movf	??_CC2500_ReadStatus,w
  8675  110B  0021               	movlb	1	; select bank1
  8676  110C  00D4               	movwf	_SPI0Buffer^(0+128)
  8677                           
  8678                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8679  110D  2911               	goto	l6273
  8680  110E                     l6271:	
  8681                           
  8682                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8683  110E  319E  2604  3191   	fcall	_RF_Timeout_Counter
  8684  1111                     l6273:	
  8685  1111  0020               	movlb	0	; select bank0
  8686  1112  1E8E               	btfss	14,5	;volatile
  8687  1113  2917               	goto	l6277
  8688  1114  0021               	movlb	1	; select bank1
  8689  1115  1F21               	btfss	(_RF1^(0+128)+1),6
  8690  1116  290E               	goto	l6271
  8691  1117                     l6277:	
  8692                           
  8693                           ;CC2500_B1.c: 314: };
  8694                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8695  1117  319B  235E  3191   	fcall	_setRF_TimeoutCleared
  8696                           
  8697                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8698  111A  3190  2066  3191   	fcall	_CC2500_WriteByte
  8699                           
  8700                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8701  111D  319F  2788         	fcall	_CC2500_ReadByte
  8702                           
  8703                           ;CC2500_B1.c: 319: RC0 = 1;
  8704  111F  0020               	movlb	0	; select bank0
  8705  1120  140E               	bsf	14,0	;volatile
  8706                           
  8707                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8708  1121  0021               	movlb	1	; select bank1
  8709  1122  0854               	movf	_SPI0Buffer^(0+128),w
  8710  1123  0020               	movlb	0	; select bank0
  8711  1124  00A3               	movwf	??_CC2500_ReadStatus
  8712  1125  0823               	movf	??_CC2500_ReadStatus,w
  8713  1126  0021               	movlb	1	; select bank1
  8714  1127  00DA               	movwf	_s_data^(0+128)
  8715  1128  0008               	return
  8716  1129                     __end_of_CC2500_ReadStatus:	
  8717                           
  8718                           	psect	text39
  8719  1F88                     __ptext39:	
  8720 ;; *************** function _CC2500_ReadByte *****************
  8721 ;; Defined at:
  8722 ;;		line 242 in file "../src/CC2500_B1.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;		None
  8725 ;; Auto vars:     Size  Location     Type
  8726 ;;  loop_b          1    2[BANK0 ] unsigned char 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;		None               void
  8729 ;; Registers used:
  8730 ;;		wreg, status,2, status,0
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;Total ram usage:        2 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:    5
  8743 ;; This function calls:
  8744 ;;		Nothing
  8745 ;; This function is called by:
  8746 ;;		_CC2500_RxData
  8747 ;;		_CC2500_ReadStatus
  8748 ;;		_CC2500_ReadREG
  8749 ;; This function uses a non-reentrant model
  8750 ;;
  8751                           
  8752                           
  8753                           ;psect for function _CC2500_ReadByte
  8754  1F88                     _CC2500_ReadByte:	
  8755                           
  8756                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8757                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8758                           
  8759                           ;incstack = 0
  8760                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8761  1F88  0020               	movlb	0	; select bank0
  8762  1F89  01A2               	clrf	CC2500_ReadByte@loop_b
  8763  1F8A                     L2:	
  8764  1F8A  3008               	movlw	8
  8765  1F8B  0222               	subwf	CC2500_ReadByte@loop_b,w
  8766  1F8C  1803               	btfsc	3,0
  8767  1F8D  0008               	return
  8768                           
  8769                           ;CC2500_B1.c: 245: RC3 = 1;
  8770  1F8E  158E               	bsf	14,3	;volatile
  8771                           
  8772                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8773  1F8F  1003               	clrc
  8774  1F90  0021               	movlb	1	; select bank1
  8775  1F91  0DD4               	rlf	_SPI0Buffer^(0+128),f
  8776                           
  8777                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8778  1F92  0020               	movlb	0	; select bank0
  8779  1F93  1E8E               	btfss	14,5	;volatile
  8780  1F94  2F98               	goto	l6167
  8781                           
  8782                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8783  1F95  0021               	movlb	1	; select bank1
  8784  1F96  1454               	bsf	_SPI0Buffer^(0+128),0
  8785  1F97  2F9E               	goto	l6169
  8786  1F98                     l6167:	
  8787                           
  8788                           ;CC2500_B1.c: 249: else
  8789                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8790  1F98  30FE               	movlw	254
  8791  1F99  0020               	movlb	0	; select bank0
  8792  1F9A  00A1               	movwf	??_CC2500_ReadByte
  8793  1F9B  0821               	movf	??_CC2500_ReadByte,w
  8794  1F9C  0021               	movlb	1	; select bank1
  8795  1F9D  05D4               	andwf	_SPI0Buffer^(0+128),f
  8796  1F9E                     l6169:	
  8797                           
  8798                           ;CC2500_B1.c: 251: RC3 = 0;
  8799  1F9E  0020               	movlb	0	; select bank0
  8800  1F9F  118E               	bcf	14,3	;volatile
  8801  1FA0  3001               	movlw	1
  8802  1FA1  00A1               	movwf	??_CC2500_ReadByte
  8803  1FA2  0821               	movf	??_CC2500_ReadByte,w
  8804  1FA3  07A2               	addwf	CC2500_ReadByte@loop_b,f
  8805  1FA4  2F8A               	goto	L2
  8806  1FA5                     __end_of_CC2500_ReadByte:	
  8807                           
  8808                           	psect	text40
  8809  1E19                     __ptext40:	
  8810 ;; *************** function _CC2500_PowerOnInitial *****************
  8811 ;; Defined at:
  8812 ;;		line 126 in file "../src/CC2500_B1.c"
  8813 ;; Parameters:    Size  Location     Type
  8814 ;;		None
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;		None
  8817 ;; Return value:  Size  Location     Type
  8818 ;;		None               void
  8819 ;; Registers used:
  8820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;Total ram usage:        0 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    8
  8833 ;; This function calls:
  8834 ;;		_CC2500_ClearRXFIFO
  8835 ;;		_CC2500_ClearTXFIFO
  8836 ;;		_CC2500_FrequencyCabr
  8837 ;;		_CC2500_InitPATable
  8838 ;;		_CC2500_InitSetREG
  8839 ;;		_CC2500_PowerRST
  8840 ;;		_CC2500_SIDLEMode
  8841 ;; This function is called by:
  8842 ;;		_main
  8843 ;;		_setRF_Main
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           
  8848                           ;psect for function _CC2500_PowerOnInitial
  8849  1E19                     _CC2500_PowerOnInitial:	
  8850                           
  8851                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8852                           
  8853                           ;incstack = 0
  8854                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8855  1E19  3194  2437  319E   	fcall	_CC2500_PowerRST
  8856                           
  8857                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8858  1E1C  3191  21A1  319E   	fcall	_CC2500_InitSetREG
  8859                           
  8860                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8861  1E1F  319F  27E1  319E   	fcall	_CC2500_InitPATable
  8862                           
  8863                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8864  1E22  319B  2366  319E   	fcall	_CC2500_ClearTXFIFO
  8865                           
  8866                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8867  1E25  319B  2362  319E   	fcall	_CC2500_ClearRXFIFO
  8868                           
  8869                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8870  1E28  319C  247E  319E   	fcall	_CC2500_FrequencyCabr
  8871                           
  8872                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8873  1E2B  319B  236A         	fcall	_CC2500_SIDLEMode
  8874  1E2D  0008               	return
  8875  1E2E                     __end_of_CC2500_PowerOnInitial:	
  8876                           
  8877                           	psect	text41
  8878  1B6A                     __ptext41:	
  8879 ;; *************** function _CC2500_SIDLEMode *****************
  8880 ;; Defined at:
  8881 ;;		line 216 in file "../src/CC2500_B1.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;		None
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;		None
  8886 ;; Return value:  Size  Location     Type
  8887 ;;		None               void
  8888 ;; Registers used:
  8889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;Total ram usage:        0 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    7
  8902 ;; This function calls:
  8903 ;;		_CC2500_WriteCommand
  8904 ;; This function is called by:
  8905 ;;		_CC2500_PowerOnInitial
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           
  8910                           ;psect for function _CC2500_SIDLEMode
  8911  1B6A                     _CC2500_SIDLEMode:	
  8912                           
  8913                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8914                           
  8915                           ;incstack = 0
  8916                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8917  1B6A  3036               	movlw	54
  8918  1B6B  319F  271B         	fcall	_CC2500_WriteCommand
  8919  1B6D  0008               	return
  8920  1B6E                     __end_of_CC2500_SIDLEMode:	
  8921                           
  8922                           	psect	text42
  8923  1437                     __ptext42:	
  8924 ;; *************** function _CC2500_PowerRST *****************
  8925 ;; Defined at:
  8926 ;;		line 139 in file "../src/CC2500_B1.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;		None
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;		None
  8931 ;; Return value:  Size  Location     Type
  8932 ;;		None               void
  8933 ;; Registers used:
  8934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;Total ram usage:        1 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    6
  8947 ;; This function calls:
  8948 ;;		_CC2500_WriteByte
  8949 ;;		_DelayTime_1us
  8950 ;;		_RF_Timeout_Counter
  8951 ;;		_setRF_TimeoutCleared
  8952 ;; This function is called by:
  8953 ;;		_CC2500_PowerOnInitial
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           
  8958                           ;psect for function _CC2500_PowerRST
  8959  1437                     _CC2500_PowerRST:	
  8960                           
  8961                           ;CC2500_B1.c: 140: RC3 = 0;
  8962                           
  8963                           ;incstack = 0
  8964                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8965  1437  0020               	movlb	0	; select bank0
  8966  1438  118E               	bcf	14,3	;volatile
  8967                           
  8968                           ;CC2500_B1.c: 141: RC4 = 0;
  8969  1439  120E               	bcf	14,4	;volatile
  8970                           
  8971                           ;CC2500_B1.c: 142: RC0 = 1;
  8972  143A  140E               	bsf	14,0	;volatile
  8973                           
  8974                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8975  143B  300A               	movlw	10
  8976  143C  00A1               	movwf	DelayTime_1us@count
  8977  143D  3000               	movlw	0
  8978  143E  00A2               	movwf	DelayTime_1us@count+1
  8979  143F  3191  2129  3194   	fcall	_DelayTime_1us
  8980                           
  8981                           ;CC2500_B1.c: 144: RC0 = 0;
  8982  1442  0020               	movlb	0	; select bank0
  8983  1443  100E               	bcf	14,0	;volatile
  8984                           
  8985                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8986  1444  300A               	movlw	10
  8987  1445  00A1               	movwf	DelayTime_1us@count
  8988  1446  3000               	movlw	0
  8989  1447  00A2               	movwf	DelayTime_1us@count+1
  8990  1448  3191  2129  3194   	fcall	_DelayTime_1us
  8991                           
  8992                           ;CC2500_B1.c: 146: RC0 = 1;
  8993  144B  0020               	movlb	0	; select bank0
  8994  144C  140E               	bsf	14,0	;volatile
  8995                           
  8996                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8997  144D  3028               	movlw	40
  8998  144E  00A1               	movwf	DelayTime_1us@count
  8999  144F  3000               	movlw	0
  9000  1450  00A2               	movwf	DelayTime_1us@count+1
  9001  1451  3191  2129  3194   	fcall	_DelayTime_1us
  9002                           
  9003                           ;CC2500_B1.c: 148: RC0 = 0;
  9004  1454  0020               	movlb	0	; select bank0
  9005  1455  100E               	bcf	14,0	;volatile
  9006                           
  9007                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9008  1456  3030               	movlw	48
  9009  1457  00A7               	movwf	??_CC2500_PowerRST
  9010  1458  0827               	movf	??_CC2500_PowerRST,w
  9011  1459  0021               	movlb	1	; select bank1
  9012  145A  00D4               	movwf	_SPI0Buffer^(0+128)
  9013                           
  9014                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9015  145B  2C5F               	goto	l6301
  9016  145C                     l6299:	
  9017                           
  9018                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9019  145C  319E  2604  3194   	fcall	_RF_Timeout_Counter
  9020  145F                     l6301:	
  9021  145F  0020               	movlb	0	; select bank0
  9022  1460  1E8E               	btfss	14,5	;volatile
  9023  1461  2C65               	goto	l6305
  9024  1462  0021               	movlb	1	; select bank1
  9025  1463  1F21               	btfss	(_RF1^(0+128)+1),6
  9026  1464  2C5C               	goto	l6299
  9027  1465                     l6305:	
  9028                           
  9029                           ;CC2500_B1.c: 152: };
  9030                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9031  1465  319B  235E  3194   	fcall	_setRF_TimeoutCleared
  9032                           
  9033                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9034  1468  3190  2066  3194   	fcall	_CC2500_WriteByte
  9035                           
  9036                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9037  146B  2C6F               	goto	l6311
  9038  146C                     l6309:	
  9039                           
  9040                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9041  146C  319E  2604  3194   	fcall	_RF_Timeout_Counter
  9042  146F                     l6311:	
  9043  146F  0020               	movlb	0	; select bank0
  9044  1470  1E8E               	btfss	14,5	;volatile
  9045  1471  2C75               	goto	l6315
  9046  1472  0021               	movlb	1	; select bank1
  9047  1473  1F21               	btfss	(_RF1^(0+128)+1),6
  9048  1474  2C6C               	goto	l6309
  9049  1475                     l6315:	
  9050                           
  9051                           ;CC2500_B1.c: 157: };
  9052                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9053  1475  319B  235E         	fcall	_setRF_TimeoutCleared
  9054                           
  9055                           ;CC2500_B1.c: 159: RC4 = 0;
  9056  1477  0020               	movlb	0	; select bank0
  9057  1478  120E               	bcf	14,4	;volatile
  9058                           
  9059                           ;CC2500_B1.c: 160: RC0 = 1;
  9060  1479  140E               	bsf	14,0	;volatile
  9061  147A  0008               	return
  9062  147B                     __end_of_CC2500_PowerRST:	
  9063                           
  9064                           	psect	text43
  9065  11A1                     __ptext43:	
  9066 ;; *************** function _CC2500_InitSetREG *****************
  9067 ;; Defined at:
  9068 ;;		line 166 in file "../src/CC2500_B1.c"
  9069 ;; Parameters:    Size  Location     Type
  9070 ;;		None
  9071 ;; Auto vars:     Size  Location     Type
  9072 ;;  loop_c          1    9[BANK0 ] unsigned char 
  9073 ;;  temp2           1    8[BANK0 ] unsigned char 
  9074 ;;  temp1           1    7[BANK0 ] unsigned char 
  9075 ;; Return value:  Size  Location     Type
  9076 ;;		None               void
  9077 ;; Registers used:
  9078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9079 ;; Tracked objects:
  9080 ;;		On entry : 0/0
  9081 ;;		On exit  : 0/0
  9082 ;;		Unchanged: 0/0
  9083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9088 ;;Total ram usage:        4 bytes
  9089 ;; Hardware stack levels used:    1
  9090 ;; Hardware stack levels required when called:    7
  9091 ;; This function calls:
  9092 ;;		_CC2500_WriteREG
  9093 ;; This function is called by:
  9094 ;;		_CC2500_PowerOnInitial
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           
  9099                           ;psect for function _CC2500_InitSetREG
  9100  11A1                     _CC2500_InitSetREG:	
  9101                           
  9102                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9103                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9104                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9105                           
  9106                           ;incstack = 0
  9107                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9108  11A1  0020               	movlb	0	; select bank0
  9109  11A2  01A9               	clrf	CC2500_InitSetREG@loop_c
  9110  11A3                     L3:	
  9111  11A3  302F               	movlw	47
  9112  11A4  0229               	subwf	CC2500_InitSetREG@loop_c,w
  9113  11A5  1803               	btfsc	3,0
  9114  11A6  0008               	return
  9115                           
  9116                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9117  11A7  0829               	movf	CC2500_InitSetREG@loop_c,w
  9118  11A8  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9119  11A9  0084               	movwf	4
  9120  11AA  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9121  11AB  1803               	skipnc
  9122  11AC  3E01               	addlw	1
  9123  11AD  0085               	movwf	5
  9124  11AE  0800               	movf	0,w	;code access
  9125  11AF  00A6               	movwf	??_CC2500_InitSetREG
  9126  11B0  0826               	movf	??_CC2500_InitSetREG,w
  9127  11B1  00A7               	movwf	CC2500_InitSetREG@temp1
  9128                           
  9129                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9130  11B2  0829               	movf	CC2500_InitSetREG@loop_c,w
  9131  11B3  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9132  11B4  0084               	movwf	4
  9133  11B5  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9134  11B6  1803               	skipnc
  9135  11B7  3E01               	addlw	1
  9136  11B8  0085               	movwf	5
  9137  11B9  0800               	movf	0,w	;code access
  9138  11BA  00A6               	movwf	??_CC2500_InitSetREG
  9139  11BB  0826               	movf	??_CC2500_InitSetREG,w
  9140  11BC  00A8               	movwf	CC2500_InitSetREG@temp2
  9141                           
  9142                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9143  11BD  0828               	movf	CC2500_InitSetREG@temp2,w
  9144  11BE  00A6               	movwf	??_CC2500_InitSetREG
  9145  11BF  0826               	movf	??_CC2500_InitSetREG,w
  9146  11C0  00A3               	movwf	CC2500_WriteREG@value
  9147  11C1  0827               	movf	CC2500_InitSetREG@temp1,w
  9148  11C2  3190  20E1  3191   	fcall	_CC2500_WriteREG
  9149  11C5  3001               	movlw	1
  9150  11C6  0020               	movlb	0	; select bank0
  9151  11C7  00A6               	movwf	??_CC2500_InitSetREG
  9152  11C8  0826               	movf	??_CC2500_InitSetREG,w
  9153  11C9  07A9               	addwf	CC2500_InitSetREG@loop_c,f
  9154  11CA  29A3               	goto	L3
  9155  11CB                     __end_of_CC2500_InitSetREG:	
  9156                           
  9157                           	psect	text44
  9158  1FE1                     __ptext44:	
  9159 ;; *************** function _CC2500_InitPATable *****************
  9160 ;; Defined at:
  9161 ;;		line 181 in file "../src/CC2500_B1.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;		None
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;  loop_d          1    8[BANK0 ] unsigned char 
  9166 ;;  temp            1    7[BANK0 ] unsigned char 
  9167 ;; Return value:  Size  Location     Type
  9168 ;;		None               void
  9169 ;; Registers used:
  9170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;Total ram usage:        3 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    7
  9183 ;; This function calls:
  9184 ;;		_CC2500_WriteREG
  9185 ;; This function is called by:
  9186 ;;		_CC2500_PowerOnInitial
  9187 ;; This function uses a non-reentrant model
  9188 ;;
  9189                           
  9190                           
  9191                           ;psect for function _CC2500_InitPATable
  9192  1FE1                     _CC2500_InitPATable:	
  9193                           
  9194                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9195                           ;CC2500_B1.c: 183: unsigned char temp;
  9196                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9197                           
  9198                           ;incstack = 0
  9199                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9200  1FE1  0020               	movlb	0	; select bank0
  9201  1FE2  01A8               	clrf	CC2500_InitPATable@loop_d
  9202  1FE3                     L4:	
  9203  1FE3  3008               	movlw	8
  9204  1FE4  0228               	subwf	CC2500_InitPATable@loop_d,w
  9205  1FE5  1803               	btfsc	3,0
  9206  1FE6  0008               	return
  9207                           
  9208                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9209  1FE7  0828               	movf	CC2500_InitPATable@loop_d,w
  9210  1FE8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9211  1FE9  0084               	movwf	4
  9212  1FEA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9213  1FEB  1803               	skipnc
  9214  1FEC  3E01               	addlw	1
  9215  1FED  0085               	movwf	5
  9216  1FEE  0800               	movf	0,w	;code access
  9217  1FEF  00A6               	movwf	??_CC2500_InitPATable
  9218  1FF0  0826               	movf	??_CC2500_InitPATable,w
  9219  1FF1  00A7               	movwf	CC2500_InitPATable@temp
  9220                           
  9221                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9222  1FF2  0827               	movf	CC2500_InitPATable@temp,w
  9223  1FF3  00A6               	movwf	??_CC2500_InitPATable
  9224  1FF4  0826               	movf	??_CC2500_InitPATable,w
  9225  1FF5  00A3               	movwf	CC2500_WriteREG@value
  9226  1FF6  303E               	movlw	62
  9227  1FF7  3190  20E1  319F   	fcall	_CC2500_WriteREG
  9228  1FFA  3001               	movlw	1
  9229  1FFB  0020               	movlb	0	; select bank0
  9230  1FFC  00A6               	movwf	??_CC2500_InitPATable
  9231  1FFD  0826               	movf	??_CC2500_InitPATable,w
  9232  1FFE  07A8               	addwf	CC2500_InitPATable@loop_d,f
  9233  1FFF  2FE3               	goto	L4
  9234  2000                     __end_of_CC2500_InitPATable:	
  9235                           
  9236                           	psect	text45
  9237  10E1                     __ptext45:	
  9238 ;; *************** function _CC2500_WriteREG *****************
  9239 ;; Defined at:
  9240 ;;		line 258 in file "../src/CC2500_B1.c"
  9241 ;; Parameters:    Size  Location     Type
  9242 ;;  w_addr          1    wreg     unsigned char 
  9243 ;;  value           1    3[BANK0 ] unsigned char 
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;  w_addr          1    5[BANK0 ] unsigned char 
  9246 ;; Return value:  Size  Location     Type
  9247 ;;		None               void
  9248 ;; Registers used:
  9249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9250 ;; Tracked objects:
  9251 ;;		On entry : 0/0
  9252 ;;		On exit  : 0/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9255 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;Total ram usage:        3 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:    6
  9262 ;; This function calls:
  9263 ;;		_CC2500_WriteByte
  9264 ;;		_RF_Timeout_Counter
  9265 ;;		_setRF_TimeoutCleared
  9266 ;; This function is called by:
  9267 ;;		_CC2500_InitSetREG
  9268 ;;		_CC2500_InitPATable
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           
  9273                           ;psect for function _CC2500_WriteREG
  9274  10E1                     _CC2500_WriteREG:	
  9275                           
  9276                           ;incstack = 0
  9277                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9278                           ;CC2500_WriteREG@w_addr stored from wreg
  9279  10E1  0020               	movlb	0	; select bank0
  9280  10E2  00A5               	movwf	CC2500_WriteREG@w_addr
  9281                           
  9282                           ;CC2500_B1.c: 259: RC0 = 0;
  9283  10E3  100E               	bcf	14,0	;volatile
  9284                           
  9285                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9286  10E4  0825               	movf	CC2500_WriteREG@w_addr,w
  9287  10E5  00A4               	movwf	??_CC2500_WriteREG
  9288  10E6  0824               	movf	??_CC2500_WriteREG,w
  9289  10E7  0021               	movlb	1	; select bank1
  9290  10E8  00D4               	movwf	_SPI0Buffer^(0+128)
  9291                           
  9292                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9293  10E9  28ED               	goto	l6191
  9294  10EA                     l6189:	
  9295                           
  9296                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9297  10EA  319E  2604  3190   	fcall	_RF_Timeout_Counter
  9298  10ED                     l6191:	
  9299  10ED  0020               	movlb	0	; select bank0
  9300  10EE  1E8E               	btfss	14,5	;volatile
  9301  10EF  28F3               	goto	l6195
  9302  10F0  0021               	movlb	1	; select bank1
  9303  10F1  1F21               	btfss	(_RF1^(0+128)+1),6
  9304  10F2  28EA               	goto	l6189
  9305  10F3                     l6195:	
  9306                           
  9307                           ;CC2500_B1.c: 263: };
  9308                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9309  10F3  319B  235E  3190   	fcall	_setRF_TimeoutCleared
  9310                           
  9311                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9312  10F6  3190  2066  3190   	fcall	_CC2500_WriteByte
  9313                           
  9314                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9315  10F9  0020               	movlb	0	; select bank0
  9316  10FA  0823               	movf	CC2500_WriteREG@value,w
  9317  10FB  00A4               	movwf	??_CC2500_WriteREG
  9318  10FC  0824               	movf	??_CC2500_WriteREG,w
  9319  10FD  0021               	movlb	1	; select bank1
  9320  10FE  00D4               	movwf	_SPI0Buffer^(0+128)
  9321                           
  9322                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9323  10FF  3190  2066         	fcall	_CC2500_WriteByte
  9324                           
  9325                           ;CC2500_B1.c: 269: RC0 = 1;
  9326  1101  0020               	movlb	0	; select bank0
  9327  1102  140E               	bsf	14,0	;volatile
  9328  1103  0008               	return
  9329  1104                     __end_of_CC2500_WriteREG:	
  9330                           
  9331                           	psect	text46
  9332  1C7E                     __ptext46:	
  9333 ;; *************** function _CC2500_FrequencyCabr *****************
  9334 ;; Defined at:
  9335 ;;		line 208 in file "../src/CC2500_B1.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;		None
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;		None
  9340 ;; Return value:  Size  Location     Type
  9341 ;;		None               void
  9342 ;; Registers used:
  9343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;Total ram usage:        0 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    7
  9356 ;; This function calls:
  9357 ;;		_CC2500_WriteCommand
  9358 ;;		_DelayTime_1us
  9359 ;; This function is called by:
  9360 ;;		_CC2500_PowerOnInitial
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _CC2500_FrequencyCabr
  9366  1C7E                     _CC2500_FrequencyCabr:	
  9367                           
  9368                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9372  1C7E  3033               	movlw	51
  9373  1C7F  319F  271B  319C   	fcall	_CC2500_WriteCommand
  9374                           
  9375                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9376  1C82  30E8               	movlw	232
  9377  1C83  0020               	movlb	0	; select bank0
  9378  1C84  00A1               	movwf	DelayTime_1us@count
  9379  1C85  3003               	movlw	3
  9380  1C86  00A2               	movwf	DelayTime_1us@count+1
  9381  1C87  3191  2129         	fcall	_DelayTime_1us
  9382  1C89  0008               	return
  9383  1C8A                     __end_of_CC2500_FrequencyCabr:	
  9384                           
  9385                           	psect	text47
  9386  1129                     __ptext47:	
  9387 ;; *************** function _DelayTime_1us *****************
  9388 ;; Defined at:
  9389 ;;		line 327 in file "../src/CC2500_B1.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  count           2    1[BANK0 ] int 
  9392 ;; Auto vars:     Size  Location     Type
  9393 ;;  j               2    5[BANK0 ] unsigned int 
  9394 ;;  i               2    3[BANK0 ] unsigned int 
  9395 ;; Return value:  Size  Location     Type
  9396 ;;		None               void
  9397 ;; Registers used:
  9398 ;;		wreg, status,2
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9404 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;Total ram usage:        6 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    5
  9411 ;; This function calls:
  9412 ;;		Nothing
  9413 ;; This function is called by:
  9414 ;;		_CC2500_PowerRST
  9415 ;;		_CC2500_FrequencyCabr
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           
  9420                           ;psect for function _DelayTime_1us
  9421  1129                     _DelayTime_1us:	
  9422                           
  9423                           ;CC2500_B1.c: 328: unsigned int i, j;
  9424                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9425                           
  9426                           ;incstack = 0
  9427                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9428  1129  3001               	movlw	1
  9429  112A  0020               	movlb	0	; select bank0
  9430  112B  00A3               	movwf	DelayTime_1us@i
  9431  112C  3000               	movlw	0
  9432  112D  00A4               	movwf	DelayTime_1us@i+1
  9433  112E                     l347:	
  9434  112E  0822               	movf	DelayTime_1us@count+1,w
  9435  112F  0224               	subwf	DelayTime_1us@i+1,w
  9436  1130  1D03               	skipz
  9437  1131  2934               	goto	u5275
  9438  1132  0821               	movf	DelayTime_1us@count,w
  9439  1133  0223               	subwf	DelayTime_1us@i,w
  9440  1134                     u5275:	
  9441  1134  1803               	btfsc	3,0
  9442  1135  0008               	return
  9443                           
  9444                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9445  1136  01A5               	clrf	DelayTime_1us@j
  9446  1137  01A6               	clrf	DelayTime_1us@j+1
  9447  1138  3000               	movlw	0
  9448  1139  0226               	subwf	DelayTime_1us@j+1,w
  9449  113A  3002               	movlw	2
  9450  113B  1903               	skipnz
  9451  113C  0225               	subwf	DelayTime_1us@j,w
  9452  113D  1803               	btfsc	3,0
  9453  113E  294A               	goto	l6183
  9454  113F                     l6181:	
  9455  113F  3001               	movlw	1
  9456  1140  07A5               	addwf	DelayTime_1us@j,f
  9457  1141  3000               	movlw	0
  9458  1142  3DA6               	addwfc	DelayTime_1us@j+1,f
  9459  1143  3000               	movlw	0
  9460  1144  0226               	subwf	DelayTime_1us@j+1,w
  9461  1145  3002               	movlw	2
  9462  1146  1903               	skipnz
  9463  1147  0225               	subwf	DelayTime_1us@j,w
  9464  1148  1C03               	skipc
  9465  1149  293F               	goto	l6181
  9466  114A                     l6183:	
  9467  114A  3001               	movlw	1
  9468  114B  07A3               	addwf	DelayTime_1us@i,f
  9469  114C  3000               	movlw	0
  9470  114D  3DA4               	addwfc	DelayTime_1us@i+1,f
  9471  114E  292E               	goto	l347
  9472  114F                     __end_of_DelayTime_1us:	
  9473                           
  9474                           	psect	text48
  9475  1B66                     __ptext48:	
  9476 ;; *************** function _CC2500_ClearTXFIFO *****************
  9477 ;; Defined at:
  9478 ;;		line 194 in file "../src/CC2500_B1.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;		None
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;		None
  9483 ;; Return value:  Size  Location     Type
  9484 ;;		None               void
  9485 ;; Registers used:
  9486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;Total ram usage:        0 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    7
  9499 ;; This function calls:
  9500 ;;		_CC2500_WriteCommand
  9501 ;; This function is called by:
  9502 ;;		_CC2500_PowerOnInitial
  9503 ;; This function uses a non-reentrant model
  9504 ;;
  9505                           
  9506                           
  9507                           ;psect for function _CC2500_ClearTXFIFO
  9508  1B66                     _CC2500_ClearTXFIFO:	
  9509                           
  9510                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9511                           
  9512                           ;incstack = 0
  9513                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9514  1B66  303B               	movlw	59
  9515  1B67  319F  271B         	fcall	_CC2500_WriteCommand
  9516  1B69  0008               	return
  9517  1B6A                     __end_of_CC2500_ClearTXFIFO:	
  9518                           
  9519                           	psect	text49
  9520  1B62                     __ptext49:	
  9521 ;; *************** function _CC2500_ClearRXFIFO *****************
  9522 ;; Defined at:
  9523 ;;		line 201 in file "../src/CC2500_B1.c"
  9524 ;; Parameters:    Size  Location     Type
  9525 ;;		None
  9526 ;; Auto vars:     Size  Location     Type
  9527 ;;		None
  9528 ;; Return value:  Size  Location     Type
  9529 ;;		None               void
  9530 ;; Registers used:
  9531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9532 ;; Tracked objects:
  9533 ;;		On entry : 0/0
  9534 ;;		On exit  : 0/0
  9535 ;;		Unchanged: 0/0
  9536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9541 ;;Total ram usage:        0 bytes
  9542 ;; Hardware stack levels used:    1
  9543 ;; Hardware stack levels required when called:    7
  9544 ;; This function calls:
  9545 ;;		_CC2500_WriteCommand
  9546 ;; This function is called by:
  9547 ;;		_CC2500_PowerOnInitial
  9548 ;; This function uses a non-reentrant model
  9549 ;;
  9550                           
  9551                           
  9552                           ;psect for function _CC2500_ClearRXFIFO
  9553  1B62                     _CC2500_ClearRXFIFO:	
  9554                           
  9555                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9556                           
  9557                           ;incstack = 0
  9558                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9559  1B62  303A               	movlw	58
  9560  1B63  319F  271B         	fcall	_CC2500_WriteCommand
  9561  1B65  0008               	return
  9562  1B66                     __end_of_CC2500_ClearRXFIFO:	
  9563                           
  9564                           	psect	text50
  9565  1F1B                     __ptext50:	
  9566 ;; *************** function _CC2500_WriteCommand *****************
  9567 ;; Defined at:
  9568 ;;		line 292 in file "../src/CC2500_B1.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;  command         1    wreg     unsigned char 
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;  command         1    4[BANK0 ] unsigned char 
  9573 ;; Return value:  Size  Location     Type
  9574 ;;		None               void
  9575 ;; Registers used:
  9576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;Total ram usage:        2 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    6
  9589 ;; This function calls:
  9590 ;;		_CC2500_WriteByte
  9591 ;;		_RF_Timeout_Counter
  9592 ;;		_setRF_TimeoutCleared
  9593 ;; This function is called by:
  9594 ;;		_CC2500_TxData
  9595 ;;		_CC2500_RxData
  9596 ;;		_CC2500_ClearTXFIFO
  9597 ;;		_CC2500_ClearRXFIFO
  9598 ;;		_CC2500_FrequencyCabr
  9599 ;;		_CC2500_SIDLEMode
  9600 ;;		_setRF_Main
  9601 ;;		_RF_RxDisable
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           
  9606                           ;psect for function _CC2500_WriteCommand
  9607  1F1B                     _CC2500_WriteCommand:	
  9608                           
  9609                           ;incstack = 0
  9610                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9611                           ;CC2500_WriteCommand@command stored from wreg
  9612  1F1B  0020               	movlb	0	; select bank0
  9613  1F1C  00A4               	movwf	CC2500_WriteCommand@command
  9614                           
  9615                           ;CC2500_B1.c: 293: RC0 = 0;
  9616  1F1D  100E               	bcf	14,0	;volatile
  9617                           
  9618                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9619  1F1E  0824               	movf	CC2500_WriteCommand@command,w
  9620  1F1F  00A3               	movwf	??_CC2500_WriteCommand
  9621  1F20  0823               	movf	??_CC2500_WriteCommand,w
  9622  1F21  0021               	movlb	1	; select bank1
  9623  1F22  00D4               	movwf	_SPI0Buffer^(0+128)
  9624                           
  9625                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9626  1F23  2F27               	goto	l6145
  9627  1F24                     l6143:	
  9628                           
  9629                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9630  1F24  319E  2604  319F   	fcall	_RF_Timeout_Counter
  9631  1F27                     l6145:	
  9632  1F27  0020               	movlb	0	; select bank0
  9633  1F28  1E8E               	btfss	14,5	;volatile
  9634  1F29  2F2D               	goto	l6149
  9635  1F2A  0021               	movlb	1	; select bank1
  9636  1F2B  1F21               	btfss	(_RF1^(0+128)+1),6
  9637  1F2C  2F24               	goto	l6143
  9638  1F2D                     l6149:	
  9639                           
  9640                           ;CC2500_B1.c: 298: };
  9641                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9642  1F2D  319B  235E  319F   	fcall	_setRF_TimeoutCleared
  9643                           
  9644                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9645  1F30  3190  2066         	fcall	_CC2500_WriteByte
  9646                           
  9647                           ;CC2500_B1.c: 302: RC0 = 1;
  9648  1F32  0020               	movlb	0	; select bank0
  9649  1F33  140E               	bsf	14,0	;volatile
  9650  1F34  0008               	return
  9651  1F35                     __end_of_CC2500_WriteCommand:	
  9652                           
  9653                           	psect	text51
  9654  1B5E                     __ptext51:	
  9655 ;; *************** function _setRF_TimeoutCleared *****************
  9656 ;; Defined at:
  9657 ;;		line 149 in file "../src/RF_Control_B1.c"
  9658 ;; Parameters:    Size  Location     Type
  9659 ;;		None
  9660 ;; Auto vars:     Size  Location     Type
  9661 ;;		None
  9662 ;; Return value:  Size  Location     Type
  9663 ;;		None               void
  9664 ;; Registers used:
  9665 ;;		status,2
  9666 ;; Tracked objects:
  9667 ;;		On entry : 0/0
  9668 ;;		On exit  : 0/0
  9669 ;;		Unchanged: 0/0
  9670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;Total ram usage:        0 bytes
  9676 ;; Hardware stack levels used:    1
  9677 ;; Hardware stack levels required when called:    5
  9678 ;; This function calls:
  9679 ;;		Nothing
  9680 ;; This function is called by:
  9681 ;;		_CC2500_TxData
  9682 ;;		_CC2500_RxData
  9683 ;;		_CC2500_PowerRST
  9684 ;;		_CC2500_WriteREG
  9685 ;;		_CC2500_WriteCommand
  9686 ;;		_CC2500_ReadStatus
  9687 ;;		_CC2500_ReadREG
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           
  9692                           ;psect for function _setRF_TimeoutCleared
  9693  1B5E                     _setRF_TimeoutCleared:	
  9694                           
  9695                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9699  1B5E  0021               	movlb	1	; select bank1
  9700  1B5F  01AC               	clrf	(_RF1^(0+128)+12)
  9701  1B60  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9702  1B61  0008               	return
  9703  1B62                     __end_of_setRF_TimeoutCleared:	
  9704                           
  9705                           	psect	text52
  9706  1E04                     __ptext52:	
  9707 ;; *************** function _RF_Timeout_Counter *****************
  9708 ;; Defined at:
  9709 ;;		line 141 in file "../src/RF_Control_B1.c"
  9710 ;; Parameters:    Size  Location     Type
  9711 ;;		None
  9712 ;; Auto vars:     Size  Location     Type
  9713 ;;		None
  9714 ;; Return value:  Size  Location     Type
  9715 ;;		None               void
  9716 ;; Registers used:
  9717 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;Total ram usage:        0 bytes
  9728 ;; Hardware stack levels used:    1
  9729 ;; Hardware stack levels required when called:    5
  9730 ;; This function calls:
  9731 ;;		Nothing
  9732 ;; This function is called by:
  9733 ;;		_CC2500_TxData
  9734 ;;		_CC2500_RxData
  9735 ;;		_CC2500_PowerRST
  9736 ;;		_CC2500_WriteREG
  9737 ;;		_CC2500_WriteCommand
  9738 ;;		_CC2500_ReadStatus
  9739 ;;		_CC2500_ReadREG
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           
  9744                           ;psect for function _RF_Timeout_Counter
  9745  1E04                     _RF_Timeout_Counter:	
  9746                           
  9747                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9748                           
  9749                           ;incstack = 0
  9750                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9751  1E04  3001               	movlw	1
  9752  1E05  0021               	movlb	1	; select bank1
  9753  1E06  07AC               	addwf	(_RF1^(0+128)+12),f
  9754  1E07  3000               	movlw	0
  9755  1E08  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9756                           
  9757                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9758  1E09  300C               	movlw	12
  9759  1E0A  3EA0               	addlw	_RF1& (0+255)
  9760  1E0B  0086               	movwf	6
  9761  1E0C  0187               	clrf	7
  9762  1E0D  3F40               	moviw [0]fsr1
  9763  1E0E  3AA8               	xorlw	168
  9764  1E0F  1D03               	skipz
  9765  1E10  2E13               	goto	u5005
  9766  1E11  3F41               	moviw [1]fsr1
  9767  1E12  3A61               	xorlw	97
  9768  1E13                     u5005:	
  9769  1E13  1D03               	skipz
  9770  1E14  0008               	return
  9771                           
  9772                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9773  1E15  01AC               	clrf	(_RF1^(0+128)+12)
  9774  1E16  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9775                           
  9776                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9777  1E17  1721               	bsf	(_RF1^(0+128)+1),6
  9778  1E18  0008               	return
  9779  1E19                     __end_of_RF_Timeout_Counter:	
  9780                           
  9781                           	psect	text53
  9782  1066                     __ptext53:	
  9783 ;; *************** function _CC2500_WriteByte *****************
  9784 ;; Defined at:
  9785 ;;		line 226 in file "../src/CC2500_B1.c"
  9786 ;; Parameters:    Size  Location     Type
  9787 ;;		None
  9788 ;; Auto vars:     Size  Location     Type
  9789 ;;  loop_a          1    2[BANK0 ] unsigned char 
  9790 ;; Return value:  Size  Location     Type
  9791 ;;		None               void
  9792 ;; Registers used:
  9793 ;;		wreg, status,2, status,0
  9794 ;; Tracked objects:
  9795 ;;		On entry : 0/0
  9796 ;;		On exit  : 0/0
  9797 ;;		Unchanged: 0/0
  9798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9803 ;;Total ram usage:        2 bytes
  9804 ;; Hardware stack levels used:    1
  9805 ;; Hardware stack levels required when called:    5
  9806 ;; This function calls:
  9807 ;;		Nothing
  9808 ;; This function is called by:
  9809 ;;		_CC2500_TxData
  9810 ;;		_CC2500_RxData
  9811 ;;		_CC2500_PowerRST
  9812 ;;		_CC2500_WriteREG
  9813 ;;		_CC2500_WriteCommand
  9814 ;;		_CC2500_ReadStatus
  9815 ;;		_CC2500_ReadREG
  9816 ;; This function uses a non-reentrant model
  9817 ;;
  9818                           
  9819                           
  9820                           ;psect for function _CC2500_WriteByte
  9821  1066                     _CC2500_WriteByte:	
  9822                           
  9823                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9824                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9825                           
  9826                           ;incstack = 0
  9827                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9828  1066  0020               	movlb	0	; select bank0
  9829  1067  01A2               	clrf	CC2500_WriteByte@loop_a
  9830  1068                     L5:	
  9831  1068  3008               	movlw	8
  9832  1069  0222               	subwf	CC2500_WriteByte@loop_a,w
  9833  106A  1803               	btfsc	3,0
  9834  106B  0008               	return
  9835                           
  9836                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9837  106C  0021               	movlb	1	; select bank1
  9838  106D  1FD4               	btfss	_SPI0Buffer^(0+128),7
  9839  106E  2872               	goto	l303
  9840                           
  9841                           ;CC2500_B1.c: 230: RC4 = 1;
  9842  106F  0020               	movlb	0	; select bank0
  9843  1070  160E               	bsf	14,4	;volatile
  9844  1071  2874               	goto	l304
  9845  1072                     l303:	
  9846                           
  9847                           ;CC2500_B1.c: 231: else
  9848                           ;CC2500_B1.c: 232: RC4 = 0;
  9849  1072  0020               	movlb	0	; select bank0
  9850  1073  120E               	bcf	14,4	;volatile
  9851  1074                     l304:	
  9852                           
  9853                           ;CC2500_B1.c: 233: RC3 = 1;
  9854  1074  158E               	bsf	14,3	;volatile
  9855                           
  9856                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9857  1075  1003               	clrc
  9858  1076  0021               	movlb	1	; select bank1
  9859  1077  0DD4               	rlf	_SPI0Buffer^(0+128),f
  9860                           
  9861                           ;CC2500_B1.c: 235: RC3 = 0;
  9862  1078  0020               	movlb	0	; select bank0
  9863  1079  118E               	bcf	14,3	;volatile
  9864  107A  3001               	movlw	1
  9865  107B  00A1               	movwf	??_CC2500_WriteByte
  9866  107C  0821               	movf	??_CC2500_WriteByte,w
  9867  107D  07A2               	addwf	CC2500_WriteByte@loop_a,f
  9868  107E  2868               	goto	L5
  9869  107F                     __end_of_CC2500_WriteByte:	
  9870                           
  9871                           	psect	text54
  9872  1B3E                     __ptext54:	
  9873 ;; *************** function _RF_Initialization *****************
  9874 ;; Defined at:
  9875 ;;		line 9 in file "../src/RF_Control_B1.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;		None
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;		None
  9880 ;; Return value:  Size  Location     Type
  9881 ;;		None               void
  9882 ;; Registers used:
  9883 ;;		wreg, status,2, status,0, pclath, cstack
  9884 ;; Tracked objects:
  9885 ;;		On entry : 0/0
  9886 ;;		On exit  : 0/0
  9887 ;;		Unchanged: 0/0
  9888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;Total ram usage:        0 bytes
  9894 ;; Hardware stack levels used:    1
  9895 ;; Hardware stack levels required when called:    6
  9896 ;; This function calls:
  9897 ;;		_setRF_Initialization
  9898 ;; This function is called by:
  9899 ;;		_main
  9900 ;; This function uses a non-reentrant model
  9901 ;;
  9902                           
  9903                           
  9904                           ;psect for function _RF_Initialization
  9905  1B3E                     _RF_Initialization:	
  9906                           
  9907                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9908                           
  9909                           ;incstack = 0
  9910                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9911  1B3E  319C  2407         	fcall	_setRF_Initialization
  9912  1B40  0008               	return
  9913  1B41                     __end_of_RF_Initialization:	
  9914                           
  9915                           	psect	text55
  9916  1C07                     __ptext55:	
  9917 ;; *************** function _setRF_Initialization *****************
  9918 ;; Defined at:
  9919 ;;		line 17 in file "../src/RF_Control_B1.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;		None
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;		None
  9924 ;; Return value:  Size  Location     Type
  9925 ;;		None               void
  9926 ;; Registers used:
  9927 ;;		wreg
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;Total ram usage:        1 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; Hardware stack levels required when called:    5
  9940 ;; This function calls:
  9941 ;;		Nothing
  9942 ;; This function is called by:
  9943 ;;		_RF_Initialization
  9944 ;; This function uses a non-reentrant model
  9945 ;;
  9946                           
  9947                           
  9948                           ;psect for function _setRF_Initialization
  9949  1C07                     _setRF_Initialization:	
  9950                           
  9951                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9952                           
  9953                           ;incstack = 0
  9954                           ; Regs used in _setRF_Initialization: [wreg]
  9955  1C07  3015               	movlw	21
  9956  1C08  0020               	movlb	0	; select bank0
  9957  1C09  00A1               	movwf	??_setRF_Initialization
  9958  1C0A  0821               	movf	??_setRF_Initialization,w
  9959  1C0B  0021               	movlb	1	; select bank1
  9960  1C0C  00D7               	movwf	_Tx_Length^(0+128)
  9961                           
  9962                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9963  1C0D  30C8               	movlw	200
  9964  1C0E  00A7               	movwf	(_RF1^(0+128)+7)
  9965  1C0F  3000               	movlw	0
  9966  1C10  00A8               	movwf	(_RF1^(0+128)+8)
  9967  1C11  0008               	return
  9968  1C12                     __end_of_setRF_Initialization:	
  9969                           
  9970                           	psect	text56
  9971  1D6D                     __ptext56:	
  9972 ;; *************** function _Mcu_Initialization *****************
  9973 ;; Defined at:
  9974 ;;		line 30 in file "../src/MCU_B1.c"
  9975 ;; Parameters:    Size  Location     Type
  9976 ;;		None
  9977 ;; Auto vars:     Size  Location     Type
  9978 ;;		None
  9979 ;; Return value:  Size  Location     Type
  9980 ;;		None               void
  9981 ;; Registers used:
  9982 ;;		wreg, status,2, status,0, pclath, cstack
  9983 ;; Tracked objects:
  9984 ;;		On entry : 0/0
  9985 ;;		On exit  : 0/0
  9986 ;;		Unchanged: 0/0
  9987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;Total ram usage:        0 bytes
  9993 ;; Hardware stack levels used:    1
  9994 ;; Hardware stack levels required when called:    6
  9995 ;; This function calls:
  9996 ;;		_ADC_Set
  9997 ;;		_Fosc_Set
  9998 ;;		_IOC_Set
  9999 ;;		_IO_Set
 10000 ;;		_TMR1_Set
 10001 ;;		_WDT_Set
 10002 ;; This function is called by:
 10003 ;;		_main
 10004 ;; This function uses a non-reentrant model
 10005 ;;
 10006                           
 10007                           
 10008                           ;psect for function _Mcu_Initialization
 10009  1D6D                     _Mcu_Initialization:	
 10010                           
 10011                           ;MCU_B1.c: 32: Fosc_Set();
 10012                           
 10013                           ;incstack = 0
 10014                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10015  1D6D  319B  235A  319D   	fcall	_Fosc_Set
 10016                           
 10017                           ;MCU_B1.c: 34: IO_Set();
 10018  1D70  319F  2701  319D   	fcall	_IO_Set
 10019                           
 10020                           ;MCU_B1.c: 36: ;;
 10021                           ;MCU_B1.c: 38: TMR1_Set();
 10022  1D73  319C  2472  319D   	fcall	_TMR1_Set
 10023                           
 10024                           ;MCU_B1.c: 40: ADC_Set();
 10025  1D76  319B  2390  319D   	fcall	_ADC_Set
 10026                           
 10027                           ;MCU_B1.c: 42: ;;
 10028                           ;MCU_B1.c: 44: ;;
 10029                           ;MCU_B1.c: 46: IOC_Set();
 10030  1D79  319B  23F1  319D   	fcall	_IOC_Set
 10031                           
 10032                           ;MCU_B1.c: 48: ;;
 10033                           ;MCU_B1.c: 50: ;;
 10034                           ;MCU_B1.c: 52: WDT_Set();
 10035  1D7C  319B  23FC         	fcall	_WDT_Set
 10036  1D7E  0008               	return
 10037  1D7F                     __end_of_Mcu_Initialization:	
 10038                           
 10039                           	psect	text57
 10040  1BFC                     __ptext57:	
 10041 ;; *************** function _WDT_Set *****************
 10042 ;; Defined at:
 10043 ;;		line 1089 in file "../src/MCU_B1.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;		None
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;		None
 10048 ;; Return value:  Size  Location     Type
 10049 ;;		None               void
 10050 ;; Registers used:
 10051 ;;		wreg
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;Total ram usage:        1 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    5
 10064 ;; This function calls:
 10065 ;;		Nothing
 10066 ;; This function is called by:
 10067 ;;		_Mcu_Initialization
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           
 10072                           ;psect for function _WDT_Set
 10073  1BFC                     _WDT_Set:	
 10074                           
 10075                           ;MCU_B1.c: 1096: WDTCON = 0b00010111;;
 10076                           
 10077                           ;incstack = 0
 10078                           ; Regs used in _WDT_Set: [wreg]
 10079  1BFC  3017               	movlw	23
 10080  1BFD  0021               	movlb	1	; select bank1
 10081  1BFE  0097               	movwf	23	;volatile
 10082                           
 10083                           ;MCU_B1.c: 1098: WDT.Enable = 1;
 10084  1BFF  1449               	bsf	_WDT^(0+128),0
 10085                           
 10086                           ;MCU_B1.c: 1099: WDT.Timer = 10;
 10087  1C00  300A               	movlw	10
 10088  1C01  0020               	movlb	0	; select bank0
 10089  1C02  00A1               	movwf	??_WDT_Set
 10090  1C03  0821               	movf	??_WDT_Set,w
 10091  1C04  0021               	movlb	1	; select bank1
 10092  1C05  00CA               	movwf	(_WDT^(0+128)+1)
 10093  1C06  0008               	return
 10094  1C07                     __end_of_WDT_Set:	
 10095                           
 10096                           	psect	text58
 10097  1C72                     __ptext58:	
 10098 ;; *************** function _TMR1_Set *****************
 10099 ;; Defined at:
 10100 ;;		line 226 in file "../src/MCU_B1.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;		None
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;		None
 10105 ;; Return value:  Size  Location     Type
 10106 ;;		None               void
 10107 ;; Registers used:
 10108 ;;		wreg
 10109 ;; Tracked objects:
 10110 ;;		On entry : 0/0
 10111 ;;		On exit  : 0/0
 10112 ;;		Unchanged: 0/0
 10113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;Total ram usage:        0 bytes
 10119 ;; Hardware stack levels used:    1
 10120 ;; Hardware stack levels required when called:    5
 10121 ;; This function calls:
 10122 ;;		Nothing
 10123 ;; This function is called by:
 10124 ;;		_Mcu_Initialization
 10125 ;; This function uses a non-reentrant model
 10126 ;;
 10127                           
 10128                           
 10129                           ;psect for function _TMR1_Set
 10130  1C72                     _TMR1_Set:	
 10131                           
 10132                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10133                           
 10134                           ;incstack = 0
 10135                           ; Regs used in _TMR1_Set: [wreg]
 10136  1C72  3041               	movlw	65
 10137  1C73  0020               	movlb	0	; select bank0
 10138  1C74  0098               	movwf	24	;volatile
 10139                           
 10140                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10141  1C75  30FA               	movlw	250
 10142  1C76  0097               	movwf	23	;volatile
 10143                           
 10144                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10145  1C77  3038               	movlw	56
 10146  1C78  0096               	movwf	22	;volatile
 10147                           
 10148                           ;MCU_B1.c: 230: TMR1IE = 1;
 10149  1C79  0021               	movlb	1	; select bank1
 10150  1C7A  1411               	bsf	17,0	;volatile
 10151                           
 10152                           ;MCU_B1.c: 231: PEIE = 1;
 10153  1C7B  170B               	bsf	11,6	;volatile
 10154                           
 10155                           ;MCU_B1.c: 232: GIE = 1;
 10156  1C7C  178B               	bsf	11,7	;volatile
 10157  1C7D  0008               	return
 10158  1C7E                     __end_of_TMR1_Set:	
 10159                           
 10160                           	psect	text59
 10161  1F01                     __ptext59:	
 10162 ;; *************** function _IO_Set *****************
 10163 ;; Defined at:
 10164 ;;		line 60 in file "../src/MCU_B1.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;		None
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;		None
 10169 ;; Return value:  Size  Location     Type
 10170 ;;		None               void
 10171 ;; Registers used:
 10172 ;;		wreg, status,2
 10173 ;; Tracked objects:
 10174 ;;		On entry : 0/0
 10175 ;;		On exit  : 0/0
 10176 ;;		Unchanged: 0/0
 10177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;Total ram usage:        0 bytes
 10183 ;; Hardware stack levels used:    1
 10184 ;; Hardware stack levels required when called:    5
 10185 ;; This function calls:
 10186 ;;		Nothing
 10187 ;; This function is called by:
 10188 ;;		_Mcu_Initialization
 10189 ;; This function uses a non-reentrant model
 10190 ;;
 10191                           
 10192                           
 10193                           ;psect for function _IO_Set
 10194  1F01                     _IO_Set:	
 10195                           
 10196                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10197                           
 10198                           ;incstack = 0
 10199                           ; Regs used in _IO_Set: [wreg+status,2]
 10200  1F01  30F7               	movlw	247
 10201  1F02  0021               	movlb	1	; select bank1
 10202  1F03  008C               	movwf	12	;volatile
 10203                           
 10204                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10205  1F04  3004               	movlw	4
 10206  1F05  008D               	movwf	13	;volatile
 10207                           
 10208                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10209  1F06  3026               	movlw	38
 10210  1F07  008E               	movwf	14	;volatile
 10211                           
 10212                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10213  1F08  0022               	movlb	2	; select bank2
 10214  1F09  018C               	clrf	12	;volatile
 10215                           
 10216                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10217  1F0A  018D               	clrf	13	;volatile
 10218                           
 10219                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10220  1F0B  018E               	clrf	14	;volatile
 10221                           
 10222                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10223  1F0C  300E               	movlw	14
 10224  1F0D  0023               	movlb	3	; select bank3
 10225  1F0E  008C               	movwf	12	;volatile
 10226                           
 10227                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10228  1F0F  018D               	clrf	13	;volatile
 10229                           
 10230                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10231  1F10  018E               	clrf	14	;volatile
 10232                           
 10233                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10234  1F11  30F7               	movlw	247
 10235  1F12  0020               	movlb	0	; select bank0
 10236  1F13  008C               	movwf	12	;volatile
 10237                           
 10238                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10239  1F14  3004               	movlw	4
 10240  1F15  008D               	movwf	13	;volatile
 10241                           
 10242                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10243  1F16  3026               	movlw	38
 10244  1F17  008E               	movwf	14	;volatile
 10245                           
 10246                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10247  1F18  0024               	movlb	4	; select bank4
 10248  1F19  018D               	clrf	13	;volatile
 10249  1F1A  0008               	return
 10250  1F1B                     __end_of_IO_Set:	
 10251                           
 10252                           	psect	text60
 10253  1BF1                     __ptext60:	
 10254 ;; *************** function _IOC_Set *****************
 10255 ;; Defined at:
 10256 ;;		line 379 in file "../src/MCU_B1.c"
 10257 ;; Parameters:    Size  Location     Type
 10258 ;;		None
 10259 ;; Auto vars:     Size  Location     Type
 10260 ;;		None
 10261 ;; Return value:  Size  Location     Type
 10262 ;;		None               void
 10263 ;; Registers used:
 10264 ;;		wreg, status,2
 10265 ;; Tracked objects:
 10266 ;;		On entry : 0/0
 10267 ;;		On exit  : 0/0
 10268 ;;		Unchanged: 0/0
 10269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;Total ram usage:        0 bytes
 10275 ;; Hardware stack levels used:    1
 10276 ;; Hardware stack levels required when called:    5
 10277 ;; This function calls:
 10278 ;;		Nothing
 10279 ;; This function is called by:
 10280 ;;		_Mcu_Initialization
 10281 ;; This function uses a non-reentrant model
 10282 ;;
 10283                           
 10284                           
 10285                           ;psect for function _IOC_Set
 10286  1BF1                     _IOC_Set:	
 10287                           
 10288                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10289                           
 10290                           ;incstack = 0
 10291                           ; Regs used in _IOC_Set: [wreg+status,2]
 10292  1BF1  3004               	movlw	4
 10293  1BF2  0027               	movlb	7	; select bank7
 10294  1BF3  0094               	movwf	20	;volatile
 10295                           
 10296                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10297  1BF4  3004               	movlw	4
 10298  1BF5  0095               	movwf	21	;volatile
 10299                           
 10300                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10301  1BF6  0196               	clrf	22	;volatile
 10302                           
 10303                           ;MCU_B1.c: 386: IOCIE = 1;
 10304  1BF7  158B               	bsf	11,3	;volatile
 10305                           
 10306                           ;MCU_B1.c: 387: IOCIF = 0;
 10307  1BF8  100B               	bcf	11,0	;volatile
 10308                           
 10309                           ;MCU_B1.c: 388: PEIE = 1;
 10310  1BF9  170B               	bsf	11,6	;volatile
 10311                           
 10312                           ;MCU_B1.c: 389: GIE = 1;
 10313  1BFA  178B               	bsf	11,7	;volatile
 10314  1BFB  0008               	return
 10315  1BFC                     __end_of_IOC_Set:	
 10316                           
 10317                           	psect	text61
 10318  1B5A                     __ptext61:	
 10319 ;; *************** function _Fosc_Set *****************
 10320 ;; Defined at:
 10321 ;;		line 56 in file "../src/MCU_B1.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;		None
 10326 ;; Return value:  Size  Location     Type
 10327 ;;		None               void
 10328 ;; Registers used:
 10329 ;;		wreg
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;Total ram usage:        0 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:    5
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		_Mcu_Initialization
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           
 10350                           ;psect for function _Fosc_Set
 10351  1B5A                     _Fosc_Set:	
 10352                           
 10353                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in _Fosc_Set: [wreg]
 10357  1B5A  3078               	movlw	120
 10358  1B5B  0021               	movlb	1	; select bank1
 10359  1B5C  0099               	movwf	25	;volatile
 10360  1B5D  0008               	return
 10361  1B5E                     __end_of_Fosc_Set:	
 10362                           
 10363                           	psect	text62
 10364  1B90                     __ptext62:	
 10365 ;; *************** function _ADC_Set *****************
 10366 ;; Defined at:
 10367 ;;		line 425 in file "../src/MCU_B1.c"
 10368 ;; Parameters:    Size  Location     Type
 10369 ;;		None
 10370 ;; Auto vars:     Size  Location     Type
 10371 ;;		None
 10372 ;; Return value:  Size  Location     Type
 10373 ;;		None               void
 10374 ;; Registers used:
 10375 ;;		wreg
 10376 ;; Tracked objects:
 10377 ;;		On entry : 0/0
 10378 ;;		On exit  : 0/0
 10379 ;;		Unchanged: 0/0
 10380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;Total ram usage:        0 bytes
 10386 ;; Hardware stack levels used:    1
 10387 ;; Hardware stack levels required when called:    5
 10388 ;; This function calls:
 10389 ;;		Nothing
 10390 ;; This function is called by:
 10391 ;;		_Mcu_Initialization
 10392 ;; This function uses a non-reentrant model
 10393 ;;
 10394                           
 10395                           
 10396                           ;psect for function _ADC_Set
 10397  1B90                     _ADC_Set:	
 10398                           
 10399                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10400                           
 10401                           ;incstack = 0
 10402                           ; Regs used in _ADC_Set: [wreg]
 10403  1B90  30F3               	movlw	243
 10404  1B91  0021               	movlb	1	; select bank1
 10405  1B92  009E               	movwf	30	;volatile
 10406                           
 10407                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10408  1B93  30C1               	movlw	193
 10409  1B94  0022               	movlb	2	; select bank2
 10410  1B95  0097               	movwf	23	;volatile
 10411  1B96  0008               	return
 10412  1B97                     __end_of_ADC_Set:	
 10413                           
 10414                           	psect	text63
 10415  004A                     __ptext63:	
 10416 ;; *************** function _Load_Main *****************
 10417 ;; Defined at:
 10418 ;;		line 39 in file "../src/OverLoad_B1.c"
 10419 ;; Parameters:    Size  Location     Type
 10420 ;;		None
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;  i               2   17[BANK0 ] int 
 10423 ;;  LightsCount     1   16[BANK0 ] unsigned char 
 10424 ;;  Load_RunStat    1   15[BANK0 ] unsigned char 
 10425 ;;  ErrorCountVa    1   14[BANK0 ] unsigned char 
 10426 ;;  error           1   11[BANK0 ] unsigned char 
 10427 ;; Return value:  Size  Location     Type
 10428 ;;		None               void
 10429 ;; Registers used:
 10430 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10431 ;; Tracked objects:
 10432 ;;		On entry : 0/0
 10433 ;;		On exit  : 0/0
 10434 ;;		Unchanged: 0/0
 10435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;Total ram usage:       10 bytes
 10441 ;; Hardware stack levels used:    1
 10442 ;; Hardware stack levels required when called:    6
 10443 ;; This function calls:
 10444 ;;		___lwdiv
 10445 ;;		___wmul
 10446 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10447 ;;		_getDimmer_LoadGO
 10448 ;;		_getDimmer_Load_Status
 10449 ;;		_getMain_All_Error_Status
 10450 ;;		_getMain_All_LightsStatus
 10451 ;;		_getMain_Lights_Count
 10452 ;;		_setLoad_AH_AL_Restore
 10453 ;; This function is called by:
 10454 ;;		_main
 10455 ;; This function uses a non-reentrant model
 10456 ;;
 10457                           
 10458                           
 10459                           ;psect for function _Load_Main
 10460  004A                     _Load_Main:	
 10461                           
 10462                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10463                           
 10464                           ;incstack = 0
 10465                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10466  004A  3000               	movlw	0
 10467  004B  3191  21FA  3180   	fcall	_getMain_All_Error_Status
 10468  004E  0020               	movlb	0	; select bank0
 10469  004F  00A9               	movwf	??_Load_Main
 10470  0050  0829               	movf	??_Load_Main,w
 10471  0051  00AB               	movwf	Load_Main@error
 10472                           
 10473                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10474  0052  01AF               	clrf	Load_Main@Load_RunStatus
 10475  0053  01AE               	clrf	Load_Main@ErrorCountValue
 10476  0054  01B0               	clrf	Load_Main@LightsCount
 10477                           
 10478                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10479  0055  0022               	movlb	2	; select bank2
 10480  0056  1C34               	btfss	_Load^(0+256),0
 10481  0057  29F6               	goto	l1605
 10482                           
 10483                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10484  0058  319B  23D1  3180   	fcall	_getMain_All_LightsStatus
 10485  005B  3800               	iorlw	0
 10486  005C  1D03               	skipz
 10487  005D  2860               	goto	l8881
 10488                           
 10489                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10490  005E  0022               	movlb	2	; select bank2
 10491  005F  2881               	goto	l8899
 10492  0060                     l8881:	
 10493                           ;OverLoad_B1.c: 46: } else {
 10494                           
 10495                           
 10496                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10497  0060  0020               	movlb	0	; select bank0
 10498  0061  08AB               	movf	Load_Main@error,f
 10499  0062  1D03               	skipz
 10500  0063  287E               	goto	l1608
 10501  0064  319D  25A4  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10502  0067  3800               	iorlw	0
 10503  0068  1D03               	skipz
 10504  0069  287E               	goto	l1608
 10505                           
 10506                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10507  006A  0022               	movlb	2	; select bank2
 10508  006B  14B4               	bsf	_Load^(0+256),1
 10509                           
 10510                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10511  006C  319B  23A6  3180   	fcall	_getDimmer_LoadGO
 10512  006F  3A01               	xorlw	1
 10513  0070  1D03               	skipz
 10514  0071  2879               	goto	l1609
 10515                           
 10516                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10517  0072  0022               	movlb	2	; select bank2
 10518  0073  1DB4               	btfss	_Load^(0+256),3
 10519  0074  1BB4               	btfsc	_Load^(0+256),7
 10520  0075  2882               	goto	l1607
 10521                           
 10522                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10523  0076  15B4               	bsf	_Load^(0+256),3
 10524                           
 10525                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10526  0077  01D9               	clrf	(_Load^(0+256)+37)
 10527                           
 10528                           ;OverLoad_B1.c: 56: }
 10529                           ;OverLoad_B1.c: 57: } else {
 10530  0078  2882               	goto	l1607
 10531  0079                     l1609:	
 10532                           
 10533                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10534  0079  0022               	movlb	2	; select bank2
 10535  007A  1FB4               	btfss	_Load^(0+256),7
 10536  007B  2882               	goto	l1607
 10537                           
 10538                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10539  007C  13B4               	bcf	_Load^(0+256),7
 10540                           
 10541                           ;OverLoad_B1.c: 60: }
 10542                           ;OverLoad_B1.c: 61: }
 10543                           ;OverLoad_B1.c: 62: } else {
 10544  007D  2882               	goto	l1607
 10545  007E                     l1608:	
 10546                           
 10547                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10548  007E  0022               	movlb	2	; select bank2
 10549  007F  1CB4               	btfss	_Load^(0+256),1
 10550  0080  2882               	goto	l1607
 10551  0081                     l8899:	
 10552                           
 10553                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10554  0081  10B4               	bcf	_Load^(0+256),1
 10555  0082                     l1607:	
 10556                           
 10557                           ;OverLoad_B1.c: 65: }
 10558                           ;OverLoad_B1.c: 66: }
 10559                           ;OverLoad_B1.c: 88: }
 10560                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10561  0082  1CB4               	btfss	_Load^(0+256),1
 10562  0083  29D2               	goto	l1615
 10563                           
 10564                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10565  0084  1534               	bsf	_Load^(0+256),2
 10566                           
 10567                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10568  0085  1E34               	btfss	_Load^(0+256),4
 10569  0086  29D0               	goto	l1616
 10570                           
 10571                           ;OverLoad_B1.c: 95: Load.Time++;
 10572  0087  3001               	movlw	1
 10573  0088  07B5               	addwf	(_Load^(0+256)+1),f
 10574  0089  3000               	movlw	0
 10575  008A  3DB6               	addwfc	((_Load+1)^(0+256)+1),f
 10576                           
 10577                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10578  008B  3000               	movlw	0
 10579  008C  0236               	subwf	((_Load+1)^(0+256)+1),w
 10580  008D  3002               	movlw	2
 10581  008E  1903               	skipnz
 10582  008F  0235               	subwf	(_Load^(0+256)+1),w
 10583  0090  1C03               	skipc
 10584  0091  0008               	return
 10585                           
 10586                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10587  0092  01B5               	clrf	(_Load^(0+256)+1)
 10588  0093  01B6               	clrf	((_Load+1)^(0+256)+1)
 10589                           
 10590                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10591  0094  1234               	bcf	_Load^(0+256),4
 10592                           
 10593                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10594  0095  3001               	movlw	1
 10595  0096  0020               	movlb	0	; select bank0
 10596  0097  00B1               	movwf	Load_Main@i
 10597  0098  3000               	movlw	0
 10598  0099  00B2               	movwf	Load_Main@i+1
 10599  009A  0832               	movf	Load_Main@i+1,w
 10600  009B  3A80               	xorlw	128
 10601  009C  00A9               	movwf	??_Load_Main
 10602  009D  3080               	movlw	128
 10603  009E  0229               	subwf	??_Load_Main,w
 10604  009F  1D03               	skipz
 10605  00A0  28A3               	goto	u9765
 10606  00A1  3004               	movlw	4
 10607  00A2  0231               	subwf	Load_Main@i,w
 10608  00A3                     u9765:	
 10609  00A3  1803               	btfsc	3,0
 10610  00A4  28D7               	goto	l8921
 10611  00A5                     l8915:	
 10612                           
 10613                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10614  00A5  0020               	movlb	0	; select bank0
 10615  00A6  3531               	lslf	Load_Main@i,w
 10616  00A7  3E3F               	addlw	(_Load+11)& (0+255)
 10617  00A8  0086               	movwf	6
 10618  00A9  3001               	movlw	1	; select bank2/3
 10619  00AA  0087               	movwf	7
 10620  00AB  3F40               	moviw [0]fsr1
 10621  00AC  00A9               	movwf	??_Load_Main
 10622  00AD  3F41               	moviw [1]fsr1
 10623  00AE  00AA               	movwf	??_Load_Main+1
 10624  00AF  0829               	movf	??_Load_Main,w
 10625  00B0  0022               	movlb	2	; select bank2
 10626  00B1  07B9               	addwf	(_Load^(0+256)+5),f
 10627  00B2  0020               	movlb	0	; select bank0
 10628  00B3  082A               	movf	??_Load_Main+1,w
 10629  00B4  0022               	movlb	2	; select bank2
 10630  00B5  3DBA               	addwfc	((_Load+1)^(0+256)+5),f
 10631                           
 10632                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10633  00B6  0020               	movlb	0	; select bank0
 10634  00B7  3531               	lslf	Load_Main@i,w
 10635  00B8  3E49               	addlw	(_Load+21)& (0+255)
 10636  00B9  0086               	movwf	6
 10637  00BA  3001               	movlw	1	; select bank2/3
 10638  00BB  0087               	movwf	7
 10639  00BC  3F40               	moviw [0]fsr1
 10640  00BD  00A9               	movwf	??_Load_Main
 10641  00BE  3F41               	moviw [1]fsr1
 10642  00BF  00AA               	movwf	??_Load_Main+1
 10643  00C0  0829               	movf	??_Load_Main,w
 10644  00C1  0022               	movlb	2	; select bank2
 10645  00C2  07BB               	addwf	(_Load^(0+256)+7),f
 10646  00C3  0020               	movlb	0	; select bank0
 10647  00C4  082A               	movf	??_Load_Main+1,w
 10648  00C5  0022               	movlb	2	; select bank2
 10649  00C6  3DBC               	addwfc	((_Load+1)^(0+256)+7),f
 10650  00C7  3001               	movlw	1
 10651  00C8  0020               	movlb	0	; select bank0
 10652  00C9  07B1               	addwf	Load_Main@i,f
 10653  00CA  3000               	movlw	0
 10654  00CB  3DB2               	addwfc	Load_Main@i+1,f
 10655  00CC  0832               	movf	Load_Main@i+1,w
 10656  00CD  3A80               	xorlw	128
 10657  00CE  00A9               	movwf	??_Load_Main
 10658  00CF  3080               	movlw	128
 10659  00D0  0229               	subwf	??_Load_Main,w
 10660  00D1  1D03               	skipz
 10661  00D2  28D5               	goto	u9775
 10662  00D3  3004               	movlw	4
 10663  00D4  0231               	subwf	Load_Main@i,w
 10664  00D5                     u9775:	
 10665  00D5  1C03               	skipc
 10666  00D6  28A5               	goto	l8915
 10667  00D7                     l8921:	
 10668                           
 10669                           ;OverLoad_B1.c: 103: }
 10670                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10671  00D7  3003               	movlw	3
 10672  00D8  0020               	movlb	0	; select bank0
 10673  00D9  00A1               	movwf	___lwdiv@divisor
 10674  00DA  3000               	movlw	0
 10675  00DB  00A2               	movwf	___lwdiv@divisor+1
 10676  00DC  0022               	movlb	2	; select bank2
 10677  00DD  083A               	movf	((_Load+1)^(0+256)+5),w
 10678  00DE  0020               	movlb	0	; select bank0
 10679  00DF  01A4               	clrf	___lwdiv@dividend+1
 10680  00E0  07A4               	addwf	___lwdiv@dividend+1,f
 10681  00E1  0022               	movlb	2	; select bank2
 10682  00E2  0839               	movf	(_Load^(0+256)+5),w
 10683  00E3  0020               	movlb	0	; select bank0
 10684  00E4  01A3               	clrf	___lwdiv@dividend
 10685  00E5  07A3               	addwf	___lwdiv@dividend,f
 10686  00E6  3192  22CE  3180   	fcall	___lwdiv
 10687  00E9  0020               	movlb	0	; select bank0
 10688  00EA  0822               	movf	?___lwdiv+1,w
 10689  00EB  0022               	movlb	2	; select bank2
 10690  00EC  01BA               	clrf	((_Load+1)^(0+256)+5)
 10691  00ED  07BA               	addwf	((_Load+1)^(0+256)+5),f
 10692  00EE  0020               	movlb	0	; select bank0
 10693  00EF  0821               	movf	?___lwdiv,w
 10694  00F0  0022               	movlb	2	; select bank2
 10695  00F1  01B9               	clrf	(_Load^(0+256)+5)
 10696  00F2  07B9               	addwf	(_Load^(0+256)+5),f
 10697                           
 10698                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10699  00F3  3003               	movlw	3
 10700  00F4  0020               	movlb	0	; select bank0
 10701  00F5  00A1               	movwf	___lwdiv@divisor
 10702  00F6  3000               	movlw	0
 10703  00F7  00A2               	movwf	___lwdiv@divisor+1
 10704  00F8  0022               	movlb	2	; select bank2
 10705  00F9  083C               	movf	((_Load+1)^(0+256)+7),w
 10706  00FA  0020               	movlb	0	; select bank0
 10707  00FB  01A4               	clrf	___lwdiv@dividend+1
 10708  00FC  07A4               	addwf	___lwdiv@dividend+1,f
 10709  00FD  0022               	movlb	2	; select bank2
 10710  00FE  083B               	movf	(_Load^(0+256)+7),w
 10711  00FF  0020               	movlb	0	; select bank0
 10712  0100  01A3               	clrf	___lwdiv@dividend
 10713  0101  07A3               	addwf	___lwdiv@dividend,f
 10714  0102  3192  22CE  3180   	fcall	___lwdiv
 10715  0105  0020               	movlb	0	; select bank0
 10716  0106  0822               	movf	?___lwdiv+1,w
 10717  0107  0022               	movlb	2	; select bank2
 10718  0108  01BC               	clrf	((_Load+1)^(0+256)+7)
 10719  0109  07BC               	addwf	((_Load+1)^(0+256)+7),f
 10720  010A  0020               	movlb	0	; select bank0
 10721  010B  0821               	movf	?___lwdiv,w
 10722  010C  0022               	movlb	2	; select bank2
 10723  010D  01BB               	clrf	(_Load^(0+256)+7)
 10724  010E  07BB               	addwf	(_Load^(0+256)+7),f
 10725                           
 10726                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10727  010F  319F  276C  3180   	fcall	_setLoad_AH_AL_Restore
 10728                           
 10729                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10730  0112  0022               	movlb	2	; select bank2
 10731  0113  083C               	movf	((_Load+1)^(0+256)+7),w
 10732  0114  023A               	subwf	((_Load+1)^(0+256)+5),w
 10733  0115  1D03               	skipz
 10734  0116  2919               	goto	u9785
 10735  0117  083B               	movf	(_Load^(0+256)+7),w
 10736  0118  0239               	subwf	(_Load^(0+256)+5),w
 10737  0119                     u9785:	
 10738  0119  1C03               	skipc
 10739  011A  0008               	return
 10740                           
 10741                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10742  011B  3005               	movlw	5
 10743  011C  3E34               	addlw	_Load& (0+255)
 10744  011D  0086               	movwf	6
 10745  011E  3001               	movlw	1	; select bank2/3
 10746  011F  0087               	movwf	7
 10747  0120  093B               	comf	(_Load^(0+256)+7),w
 10748  0121  0020               	movlb	0	; select bank0
 10749  0122  00A9               	movwf	??_Load_Main
 10750  0123  0022               	movlb	2	; select bank2
 10751  0124  093C               	comf	((_Load+1)^(0+256)+7),w
 10752  0125  0020               	movlb	0	; select bank0
 10753  0126  00AA               	movwf	??_Load_Main+1
 10754  0127  0AA9               	incf	??_Load_Main,f
 10755  0128  1903               	skipnz
 10756  0129  0AAA               	incf	??_Load_Main+1,f
 10757  012A  3F40               	moviw [0]fsr1
 10758  012B  0729               	addwf	??_Load_Main,w
 10759  012C  0022               	movlb	2	; select bank2
 10760  012D  00D3               	movwf	(_Load^(0+256)+31)
 10761  012E  3F41               	moviw [1]fsr1
 10762  012F  0020               	movlb	0	; select bank0
 10763  0130  3D2A               	addwfc	??_Load_Main+1,w
 10764  0131  0022               	movlb	2	; select bank2
 10765  0132  00D4               	movwf	(_Load^(0+256)+32)
 10766                           
 10767                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10768  0133  01B9               	clrf	(_Load^(0+256)+5)
 10769  0134  01BA               	clrf	((_Load+1)^(0+256)+5)
 10770                           
 10771                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10772  0135  01BB               	clrf	(_Load^(0+256)+7)
 10773  0136  01BC               	clrf	((_Load+1)^(0+256)+7)
 10774                           
 10775                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10776  0137  1DB4               	btfss	_Load^(0+256),3
 10777  0138  2992               	goto	l8961
 10778                           
 10779                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10780  0139  3002               	movlw	2
 10781  013A  0259               	subwf	(_Load^(0+256)+37),w
 10782  013B  1803               	skipnc
 10783  013C  2992               	goto	l8961
 10784                           
 10785                           ;OverLoad_B1.c: 115: Load.Count++;
 10786  013D  3001               	movlw	1
 10787  013E  0020               	movlb	0	; select bank0
 10788  013F  00A9               	movwf	??_Load_Main
 10789  0140  0829               	movf	??_Load_Main,w
 10790  0141  0022               	movlb	2	; select bank2
 10791  0142  07D9               	addwf	(_Load^(0+256)+37),f
 10792                           
 10793                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10794  0143  319B  23AE  3180   	fcall	_getDimmer_Load_Status
 10795  0146  0020               	movlb	0	; select bank0
 10796  0147  00A9               	movwf	??_Load_Main
 10797  0148  0829               	movf	??_Load_Main,w
 10798  0149  00AF               	movwf	Load_Main@Load_RunStatus
 10799                           
 10800                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10801  014A  319B  23E6  3180   	fcall	_getMain_Lights_Count
 10802  014D  0020               	movlb	0	; select bank0
 10803  014E  00A9               	movwf	??_Load_Main
 10804  014F  0829               	movf	??_Load_Main,w
 10805  0150  00B0               	movwf	Load_Main@LightsCount
 10806                           
 10807                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10808  0151  0022               	movlb	2	; select bank2
 10809  0152  0859               	movf	(_Load^(0+256)+37),w
 10810  0153  3A01               	xorlw	1
 10811  0154  1D03               	skipz
 10812  0155  295A               	goto	l8947
 10813                           
 10814                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10815  0156  3074               	movlw	116
 10816  0157  00D7               	movwf	(_Load^(0+256)+35)
 10817  0158  3004               	movlw	4
 10818  0159  2967               	goto	L6
 10819  015A                     l8947:	
 10820                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10821                           
 10822  015A  0859               	movf	(_Load^(0+256)+37),w
 10823  015B  3A02               	xorlw	2
 10824  015C  1D03               	skipz
 10825  015D  2992               	goto	l8961
 10826                           
 10827                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10828  015E  0020               	movlb	0	; select bank0
 10829  015F  0830               	movf	Load_Main@LightsCount,w
 10830  0160  3A01               	xorlw	1
 10831  0161  1D03               	skipz
 10832  0162  2969               	goto	l8953
 10833                           
 10834                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.6*57);
 10835  0163  305B               	movlw	91
 10836  0164  0022               	movlb	2	; select bank2
 10837  0165  00D7               	movwf	(_Load^(0+256)+35)
 10838  0166  3000               	movlw	0
 10839  0167                     L6:	
 10840  0167  00D8               	movwf	(_Load^(0+256)+36)
 10841                           
 10842                           ;OverLoad_B1.c: 130: } else {
 10843  0168  2992               	goto	l8961
 10844  0169                     l8953:	
 10845                           
 10846                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10847  0169  0020               	movlb	0	; select bank0
 10848  016A  08AF               	movf	Load_Main@Load_RunStatus,f
 10849  016B  1D03               	skipz
 10850  016C  2986               	goto	l8957
 10851                           
 10852                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.6*57) * LightsCount;
 10853  016D  0830               	movf	Load_Main@LightsCount,w
 10854  016E  00A9               	movwf	??_Load_Main
 10855  016F  01AA               	clrf	??_Load_Main+1
 10856  0170  0829               	movf	??_Load_Main,w
 10857  0171  00A1               	movwf	___wmul@multiplier
 10858  0172  082A               	movf	??_Load_Main+1,w
 10859  0173  00A2               	movwf	___wmul@multiplier+1
 10860  0174  305B               	movlw	91
 10861  0175  00A3               	movwf	___wmul@multiplicand
 10862  0176  3000               	movlw	0
 10863  0177  00A4               	movwf	___wmul@multiplicand+1
 10864  0178  319F  27C3  3180   	fcall	___wmul
 10865  017B  0020               	movlb	0	; select bank0
 10866  017C  0822               	movf	?___wmul+1,w
 10867  017D  0022               	movlb	2	; select bank2
 10868  017E  01D8               	clrf	((_Load+1)^(0+256)+35)
 10869  017F  07D8               	addwf	((_Load+1)^(0+256)+35),f
 10870  0180  0020               	movlb	0	; select bank0
 10871  0181  0821               	movf	?___wmul,w
 10872  0182  0022               	movlb	2	; select bank2
 10873  0183  01D7               	clrf	(_Load^(0+256)+35)
 10874  0184  07D7               	addwf	(_Load^(0+256)+35),f
 10875                           
 10876                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10877  0185  2992               	goto	l8961
 10878  0186                     l8957:	
 10879  0186  0020               	movlb	0	; select bank0
 10880  0187  082F               	movf	Load_Main@Load_RunStatus,w
 10881  0188  3A01               	xorlw	1
 10882  0189  1D03               	skipz
 10883  018A  2992               	goto	l8961
 10884                           
 10885                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10886  018B  0022               	movlb	2	; select bank2
 10887  018C  083D               	movf	(_Load^(0+256)+9),w
 10888  018D  3E5B               	addlw	91
 10889  018E  00D7               	movwf	(_Load^(0+256)+35)
 10890  018F  3000               	movlw	0
 10891  0190  3D3E               	addwfc	((_Load+1)^(0+256)+9),w
 10892  0191  00D8               	movwf	((_Load+1)^(0+256)+35)
 10893  0192                     l8961:	
 10894                           
 10895                           ;OverLoad_B1.c: 135: }
 10896                           ;OverLoad_B1.c: 136: }
 10897                           ;OverLoad_B1.c: 137: }
 10898                           ;OverLoad_B1.c: 138: }
 10899                           ;OverLoad_B1.c: 139: }
 10900                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10901  0192  0022               	movlb	2	; select bank2
 10902  0193  0858               	movf	((_Load+1)^(0+256)+35),w
 10903  0194  0254               	subwf	((_Load+1)^(0+256)+31),w
 10904  0195  1D03               	skipz
 10905  0196  2999               	goto	u9865
 10906  0197  0857               	movf	(_Load^(0+256)+35),w
 10907  0198  0253               	subwf	(_Load^(0+256)+31),w
 10908  0199                     u9865:	
 10909  0199  1C03               	skipc
 10910  019A  29B8               	goto	l8977
 10911                           
 10912                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10913  019B  0020               	movlb	0	; select bank0
 10914  019C  0830               	movf	Load_Main@LightsCount,w
 10915  019D  3A01               	xorlw	1
 10916  019E  1903               	skipnz
 10917  019F  29A2               	goto	l8967
 10918  01A0  3003               	movlw	3
 10919  01A1  29A3               	goto	L7
 10920  01A2                     l8967:	
 10921  01A2  3002               	movlw	2
 10922  01A3                     L7:	
 10923  01A3  00AC               	movwf	_Load_Main$3891
 10924  01A4  3000               	movlw	0
 10925  01A5  00AD               	movwf	_Load_Main$3891+1
 10926  01A6  082C               	movf	_Load_Main$3891,w
 10927  01A7  00A9               	movwf	??_Load_Main
 10928  01A8  0829               	movf	??_Load_Main,w
 10929  01A9  00AE               	movwf	Load_Main@ErrorCountValue
 10930                           
 10931                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10932  01AA  3001               	movlw	1
 10933  01AB  00A9               	movwf	??_Load_Main
 10934  01AC  0829               	movf	??_Load_Main,w
 10935  01AD  0022               	movlb	2	; select bank2
 10936  01AE  07DA               	addwf	(_Load^(0+256)+38),f
 10937                           
 10938                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10939  01AF  085A               	movf	(_Load^(0+256)+38),w
 10940  01B0  0020               	movlb	0	; select bank0
 10941  01B1  022E               	subwf	Load_Main@ErrorCountValue,w
 10942  01B2  1803               	skipnc
 10943  01B3  0008               	return
 10944                           
 10945                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10946  01B4  0022               	movlb	2	; select bank2
 10947  01B5  01DA               	clrf	(_Load^(0+256)+38)
 10948                           
 10949                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10950  01B6  16B4               	bsf	_Load^(0+256),5
 10951                           
 10952                           ;OverLoad_B1.c: 168: }
 10953                           ;OverLoad_B1.c: 169: } else {
 10954  01B7  0008               	return
 10955  01B8                     l8977:	
 10956                           
 10957                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10958  01B8  01DA               	clrf	(_Load^(0+256)+38)
 10959                           
 10960                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10961  01B9  1DB4               	btfss	_Load^(0+256),3
 10962  01BA  0008               	return
 10963                           
 10964                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10965  01BB  3001               	movlw	1
 10966  01BC  0020               	movlb	0	; select bank0
 10967  01BD  00A9               	movwf	??_Load_Main
 10968  01BE  0829               	movf	??_Load_Main,w
 10969  01BF  0022               	movlb	2	; select bank2
 10970  01C0  07DB               	addwf	(_Load^(0+256)+39),f
 10971                           
 10972                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10973  01C1  3003               	movlw	3
 10974  01C2  025B               	subwf	(_Load^(0+256)+39),w
 10975  01C3  1C03               	skipc
 10976  01C4  0008               	return
 10977                           
 10978                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10979  01C5  01DB               	clrf	(_Load^(0+256)+39)
 10980                           
 10981                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10982  01C6  17B4               	bsf	_Load^(0+256),7
 10983                           
 10984                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10985  01C7  11B4               	bcf	_Load^(0+256),3
 10986                           
 10987                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10988  01C8  01D9               	clrf	(_Load^(0+256)+37)
 10989                           
 10990                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10991  01C9  0854               	movf	((_Load+1)^(0+256)+31),w
 10992  01CA  01BE               	clrf	((_Load+1)^(0+256)+9)
 10993  01CB  07BE               	addwf	((_Load+1)^(0+256)+9),f
 10994  01CC  0853               	movf	(_Load^(0+256)+31),w
 10995  01CD  01BD               	clrf	(_Load^(0+256)+9)
 10996  01CE  07BD               	addwf	(_Load^(0+256)+9),f
 10997                           
 10998                           ;OverLoad_B1.c: 182: }
 10999                           ;OverLoad_B1.c: 183: }
 11000                           ;OverLoad_B1.c: 206: }
 11001                           ;OverLoad_B1.c: 207: }
 11002                           ;OverLoad_B1.c: 208: }
 11003                           ;OverLoad_B1.c: 209: } else {
 11004  01CF  0008               	return
 11005  01D0                     l1616:	
 11006                           
 11007                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 11008  01D0  1634               	bsf	_Load^(0+256),4
 11009                           
 11010                           ;OverLoad_B1.c: 211: }
 11011                           ;OverLoad_B1.c: 212: } else {
 11012  01D1  0008               	return
 11013  01D2                     l1615:	
 11014                           
 11015                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 11016  01D2  1D34               	btfss	_Load^(0+256),2
 11017  01D3  29E5               	goto	l9013
 11018                           
 11019                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11020  01D4  1134               	bcf	_Load^(0+256),2
 11021                           
 11022                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11023  01D5  1234               	bcf	_Load^(0+256),4
 11024                           
 11025                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11026  01D6  01B5               	clrf	(_Load^(0+256)+1)
 11027  01D7  01B6               	clrf	((_Load+1)^(0+256)+1)
 11028                           
 11029                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11030  01D8  319F  276C  3180   	fcall	_setLoad_AH_AL_Restore
 11031                           
 11032                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11033  01DB  0022               	movlb	2	; select bank2
 11034  01DC  01DA               	clrf	(_Load^(0+256)+38)
 11035                           
 11036                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11037  01DD  01DB               	clrf	(_Load^(0+256)+39)
 11038                           
 11039                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11040  01DE  01B9               	clrf	(_Load^(0+256)+5)
 11041  01DF  01BA               	clrf	((_Load+1)^(0+256)+5)
 11042                           
 11043                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11044  01E0  01BB               	clrf	(_Load^(0+256)+7)
 11045  01E1  01BC               	clrf	((_Load+1)^(0+256)+7)
 11046                           
 11047                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11048  01E2  11B4               	bcf	_Load^(0+256),3
 11049                           
 11050                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11051  01E3  01D9               	clrf	(_Load^(0+256)+37)
 11052                           
 11053                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11054  01E4  13B4               	bcf	_Load^(0+256),7
 11055  01E5                     l9013:	
 11056                           
 11057                           ;OverLoad_B1.c: 255: }
 11058                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11059  01E5  1EB4               	btfss	_Load^(0+256),5
 11060  01E6  0008               	return
 11061                           
 11062                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11063  01E7  3001               	movlw	1
 11064  01E8  07B7               	addwf	(_Load^(0+256)+3),f
 11065  01E9  3000               	movlw	0
 11066  01EA  3DB8               	addwfc	((_Load+1)^(0+256)+3),f
 11067                           
 11068                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11069  01EB  3001               	movlw	1
 11070  01EC  0238               	subwf	((_Load+1)^(0+256)+3),w
 11071  01ED  30F4               	movlw	244
 11072  01EE  1903               	skipnz
 11073  01EF  0237               	subwf	(_Load^(0+256)+3),w
 11074  01F0  1C03               	skipc
 11075  01F1  0008               	return
 11076                           
 11077                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11078  01F2  01B7               	clrf	(_Load^(0+256)+3)
 11079  01F3  01B8               	clrf	((_Load+1)^(0+256)+3)
 11080                           
 11081                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11082  01F4  12B4               	bcf	_Load^(0+256),5
 11083                           
 11084                           ;OverLoad_B1.c: 261: }
 11085                           ;OverLoad_B1.c: 262: }
 11086                           ;OverLoad_B1.c: 263: }
 11087                           ;OverLoad_B1.c: 264: } else {
 11088  01F5  0008               	return
 11089  01F6                     l1605:	
 11090                           
 11091                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11092  01F6  1C20               	btfss	_myMain^(0+256),0
 11093  01F7  0008               	return
 11094                           
 11095                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11096  01F8  1434               	bsf	_Load^(0+256),0
 11097  01F9  0008               	return
 11098  01FA                     __end_of_Load_Main:	
 11099                           
 11100                           	psect	text64
 11101  1BE6                     __ptext64:	
 11102 ;; *************** function _getMain_Lights_Count *****************
 11103 ;; Defined at:
 11104 ;;		line 459 in file "../src/Main_B1.c"
 11105 ;; Parameters:    Size  Location     Type
 11106 ;;		None
 11107 ;; Auto vars:     Size  Location     Type
 11108 ;;  status1         1    2[BANK0 ] unsigned char 
 11109 ;;  count           1    1[BANK0 ] unsigned char 
 11110 ;; Return value:  Size  Location     Type
 11111 ;;                  1    wreg      unsigned char 
 11112 ;; Registers used:
 11113 ;;		wreg, status,2
 11114 ;; Tracked objects:
 11115 ;;		On entry : 0/0
 11116 ;;		On exit  : 0/0
 11117 ;;		Unchanged: 0/0
 11118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11120 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;Total ram usage:        2 bytes
 11124 ;; Hardware stack levels used:    1
 11125 ;; Hardware stack levels required when called:    5
 11126 ;; This function calls:
 11127 ;;		Nothing
 11128 ;; This function is called by:
 11129 ;;		_Load_Main
 11130 ;; This function uses a non-reentrant model
 11131 ;;
 11132                           
 11133                           
 11134                           ;psect for function _getMain_Lights_Count
 11135  1BE6                     _getMain_Lights_Count:	
 11136                           
 11137                           ;Main_B1.c: 460: char count = 0;
 11138                           
 11139                           ;incstack = 0
 11140                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11141  1BE6  0020               	movlb	0	; select bank0
 11142  1BE7  01A1               	clrf	getMain_Lights_Count@count
 11143                           
 11144                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11145  1BE8  3000               	movlw	0
 11146  1BE9  0021               	movlb	1	; select bank1
 11147  1BEA  19BA               	btfsc	_DimmerIntr1^(0+128),3
 11148  1BEB  3001               	movlw	1
 11149  1BEC  0020               	movlb	0	; select bank0
 11150  1BED  00A2               	movwf	getMain_Lights_Count@status1
 11151                           
 11152                           ;Main_B1.c: 487: return count = status1;
 11153  1BEE  0822               	movf	getMain_Lights_Count@status1,w
 11154  1BEF  00A1               	movwf	getMain_Lights_Count@count
 11155  1BF0  0008               	return
 11156  1BF1                     __end_of_getMain_Lights_Count:	
 11157                           
 11158                           	psect	text65
 11159  1BAE                     __ptext65:	
 11160 ;; *************** function _getDimmer_Load_Status *****************
 11161 ;; Defined at:
 11162 ;;		line 1084 in file "../src/Dimmer_B1.c"
 11163 ;; Parameters:    Size  Location     Type
 11164 ;;		None
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;  status          1    1[BANK0 ] unsigned char 
 11167 ;; Return value:  Size  Location     Type
 11168 ;;                  1    wreg      unsigned char 
 11169 ;; Registers used:
 11170 ;;		wreg, status,2
 11171 ;; Tracked objects:
 11172 ;;		On entry : 0/0
 11173 ;;		On exit  : 0/0
 11174 ;;		Unchanged: 0/0
 11175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;Total ram usage:        1 bytes
 11181 ;; Hardware stack levels used:    1
 11182 ;; Hardware stack levels required when called:    5
 11183 ;; This function calls:
 11184 ;;		Nothing
 11185 ;; This function is called by:
 11186 ;;		_Load_Main
 11187 ;; This function uses a non-reentrant model
 11188 ;;
 11189                           
 11190                           
 11191                           ;psect for function _getDimmer_Load_Status
 11192  1BAE                     _getDimmer_Load_Status:	
 11193                           
 11194                           ;Dimmer_B1.c: 1085: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11195                           
 11196                           ;incstack = 0
 11197                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11198  1BAE  3000               	movlw	0
 11199  1BAF  0022               	movlb	2	; select bank2
 11200  1BB0  192D               	btfsc	_Dimmer^(0+256),2
 11201  1BB1  3001               	movlw	1
 11202  1BB2  0020               	movlb	0	; select bank0
 11203  1BB3  00A1               	movwf	getDimmer_Load_Status@status
 11204                           
 11205                           ;Dimmer_B1.c: 1086: return status;
 11206  1BB4  0821               	movf	getDimmer_Load_Status@status,w
 11207  1BB5  0008               	return
 11208  1BB6                     __end_of_getDimmer_Load_Status:	
 11209                           
 11210                           	psect	text66
 11211  1BA6                     __ptext66:	
 11212 ;; *************** function _getDimmer_LoadGO *****************
 11213 ;; Defined at:
 11214 ;;		line 1078 in file "../src/Dimmer_B1.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;		None
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;  loadgo          1    1[BANK0 ] unsigned char 
 11219 ;; Return value:  Size  Location     Type
 11220 ;;                  1    wreg      unsigned char 
 11221 ;; Registers used:
 11222 ;;		wreg, status,2
 11223 ;; Tracked objects:
 11224 ;;		On entry : 0/0
 11225 ;;		On exit  : 0/0
 11226 ;;		Unchanged: 0/0
 11227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;Total ram usage:        1 bytes
 11233 ;; Hardware stack levels used:    1
 11234 ;; Hardware stack levels required when called:    5
 11235 ;; This function calls:
 11236 ;;		Nothing
 11237 ;; This function is called by:
 11238 ;;		_Load_Main
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           
 11243                           ;psect for function _getDimmer_LoadGO
 11244  1BA6                     _getDimmer_LoadGO:	
 11245                           
 11246                           ;Dimmer_B1.c: 1079: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11247                           
 11248                           ;incstack = 0
 11249                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11250  1BA6  3000               	movlw	0
 11251  1BA7  0022               	movlb	2	; select bank2
 11252  1BA8  18AD               	btfsc	_Dimmer^(0+256),1
 11253  1BA9  3001               	movlw	1
 11254  1BAA  0020               	movlb	0	; select bank0
 11255  1BAB  00A1               	movwf	getDimmer_LoadGO@loadgo
 11256                           
 11257                           ;Dimmer_B1.c: 1080: return loadgo;
 11258  1BAC  0821               	movf	getDimmer_LoadGO@loadgo,w
 11259  1BAD  0008               	return
 11260  1BAE                     __end_of_getDimmer_LoadGO:	
 11261                           
 11262                           	psect	text67
 11263  1DA4                     __ptext67:	
 11264 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11265 ;; Defined at:
 11266 ;;		line 242 in file "../src/Dimmer_B1.c"
 11267 ;; Parameters:    Size  Location     Type
 11268 ;;		None
 11269 ;; Auto vars:     Size  Location     Type
 11270 ;;  status          1    1[BANK0 ] unsigned char 
 11271 ;; Return value:  Size  Location     Type
 11272 ;;                  1    wreg      unsigned char 
 11273 ;; Registers used:
 11274 ;;		wreg, status,2, status,0
 11275 ;; Tracked objects:
 11276 ;;		On entry : 0/0
 11277 ;;		On exit  : 0/0
 11278 ;;		Unchanged: 0/0
 11279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;Total ram usage:        1 bytes
 11285 ;; Hardware stack levels used:    1
 11286 ;; Hardware stack levels required when called:    5
 11287 ;; This function calls:
 11288 ;;		Nothing
 11289 ;; This function is called by:
 11290 ;;		_Load_Main
 11291 ;; This function uses a non-reentrant model
 11292 ;;
 11293                           
 11294                           
 11295                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11296  1DA4                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11297                           
 11298                           ;Dimmer_B1.c: 243: char status = 0;
 11299                           
 11300                           ;incstack = 0
 11301                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11302  1DA4  0020               	movlb	0	; select bank0
 11303  1DA5  01A1               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11304                           
 11305                           ;Dimmer_B1.c: 254: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11306  1DA6  3000               	movlw	0
 11307  1DA7  0021               	movlb	1	; select bank1
 11308  1DA8  1A3A               	btfsc	_DimmerIntr1^(0+128),4
 11309  1DA9  3001               	movlw	1
 11310  1DAA  0020               	movlb	0	; select bank0
 11311  1DAB  00A1               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11312                           
 11313                           ;Dimmer_B1.c: 258: if (status == 0) {
 11314  1DAC  08A1               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11315  1DAD  1D03               	skipz
 11316  1DAE  2DB5               	goto	l6983
 11317                           
 11318                           ;Dimmer_B1.c: 268: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11319  1DAF  3000               	movlw	0
 11320  1DB0  0021               	movlb	1	; select bank1
 11321  1DB1  1B3A               	btfsc	_DimmerIntr1^(0+128),6
 11322  1DB2  3001               	movlw	1
 11323  1DB3  0020               	movlb	0	; select bank0
 11324  1DB4  00A1               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11325  1DB5                     l6983:	
 11326                           
 11327                           ;Dimmer_B1.c: 270: }
 11328                           ;Dimmer_B1.c: 272: return status;
 11329  1DB5  0821               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11330  1DB6  0008               	return
 11331  1DB7                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11332                           
 11333                           	psect	text68
 11334  1FC3                     __ptext68:	
 11335 ;; *************** function ___wmul *****************
 11336 ;; Defined at:
 11337 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11338 ;; Parameters:    Size  Location     Type
 11339 ;;  multiplier      2    1[BANK0 ] unsigned int 
 11340 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 11341 ;; Auto vars:     Size  Location     Type
 11342 ;;  product         2    5[BANK0 ] unsigned int 
 11343 ;; Return value:  Size  Location     Type
 11344 ;;                  2    1[BANK0 ] unsigned int 
 11345 ;; Registers used:
 11346 ;;		wreg, status,2, status,0
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11352 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11353 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;Total ram usage:        6 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; Hardware stack levels required when called:    5
 11359 ;; This function calls:
 11360 ;;		Nothing
 11361 ;; This function is called by:
 11362 ;;		_Load_Main
 11363 ;; This function uses a non-reentrant model
 11364 ;;
 11365                           
 11366                           
 11367                           ;psect for function ___wmul
 11368  1FC3                     ___wmul:	
 11369                           
 11370                           ;incstack = 0
 11371                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11372  1FC3  0020               	movlb	0	; select bank0
 11373  1FC4  01A5               	clrf	___wmul@product
 11374  1FC5  01A6               	clrf	___wmul@product+1
 11375  1FC6                     l7505:	
 11376  1FC6  1C21               	btfss	___wmul@multiplier,0
 11377  1FC7  2FCC               	goto	l2656
 11378  1FC8  0823               	movf	___wmul@multiplicand,w
 11379  1FC9  07A5               	addwf	___wmul@product,f
 11380  1FCA  0824               	movf	___wmul@multiplicand+1,w
 11381  1FCB  3DA6               	addwfc	___wmul@product+1,f
 11382  1FCC                     l2656:	
 11383  1FCC  3001               	movlw	1
 11384  1FCD                     u7315:	
 11385  1FCD  35A3               	lslf	___wmul@multiplicand,f
 11386  1FCE  0DA4               	rlf	___wmul@multiplicand+1,f
 11387  1FCF  0B89               	decfsz	9,f
 11388  1FD0  2FCD               	goto	u7315
 11389  1FD1  3001               	movlw	1
 11390  1FD2                     u7325:	
 11391  1FD2  36A2               	lsrf	___wmul@multiplier+1,f
 11392  1FD3  0CA1               	rrf	___wmul@multiplier,f
 11393  1FD4  0B89               	decfsz	9,f
 11394  1FD5  2FD2               	goto	u7325
 11395  1FD6  0822               	movf	___wmul@multiplier+1,w
 11396  1FD7  0421               	iorwf	___wmul@multiplier,w
 11397  1FD8  1D03               	skipz
 11398  1FD9  2FC6               	goto	l7505
 11399  1FDA  0826               	movf	___wmul@product+1,w
 11400  1FDB  01A2               	clrf	?___wmul+1
 11401  1FDC  07A2               	addwf	?___wmul+1,f
 11402  1FDD  0825               	movf	___wmul@product,w
 11403  1FDE  01A1               	clrf	?___wmul
 11404  1FDF  07A1               	addwf	?___wmul,f
 11405  1FE0  0008               	return
 11406  1FE1                     __end_of___wmul:	
 11407                           
 11408                           	psect	text69
 11409  12CE                     __ptext69:	
 11410 ;; *************** function ___lwdiv *****************
 11411 ;; Defined at:
 11412 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11413 ;; Parameters:    Size  Location     Type
 11414 ;;  divisor         2    1[BANK0 ] unsigned int 
 11415 ;;  dividend        2    3[BANK0 ] unsigned int 
 11416 ;; Auto vars:     Size  Location     Type
 11417 ;;  quotient        2    6[BANK0 ] unsigned int 
 11418 ;;  counter         1    8[BANK0 ] unsigned char 
 11419 ;; Return value:  Size  Location     Type
 11420 ;;                  2    1[BANK0 ] unsigned int 
 11421 ;; Registers used:
 11422 ;;		wreg, status,2, status,0
 11423 ;; Tracked objects:
 11424 ;;		On entry : 0/0
 11425 ;;		On exit  : 0/0
 11426 ;;		Unchanged: 0/0
 11427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11428 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11429 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;Total ram usage:        8 bytes
 11433 ;; Hardware stack levels used:    1
 11434 ;; Hardware stack levels required when called:    5
 11435 ;; This function calls:
 11436 ;;		Nothing
 11437 ;; This function is called by:
 11438 ;;		_Load_Main
 11439 ;;		_setRF_Main
 11440 ;; This function uses a non-reentrant model
 11441 ;;
 11442                           
 11443                           
 11444                           ;psect for function ___lwdiv
 11445  12CE                     ___lwdiv:	
 11446                           
 11447                           ;incstack = 0
 11448                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11449  12CE  0020               	movlb	0	; select bank0
 11450  12CF  01A6               	clrf	___lwdiv@quotient
 11451  12D0  01A7               	clrf	___lwdiv@quotient+1
 11452  12D1  0822               	movf	___lwdiv@divisor+1,w
 11453  12D2  0421               	iorwf	___lwdiv@divisor,w
 11454  12D3  1903               	skipnz
 11455  12D4  2AFE               	goto	l6945
 11456  12D5  01A8               	clrf	___lwdiv@counter
 11457  12D6  0AA8               	incf	___lwdiv@counter,f
 11458  12D7                     l6933:	
 11459  12D7  1BA2               	btfsc	___lwdiv@divisor+1,7
 11460  12D8  2AE3               	goto	l6935
 11461  12D9  3001               	movlw	1
 11462  12DA                     u6315:	
 11463  12DA  35A1               	lslf	___lwdiv@divisor,f
 11464  12DB  0DA2               	rlf	___lwdiv@divisor+1,f
 11465  12DC  0B89               	decfsz	9,f
 11466  12DD  2ADA               	goto	u6315
 11467  12DE  3001               	movlw	1
 11468  12DF  00A5               	movwf	??___lwdiv
 11469  12E0  0825               	movf	??___lwdiv,w
 11470  12E1  07A8               	addwf	___lwdiv@counter,f
 11471  12E2  2AD7               	goto	l6933
 11472  12E3                     l6935:	
 11473  12E3  3001               	movlw	1
 11474  12E4                     u6335:	
 11475  12E4  35A6               	lslf	___lwdiv@quotient,f
 11476  12E5  0DA7               	rlf	___lwdiv@quotient+1,f
 11477  12E6  0B89               	decfsz	9,f
 11478  12E7  2AE4               	goto	u6335
 11479  12E8  0822               	movf	___lwdiv@divisor+1,w
 11480  12E9  0224               	subwf	___lwdiv@dividend+1,w
 11481  12EA  1D03               	skipz
 11482  12EB  2AEE               	goto	u6345
 11483  12EC  0821               	movf	___lwdiv@divisor,w
 11484  12ED  0223               	subwf	___lwdiv@dividend,w
 11485  12EE                     u6345:	
 11486  12EE  1C03               	skipc
 11487  12EF  2AF5               	goto	l6941
 11488  12F0  0821               	movf	___lwdiv@divisor,w
 11489  12F1  02A3               	subwf	___lwdiv@dividend,f
 11490  12F2  0822               	movf	___lwdiv@divisor+1,w
 11491  12F3  3BA4               	subwfb	___lwdiv@dividend+1,f
 11492  12F4  1426               	bsf	___lwdiv@quotient,0
 11493  12F5                     l6941:	
 11494  12F5  3001               	movlw	1
 11495  12F6                     u6355:	
 11496  12F6  36A2               	lsrf	___lwdiv@divisor+1,f
 11497  12F7  0CA1               	rrf	___lwdiv@divisor,f
 11498  12F8  0B89               	decfsz	9,f
 11499  12F9  2AF6               	goto	u6355
 11500  12FA  3001               	movlw	1
 11501  12FB  02A8               	subwf	___lwdiv@counter,f
 11502  12FC  1D03               	btfss	3,2
 11503  12FD  2AE3               	goto	l6935
 11504  12FE                     l6945:	
 11505  12FE  0827               	movf	___lwdiv@quotient+1,w
 11506  12FF  01A2               	clrf	?___lwdiv+1
 11507  1300  07A2               	addwf	?___lwdiv+1,f
 11508  1301  0826               	movf	___lwdiv@quotient,w
 11509  1302  01A1               	clrf	?___lwdiv
 11510  1303  07A1               	addwf	?___lwdiv,f
 11511  1304  0008               	return
 11512  1305                     __end_of___lwdiv:	
 11513                           
 11514                           	psect	text70
 11515  1B3B                     __ptext70:	
 11516 ;; *************** function _Load_Initialization *****************
 11517 ;; Defined at:
 11518 ;;		line 9 in file "../src/OverLoad_B1.c"
 11519 ;; Parameters:    Size  Location     Type
 11520 ;;		None
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;		None
 11523 ;; Return value:  Size  Location     Type
 11524 ;;		None               void
 11525 ;; Registers used:
 11526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11527 ;; Tracked objects:
 11528 ;;		On entry : 0/0
 11529 ;;		On exit  : 0/0
 11530 ;;		Unchanged: 0/0
 11531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;Total ram usage:        0 bytes
 11537 ;; Hardware stack levels used:    1
 11538 ;; Hardware stack levels required when called:    6
 11539 ;; This function calls:
 11540 ;;		_setLoad_AH_AL_Restore
 11541 ;; This function is called by:
 11542 ;;		_main
 11543 ;; This function uses a non-reentrant model
 11544 ;;
 11545                           
 11546                           
 11547                           ;psect for function _Load_Initialization
 11548  1B3B                     _Load_Initialization:	
 11549                           
 11550                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11551                           
 11552                           ;incstack = 0
 11553                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11554  1B3B  319F  276C         	fcall	_setLoad_AH_AL_Restore
 11555  1B3D  0008               	return
 11556  1B3E                     __end_of_Load_Initialization:	
 11557                           
 11558                           	psect	text71
 11559  1F6C                     __ptext71:	
 11560 ;; *************** function _setLoad_AH_AL_Restore *****************
 11561 ;; Defined at:
 11562 ;;		line 292 in file "../src/OverLoad_B1.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;		None
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;  i               1    2[BANK0 ] unsigned char 
 11567 ;; Return value:  Size  Location     Type
 11568 ;;		None               void
 11569 ;; Registers used:
 11570 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11571 ;; Tracked objects:
 11572 ;;		On entry : 0/0
 11573 ;;		On exit  : 0/0
 11574 ;;		Unchanged: 0/0
 11575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;Total ram usage:        2 bytes
 11581 ;; Hardware stack levels used:    1
 11582 ;; Hardware stack levels required when called:    5
 11583 ;; This function calls:
 11584 ;;		Nothing
 11585 ;; This function is called by:
 11586 ;;		_Load_Initialization
 11587 ;;		_Load_Main
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           
 11592                           ;psect for function _setLoad_AH_AL_Restore
 11593  1F6C                     _setLoad_AH_AL_Restore:	
 11594                           
 11595                           ;OverLoad_B1.c: 293: char i;
 11596                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11597                           
 11598                           ;incstack = 0
 11599                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11600  1F6C  0020               	movlb	0	; select bank0
 11601  1F6D  01A2               	clrf	setLoad_AH_AL_Restore@i
 11602  1F6E                     L8:	
 11603  1F6E  3005               	movlw	5
 11604  1F6F  0222               	subwf	setLoad_AH_AL_Restore@i,w
 11605  1F70  1803               	btfsc	3,0
 11606  1F71  0008               	return
 11607                           
 11608                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11609  1F72  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11610  1F73  3E3F               	addlw	(_Load+11)& (0+255)
 11611  1F74  0086               	movwf	6
 11612  1F75  3001               	movlw	1	; select bank2/3
 11613  1F76  0087               	movwf	7
 11614  1F77  3000               	movlw	0
 11615  1F78  3FC0               	movwi [0]fsr1
 11616  1F79  3FC1               	movwi [1]fsr1
 11617                           
 11618                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11619  1F7A  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11620  1F7B  3E49               	addlw	(_Load+21)& (0+255)
 11621  1F7C  0086               	movwf	6
 11622  1F7D  3001               	movlw	1	; select bank2/3
 11623  1F7E  0087               	movwf	7
 11624  1F7F  30FF               	movlw	255
 11625  1F80  3FC0               	movwi [0]fsr1
 11626  1F81  30FF               	movlw	255
 11627  1F82  3FC1               	movwi [1]fsr1
 11628  1F83  3001               	movlw	1
 11629  1F84  00A1               	movwf	??_setLoad_AH_AL_Restore
 11630  1F85  0821               	movf	??_setLoad_AH_AL_Restore,w
 11631  1F86  07A2               	addwf	setLoad_AH_AL_Restore@i,f
 11632  1F87  2F6E               	goto	L8
 11633  1F88                     __end_of_setLoad_AH_AL_Restore:	
 11634                           
 11635                           	psect	text72
 11636  1B56                     __ptext72:	
 11637 ;; *************** function _LED_Main *****************
 11638 ;; Defined at:
 11639 ;;		line 47 in file "../src/LED_B1.c"
 11640 ;; Parameters:    Size  Location     Type
 11641 ;;		None
 11642 ;; Auto vars:     Size  Location     Type
 11643 ;;		None
 11644 ;; Return value:  Size  Location     Type
 11645 ;;		None               void
 11646 ;; Registers used:
 11647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11648 ;; Tracked objects:
 11649 ;;		On entry : 0/0
 11650 ;;		On exit  : 0/0
 11651 ;;		Unchanged: 0/0
 11652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11657 ;;Total ram usage:        0 bytes
 11658 ;; Hardware stack levels used:    1
 11659 ;; Hardware stack levels required when called:    7
 11660 ;; This function calls:
 11661 ;;		_setLED_Main
 11662 ;; This function is called by:
 11663 ;;		_main
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667                           
 11668                           ;psect for function _LED_Main
 11669  1B56                     _LED_Main:	
 11670                           
 11671                           ;LED_B1.c: 67: setLED_Main(99);
 11672                           
 11673                           ;incstack = 0
 11674                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11675  1B56  3063               	movlw	99
 11676  1B57  3192  2298         	fcall	_setLED_Main
 11677  1B59  0008               	return
 11678  1B5A                     __end_of_LED_Main:	
 11679                           
 11680                           	psect	text73
 11681  1298                     __ptext73:	
 11682 ;; *************** function _setLED_Main *****************
 11683 ;; Defined at:
 11684 ;;		line 229 in file "../src/LED_B1.c"
 11685 ;; Parameters:    Size  Location     Type
 11686 ;;  led             1    wreg     unsigned char 
 11687 ;; Auto vars:     Size  Location     Type
 11688 ;;  led             1    5[BANK0 ] unsigned char 
 11689 ;; Return value:  Size  Location     Type
 11690 ;;		None               void
 11691 ;; Registers used:
 11692 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;Total ram usage:        3 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    6
 11705 ;; This function calls:
 11706 ;;		_LedPointSelect
 11707 ;; This function is called by:
 11708 ;;		_LED_Main
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           
 11713                           ;psect for function _setLED_Main
 11714  1298                     _setLED_Main:	
 11715                           
 11716                           ;incstack = 0
 11717                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11718                           ;setLED_Main@led stored from wreg
 11719  1298  0020               	movlb	0	; select bank0
 11720  1299  00A5               	movwf	setLED_Main@led
 11721                           
 11722                           ;LED_B1.c: 230: LedPointSelect(led);
 11723  129A  0825               	movf	setLED_Main@led,w
 11724  129B  319C  244E  3192   	fcall	_LedPointSelect
 11725                           
 11726                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11727  129E  0021               	movlb	1	; select bank1
 11728  129F  0850               	movf	_LED^(0+128),w
 11729  12A0  0086               	movwf	6
 11730  12A1  3001               	movlw	1	; select bank2/3
 11731  12A2  0087               	movwf	7
 11732  12A3  1C81               	btfss	1,1
 11733  12A4  0008               	return
 11734                           
 11735                           ;LED_B1.c: 232: LED->Time++;
 11736  12A5  0A50               	incf	_LED^(0+128),w
 11737  12A6  0086               	movwf	6
 11738  12A7  3001               	movlw	1	; select bank2/3
 11739  12A8  0087               	movwf	7
 11740  12A9  3001               	movlw	1
 11741  12AA  0781               	addwf	1,f
 11742  12AB  3141               	addfsr 1,1
 11743  12AC  1803               	skipnc
 11744  12AD  0A81               	incf	1,f
 11745                           
 11746                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11747  12AE  0A50               	incf	_LED^(0+128),w
 11748  12AF  0086               	movwf	6
 11749  12B0  3001               	movlw	1	; select bank2/3
 11750  12B1  0087               	movwf	7
 11751  12B2  3F40               	moviw [0]fsr1
 11752  12B3  0020               	movlb	0	; select bank0
 11753  12B4  00A3               	movwf	??_setLED_Main
 11754  12B5  3F41               	moviw [1]fsr1
 11755  12B6  00A4               	movwf	??_setLED_Main+1
 11756  12B7  3000               	movlw	0
 11757  12B8  0224               	subwf	??_setLED_Main+1,w
 11758  12B9  3019               	movlw	25
 11759  12BA  1903               	skipnz
 11760  12BB  0223               	subwf	??_setLED_Main,w
 11761  12BC  1C03               	skipc
 11762  12BD  0008               	return
 11763                           
 11764                           ;LED_B1.c: 234: LED->Time = 0;
 11765  12BE  0021               	movlb	1	; select bank1
 11766  12BF  0A50               	incf	_LED^(0+128),w
 11767  12C0  0086               	movwf	6
 11768  12C1  3001               	movlw	1	; select bank2/3
 11769  12C2  0087               	movwf	7
 11770  12C3  3000               	movlw	0
 11771  12C4  3FC0               	movwi [0]fsr1
 11772  12C5  3FC1               	movwi [1]fsr1
 11773                           
 11774                           ;LED_B1.c: 252: if (led == 99) {
 11775  12C6  0020               	movlb	0	; select bank0
 11776  12C7  0825               	movf	setLED_Main@led,w
 11777  12C8  3A63               	xorlw	99
 11778  12C9  1D03               	skipz
 11779  12CA  0008               	return
 11780                           
 11781                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11782  12CB  3020               	movlw	32
 11783  12CC  068D               	xorwf	13,f
 11784  12CD  0008               	return
 11785  12CE                     __end_of_setLED_Main:	
 11786                           
 11787                           	psect	text74
 11788  1B52                     __ptext74:	
 11789 ;; *************** function _LED_Initialization *****************
 11790 ;; Defined at:
 11791 ;;		line 31 in file "../src/LED_B1.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;		None
 11794 ;; Auto vars:     Size  Location     Type
 11795 ;;		None
 11796 ;; Return value:  Size  Location     Type
 11797 ;;		None               void
 11798 ;; Registers used:
 11799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11800 ;; Tracked objects:
 11801 ;;		On entry : 0/0
 11802 ;;		On exit  : 0/0
 11803 ;;		Unchanged: 0/0
 11804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;Total ram usage:        0 bytes
 11810 ;; Hardware stack levels used:    1
 11811 ;; Hardware stack levels required when called:    8
 11812 ;; This function calls:
 11813 ;;		_setLED_Initialization
 11814 ;; This function is called by:
 11815 ;;		_main
 11816 ;; This function uses a non-reentrant model
 11817 ;;
 11818                           
 11819                           
 11820                           ;psect for function _LED_Initialization
 11821  1B52                     _LED_Initialization:	
 11822                           
 11823                           ;LED_B1.c: 42: setLED_Initialization(99);
 11824                           
 11825                           ;incstack = 0
 11826                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11827  1B52  3063               	movlw	99
 11828  1B53  319D  255B         	fcall	_setLED_Initialization
 11829  1B55  0008               	return
 11830  1B56                     __end_of_LED_Initialization:	
 11831                           
 11832                           	psect	text75
 11833  1D5B                     __ptext75:	
 11834 ;; *************** function _setLED_Initialization *****************
 11835 ;; Defined at:
 11836 ;;		line 74 in file "../src/LED_B1.c"
 11837 ;; Parameters:    Size  Location     Type
 11838 ;;  led             1    wreg     unsigned char 
 11839 ;; Auto vars:     Size  Location     Type
 11840 ;;  led             1    5[BANK0 ] unsigned char 
 11841 ;; Return value:  Size  Location     Type
 11842 ;;		None               void
 11843 ;; Registers used:
 11844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11845 ;; Tracked objects:
 11846 ;;		On entry : 0/0
 11847 ;;		On exit  : 0/0
 11848 ;;		Unchanged: 0/0
 11849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;Total ram usage:        1 bytes
 11855 ;; Hardware stack levels used:    1
 11856 ;; Hardware stack levels required when called:    7
 11857 ;; This function calls:
 11858 ;;		_LedPointSelect
 11859 ;;		_setLED
 11860 ;; This function is called by:
 11861 ;;		_LED_Initialization
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           
 11866                           ;psect for function _setLED_Initialization
 11867  1D5B                     _setLED_Initialization:	
 11868                           
 11869                           ;incstack = 0
 11870                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11871                           ;setLED_Initialization@led stored from wreg
 11872  1D5B  0020               	movlb	0	; select bank0
 11873  1D5C  00A5               	movwf	setLED_Initialization@led
 11874                           
 11875                           ;LED_B1.c: 75: LedPointSelect(led);
 11876  1D5D  0825               	movf	setLED_Initialization@led,w
 11877  1D5E  319C  244E  319D   	fcall	_LedPointSelect
 11878                           
 11879                           ;LED_B1.c: 76: LED->Enable = 1;
 11880  1D61  0021               	movlb	1	; select bank1
 11881  1D62  0850               	movf	_LED^(0+128),w
 11882  1D63  0086               	movwf	6
 11883  1D64  3001               	movlw	1	; select bank2/3
 11884  1D65  0087               	movwf	7
 11885  1D66  1401               	bsf	1,0
 11886                           
 11887                           ;LED_B1.c: 77: setLED(led, 0);
 11888  1D67  0020               	movlb	0	; select bank0
 11889  1D68  01A3               	clrf	setLED@command
 11890  1D69  0825               	movf	setLED_Initialization@led,w
 11891  1D6A  3193  233E         	fcall	_setLED
 11892  1D6C  0008               	return
 11893  1D6D                     __end_of_setLED_Initialization:	
 11894                           
 11895                           	psect	text76
 11896  1262                     __ptext76:	
 11897 ;; *************** function _Flash_Memory_Main *****************
 11898 ;; Defined at:
 11899 ;;		line 971 in file "../src/MCU_B1.c"
 11900 ;; Parameters:    Size  Location     Type
 11901 ;;		None
 11902 ;; Auto vars:     Size  Location     Type
 11903 ;;		None
 11904 ;; Return value:  Size  Location     Type
 11905 ;;		None               void
 11906 ;; Registers used:
 11907 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11908 ;; Tracked objects:
 11909 ;;		On entry : 0/0
 11910 ;;		On exit  : 0/0
 11911 ;;		Unchanged: 0/0
 11912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;Total ram usage:        1 bytes
 11918 ;; Hardware stack levels used:    1
 11919 ;; Hardware stack levels required when called:    8
 11920 ;; This function calls:
 11921 ;;		_Flash_Memory_Modify
 11922 ;;		_getMain_All_LightsStatus
 11923 ;; This function is called by:
 11924 ;;		_main
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928                           
 11929                           ;psect for function _Flash_Memory_Main
 11930  1262                     _Flash_Memory_Main:	
 11931                           
 11932                           ;MCU_B1.c: 972: if (Memory.Modify == 1) {
 11933                           
 11934                           ;incstack = 0
 11935                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11936  1262  0023               	movlb	3	; select bank3
 11937  1263  1C62               	btfss	(_Memory^(0+384)+36),0
 11938  1264  0008               	return
 11939                           
 11940                           ;MCU_B1.c: 973: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11941  1265  319B  23D1  3192   	fcall	_getMain_All_LightsStatus
 11942  1268  3A00               	xorlw	0
 11943  1269  3000               	movlw	0
 11944  126A  1903               	skipnz
 11945  126B  3001               	movlw	1
 11946  126C  0020               	movlb	0	; select bank0
 11947  126D  00A7               	movwf	??_Flash_Memory_Main
 11948  126E  0DA7               	rlf	??_Flash_Memory_Main,f
 11949  126F  0023               	movlb	3	; select bank3
 11950  1270  0862               	movf	(_Memory^(0+384)+36),w
 11951  1271  0020               	movlb	0	; select bank0
 11952  1272  0627               	xorwf	??_Flash_Memory_Main,w
 11953  1273  39FD               	andlw	-3
 11954  1274  0627               	xorwf	??_Flash_Memory_Main,w
 11955  1275  0023               	movlb	3	; select bank3
 11956  1276  00E2               	movwf	(_Memory^(0+384)+36)
 11957                           
 11958                           ;MCU_B1.c: 974: if (Memory.GO == 1) {
 11959  1277  1CE2               	btfss	(_Memory^(0+384)+36),1
 11960  1278  2A92               	goto	l1228
 11961                           
 11962                           ;MCU_B1.c: 975: Memory.Runtime = 1;
 11963  1279  15E2               	bsf	(_Memory^(0+384)+36),3
 11964                           
 11965                           ;MCU_B1.c: 976: Memory.Time++;
 11966  127A  3001               	movlw	1
 11967  127B  07E0               	addwf	(_Memory^(0+384)+34),f
 11968  127C  3000               	movlw	0
 11969  127D  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11970                           
 11971                           ;MCU_B1.c: 977: if (Memory.Time == (200 / 20)) {
 11972  127E  3022               	movlw	34
 11973  127F  3EBE               	addlw	_Memory& (0+255)
 11974  1280  0086               	movwf	6
 11975  1281  3001               	movlw	1	; select bank3/4
 11976  1282  0087               	movwf	7
 11977  1283  3F40               	moviw [0]fsr1
 11978  1284  3A0A               	xorlw	10
 11979  1285  1D03               	skipz
 11980  1286  2A89               	goto	u9575
 11981  1287  3F41               	moviw [1]fsr1
 11982  1288  3A00               	xorlw	0
 11983  1289                     u9575:	
 11984  1289  1D03               	skipz
 11985  128A  0008               	return
 11986                           
 11987                           ;MCU_B1.c: 978: Memory.Time = 0;
 11988  128B  01E0               	clrf	(_Memory^(0+384)+34)
 11989  128C  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11990                           
 11991                           ;MCU_B1.c: 979: Memory.Modify = 0;
 11992  128D  1062               	bcf	(_Memory^(0+384)+36),0
 11993                           
 11994                           ;MCU_B1.c: 980: Memory.GO = 0;
 11995  128E  10E2               	bcf	(_Memory^(0+384)+36),1
 11996                           
 11997                           ;MCU_B1.c: 981: Flash_Memory_Modify();
 11998  128F  3195  2516         	fcall	_Flash_Memory_Modify
 11999                           
 12000                           ;MCU_B1.c: 982: }
 12001                           ;MCU_B1.c: 983: } else {
 12002  1291  0008               	return
 12003  1292                     l1228:	
 12004                           
 12005                           ;MCU_B1.c: 984: if (Memory.Runtime == 1) {
 12006  1292  1DE2               	btfss	(_Memory^(0+384)+36),3
 12007  1293  0008               	return
 12008                           
 12009                           ;MCU_B1.c: 985: Memory.Runtime = 0;
 12010  1294  11E2               	bcf	(_Memory^(0+384)+36),3
 12011                           
 12012                           ;MCU_B1.c: 986: Memory.Time = 0;
 12013  1295  01E0               	clrf	(_Memory^(0+384)+34)
 12014  1296  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12015  1297  0008               	return
 12016  1298                     __end_of_Flash_Memory_Main:	
 12017                           
 12018                           	psect	text77
 12019  1516                     __ptext77:	
 12020 ;; *************** function _Flash_Memory_Modify *****************
 12021 ;; Defined at:
 12022 ;;		line 1044 in file "../src/MCU_B1.c"
 12023 ;; Parameters:    Size  Location     Type
 12024 ;;		None
 12025 ;; Auto vars:     Size  Location     Type
 12026 ;;  i               1    6[BANK0 ] unsigned char 
 12027 ;; Return value:  Size  Location     Type
 12028 ;;		None               void
 12029 ;; Registers used:
 12030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12031 ;; Tracked objects:
 12032 ;;		On entry : 0/0
 12033 ;;		On exit  : 0/0
 12034 ;;		Unchanged: 0/0
 12035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;Total ram usage:        2 bytes
 12041 ;; Hardware stack levels used:    1
 12042 ;; Hardware stack levels required when called:    7
 12043 ;; This function calls:
 12044 ;;		_Flash_Memory_Erasing
 12045 ;;		_Flash_Memory_Read
 12046 ;;		_Flash_Memory_Write
 12047 ;;		_setMemory_Data
 12048 ;; This function is called by:
 12049 ;;		_Flash_Memory_Main
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           
 12054                           ;psect for function _Flash_Memory_Modify
 12055  1516                     _Flash_Memory_Modify:	
 12056                           
 12057                           ;MCU_B1.c: 1045: char i = 0;
 12058                           
 12059                           ;incstack = 0
 12060                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12061  1516  0020               	movlb	0	; select bank0
 12062  1517  01A6               	clrf	Flash_Memory_Modify@i
 12063                           
 12064                           ;MCU_B1.c: 1046: for (i = 0; i < 32; i++) {
 12065  1518  01A6               	clrf	Flash_Memory_Modify@i
 12066  1519  3020               	movlw	32
 12067  151A  0226               	subwf	Flash_Memory_Modify@i,w
 12068  151B  1803               	btfsc	3,0
 12069  151C  2D32               	goto	l7215
 12070  151D                     l7209:	
 12071                           
 12072                           ;MCU_B1.c: 1047: Memory.Data[i] = Flash_Memory_Read(i);
 12073  151D  0826               	movf	Flash_Memory_Modify@i,w
 12074  151E  319E  26E7  3195   	fcall	_Flash_Memory_Read
 12075  1521  0020               	movlb	0	; select bank0
 12076  1522  00A5               	movwf	??_Flash_Memory_Modify
 12077  1523  0826               	movf	Flash_Memory_Modify@i,w
 12078  1524  3EBE               	addlw	_Memory& (0+255)
 12079  1525  0086               	movwf	6
 12080  1526  3001               	movlw	1	; select bank3/4
 12081  1527  0087               	movwf	7
 12082  1528  0825               	movf	??_Flash_Memory_Modify,w
 12083  1529  0081               	movwf	1
 12084  152A  3001               	movlw	1
 12085  152B  00A5               	movwf	??_Flash_Memory_Modify
 12086  152C  0825               	movf	??_Flash_Memory_Modify,w
 12087  152D  07A6               	addwf	Flash_Memory_Modify@i,f
 12088  152E  3020               	movlw	32
 12089  152F  0226               	subwf	Flash_Memory_Modify@i,w
 12090  1530  1C03               	skipc
 12091  1531  2D1D               	goto	l7209
 12092  1532                     l7215:	
 12093                           
 12094                           ;MCU_B1.c: 1048: }
 12095                           ;MCU_B1.c: 1049: setMemory_Data(0, product->Data[12]);
 12096  1532  0021               	movlb	1	; select bank1
 12097  1533  086D               	movf	_product^(0+128),w
 12098  1534  0086               	movwf	6
 12099  1535  3002               	movlw	2	; select bank4/5
 12100  1536  0087               	movwf	7
 12101  1537  3002               	movlw	2	; select bank4/5
 12102  1538  3F4C               	moviw [12]fsr1
 12103  1539  0020               	movlb	0	; select bank0
 12104  153A  00A1               	movwf	setMemory_Data@data
 12105  153B  3000               	movlw	0
 12106  153C  319C  245A  3195   	fcall	_setMemory_Data
 12107                           
 12108                           ;MCU_B1.c: 1050: setMemory_Data(1, product->Data[13]);
 12109  153F  0021               	movlb	1	; select bank1
 12110  1540  086D               	movf	_product^(0+128),w
 12111  1541  0086               	movwf	6
 12112  1542  3002               	movlw	2	; select bank4/5
 12113  1543  0087               	movwf	7
 12114  1544  3002               	movlw	2	; select bank4/5
 12115  1545  3F4D               	moviw [13]fsr1
 12116  1546  0020               	movlb	0	; select bank0
 12117  1547  00A1               	movwf	setMemory_Data@data
 12118  1548  3001               	movlw	1
 12119  1549  319C  245A  3195   	fcall	_setMemory_Data
 12120                           
 12121                           ;MCU_B1.c: 1051: setMemory_Data(2, product->Data[14]);
 12122  154C  0021               	movlb	1	; select bank1
 12123  154D  086D               	movf	_product^(0+128),w
 12124  154E  0086               	movwf	6
 12125  154F  3002               	movlw	2	; select bank4/5
 12126  1550  0087               	movwf	7
 12127  1551  3002               	movlw	2	; select bank4/5
 12128  1552  3F4E               	moviw [14]fsr1
 12129  1553  0020               	movlb	0	; select bank0
 12130  1554  00A1               	movwf	setMemory_Data@data
 12131  1555  3002               	movlw	2
 12132  1556  319C  245A  3195   	fcall	_setMemory_Data
 12133                           
 12134                           ;MCU_B1.c: 1057: if (Memory.LoopSave == 1) {
 12135  1559  0023               	movlb	3	; select bank3
 12136  155A  1D62               	btfss	(_Memory^(0+384)+36),2
 12137  155B  2D60               	goto	l1251
 12138                           
 12139                           ;MCU_B1.c: 1058: Memory.LoopSave = 0;
 12140  155C  1162               	bcf	(_Memory^(0+384)+36),2
 12141                           
 12142                           ;MCU_B1.c: 1059: myMain.FirstOpen = 0;
 12143  155D  0022               	movlb	2	; select bank2
 12144  155E  11A0               	bcf	_myMain^(0+256),3
 12145                           
 12146                           ;MCU_B1.c: 1060: myMain.First = 0;
 12147  155F  12A0               	bcf	_myMain^(0+256),5
 12148  1560                     l1251:	
 12149                           
 12150                           ;MCU_B1.c: 1062: }
 12151                           ;MCU_B1.c: 1063: GIE = 0;
 12152  1560  138B               	bcf	11,7	;volatile
 12153                           
 12154                           ;MCU_B1.c: 1064: Flash_Memory_Erasing();
 12155  1561  319C  2466  3195   	fcall	_Flash_Memory_Erasing
 12156                           
 12157                           ;MCU_B1.c: 1065: Flash_Memory_Write();
 12158  1564  3191  21CB         	fcall	_Flash_Memory_Write
 12159                           
 12160                           ;MCU_B1.c: 1066: GIE = 1;
 12161  1566  178B               	bsf	11,7	;volatile
 12162  1567  0008               	return
 12163  1568                     __end_of_Flash_Memory_Modify:	
 12164                           
 12165                           	psect	text78
 12166  1C66                     __ptext78:	
 12167 ;; *************** function _Flash_Memory_Erasing *****************
 12168 ;; Defined at:
 12169 ;;		line 1033 in file "../src/MCU_B1.c"
 12170 ;; Parameters:    Size  Location     Type
 12171 ;;		None
 12172 ;; Auto vars:     Size  Location     Type
 12173 ;;		None
 12174 ;; Return value:  Size  Location     Type
 12175 ;;		None               void
 12176 ;; Registers used:
 12177 ;;		wreg, status,2, status,0, pclath, cstack
 12178 ;; Tracked objects:
 12179 ;;		On entry : 0/0
 12180 ;;		On exit  : 0/0
 12181 ;;		Unchanged: 0/0
 12182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;Total ram usage:        0 bytes
 12188 ;; Hardware stack levels used:    1
 12189 ;; Hardware stack levels required when called:    6
 12190 ;; This function calls:
 12191 ;;		_Flash_Memory_Unlock
 12192 ;; This function is called by:
 12193 ;;		_Flash_Memory_Modify
 12194 ;; This function uses a non-reentrant model
 12195 ;;
 12196                           
 12197                           
 12198                           ;psect for function _Flash_Memory_Erasing
 12199  1C66                     _Flash_Memory_Erasing:	
 12200                           
 12201                           ;MCU_B1.c: 1034: CFGS = 0;
 12202                           
 12203                           ;incstack = 0
 12204                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12205  1C66  0023               	movlb	3	; select bank3
 12206  1C67  1315               	bcf	21,6	;volatile
 12207                           
 12208                           ;MCU_B1.c: 1035: PMADRH = 0x30;
 12209  1C68  3030               	movlw	48
 12210  1C69  0092               	movwf	18	;volatile
 12211                           
 12212                           ;MCU_B1.c: 1036: PMADRL = 0x00;
 12213  1C6A  0191               	clrf	17	;volatile
 12214                           
 12215                           ;MCU_B1.c: 1037: FREE = 1;
 12216  1C6B  1615               	bsf	21,4	;volatile
 12217                           
 12218                           ;MCU_B1.c: 1038: WREN = 1;
 12219  1C6C  1515               	bsf	21,2	;volatile
 12220                           
 12221                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 12222  1C6D  319B  23C8         	fcall	_Flash_Memory_Unlock
 12223                           
 12224                           ;MCU_B1.c: 1040: WREN = 0;
 12225  1C6F  0023               	movlb	3	; select bank3
 12226  1C70  1115               	bcf	21,2	;volatile
 12227  1C71  0008               	return
 12228  1C72                     __end_of_Flash_Memory_Erasing:	
 12229                           
 12230                           	psect	text79
 12231  0476                     __ptext79:	
 12232 ;; *************** function _Flash_Memory_Initialization *****************
 12233 ;; Defined at:
 12234 ;;		line 930 in file "../src/MCU_B1.c"
 12235 ;; Parameters:    Size  Location     Type
 12236 ;;		None
 12237 ;; Auto vars:     Size  Location     Type
 12238 ;;  i               1   68[BANK0 ] unsigned char 
 12239 ;; Return value:  Size  Location     Type
 12240 ;;		None               void
 12241 ;; Registers used:
 12242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12243 ;; Tracked objects:
 12244 ;;		On entry : 0/0
 12245 ;;		On exit  : 0/0
 12246 ;;		Unchanged: 0/0
 12247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;Total ram usage:        2 bytes
 12253 ;; Hardware stack levels used:    1
 12254 ;; Hardware stack levels required when called:    8
 12255 ;; This function calls:
 12256 ;;		_Flash_Memory_Read
 12257 ;;		_Flash_Memory_Write
 12258 ;;		_getDimmerLights_ValueToPercent
 12259 ;;		_setMemory_Data
 12260 ;; This function is called by:
 12261 ;;		_main
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265                           
 12266                           ;psect for function _Flash_Memory_Initialization
 12267  0476                     _Flash_Memory_Initialization:	
 12268                           
 12269                           ;MCU_B1.c: 931: char i = 0;
 12270                           
 12271                           ;incstack = 0
 12272                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12273  0476  0020               	movlb	0	; select bank0
 12274  0477  01E4               	clrf	Flash_Memory_Initialization@i
 12275                           
 12276                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12277  0478  301F               	movlw	31
 12278  0479  319E  26E7  3184   	fcall	_Flash_Memory_Read
 12279  047C  3AAA               	xorlw	170
 12280  047D  1D03               	skipz
 12281  047E  2CF5               	goto	l7607
 12282                           
 12283                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12284  047F  3000               	movlw	0
 12285  0480  319E  26E7  3184   	fcall	_Flash_Memory_Read
 12286  0483  0020               	movlb	0	; select bank0
 12287  0484  00E3               	movwf	??_Flash_Memory_Initialization
 12288  0485  0021               	movlb	1	; select bank1
 12289  0486  086D               	movf	_product^(0+128),w
 12290  0487  3E0C               	addlw	12
 12291  0488  0086               	movwf	6
 12292  0489  3002               	movlw	2	; select bank4/5
 12293  048A  0087               	movwf	7
 12294  048B  0020               	movlb	0	; select bank0
 12295  048C  0863               	movf	??_Flash_Memory_Initialization,w
 12296  048D  0081               	movwf	1
 12297                           
 12298                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12299  048E  3001               	movlw	1
 12300  048F  319E  26E7  3184   	fcall	_Flash_Memory_Read
 12301  0492  0020               	movlb	0	; select bank0
 12302  0493  00E3               	movwf	??_Flash_Memory_Initialization
 12303  0494  0021               	movlb	1	; select bank1
 12304  0495  086D               	movf	_product^(0+128),w
 12305  0496  3E0D               	addlw	13
 12306  0497  0086               	movwf	6
 12307  0498  3002               	movlw	2	; select bank4/5
 12308  0499  0087               	movwf	7
 12309  049A  0020               	movlb	0	; select bank0
 12310  049B  0863               	movf	??_Flash_Memory_Initialization,w
 12311  049C  0081               	movwf	1
 12312                           
 12313                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12314  049D  3002               	movlw	2
 12315  049E  319E  26E7  3184   	fcall	_Flash_Memory_Read
 12316  04A1  0020               	movlb	0	; select bank0
 12317  04A2  00E3               	movwf	??_Flash_Memory_Initialization
 12318  04A3  0021               	movlb	1	; select bank1
 12319  04A4  086D               	movf	_product^(0+128),w
 12320  04A5  3E0E               	addlw	14
 12321  04A6  0086               	movwf	6
 12322  04A7  3002               	movlw	2	; select bank4/5
 12323  04A8  0087               	movwf	7
 12324  04A9  0020               	movlb	0	; select bank0
 12325  04AA  0863               	movf	??_Flash_Memory_Initialization,w
 12326  04AB  0081               	movwf	1
 12327                           
 12328                           ;MCU_B1.c: 941: i = getDimmerLights_ValueToPercent(((char)(60*0.79)));
 12329  04AC  302F               	movlw	47
 12330  04AD  3196  26D1  3184   	fcall	_getDimmerLights_ValueToPercent
 12331  04B0  0020               	movlb	0	; select bank0
 12332  04B1  00E3               	movwf	??_Flash_Memory_Initialization
 12333  04B2  0863               	movf	??_Flash_Memory_Initialization,w
 12334  04B3  00E4               	movwf	Flash_Memory_Initialization@i
 12335                           
 12336                           ;MCU_B1.c: 942: product->Data[21] = i;
 12337  04B4  0864               	movf	Flash_Memory_Initialization@i,w
 12338  04B5  00E3               	movwf	??_Flash_Memory_Initialization
 12339  04B6  0021               	movlb	1	; select bank1
 12340  04B7  086D               	movf	_product^(0+128),w
 12341  04B8  3E15               	addlw	21
 12342  04B9  0086               	movwf	6
 12343  04BA  3002               	movlw	2	; select bank4/5
 12344  04BB  0087               	movwf	7
 12345  04BC  0020               	movlb	0	; select bank0
 12346  04BD  0863               	movf	??_Flash_Memory_Initialization,w
 12347  04BE  0081               	movwf	1
 12348                           
 12349                           ;MCU_B1.c: 943: product->Data[22] = i;
 12350  04BF  0864               	movf	Flash_Memory_Initialization@i,w
 12351  04C0  00E3               	movwf	??_Flash_Memory_Initialization
 12352  04C1  0021               	movlb	1	; select bank1
 12353  04C2  086D               	movf	_product^(0+128),w
 12354  04C3  3E16               	addlw	22
 12355  04C4  0086               	movwf	6
 12356  04C5  3002               	movlw	2	; select bank4/5
 12357  04C6  0087               	movwf	7
 12358  04C7  0020               	movlb	0	; select bank0
 12359  04C8  0863               	movf	??_Flash_Memory_Initialization,w
 12360  04C9  0081               	movwf	1
 12361                           
 12362                           ;MCU_B1.c: 944: product->Data[23] = i;
 12363  04CA  0864               	movf	Flash_Memory_Initialization@i,w
 12364  04CB  00E3               	movwf	??_Flash_Memory_Initialization
 12365  04CC  0021               	movlb	1	; select bank1
 12366  04CD  086D               	movf	_product^(0+128),w
 12367  04CE  3E17               	addlw	23
 12368  04CF  0086               	movwf	6
 12369  04D0  3002               	movlw	2	; select bank4/5
 12370  04D1  0087               	movwf	7
 12371  04D2  0020               	movlb	0	; select bank0
 12372  04D3  0863               	movf	??_Flash_Memory_Initialization,w
 12373  04D4  0081               	movwf	1
 12374                           
 12375                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12376  04D5  0021               	movlb	1	; select bank1
 12377  04D6  086D               	movf	_product^(0+128),w
 12378  04D7  3E0C               	addlw	12
 12379  04D8  0086               	movwf	6
 12380  04D9  3002               	movlw	2	; select bank4/5
 12381  04DA  0087               	movwf	7
 12382  04DB  0801               	movf	1,w
 12383  04DC  3AFF               	xorlw	255
 12384  04DD  1D03               	skipz
 12385  04DE  0008               	return
 12386  04DF  086D               	movf	_product^(0+128),w
 12387  04E0  3E0D               	addlw	13
 12388  04E1  0086               	movwf	6
 12389  04E2  3002               	movlw	2	; select bank4/5
 12390  04E3  0087               	movwf	7
 12391  04E4  0801               	movf	1,w
 12392  04E5  3AFF               	xorlw	255
 12393  04E6  1D03               	skipz
 12394  04E7  0008               	return
 12395  04E8  086D               	movf	_product^(0+128),w
 12396  04E9  3E0E               	addlw	14
 12397  04EA  0086               	movwf	6
 12398  04EB  3002               	movlw	2	; select bank4/5
 12399  04EC  0087               	movwf	7
 12400  04ED  0801               	movf	1,w
 12401  04EE  3AFF               	xorlw	255
 12402  04EF  1D03               	skipz
 12403  04F0  0008               	return
 12404                           
 12405                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12406  04F1  0022               	movlb	2	; select bank2
 12407  04F2  15A0               	bsf	_myMain^(0+256),3
 12408                           
 12409                           ;MCU_B1.c: 948: myMain.First = 1;
 12410  04F3  16A0               	bsf	_myMain^(0+256),5
 12411                           
 12412                           ;MCU_B1.c: 949: }
 12413                           ;MCU_B1.c: 950: } else {
 12414  04F4  0008               	return
 12415  04F5                     l7607:	
 12416                           
 12417                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(60*0.79)));
 12418  04F5  302F               	movlw	47
 12419  04F6  3196  26D1  3184   	fcall	_getDimmerLights_ValueToPercent
 12420  04F9  0020               	movlb	0	; select bank0
 12421  04FA  00E3               	movwf	??_Flash_Memory_Initialization
 12422  04FB  0863               	movf	??_Flash_Memory_Initialization,w
 12423  04FC  00E4               	movwf	Flash_Memory_Initialization@i
 12424                           
 12425                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12426  04FD  30FF               	movlw	255
 12427  04FE  00E3               	movwf	??_Flash_Memory_Initialization
 12428  04FF  0863               	movf	??_Flash_Memory_Initialization,w
 12429  0500  00A1               	movwf	setMemory_Data@data
 12430  0501  3000               	movlw	0
 12431  0502  319C  245A  3184   	fcall	_setMemory_Data
 12432                           
 12433                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12434  0505  30FF               	movlw	255
 12435  0506  0020               	movlb	0	; select bank0
 12436  0507  00E3               	movwf	??_Flash_Memory_Initialization
 12437  0508  0863               	movf	??_Flash_Memory_Initialization,w
 12438  0509  00A1               	movwf	setMemory_Data@data
 12439  050A  3001               	movlw	1
 12440  050B  319C  245A  3184   	fcall	_setMemory_Data
 12441                           
 12442                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12443  050E  30FF               	movlw	255
 12444  050F  0020               	movlb	0	; select bank0
 12445  0510  00E3               	movwf	??_Flash_Memory_Initialization
 12446  0511  0863               	movf	??_Flash_Memory_Initialization,w
 12447  0512  00A1               	movwf	setMemory_Data@data
 12448  0513  3002               	movlw	2
 12449  0514  319C  245A  3184   	fcall	_setMemory_Data
 12450                           
 12451                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12452  0517  30FF               	movlw	255
 12453  0518  0020               	movlb	0	; select bank0
 12454  0519  00E3               	movwf	??_Flash_Memory_Initialization
 12455  051A  0863               	movf	??_Flash_Memory_Initialization,w
 12456  051B  00A1               	movwf	setMemory_Data@data
 12457  051C  3003               	movlw	3
 12458  051D  319C  245A  3184   	fcall	_setMemory_Data
 12459                           
 12460                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12461  0520  30FF               	movlw	255
 12462  0521  0020               	movlb	0	; select bank0
 12463  0522  00E3               	movwf	??_Flash_Memory_Initialization
 12464  0523  0863               	movf	??_Flash_Memory_Initialization,w
 12465  0524  00A1               	movwf	setMemory_Data@data
 12466  0525  3004               	movlw	4
 12467  0526  319C  245A  3184   	fcall	_setMemory_Data
 12468                           
 12469                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12470  0529  30FF               	movlw	255
 12471  052A  0020               	movlb	0	; select bank0
 12472  052B  00E3               	movwf	??_Flash_Memory_Initialization
 12473  052C  0863               	movf	??_Flash_Memory_Initialization,w
 12474  052D  00A1               	movwf	setMemory_Data@data
 12475  052E  3005               	movlw	5
 12476  052F  319C  245A  3184   	fcall	_setMemory_Data
 12477                           
 12478                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12479  0532  30AA               	movlw	170
 12480  0533  0020               	movlb	0	; select bank0
 12481  0534  00E3               	movwf	??_Flash_Memory_Initialization
 12482  0535  0863               	movf	??_Flash_Memory_Initialization,w
 12483  0536  00A1               	movwf	setMemory_Data@data
 12484  0537  301F               	movlw	31
 12485  0538  319C  245A  3184   	fcall	_setMemory_Data
 12486                           
 12487                           ;MCU_B1.c: 959: product->Data[21] = i;
 12488  053B  0020               	movlb	0	; select bank0
 12489  053C  0864               	movf	Flash_Memory_Initialization@i,w
 12490  053D  00E3               	movwf	??_Flash_Memory_Initialization
 12491  053E  0021               	movlb	1	; select bank1
 12492  053F  086D               	movf	_product^(0+128),w
 12493  0540  3E15               	addlw	21
 12494  0541  0086               	movwf	6
 12495  0542  3002               	movlw	2	; select bank4/5
 12496  0543  0087               	movwf	7
 12497  0544  0020               	movlb	0	; select bank0
 12498  0545  0863               	movf	??_Flash_Memory_Initialization,w
 12499  0546  0081               	movwf	1
 12500                           
 12501                           ;MCU_B1.c: 960: product->Data[22] = i;
 12502  0547  0864               	movf	Flash_Memory_Initialization@i,w
 12503  0548  00E3               	movwf	??_Flash_Memory_Initialization
 12504  0549  0021               	movlb	1	; select bank1
 12505  054A  086D               	movf	_product^(0+128),w
 12506  054B  3E16               	addlw	22
 12507  054C  0086               	movwf	6
 12508  054D  3002               	movlw	2	; select bank4/5
 12509  054E  0087               	movwf	7
 12510  054F  0020               	movlb	0	; select bank0
 12511  0550  0863               	movf	??_Flash_Memory_Initialization,w
 12512  0551  0081               	movwf	1
 12513                           
 12514                           ;MCU_B1.c: 961: product->Data[23] = i;
 12515  0552  0864               	movf	Flash_Memory_Initialization@i,w
 12516  0553  00E3               	movwf	??_Flash_Memory_Initialization
 12517  0554  0021               	movlb	1	; select bank1
 12518  0555  086D               	movf	_product^(0+128),w
 12519  0556  3E17               	addlw	23
 12520  0557  0086               	movwf	6
 12521  0558  3002               	movlw	2	; select bank4/5
 12522  0559  0087               	movwf	7
 12523  055A  0020               	movlb	0	; select bank0
 12524  055B  0863               	movf	??_Flash_Memory_Initialization,w
 12525  055C  0081               	movwf	1
 12526                           
 12527                           ;MCU_B1.c: 962: GIE = 0;
 12528  055D  138B               	bcf	11,7	;volatile
 12529                           
 12530                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12531  055E  3191  21CB         	fcall	_Flash_Memory_Write
 12532                           
 12533                           ;MCU_B1.c: 964: GIE = 1;
 12534  0560  178B               	bsf	11,7	;volatile
 12535                           
 12536                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12537  0561  0022               	movlb	2	; select bank2
 12538  0562  15A0               	bsf	_myMain^(0+256),3
 12539                           
 12540                           ;MCU_B1.c: 966: myMain.First = 1;
 12541  0563  16A0               	bsf	_myMain^(0+256),5
 12542  0564  0008               	return
 12543  0565                     __end_of_Flash_Memory_Initialization:	
 12544                           
 12545                           	psect	text80
 12546  1C5A                     __ptext80:	
 12547 ;; *************** function _setMemory_Data *****************
 12548 ;; Defined at:
 12549 ;;		line 1081 in file "../src/MCU_B1.c"
 12550 ;; Parameters:    Size  Location     Type
 12551 ;;  address         1    wreg     unsigned char 
 12552 ;;  data            1    1[BANK0 ] unsigned char 
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;  address         1    3[BANK0 ] unsigned char 
 12555 ;; Return value:  Size  Location     Type
 12556 ;;		None               void
 12557 ;; Registers used:
 12558 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12559 ;; Tracked objects:
 12560 ;;		On entry : 0/0
 12561 ;;		On exit  : 0/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12564 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12568 ;;Total ram usage:        3 bytes
 12569 ;; Hardware stack levels used:    1
 12570 ;; Hardware stack levels required when called:    5
 12571 ;; This function calls:
 12572 ;;		Nothing
 12573 ;; This function is called by:
 12574 ;;		_Flash_Memory_Initialization
 12575 ;;		_Flash_Memory_Modify
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579                           
 12580                           ;psect for function _setMemory_Data
 12581  1C5A                     _setMemory_Data:	
 12582                           
 12583                           ;incstack = 0
 12584                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12585                           ;setMemory_Data@address stored from wreg
 12586  1C5A  0020               	movlb	0	; select bank0
 12587  1C5B  00A3               	movwf	setMemory_Data@address
 12588                           
 12589                           ;MCU_B1.c: 1082: Memory.Data[address] = data;
 12590  1C5C  0821               	movf	setMemory_Data@data,w
 12591  1C5D  00A2               	movwf	??_setMemory_Data
 12592  1C5E  0823               	movf	setMemory_Data@address,w
 12593  1C5F  3EBE               	addlw	_Memory& (0+255)
 12594  1C60  0086               	movwf	6
 12595  1C61  3001               	movlw	1	; select bank3/4
 12596  1C62  0087               	movwf	7
 12597  1C63  0822               	movf	??_setMemory_Data,w
 12598  1C64  0081               	movwf	1
 12599  1C65  0008               	return
 12600  1C66                     __end_of_setMemory_Data:	
 12601                           
 12602                           	psect	text81
 12603  11CB                     __ptext81:	
 12604 ;; *************** function _Flash_Memory_Write *****************
 12605 ;; Defined at:
 12606 ;;		line 1014 in file "../src/MCU_B1.c"
 12607 ;; Parameters:    Size  Location     Type
 12608 ;;		None
 12609 ;; Auto vars:     Size  Location     Type
 12610 ;;  i               1    2[BANK0 ] unsigned char 
 12611 ;; Return value:  Size  Location     Type
 12612 ;;		None               void
 12613 ;; Registers used:
 12614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12615 ;; Tracked objects:
 12616 ;;		On entry : 0/0
 12617 ;;		On exit  : 0/0
 12618 ;;		Unchanged: 0/0
 12619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;Total ram usage:        2 bytes
 12625 ;; Hardware stack levels used:    1
 12626 ;; Hardware stack levels required when called:    6
 12627 ;; This function calls:
 12628 ;;		_Flash_Memory_Unlock
 12629 ;; This function is called by:
 12630 ;;		_Flash_Memory_Initialization
 12631 ;;		_Flash_Memory_Modify
 12632 ;; This function uses a non-reentrant model
 12633 ;;
 12634                           
 12635                           
 12636                           ;psect for function _Flash_Memory_Write
 12637  11CB                     _Flash_Memory_Write:	
 12638                           
 12639                           ;MCU_B1.c: 1015: char i = 0;
 12640                           
 12641                           ;incstack = 0
 12642                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12643  11CB  0020               	movlb	0	; select bank0
 12644  11CC  01A2               	clrf	Flash_Memory_Write@i
 12645                           
 12646                           ;MCU_B1.c: 1016: CFGS = 0;
 12647  11CD  0023               	movlb	3	; select bank3
 12648  11CE  1315               	bcf	21,6	;volatile
 12649                           
 12650                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 12651  11CF  3030               	movlw	48
 12652  11D0  0092               	movwf	18	;volatile
 12653                           
 12654                           ;MCU_B1.c: 1018: PMDATH = 0;
 12655  11D1  0194               	clrf	20	;volatile
 12656                           
 12657                           ;MCU_B1.c: 1019: FREE = 0;
 12658  11D2  1215               	bcf	21,4	;volatile
 12659                           
 12660                           ;MCU_B1.c: 1020: LWLO = 1;
 12661  11D3  1695               	bsf	21,5	;volatile
 12662                           
 12663                           ;MCU_B1.c: 1021: WREN = 1;
 12664  11D4  1515               	bsf	21,2	;volatile
 12665                           
 12666                           ;MCU_B1.c: 1022: for (i = 0; i < 32; i++) {
 12667  11D5  0020               	movlb	0	; select bank0
 12668  11D6  01A2               	clrf	Flash_Memory_Write@i
 12669  11D7  3020               	movlw	32
 12670  11D8  0222               	subwf	Flash_Memory_Write@i,w
 12671  11D9  1803               	btfsc	3,0
 12672  11DA  29F3               	goto	l1242
 12673  11DB                     l6799:	
 12674                           
 12675                           ;MCU_B1.c: 1023: PMADRL = i;
 12676  11DB  0822               	movf	Flash_Memory_Write@i,w
 12677  11DC  0023               	movlb	3	; select bank3
 12678  11DD  0091               	movwf	17	;volatile
 12679                           
 12680                           ;MCU_B1.c: 1024: PMDATL = Memory.Data[i];
 12681  11DE  0020               	movlb	0	; select bank0
 12682  11DF  0822               	movf	Flash_Memory_Write@i,w
 12683  11E0  3EBE               	addlw	_Memory& (0+255)
 12684  11E1  0086               	movwf	6
 12685  11E2  3001               	movlw	1	; select bank3/4
 12686  11E3  0087               	movwf	7
 12687  11E4  0801               	movf	1,w
 12688  11E5  0023               	movlb	3	; select bank3
 12689  11E6  0093               	movwf	19	;volatile
 12690                           
 12691                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 12692  11E7  319B  23C8  3191   	fcall	_Flash_Memory_Unlock
 12693  11EA  3001               	movlw	1
 12694  11EB  0020               	movlb	0	; select bank0
 12695  11EC  00A1               	movwf	??_Flash_Memory_Write
 12696  11ED  0821               	movf	??_Flash_Memory_Write,w
 12697  11EE  07A2               	addwf	Flash_Memory_Write@i,f
 12698  11EF  3020               	movlw	32
 12699  11F0  0222               	subwf	Flash_Memory_Write@i,w
 12700  11F1  1C03               	skipc
 12701  11F2  29DB               	goto	l6799
 12702  11F3                     l1242:	
 12703                           
 12704                           ;MCU_B1.c: 1026: }
 12705                           ;MCU_B1.c: 1027: LWLO = 0;
 12706  11F3  0023               	movlb	3	; select bank3
 12707  11F4  1295               	bcf	21,5	;volatile
 12708                           
 12709                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12710  11F5  319B  23C8         	fcall	_Flash_Memory_Unlock
 12711                           
 12712                           ;MCU_B1.c: 1029: WREN = 0;
 12713  11F7  0023               	movlb	3	; select bank3
 12714  11F8  1115               	bcf	21,2	;volatile
 12715  11F9  0008               	return
 12716  11FA                     __end_of_Flash_Memory_Write:	
 12717                           
 12718                           	psect	text82
 12719  1BC8                     __ptext82:	
 12720 ;; *************** function _Flash_Memory_Unlock *****************
 12721 ;; Defined at:
 12722 ;;		line 993 in file "../src/MCU_B1.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;		None
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;		None
 12727 ;; Return value:  Size  Location     Type
 12728 ;;		None               void
 12729 ;; Registers used:
 12730 ;;		wreg
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;Total ram usage:        0 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    5
 12743 ;; This function calls:
 12744 ;;		Nothing
 12745 ;; This function is called by:
 12746 ;;		_Flash_Memory_Write
 12747 ;;		_Flash_Memory_Erasing
 12748 ;; This function uses a non-reentrant model
 12749 ;;
 12750                           
 12751                           
 12752                           ;psect for function _Flash_Memory_Unlock
 12753  1BC8                     _Flash_Memory_Unlock:	
 12754                           
 12755                           ;MCU_B1.c: 994: PMCON2 = 0x55;
 12756                           
 12757                           ;incstack = 0
 12758                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12759  1BC8  3055               	movlw	85
 12760  1BC9  0023               	movlb	3	; select bank3
 12761  1BCA  0096               	movwf	22	;volatile
 12762                           
 12763                           ;MCU_B1.c: 995: PMCON2 = 0xaa;
 12764  1BCB  30AA               	movlw	170
 12765  1BCC  0096               	movwf	22	;volatile
 12766                           
 12767                           ;MCU_B1.c: 996: WR = 1;
 12768  1BCD  1495               	bsf	21,1	;volatile
 12769                           
 12770                           ;MCU_B1.c: 997: __nop();
 12771  1BCE  0000               	nop
 12772                           
 12773                           ;MCU_B1.c: 998: __nop();
 12774  1BCF  0000               	nop
 12775  1BD0  0008               	return
 12776  1BD1                     __end_of_Flash_Memory_Unlock:	
 12777                           
 12778                           	psect	text83
 12779  1EE7                     __ptext83:	
 12780 ;; *************** function _Flash_Memory_Read *****************
 12781 ;; Defined at:
 12782 ;;		line 1002 in file "../src/MCU_B1.c"
 12783 ;; Parameters:    Size  Location     Type
 12784 ;;  address         1    wreg     unsigned char 
 12785 ;; Auto vars:     Size  Location     Type
 12786 ;;  address         1    3[BANK0 ] unsigned char 
 12787 ;;  ret             1    4[BANK0 ] unsigned char 
 12788 ;;  i               1    2[BANK0 ] unsigned char 
 12789 ;; Return value:  Size  Location     Type
 12790 ;;                  1    wreg      unsigned char 
 12791 ;; Registers used:
 12792 ;;		wreg, status,2
 12793 ;; Tracked objects:
 12794 ;;		On entry : 0/0
 12795 ;;		On exit  : 0/0
 12796 ;;		Unchanged: 0/0
 12797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12799 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12801 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12802 ;;Total ram usage:        4 bytes
 12803 ;; Hardware stack levels used:    1
 12804 ;; Hardware stack levels required when called:    5
 12805 ;; This function calls:
 12806 ;;		Nothing
 12807 ;; This function is called by:
 12808 ;;		_Flash_Memory_Initialization
 12809 ;;		_Flash_Memory_Modify
 12810 ;; This function uses a non-reentrant model
 12811 ;;
 12812                           
 12813                           
 12814                           ;psect for function _Flash_Memory_Read
 12815  1EE7                     _Flash_Memory_Read:	
 12816                           
 12817                           ;incstack = 0
 12818                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12819                           ;Flash_Memory_Read@address stored from wreg
 12820  1EE7  0020               	movlb	0	; select bank0
 12821  1EE8  00A3               	movwf	Flash_Memory_Read@address
 12822                           
 12823                           ;MCU_B1.c: 1003: char i = 0, ret = 0;
 12824  1EE9  01A2               	clrf	Flash_Memory_Read@i
 12825  1EEA  01A4               	clrf	Flash_Memory_Read@ret
 12826                           
 12827                           ;MCU_B1.c: 1004: PMADRH = 0x30;
 12828  1EEB  3030               	movlw	48
 12829  1EEC  0023               	movlb	3	; select bank3
 12830  1EED  0092               	movwf	18	;volatile
 12831                           
 12832                           ;MCU_B1.c: 1005: PMADRL = address;
 12833  1EEE  0020               	movlb	0	; select bank0
 12834  1EEF  0823               	movf	Flash_Memory_Read@address,w
 12835  1EF0  0023               	movlb	3	; select bank3
 12836  1EF1  0091               	movwf	17	;volatile
 12837                           
 12838                           ;MCU_B1.c: 1006: CFGS = 0;
 12839  1EF2  1315               	bcf	21,6	;volatile
 12840                           
 12841                           ;MCU_B1.c: 1007: RD = 1;
 12842  1EF3  1415               	bsf	21,0	;volatile
 12843                           
 12844                           ;MCU_B1.c: 1008: i = PMDATH;
 12845  1EF4  0814               	movf	20,w	;volatile
 12846  1EF5  0020               	movlb	0	; select bank0
 12847  1EF6  00A1               	movwf	??_Flash_Memory_Read
 12848  1EF7  0821               	movf	??_Flash_Memory_Read,w
 12849  1EF8  00A2               	movwf	Flash_Memory_Read@i
 12850                           
 12851                           ;MCU_B1.c: 1009: ret = PMDATL;
 12852  1EF9  0023               	movlb	3	; select bank3
 12853  1EFA  0813               	movf	19,w	;volatile
 12854  1EFB  0020               	movlb	0	; select bank0
 12855  1EFC  00A1               	movwf	??_Flash_Memory_Read
 12856  1EFD  0821               	movf	??_Flash_Memory_Read,w
 12857  1EFE  00A4               	movwf	Flash_Memory_Read@ret
 12858                           
 12859                           ;MCU_B1.c: 1010: return ret;
 12860  1EFF  0824               	movf	Flash_Memory_Read@ret,w
 12861  1F00  0008               	return
 12862  1F01                     __end_of_Flash_Memory_Read:	
 12863                           
 12864                           	psect	text84
 12865  063C                     __ptext84:	
 12866 ;; *************** function _Exception_Main *****************
 12867 ;; Defined at:
 12868 ;;		line 499 in file "../src/Main_B1.c"
 12869 ;; Parameters:    Size  Location     Type
 12870 ;;		None
 12871 ;; Auto vars:     Size  Location     Type
 12872 ;;  i               2   19[BANK0 ] int 
 12873 ;;  i               2   17[BANK0 ] int 
 12874 ;;  error           1   22[BANK0 ] unsigned char 
 12875 ;;  lights          1   21[BANK0 ] unsigned char 
 12876 ;;  count           1   16[BANK0 ] unsigned char 
 12877 ;;  status          1   15[BANK0 ] unsigned char 
 12878 ;; Return value:  Size  Location     Type
 12879 ;;		None               void
 12880 ;; Registers used:
 12881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;Total ram usage:        9 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; Hardware stack levels required when called:    7
 12894 ;; This function calls:
 12895 ;;		_getDimmerLights_Line
 12896 ;;		_getDimmerLights_Status
 12897 ;;		_getMain_All_Error_Status
 12898 ;;		_getMain_All_LightsStatus
 12899 ;;		_setBuz
 12900 ;;		_setDimmerLights_SwOff
 12901 ;;		_setLED
 12902 ;; This function is called by:
 12903 ;;		_main
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           
 12908                           ;psect for function _Exception_Main
 12909  063C                     _Exception_Main:	
 12910                           
 12911                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12912                           
 12913                           ;incstack = 0
 12914                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12915  063C  3000               	movlw	0
 12916  063D  3191  21FA  3186   	fcall	_getMain_All_Error_Status
 12917  0640  0020               	movlb	0	; select bank0
 12918  0641  00AE               	movwf	??_Exception_Main
 12919  0642  082E               	movf	??_Exception_Main,w
 12920  0643  00B6               	movwf	Exception_Main@error
 12921                           
 12922                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12923  0644  01B5               	clrf	Exception_Main@lights
 12924  0645  01B0               	clrf	Exception_Main@count
 12925  0646  0AB0               	incf	Exception_Main@count,f
 12926                           
 12927                           ;Main_B1.c: 502: char status = 0;
 12928  0647  01AF               	clrf	Exception_Main@status
 12929                           
 12930                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12931  0648  0022               	movlb	2	; select bank2
 12932  0649  1DAA               	btfss	(_myMain^(0+256)+10),3
 12933  064A  2E5A               	goto	l9043
 12934                           
 12935                           ;Main_B1.c: 505: if (error == 0) {
 12936  064B  0020               	movlb	0	; select bank0
 12937  064C  08B6               	movf	Exception_Main@error,f
 12938  064D  1D03               	skipz
 12939  064E  0008               	return
 12940                           
 12941                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12942  064F  0022               	movlb	2	; select bank2
 12943  0650  11AA               	bcf	(_myMain^(0+256)+10),3
 12944                           
 12945                           ;Main_B1.c: 511: setLED(error, 110);
 12946  0651  306E               	movlw	110
 12947  0652  0020               	movlb	0	; select bank0
 12948  0653  00AE               	movwf	??_Exception_Main
 12949  0654  082E               	movf	??_Exception_Main,w
 12950  0655  00A3               	movwf	setLED@command
 12951  0656  0836               	movf	Exception_Main@error,w
 12952  0657  3193  233E         	fcall	_setLED
 12953                           
 12954                           ;Main_B1.c: 522: }
 12955                           ;Main_B1.c: 523: } else {
 12956  0659  0008               	return
 12957  065A                     l9043:	
 12958                           
 12959                           ;Main_B1.c: 524: if (error != 0) {
 12960  065A  0020               	movlb	0	; select bank0
 12961  065B  0836               	movf	Exception_Main@error,w
 12962  065C  1903               	btfsc	3,2
 12963  065D  0008               	return
 12964                           
 12965                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12966  065E  0022               	movlb	2	; select bank2
 12967  065F  15AA               	bsf	(_myMain^(0+256)+10),3
 12968                           
 12969                           ;Main_B1.c: 529: setLED(error, 111);
 12970  0660  306F               	movlw	111
 12971  0661  0020               	movlb	0	; select bank0
 12972  0662  00AE               	movwf	??_Exception_Main
 12973  0663  082E               	movf	??_Exception_Main,w
 12974  0664  00A3               	movwf	setLED@command
 12975  0665  0836               	movf	Exception_Main@error,w
 12976  0666  3193  233E  3186   	fcall	_setLED
 12977                           
 12978                           ;Main_B1.c: 538: switch (error) {
 12979  0669  2F06               	goto	l9091
 12980  066A                     l9049:	
 12981                           ;Main_B1.c: 539: case 2:
 12982                           
 12983                           
 12984                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 12985  066A  319B  23D1  3186   	fcall	_getMain_All_LightsStatus
 12986  066D  3A01               	xorlw	1
 12987  066E  1D03               	skipz
 12988  066F  2E79               	goto	l9053
 12989                           
 12990                           ;Main_B1.c: 547: setBuz(10, 300);
 12991  0670  302C               	movlw	44
 12992  0671  0020               	movlb	0	; select bank0
 12993  0672  00AA               	movwf	setBuz@time
 12994  0673  3001               	movlw	1
 12995  0674  00AB               	movwf	setBuz@time+1
 12996  0675  300A               	movlw	10
 12997  0676  3195  25BC  3186   	fcall	_setBuz
 12998  0679                     l9053:	
 12999                           
 13000                           ;Main_B1.c: 548: }
 13001                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13002  0679  0020               	movlb	0	; select bank0
 13003  067A  01B1               	clrf	Exception_Main@i
 13004  067B  01B2               	clrf	Exception_Main@i+1
 13005  067C                     l9063:	
 13006  067C  0832               	movf	Exception_Main@i+1,w
 13007  067D  3A80               	xorlw	128
 13008  067E  00AE               	movwf	??_Exception_Main
 13009  067F  3080               	movlw	128
 13010  0680  022E               	subwf	??_Exception_Main,w
 13011  0681  1D03               	skipz
 13012  0682  2E85               	goto	u10005
 13013  0683  0830               	movf	Exception_Main@count,w
 13014  0684  0231               	subwf	Exception_Main@i,w
 13015  0685                     u10005:	
 13016  0685  1803               	btfsc	3,0
 13017  0686  2EA7               	goto	u10000
 13018                           
 13019                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13020  0687  0020               	movlb	0	; select bank0
 13021  0688  0831               	movf	Exception_Main@i,w
 13022  0689  3E01               	addlw	1
 13023  068A  319C  24D1  3186   	fcall	_getDimmerLights_Status
 13024  068D  3A01               	xorlw	1
 13025  068E  1D03               	skipz
 13026  068F  2EA1               	goto	l9061
 13027                           
 13028                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13029  0690  0021               	movlb	1	; select bank1
 13030  0691  084F               	movf	_DimmerLights^(0+128),w
 13031  0692  0086               	movwf	6
 13032  0693  3001               	movlw	1	; select bank2/3
 13033  0694  0087               	movwf	7
 13034  0695  1401               	bsf	1,0
 13035                           
 13036                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13037  0696  0A4F               	incf	_DimmerLights^(0+128),w
 13038  0697  0086               	movwf	6
 13039  0698  3001               	movlw	1	; select bank2/3
 13040  0699  0087               	movwf	7
 13041  069A  1001               	bcf	1,0
 13042                           
 13043                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13044  069B  0020               	movlb	0	; select bank0
 13045  069C  0831               	movf	Exception_Main@i,w
 13046  069D  3E01               	addlw	1
 13047  069E  3193  2305  3186   	fcall	_setDimmerLights_SwOff
 13048  06A1                     l9061:	
 13049  06A1  3001               	movlw	1
 13050  06A2  0020               	movlb	0	; select bank0
 13051  06A3  07B1               	addwf	Exception_Main@i,f
 13052  06A4  3000               	movlw	0
 13053  06A5  3DB2               	addwfc	Exception_Main@i+1,f
 13054  06A6  2E7C               	goto	l9063
 13055  06A7                     u10000:	
 13056  06A7  0020               	movlb	0	; select bank0
 13057  06A8  0008               	return
 13058  06A9                     l9065:	
 13059                           ;Main_B1.c: 561: case 3:
 13060                           
 13061                           ;Main_B1.c: 556: }
 13062                           ;Main_B1.c: 557: }
 13063                           ;Main_B1.c: 560: break;
 13064                           
 13065                           
 13066                           ;Main_B1.c: 563: setBuz(5, 300);
 13067  06A9  302C               	movlw	44
 13068  06AA  0020               	movlb	0	; select bank0
 13069  06AB  00AA               	movwf	setBuz@time
 13070  06AC  3001               	movlw	1
 13071  06AD  00AB               	movwf	setBuz@time+1
 13072  06AE  3005               	movlw	5
 13073  06AF  3195  25BC  3186   	fcall	_setBuz
 13074                           
 13075                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13076  06B2  319B  23DB  3186   	fcall	_getDimmerLights_Line
 13077  06B5  0020               	movlb	0	; select bank0
 13078  06B6  00AE               	movwf	??_Exception_Main
 13079  06B7  082E               	movf	??_Exception_Main,w
 13080  06B8  00B5               	movwf	Exception_Main@lights
 13081                           
 13082                           ;Main_B1.c: 565: if (lights == 0) {
 13083  06B9  08B5               	movf	Exception_Main@lights,f
 13084  06BA  1D03               	skipz
 13085  06BB  2EEB               	goto	l9083
 13086                           
 13087                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13088  06BC  01B3               	clrf	Exception_Main@i_3535
 13089  06BD  01B4               	clrf	Exception_Main@i_3535+1
 13090  06BE                     l9081:	
 13091  06BE  0834               	movf	Exception_Main@i_3535+1,w
 13092  06BF  3A80               	xorlw	128
 13093  06C0  00AE               	movwf	??_Exception_Main
 13094  06C1  3080               	movlw	128
 13095  06C2  022E               	subwf	??_Exception_Main,w
 13096  06C3  1D03               	skipz
 13097  06C4  2EC7               	goto	u10035
 13098  06C5  0830               	movf	Exception_Main@count,w
 13099  06C6  0233               	subwf	Exception_Main@i_3535,w
 13100  06C7                     u10035:	
 13101  06C7  1803               	btfsc	3,0
 13102  06C8  2EE9               	goto	u10030
 13103                           
 13104                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13105  06C9  0020               	movlb	0	; select bank0
 13106  06CA  0833               	movf	Exception_Main@i_3535,w
 13107  06CB  3E01               	addlw	1
 13108  06CC  319C  24D1  3186   	fcall	_getDimmerLights_Status
 13109  06CF  3A01               	xorlw	1
 13110  06D0  1D03               	skipz
 13111  06D1  2EE3               	goto	l9079
 13112                           
 13113                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13114  06D2  0021               	movlb	1	; select bank1
 13115  06D3  084F               	movf	_DimmerLights^(0+128),w
 13116  06D4  0086               	movwf	6
 13117  06D5  3001               	movlw	1	; select bank2/3
 13118  06D6  0087               	movwf	7
 13119  06D7  1401               	bsf	1,0
 13120                           
 13121                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13122  06D8  0A4F               	incf	_DimmerLights^(0+128),w
 13123  06D9  0086               	movwf	6
 13124  06DA  3001               	movlw	1	; select bank2/3
 13125  06DB  0087               	movwf	7
 13126  06DC  1001               	bcf	1,0
 13127                           
 13128                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13129  06DD  0020               	movlb	0	; select bank0
 13130  06DE  0833               	movf	Exception_Main@i_3535,w
 13131  06DF  3E01               	addlw	1
 13132  06E0  3193  2305  3186   	fcall	_setDimmerLights_SwOff
 13133  06E3                     l9079:	
 13134  06E3  3001               	movlw	1
 13135  06E4  0020               	movlb	0	; select bank0
 13136  06E5  07B3               	addwf	Exception_Main@i_3535,f
 13137  06E6  3000               	movlw	0
 13138  06E7  3DB4               	addwfc	Exception_Main@i_3535+1,f
 13139  06E8  2EBE               	goto	l9081
 13140  06E9                     u10030:	
 13141  06E9  0020               	movlb	0	; select bank0
 13142  06EA  0008               	return
 13143  06EB                     l9083:	
 13144                           ;Main_B1.c: 573: }
 13145                           ;Main_B1.c: 574: }
 13146                           ;Main_B1.c: 575: } else {
 13147                           
 13148                           
 13149                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13150  06EB  0020               	movlb	0	; select bank0
 13151  06EC  0835               	movf	Exception_Main@lights,w
 13152  06ED  319C  24D1  3186   	fcall	_getDimmerLights_Status
 13153  06F0  3A01               	xorlw	1
 13154  06F1  1903               	btfsc	3,2
 13155  06F2  2EF5               	goto	l9085
 13156  06F3  0020               	movlb	0	; select bank0
 13157  06F4  0008               	return
 13158  06F5                     l9085:	
 13159                           
 13160                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13161  06F5  0021               	movlb	1	; select bank1
 13162  06F6  084F               	movf	_DimmerLights^(0+128),w
 13163  06F7  0086               	movwf	6
 13164  06F8  3001               	movlw	1	; select bank2/3
 13165  06F9  0087               	movwf	7
 13166  06FA  1401               	bsf	1,0
 13167                           
 13168                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13169  06FB  0A4F               	incf	_DimmerLights^(0+128),w
 13170  06FC  0086               	movwf	6
 13171  06FD  3001               	movlw	1	; select bank2/3
 13172  06FE  0087               	movwf	7
 13173  06FF  1001               	bcf	1,0
 13174                           
 13175                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13176  0700  0020               	movlb	0	; select bank0
 13177  0701  0835               	movf	Exception_Main@lights,w
 13178  0702  3193  2305         	fcall	_setDimmerLights_SwOff
 13179  0704  0020               	movlb	0	; select bank0
 13180  0705  0008               	return
 13181  0706                     l9091:	
 13182                           ;Main_B1.c: 586: }
 13183                           
 13184                           ;Main_B1.c: 582: }
 13185                           ;Main_B1.c: 583: }
 13186                           ;Main_B1.c: 585: break;
 13187                           
 13188  0706  0020               	movlb	0	; select bank0
 13189  0707  0836               	movf	Exception_Main@error,w
 13190                           
 13191                           ; Switch size 1, requested type "space"
 13192                           ; Number of cases is 2, Range of values is 2 to 3
 13193                           ; switch strategies available:
 13194                           ; Name         Instructions Cycles
 13195                           ; simple_byte            7     4 (average)
 13196                           ; direct_byte           13     9 (fixed)
 13197                           ; jumptable            263     9 (fixed)
 13198                           ;	Chosen strategy is simple_byte
 13199  0708  3A02               	xorlw	2	; case 2
 13200  0709  1903               	skipnz
 13201  070A  2E6A               	goto	l9049
 13202  070B  3A01               	xorlw	1	; case 3
 13203  070C  1903               	skipnz
 13204  070D  2EA9               	goto	l9065
 13205  070E  2F10               	goto	l1483
 13206  070F  0008               	return
 13207  0710                     l1483:	
 13208  0710  0008               	return
 13209  0711                     __end_of_Exception_Main:	
 13210                           
 13211                           	psect	text85
 13212  1BDB                     __ptext85:	
 13213 ;; *************** function _getDimmerLights_Line *****************
 13214 ;; Defined at:
 13215 ;;		line 978 in file "../src/Dimmer_B1.c"
 13216 ;; Parameters:    Size  Location     Type
 13217 ;;		None
 13218 ;; Auto vars:     Size  Location     Type
 13219 ;;  line            1    1[BANK0 ] unsigned char 
 13220 ;; Return value:  Size  Location     Type
 13221 ;;                  1    wreg      unsigned char 
 13222 ;; Registers used:
 13223 ;;		wreg, status,2
 13224 ;; Tracked objects:
 13225 ;;		On entry : 0/0
 13226 ;;		On exit  : 0/0
 13227 ;;		Unchanged: 0/0
 13228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;Total ram usage:        1 bytes
 13234 ;; Hardware stack levels used:    1
 13235 ;; Hardware stack levels required when called:    5
 13236 ;; This function calls:
 13237 ;;		Nothing
 13238 ;; This function is called by:
 13239 ;;		_Exception_Main
 13240 ;; This function uses a non-reentrant model
 13241 ;;
 13242                           
 13243                           
 13244                           ;psect for function _getDimmerLights_Line
 13245  1BDB                     _getDimmerLights_Line:	
 13246                           
 13247                           ;Dimmer_B1.c: 979: char line = 0;
 13248                           
 13249                           ;incstack = 0
 13250                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13251  1BDB  0020               	movlb	0	; select bank0
 13252  1BDC  01A1               	clrf	getDimmerLights_Line@line
 13253                           
 13254                           ;Dimmer_B1.c: 981: if (DimmerLights1.Line == 1) {
 13255  1BDD  0022               	movlb	2	; select bank2
 13256  1BDE  1CDD               	btfss	(_DimmerLights1^(0+256)+1),1
 13257  1BDF  2BE3               	goto	l7021
 13258                           
 13259                           ;Dimmer_B1.c: 982: line = 1;
 13260  1BE0  0020               	movlb	0	; select bank0
 13261  1BE1  01A1               	clrf	getDimmerLights_Line@line
 13262  1BE2  0AA1               	incf	getDimmerLights_Line@line,f
 13263  1BE3                     l7021:	
 13264                           
 13265                           ;Dimmer_B1.c: 983: }
 13266                           ;Dimmer_B1.c: 995: return line;
 13267  1BE3  0020               	movlb	0	; select bank0
 13268  1BE4  0821               	movf	getDimmerLights_Line@line,w
 13269  1BE5  0008               	return
 13270  1BE6                     __end_of_getDimmerLights_Line:	
 13271                           
 13272                           	psect	text86
 13273  1F50                     __ptext86:	
 13274 ;; *************** function _DimmerLights_Main *****************
 13275 ;; Defined at:
 13276 ;;		line 736 in file "../src/Dimmer_B1.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;		None
 13279 ;; Auto vars:     Size  Location     Type
 13280 ;;		None
 13281 ;; Return value:  Size  Location     Type
 13282 ;;		None               void
 13283 ;; Registers used:
 13284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13285 ;; Tracked objects:
 13286 ;;		On entry : 0/0
 13287 ;;		On exit  : 0/0
 13288 ;;		Unchanged: 0/0
 13289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;Total ram usage:        0 bytes
 13295 ;; Hardware stack levels used:    1
 13296 ;; Hardware stack levels required when called:   10
 13297 ;; This function calls:
 13298 ;;		_getLoad_OK
 13299 ;;		_getMain_All_Error_Status
 13300 ;;		_getMain_All_LightsStatus
 13301 ;;		_setDimmerLights_Main
 13302 ;; This function is called by:
 13303 ;;		_main
 13304 ;; This function uses a non-reentrant model
 13305 ;;
 13306                           
 13307                           
 13308                           ;psect for function _DimmerLights_Main
 13309  1F50                     _DimmerLights_Main:	
 13310                           
 13311                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13312                           
 13313                           ;incstack = 0
 13314                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13315  1F50  0022               	movlb	2	; select bank2
 13316  1F51  1CAD               	btfss	_Dimmer^(0+256),1
 13317  1F52  2F68               	goto	l8809
 13318                           
 13319                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13320  1F53  319B  239E  319F   	fcall	_getLoad_OK
 13321  1F56  3A01               	xorlw	1
 13322  1F57  1903               	skipnz
 13323  1F58  2F66               	goto	l750
 13324  1F59  3000               	movlw	0
 13325  1F5A  3191  21FA  319F   	fcall	_getMain_All_Error_Status
 13326  1F5D  3800               	iorlw	0
 13327  1F5E  1D03               	skipz
 13328  1F5F  2F66               	goto	l750
 13329  1F60  319B  23D1  319F   	fcall	_getMain_All_LightsStatus
 13330  1F63  3800               	iorlw	0
 13331  1F64  1D03               	skipz
 13332  1F65  2F68               	goto	l8809
 13333  1F66                     l750:	
 13334                           
 13335                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13336  1F66  0022               	movlb	2	; select bank2
 13337  1F67  10AD               	bcf	_Dimmer^(0+256),1
 13338  1F68                     l8809:	
 13339                           
 13340                           ;Dimmer_B1.c: 742: }
 13341                           ;Dimmer_B1.c: 743: }
 13342                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13343  1F68  3001               	movlw	1
 13344  1F69  3188  2034         	fcall	_setDimmerLights_Main
 13345  1F6B  0008               	return
 13346  1F6C                     __end_of_DimmerLights_Main:	
 13347                           
 13348                           	psect	text87
 13349  0834                     __ptext87:	
 13350 ;; *************** function _setDimmerLights_Main *****************
 13351 ;; Defined at:
 13352 ;;		line 765 in file "../src/Dimmer_B1.c"
 13353 ;; Parameters:    Size  Location     Type
 13354 ;;  lights          1    wreg     unsigned char 
 13355 ;; Auto vars:     Size  Location     Type
 13356 ;;  lights          1    4[BANK1 ] unsigned char 
 13357 ;; Return value:  Size  Location     Type
 13358 ;;		None               void
 13359 ;; Registers used:
 13360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13361 ;; Tracked objects:
 13362 ;;		On entry : 0/0
 13363 ;;		On exit  : 0/0
 13364 ;;		Unchanged: 0/0
 13365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13367 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13369 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13370 ;;Total ram usage:        1 bytes
 13371 ;; Hardware stack levels used:    1
 13372 ;; Hardware stack levels required when called:    9
 13373 ;; This function calls:
 13374 ;;		_DimmerLights_SelectPointer
 13375 ;;		_getDimmerLights_Allow_Condition
 13376 ;;		_getMain_All_LightsStatus
 13377 ;;		_setDimmerLights_Dimming
 13378 ;;		_setDimmerLights_OnOff
 13379 ;; This function is called by:
 13380 ;;		_DimmerLights_Main
 13381 ;; This function uses a non-reentrant model
 13382 ;;
 13383                           
 13384                           
 13385                           ;psect for function _setDimmerLights_Main
 13386  0834                     _setDimmerLights_Main:	
 13387                           
 13388                           ;incstack = 0
 13389                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13390                           ;setDimmerLights_Main@lights stored from wreg
 13391  0834  0021               	movlb	1	; select bank1
 13392  0835  00E9               	movwf	setDimmerLights_Main@lights^(0+128)
 13393                           
 13394                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13395  0836  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13396  0837  319C  241E  3188   	fcall	_DimmerLights_SelectPointer
 13397                           
 13398                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13399  083A  0021               	movlb	1	; select bank1
 13400  083B  084F               	movf	_DimmerLights^(0+128),w
 13401  083C  0086               	movwf	6
 13402  083D  3001               	movlw	1	; select bank2/3
 13403  083E  0087               	movwf	7
 13404  083F  1C81               	btfss	1,1
 13405  0840  2860               	goto	l8545
 13406                           
 13407                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13408  0841  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13409  0842  319E  2643  3188   	fcall	_getDimmerLights_Allow_Condition
 13410  0845  3800               	iorlw	0
 13411  0846  1D03               	skipz
 13412  0847  0008               	return
 13413                           
 13414                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13415  0848  0021               	movlb	1	; select bank1
 13416  0849  084F               	movf	_DimmerLights^(0+128),w
 13417  084A  0086               	movwf	6
 13418  084B  3001               	movlw	1	; select bank2/3
 13419  084C  0087               	movwf	7
 13420  084D  1081               	bcf	1,1
 13421                           
 13422                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13423  084E  084F               	movf	_DimmerLights^(0+128),w
 13424  084F  0086               	movwf	6
 13425  0850  3001               	movlw	1	; select bank2/3
 13426  0851  0087               	movwf	7
 13427  0852  1D01               	btfss	1,2
 13428  0853  285A               	goto	l8543
 13429                           
 13430                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13431  0854  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13432  0855  0AE5               	incf	setDimmerLights_OnOff@command^(0+128),f
 13433  0856  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13434  0857  3187  2711         	fcall	_setDimmerLights_OnOff
 13435                           
 13436                           ;Dimmer_B1.c: 773: } else {
 13437  0859  0008               	return
 13438  085A                     l8543:	
 13439                           
 13440                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13441  085A  0021               	movlb	1	; select bank1
 13442  085B  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13443  085C  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13444  085D  3187  2711         	fcall	_setDimmerLights_OnOff
 13445                           
 13446                           ;Dimmer_B1.c: 775: }
 13447                           ;Dimmer_B1.c: 776: }
 13448                           ;Dimmer_B1.c: 777: } else {
 13449  085F  0008               	return
 13450  0860                     l8545:	
 13451                           
 13452                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13453  0860  319B  23D1  3188   	fcall	_getMain_All_LightsStatus
 13454  0863  3A01               	xorlw	1
 13455  0864  1D03               	skipz
 13456  0865  288F               	goto	l8557
 13457                           
 13458                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13459  0866  0021               	movlb	1	; select bank1
 13460  0867  084F               	movf	_DimmerLights^(0+128),w
 13461  0868  0086               	movwf	6
 13462  0869  3001               	movlw	1	; select bank2/3
 13463  086A  0087               	movwf	7
 13464  086B  1E01               	btfss	1,4
 13465  086C  0008               	return
 13466                           
 13467                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13468  086D  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13469  086E  319E  2643  3188   	fcall	_getDimmerLights_Allow_Condition
 13470  0871  3800               	iorlw	0
 13471  0872  1D03               	skipz
 13472  0873  0008               	return
 13473                           
 13474                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13475  0874  0021               	movlb	1	; select bank1
 13476  0875  084F               	movf	_DimmerLights^(0+128),w
 13477  0876  0086               	movwf	6
 13478  0877  3001               	movlw	1	; select bank2/3
 13479  0878  0087               	movwf	7
 13480  0879  1201               	bcf	1,4
 13481                           
 13482                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13483  087A  084F               	movf	_DimmerLights^(0+128),w
 13484  087B  0086               	movwf	6
 13485  087C  3001               	movlw	1	; select bank2/3
 13486  087D  0087               	movwf	7
 13487  087E  1E81               	btfss	1,5
 13488  087F  2888               	goto	l8555
 13489                           
 13490                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13491  0880  0020               	movlb	0	; select bank0
 13492  0881  01EB               	clrf	setDimmerLights_Dimming@status
 13493  0882  0AEB               	incf	setDimmerLights_Dimming@status,f
 13494  0883  0021               	movlb	1	; select bank1
 13495  0884  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13496  0885  3194  24C5         	fcall	_setDimmerLights_Dimming
 13497                           
 13498                           ;Dimmer_B1.c: 784: } else {
 13499  0887  0008               	return
 13500  0888                     l8555:	
 13501                           
 13502                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13503  0888  0020               	movlb	0	; select bank0
 13504  0889  01EB               	clrf	setDimmerLights_Dimming@status
 13505  088A  0021               	movlb	1	; select bank1
 13506  088B  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13507  088C  3194  24C5         	fcall	_setDimmerLights_Dimming
 13508                           
 13509                           ;Dimmer_B1.c: 786: }
 13510                           ;Dimmer_B1.c: 787: }
 13511                           ;Dimmer_B1.c: 788: }
 13512                           ;Dimmer_B1.c: 789: } else {
 13513  088E  0008               	return
 13514  088F                     l8557:	
 13515                           
 13516                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13517  088F  0021               	movlb	1	; select bank1
 13518  0890  084F               	movf	_DimmerLights^(0+128),w
 13519  0891  0086               	movwf	6
 13520  0892  3001               	movlw	1	; select bank2/3
 13521  0893  0087               	movwf	7
 13522  0894  1E01               	btfss	1,4
 13523  0895  0008               	return
 13524                           
 13525                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13526  0896  084F               	movf	_DimmerLights^(0+128),w
 13527  0897  0086               	movwf	6
 13528  0898  3001               	movlw	1	; select bank2/3
 13529  0899  0087               	movwf	7
 13530  089A  1201               	bcf	1,4
 13531  089B  0008               	return
 13532  089C                     __end_of_setDimmerLights_Main:	
 13533                           
 13534                           	psect	text88
 13535  0711                     __ptext88:	
 13536 ;; *************** function _setDimmerLights_OnOff *****************
 13537 ;; Defined at:
 13538 ;;		line 799 in file "../src/Dimmer_B1.c"
 13539 ;; Parameters:    Size  Location     Type
 13540 ;;  lights          1    wreg     unsigned char 
 13541 ;;  command         1    0[BANK1 ] unsigned char 
 13542 ;; Auto vars:     Size  Location     Type
 13543 ;;  lights          1    3[BANK1 ] unsigned char 
 13544 ;; Return value:  Size  Location     Type
 13545 ;;		None               void
 13546 ;; Registers used:
 13547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13548 ;; Tracked objects:
 13549 ;;		On entry : 0/0
 13550 ;;		On exit  : 0/0
 13551 ;;		Unchanged: 0/0
 13552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13553 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13554 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;Total ram usage:        4 bytes
 13558 ;; Hardware stack levels used:    1
 13559 ;; Hardware stack levels required when called:    8
 13560 ;; This function calls:
 13561 ;;		_getCmd_Status
 13562 ;;		_getDelayOff_GO
 13563 ;;		_getDimmerLights_PercentToValue
 13564 ;;		_getDimmerLights_ValueToPercent
 13565 ;;		_getMain_All_LightsStatus
 13566 ;;		_setCmd_Status
 13567 ;;		_setDelayOff_GO
 13568 ;;		_setDimmerIntr_ControlStatus
 13569 ;;		_setDimmerIntr_DimmingValue
 13570 ;;		_setDimmerIntr_Dimming_RF
 13571 ;;		_setDimmerIntr_MaxmumValue
 13572 ;;		_setDimmerLights_Line
 13573 ;;		_setLED
 13574 ;;		_setProductData
 13575 ;;		_setRF_DimmerLights
 13576 ;;		_setTxData
 13577 ;; This function is called by:
 13578 ;;		_setDimmerLights_Main
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           
 13583                           ;psect for function _setDimmerLights_OnOff
 13584  0711                     _setDimmerLights_OnOff:	
 13585                           
 13586                           ;incstack = 0
 13587                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13588                           ;setDimmerLights_OnOff@lights stored from wreg
 13589  0711  0021               	movlb	1	; select bank1
 13590  0712  00E8               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13591                           
 13592                           ;Dimmer_B1.c: 801: if (command == 1) {
 13593  0713  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13594  0714  3A01               	xorlw	1
 13595  0715  1D03               	skipz
 13596  0716  2F7E               	goto	l8421
 13597                           
 13598                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13599  0717  0020               	movlb	0	; select bank0
 13600  0718  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13601  0719  0AA1               	incf	setDimmerIntr_ControlStatus@command,f
 13602  071A  0021               	movlb	1	; select bank1
 13603  071B  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13604  071C  319E  2685  3187   	fcall	_setDimmerIntr_ControlStatus
 13605                           
 13606                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13607  071F  0022               	movlb	2	; select bank2
 13608  0720  152D               	bsf	_Dimmer^(0+256),2
 13609                           
 13610                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13611  0721  0021               	movlb	1	; select bank1
 13612  0722  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13613  0723  319C  24E2  3187   	fcall	_setDimmerLights_Line
 13614                           
 13615                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13616  0726  0020               	movlb	0	; select bank0
 13617  0727  01A3               	clrf	setLED@command
 13618  0728  0021               	movlb	1	; select bank1
 13619  0729  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13620  072A  3193  233E  3187   	fcall	_setLED
 13621                           
 13622                           ;Dimmer_B1.c: 813: ;;
 13623                           ;Dimmer_B1.c: 818: setDimmerIntr_DimmingValue(lights, ((char)(60*0.79)));
 13624  072D  302F               	movlw	47
 13625  072E  0021               	movlb	1	; select bank1
 13626  072F  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13627  0730  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13628  0731  0020               	movlb	0	; select bank0
 13629  0732  00A1               	movwf	setDimmerIntr_DimmingValue@value
 13630  0733  0021               	movlb	1	; select bank1
 13631  0734  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13632  0735  319C  2442  3187   	fcall	_setDimmerIntr_DimmingValue
 13633                           
 13634                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingRun == 1) {
 13635  0738  0021               	movlb	1	; select bank1
 13636  0739  0A4F               	incf	_DimmerLights^(0+128),w
 13637  073A  0086               	movwf	6
 13638  073B  3001               	movlw	1	; select bank2/3
 13639  073C  0087               	movwf	7
 13640  073D  1F01               	btfss	1,6
 13641  073E  2F63               	goto	l8417
 13642                           
 13643                           ;Dimmer_B1.c: 821: DimmerLights->DimmingRun = 0;
 13644  073F  0A4F               	incf	_DimmerLights^(0+128),w
 13645  0740  0086               	movwf	6
 13646  0741  3001               	movlw	1	; select bank2/3
 13647  0742  0087               	movwf	7
 13648  0743  1301               	bcf	1,6
 13649                           
 13650                           ;Dimmer_B1.c: 822: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13651  0744  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13652  0745  3E14               	addlw	20
 13653  0746  076D               	addwf	_product^(0+128),w
 13654  0747  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13655  0748  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13656  0749  0086               	movwf	6
 13657  074A  3002               	movlw	2	; select bank4/5
 13658  074B  0087               	movwf	7
 13659  074C  0801               	movf	1,w
 13660  074D  3197  279B  3187   	fcall	_getDimmerLights_PercentToValue
 13661  0750  0021               	movlb	1	; select bank1
 13662  0751  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13663  0752  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13664  0753  0020               	movlb	0	; select bank0
 13665  0754  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13666  0755  0021               	movlb	1	; select bank1
 13667  0756  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13668  0757  319C  2436  3187   	fcall	_setDimmerIntr_MaxmumValue
 13669                           
 13670                           ;Dimmer_B1.c: 823: setDimmerIntr_Dimming_RF(lights, 1);
 13671  075A  0020               	movlb	0	; select bank0
 13672  075B  01A1               	clrf	setDimmerIntr_Dimming_RF@command
 13673  075C  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
 13674  075D  0021               	movlb	1	; select bank1
 13675  075E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13676  075F  319E  269D  3187   	fcall	_setDimmerIntr_Dimming_RF
 13677                           
 13678                           ;Dimmer_B1.c: 824: } else {
 13679  0762  2FAE               	goto	l8435
 13680  0763                     l8417:	
 13681                           
 13682                           ;Dimmer_B1.c: 825: setDimmerIntr_MaxmumValue(lights, ((char)(60*0.79)));
 13683  0763  302F               	movlw	47
 13684  0764  0021               	movlb	1	; select bank1
 13685  0765  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13686  0766  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13687  0767  0020               	movlb	0	; select bank0
 13688  0768  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13689  0769  0021               	movlb	1	; select bank1
 13690  076A  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13691  076B  319C  2436  3187   	fcall	_setDimmerIntr_MaxmumValue
 13692                           
 13693                           ;Dimmer_B1.c: 826: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          60*0.79))));
 13694  076E  302F               	movlw	47
 13695  076F  3196  26D1  3187   	fcall	_getDimmerLights_ValueToPercent
 13696  0772  0021               	movlb	1	; select bank1
 13697  0773  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13698  0774  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13699  0775  0020               	movlb	0	; select bank0
 13700  0776  00E3               	movwf	setProductData@value
 13701  0777  0021               	movlb	1	; select bank1
 13702  0778  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13703  0779  3E14               	addlw	20
 13704  077A  319C  242A  3187   	fcall	_setProductData
 13705                           
 13706                           ;Dimmer_B1.c: 827: }
 13707                           ;Dimmer_B1.c: 830: } else if (command == 0) {
 13708  077D  2FAE               	goto	l8435
 13709  077E                     l8421:	
 13710  077E  0021               	movlb	1	; select bank1
 13711  077F  08E5               	movf	setDimmerLights_OnOff@command^(0+128),f
 13712  0780  1D03               	skipz
 13713  0781  2FAE               	goto	l8435
 13714                           
 13715                           ;Dimmer_B1.c: 831: setDimmerIntr_ControlStatus(lights, 0);
 13716  0782  0020               	movlb	0	; select bank0
 13717  0783  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13718  0784  0021               	movlb	1	; select bank1
 13719  0785  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13720  0786  319E  2685  3187   	fcall	_setDimmerIntr_ControlStatus
 13721                           
 13722                           ;Dimmer_B1.c: 833: Dimmer.Load_Status = 0;
 13723  0789  0022               	movlb	2	; select bank2
 13724  078A  112D               	bcf	_Dimmer^(0+256),2
 13725                           
 13726                           ;Dimmer_B1.c: 834: setDimmerLights_Line(0);
 13727  078B  3000               	movlw	0
 13728  078C  319C  24E2  3187   	fcall	_setDimmerLights_Line
 13729                           
 13730                           ;Dimmer_B1.c: 838: if (getDelayOff_GO(lights) == 1) {
 13731  078F  0021               	movlb	1	; select bank1
 13732  0790  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13733  0791  319C  24F3  3187   	fcall	_getDelayOff_GO
 13734  0794  3A01               	xorlw	1
 13735  0795  1D03               	skipz
 13736  0796  2F9F               	goto	l774
 13737                           
 13738                           ;Dimmer_B1.c: 839: setDelayOff_GO(lights, 0, 0);
 13739  0797  0020               	movlb	0	; select bank0
 13740  0798  01E6               	clrf	setDelayOff_GO@command
 13741  0799  01E7               	clrf	setDelayOff_GO@value
 13742  079A  0021               	movlb	1	; select bank1
 13743  079B  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13744  079C  318C  24AC  3187   	fcall	_setDelayOff_GO
 13745  079F                     l774:	
 13746                           
 13747                           ;Dimmer_B1.c: 840: }
 13748                           ;Dimmer_B1.c: 845: setLED(lights, 1);
 13749  079F  0020               	movlb	0	; select bank0
 13750  07A0  01A3               	clrf	setLED@command
 13751  07A1  0AA3               	incf	setLED@command,f
 13752  07A2  0021               	movlb	1	; select bank1
 13753  07A3  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13754  07A4  3193  233E  3187   	fcall	_setLED
 13755                           
 13756                           ;Dimmer_B1.c: 846: ;;
 13757                           ;Dimmer_B1.c: 850: if (lights == 1) {
 13758  07A7  0021               	movlb	1	; select bank1
 13759  07A8  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13760  07A9  3A01               	xorlw	1
 13761  07AA  1D03               	skipz
 13762  07AB  2FAE               	goto	l8435
 13763                           
 13764                           ;Dimmer_B1.c: 851: RB1 = 0;
 13765  07AC  0020               	movlb	0	; select bank0
 13766  07AD  108D               	bcf	13,1	;volatile
 13767  07AE                     l8435:	
 13768                           
 13769                           ;Dimmer_B1.c: 853: }
 13770                           ;Dimmer_B1.c: 864: }
 13771                           ;Dimmer_B1.c: 867: setRF_DimmerLights(lights, command);
 13772  07AE  0021               	movlb	1	; select bank1
 13773  07AF  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13774  07B0  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13775  07B1  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13776  07B2  0020               	movlb	0	; select bank0
 13777  07B3  00E6               	movwf	setRF_DimmerLights@on
 13778  07B4  0021               	movlb	1	; select bank1
 13779  07B5  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13780  07B6  3197  2736  3187   	fcall	_setRF_DimmerLights
 13781                           
 13782                           ;Dimmer_B1.c: 869: if (getCmd_Status(1) == 1) {
 13783  07B9  3001               	movlw	1
 13784  07BA  319D  2537  3187   	fcall	_getCmd_Status
 13785  07BD  3A01               	xorlw	1
 13786  07BE  1D03               	skipz
 13787  07BF  2FDB               	goto	l8449
 13788                           
 13789                           ;Dimmer_B1.c: 870: if (getMain_All_LightsStatus() == 0) {
 13790  07C0  319B  23D1  3187   	fcall	_getMain_All_LightsStatus
 13791  07C3  3800               	iorlw	0
 13792  07C4  1D03               	skipz
 13793  07C5  0008               	return
 13794                           
 13795                           ;Dimmer_B1.c: 871: setCmd_Status(1, 0);
 13796  07C6  0020               	movlb	0	; select bank0
 13797  07C7  01A1               	clrf	setCmd_Status@cmd
 13798  07C8  3001               	movlw	1
 13799  07C9  319E  26CE  3187   	fcall	_setCmd_Status
 13800                           
 13801                           ;Dimmer_B1.c: 872: setProductData(11, 0);
 13802  07CC  0020               	movlb	0	; select bank0
 13803  07CD  01E3               	clrf	setProductData@value
 13804  07CE  300B               	movlw	11
 13805  07CF  319C  242A  3187   	fcall	_setProductData
 13806                           
 13807                           ;Dimmer_B1.c: 873: setProductData(17, 0);
 13808  07D2  0020               	movlb	0	; select bank0
 13809  07D3  01E3               	clrf	setProductData@value
 13810  07D4  3011               	movlw	17
 13811  07D5  319C  242A  3187   	fcall	_setProductData
 13812                           
 13813                           ;Dimmer_B1.c: 874: setTxData();
 13814  07D8  318F  2745         	fcall	_setTxData
 13815                           
 13816                           ;Dimmer_B1.c: 875: }
 13817                           ;Dimmer_B1.c: 876: } else {
 13818  07DA  0008               	return
 13819  07DB                     l8449:	
 13820                           
 13821                           ;Dimmer_B1.c: 877: setTxData();
 13822  07DB  318F  2745         	fcall	_setTxData
 13823  07DD  0008               	return
 13824  07DE                     __end_of_setDimmerLights_OnOff:	
 13825                           
 13826                           	psect	text89
 13827  133E                     __ptext89:	
 13828 ;; *************** function _setLED *****************
 13829 ;; Defined at:
 13830 ;;		line 81 in file "../src/LED_B1.c"
 13831 ;; Parameters:    Size  Location     Type
 13832 ;;  led             1    wreg     unsigned char 
 13833 ;;  command         1    3[BANK0 ] unsigned char 
 13834 ;; Auto vars:     Size  Location     Type
 13835 ;;  led             1    4[BANK0 ] unsigned char 
 13836 ;; Return value:  Size  Location     Type
 13837 ;;		None               void
 13838 ;; Registers used:
 13839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13840 ;; Tracked objects:
 13841 ;;		On entry : 0/0
 13842 ;;		On exit  : 0/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13845 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;Total ram usage:        2 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; Hardware stack levels required when called:    6
 13852 ;; This function calls:
 13853 ;;		_LedPointSelect
 13854 ;; This function is called by:
 13855 ;;		_setDimmerLights_OnOff
 13856 ;;		_setLED_Initialization
 13857 ;;		_Exception_Main
 13858 ;;		_setSw_Initialization
 13859 ;; This function uses a non-reentrant model
 13860 ;;
 13861                           
 13862                           
 13863                           ;psect for function _setLED
 13864  133E                     _setLED:	
 13865                           
 13866                           ;incstack = 0
 13867                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13868                           ;setLED@led stored from wreg
 13869  133E  0020               	movlb	0	; select bank0
 13870  133F  00A4               	movwf	setLED@led
 13871                           
 13872                           ;LED_B1.c: 82: LedPointSelect(led);
 13873  1340  0824               	movf	setLED@led,w
 13874  1341  319C  244E  3193   	fcall	_LedPointSelect
 13875                           
 13876                           ;LED_B1.c: 83: if (command == 0) {
 13877  1344  0020               	movlb	0	; select bank0
 13878  1345  08A3               	movf	setLED@command,f
 13879  1346  1D03               	skipz
 13880  1347  2B4D               	goto	l6433
 13881                           
 13882                           ;LED_B1.c: 112: if (led == 99) {
 13883  1348  0824               	movf	setLED@led,w
 13884  1349  3A63               	xorlw	99
 13885  134A  1D03               	skipz
 13886  134B  2B4D               	goto	l6433
 13887                           
 13888                           ;LED_B1.c: 116: RB5 = 1;
 13889  134C  168D               	bsf	13,5	;volatile
 13890  134D                     l6433:	
 13891                           
 13892                           ;LED_B1.c: 118: }
 13893                           ;LED_B1.c: 120: }
 13894                           ;LED_B1.c: 121: if (command == 1) {
 13895  134D  0823               	movf	setLED@command,w
 13896  134E  3A01               	xorlw	1
 13897  134F  1D03               	skipz
 13898  1350  2B56               	goto	l6439
 13899                           
 13900                           ;LED_B1.c: 150: if (led == 99) {
 13901  1351  0824               	movf	setLED@led,w
 13902  1352  3A63               	xorlw	99
 13903  1353  1D03               	skipz
 13904  1354  2B56               	goto	l6439
 13905                           
 13906                           ;LED_B1.c: 154: RB5 = 0;
 13907  1355  128D               	bcf	13,5	;volatile
 13908  1356                     l6439:	
 13909                           
 13910                           ;LED_B1.c: 156: }
 13911                           ;LED_B1.c: 158: }
 13912                           ;LED_B1.c: 159: if (command == 10) {
 13913  1356  0823               	movf	setLED@command,w
 13914  1357  3A0A               	xorlw	10
 13915  1358  1D03               	skipz
 13916  1359  2B6C               	goto	l6447
 13917                           
 13918                           ;LED_B1.c: 160: LED->GO = 0;
 13919  135A  0021               	movlb	1	; select bank1
 13920  135B  0850               	movf	_LED^(0+128),w
 13921  135C  0086               	movwf	6
 13922  135D  3001               	movlw	1	; select bank2/3
 13923  135E  0087               	movwf	7
 13924  135F  1081               	bcf	1,1
 13925                           
 13926                           ;LED_B1.c: 161: LED->Time = 0;
 13927  1360  0A50               	incf	_LED^(0+128),w
 13928  1361  0086               	movwf	6
 13929  1362  3001               	movlw	1	; select bank2/3
 13930  1363  0087               	movwf	7
 13931  1364  3000               	movlw	0
 13932  1365  3FC0               	movwi [0]fsr1
 13933  1366  3FC1               	movwi [1]fsr1
 13934                           
 13935                           ;LED_B1.c: 190: if (led == 99) {
 13936  1367  0020               	movlb	0	; select bank0
 13937  1368  0824               	movf	setLED@led,w
 13938  1369  3A63               	xorlw	99
 13939  136A  1903               	btfsc	3,2
 13940                           
 13941                           ;LED_B1.c: 194: RB5 = 1;
 13942  136B  168D               	bsf	13,5	;volatile
 13943  136C                     l6447:	
 13944                           
 13945                           ;LED_B1.c: 196: }
 13946                           ;LED_B1.c: 198: }
 13947                           ;LED_B1.c: 199: if (command == 11) {
 13948  136C  0823               	movf	setLED@command,w
 13949  136D  3A0B               	xorlw	11
 13950  136E  1D03               	skipz
 13951  136F  0008               	return
 13952                           
 13953                           ;LED_B1.c: 200: LED->GO = 1;
 13954  1370  0021               	movlb	1	; select bank1
 13955  1371  0850               	movf	_LED^(0+128),w
 13956  1372  0086               	movwf	6
 13957  1373  3001               	movlw	1	; select bank2/3
 13958  1374  0087               	movwf	7
 13959  1375  1481               	bsf	1,1
 13960  1376  0008               	return
 13961  1377                     __end_of_setLED:	
 13962                           
 13963                           	psect	text90
 13964  1C4E                     __ptext90:	
 13965 ;; *************** function _LedPointSelect *****************
 13966 ;; Defined at:
 13967 ;;		line 7 in file "../src/LED_B1.c"
 13968 ;; Parameters:    Size  Location     Type
 13969 ;;  led             1    wreg     unsigned char 
 13970 ;; Auto vars:     Size  Location     Type
 13971 ;;  led             1    2[BANK0 ] unsigned char 
 13972 ;; Return value:  Size  Location     Type
 13973 ;;		None               void
 13974 ;; Registers used:
 13975 ;;		wreg
 13976 ;; Tracked objects:
 13977 ;;		On entry : 0/0
 13978 ;;		On exit  : 0/0
 13979 ;;		Unchanged: 0/0
 13980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;Total ram usage:        2 bytes
 13986 ;; Hardware stack levels used:    1
 13987 ;; Hardware stack levels required when called:    5
 13988 ;; This function calls:
 13989 ;;		Nothing
 13990 ;; This function is called by:
 13991 ;;		_setLED_Initialization
 13992 ;;		_setLED
 13993 ;;		_setLED_Main
 13994 ;; This function uses a non-reentrant model
 13995 ;;
 13996                           
 13997                           
 13998                           ;psect for function _LedPointSelect
 13999  1C4E                     _LedPointSelect:	
 14000                           
 14001                           ;incstack = 0
 14002                           ; Regs used in _LedPointSelect: [wreg]
 14003                           ;LedPointSelect@led stored from wreg
 14004  1C4E  0020               	movlb	0	; select bank0
 14005  1C4F  00A2               	movwf	LedPointSelect@led
 14006                           
 14007                           ;LED_B1.c: 24: if (led == 99) {
 14008  1C50  0822               	movf	LedPointSelect@led,w
 14009  1C51  3A63               	xorlw	99
 14010  1C52  1D03               	skipz
 14011  1C53  0008               	return
 14012                           
 14013                           ;LED_B1.c: 25: LED = &VarErrLED;
 14014  1C54  3069               	movlw	_VarErrLED& (0+255)
 14015  1C55  00A1               	movwf	??_LedPointSelect
 14016  1C56  0821               	movf	??_LedPointSelect,w
 14017  1C57  0021               	movlb	1	; select bank1
 14018  1C58  00D0               	movwf	_LED^(0+128)
 14019  1C59  0008               	return
 14020  1C5A                     __end_of_LedPointSelect:	
 14021                           
 14022                           	psect	text91
 14023  1E9D                     __ptext91:	
 14024 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14025 ;; Defined at:
 14026 ;;		line 184 in file "../src/Dimmer_B1.c"
 14027 ;; Parameters:    Size  Location     Type
 14028 ;;  lights          1    wreg     unsigned char 
 14029 ;;  command         1    1[BANK0 ] unsigned char 
 14030 ;; Auto vars:     Size  Location     Type
 14031 ;;  lights          1    3[BANK0 ] unsigned char 
 14032 ;; Return value:  Size  Location     Type
 14033 ;;		None               void
 14034 ;; Registers used:
 14035 ;;		wreg, status,2, status,0
 14036 ;; Tracked objects:
 14037 ;;		On entry : 0/0
 14038 ;;		On exit  : 0/0
 14039 ;;		Unchanged: 0/0
 14040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14041 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14044 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14045 ;;Total ram usage:        3 bytes
 14046 ;; Hardware stack levels used:    1
 14047 ;; Hardware stack levels required when called:    5
 14048 ;; This function calls:
 14049 ;;		Nothing
 14050 ;; This function is called by:
 14051 ;;		_setDimmerLights_OnOff
 14052 ;;		_setRFSW_AdjControl
 14053 ;; This function uses a non-reentrant model
 14054 ;;
 14055                           
 14056                           
 14057                           ;psect for function _setDimmerIntr_Dimming_RF
 14058  1E9D                     _setDimmerIntr_Dimming_RF:	
 14059                           
 14060                           ;incstack = 0
 14061                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14062                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14063  1E9D  0020               	movlb	0	; select bank0
 14064  1E9E  00A3               	movwf	setDimmerIntr_Dimming_RF@lights
 14065                           
 14066                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14067  1E9F  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14068  1EA0  3A01               	xorlw	1
 14069  1EA1  1D03               	skipz
 14070  1EA2  0008               	return
 14071                           
 14072                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14073  1EA3  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14074  1EA4  3A01               	xorlw	1
 14075  1EA5  3000               	movlw	0
 14076  1EA6  1903               	skipnz
 14077  1EA7  3001               	movlw	1
 14078  1EA8  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14079  1EA9  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14080  1EAA  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14081  1EAB  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14082  1EAC  0021               	movlb	1	; select bank1
 14083  1EAD  083A               	movf	_DimmerIntr1^(0+128),w
 14084  1EAE  0020               	movlb	0	; select bank0
 14085  1EAF  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14086  1EB0  39BF               	andlw	-65
 14087  1EB1  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14088  1EB2  0021               	movlb	1	; select bank1
 14089  1EB3  00BA               	movwf	_DimmerIntr1^(0+128)
 14090  1EB4  0008               	return
 14091  1EB5                     __end_of_setDimmerIntr_Dimming_RF:	
 14092                           
 14093                           	psect	text92
 14094  1C42                     __ptext92:	
 14095 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14096 ;; Defined at:
 14097 ;;		line 49 in file "../src/Dimmer_B1.c"
 14098 ;; Parameters:    Size  Location     Type
 14099 ;;  lights          1    wreg     unsigned char 
 14100 ;;  value           1    1[BANK0 ] unsigned char 
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;  lights          1    3[BANK0 ] unsigned char 
 14103 ;; Return value:  Size  Location     Type
 14104 ;;		None               void
 14105 ;; Registers used:
 14106 ;;		wreg
 14107 ;; Tracked objects:
 14108 ;;		On entry : 0/0
 14109 ;;		On exit  : 0/0
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14112 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;Total ram usage:        3 bytes
 14117 ;; Hardware stack levels used:    1
 14118 ;; Hardware stack levels required when called:    5
 14119 ;; This function calls:
 14120 ;;		Nothing
 14121 ;; This function is called by:
 14122 ;;		_setDimmerLights_OnOff
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           
 14127                           ;psect for function _setDimmerIntr_DimmingValue
 14128  1C42                     _setDimmerIntr_DimmingValue:	
 14129                           
 14130                           ;incstack = 0
 14131                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14132                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14133  1C42  0020               	movlb	0	; select bank0
 14134  1C43  00A3               	movwf	setDimmerIntr_DimmingValue@lights
 14135                           
 14136                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14137  1C44  0823               	movf	setDimmerIntr_DimmingValue@lights,w
 14138  1C45  3A01               	xorlw	1
 14139  1C46  1D03               	skipz
 14140  1C47  0008               	return
 14141                           
 14142                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14143  1C48  0821               	movf	setDimmerIntr_DimmingValue@value,w
 14144  1C49  00A2               	movwf	??_setDimmerIntr_DimmingValue
 14145  1C4A  0822               	movf	??_setDimmerIntr_DimmingValue,w
 14146  1C4B  0021               	movlb	1	; select bank1
 14147  1C4C  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 14148  1C4D  0008               	return
 14149  1C4E                     __end_of_setDimmerIntr_DimmingValue:	
 14150                           
 14151                           	psect	text93
 14152  1E85                     __ptext93:	
 14153 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14154 ;; Defined at:
 14155 ;;		line 31 in file "../src/Dimmer_B1.c"
 14156 ;; Parameters:    Size  Location     Type
 14157 ;;  lights          1    wreg     unsigned char 
 14158 ;;  command         1    1[BANK0 ] unsigned char 
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;  lights          1    3[BANK0 ] unsigned char 
 14161 ;; Return value:  Size  Location     Type
 14162 ;;		None               void
 14163 ;; Registers used:
 14164 ;;		wreg, status,2, status,0
 14165 ;; Tracked objects:
 14166 ;;		On entry : 0/0
 14167 ;;		On exit  : 0/0
 14168 ;;		Unchanged: 0/0
 14169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14170 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;Total ram usage:        3 bytes
 14175 ;; Hardware stack levels used:    1
 14176 ;; Hardware stack levels required when called:    5
 14177 ;; This function calls:
 14178 ;;		Nothing
 14179 ;; This function is called by:
 14180 ;;		_setDimmerLights_OnOff
 14181 ;; This function uses a non-reentrant model
 14182 ;;
 14183                           
 14184                           
 14185                           ;psect for function _setDimmerIntr_ControlStatus
 14186  1E85                     _setDimmerIntr_ControlStatus:	
 14187                           
 14188                           ;incstack = 0
 14189                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14190                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14191  1E85  0020               	movlb	0	; select bank0
 14192  1E86  00A3               	movwf	setDimmerIntr_ControlStatus@lights
 14193                           
 14194                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14195  1E87  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14196  1E88  3A01               	xorlw	1
 14197  1E89  1D03               	skipz
 14198  1E8A  0008               	return
 14199                           
 14200                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14201  1E8B  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14202  1E8C  3A01               	xorlw	1
 14203  1E8D  3000               	movlw	0
 14204  1E8E  1903               	skipnz
 14205  1E8F  3001               	movlw	1
 14206  1E90  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14207  1E91  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14208  1E92  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14209  1E93  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14210  1E94  0021               	movlb	1	; select bank1
 14211  1E95  083A               	movf	_DimmerIntr1^(0+128),w
 14212  1E96  0020               	movlb	0	; select bank0
 14213  1E97  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14214  1E98  39F7               	andlw	-9
 14215  1E99  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14216  1E9A  0021               	movlb	1	; select bank1
 14217  1E9B  00BA               	movwf	_DimmerIntr1^(0+128)
 14218  1E9C  0008               	return
 14219  1E9D                     __end_of_setDimmerIntr_ControlStatus:	
 14220                           
 14221                           	psect	text94
 14222  0CAC                     __ptext94:	
 14223 ;; *************** function _setDelayOff_GO *****************
 14224 ;; Defined at:
 14225 ;;		line 87 in file "../src/DelayOff_B1.c"
 14226 ;; Parameters:    Size  Location     Type
 14227 ;;  sw              1    wreg     unsigned char 
 14228 ;;  command         1   70[BANK0 ] unsigned char 
 14229 ;;  value           1   71[BANK0 ] unsigned char 
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;  sw              1   77[BANK0 ] unsigned char 
 14232 ;;  k               1   76[BANK0 ] unsigned char 
 14233 ;;  j               1   75[BANK0 ] unsigned char 
 14234 ;;  i               1   74[BANK0 ] unsigned char 
 14235 ;; Return value:  Size  Location     Type
 14236 ;;		None               void
 14237 ;; Registers used:
 14238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14239 ;; Tracked objects:
 14240 ;;		On entry : 0/0
 14241 ;;		On exit  : 0/0
 14242 ;;		Unchanged: 0/0
 14243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14244 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;Total ram usage:        8 bytes
 14249 ;; Hardware stack levels used:    1
 14250 ;; Hardware stack levels required when called:    6
 14251 ;; This function calls:
 14252 ;;		_DelayOffPointSelect
 14253 ;;		___bmul
 14254 ;;		_setProductData
 14255 ;; This function is called by:
 14256 ;;		_setDimmerLights_OnOff
 14257 ;;		_setRFSW_Control
 14258 ;; This function uses a non-reentrant model
 14259 ;;
 14260                           
 14261                           
 14262                           ;psect for function _setDelayOff_GO
 14263  0CAC                     _setDelayOff_GO:	
 14264                           
 14265                           ;incstack = 0
 14266                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14267                           ;setDelayOff_GO@sw stored from wreg
 14268  0CAC  0020               	movlb	0	; select bank0
 14269  0CAD  00ED               	movwf	setDelayOff_GO@sw
 14270                           
 14271                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14272  0CAE  086D               	movf	setDelayOff_GO@sw,w
 14273  0CAF  319C  2412  318C   	fcall	_DelayOffPointSelect
 14274                           
 14275                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14276  0CB2  0020               	movlb	0	; select bank0
 14277  0CB3  0866               	movf	setDelayOff_GO@command,w
 14278  0CB4  3A01               	xorlw	1
 14279  0CB5  3000               	movlw	0
 14280  0CB6  1903               	skipnz
 14281  0CB7  3001               	movlw	1
 14282  0CB8  00E8               	movwf	??_setDelayOff_GO
 14283  0CB9  0021               	movlb	1	; select bank1
 14284  0CBA  084D               	movf	_DelayOff^(0+128),w
 14285  0CBB  0086               	movwf	6
 14286  0CBC  3001               	movlw	1	; select bank2/3
 14287  0CBD  0087               	movwf	7
 14288  0CBE  0020               	movlb	0	; select bank0
 14289  0CBF  0DE8               	rlf	??_setDelayOff_GO,f
 14290  0CC0  0801               	movf	1,w
 14291  0CC1  0668               	xorwf	??_setDelayOff_GO,w
 14292  0CC2  39FD               	andlw	-3
 14293  0CC3  0668               	xorwf	??_setDelayOff_GO,w
 14294  0CC4  0081               	movwf	1
 14295                           
 14296                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14297  0CC5  0021               	movlb	1	; select bank1
 14298  0CC6  084D               	movf	_DelayOff^(0+128),w
 14299  0CC7  3E02               	addlw	2
 14300  0CC8  0086               	movwf	6
 14301  0CC9  3001               	movlw	1	; select bank2/3
 14302  0CCA  0087               	movwf	7
 14303  0CCB  3000               	movlw	0
 14304  0CCC  3FC0               	movwi [0]fsr1
 14305  0CCD  3FC1               	movwi [1]fsr1
 14306                           
 14307                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14308  0CCE  084D               	movf	_DelayOff^(0+128),w
 14309  0CCF  3E04               	addlw	4
 14310  0CD0  0086               	movwf	6
 14311  0CD1  3001               	movlw	1	; select bank2/3
 14312  0CD2  0087               	movwf	7
 14313  0CD3  0181               	clrf	1
 14314                           
 14315                           ;DelayOff_B1.c: 94: if (command == 1) {
 14316  0CD4  0020               	movlb	0	; select bank0
 14317  0CD5  0866               	movf	setDelayOff_GO@command,w
 14318  0CD6  3A01               	xorlw	1
 14319  0CD7  1D03               	skipz
 14320  0CD8  2D2E               	goto	l8275
 14321                           
 14322                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14323  0CD9  3005               	movlw	5
 14324  0CDA  00E8               	movwf	??_setDelayOff_GO
 14325  0CDB  0868               	movf	??_setDelayOff_GO,w
 14326  0CDC  00EA               	movwf	setDelayOff_GO@i
 14327  0CDD  01EB               	clrf	setDelayOff_GO@j
 14328  0CDE  01EC               	clrf	setDelayOff_GO@k
 14329                           
 14330                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14331  0CDF  300F               	movlw	15
 14332  0CE0  0567               	andwf	setDelayOff_GO@value,w
 14333  0CE1  00E8               	movwf	??_setDelayOff_GO
 14334  0CE2  0868               	movf	??_setDelayOff_GO,w
 14335  0CE3  3A05               	xorlw	5
 14336  0CE4  1903               	skipnz
 14337  0CE5  2CEA               	goto	l8261
 14338  0CE6  0867               	movf	setDelayOff_GO@value,w
 14339  0CE7  390F               	andlw	15
 14340  0CE8  1D03               	btfss	3,2
 14341  0CE9  2D1A               	goto	l8271
 14342  0CEA                     l8261:	
 14343  0CEA  3031               	movlw	49
 14344  0CEB  0267               	subwf	setDelayOff_GO@value,w
 14345  0CEC  1803               	skipnc
 14346  0CED  2D1A               	goto	l8271
 14347                           
 14348                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14349  0CEE  0867               	movf	setDelayOff_GO@value,w
 14350  0CEF  390F               	andlw	15
 14351  0CF0  00E8               	movwf	??_setDelayOff_GO
 14352  0CF1  0868               	movf	??_setDelayOff_GO,w
 14353  0CF2  00EB               	movwf	setDelayOff_GO@j
 14354                           
 14355                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14356  0CF3  0867               	movf	setDelayOff_GO@value,w
 14357  0CF4  00E8               	movwf	??_setDelayOff_GO
 14358  0CF5  3004               	movlw	4
 14359  0CF6                     u8515:	
 14360  0CF6  36E8               	lsrf	??_setDelayOff_GO,f
 14361  0CF7  0B89               	decfsz	9,f
 14362  0CF8  2CF6               	goto	u8515
 14363  0CF9  0868               	movf	??_setDelayOff_GO,w
 14364  0CFA  390F               	andlw	15
 14365  0CFB  00E9               	movwf	??_setDelayOff_GO+1
 14366  0CFC  0869               	movf	??_setDelayOff_GO+1,w
 14367  0CFD  00EC               	movwf	setDelayOff_GO@k
 14368                           
 14369                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14370  0CFE  300A               	movlw	10
 14371  0CFF  00E8               	movwf	??_setDelayOff_GO
 14372  0D00  0868               	movf	??_setDelayOff_GO,w
 14373  0D01  00A1               	movwf	___bmul@multiplicand
 14374  0D02  086C               	movf	setDelayOff_GO@k,w
 14375  0D03  319D  2549  318C   	fcall	___bmul
 14376  0D06  0020               	movlb	0	; select bank0
 14377  0D07  076B               	addwf	setDelayOff_GO@j,w
 14378  0D08  00E9               	movwf	??_setDelayOff_GO+1
 14379  0D09  0021               	movlb	1	; select bank1
 14380  0D0A  0A4D               	incf	_DelayOff^(0+128),w
 14381  0D0B  0086               	movwf	6
 14382  0D0C  3001               	movlw	1	; select bank2/3
 14383  0D0D  0087               	movwf	7
 14384  0D0E  0020               	movlb	0	; select bank0
 14385  0D0F  0869               	movf	??_setDelayOff_GO+1,w
 14386  0D10  0081               	movwf	1
 14387                           
 14388                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14389  0D11  0867               	movf	setDelayOff_GO@value,w
 14390  0D12  00E8               	movwf	??_setDelayOff_GO
 14391  0D13  0868               	movf	??_setDelayOff_GO,w
 14392  0D14  00E3               	movwf	setProductData@value
 14393  0D15  086D               	movf	setDelayOff_GO@sw,w
 14394  0D16  3E1A               	addlw	26
 14395  0D17  319C  242A         	fcall	_setProductData
 14396                           
 14397                           ;DelayOff_B1.c: 103: } else {
 14398  0D19  0008               	return
 14399  0D1A                     l8271:	
 14400                           
 14401                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14402  0D1A  3005               	movlw	5
 14403  0D1B  0020               	movlb	0	; select bank0
 14404  0D1C  00E8               	movwf	??_setDelayOff_GO
 14405  0D1D  0021               	movlb	1	; select bank1
 14406  0D1E  0A4D               	incf	_DelayOff^(0+128),w
 14407  0D1F  0086               	movwf	6
 14408  0D20  3001               	movlw	1	; select bank2/3
 14409  0D21  0087               	movwf	7
 14410  0D22  0020               	movlb	0	; select bank0
 14411  0D23  0868               	movf	??_setDelayOff_GO,w
 14412  0D24  0081               	movwf	1
 14413                           
 14414                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14415  0D25  3005               	movlw	5
 14416  0D26  00E8               	movwf	??_setDelayOff_GO
 14417  0D27  0868               	movf	??_setDelayOff_GO,w
 14418  0D28  00E3               	movwf	setProductData@value
 14419  0D29  086D               	movf	setDelayOff_GO@sw,w
 14420  0D2A  3E1A               	addlw	26
 14421  0D2B  319C  242A         	fcall	_setProductData
 14422                           
 14423                           ;DelayOff_B1.c: 106: }
 14424                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14425  0D2D  0008               	return
 14426  0D2E                     l8275:	
 14427  0D2E  0020               	movlb	0	; select bank0
 14428  0D2F  08E6               	movf	setDelayOff_GO@command,f
 14429  0D30  1D03               	skipz
 14430  0D31  0008               	return
 14431                           
 14432                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14433  0D32  01E3               	clrf	setProductData@value
 14434  0D33  086D               	movf	setDelayOff_GO@sw,w
 14435  0D34  3E1A               	addlw	26
 14436  0D35  319C  242A         	fcall	_setProductData
 14437  0D37  0008               	return
 14438  0D38                     __end_of_setDelayOff_GO:	
 14439                           
 14440                           	psect	text95
 14441  1D49                     __ptext95:	
 14442 ;; *************** function ___bmul *****************
 14443 ;; Defined at:
 14444 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14445 ;; Parameters:    Size  Location     Type
 14446 ;;  multiplier      1    wreg     unsigned char 
 14447 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 14448 ;; Auto vars:     Size  Location     Type
 14449 ;;  multiplier      1    4[BANK0 ] unsigned char 
 14450 ;;  product         1    3[BANK0 ] unsigned char 
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  1    wreg      unsigned char 
 14453 ;; Registers used:
 14454 ;;		wreg, status,2, status,0
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14460 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;Total ram usage:        4 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:    5
 14467 ;; This function calls:
 14468 ;;		Nothing
 14469 ;; This function is called by:
 14470 ;;		_setDelayOff_GO
 14471 ;;		_DelayTimejudge
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           
 14476                           ;psect for function ___bmul
 14477  1D49                     ___bmul:	
 14478                           
 14479                           ;incstack = 0
 14480                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14481                           ;___bmul@multiplier stored from wreg
 14482  1D49  0020               	movlb	0	; select bank0
 14483  1D4A  00A4               	movwf	___bmul@multiplier
 14484  1D4B  01A3               	clrf	___bmul@product
 14485  1D4C                     l5713:	
 14486  1D4C  1C24               	btfss	___bmul@multiplier,0
 14487  1D4D  2D52               	goto	l5717
 14488  1D4E  0821               	movf	___bmul@multiplicand,w
 14489  1D4F  00A2               	movwf	??___bmul
 14490  1D50  0822               	movf	??___bmul,w
 14491  1D51  07A3               	addwf	___bmul@product,f
 14492  1D52                     l5717:	
 14493  1D52  1003               	clrc
 14494  1D53  0DA1               	rlf	___bmul@multiplicand,f
 14495  1D54  1003               	clrc
 14496  1D55  0CA4               	rrf	___bmul@multiplier,f
 14497  1D56  08A4               	movf	___bmul@multiplier,f
 14498  1D57  1D03               	skipz
 14499  1D58  2D4C               	goto	l5713
 14500  1D59  0823               	movf	___bmul@product,w
 14501  1D5A  0008               	return
 14502  1D5B                     __end_of___bmul:	
 14503                           
 14504                           	psect	text96
 14505  1ECE                     __ptext96:	
 14506 ;; *************** function _setCmd_Status *****************
 14507 ;; Defined at:
 14508 ;;		line 651 in file "../src/Main_B1.c"
 14509 ;; Parameters:    Size  Location     Type
 14510 ;;  number          1    wreg     unsigned char 
 14511 ;;  cmd             1    1[BANK0 ] unsigned char 
 14512 ;; Auto vars:     Size  Location     Type
 14513 ;;  number          1    3[BANK0 ] unsigned char 
 14514 ;; Return value:  Size  Location     Type
 14515 ;;		None               void
 14516 ;; Registers used:
 14517 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14518 ;; Tracked objects:
 14519 ;;		On entry : 0/0
 14520 ;;		On exit  : 0/0
 14521 ;;		Unchanged: 0/0
 14522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14523 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14526 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14527 ;;Total ram usage:        3 bytes
 14528 ;; Hardware stack levels used:    1
 14529 ;; Hardware stack levels required when called:    5
 14530 ;; This function calls:
 14531 ;;		Nothing
 14532 ;; This function is called by:
 14533 ;;		_setDimmerLights_OnOff
 14534 ;;		_setControl_Lights_Table
 14535 ;; This function uses a non-reentrant model
 14536 ;;
 14537                           
 14538                           
 14539                           ;psect for function _setCmd_Status
 14540  1ECE                     _setCmd_Status:	
 14541                           
 14542                           ;incstack = 0
 14543                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14544                           ;setCmd_Status@number stored from wreg
 14545  1ECE  0020               	movlb	0	; select bank0
 14546  1ECF  00A3               	movwf	setCmd_Status@number
 14547                           
 14548                           ;Main_B1.c: 652: switch (number) {
 14549  1ED0  2EE0               	goto	l6215
 14550  1ED1                     l6211:	
 14551                           ;Main_B1.c: 653: case 1:
 14552                           
 14553                           
 14554                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14555  1ED1  0821               	movf	setCmd_Status@cmd,w
 14556  1ED2  3A01               	xorlw	1
 14557  1ED3  3000               	movlw	0
 14558  1ED4  1903               	skipnz
 14559  1ED5  3001               	movlw	1
 14560  1ED6  00A2               	movwf	??_setCmd_Status
 14561  1ED7  0021               	movlb	1	; select bank1
 14562  1ED8  084C               	movf	_Cmd^(0+128),w
 14563  1ED9  0020               	movlb	0	; select bank0
 14564  1EDA  0622               	xorwf	??_setCmd_Status,w
 14565  1EDB  39FE               	andlw	-2
 14566  1EDC  0622               	xorwf	??_setCmd_Status,w
 14567  1EDD  0021               	movlb	1	; select bank1
 14568  1EDE  00CC               	movwf	_Cmd^(0+128)
 14569                           
 14570                           ;Main_B1.c: 656: }
 14571                           
 14572                           ;Main_B1.c: 655: break;
 14573  1EDF  0008               	return
 14574  1EE0                     l6215:	
 14575  1EE0  0020               	movlb	0	; select bank0
 14576  1EE1  0823               	movf	setCmd_Status@number,w
 14577                           
 14578                           ; Switch size 1, requested type "space"
 14579                           ; Number of cases is 1, Range of values is 1 to 1
 14580                           ; switch strategies available:
 14581                           ; Name         Instructions Cycles
 14582                           ; simple_byte            4     3 (average)
 14583                           ; direct_byte           11     9 (fixed)
 14584                           ; jumptable            263     9 (fixed)
 14585                           ;	Chosen strategy is simple_byte
 14586  1EE2  3A01               	xorlw	1	; case 1
 14587  1EE3  1903               	skipnz
 14588  1EE4  2ED1               	goto	l6211
 14589  1EE5  2EE6               	goto	l1492
 14590  1EE6                     l1492:	
 14591  1EE6  0008               	return
 14592  1EE7                     __end_of_setCmd_Status:	
 14593                           
 14594                           	psect	text97
 14595  1BD1                     __ptext97:	
 14596 ;; *************** function _getMain_All_LightsStatus *****************
 14597 ;; Defined at:
 14598 ;;		line 373 in file "../src/Main_B1.c"
 14599 ;; Parameters:    Size  Location     Type
 14600 ;;		None
 14601 ;; Auto vars:     Size  Location     Type
 14602 ;;  status          1    1[BANK0 ] unsigned char 
 14603 ;; Return value:  Size  Location     Type
 14604 ;;                  1    wreg      unsigned char 
 14605 ;; Registers used:
 14606 ;;		wreg, status,2
 14607 ;; Tracked objects:
 14608 ;;		On entry : 0/0
 14609 ;;		On exit  : 0/0
 14610 ;;		Unchanged: 0/0
 14611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;Total ram usage:        1 bytes
 14617 ;; Hardware stack levels used:    1
 14618 ;; Hardware stack levels required when called:    5
 14619 ;; This function calls:
 14620 ;;		Nothing
 14621 ;; This function is called by:
 14622 ;;		_DimmerLights_Main
 14623 ;;		_setDimmerLights_Main
 14624 ;;		_setDimmerLights_OnOff
 14625 ;;		_Flash_Memory_Main
 14626 ;;		_Exception_Main
 14627 ;;		_Load_Main
 14628 ;;		_setTemp_Main
 14629 ;;		_setControl_Lights_Table
 14630 ;; This function uses a non-reentrant model
 14631 ;;
 14632                           
 14633                           
 14634                           ;psect for function _getMain_All_LightsStatus
 14635  1BD1                     _getMain_All_LightsStatus:	
 14636                           
 14637                           ;Main_B1.c: 374: char status = 0;
 14638                           
 14639                           ;incstack = 0
 14640                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14641  1BD1  0020               	movlb	0	; select bank0
 14642  1BD2  01A1               	clrf	getMain_All_LightsStatus@status
 14643                           
 14644                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14645  1BD3  3000               	movlw	0
 14646  1BD4  0022               	movlb	2	; select bank2
 14647  1BD5  185D               	btfsc	(_DimmerLights1^(0+256)+1),0
 14648  1BD6  3001               	movlw	1
 14649  1BD7  0020               	movlb	0	; select bank0
 14650  1BD8  00A1               	movwf	getMain_All_LightsStatus@status
 14651                           
 14652                           ;Main_B1.c: 420: return status;
 14653  1BD9  0821               	movf	getMain_All_LightsStatus@status,w
 14654  1BDA  0008               	return
 14655  1BDB                     __end_of_getMain_All_LightsStatus:	
 14656                           
 14657                           	psect	text98
 14658  179B                     __ptext98:	
 14659 ;; *************** function _getDimmerLights_PercentToValue *****************
 14660 ;; Defined at:
 14661 ;;		line 1039 in file "../src/Dimmer_B1.c"
 14662 ;; Parameters:    Size  Location     Type
 14663 ;;  value           1    wreg     unsigned char 
 14664 ;; Auto vars:     Size  Location     Type
 14665 ;;  value           1   63[BANK0 ] unsigned char 
 14666 ;;  i               3   64[BANK0 ] float 
 14667 ;; Return value:  Size  Location     Type
 14668 ;;                  1    wreg      unsigned char 
 14669 ;; Registers used:
 14670 ;;		wreg, status,2, status,0, pclath, cstack
 14671 ;; Tracked objects:
 14672 ;;		On entry : 0/0
 14673 ;;		On exit  : 0/0
 14674 ;;		Unchanged: 0/0
 14675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;Total ram usage:        6 bytes
 14681 ;; Hardware stack levels used:    1
 14682 ;; Hardware stack levels required when called:    7
 14683 ;; This function calls:
 14684 ;;		___awtoft
 14685 ;;		___ftadd
 14686 ;;		___ftdiv
 14687 ;;		___ftmul
 14688 ;;		___ftneg
 14689 ;;		___fttol
 14690 ;; This function is called by:
 14691 ;;		_setDimmerLights_OnOff
 14692 ;;		_setRFSW_AdjControl
 14693 ;; This function uses a non-reentrant model
 14694 ;;
 14695                           
 14696                           
 14697                           ;psect for function _getDimmerLights_PercentToValue
 14698  179B                     _getDimmerLights_PercentToValue:	
 14699                           
 14700                           ;incstack = 0
 14701                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14702                           ;getDimmerLights_PercentToValue@value stored from wreg
 14703  179B  0020               	movlb	0	; select bank0
 14704  179C  00DF               	movwf	getDimmerLights_PercentToValue@value
 14705                           
 14706                           ;Dimmer_B1.c: 1047: float i = ((char)(60*0.79)) - ((char)(25*0.79));
 14707  179D  3000               	movlw	0
 14708  179E  00E0               	movwf	getDimmerLights_PercentToValue@i
 14709  179F  30E0               	movlw	224
 14710  17A0  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 14711  17A1  3041               	movlw	65
 14712  17A2  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 14713                           
 14714                           ;Dimmer_B1.c: 1048: i /= 100;
 14715  17A3  3000               	movlw	0
 14716  17A4  00AF               	movwf	___ftdiv@f2
 14717  17A5  30C8               	movlw	200
 14718  17A6  00B0               	movwf	___ftdiv@f2+1
 14719  17A7  3042               	movlw	66
 14720  17A8  00B1               	movwf	___ftdiv@f2+2
 14721  17A9  0860               	movf	getDimmerLights_PercentToValue@i,w
 14722  17AA  00B2               	movwf	___ftdiv@f1
 14723  17AB  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 14724  17AC  00B3               	movwf	___ftdiv@f1+1
 14725  17AD  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 14726  17AE  00B4               	movwf	___ftdiv@f1+2
 14727  17AF  318D  2538  3197   	fcall	___ftdiv
 14728  17B2  0020               	movlb	0	; select bank0
 14729  17B3  082F               	movf	?___ftdiv,w
 14730  17B4  00E0               	movwf	getDimmerLights_PercentToValue@i
 14731  17B5  0830               	movf	?___ftdiv+1,w
 14732  17B6  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 14733  17B7  0831               	movf	?___ftdiv+2,w
 14734  17B8  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 14735                           
 14736                           ;Dimmer_B1.c: 1050: return (char) (((char)(60*0.79)) - ((100 - value) * i));
 14737  17B9  085F               	movf	getDimmerLights_PercentToValue@value,w
 14738  17BA  00DD               	movwf	??_getDimmerLights_PercentToValue
 14739  17BB  01DE               	clrf	??_getDimmerLights_PercentToValue+1
 14740  17BC  09DD               	comf	??_getDimmerLights_PercentToValue,f
 14741  17BD  09DE               	comf	??_getDimmerLights_PercentToValue+1,f
 14742  17BE  0ADD               	incf	??_getDimmerLights_PercentToValue,f
 14743  17BF  1903               	skipnz
 14744  17C0  0ADE               	incf	??_getDimmerLights_PercentToValue+1,f
 14745  17C1  085D               	movf	??_getDimmerLights_PercentToValue,w
 14746  17C2  3E64               	addlw	100
 14747  17C3  00A9               	movwf	___awtoft@c
 14748  17C4  3000               	movlw	0
 14749  17C5  3D5E               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14750  17C6  00AA               	movwf	___awtoft@c+1
 14751  17C7  3187  27DE  3197   	fcall	___awtoft
 14752  17CA  0020               	movlb	0	; select bank0
 14753  17CB  0829               	movf	?___awtoft,w
 14754  17CC  00B2               	movwf	___ftmul@f2
 14755  17CD  082A               	movf	?___awtoft+1,w
 14756  17CE  00B3               	movwf	___ftmul@f2+1
 14757  17CF  082B               	movf	?___awtoft+2,w
 14758  17D0  00B4               	movwf	___ftmul@f2+2
 14759  17D1  0860               	movf	getDimmerLights_PercentToValue@i,w
 14760  17D2  00AF               	movwf	___ftmul@f1
 14761  17D3  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 14762  17D4  00B0               	movwf	___ftmul@f1+1
 14763  17D5  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 14764  17D6  00B1               	movwf	___ftmul@f1+2
 14765  17D7  318E  2691  3197   	fcall	___ftmul
 14766  17DA  0020               	movlb	0	; select bank0
 14767  17DB  082F               	movf	?___ftmul,w
 14768  17DC  00BF               	movwf	___ftneg@f1
 14769  17DD  0830               	movf	?___ftmul+1,w
 14770  17DE  00C0               	movwf	___ftneg@f1+1
 14771  17DF  0831               	movf	?___ftmul+2,w
 14772  17E0  00C1               	movwf	___ftneg@f1+2
 14773  17E1  319B  23BF  3197   	fcall	___ftneg
 14774  17E4  0020               	movlb	0	; select bank0
 14775  17E5  083F               	movf	?___ftneg,w
 14776  17E6  00C5               	movwf	___ftadd@f2
 14777  17E7  0840               	movf	?___ftneg+1,w
 14778  17E8  00C6               	movwf	___ftadd@f2+1
 14779  17E9  0841               	movf	?___ftneg+2,w
 14780  17EA  00C7               	movwf	___ftadd@f2+2
 14781  17EB  3000               	movlw	0
 14782  17EC  00C2               	movwf	___ftadd@f1
 14783  17ED  303C               	movlw	60
 14784  17EE  00C3               	movwf	___ftadd@f1+1
 14785  17EF  3042               	movlw	66
 14786  17F0  00C4               	movwf	___ftadd@f1+2
 14787  17F1  3183  2380  3197   	fcall	___ftadd
 14788  17F4  0020               	movlb	0	; select bank0
 14789  17F5  0842               	movf	?___ftadd,w
 14790  17F6  00CF               	movwf	___fttol@f1
 14791  17F7  0843               	movf	?___ftadd+1,w
 14792  17F8  00D0               	movwf	___fttol@f1+1
 14793  17F9  0844               	movf	?___ftadd+2,w
 14794  17FA  00D1               	movwf	___fttol@f1+2
 14795  17FB  318C  2425         	fcall	___fttol
 14796  17FD  0020               	movlb	0	; select bank0
 14797  17FE  084F               	movf	?___fttol,w
 14798  17FF  0008               	return
 14799  1800                     __end_of_getDimmerLights_PercentToValue:	
 14800                           
 14801                           	psect	text99
 14802  0E91                     __ptext99:	
 14803 ;; *************** function ___ftmul *****************
 14804 ;; Defined at:
 14805 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14806 ;; Parameters:    Size  Location     Type
 14807 ;;  f1              3   15[BANK0 ] float 
 14808 ;;  f2              3   18[BANK0 ] float 
 14809 ;; Auto vars:     Size  Location     Type
 14810 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
 14811 ;;  sign            1   30[BANK0 ] unsigned char 
 14812 ;;  cntr            1   29[BANK0 ] unsigned char 
 14813 ;;  exp             1   25[BANK0 ] unsigned char 
 14814 ;; Return value:  Size  Location     Type
 14815 ;;                  3   15[BANK0 ] float 
 14816 ;; Registers used:
 14817 ;;		wreg, status,2, status,0, pclath, cstack
 14818 ;; Tracked objects:
 14819 ;;		On entry : 0/0
 14820 ;;		On exit  : 0/0
 14821 ;;		Unchanged: 0/0
 14822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14823 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14826 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14827 ;;Total ram usage:       16 bytes
 14828 ;; Hardware stack levels used:    1
 14829 ;; Hardware stack levels required when called:    6
 14830 ;; This function calls:
 14831 ;;		___ftpack
 14832 ;; This function is called by:
 14833 ;;		_getDimmerLights_PercentToValue
 14834 ;; This function uses a non-reentrant model
 14835 ;;
 14836                           
 14837                           
 14838                           ;psect for function ___ftmul
 14839  0E91                     ___ftmul:	
 14840                           
 14841                           ;incstack = 0
 14842                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14843  0E91  0020               	movlb	0	; select bank0
 14844  0E92  082F               	movf	___ftmul@f1,w
 14845  0E93  00B5               	movwf	??___ftmul
 14846  0E94  0830               	movf	___ftmul@f1+1,w
 14847  0E95  00B6               	movwf	??___ftmul+1
 14848  0E96  0831               	movf	___ftmul@f1+2,w
 14849  0E97  00B7               	movwf	??___ftmul+2
 14850  0E98  1003               	clrc
 14851  0E99  0D36               	rlf	??___ftmul+1,w
 14852  0E9A  0D37               	rlf	??___ftmul+2,w
 14853  0E9B  00B8               	movwf	??___ftmul+3
 14854  0E9C  0838               	movf	??___ftmul+3,w
 14855  0E9D  00B9               	movwf	___ftmul@exp
 14856  0E9E  08B9               	movf	___ftmul@exp,f
 14857  0E9F  1D03               	skipz
 14858  0EA0  2EA8               	goto	l5859
 14859  0EA1  3000               	movlw	0
 14860  0EA2  00AF               	movwf	?___ftmul
 14861  0EA3  3000               	movlw	0
 14862  0EA4  00B0               	movwf	?___ftmul+1
 14863  0EA5  3000               	movlw	0
 14864  0EA6  00B1               	movwf	?___ftmul+2
 14865  0EA7  0008               	return
 14866  0EA8                     l5859:	
 14867  0EA8  0832               	movf	___ftmul@f2,w
 14868  0EA9  00B5               	movwf	??___ftmul
 14869  0EAA  0833               	movf	___ftmul@f2+1,w
 14870  0EAB  00B6               	movwf	??___ftmul+1
 14871  0EAC  0834               	movf	___ftmul@f2+2,w
 14872  0EAD  00B7               	movwf	??___ftmul+2
 14873  0EAE  1003               	clrc
 14874  0EAF  0D36               	rlf	??___ftmul+1,w
 14875  0EB0  0D37               	rlf	??___ftmul+2,w
 14876  0EB1  00B8               	movwf	??___ftmul+3
 14877  0EB2  0838               	movf	??___ftmul+3,w
 14878  0EB3  00BE               	movwf	___ftmul@sign
 14879  0EB4  08BE               	movf	___ftmul@sign,f
 14880  0EB5  1D03               	skipz
 14881  0EB6  2EBE               	goto	l5865
 14882  0EB7  3000               	movlw	0
 14883  0EB8  00AF               	movwf	?___ftmul
 14884  0EB9  3000               	movlw	0
 14885  0EBA  00B0               	movwf	?___ftmul+1
 14886  0EBB  3000               	movlw	0
 14887  0EBC  00B1               	movwf	?___ftmul+2
 14888  0EBD  0008               	return
 14889  0EBE                     l5865:	
 14890  0EBE  083E               	movf	___ftmul@sign,w
 14891  0EBF  3E7B               	addlw	123
 14892  0EC0  00B5               	movwf	??___ftmul
 14893  0EC1  0835               	movf	??___ftmul,w
 14894  0EC2  07B9               	addwf	___ftmul@exp,f
 14895  0EC3  082F               	movf	___ftmul@f1,w
 14896  0EC4  00B5               	movwf	??___ftmul
 14897  0EC5  0830               	movf	___ftmul@f1+1,w
 14898  0EC6  00B6               	movwf	??___ftmul+1
 14899  0EC7  0831               	movf	___ftmul@f1+2,w
 14900  0EC8  00B7               	movwf	??___ftmul+2
 14901  0EC9  3010               	movlw	16
 14902  0ECA                     u4795:	
 14903  0ECA  36B7               	lsrf	??___ftmul+2,f
 14904  0ECB  0CB6               	rrf	??___ftmul+1,f
 14905  0ECC  0CB5               	rrf	??___ftmul,f
 14906  0ECD  0B89               	decfsz	9,f
 14907  0ECE  2ECA               	goto	u4795
 14908  0ECF  0835               	movf	??___ftmul,w
 14909  0ED0  00B8               	movwf	??___ftmul+3
 14910  0ED1  0838               	movf	??___ftmul+3,w
 14911  0ED2  00BE               	movwf	___ftmul@sign
 14912  0ED3  0832               	movf	___ftmul@f2,w
 14913  0ED4  00B5               	movwf	??___ftmul
 14914  0ED5  0833               	movf	___ftmul@f2+1,w
 14915  0ED6  00B6               	movwf	??___ftmul+1
 14916  0ED7  0834               	movf	___ftmul@f2+2,w
 14917  0ED8  00B7               	movwf	??___ftmul+2
 14918  0ED9  3010               	movlw	16
 14919  0EDA                     u4805:	
 14920  0EDA  36B7               	lsrf	??___ftmul+2,f
 14921  0EDB  0CB6               	rrf	??___ftmul+1,f
 14922  0EDC  0CB5               	rrf	??___ftmul,f
 14923  0EDD  0B89               	decfsz	9,f
 14924  0EDE  2EDA               	goto	u4805
 14925  0EDF  0835               	movf	??___ftmul,w
 14926  0EE0  00B8               	movwf	??___ftmul+3
 14927  0EE1  0838               	movf	??___ftmul+3,w
 14928  0EE2  06BE               	xorwf	___ftmul@sign,f
 14929  0EE3  3080               	movlw	128
 14930  0EE4  00B5               	movwf	??___ftmul
 14931  0EE5  0835               	movf	??___ftmul,w
 14932  0EE6  05BE               	andwf	___ftmul@sign,f
 14933  0EE7  17B0               	bsf	___ftmul@f1+1,7
 14934  0EE8  17B3               	bsf	___ftmul@f2+1,7
 14935  0EE9  30FF               	movlw	255
 14936  0EEA  05B2               	andwf	___ftmul@f2,f
 14937  0EEB  30FF               	movlw	255
 14938  0EEC  05B3               	andwf	___ftmul@f2+1,f
 14939  0EED  3000               	movlw	0
 14940  0EEE  05B4               	andwf	___ftmul@f2+2,f
 14941  0EEF  3000               	movlw	0
 14942  0EF0  00BA               	movwf	___ftmul@f3_as_product
 14943  0EF1  3000               	movlw	0
 14944  0EF2  00BB               	movwf	___ftmul@f3_as_product+1
 14945  0EF3  3000               	movlw	0
 14946  0EF4  00BC               	movwf	___ftmul@f3_as_product+2
 14947  0EF5  3007               	movlw	7
 14948  0EF6  00B5               	movwf	??___ftmul
 14949  0EF7  0835               	movf	??___ftmul,w
 14950  0EF8  00BD               	movwf	___ftmul@cntr
 14951  0EF9                     l5877:	
 14952  0EF9  1C2F               	btfss	___ftmul@f1,0
 14953  0EFA  2F01               	goto	l5881
 14954  0EFB  0832               	movf	___ftmul@f2,w
 14955  0EFC  07BA               	addwf	___ftmul@f3_as_product,f
 14956  0EFD  0833               	movf	___ftmul@f2+1,w
 14957  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 14958  0EFF  0834               	movf	___ftmul@f2+2,w
 14959  0F00  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 14960  0F01                     l5881:	
 14961  0F01  3001               	movlw	1
 14962  0F02                     u4825:	
 14963  0F02  36B1               	lsrf	___ftmul@f1+2,f
 14964  0F03  0CB0               	rrf	___ftmul@f1+1,f
 14965  0F04  0CAF               	rrf	___ftmul@f1,f
 14966  0F05  0B89               	decfsz	9,f
 14967  0F06  2F02               	goto	u4825
 14968  0F07  3001               	movlw	1
 14969  0F08                     u4835:	
 14970  0F08  35B2               	lslf	___ftmul@f2,f
 14971  0F09  0DB3               	rlf	___ftmul@f2+1,f
 14972  0F0A  0DB4               	rlf	___ftmul@f2+2,f
 14973  0F0B  0B89               	decfsz	9,f
 14974  0F0C  2F08               	goto	u4835
 14975  0F0D  3001               	movlw	1
 14976  0F0E  02BD               	subwf	___ftmul@cntr,f
 14977  0F0F  1D03               	btfss	3,2
 14978  0F10  2EF9               	goto	l5877
 14979  0F11  3009               	movlw	9
 14980  0F12  00B5               	movwf	??___ftmul
 14981  0F13  0835               	movf	??___ftmul,w
 14982  0F14  00BD               	movwf	___ftmul@cntr
 14983  0F15                     l5889:	
 14984  0F15  1C2F               	btfss	___ftmul@f1,0
 14985  0F16  2F1D               	goto	l5893
 14986  0F17  0832               	movf	___ftmul@f2,w
 14987  0F18  07BA               	addwf	___ftmul@f3_as_product,f
 14988  0F19  0833               	movf	___ftmul@f2+1,w
 14989  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 14990  0F1B  0834               	movf	___ftmul@f2+2,w
 14991  0F1C  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 14992  0F1D                     l5893:	
 14993  0F1D  3001               	movlw	1
 14994  0F1E                     u4865:	
 14995  0F1E  36B1               	lsrf	___ftmul@f1+2,f
 14996  0F1F  0CB0               	rrf	___ftmul@f1+1,f
 14997  0F20  0CAF               	rrf	___ftmul@f1,f
 14998  0F21  0B89               	decfsz	9,f
 14999  0F22  2F1E               	goto	u4865
 15000  0F23  3001               	movlw	1
 15001  0F24                     u4875:	
 15002  0F24  36BC               	lsrf	___ftmul@f3_as_product+2,f
 15003  0F25  0CBB               	rrf	___ftmul@f3_as_product+1,f
 15004  0F26  0CBA               	rrf	___ftmul@f3_as_product,f
 15005  0F27  0B89               	decfsz	9,f
 15006  0F28  2F24               	goto	u4875
 15007  0F29  3001               	movlw	1
 15008  0F2A  02BD               	subwf	___ftmul@cntr,f
 15009  0F2B  1D03               	btfss	3,2
 15010  0F2C  2F15               	goto	l5889
 15011  0F2D  083A               	movf	___ftmul@f3_as_product,w
 15012  0F2E  00A1               	movwf	___ftpack@arg
 15013  0F2F  083B               	movf	___ftmul@f3_as_product+1,w
 15014  0F30  00A2               	movwf	___ftpack@arg+1
 15015  0F31  083C               	movf	___ftmul@f3_as_product+2,w
 15016  0F32  00A3               	movwf	___ftpack@arg+2
 15017  0F33  0839               	movf	___ftmul@exp,w
 15018  0F34  00B5               	movwf	??___ftmul
 15019  0F35  0835               	movf	??___ftmul,w
 15020  0F36  00A4               	movwf	___ftpack@exp
 15021  0F37  083E               	movf	___ftmul@sign,w
 15022  0F38  00B6               	movwf	??___ftmul+1
 15023  0F39  0836               	movf	??___ftmul+1,w
 15024  0F3A  00A5               	movwf	___ftpack@sign
 15025  0F3B  3196  2670         	fcall	___ftpack
 15026  0F3D  0020               	movlb	0	; select bank0
 15027  0F3E  0821               	movf	?___ftpack,w
 15028  0F3F  00AF               	movwf	?___ftmul
 15029  0F40  0822               	movf	?___ftpack+1,w
 15030  0F41  00B0               	movwf	?___ftmul+1
 15031  0F42  0823               	movf	?___ftpack+2,w
 15032  0F43  00B1               	movwf	?___ftmul+2
 15033  0F44  0008               	return
 15034  0F45                     __end_of___ftmul:	
 15035                           
 15036                           	psect	text100
 15037  1CF3                     __ptext100:	
 15038 ;; *************** function _getDelayOff_GO *****************
 15039 ;; Defined at:
 15040 ;;		line 114 in file "../src/DelayOff_B1.c"
 15041 ;; Parameters:    Size  Location     Type
 15042 ;;  sw              1    wreg     unsigned char 
 15043 ;; Auto vars:     Size  Location     Type
 15044 ;;  sw              1    3[BANK0 ] unsigned char 
 15045 ;;  go              1    4[BANK0 ] unsigned char 
 15046 ;; Return value:  Size  Location     Type
 15047 ;;                  1    wreg      unsigned char 
 15048 ;; Registers used:
 15049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15050 ;; Tracked objects:
 15051 ;;		On entry : 0/0
 15052 ;;		On exit  : 0/0
 15053 ;;		Unchanged: 0/0
 15054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15058 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15059 ;;Total ram usage:        2 bytes
 15060 ;; Hardware stack levels used:    1
 15061 ;; Hardware stack levels required when called:    6
 15062 ;; This function calls:
 15063 ;;		_DelayOffPointSelect
 15064 ;; This function is called by:
 15065 ;;		_setDimmerLights_OnOff
 15066 ;; This function uses a non-reentrant model
 15067 ;;
 15068                           
 15069                           
 15070                           ;psect for function _getDelayOff_GO
 15071  1CF3                     _getDelayOff_GO:	
 15072                           
 15073                           ;incstack = 0
 15074                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15075                           ;getDelayOff_GO@sw stored from wreg
 15076  1CF3  0020               	movlb	0	; select bank0
 15077  1CF4  00A3               	movwf	getDelayOff_GO@sw
 15078                           
 15079                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15080  1CF5  0823               	movf	getDelayOff_GO@sw,w
 15081  1CF6  319C  2412         	fcall	_DelayOffPointSelect
 15082                           
 15083                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15084  1CF8  0021               	movlb	1	; select bank1
 15085  1CF9  084D               	movf	_DelayOff^(0+128),w
 15086  1CFA  0086               	movwf	6
 15087  1CFB  3001               	movlw	1	; select bank2/3
 15088  1CFC  0087               	movwf	7
 15089  1CFD  3000               	movlw	0
 15090  1CFE  1881               	btfsc	1,1
 15091  1CFF  3001               	movlw	1
 15092  1D00  0020               	movlb	0	; select bank0
 15093  1D01  00A4               	movwf	getDelayOff_GO@go
 15094                           
 15095                           ;DelayOff_B1.c: 117: return go;
 15096  1D02  0824               	movf	getDelayOff_GO@go,w
 15097  1D03  0008               	return
 15098  1D04                     __end_of_getDelayOff_GO:	
 15099                           
 15100                           	psect	text101
 15101  1D37                     __ptext101:	
 15102 ;; *************** function _getCmd_Status *****************
 15103 ;; Defined at:
 15104 ;;		line 659 in file "../src/Main_B1.c"
 15105 ;; Parameters:    Size  Location     Type
 15106 ;;  number          1    wreg     unsigned char 
 15107 ;; Auto vars:     Size  Location     Type
 15108 ;;  number          1    1[BANK0 ] unsigned char 
 15109 ;;  cmd             1    2[BANK0 ] unsigned char 
 15110 ;; Return value:  Size  Location     Type
 15111 ;;                  1    wreg      unsigned char 
 15112 ;; Registers used:
 15113 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15114 ;; Tracked objects:
 15115 ;;		On entry : 0/0
 15116 ;;		On exit  : 0/0
 15117 ;;		Unchanged: 0/0
 15118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15120 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;Total ram usage:        2 bytes
 15124 ;; Hardware stack levels used:    1
 15125 ;; Hardware stack levels required when called:    5
 15126 ;; This function calls:
 15127 ;;		Nothing
 15128 ;; This function is called by:
 15129 ;;		_setDimmerLights_OnOff
 15130 ;; This function uses a non-reentrant model
 15131 ;;
 15132                           
 15133                           
 15134                           ;psect for function _getCmd_Status
 15135  1D37                     _getCmd_Status:	
 15136                           
 15137                           ;incstack = 0
 15138                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15139                           ;getCmd_Status@number stored from wreg
 15140  1D37  0020               	movlb	0	; select bank0
 15141  1D38  00A1               	movwf	getCmd_Status@number
 15142                           
 15143                           ;Main_B1.c: 660: char cmd = 0;
 15144  1D39  01A2               	clrf	getCmd_Status@cmd
 15145                           
 15146                           ;Main_B1.c: 661: switch (number) {
 15147  1D3A  2D42               	goto	l6465
 15148  1D3B                     l6461:	
 15149                           ;Main_B1.c: 662: case 1:
 15150                           
 15151                           
 15152                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15153  1D3B  3000               	movlw	0
 15154  1D3C  0021               	movlb	1	; select bank1
 15155  1D3D  184C               	btfsc	_Cmd^(0+128),0
 15156  1D3E  3001               	movlw	1
 15157  1D3F  0020               	movlb	0	; select bank0
 15158  1D40  00A2               	movwf	getCmd_Status@cmd
 15159                           
 15160                           ;Main_B1.c: 665: }
 15161                           
 15162                           ;Main_B1.c: 664: break;
 15163  1D41  2D47               	goto	l6467
 15164  1D42                     l6465:	
 15165  1D42  0821               	movf	getCmd_Status@number,w
 15166                           
 15167                           ; Switch size 1, requested type "space"
 15168                           ; Number of cases is 1, Range of values is 1 to 1
 15169                           ; switch strategies available:
 15170                           ; Name         Instructions Cycles
 15171                           ; simple_byte            4     3 (average)
 15172                           ; direct_byte           11     9 (fixed)
 15173                           ; jumptable            263     9 (fixed)
 15174                           ;	Chosen strategy is simple_byte
 15175  1D43  3A01               	xorlw	1	; case 1
 15176  1D44  1903               	skipnz
 15177  1D45  2D3B               	goto	l6461
 15178  1D46  2D47               	goto	l6467
 15179  1D47                     l6467:	
 15180                           
 15181                           ;Main_B1.c: 666: return cmd;
 15182  1D47  0822               	movf	getCmd_Status@cmd,w
 15183  1D48  0008               	return
 15184  1D49                     __end_of_getCmd_Status:	
 15185                           
 15186                           	psect	text102
 15187  14C5                     __ptext102:	
 15188 ;; *************** function _setDimmerLights_Dimming *****************
 15189 ;; Defined at:
 15190 ;;		line 883 in file "../src/Dimmer_B1.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;  lights          1    wreg     unsigned char 
 15193 ;;  status          1   75[BANK0 ] unsigned char 
 15194 ;; Auto vars:     Size  Location     Type
 15195 ;;  lights          1   77[BANK0 ] unsigned char 
 15196 ;; Return value:  Size  Location     Type
 15197 ;;		None               void
 15198 ;; Registers used:
 15199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15200 ;; Tracked objects:
 15201 ;;		On entry : 0/0
 15202 ;;		On exit  : 0/0
 15203 ;;		Unchanged: 0/0
 15204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15205 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;Total ram usage:        3 bytes
 15210 ;; Hardware stack levels used:    1
 15211 ;; Hardware stack levels required when called:    8
 15212 ;; This function calls:
 15213 ;;		_getDimmerIntr_DimmingValue
 15214 ;;		_getDimmerLights_ValueToPercent
 15215 ;;		_setBuz
 15216 ;;		_setDimmerIntr_Dimming_Sw
 15217 ;;		_setDimmerIntr_MaxmumValue
 15218 ;;		_setDimmerLights_Line
 15219 ;;		_setProductData
 15220 ;;		_setRF_DimmerLights
 15221 ;;		_setRF_TransceiveGO
 15222 ;;		_setTxData
 15223 ;; This function is called by:
 15224 ;;		_setDimmerLights_Main
 15225 ;; This function uses a non-reentrant model
 15226 ;;
 15227                           
 15228                           
 15229                           ;psect for function _setDimmerLights_Dimming
 15230  14C5                     _setDimmerLights_Dimming:	
 15231                           
 15232                           ;incstack = 0
 15233                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15234                           ;setDimmerLights_Dimming@lights stored from wreg
 15235  14C5  0020               	movlb	0	; select bank0
 15236  14C6  00ED               	movwf	setDimmerLights_Dimming@lights
 15237                           
 15238                           ;Dimmer_B1.c: 884: if (status == 1) {
 15239  14C7  086B               	movf	setDimmerLights_Dimming@status,w
 15240  14C8  3A01               	xorlw	1
 15241  14C9  1D03               	skipz
 15242  14CA  2CDE               	goto	l8455
 15243                           
 15244                           ;Dimmer_B1.c: 885: setDimmerIntr_Dimming_Sw(lights, 1);
 15245  14CB  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15246  14CC  0AA1               	incf	setDimmerIntr_Dimming_Sw@command,f
 15247  14CD  086D               	movf	setDimmerLights_Dimming@lights,w
 15248  14CE  319E  2659  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15249                           
 15250                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 15251  14D1  3000               	movlw	0
 15252  14D2  319D  2591  3194   	fcall	_setRF_TransceiveGO
 15253                           
 15254                           ;Dimmer_B1.c: 890: setBuz(1, 100);
 15255  14D5  3064               	movlw	100
 15256  14D6  0020               	movlb	0	; select bank0
 15257  14D7  00AA               	movwf	setBuz@time
 15258  14D8  3000               	movlw	0
 15259  14D9  00AB               	movwf	setBuz@time+1
 15260  14DA  3001               	movlw	1
 15261  14DB  3195  25BC         	fcall	_setBuz
 15262                           
 15263                           ;Dimmer_B1.c: 891: } else if (status == 0) {
 15264  14DD  0008               	return
 15265  14DE                     l8455:	
 15266  14DE  0020               	movlb	0	; select bank0
 15267  14DF  08EB               	movf	setDimmerLights_Dimming@status,f
 15268  14E0  1D03               	skipz
 15269  14E1  0008               	return
 15270                           
 15271                           ;Dimmer_B1.c: 892: setDimmerIntr_Dimming_Sw(lights, 0);
 15272  14E2  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15273  14E3  086D               	movf	setDimmerLights_Dimming@lights,w
 15274  14E4  319E  2659  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15275                           
 15276                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 15277  14E7  0022               	movlb	2	; select bank2
 15278  14E8  112D               	bcf	_Dimmer^(0+256),2
 15279                           
 15280                           ;Dimmer_B1.c: 896: setDimmerLights_Line(lights);
 15281  14E9  0020               	movlb	0	; select bank0
 15282  14EA  086D               	movf	setDimmerLights_Dimming@lights,w
 15283  14EB  319C  24E2  3194   	fcall	_setDimmerLights_Line
 15284                           
 15285                           ;Dimmer_B1.c: 899: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15286  14EE  0020               	movlb	0	; select bank0
 15287  14EF  086D               	movf	setDimmerLights_Dimming@lights,w
 15288  14F0  319C  24A3  3194   	fcall	_getDimmerIntr_DimmingValue
 15289  14F3  0020               	movlb	0	; select bank0
 15290  14F4  00EC               	movwf	??_setDimmerLights_Dimming
 15291  14F5  086C               	movf	??_setDimmerLights_Dimming,w
 15292  14F6  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 15293  14F7  086D               	movf	setDimmerLights_Dimming@lights,w
 15294  14F8  319C  2436  3194   	fcall	_setDimmerIntr_MaxmumValue
 15295                           
 15296                           ;Dimmer_B1.c: 900: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15297  14FB  0020               	movlb	0	; select bank0
 15298  14FC  086D               	movf	setDimmerLights_Dimming@lights,w
 15299  14FD  319C  24A3  3194   	fcall	_getDimmerIntr_DimmingValue
 15300  1500  3196  26D1  3194   	fcall	_getDimmerLights_ValueToPercent
 15301  1503  0020               	movlb	0	; select bank0
 15302  1504  00EC               	movwf	??_setDimmerLights_Dimming
 15303  1505  086C               	movf	??_setDimmerLights_Dimming,w
 15304  1506  00E3               	movwf	setProductData@value
 15305  1507  086D               	movf	setDimmerLights_Dimming@lights,w
 15306  1508  3E14               	addlw	20
 15307  1509  319C  242A  3194   	fcall	_setProductData
 15308                           
 15309                           ;Dimmer_B1.c: 910: setRF_DimmerLights(lights, 1);
 15310  150C  0020               	movlb	0	; select bank0
 15311  150D  01E6               	clrf	setRF_DimmerLights@on
 15312  150E  0AE6               	incf	setRF_DimmerLights@on,f
 15313  150F  086D               	movf	setDimmerLights_Dimming@lights,w
 15314  1510  3197  2736  3194   	fcall	_setRF_DimmerLights
 15315                           
 15316                           ;Dimmer_B1.c: 911: setTxData();
 15317  1513  318F  2745         	fcall	_setTxData
 15318  1515  0008               	return
 15319  1516                     __end_of_setDimmerLights_Dimming:	
 15320                           
 15321                           	psect	text103
 15322  0F45                     __ptext103:	
 15323 ;; *************** function _setTxData *****************
 15324 ;; Defined at:
 15325 ;;		line 183 in file "../src/RF_Control_B1.c"
 15326 ;; Parameters:    Size  Location     Type
 15327 ;;		None
 15328 ;; Auto vars:     Size  Location     Type
 15329 ;;  i               1    0        unsigned char 
 15330 ;; Return value:  Size  Location     Type
 15331 ;;		None               void
 15332 ;; Registers used:
 15333 ;;		wreg, fsr1l, fsr1h, status,2
 15334 ;; Tracked objects:
 15335 ;;		On entry : 0/0
 15336 ;;		On exit  : 0/0
 15337 ;;		Unchanged: 0/0
 15338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;Total ram usage:        1 bytes
 15344 ;; Hardware stack levels used:    1
 15345 ;; Hardware stack levels required when called:    5
 15346 ;; This function calls:
 15347 ;;		Nothing
 15348 ;; This function is called by:
 15349 ;;		_setDimmerLights_OnOff
 15350 ;;		_setDimmerLights_Dimming
 15351 ;;		_getRxData
 15352 ;;		_setControl_Lights_Table
 15353 ;;		_setRFSW_Control
 15354 ;;		_setRFSW_AdjControl
 15355 ;; This function uses a non-reentrant model
 15356 ;;
 15357                           
 15358                           
 15359                           ;psect for function _setTxData
 15360  0F45                     _setTxData:	
 15361                           
 15362                           ;RF_Control_B1.c: 184: char i;
 15363                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15364                           
 15365                           ;incstack = 0
 15366                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15367  0F45  0021               	movlb	1	; select bank1
 15368  0F46  1C20               	btfss	_RF1^(0+128),0
 15369  0F47  0008               	return
 15370                           
 15371                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15372  0F48  1520               	bsf	_RF1^(0+128),2
 15373                           
 15374                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15375  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15376  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15377                           
 15378                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15379  0F4B  3063               	movlw	99
 15380  0F4C  0020               	movlb	0	; select bank0
 15381  0F4D  00A1               	movwf	??_setTxData
 15382  0F4E  0821               	movf	??_setTxData,w
 15383  0F4F  0023               	movlb	3	; select bank3
 15384  0F50  00A0               	movwf	_RF_Data^(0+384)
 15385                           
 15386                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15387  0F51  3002               	movlw	2
 15388  0F52  0020               	movlb	0	; select bank0
 15389  0F53  00A1               	movwf	??_setTxData
 15390  0F54  0821               	movf	??_setTxData,w
 15391  0F55  0023               	movlb	3	; select bank3
 15392  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15393                           
 15394                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15395  0F57  0021               	movlb	1	; select bank1
 15396  0F58  086D               	movf	_product^(0+128),w
 15397  0F59  0086               	movwf	6
 15398  0F5A  3002               	movlw	2	; select bank4/5
 15399  0F5B  0087               	movwf	7
 15400  0F5C  3002               	movlw	2	; select bank4/5
 15401  0F5D  3F42               	moviw [2]fsr1
 15402  0F5E  0023               	movlb	3	; select bank3
 15403  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15404                           
 15405                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15406  0F60  0021               	movlb	1	; select bank1
 15407  0F61  086D               	movf	_product^(0+128),w
 15408  0F62  0086               	movwf	6
 15409  0F63  3002               	movlw	2	; select bank4/5
 15410  0F64  0087               	movwf	7
 15411  0F65  3002               	movlw	2	; select bank4/5
 15412  0F66  3F43               	moviw [3]fsr1
 15413  0F67  0023               	movlb	3	; select bank3
 15414  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15415                           
 15416                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15417  0F69  0021               	movlb	1	; select bank1
 15418  0F6A  086D               	movf	_product^(0+128),w
 15419  0F6B  0086               	movwf	6
 15420  0F6C  3002               	movlw	2	; select bank4/5
 15421  0F6D  0087               	movwf	7
 15422  0F6E  3002               	movlw	2	; select bank4/5
 15423  0F6F  3F44               	moviw [4]fsr1
 15424  0F70  0023               	movlb	3	; select bank3
 15425  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15426                           
 15427                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15428  0F72  0021               	movlb	1	; select bank1
 15429  0F73  086D               	movf	_product^(0+128),w
 15430  0F74  0086               	movwf	6
 15431  0F75  3002               	movlw	2	; select bank4/5
 15432  0F76  0087               	movwf	7
 15433  0F77  3002               	movlw	2	; select bank4/5
 15434  0F78  3F45               	moviw [5]fsr1
 15435  0F79  0023               	movlb	3	; select bank3
 15436  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15437                           
 15438                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15439  0F7B  0021               	movlb	1	; select bank1
 15440  0F7C  086D               	movf	_product^(0+128),w
 15441  0F7D  0086               	movwf	6
 15442  0F7E  3002               	movlw	2	; select bank4/5
 15443  0F7F  0087               	movwf	7
 15444  0F80  3002               	movlw	2	; select bank4/5
 15445  0F81  3F46               	moviw [6]fsr1
 15446  0F82  0023               	movlb	3	; select bank3
 15447  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15448                           
 15449                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15450  0F84  0021               	movlb	1	; select bank1
 15451  0F85  086D               	movf	_product^(0+128),w
 15452  0F86  0086               	movwf	6
 15453  0F87  3002               	movlw	2	; select bank4/5
 15454  0F88  0087               	movwf	7
 15455  0F89  3002               	movlw	2	; select bank4/5
 15456  0F8A  3F47               	moviw [7]fsr1
 15457  0F8B  0023               	movlb	3	; select bank3
 15458  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15459                           
 15460                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15461  0F8D  0021               	movlb	1	; select bank1
 15462  0F8E  086D               	movf	_product^(0+128),w
 15463  0F8F  0086               	movwf	6
 15464  0F90  3002               	movlw	2	; select bank4/5
 15465  0F91  0087               	movwf	7
 15466  0F92  3002               	movlw	2	; select bank4/5
 15467  0F93  3F48               	moviw [8]fsr1
 15468  0F94  0023               	movlb	3	; select bank3
 15469  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15470                           
 15471                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15472  0F96  0021               	movlb	1	; select bank1
 15473  0F97  086D               	movf	_product^(0+128),w
 15474  0F98  0086               	movwf	6
 15475  0F99  3002               	movlw	2	; select bank4/5
 15476  0F9A  0087               	movwf	7
 15477  0F9B  3002               	movlw	2	; select bank4/5
 15478  0F9C  3F49               	moviw [9]fsr1
 15479  0F9D  0023               	movlb	3	; select bank3
 15480  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15481                           
 15482                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15483  0F9F  0021               	movlb	1	; select bank1
 15484  0FA0  086D               	movf	_product^(0+128),w
 15485  0FA1  0086               	movwf	6
 15486  0FA2  3002               	movlw	2	; select bank4/5
 15487  0FA3  0087               	movwf	7
 15488  0FA4  3002               	movlw	2	; select bank4/5
 15489  0FA5  3F4A               	moviw [10]fsr1
 15490  0FA6  0023               	movlb	3	; select bank3
 15491  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15492                           
 15493                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15494  0FA8  0021               	movlb	1	; select bank1
 15495  0FA9  086D               	movf	_product^(0+128),w
 15496  0FAA  0086               	movwf	6
 15497  0FAB  3002               	movlw	2	; select bank4/5
 15498  0FAC  0087               	movwf	7
 15499  0FAD  3002               	movlw	2	; select bank4/5
 15500  0FAE  3F4B               	moviw [11]fsr1
 15501  0FAF  0023               	movlb	3	; select bank3
 15502  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15503                           
 15504                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15505  0FB1  0021               	movlb	1	; select bank1
 15506  0FB2  086D               	movf	_product^(0+128),w
 15507  0FB3  0086               	movwf	6
 15508  0FB4  3002               	movlw	2	; select bank4/5
 15509  0FB5  0087               	movwf	7
 15510  0FB6  3002               	movlw	2	; select bank4/5
 15511  0FB7  3F4C               	moviw [12]fsr1
 15512  0FB8  0023               	movlb	3	; select bank3
 15513  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15514                           
 15515                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15516  0FBA  0021               	movlb	1	; select bank1
 15517  0FBB  086D               	movf	_product^(0+128),w
 15518  0FBC  0086               	movwf	6
 15519  0FBD  3002               	movlw	2	; select bank4/5
 15520  0FBE  0087               	movwf	7
 15521  0FBF  3002               	movlw	2	; select bank4/5
 15522  0FC0  3F4D               	moviw [13]fsr1
 15523  0FC1  0023               	movlb	3	; select bank3
 15524  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15525                           
 15526                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15527  0FC3  0021               	movlb	1	; select bank1
 15528  0FC4  086D               	movf	_product^(0+128),w
 15529  0FC5  0086               	movwf	6
 15530  0FC6  3002               	movlw	2	; select bank4/5
 15531  0FC7  0087               	movwf	7
 15532  0FC8  3002               	movlw	2	; select bank4/5
 15533  0FC9  3F4E               	moviw [14]fsr1
 15534  0FCA  0023               	movlb	3	; select bank3
 15535  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15536                           
 15537                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15538  0FCC  0021               	movlb	1	; select bank1
 15539  0FCD  086D               	movf	_product^(0+128),w
 15540  0FCE  0086               	movwf	6
 15541  0FCF  3002               	movlw	2	; select bank4/5
 15542  0FD0  0087               	movwf	7
 15543  0FD1  3002               	movlw	2	; select bank4/5
 15544  0FD2  3F4F               	moviw [15]fsr1
 15545  0FD3  0023               	movlb	3	; select bank3
 15546  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15547                           
 15548                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15549  0FD5  0021               	movlb	1	; select bank1
 15550  0FD6  086D               	movf	_product^(0+128),w
 15551  0FD7  0086               	movwf	6
 15552  0FD8  3002               	movlw	2	; select bank4/5
 15553  0FD9  0087               	movwf	7
 15554  0FDA  3002               	movlw	2	; select bank4/5
 15555  0FDB  3F50               	moviw [16]fsr1
 15556  0FDC  0023               	movlb	3	; select bank3
 15557  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15558                           
 15559                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15560  0FDE  0021               	movlb	1	; select bank1
 15561  0FDF  086D               	movf	_product^(0+128),w
 15562  0FE0  0086               	movwf	6
 15563  0FE1  3002               	movlw	2	; select bank4/5
 15564  0FE2  0087               	movwf	7
 15565  0FE3  3002               	movlw	2	; select bank4/5
 15566  0FE4  3F51               	moviw [17]fsr1
 15567  0FE5  0023               	movlb	3	; select bank3
 15568  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15569                           
 15570                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15571  0FE7  0021               	movlb	1	; select bank1
 15572  0FE8  086D               	movf	_product^(0+128),w
 15573  0FE9  0086               	movwf	6
 15574  0FEA  3002               	movlw	2	; select bank4/5
 15575  0FEB  0087               	movwf	7
 15576  0FEC  3002               	movlw	2	; select bank4/5
 15577  0FED  3F52               	moviw [18]fsr1
 15578  0FEE  0023               	movlb	3	; select bank3
 15579  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15580                           
 15581                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15582  0FF0  0021               	movlb	1	; select bank1
 15583  0FF1  086D               	movf	_product^(0+128),w
 15584  0FF2  0086               	movwf	6
 15585  0FF3  3002               	movlw	2	; select bank4/5
 15586  0FF4  0087               	movwf	7
 15587  0FF5  3002               	movlw	2	; select bank4/5
 15588  0FF6  3F53               	moviw [19]fsr1
 15589  0FF7  0023               	movlb	3	; select bank3
 15590  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15591                           
 15592                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15593  0FF9  30D1               	movlw	209
 15594  0FFA  0020               	movlb	0	; select bank0
 15595  0FFB  00A1               	movwf	??_setTxData
 15596  0FFC  0821               	movf	??_setTxData,w
 15597  0FFD  0023               	movlb	3	; select bank3
 15598  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15599  0FFF  0008               	return
 15600  1000                     __end_of_setTxData:	
 15601                           
 15602                           	psect	text104
 15603  1D91                     __ptext104:	
 15604 ;; *************** function _setRF_TransceiveGO *****************
 15605 ;; Defined at:
 15606 ;;		line 461 in file "../src/RF_Control_B1.c"
 15607 ;; Parameters:    Size  Location     Type
 15608 ;;  command         1    wreg     unsigned char 
 15609 ;; Auto vars:     Size  Location     Type
 15610 ;;  command         1    2[BANK0 ] unsigned char 
 15611 ;; Return value:  Size  Location     Type
 15612 ;;		None               void
 15613 ;; Registers used:
 15614 ;;		wreg, status,2, status,0
 15615 ;; Tracked objects:
 15616 ;;		On entry : 0/0
 15617 ;;		On exit  : 0/0
 15618 ;;		Unchanged: 0/0
 15619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15623 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15624 ;;Total ram usage:        2 bytes
 15625 ;; Hardware stack levels used:    1
 15626 ;; Hardware stack levels required when called:    5
 15627 ;; This function calls:
 15628 ;;		Nothing
 15629 ;; This function is called by:
 15630 ;;		_setDimmerLights_Dimming
 15631 ;; This function uses a non-reentrant model
 15632 ;;
 15633                           
 15634                           
 15635                           ;psect for function _setRF_TransceiveGO
 15636  1D91                     _setRF_TransceiveGO:	
 15637                           
 15638                           ;incstack = 0
 15639                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15640                           ;setRF_TransceiveGO@command stored from wreg
 15641  1D91  0020               	movlb	0	; select bank0
 15642  1D92  00A2               	movwf	setRF_TransceiveGO@command
 15643                           
 15644                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15645  1D93  0822               	movf	setRF_TransceiveGO@command,w
 15646  1D94  3A01               	xorlw	1
 15647  1D95  3000               	movlw	0
 15648  1D96  1903               	skipnz
 15649  1D97  3001               	movlw	1
 15650  1D98  00A1               	movwf	??_setRF_TransceiveGO
 15651  1D99  0DA1               	rlf	??_setRF_TransceiveGO,f
 15652  1D9A  0DA1               	rlf	??_setRF_TransceiveGO,f
 15653  1D9B  0021               	movlb	1	; select bank1
 15654  1D9C  0820               	movf	_RF1^(0+128),w
 15655  1D9D  0020               	movlb	0	; select bank0
 15656  1D9E  0621               	xorwf	??_setRF_TransceiveGO,w
 15657  1D9F  39FB               	andlw	-5
 15658  1DA0  0621               	xorwf	??_setRF_TransceiveGO,w
 15659  1DA1  0021               	movlb	1	; select bank1
 15660  1DA2  00A0               	movwf	_RF1^(0+128)
 15661  1DA3  0008               	return
 15662  1DA4                     __end_of_setRF_TransceiveGO:	
 15663                           
 15664                           	psect	text105
 15665  1736                     __ptext105:	
 15666 ;; *************** function _setRF_DimmerLights *****************
 15667 ;; Defined at:
 15668 ;;		line 446 in file "../src/RF_Control_B1.c"
 15669 ;; Parameters:    Size  Location     Type
 15670 ;;  lights          1    wreg     unsigned char 
 15671 ;;  on              1   70[BANK0 ] unsigned char 
 15672 ;; Auto vars:     Size  Location     Type
 15673 ;;  lights          1   74[BANK0 ] unsigned char 
 15674 ;;  status          1   73[BANK0 ] unsigned char 
 15675 ;; Return value:  Size  Location     Type
 15676 ;;		None               void
 15677 ;; Registers used:
 15678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15679 ;; Tracked objects:
 15680 ;;		On entry : 0/0
 15681 ;;		On exit  : 0/0
 15682 ;;		Unchanged: 0/0
 15683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15684 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15685 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15686 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15687 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15688 ;;Total ram usage:        5 bytes
 15689 ;; Hardware stack levels used:    1
 15690 ;; Hardware stack levels required when called:    6
 15691 ;; This function calls:
 15692 ;;		_setProductData
 15693 ;; This function is called by:
 15694 ;;		_setDimmerLights_OnOff
 15695 ;;		_setDimmerLights_Dimming
 15696 ;;		_setRFSW_Control
 15697 ;; This function uses a non-reentrant model
 15698 ;;
 15699                           
 15700                           
 15701                           ;psect for function _setRF_DimmerLights
 15702  1736                     _setRF_DimmerLights:	
 15703                           
 15704                           ;incstack = 0
 15705                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15706                           ;setRF_DimmerLights@lights stored from wreg
 15707  1736  0020               	movlb	0	; select bank0
 15708  1737  00EA               	movwf	setRF_DimmerLights@lights
 15709                           
 15710                           ;RF_Control_B1.c: 447: char status = 1;
 15711  1738  01E9               	clrf	setRF_DimmerLights@status
 15712  1739  0AE9               	incf	setRF_DimmerLights@status,f
 15713                           
 15714                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15715  173A  086A               	movf	setRF_DimmerLights@lights,w
 15716  173B  3EFF               	addlw	-1
 15717  173C  0A89               	incf	9,f
 15718  173D  2F40               	goto	u8530
 15719  173E                     u8535:	
 15720  173E  1003               	clrc
 15721  173F  0DE9               	rlf	setRF_DimmerLights@status,f
 15722  1740                     u8530:	
 15723  1740  3EFF               	addlw	-1
 15724  1741  1D03               	skipz
 15725  1742  2F3E               	goto	u8535
 15726                           
 15727                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15728  1743  086A               	movf	setRF_DimmerLights@lights,w
 15729  1744  00E7               	movwf	??_setRF_DimmerLights
 15730  1745  0867               	movf	??_setRF_DimmerLights,w
 15731  1746  00E3               	movwf	setProductData@value
 15732  1747  300B               	movlw	11
 15733  1748  319C  242A  3197   	fcall	_setProductData
 15734                           
 15735                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15736  174B  0020               	movlb	0	; select bank0
 15737  174C  086A               	movf	setRF_DimmerLights@lights,w
 15738  174D  3E1A               	addlw	26
 15739  174E  0021               	movlb	1	; select bank1
 15740  174F  076D               	addwf	_product^(0+128),w
 15741  1750  0020               	movlb	0	; select bank0
 15742  1751  00E7               	movwf	??_setRF_DimmerLights
 15743  1752  0867               	movf	??_setRF_DimmerLights,w
 15744  1753  0086               	movwf	6
 15745  1754  3002               	movlw	2	; select bank4/5
 15746  1755  0087               	movwf	7
 15747  1756  0801               	movf	1,w
 15748  1757  00E8               	movwf	??_setRF_DimmerLights+1
 15749  1758  0868               	movf	??_setRF_DimmerLights+1,w
 15750  1759  00E3               	movwf	setProductData@value
 15751  175A  3011               	movlw	17
 15752  175B  319C  242A  3197   	fcall	_setProductData
 15753                           
 15754                           ;RF_Control_B1.c: 451: if (on == 1) {
 15755  175E  0020               	movlb	0	; select bank0
 15756  175F  0866               	movf	setRF_DimmerLights@on,w
 15757  1760  3A01               	xorlw	1
 15758  1761  1D03               	skipz
 15759  1762  2F85               	goto	l8291
 15760                           
 15761                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15762  1763  086A               	movf	setRF_DimmerLights@lights,w
 15763  1764  3E14               	addlw	20
 15764  1765  0021               	movlb	1	; select bank1
 15765  1766  076D               	addwf	_product^(0+128),w
 15766  1767  0020               	movlb	0	; select bank0
 15767  1768  00E7               	movwf	??_setRF_DimmerLights
 15768  1769  0867               	movf	??_setRF_DimmerLights,w
 15769  176A  0086               	movwf	6
 15770  176B  3002               	movlw	2	; select bank4/5
 15771  176C  0087               	movwf	7
 15772  176D  0801               	movf	1,w
 15773  176E  00E8               	movwf	??_setRF_DimmerLights+1
 15774  176F  0868               	movf	??_setRF_DimmerLights+1,w
 15775  1770  00E3               	movwf	setProductData@value
 15776  1771  3009               	movlw	9
 15777  1772  319C  242A  3197   	fcall	_setProductData
 15778                           
 15779                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15780  1775  0021               	movlb	1	; select bank1
 15781  1776  086D               	movf	_product^(0+128),w
 15782  1777  3E0F               	addlw	15
 15783  1778  0086               	movwf	6
 15784  1779  3002               	movlw	2	; select bank4/5
 15785  177A  0087               	movwf	7
 15786  177B  0801               	movf	1,w
 15787  177C  0020               	movlb	0	; select bank0
 15788  177D  0469               	iorwf	setRF_DimmerLights@status,w
 15789  177E  00E7               	movwf	??_setRF_DimmerLights
 15790  177F  0867               	movf	??_setRF_DimmerLights,w
 15791  1780  00E3               	movwf	setProductData@value
 15792  1781  300F               	movlw	15
 15793  1782  319C  242A         	fcall	_setProductData
 15794                           
 15795                           ;RF_Control_B1.c: 454: } else {
 15796  1784  0008               	return
 15797  1785                     l8291:	
 15798                           
 15799                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15800  1785  0020               	movlb	0	; select bank0
 15801  1786  01E3               	clrf	setProductData@value
 15802  1787  3009               	movlw	9
 15803  1788  319C  242A  3197   	fcall	_setProductData
 15804                           
 15805                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15806  178B  0021               	movlb	1	; select bank1
 15807  178C  086D               	movf	_product^(0+128),w
 15808  178D  3E0F               	addlw	15
 15809  178E  0086               	movwf	6
 15810  178F  3002               	movlw	2	; select bank4/5
 15811  1790  0087               	movwf	7
 15812  1791  0020               	movlb	0	; select bank0
 15813  1792  0969               	comf	setRF_DimmerLights@status,w
 15814  1793  0501               	andwf	1,w
 15815  1794  00E7               	movwf	??_setRF_DimmerLights
 15816  1795  0867               	movf	??_setRF_DimmerLights,w
 15817  1796  00E3               	movwf	setProductData@value
 15818  1797  300F               	movlw	15
 15819  1798  319C  242A         	fcall	_setProductData
 15820  179A  0008               	return
 15821  179B                     __end_of_setRF_DimmerLights:	
 15822                           
 15823                           	psect	text106
 15824  1CE2                     __ptext106:	
 15825 ;; *************** function _setDimmerLights_Line *****************
 15826 ;; Defined at:
 15827 ;;		line 955 in file "../src/Dimmer_B1.c"
 15828 ;; Parameters:    Size  Location     Type
 15829 ;;  lights          1    wreg     unsigned char 
 15830 ;; Auto vars:     Size  Location     Type
 15831 ;;  lights          1    1[BANK0 ] unsigned char 
 15832 ;; Return value:  Size  Location     Type
 15833 ;;		None               void
 15834 ;; Registers used:
 15835 ;;		wreg
 15836 ;; Tracked objects:
 15837 ;;		On entry : 0/0
 15838 ;;		On exit  : 0/0
 15839 ;;		Unchanged: 0/0
 15840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;Total ram usage:        1 bytes
 15846 ;; Hardware stack levels used:    1
 15847 ;; Hardware stack levels required when called:    5
 15848 ;; This function calls:
 15849 ;;		Nothing
 15850 ;; This function is called by:
 15851 ;;		_setDimmerLights_OnOff
 15852 ;;		_setDimmerLights_Dimming
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           
 15857                           ;psect for function _setDimmerLights_Line
 15858  1CE2                     _setDimmerLights_Line:	
 15859                           
 15860                           ;incstack = 0
 15861                           ; Regs used in _setDimmerLights_Line: [wreg]
 15862                           ;setDimmerLights_Line@lights stored from wreg
 15863  1CE2  0020               	movlb	0	; select bank0
 15864  1CE3  00A1               	movwf	setDimmerLights_Line@lights
 15865                           
 15866                           ;Dimmer_B1.c: 956: Dimmer.LoadGO = 1;
 15867  1CE4  0022               	movlb	2	; select bank2
 15868  1CE5  14AD               	bsf	_Dimmer^(0+256),1
 15869                           
 15870                           ;Dimmer_B1.c: 958: DimmerLights1.Line = 0;
 15871  1CE6  10DD               	bcf	(_DimmerLights1^(0+256)+1),1
 15872                           
 15873                           ;Dimmer_B1.c: 959: if (lights == 1 && lights != 0) {
 15874  1CE7  0020               	movlb	0	; select bank0
 15875  1CE8  0821               	movf	setDimmerLights_Line@lights,w
 15876  1CE9  3A01               	xorlw	1
 15877  1CEA  1D03               	skipz
 15878  1CEB  0008               	return
 15879  1CEC  0821               	movf	setDimmerLights_Line@lights,w
 15880  1CED  1903               	btfsc	3,2
 15881  1CEE  0008               	return
 15882                           
 15883                           ;Dimmer_B1.c: 960: DimmerLights1.Line = 1;
 15884  1CEF  0022               	movlb	2	; select bank2
 15885  1CF0  14DD               	bsf	(_DimmerLights1^(0+256)+1),1
 15886  1CF1  0020               	movlb	0	; select bank0
 15887  1CF2  0008               	return
 15888  1CF3                     __end_of_setDimmerLights_Line:	
 15889                           
 15890                           	psect	text107
 15891  1C36                     __ptext107:	
 15892 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15893 ;; Defined at:
 15894 ;;		line 89 in file "../src/Dimmer_B1.c"
 15895 ;; Parameters:    Size  Location     Type
 15896 ;;  lights          1    wreg     unsigned char 
 15897 ;;  value           1   67[BANK0 ] unsigned char 
 15898 ;; Auto vars:     Size  Location     Type
 15899 ;;  lights          1   69[BANK0 ] unsigned char 
 15900 ;; Return value:  Size  Location     Type
 15901 ;;		None               void
 15902 ;; Registers used:
 15903 ;;		wreg
 15904 ;; Tracked objects:
 15905 ;;		On entry : 0/0
 15906 ;;		On exit  : 0/0
 15907 ;;		Unchanged: 0/0
 15908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15909 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;Total ram usage:        3 bytes
 15914 ;; Hardware stack levels used:    1
 15915 ;; Hardware stack levels required when called:    5
 15916 ;; This function calls:
 15917 ;;		Nothing
 15918 ;; This function is called by:
 15919 ;;		_setDimmerLights_OnOff
 15920 ;;		_setDimmerLights_Dimming
 15921 ;;		_setRFSW_AdjControl
 15922 ;; This function uses a non-reentrant model
 15923 ;;
 15924                           
 15925                           
 15926                           ;psect for function _setDimmerIntr_MaxmumValue
 15927  1C36                     _setDimmerIntr_MaxmumValue:	
 15928                           
 15929                           ;incstack = 0
 15930                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15931                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15932  1C36  0020               	movlb	0	; select bank0
 15933  1C37  00E5               	movwf	setDimmerIntr_MaxmumValue@lights
 15934                           
 15935                           ;Dimmer_B1.c: 91: if (lights == 1) {
 15936  1C38  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 15937  1C39  3A01               	xorlw	1
 15938  1C3A  1D03               	skipz
 15939  1C3B  0008               	return
 15940                           
 15941                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 15942  1C3C  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 15943  1C3D  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 15944  1C3E  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 15945  1C3F  0021               	movlb	1	; select bank1
 15946  1C40  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 15947  1C41  0008               	return
 15948  1C42                     __end_of_setDimmerIntr_MaxmumValue:	
 15949                           
 15950                           	psect	text108
 15951  1E59                     __ptext108:	
 15952 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15953 ;; Defined at:
 15954 ;;		line 166 in file "../src/Dimmer_B1.c"
 15955 ;; Parameters:    Size  Location     Type
 15956 ;;  lights          1    wreg     unsigned char 
 15957 ;;  command         1    1[BANK0 ] unsigned char 
 15958 ;; Auto vars:     Size  Location     Type
 15959 ;;  lights          1    3[BANK0 ] unsigned char 
 15960 ;; Return value:  Size  Location     Type
 15961 ;;		None               void
 15962 ;; Registers used:
 15963 ;;		wreg, status,2, status,0
 15964 ;; Tracked objects:
 15965 ;;		On entry : 0/0
 15966 ;;		On exit  : 0/0
 15967 ;;		Unchanged: 0/0
 15968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15969 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15972 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15973 ;;Total ram usage:        3 bytes
 15974 ;; Hardware stack levels used:    1
 15975 ;; Hardware stack levels required when called:    5
 15976 ;; This function calls:
 15977 ;;		Nothing
 15978 ;; This function is called by:
 15979 ;;		_setDimmerLights_Dimming
 15980 ;; This function uses a non-reentrant model
 15981 ;;
 15982                           
 15983                           
 15984                           ;psect for function _setDimmerIntr_Dimming_Sw
 15985  1E59                     _setDimmerIntr_Dimming_Sw:	
 15986                           
 15987                           ;incstack = 0
 15988                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15989                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15990  1E59  0020               	movlb	0	; select bank0
 15991  1E5A  00A3               	movwf	setDimmerIntr_Dimming_Sw@lights
 15992                           
 15993                           ;Dimmer_B1.c: 168: if (lights == 1) {
 15994  1E5B  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15995  1E5C  3A01               	xorlw	1
 15996  1E5D  1D03               	skipz
 15997  1E5E  0008               	return
 15998                           
 15999                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16000  1E5F  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16001  1E60  3A01               	xorlw	1
 16002  1E61  3000               	movlw	0
 16003  1E62  1903               	skipnz
 16004  1E63  3001               	movlw	1
 16005  1E64  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16006  1E65  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16007  1E66  0021               	movlb	1	; select bank1
 16008  1E67  083A               	movf	_DimmerIntr1^(0+128),w
 16009  1E68  0020               	movlb	0	; select bank0
 16010  1E69  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16011  1E6A  39EF               	andlw	-17
 16012  1E6B  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16013  1E6C  0021               	movlb	1	; select bank1
 16014  1E6D  00BA               	movwf	_DimmerIntr1^(0+128)
 16015  1E6E  0008               	return
 16016  1E6F                     __end_of_setDimmerIntr_Dimming_Sw:	
 16017                           
 16018                           	psect	text109
 16019  16D1                     __ptext109:	
 16020 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16021 ;; Defined at:
 16022 ;;		line 1055 in file "../src/Dimmer_B1.c"
 16023 ;; Parameters:    Size  Location     Type
 16024 ;;  value           1    wreg     unsigned char 
 16025 ;; Auto vars:     Size  Location     Type
 16026 ;;  value           1   63[BANK0 ] unsigned char 
 16027 ;;  i               3   64[BANK0 ] float 
 16028 ;; Return value:  Size  Location     Type
 16029 ;;                  1    wreg      unsigned char 
 16030 ;; Registers used:
 16031 ;;		wreg, status,2, status,0, pclath, cstack
 16032 ;; Tracked objects:
 16033 ;;		On entry : 0/0
 16034 ;;		On exit  : 0/0
 16035 ;;		Unchanged: 0/0
 16036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;Total ram usage:        6 bytes
 16042 ;; Hardware stack levels used:    1
 16043 ;; Hardware stack levels required when called:    7
 16044 ;; This function calls:
 16045 ;;		___awtoft
 16046 ;;		___ftadd
 16047 ;;		___ftdiv
 16048 ;;		___ftneg
 16049 ;;		___fttol
 16050 ;; This function is called by:
 16051 ;;		_setDimmerLights_OnOff
 16052 ;;		_setDimmerLights_Dimming
 16053 ;;		_Flash_Memory_Initialization
 16054 ;; This function uses a non-reentrant model
 16055 ;;
 16056                           
 16057                           
 16058                           ;psect for function _getDimmerLights_ValueToPercent
 16059  16D1                     _getDimmerLights_ValueToPercent:	
 16060                           
 16061                           ;incstack = 0
 16062                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16063                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16064  16D1  0020               	movlb	0	; select bank0
 16065  16D2  00DF               	movwf	getDimmerLights_ValueToPercent@value
 16066                           
 16067                           ;Dimmer_B1.c: 1063: float i = ((char)(60*0.79)) - ((char)(25*0.79));
 16068  16D3  3000               	movlw	0
 16069  16D4  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16070  16D5  30E0               	movlw	224
 16071  16D6  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16072  16D7  3041               	movlw	65
 16073  16D8  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16074                           
 16075                           ;Dimmer_B1.c: 1064: i /= 100;
 16076  16D9  3000               	movlw	0
 16077  16DA  00AF               	movwf	___ftdiv@f2
 16078  16DB  30C8               	movlw	200
 16079  16DC  00B0               	movwf	___ftdiv@f2+1
 16080  16DD  3042               	movlw	66
 16081  16DE  00B1               	movwf	___ftdiv@f2+2
 16082  16DF  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16083  16E0  00B2               	movwf	___ftdiv@f1
 16084  16E1  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16085  16E2  00B3               	movwf	___ftdiv@f1+1
 16086  16E3  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16087  16E4  00B4               	movwf	___ftdiv@f1+2
 16088  16E5  318D  2538  3196   	fcall	___ftdiv
 16089  16E8  0020               	movlb	0	; select bank0
 16090  16E9  082F               	movf	?___ftdiv,w
 16091  16EA  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16092  16EB  0830               	movf	?___ftdiv+1,w
 16093  16EC  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16094  16ED  0831               	movf	?___ftdiv+2,w
 16095  16EE  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16096                           
 16097                           ;Dimmer_B1.c: 1066: return (char) (100 - ((((char)(60*0.79)) - value) / i));
 16098  16EF  085F               	movf	getDimmerLights_ValueToPercent@value,w
 16099  16F0  00DD               	movwf	??_getDimmerLights_ValueToPercent
 16100  16F1  01DE               	clrf	??_getDimmerLights_ValueToPercent+1
 16101  16F2  09DD               	comf	??_getDimmerLights_ValueToPercent,f
 16102  16F3  09DE               	comf	??_getDimmerLights_ValueToPercent+1,f
 16103  16F4  0ADD               	incf	??_getDimmerLights_ValueToPercent,f
 16104  16F5  1903               	skipnz
 16105  16F6  0ADE               	incf	??_getDimmerLights_ValueToPercent+1,f
 16106  16F7  085D               	movf	??_getDimmerLights_ValueToPercent,w
 16107  16F8  3E2F               	addlw	47
 16108  16F9  00A9               	movwf	___awtoft@c
 16109  16FA  3000               	movlw	0
 16110  16FB  3D5E               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16111  16FC  00AA               	movwf	___awtoft@c+1
 16112  16FD  3187  27DE  3196   	fcall	___awtoft
 16113  1700  0020               	movlb	0	; select bank0
 16114  1701  0829               	movf	?___awtoft,w
 16115  1702  00B2               	movwf	___ftdiv@f1
 16116  1703  082A               	movf	?___awtoft+1,w
 16117  1704  00B3               	movwf	___ftdiv@f1+1
 16118  1705  082B               	movf	?___awtoft+2,w
 16119  1706  00B4               	movwf	___ftdiv@f1+2
 16120  1707  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16121  1708  00AF               	movwf	___ftdiv@f2
 16122  1709  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16123  170A  00B0               	movwf	___ftdiv@f2+1
 16124  170B  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16125  170C  00B1               	movwf	___ftdiv@f2+2
 16126  170D  318D  2538  3196   	fcall	___ftdiv
 16127  1710  0020               	movlb	0	; select bank0
 16128  1711  082F               	movf	?___ftdiv,w
 16129  1712  00BF               	movwf	___ftneg@f1
 16130  1713  0830               	movf	?___ftdiv+1,w
 16131  1714  00C0               	movwf	___ftneg@f1+1
 16132  1715  0831               	movf	?___ftdiv+2,w
 16133  1716  00C1               	movwf	___ftneg@f1+2
 16134  1717  319B  23BF  3196   	fcall	___ftneg
 16135  171A  0020               	movlb	0	; select bank0
 16136  171B  083F               	movf	?___ftneg,w
 16137  171C  00C5               	movwf	___ftadd@f2
 16138  171D  0840               	movf	?___ftneg+1,w
 16139  171E  00C6               	movwf	___ftadd@f2+1
 16140  171F  0841               	movf	?___ftneg+2,w
 16141  1720  00C7               	movwf	___ftadd@f2+2
 16142  1721  3000               	movlw	0
 16143  1722  00C2               	movwf	___ftadd@f1
 16144  1723  30C8               	movlw	200
 16145  1724  00C3               	movwf	___ftadd@f1+1
 16146  1725  3042               	movlw	66
 16147  1726  00C4               	movwf	___ftadd@f1+2
 16148  1727  3183  2380  3196   	fcall	___ftadd
 16149  172A  0020               	movlb	0	; select bank0
 16150  172B  0842               	movf	?___ftadd,w
 16151  172C  00CF               	movwf	___fttol@f1
 16152  172D  0843               	movf	?___ftadd+1,w
 16153  172E  00D0               	movwf	___fttol@f1+1
 16154  172F  0844               	movf	?___ftadd+2,w
 16155  1730  00D1               	movwf	___fttol@f1+2
 16156  1731  318C  2425         	fcall	___fttol
 16157  1733  0020               	movlb	0	; select bank0
 16158  1734  084F               	movf	?___fttol,w
 16159  1735  0008               	return
 16160  1736                     __end_of_getDimmerLights_ValueToPercent:	
 16161                           
 16162                           	psect	text110
 16163  0C25                     __ptext110:	
 16164 ;; *************** function ___fttol *****************
 16165 ;; Defined at:
 16166 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16167 ;; Parameters:    Size  Location     Type
 16168 ;;  f1              3   47[BANK0 ] float 
 16169 ;; Auto vars:     Size  Location     Type
 16170 ;;  lval            4   56[BANK0 ] unsigned long 
 16171 ;;  exp1            1   60[BANK0 ] unsigned char 
 16172 ;;  sign1           1   55[BANK0 ] unsigned char 
 16173 ;; Return value:  Size  Location     Type
 16174 ;;                  4   47[BANK0 ] long 
 16175 ;; Registers used:
 16176 ;;		wreg, status,2, status,0
 16177 ;; Tracked objects:
 16178 ;;		On entry : 0/0
 16179 ;;		On exit  : 0/0
 16180 ;;		Unchanged: 0/0
 16181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16182 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16185 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;Total ram usage:       14 bytes
 16187 ;; Hardware stack levels used:    1
 16188 ;; Hardware stack levels required when called:    5
 16189 ;; This function calls:
 16190 ;;		Nothing
 16191 ;; This function is called by:
 16192 ;;		_getDimmerLights_PercentToValue
 16193 ;;		_getDimmerLights_ValueToPercent
 16194 ;; This function uses a non-reentrant model
 16195 ;;
 16196                           
 16197                           
 16198                           ;psect for function ___fttol
 16199  0C25                     ___fttol:	
 16200                           
 16201                           ;incstack = 0
 16202                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16203  0C25  0020               	movlb	0	; select bank0
 16204  0C26  084F               	movf	___fttol@f1,w
 16205  0C27  00D3               	movwf	??___fttol
 16206  0C28  0850               	movf	___fttol@f1+1,w
 16207  0C29  00D4               	movwf	??___fttol+1
 16208  0C2A  0851               	movf	___fttol@f1+2,w
 16209  0C2B  00D5               	movwf	??___fttol+2
 16210  0C2C  1003               	clrc
 16211  0C2D  0D54               	rlf	??___fttol+1,w
 16212  0C2E  0D55               	rlf	??___fttol+2,w
 16213  0C2F  00D6               	movwf	??___fttol+3
 16214  0C30  0856               	movf	??___fttol+3,w
 16215  0C31  00DC               	movwf	___fttol@exp1
 16216  0C32  08DC               	movf	___fttol@exp1,f
 16217  0C33  1D03               	skipz
 16218  0C34  2C3E               	goto	l5917
 16219  0C35  3000               	movlw	0
 16220  0C36  00D2               	movwf	?___fttol+3
 16221  0C37  3000               	movlw	0
 16222  0C38  00D1               	movwf	?___fttol+2
 16223  0C39  3000               	movlw	0
 16224  0C3A  00D0               	movwf	?___fttol+1
 16225  0C3B  3000               	movlw	0
 16226  0C3C  00CF               	movwf	?___fttol
 16227  0C3D  0008               	return
 16228  0C3E                     l5917:	
 16229  0C3E  084F               	movf	___fttol@f1,w
 16230  0C3F  00D3               	movwf	??___fttol
 16231  0C40  0850               	movf	___fttol@f1+1,w
 16232  0C41  00D4               	movwf	??___fttol+1
 16233  0C42  0851               	movf	___fttol@f1+2,w
 16234  0C43  00D5               	movwf	??___fttol+2
 16235  0C44  3017               	movlw	23
 16236  0C45                     u4915:	
 16237  0C45  36D5               	lsrf	??___fttol+2,f
 16238  0C46  0CD4               	rrf	??___fttol+1,f
 16239  0C47  0CD3               	rrf	??___fttol,f
 16240  0C48  0B89               	decfsz	9,f
 16241  0C49  2C45               	goto	u4915
 16242  0C4A  0853               	movf	??___fttol,w
 16243  0C4B  00D6               	movwf	??___fttol+3
 16244  0C4C  0856               	movf	??___fttol+3,w
 16245  0C4D  00D7               	movwf	___fttol@sign1
 16246  0C4E  17D0               	bsf	___fttol@f1+1,7
 16247  0C4F  30FF               	movlw	255
 16248  0C50  05CF               	andwf	___fttol@f1,f
 16249  0C51  30FF               	movlw	255
 16250  0C52  05D0               	andwf	___fttol@f1+1,f
 16251  0C53  3000               	movlw	0
 16252  0C54  05D1               	andwf	___fttol@f1+2,f
 16253  0C55  084F               	movf	___fttol@f1,w
 16254  0C56  00D8               	movwf	___fttol@lval
 16255  0C57  0850               	movf	___fttol@f1+1,w
 16256  0C58  00D9               	movwf	___fttol@lval+1
 16257  0C59  0851               	movf	___fttol@f1+2,w
 16258  0C5A  00DA               	movwf	___fttol@lval+2
 16259  0C5B  01DB               	clrf	___fttol@lval+3
 16260  0C5C  308E               	movlw	142
 16261  0C5D  02DC               	subwf	___fttol@exp1,f
 16262  0C5E  1FDC               	btfss	___fttol@exp1,7
 16263  0C5F  2C7C               	goto	l5937
 16264  0C60  085C               	movf	___fttol@exp1,w
 16265  0C61  3A80               	xorlw	128
 16266  0C62  3E8F               	addlw	143
 16267  0C63  1803               	skipnc
 16268  0C64  2C6E               	goto	l5935
 16269  0C65  3000               	movlw	0
 16270  0C66  00D2               	movwf	?___fttol+3
 16271  0C67  3000               	movlw	0
 16272  0C68  00D1               	movwf	?___fttol+2
 16273  0C69  3000               	movlw	0
 16274  0C6A  00D0               	movwf	?___fttol+1
 16275  0C6B  3000               	movlw	0
 16276  0C6C  00CF               	movwf	?___fttol
 16277  0C6D  0008               	return
 16278  0C6E                     l5935:	
 16279  0C6E  3001               	movlw	1
 16280  0C6F                     u4945:	
 16281  0C6F  36DB               	lsrf	___fttol@lval+3,f
 16282  0C70  0CDA               	rrf	___fttol@lval+2,f
 16283  0C71  0CD9               	rrf	___fttol@lval+1,f
 16284  0C72  0CD8               	rrf	___fttol@lval,f
 16285  0C73  0B89               	decfsz	9,f
 16286  0C74  2C6F               	goto	u4945
 16287  0C75  3001               	movlw	1
 16288  0C76  00D3               	movwf	??___fttol
 16289  0C77  0853               	movf	??___fttol,w
 16290  0C78  07DC               	addwf	___fttol@exp1,f
 16291  0C79  1903               	btfsc	3,2
 16292  0C7A  2C95               	goto	l5947
 16293  0C7B  2C6E               	goto	l5935
 16294  0C7C                     l5937:	
 16295  0C7C  3018               	movlw	24
 16296  0C7D  025C               	subwf	___fttol@exp1,w
 16297  0C7E  1C03               	skipc
 16298  0C7F  2C92               	goto	l5945
 16299  0C80  3000               	movlw	0
 16300  0C81  00D2               	movwf	?___fttol+3
 16301  0C82  3000               	movlw	0
 16302  0C83  00D1               	movwf	?___fttol+2
 16303  0C84  3000               	movlw	0
 16304  0C85  00D0               	movwf	?___fttol+1
 16305  0C86  3000               	movlw	0
 16306  0C87  00CF               	movwf	?___fttol
 16307  0C88  0008               	return
 16308  0C89                     l5943:	
 16309  0C89  3001               	movlw	1
 16310  0C8A                     u4975:	
 16311  0C8A  35D8               	lslf	___fttol@lval,f
 16312  0C8B  0DD9               	rlf	___fttol@lval+1,f
 16313  0C8C  0DDA               	rlf	___fttol@lval+2,f
 16314  0C8D  0DDB               	rlf	___fttol@lval+3,f
 16315  0C8E  0B89               	decfsz	9,f
 16316  0C8F  2C8A               	goto	u4975
 16317  0C90  3001               	movlw	1
 16318  0C91  02DC               	subwf	___fttol@exp1,f
 16319  0C92                     l5945:	
 16320  0C92  08DC               	movf	___fttol@exp1,f
 16321  0C93  1D03               	skipz
 16322  0C94  2C89               	goto	l5943
 16323  0C95                     l5947:	
 16324  0C95  0857               	movf	___fttol@sign1,w
 16325  0C96  1903               	btfsc	3,2
 16326  0C97  2CA3               	goto	l5951
 16327  0C98  09D8               	comf	___fttol@lval,f
 16328  0C99  09D9               	comf	___fttol@lval+1,f
 16329  0C9A  09DA               	comf	___fttol@lval+2,f
 16330  0C9B  09DB               	comf	___fttol@lval+3,f
 16331  0C9C  0AD8               	incf	___fttol@lval,f
 16332  0C9D  1903               	skipnz
 16333  0C9E  0AD9               	incf	___fttol@lval+1,f
 16334  0C9F  1903               	skipnz
 16335  0CA0  0ADA               	incf	___fttol@lval+2,f
 16336  0CA1  1903               	skipnz
 16337  0CA2  0ADB               	incf	___fttol@lval+3,f
 16338  0CA3                     l5951:	
 16339  0CA3  085B               	movf	___fttol@lval+3,w
 16340  0CA4  00D2               	movwf	?___fttol+3
 16341  0CA5  085A               	movf	___fttol@lval+2,w
 16342  0CA6  00D1               	movwf	?___fttol+2
 16343  0CA7  0859               	movf	___fttol@lval+1,w
 16344  0CA8  00D0               	movwf	?___fttol+1
 16345  0CA9  0858               	movf	___fttol@lval,w
 16346  0CAA  00CF               	movwf	?___fttol
 16347  0CAB  0008               	return
 16348  0CAC                     __end_of___fttol:	
 16349                           
 16350                           	psect	text111
 16351  1BBF                     __ptext111:	
 16352 ;; *************** function ___ftneg *****************
 16353 ;; Defined at:
 16354 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16355 ;; Parameters:    Size  Location     Type
 16356 ;;  f1              3   31[BANK0 ] float 
 16357 ;; Auto vars:     Size  Location     Type
 16358 ;;		None
 16359 ;; Return value:  Size  Location     Type
 16360 ;;                  3   31[BANK0 ] float 
 16361 ;; Registers used:
 16362 ;;		wreg
 16363 ;; Tracked objects:
 16364 ;;		On entry : 0/0
 16365 ;;		On exit  : 0/0
 16366 ;;		Unchanged: 0/0
 16367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16368 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;Total ram usage:        3 bytes
 16373 ;; Hardware stack levels used:    1
 16374 ;; Hardware stack levels required when called:    5
 16375 ;; This function calls:
 16376 ;;		Nothing
 16377 ;; This function is called by:
 16378 ;;		_getDimmerLights_PercentToValue
 16379 ;;		_getDimmerLights_ValueToPercent
 16380 ;; This function uses a non-reentrant model
 16381 ;;
 16382                           
 16383                           
 16384                           ;psect for function ___ftneg
 16385  1BBF                     ___ftneg:	
 16386                           
 16387                           ;incstack = 0
 16388                           ; Regs used in ___ftneg: [wreg]
 16389  1BBF  0020               	movlb	0	; select bank0
 16390  1BC0  0841               	movf	___ftneg@f1+2,w
 16391  1BC1  0440               	iorwf	___ftneg@f1+1,w
 16392  1BC2  043F               	iorwf	___ftneg@f1,w
 16393  1BC3  1903               	skipnz
 16394  1BC4  0008               	return
 16395  1BC5  3080               	movlw	128
 16396  1BC6  06C1               	xorwf	___ftneg@f1+2,f
 16397  1BC7  0008               	return
 16398  1BC8                     __end_of___ftneg:	
 16399                           
 16400                           	psect	text112
 16401  0D38                     __ptext112:	
 16402 ;; *************** function ___ftdiv *****************
 16403 ;; Defined at:
 16404 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16405 ;; Parameters:    Size  Location     Type
 16406 ;;  f2              3   15[BANK0 ] float 
 16407 ;;  f1              3   18[BANK0 ] float 
 16408 ;; Auto vars:     Size  Location     Type
 16409 ;;  f3              3   26[BANK0 ] float 
 16410 ;;  sign            1   30[BANK0 ] unsigned char 
 16411 ;;  exp             1   29[BANK0 ] unsigned char 
 16412 ;;  cntr            1   25[BANK0 ] unsigned char 
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  3   15[BANK0 ] float 
 16415 ;; Registers used:
 16416 ;;		wreg, status,2, status,0, pclath, cstack
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16422 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;Total ram usage:       16 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    6
 16429 ;; This function calls:
 16430 ;;		___ftpack
 16431 ;; This function is called by:
 16432 ;;		_getDimmerLights_PercentToValue
 16433 ;;		_getDimmerLights_ValueToPercent
 16434 ;; This function uses a non-reentrant model
 16435 ;;
 16436                           
 16437                           
 16438                           ;psect for function ___ftdiv
 16439  0D38                     ___ftdiv:	
 16440                           
 16441                           ;incstack = 0
 16442                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16443  0D38  0020               	movlb	0	; select bank0
 16444  0D39  0832               	movf	___ftdiv@f1,w
 16445  0D3A  00B5               	movwf	??___ftdiv
 16446  0D3B  0833               	movf	___ftdiv@f1+1,w
 16447  0D3C  00B6               	movwf	??___ftdiv+1
 16448  0D3D  0834               	movf	___ftdiv@f1+2,w
 16449  0D3E  00B7               	movwf	??___ftdiv+2
 16450  0D3F  1003               	clrc
 16451  0D40  0D36               	rlf	??___ftdiv+1,w
 16452  0D41  0D37               	rlf	??___ftdiv+2,w
 16453  0D42  00B8               	movwf	??___ftdiv+3
 16454  0D43  0838               	movf	??___ftdiv+3,w
 16455  0D44  00BD               	movwf	___ftdiv@exp
 16456  0D45  08BD               	movf	___ftdiv@exp,f
 16457  0D46  1D03               	skipz
 16458  0D47  2D4F               	goto	l5817
 16459  0D48  3000               	movlw	0
 16460  0D49  00AF               	movwf	?___ftdiv
 16461  0D4A  3000               	movlw	0
 16462  0D4B  00B0               	movwf	?___ftdiv+1
 16463  0D4C  3000               	movlw	0
 16464  0D4D  00B1               	movwf	?___ftdiv+2
 16465  0D4E  0008               	return
 16466  0D4F                     l5817:	
 16467  0D4F  082F               	movf	___ftdiv@f2,w
 16468  0D50  00B5               	movwf	??___ftdiv
 16469  0D51  0830               	movf	___ftdiv@f2+1,w
 16470  0D52  00B6               	movwf	??___ftdiv+1
 16471  0D53  0831               	movf	___ftdiv@f2+2,w
 16472  0D54  00B7               	movwf	??___ftdiv+2
 16473  0D55  1003               	clrc
 16474  0D56  0D36               	rlf	??___ftdiv+1,w
 16475  0D57  0D37               	rlf	??___ftdiv+2,w
 16476  0D58  00B8               	movwf	??___ftdiv+3
 16477  0D59  0838               	movf	??___ftdiv+3,w
 16478  0D5A  00BE               	movwf	___ftdiv@sign
 16479  0D5B  08BE               	movf	___ftdiv@sign,f
 16480  0D5C  1D03               	skipz
 16481  0D5D  2D65               	goto	l5823
 16482  0D5E  3000               	movlw	0
 16483  0D5F  00AF               	movwf	?___ftdiv
 16484  0D60  3000               	movlw	0
 16485  0D61  00B0               	movwf	?___ftdiv+1
 16486  0D62  3000               	movlw	0
 16487  0D63  00B1               	movwf	?___ftdiv+2
 16488  0D64  0008               	return
 16489  0D65                     l5823:	
 16490  0D65  3000               	movlw	0
 16491  0D66  00BA               	movwf	___ftdiv@f3
 16492  0D67  3000               	movlw	0
 16493  0D68  00BB               	movwf	___ftdiv@f3+1
 16494  0D69  3000               	movlw	0
 16495  0D6A  00BC               	movwf	___ftdiv@f3+2
 16496  0D6B  3089               	movlw	137
 16497  0D6C  073E               	addwf	___ftdiv@sign,w
 16498  0D6D  00B5               	movwf	??___ftdiv
 16499  0D6E  0835               	movf	??___ftdiv,w
 16500  0D6F  02BD               	subwf	___ftdiv@exp,f
 16501  0D70  0832               	movf	___ftdiv@f1,w
 16502  0D71  00B5               	movwf	??___ftdiv
 16503  0D72  0833               	movf	___ftdiv@f1+1,w
 16504  0D73  00B6               	movwf	??___ftdiv+1
 16505  0D74  0834               	movf	___ftdiv@f1+2,w
 16506  0D75  00B7               	movwf	??___ftdiv+2
 16507  0D76  3010               	movlw	16
 16508  0D77                     u4715:	
 16509  0D77  36B7               	lsrf	??___ftdiv+2,f
 16510  0D78  0CB6               	rrf	??___ftdiv+1,f
 16511  0D79  0CB5               	rrf	??___ftdiv,f
 16512  0D7A  0B89               	decfsz	9,f
 16513  0D7B  2D77               	goto	u4715
 16514  0D7C  0835               	movf	??___ftdiv,w
 16515  0D7D  00B8               	movwf	??___ftdiv+3
 16516  0D7E  0838               	movf	??___ftdiv+3,w
 16517  0D7F  00BE               	movwf	___ftdiv@sign
 16518  0D80  082F               	movf	___ftdiv@f2,w
 16519  0D81  00B5               	movwf	??___ftdiv
 16520  0D82  0830               	movf	___ftdiv@f2+1,w
 16521  0D83  00B6               	movwf	??___ftdiv+1
 16522  0D84  0831               	movf	___ftdiv@f2+2,w
 16523  0D85  00B7               	movwf	??___ftdiv+2
 16524  0D86  3010               	movlw	16
 16525  0D87                     u4725:	
 16526  0D87  36B7               	lsrf	??___ftdiv+2,f
 16527  0D88  0CB6               	rrf	??___ftdiv+1,f
 16528  0D89  0CB5               	rrf	??___ftdiv,f
 16529  0D8A  0B89               	decfsz	9,f
 16530  0D8B  2D87               	goto	u4725
 16531  0D8C  0835               	movf	??___ftdiv,w
 16532  0D8D  00B8               	movwf	??___ftdiv+3
 16533  0D8E  0838               	movf	??___ftdiv+3,w
 16534  0D8F  06BE               	xorwf	___ftdiv@sign,f
 16535  0D90  3080               	movlw	128
 16536  0D91  00B5               	movwf	??___ftdiv
 16537  0D92  0835               	movf	??___ftdiv,w
 16538  0D93  05BE               	andwf	___ftdiv@sign,f
 16539  0D94  17B3               	bsf	___ftdiv@f1+1,7
 16540  0D95  30FF               	movlw	255
 16541  0D96  05B2               	andwf	___ftdiv@f1,f
 16542  0D97  30FF               	movlw	255
 16543  0D98  05B3               	andwf	___ftdiv@f1+1,f
 16544  0D99  3000               	movlw	0
 16545  0D9A  05B4               	andwf	___ftdiv@f1+2,f
 16546  0D9B  17B0               	bsf	___ftdiv@f2+1,7
 16547  0D9C  30FF               	movlw	255
 16548  0D9D  05AF               	andwf	___ftdiv@f2,f
 16549  0D9E  30FF               	movlw	255
 16550  0D9F  05B0               	andwf	___ftdiv@f2+1,f
 16551  0DA0  3000               	movlw	0
 16552  0DA1  05B1               	andwf	___ftdiv@f2+2,f
 16553  0DA2  3018               	movlw	24
 16554  0DA3  00B5               	movwf	??___ftdiv
 16555  0DA4  0835               	movf	??___ftdiv,w
 16556  0DA5  00B9               	movwf	___ftdiv@cntr
 16557  0DA6                     l5837:	
 16558  0DA6  3001               	movlw	1
 16559  0DA7                     u4735:	
 16560  0DA7  35BA               	lslf	___ftdiv@f3,f
 16561  0DA8  0DBB               	rlf	___ftdiv@f3+1,f
 16562  0DA9  0DBC               	rlf	___ftdiv@f3+2,f
 16563  0DAA  0B89               	decfsz	9,f
 16564  0DAB  2DA7               	goto	u4735
 16565  0DAC  0831               	movf	___ftdiv@f2+2,w
 16566  0DAD  0234               	subwf	___ftdiv@f1+2,w
 16567  0DAE  1D03               	skipz
 16568  0DAF  2DB6               	goto	u4745
 16569  0DB0  0830               	movf	___ftdiv@f2+1,w
 16570  0DB1  0233               	subwf	___ftdiv@f1+1,w
 16571  0DB2  1D03               	skipz
 16572  0DB3  2DB6               	goto	u4745
 16573  0DB4  082F               	movf	___ftdiv@f2,w
 16574  0DB5  0232               	subwf	___ftdiv@f1,w
 16575  0DB6                     u4745:	
 16576  0DB6  1C03               	skipc
 16577  0DB7  2DBF               	goto	l5845
 16578  0DB8  082F               	movf	___ftdiv@f2,w
 16579  0DB9  02B2               	subwf	___ftdiv@f1,f
 16580  0DBA  0830               	movf	___ftdiv@f2+1,w
 16581  0DBB  3BB3               	subwfb	___ftdiv@f1+1,f
 16582  0DBC  0831               	movf	___ftdiv@f2+2,w
 16583  0DBD  3BB4               	subwfb	___ftdiv@f1+2,f
 16584  0DBE  143A               	bsf	___ftdiv@f3,0
 16585  0DBF                     l5845:	
 16586  0DBF  3001               	movlw	1
 16587  0DC0                     u4755:	
 16588  0DC0  35B2               	lslf	___ftdiv@f1,f
 16589  0DC1  0DB3               	rlf	___ftdiv@f1+1,f
 16590  0DC2  0DB4               	rlf	___ftdiv@f1+2,f
 16591  0DC3  0B89               	decfsz	9,f
 16592  0DC4  2DC0               	goto	u4755
 16593  0DC5  3001               	movlw	1
 16594  0DC6  02B9               	subwf	___ftdiv@cntr,f
 16595  0DC7  1D03               	btfss	3,2
 16596  0DC8  2DA6               	goto	l5837
 16597  0DC9  083A               	movf	___ftdiv@f3,w
 16598  0DCA  00A1               	movwf	___ftpack@arg
 16599  0DCB  083B               	movf	___ftdiv@f3+1,w
 16600  0DCC  00A2               	movwf	___ftpack@arg+1
 16601  0DCD  083C               	movf	___ftdiv@f3+2,w
 16602  0DCE  00A3               	movwf	___ftpack@arg+2
 16603  0DCF  083D               	movf	___ftdiv@exp,w
 16604  0DD0  00B5               	movwf	??___ftdiv
 16605  0DD1  0835               	movf	??___ftdiv,w
 16606  0DD2  00A4               	movwf	___ftpack@exp
 16607  0DD3  083E               	movf	___ftdiv@sign,w
 16608  0DD4  00B6               	movwf	??___ftdiv+1
 16609  0DD5  0836               	movf	??___ftdiv+1,w
 16610  0DD6  00A5               	movwf	___ftpack@sign
 16611  0DD7  3196  2670         	fcall	___ftpack
 16612  0DD9  0020               	movlb	0	; select bank0
 16613  0DDA  0821               	movf	?___ftpack,w
 16614  0DDB  00AF               	movwf	?___ftdiv
 16615  0DDC  0822               	movf	?___ftpack+1,w
 16616  0DDD  00B0               	movwf	?___ftdiv+1
 16617  0DDE  0823               	movf	?___ftpack+2,w
 16618  0DDF  00B1               	movwf	?___ftdiv+2
 16619  0DE0  0008               	return
 16620  0DE1                     __end_of___ftdiv:	
 16621                           
 16622                           	psect	text113
 16623  0380                     __ptext113:	
 16624 ;; *************** function ___ftadd *****************
 16625 ;; Defined at:
 16626 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16627 ;; Parameters:    Size  Location     Type
 16628 ;;  f1              3   34[BANK0 ] float 
 16629 ;;  f2              3   37[BANK0 ] float 
 16630 ;; Auto vars:     Size  Location     Type
 16631 ;;  exp1            1   46[BANK0 ] unsigned char 
 16632 ;;  exp2            1   45[BANK0 ] unsigned char 
 16633 ;;  sign            1   44[BANK0 ] unsigned char 
 16634 ;; Return value:  Size  Location     Type
 16635 ;;                  3   34[BANK0 ] float 
 16636 ;; Registers used:
 16637 ;;		wreg, status,2, status,0, pclath, cstack
 16638 ;; Tracked objects:
 16639 ;;		On entry : 0/0
 16640 ;;		On exit  : 0/0
 16641 ;;		Unchanged: 0/0
 16642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16643 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16644 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16645 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16646 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16647 ;;Total ram usage:       13 bytes
 16648 ;; Hardware stack levels used:    1
 16649 ;; Hardware stack levels required when called:    6
 16650 ;; This function calls:
 16651 ;;		___ftpack
 16652 ;; This function is called by:
 16653 ;;		_getDimmerLights_PercentToValue
 16654 ;;		_getDimmerLights_ValueToPercent
 16655 ;; This function uses a non-reentrant model
 16656 ;;
 16657                           
 16658                           
 16659                           ;psect for function ___ftadd
 16660  0380                     ___ftadd:	
 16661                           
 16662                           ;incstack = 0
 16663                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16664  0380  0020               	movlb	0	; select bank0
 16665  0381  0842               	movf	___ftadd@f1,w
 16666  0382  00C8               	movwf	??___ftadd
 16667  0383  0843               	movf	___ftadd@f1+1,w
 16668  0384  00C9               	movwf	??___ftadd+1
 16669  0385  0844               	movf	___ftadd@f1+2,w
 16670  0386  00CA               	movwf	??___ftadd+2
 16671  0387  1003               	clrc
 16672  0388  0D49               	rlf	??___ftadd+1,w
 16673  0389  0D4A               	rlf	??___ftadd+2,w
 16674  038A  00CB               	movwf	??___ftadd+3
 16675  038B  084B               	movf	??___ftadd+3,w
 16676  038C  00CE               	movwf	___ftadd@exp1
 16677  038D  0845               	movf	___ftadd@f2,w
 16678  038E  00C8               	movwf	??___ftadd
 16679  038F  0846               	movf	___ftadd@f2+1,w
 16680  0390  00C9               	movwf	??___ftadd+1
 16681  0391  0847               	movf	___ftadd@f2+2,w
 16682  0392  00CA               	movwf	??___ftadd+2
 16683  0393  1003               	clrc
 16684  0394  0D49               	rlf	??___ftadd+1,w
 16685  0395  0D4A               	rlf	??___ftadd+2,w
 16686  0396  00CB               	movwf	??___ftadd+3
 16687  0397  084B               	movf	??___ftadd+3,w
 16688  0398  00CD               	movwf	___ftadd@exp2
 16689  0399  084E               	movf	___ftadd@exp1,w
 16690  039A  1903               	btfsc	3,2
 16691  039B  2BA8               	goto	l5747
 16692  039C  084D               	movf	___ftadd@exp2,w
 16693  039D  024E               	subwf	___ftadd@exp1,w
 16694  039E  1803               	skipnc
 16695  039F  2BAF               	goto	l5751
 16696  03A0  034E               	decf	___ftadd@exp1,w
 16697  03A1  3AFF               	xorlw	255
 16698  03A2  074D               	addwf	___ftadd@exp2,w
 16699  03A3  00C8               	movwf	??___ftadd
 16700  03A4  3019               	movlw	25
 16701  03A5  0248               	subwf	??___ftadd,w
 16702  03A6  1C03               	skipc
 16703  03A7  2BAF               	goto	l5751
 16704  03A8                     l5747:	
 16705  03A8  0845               	movf	___ftadd@f2,w
 16706  03A9  00C2               	movwf	?___ftadd
 16707  03AA  0846               	movf	___ftadd@f2+1,w
 16708  03AB  00C3               	movwf	?___ftadd+1
 16709  03AC  0847               	movf	___ftadd@f2+2,w
 16710  03AD  00C4               	movwf	?___ftadd+2
 16711  03AE  0008               	return
 16712  03AF                     l5751:	
 16713  03AF  084D               	movf	___ftadd@exp2,w
 16714  03B0  1903               	btfsc	3,2
 16715  03B1  0008               	return
 16716  03B2  084E               	movf	___ftadd@exp1,w
 16717  03B3  024D               	subwf	___ftadd@exp2,w
 16718  03B4  1803               	skipnc
 16719  03B5  2BBE               	goto	l5757
 16720  03B6  034D               	decf	___ftadd@exp2,w
 16721  03B7  3AFF               	xorlw	255
 16722  03B8  074E               	addwf	___ftadd@exp1,w
 16723  03B9  00C8               	movwf	??___ftadd
 16724  03BA  3019               	movlw	25
 16725  03BB  0248               	subwf	??___ftadd,w
 16726  03BC  1803               	btfsc	3,0
 16727  03BD  0008               	return
 16728  03BE                     l5757:	
 16729  03BE  3006               	movlw	6
 16730  03BF  00C8               	movwf	??___ftadd
 16731  03C0  0848               	movf	??___ftadd,w
 16732  03C1  00CC               	movwf	___ftadd@sign
 16733  03C2  1BC4               	btfsc	___ftadd@f1+2,7
 16734  03C3  17CC               	bsf	___ftadd@sign,7
 16735  03C4  1BC7               	btfsc	___ftadd@f2+2,7
 16736  03C5  174C               	bsf	___ftadd@sign,6
 16737  03C6  17C3               	bsf	___ftadd@f1+1,7
 16738  03C7  30FF               	movlw	255
 16739  03C8  05C2               	andwf	___ftadd@f1,f
 16740  03C9  30FF               	movlw	255
 16741  03CA  05C3               	andwf	___ftadd@f1+1,f
 16742  03CB  3000               	movlw	0
 16743  03CC  05C4               	andwf	___ftadd@f1+2,f
 16744  03CD  17C6               	bsf	___ftadd@f2+1,7
 16745  03CE  30FF               	movlw	255
 16746  03CF  05C5               	andwf	___ftadd@f2,f
 16747  03D0  30FF               	movlw	255
 16748  03D1  05C6               	andwf	___ftadd@f2+1,f
 16749  03D2  3000               	movlw	0
 16750  03D3  05C7               	andwf	___ftadd@f2+2,f
 16751  03D4  084D               	movf	___ftadd@exp2,w
 16752  03D5  024E               	subwf	___ftadd@exp1,w
 16753  03D6  1803               	skipnc
 16754  03D7  2BFA               	goto	l5779
 16755  03D8                     l5769:	
 16756  03D8  3001               	movlw	1
 16757  03D9                     u4555:	
 16758  03D9  35C5               	lslf	___ftadd@f2,f
 16759  03DA  0DC6               	rlf	___ftadd@f2+1,f
 16760  03DB  0DC7               	rlf	___ftadd@f2+2,f
 16761  03DC  0B89               	decfsz	9,f
 16762  03DD  2BD9               	goto	u4555
 16763  03DE  3001               	movlw	1
 16764  03DF  02CD               	subwf	___ftadd@exp2,f
 16765  03E0  084D               	movf	___ftadd@exp2,w
 16766  03E1  064E               	xorwf	___ftadd@exp1,w
 16767  03E2  1903               	skipnz
 16768  03E3  2BF5               	goto	l5777
 16769  03E4  3001               	movlw	1
 16770  03E5  02CC               	subwf	___ftadd@sign,f
 16771  03E6  084C               	movf	___ftadd@sign,w
 16772  03E7  3907               	andlw	7
 16773  03E8  1903               	btfsc	3,2
 16774  03E9  2BF5               	goto	l5777
 16775  03EA  2BD8               	goto	l5769
 16776  03EB                     l5775:	
 16777  03EB  3001               	movlw	1
 16778  03EC                     u4585:	
 16779  03EC  36C4               	lsrf	___ftadd@f1+2,f
 16780  03ED  0CC3               	rrf	___ftadd@f1+1,f
 16781  03EE  0CC2               	rrf	___ftadd@f1,f
 16782  03EF  0B89               	decfsz	9,f
 16783  03F0  2BEC               	goto	u4585
 16784  03F1  3001               	movlw	1
 16785  03F2  00C8               	movwf	??___ftadd
 16786  03F3  0848               	movf	??___ftadd,w
 16787  03F4  07CE               	addwf	___ftadd@exp1,f
 16788  03F5                     l5777:	
 16789  03F5  084E               	movf	___ftadd@exp1,w
 16790  03F6  064D               	xorwf	___ftadd@exp2,w
 16791  03F7  1903               	btfsc	3,2
 16792  03F8  2C1F               	goto	l2846
 16793  03F9  2BEB               	goto	l5775
 16794  03FA                     l5779:	
 16795  03FA  084E               	movf	___ftadd@exp1,w
 16796  03FB  024D               	subwf	___ftadd@exp2,w
 16797  03FC  1803               	skipnc
 16798  03FD  2C1F               	goto	l2846
 16799  03FE                     l5781:	
 16800  03FE  3001               	movlw	1
 16801  03FF                     u4615:	
 16802  03FF  35C2               	lslf	___ftadd@f1,f
 16803  0400  0DC3               	rlf	___ftadd@f1+1,f
 16804  0401  0DC4               	rlf	___ftadd@f1+2,f
 16805  0402  0B89               	decfsz	9,f
 16806  0403  2BFF               	goto	u4615
 16807  0404  3001               	movlw	1
 16808  0405  02CE               	subwf	___ftadd@exp1,f
 16809  0406  084D               	movf	___ftadd@exp2,w
 16810  0407  064E               	xorwf	___ftadd@exp1,w
 16811  0408  1903               	skipnz
 16812  0409  2C1B               	goto	l5789
 16813  040A  3001               	movlw	1
 16814  040B  02CC               	subwf	___ftadd@sign,f
 16815  040C  084C               	movf	___ftadd@sign,w
 16816  040D  3907               	andlw	7
 16817  040E  1903               	btfsc	3,2
 16818  040F  2C1B               	goto	l5789
 16819  0410  2BFE               	goto	l5781
 16820  0411                     l5787:	
 16821  0411  3001               	movlw	1
 16822  0412                     u4645:	
 16823  0412  36C7               	lsrf	___ftadd@f2+2,f
 16824  0413  0CC6               	rrf	___ftadd@f2+1,f
 16825  0414  0CC5               	rrf	___ftadd@f2,f
 16826  0415  0B89               	decfsz	9,f
 16827  0416  2C12               	goto	u4645
 16828  0417  3001               	movlw	1
 16829  0418  00C8               	movwf	??___ftadd
 16830  0419  0848               	movf	??___ftadd,w
 16831  041A  07CD               	addwf	___ftadd@exp2,f
 16832  041B                     l5789:	
 16833  041B  084E               	movf	___ftadd@exp1,w
 16834  041C  064D               	xorwf	___ftadd@exp2,w
 16835  041D  1D03               	skipz
 16836  041E  2C11               	goto	l5787
 16837  041F                     l2846:	
 16838  041F  1FCC               	btfss	___ftadd@sign,7
 16839  0420  2C31               	goto	l5793
 16840  0421  30FF               	movlw	255
 16841  0422  06C2               	xorwf	___ftadd@f1,f
 16842  0423  30FF               	movlw	255
 16843  0424  06C3               	xorwf	___ftadd@f1+1,f
 16844  0425  30FF               	movlw	255
 16845  0426  06C4               	xorwf	___ftadd@f1+2,f
 16846  0427  3001               	movlw	1
 16847  0428  07C2               	addwf	___ftadd@f1,f
 16848  0429  3000               	movlw	0
 16849  042A  1803               	skipnc
 16850  042B  3001               	movlw	1
 16851  042C  07C3               	addwf	___ftadd@f1+1,f
 16852  042D  3000               	movlw	0
 16853  042E  1803               	skipnc
 16854  042F  3001               	movlw	1
 16855  0430  07C4               	addwf	___ftadd@f1+2,f
 16856  0431                     l5793:	
 16857  0431  1F4C               	btfss	___ftadd@sign,6
 16858  0432  2C43               	goto	l5797
 16859  0433  30FF               	movlw	255
 16860  0434  06C5               	xorwf	___ftadd@f2,f
 16861  0435  30FF               	movlw	255
 16862  0436  06C6               	xorwf	___ftadd@f2+1,f
 16863  0437  30FF               	movlw	255
 16864  0438  06C7               	xorwf	___ftadd@f2+2,f
 16865  0439  3001               	movlw	1
 16866  043A  07C5               	addwf	___ftadd@f2,f
 16867  043B  3000               	movlw	0
 16868  043C  1803               	skipnc
 16869  043D  3001               	movlw	1
 16870  043E  07C6               	addwf	___ftadd@f2+1,f
 16871  043F  3000               	movlw	0
 16872  0440  1803               	skipnc
 16873  0441  3001               	movlw	1
 16874  0442  07C7               	addwf	___ftadd@f2+2,f
 16875  0443                     l5797:	
 16876  0443  01CC               	clrf	___ftadd@sign
 16877  0444  0842               	movf	___ftadd@f1,w
 16878  0445  07C5               	addwf	___ftadd@f2,f
 16879  0446  0843               	movf	___ftadd@f1+1,w
 16880  0447  3DC6               	addwfc	___ftadd@f2+1,f
 16881  0448  0844               	movf	___ftadd@f1+2,w
 16882  0449  3DC7               	addwfc	___ftadd@f2+2,f
 16883  044A  1FC7               	btfss	___ftadd@f2+2,7
 16884  044B  2C5E               	goto	l5807
 16885  044C  30FF               	movlw	255
 16886  044D  06C5               	xorwf	___ftadd@f2,f
 16887  044E  30FF               	movlw	255
 16888  044F  06C6               	xorwf	___ftadd@f2+1,f
 16889  0450  30FF               	movlw	255
 16890  0451  06C7               	xorwf	___ftadd@f2+2,f
 16891  0452  3001               	movlw	1
 16892  0453  07C5               	addwf	___ftadd@f2,f
 16893  0454  3000               	movlw	0
 16894  0455  1803               	skipnc
 16895  0456  3001               	movlw	1
 16896  0457  07C6               	addwf	___ftadd@f2+1,f
 16897  0458  3000               	movlw	0
 16898  0459  1803               	skipnc
 16899  045A  3001               	movlw	1
 16900  045B  07C7               	addwf	___ftadd@f2+2,f
 16901  045C  01CC               	clrf	___ftadd@sign
 16902  045D  0ACC               	incf	___ftadd@sign,f
 16903  045E                     l5807:	
 16904  045E  0845               	movf	___ftadd@f2,w
 16905  045F  00A1               	movwf	___ftpack@arg
 16906  0460  0846               	movf	___ftadd@f2+1,w
 16907  0461  00A2               	movwf	___ftpack@arg+1
 16908  0462  0847               	movf	___ftadd@f2+2,w
 16909  0463  00A3               	movwf	___ftpack@arg+2
 16910  0464  084E               	movf	___ftadd@exp1,w
 16911  0465  00C8               	movwf	??___ftadd
 16912  0466  0848               	movf	??___ftadd,w
 16913  0467  00A4               	movwf	___ftpack@exp
 16914  0468  084C               	movf	___ftadd@sign,w
 16915  0469  00C9               	movwf	??___ftadd+1
 16916  046A  0849               	movf	??___ftadd+1,w
 16917  046B  00A5               	movwf	___ftpack@sign
 16918  046C  3196  2670         	fcall	___ftpack
 16919  046E  0020               	movlb	0	; select bank0
 16920  046F  0821               	movf	?___ftpack,w
 16921  0470  00C2               	movwf	?___ftadd
 16922  0471  0822               	movf	?___ftpack+1,w
 16923  0472  00C3               	movwf	?___ftadd+1
 16924  0473  0823               	movf	?___ftpack+2,w
 16925  0474  00C4               	movwf	?___ftadd+2
 16926  0475  0008               	return
 16927  0476                     __end_of___ftadd:	
 16928                           
 16929                           	psect	text114
 16930  07DE                     __ptext114:	
 16931 ;; *************** function ___awtoft *****************
 16932 ;; Defined at:
 16933 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16934 ;; Parameters:    Size  Location     Type
 16935 ;;  c               2    9[BANK0 ] int 
 16936 ;; Auto vars:     Size  Location     Type
 16937 ;;  sign            1   14[BANK0 ] unsigned char 
 16938 ;; Return value:  Size  Location     Type
 16939 ;;                  3    9[BANK0 ] float 
 16940 ;; Registers used:
 16941 ;;		wreg, status,2, status,0, pclath, cstack
 16942 ;; Tracked objects:
 16943 ;;		On entry : 0/0
 16944 ;;		On exit  : 0/0
 16945 ;;		Unchanged: 0/0
 16946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16947 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16951 ;;Total ram usage:        6 bytes
 16952 ;; Hardware stack levels used:    1
 16953 ;; Hardware stack levels required when called:    6
 16954 ;; This function calls:
 16955 ;;		___ftpack
 16956 ;; This function is called by:
 16957 ;;		_getDimmerLights_PercentToValue
 16958 ;;		_getDimmerLights_ValueToPercent
 16959 ;; This function uses a non-reentrant model
 16960 ;;
 16961                           
 16962                           
 16963                           ;psect for function ___awtoft
 16964  07DE                     ___awtoft:	
 16965                           
 16966                           ;incstack = 0
 16967                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16968  07DE  0020               	movlb	0	; select bank0
 16969  07DF  01AE               	clrf	___awtoft@sign
 16970  07E0  1FAA               	btfss	___awtoft@c+1,7
 16971  07E1  2FE9               	goto	l5735
 16972  07E2  09A9               	comf	___awtoft@c,f
 16973  07E3  09AA               	comf	___awtoft@c+1,f
 16974  07E4  0AA9               	incf	___awtoft@c,f
 16975  07E5  1903               	skipnz
 16976  07E6  0AAA               	incf	___awtoft@c+1,f
 16977  07E7  01AE               	clrf	___awtoft@sign
 16978  07E8  0AAE               	incf	___awtoft@sign,f
 16979  07E9                     l5735:	
 16980  07E9  0829               	movf	___awtoft@c,w
 16981  07EA  00A1               	movwf	___ftpack@arg
 16982  07EB  082A               	movf	___awtoft@c+1,w
 16983  07EC  00A2               	movwf	___ftpack@arg+1
 16984  07ED  01A3               	clrf	___ftpack@arg+2
 16985  07EE  308E               	movlw	142
 16986  07EF  00AC               	movwf	??___awtoft
 16987  07F0  082C               	movf	??___awtoft,w
 16988  07F1  00A4               	movwf	___ftpack@exp
 16989  07F2  082E               	movf	___awtoft@sign,w
 16990  07F3  00AD               	movwf	??___awtoft+1
 16991  07F4  082D               	movf	??___awtoft+1,w
 16992  07F5  00A5               	movwf	___ftpack@sign
 16993  07F6  3196  2670         	fcall	___ftpack
 16994  07F8  0020               	movlb	0	; select bank0
 16995  07F9  0821               	movf	?___ftpack,w
 16996  07FA  00A9               	movwf	?___awtoft
 16997  07FB  0822               	movf	?___ftpack+1,w
 16998  07FC  00AA               	movwf	?___awtoft+1
 16999  07FD  0823               	movf	?___ftpack+2,w
 17000  07FE  00AB               	movwf	?___awtoft+2
 17001  07FF  0008               	return
 17002  0800                     __end_of___awtoft:	
 17003                           
 17004                           	psect	text115
 17005  1670                     __ptext115:	
 17006 ;; *************** function ___ftpack *****************
 17007 ;; Defined at:
 17008 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17009 ;; Parameters:    Size  Location     Type
 17010 ;;  arg             3    1[BANK0 ] unsigned um
 17011 ;;  exp             1    4[BANK0 ] unsigned char 
 17012 ;;  sign            1    5[BANK0 ] unsigned char 
 17013 ;; Auto vars:     Size  Location     Type
 17014 ;;		None
 17015 ;; Return value:  Size  Location     Type
 17016 ;;                  3    1[BANK0 ] float 
 17017 ;; Registers used:
 17018 ;;		wreg, status,2, status,0
 17019 ;; Tracked objects:
 17020 ;;		On entry : 0/0
 17021 ;;		On exit  : 0/0
 17022 ;;		Unchanged: 0/0
 17023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17024 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17026 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17027 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17028 ;;Total ram usage:        8 bytes
 17029 ;; Hardware stack levels used:    1
 17030 ;; Hardware stack levels required when called:    5
 17031 ;; This function calls:
 17032 ;;		Nothing
 17033 ;; This function is called by:
 17034 ;;		___awtoft
 17035 ;;		___ftadd
 17036 ;;		___ftdiv
 17037 ;;		___ftmul
 17038 ;; This function uses a non-reentrant model
 17039 ;;
 17040                           
 17041                           
 17042                           ;psect for function ___ftpack
 17043  1670                     ___ftpack:	
 17044                           
 17045                           ;incstack = 0
 17046                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17047  1670  0020               	movlb	0	; select bank0
 17048  1671  0824               	movf	___ftpack@exp,w
 17049  1672  1903               	btfsc	3,2
 17050  1673  2E79               	goto	l5603
 17051  1674  0823               	movf	___ftpack@arg+2,w
 17052  1675  0422               	iorwf	___ftpack@arg+1,w
 17053  1676  0421               	iorwf	___ftpack@arg,w
 17054  1677  1D03               	skipz
 17055  1678  2E8A               	goto	l5609
 17056  1679                     l5603:	
 17057  1679  3000               	movlw	0
 17058  167A  00A1               	movwf	?___ftpack
 17059  167B  3000               	movlw	0
 17060  167C  00A2               	movwf	?___ftpack+1
 17061  167D  3000               	movlw	0
 17062  167E  00A3               	movwf	?___ftpack+2
 17063  167F  0008               	return
 17064  1680                     l5607:	
 17065  1680  3001               	movlw	1
 17066  1681  00A6               	movwf	??___ftpack
 17067  1682  0826               	movf	??___ftpack,w
 17068  1683  07A4               	addwf	___ftpack@exp,f
 17069  1684  3001               	movlw	1
 17070  1685                     u4185:	
 17071  1685  36A3               	lsrf	___ftpack@arg+2,f
 17072  1686  0CA2               	rrf	___ftpack@arg+1,f
 17073  1687  0CA1               	rrf	___ftpack@arg,f
 17074  1688  0B89               	decfsz	9,f
 17075  1689  2E85               	goto	u4185
 17076  168A                     l5609:	
 17077  168A  30FE               	movlw	254
 17078  168B  0523               	andwf	___ftpack@arg+2,w
 17079  168C  1903               	btfsc	3,2
 17080  168D  2EA3               	goto	l2817
 17081  168E  2E80               	goto	l5607
 17082  168F                     l5611:	
 17083  168F  3001               	movlw	1
 17084  1690  00A6               	movwf	??___ftpack
 17085  1691  0826               	movf	??___ftpack,w
 17086  1692  07A4               	addwf	___ftpack@exp,f
 17087  1693  3001               	movlw	1
 17088  1694  07A1               	addwf	___ftpack@arg,f
 17089  1695  3000               	movlw	0
 17090  1696  1803               	skipnc
 17091  1697  3001               	movlw	1
 17092  1698  07A2               	addwf	___ftpack@arg+1,f
 17093  1699  3000               	movlw	0
 17094  169A  1803               	skipnc
 17095  169B  3001               	movlw	1
 17096  169C  07A3               	addwf	___ftpack@arg+2,f
 17097  169D  3001               	movlw	1
 17098  169E                     u4205:	
 17099  169E  36A3               	lsrf	___ftpack@arg+2,f
 17100  169F  0CA2               	rrf	___ftpack@arg+1,f
 17101  16A0  0CA1               	rrf	___ftpack@arg,f
 17102  16A1  0B89               	decfsz	9,f
 17103  16A2  2E9E               	goto	u4205
 17104  16A3                     l2817:	
 17105  16A3  30FF               	movlw	255
 17106  16A4  0523               	andwf	___ftpack@arg+2,w
 17107  16A5  1903               	btfsc	3,2
 17108  16A6  2EB0               	goto	l5619
 17109  16A7  2E8F               	goto	l5611
 17110  16A8                     l5617:	
 17111  16A8  3001               	movlw	1
 17112  16A9  02A4               	subwf	___ftpack@exp,f
 17113  16AA  3001               	movlw	1
 17114  16AB                     u4225:	
 17115  16AB  35A1               	lslf	___ftpack@arg,f
 17116  16AC  0DA2               	rlf	___ftpack@arg+1,f
 17117  16AD  0DA3               	rlf	___ftpack@arg+2,f
 17118  16AE  0B89               	decfsz	9,f
 17119  16AF  2EAB               	goto	u4225
 17120  16B0                     l5619:	
 17121  16B0  1FA2               	btfss	___ftpack@arg+1,7
 17122  16B1  2EA8               	goto	l5617
 17123  16B2  1824               	btfsc	___ftpack@exp,0
 17124  16B3  2EBA               	goto	l2823
 17125  16B4  30FF               	movlw	255
 17126  16B5  05A1               	andwf	___ftpack@arg,f
 17127  16B6  307F               	movlw	127
 17128  16B7  05A2               	andwf	___ftpack@arg+1,f
 17129  16B8  30FF               	movlw	255
 17130  16B9  05A3               	andwf	___ftpack@arg+2,f
 17131  16BA                     l2823:	
 17132  16BA  1003               	clrc
 17133  16BB  0CA4               	rrf	___ftpack@exp,f
 17134  16BC  0824               	movf	___ftpack@exp,w
 17135  16BD  00A6               	movwf	??___ftpack
 17136  16BE  01A7               	clrf	??___ftpack+1
 17137  16BF  01A8               	clrf	??___ftpack+2
 17138  16C0  3010               	movlw	16
 17139  16C1                     u4255:	
 17140  16C1  35A6               	lslf	??___ftpack,f
 17141  16C2  0DA7               	rlf	??___ftpack+1,f
 17142  16C3  0DA8               	rlf	??___ftpack+2,f
 17143  16C4  0B89               	decfsz	9,f
 17144  16C5  2EC1               	goto	u4255
 17145  16C6  0826               	movf	??___ftpack,w
 17146  16C7  04A1               	iorwf	___ftpack@arg,f
 17147  16C8  0827               	movf	??___ftpack+1,w
 17148  16C9  04A2               	iorwf	___ftpack@arg+1,f
 17149  16CA  0828               	movf	??___ftpack+2,w
 17150  16CB  04A3               	iorwf	___ftpack@arg+2,f
 17151  16CC  0825               	movf	___ftpack@sign,w
 17152  16CD  1903               	btfsc	3,2
 17153  16CE  0008               	return
 17154  16CF  17A3               	bsf	___ftpack@arg+2,7
 17155  16D0  0008               	return
 17156  16D1                     __end_of___ftpack:	
 17157                           
 17158                           	psect	text116
 17159  1CA3                     __ptext116:	
 17160 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17161 ;; Defined at:
 17162 ;;		line 67 in file "../src/Dimmer_B1.c"
 17163 ;; Parameters:    Size  Location     Type
 17164 ;;  lights          1    wreg     unsigned char 
 17165 ;; Auto vars:     Size  Location     Type
 17166 ;;  lights          1    2[BANK0 ] unsigned char 
 17167 ;;  value           1    3[BANK0 ] unsigned char 
 17168 ;; Return value:  Size  Location     Type
 17169 ;;                  1    wreg      unsigned char 
 17170 ;; Registers used:
 17171 ;;		wreg, status,2
 17172 ;; Tracked objects:
 17173 ;;		On entry : 0/0
 17174 ;;		On exit  : 0/0
 17175 ;;		Unchanged: 0/0
 17176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;Total ram usage:        3 bytes
 17182 ;; Hardware stack levels used:    1
 17183 ;; Hardware stack levels required when called:    5
 17184 ;; This function calls:
 17185 ;;		Nothing
 17186 ;; This function is called by:
 17187 ;;		_setDimmerLights_Dimming
 17188 ;; This function uses a non-reentrant model
 17189 ;;
 17190                           
 17191                           
 17192                           ;psect for function _getDimmerIntr_DimmingValue
 17193  1CA3                     _getDimmerIntr_DimmingValue:	
 17194                           
 17195                           ;incstack = 0
 17196                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17197                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17198  1CA3  0020               	movlb	0	; select bank0
 17199  1CA4  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 17200                           
 17201                           ;Dimmer_B1.c: 68: char value = 0;
 17202  1CA5  01A3               	clrf	getDimmerIntr_DimmingValue@value
 17203                           
 17204                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17205  1CA6  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 17206  1CA7  3A01               	xorlw	1
 17207  1CA8  1D03               	skipz
 17208  1CA9  2CB0               	goto	l681
 17209                           
 17210                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17211  1CAA  0021               	movlb	1	; select bank1
 17212  1CAB  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 17213  1CAC  0020               	movlb	0	; select bank0
 17214  1CAD  00A1               	movwf	??_getDimmerIntr_DimmingValue
 17215  1CAE  0821               	movf	??_getDimmerIntr_DimmingValue,w
 17216  1CAF  00A3               	movwf	getDimmerIntr_DimmingValue@value
 17217  1CB0                     l681:	
 17218                           
 17219                           ;Dimmer_B1.c: 72: }
 17220                           ;Dimmer_B1.c: 84: return value;
 17221  1CB0  0823               	movf	getDimmerIntr_DimmingValue@value,w
 17222  1CB1  0008               	return
 17223  1CB2                     __end_of_getDimmerIntr_DimmingValue:	
 17224                           
 17225                           	psect	text117
 17226  1E43                     __ptext117:	
 17227 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17228 ;; Defined at:
 17229 ;;		line 916 in file "../src/Dimmer_B1.c"
 17230 ;; Parameters:    Size  Location     Type
 17231 ;;  lights          1    wreg     unsigned char 
 17232 ;; Auto vars:     Size  Location     Type
 17233 ;;  lights          1    0[COMMON] unsigned char 
 17234 ;;  allow           1    3[BANK0 ] unsigned char 
 17235 ;; Return value:  Size  Location     Type
 17236 ;;                  1    wreg      unsigned char 
 17237 ;; Registers used:
 17238 ;;		wreg, status,2, pclath, cstack
 17239 ;; Tracked objects:
 17240 ;;		On entry : 0/0
 17241 ;;		On exit  : 0/0
 17242 ;;		Unchanged: 0/0
 17243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17245 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17247 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;Total ram usage:        3 bytes
 17249 ;; Hardware stack levels used:    1
 17250 ;; Hardware stack levels required when called:    6
 17251 ;; This function calls:
 17252 ;;		_getLoad_OK
 17253 ;; This function is called by:
 17254 ;;		_setDimmerLights_Main
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           
 17259                           ;psect for function _getDimmerLights_Allow_Condition
 17260  1E43                     _getDimmerLights_Allow_Condition:	
 17261                           
 17262                           ;Dimmer_B1.c: 917: char allow = 0;
 17263                           
 17264                           ;incstack = 0
 17265                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 17266  1E43  0020               	movlb	0	; select bank0
 17267  1E44  01A3               	clrf	getDimmerLights_Allow_Condition@allow
 17268                           
 17269                           ;Dimmer_B1.c: 923: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17270  1E45  01A4               	clrf	_getDimmerLights_Allow_Condition$2216
 17271  1E46  0AA4               	incf	_getDimmerLights_Allow_Condition$2216,f
 17272  1E47  319B  239E  319E   	fcall	_getLoad_OK
 17273  1E4A  3800               	iorlw	0
 17274  1E4B  1D03               	skipz
 17275  1E4C  2E52               	goto	l6667
 17276  1E4D  0022               	movlb	2	; select bank2
 17277  1E4E  18AD               	btfsc	_Dimmer^(0+256),1
 17278  1E4F  2E52               	goto	l6667
 17279  1E50  0020               	movlb	0	; select bank0
 17280  1E51  01A4               	clrf	_getDimmerLights_Allow_Condition$2216
 17281  1E52                     l6667:	
 17282  1E52  0020               	movlb	0	; select bank0
 17283  1E53  0824               	movf	_getDimmerLights_Allow_Condition$2216,w
 17284  1E54  00A2               	movwf	??_getDimmerLights_Allow_Condition
 17285  1E55  0822               	movf	??_getDimmerLights_Allow_Condition,w
 17286  1E56  00A3               	movwf	getDimmerLights_Allow_Condition@allow
 17287                           
 17288                           ;Dimmer_B1.c: 950: return allow;
 17289  1E57  0823               	movf	getDimmerLights_Allow_Condition@allow,w
 17290  1E58  0008               	return
 17291  1E59                     __end_of_getDimmerLights_Allow_Condition:	
 17292                           
 17293                           	psect	text118
 17294  1B9E                     __ptext118:	
 17295 ;; *************** function _getLoad_OK *****************
 17296 ;; Defined at:
 17297 ;;		line 272 in file "../src/OverLoad_B1.c"
 17298 ;; Parameters:    Size  Location     Type
 17299 ;;		None
 17300 ;; Auto vars:     Size  Location     Type
 17301 ;;  ok              1    1[BANK0 ] unsigned char 
 17302 ;; Return value:  Size  Location     Type
 17303 ;;                  1    wreg      unsigned char 
 17304 ;; Registers used:
 17305 ;;		wreg, status,2
 17306 ;; Tracked objects:
 17307 ;;		On entry : 0/0
 17308 ;;		On exit  : 0/0
 17309 ;;		Unchanged: 0/0
 17310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;Total ram usage:        1 bytes
 17316 ;; Hardware stack levels used:    1
 17317 ;; Hardware stack levels required when called:    5
 17318 ;; This function calls:
 17319 ;;		Nothing
 17320 ;; This function is called by:
 17321 ;;		_DimmerLights_Main
 17322 ;;		_getDimmerLights_Allow_Condition
 17323 ;; This function uses a non-reentrant model
 17324 ;;
 17325                           
 17326                           
 17327                           ;psect for function _getLoad_OK
 17328  1B9E                     _getLoad_OK:	
 17329                           
 17330                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17331                           
 17332                           ;incstack = 0
 17333                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17334  1B9E  3000               	movlw	0
 17335  1B9F  0022               	movlb	2	; select bank2
 17336  1BA0  1BB4               	btfsc	_Load^(0+256),7
 17337  1BA1  3001               	movlw	1
 17338  1BA2  0020               	movlb	0	; select bank0
 17339  1BA3  00A1               	movwf	getLoad_OK@ok
 17340                           
 17341                           ;OverLoad_B1.c: 274: return ok;
 17342  1BA4  0821               	movf	getLoad_OK@ok,w
 17343  1BA5  0008               	return
 17344  1BA6                     __end_of_getLoad_OK:	
 17345                           
 17346                           	psect	text119
 17347  11FA                     __ptext119:	
 17348 ;; *************** function _getMain_All_Error_Status *****************
 17349 ;; Defined at:
 17350 ;;		line 424 in file "../src/Main_B1.c"
 17351 ;; Parameters:    Size  Location     Type
 17352 ;;  command         1    wreg     unsigned char 
 17353 ;; Auto vars:     Size  Location     Type
 17354 ;;  command         1    6[BANK0 ] unsigned char 
 17355 ;;  status          1    7[BANK0 ] unsigned char 
 17356 ;; Return value:  Size  Location     Type
 17357 ;;                  1    wreg      unsigned char 
 17358 ;; Registers used:
 17359 ;;		wreg, status,2, status,0
 17360 ;; Tracked objects:
 17361 ;;		On entry : 0/0
 17362 ;;		On exit  : 0/0
 17363 ;;		Unchanged: 0/0
 17364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17366 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17368 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17369 ;;Total ram usage:        7 bytes
 17370 ;; Hardware stack levels used:    1
 17371 ;; Hardware stack levels required when called:    5
 17372 ;; This function calls:
 17373 ;;		Nothing
 17374 ;; This function is called by:
 17375 ;;		_DimmerLights_Main
 17376 ;;		_Exception_Main
 17377 ;;		_Load_Main
 17378 ;;		_setTemp_Main
 17379 ;;		_getRxData
 17380 ;;		_setSw_Main
 17381 ;; This function uses a non-reentrant model
 17382 ;;
 17383                           
 17384                           
 17385                           ;psect for function _getMain_All_Error_Status
 17386  11FA                     _getMain_All_Error_Status:	
 17387                           
 17388                           ;incstack = 0
 17389                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17390                           ;getMain_All_Error_Status@command stored from wreg
 17391  11FA  0020               	movlb	0	; select bank0
 17392  11FB  00A6               	movwf	getMain_All_Error_Status@command
 17393                           
 17394                           ;Main_B1.c: 425: char status = 0;
 17395  11FC  01A7               	clrf	getMain_All_Error_Status@status
 17396                           
 17397                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 17398  11FD  08A7               	movf	getMain_All_Error_Status@status,f
 17399  11FE  1D03               	skipz
 17400  11FF  2A14               	goto	l8355
 17401  1200  0826               	movf	getMain_All_Error_Status@command,w
 17402  1201  3A02               	xorlw	2
 17403  1202  1903               	skipnz
 17404  1203  2A14               	goto	l8355
 17405                           
 17406                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17407  1204  0021               	movlb	1	; select bank1
 17408  1205  18DB               	btfsc	_Temp^(0+128),1
 17409  1206  2A0B               	goto	l8353
 17410  1207  0020               	movlb	0	; select bank0
 17411  1208  01A2               	clrf	_getMain_All_Error_Status$3523
 17412  1209  01A3               	clrf	_getMain_All_Error_Status$3523+1
 17413  120A  2A10               	goto	l1451
 17414  120B                     l8353:	
 17415  120B  3002               	movlw	2
 17416  120C  0020               	movlb	0	; select bank0
 17417  120D  00A2               	movwf	_getMain_All_Error_Status$3523
 17418  120E  3000               	movlw	0
 17419  120F  00A3               	movwf	_getMain_All_Error_Status$3523+1
 17420  1210                     l1451:	
 17421  1210  0822               	movf	_getMain_All_Error_Status$3523,w
 17422  1211  00A1               	movwf	??_getMain_All_Error_Status
 17423  1212  0821               	movf	??_getMain_All_Error_Status,w
 17424  1213  00A7               	movwf	getMain_All_Error_Status@status
 17425  1214                     l8355:	
 17426                           
 17427                           ;Main_B1.c: 438: }
 17428                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 17429  1214  08A7               	movf	getMain_All_Error_Status@status,f
 17430  1215  1D03               	skipz
 17431  1216  2A2B               	goto	l1452
 17432  1217  0826               	movf	getMain_All_Error_Status@command,w
 17433  1218  3A03               	xorlw	3
 17434  1219  1903               	skipnz
 17435  121A  2A2B               	goto	l1452
 17436                           
 17437                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 17438  121B  0022               	movlb	2	; select bank2
 17439  121C  1AB4               	btfsc	_Load^(0+256),5
 17440  121D  2A22               	goto	l8363
 17441  121E  0020               	movlb	0	; select bank0
 17442  121F  01A4               	clrf	_getMain_All_Error_Status$3524
 17443  1220  01A5               	clrf	_getMain_All_Error_Status$3524+1
 17444  1221  2A27               	goto	l1456
 17445  1222                     l8363:	
 17446  1222  3003               	movlw	3
 17447  1223  0020               	movlb	0	; select bank0
 17448  1224  00A4               	movwf	_getMain_All_Error_Status$3524
 17449  1225  3000               	movlw	0
 17450  1226  00A5               	movwf	_getMain_All_Error_Status$3524+1
 17451  1227                     l1456:	
 17452  1227  0824               	movf	_getMain_All_Error_Status$3524,w
 17453  1228  00A1               	movwf	??_getMain_All_Error_Status
 17454  1229  0821               	movf	??_getMain_All_Error_Status,w
 17455  122A  00A7               	movwf	getMain_All_Error_Status@status
 17456  122B                     l1452:	
 17457                           
 17458                           ;Main_B1.c: 445: }
 17459                           ;Main_B1.c: 455: return status;
 17460  122B  0827               	movf	getMain_All_Error_Status@status,w
 17461  122C  0008               	return
 17462  122D                     __end_of_getMain_All_Error_Status:	
 17463                           
 17464                           	psect	text120
 17465  1B89                     __ptext120:	
 17466 ;; *************** function _DimmerLights_Initialization *****************
 17467 ;; Defined at:
 17468 ;;		line 597 in file "../src/Dimmer_B1.c"
 17469 ;; Parameters:    Size  Location     Type
 17470 ;;		None
 17471 ;; Auto vars:     Size  Location     Type
 17472 ;;		None
 17473 ;; Return value:  Size  Location     Type
 17474 ;;		None               void
 17475 ;; Registers used:
 17476 ;;		wreg, status,2, status,0, pclath, cstack
 17477 ;; Tracked objects:
 17478 ;;		On entry : 0/0
 17479 ;;		On exit  : 0/0
 17480 ;;		Unchanged: 0/0
 17481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;Total ram usage:        0 bytes
 17487 ;; Hardware stack levels used:    1
 17488 ;; Hardware stack levels required when called:    6
 17489 ;; This function calls:
 17490 ;;		_DimmerIntr_Initialization
 17491 ;;		_setDimmerLights_Initialization
 17492 ;; This function is called by:
 17493 ;;		_main
 17494 ;; This function uses a non-reentrant model
 17495 ;;
 17496                           
 17497                           
 17498                           ;psect for function _DimmerLights_Initialization
 17499  1B89                     _DimmerLights_Initialization:	
 17500                           
 17501                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 17502                           
 17503                           ;incstack = 0
 17504                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17505  1B89  3001               	movlw	1
 17506  1B8A  319B  2336  319B   	fcall	_setDimmerLights_Initialization
 17507                           
 17508                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 17509  1B8D  319E  26B5         	fcall	_DimmerIntr_Initialization
 17510  1B8F  0008               	return
 17511  1B90                     __end_of_DimmerLights_Initialization:	
 17512                           
 17513                           	psect	text121
 17514  1B36                     __ptext121:	
 17515 ;; *************** function _setDimmerLights_Initialization *****************
 17516 ;; Defined at:
 17517 ;;		line 613 in file "../src/Dimmer_B1.c"
 17518 ;; Parameters:    Size  Location     Type
 17519 ;;  lights          1    wreg     unsigned char 
 17520 ;; Auto vars:     Size  Location     Type
 17521 ;;  lights          1    0[COMMON] unsigned char 
 17522 ;; Return value:  Size  Location     Type
 17523 ;;		None               void
 17524 ;; Registers used:
 17525 ;;		wreg
 17526 ;; Tracked objects:
 17527 ;;		On entry : 0/0
 17528 ;;		On exit  : 0/0
 17529 ;;		Unchanged: 0/0
 17530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17535 ;;Total ram usage:        0 bytes
 17536 ;; Hardware stack levels used:    1
 17537 ;; Hardware stack levels required when called:    5
 17538 ;; This function calls:
 17539 ;;		Nothing
 17540 ;; This function is called by:
 17541 ;;		_DimmerLights_Initialization
 17542 ;; This function uses a non-reentrant model
 17543 ;;
 17544                           
 17545                           
 17546                           ;psect for function _setDimmerLights_Initialization
 17547  1B36                     _setDimmerLights_Initialization:	
 17548                           
 17549                           ;incstack = 0
 17550                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17551  1B36  0008               	return
 17552  1B37                     __end_of_setDimmerLights_Initialization:	
 17553                           
 17554                           	psect	text122
 17555  1EB5                     __ptext122:	
 17556 ;; *************** function _DimmerIntr_Initialization *****************
 17557 ;; Defined at:
 17558 ;;		line 7 in file "../src/Dimmer_B1.c"
 17559 ;; Parameters:    Size  Location     Type
 17560 ;;		None
 17561 ;; Auto vars:     Size  Location     Type
 17562 ;;		None
 17563 ;; Return value:  Size  Location     Type
 17564 ;;		None               void
 17565 ;; Registers used:
 17566 ;;		wreg
 17567 ;; Tracked objects:
 17568 ;;		On entry : 0/0
 17569 ;;		On exit  : 0/0
 17570 ;;		Unchanged: 0/0
 17571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17575 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17576 ;;Total ram usage:        1 bytes
 17577 ;; Hardware stack levels used:    1
 17578 ;; Hardware stack levels required when called:    5
 17579 ;; This function calls:
 17580 ;;		Nothing
 17581 ;; This function is called by:
 17582 ;;		_DimmerLights_Initialization
 17583 ;; This function uses a non-reentrant model
 17584 ;;
 17585                           
 17586                           
 17587                           ;psect for function _DimmerIntr_Initialization
 17588  1EB5                     _DimmerIntr_Initialization:	
 17589                           
 17590                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 17591                           
 17592                           ;incstack = 0
 17593                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17594  1EB5  3007               	movlw	7
 17595  1EB6  0020               	movlb	0	; select bank0
 17596  1EB7  00A1               	movwf	??_DimmerIntr_Initialization
 17597  1EB8  0821               	movf	??_DimmerIntr_Initialization,w
 17598  1EB9  0021               	movlb	1	; select bank1
 17599  1EBA  00BE               	movwf	(_DimmerIntr1^(0+128)+4)
 17600                           
 17601                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(60*0.79));
 17602  1EBB  302F               	movlw	47
 17603  1EBC  0020               	movlb	0	; select bank0
 17604  1EBD  00A1               	movwf	??_DimmerIntr_Initialization
 17605  1EBE  0821               	movf	??_DimmerIntr_Initialization,w
 17606  1EBF  0021               	movlb	1	; select bank1
 17607  1EC0  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 17608                           
 17609                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(25*0.79));
 17610  1EC1  3013               	movlw	19
 17611  1EC2  0020               	movlb	0	; select bank0
 17612  1EC3  00A1               	movwf	??_DimmerIntr_Initialization
 17613  1EC4  0821               	movf	??_DimmerIntr_Initialization,w
 17614  1EC5  0021               	movlb	1	; select bank1
 17615  1EC6  00C1               	movwf	(_DimmerIntr1^(0+128)+7)
 17616                           
 17617                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(60*0.79));
 17618  1EC7  302F               	movlw	47
 17619  1EC8  0020               	movlb	0	; select bank0
 17620  1EC9  00A1               	movwf	??_DimmerIntr_Initialization
 17621  1ECA  0821               	movf	??_DimmerIntr_Initialization,w
 17622  1ECB  0021               	movlb	1	; select bank1
 17623  1ECC  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 17624  1ECD  0008               	return
 17625  1ECE                     __end_of_DimmerIntr_Initialization:	
 17626                           
 17627                           	psect	text123
 17628  1B4E                     __ptext123:	
 17629 ;; *************** function _DelayOff_Main *****************
 17630 ;; Defined at:
 17631 ;;		line 41 in file "../src/DelayOff_B1.c"
 17632 ;; Parameters:    Size  Location     Type
 17633 ;;		None
 17634 ;; Auto vars:     Size  Location     Type
 17635 ;;		None
 17636 ;; Return value:  Size  Location     Type
 17637 ;;		None               void
 17638 ;; Registers used:
 17639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17640 ;; Tracked objects:
 17641 ;;		On entry : 0/0
 17642 ;;		On exit  : 0/0
 17643 ;;		Unchanged: 0/0
 17644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17649 ;;Total ram usage:        0 bytes
 17650 ;; Hardware stack levels used:    1
 17651 ;; Hardware stack levels required when called:    9
 17652 ;; This function calls:
 17653 ;;		_DlyOff_Main
 17654 ;; This function is called by:
 17655 ;;		_main
 17656 ;; This function uses a non-reentrant model
 17657 ;;
 17658                           
 17659                           
 17660                           ;psect for function _DelayOff_Main
 17661  1B4E                     _DelayOff_Main:	
 17662                           
 17663                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17664                           
 17665                           ;incstack = 0
 17666                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17667  1B4E  3001               	movlw	1
 17668  1B4F  3189  21E0         	fcall	_DlyOff_Main
 17669  1B51  0008               	return
 17670  1B52                     __end_of_DelayOff_Main:	
 17671                           
 17672                           	psect	text124
 17673  09E0                     __ptext124:	
 17674 ;; *************** function _DlyOff_Main *****************
 17675 ;; Defined at:
 17676 ;;		line 61 in file "../src/DelayOff_B1.c"
 17677 ;; Parameters:    Size  Location     Type
 17678 ;;  sw              1    wreg     unsigned char 
 17679 ;; Auto vars:     Size  Location     Type
 17680 ;;  sw              1   72[BANK0 ] unsigned char 
 17681 ;; Return value:  Size  Location     Type
 17682 ;;		None               void
 17683 ;; Registers used:
 17684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17685 ;; Tracked objects:
 17686 ;;		On entry : 0/0
 17687 ;;		On exit  : 0/0
 17688 ;;		Unchanged: 0/0
 17689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17694 ;;Total ram usage:        3 bytes
 17695 ;; Hardware stack levels used:    1
 17696 ;; Hardware stack levels required when called:    8
 17697 ;; This function calls:
 17698 ;;		_DelayOffPointSelect
 17699 ;;		_getDimmerLights_Status
 17700 ;;		_setDimmerLights_SwOff
 17701 ;;		_setDimmerLights_SwOn
 17702 ;;		_setProductData
 17703 ;; This function is called by:
 17704 ;;		_DelayOff_Main
 17705 ;; This function uses a non-reentrant model
 17706 ;;
 17707                           
 17708                           
 17709                           ;psect for function _DlyOff_Main
 17710  09E0                     _DlyOff_Main:	
 17711                           
 17712                           ;incstack = 0
 17713                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17714                           ;DlyOff_Main@sw stored from wreg
 17715  09E0  0020               	movlb	0	; select bank0
 17716  09E1  00E8               	movwf	DlyOff_Main@sw
 17717                           
 17718                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17719  09E2  0868               	movf	DlyOff_Main@sw,w
 17720  09E3  319C  2412  3189   	fcall	_DelayOffPointSelect
 17721                           
 17722                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17723  09E6  0021               	movlb	1	; select bank1
 17724  09E7  084D               	movf	_DelayOff^(0+128),w
 17725  09E8  0086               	movwf	6
 17726  09E9  3001               	movlw	1	; select bank2/3
 17727  09EA  0087               	movwf	7
 17728  09EB  1C81               	btfss	1,1
 17729  09EC  0008               	return
 17730                           
 17731                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17732  09ED  084D               	movf	_DelayOff^(0+128),w
 17733  09EE  3E02               	addlw	2
 17734  09EF  0086               	movwf	6
 17735  09F0  3001               	movlw	1	; select bank2/3
 17736  09F1  0087               	movwf	7
 17737  09F2  3001               	movlw	1
 17738  09F3  0781               	addwf	1,f
 17739  09F4  3141               	addfsr 1,1
 17740  09F5  1803               	skipnc
 17741  09F6  0A81               	incf	1,f
 17742                           
 17743                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17744  09F7  084D               	movf	_DelayOff^(0+128),w
 17745  09F8  3E02               	addlw	2
 17746  09F9  0086               	movwf	6
 17747  09FA  3001               	movlw	1	; select bank2/3
 17748  09FB  0087               	movwf	7
 17749  09FC  3F40               	moviw [0]fsr1
 17750  09FD  0020               	movlb	0	; select bank0
 17751  09FE  00E6               	movwf	??_DlyOff_Main
 17752  09FF  3F41               	moviw [1]fsr1
 17753  0A00  00E7               	movwf	??_DlyOff_Main+1
 17754  0A01  300B               	movlw	11
 17755  0A02  0267               	subwf	??_DlyOff_Main+1,w
 17756  0A03  30B8               	movlw	184
 17757  0A04  1903               	skipnz
 17758  0A05  0266               	subwf	??_DlyOff_Main,w
 17759  0A06  1C03               	skipc
 17760  0A07  0008               	return
 17761                           
 17762                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17763  0A08  0021               	movlb	1	; select bank1
 17764  0A09  084D               	movf	_DelayOff^(0+128),w
 17765  0A0A  3E02               	addlw	2
 17766  0A0B  0086               	movwf	6
 17767  0A0C  3001               	movlw	1	; select bank2/3
 17768  0A0D  0087               	movwf	7
 17769  0A0E  3000               	movlw	0
 17770  0A0F  3FC0               	movwi [0]fsr1
 17771  0A10  3FC1               	movwi [1]fsr1
 17772                           
 17773                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17774  0A11  3001               	movlw	1
 17775  0A12  0020               	movlb	0	; select bank0
 17776  0A13  00E6               	movwf	??_DlyOff_Main
 17777  0A14  0021               	movlb	1	; select bank1
 17778  0A15  084D               	movf	_DelayOff^(0+128),w
 17779  0A16  3E04               	addlw	4
 17780  0A17  0086               	movwf	6
 17781  0A18  3001               	movlw	1	; select bank2/3
 17782  0A19  0087               	movwf	7
 17783  0A1A  0020               	movlb	0	; select bank0
 17784  0A1B  0866               	movf	??_DlyOff_Main,w
 17785  0A1C  0781               	addwf	1,f
 17786                           
 17787                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17788  0A1D  0021               	movlb	1	; select bank1
 17789  0A1E  084D               	movf	_DelayOff^(0+128),w
 17790  0A1F  3E04               	addlw	4
 17791  0A20  0086               	movwf	6
 17792  0A21  3001               	movlw	1	; select bank2/3
 17793  0A22  0087               	movwf	7
 17794  0A23  0A4D               	incf	_DelayOff^(0+128),w
 17795  0A24  0084               	movwf	4
 17796  0A25  3001               	movlw	1	; select bank2/3
 17797  0A26  0085               	movwf	5
 17798  0A27  0800               	movf	0,w
 17799  0A28  0201               	subwf	1,w
 17800  0A29  1C03               	skipc
 17801  0A2A  0008               	return
 17802                           
 17803                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17804  0A2B  084D               	movf	_DelayOff^(0+128),w
 17805  0A2C  3E04               	addlw	4
 17806  0A2D  0086               	movwf	6
 17807  0A2E  3001               	movlw	1	; select bank2/3
 17808  0A2F  0087               	movwf	7
 17809  0A30  0181               	clrf	1
 17810                           
 17811                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17812  0A31  084D               	movf	_DelayOff^(0+128),w
 17813  0A32  0086               	movwf	6
 17814  0A33  3001               	movlw	1	; select bank2/3
 17815  0A34  0087               	movwf	7
 17816  0A35  1081               	bcf	1,1
 17817                           
 17818                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17819  0A36  0020               	movlb	0	; select bank0
 17820  0A37  0868               	movf	DlyOff_Main@sw,w
 17821  0A38  319C  24D1  3189   	fcall	_getDimmerLights_Status
 17822  0A3B  3A01               	xorlw	1
 17823  0A3C  1D03               	skipz
 17824  0A3D  2A48               	goto	l531
 17825                           
 17826                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17827  0A3E  0020               	movlb	0	; select bank0
 17828  0A3F  0868               	movf	DlyOff_Main@sw,w
 17829  0A40  3192  222D  3189   	fcall	_setDimmerLights_SwOn
 17830                           
 17831                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17832  0A43  0020               	movlb	0	; select bank0
 17833  0A44  0868               	movf	DlyOff_Main@sw,w
 17834  0A45  3193  2305  3189   	fcall	_setDimmerLights_SwOff
 17835  0A48                     l531:	
 17836                           
 17837                           ;DelayOff_B1.c: 78: }
 17838                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17839  0A48  0020               	movlb	0	; select bank0
 17840  0A49  01E3               	clrf	setProductData@value
 17841  0A4A  0868               	movf	DlyOff_Main@sw,w
 17842  0A4B  3E1A               	addlw	26
 17843  0A4C  319C  242A         	fcall	_setProductData
 17844  0A4E  0008               	return
 17845  0A4F                     __end_of_DlyOff_Main:	
 17846                           
 17847                           	psect	text125
 17848  1C2A                     __ptext125:	
 17849 ;; *************** function _setProductData *****************
 17850 ;; Defined at:
 17851 ;;		line 645 in file "../src/Main_B1.c"
 17852 ;; Parameters:    Size  Location     Type
 17853 ;;  address         1    wreg     unsigned char 
 17854 ;;  value           1   67[BANK0 ] unsigned char 
 17855 ;; Auto vars:     Size  Location     Type
 17856 ;;  address         1   69[BANK0 ] unsigned char 
 17857 ;; Return value:  Size  Location     Type
 17858 ;;		None               void
 17859 ;; Registers used:
 17860 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17861 ;; Tracked objects:
 17862 ;;		On entry : 0/0
 17863 ;;		On exit  : 0/0
 17864 ;;		Unchanged: 0/0
 17865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17866 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;Total ram usage:        3 bytes
 17871 ;; Hardware stack levels used:    1
 17872 ;; Hardware stack levels required when called:    5
 17873 ;; This function calls:
 17874 ;;		Nothing
 17875 ;; This function is called by:
 17876 ;;		_DlyOff_Main
 17877 ;;		_setDelayOff_GO
 17878 ;;		_setDimmerLights_OnOff
 17879 ;;		_setDimmerLights_Dimming
 17880 ;;		_setTemp_Main
 17881 ;;		_setLog_Code
 17882 ;;		_setControl_Lights_Table
 17883 ;;		_setRFSW_AdjControl
 17884 ;;		_setRF_DimmerLights
 17885 ;; This function uses a non-reentrant model
 17886 ;;
 17887                           
 17888                           
 17889                           ;psect for function _setProductData
 17890  1C2A                     _setProductData:	
 17891                           
 17892                           ;incstack = 0
 17893                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17894                           ;setProductData@address stored from wreg
 17895  1C2A  0020               	movlb	0	; select bank0
 17896  1C2B  00E5               	movwf	setProductData@address
 17897                           
 17898                           ;Main_B1.c: 646: _product.Data[address] = value;
 17899  1C2C  0863               	movf	setProductData@value,w
 17900  1C2D  00E4               	movwf	??_setProductData
 17901  1C2E  0865               	movf	setProductData@address,w
 17902  1C2F  3E20               	addlw	__product& (0+255)
 17903  1C30  0086               	movwf	6
 17904  1C31  3002               	movlw	2	; select bank4/5
 17905  1C32  0087               	movwf	7
 17906  1C33  0864               	movf	??_setProductData,w
 17907  1C34  0081               	movwf	1
 17908  1C35  0008               	return
 17909  1C36                     __end_of_setProductData:	
 17910                           
 17911                           	psect	text126
 17912  122D                     __ptext126:	
 17913 ;; *************** function _setDimmerLights_SwOn *****************
 17914 ;; Defined at:
 17915 ;;		line 653 in file "../src/Dimmer_B1.c"
 17916 ;; Parameters:    Size  Location     Type
 17917 ;;  sw              1    wreg     unsigned char 
 17918 ;; Auto vars:     Size  Location     Type
 17919 ;;  sw              1   14[BANK0 ] unsigned char 
 17920 ;;  idle            1   15[BANK0 ] unsigned char 
 17921 ;; Return value:  Size  Location     Type
 17922 ;;		None               void
 17923 ;; Registers used:
 17924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17925 ;; Tracked objects:
 17926 ;;		On entry : 0/0
 17927 ;;		On exit  : 0/0
 17928 ;;		Unchanged: 0/0
 17929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17934 ;;Total ram usage:        2 bytes
 17935 ;; Hardware stack levels used:    1
 17936 ;; Hardware stack levels required when called:    7
 17937 ;; This function calls:
 17938 ;;		_DimmerLights_SelectPointer
 17939 ;;		_setBuz
 17940 ;; This function is called by:
 17941 ;;		_DlyOff_Main
 17942 ;;		_setControl_Lights_Table
 17943 ;;		_setRFSW_Control
 17944 ;;		_setRFSW_AdjControl
 17945 ;;		_setSw_Main
 17946 ;; This function uses a non-reentrant model
 17947 ;;
 17948                           
 17949                           
 17950                           ;psect for function _setDimmerLights_SwOn
 17951  122D                     _setDimmerLights_SwOn:	
 17952                           
 17953                           ;incstack = 0
 17954                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17955                           ;setDimmerLights_SwOn@sw stored from wreg
 17956  122D  0020               	movlb	0	; select bank0
 17957  122E  00AE               	movwf	setDimmerLights_SwOn@sw
 17958                           
 17959                           ;Dimmer_B1.c: 654: char idle = 0;
 17960  122F  01AF               	clrf	setDimmerLights_SwOn@idle
 17961                           
 17962                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 17963  1230  082E               	movf	setDimmerLights_SwOn@sw,w
 17964  1231  319C  241E  3192   	fcall	_DimmerLights_SelectPointer
 17965                           
 17966                           ;Dimmer_B1.c: 680: if (idle == 0) {
 17967  1234  0020               	movlb	0	; select bank0
 17968  1235  08AF               	movf	setDimmerLights_SwOn@idle,f
 17969  1236  1D03               	skipz
 17970  1237  0008               	return
 17971                           
 17972                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 17973  1238  0021               	movlb	1	; select bank1
 17974  1239  084F               	movf	_DimmerLights^(0+128),w
 17975  123A  0086               	movwf	6
 17976  123B  3001               	movlw	1	; select bank2/3
 17977  123C  0087               	movwf	7
 17978  123D  1401               	bsf	1,0
 17979                           
 17980                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 17981  123E  0A4F               	incf	_DimmerLights^(0+128),w
 17982  123F  0086               	movwf	6
 17983  1240  3001               	movlw	1	; select bank2/3
 17984  1241  0087               	movwf	7
 17985  1242  1801               	btfsc	1,0
 17986  1243  2A54               	goto	l8237
 17987                           
 17988                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 17989  1244  0A4F               	incf	_DimmerLights^(0+128),w
 17990  1245  0086               	movwf	6
 17991  1246  3001               	movlw	1	; select bank2/3
 17992  1247  0087               	movwf	7
 17993  1248  1401               	bsf	1,0
 17994                           
 17995                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 17996  1249  084F               	movf	_DimmerLights^(0+128),w
 17997  124A  0086               	movwf	6
 17998  124B  3001               	movlw	1	; select bank2/3
 17999  124C  0087               	movwf	7
 18000  124D  1481               	bsf	1,1
 18001                           
 18002                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 18003  124E  084F               	movf	_DimmerLights^(0+128),w
 18004  124F  0086               	movwf	6
 18005  1250  3001               	movlw	1	; select bank2/3
 18006  1251  0087               	movwf	7
 18007  1252  1501               	bsf	1,2
 18008                           
 18009                           ;Dimmer_B1.c: 686: } else {
 18010  1253  2A59               	goto	l8239
 18011  1254                     l8237:	
 18012                           
 18013                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 18014  1254  0A4F               	incf	_DimmerLights^(0+128),w
 18015  1255  0086               	movwf	6
 18016  1256  3001               	movlw	1	; select bank2/3
 18017  1257  0087               	movwf	7
 18018  1258  1001               	bcf	1,0
 18019  1259                     l8239:	
 18020                           
 18021                           ;Dimmer_B1.c: 688: }
 18022                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 18023  1259  3064               	movlw	100
 18024  125A  0020               	movlb	0	; select bank0
 18025  125B  00AA               	movwf	setBuz@time
 18026  125C  3000               	movlw	0
 18027  125D  00AB               	movwf	setBuz@time+1
 18028  125E  3001               	movlw	1
 18029  125F  3195  25BC         	fcall	_setBuz
 18030  1261  0008               	return
 18031  1262                     __end_of_setDimmerLights_SwOn:	
 18032                           
 18033                           	psect	text127
 18034  15BC                     __ptext127:	
 18035 ;; *************** function _setBuz *****************
 18036 ;; Defined at:
 18037 ;;		line 22 in file "../src/Buzzer_B1.c"
 18038 ;; Parameters:    Size  Location     Type
 18039 ;;  count           1    wreg     unsigned char 
 18040 ;;  time            2   10[BANK0 ] int 
 18041 ;; Auto vars:     Size  Location     Type
 18042 ;;  count           1   13[BANK0 ] unsigned char 
 18043 ;; Return value:  Size  Location     Type
 18044 ;;		None               void
 18045 ;; Registers used:
 18046 ;;		wreg, status,2, status,0, pclath, cstack
 18047 ;; Tracked objects:
 18048 ;;		On entry : 0/0
 18049 ;;		On exit  : 0/0
 18050 ;;		Unchanged: 0/0
 18051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18052 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18055 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18056 ;;Total ram usage:        4 bytes
 18057 ;; Hardware stack levels used:    1
 18058 ;; Hardware stack levels required when called:    6
 18059 ;; This function calls:
 18060 ;;		___awdiv
 18061 ;; This function is called by:
 18062 ;;		_setDimmerLights_SwOn
 18063 ;;		_setDimmerLights_Dimming
 18064 ;;		_my_MainTimer
 18065 ;;		_Exception_Main
 18066 ;;		_setTemp_Main
 18067 ;;		_setLog_Code
 18068 ;;		_setRFSW_Control
 18069 ;;		_setSw_Main
 18070 ;; This function uses a non-reentrant model
 18071 ;;
 18072                           
 18073                           
 18074                           ;psect for function _setBuz
 18075  15BC                     _setBuz:	
 18076                           
 18077                           ;incstack = 0
 18078                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18079                           ;setBuz@count stored from wreg
 18080  15BC  0020               	movlb	0	; select bank0
 18081  15BD  00AD               	movwf	setBuz@count
 18082                           
 18083                           ;Buzzer_B1.c: 23: time /= 20;
 18084  15BE  3014               	movlw	20
 18085  15BF  00A1               	movwf	___awdiv@divisor
 18086  15C0  3000               	movlw	0
 18087  15C1  00A2               	movwf	___awdiv@divisor+1
 18088  15C2  082B               	movf	setBuz@time+1,w
 18089  15C3  01A4               	clrf	___awdiv@dividend+1
 18090  15C4  07A4               	addwf	___awdiv@dividend+1,f
 18091  15C5  082A               	movf	setBuz@time,w
 18092  15C6  01A3               	clrf	___awdiv@dividend
 18093  15C7  07A3               	addwf	___awdiv@dividend,f
 18094  15C8  3195  2568  3195   	fcall	___awdiv
 18095  15CB  0020               	movlb	0	; select bank0
 18096  15CC  0822               	movf	?___awdiv+1,w
 18097  15CD  01AB               	clrf	setBuz@time+1
 18098  15CE  07AB               	addwf	setBuz@time+1,f
 18099  15CF  0821               	movf	?___awdiv,w
 18100  15D0  01AA               	clrf	setBuz@time
 18101  15D1  07AA               	addwf	setBuz@time,f
 18102                           
 18103                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18104  15D2  0021               	movlb	1	; select bank1
 18105  15D3  1C2E               	btfss	_Buz1^(0+128),0
 18106  15D4  0008               	return
 18107                           
 18108                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18109  15D5  18AE               	btfsc	_Buz1^(0+128),1
 18110  15D6  2DED               	goto	l86
 18111                           
 18112                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18113  15D7  14AE               	bsf	_Buz1^(0+128),1
 18114                           
 18115                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18116  15D8  01AF               	clrf	(_Buz1^(0+128)+1)
 18117  15D9  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18118                           
 18119                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18120  15DA  0020               	movlb	0	; select bank0
 18121  15DB  082D               	movf	setBuz@count,w
 18122  15DC  00AC               	movwf	??_setBuz
 18123  15DD  082C               	movf	??_setBuz,w
 18124  15DE  0021               	movlb	1	; select bank1
 18125  15DF  00B1               	movwf	(_Buz1^(0+128)+3)
 18126                           
 18127                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18128  15E0  0020               	movlb	0	; select bank0
 18129  15E1  082B               	movf	setBuz@time+1,w
 18130  15E2  0021               	movlb	1	; select bank1
 18131  15E3  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18132  15E4  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18133  15E5  0020               	movlb	0	; select bank0
 18134  15E6  082A               	movf	setBuz@time,w
 18135  15E7  0021               	movlb	1	; select bank1
 18136  15E8  01B4               	clrf	(_Buz1^(0+128)+6)
 18137  15E9  07B4               	addwf	(_Buz1^(0+128)+6),f
 18138                           
 18139                           ;Buzzer_B1.c: 30: RB3 = 1;
 18140  15EA  0020               	movlb	0	; select bank0
 18141  15EB  158D               	bsf	13,3	;volatile
 18142                           
 18143                           ;Buzzer_B1.c: 31: } else {
 18144  15EC  0008               	return
 18145  15ED                     l86:	
 18146                           
 18147                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18148  15ED  19AE               	btfsc	_Buz1^(0+128),3
 18149  15EE  2E01               	goto	l88
 18150                           
 18151                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18152  15EF  15AE               	bsf	_Buz1^(0+128),3
 18153                           
 18154                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18155  15F0  0020               	movlb	0	; select bank0
 18156  15F1  082D               	movf	setBuz@count,w
 18157  15F2  00AC               	movwf	??_setBuz
 18158  15F3  082C               	movf	??_setBuz,w
 18159  15F4  0021               	movlb	1	; select bank1
 18160  15F5  00B2               	movwf	(_Buz1^(0+128)+4)
 18161                           
 18162                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18163  15F6  0020               	movlb	0	; select bank0
 18164  15F7  082B               	movf	setBuz@time+1,w
 18165  15F8  0021               	movlb	1	; select bank1
 18166  15F9  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18167  15FA  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18168  15FB  0020               	movlb	0	; select bank0
 18169  15FC  082A               	movf	setBuz@time,w
 18170  15FD  0021               	movlb	1	; select bank1
 18171  15FE  01B6               	clrf	(_Buz1^(0+128)+8)
 18172  15FF  07B6               	addwf	(_Buz1^(0+128)+8),f
 18173                           
 18174                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18175  1600  0008               	return
 18176  1601                     l88:	
 18177  1601  1A2E               	btfsc	_Buz1^(0+128),4
 18178  1602  0008               	return
 18179                           
 18180                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18181  1603  162E               	bsf	_Buz1^(0+128),4
 18182                           
 18183                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18184  1604  0020               	movlb	0	; select bank0
 18185  1605  082D               	movf	setBuz@count,w
 18186  1606  00AC               	movwf	??_setBuz
 18187  1607  082C               	movf	??_setBuz,w
 18188  1608  0021               	movlb	1	; select bank1
 18189  1609  00B3               	movwf	(_Buz1^(0+128)+5)
 18190                           
 18191                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18192  160A  0020               	movlb	0	; select bank0
 18193  160B  082B               	movf	setBuz@time+1,w
 18194  160C  0021               	movlb	1	; select bank1
 18195  160D  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18196  160E  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18197  160F  0020               	movlb	0	; select bank0
 18198  1610  082A               	movf	setBuz@time,w
 18199  1611  0021               	movlb	1	; select bank1
 18200  1612  01B8               	clrf	(_Buz1^(0+128)+10)
 18201  1613  07B8               	addwf	(_Buz1^(0+128)+10),f
 18202  1614  0008               	return
 18203  1615                     __end_of_setBuz:	
 18204                           
 18205                           	psect	text128
 18206  1568                     __ptext128:	
 18207 ;; *************** function ___awdiv *****************
 18208 ;; Defined at:
 18209 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18210 ;; Parameters:    Size  Location     Type
 18211 ;;  divisor         2    1[BANK0 ] int 
 18212 ;;  dividend        2    3[BANK0 ] int 
 18213 ;; Auto vars:     Size  Location     Type
 18214 ;;  quotient        2    8[BANK0 ] int 
 18215 ;;  sign            1    7[BANK0 ] unsigned char 
 18216 ;;  counter         1    6[BANK0 ] unsigned char 
 18217 ;; Return value:  Size  Location     Type
 18218 ;;                  2    1[BANK0 ] int 
 18219 ;; Registers used:
 18220 ;;		wreg, status,2, status,0
 18221 ;; Tracked objects:
 18222 ;;		On entry : 0/0
 18223 ;;		On exit  : 0/0
 18224 ;;		Unchanged: 0/0
 18225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18227 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;Total ram usage:        9 bytes
 18231 ;; Hardware stack levels used:    1
 18232 ;; Hardware stack levels required when called:    5
 18233 ;; This function calls:
 18234 ;;		Nothing
 18235 ;; This function is called by:
 18236 ;;		_setBuz
 18237 ;; This function uses a non-reentrant model
 18238 ;;
 18239                           
 18240                           
 18241                           ;psect for function ___awdiv
 18242  1568                     ___awdiv:	
 18243                           
 18244                           ;incstack = 0
 18245                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18246  1568  0020               	movlb	0	; select bank0
 18247  1569  01A7               	clrf	___awdiv@sign
 18248  156A  1FA2               	btfss	___awdiv@divisor+1,7
 18249  156B  2D73               	goto	l8161
 18250  156C  09A1               	comf	___awdiv@divisor,f
 18251  156D  09A2               	comf	___awdiv@divisor+1,f
 18252  156E  0AA1               	incf	___awdiv@divisor,f
 18253  156F  1903               	skipnz
 18254  1570  0AA2               	incf	___awdiv@divisor+1,f
 18255  1571  01A7               	clrf	___awdiv@sign
 18256  1572  0AA7               	incf	___awdiv@sign,f
 18257  1573                     l8161:	
 18258  1573  1FA4               	btfss	___awdiv@dividend+1,7
 18259  1574  2D7E               	goto	l8167
 18260  1575  09A3               	comf	___awdiv@dividend,f
 18261  1576  09A4               	comf	___awdiv@dividend+1,f
 18262  1577  0AA3               	incf	___awdiv@dividend,f
 18263  1578  1903               	skipnz
 18264  1579  0AA4               	incf	___awdiv@dividend+1,f
 18265  157A  3001               	movlw	1
 18266  157B  00A5               	movwf	??___awdiv
 18267  157C  0825               	movf	??___awdiv,w
 18268  157D  06A7               	xorwf	___awdiv@sign,f
 18269  157E                     l8167:	
 18270  157E  01A8               	clrf	___awdiv@quotient
 18271  157F  01A9               	clrf	___awdiv@quotient+1
 18272  1580  0822               	movf	___awdiv@divisor+1,w
 18273  1581  0421               	iorwf	___awdiv@divisor,w
 18274  1582  1903               	skipnz
 18275  1583  2DAD               	goto	l8189
 18276  1584  01A6               	clrf	___awdiv@counter
 18277  1585  0AA6               	incf	___awdiv@counter,f
 18278  1586                     l8177:	
 18279  1586  1BA2               	btfsc	___awdiv@divisor+1,7
 18280  1587  2D92               	goto	l8179
 18281  1588  3001               	movlw	1
 18282  1589                     u8345:	
 18283  1589  35A1               	lslf	___awdiv@divisor,f
 18284  158A  0DA2               	rlf	___awdiv@divisor+1,f
 18285  158B  0B89               	decfsz	9,f
 18286  158C  2D89               	goto	u8345
 18287  158D  3001               	movlw	1
 18288  158E  00A5               	movwf	??___awdiv
 18289  158F  0825               	movf	??___awdiv,w
 18290  1590  07A6               	addwf	___awdiv@counter,f
 18291  1591  2D86               	goto	l8177
 18292  1592                     l8179:	
 18293  1592  3001               	movlw	1
 18294  1593                     u8365:	
 18295  1593  35A8               	lslf	___awdiv@quotient,f
 18296  1594  0DA9               	rlf	___awdiv@quotient+1,f
 18297  1595  0B89               	decfsz	9,f
 18298  1596  2D93               	goto	u8365
 18299  1597  0822               	movf	___awdiv@divisor+1,w
 18300  1598  0224               	subwf	___awdiv@dividend+1,w
 18301  1599  1D03               	skipz
 18302  159A  2D9D               	goto	u8375
 18303  159B  0821               	movf	___awdiv@divisor,w
 18304  159C  0223               	subwf	___awdiv@dividend,w
 18305  159D                     u8375:	
 18306  159D  1C03               	skipc
 18307  159E  2DA4               	goto	l8185
 18308  159F  0821               	movf	___awdiv@divisor,w
 18309  15A0  02A3               	subwf	___awdiv@dividend,f
 18310  15A1  0822               	movf	___awdiv@divisor+1,w
 18311  15A2  3BA4               	subwfb	___awdiv@dividend+1,f
 18312  15A3  1428               	bsf	___awdiv@quotient,0
 18313  15A4                     l8185:	
 18314  15A4  3001               	movlw	1
 18315  15A5                     u8385:	
 18316  15A5  36A2               	lsrf	___awdiv@divisor+1,f
 18317  15A6  0CA1               	rrf	___awdiv@divisor,f
 18318  15A7  0B89               	decfsz	9,f
 18319  15A8  2DA5               	goto	u8385
 18320  15A9  3001               	movlw	1
 18321  15AA  02A6               	subwf	___awdiv@counter,f
 18322  15AB  1D03               	btfss	3,2
 18323  15AC  2D92               	goto	l8179
 18324  15AD                     l8189:	
 18325  15AD  0827               	movf	___awdiv@sign,w
 18326  15AE  1903               	btfsc	3,2
 18327  15AF  2DB5               	goto	l8193
 18328  15B0  09A8               	comf	___awdiv@quotient,f
 18329  15B1  09A9               	comf	___awdiv@quotient+1,f
 18330  15B2  0AA8               	incf	___awdiv@quotient,f
 18331  15B3  1903               	skipnz
 18332  15B4  0AA9               	incf	___awdiv@quotient+1,f
 18333  15B5                     l8193:	
 18334  15B5  0829               	movf	___awdiv@quotient+1,w
 18335  15B6  01A2               	clrf	?___awdiv+1
 18336  15B7  07A2               	addwf	?___awdiv+1,f
 18337  15B8  0828               	movf	___awdiv@quotient,w
 18338  15B9  01A1               	clrf	?___awdiv
 18339  15BA  07A1               	addwf	?___awdiv,f
 18340  15BB  0008               	return
 18341  15BC                     __end_of___awdiv:	
 18342                           
 18343                           	psect	text129
 18344  1305                     __ptext129:	
 18345 ;; *************** function _setDimmerLights_SwOff *****************
 18346 ;; Defined at:
 18347 ;;		line 694 in file "../src/Dimmer_B1.c"
 18348 ;; Parameters:    Size  Location     Type
 18349 ;;  sw              1    wreg     unsigned char 
 18350 ;; Auto vars:     Size  Location     Type
 18351 ;;  sw              1    3[BANK0 ] unsigned char 
 18352 ;; Return value:  Size  Location     Type
 18353 ;;		None               void
 18354 ;; Registers used:
 18355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18356 ;; Tracked objects:
 18357 ;;		On entry : 0/0
 18358 ;;		On exit  : 0/0
 18359 ;;		Unchanged: 0/0
 18360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18364 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18365 ;;Total ram usage:        1 bytes
 18366 ;; Hardware stack levels used:    1
 18367 ;; Hardware stack levels required when called:    6
 18368 ;; This function calls:
 18369 ;;		_DimmerLights_SelectPointer
 18370 ;; This function is called by:
 18371 ;;		_DlyOff_Main
 18372 ;;		_Exception_Main
 18373 ;;		_setControl_Lights_Table
 18374 ;;		_setRFSW_Control
 18375 ;;		_setRFSW_AdjControl
 18376 ;;		_setSw_Main
 18377 ;; This function uses a non-reentrant model
 18378 ;;
 18379                           
 18380                           
 18381                           ;psect for function _setDimmerLights_SwOff
 18382  1305                     _setDimmerLights_SwOff:	
 18383                           
 18384                           ;incstack = 0
 18385                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18386                           ;setDimmerLights_SwOff@sw stored from wreg
 18387  1305  0020               	movlb	0	; select bank0
 18388  1306  00A3               	movwf	setDimmerLights_SwOff@sw
 18389                           
 18390                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 18391  1307  0823               	movf	setDimmerLights_SwOff@sw,w
 18392  1308  319C  241E  3193   	fcall	_DimmerLights_SelectPointer
 18393                           
 18394                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 18395  130B  0021               	movlb	1	; select bank1
 18396  130C  084F               	movf	_DimmerLights^(0+128),w
 18397  130D  0086               	movwf	6
 18398  130E  3001               	movlw	1	; select bank2/3
 18399  130F  0087               	movwf	7
 18400  1310  1C01               	btfss	1,0
 18401  1311  0008               	return
 18402                           
 18403                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 18404  1312  084F               	movf	_DimmerLights^(0+128),w
 18405  1313  0086               	movwf	6
 18406  1314  3001               	movlw	1	; select bank2/3
 18407  1315  0087               	movwf	7
 18408  1316  1001               	bcf	1,0
 18409                           
 18410                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 18411  1317  0A4F               	incf	_DimmerLights^(0+128),w
 18412  1318  0086               	movwf	6
 18413  1319  3001               	movlw	1	; select bank2/3
 18414  131A  0087               	movwf	7
 18415  131B  1C01               	btfss	1,0
 18416  131C  2B33               	goto	l6013
 18417                           
 18418                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 18419  131D  084F               	movf	_DimmerLights^(0+128),w
 18420  131E  0086               	movwf	6
 18421  131F  3001               	movlw	1	; select bank2/3
 18422  1320  0087               	movwf	7
 18423  1321  1D81               	btfss	1,3
 18424  1322  0008               	return
 18425                           
 18426                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 18427  1323  084F               	movf	_DimmerLights^(0+128),w
 18428  1324  0086               	movwf	6
 18429  1325  3001               	movlw	1	; select bank2/3
 18430  1326  0087               	movwf	7
 18431  1327  1181               	bcf	1,3
 18432                           
 18433                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 18434  1328  084F               	movf	_DimmerLights^(0+128),w
 18435  1329  0086               	movwf	6
 18436  132A  3001               	movlw	1	; select bank2/3
 18437  132B  0087               	movwf	7
 18438  132C  1601               	bsf	1,4
 18439                           
 18440                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 18441  132D  084F               	movf	_DimmerLights^(0+128),w
 18442  132E  0086               	movwf	6
 18443  132F  3001               	movlw	1	; select bank2/3
 18444  1330  0087               	movwf	7
 18445  1331  1281               	bcf	1,5
 18446                           
 18447                           ;Dimmer_B1.c: 705: }
 18448                           ;Dimmer_B1.c: 706: } else {
 18449  1332  0008               	return
 18450  1333                     l6013:	
 18451                           
 18452                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 18453  1333  084F               	movf	_DimmerLights^(0+128),w
 18454  1334  0086               	movwf	6
 18455  1335  3001               	movlw	1	; select bank2/3
 18456  1336  0087               	movwf	7
 18457  1337  1481               	bsf	1,1
 18458                           
 18459                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 18460  1338  084F               	movf	_DimmerLights^(0+128),w
 18461  1339  0086               	movwf	6
 18462  133A  3001               	movlw	1	; select bank2/3
 18463  133B  0087               	movwf	7
 18464  133C  1101               	bcf	1,2
 18465  133D  0008               	return
 18466  133E                     __end_of_setDimmerLights_SwOff:	
 18467                           
 18468                           	psect	text130
 18469  1CD1                     __ptext130:	
 18470 ;; *************** function _getDimmerLights_Status *****************
 18471 ;; Defined at:
 18472 ;;		line 1006 in file "../src/Dimmer_B1.c"
 18473 ;; Parameters:    Size  Location     Type
 18474 ;;  lights          1    wreg     unsigned char 
 18475 ;; Auto vars:     Size  Location     Type
 18476 ;;  lights          1    3[BANK0 ] unsigned char 
 18477 ;;  status          1    4[BANK0 ] unsigned char 
 18478 ;; Return value:  Size  Location     Type
 18479 ;;                  1    wreg      unsigned char 
 18480 ;; Registers used:
 18481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18482 ;; Tracked objects:
 18483 ;;		On entry : 0/0
 18484 ;;		On exit  : 0/0
 18485 ;;		Unchanged: 0/0
 18486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18488 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18490 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18491 ;;Total ram usage:        2 bytes
 18492 ;; Hardware stack levels used:    1
 18493 ;; Hardware stack levels required when called:    6
 18494 ;; This function calls:
 18495 ;;		_DimmerLights_SelectPointer
 18496 ;; This function is called by:
 18497 ;;		_DlyOff_Main
 18498 ;;		_Exception_Main
 18499 ;;		_setControl_Lights_Table
 18500 ;;		_setRFSW_Control
 18501 ;;		_setRFSW_AdjControl
 18502 ;; This function uses a non-reentrant model
 18503 ;;
 18504                           
 18505                           
 18506                           ;psect for function _getDimmerLights_Status
 18507  1CD1                     _getDimmerLights_Status:	
 18508                           
 18509                           ;incstack = 0
 18510                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18511                           ;getDimmerLights_Status@lights stored from wreg
 18512  1CD1  0020               	movlb	0	; select bank0
 18513  1CD2  00A3               	movwf	getDimmerLights_Status@lights
 18514                           
 18515                           ;Dimmer_B1.c: 1007: DimmerLights_SelectPointer(lights);
 18516  1CD3  0823               	movf	getDimmerLights_Status@lights,w
 18517  1CD4  319C  241E         	fcall	_DimmerLights_SelectPointer
 18518                           
 18519                           ;Dimmer_B1.c: 1008: char status = DimmerLights->Status == 1 ? 1 : 0;
 18520  1CD6  0021               	movlb	1	; select bank1
 18521  1CD7  0A4F               	incf	_DimmerLights^(0+128),w
 18522  1CD8  0086               	movwf	6
 18523  1CD9  3001               	movlw	1	; select bank2/3
 18524  1CDA  0087               	movwf	7
 18525  1CDB  3000               	movlw	0
 18526  1CDC  1801               	btfsc	1,0
 18527  1CDD  3001               	movlw	1
 18528  1CDE  0020               	movlb	0	; select bank0
 18529  1CDF  00A4               	movwf	getDimmerLights_Status@status
 18530                           
 18531                           ;Dimmer_B1.c: 1009: return status;
 18532  1CE0  0824               	movf	getDimmerLights_Status@status,w
 18533  1CE1  0008               	return
 18534  1CE2                     __end_of_getDimmerLights_Status:	
 18535                           
 18536                           	psect	text131
 18537  1C1E                     __ptext131:	
 18538 ;; *************** function _DimmerLights_SelectPointer *****************
 18539 ;; Defined at:
 18540 ;;		line 576 in file "../src/Dimmer_B1.c"
 18541 ;; Parameters:    Size  Location     Type
 18542 ;;  lights          1    wreg     unsigned char 
 18543 ;; Auto vars:     Size  Location     Type
 18544 ;;  lights          1    2[BANK0 ] unsigned char 
 18545 ;; Return value:  Size  Location     Type
 18546 ;;		None               void
 18547 ;; Registers used:
 18548 ;;		wreg
 18549 ;; Tracked objects:
 18550 ;;		On entry : 0/0
 18551 ;;		On exit  : 0/0
 18552 ;;		Unchanged: 0/0
 18553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18557 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18558 ;;Total ram usage:        2 bytes
 18559 ;; Hardware stack levels used:    1
 18560 ;; Hardware stack levels required when called:    5
 18561 ;; This function calls:
 18562 ;;		Nothing
 18563 ;; This function is called by:
 18564 ;;		_setDimmerLights_SwOn
 18565 ;;		_setDimmerLights_SwOff
 18566 ;;		_setDimmerLights_DimmingOn
 18567 ;;		_setDimmerLights_Main
 18568 ;;		_getDimmerLights_Status
 18569 ;;		_setDimmerLights_DimmingRun
 18570 ;;		_setDimmerLights_Status
 18571 ;; This function uses a non-reentrant model
 18572 ;;
 18573                           
 18574                           
 18575                           ;psect for function _DimmerLights_SelectPointer
 18576  1C1E                     _DimmerLights_SelectPointer:	
 18577                           
 18578                           ;incstack = 0
 18579                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18580                           ;DimmerLights_SelectPointer@lights stored from wreg
 18581  1C1E  0020               	movlb	0	; select bank0
 18582  1C1F  00A2               	movwf	DimmerLights_SelectPointer@lights
 18583                           
 18584                           ;Dimmer_B1.c: 578: if (lights == 1) {
 18585  1C20  0822               	movf	DimmerLights_SelectPointer@lights,w
 18586  1C21  3A01               	xorlw	1
 18587  1C22  1D03               	skipz
 18588  1C23  0008               	return
 18589                           
 18590                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 18591  1C24  305C               	movlw	_DimmerLights1& (0+255)
 18592  1C25  00A1               	movwf	??_DimmerLights_SelectPointer
 18593  1C26  0821               	movf	??_DimmerLights_SelectPointer,w
 18594  1C27  0021               	movlb	1	; select bank1
 18595  1C28  00CF               	movwf	_DimmerLights^(0+128)
 18596  1C29  0008               	return
 18597  1C2A                     __end_of_DimmerLights_SelectPointer:	
 18598                           
 18599                           	psect	text132
 18600  1B4A                     __ptext132:	
 18601 ;; *************** function _DelayOff_Initialization *****************
 18602 ;; Defined at:
 18603 ;;		line 26 in file "../src/DelayOff_B1.c"
 18604 ;; Parameters:    Size  Location     Type
 18605 ;;		None
 18606 ;; Auto vars:     Size  Location     Type
 18607 ;;		None
 18608 ;; Return value:  Size  Location     Type
 18609 ;;		None               void
 18610 ;; Registers used:
 18611 ;;		wreg, status,2, status,0, pclath, cstack
 18612 ;; Tracked objects:
 18613 ;;		On entry : 0/0
 18614 ;;		On exit  : 0/0
 18615 ;;		Unchanged: 0/0
 18616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18621 ;;Total ram usage:        0 bytes
 18622 ;; Hardware stack levels used:    1
 18623 ;; Hardware stack levels required when called:    7
 18624 ;; This function calls:
 18625 ;;		_DlyOff_Initialization
 18626 ;; This function is called by:
 18627 ;;		_main
 18628 ;; This function uses a non-reentrant model
 18629 ;;
 18630                           
 18631                           
 18632                           ;psect for function _DelayOff_Initialization
 18633  1B4A                     _DelayOff_Initialization:	
 18634                           
 18635                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18636                           
 18637                           ;incstack = 0
 18638                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18639  1B4A  3001               	movlw	1
 18640  1B4B  319B  2377         	fcall	_DlyOff_Initialization
 18641  1B4D  0008               	return
 18642  1B4E                     __end_of_DelayOff_Initialization:	
 18643                           
 18644                           	psect	text133
 18645  1B77                     __ptext133:	
 18646 ;; *************** function _DlyOff_Initialization *****************
 18647 ;; Defined at:
 18648 ;;		line 56 in file "../src/DelayOff_B1.c"
 18649 ;; Parameters:    Size  Location     Type
 18650 ;;  sw              1    wreg     unsigned char 
 18651 ;; Auto vars:     Size  Location     Type
 18652 ;;  sw              1    3[BANK0 ] unsigned char 
 18653 ;; Return value:  Size  Location     Type
 18654 ;;		None               void
 18655 ;; Registers used:
 18656 ;;		wreg, status,2, status,0, pclath, cstack
 18657 ;; Tracked objects:
 18658 ;;		On entry : 0/0
 18659 ;;		On exit  : 0/0
 18660 ;;		Unchanged: 0/0
 18661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18665 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18666 ;;Total ram usage:        1 bytes
 18667 ;; Hardware stack levels used:    1
 18668 ;; Hardware stack levels required when called:    6
 18669 ;; This function calls:
 18670 ;;		_DelayOffPointSelect
 18671 ;; This function is called by:
 18672 ;;		_DelayOff_Initialization
 18673 ;; This function uses a non-reentrant model
 18674 ;;
 18675                           
 18676                           
 18677                           ;psect for function _DlyOff_Initialization
 18678  1B77                     _DlyOff_Initialization:	
 18679                           
 18680                           ;incstack = 0
 18681                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18682                           ;DlyOff_Initialization@sw stored from wreg
 18683  1B77  0020               	movlb	0	; select bank0
 18684  1B78  00A3               	movwf	DlyOff_Initialization@sw
 18685                           
 18686                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18687  1B79  0823               	movf	DlyOff_Initialization@sw,w
 18688  1B7A  319C  2412         	fcall	_DelayOffPointSelect
 18689  1B7C  0008               	return
 18690  1B7D                     __end_of_DlyOff_Initialization:	
 18691                           
 18692                           	psect	text134
 18693  1C12                     __ptext134:	
 18694 ;; *************** function _DelayOffPointSelect *****************
 18695 ;; Defined at:
 18696 ;;		line 7 in file "../src/DelayOff_B1.c"
 18697 ;; Parameters:    Size  Location     Type
 18698 ;;  sw              1    wreg     unsigned char 
 18699 ;; Auto vars:     Size  Location     Type
 18700 ;;  sw              1    2[BANK0 ] unsigned char 
 18701 ;; Return value:  Size  Location     Type
 18702 ;;		None               void
 18703 ;; Registers used:
 18704 ;;		wreg
 18705 ;; Tracked objects:
 18706 ;;		On entry : 0/0
 18707 ;;		On exit  : 0/0
 18708 ;;		Unchanged: 0/0
 18709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18714 ;;Total ram usage:        2 bytes
 18715 ;; Hardware stack levels used:    1
 18716 ;; Hardware stack levels required when called:    5
 18717 ;; This function calls:
 18718 ;;		Nothing
 18719 ;; This function is called by:
 18720 ;;		_DlyOff_Initialization
 18721 ;;		_DlyOff_Main
 18722 ;;		_setDelayOff_GO
 18723 ;;		_getDelayOff_GO
 18724 ;; This function uses a non-reentrant model
 18725 ;;
 18726                           
 18727                           
 18728                           ;psect for function _DelayOffPointSelect
 18729  1C12                     _DelayOffPointSelect:	
 18730                           
 18731                           ;incstack = 0
 18732                           ; Regs used in _DelayOffPointSelect: [wreg]
 18733                           ;DelayOffPointSelect@sw stored from wreg
 18734  1C12  0020               	movlb	0	; select bank0
 18735  1C13  00A2               	movwf	DelayOffPointSelect@sw
 18736                           
 18737                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18738  1C14  0822               	movf	DelayOffPointSelect@sw,w
 18739  1C15  3A01               	xorlw	1
 18740  1C16  1D03               	skipz
 18741  1C17  0008               	return
 18742                           
 18743                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18744  1C18  3064               	movlw	_DlySw1& (0+255)
 18745  1C19  00A1               	movwf	??_DelayOffPointSelect
 18746  1C1A  0821               	movf	??_DelayOffPointSelect,w
 18747  1C1B  0021               	movlb	1	; select bank1
 18748  1C1C  00CD               	movwf	_DelayOff^(0+128)
 18749  1C1D  0008               	return
 18750  1C1E                     __end_of_DelayOffPointSelect:	
 18751                           
 18752                           	psect	text135
 18753  147B                     __ptext135:	
 18754 ;; *************** function _Buzzer_Main *****************
 18755 ;; Defined at:
 18756 ;;		line 46 in file "../src/Buzzer_B1.c"
 18757 ;; Parameters:    Size  Location     Type
 18758 ;;		None
 18759 ;; Auto vars:     Size  Location     Type
 18760 ;;		None
 18761 ;; Return value:  Size  Location     Type
 18762 ;;		None               void
 18763 ;; Registers used:
 18764 ;;		wreg, status,2, status,0
 18765 ;; Tracked objects:
 18766 ;;		On entry : 0/0
 18767 ;;		On exit  : 0/0
 18768 ;;		Unchanged: 0/0
 18769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18772 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18773 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18774 ;;Total ram usage:        1 bytes
 18775 ;; Hardware stack levels used:    1
 18776 ;; Hardware stack levels required when called:    5
 18777 ;; This function calls:
 18778 ;;		Nothing
 18779 ;; This function is called by:
 18780 ;;		_main
 18781 ;; This function uses a non-reentrant model
 18782 ;;
 18783                           
 18784                           
 18785                           ;psect for function _Buzzer_Main
 18786  147B                     _Buzzer_Main:	
 18787                           
 18788                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18789                           
 18790                           ;incstack = 0
 18791                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18792  147B  0021               	movlb	1	; select bank1
 18793  147C  1CAE               	btfss	_Buz1^(0+128),1
 18794  147D  0008               	return
 18795                           
 18796                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18797  147E  3001               	movlw	1
 18798  147F  07AF               	addwf	(_Buz1^(0+128)+1),f
 18799  1480  3000               	movlw	0
 18800  1481  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18801                           
 18802                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18803  1482  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18804  1483  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18805  1484  1D03               	skipz
 18806  1485  2C88               	goto	u7355
 18807  1486  0834               	movf	(_Buz1^(0+128)+6),w
 18808  1487  022F               	subwf	(_Buz1^(0+128)+1),w
 18809  1488                     u7355:	
 18810  1488  1C03               	skipc
 18811  1489  0008               	return
 18812                           
 18813                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18814  148A  01AF               	clrf	(_Buz1^(0+128)+1)
 18815  148B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18816                           
 18817                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18818  148C  12AE               	bcf	_Buz1^(0+128),5
 18819  148D  0020               	movlb	0	; select bank0
 18820  148E  1D8D               	btfss	13,3	;volatile
 18821  148F  2C92               	goto	l7525
 18822  1490  0021               	movlb	1	; select bank1
 18823  1491  16AE               	bsf	_Buz1^(0+128),5
 18824  1492                     l7525:	
 18825                           
 18826                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18827  1492  0021               	movlb	1	; select bank1
 18828  1493  1AAE               	btfsc	_Buz1^(0+128),5
 18829  1494  2CBE               	goto	l96
 18830                           
 18831                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18832  1495  08B1               	movf	(_Buz1^(0+128)+3),f
 18833  1496  1D03               	skipz
 18834  1497  2CBA               	goto	l97
 18835                           
 18836                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18837  1498  1DAE               	btfss	_Buz1^(0+128),3
 18838  1499  2CA8               	goto	l98
 18839                           
 18840                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18841  149A  11AE               	bcf	_Buz1^(0+128),3
 18842                           
 18843                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18844  149B  0832               	movf	(_Buz1^(0+128)+4),w
 18845  149C  0020               	movlb	0	; select bank0
 18846  149D  00A1               	movwf	??_Buzzer_Main
 18847  149E  0821               	movf	??_Buzzer_Main,w
 18848  149F  0021               	movlb	1	; select bank1
 18849  14A0  00B1               	movwf	(_Buz1^(0+128)+3)
 18850                           
 18851                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18852  14A1  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18853  14A2  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18854  14A3  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18855  14A4  0836               	movf	(_Buz1^(0+128)+8),w
 18856  14A5  01B4               	clrf	(_Buz1^(0+128)+6)
 18857  14A6  07B4               	addwf	(_Buz1^(0+128)+6),f
 18858                           
 18859                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18860  14A7  0008               	return
 18861  14A8                     l98:	
 18862  14A8  1E2E               	btfss	_Buz1^(0+128),4
 18863  14A9  2CB8               	goto	l100
 18864                           
 18865                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18866  14AA  122E               	bcf	_Buz1^(0+128),4
 18867                           
 18868                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18869  14AB  0833               	movf	(_Buz1^(0+128)+5),w
 18870  14AC  0020               	movlb	0	; select bank0
 18871  14AD  00A1               	movwf	??_Buzzer_Main
 18872  14AE  0821               	movf	??_Buzzer_Main,w
 18873  14AF  0021               	movlb	1	; select bank1
 18874  14B0  00B1               	movwf	(_Buz1^(0+128)+3)
 18875                           
 18876                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18877  14B1  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18878  14B2  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18879  14B3  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18880  14B4  0838               	movf	(_Buz1^(0+128)+10),w
 18881  14B5  01B4               	clrf	(_Buz1^(0+128)+6)
 18882  14B6  07B4               	addwf	(_Buz1^(0+128)+6),f
 18883                           
 18884                           ;Buzzer_B1.c: 62: } else {
 18885  14B7  0008               	return
 18886  14B8                     l100:	
 18887                           
 18888                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18889  14B8  10AE               	bcf	_Buz1^(0+128),1
 18890                           
 18891                           ;Buzzer_B1.c: 64: }
 18892                           ;Buzzer_B1.c: 65: } else {
 18893  14B9  0008               	return
 18894  14BA                     l97:	
 18895                           
 18896                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18897  14BA  16AE               	bsf	_Buz1^(0+128),5
 18898                           
 18899                           ;Buzzer_B1.c: 68: RB3 = 1;
 18900  14BB  0020               	movlb	0	; select bank0
 18901  14BC  158D               	bsf	13,3	;volatile
 18902                           
 18903                           ;Buzzer_B1.c: 69: }
 18904                           ;Buzzer_B1.c: 70: } else {
 18905  14BD  0008               	return
 18906  14BE                     l96:	
 18907                           
 18908                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18909  14BE  12AE               	bcf	_Buz1^(0+128),5
 18910                           
 18911                           ;Buzzer_B1.c: 73: RB3 = 0;
 18912  14BF  0020               	movlb	0	; select bank0
 18913  14C0  118D               	bcf	13,3	;volatile
 18914                           
 18915                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18916  14C1  3001               	movlw	1
 18917  14C2  0021               	movlb	1	; select bank1
 18918  14C3  02B1               	subwf	(_Buz1^(0+128)+3),f
 18919  14C4  0008               	return
 18920  14C5                     __end_of_Buzzer_Main:	
 18921                           
 18922                           	psect	text136
 18923  1B38                     __ptext136:	
 18924 ;; *************** function _Buzzer_Initialization *****************
 18925 ;; Defined at:
 18926 ;;		line 11 in file "../src/Buzzer_B1.c"
 18927 ;; Parameters:    Size  Location     Type
 18928 ;;		None
 18929 ;; Auto vars:     Size  Location     Type
 18930 ;;		None
 18931 ;; Return value:  Size  Location     Type
 18932 ;;		None               void
 18933 ;; Registers used:
 18934 ;;		None
 18935 ;; Tracked objects:
 18936 ;;		On entry : 0/0
 18937 ;;		On exit  : 0/0
 18938 ;;		Unchanged: 0/0
 18939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18944 ;;Total ram usage:        0 bytes
 18945 ;; Hardware stack levels used:    1
 18946 ;; Hardware stack levels required when called:    5
 18947 ;; This function calls:
 18948 ;;		Nothing
 18949 ;; This function is called by:
 18950 ;;		_main
 18951 ;; This function uses a non-reentrant model
 18952 ;;
 18953                           
 18954                           
 18955                           ;psect for function _Buzzer_Initialization
 18956  1B38                     _Buzzer_Initialization:	
 18957                           
 18958                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18959                           
 18960                           ;incstack = 0
 18961                           ; Regs used in _Buzzer_Initialization: []
 18962  1B38  0021               	movlb	1	; select bank1
 18963  1B39  142E               	bsf	_Buz1^(0+128),0
 18964  1B3A  0008               	return
 18965  1B3B                     __end_of_Buzzer_Initialization:	
 18966                           
 18967                           	psect	intentry
 18968  0004                     __pintentry:	
 18969 ;; *************** function _ISR *****************
 18970 ;; Defined at:
 18971 ;;		line 116 in file "../src/MCU_B1.c"
 18972 ;; Parameters:    Size  Location     Type
 18973 ;;		None
 18974 ;; Auto vars:     Size  Location     Type
 18975 ;;		None
 18976 ;; Return value:  Size  Location     Type
 18977 ;;		None               void
 18978 ;; Registers used:
 18979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18980 ;; Tracked objects:
 18981 ;;		On entry : 0/0
 18982 ;;		On exit  : 0/0
 18983 ;;		Unchanged: 0/0
 18984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18989 ;;Total ram usage:        1 bytes
 18990 ;; Hardware stack levels used:    1
 18991 ;; Hardware stack levels required when called:    4
 18992 ;; This function calls:
 18993 ;;		_IOC_ISR
 18994 ;;		_TMR1_ISR
 18995 ;; This function is called by:
 18996 ;;		Interrupt level 1
 18997 ;; This function uses a non-reentrant model
 18998 ;;
 18999                           
 19000  0004                     _ISR:	
 19001                           
 19002                           ;incstack = 0
 19003                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19004  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19005  0005  3180               	pagesel	$
 19006  0006  0020               	movlb	0	; select bank0
 19007  0007  087F               	movf	127,w
 19008  0008  00A0               	movwf	??_ISR
 19009                           
 19010                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19011  0009  0021               	movlb	1	; select bank1
 19012  000A  1C11               	btfss	17,0	;volatile
 19013  000B  2813               	goto	i1l1190
 19014  000C  0020               	movlb	0	; select bank0
 19015  000D  1C11               	btfss	17,0	;volatile
 19016  000E  2813               	goto	i1l1190
 19017                           
 19018                           ;MCU_B1.c: 126: TMR1_ISR();
 19019  000F  319F  27A5  3180   	fcall	_TMR1_ISR
 19020                           
 19021                           ;MCU_B1.c: 127: }
 19022  0012  281B               	goto	i1l1193
 19023  0013                     i1l1190:	
 19024                           
 19025                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19026  0013  198B               	btfsc	11,3	;volatile
 19027  0014  1C0B               	btfss	11,0	;volatile
 19028  0015  281B               	goto	i1l1193
 19029  0016  0027               	movlb	7	; select bank7
 19030  0017  1D16               	btfss	22,2	;volatile
 19031  0018  281B               	goto	i1l1193
 19032                           
 19033                           ;MCU_B1.c: 139: IOC_ISR();
 19034  0019  319B  23B6         	fcall	_IOC_ISR
 19035  001B                     i1l1193:	
 19036                           ;MCU_B1.c: 140: }
 19037                           ;MCU_B1.c: 148: return;
 19038                           
 19039  001B  0020               	movlb	0	; select bank0
 19040  001C  0820               	movf	??_ISR,w
 19041  001D  00FF               	movwf	127
 19042  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19043  001F  0009               	retfie
 19044  0020                     __end_of_ISR:	
 19045                           
 19046                           	psect	text138
 19047  1FA5                     __ptext138:	
 19048 ;; *************** function _TMR1_ISR *****************
 19049 ;; Defined at:
 19050 ;;		line 236 in file "../src/MCU_B1.c"
 19051 ;; Parameters:    Size  Location     Type
 19052 ;;		None
 19053 ;; Auto vars:     Size  Location     Type
 19054 ;;		None
 19055 ;; Return value:  Size  Location     Type
 19056 ;;		None               void
 19057 ;; Registers used:
 19058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19059 ;; Tracked objects:
 19060 ;;		On entry : 0/0
 19061 ;;		On exit  : 0/0
 19062 ;;		Unchanged: 0/0
 19063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19068 ;;Total ram usage:        0 bytes
 19069 ;; Hardware stack levels used:    1
 19070 ;; Hardware stack levels required when called:    1
 19071 ;; This function calls:
 19072 ;;		_DimmerLights_TMR_1
 19073 ;; This function is called by:
 19074 ;;		_ISR
 19075 ;; This function uses a non-reentrant model
 19076 ;;
 19077                           
 19078                           
 19079                           ;psect for function _TMR1_ISR
 19080  1FA5                     _TMR1_ISR:	
 19081                           
 19082                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19083                           
 19084                           ;incstack = 0
 19085                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19086  1FA5  30FA               	movlw	250
 19087  1FA6  0020               	movlb	0	; select bank0
 19088  1FA7  0097               	movwf	23	;volatile
 19089                           
 19090                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19091  1FA8  3038               	movlw	56
 19092  1FA9  0096               	movwf	22	;volatile
 19093                           
 19094                           ;MCU_B1.c: 240: TMR1IF = 0;
 19095  1FAA  1011               	bcf	17,0	;volatile
 19096                           
 19097                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19098  1FAB  3188  209C  319F   	fcall	_DimmerLights_TMR_1
 19099                           
 19100                           ;MCU_B1.c: 271: Timer1.Count++;
 19101  1FAE  3001               	movlw	1
 19102  1FAF  0021               	movlb	1	; select bank1
 19103  1FB0  07C7               	addwf	(_Timer1^(0+128)+1),f
 19104  1FB1  3000               	movlw	0
 19105  1FB2  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 19106                           
 19107                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19108  1FB3  3001               	movlw	1
 19109  1FB4  3EC6               	addlw	_Timer1& (0+255)
 19110  1FB5  0086               	movwf	6
 19111  1FB6  0187               	clrf	7
 19112  1FB7  3F40               	moviw [0]fsr1
 19113  1FB8  3AC8               	xorlw	200
 19114  1FB9  1D03               	skipz
 19115  1FBA  2FBD               	goto	u745_25
 19116  1FBB  3F41               	moviw [1]fsr1
 19117  1FBC  3A00               	xorlw	0
 19118  1FBD                     u745_25:	
 19119  1FBD  1D03               	skipz
 19120  1FBE  0008               	return
 19121                           
 19122                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19123  1FBF  01C7               	clrf	(_Timer1^(0+128)+1)
 19124  1FC0  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 19125                           
 19126                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19127  1FC1  1446               	bsf	_Timer1^(0+128),0
 19128  1FC2  0008               	return
 19129  1FC3                     __end_of_TMR1_ISR:	
 19130                           
 19131                           	psect	text139
 19132  089C                     __ptext139:	
 19133 ;; *************** function _DimmerLights_TMR_1 *****************
 19134 ;; Defined at:
 19135 ;;		line 1313 in file "../src/Dimmer_B1.c"
 19136 ;; Parameters:    Size  Location     Type
 19137 ;;		None
 19138 ;; Auto vars:     Size  Location     Type
 19139 ;;  count           1    1[COMMON] unsigned char 
 19140 ;; Return value:  Size  Location     Type
 19141 ;;		None               void
 19142 ;; Registers used:
 19143 ;;		wreg, status,2, status,0
 19144 ;; Tracked objects:
 19145 ;;		On entry : 0/0
 19146 ;;		On exit  : 0/0
 19147 ;;		Unchanged: 0/0
 19148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19151 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19152 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19153 ;;Total ram usage:        2 bytes
 19154 ;; Hardware stack levels used:    1
 19155 ;; This function calls:
 19156 ;;		Nothing
 19157 ;; This function is called by:
 19158 ;;		_TMR1_ISR
 19159 ;; This function uses a non-reentrant model
 19160 ;;
 19161                           
 19162                           
 19163                           ;psect for function _DimmerLights_TMR_1
 19164  089C                     _DimmerLights_TMR_1:	
 19165                           
 19166                           ;Dimmer_B1.c: 1314: char count = 79;
 19167                           
 19168                           ;incstack = 0
 19169                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19170  089C  304F               	movlw	79
 19171  089D  00F0               	movwf	??_DimmerLights_TMR_1
 19172  089E  0870               	movf	??_DimmerLights_TMR_1,w
 19173  089F  00F1               	movwf	DimmerLights_TMR_1@count
 19174                           
 19175                           ;Dimmer_B1.c: 1327: if (DimmerIntr1.Start == 1) {
 19176  08A0  0021               	movlb	1	; select bank1
 19177  08A1  1D3A               	btfss	_DimmerIntr1^(0+128),2
 19178  08A2  28AD               	goto	i1l7049
 19179                           
 19180                           ;Dimmer_B1.c: 1328: DimmerIntr1.Count++;
 19181  08A3  3001               	movlw	1
 19182  08A4  00F0               	movwf	??_DimmerLights_TMR_1
 19183  08A5  0870               	movf	??_DimmerLights_TMR_1,w
 19184  08A6  07BC               	addwf	(_DimmerIntr1^(0+128)+2),f
 19185                           
 19186                           ;Dimmer_B1.c: 1329: if (DimmerIntr1.Count >= count) {
 19187  08A7  0871               	movf	DimmerLights_TMR_1@count,w
 19188  08A8  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19189  08A9  1C03               	skipc
 19190  08AA  28AD               	goto	i1l7049
 19191                           
 19192                           ;Dimmer_B1.c: 1330: DimmerIntr1.Count = 0;
 19193  08AB  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19194                           
 19195                           ;Dimmer_B1.c: 1331: DimmerIntr1.Start = 0;
 19196  08AC  113A               	bcf	_DimmerIntr1^(0+128),2
 19197  08AD                     i1l7049:	
 19198                           
 19199                           ;Dimmer_B1.c: 1333: }
 19200                           ;Dimmer_B1.c: 1334: }
 19201                           ;Dimmer_B1.c: 1338: if (DimmerIntr1.Count == 7) {
 19202  08AD  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19203  08AE  3A07               	xorlw	7
 19204  08AF  1903               	btfsc	3,2
 19205                           
 19206                           ;Dimmer_B1.c: 1341: if (DimmerIntr1.ControlStatus == 1) {
 19207  08B0  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19208  08B1  28B4               	goto	i1l7055
 19209                           
 19210                           ;Dimmer_B1.c: 1342: RB1 = 1;
 19211  08B2  0020               	movlb	0	; select bank0
 19212  08B3  148D               	bsf	13,1	;volatile
 19213  08B4                     i1l7055:	
 19214                           
 19215                           ;Dimmer_B1.c: 1344: }
 19216                           ;Dimmer_B1.c: 1345: }
 19217                           ;Dimmer_B1.c: 1349: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19218  08B4  0021               	movlb	1	; select bank1
 19219  08B5  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19220  08B6  0643               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19221  08B7  1903               	btfsc	3,2
 19222                           
 19223                           ;Dimmer_B1.c: 1352: if (DimmerIntr1.ControlStatus == 1) {
 19224  08B8  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19225  08B9  28BC               	goto	i1l7061
 19226                           
 19227                           ;Dimmer_B1.c: 1353: RB1 = 0;
 19228  08BA  0020               	movlb	0	; select bank0
 19229  08BB  108D               	bcf	13,1	;volatile
 19230  08BC                     i1l7061:	
 19231                           
 19232                           ;Dimmer_B1.c: 1355: }
 19233                           ;Dimmer_B1.c: 1356: }
 19234                           ;Dimmer_B1.c: 1360: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19235  08BC  0021               	movlb	1	; select bank1
 19236  08BD  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19237  08BE  0644               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19238  08BF  1903               	btfsc	3,2
 19239                           
 19240                           ;Dimmer_B1.c: 1363: if (DimmerIntr1.ControlStatus == 1) {
 19241  08C0  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19242  08C1  28C4               	goto	i1l7067
 19243                           
 19244                           ;Dimmer_B1.c: 1364: RB1 = 1;
 19245  08C2  0020               	movlb	0	; select bank0
 19246  08C3  148D               	bsf	13,1	;volatile
 19247  08C4                     i1l7067:	
 19248                           
 19249                           ;Dimmer_B1.c: 1366: }
 19250                           ;Dimmer_B1.c: 1367: }
 19251                           ;Dimmer_B1.c: 1384: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19252  08C4  0021               	movlb	1	; select bank1
 19253  08C5  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19254  08C6  0645               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19255  08C7  1903               	btfsc	3,2
 19256                           
 19257                           ;Dimmer_B1.c: 1386: if (DimmerIntr1.ControlStatus == 1) {
 19258  08C8  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19259  08C9  28CC               	goto	i1l839
 19260                           
 19261                           ;Dimmer_B1.c: 1387: RB1 = 0;
 19262  08CA  0020               	movlb	0	; select bank0
 19263  08CB  108D               	bcf	13,1	;volatile
 19264  08CC                     i1l839:	
 19265                           
 19266                           ;Dimmer_B1.c: 1389: }
 19267                           ;Dimmer_B1.c: 1390: }
 19268                           ;Dimmer_B1.c: 1393: if (DimmerIntr1.Tune == 1) {
 19269  08CC  0021               	movlb	1	; select bank1
 19270  08CD  1CBA               	btfss	_DimmerIntr1^(0+128),1
 19271  08CE  0008               	return
 19272                           
 19273                           ;Dimmer_B1.c: 1394: DimmerIntr1.Tune = 0;
 19274  08CF  10BA               	bcf	_DimmerIntr1^(0+128),1
 19275                           
 19276                           ;Dimmer_B1.c: 1395: DimmerIntr1.TuneTime++;
 19277  08D0  3001               	movlw	1
 19278  08D1  00F0               	movwf	??_DimmerLights_TMR_1
 19279  08D2  0870               	movf	??_DimmerLights_TMR_1,w
 19280  08D3  07BD               	addwf	(_DimmerIntr1^(0+128)+3),f
 19281                           
 19282                           ;Dimmer_B1.c: 1396: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19283  08D4  083E               	movf	(_DimmerIntr1^(0+128)+4),w
 19284  08D5  023D               	subwf	(_DimmerIntr1^(0+128)+3),w
 19285  08D6  1C03               	skipc
 19286  08D7  0008               	return
 19287                           
 19288                           ;Dimmer_B1.c: 1397: DimmerIntr1.TuneTime = 0;
 19289  08D8  01BD               	clrf	(_DimmerIntr1^(0+128)+3)
 19290                           
 19291                           ;Dimmer_B1.c: 1398: if (DimmerIntr1.Dimming_Sw == 1) {
 19292  08D9  1E3A               	btfss	_DimmerIntr1^(0+128),4
 19293  08DA  28F1               	goto	i1l843
 19294                           
 19295                           ;Dimmer_B1.c: 1399: if (DimmerIntr1.Dimming_Status == 0) {
 19296  08DB  1ABA               	btfsc	_DimmerIntr1^(0+128),5
 19297  08DC  28E8               	goto	i1l7089
 19298                           
 19299                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.DimmingValue < ((char)(60*0.79))) {
 19300  08DD  302F               	movlw	47
 19301  08DE  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19302  08DF  1803               	skipnc
 19303  08E0  28E6               	goto	i1l845
 19304                           
 19305                           ;Dimmer_B1.c: 1401: DimmerIntr1.DimmingValue++;
 19306  08E1  3001               	movlw	1
 19307  08E2  00F0               	movwf	??_DimmerLights_TMR_1
 19308  08E3  0870               	movf	??_DimmerLights_TMR_1,w
 19309  08E4  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19310                           
 19311                           ;Dimmer_B1.c: 1402: } else {
 19312  08E5  0008               	return
 19313  08E6                     i1l845:	
 19314                           
 19315                           ;Dimmer_B1.c: 1403: DimmerIntr1.Dimming_Status = 1;
 19316  08E6  16BA               	bsf	_DimmerIntr1^(0+128),5
 19317                           
 19318                           ;Dimmer_B1.c: 1404: }
 19319                           ;Dimmer_B1.c: 1405: } else {
 19320  08E7  0008               	return
 19321  08E8                     i1l7089:	
 19322                           
 19323                           ;Dimmer_B1.c: 1406: if (DimmerIntr1.DimmingValue > ((char)(25*0.79))) {
 19324  08E8  3014               	movlw	20
 19325  08E9  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19326  08EA  1C03               	skipc
 19327  08EB  28EF               	goto	i1l848
 19328                           
 19329                           ;Dimmer_B1.c: 1407: DimmerIntr1.DimmingValue--;
 19330  08EC  3001               	movlw	1
 19331  08ED  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19332                           
 19333                           ;Dimmer_B1.c: 1408: } else {
 19334  08EE  0008               	return
 19335  08EF                     i1l848:	
 19336                           
 19337                           ;Dimmer_B1.c: 1409: DimmerIntr1.Dimming_Status = 0;
 19338  08EF  12BA               	bcf	_DimmerIntr1^(0+128),5
 19339                           
 19340                           ;Dimmer_B1.c: 1410: }
 19341                           ;Dimmer_B1.c: 1411: }
 19342                           ;Dimmer_B1.c: 1412: } else if (DimmerIntr1.Dimming_RF == 1) {
 19343  08F0  0008               	return
 19344  08F1                     i1l843:	
 19345  08F1  1F3A               	btfss	_DimmerIntr1^(0+128),6
 19346  08F2  0008               	return
 19347                           
 19348                           ;Dimmer_B1.c: 1413: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19349  08F3  0840               	movf	(_DimmerIntr1^(0+128)+6),w
 19350  08F4  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19351  08F5  1803               	skipnc
 19352  08F6  28FC               	goto	i1l7097
 19353                           
 19354                           ;Dimmer_B1.c: 1414: DimmerIntr1.DimmingValue++;
 19355  08F7  3001               	movlw	1
 19356  08F8  00F0               	movwf	??_DimmerLights_TMR_1
 19357  08F9  0870               	movf	??_DimmerLights_TMR_1,w
 19358  08FA  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19359                           
 19360                           ;Dimmer_B1.c: 1415: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19361  08FB  0008               	return
 19362  08FC                     i1l7097:	
 19363  08FC  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19364  08FD  0240               	subwf	(_DimmerIntr1^(0+128)+6),w
 19365  08FE  1803               	skipnc
 19366  08FF  2903               	goto	i1l854
 19367                           
 19368                           ;Dimmer_B1.c: 1416: DimmerIntr1.DimmingValue--;
 19369  0900  3001               	movlw	1
 19370  0901  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19371                           
 19372                           ;Dimmer_B1.c: 1417: } else {
 19373  0902  0008               	return
 19374  0903                     i1l854:	
 19375                           
 19376                           ;Dimmer_B1.c: 1418: DimmerIntr1.Dimming_RF = 0;
 19377  0903  133A               	bcf	_DimmerIntr1^(0+128),6
 19378  0904  0008               	return
 19379  0905                     __end_of_DimmerLights_TMR_1:	
 19380                           
 19381                           	psect	text140
 19382  1BB6                     __ptext140:	
 19383 ;; *************** function _IOC_ISR *****************
 19384 ;; Defined at:
 19385 ;;		line 394 in file "../src/MCU_B1.c"
 19386 ;; Parameters:    Size  Location     Type
 19387 ;;		None
 19388 ;; Auto vars:     Size  Location     Type
 19389 ;;		None
 19390 ;; Return value:  Size  Location     Type
 19391 ;;		None               void
 19392 ;; Registers used:
 19393 ;;		wreg, status,2, status,0, pclath, cstack
 19394 ;; Tracked objects:
 19395 ;;		On entry : 0/0
 19396 ;;		On exit  : 0/0
 19397 ;;		Unchanged: 0/0
 19398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19403 ;;Total ram usage:        0 bytes
 19404 ;; Hardware stack levels used:    1
 19405 ;; Hardware stack levels required when called:    3
 19406 ;; This function calls:
 19407 ;;		_DimmerLights_IOC_1
 19408 ;; This function is called by:
 19409 ;;		_ISR
 19410 ;; This function uses a non-reentrant model
 19411 ;;
 19412                           
 19413                           
 19414                           ;psect for function _IOC_ISR
 19415  1BB6                     _IOC_ISR:	
 19416                           
 19417                           ;MCU_B1.c: 395: IOCBF2 = 0;
 19418                           
 19419                           ;incstack = 0
 19420                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19421  1BB6  0027               	movlb	7	; select bank7
 19422  1BB7  1116               	bcf	22,2	;volatile
 19423                           
 19424                           ;MCU_B1.c: 396: IOCIF = 0;
 19425  1BB8  100B               	bcf	11,0	;volatile
 19426                           
 19427                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19428  1BB9  0022               	movlb	2	; select bank2
 19429  1BBA  1C20               	btfss	_myMain^(0+256),0
 19430  1BBB  0008               	return
 19431                           
 19432                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 19433  1BBC  3191  2177         	fcall	_DimmerLights_IOC_1
 19434  1BBE  0008               	return
 19435  1BBF                     __end_of_IOC_ISR:	
 19436                           
 19437                           	psect	text141
 19438  1177                     __ptext141:	
 19439 ;; *************** function _DimmerLights_IOC_1 *****************
 19440 ;; Defined at:
 19441 ;;		line 1425 in file "../src/Dimmer_B1.c"
 19442 ;; Parameters:    Size  Location     Type
 19443 ;;		None
 19444 ;; Auto vars:     Size  Location     Type
 19445 ;;  dimming         1   13[COMMON] unsigned char 
 19446 ;;  count           1   12[COMMON] unsigned char 
 19447 ;; Return value:  Size  Location     Type
 19448 ;;		None               void
 19449 ;; Registers used:
 19450 ;;		wreg, status,2, status,0, pclath, cstack
 19451 ;; Tracked objects:
 19452 ;;		On entry : 0/0
 19453 ;;		On exit  : 0/0
 19454 ;;		Unchanged: 0/0
 19455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19459 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19460 ;;Total ram usage:        4 bytes
 19461 ;; Hardware stack levels used:    1
 19462 ;; Hardware stack levels required when called:    2
 19463 ;; This function calls:
 19464 ;;		_Division
 19465 ;; This function is called by:
 19466 ;;		_IOC_ISR
 19467 ;; This function uses a non-reentrant model
 19468 ;;
 19469                           
 19470                           
 19471                           ;psect for function _DimmerLights_IOC_1
 19472  1177                     _DimmerLights_IOC_1:	
 19473                           
 19474                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.Start == 0) {
 19475                           
 19476                           ;incstack = 0
 19477                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19478  1177  0021               	movlb	1	; select bank1
 19479  1178  193A               	btfsc	_DimmerIntr1^(0+128),2
 19480  1179  0008               	return
 19481                           
 19482                           ;Dimmer_B1.c: 1440: DimmerIntr1.Start = 1;
 19483  117A  153A               	bsf	_DimmerIntr1^(0+128),2
 19484                           
 19485                           ;Dimmer_B1.c: 1441: DimmerIntr1.Count = 0;
 19486  117B  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19487                           
 19488                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 19489  117C  1E3A               	btfss	_DimmerIntr1^(0+128),4
 19490  117D  1B3A               	btfsc	_DimmerIntr1^(0+128),6
 19491                           
 19492                           ;Dimmer_B1.c: 1443: DimmerIntr1.Tune = 1;
 19493  117E  14BA               	bsf	_DimmerIntr1^(0+128),1
 19494                           
 19495                           ;Dimmer_B1.c: 1444: }
 19496                           ;Dimmer_B1.c: 1445: char count = 79;
 19497  117F  304F               	movlw	79
 19498  1180  00FA               	movwf	??_DimmerLights_IOC_1
 19499  1181  087A               	movf	??_DimmerLights_IOC_1,w
 19500  1182  00FC               	movwf	DimmerLights_IOC_1@count
 19501                           
 19502                           ;Dimmer_B1.c: 1446: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 19503  1183  3002               	movlw	2
 19504  1184  00FA               	movwf	??_DimmerLights_IOC_1
 19505  1185  087A               	movf	??_DimmerLights_IOC_1,w
 19506  1186  00F5               	movwf	Division@num
 19507  1187  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19508  1188  319C  2496         	fcall	_Division
 19509  118A  00FB               	movwf	??_DimmerLights_IOC_1+1
 19510  118B  087B               	movf	??_DimmerLights_IOC_1+1,w
 19511  118C  00FD               	movwf	DimmerLights_IOC_1@dimming
 19512                           
 19513                           ;Dimmer_B1.c: 1447: DimmerIntr1.TuneValue2 = 7 + dimming;
 19514  118D  087D               	movf	DimmerLights_IOC_1@dimming,w
 19515  118E  3E07               	addlw	7
 19516  118F  00FA               	movwf	??_DimmerLights_IOC_1
 19517  1190  087A               	movf	??_DimmerLights_IOC_1,w
 19518  1191  0021               	movlb	1	; select bank1
 19519  1192  00C3               	movwf	(_DimmerIntr1^(0+128)+9)
 19520                           
 19521                           ;Dimmer_B1.c: 1448: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + ((count - (7 + 7))
      +                           - DimmerIntr1.DimmingValue);
 19522  1193  033F               	decf	(_DimmerIntr1^(0+128)+5),w
 19523  1194  3AFF               	xorlw	255
 19524  1195  0743               	addwf	(_DimmerIntr1^(0+128)+9),w
 19525  1196  077C               	addwf	DimmerLights_IOC_1@count,w
 19526  1197  3EF2               	addlw	242
 19527  1198  00FA               	movwf	??_DimmerLights_IOC_1
 19528  1199  087A               	movf	??_DimmerLights_IOC_1,w
 19529  119A  00C4               	movwf	(_DimmerIntr1^(0+128)+10)
 19530                           
 19531                           ;Dimmer_B1.c: 1449: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 19532  119B  0844               	movf	(_DimmerIntr1^(0+128)+10),w
 19533  119C  077D               	addwf	DimmerLights_IOC_1@dimming,w
 19534  119D  00FA               	movwf	??_DimmerLights_IOC_1
 19535  119E  087A               	movf	??_DimmerLights_IOC_1,w
 19536  119F  00C5               	movwf	(_DimmerIntr1^(0+128)+11)
 19537  11A0  0008               	return
 19538  11A1                     __end_of_DimmerLights_IOC_1:	
 19539                           
 19540                           	psect	text142
 19541  1C96                     __ptext142:	
 19542 ;; *************** function _Division *****************
 19543 ;; Defined at:
 19544 ;;		line 1308 in file "../src/Dimmer_B1.c"
 19545 ;; Parameters:    Size  Location     Type
 19546 ;;  value           1    wreg     unsigned char 
 19547 ;;  num             1    5[COMMON] unsigned char 
 19548 ;; Auto vars:     Size  Location     Type
 19549 ;;  value           1    8[COMMON] unsigned char 
 19550 ;;  result          1    9[COMMON] unsigned char 
 19551 ;; Return value:  Size  Location     Type
 19552 ;;                  1    wreg      unsigned char 
 19553 ;; Registers used:
 19554 ;;		wreg, status,2, status,0, pclath, cstack
 19555 ;; Tracked objects:
 19556 ;;		On entry : 0/0
 19557 ;;		On exit  : 0/0
 19558 ;;		Unchanged: 0/0
 19559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19560 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19563 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19564 ;;Total ram usage:        5 bytes
 19565 ;; Hardware stack levels used:    1
 19566 ;; Hardware stack levels required when called:    1
 19567 ;; This function calls:
 19568 ;;		___lbdiv
 19569 ;; This function is called by:
 19570 ;;		_DimmerLights_IOC_1
 19571 ;; This function uses a non-reentrant model
 19572 ;;
 19573                           
 19574                           
 19575                           ;psect for function _Division
 19576  1C96                     _Division:	
 19577                           
 19578                           ;incstack = 0
 19579                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19580                           ;Division@value stored from wreg
 19581  1C96  00F8               	movwf	Division@value
 19582                           
 19583                           ;Dimmer_B1.c: 1309: char result = (char) (value / num);
 19584  1C97  0875               	movf	Division@num,w
 19585  1C98  00F6               	movwf	??_Division
 19586  1C99  0876               	movf	??_Division,w
 19587  1C9A  00F0               	movwf	___lbdiv@divisor
 19588  1C9B  0878               	movf	Division@value,w
 19589  1C9C  3190  209F         	fcall	___lbdiv
 19590  1C9E  00F7               	movwf	??_Division+1
 19591  1C9F  0877               	movf	??_Division+1,w
 19592  1CA0  00F9               	movwf	Division@result
 19593                           
 19594                           ;Dimmer_B1.c: 1310: return result;
 19595  1CA1  0879               	movf	Division@result,w
 19596  1CA2  0008               	return
 19597  1CA3                     __end_of_Division:	
 19598                           
 19599                           	psect	text143
 19600  109F                     __ptext143:	
 19601 ;; *************** function ___lbdiv *****************
 19602 ;; Defined at:
 19603 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19604 ;; Parameters:    Size  Location     Type
 19605 ;;  dividend        1    wreg     unsigned char 
 19606 ;;  divisor         1    0[COMMON] unsigned char 
 19607 ;; Auto vars:     Size  Location     Type
 19608 ;;  dividend        1    2[COMMON] unsigned char 
 19609 ;;  quotient        1    4[COMMON] unsigned char 
 19610 ;;  counter         1    3[COMMON] unsigned char 
 19611 ;; Return value:  Size  Location     Type
 19612 ;;                  1    wreg      unsigned char 
 19613 ;; Registers used:
 19614 ;;		wreg, status,2, status,0
 19615 ;; Tracked objects:
 19616 ;;		On entry : 0/0
 19617 ;;		On exit  : 0/0
 19618 ;;		Unchanged: 0/0
 19619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19620 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19621 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19623 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19624 ;;Total ram usage:        5 bytes
 19625 ;; Hardware stack levels used:    1
 19626 ;; This function calls:
 19627 ;;		Nothing
 19628 ;; This function is called by:
 19629 ;;		_Division
 19630 ;; This function uses a non-reentrant model
 19631 ;;
 19632                           
 19633                           
 19634                           ;psect for function ___lbdiv
 19635  109F                     ___lbdiv:	
 19636                           
 19637                           ;incstack = 0
 19638                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19639                           ;___lbdiv@dividend stored from wreg
 19640  109F  00F2               	movwf	___lbdiv@dividend
 19641  10A0  01F4               	clrf	___lbdiv@quotient
 19642  10A1  0870               	movf	___lbdiv@divisor,w
 19643  10A2  1903               	btfsc	3,2
 19644  10A3  28BE               	goto	i1l6535
 19645  10A4  01F3               	clrf	___lbdiv@counter
 19646  10A5  0AF3               	incf	___lbdiv@counter,f
 19647  10A6                     i1l6523:	
 19648  10A6  1BF0               	btfsc	___lbdiv@divisor,7
 19649  10A7  28AF               	goto	i1l6525
 19650  10A8  1003               	clrc
 19651  10A9  0DF0               	rlf	___lbdiv@divisor,f
 19652  10AA  3001               	movlw	1
 19653  10AB  00F1               	movwf	??___lbdiv
 19654  10AC  0871               	movf	??___lbdiv,w
 19655  10AD  07F3               	addwf	___lbdiv@counter,f
 19656  10AE  28A6               	goto	i1l6523
 19657  10AF                     i1l6525:	
 19658  10AF  1003               	clrc
 19659  10B0  0DF4               	rlf	___lbdiv@quotient,f
 19660  10B1  0870               	movf	___lbdiv@divisor,w
 19661  10B2  0272               	subwf	___lbdiv@dividend,w
 19662  10B3  1C03               	skipc
 19663  10B4  28B9               	goto	L9
 19664  10B5  0870               	movf	___lbdiv@divisor,w
 19665  10B6  02F2               	subwf	___lbdiv@dividend,f
 19666  10B7  1474               	bsf	___lbdiv@quotient,0
 19667  10B8  1003               	clrc
 19668  10B9                     L9:	
 19669  10B9  0CF0               	rrf	___lbdiv@divisor,f
 19670  10BA  3001               	movlw	1
 19671  10BB  02F3               	subwf	___lbdiv@counter,f
 19672  10BC  1D03               	btfss	3,2
 19673  10BD  28AF               	goto	i1l6525
 19674  10BE                     i1l6535:	
 19675  10BE  0874               	movf	___lbdiv@quotient,w
 19676  10BF  0008               	return
 19677  10C0                     __end_of___lbdiv:	
 19678  007E                     btemp	set	126	;btemp
 19679  007E                     pic14e$flags	set	126
 19680  007E                     wtemp	set	126
 19681  007E                     wtemp0	set	126
 19682  0080                     wtemp1	set	128
 19683  0082                     wtemp2	set	130
 19684  0084                     wtemp3	set	132
 19685  0086                     wtemp4	set	134
 19686  0088                     wtemp5	set	136
 19687  007F                     wtemp6	set	127
 19688  007E                     ttemp	set	126
 19689  007E                     ttemp0	set	126
 19690  0081                     ttemp1	set	129
 19691  0084                     ttemp2	set	132
 19692  0087                     ttemp3	set	135
 19693  007F                     ttemp4	set	127
 19694  007E                     ltemp	set	126
 19695  007E                     ltemp0	set	126
 19696  0082                     ltemp1	set	130
 19697  0086                     ltemp2	set	134
 19698  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         222
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      8      78
    BANK2            80      0      77
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_Dimming
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  154781
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             14 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              5 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              5 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              1 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              1 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5608
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5608
                                             70 BANK0      1     1      0
                                              0 BANK1      8     8      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4278
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4278
                                             16 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              5 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   48572
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   48572
                                              5 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44853
                                              3 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5139
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   39442
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12303
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21587
                                             70 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              3 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              5 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              5 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              3 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              7 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              6 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              6 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              3 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              3 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2210
                                              9 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              3 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              5 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1201
                                              7 BANK0      1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              5 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             67 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              1 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3563
                                             14 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   64064
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   63766
                                              4 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   41480
                                              0 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              3 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4474
                                             70 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              3 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   21939
                                             75 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3821
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     400
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             47 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             31 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             34 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              2 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              1 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5470
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5470
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3286
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1896
                                             14 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                             10 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              3 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              3 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     498
                                              0 BANK0      1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0      23
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     475
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  4     4      0     475
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     407
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     168      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     168      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Jan 27 13:19:33 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1EE7  
                          ___bmul@product 0023                 getMain_Lights_Count@count 0021  
                                      l86 15ED                                        l96 14BE  
                                      l88 1601                                        l97 14BA  
                                      l98 14A8                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1104                                        _WR 0CA9  
                            ___awdiv@sign 0027                                        _Sw 00D5  
                          setTemp_Main@AD 00EB                       ___wmul@multiplicand 0023  
                    _getDimmerLights_Line 1BDB                    __end_of_setDelayOff_GO 0D38  
                            ___ftadd@exp1 004E                              ___ftadd@exp2 004D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0834  
                    _setDimmerLights_Line 1CE2                              ___ftadd@sign 004C  
                                     l100 14B8                                       l303 1072  
                                     l304 1074                                       l235 0949  
                    _setDimmerLights_SwOn 122D                                       l531 0A48  
                                     l347 112E                                       l259 09D4  
                                     l750 1F66                                       l681 1CB0  
                                     l774 079F                                       _GIE 005F  
                                     _CRC 00CB                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RA4 0064                                       _LED 00D0  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C9                                       _Cmd 00CC  
            getDimmerLights_Status@lights 0023                                       _Sw1 01E3  
              ??_setDimmerIntr_Dimming_RF 0022                ??_setDimmerIntr_Dimming_Sw 0022  
         setDimmerIntr_Dimming_RF@command 0021                  __end_of_CC2500_WriteByte 107F  
                   _Buzzer_Initialization 1B38                           __end_of_ADC_Set 1B97  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0024       __end_of_setDimmerIntr_ControlStatus 1E9D  
             _setDimmerIntr_ControlStatus 1E85                         ??_getSw_KeyStatus 0021  
                                    ?_ISR 0070                              ___ftdiv@cntr 0039  
                         __end_of_IOC_ISR 1BBF                     _setDimmerLights_OnOff 0711  
        setDimmerLights_DimmingRun@lights 0025                                Load_Main@i 0031  
                            ___ftdiv@sign 003E                                      l2103 0585  
                                    l2104 05D6                                      l1242 11F3  
                                    l1251 1560                                      l1228 1292  
                                    l2144 0B31                                      l2129 1CB7  
                                    l1451 1210                                      l1452 122B  
                                    l2172 0AC0                                      l1428 13B2  
                                    l1605 01F6                                      l1615 01D2  
                                    l1607 0082                                      l2159 0830  
                                    l1456 1227                                      l1616 01D0  
                                    l1608 007E                                      l1609 0079  
                                    l1483 0710                                      l2099 0636  
                                    l1492 1EE6                           __end_of_IOC_Set 1BFC  
                                    l2457 1E35                                      l6013 1333  
                                    l2477 0376                                      l1773 0E00  
                                    l2823 16BA                                      l2479 0242  
                                    l1767 0E8B                                      l2656 1FCC  
                                    l2817 16A3                                      l1778 0E83  
                                    l6211 1ED1                                      l7021 1BE3  
                                    l6301 145F                                      l2846 041F  
                                    l6215 1EE0                                      l6143 1F24  
                                    l6311 146F                                      l6145 1F27  
                                    l6305 1465                            _Load_Main$3891 002C  
                                    l5611 168F                                      l5603 1679  
                                    l6315 1475                                      l6149 1F2D  
                                    l6181 113F                                      l6309 146C  
                                    l5607 1680                                      l7215 1532  
                                    l6183 114A                                      l6191 10ED  
                                    l6167 1F98                                      l6271 110E  
                                    l5617 16A8                                      l5609 168A  
                                    l5713 1D4C                                      l6433 134D  
                                    l7209 151D                                      l6169 1F9E  
                                    l6273 1111                                      l5619 16B0  
                                    l6195 10F3                                      l6611 098E  
                                    l7411 1E40                     _setDimmerLights_SwOff 1305  
                                    l6461 1D3B                                      l5717 1D52  
                                    l9013 01E5                                      l6189 10EA  
                                    l6277 1117                                      l6605 0985  
                                    l5735 07E9                                      l5807 045E  
                                    l5751 03AF                                      l5823 0D65  
                                    l6447 136C                                      l6439 1356  
                                    l6607 0988                                      l6551 0918  
                                    l7407 1E3A                                      l7191 10CB  
                                    l8161 1573                                      l5817 0D4F  
                                    l6465 1D42                                      l7505 1FC6  
                                    l8313 142A                                      l7193 10CE  
                                    l9113 1639                                      l5747 03A8  
                                    l6467 1D47                                      l9043 065A  
                                    l6299 145C                                      l6627 09A0  
                                    l6555 091E                                      l7525 1492  
                                    l8237 1254                                      l5781 03FE  
                                    l5757 03BE                                      l5845 0DBF  
                                    l5837 0DA6                                      l5917 0C3E  
                                    l8261 0CEA                                      l8421 077E  
                                    l9061 06A1                                      l9053 0679  
                                    l6629 09B9                                      l6581 095C  
                                    l6573 094F                                      l6549 0915  
                                    l8325 0BBC                                      l7197 10D4  
                                    l9117 1644                                      l8167 157E  
                                    l8239 1259                                      l5775 03EB  
                                    l5951 0CA3                                      l5943 0C89  
                                    l5935 0C6E                                      l8271 0D1A  
                                    l9063 067C                                      l7607 04F5  
                                    l6583 095F                                      l6575 0952  
                                    l8503 0B0D                                      l7703 0B71  
                                    l8193 15B5                                      l8185 15A4  
                                    l8177 1586                                      l8353 120B  
                                    l5793 0431                                      l5777 03F5  
                                    l5769 03D8                                      l5945 0C92  
                                    l5937 0C7C                                      l5881 0F01  
                                    l5865 0EBE                                      l8417 0763  
                                    l9081 06BE                                      l9065 06A9  
                                    l9049 066A                                      l6569 0930  
                                    l8329 0BC1                                      l8179 1592  
                                    l8363 1222                                      l8355 1214  
                                    l6667 1E52                                      l5787 0411  
                                    l5779 03FA                                      l5947 0C95  
                                    l8291 1785                                      l5859 0EA8  
                                    l8275 0D2E                                      l8435 07AE  
                                    l9083 06EB                                      l9091 0706  
                                    l6587 0965                                      l6579 0958  
                                    l6843 1D20                                      l8339 0C11  
                                    l7723 0BA0                                      l7707 0B79  
                                    l8189 15AD                                      l5797 0443  
                                    l5789 041B                                      l5893 0F1D  
                                    l5877 0EF9                                      l9085 06F5  
                                    l6941 12F5                                      l6933 12D7  
                                    l6917 1D31                                      l8613 0E58  
                                    l8455 14DE                                      l8543 085A  
                                    l9079 06E3                                      l6935 12E3  
                                    l8391 0AA9                                      l8703 062F  
                                    l8615 0E5A                                      l5889 0F15  
                                    l8449 07DB                                      l8545 0860  
                                    l6945 12FE                                      l8393 0AAD  
                                    l8385 0A65                                      l8721 022C  
                                    l8625 0E6F                                      l8555 0888  
                                    l8387 0A6C                                      l8379 0A50  
                                    l8491 0AF8                                      l8475 0AD7  
                                    l8627 0E70                                      l7739 13E4  
                                    l8557 088F                                      l8389 0A87  
                                    l8397 0AB1                                      l8661 05D1  
                   _myMain_Initialization 1DDD                                      l6799 11DB  
                                    l6983 1DB5                                      l8487 0AEF  
                                    l8583 0E11                                      l7695 0B52  
                                    l8809 1F68                                      l8921 00D7  
                                    l8761 02EA                                      l8737 0275  
                                    l8577 0E02                                      l8585 0E14  
                                    l8915 00A5                                      l8675 05E5  
                                    l8747 02AA                                      l8771 031E  
                                    l8953 0169                                      l8961 0192  
                                    l8881 0060                                      l8689 0617  
                                    l8849 1391                                      _CFGS 0CAE  
                                    l8947 015A                                      l8957 0186  
                                    l8967 01A2                              __CFG_WDTE$ON 0000  
                                    l8977 01B8                                      l8899 0081  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u4205 169E                                      u5005 1E13  
                                    u4225 16AB                                      u6005 1E7F  
                                    u4255 16C1                                      u4185 1685  
                                    _PEIE 005E                                      u4615 03FF  
                                    u4555 03D9                                      u4715 0D77  
                                    u6315 12DA                                      u5275 1134  
                                    u4645 0412                                      u4725 0D87  
                                    u4805 0EDA                                      u4735 0DA7  
                                    u6335 12E4                                      u4585 03EC  
                                    u4745 0DB6                                      u4825 0F02  
                                    u6345 12EE                                      u4755 0DC0  
                                    u4915 0C45                                      u4835 0F08  
                                    u6355 12F6                                      u7315 1FCD  
                                    u7325 1FD2                                      u4945 0C6F  
                                    u4865 0F1E                                      u7355 1488  
                                    u4875 0F24                                      u4795 0ECA  
                                    u4975 0C8A                                      u8345 1589  
                                    u8530 1740                                      u8515 0CF6  
                                    u9315 0606                                      u8365 1593  
                                    u7645 0B90                                      u8375 159D  
                                    u8535 173E                                      u9175 0E40  
                                    u8385 15A5                                      u9195 0E60  
                                    u7595 0B61                                      u9285 05A9  
                                    u7695 13D8                                      u9625 13AA  
                                    u9575 1289                                      _LWLO 0CAD  
                                    u9765 00A3                                      u9775 00D5  
                                    u9865 0199                                      u9785 0119  
                                    _RSSI 00D2                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1F50  
              _setDimmerLights_DimmingRun 1F35                                      _Buz1 00AE  
                                    _Load 0134                                      _Temp 00DB  
                                    _main 1615                              ___ftpack@arg 0021  
                     __end_of_DlyOff_Main 0A4F                           __end_of_RF_Main 1B44  
                            ___ftpack@exp 0024                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1C07                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0C25                         ___bmul@multiplier 0024  
                            ___ftmul@cntr 003D                              ___ftmul@sign 003E  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2216 0024  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0020  
                            ___fttol@exp1 005C                              ___fttol@lval 0058  
       setDimmerLights_DimmingRun@command 0023   __end_of_getDimmerLights_Allow_Condition 1E59  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0022  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1E43  
                  _getDimmerLights_Status 1CD1                        ??_getDimmer_LoadGO 0021  
                        __end_of_LED_Main 1B5A                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CE                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01EC  
                         __end_of___awdiv 15BC                           __end_of___lbdiv 10C0  
                         __end_of___ftadd 0476                           __end_of___ftdiv 0DE1  
                         __end_of___ftneg 1BC8                                     u10000 06A7  
                                   u10005 0685                                     u10030 06E9  
                                   u10035 06C7                           __end_of___ftmul 0F45  
                         ___awdiv@divisor 0021                                     _T1CON 0018  
                         __end_of___fttol 0CAC                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1305                                     i1l843 08F1  
                                   i1l845 08E6                                     i1l854 0903  
                                   i1l839 08CC                                     i1l848 08EF  
                         ___awdiv@counter 0026             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0022                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1E85                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 1736   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 16D1                                     _Light 00D1  
                        __end_of_TMR1_ISR 1FC3                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C7E  
                                   _getAD 10C0                             ___awtoft@sign 002E  
                           ___ftpack@sign 0025               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0021                          __end_of_WDT_Main 1D91  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0026  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1BF1  
                      Flash_Memory_Read@i 0022                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1D6D  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 1736                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 00E5               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0021               ??_setDimmerLights_DimmingOn 0023  
                      ??_CC2500_SIDLEMode 0025                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1CA3                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 1670                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1B5E            getMain_All_LightsStatus@status 0021  
                      ??_setMemory_Modify 0021              setDimmerLights_OnOff@command 00E5  
                          _Exception_Main 063C                          ?_CC2500_WriteREG 0023  
                               ??_ADC_Set 0021                      _setSw_Initialization 1CC1  
                                  ??_main 006E                             ___fttol@sign1 0057  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0021  
            ??_DimmerLights_SelectPointer 0021                   _setControl_Lights_Table 0A4F  
                          _setMemory_Data 1C5A                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0023                                _Receive_OK 0370  
      setDimmerIntr_ControlStatus@command 0021                   _setDimmerLights_Dimming 14C5  
                               ??_IOC_ISR 007E                                 ??_IOC_Set 0021  
                             _DimmerIntr1 00BA                  _getMain_All_LightsStatus 1BD1  
                __size_of_setRFSW_Control 0043                        _RF_Timeout_Counter 1E04  
                 ??_Switch_Initialization 0026                    ?_setDimmerLights_OnOff 00E5  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0021  
                       ??_getRF_KeyStatus 0021                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 09E0                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006E                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0023  
                   _getDimmer_Load_Status 1BAE                                 ??_WDT_Set 0021  
                        __end_of___awtoft 0800                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 16D1                  _getMain_All_Error_Status 11FA  
                                  _IOCBF2 1CB2                                    i1l1190 0013  
                                  i1l1193 001B                                    i1l7061 08BC  
                                  i1l7055 08B4                                    i1l7049 08AD  
                                  i1l6523 10A6                                    i1l7067 08C4  
                                  i1l6525 10AF                                    i1l6535 10BE  
                                  i1l7097 08FC                                    i1l7089 08E8  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0023  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B0  
                                  u745_25 1FBD                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1F01  
                                  _WDTCON 0097                      Exception_Main@i_3535 0033  
                      DelayTime_1us@count 0021            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0064             __end_of_CC2500_PowerOnInitial 1E2E  
                                  _Dimmer 012D                                    _DlySw1 0164  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1D49  
              __end_of_Mcu_Initialization 1D7F                       __end_of_Buzzer_Main 14C5  
                                  _Memory 01BE                                    _Timer1 00C6  
                                  ___bmul 1D49                    __end_of_Exception_Main 0711  
                    Exception_Main@lights 0035                                    ___wmul 1FC3  
                               ??___awdiv 0025                                 ??___lbdiv 0071  
                               ??___ftadd 0048              __size_of_DelayOffPointSelect 000C  
                               ??___ftdiv 0035                                 ??___ftneg 0042  
                               ??___ftmul 0035                                 ??___fttol 0053  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0021  
                               ??___lwdiv 0025                    ??_setDimmerLights_Main 006E  
                  ??_setDimmerLights_Line 0021                                    _r_data 00D9  
                    Exception_Main@status 002F   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1DB7  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013         ??_getAll_DimmerIntr_Dimming_Sw_RF 0021  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1DA4  
                                  _s_data 00DA                    ??_setDimmerLights_SwOn 002E  
                                  _setLED 133E                                    _myMain 0120  
                    ??_RF_Timeout_Counter 0021                    __end_of_setMemory_Data 1C66  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0028  
                                  _setBuz 15BC                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0030               __end_of_Load_Initialization 1B3E  
        ??_setDimmerLights_Initialization 0021           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1EB5                   DimmerLights_TMR_1@count 0071  
        __end_of_setDimmerIntr_Dimming_Sw 1E6F                     ___ftmul@f3_as_product 003A  
               _setDimmerLights_DimmingOn 114F                  Flash_Memory_Read@address 0023  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1DDD  
             getMain_Lights_Count@status1 0022               __size_of_DimmerLights_IOC_1 002A  
                   __end_of_SwPointSelect 1C96               __size_of_DimmerLights_TMR_1 0069  
            __size_of_Flash_Memory_Modify 0052                   __size_of_LedPointSelect 000C  
         setDimmerIntr_Dimming_Sw@command 0021                        setTemp_Main@TempGO 00E6  
                        ___lbdiv@dividend 0072                       Flash_Memory_Write@i 0022  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1E2E  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0026  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0046  
         getDimmerIntr_DimmingValue@value 0023           setDimmerIntr_DimmingValue@value 0021  
                               ?_LED_Main 0070                                ___ftadd@f1 0042  
                              ___ftadd@f2 0045                      _getRF_KeyStatus$5273 0023  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0032  
                              ___ftdiv@f2 002F                                ___ftdiv@f3 003A  
                              ___ftneg@f1 003F                                ___awtoft@c 0029  
                     ___bmul@multiplicand 0021              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002F                                ___ftmul@f2 0032  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004F  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 107F                             __end_of_getAD 10E1  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0022                 setMemory_LoopSave@command 0022  
                      _LED_Initialization 1B52                           _getSw_KeyStatus 1D26  
               ??_setControl_Lights_Table 006E                        getRF_KeyStatus@key 0022  
                         ?_setMemory_Data 0021          ??_getDimmerLights_PercentToValue 005D  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006C  
           ??_Flash_Memory_Initialization 0063                          ___lbdiv@quotient 0074  
                    _getMain_Lights_Count 1BE6                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 01FA         setDimmerIntr_ControlStatus@lights 0023  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1C36  
              __end_of_set_TimeoutCleared 1B77           setDimmerIntr_MaxmumValue@lights 0065  
                      __size_of_getRxData 0072                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1C2A  
                    __size_of_setLED_Main 0036                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0024                       _Temp_Initialization 1B44  
                      ??_CC2500_WriteByte 0021                                 ?_Division 0075  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 147B                         ??_setRFSW_Control 00E5  
             ?_setDimmerLights_DimmingRun 0023                         __end_of_Temp_Main 1B4A  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002E  
                              ??_LED_Main 0026                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B4A                             ??_Switch_Main 0033  
                          DelayTime_1us@i 0023                            DelayTime_1us@j 0025  
                    ??_LED_Initialization 0026                              _DimmerLights 00CF  
                       LedPointSelect@led 0022     getAll_DimmerIntr_Dimming_Sw_RF@status 0021  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002D                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1615                            _getDelayOff_GO 1CF3  
                     _CC2500_WriteCommand 1F1B                      ?_Temp_Initialization 0070  
                                 ?___bmul 0021                          ??_setDelayOff_GO 0068  
       __end_of_DimmerIntr_Initialization 1ECE             ??_DimmerLights_Initialization 0022  
                                 ?___wmul 0021                                ??_TMR1_ISR 0072  
                           ?_setTemp_Main 0070                                _getLoad_AD 0B33  
                              ??_TMR1_Set 0021                                __pintentry 0004  
                  ??_setSw_Initialization 0025                                _getLoad_OK 1B9E  
                      __size_of_setTxData 00BB                                   ?_setLED 0023  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1B90                                   ?_setBuz 002A  
                               ?___awtoft 0029                                 ?___ftpack 0021  
                              _getTemp_AD 13B4        __end_of_DimmerLights_SelectPointer 1C2A  
              _DimmerLights_SelectPointer 1C1E                                ??_WDT_Main 0021  
            __end_of_setRF_Initialization 1C12                        _setRFSW_AdjControl 0BA5  
                  __end_of_setProductData 1C36             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1BB6                                   _IOC_Set 1BF1  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006B  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 1262                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1EE7                    __size_of_CC2500_RxData 006E  
                  __size_of_CC2500_TxData 006D                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1B41  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0076                                   _WDT_Set 1BFC  
         __end_of_setControl_Lights_Table 0AC1                           setRF_Main@error 00EB  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0021  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 1516  
                 ??_setLoad_AH_AL_Restore 0021                       getCmd_Status@number 0021  
            __end_of_CC2500_FrequencyCabr 1C8A                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0023         __size_of_setDimmerIntr_Dimming_RF 0018  
       __size_of_setDimmerIntr_Dimming_Sw 0016                         __end_of_getBuz_GO 1D15  
               ?_setDimmerIntr_Dimming_RF 0021                       ??_Flash_Memory_Main 0027  
               ?_setDimmerIntr_Dimming_Sw 0021                       ??_Flash_Memory_Read 0021  
                  __end_of_getDelayOff_GO 1D04            __end_of_getDimmerLights_Status 1CE2  
                       __end_of_getRxData 0B33                   __end_of_getSw_KeyStatus 1D37  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0021  
                    ??_setRFSW_AdjControl 0066                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0063  
                                 ___awdiv 1568                                   ___lbdiv 109F  
                                 ___ftadd 0380                                   ___ftdiv 0D38  
                                 ___ftneg 1BBF                           __size_of___wmul 001E  
                                 ___ftmul 0E91                                   ___fttol 0C25  
                     __end_of_Switch_Main 1B9E                                   ___lwdiv 12CE  
              ??_getMain_All_LightsStatus 0021                   ??_Buzzer_Initialization 0021  
                         _getRF_KeyStatus 1D15                                ??___awtoft 002C  
                              ??___ftpack 0026                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0069                           __size_of_setBuz 0059  
                                 __ptext1 1377                                   __ptext2 1DDD  
                                 __ptext3 13B4                                   __ptext4 0B33  
                                 __ptext5 10C0                                   __ptext6 1D7F  
                                 __ptext7 0002                                   __ptext8 1B47  
                                 __ptext9 0DE1                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001C                ??_getMain_All_Error_Status 0021  
                 ??_setDimmerLights_OnOff 00E6                           ?_setProductData 0063  
               __end_of_Flash_Memory_Main 1298                 __end_of_Flash_Memory_Read 1F01  
                 ??_setDimmerLights_SwOff 0023                                _setRF_Main 0565  
                 ??_myMain_Initialization 0021                             _DelayOff_Main 1B4E  
                       _DimmerLights_Main 1F50            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0023                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1B7D                __end_of_CC2500_ClearRXFIFO 1B66  
                ??_setTemp_Initialization 0021                __end_of_CC2500_ClearTXFIFO 1B6A  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00ED                            _LedPointSelect 1C4E  
                         getTemp_AD@ADRES 0027                       _DelayOffPointSelect 1C12  
                                 clrloop0 1B84            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1B72                      end_of_initialization 0046  
               ??_DelayOff_Initialization 0024                         _CC2500_InitSetREG 11A1  
                           _DelayTime_1us 1129                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 11FA        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1B7D                __end_of_setRF_TransceiveGO 1DA4  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006E  
                    Flash_Memory_Read@ret 0024                                   initloop 1B7E  
                              _setSw_Main 01FA                     CC2500_ReadByte@loop_b 0022  
                  setDimmerLights_SwOn@sw 002E                         _CC2500_ReadStatus 1104  
                    Flash_Memory_Modify@i 0026                     _setLED_Initialization 1D5B  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0025  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0972                             _CC2500_TxData 0905  
                     ??_CC2500_InitSetREG 0026             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1516  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0021                              __pstringtext 1000  
                           _setCmd_Status 1ECE                       _Flash_Memory_Unlock 1BC8  
                     ??_CC2500_ReadStatus 0023                   CC2500_InitSetREG@loop_c 0029  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0025                   setTemp_Main@DangerValue 00E9  
                  setSw_Initialization@sw 0025                 __end_of_DimmerLights_Main 1F6C  
                      _Mcu_Initialization 1D6D                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1B62                      __end_of_my_MainTimer 13B4  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C5A                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002E          setDimmerIntr_DimmingValue@lights 0023  
        getDimmerIntr_DimmingValue@lights 0022                 __end_of_CC2500_InitSetREG 11CB  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065                            ?_DelayTime_1us 0021  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 1129                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0023           getMain_All_Error_Status@command 0026  
                             ___ftdiv@exp 003D         __end_of_setDimmerLights_DimmingOn 1177  
                        ??_Exception_Main 002E                            __end_of_IO_Set 1F1B  
                    _setRF_Initialization 1C07                        _setMemory_LoopSave 1DCA  
                             _Switch_Main 1B97                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1D26  
                        ??_setMemory_Data 0022                               ___ftmul@exp 0039  
                   _CC2500_PowerOnInitial 1E19               ??_DimmerIntr_Initialization 0021  
                    ??_Mcu_Initialization 0022                     ??_DelayOffPointSelect 0021  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0021  
               DimmerLights_IOC_1@dimming 007D                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1D5B       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0066                            __end_of___wmul 1FE1  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001E             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0022                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0068                            __end_of_setLED 1377  
                           __pbitbssBANK0 0370             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 0035                            __end_of_setBuz 1615  
              __end_of_DimmerLights_IOC_1 11A1                      _CC2500_FrequencyCabr 1C7E  
                 ??_getDimmer_Load_Status 0021                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 13F4                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 0905                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 004A  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1BA6                     ??_Flash_Memory_Modify 0025  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0021  
              __end_of_CC2500_InitPATable 2000           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0021                     ??_Flash_Memory_Unlock 0021  
                    __end_of_setTemp_Main 0E91                            ??_RF_RxDisable 0025  
  __end_of_getDimmerLights_PercentToValue 1800   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 179B                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 005F  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1B72  
       __end_of_setDimmerIntr_MaxmumValue 1C42                                  ??_IO_Set 0021  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 0169  
                       __size_of_Division 000D                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0040                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 1B47  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0021  
                               _Rx_Length 00D3                     setProductData@address 0065  
                     Exception_Main@count 0030                       Exception_Main@error 0036  
                                ??___bmul 0022                                  ??___wmul 0025  
                  __size_of_SwPointSelect 000C          __end_of_getMain_All_LightsStatus 1BDB  
                               _Tx_Length 00D7                               __pdataBANK4 0220  
                                ??_setLED 0024                                  ?_ADC_Set 0070  
                                ??_setBuz 002C                           ??_DelayOff_Main 0069  
                       ??_CC2500_ReadByte 0021               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 122D                          _CC2500_SIDLEMode 1B6A  
              __size_of_DimmerLights_Main 001C                        setMemory_Data@data 0021  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0023  
                           ??_setLED_Main 0023                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002F  
                               ___latbits 0003                          _setMemory_Modify 1DB7  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E5                 setRF_TransceiveGO@command 0022  
                           __pcstackBANK3 01EC                      ??_set_TimeoutCleared 0021  
               _DimmerIntr_Initialization 1EB5                           ??_DelayTime_1us 0023  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0068  
                       ??_CC2500_PowerRST 0027                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0022  
                            ??_TouchPower 0021                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0063  
             setDimmerLights_DimmingOn@sw 0023                         ??_CC2500_WriteREG 0024  
                           ??_setRF_Learn 0021                             _DimmerLights1 015C  
                   CC2500_WriteREG@w_addr 0025                     setDelayOff_GO@command 0066  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0025  
           __end_of_setLoad_AH_AL_Restore 1F88                  setRFSW_AdjControl@status 0068  
                         ??_CC2500_TxData 0025                                 __pnvBANK1 00ED  
                          getRxData@error 00E9               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1B5E                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0031                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D7                          ___lwdiv@dividend 0023  
                   DelayOffPointSelect@sw 0022                             _getCmd_Status 1D37  
                              setBuz@time 002A                           ??_setCmd_Status 0022  
                     setDelayOff_GO@value 0067                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002B  
                  _setTemp_Initialization 1B37                                 _getBuz_GO 1D04  
                ?_setDimmerLights_Dimming 006B       __end_of_Flash_Memory_Initialization 0565  
             _Flash_Memory_Initialization 0476                                  ?___awdiv 0021  
                               __ptext100 1CF3                                 __ptext101 1D37  
                                ?___lbdiv 0070                                 __ptext110 0C25  
                               __ptext102 14C5                                 __ptext111 1BBF  
                               __ptext103 0F45                                 __ptext120 1B89  
                               __ptext112 0D38                                 __ptext104 1D91  
                               __ptext121 1B36                                 __ptext113 0380  
                               __ptext105 1736                                 __ptext130 1CD1  
                               __ptext122 1EB5                                 __ptext114 07DE  
                               __ptext106 1CE2                                 __ptext131 1C1E  
                               __ptext123 1B4E                                 __ptext115 1670  
                               __ptext107 1C36                                 __ptext140 1BB6  
                               __ptext132 1B4A                                 __ptext124 09E0  
                               __ptext116 1CA3                                 __ptext108 1E59  
                               __ptext141 1177                                 __ptext133 1B77  
                               __ptext125 1C2A                                 __ptext117 1E43  
                               __ptext109 16D1                                  ?___ftadd 0042  
                               __ptext142 1C96                                 __ptext134 1C12  
                               __ptext126 122D                                 __ptext118 1B9E  
                               __ptext143 109F                                 __ptext135 147B  
                               __ptext127 15BC                                 __ptext119 11FA  
                               __ptext136 1B38                                 __ptext128 1568  
                               __ptext129 1305                                 __ptext138 1FA5  
                               __ptext139 089C                                 _getRxData 0AC1  
                                ?___ftdiv 002F                                  ?___ftneg 003F  
                                ?___ftmul 002F                                  ?___fttol 004F  
                   __size_of_my_MainTimer 003D                                  ?___lwdiv 0021  
                 __end_of_setRFSW_Control 1437                          ??_setProductData 0064  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1B3B                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1E43  
                     __size_of_setSw_Main 0186              CC2500_ReadStatus@status_addr 0024  
      __end_of_getDimmerIntr_DimmingValue 1CB2              ??_setDimmerIntr_DimmingValue 0022  
              _getDimmerIntr_DimmingValue 1CA3                    CC2500_WriteByte@loop_a 0022  
          __size_of_setDimmerLights_OnOff 00CD                                 _r_address 00D8  
           __end_of_setDimmerLights_OnOff 07DE            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 133E  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1DF0  
                          __size_of_getAD 0021                          ___lwdiv@quotient 0026  
                           _SwPointSelect 1C8A                       __end_of_setLED_Main 12CE  
                        ??_getDelayOff_GO 0023                    ??_setRF_Initialization 0021  
             __end_of_Temp_Initialization 1B47                         _CC2500_rfSettings 102F  
                          ___wmul@product 0025                                  _LED_Main 1B56  
                         SwPointSelect@sw 0022                                 clear_ram0 1B83  
                CC2500_InitPATable@loop_d 0028                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1377                                 _setTxData 0F45  
     __end_of_DimmerLights_Initialization 1B90               _DimmerLights_Initialization 1B89  
                      _CC2500_ClearRXFIFO 1B62                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1B66                  setRF_DimmerLights@lights 006A  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1E04  
                       ??_Timeout_Counter 0021                                ?_getBuz_GO 0021  
                setRF_DimmerLights@status 0069      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 11CB                                ?_getRxData 0070  
                            ??_getLoad_AD 0025                                  _TMR1_ISR 1FA5  
                  CC2500_InitSetREG@temp1 0027                    CC2500_InitSetREG@temp2 0028  
                            ??_getLoad_OK 0021                                  _TMR1_Set 1C72  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1D91                                  _RF_Count 0132  
                    __end_of_RF_RxDisable 1CC1                              ??_getTemp_AD 0025  
             __end_of_CC2500_WriteCommand 1F35                    ??_CC2500_FrequencyCabr 0027  
                                _WDT_Main 1D7F                   DlyOff_Initialization@sw 0023  
                   getSw_KeyStatus@status 0022                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0021                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B0                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00CD  
                            setSw_Main@sw 0032                               ??_Load_Main 0029  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0027  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1C72  
                          ?_SwPointSelect 0070                               getAD@adcon0 0024  
                             getAD@adcon1 0021                            setLED_Main@led 0025  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 0834  
                   _DlyOff_Initialization 1B77         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0025                                  _Division 1C96  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0025  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1E9D               setDimmerLights_OnOff@lights 00E8  
                _setDimmerIntr_Dimming_Sw 1E59                                  _Fosc_Set 1B5A  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 00E6  
                      __end_of_getLoad_AD 0BA5                        __end_of_getLoad_OK 1BA6  
                   _Switch_Initialization 1B6E         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0021                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 13F4  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1066                         getLoad_AD@channel 0027  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0021  
            Flash_Memory_Initialization@i 0064                                  _SwDetect 00D6  
                             ??_Temp_Main 0067                          getCmd_Status@cmd 0022  
                        setCmd_Status@cmd 0021                         setRFSW_Control@sw 00E7  
           _getMain_All_Error_Status$3523 0022             _getMain_All_Error_Status$3524 0024  
                __end_of_getDimmer_LoadGO 1BAE                       _Load_Initialization 1B3B  
        ??_getDimmerLights_ValueToPercent 005D           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0024                              _setTemp_Main 0DE1  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002F  
                                ___awtoft 07DE                          ??_LedPointSelect 0021  
                                ___ftpack 1670             __size_of_getMain_Lights_Count 000B  
                  getDimmer_LoadGO@loadgo 0021                         getTemp_AD@channel 0026  
                            ??_setRF_Main 00EA                      CC2500_WriteREG@value 0023  
                             _setLED_Main 1298                __end_of_setRF_DimmerLights 179B  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0024                          getDelayOff_GO@sw 0023  
           __end_of_getDimmer_Load_Status 1BB6                          setDelayOff_GO@sw 006D  
                         ___lwdiv@divisor 0021                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0028                                  __ptext10 1B44  
                                __ptext11 1B37                                  __ptext20 1E6F  
                                __ptext12 1B97                                  __ptext21 1B6E  
                                __ptext13 01FA                                  __ptext30 0BA5  
                                __ptext22 1CC1                                  __ptext14 1DF0  
                                __ptext31 1DB7                                  __ptext23 1B41  
                                __ptext15 114F                                  __ptext40 1E19  
                                __ptext32 1F35                                  __ptext24 0565  
                                __ptext16 1D26                                  __ptext41 1B6A  
                                __ptext33 1D15                                  __ptext25 0AC1  
                                __ptext17 1C8A                                  __ptext50 1F1B  
                                __ptext42 1437                                  __ptext34 1D04  
                                __ptext26 0800                                  __ptext18 1E2E  
                                __ptext51 1B5E                                  __ptext43 11A1  
                                __ptext35 1CB2                                  __ptext27 1DCA  
                                __ptext19 1B72                                  __ptext60 1BF1  
                                __ptext52 1E04                                  __ptext44 1FE1  
                                __ptext36 0905                                  __ptext28 0A4F  
                                __ptext61 1B5A                                  __ptext53 1066  
                                __ptext45 10E1                                  __ptext37 0972  
                                __ptext29 13F4                                  __ptext70 1B3B  
                                __ptext62 1B90                                  __ptext54 1B3E  
                                __ptext46 1C7E                                  __ptext38 1104  
                                __ptext71 1F6C                                  __ptext63 004A  
                                __ptext55 1C07                                  __ptext47 1129  
                                __ptext39 1F88                                  __ptext80 1C5A  
                                __ptext72 1B56                                  __ptext64 1BE6  
                                __ptext56 1D6D                                  __ptext48 1B66  
                                __ptext81 11CB                                  __ptext73 1298  
                                __ptext65 1BAE                                  __ptext57 1BFC  
                                __ptext49 1B62                                  __ptext90 1C4E  
                                __ptext82 1BC8                                  __ptext74 1B52  
                                __ptext66 1BA6                                  __ptext58 1C72  
                                __ptext91 1E9D                                  __ptext83 1EE7  
                                __ptext75 1D5B                                  __ptext67 1DA4  
                                __ptext59 1F01                                  __ptext92 1C42  
                                __ptext84 063C                                  __ptext76 1262  
                                __ptext68 1FC3                                  __ptext93 1E85  
                                __ptext85 1BDB                                  __ptext77 1516  
                                __ptext69 12CE                                  __ptext94 0CAC  
                                __ptext86 1F50                                  __ptext78 1C66  
                                __ptext95 1D49                                  __ptext87 0834  
                                __ptext79 0476                                  __ptext96 1ECE  
                                __ptext88 0711                                  __ptext97 1BD1  
                                __ptext89 133E                                  __ptext98 179B  
                                __ptext99 0E91                                  __product 0220  
                 ??_setLED_Initialization 0025                  ??_getDimmerLights_Status 0023  
            __end_of_getDimmerLights_Line 1BE6              __end_of_setDimmerLights_Main 089C  
            __end_of_setDimmerLights_Line 1CF3                        _DimmerLights_IOC_1 1177  
            __end_of_setDimmerLights_SwOn 1262                              ??_setSw_Main 0030  
                  ??_setRF_TimeoutCleared 0021              ??_setDimmerLights_DimmingRun 0024  
                           setLED@command 0023                             __size_of_main 005B  
                             _setRF_Learn 1DF0        __size_of_DimmerIntr_Initialization 0019  
                         ??_getCmd_Status 0021                        _DimmerLights_TMR_1 089C  
                __end_of_CC2500_SIDLEMode 1B6E                setDimmerLights_Main@lights 00E9  
             __end_of_DelayOffPointSelect 1C1E                CC2500_WriteCommand@command 0024  
                         _CC2500_ReadByte 1F88                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1FE1                  __end_of_setMemory_Modify 1DCA  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 063C  
                             ??_getBuz_GO 0023                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 105E  
                             ??_getRxData 00E8                              getLoad_OK@ok 0021  
              __end_of_RF_Timeout_Counter 1E19                                  main@argc 01EC  
                                main@argv 01EE                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6300 0023       getDimmerLights_ValueToPercent@value 005F  
                         _CC2500_PowerRST 1437                  __size_of_getSw_KeyStatus 0011  
      __end_of_setDimmerIntr_DimmingValue 1C4E                _setDimmerIntr_DimmingValue 1C42  
             __end_of_Flash_Memory_Modify 1568                               _setLog_Code 0800  
             __end_of_Flash_Memory_Unlock 1BD1                           ??_SwPointSelect 0021  
                         _CC2500_WriteREG 10E1                        __end_of_setSw_Main 0380  
                   ??_Load_Initialization 0023                      ??_DimmerLights_IOC_1 007A  
         getDimmerLights_PercentToValue@i 0060       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 0371                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                            Division@result 0079  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0021  
              setDimmerLights_Line@lights 0021                   setDimmerLights_SwOff@sw 0023  
             __size_of_setMemory_LoopSave 0013                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0026                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 006A                           setDelayOff_GO@j 006B  
                         setDelayOff_GO@k 006C                   ??_CC2500_PowerOnInitial 002A  
                   setTemp_Main@SafeValue 00E7    __end_of_setDimmerLights_Initialization 1B37  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1B36  
              ?_setDimmerIntr_MaxmumValue 0063                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0021                    CC2500_InitPATable@temp 0027  
                         getLoad_AD@ADRES 002A                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1B3E                               getLoad_AD@i 002C  
                             getLoad_AD@j 0029                               getLoad_AD@k 0028  
                    _Flash_Memory_Erasing 1C66                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D4                   __size_of_Exception_Main 00D5  
                           Division@value 0078           __end_of_DelayOff_Initialization 1B4E  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1B52  
                     ??_RF_Initialization 0022                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0CAC               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 0072          __size_of_setDimmerLights_Dimming 0051  
             getDimmer_Load_Status@status 0021      __size_of_Flash_Memory_Initialization 00EF  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0066  
                   setMemory_Data@address 0023                     __end_of_DelayTime_1us 114F  
                 __end_of_CC2500_ReadByte 1FA5              __end_of_setSw_Initialization 1CD1  
                         _Timeout_Counter 1E6F           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 0060                              _RF_RxDisable 1CB2  
              __end_of_LED_Initialization 1B56            __end_of_setTemp_Initialization 1B38  
                             Division@num 0075                   setMemory_Modify@command 0022  
                 DimmerLights_IOC_1@count 007C                 __end_of_RF_Initialization 1B41  
                   __end_of_CC2500_RxData 09E0                     __end_of_CC2500_TxData 0972  
                   _setLoad_AH_AL_Restore 1F6C                   __end_of_CC2500_PowerRST 147B  
