

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Feb 11 11:46:48 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942  0000                     	;# 
  1943  0001                     	;# 
  1944  0002                     	;# 
  1945  0003                     	;# 
  1946  0004                     	;# 
  1947  0005                     	;# 
  1948  0006                     	;# 
  1949  0007                     	;# 
  1950  0008                     	;# 
  1951  0009                     	;# 
  1952  000A                     	;# 
  1953  000B                     	;# 
  1954  000C                     	;# 
  1955  000D                     	;# 
  1956  000E                     	;# 
  1957  0010                     	;# 
  1958  0011                     	;# 
  1959  0012                     	;# 
  1960  0015                     	;# 
  1961  0016                     	;# 
  1962  0016                     	;# 
  1963  0017                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  001B                     	;# 
  1968  001C                     	;# 
  1969  008C                     	;# 
  1970  008D                     	;# 
  1971  008E                     	;# 
  1972  0090                     	;# 
  1973  0091                     	;# 
  1974  0092                     	;# 
  1975  0095                     	;# 
  1976  0096                     	;# 
  1977  0097                     	;# 
  1978  0099                     	;# 
  1979  009A                     	;# 
  1980  009B                     	;# 
  1981  009B                     	;# 
  1982  009C                     	;# 
  1983  009D                     	;# 
  1984  009E                     	;# 
  1985  010C                     	;# 
  1986  010D                     	;# 
  1987  010E                     	;# 
  1988  0116                     	;# 
  1989  0117                     	;# 
  1990  011D                     	;# 
  1991  018C                     	;# 
  1992  018D                     	;# 
  1993  018E                     	;# 
  1994  0191                     	;# 
  1995  0191                     	;# 
  1996  0192                     	;# 
  1997  0193                     	;# 
  1998  0193                     	;# 
  1999  0194                     	;# 
  2000  0195                     	;# 
  2001  0196                     	;# 
  2002  0197                     	;# 
  2003  0199                     	;# 
  2004  019A                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019C                     	;# 
  2010  019C                     	;# 
  2011  019D                     	;# 
  2012  019E                     	;# 
  2013  019F                     	;# 
  2014  020D                     	;# 
  2015  0210                     	;# 
  2016  0211                     	;# 
  2017  0211                     	;# 
  2018  0212                     	;# 
  2019  0212                     	;# 
  2020  0213                     	;# 
  2021  0213                     	;# 
  2022  0214                     	;# 
  2023  0214                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0216                     	;# 
  2028  0216                     	;# 
  2029  0217                     	;# 
  2030  0217                     	;# 
  2031  0291                     	;# 
  2032  0291                     	;# 
  2033  0292                     	;# 
  2034  0293                     	;# 
  2035  0298                     	;# 
  2036  0298                     	;# 
  2037  0299                     	;# 
  2038  029A                     	;# 
  2039  0394                     	;# 
  2040  0395                     	;# 
  2041  0396                     	;# 
  2042  0FE4                     	;# 
  2043  0FE5                     	;# 
  2044  0FE6                     	;# 
  2045  0FE7                     	;# 
  2046  0FE8                     	;# 
  2047  0FE9                     	;# 
  2048  0FEA                     	;# 
  2049  0FEB                     	;# 
  2050  0FED                     	;# 
  2051  0FEE                     	;# 
  2052  0FEF                     	;# 
  2053  0000                     	;# 
  2054  0001                     	;# 
  2055  0002                     	;# 
  2056  0003                     	;# 
  2057  0004                     	;# 
  2058  0005                     	;# 
  2059  0006                     	;# 
  2060  0007                     	;# 
  2061  0008                     	;# 
  2062  0009                     	;# 
  2063  000A                     	;# 
  2064  000B                     	;# 
  2065  000C                     	;# 
  2066  000D                     	;# 
  2067  000E                     	;# 
  2068  0010                     	;# 
  2069  0011                     	;# 
  2070  0012                     	;# 
  2071  0015                     	;# 
  2072  0016                     	;# 
  2073  0016                     	;# 
  2074  0017                     	;# 
  2075  0018                     	;# 
  2076  0019                     	;# 
  2077  001A                     	;# 
  2078  001B                     	;# 
  2079  001C                     	;# 
  2080  008C                     	;# 
  2081  008D                     	;# 
  2082  008E                     	;# 
  2083  0090                     	;# 
  2084  0091                     	;# 
  2085  0092                     	;# 
  2086  0095                     	;# 
  2087  0096                     	;# 
  2088  0097                     	;# 
  2089  0099                     	;# 
  2090  009A                     	;# 
  2091  009B                     	;# 
  2092  009B                     	;# 
  2093  009C                     	;# 
  2094  009D                     	;# 
  2095  009E                     	;# 
  2096  010C                     	;# 
  2097  010D                     	;# 
  2098  010E                     	;# 
  2099  0116                     	;# 
  2100  0117                     	;# 
  2101  011D                     	;# 
  2102  018C                     	;# 
  2103  018D                     	;# 
  2104  018E                     	;# 
  2105  0191                     	;# 
  2106  0191                     	;# 
  2107  0192                     	;# 
  2108  0193                     	;# 
  2109  0193                     	;# 
  2110  0194                     	;# 
  2111  0195                     	;# 
  2112  0196                     	;# 
  2113  0197                     	;# 
  2114  0199                     	;# 
  2115  019A                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019C                     	;# 
  2121  019C                     	;# 
  2122  019D                     	;# 
  2123  019E                     	;# 
  2124  019F                     	;# 
  2125  020D                     	;# 
  2126  0210                     	;# 
  2127  0211                     	;# 
  2128  0211                     	;# 
  2129  0212                     	;# 
  2130  0212                     	;# 
  2131  0213                     	;# 
  2132  0213                     	;# 
  2133  0214                     	;# 
  2134  0214                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0216                     	;# 
  2139  0216                     	;# 
  2140  0217                     	;# 
  2141  0217                     	;# 
  2142  0291                     	;# 
  2143  0291                     	;# 
  2144  0292                     	;# 
  2145  0293                     	;# 
  2146  0298                     	;# 
  2147  0298                     	;# 
  2148  0299                     	;# 
  2149  029A                     	;# 
  2150  0394                     	;# 
  2151  0395                     	;# 
  2152  0396                     	;# 
  2153  0FE4                     	;# 
  2154  0FE5                     	;# 
  2155  0FE6                     	;# 
  2156  0FE7                     	;# 
  2157  0FE8                     	;# 
  2158  0FE9                     	;# 
  2159  0FEA                     	;# 
  2160  0FEB                     	;# 
  2161  0FED                     	;# 
  2162  0FEE                     	;# 
  2163  0FEF                     	;# 
  2164                           
  2165                           	psect	idataBANK4
  2166  1026                     __pidataBANK4:	
  2167                           
  2168                           ;initializer for __product
  2169  1026  3463               	retlw	99
  2170  1027  3402               	retlw	2
  2171  1028  3400               	retlw	0
  2172  1029  3400               	retlw	0
  2173  102A  3400               	retlw	0
  2174  102B  3400               	retlw	0
  2175  102C  3400               	retlw	0
  2176  102D  3400               	retlw	0
  2177  102E  3400               	retlw	0
  2178  102F  3400               	retlw	0
  2179  1030  3400               	retlw	0
  2180  1031  3400               	retlw	0
  2181  1032  34FF               	retlw	255
  2182  1033  34FF               	retlw	255
  2183  1034  34FF               	retlw	255
  2184  1035  3400               	retlw	0
  2185  1036  3400               	retlw	0
  2186  1037  3400               	retlw	0
  2187  1038  3400               	retlw	0
  2188  1039  3400               	retlw	0
  2189  103A  3400               	retlw	0
  2190  103B  3400               	retlw	0
  2191  103C  3400               	retlw	0
  2192  103D  3400               	retlw	0
  2193  103E  3400               	retlw	0
  2194  103F  3400               	retlw	0
  2195  1040  3400               	retlw	0
  2196  1041  3400               	retlw	0
  2197  1042  3400               	retlw	0
  2198  1043  3400               	retlw	0
  2199  1044  3400               	retlw	0
  2200  1045  3400               	retlw	0
  2201                           
  2202                           	psect	stringtext
  2203  1800                     __pstringtext:	
  2204  1800                     _CC2500_registers_address:	
  2205  1800  3403               	retlw	3
  2206  1801  3416               	retlw	22
  2207  1802  3417               	retlw	23
  2208  1803  341E               	retlw	30
  2209  1804  341F               	retlw	31
  2210  1805  3420               	retlw	32
  2211  1806  342A               	retlw	42
  2212  1807  342B               	retlw	43
  2213  1808  340B               	retlw	11
  2214  1809  340C               	retlw	12
  2215  180A  340D               	retlw	13
  2216  180B  340E               	retlw	14
  2217  180C  340F               	retlw	15
  2218  180D  3410               	retlw	16
  2219  180E  3411               	retlw	17
  2220  180F  3412               	retlw	18
  2221  1810  3413               	retlw	19
  2222  1811  3414               	retlw	20
  2223  1812  340A               	retlw	10
  2224  1813  3415               	retlw	21
  2225  1814  3421               	retlw	33
  2226  1815  3422               	retlw	34
  2227  1816  3418               	retlw	24
  2228  1817  3419               	retlw	25
  2229  1818  341A               	retlw	26
  2230  1819  341B               	retlw	27
  2231  181A  341C               	retlw	28
  2232  181B  341D               	retlw	29
  2233  181C  3423               	retlw	35
  2234  181D  3424               	retlw	36
  2235  181E  3425               	retlw	37
  2236  181F  3426               	retlw	38
  2237  1820  3429               	retlw	41
  2238  1821  342C               	retlw	44
  2239  1822  342D               	retlw	45
  2240  1823  342E               	retlw	46
  2241  1824  3400               	retlw	0
  2242  1825  3401               	retlw	1
  2243  1826  3402               	retlw	2
  2244  1827  3407               	retlw	7
  2245  1828  3408               	retlw	8
  2246  1829  3409               	retlw	9
  2247  182A  3406               	retlw	6
  2248  182B  3404               	retlw	4
  2249  182C  3405               	retlw	5
  2250  182D  3427               	retlw	39
  2251  182E  3428               	retlw	40
  2252  182F                     __end_of_CC2500_registers_address:	
  2253  182F                     _CC2500_rfSettings:	
  2254  182F  3407               	retlw	7
  2255  1830  3407               	retlw	7
  2256  1831  3430               	retlw	48
  2257  1832  3487               	retlw	135
  2258  1833  346B               	retlw	107
  2259  1834  34F8               	retlw	248
  2260  1835  347F               	retlw	127
  2261  1836  343F               	retlw	63
  2262  1837  3409               	retlw	9
  2263  1838  3400               	retlw	0
  2264  1839  345C               	retlw	92
  2265  183A  34A7               	retlw	167
  2266  183B  3462               	retlw	98
  2267  183C  3486               	retlw	134
  2268  183D  3483               	retlw	131
  2269  183E  3403               	retlw	3
  2270  183F  3422               	retlw	34
  2271  1840  34F8               	retlw	248
  2272  1841  3400               	retlw	0
  2273  1842  3444               	retlw	68
  2274  1843  34B6               	retlw	182
  2275  1844  3410               	retlw	16
  2276  1845  3418               	retlw	24
  2277  1846  341D               	retlw	29
  2278  1847  341C               	retlw	28
  2279  1848  34C7               	retlw	199
  2280  1849  3400               	retlw	0
  2281  184A  34B2               	retlw	178
  2282  184B  34EA               	retlw	234
  2283  184C  340A               	retlw	10
  2284  184D  3400               	retlw	0
  2285  184E  3411               	retlw	17
  2286  184F  3459               	retlw	89
  2287  1850  3488               	retlw	136
  2288  1851  3431               	retlw	49
  2289  1852  340B               	retlw	11
  2290  1853  342F               	retlw	47
  2291  1854  342E               	retlw	46
  2292  1855  3406               	retlw	6
  2293  1856  3404               	retlw	4
  2294  1857  3405               	retlw	5
  2295  1858  3400               	retlw	0
  2296  1859  3430               	retlw	48
  2297  185A  34D3               	retlw	211
  2298  185B  3491               	retlw	145
  2299  185C  3441               	retlw	65
  2300  185D  3400               	retlw	0
  2301  185E                     __end_of_CC2500_rfSettings:	
  2302  185E                     _CC2500_patable_vaule:	
  2303  185E  34FE               	retlw	254
  2304  185F  34FE               	retlw	254
  2305  1860  34FE               	retlw	254
  2306  1861  34FE               	retlw	254
  2307  1862  34FE               	retlw	254
  2308  1863  34FE               	retlw	254
  2309  1864  34FE               	retlw	254
  2310  1865  34FE               	retlw	254
  2311  1866                     __end_of_CC2500_patable_vaule:	
  2312                           
  2313                           	psect	nvBANK1
  2314  00E3                     __pnvBANK1:	
  2315  00E3                     _product:	
  2316  00E3                     	ds	1
  2317  000C                     _PORTA	set	12
  2318  000D                     _PORTB	set	13
  2319  000E                     _PORTC	set	14
  2320  0018                     _T1CON	set	24
  2321  0017                     _TMR1H	set	23
  2322  0016                     _TMR1L	set	22
  2323  005F                     _GIE	set	95
  2324  005B                     _IOCIE	set	91
  2325  0058                     _IOCIF	set	88
  2326  005E                     _PEIE	set	94
  2327  0060                     _RA0	set	96
  2328  0064                     _RA4	set	100
  2329  0066                     _RA6	set	102
  2330  0067                     _RA7	set	103
  2331  0068                     _RB0	set	104
  2332  0069                     _RB1	set	105
  2333  006A                     _RB2	set	106
  2334  006B                     _RB3	set	107
  2335  006D                     _RB5	set	109
  2336  0070                     _RC0	set	112
  2337  0071                     _RC1	set	113
  2338  0073                     _RC3	set	115
  2339  0074                     _RC4	set	116
  2340  0075                     _RC5	set	117
  2341  0088                     _TMR1IF	set	136
  2342  009D                     _ADCON0	set	157
  2343  009E                     _ADCON1	set	158
  2344  009C                     _ADRESH	set	156
  2345  009B                     _ADRESL	set	155
  2346  0099                     _OSCCON	set	153
  2347  008C                     _TRISA	set	140
  2348  008D                     _TRISB	set	141
  2349  008E                     _TRISC	set	142
  2350  0097                     _WDTCON	set	151
  2351  04E9                     _GO_nDONE	set	1257
  2352  0488                     _TMR1IE	set	1160
  2353  0117                     _FVRCON	set	279
  2354  010C                     _LATA	set	268
  2355  010D                     _LATB	set	269
  2356  010E                     _LATC	set	270
  2357  018C                     _ANSELA	set	396
  2358  018D                     _ANSELB	set	397
  2359  018E                     _ANSELC	set	398
  2360  0192                     _PMADRH	set	402
  2361  0191                     _PMADRL	set	401
  2362  0196                     _PMCON2	set	406
  2363  0194                     _PMDATH	set	404
  2364  0193                     _PMDATL	set	403
  2365  0CAE                     _CFGS	set	3246
  2366  0CAC                     _FREE	set	3244
  2367  0CAD                     _LWLO	set	3245
  2368  0CA8                     _RD	set	3240
  2369  0CA9                     _WR	set	3241
  2370  0CAA                     _WREN	set	3242
  2371  020D                     _WPUB	set	525
  2372  0396                     _IOCBF	set	918
  2373  0395                     _IOCBN	set	917
  2374  0394                     _IOCBP	set	916
  2375  1CB2                     _IOCBF2	set	7346
  2376                           
  2377                           ; #config settings
  2378  0000                     
  2379                           	psect	cinit
  2380  0021                     start_initialization:	
  2381  0021                     __initialization:	
  2382                           
  2383                           ; Clear objects allocated to BITCOMMON
  2384  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BITBANK1
  2387  0022  0021               	movlb	1	; select bank1
  2388  0023  01E4               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BANK1
  2391  0024  30A0               	movlw	low __pbssBANK1
  2392  0025  0084               	movwf	4
  2393  0026  3000               	movlw	high __pbssBANK1
  2394  0027  0085               	movwf	5
  2395  0028  303B               	movlw	59
  2396  0029  3190  2000  3180   	fcall	clear_ram0
  2397                           
  2398                           ; Clear objects allocated to BANK2
  2399  002C  3020               	movlw	low __pbssBANK2
  2400  002D  0084               	movwf	4
  2401  002E  3001               	movlw	high __pbssBANK2
  2402  002F  0085               	movwf	5
  2403  0030  304F               	movlw	79
  2404  0031  3190  2000  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Clear objects allocated to BANK3
  2407  0034  30A0               	movlw	low __pbssBANK3
  2408  0035  0084               	movwf	4
  2409  0036  3001               	movlw	high __pbssBANK3
  2410  0037  0085               	movwf	5
  2411  0038  302F               	movlw	47
  2412  0039  3190  2000  3180   	fcall	clear_ram0
  2413                           
  2414                           ; Clear objects allocated to BANK4
  2415  003C  3020               	movlw	low __pbssBANK4
  2416  003D  0084               	movwf	4
  2417  003E  3002               	movlw	high __pbssBANK4
  2418  003F  0085               	movwf	5
  2419  0040  3025               	movlw	37
  2420  0041  3190  2000  3180   	fcall	clear_ram0
  2421                           
  2422                           ; Initialize objects allocated to BANK4
  2423  0044  3026               	movlw	low __pidataBANK4
  2424  0045  0084               	movwf	4
  2425  0046  3090               	movlw	(high __pidataBANK4)| (0+128)
  2426  0047  0085               	movwf	5
  2427  0048  3045               	movlw	low __pdataBANK4
  2428  0049  0086               	movwf	6
  2429  004A  3002               	movlw	high __pdataBANK4
  2430  004B  0087               	movwf	7
  2431  004C  3020               	movlw	32
  2432  004D  319B  2382         	fcall	init_ram
  2433  004F                     end_of_initialization:	
  2434                           ;End of C runtime variable initialization code
  2435                           
  2436  004F                     __end_of__initialization:	
  2437  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2438  0050  0020               	movlb	0
  2439  0051  3195  2DAA         	ljmp	_main	;jump to C main() function
  2440                           
  2441                           	psect	bitbssCOMMON
  2442  03E8                     __pbitbssCOMMON:	
  2443  03E8                     _Transceive_OK:	
  2444  03E8                     	ds	1
  2445                           
  2446                           	psect	bitbssBANK1
  2447  0720                     __pbitbssBANK1:	
  2448  0720                     _Receive_OK:	
  2449  0720                     	ds	1
  2450                           
  2451                           	psect	bssBANK1
  2452  00A0                     __pbssBANK1:	
  2453  00A0                     _RF1:	
  2454  00A0                     	ds	14
  2455  00AE                     _myMain:	
  2456  00AE                     	ds	13
  2457  00BB                     _DimmerIntr1:	
  2458  00BB                     	ds	12
  2459  00C7                     _CRC:	
  2460  00C7                     	ds	1
  2461  00C8                     _Cmd:	
  2462  00C8                     	ds	1
  2463  00C9                     _DelayOff:	
  2464  00C9                     	ds	1
  2465  00CA                     _DimmerLights:	
  2466  00CA                     	ds	1
  2467  00CB                     _LED:	
  2468  00CB                     	ds	1
  2469  00CC                     _Rx_Length:	
  2470  00CC                     	ds	1
  2471  00CD                     _SPI0Buffer:	
  2472  00CD                     	ds	1
  2473  00CE                     _Sw:	
  2474  00CE                     	ds	1
  2475  00CF                     _Tx_Length:	
  2476  00CF                     	ds	1
  2477  00D0                     _s_data:	
  2478  00D0                     	ds	1
  2479  00D1                     _Temp:	
  2480  00D1                     	ds	10
  2481                           
  2482                           	psect	bssBANK2
  2483  0120                     __pbssBANK2:	
  2484  0120                     _Buz1:	
  2485  0120                     	ds	12
  2486  012C                     _Dimmer:	
  2487  012C                     	ds	5
  2488  0131                     _Timer1:	
  2489  0131                     	ds	3
  2490  0134                     _RF_Count:	
  2491  0134                     	ds	2
  2492  0136                     _WDT:	
  2493  0136                     	ds	2
  2494  0138                     _DimmerIntr:	
  2495  0138                     	ds	1
  2496  0139                     _Light:	
  2497  0139                     	ds	1
  2498  013A                     _RSSI:	
  2499  013A                     	ds	1
  2500  013B                     _SwDetect:	
  2501  013B                     	ds	1
  2502  013C                     _r_address:	
  2503  013C                     	ds	1
  2504  013D                     _r_data:	
  2505  013D                     	ds	1
  2506  013E                     _Load:	
  2507  013E                     	ds	40
  2508  0166                     _DlySw1:	
  2509  0166                     	ds	5
  2510  016B                     _VarErrLED:	
  2511  016B                     	ds	4
  2512                           
  2513                           	psect	bssBANK3
  2514  01A0                     __pbssBANK3:	
  2515  01A0                     _RF_Data:	
  2516  01A0                     	ds	30
  2517  01BE                     _Sw1:	
  2518  01BE                     	ds	9
  2519  01C7                     _DimmerLights1:	
  2520  01C7                     	ds	8
  2521                           
  2522                           	psect	bssBANK4
  2523  0220                     __pbssBANK4:	
  2524  0220                     _Memory:	
  2525  0220                     	ds	37
  2526                           
  2527                           	psect	dataBANK4
  2528  0245                     __pdataBANK4:	
  2529  0245                     __product:	
  2530  0245                     	ds	32
  2531                           
  2532                           	psect	clrtext
  2533  1000                     clear_ram0:	
  2534                           ;	Called with FSR0 containing the base address, and
  2535                           ;	WREG with the size to clear
  2536                           
  2537  1000  0064               	clrwdt	;clear the watchdog before getting into this loop
  2538  1001                     clrloop0:	
  2539  1001  0180               	clrf	0	;clear RAM location pointed to by FSR
  2540  1002  3101               	addfsr 0,1
  2541  1003  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2542  1004  2801               	goto	clrloop0	;have we reached the end yet?
  2543  1005  3400               	retlw	0	;all done for this memory range, return
  2544                           
  2545                           	psect	inittext
  2546  1B82                     init_ram:	
  2547  1B82  00FE               	movwf	126
  2548  1B83                     initloop:	
  2549  1B83  0012               	moviw fsr0++
  2550  1B84  001E               	movwi fsr1++
  2551  1B85  0BFE               	decfsz	126,f
  2552  1B86  2B83               	goto	initloop
  2553  1B87  3400               	retlw	0
  2554                           
  2555                           	psect	cstackBANK1
  2556  00DB                     __pcstackBANK1:	
  2557  00DB                     ??_getRxData:	
  2558  00DB                     setDimmerLights_OnOff@lights:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561                           
  2562                           ; 1 bytes @ 0x0
  2563  00DB                     	ds	1
  2564  00DC                     setDimmerLights_Main@lights:	
  2565  00DC                     getRxData@error:	
  2566                           ; 1 bytes @ 0x1
  2567                           
  2568                           
  2569                           ; 1 bytes @ 0x1
  2570  00DC                     	ds	1
  2571  00DD                     ??_setRF_Main:	
  2572                           
  2573                           ; 0 bytes @ 0x2
  2574  00DD                     	ds	1
  2575  00DE                     setRF_Main@error:	
  2576                           
  2577                           ; 1 bytes @ 0x3
  2578  00DE                     	ds	1
  2579  00DF                     ?_main:	
  2580  00DF                     main@argc:	
  2581                           ; 2 bytes @ 0x4
  2582                           
  2583                           
  2584                           ; 2 bytes @ 0x4
  2585  00DF                     	ds	2
  2586  00E1                     main@argv:	
  2587                           
  2588                           ; 2 bytes @ 0x6
  2589  00E1                     	ds	2
  2590                           
  2591                           	psect	cstackCOMMON
  2592  0070                     __pcstackCOMMON:	
  2593  0070                     ?_CC2500_WriteCommand:	
  2594  0070                     ?_RF_Timeout_Counter:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setRF_TimeoutCleared:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_WriteByte:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_ReadStatus:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_ReadByte:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_PowerRST:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_InitSetREG:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_InitPATable:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_ClearTXFIFO:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_ClearRXFIFO:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_FrequencyCabr:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_SIDLEMode:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_DlyOff_Initialization:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DlyOff_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setDimmerLights_SwOn:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setDimmerLights_SwOff:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setMemory_Modify:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setDimmerLights_Initialization:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setDimmerLights_Main:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_Line:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setTxData:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setRF_TransceiveGO:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setLED_Initialization:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setLED_Main:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_Fosc_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_IO_Set:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_TMR1_Set:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_ADC_Set:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_IOC_Set:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_WDT_Set:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_TMR1_ISR:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_IOC_ISR:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Timeout_Counter:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_set_TimeoutCleared:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Flash_Memory_Write:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Flash_Memory_Modify:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_WDT_Clearing:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_myMain_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Temp_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Load_Initialization:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Switch_Initialization:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_RF_Initialization:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_getLoad_AD:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_getTemp_AD:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_my_MainTimer:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_Temp_Main:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Load_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Switch_Main:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_RF_Main:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_Exception_Main:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setLoad_AH_AL_Restore:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setTemp_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_setTemp_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_setRF_Initialization:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setRF_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_RF_RxDisable:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_getRxData:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setLog_Code:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setControl_Lights_Table:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setRFSW_Control:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setRFSW_AdjControl:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setSw_Initialization:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_setSw_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_Buzzer_Initialization:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_Buzzer_Main:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_CC2500_TxData:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_CC2500_RxData:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_CC2500_PowerOnInitial:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DelayOffPointSelect:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DelayOff_Initialization:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_DelayOff_Main:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_DimmerIntr_Initialization:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_DimmerLights_SelectPointer:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DimmerLights_Initialization:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_setDimmerLights_DimmingOn:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_DimmerLights_Main:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_DimmerLights_TMR_1:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ??_DimmerLights_TMR_1:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_DimmerLights_IOC_1:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_LedPointSelect:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_LED_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_LED_Main:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_Mcu_Initialization:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_ISR:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_Flash_Memory_Initialization:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_Flash_Memory_Main:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_Flash_Memory_Unlock:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_Flash_Memory_Erasing:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_setMemory_LoopSave:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_WDT_Main:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_setRF_Learn:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_TouchPower:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_SwPointSelect:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_getDimmerLights_Status:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_getDimmerLights_ValueToPercent:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_getDimmerLights_PercentToValue:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_getLoad_OK:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_getMain_All_Error_Status:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getMain_All_LightsStatus:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_getDimmerLights_Allow_Condition:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getCmd_Status:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_Flash_Memory_Read:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getAll_Sw_KeyStatus:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getRF_KeyStatus:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getSw_KeyStatus:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getDelayOff_GO:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getDimmerIntr_DimmingValue:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getDimmerLights_Line:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getDimmer_LoadGO:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getDimmer_Load_Status:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getMain_Lights_Count:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?___lbdiv:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     setDimmerLights_Initialization@lights:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     getDimmerLights_Allow_Condition@lights:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     getSw_KeyStatus@sw:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ___lbdiv@divisor:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0x0
  2947  0070                     	ds	1
  2948  0071                     ??_TMR1_ISR:	
  2949  0071                     ??___lbdiv:	
  2950                           ; 0 bytes @ 0x1
  2951                           
  2952                           
  2953                           ; 0 bytes @ 0x1
  2954  0071                     	ds	1
  2955  0072                     ___lbdiv@dividend:	
  2956                           
  2957                           ; 1 bytes @ 0x2
  2958  0072                     	ds	1
  2959  0073                     ___lbdiv@counter:	
  2960                           
  2961                           ; 1 bytes @ 0x3
  2962  0073                     	ds	1
  2963  0074                     ___lbdiv@quotient:	
  2964                           
  2965                           ; 1 bytes @ 0x4
  2966  0074                     	ds	1
  2967  0075                     ?_Division:	
  2968  0075                     Division@num:	
  2969                           ; 1 bytes @ 0x5
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x5
  2973  0075                     	ds	1
  2974  0076                     ??_Division:	
  2975                           
  2976                           ; 0 bytes @ 0x6
  2977  0076                     	ds	2
  2978  0078                     Division@value:	
  2979                           
  2980                           ; 1 bytes @ 0x8
  2981  0078                     	ds	1
  2982  0079                     Division@result:	
  2983                           
  2984                           ; 1 bytes @ 0x9
  2985  0079                     	ds	1
  2986  007A                     ??_DimmerLights_IOC_1:	
  2987                           
  2988                           ; 0 bytes @ 0xA
  2989  007A                     	ds	2
  2990  007C                     ??_IOC_ISR:	
  2991  007C                     ??_ISR:	
  2992                           ; 0 bytes @ 0xC
  2993                           
  2994                           
  2995                           ; 0 bytes @ 0xC
  2996  007C                     	ds	1
  2997                           
  2998                           	psect	cstackBANK0
  2999  0020                     __pcstackBANK0:	
  3000  0020                     ??_RF_Timeout_Counter:	
  3001  0020                     ??_setRF_TimeoutCleared:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_CC2500_WriteByte:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_CC2500_ReadByte:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ?_DelayTime_1us:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_setMemory_Modify:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_setDimmerLights_Initialization:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_getLoad_OK:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_getMain_All_Error_Status:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_getMain_All_LightsStatus:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_setDimmerLights_Line:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_getCmd_Status:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ?_setCmd_Status:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_setTxData:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_setRF_TransceiveGO:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_Fosc_Set:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_IO_Set:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_TMR1_Set:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_ADC_Set:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_IOC_Set:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_WDT_Set:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Timeout_Counter:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_set_TimeoutCleared:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_Flash_Memory_Read:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ?_setMemory_Data:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_Flash_Memory_Write:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_getAll_Sw_KeyStatus:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_WDT_Clearing:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_myMain_Initialization:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_Temp_Initialization:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_setLoad_AH_AL_Restore:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_setTemp_Initialization:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_setRF_Initialization:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_getRF_KeyStatus:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_getSw_KeyStatus:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_Buzzer_Initialization:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ??_Buzzer_Main:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_DelayOffPointSelect:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ?_setDimmerIntr_ControlStatus:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ??_getDimmerIntr_DimmingValue:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ?_setDimmerIntr_Dimming_RF:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_DimmerLights_SelectPointer:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_getDimmerLights_Line:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_getDimmer_LoadGO:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_getDimmer_Load_Status:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_LedPointSelect:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ??_Flash_Memory_Unlock:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ??_Flash_Memory_Erasing:	
  3146                           ; 0 bytes @ 0x0
  3147                           
  3148  0020                     ??_setMemory_LoopSave:	
  3149                           ; 0 bytes @ 0x0
  3150                           
  3151  0020                     ??_WDT_Main:	
  3152                           ; 0 bytes @ 0x0
  3153                           
  3154  0020                     ??_getMain_Lights_Count:	
  3155                           ; 0 bytes @ 0x0
  3156                           
  3157  0020                     ??_setRF_Learn:	
  3158                           ; 0 bytes @ 0x0
  3159                           
  3160  0020                     ??_TouchPower:	
  3161                           ; 0 bytes @ 0x0
  3162                           
  3163  0020                     ??_SwPointSelect:	
  3164                           ; 0 bytes @ 0x0
  3165                           
  3166  0020                     ?___bmul:	
  3167                           ; 0 bytes @ 0x0
  3168                           
  3169  0020                     ?_getBuz_GO:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0020                     ?_getAD:	
  3173                           ; 2 bytes @ 0x0
  3174                           
  3175  0020                     ?___wmul:	
  3176                           ; 2 bytes @ 0x0
  3177                           
  3178  0020                     ?___awdiv:	
  3179                           ; 2 bytes @ 0x0
  3180                           
  3181  0020                     ?___lwdiv:	
  3182                           ; 2 bytes @ 0x0
  3183                           
  3184  0020                     ?___ftpack:	
  3185                           ; 2 bytes @ 0x0
  3186                           
  3187  0020                     setDimmerIntr_ControlStatus@command:	
  3188                           ; 3 bytes @ 0x0
  3189                           
  3190  0020                     setDimmerIntr_Dimming_Sw@command:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0020                     setDimmerIntr_Dimming_RF@command:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0020                     setDimmerLights_Line@lights:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0020                     getDimmerLights_Line@line:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0020                     getDimmer_LoadGO@loadgo:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0020                     getDimmer_Load_Status@status:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0020                     getAD@adcon1:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0020                     setMemory_Data@data:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0020                     getMain_All_LightsStatus@status:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0020                     getMain_Lights_Count@count:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0020                     setCmd_Status@cmd:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0020                     getCmd_Status@number:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0020                     getLoad_OK@ok:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0020                     ___bmul@multiplicand:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0020                     DelayTime_1us@count:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0020                     ___wmul@multiplier:	
  3239                           ; 2 bytes @ 0x0
  3240                           
  3241  0020                     ___awdiv@divisor:	
  3242                           ; 2 bytes @ 0x0
  3243                           
  3244  0020                     ___lwdiv@divisor:	
  3245                           ; 2 bytes @ 0x0
  3246                           
  3247  0020                     ___ftpack@arg:	
  3248                           ; 2 bytes @ 0x0
  3249                           
  3250                           
  3251                           ; 3 bytes @ 0x0
  3252  0020                     	ds	1
  3253  0021                     ??_getDimmerLights_Allow_Condition:	
  3254  0021                     ??_setCmd_Status:	
  3255                           ; 0 bytes @ 0x1
  3256                           
  3257  0021                     ??_setMemory_Data:	
  3258                           ; 0 bytes @ 0x1
  3259                           
  3260  0021                     ??_RF_Initialization:	
  3261                           ; 0 bytes @ 0x1
  3262                           
  3263  0021                     ??_setDimmerIntr_ControlStatus:	
  3264                           ; 0 bytes @ 0x1
  3265                           
  3266  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3267                           ; 0 bytes @ 0x1
  3268                           
  3269  0021                     ??_setDimmerIntr_Dimming_RF:	
  3270                           ; 0 bytes @ 0x1
  3271                           
  3272  0021                     ??_Mcu_Initialization:	
  3273                           ; 0 bytes @ 0x1
  3274                           
  3275  0021                     ??___bmul:	
  3276                           ; 0 bytes @ 0x1
  3277                           
  3278  0021                     CC2500_WriteByte@loop_a:	
  3279                           ; 0 bytes @ 0x1
  3280                           
  3281  0021                     CC2500_ReadByte@loop_b:	
  3282                           ; 1 bytes @ 0x1
  3283                           
  3284  0021                     DelayOffPointSelect@sw:	
  3285                           ; 1 bytes @ 0x1
  3286                           
  3287  0021                     getDimmerIntr_DimmingValue@lights:	
  3288                           ; 1 bytes @ 0x1
  3289                           
  3290  0021                     DimmerLights_SelectPointer@lights:	
  3291                           ; 1 bytes @ 0x1
  3292                           
  3293  0021                     LedPointSelect@led:	
  3294                           ; 1 bytes @ 0x1
  3295                           
  3296  0021                     Flash_Memory_Read@i:	
  3297                           ; 1 bytes @ 0x1
  3298                           
  3299  0021                     Flash_Memory_Write@i:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302  0021                     setMemory_Modify@command:	
  3303                           ; 1 bytes @ 0x1
  3304                           
  3305  0021                     setMemory_LoopSave@command:	
  3306                           ; 1 bytes @ 0x1
  3307                           
  3308  0021                     getMain_Lights_Count@status1:	
  3309                           ; 1 bytes @ 0x1
  3310                           
  3311  0021                     getCmd_Status@cmd:	
  3312                           ; 1 bytes @ 0x1
  3313                           
  3314  0021                     setLoad_AH_AL_Restore@i:	
  3315                           ; 1 bytes @ 0x1
  3316                           
  3317  0021                     setRF_Learn@command:	
  3318                           ; 1 bytes @ 0x1
  3319                           
  3320  0021                     getRF_KeyStatus@key:	
  3321                           ; 1 bytes @ 0x1
  3322                           
  3323  0021                     setRF_TransceiveGO@command:	
  3324                           ; 1 bytes @ 0x1
  3325                           
  3326  0021                     SwPointSelect@sw:	
  3327                           ; 1 bytes @ 0x1
  3328                           
  3329  0021                     getSw_KeyStatus@status:	
  3330                           ; 1 bytes @ 0x1
  3331                           
  3332  0021                     getAll_Sw_KeyStatus@status:	
  3333                           ; 1 bytes @ 0x1
  3334                           
  3335  0021                     _getMain_All_Error_Status$3576:	
  3336                           ; 1 bytes @ 0x1
  3337                           
  3338                           
  3339                           ; 2 bytes @ 0x1
  3340  0021                     	ds	1
  3341  0022                     ??_CC2500_WriteCommand:	
  3342  0022                     ??_CC2500_ReadStatus:	
  3343                           ; 0 bytes @ 0x2
  3344                           
  3345  0022                     ??_DelayTime_1us:	
  3346                           ; 0 bytes @ 0x2
  3347                           
  3348  0022                     ?_CC2500_WriteREG:	
  3349                           ; 0 bytes @ 0x2
  3350                           
  3351  0022                     ??_DlyOff_Initialization:	
  3352                           ; 0 bytes @ 0x2
  3353                           
  3354  0022                     ??_getDimmerLights_Status:	
  3355                           ; 0 bytes @ 0x2
  3356                           
  3357  0022                     ??_setDimmerLights_SwOff:	
  3358                           ; 0 bytes @ 0x2
  3359                           
  3360  0022                     ?_setLED:	
  3361                           ; 0 bytes @ 0x2
  3362                           
  3363  0022                     ??_setLED_Main:	
  3364                           ; 0 bytes @ 0x2
  3365                           
  3366  0022                     ??_Load_Initialization:	
  3367                           ; 0 bytes @ 0x2
  3368                           
  3369  0022                     ??_getBuz_GO:	
  3370                           ; 0 bytes @ 0x2
  3371                           
  3372  0022                     ??_getDelayOff_GO:	
  3373                           ; 0 bytes @ 0x2
  3374                           
  3375  0022                     ??_setDimmerLights_DimmingOn:	
  3376                           ; 0 bytes @ 0x2
  3377                           
  3378  0022                     ?_setDimmerLights_DimmingRun:	
  3379                           ; 0 bytes @ 0x2
  3380                           
  3381  0022                     CC2500_WriteREG@value:	
  3382                           ; 0 bytes @ 0x2
  3383                           
  3384  0022                     DlyOff_Initialization@sw:	
  3385                           ; 1 bytes @ 0x2
  3386                           
  3387  0022                     getDelayOff_GO@sw:	
  3388                           ; 1 bytes @ 0x2
  3389                           
  3390  0022                     setDimmerIntr_ControlStatus@lights:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393  0022                     getDimmerIntr_DimmingValue@value:	
  3394                           ; 1 bytes @ 0x2
  3395                           
  3396  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3397                           ; 1 bytes @ 0x2
  3398                           
  3399  0022                     setDimmerIntr_Dimming_RF@lights:	
  3400                           ; 1 bytes @ 0x2
  3401                           
  3402  0022                     setDimmerLights_SwOff@sw:	
  3403                           ; 1 bytes @ 0x2
  3404                           
  3405  0022                     setDimmerLights_DimmingOn@sw:	
  3406                           ; 1 bytes @ 0x2
  3407                           
  3408  0022                     getDimmerLights_Allow_Condition@allow:	
  3409                           ; 1 bytes @ 0x2
  3410                           
  3411  0022                     getDimmerLights_Status@lights:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0022                     setDimmerLights_DimmingRun@command:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417  0022                     setLED@command:	
  3418                           ; 1 bytes @ 0x2
  3419                           
  3420  0022                     Flash_Memory_Read@address:	
  3421                           ; 1 bytes @ 0x2
  3422                           
  3423  0022                     setMemory_Data@address:	
  3424                           ; 1 bytes @ 0x2
  3425                           
  3426  0022                     setCmd_Status@number:	
  3427                           ; 1 bytes @ 0x2
  3428                           
  3429  0022                     _getRF_KeyStatus$5346:	
  3430                           ; 1 bytes @ 0x2
  3431                           
  3432  0022                     _getSw_KeyStatus$6384:	
  3433                           ; 1 bytes @ 0x2
  3434                           
  3435  0022                     _getAll_Sw_KeyStatus$6387:	
  3436                           ; 1 bytes @ 0x2
  3437                           
  3438  0022                     ___bmul@product:	
  3439                           ; 1 bytes @ 0x2
  3440                           
  3441  0022                     DelayTime_1us@i:	
  3442                           ; 1 bytes @ 0x2
  3443                           
  3444  0022                     ___wmul@multiplicand:	
  3445                           ; 2 bytes @ 0x2
  3446                           
  3447  0022                     ___awdiv@dividend:	
  3448                           ; 2 bytes @ 0x2
  3449                           
  3450  0022                     ___lwdiv@dividend:	
  3451                           ; 2 bytes @ 0x2
  3452                           
  3453                           
  3454                           ; 2 bytes @ 0x2
  3455  0022                     	ds	1
  3456  0023                     ??_CC2500_WriteREG:	
  3457  0023                     ??_setLED:	
  3458                           ; 0 bytes @ 0x3
  3459                           
  3460  0023                     ??_DelayOff_Initialization:	
  3461                           ; 0 bytes @ 0x3
  3462                           
  3463  0023                     ??_setDimmerLights_DimmingRun:	
  3464                           ; 0 bytes @ 0x3
  3465                           
  3466  0023                     ??_getAD:	
  3467                           ; 0 bytes @ 0x3
  3468                           
  3469  0023                     CC2500_WriteCommand@command:	
  3470                           ; 0 bytes @ 0x3
  3471                           
  3472  0023                     CC2500_ReadStatus@status_addr:	
  3473                           ; 1 bytes @ 0x3
  3474                           
  3475  0023                     getDelayOff_GO@go:	
  3476                           ; 1 bytes @ 0x3
  3477                           
  3478  0023                     _getDimmerLights_Allow_Condition$2255:	
  3479                           ; 1 bytes @ 0x3
  3480                           
  3481  0023                     getDimmerLights_Status@status:	
  3482                           ; 1 bytes @ 0x3
  3483                           
  3484  0023                     setLED@led:	
  3485                           ; 1 bytes @ 0x3
  3486                           
  3487  0023                     getAD@adcon0:	
  3488                           ; 1 bytes @ 0x3
  3489                           
  3490  0023                     Flash_Memory_Read@ret:	
  3491                           ; 1 bytes @ 0x3
  3492                           
  3493  0023                     ___bmul@multiplier:	
  3494                           ; 1 bytes @ 0x3
  3495                           
  3496  0023                     ___ftpack@exp:	
  3497                           ; 1 bytes @ 0x3
  3498                           
  3499  0023                     _getMain_All_Error_Status$3577:	
  3500                           ; 1 bytes @ 0x3
  3501                           
  3502                           
  3503                           ; 2 bytes @ 0x3
  3504  0023                     	ds	1
  3505  0024                     ??_CC2500_ClearTXFIFO:	
  3506  0024                     ??_CC2500_ClearRXFIFO:	
  3507                           ; 0 bytes @ 0x4
  3508                           
  3509  0024                     ??_CC2500_SIDLEMode:	
  3510                           ; 0 bytes @ 0x4
  3511                           
  3512  0024                     ??_setLED_Initialization:	
  3513                           ; 0 bytes @ 0x4
  3514                           
  3515  0024                     ??_Flash_Memory_Modify:	
  3516                           ; 0 bytes @ 0x4
  3517                           
  3518  0024                     ??_getLoad_AD:	
  3519                           ; 0 bytes @ 0x4
  3520                           
  3521  0024                     ??_getTemp_AD:	
  3522                           ; 0 bytes @ 0x4
  3523                           
  3524  0024                     ??_RF_RxDisable:	
  3525                           ; 0 bytes @ 0x4
  3526                           
  3527  0024                     ??_setSw_Initialization:	
  3528                           ; 0 bytes @ 0x4
  3529                           
  3530  0024                     ??_CC2500_TxData:	
  3531                           ; 0 bytes @ 0x4
  3532                           
  3533  0024                     ??_CC2500_RxData:	
  3534                           ; 0 bytes @ 0x4
  3535                           
  3536  0024                     ??_Flash_Memory_Initialization:	
  3537                           ; 0 bytes @ 0x4
  3538                           
  3539  0024                     ??___wmul:	
  3540                           ; 0 bytes @ 0x4
  3541                           
  3542  0024                     ??___awdiv:	
  3543                           ; 0 bytes @ 0x4
  3544                           
  3545  0024                     ??___lwdiv:	
  3546                           ; 0 bytes @ 0x4
  3547                           
  3548  0024                     CC2500_WriteREG@w_addr:	
  3549                           ; 0 bytes @ 0x4
  3550                           
  3551  0024                     setDimmerLights_DimmingRun@lights:	
  3552                           ; 1 bytes @ 0x4
  3553                           
  3554  0024                     setLED_Initialization@led:	
  3555                           ; 1 bytes @ 0x4
  3556                           
  3557  0024                     setLED_Main@led:	
  3558                           ; 1 bytes @ 0x4
  3559                           
  3560  0024                     setSw_Initialization@sw:	
  3561                           ; 1 bytes @ 0x4
  3562                           
  3563  0024                     ___ftpack@sign:	
  3564                           ; 1 bytes @ 0x4
  3565                           
  3566  0024                     getBuz_GO@i:	
  3567                           ; 1 bytes @ 0x4
  3568                           
  3569  0024                     DelayTime_1us@j:	
  3570                           ; 2 bytes @ 0x4
  3571                           
  3572  0024                     ___wmul@product:	
  3573                           ; 2 bytes @ 0x4
  3574                           
  3575                           
  3576                           ; 2 bytes @ 0x4
  3577  0024                     	ds	1
  3578  0025                     ??_CC2500_InitSetREG:	
  3579  0025                     ??_CC2500_InitPATable:	
  3580                           ; 0 bytes @ 0x5
  3581                           
  3582  0025                     ??_Switch_Initialization:	
  3583                           ; 0 bytes @ 0x5
  3584                           
  3585  0025                     ??___ftpack:	
  3586                           ; 0 bytes @ 0x5
  3587                           
  3588  0025                     ??_LED_Initialization:	
  3589                           ; 0 bytes @ 0x5
  3590                           
  3591  0025                     ??_LED_Main:	
  3592                           ; 0 bytes @ 0x5
  3593                           
  3594  0025                     CC2500_TxData@loop_e:	
  3595                           ; 0 bytes @ 0x5
  3596                           
  3597  0025                     CC2500_RxData@loop_f:	
  3598                           ; 1 bytes @ 0x5
  3599                           
  3600  0025                     Flash_Memory_Initialization@value:	
  3601                           ; 1 bytes @ 0x5
  3602                           
  3603  0025                     Flash_Memory_Modify@i:	
  3604                           ; 1 bytes @ 0x5
  3605                           
  3606  0025                     getMain_All_Error_Status@command:	
  3607                           ; 1 bytes @ 0x5
  3608                           
  3609  0025                     getTemp_AD@channel:	
  3610                           ; 1 bytes @ 0x5
  3611                           
  3612  0025                     ___awdiv@counter:	
  3613                           ; 1 bytes @ 0x5
  3614                           
  3615  0025                     ___lwdiv@quotient:	
  3616                           ; 1 bytes @ 0x5
  3617                           
  3618                           
  3619                           ; 2 bytes @ 0x5
  3620  0025                     	ds	1
  3621  0026                     ??_CC2500_PowerRST:	
  3622  0026                     ??_CC2500_FrequencyCabr:	
  3623                           ; 0 bytes @ 0x6
  3624                           
  3625  0026                     ??_Flash_Memory_Main:	
  3626                           ; 0 bytes @ 0x6
  3627                           
  3628  0026                     CC2500_InitSetREG@temp1:	
  3629                           ; 0 bytes @ 0x6
  3630                           
  3631  0026                     CC2500_InitPATable@temp:	
  3632                           ; 1 bytes @ 0x6
  3633                           
  3634  0026                     getMain_All_Error_Status@status:	
  3635                           ; 1 bytes @ 0x6
  3636                           
  3637  0026                     getLoad_AD@channel:	
  3638                           ; 1 bytes @ 0x6
  3639                           
  3640  0026                     ___awdiv@sign:	
  3641                           ; 1 bytes @ 0x6
  3642                           
  3643  0026                     getTemp_AD@ADRES:	
  3644                           ; 1 bytes @ 0x6
  3645                           
  3646                           
  3647                           ; 2 bytes @ 0x6
  3648  0026                     	ds	1
  3649  0027                     CC2500_InitSetREG@temp2:	
  3650  0027                     CC2500_InitPATable@loop_d:	
  3651                           ; 1 bytes @ 0x7
  3652                           
  3653  0027                     Flash_Memory_Main@key_Status:	
  3654                           ; 1 bytes @ 0x7
  3655                           
  3656  0027                     getLoad_AD@k:	
  3657                           ; 1 bytes @ 0x7
  3658                           
  3659  0027                     ___lwdiv@counter:	
  3660                           ; 1 bytes @ 0x7
  3661                           
  3662  0027                     ___awdiv@quotient:	
  3663                           ; 1 bytes @ 0x7
  3664                           
  3665                           
  3666                           ; 2 bytes @ 0x7
  3667  0027                     	ds	1
  3668  0028                     ??_Load_Main:	
  3669  0028                     ?___awtoft:	
  3670                           ; 0 bytes @ 0x8
  3671                           
  3672  0028                     CC2500_InitSetREG@loop_c:	
  3673                           ; 3 bytes @ 0x8
  3674                           
  3675  0028                     _Flash_Memory_Main$3119:	
  3676                           ; 1 bytes @ 0x8
  3677                           
  3678  0028                     getLoad_AD@j:	
  3679                           ; 1 bytes @ 0x8
  3680                           
  3681  0028                     ___awtoft@c:	
  3682                           ; 1 bytes @ 0x8
  3683                           
  3684                           
  3685                           ; 2 bytes @ 0x8
  3686  0028                     	ds	1
  3687  0029                     ?_setBuz:	
  3688  0029                     ??_CC2500_PowerOnInitial:	
  3689                           ; 0 bytes @ 0x9
  3690                           
  3691  0029                     setBuz@time:	
  3692                           ; 0 bytes @ 0x9
  3693                           
  3694  0029                     getLoad_AD@ADRES:	
  3695                           ; 2 bytes @ 0x9
  3696                           
  3697                           
  3698                           ; 2 bytes @ 0x9
  3699  0029                     	ds	1
  3700  002A                     Load_Main@error:	
  3701                           
  3702                           ; 1 bytes @ 0xA
  3703  002A                     	ds	1
  3704  002B                     ??_setBuz:	
  3705  002B                     ??___awtoft:	
  3706                           ; 0 bytes @ 0xB
  3707                           
  3708  002B                     getLoad_AD@i:	
  3709                           ; 0 bytes @ 0xB
  3710                           
  3711  002B                     _Load_Main$3948:	
  3712                           ; 1 bytes @ 0xB
  3713                           
  3714                           
  3715                           ; 2 bytes @ 0xB
  3716  002B                     	ds	1
  3717  002C                     setBuz@count:	
  3718                           
  3719                           ; 1 bytes @ 0xC
  3720  002C                     	ds	1
  3721  002D                     ??_setDimmerLights_SwOn:	
  3722  002D                     ??_my_MainTimer:	
  3723                           ; 0 bytes @ 0xD
  3724                           
  3725  002D                     ??_Exception_Main:	
  3726                           ; 0 bytes @ 0xD
  3727                           
  3728  002D                     setDimmerLights_SwOn@sw:	
  3729                           ; 0 bytes @ 0xD
  3730                           
  3731  002D                     Load_Main@ErrorCountValue:	
  3732                           ; 1 bytes @ 0xD
  3733                           
  3734  002D                     ___awtoft@sign:	
  3735                           ; 1 bytes @ 0xD
  3736                           
  3737                           
  3738                           ; 1 bytes @ 0xD
  3739  002D                     	ds	1
  3740  002E                     ?___ftdiv:	
  3741  002E                     ?___ftmul:	
  3742                           ; 3 bytes @ 0xE
  3743                           
  3744  002E                     setDimmerLights_SwOn@idle:	
  3745                           ; 3 bytes @ 0xE
  3746                           
  3747  002E                     Exception_Main@status:	
  3748                           ; 1 bytes @ 0xE
  3749                           
  3750  002E                     Load_Main@Load_RunStatus:	
  3751                           ; 1 bytes @ 0xE
  3752                           
  3753  002E                     ___ftdiv@f2:	
  3754                           ; 1 bytes @ 0xE
  3755                           
  3756  002E                     ___ftmul@f1:	
  3757                           ; 3 bytes @ 0xE
  3758                           
  3759                           
  3760                           ; 3 bytes @ 0xE
  3761  002E                     	ds	1
  3762  002F                     ??_setSw_Main:	
  3763  002F                     Exception_Main@count:	
  3764                           ; 0 bytes @ 0xF
  3765                           
  3766  002F                     Load_Main@LightsCount:	
  3767                           ; 1 bytes @ 0xF
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0xF
  3771  002F                     	ds	1
  3772  0030                     Exception_Main@error:	
  3773  0030                     Load_Main@i:	
  3774                           ; 1 bytes @ 0x10
  3775                           
  3776                           
  3777                           ; 2 bytes @ 0x10
  3778  0030                     	ds	1
  3779  0031                     setSw_Main@sw:	
  3780  0031                     Exception_Main@i:	
  3781                           ; 1 bytes @ 0x11
  3782                           
  3783  0031                     ___ftdiv@f1:	
  3784                           ; 2 bytes @ 0x11
  3785                           
  3786  0031                     ___ftmul@f2:	
  3787                           ; 3 bytes @ 0x11
  3788                           
  3789                           
  3790                           ; 3 bytes @ 0x11
  3791  0031                     	ds	1
  3792  0032                     ??_Switch_Main:	
  3793                           
  3794                           ; 0 bytes @ 0x12
  3795  0032                     	ds	1
  3796  0033                     Exception_Main@i_3588:	
  3797                           
  3798                           ; 2 bytes @ 0x13
  3799  0033                     	ds	1
  3800  0034                     ??___ftdiv:	
  3801  0034                     ??___ftmul:	
  3802                           ; 0 bytes @ 0x14
  3803                           
  3804                           
  3805                           ; 0 bytes @ 0x14
  3806  0034                     	ds	1
  3807  0035                     Exception_Main@lights:	
  3808                           
  3809                           ; 1 bytes @ 0x15
  3810  0035                     	ds	3
  3811  0038                     ___ftdiv@cntr:	
  3812  0038                     ___ftmul@exp:	
  3813                           ; 1 bytes @ 0x18
  3814                           
  3815                           
  3816                           ; 1 bytes @ 0x18
  3817  0038                     	ds	1
  3818  0039                     ___ftdiv@f3:	
  3819  0039                     ___ftmul@f3_as_product:	
  3820                           ; 3 bytes @ 0x19
  3821                           
  3822                           
  3823                           ; 3 bytes @ 0x19
  3824  0039                     	ds	3
  3825  003C                     ___ftdiv@exp:	
  3826  003C                     ___ftmul@cntr:	
  3827                           ; 1 bytes @ 0x1C
  3828                           
  3829                           
  3830                           ; 1 bytes @ 0x1C
  3831  003C                     	ds	1
  3832  003D                     ___ftdiv@sign:	
  3833  003D                     ___ftmul@sign:	
  3834                           ; 1 bytes @ 0x1D
  3835                           
  3836                           
  3837                           ; 1 bytes @ 0x1D
  3838  003D                     	ds	1
  3839  003E                     ?___ftneg:	
  3840  003E                     ___ftneg@f1:	
  3841                           ; 3 bytes @ 0x1E
  3842                           
  3843                           
  3844                           ; 3 bytes @ 0x1E
  3845  003E                     	ds	3
  3846  0041                     ??___ftneg:	
  3847  0041                     ?___ftadd:	
  3848                           ; 0 bytes @ 0x21
  3849                           
  3850  0041                     ___ftadd@f1:	
  3851                           ; 3 bytes @ 0x21
  3852                           
  3853                           
  3854                           ; 3 bytes @ 0x21
  3855  0041                     	ds	3
  3856  0044                     ___ftadd@f2:	
  3857                           
  3858                           ; 3 bytes @ 0x24
  3859  0044                     	ds	3
  3860  0047                     ??___ftadd:	
  3861                           
  3862                           ; 0 bytes @ 0x27
  3863  0047                     	ds	4
  3864  004B                     ___ftadd@sign:	
  3865                           
  3866                           ; 1 bytes @ 0x2B
  3867  004B                     	ds	1
  3868  004C                     ___ftadd@exp2:	
  3869                           
  3870                           ; 1 bytes @ 0x2C
  3871  004C                     	ds	1
  3872  004D                     ___ftadd@exp1:	
  3873                           
  3874                           ; 1 bytes @ 0x2D
  3875  004D                     	ds	1
  3876  004E                     ?___fttol:	
  3877  004E                     ___fttol@f1:	
  3878                           ; 4 bytes @ 0x2E
  3879                           
  3880                           
  3881                           ; 3 bytes @ 0x2E
  3882  004E                     	ds	4
  3883  0052                     ??___fttol:	
  3884                           
  3885                           ; 0 bytes @ 0x32
  3886  0052                     	ds	4
  3887  0056                     ___fttol@sign1:	
  3888                           
  3889                           ; 1 bytes @ 0x36
  3890  0056                     	ds	1
  3891  0057                     ___fttol@lval:	
  3892                           
  3893                           ; 4 bytes @ 0x37
  3894  0057                     	ds	4
  3895  005B                     ___fttol@exp1:	
  3896                           
  3897                           ; 1 bytes @ 0x3B
  3898  005B                     	ds	1
  3899  005C                     ??_getDimmerLights_ValueToPercent:	
  3900  005C                     ??_getDimmerLights_PercentToValue:	
  3901                           ; 0 bytes @ 0x3C
  3902                           
  3903                           
  3904                           ; 0 bytes @ 0x3C
  3905  005C                     	ds	2
  3906  005E                     getDimmerLights_PercentToValue@value:	
  3907  005E                     getDimmerLights_ValueToPercent@value:	
  3908                           ; 1 bytes @ 0x3E
  3909                           
  3910                           
  3911                           ; 1 bytes @ 0x3E
  3912  005E                     	ds	1
  3913  005F                     getDimmerLights_PercentToValue@i:	
  3914  005F                     getDimmerLights_ValueToPercent@i:	
  3915                           ; 3 bytes @ 0x3F
  3916                           
  3917                           
  3918                           ; 3 bytes @ 0x3F
  3919  005F                     	ds	3
  3920  0062                     ?_setProductData:	
  3921  0062                     ??_DimmerIntr_Initialization:	
  3922                           ; 0 bytes @ 0x42
  3923                           
  3924  0062                     ?_setDimmerIntr_DimmingValue:	
  3925                           ; 0 bytes @ 0x42
  3926                           
  3927  0062                     ?_setDimmerIntr_MaxmumValue:	
  3928                           ; 0 bytes @ 0x42
  3929                           
  3930  0062                     setDimmerIntr_DimmingValue@value:	
  3931                           ; 0 bytes @ 0x42
  3932                           
  3933  0062                     setDimmerIntr_MaxmumValue@value:	
  3934                           ; 1 bytes @ 0x42
  3935                           
  3936  0062                     setProductData@value:	
  3937                           ; 1 bytes @ 0x42
  3938                           
  3939                           
  3940                           ; 1 bytes @ 0x42
  3941  0062                     	ds	1
  3942  0063                     ??_setProductData:	
  3943  0063                     ??_setDimmerIntr_DimmingValue:	
  3944                           ; 0 bytes @ 0x43
  3945                           
  3946  0063                     ??_setDimmerIntr_MaxmumValue:	
  3947                           ; 0 bytes @ 0x43
  3948                           
  3949  0063                     ??_DimmerLights_Initialization:	
  3950                           ; 0 bytes @ 0x43
  3951                           
  3952                           
  3953                           ; 0 bytes @ 0x43
  3954  0063                     	ds	1
  3955  0064                     setDimmerIntr_DimmingValue@lights:	
  3956  0064                     setDimmerIntr_MaxmumValue@lights:	
  3957                           ; 1 bytes @ 0x44
  3958                           
  3959  0064                     setProductData@address:	
  3960                           ; 1 bytes @ 0x44
  3961                           
  3962                           
  3963                           ; 1 bytes @ 0x44
  3964  0064                     	ds	1
  3965  0065                     ??_DlyOff_Main:	
  3966  0065                     ?_setRF_DimmerLights:	
  3967                           ; 0 bytes @ 0x45
  3968                           
  3969  0065                     ??_setTemp_Main:	
  3970                           ; 0 bytes @ 0x45
  3971                           
  3972  0065                     ??_setLog_Code:	
  3973                           ; 0 bytes @ 0x45
  3974                           
  3975  0065                     ??_setRFSW_AdjControl:	
  3976                           ; 0 bytes @ 0x45
  3977                           
  3978  0065                     ?_setDelayOff_GO:	
  3979                           ; 0 bytes @ 0x45
  3980                           
  3981  0065                     setDelayOff_GO@command:	
  3982                           ; 0 bytes @ 0x45
  3983                           
  3984  0065                     setRF_DimmerLights@on:	
  3985                           ; 1 bytes @ 0x45
  3986                           
  3987                           
  3988                           ; 1 bytes @ 0x45
  3989  0065                     	ds	1
  3990  0066                     ??_setRF_DimmerLights:	
  3991  0066                     setDelayOff_GO@value:	
  3992                           ; 0 bytes @ 0x46
  3993                           
  3994  0066                     setTemp_Main@error:	
  3995                           ; 1 bytes @ 0x46
  3996                           
  3997                           
  3998                           ; 1 bytes @ 0x46
  3999  0066                     	ds	1
  4000  0067                     ??_setDelayOff_GO:	
  4001  0067                     DlyOff_Main@sw:	
  4002                           ; 0 bytes @ 0x47
  4003                           
  4004  0067                     setTemp_Main@TempGO:	
  4005                           ; 1 bytes @ 0x47
  4006                           
  4007  0067                     setRFSW_AdjControl@status:	
  4008                           ; 1 bytes @ 0x47
  4009                           
  4010                           
  4011                           ; 1 bytes @ 0x47
  4012  0067                     	ds	1
  4013  0068                     ??_DelayOff_Main:	
  4014  0068                     setRFSW_AdjControl@sw:	
  4015                           ; 0 bytes @ 0x48
  4016                           
  4017  0068                     setRF_DimmerLights@status:	
  4018                           ; 1 bytes @ 0x48
  4019                           
  4020  0068                     setTemp_Main@SafeValue:	
  4021                           ; 1 bytes @ 0x48
  4022                           
  4023                           
  4024                           ; 2 bytes @ 0x48
  4025  0068                     	ds	1
  4026  0069                     setDelayOff_GO@i:	
  4027  0069                     setRF_DimmerLights@lights:	
  4028                           ; 1 bytes @ 0x49
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x49
  4032  0069                     	ds	1
  4033  006A                     ?_setDimmerLights_Dimming:	
  4034  006A                     setDelayOff_GO@j:	
  4035                           ; 0 bytes @ 0x4A
  4036                           
  4037  006A                     setDimmerLights_Dimming@status:	
  4038                           ; 1 bytes @ 0x4A
  4039                           
  4040  006A                     setTemp_Main@DangerValue:	
  4041                           ; 1 bytes @ 0x4A
  4042                           
  4043                           
  4044                           ; 2 bytes @ 0x4A
  4045  006A                     	ds	1
  4046  006B                     ??_setDimmerLights_Dimming:	
  4047  006B                     setDelayOff_GO@k:	
  4048                           ; 0 bytes @ 0x4B
  4049                           
  4050                           
  4051                           ; 1 bytes @ 0x4B
  4052  006B                     	ds	1
  4053  006C                     setDelayOff_GO@sw:	
  4054  006C                     setDimmerLights_Dimming@value:	
  4055                           ; 1 bytes @ 0x4C
  4056                           
  4057  006C                     setTemp_Main@AD:	
  4058                           ; 1 bytes @ 0x4C
  4059                           
  4060                           
  4061                           ; 2 bytes @ 0x4C
  4062  006C                     	ds	1
  4063  006D                     ?_setDimmerLights_OnOff:	
  4064  006D                     ??_setRFSW_Control:	
  4065                           ; 0 bytes @ 0x4D
  4066                           
  4067  006D                     setDimmerLights_OnOff@command:	
  4068                           ; 0 bytes @ 0x4D
  4069                           
  4070  006D                     setDimmerLights_Dimming@lights:	
  4071                           ; 1 bytes @ 0x4D
  4072                           
  4073                           
  4074                           ; 1 bytes @ 0x4D
  4075  006D                     	ds	1
  4076  006E                     ??_setDimmerLights_OnOff:	
  4077  006E                     ??_Temp_Main:	
  4078                           ; 0 bytes @ 0x4E
  4079                           
  4080  006E                     setRFSW_Control@status:	
  4081                           ; 0 bytes @ 0x4E
  4082                           
  4083                           
  4084                           ; 1 bytes @ 0x4E
  4085  006E                     	ds	1
  4086  006F                     setRFSW_Control@sw:	
  4087                           
  4088                           ; 1 bytes @ 0x4F
  4089  006F                     	ds	1
  4090  0070                     ??_setDimmerLights_Main:	
  4091  0070                     ??_RF_Main:	
  4092                           ; 0 bytes @ 0x50
  4093                           
  4094  0070                     ??_setControl_Lights_Table:	
  4095                           ; 0 bytes @ 0x50
  4096                           
  4097  0070                     ??_DimmerLights_Main:	
  4098                           ; 0 bytes @ 0x50
  4099                           
  4100  0070                     ??_main:	
  4101                           ; 0 bytes @ 0x50
  4102                           
  4103                           
  4104                           	psect	maintext
  4105  15AA                     __pmaintext:	
  4106                           ; 0 bytes @ 0x50
  4107 ;;
  4108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4109 ;;
  4110 ;; *************** function _main *****************
  4111 ;; Defined at:
  4112 ;;		line 7 in file "../src/Main_B1.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  argc            2    4[BANK1 ] int 
  4115 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  2    4[BANK1 ] int 
  4120 ;; Registers used:
  4121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4122 ;; Tracked objects:
  4123 ;;		On entry : 17F/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4127 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;Total ram usage:        4 bytes
  4132 ;; Hardware stack levels required when called:   13
  4133 ;; This function calls:
  4134 ;;		_Buzzer_Initialization
  4135 ;;		_Buzzer_Main
  4136 ;;		_CC2500_PowerOnInitial
  4137 ;;		_DelayOff_Initialization
  4138 ;;		_DelayOff_Main
  4139 ;;		_DimmerLights_Initialization
  4140 ;;		_DimmerLights_Main
  4141 ;;		_Exception_Main
  4142 ;;		_Flash_Memory_Initialization
  4143 ;;		_Flash_Memory_Main
  4144 ;;		_LED_Initialization
  4145 ;;		_LED_Main
  4146 ;;		_Load_Initialization
  4147 ;;		_Load_Main
  4148 ;;		_Mcu_Initialization
  4149 ;;		_RF_Initialization
  4150 ;;		_RF_Main
  4151 ;;		_Switch_Initialization
  4152 ;;		_Switch_Main
  4153 ;;		_Temp_Initialization
  4154 ;;		_Temp_Main
  4155 ;;		_WDT_Main
  4156 ;;		_getLoad_AD
  4157 ;;		_getTemp_AD
  4158 ;;		_myMain_Initialization
  4159 ;;		_my_MainTimer
  4160 ;; This function is called by:
  4161 ;;		Startup code after reset
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           
  4166                           ;psect for function _main
  4167  15AA                     _main:	
  4168                           
  4169                           ;Main_B1.c: 8: myMain_Initialization();
  4170                           
  4171                           ;incstack = 0
  4172                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4173  15AA  319D  25DD  3195   	fcall	_myMain_Initialization
  4174                           
  4175                           ;Main_B1.c: 9: Mcu_Initialization();
  4176  15AD  319D  257F  3195   	fcall	_Mcu_Initialization
  4177                           
  4178                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4179  15B0  3186  2629  3195   	fcall	_Flash_Memory_Initialization
  4180                           
  4181                           ;Main_B1.c: 11: LED_Initialization();
  4182  15B3  319B  2357  3195   	fcall	_LED_Initialization
  4183                           
  4184                           ;Main_B1.c: 12: Buzzer_Initialization();
  4185  15B6  319B  233D  3195   	fcall	_Buzzer_Initialization
  4186                           
  4187                           ;Main_B1.c: 14: ;;
  4188                           ;Main_B1.c: 15: Temp_Initialization();
  4189  15B9  319B  2349  3195   	fcall	_Temp_Initialization
  4190                           
  4191                           ;Main_B1.c: 16: Load_Initialization();
  4192  15BC  319B  2340  3195   	fcall	_Load_Initialization
  4193                           
  4194                           ;Main_B1.c: 17: ;;
  4195                           ;Main_B1.c: 18: DelayOff_Initialization();
  4196  15BF  319B  234F  3195   	fcall	_DelayOff_Initialization
  4197                           
  4198                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4199  15C2  319B  2388  3195   	fcall	_DimmerLights_Initialization
  4200                           
  4201                           ;Main_B1.c: 21: ;;
  4202                           ;Main_B1.c: 22: ;;
  4203                           ;Main_B1.c: 23: ;;
  4204                           ;Main_B1.c: 24: Switch_Initialization();
  4205  15C5  319B  2373  3195   	fcall	_Switch_Initialization
  4206                           
  4207                           ;Main_B1.c: 25: RF_Initialization();
  4208  15C8  319B  2343  3195   	fcall	_RF_Initialization
  4209                           
  4210                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4211  15CB  319E  2619  3195   	fcall	_CC2500_PowerOnInitial
  4212  15CE                     l10338:	
  4213                           ;Main_B1.c: 27: ;;
  4214                           ;Main_B1.c: 28: ;;
  4215                           ;Main_B1.c: 30: while (1) {
  4216                           
  4217                           
  4218                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4219  15CE  0021               	movlb	1	; select bank1
  4220  15CF  1C2E               	btfss	_myMain^(0+128),0
  4221  15D0  2DD9               	goto	l10342
  4222                           
  4223                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4224  15D1  3005               	movlw	5
  4225  15D2  318A  22AC  3195   	fcall	_getLoad_AD
  4226                           
  4227                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4228  15D5  3009               	movlw	9
  4229  15D6  3193  23E2  3195   	fcall	_getTemp_AD
  4230  15D9                     l10342:	
  4231                           
  4232                           ;Main_B1.c: 57: }
  4233                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4234  15D9  0022               	movlb	2	; select bank2
  4235  15DA  1C31               	btfss	_Timer1^(0+256),0
  4236  15DB  2DCE               	goto	l10338
  4237                           
  4238                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4239  15DC  1031               	bcf	_Timer1^(0+256),0
  4240                           
  4241                           ;Main_B1.c: 96: my_MainTimer();
  4242  15DD  3193  2366  3195   	fcall	_my_MainTimer
  4243                           
  4244                           ;Main_B1.c: 97: WDT_Main();
  4245  15E0  3188  2000  3195   	fcall	_WDT_Main
  4246                           
  4247                           ;Main_B1.c: 98: ;;
  4248                           ;Main_B1.c: 99: ;;
  4249                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4250  15E3  0021               	movlb	1	; select bank1
  4251  15E4  1C2E               	btfss	_myMain^(0+128),0
  4252  15E5  2DCE               	goto	l10338
  4253                           
  4254                           ;Main_B1.c: 101: Flash_Memory_Main();
  4255  15E6  3194  2422  3195   	fcall	_Flash_Memory_Main
  4256                           
  4257                           ;Main_B1.c: 103: LED_Main();
  4258  15E9  319B  235B  3195   	fcall	_LED_Main
  4259                           
  4260                           ;Main_B1.c: 104: Buzzer_Main();
  4261  15EC  3187  27B6  3195   	fcall	_Buzzer_Main
  4262                           
  4263                           ;Main_B1.c: 106: ;;
  4264                           ;Main_B1.c: 107: Temp_Main();
  4265  15EF  319B  234C  3195   	fcall	_Temp_Main
  4266                           
  4267                           ;Main_B1.c: 108: Load_Main();
  4268  15F2  3180  2053  3195   	fcall	_Load_Main
  4269                           
  4270                           ;Main_B1.c: 109: ;;
  4271                           ;Main_B1.c: 111: ;;
  4272                           ;Main_B1.c: 112: DimmerLights_Main();
  4273  15F5  319F  274F  3195   	fcall	_DimmerLights_Main
  4274                           
  4275                           ;Main_B1.c: 113: Switch_Main();
  4276  15F8  319B  2396  3195   	fcall	_Switch_Main
  4277                           
  4278                           ;Main_B1.c: 114: ;;
  4279                           ;Main_B1.c: 115: ;;
  4280                           ;Main_B1.c: 117: RF_Main();
  4281  15FB  319B  2346  3195   	fcall	_RF_Main
  4282                           
  4283                           ;Main_B1.c: 118: DelayOff_Main();
  4284  15FE  319B  2353  3195   	fcall	_DelayOff_Main
  4285                           
  4286                           ;Main_B1.c: 119: ;;
  4287                           ;Main_B1.c: 120: ;;
  4288                           ;Main_B1.c: 121: Exception_Main();
  4289  1601  3185  2554  3195   	fcall	_Exception_Main
  4290  1604  2DCE               	goto	l10338
  4291  1605                     __end_of_main:	
  4292                           ;Main_B1.c: 128: }
  4293                           ;Main_B1.c: 129: }
  4294                           ;Main_B1.c: 163: }
  4295                           ;Main_B1.c: 164: return (0);
  4296                           ;	Return value of _main is never used
  4297                           
  4298                           
  4299                           	psect	text1
  4300  1366                     __ptext1:	
  4301 ;; *************** function _my_MainTimer *****************
  4302 ;; Defined at:
  4303 ;;		line 185 in file "../src/Main_B1.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;		None               void
  4310 ;; Registers used:
  4311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;Total ram usage:        1 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    7
  4324 ;; This function calls:
  4325 ;;		_setBuz
  4326 ;; This function is called by:
  4327 ;;		_main
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           
  4332                           ;psect for function _my_MainTimer
  4333  1366                     _my_MainTimer:	
  4334                           
  4335                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4336                           
  4337                           ;incstack = 0
  4338                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4339  1366  0021               	movlb	1	; select bank1
  4340  1367  182E               	btfsc	_myMain^(0+128),0
  4341  1368  2B80               	goto	l10028
  4342                           
  4343                           ;Main_B1.c: 188: myMain.PowerCount++;
  4344  1369  3001               	movlw	1
  4345  136A  0020               	movlb	0	; select bank0
  4346  136B  00AD               	movwf	??_my_MainTimer
  4347  136C  082D               	movf	??_my_MainTimer,w
  4348  136D  0021               	movlb	1	; select bank1
  4349  136E  07AF               	addwf	(_myMain^(0+128)+1),f
  4350                           
  4351                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4352  136F  082F               	movf	(_myMain^(0+128)+1),w
  4353  1370  3A4B               	xorlw	75
  4354  1371  1D03               	skipz
  4355  1372  0008               	return
  4356                           
  4357                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4358  1373  01AF               	clrf	(_myMain^(0+128)+1)
  4359                           
  4360                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4361  1374  142E               	bsf	_myMain^(0+128),0
  4362                           
  4363                           ;Main_B1.c: 196: setBuz(3, 50);
  4364  1375  3032               	movlw	50
  4365  1376  0020               	movlb	0	; select bank0
  4366  1377  00A9               	movwf	setBuz@time
  4367  1378  3000               	movlw	0
  4368  1379  00AA               	movwf	setBuz@time+1
  4369  137A  3003               	movlw	3
  4370  137B  3195  2551         	fcall	_setBuz
  4371                           
  4372                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4373  137D  0021               	movlb	1	; select bank1
  4374  137E  162E               	bsf	_myMain^(0+128),4
  4375                           
  4376                           ;Main_B1.c: 206: }
  4377                           ;Main_B1.c: 207: } else {
  4378  137F  0008               	return
  4379  1380                     l10028:	
  4380                           
  4381                           ;Main_B1.c: 208: myMain.PowerCount++;
  4382  1380  3001               	movlw	1
  4383  1381  0020               	movlb	0	; select bank0
  4384  1382  00AD               	movwf	??_my_MainTimer
  4385  1383  082D               	movf	??_my_MainTimer,w
  4386  1384  0021               	movlb	1	; select bank1
  4387  1385  07AF               	addwf	(_myMain^(0+128)+1),f
  4388                           
  4389                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4390  1386  082F               	movf	(_myMain^(0+128)+1),w
  4391  1387  3A32               	xorlw	50
  4392  1388  1903               	btfsc	3,2
  4393                           
  4394                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4395  1389  01AF               	clrf	(_myMain^(0+128)+1)
  4396                           
  4397                           ;Main_B1.c: 226: }
  4398                           ;Main_B1.c: 228: myMain.Count1++;
  4399  138A  3001               	movlw	1
  4400  138B  07B2               	addwf	(_myMain^(0+128)+4),f
  4401  138C  3000               	movlw	0
  4402  138D  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4403                           
  4404                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4405  138E  3004               	movlw	4
  4406  138F  3EAE               	addlw	_myMain& (0+255)
  4407  1390  0086               	movwf	6
  4408  1391  0187               	clrf	7
  4409  1392  3F40               	moviw [0]fsr1
  4410  1393  3A32               	xorlw	50
  4411  1394  1D03               	skipz
  4412  1395  2B98               	goto	u11505
  4413  1396  3F41               	moviw [1]fsr1
  4414  1397  3A00               	xorlw	0
  4415  1398                     u11505:	
  4416  1398  1D03               	skipz
  4417  1399  0008               	return
  4418                           
  4419                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4420  139A  01B2               	clrf	(_myMain^(0+128)+4)
  4421  139B  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4422                           
  4423                           ;Main_B1.c: 242: if (myMain.Flag) {
  4424  139C  1CAE               	btfss	_myMain^(0+128),1
  4425  139D  2BA0               	goto	l1444
  4426                           
  4427                           ;Main_B1.c: 243: myMain.Flag = 0;
  4428  139E  10AE               	bcf	_myMain^(0+128),1
  4429                           
  4430                           ;Main_B1.c: 252: } else {
  4431  139F  0008               	return
  4432  13A0                     l1444:	
  4433                           
  4434                           ;Main_B1.c: 253: myMain.Flag = 1;
  4435  13A0  14AE               	bsf	_myMain^(0+128),1
  4436  13A1  0008               	return
  4437  13A2                     __end_of_my_MainTimer:	
  4438                           
  4439                           	psect	text2
  4440  1DDD                     __ptext2:	
  4441 ;; *************** function _myMain_Initialization *****************
  4442 ;; Defined at:
  4443 ;;		line 170 in file "../src/Main_B1.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;		None               void
  4450 ;; Registers used:
  4451 ;;		wreg, fsr1l, fsr1h
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4459 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4460 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;Total ram usage:        1 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    5
  4464 ;; This function calls:
  4465 ;;		Nothing
  4466 ;; This function is called by:
  4467 ;;		_main
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           
  4472                           ;psect for function _myMain_Initialization
  4473  1DDD                     _myMain_Initialization:	
  4474                           
  4475                           ;Main_B1.c: 173: product = &_product;
  4476                           
  4477                           ;incstack = 0
  4478                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4479  1DDD  3045               	movlw	__product& (0+255)
  4480  1DDE  0020               	movlb	0	; select bank0
  4481  1DDF  00A0               	movwf	??_myMain_Initialization
  4482  1DE0  0820               	movf	??_myMain_Initialization,w
  4483  1DE1  0021               	movlb	1	; select bank1
  4484  1DE2  00E3               	movwf	_product^(0+128)
  4485                           
  4486                           ;Main_B1.c: 174: product->Data[20] = 209;
  4487  1DE3  30D1               	movlw	209
  4488  1DE4  0020               	movlb	0	; select bank0
  4489  1DE5  00A0               	movwf	??_myMain_Initialization
  4490  1DE6  0021               	movlb	1	; select bank1
  4491  1DE7  0863               	movf	_product^(0+128),w
  4492  1DE8  3E14               	addlw	20
  4493  1DE9  0086               	movwf	6
  4494  1DEA  3002               	movlw	2	; select bank4/5
  4495  1DEB  0087               	movwf	7
  4496  1DEC  0020               	movlb	0	; select bank0
  4497  1DED  0820               	movf	??_myMain_Initialization,w
  4498  1DEE  0081               	movwf	1
  4499  1DEF  0008               	return
  4500  1DF0                     __end_of_myMain_Initialization:	
  4501                           
  4502                           	psect	text3
  4503  13E2                     __ptext3:	
  4504 ;; *************** function _getTemp_AD *****************
  4505 ;; Defined at:
  4506 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  channel         1    wreg     unsigned char 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  channel         1    5[BANK0 ] unsigned char 
  4511 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;		None               void
  4514 ;; Registers used:
  4515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;Total ram usage:        4 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    7
  4528 ;; This function calls:
  4529 ;;		_getAD
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _getTemp_AD
  4537  13E2                     _getTemp_AD:	
  4538                           
  4539                           ;incstack = 0
  4540                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4541                           ;getTemp_AD@channel stored from wreg
  4542  13E2  0020               	movlb	0	; select bank0
  4543  13E3  00A5               	movwf	getTemp_AD@channel
  4544                           
  4545                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4546  13E4  01A6               	clrf	getTemp_AD@ADRES
  4547  13E5  01A7               	clrf	getTemp_AD@ADRES+1
  4548                           
  4549                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4550  13E6  0021               	movlb	1	; select bank1
  4551  13E7  1D51               	btfss	_Temp^(0+128),2
  4552  13E8  2C12               	goto	l7866
  4553                           
  4554                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4555  13E9  30F0               	movlw	240
  4556  13EA  0020               	movlb	0	; select bank0
  4557  13EB  00A4               	movwf	??_getTemp_AD
  4558  13EC  0824               	movf	??_getTemp_AD,w
  4559  13ED  00A0               	movwf	getAD@adcon1
  4560  13EE  0825               	movf	getTemp_AD@channel,w
  4561  13EF  3190  2006  3193   	fcall	_getAD
  4562  13F2  0020               	movlb	0	; select bank0
  4563  13F3  0821               	movf	?_getAD+1,w
  4564  13F4  01A7               	clrf	getTemp_AD@ADRES+1
  4565  13F5  07A7               	addwf	getTemp_AD@ADRES+1,f
  4566  13F6  0820               	movf	?_getAD,w
  4567  13F7  01A6               	clrf	getTemp_AD@ADRES
  4568  13F8  07A6               	addwf	getTemp_AD@ADRES,f
  4569                           
  4570                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4571  13F9  0827               	movf	getTemp_AD@ADRES+1,w
  4572  13FA  0426               	iorwf	getTemp_AD@ADRES,w
  4573  13FB  1903               	skipnz
  4574  13FC  2C12               	goto	l7866
  4575                           
  4576                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4577  13FD  0827               	movf	getTemp_AD@ADRES+1,w
  4578  13FE  0021               	movlb	1	; select bank1
  4579  13FF  025A               	subwf	((_Temp+1)^(0+128)+8),w
  4580  1400  1D03               	skipz
  4581  1401  2C06               	goto	u7975
  4582  1402  0020               	movlb	0	; select bank0
  4583  1403  0826               	movf	getTemp_AD@ADRES,w
  4584  1404  0021               	movlb	1	; select bank1
  4585  1405  0259               	subwf	(_Temp^(0+128)+8),w
  4586  1406                     u7975:	
  4587  1406  1803               	skipnc
  4588  1407  2C12               	goto	l7866
  4589                           
  4590                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4591  1408  0020               	movlb	0	; select bank0
  4592  1409  0827               	movf	getTemp_AD@ADRES+1,w
  4593  140A  0021               	movlb	1	; select bank1
  4594  140B  01DA               	clrf	((_Temp+1)^(0+128)+8)
  4595  140C  07DA               	addwf	((_Temp+1)^(0+128)+8),f
  4596  140D  0020               	movlb	0	; select bank0
  4597  140E  0826               	movf	getTemp_AD@ADRES,w
  4598  140F  0021               	movlb	1	; select bank1
  4599  1410  01D9               	clrf	(_Temp^(0+128)+8)
  4600  1411  07D9               	addwf	(_Temp^(0+128)+8),f
  4601  1412                     l7866:	
  4602                           
  4603                           ;OverTemperature_B1.c: 32: }
  4604                           ;OverTemperature_B1.c: 33: }
  4605                           ;OverTemperature_B1.c: 34: }
  4606                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4607  1412  30F0               	movlw	240
  4608  1413  0020               	movlb	0	; select bank0
  4609  1414  00A4               	movwf	??_getTemp_AD
  4610  1415  0824               	movf	??_getTemp_AD,w
  4611  1416  00A0               	movwf	getAD@adcon1
  4612  1417  0825               	movf	getTemp_AD@channel,w
  4613  1418  3190  2006         	fcall	_getAD
  4614  141A  0020               	movlb	0	; select bank0
  4615  141B  0821               	movf	?_getAD+1,w
  4616  141C  01A7               	clrf	getTemp_AD@ADRES+1
  4617  141D  07A7               	addwf	getTemp_AD@ADRES+1,f
  4618  141E  0820               	movf	?_getAD,w
  4619  141F  01A6               	clrf	getTemp_AD@ADRES
  4620  1420  07A6               	addwf	getTemp_AD@ADRES,f
  4621  1421  0008               	return
  4622  1422                     __end_of_getTemp_AD:	
  4623                           
  4624                           	psect	text4
  4625  0AAC                     __ptext4:	
  4626 ;; *************** function _getLoad_AD *****************
  4627 ;; Defined at:
  4628 ;;		line 15 in file "../src/OverLoad_B1.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  channel         1    wreg     unsigned char 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  channel         1    6[BANK0 ] unsigned char 
  4633 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4634 ;;  i               1   11[BANK0 ] unsigned char 
  4635 ;;  j               1    8[BANK0 ] unsigned char 
  4636 ;;  k               1    7[BANK0 ] unsigned char 
  4637 ;; Return value:  Size  Location     Type
  4638 ;;		None               void
  4639 ;; Registers used:
  4640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4649 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4650 ;;Total ram usage:        8 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:    7
  4653 ;; This function calls:
  4654 ;;		_getAD
  4655 ;; This function is called by:
  4656 ;;		_main
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           
  4661                           ;psect for function _getLoad_AD
  4662  0AAC                     _getLoad_AD:	
  4663                           
  4664                           ;incstack = 0
  4665                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4666                           ;getLoad_AD@channel stored from wreg
  4667  0AAC  0020               	movlb	0	; select bank0
  4668  0AAD  00A6               	movwf	getLoad_AD@channel
  4669                           
  4670                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4671  0AAE  01AB               	clrf	getLoad_AD@i
  4672  0AAF  01A8               	clrf	getLoad_AD@j
  4673  0AB0  01A7               	clrf	getLoad_AD@k
  4674                           
  4675                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4676  0AB1  01A9               	clrf	getLoad_AD@ADRES
  4677  0AB2  01AA               	clrf	getLoad_AD@ADRES+1
  4678                           
  4679                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4680  0AB3  0022               	movlb	2	; select bank2
  4681  0AB4  1E3E               	btfss	_Load^(0+256),4
  4682  0AB5  0008               	return
  4683                           
  4684                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4685  0AB6  30F3               	movlw	243
  4686  0AB7  0020               	movlb	0	; select bank0
  4687  0AB8  00A4               	movwf	??_getLoad_AD
  4688  0AB9  0824               	movf	??_getLoad_AD,w
  4689  0ABA  00A0               	movwf	getAD@adcon1
  4690  0ABB  0826               	movf	getLoad_AD@channel,w
  4691  0ABC  3190  2006  318A   	fcall	_getAD
  4692  0ABF  0020               	movlb	0	; select bank0
  4693  0AC0  0821               	movf	?_getAD+1,w
  4694  0AC1  01AA               	clrf	getLoad_AD@ADRES+1
  4695  0AC2  07AA               	addwf	getLoad_AD@ADRES+1,f
  4696  0AC3  0820               	movf	?_getAD,w
  4697  0AC4  01A9               	clrf	getLoad_AD@ADRES
  4698  0AC5  07A9               	addwf	getLoad_AD@ADRES,f
  4699                           
  4700                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4701  0AC6  01AB               	clrf	getLoad_AD@i
  4702  0AC7  3004               	movlw	4
  4703  0AC8  022B               	subwf	getLoad_AD@i,w
  4704  0AC9  1803               	btfsc	3,0
  4705  0ACA  2AF2               	goto	l7834
  4706  0ACB                     l7822:	
  4707                           
  4708                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4709  0ACB  352B               	lslf	getLoad_AD@i,w
  4710  0ACC  3E49               	addlw	(_Load+11)& (0+255)
  4711  0ACD  0086               	movwf	6
  4712  0ACE  3001               	movlw	1	; select bank2/3
  4713  0ACF  0087               	movwf	7
  4714  0AD0  3F40               	moviw [0]fsr1
  4715  0AD1  00A4               	movwf	??_getLoad_AD
  4716  0AD2  3F41               	moviw [1]fsr1
  4717  0AD3  00A5               	movwf	??_getLoad_AD+1
  4718  0AD4  082A               	movf	getLoad_AD@ADRES+1,w
  4719  0AD5  0225               	subwf	??_getLoad_AD+1,w
  4720  0AD6  1D03               	skipz
  4721  0AD7  2ADA               	goto	u7875
  4722  0AD8  0829               	movf	getLoad_AD@ADRES,w
  4723  0AD9  0224               	subwf	??_getLoad_AD,w
  4724  0ADA                     u7875:	
  4725  0ADA  1803               	skipnc
  4726  0ADB  2AEA               	goto	l7830
  4727  0ADC  08A8               	movf	getLoad_AD@j,f
  4728  0ADD  1D03               	skipz
  4729  0ADE  2AEA               	goto	l7830
  4730                           
  4731                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4732  0ADF  352B               	lslf	getLoad_AD@i,w
  4733  0AE0  3E49               	addlw	(_Load+11)& (0+255)
  4734  0AE1  0086               	movwf	6
  4735  0AE2  3001               	movlw	1	; select bank2/3
  4736  0AE3  0087               	movwf	7
  4737  0AE4  0829               	movf	getLoad_AD@ADRES,w
  4738  0AE5  3FC0               	movwi [0]fsr1
  4739  0AE6  082A               	movf	getLoad_AD@ADRES+1,w
  4740  0AE7  3FC1               	movwi [1]fsr1
  4741                           
  4742                           ;OverLoad_B1.c: 24: j = 1;
  4743  0AE8  01A8               	clrf	getLoad_AD@j
  4744  0AE9  0AA8               	incf	getLoad_AD@j,f
  4745  0AEA                     l7830:	
  4746  0AEA  3001               	movlw	1
  4747  0AEB  00A4               	movwf	??_getLoad_AD
  4748  0AEC  0824               	movf	??_getLoad_AD,w
  4749  0AED  07AB               	addwf	getLoad_AD@i,f
  4750  0AEE  3004               	movlw	4
  4751  0AEF  022B               	subwf	getLoad_AD@i,w
  4752  0AF0  1C03               	skipc
  4753  0AF1  2ACB               	goto	l7822
  4754  0AF2                     l7834:	
  4755                           
  4756                           ;OverLoad_B1.c: 25: }
  4757                           ;OverLoad_B1.c: 26: }
  4758                           ;OverLoad_B1.c: 27: if (j == 0) {
  4759  0AF2  08A8               	movf	getLoad_AD@j,f
  4760  0AF3  1D03               	skipz
  4761  0AF4  0008               	return
  4762                           
  4763                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4764  0AF5  01AB               	clrf	getLoad_AD@i
  4765  0AF6                     L1:	
  4766  0AF6  3004               	movlw	4
  4767  0AF7  022B               	subwf	getLoad_AD@i,w
  4768  0AF8  1803               	btfsc	3,0
  4769  0AF9  0008               	return
  4770                           
  4771                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4772  0AFA  352B               	lslf	getLoad_AD@i,w
  4773  0AFB  3E53               	addlw	(_Load+21)& (0+255)
  4774  0AFC  0086               	movwf	6
  4775  0AFD  3001               	movlw	1	; select bank2/3
  4776  0AFE  0087               	movwf	7
  4777  0AFF  3F40               	moviw [0]fsr1
  4778  0B00  00A4               	movwf	??_getLoad_AD
  4779  0B01  3F41               	moviw [1]fsr1
  4780  0B02  00A5               	movwf	??_getLoad_AD+1
  4781  0B03  0825               	movf	??_getLoad_AD+1,w
  4782  0B04  022A               	subwf	getLoad_AD@ADRES+1,w
  4783  0B05  1D03               	skipz
  4784  0B06  2B09               	goto	u7925
  4785  0B07  0824               	movf	??_getLoad_AD,w
  4786  0B08  0229               	subwf	getLoad_AD@ADRES,w
  4787  0B09                     u7925:	
  4788  0B09  1803               	skipnc
  4789  0B0A  2B19               	goto	l7850
  4790  0B0B  08A7               	movf	getLoad_AD@k,f
  4791  0B0C  1D03               	skipz
  4792  0B0D  2B19               	goto	l7850
  4793                           
  4794                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4795  0B0E  352B               	lslf	getLoad_AD@i,w
  4796  0B0F  3E53               	addlw	(_Load+21)& (0+255)
  4797  0B10  0086               	movwf	6
  4798  0B11  3001               	movlw	1	; select bank2/3
  4799  0B12  0087               	movwf	7
  4800  0B13  0829               	movf	getLoad_AD@ADRES,w
  4801  0B14  3FC0               	movwi [0]fsr1
  4802  0B15  082A               	movf	getLoad_AD@ADRES+1,w
  4803  0B16  3FC1               	movwi [1]fsr1
  4804                           
  4805                           ;OverLoad_B1.c: 31: k = 1;
  4806  0B17  01A7               	clrf	getLoad_AD@k
  4807  0B18  0AA7               	incf	getLoad_AD@k,f
  4808  0B19                     l7850:	
  4809  0B19  3001               	movlw	1
  4810  0B1A  00A4               	movwf	??_getLoad_AD
  4811  0B1B  0824               	movf	??_getLoad_AD,w
  4812  0B1C  07AB               	addwf	getLoad_AD@i,f
  4813  0B1D  2AF6               	goto	L1
  4814  0B1E                     __end_of_getLoad_AD:	
  4815                           
  4816                           	psect	text5
  4817  1006                     __ptext5:	
  4818 ;; *************** function _getAD *****************
  4819 ;; Defined at:
  4820 ;;		line 461 in file "../src/MCU_B1.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  adcon0          1    wreg     unsigned char 
  4823 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4824 ;; Auto vars:     Size  Location     Type
  4825 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4826 ;; Return value:  Size  Location     Type
  4827 ;;                  2    0[BANK0 ] int 
  4828 ;; Registers used:
  4829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4835 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4838 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4839 ;;Total ram usage:        4 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; Hardware stack levels required when called:    6
  4842 ;; This function calls:
  4843 ;;		_Timeout_Counter
  4844 ;;		_set_TimeoutCleared
  4845 ;; This function is called by:
  4846 ;;		_getLoad_AD
  4847 ;;		_getTemp_AD
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851                           
  4852                           ;psect for function _getAD
  4853  1006                     _getAD:	
  4854                           
  4855                           ;incstack = 0
  4856                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4857                           ;getAD@adcon0 stored from wreg
  4858  1006  0020               	movlb	0	; select bank0
  4859  1007  00A3               	movwf	getAD@adcon0
  4860                           
  4861                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4862  1008  0823               	movf	getAD@adcon0,w
  4863  1009  0021               	movlb	1	; select bank1
  4864  100A  009D               	movwf	29	;volatile
  4865                           
  4866                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4867  100B  0020               	movlb	0	; select bank0
  4868  100C  0820               	movf	getAD@adcon1,w
  4869  100D  0021               	movlb	1	; select bank1
  4870  100E  009E               	movwf	30	;volatile
  4871                           
  4872                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4873  100F  149D               	bsf	29,1	;volatile
  4874                           
  4875                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4876  1010  2814               	goto	l7302
  4877  1011                     l7300:	
  4878                           
  4879                           ;MCU_B1.c: 466: Timeout_Counter();
  4880  1011  319E  262E  3190   	fcall	_Timeout_Counter
  4881  1014                     l7302:	
  4882  1014  0021               	movlb	1	; select bank1
  4883  1015  1C9D               	btfss	29,1	;volatile
  4884  1016  2819               	goto	l7306
  4885  1017  1D38               	btfss	(_myMain^(0+128)+10),2
  4886  1018  2811               	goto	l7300
  4887  1019                     l7306:	
  4888                           
  4889                           ;MCU_B1.c: 467: };
  4890                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4891  1019  319B  2377         	fcall	_set_TimeoutCleared
  4892                           
  4893                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4894  101B  0021               	movlb	1	; select bank1
  4895  101C  081C               	movf	28,w	;volatile
  4896  101D  0020               	movlb	0	; select bank0
  4897  101E  01A1               	clrf	?_getAD+1
  4898  101F  07A1               	addwf	?_getAD+1,f
  4899  1020  0021               	movlb	1	; select bank1
  4900  1021  081B               	movf	27,w	;volatile
  4901  1022  0020               	movlb	0	; select bank0
  4902  1023  01A0               	clrf	?_getAD
  4903  1024  07A0               	addwf	?_getAD,f
  4904  1025  0008               	return
  4905  1026                     __end_of_getAD:	
  4906                           
  4907                           	psect	text6
  4908  0800                     __ptext6:	
  4909 ;; *************** function _WDT_Main *****************
  4910 ;; Defined at:
  4911 ;;		line 1116 in file "../src/MCU_B1.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;		None
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;		None
  4916 ;; Return value:  Size  Location     Type
  4917 ;;		None               void
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0, pclath, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4928 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;Total ram usage:        1 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    6
  4932 ;; This function calls:
  4933 ;;		_WDT_Clearing
  4934 ;; This function is called by:
  4935 ;;		_main
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function _WDT_Main
  4941  0800                     _WDT_Main:	
  4942                           
  4943                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4944                           
  4945                           ;incstack = 0
  4946                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4947  0800  0022               	movlb	2	; select bank2
  4948  0801  1C36               	btfss	_WDT^(0+256),0
  4949  0802  0008               	return
  4950                           
  4951                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  4952  0803  3001               	movlw	1
  4953  0804  02B7               	subwf	(_WDT^(0+256)+1),f
  4954  0805  0837               	movf	(_WDT^(0+256)+1),w
  4955  0806  3AFF               	xorlw	255
  4956  0807  1903               	skipnz
  4957  0808  0008               	return
  4958                           
  4959                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  4960  0809  3064               	movlw	100
  4961  080A  0020               	movlb	0	; select bank0
  4962  080B  00A0               	movwf	??_WDT_Main
  4963  080C  0820               	movf	??_WDT_Main,w
  4964  080D  0022               	movlb	2	; select bank2
  4965  080E  00B7               	movwf	(_WDT^(0+256)+1)
  4966                           
  4967                           ;MCU_B1.c: 1120: WDT_Clearing();
  4968  080F  3180  2002         	fcall	_WDT_Clearing
  4969  0811  0008               	return
  4970  0812                     __end_of_WDT_Main:	
  4971                           
  4972                           	psect	text7
  4973  0002                     __ptext7:	
  4974 ;; *************** function _WDT_Clearing *****************
  4975 ;; Defined at:
  4976 ;;		line 1126 in file "../src/MCU_B1.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;		None
  4981 ;; Return value:  Size  Location     Type
  4982 ;;		None               void
  4983 ;; Registers used:
  4984 ;;		None
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;Total ram usage:        0 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:    5
  4997 ;; This function calls:
  4998 ;;		Nothing
  4999 ;; This function is called by:
  5000 ;;		_WDT_Main
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _WDT_Clearing
  5006  0002                     _WDT_Clearing:	
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in _WDT_Clearing: []
  5010  0002  0064               	clrwdt	;# 
  5011  0003  0008               	return
  5012  0004                     __end_of_WDT_Clearing:	
  5013                           
  5014                           	psect	text8
  5015  1B4C                     __ptext8:	
  5016 ;; *************** function _Temp_Main *****************
  5017 ;; Defined at:
  5018 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;		None
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;		None
  5023 ;; Return value:  Size  Location     Type
  5024 ;;		None               void
  5025 ;; Registers used:
  5026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;Total ram usage:        0 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    8
  5039 ;; This function calls:
  5040 ;;		_setTemp_Main
  5041 ;; This function is called by:
  5042 ;;		_main
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           
  5047                           ;psect for function _Temp_Main
  5048  1B4C                     _Temp_Main:	
  5049                           
  5050                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5051                           
  5052                           ;incstack = 0
  5053                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5054  1B4C  318D  25E0         	fcall	_setTemp_Main
  5055  1B4E  0008               	return
  5056  1B4F                     __end_of_Temp_Main:	
  5057                           
  5058                           	psect	text9
  5059  0DE0                     __ptext9:	
  5060 ;; *************** function _setTemp_Main *****************
  5061 ;; Defined at:
  5062 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5063 ;; Parameters:    Size  Location     Type
  5064 ;;		None
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  AD              2   76[BANK0 ] unsigned int 
  5067 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5068 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5069 ;;  TempGO          1   71[BANK0 ] unsigned char 
  5070 ;;  error           1   70[BANK0 ] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;		None               void
  5073 ;; Registers used:
  5074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5081 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;Total ram usage:        9 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    7
  5087 ;; This function calls:
  5088 ;;		_getMain_All_Error_Status
  5089 ;;		_getMain_All_LightsStatus
  5090 ;;		_setBuz
  5091 ;;		_setProductData
  5092 ;; This function is called by:
  5093 ;;		_Temp_Main
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _setTemp_Main
  5099  0DE0                     _setTemp_Main:	
  5100                           
  5101                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5102                           
  5103                           ;incstack = 0
  5104                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5105  0DE0  3000               	movlw	0
  5106  0DE1  3191  2178  318D   	fcall	_getMain_All_Error_Status
  5107  0DE4  0020               	movlb	0	; select bank0
  5108  0DE5  00E5               	movwf	??_setTemp_Main
  5109  0DE6  0865               	movf	??_setTemp_Main,w
  5110  0DE7  00E6               	movwf	setTemp_Main@error
  5111                           
  5112                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5113  0DE8  01E8               	clrf	setTemp_Main@SafeValue
  5114  0DE9  01E9               	clrf	setTemp_Main@SafeValue+1
  5115  0DEA  01EA               	clrf	setTemp_Main@DangerValue
  5116  0DEB  01EB               	clrf	setTemp_Main@DangerValue+1
  5117                           
  5118                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5119  0DEC  319B  23D0  318D   	fcall	_getMain_All_LightsStatus
  5120  0DEF  0020               	movlb	0	; select bank0
  5121  0DF0  00E5               	movwf	??_setTemp_Main
  5122  0DF1  0865               	movf	??_setTemp_Main,w
  5123  0DF2  00E7               	movwf	setTemp_Main@TempGO
  5124                           
  5125                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5126  0DF3  0021               	movlb	1	; select bank1
  5127  0DF4  1C51               	btfss	_Temp^(0+128),0
  5128  0DF5  2E8D               	goto	l1783
  5129                           
  5130                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5131  0DF6  1951               	btfsc	_Temp^(0+128),2
  5132  0DF7  2E15               	goto	l9682
  5133                           
  5134                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5135  0DF8  0020               	movlb	0	; select bank0
  5136  0DF9  0867               	movf	setTemp_Main@TempGO,w
  5137  0DFA  3A01               	xorlw	1
  5138  0DFB  1D03               	skipz
  5139  0DFC  2E00               	goto	l1789
  5140  0DFD  0021               	movlb	1	; select bank1
  5141  0DFE  1CD1               	btfss	_Temp^(0+128),1
  5142  0DFF  2E03               	goto	l9674
  5143  0E00                     l1789:	
  5144  0E00  0021               	movlb	1	; select bank1
  5145  0E01  1CD1               	btfss	_Temp^(0+128),1
  5146  0E02  2E12               	goto	l9680
  5147  0E03                     l9674:	
  5148                           
  5149                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5150  0E03  3001               	movlw	1
  5151  0E04  07D2               	addwf	(_Temp^(0+128)+1),f
  5152  0E05  3000               	movlw	0
  5153  0E06  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5154                           
  5155                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5156  0E07  3000               	movlw	0
  5157  0E08  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5158  0E09  30FA               	movlw	250
  5159  0E0A  1903               	skipnz
  5160  0E0B  0252               	subwf	(_Temp^(0+128)+1),w
  5161  0E0C  1C03               	skipc
  5162  0E0D  0008               	return
  5163                           
  5164                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5165  0E0E  01D2               	clrf	(_Temp^(0+128)+1)
  5166  0E0F  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5167                           
  5168                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5169  0E10  1551               	bsf	_Temp^(0+128),2
  5170                           
  5171                           ;OverTemperature_B1.c: 83: }
  5172                           ;OverTemperature_B1.c: 84: } else {
  5173  0E11  0008               	return
  5174  0E12                     l9680:	
  5175                           
  5176                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5177  0E12  01D2               	clrf	(_Temp^(0+128)+1)
  5178  0E13  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5179                           
  5180                           ;OverTemperature_B1.c: 86: }
  5181                           ;OverTemperature_B1.c: 87: } else {
  5182  0E14  0008               	return
  5183  0E15                     l9682:	
  5184                           
  5185                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5186  0E15  3001               	movlw	1
  5187  0E16  07D2               	addwf	(_Temp^(0+128)+1),f
  5188  0E17  3000               	movlw	0
  5189  0E18  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5190                           
  5191                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5192  0E19  3000               	movlw	0
  5193  0E1A  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5194  0E1B  3005               	movlw	5
  5195  0E1C  1903               	skipnz
  5196  0E1D  0252               	subwf	(_Temp^(0+128)+1),w
  5197  0E1E  1C03               	skipc
  5198  0E1F  0008               	return
  5199                           
  5200                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5201  0E20  01D2               	clrf	(_Temp^(0+128)+1)
  5202  0E21  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5203                           
  5204                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5205  0E22  3008               	movlw	8
  5206  0E23  3ED1               	addlw	_Temp& (0+255)
  5207  0E24  0086               	movwf	6
  5208  0E25  0187               	clrf	7
  5209  0E26  0016               	moviw fsr1++
  5210  0E27  0401               	iorwf	1,w
  5211  0E28  1903               	skipnz
  5212  0E29  2E85               	goto	l1794
  5213                           
  5214                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5215  0E2A  1151               	bcf	_Temp^(0+128),2
  5216                           
  5217                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5218  0E2B  085A               	movf	((_Temp+1)^(0+128)+8),w
  5219  0E2C  0020               	movlb	0	; select bank0
  5220  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5221  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5222  0E2F  0021               	movlb	1	; select bank1
  5223  0E30  0859               	movf	(_Temp^(0+128)+8),w
  5224  0E31  0020               	movlb	0	; select bank0
  5225  0E32  01EC               	clrf	setTemp_Main@AD
  5226  0E33  07EC               	addwf	setTemp_Main@AD,f
  5227                           
  5228                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5229  0E34  3090               	movlw	144
  5230  0E35  00E8               	movwf	setTemp_Main@SafeValue
  5231  0E36  3001               	movlw	1
  5232  0E37  00E9               	movwf	setTemp_Main@SafeValue+1
  5233                           
  5234                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5235  0E38  3059               	movlw	89
  5236  0E39  00EA               	movwf	setTemp_Main@DangerValue
  5237  0E3A  3001               	movlw	1
  5238  0E3B  00EB               	movwf	setTemp_Main@DangerValue+1
  5239                           
  5240                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5241  0E3C  0021               	movlb	1	; select bank1
  5242  0E3D  1CD1               	btfss	_Temp^(0+128),1
  5243  0E3E  2E5D               	goto	l9712
  5244                           
  5245                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5246  0E3F  0020               	movlb	0	; select bank0
  5247  0E40  0869               	movf	setTemp_Main@SafeValue+1,w
  5248  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5249  0E42  1D03               	skipz
  5250  0E43  2E46               	goto	u10925
  5251  0E44  0868               	movf	setTemp_Main@SafeValue,w
  5252  0E45  026C               	subwf	setTemp_Main@AD,w
  5253  0E46                     u10925:	
  5254  0E46  1C03               	skipc
  5255  0E47  2E72               	goto	l9722
  5256                           
  5257                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5258  0E48  3001               	movlw	1
  5259  0E49  00E5               	movwf	??_setTemp_Main
  5260  0E4A  0865               	movf	??_setTemp_Main,w
  5261  0E4B  0021               	movlb	1	; select bank1
  5262  0E4C  07D4               	addwf	(_Temp^(0+128)+3),f
  5263                           
  5264                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5265  0E4D  3003               	movlw	3
  5266  0E4E  0254               	subwf	(_Temp^(0+128)+3),w
  5267  0E4F  1C03               	skipc
  5268  0E50  2E74               	goto	l9724
  5269                           
  5270                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5271  0E51  01D4               	clrf	(_Temp^(0+128)+3)
  5272                           
  5273                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5274  0E52  10D1               	bcf	_Temp^(0+128),1
  5275                           
  5276                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5277  0E53  3064               	movlw	100
  5278  0E54  0020               	movlb	0	; select bank0
  5279  0E55  00A9               	movwf	setBuz@time
  5280  0E56  3000               	movlw	0
  5281  0E57  00AA               	movwf	setBuz@time+1
  5282  0E58  3002               	movlw	2
  5283  0E59  3195  2551  318D   	fcall	_setBuz
  5284                           
  5285                           ;OverTemperature_B1.c: 126: }
  5286                           ;OverTemperature_B1.c: 127: } else {
  5287  0E5C  2E74               	goto	l9724
  5288  0E5D                     l9712:	
  5289                           ;OverTemperature_B1.c: 129: }
  5290                           ;OverTemperature_B1.c: 130: } else {
  5291                           
  5292                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5293                           
  5294                           
  5295                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5296  0E5D  0020               	movlb	0	; select bank0
  5297  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5298  0E5F  026B               	subwf	setTemp_Main@DangerValue+1,w
  5299  0E60  1D03               	skipz
  5300  0E61  2E64               	goto	u10945
  5301  0E62  086C               	movf	setTemp_Main@AD,w
  5302  0E63  026A               	subwf	setTemp_Main@DangerValue,w
  5303  0E64                     u10945:	
  5304  0E64  1C03               	skipc
  5305  0E65  2E72               	goto	l9722
  5306                           
  5307                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5308  0E66  3001               	movlw	1
  5309  0E67  00E5               	movwf	??_setTemp_Main
  5310  0E68  0865               	movf	??_setTemp_Main,w
  5311  0E69  0021               	movlb	1	; select bank1
  5312  0E6A  07D4               	addwf	(_Temp^(0+128)+3),f
  5313                           
  5314                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5315  0E6B  3003               	movlw	3
  5316  0E6C  0254               	subwf	(_Temp^(0+128)+3),w
  5317  0E6D  1C03               	skipc
  5318  0E6E  2E74               	goto	l9724
  5319                           
  5320                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5321  0E6F  01D4               	clrf	(_Temp^(0+128)+3)
  5322                           
  5323                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5324  0E70  14D1               	bsf	_Temp^(0+128),1
  5325                           
  5326                           ;OverTemperature_B1.c: 136: }
  5327                           ;OverTemperature_B1.c: 137: } else {
  5328  0E71  2E74               	goto	l9724
  5329  0E72                     l9722:	
  5330                           
  5331                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5332  0E72  0021               	movlb	1	; select bank1
  5333  0E73  01D4               	clrf	(_Temp^(0+128)+3)
  5334  0E74                     l9724:	
  5335                           
  5336                           ;OverTemperature_B1.c: 139: }
  5337                           ;OverTemperature_B1.c: 140: }
  5338                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5339  0E74  0020               	movlb	0	; select bank0
  5340  0E75  086D               	movf	setTemp_Main@AD+1,w
  5341  0E76  00E5               	movwf	??_setTemp_Main
  5342  0E77  0865               	movf	??_setTemp_Main,w
  5343  0E78  00E2               	movwf	setProductData@value
  5344  0E79  3018               	movlw	24
  5345  0E7A  319C  241E  318D   	fcall	_setProductData
  5346                           
  5347                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5348  0E7D  0020               	movlb	0	; select bank0
  5349  0E7E  086C               	movf	setTemp_Main@AD,w
  5350  0E7F  00E5               	movwf	??_setTemp_Main
  5351  0E80  0865               	movf	??_setTemp_Main,w
  5352  0E81  00E2               	movwf	setProductData@value
  5353  0E82  3019               	movlw	25
  5354  0E83  319C  241E         	fcall	_setProductData
  5355  0E85                     l1794:	
  5356                           
  5357                           ;OverTemperature_B1.c: 158: }
  5358                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5359  0E85  0021               	movlb	1	; select bank1
  5360  0E86  01D5               	clrf	(_Temp^(0+128)+4)
  5361  0E87  01D6               	clrf	((_Temp+1)^(0+128)+4)
  5362                           
  5363                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5364  0E88  01D7               	clrf	(_Temp^(0+128)+6)
  5365  0E89  01D8               	clrf	((_Temp+1)^(0+128)+6)
  5366                           
  5367                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5368  0E8A  01D9               	clrf	(_Temp^(0+128)+8)
  5369  0E8B  01DA               	clrf	((_Temp+1)^(0+128)+8)
  5370                           
  5371                           ;OverTemperature_B1.c: 162: }
  5372                           ;OverTemperature_B1.c: 163: }
  5373                           ;OverTemperature_B1.c: 166: } else {
  5374  0E8C  0008               	return
  5375  0E8D                     l1783:	
  5376                           
  5377                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5378  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5379  0E8E  0008               	return
  5380                           
  5381                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5382  0E8F  1451               	bsf	_Temp^(0+128),0
  5383  0E90  0008               	return
  5384  0E91                     __end_of_setTemp_Main:	
  5385                           
  5386                           	psect	text10
  5387  1B49                     __ptext10:	
  5388 ;; *************** function _Temp_Initialization *****************
  5389 ;; Defined at:
  5390 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;		None
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;		None               void
  5397 ;; Registers used:
  5398 ;;		status,2, status,0, pclath, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;Total ram usage:        0 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    6
  5411 ;; This function calls:
  5412 ;;		_setTemp_Initialization
  5413 ;; This function is called by:
  5414 ;;		_main
  5415 ;; This function uses a non-reentrant model
  5416 ;;
  5417                           
  5418                           
  5419                           ;psect for function _Temp_Initialization
  5420  1B49                     _Temp_Initialization:	
  5421                           
  5422                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5423                           
  5424                           ;incstack = 0
  5425                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5426  1B49  319B  233C         	fcall	_setTemp_Initialization
  5427  1B4B  0008               	return
  5428  1B4C                     __end_of_Temp_Initialization:	
  5429                           
  5430                           	psect	text11
  5431  1B3C                     __ptext11:	
  5432 ;; *************** function _setTemp_Initialization *****************
  5433 ;; Defined at:
  5434 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;		None
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;		None
  5439 ;; Return value:  Size  Location     Type
  5440 ;;		None               void
  5441 ;; Registers used:
  5442 ;;		None
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;Total ram usage:        0 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    5
  5455 ;; This function calls:
  5456 ;;		Nothing
  5457 ;; This function is called by:
  5458 ;;		_Temp_Initialization
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           
  5463                           ;psect for function _setTemp_Initialization
  5464  1B3C                     _setTemp_Initialization:	
  5465                           
  5466                           ;incstack = 0
  5467                           ; Regs used in _setTemp_Initialization: []
  5468  1B3C  0008               	return
  5469  1B3D                     __end_of_setTemp_Initialization:	
  5470                           
  5471                           	psect	text12
  5472  1B96                     __ptext12:	
  5473 ;; *************** function _Switch_Main *****************
  5474 ;; Defined at:
  5475 ;;		line 76 in file "../src/Switch_B1.c"
  5476 ;; Parameters:    Size  Location     Type
  5477 ;;		None
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;		None
  5480 ;; Return value:  Size  Location     Type
  5481 ;;		None               void
  5482 ;; Registers used:
  5483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5484 ;; Tracked objects:
  5485 ;;		On entry : 0/0
  5486 ;;		On exit  : 0/0
  5487 ;;		Unchanged: 0/0
  5488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;Total ram usage:        0 bytes
  5494 ;; Hardware stack levels used:    1
  5495 ;; Hardware stack levels required when called:    9
  5496 ;; This function calls:
  5497 ;;		_TouchPower
  5498 ;;		_setSw_Main
  5499 ;; This function is called by:
  5500 ;;		_main
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           
  5505                           ;psect for function _Switch_Main
  5506  1B96                     _Switch_Main:	
  5507                           
  5508                           ;Switch_B1.c: 79: setSw_Main(1);
  5509                           
  5510                           ;incstack = 0
  5511                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5512  1B96  3001               	movlw	1
  5513  1B97  3182  2205  319B   	fcall	_setSw_Main
  5514                           
  5515                           ;Switch_B1.c: 91: TouchPower();
  5516  1B9A  319E  2643         	fcall	_TouchPower
  5517  1B9C  0008               	return
  5518  1B9D                     __end_of_Switch_Main:	
  5519                           
  5520                           	psect	text13
  5521  0205                     __ptext13:	
  5522 ;; *************** function _setSw_Main *****************
  5523 ;; Defined at:
  5524 ;;		line 117 in file "../src/Switch_B1.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  sw              1    wreg     unsigned char 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  sw              1   17[BANK0 ] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;		None               void
  5531 ;; Registers used:
  5532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;Total ram usage:        3 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    8
  5545 ;; This function calls:
  5546 ;;		_SwPointSelect
  5547 ;;		_getMain_All_Error_Status
  5548 ;;		_getSw_KeyStatus
  5549 ;;		_setBuz
  5550 ;;		_setDimmerLights_DimmingOn
  5551 ;;		_setDimmerLights_SwOff
  5552 ;;		_setDimmerLights_SwOn
  5553 ;;		_setRF_Learn
  5554 ;; This function is called by:
  5555 ;;		_Switch_Main
  5556 ;; This function uses a non-reentrant model
  5557 ;;
  5558                           
  5559                           
  5560                           ;psect for function _setSw_Main
  5561  0205                     _setSw_Main:	
  5562                           
  5563                           ;incstack = 0
  5564                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5565                           ;setSw_Main@sw stored from wreg
  5566  0205  0020               	movlb	0	; select bank0
  5567  0206  00B1               	movwf	setSw_Main@sw
  5568                           
  5569                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5570  0207  0831               	movf	setSw_Main@sw,w
  5571  0208  319C  248A  3182   	fcall	_SwPointSelect
  5572                           
  5573                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5574  020B  0021               	movlb	1	; select bank1
  5575  020C  084E               	movf	_Sw^(0+128),w
  5576  020D  0086               	movwf	6
  5577  020E  3001               	movlw	1	; select bank2/3
  5578  020F  0087               	movwf	7
  5579  0210  1C01               	btfss	1,0
  5580  0211  2B81               	goto	l2493
  5581                           
  5582                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5583  0212  3000               	movlw	0
  5584  0213  3191  2178  3182   	fcall	_getMain_All_Error_Status
  5585  0216  3800               	iorlw	0
  5586  0217  1D03               	skipz
  5587  0218  2A37               	goto	l9820
  5588                           
  5589                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5590  0219  0021               	movlb	1	; select bank1
  5591  021A  0A4E               	incf	_Sw^(0+128),w
  5592  021B  0086               	movwf	6
  5593  021C  3001               	movlw	1	; select bank2/3
  5594  021D  0087               	movwf	7
  5595  021E  1081               	bcf	1,1
  5596                           
  5597                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5598  021F  0020               	movlb	0	; select bank0
  5599  0220  0831               	movf	setSw_Main@sw,w
  5600  0221  319D  2526  3182   	fcall	_getSw_KeyStatus
  5601  0224  3A01               	xorlw	1
  5602  0225  3000               	movlw	0
  5603  0226  1903               	skipnz
  5604  0227  3001               	movlw	1
  5605  0228  0020               	movlb	0	; select bank0
  5606  0229  00AF               	movwf	??_setSw_Main
  5607  022A  0021               	movlb	1	; select bank1
  5608  022B  084E               	movf	_Sw^(0+128),w
  5609  022C  0086               	movwf	6
  5610  022D  3001               	movlw	1	; select bank2/3
  5611  022E  0087               	movwf	7
  5612  022F  0020               	movlb	0	; select bank0
  5613  0230  0DAF               	rlf	??_setSw_Main,f
  5614  0231  0801               	movf	1,w
  5615  0232  062F               	xorwf	??_setSw_Main,w
  5616  0233  39FD               	andlw	-3
  5617  0234  062F               	xorwf	??_setSw_Main,w
  5618  0235  0081               	movwf	1
  5619                           
  5620                           ;Switch_B1.c: 124: } else {
  5621  0236  2A4D               	goto	l2495
  5622  0237                     l9820:	
  5623                           
  5624                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5625  0237  0021               	movlb	1	; select bank1
  5626  0238  0A4E               	incf	_Sw^(0+128),w
  5627  0239  0086               	movwf	6
  5628  023A  3001               	movlw	1	; select bank2/3
  5629  023B  0087               	movwf	7
  5630  023C  1881               	btfsc	1,1
  5631  023D  2A4D               	goto	l2495
  5632                           
  5633                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5634  023E  0A4E               	incf	_Sw^(0+128),w
  5635  023F  0086               	movwf	6
  5636  0240  3001               	movlw	1	; select bank2/3
  5637  0241  0087               	movwf	7
  5638  0242  1481               	bsf	1,1
  5639                           
  5640                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5641  0243  084E               	movf	_Sw^(0+128),w
  5642  0244  0086               	movwf	6
  5643  0245  3001               	movlw	1	; select bank2/3
  5644  0246  0087               	movwf	7
  5645  0247  1081               	bcf	1,1
  5646                           
  5647                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5648  0248  084E               	movf	_Sw^(0+128),w
  5649  0249  0086               	movwf	6
  5650  024A  3001               	movlw	1	; select bank2/3
  5651  024B  0087               	movwf	7
  5652  024C  1501               	bsf	1,2
  5653  024D                     l2495:	
  5654                           
  5655                           ;Switch_B1.c: 130: }
  5656                           ;Switch_B1.c: 131: }
  5657                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5658  024D  0021               	movlb	1	; select bank1
  5659  024E  084E               	movf	_Sw^(0+128),w
  5660  024F  0086               	movwf	6
  5661  0250  3001               	movlw	1	; select bank2/3
  5662  0251  0087               	movwf	7
  5663  0252  1C81               	btfss	1,1
  5664  0253  2B29               	goto	l9870
  5665                           
  5666                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5667  0254  084E               	movf	_Sw^(0+128),w
  5668  0255  0086               	movwf	6
  5669  0256  3001               	movlw	1	; select bank2/3
  5670  0257  0087               	movwf	7
  5671  0258  1901               	btfsc	1,2
  5672  0259  2A80               	goto	l9836
  5673                           
  5674                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5675  025A  3001               	movlw	1
  5676  025B  0020               	movlb	0	; select bank0
  5677  025C  00AF               	movwf	??_setSw_Main
  5678  025D  0021               	movlb	1	; select bank1
  5679  025E  084E               	movf	_Sw^(0+128),w
  5680  025F  3E02               	addlw	2
  5681  0260  0086               	movwf	6
  5682  0261  3001               	movlw	1	; select bank2/3
  5683  0262  0087               	movwf	7
  5684  0263  0020               	movlb	0	; select bank0
  5685  0264  082F               	movf	??_setSw_Main,w
  5686  0265  0781               	addwf	1,f
  5687                           
  5688                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5689  0266  0021               	movlb	1	; select bank1
  5690  0267  084E               	movf	_Sw^(0+128),w
  5691  0268  3E02               	addlw	2
  5692  0269  0086               	movwf	6
  5693  026A  3001               	movlw	1	; select bank2/3
  5694  026B  0087               	movwf	7
  5695  026C  3003               	movlw	3
  5696  026D  0201               	subwf	1,w
  5697  026E  1C03               	skipc
  5698  026F  0008               	return
  5699                           
  5700                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5701  0270  084E               	movf	_Sw^(0+128),w
  5702  0271  3E02               	addlw	2
  5703  0272  0086               	movwf	6
  5704  0273  3001               	movlw	1	; select bank2/3
  5705  0274  0087               	movwf	7
  5706  0275  0181               	clrf	1
  5707                           
  5708                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5709  0276  084E               	movf	_Sw^(0+128),w
  5710  0277  0086               	movwf	6
  5711  0278  3001               	movlw	1	; select bank2/3
  5712  0279  0087               	movwf	7
  5713  027A  1501               	bsf	1,2
  5714                           
  5715                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5716  027B  0020               	movlb	0	; select bank0
  5717  027C  0831               	movf	setSw_Main@sw,w
  5718  027D  3191  21DF         	fcall	_setDimmerLights_SwOn
  5719                           
  5720                           ;Switch_B1.c: 146: }
  5721                           ;Switch_B1.c: 147: } else {
  5722  027F  0008               	return
  5723  0280                     l9836:	
  5724                           
  5725                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5726  0280  0021               	movlb	1	; select bank1
  5727  0281  084E               	movf	_Sw^(0+128),w
  5728  0282  0086               	movwf	6
  5729  0283  3001               	movlw	1	; select bank2/3
  5730  0284  0087               	movwf	7
  5731  0285  1981               	btfsc	1,3
  5732  0286  2AB5               	goto	l9846
  5733                           
  5734                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5735  0287  084E               	movf	_Sw^(0+128),w
  5736  0288  3E03               	addlw	3
  5737  0289  0086               	movwf	6
  5738  028A  3001               	movlw	1	; select bank2/3
  5739  028B  0087               	movwf	7
  5740  028C  3001               	movlw	1
  5741  028D  0781               	addwf	1,f
  5742  028E  3141               	addfsr 1,1
  5743  028F  1803               	skipnc
  5744  0290  0A81               	incf	1,f
  5745                           
  5746                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5747  0291  084E               	movf	_Sw^(0+128),w
  5748  0292  3E03               	addlw	3
  5749  0293  0086               	movwf	6
  5750  0294  3001               	movlw	1	; select bank2/3
  5751  0295  0087               	movwf	7
  5752  0296  3F40               	moviw [0]fsr1
  5753  0297  0020               	movlb	0	; select bank0
  5754  0298  00AF               	movwf	??_setSw_Main
  5755  0299  3F41               	moviw [1]fsr1
  5756  029A  00B0               	movwf	??_setSw_Main+1
  5757  029B  3000               	movlw	0
  5758  029C  0230               	subwf	??_setSw_Main+1,w
  5759  029D  304B               	movlw	75
  5760  029E  1903               	skipnz
  5761  029F  022F               	subwf	??_setSw_Main,w
  5762  02A0  1C03               	skipc
  5763  02A1  0008               	return
  5764                           
  5765                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5766  02A2  0021               	movlb	1	; select bank1
  5767  02A3  084E               	movf	_Sw^(0+128),w
  5768  02A4  3E03               	addlw	3
  5769  02A5  0086               	movwf	6
  5770  02A6  3001               	movlw	1	; select bank2/3
  5771  02A7  0087               	movwf	7
  5772  02A8  3000               	movlw	0
  5773  02A9  3FC0               	movwi [0]fsr1
  5774  02AA  3FC1               	movwi [1]fsr1
  5775                           
  5776                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5777  02AB  084E               	movf	_Sw^(0+128),w
  5778  02AC  0086               	movwf	6
  5779  02AD  3001               	movlw	1	; select bank2/3
  5780  02AE  0087               	movwf	7
  5781  02AF  1581               	bsf	1,3
  5782                           
  5783                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5784  02B0  0020               	movlb	0	; select bank0
  5785  02B1  0831               	movf	setSw_Main@sw,w
  5786  02B2  3190  20F7         	fcall	_setDimmerLights_DimmingOn
  5787                           
  5788                           ;Switch_B1.c: 161: }
  5789                           ;Switch_B1.c: 162: } else {
  5790  02B4  0008               	return
  5791  02B5                     l9846:	
  5792                           
  5793                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5794  02B5  0021               	movlb	1	; select bank1
  5795  02B6  084E               	movf	_Sw^(0+128),w
  5796  02B7  0086               	movwf	6
  5797  02B8  3001               	movlw	1	; select bank2/3
  5798  02B9  0087               	movwf	7
  5799  02BA  1A01               	btfsc	1,4
  5800  02BB  2AF5               	goto	l9860
  5801                           
  5802                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5803  02BC  084E               	movf	_Sw^(0+128),w
  5804  02BD  3E05               	addlw	5
  5805  02BE  0086               	movwf	6
  5806  02BF  3001               	movlw	1	; select bank2/3
  5807  02C0  0087               	movwf	7
  5808  02C1  3001               	movlw	1
  5809  02C2  0781               	addwf	1,f
  5810  02C3  3141               	addfsr 1,1
  5811  02C4  1803               	skipnc
  5812  02C5  0A81               	incf	1,f
  5813                           
  5814                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5815  02C6  084E               	movf	_Sw^(0+128),w
  5816  02C7  3E05               	addlw	5
  5817  02C8  0086               	movwf	6
  5818  02C9  3001               	movlw	1	; select bank2/3
  5819  02CA  0087               	movwf	7
  5820  02CB  3F40               	moviw [0]fsr1
  5821  02CC  0020               	movlb	0	; select bank0
  5822  02CD  00AF               	movwf	??_setSw_Main
  5823  02CE  3F41               	moviw [1]fsr1
  5824  02CF  00B0               	movwf	??_setSw_Main+1
  5825  02D0  3000               	movlw	0
  5826  02D1  0230               	subwf	??_setSw_Main+1,w
  5827  02D2  304B               	movlw	75
  5828  02D3  1903               	skipnz
  5829  02D4  022F               	subwf	??_setSw_Main,w
  5830  02D5  1C03               	skipc
  5831  02D6  0008               	return
  5832                           
  5833                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5834  02D7  0021               	movlb	1	; select bank1
  5835  02D8  084E               	movf	_Sw^(0+128),w
  5836  02D9  3E05               	addlw	5
  5837  02DA  0086               	movwf	6
  5838  02DB  3001               	movlw	1	; select bank2/3
  5839  02DC  0087               	movwf	7
  5840  02DD  3000               	movlw	0
  5841  02DE  3FC0               	movwi [0]fsr1
  5842  02DF  3FC1               	movwi [1]fsr1
  5843                           
  5844                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5845  02E0  084E               	movf	_Sw^(0+128),w
  5846  02E1  0086               	movwf	6
  5847  02E2  3001               	movlw	1	; select bank2/3
  5848  02E3  0087               	movwf	7
  5849  02E4  1601               	bsf	1,4
  5850                           
  5851                           ;Switch_B1.c: 171: setRF_Learn(1);
  5852  02E5  3001               	movlw	1
  5853  02E6  319D  25F0  3182   	fcall	_setRF_Learn
  5854                           
  5855                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5856  02E9  0021               	movlb	1	; select bank1
  5857  02EA  1EAE               	btfss	_myMain^(0+128),5
  5858  02EB  0008               	return
  5859                           
  5860                           ;Switch_B1.c: 173: setBuz(2, 100);
  5861  02EC  3064               	movlw	100
  5862  02ED  0020               	movlb	0	; select bank0
  5863  02EE  00A9               	movwf	setBuz@time
  5864  02EF  3000               	movlw	0
  5865  02F0  00AA               	movwf	setBuz@time+1
  5866  02F1  3002               	movlw	2
  5867  02F2  3195  2551         	fcall	_setBuz
  5868                           
  5869                           ;Switch_B1.c: 174: }
  5870                           ;Switch_B1.c: 178: }
  5871                           ;Switch_B1.c: 179: } else {
  5872  02F4  0008               	return
  5873  02F5                     l9860:	
  5874                           
  5875                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5876  02F5  0021               	movlb	1	; select bank1
  5877  02F6  084E               	movf	_Sw^(0+128),w
  5878  02F7  0086               	movwf	6
  5879  02F8  3001               	movlw	1	; select bank2/3
  5880  02F9  0087               	movwf	7
  5881  02FA  1A81               	btfsc	1,5
  5882  02FB  0008               	return
  5883                           
  5884                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5885  02FC  084E               	movf	_Sw^(0+128),w
  5886  02FD  3E07               	addlw	7
  5887  02FE  0086               	movwf	6
  5888  02FF  3001               	movlw	1	; select bank2/3
  5889  0300  0087               	movwf	7
  5890  0301  3001               	movlw	1
  5891  0302  0781               	addwf	1,f
  5892  0303  3141               	addfsr 1,1
  5893  0304  1803               	skipnc
  5894  0305  0A81               	incf	1,f
  5895                           
  5896                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5897  0306  084E               	movf	_Sw^(0+128),w
  5898  0307  3E07               	addlw	7
  5899  0308  0086               	movwf	6
  5900  0309  3001               	movlw	1	; select bank2/3
  5901  030A  0087               	movwf	7
  5902  030B  3F40               	moviw [0]fsr1
  5903  030C  0020               	movlb	0	; select bank0
  5904  030D  00AF               	movwf	??_setSw_Main
  5905  030E  3F41               	moviw [1]fsr1
  5906  030F  00B0               	movwf	??_setSw_Main+1
  5907  0310  3000               	movlw	0
  5908  0311  0230               	subwf	??_setSw_Main+1,w
  5909  0312  3096               	movlw	150
  5910  0313  1903               	skipnz
  5911  0314  022F               	subwf	??_setSw_Main,w
  5912  0315  1C03               	skipc
  5913  0316  0008               	return
  5914                           
  5915                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5916  0317  0021               	movlb	1	; select bank1
  5917  0318  084E               	movf	_Sw^(0+128),w
  5918  0319  3E07               	addlw	7
  5919  031A  0086               	movwf	6
  5920  031B  3001               	movlw	1	; select bank2/3
  5921  031C  0087               	movwf	7
  5922  031D  3000               	movlw	0
  5923  031E  3FC0               	movwi [0]fsr1
  5924  031F  3FC1               	movwi [1]fsr1
  5925                           
  5926                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5927  0320  084E               	movf	_Sw^(0+128),w
  5928  0321  0086               	movwf	6
  5929  0322  3001               	movlw	1	; select bank2/3
  5930  0323  0087               	movwf	7
  5931  0324  1681               	bsf	1,5
  5932                           
  5933                           ;Switch_B1.c: 187: setRF_Learn(0);
  5934  0325  3000               	movlw	0
  5935  0326  319D  25F0         	fcall	_setRF_Learn
  5936                           
  5937                           ;Switch_B1.c: 190: }
  5938                           ;Switch_B1.c: 191: }
  5939                           ;Switch_B1.c: 192: }
  5940                           ;Switch_B1.c: 194: }
  5941                           ;Switch_B1.c: 195: }
  5942                           ;Switch_B1.c: 196: } else {
  5943  0328  0008               	return
  5944  0329                     l9870:	
  5945                           
  5946                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5947  0329  0021               	movlb	1	; select bank1
  5948  032A  084E               	movf	_Sw^(0+128),w
  5949  032B  0086               	movwf	6
  5950  032C  3001               	movlw	1	; select bank2/3
  5951  032D  0087               	movwf	7
  5952  032E  1D01               	btfss	1,2
  5953  032F  0008               	return
  5954                           
  5955                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5956  0330  3001               	movlw	1
  5957  0331  0020               	movlb	0	; select bank0
  5958  0332  00AF               	movwf	??_setSw_Main
  5959  0333  0021               	movlb	1	; select bank1
  5960  0334  084E               	movf	_Sw^(0+128),w
  5961  0335  3E02               	addlw	2
  5962  0336  0086               	movwf	6
  5963  0337  3001               	movlw	1	; select bank2/3
  5964  0338  0087               	movwf	7
  5965  0339  0020               	movlb	0	; select bank0
  5966  033A  082F               	movf	??_setSw_Main,w
  5967  033B  0781               	addwf	1,f
  5968                           
  5969                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5970  033C  0021               	movlb	1	; select bank1
  5971  033D  084E               	movf	_Sw^(0+128),w
  5972  033E  3E02               	addlw	2
  5973  033F  0086               	movwf	6
  5974  0340  3001               	movlw	1	; select bank2/3
  5975  0341  0087               	movwf	7
  5976  0342  3003               	movlw	3
  5977  0343  0201               	subwf	1,w
  5978  0344  1C03               	skipc
  5979  0345  0008               	return
  5980                           
  5981                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5982  0346  084E               	movf	_Sw^(0+128),w
  5983  0347  3E02               	addlw	2
  5984  0348  0086               	movwf	6
  5985  0349  3001               	movlw	1	; select bank2/3
  5986  034A  0087               	movwf	7
  5987  034B  0181               	clrf	1
  5988                           
  5989                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5990  034C  084E               	movf	_Sw^(0+128),w
  5991  034D  0086               	movwf	6
  5992  034E  3001               	movlw	1	; select bank2/3
  5993  034F  0087               	movwf	7
  5994  0350  1101               	bcf	1,2
  5995                           
  5996                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5997  0351  084E               	movf	_Sw^(0+128),w
  5998  0352  3E03               	addlw	3
  5999  0353  0086               	movwf	6
  6000  0354  3001               	movlw	1	; select bank2/3
  6001  0355  0087               	movwf	7
  6002  0356  3000               	movlw	0
  6003  0357  3FC0               	movwi [0]fsr1
  6004  0358  3FC1               	movwi [1]fsr1
  6005                           
  6006                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6007  0359  084E               	movf	_Sw^(0+128),w
  6008  035A  0086               	movwf	6
  6009  035B  3001               	movlw	1	; select bank2/3
  6010  035C  0087               	movwf	7
  6011  035D  1181               	bcf	1,3
  6012                           
  6013                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6014  035E  084E               	movf	_Sw^(0+128),w
  6015  035F  0086               	movwf	6
  6016  0360  3001               	movlw	1	; select bank2/3
  6017  0361  0087               	movwf	7
  6018  0362  1201               	bcf	1,4
  6019                           
  6020                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6021  0363  084E               	movf	_Sw^(0+128),w
  6022  0364  0086               	movwf	6
  6023  0365  3001               	movlw	1	; select bank2/3
  6024  0366  0087               	movwf	7
  6025  0367  1281               	bcf	1,5
  6026                           
  6027                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6028  0368  084E               	movf	_Sw^(0+128),w
  6029  0369  3E05               	addlw	5
  6030  036A  0086               	movwf	6
  6031  036B  3001               	movlw	1	; select bank2/3
  6032  036C  0087               	movwf	7
  6033  036D  3000               	movlw	0
  6034  036E  3FC0               	movwi [0]fsr1
  6035  036F  3FC1               	movwi [1]fsr1
  6036                           
  6037                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6038  0370  084E               	movf	_Sw^(0+128),w
  6039  0371  3E07               	addlw	7
  6040  0372  0086               	movwf	6
  6041  0373  3001               	movlw	1	; select bank2/3
  6042  0374  0087               	movwf	7
  6043  0375  3000               	movlw	0
  6044  0376  3FC0               	movwi [0]fsr1
  6045  0377  3FC1               	movwi [1]fsr1
  6046                           
  6047                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6048  0378  0020               	movlb	0	; select bank0
  6049  0379  0831               	movf	setSw_Main@sw,w
  6050  037A  3192  22B8  3182   	fcall	_setDimmerLights_SwOff
  6051                           
  6052                           ;Switch_B1.c: 219: setRF_Learn(0);
  6053  037D  3000               	movlw	0
  6054  037E  319D  25F0         	fcall	_setRF_Learn
  6055                           
  6056                           ;Switch_B1.c: 221: }
  6057                           ;Switch_B1.c: 222: }
  6058                           ;Switch_B1.c: 223: }
  6059                           ;Switch_B1.c: 224: } else {
  6060  0380  0008               	return
  6061  0381                     l2493:	
  6062                           
  6063                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6064  0381  1C2E               	btfss	_myMain^(0+128),0
  6065  0382  0008               	return
  6066                           
  6067                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6068  0383  084E               	movf	_Sw^(0+128),w
  6069  0384  0086               	movwf	6
  6070  0385  3001               	movlw	1	; select bank2/3
  6071  0386  0087               	movwf	7
  6072  0387  1401               	bsf	1,0
  6073  0388  0008               	return
  6074  0389                     __end_of_setSw_Main:	
  6075                           
  6076                           	psect	text14
  6077  1DF0                     __ptext14:	
  6078 ;; *************** function _setRF_Learn *****************
  6079 ;; Defined at:
  6080 ;;		line 33 in file "../src/RF_Control_B1.c"
  6081 ;; Parameters:    Size  Location     Type
  6082 ;;  command         1    wreg     unsigned char 
  6083 ;; Auto vars:     Size  Location     Type
  6084 ;;  command         1    1[BANK0 ] unsigned char 
  6085 ;; Return value:  Size  Location     Type
  6086 ;;		None               void
  6087 ;; Registers used:
  6088 ;;		wreg, status,2, status,0
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/0
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;Total ram usage:        2 bytes
  6099 ;; Hardware stack levels used:    1
  6100 ;; Hardware stack levels required when called:    5
  6101 ;; This function calls:
  6102 ;;		Nothing
  6103 ;; This function is called by:
  6104 ;;		_setSw_Main
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           
  6109                           ;psect for function _setRF_Learn
  6110  1DF0                     _setRF_Learn:	
  6111                           
  6112                           ;incstack = 0
  6113                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6114                           ;setRF_Learn@command stored from wreg
  6115  1DF0  0020               	movlb	0	; select bank0
  6116  1DF1  00A1               	movwf	setRF_Learn@command
  6117                           
  6118                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6119  1DF2  0821               	movf	setRF_Learn@command,w
  6120  1DF3  3A01               	xorlw	1
  6121  1DF4  3000               	movlw	0
  6122  1DF5  1903               	skipnz
  6123  1DF6  3001               	movlw	1
  6124  1DF7  00A0               	movwf	??_setRF_Learn
  6125  1DF8  0EA0               	swapf	??_setRF_Learn,f
  6126  1DF9  0DA0               	rlf	??_setRF_Learn,f
  6127  1DFA  0DA0               	rlf	??_setRF_Learn,f
  6128  1DFB  0021               	movlb	1	; select bank1
  6129  1DFC  0820               	movf	_RF1^(0+128),w
  6130  1DFD  0020               	movlb	0	; select bank0
  6131  1DFE  0620               	xorwf	??_setRF_Learn,w
  6132  1DFF  39BF               	andlw	-65
  6133  1E00  0620               	xorwf	??_setRF_Learn,w
  6134  1E01  0021               	movlb	1	; select bank1
  6135  1E02  00A0               	movwf	_RF1^(0+128)
  6136  1E03  0008               	return
  6137  1E04                     __end_of_setRF_Learn:	
  6138                           
  6139                           	psect	text15
  6140  10F7                     __ptext15:	
  6141 ;; *************** function _setDimmerLights_DimmingOn *****************
  6142 ;; Defined at:
  6143 ;;		line 750 in file "../src/Dimmer_B1.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  sw              1    wreg     unsigned char 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  sw              1    2[BANK0 ] unsigned char 
  6148 ;; Return value:  Size  Location     Type
  6149 ;;		None               void
  6150 ;; Registers used:
  6151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;Total ram usage:        1 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    6
  6164 ;; This function calls:
  6165 ;;		_DimmerLights_SelectPointer
  6166 ;; This function is called by:
  6167 ;;		_setSw_Main
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           
  6172                           ;psect for function _setDimmerLights_DimmingOn
  6173  10F7                     _setDimmerLights_DimmingOn:	
  6174                           
  6175                           ;incstack = 0
  6176                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6177                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6178  10F7  0020               	movlb	0	; select bank0
  6179  10F8  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6180                           
  6181                           ;Dimmer_B1.c: 756: DimmerLights_SelectPointer(sw);
  6182  10F9  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6183  10FA  319C  2412  3190   	fcall	_DimmerLights_SelectPointer
  6184                           
  6185                           ;Dimmer_B1.c: 757: if (DimmerLights->Trigger == 0) {
  6186  10FD  0021               	movlb	1	; select bank1
  6187  10FE  084A               	movf	_DimmerLights^(0+128),w
  6188  10FF  0086               	movwf	6
  6189  1100  3001               	movlw	1	; select bank2/3
  6190  1101  0087               	movwf	7
  6191  1102  1881               	btfsc	1,1
  6192  1103  0008               	return
  6193                           
  6194                           ;Dimmer_B1.c: 758: if (DimmerLights->SwFlag == 1) {
  6195  1104  084A               	movf	_DimmerLights^(0+128),w
  6196  1105  0086               	movwf	6
  6197  1106  3001               	movlw	1	; select bank2/3
  6198  1107  0087               	movwf	7
  6199  1108  1C01               	btfss	1,0
  6200  1109  0008               	return
  6201                           
  6202                           ;Dimmer_B1.c: 759: DimmerLights->Status = 1;
  6203  110A  0A4A               	incf	_DimmerLights^(0+128),w
  6204  110B  0086               	movwf	6
  6205  110C  3001               	movlw	1	; select bank2/3
  6206  110D  0087               	movwf	7
  6207  110E  1401               	bsf	1,0
  6208                           
  6209                           ;Dimmer_B1.c: 761: DimmerLights->DimmingSwFlag = 1;
  6210  110F  084A               	movf	_DimmerLights^(0+128),w
  6211  1110  0086               	movwf	6
  6212  1111  3001               	movlw	1	; select bank2/3
  6213  1112  0087               	movwf	7
  6214  1113  1581               	bsf	1,3
  6215                           
  6216                           ;Dimmer_B1.c: 762: DimmerLights->DimmingTrigger = 1;
  6217  1114  084A               	movf	_DimmerLights^(0+128),w
  6218  1115  0086               	movwf	6
  6219  1116  3001               	movlw	1	; select bank2/3
  6220  1117  0087               	movwf	7
  6221  1118  1601               	bsf	1,4
  6222                           
  6223                           ;Dimmer_B1.c: 763: DimmerLights->DimmingSwitch = 1;
  6224  1119  084A               	movf	_DimmerLights^(0+128),w
  6225  111A  0086               	movwf	6
  6226  111B  3001               	movlw	1	; select bank2/3
  6227  111C  0087               	movwf	7
  6228  111D  1681               	bsf	1,5
  6229  111E  0008               	return
  6230  111F                     __end_of_setDimmerLights_DimmingOn:	
  6231                           
  6232                           	psect	text16
  6233  1D26                     __ptext16:	
  6234 ;; *************** function _getSw_KeyStatus *****************
  6235 ;; Defined at:
  6236 ;;		line 237 in file "../src/Switch_B1.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;  sw              1    wreg     unsigned char 
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;  sw              1    0[COMMON] unsigned char 
  6241 ;;  status          1    1[BANK0 ] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      unsigned char 
  6244 ;; Registers used:
  6245 ;;		wreg, status,2
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;Total ram usage:        3 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    5
  6258 ;; This function calls:
  6259 ;;		Nothing
  6260 ;; This function is called by:
  6261 ;;		_setSw_Main
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           
  6266                           ;psect for function _getSw_KeyStatus
  6267  1D26                     _getSw_KeyStatus:	
  6268                           
  6269                           ;Switch_B1.c: 238: char status = 0;
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6273  1D26  0020               	movlb	0	; select bank0
  6274  1D27  01A1               	clrf	getSw_KeyStatus@status
  6275                           
  6276                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6277  1D28  01A2               	clrf	_getSw_KeyStatus$6384
  6278  1D29  0AA2               	incf	_getSw_KeyStatus$6384,f
  6279  1D2A  1F0C               	btfss	12,6	;volatile
  6280  1D2B  1A0C               	btfsc	12,4	;volatile
  6281  1D2C  2D31               	goto	l7000
  6282  1D2D  1C0C               	btfss	12,0	;volatile
  6283  1D2E  1B8C               	btfsc	12,7	;volatile
  6284  1D2F  2D31               	goto	l7000
  6285  1D30  01A2               	clrf	_getSw_KeyStatus$6384
  6286  1D31                     l7000:	
  6287  1D31  0822               	movf	_getSw_KeyStatus$6384,w
  6288  1D32  00A0               	movwf	??_getSw_KeyStatus
  6289  1D33  0820               	movf	??_getSw_KeyStatus,w
  6290  1D34  00A1               	movwf	getSw_KeyStatus@status
  6291                           
  6292                           ;Switch_B1.c: 275: return status;
  6293  1D35  0821               	movf	getSw_KeyStatus@status,w
  6294  1D36  0008               	return
  6295  1D37                     __end_of_getSw_KeyStatus:	
  6296                           
  6297                           	psect	text17
  6298  1C8A                     __ptext17:	
  6299 ;; *************** function _SwPointSelect *****************
  6300 ;; Defined at:
  6301 ;;		line 25 in file "../src/Switch_B1.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  sw              1    wreg     unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  sw              1    1[BANK0 ] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;		None               void
  6308 ;; Registers used:
  6309 ;;		wreg
  6310 ;; Tracked objects:
  6311 ;;		On entry : 0/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;Total ram usage:        2 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    5
  6322 ;; This function calls:
  6323 ;;		Nothing
  6324 ;; This function is called by:
  6325 ;;		_setSw_Main
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           
  6330                           ;psect for function _SwPointSelect
  6331  1C8A                     _SwPointSelect:	
  6332                           
  6333                           ;incstack = 0
  6334                           ; Regs used in _SwPointSelect: [wreg]
  6335                           ;SwPointSelect@sw stored from wreg
  6336  1C8A  0020               	movlb	0	; select bank0
  6337  1C8B  00A1               	movwf	SwPointSelect@sw
  6338                           
  6339                           ;Switch_B1.c: 28: if (sw == 1) {
  6340  1C8C  0821               	movf	SwPointSelect@sw,w
  6341  1C8D  3A01               	xorlw	1
  6342  1C8E  1D03               	skipz
  6343  1C8F  0008               	return
  6344                           
  6345                           ;Switch_B1.c: 29: Sw = &Sw1;
  6346  1C90  30BE               	movlw	_Sw1& (0+255)
  6347  1C91  00A0               	movwf	??_SwPointSelect
  6348  1C92  0820               	movf	??_SwPointSelect,w
  6349  1C93  0021               	movlb	1	; select bank1
  6350  1C94  00CE               	movwf	_Sw^(0+128)
  6351  1C95  0008               	return
  6352  1C96                     __end_of_SwPointSelect:	
  6353                           
  6354                           	psect	text18
  6355  1E43                     __ptext18:	
  6356 ;; *************** function _TouchPower *****************
  6357 ;; Defined at:
  6358 ;;		line 10 in file "../src/Switch_B1.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;		None               void
  6365 ;; Registers used:
  6366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    6
  6379 ;; This function calls:
  6380 ;;		_Timeout_Counter
  6381 ;;		_set_TimeoutCleared
  6382 ;; This function is called by:
  6383 ;;		_Switch_Main
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           
  6388                           ;psect for function _TouchPower
  6389  1E43                     _TouchPower:	
  6390                           
  6391                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6395  1E43  0021               	movlb	1	; select bank1
  6396  1E44  1C2E               	btfss	_myMain^(0+128),0
  6397  1E45  0008               	return
  6398                           
  6399                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6400  1E46  0020               	movlb	0	; select bank0
  6401  1E47  180D               	btfsc	13,0	;volatile
  6402  1E48  0008               	return
  6403  1E49  2E4F               	goto	l7542
  6404  1E4A                     l2473:	
  6405                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6406                           
  6407                           
  6408                           ;Switch_B1.c: 14: RB0 = 1;
  6409  1E4A  0020               	movlb	0	; select bank0
  6410  1E4B  140D               	bsf	13,0	;volatile
  6411                           
  6412                           ;Switch_B1.c: 15: Timeout_Counter();
  6413  1E4C  319E  262E  319E   	fcall	_Timeout_Counter
  6414  1E4F                     l7542:	
  6415  1E4F  0020               	movlb	0	; select bank0
  6416  1E50  180D               	btfsc	13,0	;volatile
  6417  1E51  2E55               	goto	l7546
  6418  1E52  0021               	movlb	1	; select bank1
  6419  1E53  1D38               	btfss	(_myMain^(0+128)+10),2
  6420  1E54  2E4A               	goto	l2473
  6421  1E55                     l7546:	
  6422                           
  6423                           ;Switch_B1.c: 16: }
  6424                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6425  1E55  319B  2377         	fcall	_set_TimeoutCleared
  6426  1E57  0008               	return
  6427  1E58                     __end_of_TouchPower:	
  6428                           
  6429                           	psect	text19
  6430  1B77                     __ptext19:	
  6431 ;; *************** function _set_TimeoutCleared *****************
  6432 ;; Defined at:
  6433 ;;		line 281 in file "../src/Main_B1.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;		None
  6436 ;; Auto vars:     Size  Location     Type
  6437 ;;		None
  6438 ;; Return value:  Size  Location     Type
  6439 ;;		None               void
  6440 ;; Registers used:
  6441 ;;		status,2
  6442 ;; Tracked objects:
  6443 ;;		On entry : 0/0
  6444 ;;		On exit  : 0/0
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;Total ram usage:        0 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    5
  6454 ;; This function calls:
  6455 ;;		Nothing
  6456 ;; This function is called by:
  6457 ;;		_getAD
  6458 ;;		_TouchPower
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _set_TimeoutCleared
  6464  1B77                     _set_TimeoutCleared:	
  6465                           
  6466                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _set_TimeoutCleared: [status,2]
  6470  1B77  0021               	movlb	1	; select bank1
  6471  1B78  1138               	bcf	(_myMain^(0+128)+10),2
  6472                           
  6473                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6474  1B79  01B9               	clrf	(_myMain^(0+128)+11)
  6475  1B7A  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6476  1B7B  0008               	return
  6477  1B7C                     __end_of_set_TimeoutCleared:	
  6478                           
  6479                           	psect	text20
  6480  1E2E                     __ptext20:	
  6481 ;; *************** function _Timeout_Counter *****************
  6482 ;; Defined at:
  6483 ;;		line 272 in file "../src/Main_B1.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;		None
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;		None
  6488 ;; Return value:  Size  Location     Type
  6489 ;;		None               void
  6490 ;; Registers used:
  6491 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;Total ram usage:        0 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:    5
  6504 ;; This function calls:
  6505 ;;		Nothing
  6506 ;; This function is called by:
  6507 ;;		_getAD
  6508 ;;		_TouchPower
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           
  6513                           ;psect for function _Timeout_Counter
  6514  1E2E                     _Timeout_Counter:	
  6515                           
  6516                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6517                           
  6518                           ;incstack = 0
  6519                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6520  1E2E  3001               	movlw	1
  6521  1E2F  0021               	movlb	1	; select bank1
  6522  1E30  07B9               	addwf	(_myMain^(0+128)+11),f
  6523  1E31  3000               	movlw	0
  6524  1E32  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6525                           
  6526                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6527  1E33  300B               	movlw	11
  6528  1E34  3EAE               	addlw	_myMain& (0+255)
  6529  1E35  0086               	movwf	6
  6530  1E36  0187               	clrf	7
  6531  1E37  3F40               	moviw [0]fsr1
  6532  1E38  3AA8               	xorlw	168
  6533  1E39  1D03               	skipz
  6534  1E3A  2E3D               	goto	u6155
  6535  1E3B  3F41               	moviw [1]fsr1
  6536  1E3C  3A61               	xorlw	97
  6537  1E3D                     u6155:	
  6538  1E3D  1D03               	skipz
  6539  1E3E  0008               	return
  6540                           
  6541                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6542  1E3F  01B9               	clrf	(_myMain^(0+128)+11)
  6543  1E40  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6544                           
  6545                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6546  1E41  1538               	bsf	(_myMain^(0+128)+10),2
  6547  1E42  0008               	return
  6548  1E43                     __end_of_Timeout_Counter:	
  6549                           
  6550                           	psect	text21
  6551  1B73                     __ptext21:	
  6552 ;; *************** function _Switch_Initialization *****************
  6553 ;; Defined at:
  6554 ;;		line 46 in file "../src/Switch_B1.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;		None               void
  6561 ;; Registers used:
  6562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;Total ram usage:        0 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    8
  6575 ;; This function calls:
  6576 ;;		_setSw_Initialization
  6577 ;; This function is called by:
  6578 ;;		_main
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           
  6583                           ;psect for function _Switch_Initialization
  6584  1B73                     _Switch_Initialization:	
  6585                           
  6586                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6587                           
  6588                           ;incstack = 0
  6589                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6590  1B73  3001               	movlw	1
  6591  1B74  319C  24C1         	fcall	_setSw_Initialization
  6592  1B76  0008               	return
  6593  1B77                     __end_of_Switch_Initialization:	
  6594                           
  6595                           	psect	text22
  6596  1CC1                     __ptext22:	
  6597 ;; *************** function _setSw_Initialization *****************
  6598 ;; Defined at:
  6599 ;;		line 66 in file "../src/Switch_B1.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;  sw              1    wreg     unsigned char 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  sw              1    4[BANK0 ] unsigned char 
  6604 ;; Return value:  Size  Location     Type
  6605 ;;		None               void
  6606 ;; Registers used:
  6607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;Total ram usage:        1 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    7
  6620 ;; This function calls:
  6621 ;;		_setLED
  6622 ;; This function is called by:
  6623 ;;		_Switch_Initialization
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           
  6628                           ;psect for function _setSw_Initialization
  6629  1CC1                     _setSw_Initialization:	
  6630                           
  6631                           ;incstack = 0
  6632                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6633                           ;setSw_Initialization@sw stored from wreg
  6634  1CC1  0020               	movlb	0	; select bank0
  6635  1CC2  00A4               	movwf	setSw_Initialization@sw
  6636                           
  6637                           ;Switch_B1.c: 68: setLED(sw, 1);
  6638  1CC3  01A2               	clrf	setLED@command
  6639  1CC4  0AA2               	incf	setLED@command,f
  6640  1CC5  0824               	movf	setSw_Initialization@sw,w
  6641  1CC6  3192  22F1  319C   	fcall	_setLED
  6642                           
  6643                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6644  1CC9  0020               	movlb	0	; select bank0
  6645  1CCA  01A2               	clrf	setLED@command
  6646  1CCB  0AA2               	incf	setLED@command,f
  6647  1CCC  0824               	movf	setSw_Initialization@sw,w
  6648  1CCD  3E01               	addlw	1
  6649  1CCE  3192  22F1         	fcall	_setLED
  6650  1CD0  0008               	return
  6651  1CD1                     __end_of_setSw_Initialization:	
  6652                           
  6653                           	psect	text23
  6654  1B46                     __ptext23:	
  6655 ;; *************** function _RF_Main *****************
  6656 ;; Defined at:
  6657 ;;		line 26 in file "../src/RF_Control_B1.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;		None
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;		None
  6662 ;; Return value:  Size  Location     Type
  6663 ;;		None               void
  6664 ;; Registers used:
  6665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;Total ram usage:        0 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:   12
  6678 ;; This function calls:
  6679 ;;		_setRF_Main
  6680 ;; This function is called by:
  6681 ;;		_main
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           
  6686                           ;psect for function _RF_Main
  6687  1B46                     _RF_Main:	
  6688                           
  6689                           ;RF_Control_B1.c: 28: setRF_Main();
  6690                           
  6691                           ;incstack = 0
  6692                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6693  1B46  3184  247F         	fcall	_setRF_Main
  6694  1B48  0008               	return
  6695  1B49                     __end_of_RF_Main:	
  6696                           
  6697                           	psect	text24
  6698  047F                     __ptext24:	
  6699 ;; *************** function _setRF_Main *****************
  6700 ;; Defined at:
  6701 ;;		line 53 in file "../src/RF_Control_B1.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;		None
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;  error           1    3[BANK1 ] unsigned char 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;Total ram usage:        2 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:   11
  6722 ;; This function calls:
  6723 ;;		_CC2500_PowerOnInitial
  6724 ;;		_CC2500_RxData
  6725 ;;		_CC2500_TxData
  6726 ;;		_CC2500_WriteCommand
  6727 ;;		_RF_RxDisable
  6728 ;;		___lwdiv
  6729 ;;		_getBuz_GO
  6730 ;;		_getRF_KeyStatus
  6731 ;;		_getRxData
  6732 ;; This function is called by:
  6733 ;;		_RF_Main
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           
  6738                           ;psect for function _setRF_Main
  6739  047F                     _setRF_Main:	
  6740                           
  6741                           ;RF_Control_B1.c: 54: char error = 0;
  6742                           
  6743                           ;incstack = 0
  6744                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6745  047F  0021               	movlb	1	; select bank1
  6746  0480  01DE               	clrf	setRF_Main@error^(0+128)
  6747                           
  6748                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6749  0481  1C20               	btfss	_RF1^(0+128),0
  6750  0482  2D50               	goto	l2115
  6751                           
  6752                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6753  0483  319D  2504  3184   	fcall	_getBuz_GO
  6754  0486  0020               	movlb	0	; select bank0
  6755  0487  0821               	movf	?_getBuz_GO+1,w
  6756  0488  0420               	iorwf	?_getBuz_GO,w
  6757  0489  1D03               	skipz
  6758  048A  2D31               	goto	l9786
  6759                           
  6760                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6761  048B  319D  2515  3184   	fcall	_getRF_KeyStatus
  6762  048E  3A01               	xorlw	1
  6763  048F  3000               	movlw	0
  6764  0490  1903               	skipnz
  6765  0491  3001               	movlw	1
  6766  0492  0021               	movlb	1	; select bank1
  6767  0493  00DD               	movwf	??_setRF_Main^(0+128)
  6768  0494  0CDD               	rrf	??_setRF_Main^(0+128),f
  6769  0495  0CDD               	rrf	??_setRF_Main^(0+128),f
  6770  0496  0820               	movf	_RF1^(0+128),w
  6771  0497  065D               	xorwf	??_setRF_Main^(0+128),w
  6772  0498  397F               	andlw	-129
  6773  0499  065D               	xorwf	??_setRF_Main^(0+128),w
  6774  049A  00A0               	movwf	_RF1^(0+128)
  6775                           
  6776                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6777  049B  1FA0               	btfss	_RF1^(0+128),7
  6778  049C  2C9F               	goto	l2119
  6779  049D  1F20               	btfss	_RF1^(0+128),6
  6780  049E  2D31               	goto	l9786
  6781  049F                     l2119:	
  6782                           
  6783                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6784  049F  1D20               	btfss	_RF1^(0+128),2
  6785  04A0  2CF0               	goto	l2120
  6786                           
  6787                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6788  04A1  1B20               	btfsc	_RF1^(0+128),6
  6789  04A2  2CEB               	goto	l9758
  6790                           
  6791                           ;RF_Control_B1.c: 68: RF1.Count++;
  6792  04A3  3001               	movlw	1
  6793  04A4  07A2               	addwf	(_RF1^(0+128)+2),f
  6794  04A5  3000               	movlw	0
  6795  04A6  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6796                           
  6797                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6798  04A7  3014               	movlw	20
  6799  04A8  0020               	movlb	0	; select bank0
  6800  04A9  00A0               	movwf	___lwdiv@divisor
  6801  04AA  3000               	movlw	0
  6802  04AB  00A1               	movwf	___lwdiv@divisor+1
  6803  04AC  0021               	movlb	1	; select bank1
  6804  04AD  0828               	movf	((_RF1+1)^(0+128)+7),w
  6805  04AE  0020               	movlb	0	; select bank0
  6806  04AF  01A3               	clrf	___lwdiv@dividend+1
  6807  04B0  07A3               	addwf	___lwdiv@dividend+1,f
  6808  04B1  0021               	movlb	1	; select bank1
  6809  04B2  0827               	movf	(_RF1^(0+128)+7),w
  6810  04B3  0020               	movlb	0	; select bank0
  6811  04B4  01A2               	clrf	___lwdiv@dividend
  6812  04B5  07A2               	addwf	___lwdiv@dividend,f
  6813  04B6  3192  2281  3184   	fcall	___lwdiv
  6814  04B9  0020               	movlb	0	; select bank0
  6815  04BA  0821               	movf	?___lwdiv+1,w
  6816  04BB  0021               	movlb	1	; select bank1
  6817  04BC  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6818  04BD  1D03               	skipz
  6819  04BE  2CC3               	goto	u11035
  6820  04BF  0020               	movlb	0	; select bank0
  6821  04C0  0820               	movf	?___lwdiv,w
  6822  04C1  0021               	movlb	1	; select bank1
  6823  04C2  0222               	subwf	(_RF1^(0+128)+2),w
  6824  04C3                     u11035:	
  6825  04C3  1C03               	skipc
  6826  04C4  2D31               	goto	l9786
  6827                           
  6828                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6829  04C5  3014               	movlw	20
  6830  04C6  0020               	movlb	0	; select bank0
  6831  04C7  00A0               	movwf	___lwdiv@divisor
  6832  04C8  3000               	movlw	0
  6833  04C9  00A1               	movwf	___lwdiv@divisor+1
  6834  04CA  0021               	movlb	1	; select bank1
  6835  04CB  0828               	movf	((_RF1+1)^(0+128)+7),w
  6836  04CC  0020               	movlb	0	; select bank0
  6837  04CD  01A3               	clrf	___lwdiv@dividend+1
  6838  04CE  07A3               	addwf	___lwdiv@dividend+1,f
  6839  04CF  0021               	movlb	1	; select bank1
  6840  04D0  0827               	movf	(_RF1^(0+128)+7),w
  6841  04D1  0020               	movlb	0	; select bank0
  6842  04D2  01A2               	clrf	___lwdiv@dividend
  6843  04D3  07A2               	addwf	___lwdiv@dividend,f
  6844  04D4  3192  2281  3184   	fcall	___lwdiv
  6845  04D7  0020               	movlb	0	; select bank0
  6846  04D8  0821               	movf	?___lwdiv+1,w
  6847  04D9  0021               	movlb	1	; select bank1
  6848  04DA  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6849  04DB  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6850  04DC  0020               	movlb	0	; select bank0
  6851  04DD  0820               	movf	?___lwdiv,w
  6852  04DE  0021               	movlb	1	; select bank1
  6853  04DF  01A2               	clrf	(_RF1^(0+128)+2)
  6854  04E0  07A2               	addwf	(_RF1^(0+128)+2),f
  6855                           
  6856                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6857  04E1  1120               	bcf	_RF1^(0+128),2
  6858                           
  6859                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6860  04E2  01AA               	clrf	(_RF1^(0+128)+10)
  6861  04E3  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6862                           
  6863                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6864  04E4  319C  24B2  3184   	fcall	_RF_RxDisable
  6865                           
  6866                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6867  04E7  3188  207D  3184   	fcall	_CC2500_TxData
  6868                           
  6869                           ;RF_Control_B1.c: 77: }
  6870                           ;RF_Control_B1.c: 78: } else {
  6871  04EA  2D31               	goto	l9786
  6872  04EB                     l9758:	
  6873                           
  6874                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6875  04EB  0021               	movlb	1	; select bank1
  6876  04EC  01A2               	clrf	(_RF1^(0+128)+2)
  6877  04ED  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6878                           
  6879                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6880  04EE  1120               	bcf	_RF1^(0+128),2
  6881                           
  6882                           ;RF_Control_B1.c: 81: }
  6883                           ;RF_Control_B1.c: 82: } else {
  6884  04EF  2D31               	goto	l9786
  6885  04F0                     l2120:	
  6886                           
  6887                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6888  04F0  1DA0               	btfss	_RF1^(0+128),3
  6889  04F1  2CFF               	goto	l9772
  6890                           
  6891                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6892  04F2  3188  2012  3184   	fcall	_CC2500_RxData
  6893                           
  6894                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6895  04F5  0021               	movlb	1	; select bank1
  6896  04F6  1CA0               	btfss	_RF1^(0+128),1
  6897  04F7  2D31               	goto	l9786
  6898                           
  6899                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6900  04F8  10A0               	bcf	_RF1^(0+128),1
  6901                           
  6902                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6903  04F9  01AA               	clrf	(_RF1^(0+128)+10)
  6904  04FA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6905                           
  6906                           ;RF_Control_B1.c: 97: getRxData();
  6907  04FB  318A  223A  3184   	fcall	_getRxData
  6908                           
  6909                           ;RF_Control_B1.c: 100: }
  6910                           ;RF_Control_B1.c: 101: } else {
  6911  04FE  2D31               	goto	l9786
  6912  04FF                     l9772:	
  6913                           
  6914                           ;RF_Control_B1.c: 102: RF1.Count++;
  6915  04FF  3001               	movlw	1
  6916  0500  0021               	movlb	1	; select bank1
  6917  0501  07A2               	addwf	(_RF1^(0+128)+2),f
  6918  0502  3000               	movlw	0
  6919  0503  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6920                           
  6921                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6922  0504  3014               	movlw	20
  6923  0505  0020               	movlb	0	; select bank0
  6924  0506  00A0               	movwf	___lwdiv@divisor
  6925  0507  3000               	movlw	0
  6926  0508  00A1               	movwf	___lwdiv@divisor+1
  6927  0509  0021               	movlb	1	; select bank1
  6928  050A  0828               	movf	((_RF1+1)^(0+128)+7),w
  6929  050B  0020               	movlb	0	; select bank0
  6930  050C  01A3               	clrf	___lwdiv@dividend+1
  6931  050D  07A3               	addwf	___lwdiv@dividend+1,f
  6932  050E  0021               	movlb	1	; select bank1
  6933  050F  0827               	movf	(_RF1^(0+128)+7),w
  6934  0510  0020               	movlb	0	; select bank0
  6935  0511  01A2               	clrf	___lwdiv@dividend
  6936  0512  07A2               	addwf	___lwdiv@dividend,f
  6937  0513  3192  2281  3184   	fcall	___lwdiv
  6938  0516  0020               	movlb	0	; select bank0
  6939  0517  0821               	movf	?___lwdiv+1,w
  6940  0518  0021               	movlb	1	; select bank1
  6941  0519  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6942  051A  1D03               	skipz
  6943  051B  2D20               	goto	u11065
  6944  051C  0020               	movlb	0	; select bank0
  6945  051D  0820               	movf	?___lwdiv,w
  6946  051E  0021               	movlb	1	; select bank1
  6947  051F  0222               	subwf	(_RF1^(0+128)+2),w
  6948  0520                     u11065:	
  6949  0520  1C03               	skipc
  6950  0521  2D31               	goto	l9786
  6951                           
  6952                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6953  0522  01A2               	clrf	(_RF1^(0+128)+2)
  6954  0523  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6955                           
  6956                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6957  0524  15A0               	bsf	_RF1^(0+128),3
  6958                           
  6959                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6960  0525  3036               	movlw	54
  6961  0526  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6962                           
  6963                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6964  0529  303A               	movlw	58
  6965  052A  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6966                           
  6967                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6968  052D  3034               	movlw	52
  6969  052E  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6970  0531                     l9786:	
  6971                           
  6972                           ;RF_Control_B1.c: 111: }
  6973                           ;RF_Control_B1.c: 112: }
  6974                           ;RF_Control_B1.c: 113: }
  6975                           ;RF_Control_B1.c: 114: }
  6976                           ;RF_Control_B1.c: 115: }
  6977                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6978  0531  3001               	movlw	1
  6979  0532  0021               	movlb	1	; select bank1
  6980  0533  07AA               	addwf	(_RF1^(0+128)+10),f
  6981  0534  3000               	movlw	0
  6982  0535  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6983                           
  6984                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6985  0536  300B               	movlw	11
  6986  0537  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6987  0538  30B9               	movlw	185
  6988  0539  1903               	skipnz
  6989  053A  022A               	subwf	(_RF1^(0+128)+10),w
  6990  053B  1C03               	skipc
  6991  053C  2D49               	goto	l9800
  6992                           
  6993                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6994  053D  01AA               	clrf	(_RF1^(0+128)+10)
  6995  053E  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6996                           
  6997                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6998  053F  11A0               	bcf	_RF1^(0+128),3
  6999                           
  7000                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7001  0540  10A0               	bcf	_RF1^(0+128),1
  7002                           
  7003                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7004  0541  3036               	movlw	54
  7005  0542  319F  271A  3184   	fcall	_CC2500_WriteCommand
  7006                           
  7007                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7008  0545  303A               	movlw	58
  7009  0546  319F  271A  3184   	fcall	_CC2500_WriteCommand
  7010  0549                     l9800:	
  7011                           
  7012                           ;RF_Control_B1.c: 125: }
  7013                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7014  0549  0021               	movlb	1	; select bank1
  7015  054A  1F21               	btfss	(_RF1^(0+128)+1),6
  7016  054B  0008               	return
  7017                           
  7018                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7019  054C  1321               	bcf	(_RF1^(0+128)+1),6
  7020                           
  7021                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7022  054D  319E  2619         	fcall	_CC2500_PowerOnInitial
  7023                           
  7024                           ;RF_Control_B1.c: 130: }
  7025                           ;RF_Control_B1.c: 132: } else {
  7026  054F  0008               	return
  7027  0550                     l2115:	
  7028                           
  7029                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7030  0550  1C2E               	btfss	_myMain^(0+128),0
  7031  0551  0008               	return
  7032                           
  7033                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7034  0552  1420               	bsf	_RF1^(0+128),0
  7035  0553  0008               	return
  7036  0554                     __end_of_setRF_Main:	
  7037                           
  7038                           	psect	text25
  7039  0A3A                     __ptext25:	
  7040 ;; *************** function _getRxData *****************
  7041 ;; Defined at:
  7042 ;;		line 227 in file "../src/RF_Control_B1.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;		None
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;  error           1    1[BANK1 ] unsigned char 
  7047 ;; Return value:  Size  Location     Type
  7048 ;;		None               void
  7049 ;; Registers used:
  7050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7059 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7060 ;;Total ram usage:        2 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:   10
  7063 ;; This function calls:
  7064 ;;		_getMain_All_Error_Status
  7065 ;;		_setControl_Lights_Table
  7066 ;;		_setLog_Code
  7067 ;;		_setTxData
  7068 ;; This function is called by:
  7069 ;;		_setRF_Main
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           
  7074                           ;psect for function _getRxData
  7075  0A3A                     _getRxData:	
  7076                           
  7077                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7078                           
  7079                           ;incstack = 0
  7080                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7081  0A3A  0023               	movlb	3	; select bank3
  7082  0A3B  0820               	movf	_RF_Data^(0+384),w
  7083  0A3C  3AAA               	xorlw	170
  7084  0A3D  1D03               	skipz
  7085  0A3E  2A50               	goto	l9476
  7086  0A3F  0821               	movf	(_RF_Data^(0+384)+1),w
  7087  0A40  3A01               	xorlw	1
  7088  0A41  1D03               	skipz
  7089  0A42  2A50               	goto	l9476
  7090                           
  7091                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7092  0A43  3055               	movlw	85
  7093  0A44  0021               	movlb	1	; select bank1
  7094  0A45  00DB               	movwf	??_getRxData^(0+128)
  7095  0A46  0863               	movf	_product^(0+128),w
  7096  0A47  3E02               	addlw	2
  7097  0A48  0086               	movwf	6
  7098  0A49  3002               	movlw	2	; select bank4/5
  7099  0A4A  0087               	movwf	7
  7100  0A4B  085B               	movf	??_getRxData^(0+128),w
  7101  0A4C  0081               	movwf	1
  7102                           
  7103                           ;RF_Control_B1.c: 231: setTxData();
  7104  0A4D  318F  2745         	fcall	_setTxData
  7105                           
  7106                           ;RF_Control_B1.c: 235: } else {
  7107  0A4F  0008               	return
  7108  0A50                     l9476:	
  7109                           
  7110                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7111  0A50  3000               	movlw	0
  7112  0A51  3191  2178  318A   	fcall	_getMain_All_Error_Status
  7113  0A54  0021               	movlb	1	; select bank1
  7114  0A55  00DB               	movwf	??_getRxData^(0+128)
  7115  0A56  085B               	movf	??_getRxData^(0+128),w
  7116  0A57  00DC               	movwf	getRxData@error^(0+128)
  7117                           
  7118                           ;RF_Control_B1.c: 237: if (error == 0) {
  7119  0A58  08DC               	movf	getRxData@error^(0+128),f
  7120  0A59  1D03               	skipz
  7121  0A5A  2AAA               	goto	l2160
  7122                           
  7123                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7124  0A5B  1F20               	btfss	_RF1^(0+128),6
  7125  0A5C  2A68               	goto	l9488
  7126                           
  7127                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7128  0A5D  0023               	movlb	3	; select bank3
  7129  0A5E  08A0               	movf	_RF_Data^(0+384),f
  7130  0A5F  1D03               	skipz
  7131  0A60  0008               	return
  7132  0A61  0821               	movf	(_RF_Data^(0+384)+1),w
  7133  0A62  3A64               	xorlw	100
  7134  0A63  1D03               	skipz
  7135  0A64  0008               	return
  7136                           
  7137                           ;RF_Control_B1.c: 241: setLog_Code();
  7138  0A65  3191  21AB         	fcall	_setLog_Code
  7139                           
  7140                           ;RF_Control_B1.c: 242: }
  7141                           ;RF_Control_B1.c: 243: } else {
  7142  0A67  0008               	return
  7143  0A68                     l9488:	
  7144                           
  7145                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7146  0A68  0023               	movlb	3	; select bank3
  7147  0A69  0834               	movf	(_RF_Data^(0+384)+20),w
  7148  0A6A  3AD1               	xorlw	209
  7149  0A6B  1903               	skipnz
  7150  0A6C  2A71               	goto	l9492
  7151  0A6D  0834               	movf	(_RF_Data^(0+384)+20),w
  7152  0A6E  3A0A               	xorlw	10
  7153  0A6F  1D03               	skipz
  7154  0A70  0008               	return
  7155  0A71                     l9492:	
  7156                           
  7157                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7158  0A71  08A0               	movf	_RF_Data^(0+384),f
  7159  0A72  1D03               	skipz
  7160  0A73  0008               	return
  7161  0A74  0821               	movf	(_RF_Data^(0+384)+1),w
  7162  0A75  3A02               	xorlw	2
  7163  0A76  1D03               	skipz
  7164  0A77  0008               	return
  7165                           
  7166                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7167  0A78  082C               	movf	(_RF_Data^(0+384)+12),w
  7168  0A79  3AFF               	xorlw	255
  7169  0A7A  1D03               	skipz
  7170  0A7B  2A86               	goto	l9504
  7171  0A7C  082D               	movf	(_RF_Data^(0+384)+13),w
  7172  0A7D  3AFF               	xorlw	255
  7173  0A7E  1D03               	skipz
  7174  0A7F  2A86               	goto	l9504
  7175  0A80  082E               	movf	(_RF_Data^(0+384)+14),w
  7176  0A81  3AFF               	xorlw	255
  7177  0A82  1D03               	skipz
  7178  0A83  2A86               	goto	l9504
  7179                           
  7180                           ;RF_Control_B1.c: 249: __nop();
  7181  0A84  0000               	nop
  7182                           
  7183                           ;RF_Control_B1.c: 250: } else {
  7184  0A85  0008               	return
  7185  0A86                     l9504:	
  7186                           
  7187                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7188  0A86  0021               	movlb	1	; select bank1
  7189  0A87  0863               	movf	_product^(0+128),w
  7190  0A88  3E0C               	addlw	12
  7191  0A89  0086               	movwf	6
  7192  0A8A  3002               	movlw	2	; select bank4/5
  7193  0A8B  0087               	movwf	7
  7194  0A8C  0023               	movlb	3	; select bank3
  7195  0A8D  082C               	movf	(_RF_Data^(0+384)+12),w
  7196  0A8E  0601               	xorwf	1,w
  7197  0A8F  1D03               	skipz
  7198  0A90  0008               	return
  7199  0A91  0021               	movlb	1	; select bank1
  7200  0A92  0863               	movf	_product^(0+128),w
  7201  0A93  3E0D               	addlw	13
  7202  0A94  0086               	movwf	6
  7203  0A95  3002               	movlw	2	; select bank4/5
  7204  0A96  0087               	movwf	7
  7205  0A97  0023               	movlb	3	; select bank3
  7206  0A98  082D               	movf	(_RF_Data^(0+384)+13),w
  7207  0A99  0601               	xorwf	1,w
  7208  0A9A  1D03               	skipz
  7209  0A9B  0008               	return
  7210  0A9C  0021               	movlb	1	; select bank1
  7211  0A9D  0863               	movf	_product^(0+128),w
  7212  0A9E  3E0E               	addlw	14
  7213  0A9F  0086               	movwf	6
  7214  0AA0  3002               	movlw	2	; select bank4/5
  7215  0AA1  0087               	movwf	7
  7216  0AA2  0023               	movlb	3	; select bank3
  7217  0AA3  082E               	movf	(_RF_Data^(0+384)+14),w
  7218  0AA4  0601               	xorwf	1,w
  7219  0AA5  1D03               	skipz
  7220  0AA6  0008               	return
  7221                           
  7222                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7223  0AA7  3189  21C8         	fcall	_setControl_Lights_Table
  7224                           
  7225                           ;RF_Control_B1.c: 253: }
  7226                           ;RF_Control_B1.c: 254: }
  7227                           ;RF_Control_B1.c: 256: }
  7228                           ;RF_Control_B1.c: 267: }
  7229                           ;RF_Control_B1.c: 268: }
  7230                           ;RF_Control_B1.c: 269: } else {
  7231  0AA9  0008               	return
  7232  0AAA                     l2160:	
  7233                           
  7234                           ;RF_Control_B1.c: 270: __nop();
  7235  0AAA  0000               	nop
  7236  0AAB  0008               	return
  7237  0AAC                     __end_of_getRxData:	
  7238                           
  7239                           	psect	text26
  7240  11AB                     __ptext26:	
  7241 ;; *************** function _setLog_Code *****************
  7242 ;; Defined at:
  7243 ;;		line 276 in file "../src/RF_Control_B1.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;		None
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;		None
  7248 ;; Return value:  Size  Location     Type
  7249 ;;		None               void
  7250 ;; Registers used:
  7251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;Total ram usage:        1 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    7
  7264 ;; This function calls:
  7265 ;;		_setBuz
  7266 ;;		_setMemory_LoopSave
  7267 ;;		_setMemory_Modify
  7268 ;;		_setProductData
  7269 ;; This function is called by:
  7270 ;;		_getRxData
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           
  7275                           ;psect for function _setLog_Code
  7276  11AB                     _setLog_Code:	
  7277                           
  7278                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7279                           
  7280                           ;incstack = 0
  7281                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7282  11AB  0021               	movlb	1	; select bank1
  7283  11AC  1320               	bcf	_RF1^(0+128),6
  7284                           
  7285                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7286  11AD  0023               	movlb	3	; select bank3
  7287  11AE  082C               	movf	(_RF_Data^(0+384)+12),w
  7288  11AF  0020               	movlb	0	; select bank0
  7289  11B0  00E5               	movwf	??_setLog_Code
  7290  11B1  0865               	movf	??_setLog_Code,w
  7291  11B2  00E2               	movwf	setProductData@value
  7292  11B3  300C               	movlw	12
  7293  11B4  319C  241E  3191   	fcall	_setProductData
  7294                           
  7295                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7296  11B7  0023               	movlb	3	; select bank3
  7297  11B8  082D               	movf	(_RF_Data^(0+384)+13),w
  7298  11B9  0020               	movlb	0	; select bank0
  7299  11BA  00E5               	movwf	??_setLog_Code
  7300  11BB  0865               	movf	??_setLog_Code,w
  7301  11BC  00E2               	movwf	setProductData@value
  7302  11BD  300D               	movlw	13
  7303  11BE  319C  241E  3191   	fcall	_setProductData
  7304                           
  7305                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7306  11C1  0023               	movlb	3	; select bank3
  7307  11C2  082E               	movf	(_RF_Data^(0+384)+14),w
  7308  11C3  0020               	movlb	0	; select bank0
  7309  11C4  00E5               	movwf	??_setLog_Code
  7310  11C5  0865               	movf	??_setLog_Code,w
  7311  11C6  00E2               	movwf	setProductData@value
  7312  11C7  300E               	movlw	14
  7313  11C8  319C  241E  3191   	fcall	_setProductData
  7314                           
  7315                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7316  11CB  3064               	movlw	100
  7317  11CC  0020               	movlb	0	; select bank0
  7318  11CD  00A9               	movwf	setBuz@time
  7319  11CE  3000               	movlw	0
  7320  11CF  00AA               	movwf	setBuz@time+1
  7321  11D0  3001               	movlw	1
  7322  11D1  3195  2551  3191   	fcall	_setBuz
  7323                           
  7324                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7325  11D4  0021               	movlb	1	; select bank1
  7326  11D5  1EAE               	btfss	_myMain^(0+128),5
  7327  11D6  29DB               	goto	l2175
  7328                           
  7329                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7330  11D7  3001               	movlw	1
  7331  11D8  319D  25CA  3191   	fcall	_setMemory_LoopSave
  7332  11DB                     l2175:	
  7333                           
  7334                           ;RF_Control_B1.c: 284: }
  7335                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7336  11DB  3001               	movlw	1
  7337  11DC  319D  2591         	fcall	_setMemory_Modify
  7338  11DE  0008               	return
  7339  11DF                     __end_of_setLog_Code:	
  7340                           
  7341                           	psect	text27
  7342  1DCA                     __ptext27:	
  7343 ;; *************** function _setMemory_LoopSave *****************
  7344 ;; Defined at:
  7345 ;;		line 1089 in file "../src/MCU_B1.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  command         1    wreg     unsigned char 
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;  command         1    1[BANK0 ] unsigned char 
  7350 ;; Return value:  Size  Location     Type
  7351 ;;		None               void
  7352 ;; Registers used:
  7353 ;;		wreg, status,2, status,0
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;Total ram usage:        2 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:    5
  7366 ;; This function calls:
  7367 ;;		Nothing
  7368 ;; This function is called by:
  7369 ;;		_setLog_Code
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function _setMemory_LoopSave
  7375  1DCA                     _setMemory_LoopSave:	
  7376                           
  7377                           ;incstack = 0
  7378                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7379                           ;setMemory_LoopSave@command stored from wreg
  7380  1DCA  0020               	movlb	0	; select bank0
  7381  1DCB  00A1               	movwf	setMemory_LoopSave@command
  7382                           
  7383                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7384  1DCC  0821               	movf	setMemory_LoopSave@command,w
  7385  1DCD  3A01               	xorlw	1
  7386  1DCE  3000               	movlw	0
  7387  1DCF  1903               	skipnz
  7388  1DD0  3001               	movlw	1
  7389  1DD1  00A0               	movwf	??_setMemory_LoopSave
  7390  1DD2  0DA0               	rlf	??_setMemory_LoopSave,f
  7391  1DD3  0DA0               	rlf	??_setMemory_LoopSave,f
  7392  1DD4  0024               	movlb	4	; select bank4
  7393  1DD5  0844               	movf	(_Memory^(0+512)+36),w
  7394  1DD6  0020               	movlb	0	; select bank0
  7395  1DD7  0620               	xorwf	??_setMemory_LoopSave,w
  7396  1DD8  39FB               	andlw	-5
  7397  1DD9  0620               	xorwf	??_setMemory_LoopSave,w
  7398  1DDA  0024               	movlb	4	; select bank4
  7399  1DDB  00C4               	movwf	(_Memory^(0+512)+36)
  7400  1DDC  0008               	return
  7401  1DDD                     __end_of_setMemory_LoopSave:	
  7402                           
  7403                           	psect	text28
  7404  09C8                     __ptext28:	
  7405 ;; *************** function _setControl_Lights_Table *****************
  7406 ;; Defined at:
  7407 ;;		line 289 in file "../src/RF_Control_B1.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;		None               void
  7414 ;; Registers used:
  7415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;Total ram usage:        0 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    9
  7428 ;; This function calls:
  7429 ;;		_getDimmerLights_Status
  7430 ;;		_getMain_All_LightsStatus
  7431 ;;		_setCmd_Status
  7432 ;;		_setDimmerLights_SwOff
  7433 ;;		_setDimmerLights_SwOn
  7434 ;;		_setProductData
  7435 ;;		_setRFSW_AdjControl
  7436 ;;		_setRFSW_Control
  7437 ;;		_setTxData
  7438 ;; This function is called by:
  7439 ;;		_getRxData
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           
  7444                           ;psect for function _setControl_Lights_Table
  7445  09C8                     _setControl_Lights_Table:	
  7446                           
  7447                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7448                           
  7449                           ;incstack = 0
  7450                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7451  09C8  2A2A               	goto	l9182
  7452  09C9                     l9164:	
  7453                           ;RF_Control_B1.c: 292: case 0x00:
  7454                           
  7455                           
  7456                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7457  09C9  319B  23D0  3189   	fcall	_getMain_All_LightsStatus
  7458  09CC  3A01               	xorlw	1
  7459  09CD  1D03               	skipz
  7460  09CE  29E5               	goto	l9172
  7461                           
  7462                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7463  09CF  3001               	movlw	1
  7464  09D0  319C  24D1  3189   	fcall	_getDimmerLights_Status
  7465  09D3  3A01               	xorlw	1
  7466  09D4  1D03               	skipz
  7467  09D5  29DE               	goto	l9170
  7468                           
  7469                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7470  09D6  3001               	movlw	1
  7471  09D7  3191  21DF  3189   	fcall	_setDimmerLights_SwOn
  7472                           
  7473                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7474  09DA  3001               	movlw	1
  7475  09DB  3192  22B8  3189   	fcall	_setDimmerLights_SwOff
  7476  09DE                     l9170:	
  7477                           
  7478                           ;RF_Control_B1.c: 299: }
  7479                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7480  09DE  0020               	movlb	0	; select bank0
  7481  09DF  01A0               	clrf	setCmd_Status@cmd
  7482  09E0  0AA0               	incf	setCmd_Status@cmd,f
  7483  09E1  3001               	movlw	1
  7484  09E2  319E  26B4         	fcall	_setCmd_Status
  7485                           
  7486                           ;RF_Control_B1.c: 315: } else {
  7487  09E4  0008               	return
  7488  09E5                     l9172:	
  7489                           
  7490                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7491  09E5  0020               	movlb	0	; select bank0
  7492  09E6  01E2               	clrf	setProductData@value
  7493  09E7  3009               	movlw	9
  7494  09E8  319C  241E  3189   	fcall	_setProductData
  7495                           
  7496                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7497  09EB  0020               	movlb	0	; select bank0
  7498  09EC  01E2               	clrf	setProductData@value
  7499  09ED  300B               	movlw	11
  7500  09EE  319C  241E  3189   	fcall	_setProductData
  7501                           
  7502                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7503  09F1  0020               	movlb	0	; select bank0
  7504  09F2  01E2               	clrf	setProductData@value
  7505  09F3  300F               	movlw	15
  7506  09F4  319C  241E  3189   	fcall	_setProductData
  7507                           
  7508                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7509  09F7  0020               	movlb	0	; select bank0
  7510  09F8  01E2               	clrf	setProductData@value
  7511  09F9  3011               	movlw	17
  7512  09FA  319C  241E  3189   	fcall	_setProductData
  7513                           
  7514                           ;RF_Control_B1.c: 320: setTxData();
  7515  09FD  318F  2745         	fcall	_setTxData
  7516                           
  7517                           ;RF_Control_B1.c: 321: }
  7518                           ;RF_Control_B1.c: 322: break;
  7519  09FF  0008               	return
  7520  0A00                     l9174:	
  7521                           ;RF_Control_B1.c: 324: case 0x20:
  7522                           
  7523                           
  7524                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7525  0A00  0020               	movlb	0	; select bank0
  7526  0A01  01E2               	clrf	setProductData@value
  7527  0A02  3009               	movlw	9
  7528  0A03  319C  241E  3189   	fcall	_setProductData
  7529                           
  7530                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7531  0A06  0020               	movlb	0	; select bank0
  7532  0A07  01E2               	clrf	setProductData@value
  7533  0A08  300B               	movlw	11
  7534  0A09  319C  241E  3189   	fcall	_setProductData
  7535                           
  7536                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7537  0A0C  0021               	movlb	1	; select bank1
  7538  0A0D  0863               	movf	_product^(0+128),w
  7539  0A0E  0086               	movwf	6
  7540  0A0F  3002               	movlw	2	; select bank4/5
  7541  0A10  0087               	movwf	7
  7542  0A11  3002               	movlw	2	; select bank4/5
  7543  0A12  3F4F               	moviw [15]fsr1
  7544  0A13  0020               	movlb	0	; select bank0
  7545  0A14  00E2               	movwf	setProductData@value
  7546  0A15  300F               	movlw	15
  7547  0A16  319C  241E  3189   	fcall	_setProductData
  7548                           
  7549                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7550  0A19  0020               	movlb	0	; select bank0
  7551  0A1A  01E2               	clrf	setProductData@value
  7552  0A1B  3011               	movlw	17
  7553  0A1C  319C  241E  3189   	fcall	_setProductData
  7554                           
  7555                           ;RF_Control_B1.c: 329: setTxData();
  7556  0A1F  318F  2745         	fcall	_setTxData
  7557                           
  7558                           ;RF_Control_B1.c: 330: break;
  7559  0A21  0008               	return
  7560  0A22                     l9176:	
  7561                           ;RF_Control_B1.c: 333: case 0x01:
  7562                           
  7563                           
  7564                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7565  0A22  3001               	movlw	1
  7566  0A23  3193  23A2         	fcall	_setRFSW_Control
  7567                           
  7568                           ;RF_Control_B1.c: 335: break;
  7569  0A25  0008               	return
  7570  0A26                     l9178:	
  7571                           ;RF_Control_B1.c: 339: case 0x11:
  7572                           
  7573                           
  7574                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7575  0A26  3001               	movlw	1
  7576  0A27  318B  231E         	fcall	_setRFSW_AdjControl
  7577                           
  7578                           ;RF_Control_B1.c: 370: }
  7579                           
  7580                           ;RF_Control_B1.c: 341: break;
  7581  0A29  0008               	return
  7582  0A2A                     l9182:	
  7583  0A2A  0023               	movlb	3	; select bank3
  7584  0A2B  082F               	movf	(_RF_Data^(0+384)+15),w
  7585                           
  7586                           ; Switch size 1, requested type "space"
  7587                           ; Number of cases is 4, Range of values is 0 to 32
  7588                           ; switch strategies available:
  7589                           ; Name         Instructions Cycles
  7590                           ; simple_byte           13     7 (average)
  7591                           ; direct_byte           72     6 (fixed)
  7592                           ; jumptable            260     6 (fixed)
  7593                           ;	Chosen strategy is simple_byte
  7594  0A2C  3A00               	xorlw	0	; case 0
  7595  0A2D  1903               	skipnz
  7596  0A2E  29C9               	goto	l9164
  7597  0A2F  3A01               	xorlw	1	; case 1
  7598  0A30  1903               	skipnz
  7599  0A31  2A22               	goto	l9176
  7600  0A32  3A10               	xorlw	16	; case 17
  7601  0A33  1903               	skipnz
  7602  0A34  2A26               	goto	l9178
  7603  0A35  3A31               	xorlw	49	; case 32
  7604  0A36  1903               	skipnz
  7605  0A37  2A00               	goto	l9174
  7606  0A38  2A39               	goto	l2188
  7607  0A39                     l2188:	
  7608  0A39  0008               	return
  7609  0A3A                     __end_of_setControl_Lights_Table:	
  7610                           
  7611                           	psect	text29
  7612  13A2                     __ptext29:	
  7613 ;; *************** function _setRFSW_Control *****************
  7614 ;; Defined at:
  7615 ;;		line 378 in file "../src/RF_Control_B1.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;  sw              1    wreg     unsigned char 
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;  sw              1   79[BANK0 ] unsigned char 
  7620 ;;  status          1   78[BANK0 ] unsigned char 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7631 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;Total ram usage:        3 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    8
  7637 ;; This function calls:
  7638 ;;		_getDimmerLights_Status
  7639 ;;		_setBuz
  7640 ;;		_setDelayOff_GO
  7641 ;;		_setDimmerLights_SwOff
  7642 ;;		_setDimmerLights_SwOn
  7643 ;;		_setRF_DimmerLights
  7644 ;;		_setTxData
  7645 ;; This function is called by:
  7646 ;;		_setControl_Lights_Table
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           
  7651                           ;psect for function _setRFSW_Control
  7652  13A2                     _setRFSW_Control:	
  7653                           
  7654                           ;incstack = 0
  7655                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7656                           ;setRFSW_Control@sw stored from wreg
  7657  13A2  0020               	movlb	0	; select bank0
  7658  13A3  00EF               	movwf	setRFSW_Control@sw
  7659                           
  7660                           ;RF_Control_B1.c: 379: char status = 0;
  7661  13A4  01EE               	clrf	setRFSW_Control@status
  7662                           
  7663                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7664  13A5  0023               	movlb	3	; select bank3
  7665  13A6  0830               	movf	(_RF_Data^(0+384)+16),w
  7666  13A7  3A80               	xorlw	128
  7667  13A8  1D03               	skipz
  7668  13A9  2BD5               	goto	l8908
  7669                           
  7670                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7671  13AA  0020               	movlb	0	; select bank0
  7672  13AB  01E5               	clrf	setDelayOff_GO@command
  7673  13AC  0AE5               	incf	setDelayOff_GO@command,f
  7674  13AD  0023               	movlb	3	; select bank3
  7675  13AE  0831               	movf	(_RF_Data^(0+384)+17),w
  7676  13AF  0020               	movlb	0	; select bank0
  7677  13B0  00ED               	movwf	??_setRFSW_Control
  7678  13B1  086D               	movf	??_setRFSW_Control,w
  7679  13B2  00E6               	movwf	setDelayOff_GO@value
  7680  13B3  086F               	movf	setRFSW_Control@sw,w
  7681  13B4  318C  24AB  3193   	fcall	_setDelayOff_GO
  7682                           
  7683                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7684  13B7  0020               	movlb	0	; select bank0
  7685  13B8  086F               	movf	setRFSW_Control@sw,w
  7686  13B9  319C  24D1  3193   	fcall	_getDimmerLights_Status
  7687  13BC  3A01               	xorlw	1
  7688  13BD  1D03               	skipz
  7689  13BE  2BD5               	goto	l8908
  7690                           
  7691                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7692  13BF  3064               	movlw	100
  7693  13C0  0020               	movlb	0	; select bank0
  7694  13C1  00A9               	movwf	setBuz@time
  7695  13C2  3000               	movlw	0
  7696  13C3  00AA               	movwf	setBuz@time+1
  7697  13C4  3001               	movlw	1
  7698  13C5  3195  2551  3193   	fcall	_setBuz
  7699                           
  7700                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7701  13C8  0020               	movlb	0	; select bank0
  7702  13C9  01E5               	clrf	setRF_DimmerLights@on
  7703  13CA  0AE5               	incf	setRF_DimmerLights@on,f
  7704  13CB  086F               	movf	setRFSW_Control@sw,w
  7705  13CC  3197  2730  3193   	fcall	_setRF_DimmerLights
  7706                           
  7707                           ;RF_Control_B1.c: 386: setTxData();
  7708  13CF  318F  2745  3193   	fcall	_setTxData
  7709                           
  7710                           ;RF_Control_B1.c: 387: status = 1;
  7711  13D2  0020               	movlb	0	; select bank0
  7712  13D3  01EE               	clrf	setRFSW_Control@status
  7713  13D4  0AEE               	incf	setRFSW_Control@status,f
  7714  13D5                     l8908:	
  7715                           
  7716                           ;RF_Control_B1.c: 388: }
  7717                           ;RF_Control_B1.c: 389: }
  7718                           ;RF_Control_B1.c: 391: if (status == 0) {
  7719  13D5  0020               	movlb	0	; select bank0
  7720  13D6  08EE               	movf	setRFSW_Control@status,f
  7721  13D7  1D03               	skipz
  7722  13D8  0008               	return
  7723                           
  7724                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7725  13D9  086F               	movf	setRFSW_Control@sw,w
  7726  13DA  3191  21DF  3193   	fcall	_setDimmerLights_SwOn
  7727                           
  7728                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7729  13DD  0020               	movlb	0	; select bank0
  7730  13DE  086F               	movf	setRFSW_Control@sw,w
  7731  13DF  3192  22B8         	fcall	_setDimmerLights_SwOff
  7732  13E1  0008               	return
  7733  13E2                     __end_of_setRFSW_Control:	
  7734                           
  7735                           	psect	text30
  7736  0B1E                     __ptext30:	
  7737 ;; *************** function _setRFSW_AdjControl *****************
  7738 ;; Defined at:
  7739 ;;		line 400 in file "../src/RF_Control_B1.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;  sw              1    wreg     unsigned char 
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;  sw              1   72[BANK0 ] unsigned char 
  7744 ;;  status          1   71[BANK0 ] unsigned char 
  7745 ;; Return value:  Size  Location     Type
  7746 ;;		None               void
  7747 ;; Registers used:
  7748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7749 ;; Tracked objects:
  7750 ;;		On entry : 0/0
  7751 ;;		On exit  : 0/0
  7752 ;;		Unchanged: 0/0
  7753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;Total ram usage:        4 bytes
  7759 ;; Hardware stack levels used:    1
  7760 ;; Hardware stack levels required when called:    8
  7761 ;; This function calls:
  7762 ;;		_getDimmerLights_PercentToValue
  7763 ;;		_getDimmerLights_Status
  7764 ;;		_setDimmerIntr_Dimming_RF
  7765 ;;		_setDimmerIntr_MaxmumValue
  7766 ;;		_setDimmerLights_DimmingRun
  7767 ;;		_setDimmerLights_SwOff
  7768 ;;		_setDimmerLights_SwOn
  7769 ;;		_setMemory_Modify
  7770 ;;		_setProductData
  7771 ;;		_setTxData
  7772 ;; This function is called by:
  7773 ;;		_setControl_Lights_Table
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           
  7778                           ;psect for function _setRFSW_AdjControl
  7779  0B1E                     _setRFSW_AdjControl:	
  7780                           
  7781                           ;incstack = 0
  7782                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7783                           ;setRFSW_AdjControl@sw stored from wreg
  7784  0B1E  0020               	movlb	0	; select bank0
  7785  0B1F  00E8               	movwf	setRFSW_AdjControl@sw
  7786                           
  7787                           ;RF_Control_B1.c: 401: char status = 0;
  7788  0B20  01E7               	clrf	setRFSW_AdjControl@status
  7789                           
  7790                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7791  0B21  0868               	movf	setRFSW_AdjControl@sw,w
  7792  0B22  319C  24D1  318B   	fcall	_getDimmerLights_Status
  7793  0B25  0020               	movlb	0	; select bank0
  7794  0B26  00E5               	movwf	??_setRFSW_AdjControl
  7795  0B27  0865               	movf	??_setRFSW_AdjControl,w
  7796  0B28  00E7               	movwf	setRFSW_AdjControl@status
  7797                           
  7798                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7799  0B29  3065               	movlw	101
  7800  0B2A  0023               	movlb	3	; select bank3
  7801  0B2B  0229               	subwf	(_RF_Data^(0+384)+9),w
  7802  0B2C  1C03               	skipc
  7803  0B2D  2B35               	goto	l8920
  7804                           
  7805                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7806  0B2E  3064               	movlw	100
  7807  0B2F  0020               	movlb	0	; select bank0
  7808  0B30  00E5               	movwf	??_setRFSW_AdjControl
  7809  0B31  0865               	movf	??_setRFSW_AdjControl,w
  7810  0B32  0023               	movlb	3	; select bank3
  7811  0B33  00A9               	movwf	(_RF_Data^(0+384)+9)
  7812                           
  7813                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7814  0B34  2B3A               	goto	l8924
  7815  0B35                     l8920:	
  7816  0B35  08A9               	movf	(_RF_Data^(0+384)+9),f
  7817  0B36  1D03               	skipz
  7818  0B37  2B3A               	goto	l8924
  7819                           
  7820                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7821  0B38  01A9               	clrf	(_RF_Data^(0+384)+9)
  7822  0B39  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7823  0B3A                     l8924:	
  7824                           
  7825                           ;RF_Control_B1.c: 409: }
  7826                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7827  0B3A  0829               	movf	(_RF_Data^(0+384)+9),w
  7828  0B3B  0020               	movlb	0	; select bank0
  7829  0B3C  00E5               	movwf	??_setRFSW_AdjControl
  7830  0B3D  0865               	movf	??_setRFSW_AdjControl,w
  7831  0B3E  00E2               	movwf	setProductData@value
  7832  0B3F  3009               	movlw	9
  7833  0B40  319C  241E  318B   	fcall	_setProductData
  7834                           
  7835                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7836  0B43  0020               	movlb	0	; select bank0
  7837  0B44  0868               	movf	setRFSW_AdjControl@sw,w
  7838  0B45  00E5               	movwf	??_setRFSW_AdjControl
  7839  0B46  0865               	movf	??_setRFSW_AdjControl,w
  7840  0B47  00E2               	movwf	setProductData@value
  7841  0B48  300B               	movlw	11
  7842  0B49  319C  241E  318B   	fcall	_setProductData
  7843                           
  7844                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7845  0B4C  0020               	movlb	0	; select bank0
  7846  0B4D  0868               	movf	setRFSW_AdjControl@sw,w
  7847  0B4E  3E1A               	addlw	26
  7848  0B4F  0021               	movlb	1	; select bank1
  7849  0B50  0763               	addwf	_product^(0+128),w
  7850  0B51  0020               	movlb	0	; select bank0
  7851  0B52  00E5               	movwf	??_setRFSW_AdjControl
  7852  0B53  0865               	movf	??_setRFSW_AdjControl,w
  7853  0B54  0086               	movwf	6
  7854  0B55  3002               	movlw	2	; select bank4/5
  7855  0B56  0087               	movwf	7
  7856  0B57  0801               	movf	1,w
  7857  0B58  00E6               	movwf	??_setRFSW_AdjControl+1
  7858  0B59  0866               	movf	??_setRFSW_AdjControl+1,w
  7859  0B5A  00E2               	movwf	setProductData@value
  7860  0B5B  3011               	movlw	17
  7861  0B5C  319C  241E  318B   	fcall	_setProductData
  7862                           
  7863                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7864  0B5F  0023               	movlb	3	; select bank3
  7865  0B60  0829               	movf	(_RF_Data^(0+384)+9),w
  7866  0B61  0020               	movlb	0	; select bank0
  7867  0B62  00E5               	movwf	??_setRFSW_AdjControl
  7868  0B63  0865               	movf	??_setRFSW_AdjControl,w
  7869  0B64  00E2               	movwf	setProductData@value
  7870  0B65  0868               	movf	setRFSW_AdjControl@sw,w
  7871  0B66  3E14               	addlw	20
  7872  0B67  319C  241E  318B   	fcall	_setProductData
  7873                           
  7874                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  7875  0B6A  3001               	movlw	1
  7876  0B6B  319D  2591  318B   	fcall	_setMemory_Modify
  7877                           
  7878                           ;RF_Control_B1.c: 425: if (status == 1) {
  7879  0B6E  0020               	movlb	0	; select bank0
  7880  0B6F  0867               	movf	setRFSW_AdjControl@status,w
  7881  0B70  3A01               	xorlw	1
  7882  0B71  1D03               	skipz
  7883  0B72  2B8A               	goto	l8934
  7884                           
  7885                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7886  0B73  0023               	movlb	3	; select bank3
  7887  0B74  0829               	movf	(_RF_Data^(0+384)+9),w
  7888  0B75  3196  2666  318B   	fcall	_getDimmerLights_PercentToValue
  7889  0B78  0020               	movlb	0	; select bank0
  7890  0B79  00E5               	movwf	??_setRFSW_AdjControl
  7891  0B7A  0865               	movf	??_setRFSW_AdjControl,w
  7892  0B7B  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  7893  0B7C  0868               	movf	setRFSW_AdjControl@sw,w
  7894  0B7D  319C  242A  318B   	fcall	_setDimmerIntr_MaxmumValue
  7895                           
  7896                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  7897  0B80  0020               	movlb	0	; select bank0
  7898  0B81  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  7899  0B82  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  7900  0B83  0868               	movf	setRFSW_AdjControl@sw,w
  7901  0B84  319E  269C  318B   	fcall	_setDimmerIntr_Dimming_RF
  7902                           
  7903                           ;RF_Control_B1.c: 428: setTxData();
  7904  0B87  318F  2745         	fcall	_setTxData
  7905                           
  7906                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  7907  0B89  0008               	return
  7908  0B8A                     l8934:	
  7909  0B8A  0020               	movlb	0	; select bank0
  7910  0B8B  08E7               	movf	setRFSW_AdjControl@status,f
  7911  0B8C  1D03               	skipz
  7912  0B8D  0008               	return
  7913                           
  7914                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  7915  0B8E  01A2               	clrf	setDimmerLights_DimmingRun@command
  7916  0B8F  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  7917  0B90  0868               	movf	setRFSW_AdjControl@sw,w
  7918  0B91  319F  2734  318B   	fcall	_setDimmerLights_DimmingRun
  7919                           
  7920                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  7921  0B94  0020               	movlb	0	; select bank0
  7922  0B95  0868               	movf	setRFSW_AdjControl@sw,w
  7923  0B96  3191  21DF  318B   	fcall	_setDimmerLights_SwOn
  7924                           
  7925                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  7926  0B99  0020               	movlb	0	; select bank0
  7927  0B9A  0868               	movf	setRFSW_AdjControl@sw,w
  7928  0B9B  3192  22B8         	fcall	_setDimmerLights_SwOff
  7929  0B9D  0008               	return
  7930  0B9E                     __end_of_setRFSW_AdjControl:	
  7931                           
  7932                           	psect	text31
  7933  1F34                     __ptext31:	
  7934 ;; *************** function _setDimmerLights_DimmingRun *****************
  7935 ;; Defined at:
  7936 ;;		line 1076 in file "../src/Dimmer_B1.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;  lights          1    wreg     unsigned char 
  7939 ;;  command         1    2[BANK0 ] unsigned char 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;  lights          1    4[BANK0 ] unsigned char 
  7942 ;; Return value:  Size  Location     Type
  7943 ;;		None               void
  7944 ;; Registers used:
  7945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7946 ;; Tracked objects:
  7947 ;;		On entry : 0/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7951 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;Total ram usage:        3 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:    6
  7958 ;; This function calls:
  7959 ;;		_DimmerLights_SelectPointer
  7960 ;; This function is called by:
  7961 ;;		_setRFSW_AdjControl
  7962 ;; This function uses a non-reentrant model
  7963 ;;
  7964                           
  7965                           
  7966                           ;psect for function _setDimmerLights_DimmingRun
  7967  1F34                     _setDimmerLights_DimmingRun:	
  7968                           
  7969                           ;incstack = 0
  7970                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7971                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7972  1F34  0020               	movlb	0	; select bank0
  7973  1F35  00A4               	movwf	setDimmerLights_DimmingRun@lights
  7974                           
  7975                           ;Dimmer_B1.c: 1077: DimmerLights_SelectPointer(lights);
  7976  1F36  0824               	movf	setDimmerLights_DimmingRun@lights,w
  7977  1F37  319C  2412         	fcall	_DimmerLights_SelectPointer
  7978                           
  7979                           ;Dimmer_B1.c: 1078: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7980  1F39  0020               	movlb	0	; select bank0
  7981  1F3A  0822               	movf	setDimmerLights_DimmingRun@command,w
  7982  1F3B  3A01               	xorlw	1
  7983  1F3C  3000               	movlw	0
  7984  1F3D  1903               	skipnz
  7985  1F3E  3001               	movlw	1
  7986  1F3F  00A3               	movwf	??_setDimmerLights_DimmingRun
  7987  1F40  0021               	movlb	1	; select bank1
  7988  1F41  0A4A               	incf	_DimmerLights^(0+128),w
  7989  1F42  0086               	movwf	6
  7990  1F43  3001               	movlw	1	; select bank2/3
  7991  1F44  0087               	movwf	7
  7992  1F45  0020               	movlb	0	; select bank0
  7993  1F46  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  7994  1F47  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  7995  1F48  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  7996  1F49  0801               	movf	1,w
  7997  1F4A  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  7998  1F4B  39BF               	andlw	-65
  7999  1F4C  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8000  1F4D  0081               	movwf	1
  8001  1F4E  0008               	return
  8002  1F4F                     __end_of_setDimmerLights_DimmingRun:	
  8003                           
  8004                           	psect	text32
  8005  1D15                     __ptext32:	
  8006 ;; *************** function _getRF_KeyStatus *****************
  8007 ;; Defined at:
  8008 ;;		line 166 in file "../src/RF_Control_B1.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;		None
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;  key             1    1[BANK0 ] unsigned char 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  1    wreg      unsigned char 
  8015 ;; Registers used:
  8016 ;;		wreg, status,2
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;Total ram usage:        3 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    5
  8029 ;; This function calls:
  8030 ;;		Nothing
  8031 ;; This function is called by:
  8032 ;;		_setRF_Main
  8033 ;; This function uses a non-reentrant model
  8034 ;;
  8035                           
  8036                           
  8037                           ;psect for function _getRF_KeyStatus
  8038  1D15                     _getRF_KeyStatus:	
  8039                           
  8040                           ;RF_Control_B1.c: 167: char key = 0;
  8041                           
  8042                           ;incstack = 0
  8043                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8044  1D15  0020               	movlb	0	; select bank0
  8045  1D16  01A1               	clrf	getRF_KeyStatus@key
  8046                           
  8047                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8048  1D17  01A2               	clrf	_getRF_KeyStatus$5346
  8049  1D18  0AA2               	incf	_getRF_KeyStatus$5346,f
  8050  1D19  1F0C               	btfss	12,6	;volatile
  8051  1D1A  1A0C               	btfsc	12,4	;volatile
  8052  1D1B  2D20               	goto	l6926
  8053  1D1C  1C0C               	btfss	12,0	;volatile
  8054  1D1D  1B8C               	btfsc	12,7	;volatile
  8055  1D1E  2D20               	goto	l6926
  8056  1D1F  01A2               	clrf	_getRF_KeyStatus$5346
  8057  1D20                     l6926:	
  8058  1D20  0822               	movf	_getRF_KeyStatus$5346,w
  8059  1D21  00A0               	movwf	??_getRF_KeyStatus
  8060  1D22  0820               	movf	??_getRF_KeyStatus,w
  8061  1D23  00A1               	movwf	getRF_KeyStatus@key
  8062                           
  8063                           ;RF_Control_B1.c: 179: return key;
  8064  1D24  0821               	movf	getRF_KeyStatus@key,w
  8065  1D25  0008               	return
  8066  1D26                     __end_of_getRF_KeyStatus:	
  8067                           
  8068                           	psect	text33
  8069  1D04                     __ptext33:	
  8070 ;; *************** function _getBuz_GO *****************
  8071 ;; Defined at:
  8072 ;;		line 82 in file "../src/Buzzer_B1.c"
  8073 ;; Parameters:    Size  Location     Type
  8074 ;;		None
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  i               2    4[BANK0 ] int 
  8077 ;; Return value:  Size  Location     Type
  8078 ;;                  2    0[BANK0 ] int 
  8079 ;; Registers used:
  8080 ;;		wreg, status,2, status,0
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8086 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8089 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;Total ram usage:        6 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; Hardware stack levels required when called:    5
  8093 ;; This function calls:
  8094 ;;		Nothing
  8095 ;; This function is called by:
  8096 ;;		_setRF_Main
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _getBuz_GO
  8102  1D04                     _getBuz_GO:	
  8103                           
  8104                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8105                           
  8106                           ;incstack = 0
  8107                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8108  1D04  0022               	movlb	2	; select bank2
  8109  1D05  0C20               	rrf	_Buz1^(0+256),w
  8110  1D06  3901               	andlw	1
  8111  1D07  0020               	movlb	0	; select bank0
  8112  1D08  00A2               	movwf	??_getBuz_GO
  8113  1D09  01A3               	clrf	??_getBuz_GO+1
  8114  1D0A  0822               	movf	??_getBuz_GO,w
  8115  1D0B  00A4               	movwf	getBuz_GO@i
  8116  1D0C  0823               	movf	??_getBuz_GO+1,w
  8117  1D0D  00A5               	movwf	getBuz_GO@i+1
  8118                           
  8119                           ;Buzzer_B1.c: 84: return i;
  8120  1D0E  0825               	movf	getBuz_GO@i+1,w
  8121  1D0F  01A1               	clrf	?_getBuz_GO+1
  8122  1D10  07A1               	addwf	?_getBuz_GO+1,f
  8123  1D11  0824               	movf	getBuz_GO@i,w
  8124  1D12  01A0               	clrf	?_getBuz_GO
  8125  1D13  07A0               	addwf	?_getBuz_GO,f
  8126  1D14  0008               	return
  8127  1D15                     __end_of_getBuz_GO:	
  8128                           
  8129                           	psect	text34
  8130  1CB2                     __ptext34:	
  8131 ;; *************** function _RF_RxDisable *****************
  8132 ;; Defined at:
  8133 ;;		line 154 in file "../src/RF_Control_B1.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;		None
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;		None
  8138 ;; Return value:  Size  Location     Type
  8139 ;;		None               void
  8140 ;; Registers used:
  8141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;Total ram usage:        0 bytes
  8152 ;; Hardware stack levels used:    1
  8153 ;; Hardware stack levels required when called:    7
  8154 ;; This function calls:
  8155 ;;		_CC2500_WriteCommand
  8156 ;; This function is called by:
  8157 ;;		_setRF_Main
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           
  8162                           ;psect for function _RF_RxDisable
  8163  1CB2                     _RF_RxDisable:	
  8164                           
  8165                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8166                           
  8167                           ;incstack = 0
  8168                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8169  1CB2  0021               	movlb	1	; select bank1
  8170  1CB3  18A0               	btfsc	_RF1^(0+128),1
  8171  1CB4  2CB7               	goto	l2145
  8172  1CB5  1DA0               	btfss	_RF1^(0+128),3
  8173  1CB6  0008               	return
  8174  1CB7                     l2145:	
  8175                           
  8176                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8177  1CB7  11A0               	bcf	_RF1^(0+128),3
  8178                           
  8179                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8180  1CB8  10A0               	bcf	_RF1^(0+128),1
  8181                           
  8182                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8183  1CB9  3036               	movlw	54
  8184  1CBA  319F  271A  319C   	fcall	_CC2500_WriteCommand
  8185                           
  8186                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8187  1CBD  303A               	movlw	58
  8188  1CBE  319F  271A         	fcall	_CC2500_WriteCommand
  8189  1CC0  0008               	return
  8190  1CC1                     __end_of_RF_RxDisable:	
  8191                           
  8192                           	psect	text35
  8193  087D                     __ptext35:	
  8194 ;; *************** function _CC2500_TxData *****************
  8195 ;; Defined at:
  8196 ;;		line 32 in file "../src/CC2500_B1.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;		None               void
  8203 ;; Registers used:
  8204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;Total ram usage:        2 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    7
  8217 ;; This function calls:
  8218 ;;		_CC2500_WriteByte
  8219 ;;		_CC2500_WriteCommand
  8220 ;;		_RF_Timeout_Counter
  8221 ;;		_setRF_TimeoutCleared
  8222 ;; This function is called by:
  8223 ;;		_setRF_Main
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           
  8228                           ;psect for function _CC2500_TxData
  8229  087D                     _CC2500_TxData:	
  8230                           
  8231                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8232                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8233                           
  8234                           ;incstack = 0
  8235                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8236  087D  3036               	movlw	54
  8237  087E  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8238                           
  8239                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8240  0881  303B               	movlw	59
  8241  0882  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8242                           
  8243                           ;CC2500_B1.c: 38: RC0 = 0;
  8244  0885  0020               	movlb	0	; select bank0
  8245  0886  100E               	bcf	14,0	;volatile
  8246                           
  8247                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8248  0887  307F               	movlw	127
  8249  0888  00A4               	movwf	??_CC2500_TxData
  8250  0889  0824               	movf	??_CC2500_TxData,w
  8251  088A  0021               	movlb	1	; select bank1
  8252  088B  00CD               	movwf	_SPI0Buffer^(0+128)
  8253                           
  8254                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8255  088C  2890               	goto	l9196
  8256  088D                     l9194:	
  8257                           
  8258                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8259  088D  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8260  0890                     l9196:	
  8261  0890  0020               	movlb	0	; select bank0
  8262  0891  1E8E               	btfss	14,5	;volatile
  8263  0892  2896               	goto	l9200
  8264  0893  0021               	movlb	1	; select bank1
  8265  0894  1F21               	btfss	(_RF1^(0+128)+1),6
  8266  0895  288D               	goto	l9194
  8267  0896                     l9200:	
  8268                           
  8269                           ;CC2500_B1.c: 42: };
  8270                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8271  0896  319B  2363  3188   	fcall	_setRF_TimeoutCleared
  8272                           
  8273                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8274  0899  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8275                           
  8276                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8277  089C  0021               	movlb	1	; select bank1
  8278  089D  084F               	movf	_Tx_Length^(0+128),w
  8279  089E  0020               	movlb	0	; select bank0
  8280  089F  00A4               	movwf	??_CC2500_TxData
  8281  08A0  0824               	movf	??_CC2500_TxData,w
  8282  08A1  0021               	movlb	1	; select bank1
  8283  08A2  00CD               	movwf	_SPI0Buffer^(0+128)
  8284                           
  8285                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8286  08A3  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8287                           
  8288                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8289  08A6  0020               	movlb	0	; select bank0
  8290  08A7  01A5               	clrf	CC2500_TxData@loop_e
  8291  08A8                     l9214:	
  8292  08A8  0021               	movlb	1	; select bank1
  8293  08A9  084F               	movf	_Tx_Length^(0+128),w
  8294  08AA  0020               	movlb	0	; select bank0
  8295  08AB  0225               	subwf	CC2500_TxData@loop_e,w
  8296  08AC  1803               	btfsc	3,0
  8297  08AD  28C1               	goto	l235
  8298                           
  8299                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8300  08AE  0825               	movf	CC2500_TxData@loop_e,w
  8301  08AF  3EA0               	addlw	_RF_Data& (0+255)
  8302  08B0  0086               	movwf	6
  8303  08B1  3001               	movlw	1	; select bank3/4
  8304  08B2  0087               	movwf	7
  8305  08B3  0801               	movf	1,w
  8306  08B4  00A4               	movwf	??_CC2500_TxData
  8307  08B5  0824               	movf	??_CC2500_TxData,w
  8308  08B6  0021               	movlb	1	; select bank1
  8309  08B7  00CD               	movwf	_SPI0Buffer^(0+128)
  8310                           
  8311                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8312  08B8  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8313  08BB  3001               	movlw	1
  8314  08BC  0020               	movlb	0	; select bank0
  8315  08BD  00A4               	movwf	??_CC2500_TxData
  8316  08BE  0824               	movf	??_CC2500_TxData,w
  8317  08BF  07A5               	addwf	CC2500_TxData@loop_e,f
  8318  08C0  28A8               	goto	l9214
  8319  08C1                     l235:	
  8320                           
  8321                           ;CC2500_B1.c: 51: }
  8322                           ;CC2500_B1.c: 52: RC0 = 1;
  8323  08C1  140E               	bsf	14,0	;volatile
  8324                           
  8325                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8326  08C2  3035               	movlw	53
  8327  08C3  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8328                           
  8329                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8330  08C6  28CA               	goto	l9220
  8331  08C7                     l9218:	
  8332                           
  8333                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8334  08C7  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8335  08CA                     l9220:	
  8336  08CA  0020               	movlb	0	; select bank0
  8337  08CB  188E               	btfsc	14,1	;volatile
  8338  08CC  28D0               	goto	l9224
  8339  08CD  0021               	movlb	1	; select bank1
  8340  08CE  1F21               	btfss	(_RF1^(0+128)+1),6
  8341  08CF  28C7               	goto	l9218
  8342  08D0                     l9224:	
  8343                           
  8344                           ;CC2500_B1.c: 56: };
  8345                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8346  08D0  319B  2363  3188   	fcall	_setRF_TimeoutCleared
  8347                           
  8348                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8349  08D3  28D7               	goto	l9228
  8350  08D4                     l9226:	
  8351                           
  8352                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8353  08D4  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8354  08D7                     l9228:	
  8355  08D7  0020               	movlb	0	; select bank0
  8356  08D8  1C8E               	btfss	14,1	;volatile
  8357  08D9  28DD               	goto	l9232
  8358  08DA  0021               	movlb	1	; select bank1
  8359  08DB  1F21               	btfss	(_RF1^(0+128)+1),6
  8360  08DC  28D4               	goto	l9226
  8361  08DD                     l9232:	
  8362                           
  8363                           ;CC2500_B1.c: 61: };
  8364                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8365  08DD  319B  2363  3188   	fcall	_setRF_TimeoutCleared
  8366                           
  8367                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8368  08E0  3036               	movlw	54
  8369  08E1  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8370                           
  8371                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8372  08E4  303B               	movlw	59
  8373  08E5  319F  271A         	fcall	_CC2500_WriteCommand
  8374                           
  8375                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8376  08E7  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8377  08E8  0008               	return
  8378  08E9                     __end_of_CC2500_TxData:	
  8379                           
  8380                           	psect	text36
  8381  0812                     __ptext36:	
  8382 ;; *************** function _CC2500_RxData *****************
  8383 ;; Defined at:
  8384 ;;		line 73 in file "../src/CC2500_B1.c"
  8385 ;; Parameters:    Size  Location     Type
  8386 ;;		None
  8387 ;; Auto vars:     Size  Location     Type
  8388 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8389 ;; Return value:  Size  Location     Type
  8390 ;;		None               void
  8391 ;; Registers used:
  8392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8393 ;; Tracked objects:
  8394 ;;		On entry : 0/0
  8395 ;;		On exit  : 0/0
  8396 ;;		Unchanged: 0/0
  8397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8402 ;;Total ram usage:        2 bytes
  8403 ;; Hardware stack levels used:    1
  8404 ;; Hardware stack levels required when called:    7
  8405 ;; This function calls:
  8406 ;;		_CC2500_ReadByte
  8407 ;;		_CC2500_ReadStatus
  8408 ;;		_CC2500_WriteByte
  8409 ;;		_CC2500_WriteCommand
  8410 ;;		_RF_Timeout_Counter
  8411 ;;		_setRF_TimeoutCleared
  8412 ;; This function is called by:
  8413 ;;		_setRF_Main
  8414 ;; This function uses a non-reentrant model
  8415 ;;
  8416                           
  8417                           
  8418                           ;psect for function _CC2500_RxData
  8419  0812                     _CC2500_RxData:	
  8420                           
  8421                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8422                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8423                           
  8424                           ;incstack = 0
  8425                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8426  0812  0020               	movlb	0	; select bank0
  8427  0813  188E               	btfsc	14,1	;volatile
  8428  0814  0008               	return
  8429                           
  8430                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8431  0815  303B               	movlw	59
  8432  0816  3190  20AC  3188   	fcall	_CC2500_ReadStatus
  8433                           
  8434                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8435  0819  0021               	movlb	1	; select bank1
  8436  081A  0850               	movf	_s_data^(0+128),w
  8437  081B  1903               	btfsc	3,2
  8438  081C  0008               	return
  8439                           
  8440                           ;CC2500_B1.c: 90: RC0 = 0;
  8441  081D  0020               	movlb	0	; select bank0
  8442  081E  100E               	bcf	14,0	;volatile
  8443                           
  8444                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8445  081F  30FF               	movlw	255
  8446  0820  00A4               	movwf	??_CC2500_RxData
  8447  0821  0824               	movf	??_CC2500_RxData,w
  8448  0822  0021               	movlb	1	; select bank1
  8449  0823  00CD               	movwf	_SPI0Buffer^(0+128)
  8450                           
  8451                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8452  0824  2828               	goto	l9252
  8453  0825                     l9250:	
  8454                           
  8455                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8456  0825  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8457  0828                     l9252:	
  8458  0828  0020               	movlb	0	; select bank0
  8459  0829  1E8E               	btfss	14,5	;volatile
  8460  082A  282E               	goto	l9256
  8461  082B  0021               	movlb	1	; select bank1
  8462  082C  1F21               	btfss	(_RF1^(0+128)+1),6
  8463  082D  2825               	goto	l9250
  8464  082E                     l9256:	
  8465                           
  8466                           ;CC2500_B1.c: 95: };
  8467                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8468  082E  319B  2363  3188   	fcall	_setRF_TimeoutCleared
  8469                           
  8470                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8471  0831  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8472                           
  8473                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8474  0834  319F  2787  3188   	fcall	_CC2500_ReadByte
  8475                           
  8476                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8477  0837  0021               	movlb	1	; select bank1
  8478  0838  084D               	movf	_SPI0Buffer^(0+128),w
  8479  0839  0020               	movlb	0	; select bank0
  8480  083A  00A4               	movwf	??_CC2500_RxData
  8481  083B  0824               	movf	??_CC2500_RxData,w
  8482  083C  0021               	movlb	1	; select bank1
  8483  083D  00CC               	movwf	_Rx_Length^(0+128)
  8484                           
  8485                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8486  083E  0020               	movlb	0	; select bank0
  8487  083F  01A5               	clrf	CC2500_RxData@loop_f
  8488  0840                     l9272:	
  8489  0840  0021               	movlb	1	; select bank1
  8490  0841  084C               	movf	_Rx_Length^(0+128),w
  8491  0842  0020               	movlb	0	; select bank0
  8492  0843  0225               	subwf	CC2500_RxData@loop_f,w
  8493  0844  1803               	btfsc	3,0
  8494  0845  2859               	goto	l9274
  8495                           
  8496                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8497  0846  319F  2787  3188   	fcall	_CC2500_ReadByte
  8498                           
  8499                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8500  0849  0021               	movlb	1	; select bank1
  8501  084A  084D               	movf	_SPI0Buffer^(0+128),w
  8502  084B  0020               	movlb	0	; select bank0
  8503  084C  00A4               	movwf	??_CC2500_RxData
  8504  084D  0825               	movf	CC2500_RxData@loop_f,w
  8505  084E  3EA0               	addlw	_RF_Data& (0+255)
  8506  084F  0086               	movwf	6
  8507  0850  3001               	movlw	1	; select bank3/4
  8508  0851  0087               	movwf	7
  8509  0852  0824               	movf	??_CC2500_RxData,w
  8510  0853  0081               	movwf	1
  8511  0854  3001               	movlw	1
  8512  0855  00A4               	movwf	??_CC2500_RxData
  8513  0856  0824               	movf	??_CC2500_RxData,w
  8514  0857  07A5               	addwf	CC2500_RxData@loop_f,f
  8515  0858  2840               	goto	l9272
  8516  0859                     l9274:	
  8517                           
  8518                           ;CC2500_B1.c: 104: }
  8519                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8520  0859  319F  2787  3188   	fcall	_CC2500_ReadByte
  8521                           
  8522                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8523  085C  0021               	movlb	1	; select bank1
  8524  085D  084D               	movf	_SPI0Buffer^(0+128),w
  8525  085E  0020               	movlb	0	; select bank0
  8526  085F  00A4               	movwf	??_CC2500_RxData
  8527  0860  0824               	movf	??_CC2500_RxData,w
  8528  0861  0022               	movlb	2	; select bank2
  8529  0862  00BA               	movwf	_RSSI^(0+256)
  8530                           
  8531                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8532  0863  319F  2787  3188   	fcall	_CC2500_ReadByte
  8533                           
  8534                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8535  0866  0021               	movlb	1	; select bank1
  8536  0867  084D               	movf	_SPI0Buffer^(0+128),w
  8537  0868  0020               	movlb	0	; select bank0
  8538  0869  00A4               	movwf	??_CC2500_RxData
  8539  086A  0824               	movf	??_CC2500_RxData,w
  8540  086B  0021               	movlb	1	; select bank1
  8541  086C  00C7               	movwf	_CRC^(0+128)
  8542                           
  8543                           ;CC2500_B1.c: 109: RC0 = 1;
  8544  086D  0020               	movlb	0	; select bank0
  8545  086E  140E               	bsf	14,0	;volatile
  8546                           
  8547                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8548  086F  0021               	movlb	1	; select bank1
  8549  0870  1BC7               	btfsc	_CRC^(0+128),7
  8550                           
  8551                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8552  0871  1464               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8553                           
  8554                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8555  0872  11A0               	bcf	_RF1^(0+128),3
  8556                           
  8557                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8558  0873  14A0               	bsf	_RF1^(0+128),1
  8559                           
  8560                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8561  0874  3036               	movlw	54
  8562  0875  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8563                           
  8564                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8565  0878  303A               	movlw	58
  8566  0879  319F  271A         	fcall	_CC2500_WriteCommand
  8567  087B  0021               	movlb	1	; select bank1
  8568  087C  0008               	return
  8569  087D                     __end_of_CC2500_RxData:	
  8570                           
  8571                           	psect	text37
  8572  10AC                     __ptext37:	
  8573 ;; *************** function _CC2500_ReadStatus *****************
  8574 ;; Defined at:
  8575 ;;		line 308 in file "../src/CC2500_B1.c"
  8576 ;; Parameters:    Size  Location     Type
  8577 ;;  status_addr     1    wreg     unsigned char 
  8578 ;; Auto vars:     Size  Location     Type
  8579 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8580 ;; Return value:  Size  Location     Type
  8581 ;;		None               void
  8582 ;; Registers used:
  8583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8584 ;; Tracked objects:
  8585 ;;		On entry : 0/0
  8586 ;;		On exit  : 0/0
  8587 ;;		Unchanged: 0/0
  8588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8592 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;Total ram usage:        2 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; Hardware stack levels required when called:    6
  8596 ;; This function calls:
  8597 ;;		_CC2500_ReadByte
  8598 ;;		_CC2500_WriteByte
  8599 ;;		_RF_Timeout_Counter
  8600 ;;		_setRF_TimeoutCleared
  8601 ;; This function is called by:
  8602 ;;		_CC2500_RxData
  8603 ;; This function uses a non-reentrant model
  8604 ;;
  8605                           
  8606                           
  8607                           ;psect for function _CC2500_ReadStatus
  8608  10AC                     _CC2500_ReadStatus:	
  8609                           
  8610                           ;incstack = 0
  8611                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8612                           ;CC2500_ReadStatus@status_addr stored from wreg
  8613  10AC  0020               	movlb	0	; select bank0
  8614  10AD  00A3               	movwf	CC2500_ReadStatus@status_addr
  8615                           
  8616                           ;CC2500_B1.c: 309: RC0 = 0;
  8617  10AE  100E               	bcf	14,0	;volatile
  8618                           
  8619                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8620  10AF  0823               	movf	CC2500_ReadStatus@status_addr,w
  8621  10B0  3EC0               	addlw	192
  8622  10B1  00A2               	movwf	??_CC2500_ReadStatus
  8623  10B2  0822               	movf	??_CC2500_ReadStatus,w
  8624  10B3  0021               	movlb	1	; select bank1
  8625  10B4  00CD               	movwf	_SPI0Buffer^(0+128)
  8626                           
  8627                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8628  10B5  28B9               	goto	l8944
  8629  10B6                     l8942:	
  8630                           
  8631                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8632  10B6  319E  2604  3190   	fcall	_RF_Timeout_Counter
  8633  10B9                     l8944:	
  8634  10B9  0020               	movlb	0	; select bank0
  8635  10BA  1E8E               	btfss	14,5	;volatile
  8636  10BB  28BF               	goto	l8948
  8637  10BC  0021               	movlb	1	; select bank1
  8638  10BD  1F21               	btfss	(_RF1^(0+128)+1),6
  8639  10BE  28B6               	goto	l8942
  8640  10BF                     l8948:	
  8641                           
  8642                           ;CC2500_B1.c: 314: };
  8643                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8644  10BF  319B  2363  3190   	fcall	_setRF_TimeoutCleared
  8645                           
  8646                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8647  10C2  319E  26CD  3190   	fcall	_CC2500_WriteByte
  8648                           
  8649                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8650  10C5  319F  2787         	fcall	_CC2500_ReadByte
  8651                           
  8652                           ;CC2500_B1.c: 319: RC0 = 1;
  8653  10C7  0020               	movlb	0	; select bank0
  8654  10C8  140E               	bsf	14,0	;volatile
  8655                           
  8656                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8657  10C9  0021               	movlb	1	; select bank1
  8658  10CA  084D               	movf	_SPI0Buffer^(0+128),w
  8659  10CB  0020               	movlb	0	; select bank0
  8660  10CC  00A2               	movwf	??_CC2500_ReadStatus
  8661  10CD  0822               	movf	??_CC2500_ReadStatus,w
  8662  10CE  0021               	movlb	1	; select bank1
  8663  10CF  00D0               	movwf	_s_data^(0+128)
  8664  10D0  0008               	return
  8665  10D1                     __end_of_CC2500_ReadStatus:	
  8666                           
  8667                           	psect	text38
  8668  1F87                     __ptext38:	
  8669 ;; *************** function _CC2500_ReadByte *****************
  8670 ;; Defined at:
  8671 ;;		line 242 in file "../src/CC2500_B1.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;		None
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8676 ;; Return value:  Size  Location     Type
  8677 ;;		None               void
  8678 ;; Registers used:
  8679 ;;		wreg, status,2, status,0
  8680 ;; Tracked objects:
  8681 ;;		On entry : 0/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;Total ram usage:        2 bytes
  8690 ;; Hardware stack levels used:    1
  8691 ;; Hardware stack levels required when called:    5
  8692 ;; This function calls:
  8693 ;;		Nothing
  8694 ;; This function is called by:
  8695 ;;		_CC2500_RxData
  8696 ;;		_CC2500_ReadStatus
  8697 ;;		_CC2500_ReadREG
  8698 ;; This function uses a non-reentrant model
  8699 ;;
  8700                           
  8701                           
  8702                           ;psect for function _CC2500_ReadByte
  8703  1F87                     _CC2500_ReadByte:	
  8704                           
  8705                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8706                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8707                           
  8708                           ;incstack = 0
  8709                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8710  1F87  0020               	movlb	0	; select bank0
  8711  1F88  01A1               	clrf	CC2500_ReadByte@loop_b
  8712  1F89                     L2:	
  8713  1F89  3008               	movlw	8
  8714  1F8A  0221               	subwf	CC2500_ReadByte@loop_b,w
  8715  1F8B  1803               	btfsc	3,0
  8716  1F8C  0008               	return
  8717                           
  8718                           ;CC2500_B1.c: 245: RC3 = 1;
  8719  1F8D  158E               	bsf	14,3	;volatile
  8720                           
  8721                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8722  1F8E  1003               	clrc
  8723  1F8F  0021               	movlb	1	; select bank1
  8724  1F90  0DCD               	rlf	_SPI0Buffer^(0+128),f
  8725                           
  8726                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8727  1F91  0020               	movlb	0	; select bank0
  8728  1F92  1E8E               	btfss	14,5	;volatile
  8729  1F93  2F97               	goto	l8850
  8730                           
  8731                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8732  1F94  0021               	movlb	1	; select bank1
  8733  1F95  144D               	bsf	_SPI0Buffer^(0+128),0
  8734  1F96  2F9D               	goto	l8852
  8735  1F97                     l8850:	
  8736                           
  8737                           ;CC2500_B1.c: 249: else
  8738                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8739  1F97  30FE               	movlw	254
  8740  1F98  0020               	movlb	0	; select bank0
  8741  1F99  00A0               	movwf	??_CC2500_ReadByte
  8742  1F9A  0820               	movf	??_CC2500_ReadByte,w
  8743  1F9B  0021               	movlb	1	; select bank1
  8744  1F9C  05CD               	andwf	_SPI0Buffer^(0+128),f
  8745  1F9D                     l8852:	
  8746                           
  8747                           ;CC2500_B1.c: 251: RC3 = 0;
  8748  1F9D  0020               	movlb	0	; select bank0
  8749  1F9E  118E               	bcf	14,3	;volatile
  8750  1F9F  3001               	movlw	1
  8751  1FA0  00A0               	movwf	??_CC2500_ReadByte
  8752  1FA1  0820               	movf	??_CC2500_ReadByte,w
  8753  1FA2  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8754  1FA3  2F89               	goto	L2
  8755  1FA4                     __end_of_CC2500_ReadByte:	
  8756                           
  8757                           	psect	text39
  8758  1E19                     __ptext39:	
  8759 ;; *************** function _CC2500_PowerOnInitial *****************
  8760 ;; Defined at:
  8761 ;;		line 126 in file "../src/CC2500_B1.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;		None
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;		None
  8766 ;; Return value:  Size  Location     Type
  8767 ;;		None               void
  8768 ;; Registers used:
  8769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;Total ram usage:        0 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    8
  8782 ;; This function calls:
  8783 ;;		_CC2500_ClearRXFIFO
  8784 ;;		_CC2500_ClearTXFIFO
  8785 ;;		_CC2500_FrequencyCabr
  8786 ;;		_CC2500_InitPATable
  8787 ;;		_CC2500_InitSetREG
  8788 ;;		_CC2500_PowerRST
  8789 ;;		_CC2500_SIDLEMode
  8790 ;; This function is called by:
  8791 ;;		_main
  8792 ;;		_setRF_Main
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _CC2500_PowerOnInitial
  8798  1E19                     _CC2500_PowerOnInitial:	
  8799                           
  8800                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8801                           
  8802                           ;incstack = 0
  8803                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8804  1E19  3194  2463  319E   	fcall	_CC2500_PowerRST
  8805                           
  8806                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8807  1E1C  3191  211F  319E   	fcall	_CC2500_InitSetREG
  8808                           
  8809                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8810  1E1F  319F  27E1  319E   	fcall	_CC2500_InitPATable
  8811                           
  8812                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8813  1E22  319B  236B  319E   	fcall	_CC2500_ClearTXFIFO
  8814                           
  8815                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8816  1E25  319B  2367  319E   	fcall	_CC2500_ClearRXFIFO
  8817                           
  8818                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8819  1E28  319C  247E  319E   	fcall	_CC2500_FrequencyCabr
  8820                           
  8821                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8822  1E2B  319B  236F         	fcall	_CC2500_SIDLEMode
  8823  1E2D  0008               	return
  8824  1E2E                     __end_of_CC2500_PowerOnInitial:	
  8825                           
  8826                           	psect	text40
  8827  1B6F                     __ptext40:	
  8828 ;; *************** function _CC2500_SIDLEMode *****************
  8829 ;; Defined at:
  8830 ;;		line 216 in file "../src/CC2500_B1.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;		None
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;		None
  8835 ;; Return value:  Size  Location     Type
  8836 ;;		None               void
  8837 ;; Registers used:
  8838 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;Total ram usage:        0 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    7
  8851 ;; This function calls:
  8852 ;;		_CC2500_WriteCommand
  8853 ;; This function is called by:
  8854 ;;		_CC2500_PowerOnInitial
  8855 ;; This function uses a non-reentrant model
  8856 ;;
  8857                           
  8858                           
  8859                           ;psect for function _CC2500_SIDLEMode
  8860  1B6F                     _CC2500_SIDLEMode:	
  8861                           
  8862                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8863                           
  8864                           ;incstack = 0
  8865                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8866  1B6F  3036               	movlw	54
  8867  1B70  319F  271A         	fcall	_CC2500_WriteCommand
  8868  1B72  0008               	return
  8869  1B73                     __end_of_CC2500_SIDLEMode:	
  8870                           
  8871                           	psect	text41
  8872  1463                     __ptext41:	
  8873 ;; *************** function _CC2500_PowerRST *****************
  8874 ;; Defined at:
  8875 ;;		line 139 in file "../src/CC2500_B1.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;		None
  8880 ;; Return value:  Size  Location     Type
  8881 ;;		None               void
  8882 ;; Registers used:
  8883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;Total ram usage:        1 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    6
  8896 ;; This function calls:
  8897 ;;		_CC2500_WriteByte
  8898 ;;		_DelayTime_1us
  8899 ;;		_RF_Timeout_Counter
  8900 ;;		_setRF_TimeoutCleared
  8901 ;; This function is called by:
  8902 ;;		_CC2500_PowerOnInitial
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           
  8907                           ;psect for function _CC2500_PowerRST
  8908  1463                     _CC2500_PowerRST:	
  8909                           
  8910                           ;CC2500_B1.c: 140: RC3 = 0;
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8914  1463  0020               	movlb	0	; select bank0
  8915  1464  118E               	bcf	14,3	;volatile
  8916                           
  8917                           ;CC2500_B1.c: 141: RC4 = 0;
  8918  1465  120E               	bcf	14,4	;volatile
  8919                           
  8920                           ;CC2500_B1.c: 142: RC0 = 1;
  8921  1466  140E               	bsf	14,0	;volatile
  8922                           
  8923                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8924  1467  300A               	movlw	10
  8925  1468  00A0               	movwf	DelayTime_1us@count
  8926  1469  3000               	movlw	0
  8927  146A  00A1               	movwf	DelayTime_1us@count+1
  8928  146B  3190  20D1  3194   	fcall	_DelayTime_1us
  8929                           
  8930                           ;CC2500_B1.c: 144: RC0 = 0;
  8931  146E  0020               	movlb	0	; select bank0
  8932  146F  100E               	bcf	14,0	;volatile
  8933                           
  8934                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8935  1470  300A               	movlw	10
  8936  1471  00A0               	movwf	DelayTime_1us@count
  8937  1472  3000               	movlw	0
  8938  1473  00A1               	movwf	DelayTime_1us@count+1
  8939  1474  3190  20D1  3194   	fcall	_DelayTime_1us
  8940                           
  8941                           ;CC2500_B1.c: 146: RC0 = 1;
  8942  1477  0020               	movlb	0	; select bank0
  8943  1478  140E               	bsf	14,0	;volatile
  8944                           
  8945                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8946  1479  3028               	movlw	40
  8947  147A  00A0               	movwf	DelayTime_1us@count
  8948  147B  3000               	movlw	0
  8949  147C  00A1               	movwf	DelayTime_1us@count+1
  8950  147D  3190  20D1  3194   	fcall	_DelayTime_1us
  8951                           
  8952                           ;CC2500_B1.c: 148: RC0 = 0;
  8953  1480  0020               	movlb	0	; select bank0
  8954  1481  100E               	bcf	14,0	;volatile
  8955                           
  8956                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8957  1482  3030               	movlw	48
  8958  1483  00A6               	movwf	??_CC2500_PowerRST
  8959  1484  0826               	movf	??_CC2500_PowerRST,w
  8960  1485  0021               	movlb	1	; select bank1
  8961  1486  00CD               	movwf	_SPI0Buffer^(0+128)
  8962                           
  8963                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8964  1487  2C8B               	goto	l8972
  8965  1488                     l8970:	
  8966                           
  8967                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8968  1488  319E  2604  3194   	fcall	_RF_Timeout_Counter
  8969  148B                     l8972:	
  8970  148B  0020               	movlb	0	; select bank0
  8971  148C  1E8E               	btfss	14,5	;volatile
  8972  148D  2C91               	goto	l8976
  8973  148E  0021               	movlb	1	; select bank1
  8974  148F  1F21               	btfss	(_RF1^(0+128)+1),6
  8975  1490  2C88               	goto	l8970
  8976  1491                     l8976:	
  8977                           
  8978                           ;CC2500_B1.c: 152: };
  8979                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8980  1491  319B  2363  3194   	fcall	_setRF_TimeoutCleared
  8981                           
  8982                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8983  1494  319E  26CD  3194   	fcall	_CC2500_WriteByte
  8984                           
  8985                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  8986  1497  2C9B               	goto	l8982
  8987  1498                     l8980:	
  8988                           
  8989                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8990  1498  319E  2604  3194   	fcall	_RF_Timeout_Counter
  8991  149B                     l8982:	
  8992  149B  0020               	movlb	0	; select bank0
  8993  149C  1E8E               	btfss	14,5	;volatile
  8994  149D  2CA1               	goto	l8986
  8995  149E  0021               	movlb	1	; select bank1
  8996  149F  1F21               	btfss	(_RF1^(0+128)+1),6
  8997  14A0  2C98               	goto	l8980
  8998  14A1                     l8986:	
  8999                           
  9000                           ;CC2500_B1.c: 157: };
  9001                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9002  14A1  319B  2363         	fcall	_setRF_TimeoutCleared
  9003                           
  9004                           ;CC2500_B1.c: 159: RC4 = 0;
  9005  14A3  0020               	movlb	0	; select bank0
  9006  14A4  120E               	bcf	14,4	;volatile
  9007                           
  9008                           ;CC2500_B1.c: 160: RC0 = 1;
  9009  14A5  140E               	bsf	14,0	;volatile
  9010  14A6  0008               	return
  9011  14A7                     __end_of_CC2500_PowerRST:	
  9012                           
  9013                           	psect	text42
  9014  111F                     __ptext42:	
  9015 ;; *************** function _CC2500_InitSetREG *****************
  9016 ;; Defined at:
  9017 ;;		line 166 in file "../src/CC2500_B1.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;		None
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9022 ;;  temp2           1    7[BANK0 ] unsigned char 
  9023 ;;  temp1           1    6[BANK0 ] unsigned char 
  9024 ;; Return value:  Size  Location     Type
  9025 ;;		None               void
  9026 ;; Registers used:
  9027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9028 ;; Tracked objects:
  9029 ;;		On entry : 0/0
  9030 ;;		On exit  : 0/0
  9031 ;;		Unchanged: 0/0
  9032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;Total ram usage:        4 bytes
  9038 ;; Hardware stack levels used:    1
  9039 ;; Hardware stack levels required when called:    7
  9040 ;; This function calls:
  9041 ;;		_CC2500_WriteREG
  9042 ;; This function is called by:
  9043 ;;		_CC2500_PowerOnInitial
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           
  9048                           ;psect for function _CC2500_InitSetREG
  9049  111F                     _CC2500_InitSetREG:	
  9050                           
  9051                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9052                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9053                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9054                           
  9055                           ;incstack = 0
  9056                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9057  111F  0020               	movlb	0	; select bank0
  9058  1120  01A8               	clrf	CC2500_InitSetREG@loop_c
  9059  1121                     L3:	
  9060  1121  302F               	movlw	47
  9061  1122  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9062  1123  1803               	btfsc	3,0
  9063  1124  0008               	return
  9064                           
  9065                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9066  1125  0828               	movf	CC2500_InitSetREG@loop_c,w
  9067  1126  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9068  1127  0084               	movwf	4
  9069  1128  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9070  1129  1803               	skipnc
  9071  112A  3E01               	addlw	1
  9072  112B  0085               	movwf	5
  9073  112C  0800               	movf	0,w	;code access
  9074  112D  00A5               	movwf	??_CC2500_InitSetREG
  9075  112E  0825               	movf	??_CC2500_InitSetREG,w
  9076  112F  00A6               	movwf	CC2500_InitSetREG@temp1
  9077                           
  9078                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9079  1130  0828               	movf	CC2500_InitSetREG@loop_c,w
  9080  1131  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9081  1132  0084               	movwf	4
  9082  1133  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9083  1134  1803               	skipnc
  9084  1135  3E01               	addlw	1
  9085  1136  0085               	movwf	5
  9086  1137  0800               	movf	0,w	;code access
  9087  1138  00A5               	movwf	??_CC2500_InitSetREG
  9088  1139  0825               	movf	??_CC2500_InitSetREG,w
  9089  113A  00A7               	movwf	CC2500_InitSetREG@temp2
  9090                           
  9091                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9092  113B  0827               	movf	CC2500_InitSetREG@temp2,w
  9093  113C  00A5               	movwf	??_CC2500_InitSetREG
  9094  113D  0825               	movf	??_CC2500_InitSetREG,w
  9095  113E  00A2               	movwf	CC2500_WriteREG@value
  9096  113F  0826               	movf	CC2500_InitSetREG@temp1,w
  9097  1140  3190  2089  3191   	fcall	_CC2500_WriteREG
  9098  1143  3001               	movlw	1
  9099  1144  0020               	movlb	0	; select bank0
  9100  1145  00A5               	movwf	??_CC2500_InitSetREG
  9101  1146  0825               	movf	??_CC2500_InitSetREG,w
  9102  1147  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9103  1148  2921               	goto	L3
  9104  1149                     __end_of_CC2500_InitSetREG:	
  9105                           
  9106                           	psect	text43
  9107  1FE1                     __ptext43:	
  9108 ;; *************** function _CC2500_InitPATable *****************
  9109 ;; Defined at:
  9110 ;;		line 181 in file "../src/CC2500_B1.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;		None
  9113 ;; Auto vars:     Size  Location     Type
  9114 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9115 ;;  temp            1    6[BANK0 ] unsigned char 
  9116 ;; Return value:  Size  Location     Type
  9117 ;;		None               void
  9118 ;; Registers used:
  9119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;Total ram usage:        3 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    7
  9132 ;; This function calls:
  9133 ;;		_CC2500_WriteREG
  9134 ;; This function is called by:
  9135 ;;		_CC2500_PowerOnInitial
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           
  9140                           ;psect for function _CC2500_InitPATable
  9141  1FE1                     _CC2500_InitPATable:	
  9142                           
  9143                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9144                           ;CC2500_B1.c: 183: unsigned char temp;
  9145                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9146                           
  9147                           ;incstack = 0
  9148                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9149  1FE1  0020               	movlb	0	; select bank0
  9150  1FE2  01A7               	clrf	CC2500_InitPATable@loop_d
  9151  1FE3                     L4:	
  9152  1FE3  3008               	movlw	8
  9153  1FE4  0227               	subwf	CC2500_InitPATable@loop_d,w
  9154  1FE5  1803               	btfsc	3,0
  9155  1FE6  0008               	return
  9156                           
  9157                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9158  1FE7  0827               	movf	CC2500_InitPATable@loop_d,w
  9159  1FE8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9160  1FE9  0084               	movwf	4
  9161  1FEA  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9162  1FEB  1803               	skipnc
  9163  1FEC  3E01               	addlw	1
  9164  1FED  0085               	movwf	5
  9165  1FEE  0800               	movf	0,w	;code access
  9166  1FEF  00A5               	movwf	??_CC2500_InitPATable
  9167  1FF0  0825               	movf	??_CC2500_InitPATable,w
  9168  1FF1  00A6               	movwf	CC2500_InitPATable@temp
  9169                           
  9170                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9171  1FF2  0826               	movf	CC2500_InitPATable@temp,w
  9172  1FF3  00A5               	movwf	??_CC2500_InitPATable
  9173  1FF4  0825               	movf	??_CC2500_InitPATable,w
  9174  1FF5  00A2               	movwf	CC2500_WriteREG@value
  9175  1FF6  303E               	movlw	62
  9176  1FF7  3190  2089  319F   	fcall	_CC2500_WriteREG
  9177  1FFA  3001               	movlw	1
  9178  1FFB  0020               	movlb	0	; select bank0
  9179  1FFC  00A5               	movwf	??_CC2500_InitPATable
  9180  1FFD  0825               	movf	??_CC2500_InitPATable,w
  9181  1FFE  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9182  1FFF  2FE3               	goto	L4
  9183  2000                     __end_of_CC2500_InitPATable:	
  9184                           
  9185                           	psect	text44
  9186  1089                     __ptext44:	
  9187 ;; *************** function _CC2500_WriteREG *****************
  9188 ;; Defined at:
  9189 ;;		line 258 in file "../src/CC2500_B1.c"
  9190 ;; Parameters:    Size  Location     Type
  9191 ;;  w_addr          1    wreg     unsigned char 
  9192 ;;  value           1    2[BANK0 ] unsigned char 
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9195 ;; Return value:  Size  Location     Type
  9196 ;;		None               void
  9197 ;; Registers used:
  9198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9204 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;Total ram usage:        3 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    6
  9211 ;; This function calls:
  9212 ;;		_CC2500_WriteByte
  9213 ;;		_RF_Timeout_Counter
  9214 ;;		_setRF_TimeoutCleared
  9215 ;; This function is called by:
  9216 ;;		_CC2500_InitSetREG
  9217 ;;		_CC2500_InitPATable
  9218 ;; This function uses a non-reentrant model
  9219 ;;
  9220                           
  9221                           
  9222                           ;psect for function _CC2500_WriteREG
  9223  1089                     _CC2500_WriteREG:	
  9224                           
  9225                           ;incstack = 0
  9226                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9227                           ;CC2500_WriteREG@w_addr stored from wreg
  9228  1089  0020               	movlb	0	; select bank0
  9229  108A  00A4               	movwf	CC2500_WriteREG@w_addr
  9230                           
  9231                           ;CC2500_B1.c: 259: RC0 = 0;
  9232  108B  100E               	bcf	14,0	;volatile
  9233                           
  9234                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9235  108C  0824               	movf	CC2500_WriteREG@w_addr,w
  9236  108D  00A3               	movwf	??_CC2500_WriteREG
  9237  108E  0823               	movf	??_CC2500_WriteREG,w
  9238  108F  0021               	movlb	1	; select bank1
  9239  1090  00CD               	movwf	_SPI0Buffer^(0+128)
  9240                           
  9241                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9242  1091  2895               	goto	l8862
  9243  1092                     l8860:	
  9244                           
  9245                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9246  1092  319E  2604  3190   	fcall	_RF_Timeout_Counter
  9247  1095                     l8862:	
  9248  1095  0020               	movlb	0	; select bank0
  9249  1096  1E8E               	btfss	14,5	;volatile
  9250  1097  289B               	goto	l8866
  9251  1098  0021               	movlb	1	; select bank1
  9252  1099  1F21               	btfss	(_RF1^(0+128)+1),6
  9253  109A  2892               	goto	l8860
  9254  109B                     l8866:	
  9255                           
  9256                           ;CC2500_B1.c: 263: };
  9257                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9258  109B  319B  2363  3190   	fcall	_setRF_TimeoutCleared
  9259                           
  9260                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9261  109E  319E  26CD  3190   	fcall	_CC2500_WriteByte
  9262                           
  9263                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9264  10A1  0020               	movlb	0	; select bank0
  9265  10A2  0822               	movf	CC2500_WriteREG@value,w
  9266  10A3  00A3               	movwf	??_CC2500_WriteREG
  9267  10A4  0823               	movf	??_CC2500_WriteREG,w
  9268  10A5  0021               	movlb	1	; select bank1
  9269  10A6  00CD               	movwf	_SPI0Buffer^(0+128)
  9270                           
  9271                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9272  10A7  319E  26CD         	fcall	_CC2500_WriteByte
  9273                           
  9274                           ;CC2500_B1.c: 269: RC0 = 1;
  9275  10A9  0020               	movlb	0	; select bank0
  9276  10AA  140E               	bsf	14,0	;volatile
  9277  10AB  0008               	return
  9278  10AC                     __end_of_CC2500_WriteREG:	
  9279                           
  9280                           	psect	text45
  9281  1C7E                     __ptext45:	
  9282 ;; *************** function _CC2500_FrequencyCabr *****************
  9283 ;; Defined at:
  9284 ;;		line 208 in file "../src/CC2500_B1.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;		None               void
  9291 ;; Registers used:
  9292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;Total ram usage:        0 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:    7
  9305 ;; This function calls:
  9306 ;;		_CC2500_WriteCommand
  9307 ;;		_DelayTime_1us
  9308 ;; This function is called by:
  9309 ;;		_CC2500_PowerOnInitial
  9310 ;; This function uses a non-reentrant model
  9311 ;;
  9312                           
  9313                           
  9314                           ;psect for function _CC2500_FrequencyCabr
  9315  1C7E                     _CC2500_FrequencyCabr:	
  9316                           
  9317                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9318                           
  9319                           ;incstack = 0
  9320                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9321  1C7E  3033               	movlw	51
  9322  1C7F  319F  271A  319C   	fcall	_CC2500_WriteCommand
  9323                           
  9324                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9325  1C82  30E8               	movlw	232
  9326  1C83  0020               	movlb	0	; select bank0
  9327  1C84  00A0               	movwf	DelayTime_1us@count
  9328  1C85  3003               	movlw	3
  9329  1C86  00A1               	movwf	DelayTime_1us@count+1
  9330  1C87  3190  20D1         	fcall	_DelayTime_1us
  9331  1C89  0008               	return
  9332  1C8A                     __end_of_CC2500_FrequencyCabr:	
  9333                           
  9334                           	psect	text46
  9335  10D1                     __ptext46:	
  9336 ;; *************** function _DelayTime_1us *****************
  9337 ;; Defined at:
  9338 ;;		line 327 in file "../src/CC2500_B1.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;  count           2    0[BANK0 ] int 
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;  j               2    4[BANK0 ] unsigned int 
  9343 ;;  i               2    2[BANK0 ] unsigned int 
  9344 ;; Return value:  Size  Location     Type
  9345 ;;		None               void
  9346 ;; Registers used:
  9347 ;;		wreg, status,2
  9348 ;; Tracked objects:
  9349 ;;		On entry : 0/0
  9350 ;;		On exit  : 0/0
  9351 ;;		Unchanged: 0/0
  9352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9353 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;Total ram usage:        6 bytes
  9358 ;; Hardware stack levels used:    1
  9359 ;; Hardware stack levels required when called:    5
  9360 ;; This function calls:
  9361 ;;		Nothing
  9362 ;; This function is called by:
  9363 ;;		_CC2500_PowerRST
  9364 ;;		_CC2500_FrequencyCabr
  9365 ;; This function uses a non-reentrant model
  9366 ;;
  9367                           
  9368                           
  9369                           ;psect for function _DelayTime_1us
  9370  10D1                     _DelayTime_1us:	
  9371                           
  9372                           ;CC2500_B1.c: 328: unsigned int i, j;
  9373                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9374                           
  9375                           ;incstack = 0
  9376                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9377  10D1  3001               	movlw	1
  9378  10D2  0020               	movlb	0	; select bank0
  9379  10D3  00A2               	movwf	DelayTime_1us@i
  9380  10D4  3000               	movlw	0
  9381  10D5  00A3               	movwf	DelayTime_1us@i+1
  9382  10D6                     l347:	
  9383  10D6  0821               	movf	DelayTime_1us@count+1,w
  9384  10D7  0223               	subwf	DelayTime_1us@i+1,w
  9385  10D8  1D03               	skipz
  9386  10D9  28DC               	goto	u5415
  9387  10DA  0820               	movf	DelayTime_1us@count,w
  9388  10DB  0222               	subwf	DelayTime_1us@i,w
  9389  10DC                     u5415:	
  9390  10DC  1803               	btfsc	3,0
  9391  10DD  0008               	return
  9392                           
  9393                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9394  10DE  01A4               	clrf	DelayTime_1us@j
  9395  10DF  01A5               	clrf	DelayTime_1us@j+1
  9396  10E0  3000               	movlw	0
  9397  10E1  0225               	subwf	DelayTime_1us@j+1,w
  9398  10E2  3002               	movlw	2
  9399  10E3  1903               	skipnz
  9400  10E4  0224               	subwf	DelayTime_1us@j,w
  9401  10E5  1803               	btfsc	3,0
  9402  10E6  28F2               	goto	l6258
  9403  10E7                     l6256:	
  9404  10E7  3001               	movlw	1
  9405  10E8  07A4               	addwf	DelayTime_1us@j,f
  9406  10E9  3000               	movlw	0
  9407  10EA  3DA5               	addwfc	DelayTime_1us@j+1,f
  9408  10EB  3000               	movlw	0
  9409  10EC  0225               	subwf	DelayTime_1us@j+1,w
  9410  10ED  3002               	movlw	2
  9411  10EE  1903               	skipnz
  9412  10EF  0224               	subwf	DelayTime_1us@j,w
  9413  10F0  1C03               	skipc
  9414  10F1  28E7               	goto	l6256
  9415  10F2                     l6258:	
  9416  10F2  3001               	movlw	1
  9417  10F3  07A2               	addwf	DelayTime_1us@i,f
  9418  10F4  3000               	movlw	0
  9419  10F5  3DA3               	addwfc	DelayTime_1us@i+1,f
  9420  10F6  28D6               	goto	l347
  9421  10F7                     __end_of_DelayTime_1us:	
  9422                           
  9423                           	psect	text47
  9424  1B6B                     __ptext47:	
  9425 ;; *************** function _CC2500_ClearTXFIFO *****************
  9426 ;; Defined at:
  9427 ;;		line 194 in file "../src/CC2500_B1.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;		None
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;		None
  9432 ;; Return value:  Size  Location     Type
  9433 ;;		None               void
  9434 ;; Registers used:
  9435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9436 ;; Tracked objects:
  9437 ;;		On entry : 0/0
  9438 ;;		On exit  : 0/0
  9439 ;;		Unchanged: 0/0
  9440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;Total ram usage:        0 bytes
  9446 ;; Hardware stack levels used:    1
  9447 ;; Hardware stack levels required when called:    7
  9448 ;; This function calls:
  9449 ;;		_CC2500_WriteCommand
  9450 ;; This function is called by:
  9451 ;;		_CC2500_PowerOnInitial
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           
  9456                           ;psect for function _CC2500_ClearTXFIFO
  9457  1B6B                     _CC2500_ClearTXFIFO:	
  9458                           
  9459                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9463  1B6B  303B               	movlw	59
  9464  1B6C  319F  271A         	fcall	_CC2500_WriteCommand
  9465  1B6E  0008               	return
  9466  1B6F                     __end_of_CC2500_ClearTXFIFO:	
  9467                           
  9468                           	psect	text48
  9469  1B67                     __ptext48:	
  9470 ;; *************** function _CC2500_ClearRXFIFO *****************
  9471 ;; Defined at:
  9472 ;;		line 201 in file "../src/CC2500_B1.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;		None
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;		None
  9477 ;; Return value:  Size  Location     Type
  9478 ;;		None               void
  9479 ;; Registers used:
  9480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;Total ram usage:        0 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    7
  9493 ;; This function calls:
  9494 ;;		_CC2500_WriteCommand
  9495 ;; This function is called by:
  9496 ;;		_CC2500_PowerOnInitial
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _CC2500_ClearRXFIFO
  9502  1B67                     _CC2500_ClearRXFIFO:	
  9503                           
  9504                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9505                           
  9506                           ;incstack = 0
  9507                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9508  1B67  303A               	movlw	58
  9509  1B68  319F  271A         	fcall	_CC2500_WriteCommand
  9510  1B6A  0008               	return
  9511  1B6B                     __end_of_CC2500_ClearRXFIFO:	
  9512                           
  9513                           	psect	text49
  9514  1F1A                     __ptext49:	
  9515 ;; *************** function _CC2500_WriteCommand *****************
  9516 ;; Defined at:
  9517 ;;		line 292 in file "../src/CC2500_B1.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;  command         1    wreg     unsigned char 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  command         1    3[BANK0 ] unsigned char 
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;Total ram usage:        2 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    6
  9538 ;; This function calls:
  9539 ;;		_CC2500_WriteByte
  9540 ;;		_RF_Timeout_Counter
  9541 ;;		_setRF_TimeoutCleared
  9542 ;; This function is called by:
  9543 ;;		_CC2500_TxData
  9544 ;;		_CC2500_RxData
  9545 ;;		_CC2500_ClearTXFIFO
  9546 ;;		_CC2500_ClearRXFIFO
  9547 ;;		_CC2500_FrequencyCabr
  9548 ;;		_CC2500_SIDLEMode
  9549 ;;		_setRF_Main
  9550 ;;		_RF_RxDisable
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           
  9555                           ;psect for function _CC2500_WriteCommand
  9556  1F1A                     _CC2500_WriteCommand:	
  9557                           
  9558                           ;incstack = 0
  9559                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9560                           ;CC2500_WriteCommand@command stored from wreg
  9561  1F1A  0020               	movlb	0	; select bank0
  9562  1F1B  00A3               	movwf	CC2500_WriteCommand@command
  9563                           
  9564                           ;CC2500_B1.c: 293: RC0 = 0;
  9565  1F1C  100E               	bcf	14,0	;volatile
  9566                           
  9567                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9568  1F1D  0823               	movf	CC2500_WriteCommand@command,w
  9569  1F1E  00A2               	movwf	??_CC2500_WriteCommand
  9570  1F1F  0822               	movf	??_CC2500_WriteCommand,w
  9571  1F20  0021               	movlb	1	; select bank1
  9572  1F21  00CD               	movwf	_SPI0Buffer^(0+128)
  9573                           
  9574                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9575  1F22  2F26               	goto	l8828
  9576  1F23                     l8826:	
  9577                           
  9578                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9579  1F23  319E  2604  319F   	fcall	_RF_Timeout_Counter
  9580  1F26                     l8828:	
  9581  1F26  0020               	movlb	0	; select bank0
  9582  1F27  1E8E               	btfss	14,5	;volatile
  9583  1F28  2F2C               	goto	l8832
  9584  1F29  0021               	movlb	1	; select bank1
  9585  1F2A  1F21               	btfss	(_RF1^(0+128)+1),6
  9586  1F2B  2F23               	goto	l8826
  9587  1F2C                     l8832:	
  9588                           
  9589                           ;CC2500_B1.c: 298: };
  9590                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9591  1F2C  319B  2363  319F   	fcall	_setRF_TimeoutCleared
  9592                           
  9593                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9594  1F2F  319E  26CD         	fcall	_CC2500_WriteByte
  9595                           
  9596                           ;CC2500_B1.c: 302: RC0 = 1;
  9597  1F31  0020               	movlb	0	; select bank0
  9598  1F32  140E               	bsf	14,0	;volatile
  9599  1F33  0008               	return
  9600  1F34                     __end_of_CC2500_WriteCommand:	
  9601                           
  9602                           	psect	text50
  9603  1B63                     __ptext50:	
  9604 ;; *************** function _setRF_TimeoutCleared *****************
  9605 ;; Defined at:
  9606 ;;		line 149 in file "../src/RF_Control_B1.c"
  9607 ;; Parameters:    Size  Location     Type
  9608 ;;		None
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;		None
  9611 ;; Return value:  Size  Location     Type
  9612 ;;		None               void
  9613 ;; Registers used:
  9614 ;;		status,2
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;Total ram usage:        0 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    5
  9627 ;; This function calls:
  9628 ;;		Nothing
  9629 ;; This function is called by:
  9630 ;;		_CC2500_TxData
  9631 ;;		_CC2500_RxData
  9632 ;;		_CC2500_PowerRST
  9633 ;;		_CC2500_WriteREG
  9634 ;;		_CC2500_WriteCommand
  9635 ;;		_CC2500_ReadStatus
  9636 ;;		_CC2500_ReadREG
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           
  9641                           ;psect for function _setRF_TimeoutCleared
  9642  1B63                     _setRF_TimeoutCleared:	
  9643                           
  9644                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9645                           
  9646                           ;incstack = 0
  9647                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9648  1B63  0021               	movlb	1	; select bank1
  9649  1B64  01AC               	clrf	(_RF1^(0+128)+12)
  9650  1B65  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9651  1B66  0008               	return
  9652  1B67                     __end_of_setRF_TimeoutCleared:	
  9653                           
  9654                           	psect	text51
  9655  1E04                     __ptext51:	
  9656 ;; *************** function _RF_Timeout_Counter *****************
  9657 ;; Defined at:
  9658 ;;		line 141 in file "../src/RF_Control_B1.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;		None
  9663 ;; Return value:  Size  Location     Type
  9664 ;;		None               void
  9665 ;; Registers used:
  9666 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;Total ram usage:        0 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    5
  9679 ;; This function calls:
  9680 ;;		Nothing
  9681 ;; This function is called by:
  9682 ;;		_CC2500_TxData
  9683 ;;		_CC2500_RxData
  9684 ;;		_CC2500_PowerRST
  9685 ;;		_CC2500_WriteREG
  9686 ;;		_CC2500_WriteCommand
  9687 ;;		_CC2500_ReadStatus
  9688 ;;		_CC2500_ReadREG
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           
  9693                           ;psect for function _RF_Timeout_Counter
  9694  1E04                     _RF_Timeout_Counter:	
  9695                           
  9696                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9697                           
  9698                           ;incstack = 0
  9699                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9700  1E04  3001               	movlw	1
  9701  1E05  0021               	movlb	1	; select bank1
  9702  1E06  07AC               	addwf	(_RF1^(0+128)+12),f
  9703  1E07  3000               	movlw	0
  9704  1E08  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9705                           
  9706                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9707  1E09  300C               	movlw	12
  9708  1E0A  3EA0               	addlw	_RF1& (0+255)
  9709  1E0B  0086               	movwf	6
  9710  1E0C  0187               	clrf	7
  9711  1E0D  3F40               	moviw [0]fsr1
  9712  1E0E  3AA8               	xorlw	168
  9713  1E0F  1D03               	skipz
  9714  1E10  2E13               	goto	u9435
  9715  1E11  3F41               	moviw [1]fsr1
  9716  1E12  3A61               	xorlw	97
  9717  1E13                     u9435:	
  9718  1E13  1D03               	skipz
  9719  1E14  0008               	return
  9720                           
  9721                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9722  1E15  01AC               	clrf	(_RF1^(0+128)+12)
  9723  1E16  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9724                           
  9725                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9726  1E17  1721               	bsf	(_RF1^(0+128)+1),6
  9727  1E18  0008               	return
  9728  1E19                     __end_of_RF_Timeout_Counter:	
  9729                           
  9730                           	psect	text52
  9731  1ECD                     __ptext52:	
  9732 ;; *************** function _CC2500_WriteByte *****************
  9733 ;; Defined at:
  9734 ;;		line 226 in file "../src/CC2500_B1.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9739 ;; Return value:  Size  Location     Type
  9740 ;;		None               void
  9741 ;; Registers used:
  9742 ;;		wreg, status,2, status,0
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;Total ram usage:        2 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    5
  9755 ;; This function calls:
  9756 ;;		Nothing
  9757 ;; This function is called by:
  9758 ;;		_CC2500_TxData
  9759 ;;		_CC2500_RxData
  9760 ;;		_CC2500_PowerRST
  9761 ;;		_CC2500_WriteREG
  9762 ;;		_CC2500_WriteCommand
  9763 ;;		_CC2500_ReadStatus
  9764 ;;		_CC2500_ReadREG
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           
  9769                           ;psect for function _CC2500_WriteByte
  9770  1ECD                     _CC2500_WriteByte:	
  9771                           
  9772                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9773                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9774                           
  9775                           ;incstack = 0
  9776                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9777  1ECD  0020               	movlb	0	; select bank0
  9778  1ECE  01A1               	clrf	CC2500_WriteByte@loop_a
  9779  1ECF                     L5:	
  9780  1ECF  3008               	movlw	8
  9781  1ED0  0221               	subwf	CC2500_WriteByte@loop_a,w
  9782  1ED1  1803               	btfsc	3,0
  9783  1ED2  0008               	return
  9784                           
  9785                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9786  1ED3  0021               	movlb	1	; select bank1
  9787  1ED4  1FCD               	btfss	_SPI0Buffer^(0+128),7
  9788  1ED5  2ED9               	goto	l303
  9789                           
  9790                           ;CC2500_B1.c: 230: RC4 = 1;
  9791  1ED6  0020               	movlb	0	; select bank0
  9792  1ED7  160E               	bsf	14,4	;volatile
  9793  1ED8  2EDB               	goto	l304
  9794  1ED9                     l303:	
  9795                           
  9796                           ;CC2500_B1.c: 231: else
  9797                           ;CC2500_B1.c: 232: RC4 = 0;
  9798  1ED9  0020               	movlb	0	; select bank0
  9799  1EDA  120E               	bcf	14,4	;volatile
  9800  1EDB                     l304:	
  9801                           
  9802                           ;CC2500_B1.c: 233: RC3 = 1;
  9803  1EDB  158E               	bsf	14,3	;volatile
  9804                           
  9805                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9806  1EDC  1003               	clrc
  9807  1EDD  0021               	movlb	1	; select bank1
  9808  1EDE  0DCD               	rlf	_SPI0Buffer^(0+128),f
  9809                           
  9810                           ;CC2500_B1.c: 235: RC3 = 0;
  9811  1EDF  0020               	movlb	0	; select bank0
  9812  1EE0  118E               	bcf	14,3	;volatile
  9813  1EE1  3001               	movlw	1
  9814  1EE2  00A0               	movwf	??_CC2500_WriteByte
  9815  1EE3  0820               	movf	??_CC2500_WriteByte,w
  9816  1EE4  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9817  1EE5  2ECF               	goto	L5
  9818  1EE6                     __end_of_CC2500_WriteByte:	
  9819                           
  9820                           	psect	text53
  9821  1B43                     __ptext53:	
  9822 ;; *************** function _RF_Initialization *****************
  9823 ;; Defined at:
  9824 ;;		line 9 in file "../src/RF_Control_B1.c"
  9825 ;; Parameters:    Size  Location     Type
  9826 ;;		None
  9827 ;; Auto vars:     Size  Location     Type
  9828 ;;		None
  9829 ;; Return value:  Size  Location     Type
  9830 ;;		None               void
  9831 ;; Registers used:
  9832 ;;		wreg, status,2, status,0, pclath, cstack
  9833 ;; Tracked objects:
  9834 ;;		On entry : 0/0
  9835 ;;		On exit  : 0/0
  9836 ;;		Unchanged: 0/0
  9837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;Total ram usage:        0 bytes
  9843 ;; Hardware stack levels used:    1
  9844 ;; Hardware stack levels required when called:    6
  9845 ;; This function calls:
  9846 ;;		_setRF_Initialization
  9847 ;; This function is called by:
  9848 ;;		_main
  9849 ;; This function uses a non-reentrant model
  9850 ;;
  9851                           
  9852                           
  9853                           ;psect for function _RF_Initialization
  9854  1B43                     _RF_Initialization:	
  9855                           
  9856                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9857                           
  9858                           ;incstack = 0
  9859                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9860  1B43  319B  23FB         	fcall	_setRF_Initialization
  9861  1B45  0008               	return
  9862  1B46                     __end_of_RF_Initialization:	
  9863                           
  9864                           	psect	text54
  9865  1BFB                     __ptext54:	
  9866 ;; *************** function _setRF_Initialization *****************
  9867 ;; Defined at:
  9868 ;;		line 17 in file "../src/RF_Control_B1.c"
  9869 ;; Parameters:    Size  Location     Type
  9870 ;;		None
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;		None
  9873 ;; Return value:  Size  Location     Type
  9874 ;;		None               void
  9875 ;; Registers used:
  9876 ;;		wreg
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;Total ram usage:        1 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    5
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		_RF_Initialization
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           
  9897                           ;psect for function _setRF_Initialization
  9898  1BFB                     _setRF_Initialization:	
  9899                           
  9900                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9901                           
  9902                           ;incstack = 0
  9903                           ; Regs used in _setRF_Initialization: [wreg]
  9904  1BFB  3015               	movlw	21
  9905  1BFC  0020               	movlb	0	; select bank0
  9906  1BFD  00A0               	movwf	??_setRF_Initialization
  9907  1BFE  0820               	movf	??_setRF_Initialization,w
  9908  1BFF  0021               	movlb	1	; select bank1
  9909  1C00  00CF               	movwf	_Tx_Length^(0+128)
  9910                           
  9911                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9912  1C01  30C8               	movlw	200
  9913  1C02  00A7               	movwf	(_RF1^(0+128)+7)
  9914  1C03  3000               	movlw	0
  9915  1C04  00A8               	movwf	(_RF1^(0+128)+8)
  9916  1C05  0008               	return
  9917  1C06                     __end_of_setRF_Initialization:	
  9918                           
  9919                           	psect	text55
  9920  1D7F                     __ptext55:	
  9921 ;; *************** function _Mcu_Initialization *****************
  9922 ;; Defined at:
  9923 ;;		line 30 in file "../src/MCU_B1.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;		None
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;		None
  9928 ;; Return value:  Size  Location     Type
  9929 ;;		None               void
  9930 ;; Registers used:
  9931 ;;		wreg, status,2, status,0, pclath, cstack
  9932 ;; Tracked objects:
  9933 ;;		On entry : 0/0
  9934 ;;		On exit  : 0/0
  9935 ;;		Unchanged: 0/0
  9936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9941 ;;Total ram usage:        0 bytes
  9942 ;; Hardware stack levels used:    1
  9943 ;; Hardware stack levels required when called:    6
  9944 ;; This function calls:
  9945 ;;		_ADC_Set
  9946 ;;		_Fosc_Set
  9947 ;;		_IOC_Set
  9948 ;;		_IO_Set
  9949 ;;		_TMR1_Set
  9950 ;;		_WDT_Set
  9951 ;; This function is called by:
  9952 ;;		_main
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           
  9957                           ;psect for function _Mcu_Initialization
  9958  1D7F                     _Mcu_Initialization:	
  9959                           
  9960                           ;MCU_B1.c: 32: Fosc_Set();
  9961                           
  9962                           ;incstack = 0
  9963                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9964  1D7F  319B  235F  319D   	fcall	_Fosc_Set
  9965                           
  9966                           ;MCU_B1.c: 34: IO_Set();
  9967  1D82  319F  2700  319D   	fcall	_IO_Set
  9968                           
  9969                           ;MCU_B1.c: 36: ;;
  9970                           ;MCU_B1.c: 38: TMR1_Set();
  9971  1D85  319C  2466  319D   	fcall	_TMR1_Set
  9972                           
  9973                           ;MCU_B1.c: 40: ADC_Set();
  9974  1D88  319B  238F  319D   	fcall	_ADC_Set
  9975                           
  9976                           ;MCU_B1.c: 42: ;;
  9977                           ;MCU_B1.c: 44: ;;
  9978                           ;MCU_B1.c: 46: IOC_Set();
  9979  1D8B  319B  23F0  319D   	fcall	_IOC_Set
  9980                           
  9981                           ;MCU_B1.c: 48: ;;
  9982                           ;MCU_B1.c: 50: ;;
  9983                           ;MCU_B1.c: 52: WDT_Set();
  9984  1D8E  319C  2472         	fcall	_WDT_Set
  9985  1D90  0008               	return
  9986  1D91                     __end_of_Mcu_Initialization:	
  9987                           
  9988                           	psect	text56
  9989  1C72                     __ptext56:	
  9990 ;; *************** function _WDT_Set *****************
  9991 ;; Defined at:
  9992 ;;		line 1102 in file "../src/MCU_B1.c"
  9993 ;; Parameters:    Size  Location     Type
  9994 ;;		None
  9995 ;; Auto vars:     Size  Location     Type
  9996 ;;		None
  9997 ;; Return value:  Size  Location     Type
  9998 ;;		None               void
  9999 ;; Registers used:
 10000 ;;		wreg
 10001 ;; Tracked objects:
 10002 ;;		On entry : 0/0
 10003 ;;		On exit  : 0/0
 10004 ;;		Unchanged: 0/0
 10005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;Total ram usage:        1 bytes
 10011 ;; Hardware stack levels used:    1
 10012 ;; Hardware stack levels required when called:    5
 10013 ;; This function calls:
 10014 ;;		Nothing
 10015 ;; This function is called by:
 10016 ;;		_Mcu_Initialization
 10017 ;; This function uses a non-reentrant model
 10018 ;;
 10019                           
 10020                           
 10021                           ;psect for function _WDT_Set
 10022  1C72                     _WDT_Set:	
 10023                           
 10024                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10025                           
 10026                           ;incstack = 0
 10027                           ; Regs used in _WDT_Set: [wreg]
 10028  1C72  3017               	movlw	23
 10029  1C73  0021               	movlb	1	; select bank1
 10030  1C74  0097               	movwf	23	;volatile
 10031                           
 10032                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10033  1C75  0022               	movlb	2	; select bank2
 10034  1C76  1436               	bsf	_WDT^(0+256),0
 10035                           
 10036                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10037  1C77  300A               	movlw	10
 10038  1C78  0020               	movlb	0	; select bank0
 10039  1C79  00A0               	movwf	??_WDT_Set
 10040  1C7A  0820               	movf	??_WDT_Set,w
 10041  1C7B  0022               	movlb	2	; select bank2
 10042  1C7C  00B7               	movwf	(_WDT^(0+256)+1)
 10043  1C7D  0008               	return
 10044  1C7E                     __end_of_WDT_Set:	
 10045                           
 10046                           	psect	text57
 10047  1C66                     __ptext57:	
 10048 ;; *************** function _TMR1_Set *****************
 10049 ;; Defined at:
 10050 ;;		line 226 in file "../src/MCU_B1.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;		None
 10053 ;; Auto vars:     Size  Location     Type
 10054 ;;		None
 10055 ;; Return value:  Size  Location     Type
 10056 ;;		None               void
 10057 ;; Registers used:
 10058 ;;		wreg
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/0
 10061 ;;		On exit  : 0/0
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;Total ram usage:        0 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    5
 10071 ;; This function calls:
 10072 ;;		Nothing
 10073 ;; This function is called by:
 10074 ;;		_Mcu_Initialization
 10075 ;; This function uses a non-reentrant model
 10076 ;;
 10077                           
 10078                           
 10079                           ;psect for function _TMR1_Set
 10080  1C66                     _TMR1_Set:	
 10081                           
 10082                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10083                           
 10084                           ;incstack = 0
 10085                           ; Regs used in _TMR1_Set: [wreg]
 10086  1C66  3041               	movlw	65
 10087  1C67  0020               	movlb	0	; select bank0
 10088  1C68  0098               	movwf	24	;volatile
 10089                           
 10090                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10091  1C69  30FA               	movlw	250
 10092  1C6A  0097               	movwf	23	;volatile
 10093                           
 10094                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10095  1C6B  3038               	movlw	56
 10096  1C6C  0096               	movwf	22	;volatile
 10097                           
 10098                           ;MCU_B1.c: 230: TMR1IE = 1;
 10099  1C6D  0021               	movlb	1	; select bank1
 10100  1C6E  1411               	bsf	17,0	;volatile
 10101                           
 10102                           ;MCU_B1.c: 231: PEIE = 1;
 10103  1C6F  170B               	bsf	11,6	;volatile
 10104                           
 10105                           ;MCU_B1.c: 232: GIE = 1;
 10106  1C70  178B               	bsf	11,7	;volatile
 10107  1C71  0008               	return
 10108  1C72                     __end_of_TMR1_Set:	
 10109                           
 10110                           	psect	text58
 10111  1F00                     __ptext58:	
 10112 ;; *************** function _IO_Set *****************
 10113 ;; Defined at:
 10114 ;;		line 60 in file "../src/MCU_B1.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;		None
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;		None
 10119 ;; Return value:  Size  Location     Type
 10120 ;;		None               void
 10121 ;; Registers used:
 10122 ;;		wreg, status,2
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;Total ram usage:        0 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:    5
 10135 ;; This function calls:
 10136 ;;		Nothing
 10137 ;; This function is called by:
 10138 ;;		_Mcu_Initialization
 10139 ;; This function uses a non-reentrant model
 10140 ;;
 10141                           
 10142                           
 10143                           ;psect for function _IO_Set
 10144  1F00                     _IO_Set:	
 10145                           
 10146                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10147                           
 10148                           ;incstack = 0
 10149                           ; Regs used in _IO_Set: [wreg+status,2]
 10150  1F00  30F7               	movlw	247
 10151  1F01  0021               	movlb	1	; select bank1
 10152  1F02  008C               	movwf	12	;volatile
 10153                           
 10154                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10155  1F03  3004               	movlw	4
 10156  1F04  008D               	movwf	13	;volatile
 10157                           
 10158                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10159  1F05  3026               	movlw	38
 10160  1F06  008E               	movwf	14	;volatile
 10161                           
 10162                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10163  1F07  0022               	movlb	2	; select bank2
 10164  1F08  018C               	clrf	12	;volatile
 10165                           
 10166                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10167  1F09  018D               	clrf	13	;volatile
 10168                           
 10169                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10170  1F0A  018E               	clrf	14	;volatile
 10171                           
 10172                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10173  1F0B  300E               	movlw	14
 10174  1F0C  0023               	movlb	3	; select bank3
 10175  1F0D  008C               	movwf	12	;volatile
 10176                           
 10177                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10178  1F0E  018D               	clrf	13	;volatile
 10179                           
 10180                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10181  1F0F  018E               	clrf	14	;volatile
 10182                           
 10183                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10184  1F10  30F7               	movlw	247
 10185  1F11  0020               	movlb	0	; select bank0
 10186  1F12  008C               	movwf	12	;volatile
 10187                           
 10188                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10189  1F13  3004               	movlw	4
 10190  1F14  008D               	movwf	13	;volatile
 10191                           
 10192                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10193  1F15  3026               	movlw	38
 10194  1F16  008E               	movwf	14	;volatile
 10195                           
 10196                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10197  1F17  0024               	movlb	4	; select bank4
 10198  1F18  018D               	clrf	13	;volatile
 10199  1F19  0008               	return
 10200  1F1A                     __end_of_IO_Set:	
 10201                           
 10202                           	psect	text59
 10203  1BF0                     __ptext59:	
 10204 ;; *************** function _IOC_Set *****************
 10205 ;; Defined at:
 10206 ;;		line 380 in file "../src/MCU_B1.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;		None
 10209 ;; Auto vars:     Size  Location     Type
 10210 ;;		None
 10211 ;; Return value:  Size  Location     Type
 10212 ;;		None               void
 10213 ;; Registers used:
 10214 ;;		wreg, status,2
 10215 ;; Tracked objects:
 10216 ;;		On entry : 0/0
 10217 ;;		On exit  : 0/0
 10218 ;;		Unchanged: 0/0
 10219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;Total ram usage:        0 bytes
 10225 ;; Hardware stack levels used:    1
 10226 ;; Hardware stack levels required when called:    5
 10227 ;; This function calls:
 10228 ;;		Nothing
 10229 ;; This function is called by:
 10230 ;;		_Mcu_Initialization
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           
 10235                           ;psect for function _IOC_Set
 10236  1BF0                     _IOC_Set:	
 10237                           
 10238                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10239                           
 10240                           ;incstack = 0
 10241                           ; Regs used in _IOC_Set: [wreg+status,2]
 10242  1BF0  3004               	movlw	4
 10243  1BF1  0027               	movlb	7	; select bank7
 10244  1BF2  0094               	movwf	20	;volatile
 10245                           
 10246                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10247  1BF3  3004               	movlw	4
 10248  1BF4  0095               	movwf	21	;volatile
 10249                           
 10250                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10251  1BF5  0196               	clrf	22	;volatile
 10252                           
 10253                           ;MCU_B1.c: 387: IOCIE = 1;
 10254  1BF6  158B               	bsf	11,3	;volatile
 10255                           
 10256                           ;MCU_B1.c: 388: IOCIF = 0;
 10257  1BF7  100B               	bcf	11,0	;volatile
 10258                           
 10259                           ;MCU_B1.c: 389: PEIE = 1;
 10260  1BF8  170B               	bsf	11,6	;volatile
 10261                           
 10262                           ;MCU_B1.c: 390: GIE = 1;
 10263  1BF9  178B               	bsf	11,7	;volatile
 10264  1BFA  0008               	return
 10265  1BFB                     __end_of_IOC_Set:	
 10266                           
 10267                           	psect	text60
 10268  1B5F                     __ptext60:	
 10269 ;; *************** function _Fosc_Set *****************
 10270 ;; Defined at:
 10271 ;;		line 56 in file "../src/MCU_B1.c"
 10272 ;; Parameters:    Size  Location     Type
 10273 ;;		None
 10274 ;; Auto vars:     Size  Location     Type
 10275 ;;		None
 10276 ;; Return value:  Size  Location     Type
 10277 ;;		None               void
 10278 ;; Registers used:
 10279 ;;		wreg
 10280 ;; Tracked objects:
 10281 ;;		On entry : 0/0
 10282 ;;		On exit  : 0/0
 10283 ;;		Unchanged: 0/0
 10284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;Total ram usage:        0 bytes
 10290 ;; Hardware stack levels used:    1
 10291 ;; Hardware stack levels required when called:    5
 10292 ;; This function calls:
 10293 ;;		Nothing
 10294 ;; This function is called by:
 10295 ;;		_Mcu_Initialization
 10296 ;; This function uses a non-reentrant model
 10297 ;;
 10298                           
 10299                           
 10300                           ;psect for function _Fosc_Set
 10301  1B5F                     _Fosc_Set:	
 10302                           
 10303                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10304                           
 10305                           ;incstack = 0
 10306                           ; Regs used in _Fosc_Set: [wreg]
 10307  1B5F  3078               	movlw	120
 10308  1B60  0021               	movlb	1	; select bank1
 10309  1B61  0099               	movwf	25	;volatile
 10310  1B62  0008               	return
 10311  1B63                     __end_of_Fosc_Set:	
 10312                           
 10313                           	psect	text61
 10314  1B8F                     __ptext61:	
 10315 ;; *************** function _ADC_Set *****************
 10316 ;; Defined at:
 10317 ;;		line 427 in file "../src/MCU_B1.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;		None
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;		None
 10322 ;; Return value:  Size  Location     Type
 10323 ;;		None               void
 10324 ;; Registers used:
 10325 ;;		wreg
 10326 ;; Tracked objects:
 10327 ;;		On entry : 0/0
 10328 ;;		On exit  : 0/0
 10329 ;;		Unchanged: 0/0
 10330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;Total ram usage:        0 bytes
 10336 ;; Hardware stack levels used:    1
 10337 ;; Hardware stack levels required when called:    5
 10338 ;; This function calls:
 10339 ;;		Nothing
 10340 ;; This function is called by:
 10341 ;;		_Mcu_Initialization
 10342 ;; This function uses a non-reentrant model
 10343 ;;
 10344                           
 10345                           
 10346                           ;psect for function _ADC_Set
 10347  1B8F                     _ADC_Set:	
 10348                           
 10349                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10350                           
 10351                           ;incstack = 0
 10352                           ; Regs used in _ADC_Set: [wreg]
 10353  1B8F  30F3               	movlw	243
 10354  1B90  0021               	movlb	1	; select bank1
 10355  1B91  009E               	movwf	30	;volatile
 10356                           
 10357                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10358  1B92  30C1               	movlw	193
 10359  1B93  0022               	movlb	2	; select bank2
 10360  1B94  0097               	movwf	23	;volatile
 10361  1B95  0008               	return
 10362  1B96                     __end_of_ADC_Set:	
 10363                           
 10364                           	psect	text62
 10365  0053                     __ptext62:	
 10366 ;; *************** function _Load_Main *****************
 10367 ;; Defined at:
 10368 ;;		line 39 in file "../src/OverLoad_B1.c"
 10369 ;; Parameters:    Size  Location     Type
 10370 ;;		None
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;  i               2   16[BANK0 ] int 
 10373 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10374 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10375 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10376 ;;  error           1   10[BANK0 ] unsigned char 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;		None               void
 10379 ;; Registers used:
 10380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;Total ram usage:       10 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    6
 10393 ;; This function calls:
 10394 ;;		___lwdiv
 10395 ;;		___wmul
 10396 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10397 ;;		_getDimmer_LoadGO
 10398 ;;		_getDimmer_Load_Status
 10399 ;;		_getMain_All_Error_Status
 10400 ;;		_getMain_All_LightsStatus
 10401 ;;		_getMain_Lights_Count
 10402 ;;		_setLoad_AH_AL_Restore
 10403 ;; This function is called by:
 10404 ;;		_main
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           
 10409                           ;psect for function _Load_Main
 10410  0053                     _Load_Main:	
 10411                           
 10412                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10413                           
 10414                           ;incstack = 0
 10415                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10416  0053  3000               	movlw	0
 10417  0054  3191  2178  3180   	fcall	_getMain_All_Error_Status
 10418  0057  0020               	movlb	0	; select bank0
 10419  0058  00A8               	movwf	??_Load_Main
 10420  0059  0828               	movf	??_Load_Main,w
 10421  005A  00AA               	movwf	Load_Main@error
 10422                           
 10423                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10424  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10425  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10426  005D  01AF               	clrf	Load_Main@LightsCount
 10427                           
 10428                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10429  005E  0022               	movlb	2	; select bank2
 10430  005F  1C3E               	btfss	_Load^(0+256),0
 10431  0060  29FF               	goto	l1621
 10432                           
 10433                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10434  0061  319B  23D0  3180   	fcall	_getMain_All_LightsStatus
 10435  0064  3800               	iorlw	0
 10436  0065  1D03               	skipz
 10437  0066  2869               	goto	l10060
 10438                           
 10439                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10440  0067  0022               	movlb	2	; select bank2
 10441  0068  288A               	goto	l10078
 10442  0069                     l10060:	
 10443                           ;OverLoad_B1.c: 46: } else {
 10444                           
 10445                           
 10446                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10447  0069  0020               	movlb	0	; select bank0
 10448  006A  08AA               	movf	Load_Main@error,f
 10449  006B  1D03               	skipz
 10450  006C  2887               	goto	l1624
 10451  006D  319D  25B7  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10452  0070  3800               	iorlw	0
 10453  0071  1D03               	skipz
 10454  0072  2887               	goto	l1624
 10455                           
 10456                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10457  0073  0022               	movlb	2	; select bank2
 10458  0074  14BE               	bsf	_Load^(0+256),1
 10459                           
 10460                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10461  0075  319B  23A5  3180   	fcall	_getDimmer_LoadGO
 10462  0078  3A01               	xorlw	1
 10463  0079  1D03               	skipz
 10464  007A  2882               	goto	l1625
 10465                           
 10466                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10467  007B  0022               	movlb	2	; select bank2
 10468  007C  1DBE               	btfss	_Load^(0+256),3
 10469  007D  1BBE               	btfsc	_Load^(0+256),7
 10470  007E  288B               	goto	l1623
 10471                           
 10472                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10473  007F  15BE               	bsf	_Load^(0+256),3
 10474                           
 10475                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10476  0080  01E3               	clrf	(_Load^(0+256)+37)
 10477                           
 10478                           ;OverLoad_B1.c: 56: }
 10479                           ;OverLoad_B1.c: 57: } else {
 10480  0081  288B               	goto	l1623
 10481  0082                     l1625:	
 10482                           
 10483                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10484  0082  0022               	movlb	2	; select bank2
 10485  0083  1FBE               	btfss	_Load^(0+256),7
 10486  0084  288B               	goto	l1623
 10487                           
 10488                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10489  0085  13BE               	bcf	_Load^(0+256),7
 10490                           
 10491                           ;OverLoad_B1.c: 60: }
 10492                           ;OverLoad_B1.c: 61: }
 10493                           ;OverLoad_B1.c: 62: } else {
 10494  0086  288B               	goto	l1623
 10495  0087                     l1624:	
 10496                           
 10497                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10498  0087  0022               	movlb	2	; select bank2
 10499  0088  1CBE               	btfss	_Load^(0+256),1
 10500  0089  288B               	goto	l1623
 10501  008A                     l10078:	
 10502                           
 10503                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10504  008A  10BE               	bcf	_Load^(0+256),1
 10505  008B                     l1623:	
 10506                           
 10507                           ;OverLoad_B1.c: 65: }
 10508                           ;OverLoad_B1.c: 66: }
 10509                           ;OverLoad_B1.c: 88: }
 10510                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10511  008B  1CBE               	btfss	_Load^(0+256),1
 10512  008C  29DB               	goto	l1631
 10513                           
 10514                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10515  008D  153E               	bsf	_Load^(0+256),2
 10516                           
 10517                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10518  008E  1E3E               	btfss	_Load^(0+256),4
 10519  008F  29D9               	goto	l1632
 10520                           
 10521                           ;OverLoad_B1.c: 95: Load.Time++;
 10522  0090  3001               	movlw	1
 10523  0091  07BF               	addwf	(_Load^(0+256)+1),f
 10524  0092  3000               	movlw	0
 10525  0093  3DC0               	addwfc	((_Load+1)^(0+256)+1),f
 10526                           
 10527                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10528  0094  3000               	movlw	0
 10529  0095  0240               	subwf	((_Load+1)^(0+256)+1),w
 10530  0096  3002               	movlw	2
 10531  0097  1903               	skipnz
 10532  0098  023F               	subwf	(_Load^(0+256)+1),w
 10533  0099  1C03               	skipc
 10534  009A  0008               	return
 10535                           
 10536                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10537  009B  01BF               	clrf	(_Load^(0+256)+1)
 10538  009C  01C0               	clrf	((_Load+1)^(0+256)+1)
 10539                           
 10540                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10541  009D  123E               	bcf	_Load^(0+256),4
 10542                           
 10543                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10544  009E  3001               	movlw	1
 10545  009F  0020               	movlb	0	; select bank0
 10546  00A0  00B0               	movwf	Load_Main@i
 10547  00A1  3000               	movlw	0
 10548  00A2  00B1               	movwf	Load_Main@i+1
 10549  00A3  0831               	movf	Load_Main@i+1,w
 10550  00A4  3A80               	xorlw	128
 10551  00A5  00A8               	movwf	??_Load_Main
 10552  00A6  3080               	movlw	128
 10553  00A7  0228               	subwf	??_Load_Main,w
 10554  00A8  1D03               	skipz
 10555  00A9  28AC               	goto	u11645
 10556  00AA  3004               	movlw	4
 10557  00AB  0230               	subwf	Load_Main@i,w
 10558  00AC                     u11645:	
 10559  00AC  1803               	btfsc	3,0
 10560  00AD  28E0               	goto	l10100
 10561  00AE                     l10094:	
 10562                           
 10563                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10564  00AE  0020               	movlb	0	; select bank0
 10565  00AF  3530               	lslf	Load_Main@i,w
 10566  00B0  3E49               	addlw	(_Load+11)& (0+255)
 10567  00B1  0086               	movwf	6
 10568  00B2  3001               	movlw	1	; select bank2/3
 10569  00B3  0087               	movwf	7
 10570  00B4  3F40               	moviw [0]fsr1
 10571  00B5  00A8               	movwf	??_Load_Main
 10572  00B6  3F41               	moviw [1]fsr1
 10573  00B7  00A9               	movwf	??_Load_Main+1
 10574  00B8  0828               	movf	??_Load_Main,w
 10575  00B9  0022               	movlb	2	; select bank2
 10576  00BA  07C3               	addwf	(_Load^(0+256)+5),f
 10577  00BB  0020               	movlb	0	; select bank0
 10578  00BC  0829               	movf	??_Load_Main+1,w
 10579  00BD  0022               	movlb	2	; select bank2
 10580  00BE  3DC4               	addwfc	((_Load+1)^(0+256)+5),f
 10581                           
 10582                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10583  00BF  0020               	movlb	0	; select bank0
 10584  00C0  3530               	lslf	Load_Main@i,w
 10585  00C1  3E53               	addlw	(_Load+21)& (0+255)
 10586  00C2  0086               	movwf	6
 10587  00C3  3001               	movlw	1	; select bank2/3
 10588  00C4  0087               	movwf	7
 10589  00C5  3F40               	moviw [0]fsr1
 10590  00C6  00A8               	movwf	??_Load_Main
 10591  00C7  3F41               	moviw [1]fsr1
 10592  00C8  00A9               	movwf	??_Load_Main+1
 10593  00C9  0828               	movf	??_Load_Main,w
 10594  00CA  0022               	movlb	2	; select bank2
 10595  00CB  07C5               	addwf	(_Load^(0+256)+7),f
 10596  00CC  0020               	movlb	0	; select bank0
 10597  00CD  0829               	movf	??_Load_Main+1,w
 10598  00CE  0022               	movlb	2	; select bank2
 10599  00CF  3DC6               	addwfc	((_Load+1)^(0+256)+7),f
 10600  00D0  3001               	movlw	1
 10601  00D1  0020               	movlb	0	; select bank0
 10602  00D2  07B0               	addwf	Load_Main@i,f
 10603  00D3  3000               	movlw	0
 10604  00D4  3DB1               	addwfc	Load_Main@i+1,f
 10605  00D5  0831               	movf	Load_Main@i+1,w
 10606  00D6  3A80               	xorlw	128
 10607  00D7  00A8               	movwf	??_Load_Main
 10608  00D8  3080               	movlw	128
 10609  00D9  0228               	subwf	??_Load_Main,w
 10610  00DA  1D03               	skipz
 10611  00DB  28DE               	goto	u11655
 10612  00DC  3004               	movlw	4
 10613  00DD  0230               	subwf	Load_Main@i,w
 10614  00DE                     u11655:	
 10615  00DE  1C03               	skipc
 10616  00DF  28AE               	goto	l10094
 10617  00E0                     l10100:	
 10618                           
 10619                           ;OverLoad_B1.c: 103: }
 10620                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10621  00E0  3003               	movlw	3
 10622  00E1  0020               	movlb	0	; select bank0
 10623  00E2  00A0               	movwf	___lwdiv@divisor
 10624  00E3  3000               	movlw	0
 10625  00E4  00A1               	movwf	___lwdiv@divisor+1
 10626  00E5  0022               	movlb	2	; select bank2
 10627  00E6  0844               	movf	((_Load+1)^(0+256)+5),w
 10628  00E7  0020               	movlb	0	; select bank0
 10629  00E8  01A3               	clrf	___lwdiv@dividend+1
 10630  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 10631  00EA  0022               	movlb	2	; select bank2
 10632  00EB  0843               	movf	(_Load^(0+256)+5),w
 10633  00EC  0020               	movlb	0	; select bank0
 10634  00ED  01A2               	clrf	___lwdiv@dividend
 10635  00EE  07A2               	addwf	___lwdiv@dividend,f
 10636  00EF  3192  2281  3180   	fcall	___lwdiv
 10637  00F2  0020               	movlb	0	; select bank0
 10638  00F3  0821               	movf	?___lwdiv+1,w
 10639  00F4  0022               	movlb	2	; select bank2
 10640  00F5  01C4               	clrf	((_Load+1)^(0+256)+5)
 10641  00F6  07C4               	addwf	((_Load+1)^(0+256)+5),f
 10642  00F7  0020               	movlb	0	; select bank0
 10643  00F8  0820               	movf	?___lwdiv,w
 10644  00F9  0022               	movlb	2	; select bank2
 10645  00FA  01C3               	clrf	(_Load^(0+256)+5)
 10646  00FB  07C3               	addwf	(_Load^(0+256)+5),f
 10647                           
 10648                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10649  00FC  3003               	movlw	3
 10650  00FD  0020               	movlb	0	; select bank0
 10651  00FE  00A0               	movwf	___lwdiv@divisor
 10652  00FF  3000               	movlw	0
 10653  0100  00A1               	movwf	___lwdiv@divisor+1
 10654  0101  0022               	movlb	2	; select bank2
 10655  0102  0846               	movf	((_Load+1)^(0+256)+7),w
 10656  0103  0020               	movlb	0	; select bank0
 10657  0104  01A3               	clrf	___lwdiv@dividend+1
 10658  0105  07A3               	addwf	___lwdiv@dividend+1,f
 10659  0106  0022               	movlb	2	; select bank2
 10660  0107  0845               	movf	(_Load^(0+256)+7),w
 10661  0108  0020               	movlb	0	; select bank0
 10662  0109  01A2               	clrf	___lwdiv@dividend
 10663  010A  07A2               	addwf	___lwdiv@dividend,f
 10664  010B  3192  2281  3180   	fcall	___lwdiv
 10665  010E  0020               	movlb	0	; select bank0
 10666  010F  0821               	movf	?___lwdiv+1,w
 10667  0110  0022               	movlb	2	; select bank2
 10668  0111  01C6               	clrf	((_Load+1)^(0+256)+7)
 10669  0112  07C6               	addwf	((_Load+1)^(0+256)+7),f
 10670  0113  0020               	movlb	0	; select bank0
 10671  0114  0820               	movf	?___lwdiv,w
 10672  0115  0022               	movlb	2	; select bank2
 10673  0116  01C5               	clrf	(_Load^(0+256)+7)
 10674  0117  07C5               	addwf	(_Load^(0+256)+7),f
 10675                           
 10676                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10677  0118  319F  276B  3180   	fcall	_setLoad_AH_AL_Restore
 10678                           
 10679                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10680  011B  0022               	movlb	2	; select bank2
 10681  011C  0846               	movf	((_Load+1)^(0+256)+7),w
 10682  011D  0244               	subwf	((_Load+1)^(0+256)+5),w
 10683  011E  1D03               	skipz
 10684  011F  2922               	goto	u11665
 10685  0120  0845               	movf	(_Load^(0+256)+7),w
 10686  0121  0243               	subwf	(_Load^(0+256)+5),w
 10687  0122                     u11665:	
 10688  0122  1C03               	skipc
 10689  0123  0008               	return
 10690                           
 10691                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10692  0124  3005               	movlw	5
 10693  0125  3E3E               	addlw	_Load& (0+255)
 10694  0126  0086               	movwf	6
 10695  0127  3001               	movlw	1	; select bank2/3
 10696  0128  0087               	movwf	7
 10697  0129  0945               	comf	(_Load^(0+256)+7),w
 10698  012A  0020               	movlb	0	; select bank0
 10699  012B  00A8               	movwf	??_Load_Main
 10700  012C  0022               	movlb	2	; select bank2
 10701  012D  0946               	comf	((_Load+1)^(0+256)+7),w
 10702  012E  0020               	movlb	0	; select bank0
 10703  012F  00A9               	movwf	??_Load_Main+1
 10704  0130  0AA8               	incf	??_Load_Main,f
 10705  0131  1903               	skipnz
 10706  0132  0AA9               	incf	??_Load_Main+1,f
 10707  0133  3F40               	moviw [0]fsr1
 10708  0134  0728               	addwf	??_Load_Main,w
 10709  0135  0022               	movlb	2	; select bank2
 10710  0136  00DD               	movwf	(_Load^(0+256)+31)
 10711  0137  3F41               	moviw [1]fsr1
 10712  0138  0020               	movlb	0	; select bank0
 10713  0139  3D29               	addwfc	??_Load_Main+1,w
 10714  013A  0022               	movlb	2	; select bank2
 10715  013B  00DE               	movwf	(_Load^(0+256)+32)
 10716                           
 10717                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10718  013C  01C3               	clrf	(_Load^(0+256)+5)
 10719  013D  01C4               	clrf	((_Load+1)^(0+256)+5)
 10720                           
 10721                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10722  013E  01C5               	clrf	(_Load^(0+256)+7)
 10723  013F  01C6               	clrf	((_Load+1)^(0+256)+7)
 10724                           
 10725                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10726  0140  1DBE               	btfss	_Load^(0+256),3
 10727  0141  299B               	goto	l10140
 10728                           
 10729                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10730  0142  3002               	movlw	2
 10731  0143  0263               	subwf	(_Load^(0+256)+37),w
 10732  0144  1803               	skipnc
 10733  0145  299B               	goto	l10140
 10734                           
 10735                           ;OverLoad_B1.c: 115: Load.Count++;
 10736  0146  3001               	movlw	1
 10737  0147  0020               	movlb	0	; select bank0
 10738  0148  00A8               	movwf	??_Load_Main
 10739  0149  0828               	movf	??_Load_Main,w
 10740  014A  0022               	movlb	2	; select bank2
 10741  014B  07E3               	addwf	(_Load^(0+256)+37),f
 10742                           
 10743                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10744  014C  319B  23AD  3180   	fcall	_getDimmer_Load_Status
 10745  014F  0020               	movlb	0	; select bank0
 10746  0150  00A8               	movwf	??_Load_Main
 10747  0151  0828               	movf	??_Load_Main,w
 10748  0152  00AE               	movwf	Load_Main@Load_RunStatus
 10749                           
 10750                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10751  0153  319B  23E5  3180   	fcall	_getMain_Lights_Count
 10752  0156  0020               	movlb	0	; select bank0
 10753  0157  00A8               	movwf	??_Load_Main
 10754  0158  0828               	movf	??_Load_Main,w
 10755  0159  00AF               	movwf	Load_Main@LightsCount
 10756                           
 10757                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10758  015A  0022               	movlb	2	; select bank2
 10759  015B  0863               	movf	(_Load^(0+256)+37),w
 10760  015C  3A01               	xorlw	1
 10761  015D  1D03               	skipz
 10762  015E  2963               	goto	l10126
 10763                           
 10764                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10765  015F  3074               	movlw	116
 10766  0160  00E1               	movwf	(_Load^(0+256)+35)
 10767  0161  3004               	movlw	4
 10768  0162  2970               	goto	L6
 10769  0163                     l10126:	
 10770                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10771                           
 10772  0163  0863               	movf	(_Load^(0+256)+37),w
 10773  0164  3A02               	xorlw	2
 10774  0165  1D03               	skipz
 10775  0166  299B               	goto	l10140
 10776                           
 10777                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10778  0167  0020               	movlb	0	; select bank0
 10779  0168  082F               	movf	Load_Main@LightsCount,w
 10780  0169  3A01               	xorlw	1
 10781  016A  1D03               	skipz
 10782  016B  2972               	goto	l10132
 10783                           
 10784                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.6*57);
 10785  016C  305B               	movlw	91
 10786  016D  0022               	movlb	2	; select bank2
 10787  016E  00E1               	movwf	(_Load^(0+256)+35)
 10788  016F  3000               	movlw	0
 10789  0170                     L6:	
 10790  0170  00E2               	movwf	(_Load^(0+256)+36)
 10791                           
 10792                           ;OverLoad_B1.c: 130: } else {
 10793  0171  299B               	goto	l10140
 10794  0172                     l10132:	
 10795                           
 10796                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10797  0172  0020               	movlb	0	; select bank0
 10798  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 10799  0174  1D03               	skipz
 10800  0175  298F               	goto	l10136
 10801                           
 10802                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.6*57) * LightsCount;
 10803  0176  082F               	movf	Load_Main@LightsCount,w
 10804  0177  00A8               	movwf	??_Load_Main
 10805  0178  01A9               	clrf	??_Load_Main+1
 10806  0179  0828               	movf	??_Load_Main,w
 10807  017A  00A0               	movwf	___wmul@multiplier
 10808  017B  0829               	movf	??_Load_Main+1,w
 10809  017C  00A1               	movwf	___wmul@multiplier+1
 10810  017D  305B               	movlw	91
 10811  017E  00A2               	movwf	___wmul@multiplicand
 10812  017F  3000               	movlw	0
 10813  0180  00A3               	movwf	___wmul@multiplicand+1
 10814  0181  319F  27A4  3180   	fcall	___wmul
 10815  0184  0020               	movlb	0	; select bank0
 10816  0185  0821               	movf	?___wmul+1,w
 10817  0186  0022               	movlb	2	; select bank2
 10818  0187  01E2               	clrf	((_Load+1)^(0+256)+35)
 10819  0188  07E2               	addwf	((_Load+1)^(0+256)+35),f
 10820  0189  0020               	movlb	0	; select bank0
 10821  018A  0820               	movf	?___wmul,w
 10822  018B  0022               	movlb	2	; select bank2
 10823  018C  01E1               	clrf	(_Load^(0+256)+35)
 10824  018D  07E1               	addwf	(_Load^(0+256)+35),f
 10825                           
 10826                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10827  018E  299B               	goto	l10140
 10828  018F                     l10136:	
 10829  018F  0020               	movlb	0	; select bank0
 10830  0190  082E               	movf	Load_Main@Load_RunStatus,w
 10831  0191  3A01               	xorlw	1
 10832  0192  1D03               	skipz
 10833  0193  299B               	goto	l10140
 10834                           
 10835                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10836  0194  0022               	movlb	2	; select bank2
 10837  0195  0847               	movf	(_Load^(0+256)+9),w
 10838  0196  3E5B               	addlw	91
 10839  0197  00E1               	movwf	(_Load^(0+256)+35)
 10840  0198  3000               	movlw	0
 10841  0199  3D48               	addwfc	((_Load+1)^(0+256)+9),w
 10842  019A  00E2               	movwf	((_Load+1)^(0+256)+35)
 10843  019B                     l10140:	
 10844                           
 10845                           ;OverLoad_B1.c: 135: }
 10846                           ;OverLoad_B1.c: 136: }
 10847                           ;OverLoad_B1.c: 137: }
 10848                           ;OverLoad_B1.c: 138: }
 10849                           ;OverLoad_B1.c: 139: }
 10850                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10851  019B  0022               	movlb	2	; select bank2
 10852  019C  0862               	movf	((_Load+1)^(0+256)+35),w
 10853  019D  025E               	subwf	((_Load+1)^(0+256)+31),w
 10854  019E  1D03               	skipz
 10855  019F  29A2               	goto	u11745
 10856  01A0  0861               	movf	(_Load^(0+256)+35),w
 10857  01A1  025D               	subwf	(_Load^(0+256)+31),w
 10858  01A2                     u11745:	
 10859  01A2  1C03               	skipc
 10860  01A3  29C1               	goto	l10156
 10861                           
 10862                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10863  01A4  0020               	movlb	0	; select bank0
 10864  01A5  082F               	movf	Load_Main@LightsCount,w
 10865  01A6  3A01               	xorlw	1
 10866  01A7  1903               	skipnz
 10867  01A8  29AB               	goto	l10146
 10868  01A9  3003               	movlw	3
 10869  01AA  29AC               	goto	L7
 10870  01AB                     l10146:	
 10871  01AB  3002               	movlw	2
 10872  01AC                     L7:	
 10873  01AC  00AB               	movwf	_Load_Main$3948
 10874  01AD  3000               	movlw	0
 10875  01AE  00AC               	movwf	_Load_Main$3948+1
 10876  01AF  082B               	movf	_Load_Main$3948,w
 10877  01B0  00A8               	movwf	??_Load_Main
 10878  01B1  0828               	movf	??_Load_Main,w
 10879  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 10880                           
 10881                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10882  01B3  3001               	movlw	1
 10883  01B4  00A8               	movwf	??_Load_Main
 10884  01B5  0828               	movf	??_Load_Main,w
 10885  01B6  0022               	movlb	2	; select bank2
 10886  01B7  07E4               	addwf	(_Load^(0+256)+38),f
 10887                           
 10888                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10889  01B8  0864               	movf	(_Load^(0+256)+38),w
 10890  01B9  0020               	movlb	0	; select bank0
 10891  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 10892  01BB  1803               	skipnc
 10893  01BC  0008               	return
 10894                           
 10895                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10896  01BD  0022               	movlb	2	; select bank2
 10897  01BE  01E4               	clrf	(_Load^(0+256)+38)
 10898                           
 10899                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10900  01BF  16BE               	bsf	_Load^(0+256),5
 10901                           
 10902                           ;OverLoad_B1.c: 168: }
 10903                           ;OverLoad_B1.c: 169: } else {
 10904  01C0  0008               	return
 10905  01C1                     l10156:	
 10906                           
 10907                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10908  01C1  01E4               	clrf	(_Load^(0+256)+38)
 10909                           
 10910                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10911  01C2  1DBE               	btfss	_Load^(0+256),3
 10912  01C3  0008               	return
 10913                           
 10914                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10915  01C4  3001               	movlw	1
 10916  01C5  0020               	movlb	0	; select bank0
 10917  01C6  00A8               	movwf	??_Load_Main
 10918  01C7  0828               	movf	??_Load_Main,w
 10919  01C8  0022               	movlb	2	; select bank2
 10920  01C9  07E5               	addwf	(_Load^(0+256)+39),f
 10921                           
 10922                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10923  01CA  3003               	movlw	3
 10924  01CB  0265               	subwf	(_Load^(0+256)+39),w
 10925  01CC  1C03               	skipc
 10926  01CD  0008               	return
 10927                           
 10928                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10929  01CE  01E5               	clrf	(_Load^(0+256)+39)
 10930                           
 10931                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10932  01CF  17BE               	bsf	_Load^(0+256),7
 10933                           
 10934                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10935  01D0  11BE               	bcf	_Load^(0+256),3
 10936                           
 10937                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10938  01D1  01E3               	clrf	(_Load^(0+256)+37)
 10939                           
 10940                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10941  01D2  085E               	movf	((_Load+1)^(0+256)+31),w
 10942  01D3  01C8               	clrf	((_Load+1)^(0+256)+9)
 10943  01D4  07C8               	addwf	((_Load+1)^(0+256)+9),f
 10944  01D5  085D               	movf	(_Load^(0+256)+31),w
 10945  01D6  01C7               	clrf	(_Load^(0+256)+9)
 10946  01D7  07C7               	addwf	(_Load^(0+256)+9),f
 10947                           
 10948                           ;OverLoad_B1.c: 182: }
 10949                           ;OverLoad_B1.c: 183: }
 10950                           ;OverLoad_B1.c: 206: }
 10951                           ;OverLoad_B1.c: 207: }
 10952                           ;OverLoad_B1.c: 208: }
 10953                           ;OverLoad_B1.c: 209: } else {
 10954  01D8  0008               	return
 10955  01D9                     l1632:	
 10956                           
 10957                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10958  01D9  163E               	bsf	_Load^(0+256),4
 10959                           
 10960                           ;OverLoad_B1.c: 211: }
 10961                           ;OverLoad_B1.c: 212: } else {
 10962  01DA  0008               	return
 10963  01DB                     l1631:	
 10964                           
 10965                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10966  01DB  1D3E               	btfss	_Load^(0+256),2
 10967  01DC  29EE               	goto	l10192
 10968                           
 10969                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 10970  01DD  113E               	bcf	_Load^(0+256),2
 10971                           
 10972                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 10973  01DE  123E               	bcf	_Load^(0+256),4
 10974                           
 10975                           ;OverLoad_B1.c: 218: Load.Time = 0;
 10976  01DF  01BF               	clrf	(_Load^(0+256)+1)
 10977  01E0  01C0               	clrf	((_Load+1)^(0+256)+1)
 10978                           
 10979                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 10980  01E1  319F  276B  3180   	fcall	_setLoad_AH_AL_Restore
 10981                           
 10982                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 10983  01E4  0022               	movlb	2	; select bank2
 10984  01E5  01E4               	clrf	(_Load^(0+256)+38)
 10985                           
 10986                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 10987  01E6  01E5               	clrf	(_Load^(0+256)+39)
 10988                           
 10989                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 10990  01E7  01C3               	clrf	(_Load^(0+256)+5)
 10991  01E8  01C4               	clrf	((_Load+1)^(0+256)+5)
 10992                           
 10993                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 10994  01E9  01C5               	clrf	(_Load^(0+256)+7)
 10995  01EA  01C6               	clrf	((_Load+1)^(0+256)+7)
 10996                           
 10997                           ;OverLoad_B1.c: 231: Load.Run = 0;
 10998  01EB  11BE               	bcf	_Load^(0+256),3
 10999                           
 11000                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11001  01EC  01E3               	clrf	(_Load^(0+256)+37)
 11002                           
 11003                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11004  01ED  13BE               	bcf	_Load^(0+256),7
 11005  01EE                     l10192:	
 11006                           
 11007                           ;OverLoad_B1.c: 255: }
 11008                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11009  01EE  1EBE               	btfss	_Load^(0+256),5
 11010  01EF  0008               	return
 11011                           
 11012                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11013  01F0  3001               	movlw	1
 11014  01F1  07C1               	addwf	(_Load^(0+256)+3),f
 11015  01F2  3000               	movlw	0
 11016  01F3  3DC2               	addwfc	((_Load+1)^(0+256)+3),f
 11017                           
 11018                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11019  01F4  3001               	movlw	1
 11020  01F5  0242               	subwf	((_Load+1)^(0+256)+3),w
 11021  01F6  30F4               	movlw	244
 11022  01F7  1903               	skipnz
 11023  01F8  0241               	subwf	(_Load^(0+256)+3),w
 11024  01F9  1C03               	skipc
 11025  01FA  0008               	return
 11026                           
 11027                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11028  01FB  01C1               	clrf	(_Load^(0+256)+3)
 11029  01FC  01C2               	clrf	((_Load+1)^(0+256)+3)
 11030                           
 11031                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11032  01FD  12BE               	bcf	_Load^(0+256),5
 11033                           
 11034                           ;OverLoad_B1.c: 261: }
 11035                           ;OverLoad_B1.c: 262: }
 11036                           ;OverLoad_B1.c: 263: }
 11037                           ;OverLoad_B1.c: 264: } else {
 11038  01FE  0008               	return
 11039  01FF                     l1621:	
 11040                           
 11041                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11042  01FF  0021               	movlb	1	; select bank1
 11043  0200  1C2E               	btfss	_myMain^(0+128),0
 11044  0201  0008               	return
 11045                           
 11046                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11047  0202  0022               	movlb	2	; select bank2
 11048  0203  143E               	bsf	_Load^(0+256),0
 11049  0204  0008               	return
 11050  0205                     __end_of_Load_Main:	
 11051                           
 11052                           	psect	text63
 11053  1BE5                     __ptext63:	
 11054 ;; *************** function _getMain_Lights_Count *****************
 11055 ;; Defined at:
 11056 ;;		line 459 in file "../src/Main_B1.c"
 11057 ;; Parameters:    Size  Location     Type
 11058 ;;		None
 11059 ;; Auto vars:     Size  Location     Type
 11060 ;;  status1         1    1[BANK0 ] unsigned char 
 11061 ;;  count           1    0[BANK0 ] unsigned char 
 11062 ;; Return value:  Size  Location     Type
 11063 ;;                  1    wreg      unsigned char 
 11064 ;; Registers used:
 11065 ;;		wreg, status,2
 11066 ;; Tracked objects:
 11067 ;;		On entry : 0/0
 11068 ;;		On exit  : 0/0
 11069 ;;		Unchanged: 0/0
 11070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11074 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11075 ;;Total ram usage:        2 bytes
 11076 ;; Hardware stack levels used:    1
 11077 ;; Hardware stack levels required when called:    5
 11078 ;; This function calls:
 11079 ;;		Nothing
 11080 ;; This function is called by:
 11081 ;;		_Load_Main
 11082 ;; This function uses a non-reentrant model
 11083 ;;
 11084                           
 11085                           
 11086                           ;psect for function _getMain_Lights_Count
 11087  1BE5                     _getMain_Lights_Count:	
 11088                           
 11089                           ;Main_B1.c: 460: char count = 0;
 11090                           
 11091                           ;incstack = 0
 11092                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11093  1BE5  0020               	movlb	0	; select bank0
 11094  1BE6  01A0               	clrf	getMain_Lights_Count@count
 11095                           
 11096                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11097  1BE7  3000               	movlw	0
 11098  1BE8  0021               	movlb	1	; select bank1
 11099  1BE9  19BB               	btfsc	_DimmerIntr1^(0+128),3
 11100  1BEA  3001               	movlw	1
 11101  1BEB  0020               	movlb	0	; select bank0
 11102  1BEC  00A1               	movwf	getMain_Lights_Count@status1
 11103                           
 11104                           ;Main_B1.c: 487: return count = status1;
 11105  1BED  0821               	movf	getMain_Lights_Count@status1,w
 11106  1BEE  00A0               	movwf	getMain_Lights_Count@count
 11107  1BEF  0008               	return
 11108  1BF0                     __end_of_getMain_Lights_Count:	
 11109                           
 11110                           	psect	text64
 11111  1BAD                     __ptext64:	
 11112 ;; *************** function _getDimmer_Load_Status *****************
 11113 ;; Defined at:
 11114 ;;		line 1148 in file "../src/Dimmer_B1.c"
 11115 ;; Parameters:    Size  Location     Type
 11116 ;;		None
 11117 ;; Auto vars:     Size  Location     Type
 11118 ;;  status          1    0[BANK0 ] unsigned char 
 11119 ;; Return value:  Size  Location     Type
 11120 ;;                  1    wreg      unsigned char 
 11121 ;; Registers used:
 11122 ;;		wreg, status,2
 11123 ;; Tracked objects:
 11124 ;;		On entry : 0/0
 11125 ;;		On exit  : 0/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;Total ram usage:        1 bytes
 11133 ;; Hardware stack levels used:    1
 11134 ;; Hardware stack levels required when called:    5
 11135 ;; This function calls:
 11136 ;;		Nothing
 11137 ;; This function is called by:
 11138 ;;		_Load_Main
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           
 11143                           ;psect for function _getDimmer_Load_Status
 11144  1BAD                     _getDimmer_Load_Status:	
 11145                           
 11146                           ;Dimmer_B1.c: 1149: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11147                           
 11148                           ;incstack = 0
 11149                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11150  1BAD  3000               	movlw	0
 11151  1BAE  0022               	movlb	2	; select bank2
 11152  1BAF  192C               	btfsc	_Dimmer^(0+256),2
 11153  1BB0  3001               	movlw	1
 11154  1BB1  0020               	movlb	0	; select bank0
 11155  1BB2  00A0               	movwf	getDimmer_Load_Status@status
 11156                           
 11157                           ;Dimmer_B1.c: 1150: return status;
 11158  1BB3  0820               	movf	getDimmer_Load_Status@status,w
 11159  1BB4  0008               	return
 11160  1BB5                     __end_of_getDimmer_Load_Status:	
 11161                           
 11162                           	psect	text65
 11163  1BA5                     __ptext65:	
 11164 ;; *************** function _getDimmer_LoadGO *****************
 11165 ;; Defined at:
 11166 ;;		line 1142 in file "../src/Dimmer_B1.c"
 11167 ;; Parameters:    Size  Location     Type
 11168 ;;		None
 11169 ;; Auto vars:     Size  Location     Type
 11170 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11171 ;; Return value:  Size  Location     Type
 11172 ;;                  1    wreg      unsigned char 
 11173 ;; Registers used:
 11174 ;;		wreg, status,2
 11175 ;; Tracked objects:
 11176 ;;		On entry : 0/0
 11177 ;;		On exit  : 0/0
 11178 ;;		Unchanged: 0/0
 11179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;Total ram usage:        1 bytes
 11185 ;; Hardware stack levels used:    1
 11186 ;; Hardware stack levels required when called:    5
 11187 ;; This function calls:
 11188 ;;		Nothing
 11189 ;; This function is called by:
 11190 ;;		_Load_Main
 11191 ;; This function uses a non-reentrant model
 11192 ;;
 11193                           
 11194                           
 11195                           ;psect for function _getDimmer_LoadGO
 11196  1BA5                     _getDimmer_LoadGO:	
 11197                           
 11198                           ;Dimmer_B1.c: 1143: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11199                           
 11200                           ;incstack = 0
 11201                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11202  1BA5  3000               	movlw	0
 11203  1BA6  0022               	movlb	2	; select bank2
 11204  1BA7  18AC               	btfsc	_Dimmer^(0+256),1
 11205  1BA8  3001               	movlw	1
 11206  1BA9  0020               	movlb	0	; select bank0
 11207  1BAA  00A0               	movwf	getDimmer_LoadGO@loadgo
 11208                           
 11209                           ;Dimmer_B1.c: 1144: return loadgo;
 11210  1BAB  0820               	movf	getDimmer_LoadGO@loadgo,w
 11211  1BAC  0008               	return
 11212  1BAD                     __end_of_getDimmer_LoadGO:	
 11213                           
 11214                           	psect	text66
 11215  1DB7                     __ptext66:	
 11216 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11217 ;; Defined at:
 11218 ;;		line 277 in file "../src/Dimmer_B1.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;		None
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;  status          1    0[BANK0 ] unsigned char 
 11223 ;; Return value:  Size  Location     Type
 11224 ;;                  1    wreg      unsigned char 
 11225 ;; Registers used:
 11226 ;;		wreg, status,2, status,0
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;Total ram usage:        1 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; Hardware stack levels required when called:    5
 11239 ;; This function calls:
 11240 ;;		Nothing
 11241 ;; This function is called by:
 11242 ;;		_Load_Main
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           
 11247                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11248  1DB7                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11249                           
 11250                           ;Dimmer_B1.c: 278: char status = 0;
 11251                           
 11252                           ;incstack = 0
 11253                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11254  1DB7  0020               	movlb	0	; select bank0
 11255  1DB8  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11256                           
 11257                           ;Dimmer_B1.c: 289: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11258  1DB9  3000               	movlw	0
 11259  1DBA  0021               	movlb	1	; select bank1
 11260  1DBB  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 11261  1DBC  3001               	movlw	1
 11262  1DBD  0020               	movlb	0	; select bank0
 11263  1DBE  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11264                           
 11265                           ;Dimmer_B1.c: 293: if (status == 0) {
 11266  1DBF  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11267  1DC0  1D03               	skipz
 11268  1DC1  2DC8               	goto	l7078
 11269                           
 11270                           ;Dimmer_B1.c: 303: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11271  1DC2  3000               	movlw	0
 11272  1DC3  0021               	movlb	1	; select bank1
 11273  1DC4  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 11274  1DC5  3001               	movlw	1
 11275  1DC6  0020               	movlb	0	; select bank0
 11276  1DC7  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11277  1DC8                     l7078:	
 11278                           
 11279                           ;Dimmer_B1.c: 305: }
 11280                           ;Dimmer_B1.c: 307: return status;
 11281  1DC8  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11282  1DC9  0008               	return
 11283  1DCA                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11284                           
 11285                           	psect	text67
 11286  1FA4                     __ptext67:	
 11287 ;; *************** function ___wmul *****************
 11288 ;; Defined at:
 11289 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11290 ;; Parameters:    Size  Location     Type
 11291 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11292 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11293 ;; Auto vars:     Size  Location     Type
 11294 ;;  product         2    4[BANK0 ] unsigned int 
 11295 ;; Return value:  Size  Location     Type
 11296 ;;                  2    0[BANK0 ] unsigned int 
 11297 ;; Registers used:
 11298 ;;		wreg, status,2, status,0
 11299 ;; Tracked objects:
 11300 ;;		On entry : 0/0
 11301 ;;		On exit  : 0/0
 11302 ;;		Unchanged: 0/0
 11303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11304 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11307 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11308 ;;Total ram usage:        6 bytes
 11309 ;; Hardware stack levels used:    1
 11310 ;; Hardware stack levels required when called:    5
 11311 ;; This function calls:
 11312 ;;		Nothing
 11313 ;; This function is called by:
 11314 ;;		_Load_Main
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           
 11319                           ;psect for function ___wmul
 11320  1FA4                     ___wmul:	
 11321                           
 11322                           ;incstack = 0
 11323                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11324  1FA4  0020               	movlb	0	; select bank0
 11325  1FA5  01A4               	clrf	___wmul@product
 11326  1FA6  01A5               	clrf	___wmul@product+1
 11327  1FA7                     l7640:	
 11328  1FA7  1C20               	btfss	___wmul@multiplier,0
 11329  1FA8  2FAD               	goto	l2677
 11330  1FA9  0822               	movf	___wmul@multiplicand,w
 11331  1FAA  07A4               	addwf	___wmul@product,f
 11332  1FAB  0823               	movf	___wmul@multiplicand+1,w
 11333  1FAC  3DA5               	addwfc	___wmul@product+1,f
 11334  1FAD                     l2677:	
 11335  1FAD  3001               	movlw	1
 11336  1FAE                     u7575:	
 11337  1FAE  35A2               	lslf	___wmul@multiplicand,f
 11338  1FAF  0DA3               	rlf	___wmul@multiplicand+1,f
 11339  1FB0  0B89               	decfsz	9,f
 11340  1FB1  2FAE               	goto	u7575
 11341  1FB2  3001               	movlw	1
 11342  1FB3                     u7585:	
 11343  1FB3  36A1               	lsrf	___wmul@multiplier+1,f
 11344  1FB4  0CA0               	rrf	___wmul@multiplier,f
 11345  1FB5  0B89               	decfsz	9,f
 11346  1FB6  2FB3               	goto	u7585
 11347  1FB7  0821               	movf	___wmul@multiplier+1,w
 11348  1FB8  0420               	iorwf	___wmul@multiplier,w
 11349  1FB9  1D03               	skipz
 11350  1FBA  2FA7               	goto	l7640
 11351  1FBB  0825               	movf	___wmul@product+1,w
 11352  1FBC  01A1               	clrf	?___wmul+1
 11353  1FBD  07A1               	addwf	?___wmul+1,f
 11354  1FBE  0824               	movf	___wmul@product,w
 11355  1FBF  01A0               	clrf	?___wmul
 11356  1FC0  07A0               	addwf	?___wmul,f
 11357  1FC1  0008               	return
 11358  1FC2                     __end_of___wmul:	
 11359                           
 11360                           	psect	text68
 11361  1281                     __ptext68:	
 11362 ;; *************** function ___lwdiv *****************
 11363 ;; Defined at:
 11364 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;  divisor         2    0[BANK0 ] unsigned int 
 11367 ;;  dividend        2    2[BANK0 ] unsigned int 
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;  quotient        2    5[BANK0 ] unsigned int 
 11370 ;;  counter         1    7[BANK0 ] unsigned char 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  2    0[BANK0 ] unsigned int 
 11373 ;; Registers used:
 11374 ;;		wreg, status,2, status,0
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;Total ram usage:        8 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    5
 11387 ;; This function calls:
 11388 ;;		Nothing
 11389 ;; This function is called by:
 11390 ;;		_Load_Main
 11391 ;;		_setRF_Main
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           
 11396                           ;psect for function ___lwdiv
 11397  1281                     ___lwdiv:	
 11398                           
 11399                           ;incstack = 0
 11400                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11401  1281  0020               	movlb	0	; select bank0
 11402  1282  01A5               	clrf	___lwdiv@quotient
 11403  1283  01A6               	clrf	___lwdiv@quotient+1
 11404  1284  0821               	movf	___lwdiv@divisor+1,w
 11405  1285  0420               	iorwf	___lwdiv@divisor,w
 11406  1286  1903               	skipnz
 11407  1287  2AB1               	goto	l7028
 11408  1288  01A7               	clrf	___lwdiv@counter
 11409  1289  0AA7               	incf	___lwdiv@counter,f
 11410  128A                     l7016:	
 11411  128A  1BA1               	btfsc	___lwdiv@divisor+1,7
 11412  128B  2A96               	goto	l7018
 11413  128C  3001               	movlw	1
 11414  128D                     u6465:	
 11415  128D  35A0               	lslf	___lwdiv@divisor,f
 11416  128E  0DA1               	rlf	___lwdiv@divisor+1,f
 11417  128F  0B89               	decfsz	9,f
 11418  1290  2A8D               	goto	u6465
 11419  1291  3001               	movlw	1
 11420  1292  00A4               	movwf	??___lwdiv
 11421  1293  0824               	movf	??___lwdiv,w
 11422  1294  07A7               	addwf	___lwdiv@counter,f
 11423  1295  2A8A               	goto	l7016
 11424  1296                     l7018:	
 11425  1296  3001               	movlw	1
 11426  1297                     u6485:	
 11427  1297  35A5               	lslf	___lwdiv@quotient,f
 11428  1298  0DA6               	rlf	___lwdiv@quotient+1,f
 11429  1299  0B89               	decfsz	9,f
 11430  129A  2A97               	goto	u6485
 11431  129B  0821               	movf	___lwdiv@divisor+1,w
 11432  129C  0223               	subwf	___lwdiv@dividend+1,w
 11433  129D  1D03               	skipz
 11434  129E  2AA1               	goto	u6495
 11435  129F  0820               	movf	___lwdiv@divisor,w
 11436  12A0  0222               	subwf	___lwdiv@dividend,w
 11437  12A1                     u6495:	
 11438  12A1  1C03               	skipc
 11439  12A2  2AA8               	goto	l7024
 11440  12A3  0820               	movf	___lwdiv@divisor,w
 11441  12A4  02A2               	subwf	___lwdiv@dividend,f
 11442  12A5  0821               	movf	___lwdiv@divisor+1,w
 11443  12A6  3BA3               	subwfb	___lwdiv@dividend+1,f
 11444  12A7  1425               	bsf	___lwdiv@quotient,0
 11445  12A8                     l7024:	
 11446  12A8  3001               	movlw	1
 11447  12A9                     u6505:	
 11448  12A9  36A1               	lsrf	___lwdiv@divisor+1,f
 11449  12AA  0CA0               	rrf	___lwdiv@divisor,f
 11450  12AB  0B89               	decfsz	9,f
 11451  12AC  2AA9               	goto	u6505
 11452  12AD  3001               	movlw	1
 11453  12AE  02A7               	subwf	___lwdiv@counter,f
 11454  12AF  1D03               	btfss	3,2
 11455  12B0  2A96               	goto	l7018
 11456  12B1                     l7028:	
 11457  12B1  0826               	movf	___lwdiv@quotient+1,w
 11458  12B2  01A1               	clrf	?___lwdiv+1
 11459  12B3  07A1               	addwf	?___lwdiv+1,f
 11460  12B4  0825               	movf	___lwdiv@quotient,w
 11461  12B5  01A0               	clrf	?___lwdiv
 11462  12B6  07A0               	addwf	?___lwdiv,f
 11463  12B7  0008               	return
 11464  12B8                     __end_of___lwdiv:	
 11465                           
 11466                           	psect	text69
 11467  1B40                     __ptext69:	
 11468 ;; *************** function _Load_Initialization *****************
 11469 ;; Defined at:
 11470 ;;		line 9 in file "../src/OverLoad_B1.c"
 11471 ;; Parameters:    Size  Location     Type
 11472 ;;		None
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;		None
 11475 ;; Return value:  Size  Location     Type
 11476 ;;		None               void
 11477 ;; Registers used:
 11478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11488 ;;Total ram usage:        0 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    6
 11491 ;; This function calls:
 11492 ;;		_setLoad_AH_AL_Restore
 11493 ;; This function is called by:
 11494 ;;		_main
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           
 11499                           ;psect for function _Load_Initialization
 11500  1B40                     _Load_Initialization:	
 11501                           
 11502                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11503                           
 11504                           ;incstack = 0
 11505                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11506  1B40  319F  276B         	fcall	_setLoad_AH_AL_Restore
 11507  1B42  0008               	return
 11508  1B43                     __end_of_Load_Initialization:	
 11509                           
 11510                           	psect	text70
 11511  1F6B                     __ptext70:	
 11512 ;; *************** function _setLoad_AH_AL_Restore *****************
 11513 ;; Defined at:
 11514 ;;		line 292 in file "../src/OverLoad_B1.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;		None
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;  i               1    1[BANK0 ] unsigned char 
 11519 ;; Return value:  Size  Location     Type
 11520 ;;		None               void
 11521 ;; Registers used:
 11522 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;Total ram usage:        2 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    5
 11535 ;; This function calls:
 11536 ;;		Nothing
 11537 ;; This function is called by:
 11538 ;;		_Load_Initialization
 11539 ;;		_Load_Main
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           
 11544                           ;psect for function _setLoad_AH_AL_Restore
 11545  1F6B                     _setLoad_AH_AL_Restore:	
 11546                           
 11547                           ;OverLoad_B1.c: 293: char i;
 11548                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11549                           
 11550                           ;incstack = 0
 11551                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11552  1F6B  0020               	movlb	0	; select bank0
 11553  1F6C  01A1               	clrf	setLoad_AH_AL_Restore@i
 11554  1F6D                     L8:	
 11555  1F6D  3005               	movlw	5
 11556  1F6E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11557  1F6F  1803               	btfsc	3,0
 11558  1F70  0008               	return
 11559                           
 11560                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11561  1F71  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11562  1F72  3E49               	addlw	(_Load+11)& (0+255)
 11563  1F73  0086               	movwf	6
 11564  1F74  3001               	movlw	1	; select bank2/3
 11565  1F75  0087               	movwf	7
 11566  1F76  3000               	movlw	0
 11567  1F77  3FC0               	movwi [0]fsr1
 11568  1F78  3FC1               	movwi [1]fsr1
 11569                           
 11570                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11571  1F79  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11572  1F7A  3E53               	addlw	(_Load+21)& (0+255)
 11573  1F7B  0086               	movwf	6
 11574  1F7C  3001               	movlw	1	; select bank2/3
 11575  1F7D  0087               	movwf	7
 11576  1F7E  30FF               	movlw	255
 11577  1F7F  3FC0               	movwi [0]fsr1
 11578  1F80  30FF               	movlw	255
 11579  1F81  3FC1               	movwi [1]fsr1
 11580  1F82  3001               	movlw	1
 11581  1F83  00A0               	movwf	??_setLoad_AH_AL_Restore
 11582  1F84  0820               	movf	??_setLoad_AH_AL_Restore,w
 11583  1F85  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11584  1F86  2F6D               	goto	L8
 11585  1F87                     __end_of_setLoad_AH_AL_Restore:	
 11586                           
 11587                           	psect	text71
 11588  1B5B                     __ptext71:	
 11589 ;; *************** function _LED_Main *****************
 11590 ;; Defined at:
 11591 ;;		line 47 in file "../src/LED_B1.c"
 11592 ;; Parameters:    Size  Location     Type
 11593 ;;		None
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;		None
 11596 ;; Return value:  Size  Location     Type
 11597 ;;		None               void
 11598 ;; Registers used:
 11599 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11600 ;; Tracked objects:
 11601 ;;		On entry : 0/0
 11602 ;;		On exit  : 0/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;Total ram usage:        0 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; Hardware stack levels required when called:    7
 11612 ;; This function calls:
 11613 ;;		_setLED_Main
 11614 ;; This function is called by:
 11615 ;;		_main
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           
 11620                           ;psect for function _LED_Main
 11621  1B5B                     _LED_Main:	
 11622                           
 11623                           ;LED_B1.c: 67: setLED_Main(99);
 11624                           
 11625                           ;incstack = 0
 11626                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11627  1B5B  3063               	movlw	99
 11628  1B5C  3192  2214         	fcall	_setLED_Main
 11629  1B5E  0008               	return
 11630  1B5F                     __end_of_LED_Main:	
 11631                           
 11632                           	psect	text72
 11633  1214                     __ptext72:	
 11634 ;; *************** function _setLED_Main *****************
 11635 ;; Defined at:
 11636 ;;		line 229 in file "../src/LED_B1.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;  led             1    wreg     unsigned char 
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;  led             1    4[BANK0 ] unsigned char 
 11641 ;; Return value:  Size  Location     Type
 11642 ;;		None               void
 11643 ;; Registers used:
 11644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;Total ram usage:        3 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    6
 11657 ;; This function calls:
 11658 ;;		_LedPointSelect
 11659 ;; This function is called by:
 11660 ;;		_LED_Main
 11661 ;; This function uses a non-reentrant model
 11662 ;;
 11663                           
 11664                           
 11665                           ;psect for function _setLED_Main
 11666  1214                     _setLED_Main:	
 11667                           
 11668                           ;incstack = 0
 11669                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11670                           ;setLED_Main@led stored from wreg
 11671  1214  0020               	movlb	0	; select bank0
 11672  1215  00A4               	movwf	setLED_Main@led
 11673                           
 11674                           ;LED_B1.c: 230: LedPointSelect(led);
 11675  1216  0824               	movf	setLED_Main@led,w
 11676  1217  319C  2442  3192   	fcall	_LedPointSelect
 11677                           
 11678                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11679  121A  0021               	movlb	1	; select bank1
 11680  121B  084B               	movf	_LED^(0+128),w
 11681  121C  0086               	movwf	6
 11682  121D  3001               	movlw	1	; select bank2/3
 11683  121E  0087               	movwf	7
 11684  121F  1C81               	btfss	1,1
 11685  1220  0008               	return
 11686                           
 11687                           ;LED_B1.c: 232: LED->Time++;
 11688  1221  0A4B               	incf	_LED^(0+128),w
 11689  1222  0086               	movwf	6
 11690  1223  3001               	movlw	1	; select bank2/3
 11691  1224  0087               	movwf	7
 11692  1225  3001               	movlw	1
 11693  1226  0781               	addwf	1,f
 11694  1227  3141               	addfsr 1,1
 11695  1228  1803               	skipnc
 11696  1229  0A81               	incf	1,f
 11697                           
 11698                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11699  122A  0A4B               	incf	_LED^(0+128),w
 11700  122B  0086               	movwf	6
 11701  122C  3001               	movlw	1	; select bank2/3
 11702  122D  0087               	movwf	7
 11703  122E  3F40               	moviw [0]fsr1
 11704  122F  0020               	movlb	0	; select bank0
 11705  1230  00A2               	movwf	??_setLED_Main
 11706  1231  3F41               	moviw [1]fsr1
 11707  1232  00A3               	movwf	??_setLED_Main+1
 11708  1233  3000               	movlw	0
 11709  1234  0223               	subwf	??_setLED_Main+1,w
 11710  1235  3019               	movlw	25
 11711  1236  1903               	skipnz
 11712  1237  0222               	subwf	??_setLED_Main,w
 11713  1238  1C03               	skipc
 11714  1239  0008               	return
 11715                           
 11716                           ;LED_B1.c: 234: LED->Time = 0;
 11717  123A  0021               	movlb	1	; select bank1
 11718  123B  0A4B               	incf	_LED^(0+128),w
 11719  123C  0086               	movwf	6
 11720  123D  3001               	movlw	1	; select bank2/3
 11721  123E  0087               	movwf	7
 11722  123F  3000               	movlw	0
 11723  1240  3FC0               	movwi [0]fsr1
 11724  1241  3FC1               	movwi [1]fsr1
 11725                           
 11726                           ;LED_B1.c: 252: if (led == 99) {
 11727  1242  0020               	movlb	0	; select bank0
 11728  1243  0824               	movf	setLED_Main@led,w
 11729  1244  3A63               	xorlw	99
 11730  1245  1D03               	skipz
 11731  1246  0008               	return
 11732                           
 11733                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11734  1247  3020               	movlw	32
 11735  1248  068D               	xorwf	13,f
 11736  1249  0008               	return
 11737  124A                     __end_of_setLED_Main:	
 11738                           
 11739                           	psect	text73
 11740  1B57                     __ptext73:	
 11741 ;; *************** function _LED_Initialization *****************
 11742 ;; Defined at:
 11743 ;;		line 31 in file "../src/LED_B1.c"
 11744 ;; Parameters:    Size  Location     Type
 11745 ;;		None
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;		None
 11748 ;; Return value:  Size  Location     Type
 11749 ;;		None               void
 11750 ;; Registers used:
 11751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;Total ram usage:        0 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    8
 11764 ;; This function calls:
 11765 ;;		_setLED_Initialization
 11766 ;; This function is called by:
 11767 ;;		_main
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771                           
 11772                           ;psect for function _LED_Initialization
 11773  1B57                     _LED_Initialization:	
 11774                           
 11775                           ;LED_B1.c: 42: setLED_Initialization(99);
 11776                           
 11777                           ;incstack = 0
 11778                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11779  1B57  3063               	movlw	99
 11780  1B58  319D  256D         	fcall	_setLED_Initialization
 11781  1B5A  0008               	return
 11782  1B5B                     __end_of_LED_Initialization:	
 11783                           
 11784                           	psect	text74
 11785  1D6D                     __ptext74:	
 11786 ;; *************** function _setLED_Initialization *****************
 11787 ;; Defined at:
 11788 ;;		line 74 in file "../src/LED_B1.c"
 11789 ;; Parameters:    Size  Location     Type
 11790 ;;  led             1    wreg     unsigned char 
 11791 ;; Auto vars:     Size  Location     Type
 11792 ;;  led             1    4[BANK0 ] unsigned char 
 11793 ;; Return value:  Size  Location     Type
 11794 ;;		None               void
 11795 ;; Registers used:
 11796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11797 ;; Tracked objects:
 11798 ;;		On entry : 0/0
 11799 ;;		On exit  : 0/0
 11800 ;;		Unchanged: 0/0
 11801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;Total ram usage:        1 bytes
 11807 ;; Hardware stack levels used:    1
 11808 ;; Hardware stack levels required when called:    7
 11809 ;; This function calls:
 11810 ;;		_LedPointSelect
 11811 ;;		_setLED
 11812 ;; This function is called by:
 11813 ;;		_LED_Initialization
 11814 ;; This function uses a non-reentrant model
 11815 ;;
 11816                           
 11817                           
 11818                           ;psect for function _setLED_Initialization
 11819  1D6D                     _setLED_Initialization:	
 11820                           
 11821                           ;incstack = 0
 11822                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11823                           ;setLED_Initialization@led stored from wreg
 11824  1D6D  0020               	movlb	0	; select bank0
 11825  1D6E  00A4               	movwf	setLED_Initialization@led
 11826                           
 11827                           ;LED_B1.c: 75: LedPointSelect(led);
 11828  1D6F  0824               	movf	setLED_Initialization@led,w
 11829  1D70  319C  2442  319D   	fcall	_LedPointSelect
 11830                           
 11831                           ;LED_B1.c: 76: LED->Enable = 1;
 11832  1D73  0021               	movlb	1	; select bank1
 11833  1D74  084B               	movf	_LED^(0+128),w
 11834  1D75  0086               	movwf	6
 11835  1D76  3001               	movlw	1	; select bank2/3
 11836  1D77  0087               	movwf	7
 11837  1D78  1401               	bsf	1,0
 11838                           
 11839                           ;LED_B1.c: 77: setLED(led, 0);
 11840  1D79  0020               	movlb	0	; select bank0
 11841  1D7A  01A2               	clrf	setLED@command
 11842  1D7B  0824               	movf	setLED_Initialization@led,w
 11843  1D7C  3192  22F1         	fcall	_setLED
 11844  1D7E  0008               	return
 11845  1D7F                     __end_of_setLED_Initialization:	
 11846                           
 11847                           	psect	text75
 11848  1422                     __ptext75:	
 11849 ;; *************** function _Flash_Memory_Main *****************
 11850 ;; Defined at:
 11851 ;;		line 976 in file "../src/MCU_B1.c"
 11852 ;; Parameters:    Size  Location     Type
 11853 ;;		None
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;  key_Status      1    7[BANK0 ] unsigned char 
 11856 ;; Return value:  Size  Location     Type
 11857 ;;		None               void
 11858 ;; Registers used:
 11859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11860 ;; Tracked objects:
 11861 ;;		On entry : 0/0
 11862 ;;		On exit  : 0/0
 11863 ;;		Unchanged: 0/0
 11864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;Total ram usage:        3 bytes
 11870 ;; Hardware stack levels used:    1
 11871 ;; Hardware stack levels required when called:    8
 11872 ;; This function calls:
 11873 ;;		_Flash_Memory_Modify
 11874 ;;		_getAll_Sw_KeyStatus
 11875 ;;		_getMain_All_LightsStatus
 11876 ;; This function is called by:
 11877 ;;		_main
 11878 ;; This function uses a non-reentrant model
 11879 ;;
 11880                           
 11881                           
 11882                           ;psect for function _Flash_Memory_Main
 11883  1422                     _Flash_Memory_Main:	
 11884                           
 11885                           ;MCU_B1.c: 977: char key_Status = 0;
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11889  1422  0020               	movlb	0	; select bank0
 11890  1423  01A7               	clrf	Flash_Memory_Main@key_Status
 11891                           
 11892                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 11893  1424  319C  24F3  3194   	fcall	_getAll_Sw_KeyStatus
 11894  1427  0020               	movlb	0	; select bank0
 11895  1428  00A6               	movwf	??_Flash_Memory_Main
 11896  1429  0826               	movf	??_Flash_Memory_Main,w
 11897  142A  00A7               	movwf	Flash_Memory_Main@key_Status
 11898                           
 11899                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 11900  142B  0024               	movlb	4	; select bank4
 11901  142C  1C44               	btfss	(_Memory^(0+512)+36),0
 11902  142D  0008               	return
 11903                           
 11904                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 11905  142E  0020               	movlb	0	; select bank0
 11906  142F  01A8               	clrf	_Flash_Memory_Main$3119
 11907  1430  319B  23D0  3194   	fcall	_getMain_All_LightsStatus
 11908  1433  3800               	iorlw	0
 11909  1434  1D03               	skipz
 11910  1435  2C3C               	goto	l9990
 11911  1436  0020               	movlb	0	; select bank0
 11912  1437  08A7               	movf	Flash_Memory_Main@key_Status,f
 11913  1438  1D03               	skipz
 11914  1439  2C3C               	goto	l9990
 11915  143A  01A8               	clrf	_Flash_Memory_Main$3119
 11916  143B  0AA8               	incf	_Flash_Memory_Main$3119,f
 11917  143C                     l9990:	
 11918  143C  0020               	movlb	0	; select bank0
 11919  143D  0828               	movf	_Flash_Memory_Main$3119,w
 11920  143E  0024               	movlb	4	; select bank4
 11921  143F  10C4               	bcf	(_Memory^(0+512)+36),1
 11922  1440  1D03               	skipz
 11923  1441  14C4               	bsf	(_Memory^(0+512)+36),1
 11924                           
 11925                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 11926  1442  1CC4               	btfss	(_Memory^(0+512)+36),1
 11927  1443  2C5D               	goto	l1243
 11928                           
 11929                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 11930  1444  15C4               	bsf	(_Memory^(0+512)+36),3
 11931                           
 11932                           ;MCU_B1.c: 985: Memory.Time++;
 11933  1445  3001               	movlw	1
 11934  1446  07C2               	addwf	(_Memory^(0+512)+34),f
 11935  1447  3000               	movlw	0
 11936  1448  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11937                           
 11938                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 11939  1449  3022               	movlw	34
 11940  144A  3E20               	addlw	_Memory& (0+255)
 11941  144B  0086               	movwf	6
 11942  144C  3002               	movlw	2	; select bank4/5
 11943  144D  0087               	movwf	7
 11944  144E  3F40               	moviw [0]fsr1
 11945  144F  3A0A               	xorlw	10
 11946  1450  1D03               	skipz
 11947  1451  2C54               	goto	u11455
 11948  1452  3F41               	moviw [1]fsr1
 11949  1453  3A00               	xorlw	0
 11950  1454                     u11455:	
 11951  1454  1D03               	skipz
 11952  1455  0008               	return
 11953                           
 11954                           ;MCU_B1.c: 987: Memory.Time = 0;
 11955  1456  01C2               	clrf	(_Memory^(0+512)+34)
 11956  1457  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11957                           
 11958                           ;MCU_B1.c: 988: Memory.Modify = 0;
 11959  1458  1044               	bcf	(_Memory^(0+512)+36),0
 11960                           
 11961                           ;MCU_B1.c: 989: Memory.GO = 0;
 11962  1459  10C4               	bcf	(_Memory^(0+512)+36),1
 11963                           
 11964                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 11965  145A  318B  239E         	fcall	_Flash_Memory_Modify
 11966                           
 11967                           ;MCU_B1.c: 991: }
 11968                           ;MCU_B1.c: 992: } else {
 11969  145C  0008               	return
 11970  145D                     l1243:	
 11971                           
 11972                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 11973  145D  1DC4               	btfss	(_Memory^(0+512)+36),3
 11974  145E  0008               	return
 11975                           
 11976                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 11977  145F  11C4               	bcf	(_Memory^(0+512)+36),3
 11978                           
 11979                           ;MCU_B1.c: 995: Memory.Time = 0;
 11980  1460  01C2               	clrf	(_Memory^(0+512)+34)
 11981  1461  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11982  1462  0008               	return
 11983  1463                     __end_of_Flash_Memory_Main:	
 11984                           
 11985                           	psect	text76
 11986  1CF3                     __ptext76:	
 11987 ;; *************** function _getAll_Sw_KeyStatus *****************
 11988 ;; Defined at:
 11989 ;;		line 278 in file "../src/Switch_B1.c"
 11990 ;; Parameters:    Size  Location     Type
 11991 ;;		None
 11992 ;; Auto vars:     Size  Location     Type
 11993 ;;  status          1    1[BANK0 ] unsigned char 
 11994 ;; Return value:  Size  Location     Type
 11995 ;;                  1    wreg      unsigned char 
 11996 ;; Registers used:
 11997 ;;		wreg, status,2
 11998 ;; Tracked objects:
 11999 ;;		On entry : 0/0
 12000 ;;		On exit  : 0/0
 12001 ;;		Unchanged: 0/0
 12002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;Total ram usage:        3 bytes
 12008 ;; Hardware stack levels used:    1
 12009 ;; Hardware stack levels required when called:    5
 12010 ;; This function calls:
 12011 ;;		Nothing
 12012 ;; This function is called by:
 12013 ;;		_Flash_Memory_Main
 12014 ;; This function uses a non-reentrant model
 12015 ;;
 12016                           
 12017                           
 12018                           ;psect for function _getAll_Sw_KeyStatus
 12019  1CF3                     _getAll_Sw_KeyStatus:	
 12020                           
 12021                           ;Switch_B1.c: 279: char status = 0;
 12022                           
 12023                           ;incstack = 0
 12024                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12025  1CF3  0020               	movlb	0	; select bank0
 12026  1CF4  01A1               	clrf	getAll_Sw_KeyStatus@status
 12027                           
 12028                           ;Switch_B1.c: 302: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12029  1CF5  01A2               	clrf	_getAll_Sw_KeyStatus$6387
 12030  1CF6  0AA2               	incf	_getAll_Sw_KeyStatus$6387,f
 12031  1CF7  1F0C               	btfss	12,6	;volatile
 12032  1CF8  1A0C               	btfsc	12,4	;volatile
 12033  1CF9  2CFE               	goto	l9622
 12034  1CFA  1C0C               	btfss	12,0	;volatile
 12035  1CFB  1B8C               	btfsc	12,7	;volatile
 12036  1CFC  2CFE               	goto	l9622
 12037  1CFD  01A2               	clrf	_getAll_Sw_KeyStatus$6387
 12038  1CFE                     l9622:	
 12039  1CFE  0822               	movf	_getAll_Sw_KeyStatus$6387,w
 12040  1CFF  00A0               	movwf	??_getAll_Sw_KeyStatus
 12041  1D00  0820               	movf	??_getAll_Sw_KeyStatus,w
 12042  1D01  00A1               	movwf	getAll_Sw_KeyStatus@status
 12043                           
 12044                           ;Switch_B1.c: 306: return status;
 12045  1D02  0821               	movf	getAll_Sw_KeyStatus@status,w
 12046  1D03  0008               	return
 12047  1D04                     __end_of_getAll_Sw_KeyStatus:	
 12048                           
 12049                           	psect	text77
 12050  0B9E                     __ptext77:	
 12051 ;; *************** function _Flash_Memory_Modify *****************
 12052 ;; Defined at:
 12053 ;;		line 1053 in file "../src/MCU_B1.c"
 12054 ;; Parameters:    Size  Location     Type
 12055 ;;		None
 12056 ;; Auto vars:     Size  Location     Type
 12057 ;;  i               1    5[BANK0 ] unsigned char 
 12058 ;; Return value:  Size  Location     Type
 12059 ;;		None               void
 12060 ;; Registers used:
 12061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12062 ;; Tracked objects:
 12063 ;;		On entry : 0/0
 12064 ;;		On exit  : 0/0
 12065 ;;		Unchanged: 0/0
 12066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;Total ram usage:        2 bytes
 12072 ;; Hardware stack levels used:    1
 12073 ;; Hardware stack levels required when called:    7
 12074 ;; This function calls:
 12075 ;;		_Flash_Memory_Erasing
 12076 ;;		_Flash_Memory_Read
 12077 ;;		_Flash_Memory_Write
 12078 ;;		_setMemory_Data
 12079 ;; This function is called by:
 12080 ;;		_Flash_Memory_Main
 12081 ;; This function uses a non-reentrant model
 12082 ;;
 12083                           
 12084                           
 12085                           ;psect for function _Flash_Memory_Modify
 12086  0B9E                     _Flash_Memory_Modify:	
 12087                           
 12088                           ;MCU_B1.c: 1054: char i = 0;
 12089                           
 12090                           ;incstack = 0
 12091                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12092  0B9E  0020               	movlb	0	; select bank0
 12093  0B9F  01A5               	clrf	Flash_Memory_Modify@i
 12094                           
 12095                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12096  0BA0  01A5               	clrf	Flash_Memory_Modify@i
 12097  0BA1  3020               	movlw	32
 12098  0BA2  0225               	subwf	Flash_Memory_Modify@i,w
 12099  0BA3  1803               	btfsc	3,0
 12100  0BA4  2BBA               	goto	l9640
 12101  0BA5                     l9634:	
 12102                           
 12103                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12104  0BA5  0825               	movf	Flash_Memory_Modify@i,w
 12105  0BA6  319E  26E6  318B   	fcall	_Flash_Memory_Read
 12106  0BA9  0020               	movlb	0	; select bank0
 12107  0BAA  00A4               	movwf	??_Flash_Memory_Modify
 12108  0BAB  0825               	movf	Flash_Memory_Modify@i,w
 12109  0BAC  3E20               	addlw	_Memory& (0+255)
 12110  0BAD  0086               	movwf	6
 12111  0BAE  3002               	movlw	2	; select bank4/5
 12112  0BAF  0087               	movwf	7
 12113  0BB0  0824               	movf	??_Flash_Memory_Modify,w
 12114  0BB1  0081               	movwf	1
 12115  0BB2  3001               	movlw	1
 12116  0BB3  00A4               	movwf	??_Flash_Memory_Modify
 12117  0BB4  0824               	movf	??_Flash_Memory_Modify,w
 12118  0BB5  07A5               	addwf	Flash_Memory_Modify@i,f
 12119  0BB6  3020               	movlw	32
 12120  0BB7  0225               	subwf	Flash_Memory_Modify@i,w
 12121  0BB8  1C03               	skipc
 12122  0BB9  2BA5               	goto	l9634
 12123  0BBA                     l9640:	
 12124                           
 12125                           ;MCU_B1.c: 1057: }
 12126                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12127  0BBA  0021               	movlb	1	; select bank1
 12128  0BBB  0863               	movf	_product^(0+128),w
 12129  0BBC  0086               	movwf	6
 12130  0BBD  3002               	movlw	2	; select bank4/5
 12131  0BBE  0087               	movwf	7
 12132  0BBF  3002               	movlw	2	; select bank4/5
 12133  0BC0  3F4C               	moviw [12]fsr1
 12134  0BC1  0020               	movlb	0	; select bank0
 12135  0BC2  00A0               	movwf	setMemory_Data@data
 12136  0BC3  3000               	movlw	0
 12137  0BC4  319C  244E  318B   	fcall	_setMemory_Data
 12138                           
 12139                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12140  0BC7  0021               	movlb	1	; select bank1
 12141  0BC8  0863               	movf	_product^(0+128),w
 12142  0BC9  0086               	movwf	6
 12143  0BCA  3002               	movlw	2	; select bank4/5
 12144  0BCB  0087               	movwf	7
 12145  0BCC  3002               	movlw	2	; select bank4/5
 12146  0BCD  3F4D               	moviw [13]fsr1
 12147  0BCE  0020               	movlb	0	; select bank0
 12148  0BCF  00A0               	movwf	setMemory_Data@data
 12149  0BD0  3001               	movlw	1
 12150  0BD1  319C  244E  318B   	fcall	_setMemory_Data
 12151                           
 12152                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12153  0BD4  0021               	movlb	1	; select bank1
 12154  0BD5  0863               	movf	_product^(0+128),w
 12155  0BD6  0086               	movwf	6
 12156  0BD7  3002               	movlw	2	; select bank4/5
 12157  0BD8  0087               	movwf	7
 12158  0BD9  3002               	movlw	2	; select bank4/5
 12159  0BDA  3F4E               	moviw [14]fsr1
 12160  0BDB  0020               	movlb	0	; select bank0
 12161  0BDC  00A0               	movwf	setMemory_Data@data
 12162  0BDD  3002               	movlw	2
 12163  0BDE  319C  244E  318B   	fcall	_setMemory_Data
 12164                           
 12165                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12166  0BE1  0021               	movlb	1	; select bank1
 12167  0BE2  0863               	movf	_product^(0+128),w
 12168  0BE3  0086               	movwf	6
 12169  0BE4  3002               	movlw	2	; select bank4/5
 12170  0BE5  0087               	movwf	7
 12171  0BE6  3002               	movlw	2	; select bank4/5
 12172  0BE7  3F55               	moviw [21]fsr1
 12173  0BE8  0020               	movlb	0	; select bank0
 12174  0BE9  00A0               	movwf	setMemory_Data@data
 12175  0BEA  3003               	movlw	3
 12176  0BEB  319C  244E  318B   	fcall	_setMemory_Data
 12177                           
 12178                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12179  0BEE  0021               	movlb	1	; select bank1
 12180  0BEF  0863               	movf	_product^(0+128),w
 12181  0BF0  0086               	movwf	6
 12182  0BF1  3002               	movlw	2	; select bank4/5
 12183  0BF2  0087               	movwf	7
 12184  0BF3  3002               	movlw	2	; select bank4/5
 12185  0BF4  3F56               	moviw [22]fsr1
 12186  0BF5  0020               	movlb	0	; select bank0
 12187  0BF6  00A0               	movwf	setMemory_Data@data
 12188  0BF7  3004               	movlw	4
 12189  0BF8  319C  244E  318B   	fcall	_setMemory_Data
 12190                           
 12191                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12192  0BFB  0021               	movlb	1	; select bank1
 12193  0BFC  0863               	movf	_product^(0+128),w
 12194  0BFD  0086               	movwf	6
 12195  0BFE  3002               	movlw	2	; select bank4/5
 12196  0BFF  0087               	movwf	7
 12197  0C00  3002               	movlw	2	; select bank4/5
 12198  0C01  3F57               	moviw [23]fsr1
 12199  0C02  0020               	movlb	0	; select bank0
 12200  0C03  00A0               	movwf	setMemory_Data@data
 12201  0C04  3005               	movlw	5
 12202  0C05  319C  244E  318B   	fcall	_setMemory_Data
 12203                           
 12204                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12205  0C08  0021               	movlb	1	; select bank1
 12206  0C09  1EB8               	btfss	(_myMain^(0+128)+10),5
 12207  0C0A  2C15               	goto	l9648
 12208                           
 12209                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12210  0C0B  12B8               	bcf	(_myMain^(0+128)+10),5
 12211                           
 12212                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12213  0C0C  30AA               	movlw	170
 12214  0C0D  0020               	movlb	0	; select bank0
 12215  0C0E  00A4               	movwf	??_Flash_Memory_Modify
 12216  0C0F  0824               	movf	??_Flash_Memory_Modify,w
 12217  0C10  00A0               	movwf	setMemory_Data@data
 12218  0C11  301E               	movlw	30
 12219  0C12  319C  244E  318B   	fcall	_setMemory_Data
 12220  0C15                     l9648:	
 12221                           
 12222                           ;MCU_B1.c: 1068: }
 12223                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12224  0C15  0024               	movlb	4	; select bank4
 12225  0C16  1D44               	btfss	(_Memory^(0+512)+36),2
 12226  0C17  2C1C               	goto	l1267
 12227                           
 12228                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12229  0C18  1144               	bcf	(_Memory^(0+512)+36),2
 12230                           
 12231                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12232  0C19  0021               	movlb	1	; select bank1
 12233  0C1A  11AE               	bcf	_myMain^(0+128),3
 12234                           
 12235                           ;MCU_B1.c: 1073: myMain.First = 0;
 12236  0C1B  12AE               	bcf	_myMain^(0+128),5
 12237  0C1C                     l1267:	
 12238                           
 12239                           ;MCU_B1.c: 1075: }
 12240                           ;MCU_B1.c: 1076: GIE = 0;
 12241  0C1C  138B               	bcf	11,7	;volatile
 12242                           
 12243                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12244  0C1D  319C  245A  318B   	fcall	_Flash_Memory_Erasing
 12245                           
 12246                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12247  0C20  3191  2149         	fcall	_Flash_Memory_Write
 12248                           
 12249                           ;MCU_B1.c: 1079: GIE = 1;
 12250  0C22  178B               	bsf	11,7	;volatile
 12251  0C23  0008               	return
 12252  0C24                     __end_of_Flash_Memory_Modify:	
 12253                           
 12254                           	psect	text78
 12255  1C5A                     __ptext78:	
 12256 ;; *************** function _Flash_Memory_Erasing *****************
 12257 ;; Defined at:
 12258 ;;		line 1042 in file "../src/MCU_B1.c"
 12259 ;; Parameters:    Size  Location     Type
 12260 ;;		None
 12261 ;; Auto vars:     Size  Location     Type
 12262 ;;		None
 12263 ;; Return value:  Size  Location     Type
 12264 ;;		None               void
 12265 ;; Registers used:
 12266 ;;		wreg, status,2, status,0, pclath, cstack
 12267 ;; Tracked objects:
 12268 ;;		On entry : 0/0
 12269 ;;		On exit  : 0/0
 12270 ;;		Unchanged: 0/0
 12271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12276 ;;Total ram usage:        0 bytes
 12277 ;; Hardware stack levels used:    1
 12278 ;; Hardware stack levels required when called:    6
 12279 ;; This function calls:
 12280 ;;		_Flash_Memory_Unlock
 12281 ;; This function is called by:
 12282 ;;		_Flash_Memory_Modify
 12283 ;; This function uses a non-reentrant model
 12284 ;;
 12285                           
 12286                           
 12287                           ;psect for function _Flash_Memory_Erasing
 12288  1C5A                     _Flash_Memory_Erasing:	
 12289                           
 12290                           ;MCU_B1.c: 1043: CFGS = 0;
 12291                           
 12292                           ;incstack = 0
 12293                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12294  1C5A  0023               	movlb	3	; select bank3
 12295  1C5B  1315               	bcf	21,6	;volatile
 12296                           
 12297                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12298  1C5C  3030               	movlw	48
 12299  1C5D  0092               	movwf	18	;volatile
 12300                           
 12301                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12302  1C5E  0191               	clrf	17	;volatile
 12303                           
 12304                           ;MCU_B1.c: 1046: FREE = 1;
 12305  1C5F  1615               	bsf	21,4	;volatile
 12306                           
 12307                           ;MCU_B1.c: 1047: WREN = 1;
 12308  1C60  1515               	bsf	21,2	;volatile
 12309                           
 12310                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12311  1C61  319B  23C7         	fcall	_Flash_Memory_Unlock
 12312                           
 12313                           ;MCU_B1.c: 1049: WREN = 0;
 12314  1C63  0023               	movlb	3	; select bank3
 12315  1C64  1115               	bcf	21,2	;volatile
 12316  1C65  0008               	return
 12317  1C66                     __end_of_Flash_Memory_Erasing:	
 12318                           
 12319                           	psect	text79
 12320  0629                     __ptext79:	
 12321 ;; *************** function _Flash_Memory_Initialization *****************
 12322 ;; Defined at:
 12323 ;;		line 932 in file "../src/MCU_B1.c"
 12324 ;; Parameters:    Size  Location     Type
 12325 ;;		None
 12326 ;; Auto vars:     Size  Location     Type
 12327 ;;  value           1    5[BANK0 ] unsigned char 
 12328 ;; Return value:  Size  Location     Type
 12329 ;;		None               void
 12330 ;; Registers used:
 12331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12332 ;; Tracked objects:
 12333 ;;		On entry : 0/0
 12334 ;;		On exit  : 0/0
 12335 ;;		Unchanged: 0/0
 12336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;Total ram usage:        2 bytes
 12342 ;; Hardware stack levels used:    1
 12343 ;; Hardware stack levels required when called:    7
 12344 ;; This function calls:
 12345 ;;		_Flash_Memory_Read
 12346 ;;		_Flash_Memory_Write
 12347 ;;		_setMemory_Data
 12348 ;; This function is called by:
 12349 ;;		_main
 12350 ;; This function uses a non-reentrant model
 12351 ;;
 12352                           
 12353                           
 12354                           ;psect for function _Flash_Memory_Initialization
 12355  0629                     _Flash_Memory_Initialization:	
 12356                           
 12357                           ;MCU_B1.c: 933: char value = 0;
 12358                           
 12359                           ;incstack = 0
 12360                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12361  0629  0020               	movlb	0	; select bank0
 12362  062A  01A5               	clrf	Flash_Memory_Initialization@value
 12363                           
 12364                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12365  062B  301F               	movlw	31
 12366  062C  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12367  062F  3AAA               	xorlw	170
 12368  0630  1D03               	skipz
 12369  0631  2EAB               	goto	l9964
 12370                           
 12371                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12372  0632  3000               	movlw	0
 12373  0633  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12374  0636  0020               	movlb	0	; select bank0
 12375  0637  00A4               	movwf	??_Flash_Memory_Initialization
 12376  0638  0021               	movlb	1	; select bank1
 12377  0639  0863               	movf	_product^(0+128),w
 12378  063A  3E0C               	addlw	12
 12379  063B  0086               	movwf	6
 12380  063C  3002               	movlw	2	; select bank4/5
 12381  063D  0087               	movwf	7
 12382  063E  0020               	movlb	0	; select bank0
 12383  063F  0824               	movf	??_Flash_Memory_Initialization,w
 12384  0640  0081               	movwf	1
 12385                           
 12386                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12387  0641  3001               	movlw	1
 12388  0642  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12389  0645  0020               	movlb	0	; select bank0
 12390  0646  00A4               	movwf	??_Flash_Memory_Initialization
 12391  0647  0021               	movlb	1	; select bank1
 12392  0648  0863               	movf	_product^(0+128),w
 12393  0649  3E0D               	addlw	13
 12394  064A  0086               	movwf	6
 12395  064B  3002               	movlw	2	; select bank4/5
 12396  064C  0087               	movwf	7
 12397  064D  0020               	movlb	0	; select bank0
 12398  064E  0824               	movf	??_Flash_Memory_Initialization,w
 12399  064F  0081               	movwf	1
 12400                           
 12401                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12402  0650  3002               	movlw	2
 12403  0651  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12404  0654  0020               	movlb	0	; select bank0
 12405  0655  00A4               	movwf	??_Flash_Memory_Initialization
 12406  0656  0021               	movlb	1	; select bank1
 12407  0657  0863               	movf	_product^(0+128),w
 12408  0658  3E0E               	addlw	14
 12409  0659  0086               	movwf	6
 12410  065A  3002               	movlw	2	; select bank4/5
 12411  065B  0087               	movwf	7
 12412  065C  0020               	movlb	0	; select bank0
 12413  065D  0824               	movf	??_Flash_Memory_Initialization,w
 12414  065E  0081               	movwf	1
 12415                           
 12416                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12417  065F  3003               	movlw	3
 12418  0660  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12419  0663  0020               	movlb	0	; select bank0
 12420  0664  00A4               	movwf	??_Flash_Memory_Initialization
 12421  0665  0021               	movlb	1	; select bank1
 12422  0666  0863               	movf	_product^(0+128),w
 12423  0667  3E15               	addlw	21
 12424  0668  0086               	movwf	6
 12425  0669  3002               	movlw	2	; select bank4/5
 12426  066A  0087               	movwf	7
 12427  066B  0020               	movlb	0	; select bank0
 12428  066C  0824               	movf	??_Flash_Memory_Initialization,w
 12429  066D  0081               	movwf	1
 12430                           
 12431                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12432  066E  3004               	movlw	4
 12433  066F  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12434  0672  0020               	movlb	0	; select bank0
 12435  0673  00A4               	movwf	??_Flash_Memory_Initialization
 12436  0674  0021               	movlb	1	; select bank1
 12437  0675  0863               	movf	_product^(0+128),w
 12438  0676  3E16               	addlw	22
 12439  0677  0086               	movwf	6
 12440  0678  3002               	movlw	2	; select bank4/5
 12441  0679  0087               	movwf	7
 12442  067A  0020               	movlb	0	; select bank0
 12443  067B  0824               	movf	??_Flash_Memory_Initialization,w
 12444  067C  0081               	movwf	1
 12445                           
 12446                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12447  067D  3005               	movlw	5
 12448  067E  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12449  0681  0020               	movlb	0	; select bank0
 12450  0682  00A4               	movwf	??_Flash_Memory_Initialization
 12451  0683  0021               	movlb	1	; select bank1
 12452  0684  0863               	movf	_product^(0+128),w
 12453  0685  3E17               	addlw	23
 12454  0686  0086               	movwf	6
 12455  0687  3002               	movlw	2	; select bank4/5
 12456  0688  0087               	movwf	7
 12457  0689  0020               	movlb	0	; select bank0
 12458  068A  0824               	movf	??_Flash_Memory_Initialization,w
 12459  068B  0081               	movwf	1
 12460                           
 12461                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12462  068C  0021               	movlb	1	; select bank1
 12463  068D  0863               	movf	_product^(0+128),w
 12464  068E  3E0C               	addlw	12
 12465  068F  0086               	movwf	6
 12466  0690  3002               	movlw	2	; select bank4/5
 12467  0691  0087               	movwf	7
 12468  0692  0801               	movf	1,w
 12469  0693  3AFF               	xorlw	255
 12470  0694  1D03               	skipz
 12471  0695  0008               	return
 12472  0696  0863               	movf	_product^(0+128),w
 12473  0697  3E0D               	addlw	13
 12474  0698  0086               	movwf	6
 12475  0699  3002               	movlw	2	; select bank4/5
 12476  069A  0087               	movwf	7
 12477  069B  0801               	movf	1,w
 12478  069C  3AFF               	xorlw	255
 12479  069D  1D03               	skipz
 12480  069E  0008               	return
 12481  069F  0863               	movf	_product^(0+128),w
 12482  06A0  3E0E               	addlw	14
 12483  06A1  0086               	movwf	6
 12484  06A2  3002               	movlw	2	; select bank4/5
 12485  06A3  0087               	movwf	7
 12486  06A4  0801               	movf	1,w
 12487  06A5  3AFF               	xorlw	255
 12488  06A6  1D03               	skipz
 12489  06A7  0008               	return
 12490                           
 12491                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12492  06A8  15AE               	bsf	_myMain^(0+128),3
 12493                           
 12494                           ;MCU_B1.c: 951: myMain.First = 1;
 12495  06A9  16AE               	bsf	_myMain^(0+128),5
 12496                           
 12497                           ;MCU_B1.c: 952: }
 12498                           ;MCU_B1.c: 953: } else {
 12499  06AA  0008               	return
 12500  06AB                     l9964:	
 12501                           
 12502                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12503  06AB  30FF               	movlw	255
 12504  06AC  0020               	movlb	0	; select bank0
 12505  06AD  00A4               	movwf	??_Flash_Memory_Initialization
 12506  06AE  0824               	movf	??_Flash_Memory_Initialization,w
 12507  06AF  00A0               	movwf	setMemory_Data@data
 12508  06B0  3000               	movlw	0
 12509  06B1  319C  244E  3186   	fcall	_setMemory_Data
 12510                           
 12511                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12512  06B4  30FF               	movlw	255
 12513  06B5  0020               	movlb	0	; select bank0
 12514  06B6  00A4               	movwf	??_Flash_Memory_Initialization
 12515  06B7  0824               	movf	??_Flash_Memory_Initialization,w
 12516  06B8  00A0               	movwf	setMemory_Data@data
 12517  06B9  3001               	movlw	1
 12518  06BA  319C  244E  3186   	fcall	_setMemory_Data
 12519                           
 12520                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12521  06BD  30FF               	movlw	255
 12522  06BE  0020               	movlb	0	; select bank0
 12523  06BF  00A4               	movwf	??_Flash_Memory_Initialization
 12524  06C0  0824               	movf	??_Flash_Memory_Initialization,w
 12525  06C1  00A0               	movwf	setMemory_Data@data
 12526  06C2  3002               	movlw	2
 12527  06C3  319C  244E  3186   	fcall	_setMemory_Data
 12528                           
 12529                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12530  06C6  30FF               	movlw	255
 12531  06C7  0020               	movlb	0	; select bank0
 12532  06C8  00A4               	movwf	??_Flash_Memory_Initialization
 12533  06C9  0824               	movf	??_Flash_Memory_Initialization,w
 12534  06CA  00A0               	movwf	setMemory_Data@data
 12535  06CB  3003               	movlw	3
 12536  06CC  319C  244E  3186   	fcall	_setMemory_Data
 12537                           
 12538                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12539  06CF  30FF               	movlw	255
 12540  06D0  0020               	movlb	0	; select bank0
 12541  06D1  00A4               	movwf	??_Flash_Memory_Initialization
 12542  06D2  0824               	movf	??_Flash_Memory_Initialization,w
 12543  06D3  00A0               	movwf	setMemory_Data@data
 12544  06D4  3004               	movlw	4
 12545  06D5  319C  244E  3186   	fcall	_setMemory_Data
 12546                           
 12547                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12548  06D8  30FF               	movlw	255
 12549  06D9  0020               	movlb	0	; select bank0
 12550  06DA  00A4               	movwf	??_Flash_Memory_Initialization
 12551  06DB  0824               	movf	??_Flash_Memory_Initialization,w
 12552  06DC  00A0               	movwf	setMemory_Data@data
 12553  06DD  3005               	movlw	5
 12554  06DE  319C  244E  3186   	fcall	_setMemory_Data
 12555                           
 12556                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12557  06E1  30AA               	movlw	170
 12558  06E2  0020               	movlb	0	; select bank0
 12559  06E3  00A4               	movwf	??_Flash_Memory_Initialization
 12560  06E4  0824               	movf	??_Flash_Memory_Initialization,w
 12561  06E5  00A0               	movwf	setMemory_Data@data
 12562  06E6  301F               	movlw	31
 12563  06E7  319C  244E  3186   	fcall	_setMemory_Data
 12564                           
 12565                           ;MCU_B1.c: 966: GIE = 0;
 12566  06EA  138B               	bcf	11,7	;volatile
 12567                           
 12568                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12569  06EB  3191  2149         	fcall	_Flash_Memory_Write
 12570                           
 12571                           ;MCU_B1.c: 968: GIE = 1;
 12572  06ED  178B               	bsf	11,7	;volatile
 12573                           
 12574                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12575  06EE  0021               	movlb	1	; select bank1
 12576  06EF  15AE               	bsf	_myMain^(0+128),3
 12577                           
 12578                           ;MCU_B1.c: 970: myMain.First = 1;
 12579  06F0  16AE               	bsf	_myMain^(0+128),5
 12580                           
 12581                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12582  06F1  1638               	bsf	(_myMain^(0+128)+10),4
 12583  06F2  0008               	return
 12584  06F3                     __end_of_Flash_Memory_Initialization:	
 12585                           
 12586                           	psect	text80
 12587  1C4E                     __ptext80:	
 12588 ;; *************** function _setMemory_Data *****************
 12589 ;; Defined at:
 12590 ;;		line 1094 in file "../src/MCU_B1.c"
 12591 ;; Parameters:    Size  Location     Type
 12592 ;;  address         1    wreg     unsigned char 
 12593 ;;  data            1    0[BANK0 ] unsigned char 
 12594 ;; Auto vars:     Size  Location     Type
 12595 ;;  address         1    2[BANK0 ] unsigned char 
 12596 ;; Return value:  Size  Location     Type
 12597 ;;		None               void
 12598 ;; Registers used:
 12599 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12600 ;; Tracked objects:
 12601 ;;		On entry : 0/0
 12602 ;;		On exit  : 0/0
 12603 ;;		Unchanged: 0/0
 12604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12605 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12609 ;;Total ram usage:        3 bytes
 12610 ;; Hardware stack levels used:    1
 12611 ;; Hardware stack levels required when called:    5
 12612 ;; This function calls:
 12613 ;;		Nothing
 12614 ;; This function is called by:
 12615 ;;		_Flash_Memory_Initialization
 12616 ;;		_Flash_Memory_Modify
 12617 ;; This function uses a non-reentrant model
 12618 ;;
 12619                           
 12620                           
 12621                           ;psect for function _setMemory_Data
 12622  1C4E                     _setMemory_Data:	
 12623                           
 12624                           ;incstack = 0
 12625                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12626                           ;setMemory_Data@address stored from wreg
 12627  1C4E  0020               	movlb	0	; select bank0
 12628  1C4F  00A2               	movwf	setMemory_Data@address
 12629                           
 12630                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12631  1C50  0820               	movf	setMemory_Data@data,w
 12632  1C51  00A1               	movwf	??_setMemory_Data
 12633  1C52  0822               	movf	setMemory_Data@address,w
 12634  1C53  3E20               	addlw	_Memory& (0+255)
 12635  1C54  0086               	movwf	6
 12636  1C55  3002               	movlw	2	; select bank4/5
 12637  1C56  0087               	movwf	7
 12638  1C57  0821               	movf	??_setMemory_Data,w
 12639  1C58  0081               	movwf	1
 12640  1C59  0008               	return
 12641  1C5A                     __end_of_setMemory_Data:	
 12642                           
 12643                           	psect	text81
 12644  1149                     __ptext81:	
 12645 ;; *************** function _Flash_Memory_Write *****************
 12646 ;; Defined at:
 12647 ;;		line 1023 in file "../src/MCU_B1.c"
 12648 ;; Parameters:    Size  Location     Type
 12649 ;;		None
 12650 ;; Auto vars:     Size  Location     Type
 12651 ;;  i               1    1[BANK0 ] unsigned char 
 12652 ;; Return value:  Size  Location     Type
 12653 ;;		None               void
 12654 ;; Registers used:
 12655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12656 ;; Tracked objects:
 12657 ;;		On entry : 0/0
 12658 ;;		On exit  : 0/0
 12659 ;;		Unchanged: 0/0
 12660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;Total ram usage:        2 bytes
 12666 ;; Hardware stack levels used:    1
 12667 ;; Hardware stack levels required when called:    6
 12668 ;; This function calls:
 12669 ;;		_Flash_Memory_Unlock
 12670 ;; This function is called by:
 12671 ;;		_Flash_Memory_Initialization
 12672 ;;		_Flash_Memory_Modify
 12673 ;; This function uses a non-reentrant model
 12674 ;;
 12675                           
 12676                           
 12677                           ;psect for function _Flash_Memory_Write
 12678  1149                     _Flash_Memory_Write:	
 12679                           
 12680                           ;MCU_B1.c: 1024: char i = 0;
 12681                           
 12682                           ;incstack = 0
 12683                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12684  1149  0020               	movlb	0	; select bank0
 12685  114A  01A1               	clrf	Flash_Memory_Write@i
 12686                           
 12687                           ;MCU_B1.c: 1025: CFGS = 0;
 12688  114B  0023               	movlb	3	; select bank3
 12689  114C  1315               	bcf	21,6	;volatile
 12690                           
 12691                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12692  114D  3030               	movlw	48
 12693  114E  0092               	movwf	18	;volatile
 12694                           
 12695                           ;MCU_B1.c: 1027: PMDATH = 0;
 12696  114F  0194               	clrf	20	;volatile
 12697                           
 12698                           ;MCU_B1.c: 1028: FREE = 0;
 12699  1150  1215               	bcf	21,4	;volatile
 12700                           
 12701                           ;MCU_B1.c: 1029: LWLO = 1;
 12702  1151  1695               	bsf	21,5	;volatile
 12703                           
 12704                           ;MCU_B1.c: 1030: WREN = 1;
 12705  1152  1515               	bsf	21,2	;volatile
 12706                           
 12707                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12708  1153  0020               	movlb	0	; select bank0
 12709  1154  01A1               	clrf	Flash_Memory_Write@i
 12710  1155  3020               	movlw	32
 12711  1156  0221               	subwf	Flash_Memory_Write@i,w
 12712  1157  1803               	btfsc	3,0
 12713  1158  2971               	goto	l1257
 12714  1159                     l9434:	
 12715                           
 12716                           ;MCU_B1.c: 1032: PMADRL = i;
 12717  1159  0821               	movf	Flash_Memory_Write@i,w
 12718  115A  0023               	movlb	3	; select bank3
 12719  115B  0091               	movwf	17	;volatile
 12720                           
 12721                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12722  115C  0020               	movlb	0	; select bank0
 12723  115D  0821               	movf	Flash_Memory_Write@i,w
 12724  115E  3E20               	addlw	_Memory& (0+255)
 12725  115F  0086               	movwf	6
 12726  1160  3002               	movlw	2	; select bank4/5
 12727  1161  0087               	movwf	7
 12728  1162  0801               	movf	1,w
 12729  1163  0023               	movlb	3	; select bank3
 12730  1164  0093               	movwf	19	;volatile
 12731                           
 12732                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12733  1165  319B  23C7  3191   	fcall	_Flash_Memory_Unlock
 12734  1168  3001               	movlw	1
 12735  1169  0020               	movlb	0	; select bank0
 12736  116A  00A0               	movwf	??_Flash_Memory_Write
 12737  116B  0820               	movf	??_Flash_Memory_Write,w
 12738  116C  07A1               	addwf	Flash_Memory_Write@i,f
 12739  116D  3020               	movlw	32
 12740  116E  0221               	subwf	Flash_Memory_Write@i,w
 12741  116F  1C03               	skipc
 12742  1170  2959               	goto	l9434
 12743  1171                     l1257:	
 12744                           
 12745                           ;MCU_B1.c: 1035: }
 12746                           ;MCU_B1.c: 1036: LWLO = 0;
 12747  1171  0023               	movlb	3	; select bank3
 12748  1172  1295               	bcf	21,5	;volatile
 12749                           
 12750                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 12751  1173  319B  23C7         	fcall	_Flash_Memory_Unlock
 12752                           
 12753                           ;MCU_B1.c: 1038: WREN = 0;
 12754  1175  0023               	movlb	3	; select bank3
 12755  1176  1115               	bcf	21,2	;volatile
 12756  1177  0008               	return
 12757  1178                     __end_of_Flash_Memory_Write:	
 12758                           
 12759                           	psect	text82
 12760  1BC7                     __ptext82:	
 12761 ;; *************** function _Flash_Memory_Unlock *****************
 12762 ;; Defined at:
 12763 ;;		line 1002 in file "../src/MCU_B1.c"
 12764 ;; Parameters:    Size  Location     Type
 12765 ;;		None
 12766 ;; Auto vars:     Size  Location     Type
 12767 ;;		None
 12768 ;; Return value:  Size  Location     Type
 12769 ;;		None               void
 12770 ;; Registers used:
 12771 ;;		wreg
 12772 ;; Tracked objects:
 12773 ;;		On entry : 0/0
 12774 ;;		On exit  : 0/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;Total ram usage:        0 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; Hardware stack levels required when called:    5
 12784 ;; This function calls:
 12785 ;;		Nothing
 12786 ;; This function is called by:
 12787 ;;		_Flash_Memory_Write
 12788 ;;		_Flash_Memory_Erasing
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           
 12793                           ;psect for function _Flash_Memory_Unlock
 12794  1BC7                     _Flash_Memory_Unlock:	
 12795                           
 12796                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 12797                           
 12798                           ;incstack = 0
 12799                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12800  1BC7  3055               	movlw	85
 12801  1BC8  0023               	movlb	3	; select bank3
 12802  1BC9  0096               	movwf	22	;volatile
 12803                           
 12804                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 12805  1BCA  30AA               	movlw	170
 12806  1BCB  0096               	movwf	22	;volatile
 12807                           
 12808                           ;MCU_B1.c: 1005: WR = 1;
 12809  1BCC  1495               	bsf	21,1	;volatile
 12810                           
 12811                           ;MCU_B1.c: 1006: __nop();
 12812  1BCD  0000               	nop
 12813                           
 12814                           ;MCU_B1.c: 1007: __nop();
 12815  1BCE  0000               	nop
 12816  1BCF  0008               	return
 12817  1BD0                     __end_of_Flash_Memory_Unlock:	
 12818                           
 12819                           	psect	text83
 12820  1EE6                     __ptext83:	
 12821 ;; *************** function _Flash_Memory_Read *****************
 12822 ;; Defined at:
 12823 ;;		line 1011 in file "../src/MCU_B1.c"
 12824 ;; Parameters:    Size  Location     Type
 12825 ;;  address         1    wreg     unsigned char 
 12826 ;; Auto vars:     Size  Location     Type
 12827 ;;  address         1    2[BANK0 ] unsigned char 
 12828 ;;  ret             1    3[BANK0 ] unsigned char 
 12829 ;;  i               1    1[BANK0 ] unsigned char 
 12830 ;; Return value:  Size  Location     Type
 12831 ;;                  1    wreg      unsigned char 
 12832 ;; Registers used:
 12833 ;;		wreg, status,2
 12834 ;; Tracked objects:
 12835 ;;		On entry : 0/0
 12836 ;;		On exit  : 0/0
 12837 ;;		Unchanged: 0/0
 12838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;Total ram usage:        4 bytes
 12844 ;; Hardware stack levels used:    1
 12845 ;; Hardware stack levels required when called:    5
 12846 ;; This function calls:
 12847 ;;		Nothing
 12848 ;; This function is called by:
 12849 ;;		_Flash_Memory_Initialization
 12850 ;;		_Flash_Memory_Modify
 12851 ;; This function uses a non-reentrant model
 12852 ;;
 12853                           
 12854                           
 12855                           ;psect for function _Flash_Memory_Read
 12856  1EE6                     _Flash_Memory_Read:	
 12857                           
 12858                           ;incstack = 0
 12859                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12860                           ;Flash_Memory_Read@address stored from wreg
 12861  1EE6  0020               	movlb	0	; select bank0
 12862  1EE7  00A2               	movwf	Flash_Memory_Read@address
 12863                           
 12864                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 12865  1EE8  01A1               	clrf	Flash_Memory_Read@i
 12866  1EE9  01A3               	clrf	Flash_Memory_Read@ret
 12867                           
 12868                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 12869  1EEA  3030               	movlw	48
 12870  1EEB  0023               	movlb	3	; select bank3
 12871  1EEC  0092               	movwf	18	;volatile
 12872                           
 12873                           ;MCU_B1.c: 1014: PMADRL = address;
 12874  1EED  0020               	movlb	0	; select bank0
 12875  1EEE  0822               	movf	Flash_Memory_Read@address,w
 12876  1EEF  0023               	movlb	3	; select bank3
 12877  1EF0  0091               	movwf	17	;volatile
 12878                           
 12879                           ;MCU_B1.c: 1015: CFGS = 0;
 12880  1EF1  1315               	bcf	21,6	;volatile
 12881                           
 12882                           ;MCU_B1.c: 1016: RD = 1;
 12883  1EF2  1415               	bsf	21,0	;volatile
 12884                           
 12885                           ;MCU_B1.c: 1017: i = PMDATH;
 12886  1EF3  0814               	movf	20,w	;volatile
 12887  1EF4  0020               	movlb	0	; select bank0
 12888  1EF5  00A0               	movwf	??_Flash_Memory_Read
 12889  1EF6  0820               	movf	??_Flash_Memory_Read,w
 12890  1EF7  00A1               	movwf	Flash_Memory_Read@i
 12891                           
 12892                           ;MCU_B1.c: 1018: ret = PMDATL;
 12893  1EF8  0023               	movlb	3	; select bank3
 12894  1EF9  0813               	movf	19,w	;volatile
 12895  1EFA  0020               	movlb	0	; select bank0
 12896  1EFB  00A0               	movwf	??_Flash_Memory_Read
 12897  1EFC  0820               	movf	??_Flash_Memory_Read,w
 12898  1EFD  00A3               	movwf	Flash_Memory_Read@ret
 12899                           
 12900                           ;MCU_B1.c: 1019: return ret;
 12901  1EFE  0823               	movf	Flash_Memory_Read@ret,w
 12902  1EFF  0008               	return
 12903  1F00                     __end_of_Flash_Memory_Read:	
 12904                           
 12905                           	psect	text84
 12906  0554                     __ptext84:	
 12907 ;; *************** function _Exception_Main *****************
 12908 ;; Defined at:
 12909 ;;		line 499 in file "../src/Main_B1.c"
 12910 ;; Parameters:    Size  Location     Type
 12911 ;;		None
 12912 ;; Auto vars:     Size  Location     Type
 12913 ;;  i               2   19[BANK0 ] int 
 12914 ;;  i               2   17[BANK0 ] int 
 12915 ;;  lights          1   21[BANK0 ] unsigned char 
 12916 ;;  error           1   16[BANK0 ] unsigned char 
 12917 ;;  count           1   15[BANK0 ] unsigned char 
 12918 ;;  status          1   14[BANK0 ] unsigned char 
 12919 ;; Return value:  Size  Location     Type
 12920 ;;		None               void
 12921 ;; Registers used:
 12922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12923 ;; Tracked objects:
 12924 ;;		On entry : 0/0
 12925 ;;		On exit  : 0/0
 12926 ;;		Unchanged: 0/0
 12927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12929 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12931 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;Total ram usage:        9 bytes
 12933 ;; Hardware stack levels used:    1
 12934 ;; Hardware stack levels required when called:    7
 12935 ;; This function calls:
 12936 ;;		_getDimmerLights_Line
 12937 ;;		_getDimmerLights_Status
 12938 ;;		_getMain_All_Error_Status
 12939 ;;		_getMain_All_LightsStatus
 12940 ;;		_setBuz
 12941 ;;		_setDimmerLights_SwOff
 12942 ;;		_setLED
 12943 ;; This function is called by:
 12944 ;;		_main
 12945 ;; This function uses a non-reentrant model
 12946 ;;
 12947                           
 12948                           
 12949                           ;psect for function _Exception_Main
 12950  0554                     _Exception_Main:	
 12951                           
 12952                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12953                           
 12954                           ;incstack = 0
 12955                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12956  0554  3000               	movlw	0
 12957  0555  3191  2178  3185   	fcall	_getMain_All_Error_Status
 12958  0558  0020               	movlb	0	; select bank0
 12959  0559  00AD               	movwf	??_Exception_Main
 12960  055A  082D               	movf	??_Exception_Main,w
 12961  055B  00B0               	movwf	Exception_Main@error
 12962                           
 12963                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12964  055C  01B5               	clrf	Exception_Main@lights
 12965  055D  01AF               	clrf	Exception_Main@count
 12966  055E  0AAF               	incf	Exception_Main@count,f
 12967                           
 12968                           ;Main_B1.c: 502: char status = 0;
 12969  055F  01AE               	clrf	Exception_Main@status
 12970                           
 12971                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12972  0560  0021               	movlb	1	; select bank1
 12973  0561  1DB8               	btfss	(_myMain^(0+128)+10),3
 12974  0562  2D72               	goto	l10222
 12975                           
 12976                           ;Main_B1.c: 505: if (error == 0) {
 12977  0563  0020               	movlb	0	; select bank0
 12978  0564  08B0               	movf	Exception_Main@error,f
 12979  0565  1D03               	skipz
 12980  0566  0008               	return
 12981                           
 12982                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12983  0567  0021               	movlb	1	; select bank1
 12984  0568  11B8               	bcf	(_myMain^(0+128)+10),3
 12985                           
 12986                           ;Main_B1.c: 509: setLED(99, 10);
 12987  0569  300A               	movlw	10
 12988  056A  0020               	movlb	0	; select bank0
 12989  056B  00AD               	movwf	??_Exception_Main
 12990  056C  082D               	movf	??_Exception_Main,w
 12991  056D  00A2               	movwf	setLED@command
 12992  056E  3063               	movlw	99
 12993  056F  3192  22F1         	fcall	_setLED
 12994                           
 12995                           ;Main_B1.c: 522: }
 12996                           ;Main_B1.c: 523: } else {
 12997  0571  0008               	return
 12998  0572                     l10222:	
 12999                           
 13000                           ;Main_B1.c: 524: if (error != 0) {
 13001  0572  0020               	movlb	0	; select bank0
 13002  0573  0830               	movf	Exception_Main@error,w
 13003  0574  1903               	btfsc	3,2
 13004  0575  0008               	return
 13005                           
 13006                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13007  0576  0021               	movlb	1	; select bank1
 13008  0577  15B8               	bsf	(_myMain^(0+128)+10),3
 13009                           
 13010                           ;Main_B1.c: 527: setLED(99, 11);
 13011  0578  300B               	movlw	11
 13012  0579  0020               	movlb	0	; select bank0
 13013  057A  00AD               	movwf	??_Exception_Main
 13014  057B  082D               	movf	??_Exception_Main,w
 13015  057C  00A2               	movwf	setLED@command
 13016  057D  3063               	movlw	99
 13017  057E  3192  22F1  3185   	fcall	_setLED
 13018                           
 13019                           ;Main_B1.c: 538: switch (error) {
 13020  0581  2E1E               	goto	l10270
 13021  0582                     l10228:	
 13022                           ;Main_B1.c: 539: case 2:
 13023                           
 13024                           
 13025                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13026  0582  319B  23D0  3185   	fcall	_getMain_All_LightsStatus
 13027  0585  3A01               	xorlw	1
 13028  0586  1D03               	skipz
 13029  0587  2D91               	goto	l10232
 13030                           
 13031                           ;Main_B1.c: 547: setBuz(10, 300);
 13032  0588  302C               	movlw	44
 13033  0589  0020               	movlb	0	; select bank0
 13034  058A  00A9               	movwf	setBuz@time
 13035  058B  3001               	movlw	1
 13036  058C  00AA               	movwf	setBuz@time+1
 13037  058D  300A               	movlw	10
 13038  058E  3195  2551  3185   	fcall	_setBuz
 13039  0591                     l10232:	
 13040                           
 13041                           ;Main_B1.c: 548: }
 13042                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13043  0591  0020               	movlb	0	; select bank0
 13044  0592  01B1               	clrf	Exception_Main@i
 13045  0593  01B2               	clrf	Exception_Main@i+1
 13046  0594                     l10242:	
 13047  0594  0832               	movf	Exception_Main@i+1,w
 13048  0595  3A80               	xorlw	128
 13049  0596  00AD               	movwf	??_Exception_Main
 13050  0597  3080               	movlw	128
 13051  0598  022D               	subwf	??_Exception_Main,w
 13052  0599  1D03               	skipz
 13053  059A  2D9D               	goto	u11885
 13054  059B  082F               	movf	Exception_Main@count,w
 13055  059C  0231               	subwf	Exception_Main@i,w
 13056  059D                     u11885:	
 13057  059D  1803               	btfsc	3,0
 13058  059E  2DBF               	goto	u11880
 13059                           
 13060                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13061  059F  0020               	movlb	0	; select bank0
 13062  05A0  0831               	movf	Exception_Main@i,w
 13063  05A1  3E01               	addlw	1
 13064  05A2  319C  24D1  3185   	fcall	_getDimmerLights_Status
 13065  05A5  3A01               	xorlw	1
 13066  05A6  1D03               	skipz
 13067  05A7  2DB9               	goto	l10240
 13068                           
 13069                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13070  05A8  0021               	movlb	1	; select bank1
 13071  05A9  084A               	movf	_DimmerLights^(0+128),w
 13072  05AA  0086               	movwf	6
 13073  05AB  3001               	movlw	1	; select bank2/3
 13074  05AC  0087               	movwf	7
 13075  05AD  1401               	bsf	1,0
 13076                           
 13077                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13078  05AE  0A4A               	incf	_DimmerLights^(0+128),w
 13079  05AF  0086               	movwf	6
 13080  05B0  3001               	movlw	1	; select bank2/3
 13081  05B1  0087               	movwf	7
 13082  05B2  1001               	bcf	1,0
 13083                           
 13084                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13085  05B3  0020               	movlb	0	; select bank0
 13086  05B4  0831               	movf	Exception_Main@i,w
 13087  05B5  3E01               	addlw	1
 13088  05B6  3192  22B8  3185   	fcall	_setDimmerLights_SwOff
 13089  05B9                     l10240:	
 13090  05B9  3001               	movlw	1
 13091  05BA  0020               	movlb	0	; select bank0
 13092  05BB  07B1               	addwf	Exception_Main@i,f
 13093  05BC  3000               	movlw	0
 13094  05BD  3DB2               	addwfc	Exception_Main@i+1,f
 13095  05BE  2D94               	goto	l10242
 13096  05BF                     u11880:	
 13097  05BF  0020               	movlb	0	; select bank0
 13098  05C0  0008               	return
 13099  05C1                     l10244:	
 13100                           ;Main_B1.c: 561: case 3:
 13101                           
 13102                           ;Main_B1.c: 556: }
 13103                           ;Main_B1.c: 557: }
 13104                           ;Main_B1.c: 560: break;
 13105                           
 13106                           
 13107                           ;Main_B1.c: 563: setBuz(5, 300);
 13108  05C1  302C               	movlw	44
 13109  05C2  0020               	movlb	0	; select bank0
 13110  05C3  00A9               	movwf	setBuz@time
 13111  05C4  3001               	movlw	1
 13112  05C5  00AA               	movwf	setBuz@time+1
 13113  05C6  3005               	movlw	5
 13114  05C7  3195  2551  3185   	fcall	_setBuz
 13115                           
 13116                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13117  05CA  319B  23DA  3185   	fcall	_getDimmerLights_Line
 13118  05CD  0020               	movlb	0	; select bank0
 13119  05CE  00AD               	movwf	??_Exception_Main
 13120  05CF  082D               	movf	??_Exception_Main,w
 13121  05D0  00B5               	movwf	Exception_Main@lights
 13122                           
 13123                           ;Main_B1.c: 565: if (lights == 0) {
 13124  05D1  08B5               	movf	Exception_Main@lights,f
 13125  05D2  1D03               	skipz
 13126  05D3  2E03               	goto	l10262
 13127                           
 13128                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13129  05D4  01B3               	clrf	Exception_Main@i_3588
 13130  05D5  01B4               	clrf	Exception_Main@i_3588+1
 13131  05D6                     l10260:	
 13132  05D6  0834               	movf	Exception_Main@i_3588+1,w
 13133  05D7  3A80               	xorlw	128
 13134  05D8  00AD               	movwf	??_Exception_Main
 13135  05D9  3080               	movlw	128
 13136  05DA  022D               	subwf	??_Exception_Main,w
 13137  05DB  1D03               	skipz
 13138  05DC  2DDF               	goto	u11915
 13139  05DD  082F               	movf	Exception_Main@count,w
 13140  05DE  0233               	subwf	Exception_Main@i_3588,w
 13141  05DF                     u11915:	
 13142  05DF  1803               	btfsc	3,0
 13143  05E0  2E01               	goto	u11910
 13144                           
 13145                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13146  05E1  0020               	movlb	0	; select bank0
 13147  05E2  0833               	movf	Exception_Main@i_3588,w
 13148  05E3  3E01               	addlw	1
 13149  05E4  319C  24D1  3185   	fcall	_getDimmerLights_Status
 13150  05E7  3A01               	xorlw	1
 13151  05E8  1D03               	skipz
 13152  05E9  2DFB               	goto	l10258
 13153                           
 13154                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13155  05EA  0021               	movlb	1	; select bank1
 13156  05EB  084A               	movf	_DimmerLights^(0+128),w
 13157  05EC  0086               	movwf	6
 13158  05ED  3001               	movlw	1	; select bank2/3
 13159  05EE  0087               	movwf	7
 13160  05EF  1401               	bsf	1,0
 13161                           
 13162                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13163  05F0  0A4A               	incf	_DimmerLights^(0+128),w
 13164  05F1  0086               	movwf	6
 13165  05F2  3001               	movlw	1	; select bank2/3
 13166  05F3  0087               	movwf	7
 13167  05F4  1001               	bcf	1,0
 13168                           
 13169                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13170  05F5  0020               	movlb	0	; select bank0
 13171  05F6  0833               	movf	Exception_Main@i_3588,w
 13172  05F7  3E01               	addlw	1
 13173  05F8  3192  22B8  3185   	fcall	_setDimmerLights_SwOff
 13174  05FB                     l10258:	
 13175  05FB  3001               	movlw	1
 13176  05FC  0020               	movlb	0	; select bank0
 13177  05FD  07B3               	addwf	Exception_Main@i_3588,f
 13178  05FE  3000               	movlw	0
 13179  05FF  3DB4               	addwfc	Exception_Main@i_3588+1,f
 13180  0600  2DD6               	goto	l10260
 13181  0601                     u11910:	
 13182  0601  0020               	movlb	0	; select bank0
 13183  0602  0008               	return
 13184  0603                     l10262:	
 13185                           ;Main_B1.c: 573: }
 13186                           ;Main_B1.c: 574: }
 13187                           ;Main_B1.c: 575: } else {
 13188                           
 13189                           
 13190                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13191  0603  0020               	movlb	0	; select bank0
 13192  0604  0835               	movf	Exception_Main@lights,w
 13193  0605  319C  24D1  3185   	fcall	_getDimmerLights_Status
 13194  0608  3A01               	xorlw	1
 13195  0609  1903               	btfsc	3,2
 13196  060A  2E0D               	goto	l10264
 13197  060B  0020               	movlb	0	; select bank0
 13198  060C  0008               	return
 13199  060D                     l10264:	
 13200                           
 13201                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13202  060D  0021               	movlb	1	; select bank1
 13203  060E  084A               	movf	_DimmerLights^(0+128),w
 13204  060F  0086               	movwf	6
 13205  0610  3001               	movlw	1	; select bank2/3
 13206  0611  0087               	movwf	7
 13207  0612  1401               	bsf	1,0
 13208                           
 13209                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13210  0613  0A4A               	incf	_DimmerLights^(0+128),w
 13211  0614  0086               	movwf	6
 13212  0615  3001               	movlw	1	; select bank2/3
 13213  0616  0087               	movwf	7
 13214  0617  1001               	bcf	1,0
 13215                           
 13216                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13217  0618  0020               	movlb	0	; select bank0
 13218  0619  0835               	movf	Exception_Main@lights,w
 13219  061A  3192  22B8         	fcall	_setDimmerLights_SwOff
 13220  061C  0020               	movlb	0	; select bank0
 13221  061D  0008               	return
 13222  061E                     l10270:	
 13223                           ;Main_B1.c: 586: }
 13224                           
 13225                           ;Main_B1.c: 582: }
 13226                           ;Main_B1.c: 583: }
 13227                           ;Main_B1.c: 585: break;
 13228                           
 13229  061E  0020               	movlb	0	; select bank0
 13230  061F  0830               	movf	Exception_Main@error,w
 13231                           
 13232                           ; Switch size 1, requested type "space"
 13233                           ; Number of cases is 2, Range of values is 2 to 3
 13234                           ; switch strategies available:
 13235                           ; Name         Instructions Cycles
 13236                           ; simple_byte            7     4 (average)
 13237                           ; direct_byte           13     9 (fixed)
 13238                           ; jumptable            263     9 (fixed)
 13239                           ;	Chosen strategy is simple_byte
 13240  0620  3A02               	xorlw	2	; case 2
 13241  0621  1903               	skipnz
 13242  0622  2D82               	goto	l10228
 13243  0623  3A01               	xorlw	1	; case 3
 13244  0624  1903               	skipnz
 13245  0625  2DC1               	goto	l10244
 13246  0626  2E28               	goto	l1499
 13247  0627  0008               	return
 13248  0628                     l1499:	
 13249  0628  0008               	return
 13250  0629                     __end_of_Exception_Main:	
 13251                           
 13252                           	psect	text85
 13253  1BDA                     __ptext85:	
 13254 ;; *************** function _getDimmerLights_Line *****************
 13255 ;; Defined at:
 13256 ;;		line 1042 in file "../src/Dimmer_B1.c"
 13257 ;; Parameters:    Size  Location     Type
 13258 ;;		None
 13259 ;; Auto vars:     Size  Location     Type
 13260 ;;  line            1    0[BANK0 ] unsigned char 
 13261 ;; Return value:  Size  Location     Type
 13262 ;;                  1    wreg      unsigned char 
 13263 ;; Registers used:
 13264 ;;		wreg, status,2
 13265 ;; Tracked objects:
 13266 ;;		On entry : 0/0
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13273 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13274 ;;Total ram usage:        1 bytes
 13275 ;; Hardware stack levels used:    1
 13276 ;; Hardware stack levels required when called:    5
 13277 ;; This function calls:
 13278 ;;		Nothing
 13279 ;; This function is called by:
 13280 ;;		_Exception_Main
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           
 13285                           ;psect for function _getDimmerLights_Line
 13286  1BDA                     _getDimmerLights_Line:	
 13287                           
 13288                           ;Dimmer_B1.c: 1043: char line = 0;
 13289                           
 13290                           ;incstack = 0
 13291                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13292  1BDA  0020               	movlb	0	; select bank0
 13293  1BDB  01A0               	clrf	getDimmerLights_Line@line
 13294                           
 13295                           ;Dimmer_B1.c: 1045: if (DimmerLights1.Line == 1) {
 13296  1BDC  0023               	movlb	3	; select bank3
 13297  1BDD  1CC8               	btfss	(_DimmerLights1^(0+384)+1),1
 13298  1BDE  2BE2               	goto	l9584
 13299                           
 13300                           ;Dimmer_B1.c: 1046: line = 1;
 13301  1BDF  0020               	movlb	0	; select bank0
 13302  1BE0  01A0               	clrf	getDimmerLights_Line@line
 13303  1BE1  0AA0               	incf	getDimmerLights_Line@line,f
 13304  1BE2                     l9584:	
 13305                           
 13306                           ;Dimmer_B1.c: 1047: }
 13307                           ;Dimmer_B1.c: 1059: return line;
 13308  1BE2  0020               	movlb	0	; select bank0
 13309  1BE3  0820               	movf	getDimmerLights_Line@line,w
 13310  1BE4  0008               	return
 13311  1BE5                     __end_of_getDimmerLights_Line:	
 13312                           
 13313                           	psect	text86
 13314  1F4F                     __ptext86:	
 13315 ;; *************** function _DimmerLights_Main *****************
 13316 ;; Defined at:
 13317 ;;		line 771 in file "../src/Dimmer_B1.c"
 13318 ;; Parameters:    Size  Location     Type
 13319 ;;		None
 13320 ;; Auto vars:     Size  Location     Type
 13321 ;;		None
 13322 ;; Return value:  Size  Location     Type
 13323 ;;		None               void
 13324 ;; Registers used:
 13325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13326 ;; Tracked objects:
 13327 ;;		On entry : 0/0
 13328 ;;		On exit  : 0/0
 13329 ;;		Unchanged: 0/0
 13330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;Total ram usage:        0 bytes
 13336 ;; Hardware stack levels used:    1
 13337 ;; Hardware stack levels required when called:   10
 13338 ;; This function calls:
 13339 ;;		_getLoad_OK
 13340 ;;		_getMain_All_Error_Status
 13341 ;;		_getMain_All_LightsStatus
 13342 ;;		_setDimmerLights_Main
 13343 ;; This function is called by:
 13344 ;;		_main
 13345 ;; This function uses a non-reentrant model
 13346 ;;
 13347                           
 13348                           
 13349                           ;psect for function _DimmerLights_Main
 13350  1F4F                     _DimmerLights_Main:	
 13351                           
 13352                           ;Dimmer_B1.c: 774: if (Dimmer.LoadGO == 1) {
 13353                           
 13354                           ;incstack = 0
 13355                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13356  1F4F  0022               	movlb	2	; select bank2
 13357  1F50  1CAC               	btfss	_Dimmer^(0+256),1
 13358  1F51  2F67               	goto	l9944
 13359                           
 13360                           ;Dimmer_B1.c: 775: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13361  1F52  319B  239D  319F   	fcall	_getLoad_OK
 13362  1F55  3A01               	xorlw	1
 13363  1F56  1903               	skipnz
 13364  1F57  2F65               	goto	l757
 13365  1F58  3000               	movlw	0
 13366  1F59  3191  2178  319F   	fcall	_getMain_All_Error_Status
 13367  1F5C  3800               	iorlw	0
 13368  1F5D  1D03               	skipz
 13369  1F5E  2F65               	goto	l757
 13370  1F5F  319B  23D0  319F   	fcall	_getMain_All_LightsStatus
 13371  1F62  3800               	iorlw	0
 13372  1F63  1D03               	skipz
 13373  1F64  2F67               	goto	l9944
 13374  1F65                     l757:	
 13375                           
 13376                           ;Dimmer_B1.c: 776: Dimmer.LoadGO = 0;
 13377  1F65  0022               	movlb	2	; select bank2
 13378  1F66  10AC               	bcf	_Dimmer^(0+256),1
 13379  1F67                     l9944:	
 13380                           
 13381                           ;Dimmer_B1.c: 777: }
 13382                           ;Dimmer_B1.c: 778: }
 13383                           ;Dimmer_B1.c: 782: setDimmerLights_Main(1);
 13384  1F67  3001               	movlw	1
 13385  1F68  3197  2795         	fcall	_setDimmerLights_Main
 13386  1F6A  0008               	return
 13387  1F6B                     __end_of_DimmerLights_Main:	
 13388                           
 13389                           	psect	text87
 13390  1795                     __ptext87:	
 13391 ;; *************** function _setDimmerLights_Main *****************
 13392 ;; Defined at:
 13393 ;;		line 800 in file "../src/Dimmer_B1.c"
 13394 ;; Parameters:    Size  Location     Type
 13395 ;;  lights          1    wreg     unsigned char 
 13396 ;; Auto vars:     Size  Location     Type
 13397 ;;  lights          1    1[BANK1 ] unsigned char 
 13398 ;; Return value:  Size  Location     Type
 13399 ;;		None               void
 13400 ;; Registers used:
 13401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13402 ;; Tracked objects:
 13403 ;;		On entry : 0/0
 13404 ;;		On exit  : 0/0
 13405 ;;		Unchanged: 0/0
 13406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;Total ram usage:        1 bytes
 13412 ;; Hardware stack levels used:    1
 13413 ;; Hardware stack levels required when called:    9
 13414 ;; This function calls:
 13415 ;;		_DimmerLights_SelectPointer
 13416 ;;		_getDimmerLights_Allow_Condition
 13417 ;;		_getMain_All_LightsStatus
 13418 ;;		_setDimmerLights_Dimming
 13419 ;;		_setDimmerLights_OnOff
 13420 ;; This function is called by:
 13421 ;;		_DimmerLights_Main
 13422 ;; This function uses a non-reentrant model
 13423 ;;
 13424                           
 13425                           
 13426                           ;psect for function _setDimmerLights_Main
 13427  1795                     _setDimmerLights_Main:	
 13428                           
 13429                           ;incstack = 0
 13430                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13431                           ;setDimmerLights_Main@lights stored from wreg
 13432  1795  0021               	movlb	1	; select bank1
 13433  1796  00DC               	movwf	setDimmerLights_Main@lights^(0+128)
 13434                           
 13435                           ;Dimmer_B1.c: 802: DimmerLights_SelectPointer(lights);
 13436  1797  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13437  1798  319C  2412  3197   	fcall	_DimmerLights_SelectPointer
 13438                           
 13439                           ;Dimmer_B1.c: 803: if (DimmerLights->Trigger == 1) {
 13440  179B  0021               	movlb	1	; select bank1
 13441  179C  084A               	movf	_DimmerLights^(0+128),w
 13442  179D  0086               	movwf	6
 13443  179E  3001               	movlw	1	; select bank2/3
 13444  179F  0087               	movwf	7
 13445  17A0  1C81               	btfss	1,1
 13446  17A1  2FC4               	goto	l9562
 13447                           
 13448                           ;Dimmer_B1.c: 804: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13449  17A2  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13450  17A3  319E  2658  3197   	fcall	_getDimmerLights_Allow_Condition
 13451  17A6  3800               	iorlw	0
 13452  17A7  1D03               	skipz
 13453  17A8  0008               	return
 13454                           
 13455                           ;Dimmer_B1.c: 805: DimmerLights->Trigger = 0;
 13456  17A9  0021               	movlb	1	; select bank1
 13457  17AA  084A               	movf	_DimmerLights^(0+128),w
 13458  17AB  0086               	movwf	6
 13459  17AC  3001               	movlw	1	; select bank2/3
 13460  17AD  0087               	movwf	7
 13461  17AE  1081               	bcf	1,1
 13462                           
 13463                           ;Dimmer_B1.c: 806: if (DimmerLights->Switch == 1) {
 13464  17AF  084A               	movf	_DimmerLights^(0+128),w
 13465  17B0  0086               	movwf	6
 13466  17B1  3001               	movlw	1	; select bank2/3
 13467  17B2  0087               	movwf	7
 13468  17B3  1D01               	btfss	1,2
 13469  17B4  2FBD               	goto	l9560
 13470                           
 13471                           ;Dimmer_B1.c: 807: setDimmerLights_OnOff(lights, 1);
 13472  17B5  0020               	movlb	0	; select bank0
 13473  17B6  01ED               	clrf	setDimmerLights_OnOff@command
 13474  17B7  0AED               	incf	setDimmerLights_OnOff@command,f
 13475  17B8  0021               	movlb	1	; select bank1
 13476  17B9  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13477  17BA  3186  26F3         	fcall	_setDimmerLights_OnOff
 13478                           
 13479                           ;Dimmer_B1.c: 808: } else {
 13480  17BC  0008               	return
 13481  17BD                     l9560:	
 13482                           
 13483                           ;Dimmer_B1.c: 809: setDimmerLights_OnOff(lights, 0);
 13484  17BD  0020               	movlb	0	; select bank0
 13485  17BE  01ED               	clrf	setDimmerLights_OnOff@command
 13486  17BF  0021               	movlb	1	; select bank1
 13487  17C0  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13488  17C1  3186  26F3         	fcall	_setDimmerLights_OnOff
 13489                           
 13490                           ;Dimmer_B1.c: 810: }
 13491                           ;Dimmer_B1.c: 811: }
 13492                           ;Dimmer_B1.c: 812: } else {
 13493  17C3  0008               	return
 13494  17C4                     l9562:	
 13495                           
 13496                           ;Dimmer_B1.c: 813: if (getMain_All_LightsStatus() == 1) {
 13497  17C4  319B  23D0  3197   	fcall	_getMain_All_LightsStatus
 13498  17C7  3A01               	xorlw	1
 13499  17C8  1D03               	skipz
 13500  17C9  2FF3               	goto	l9574
 13501                           
 13502                           ;Dimmer_B1.c: 814: if (DimmerLights->DimmingTrigger == 1) {
 13503  17CA  0021               	movlb	1	; select bank1
 13504  17CB  084A               	movf	_DimmerLights^(0+128),w
 13505  17CC  0086               	movwf	6
 13506  17CD  3001               	movlw	1	; select bank2/3
 13507  17CE  0087               	movwf	7
 13508  17CF  1E01               	btfss	1,4
 13509  17D0  0008               	return
 13510                           
 13511                           ;Dimmer_B1.c: 815: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13512  17D1  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13513  17D2  319E  2658  3197   	fcall	_getDimmerLights_Allow_Condition
 13514  17D5  3800               	iorlw	0
 13515  17D6  1D03               	skipz
 13516  17D7  0008               	return
 13517                           
 13518                           ;Dimmer_B1.c: 816: DimmerLights->DimmingTrigger = 0;
 13519  17D8  0021               	movlb	1	; select bank1
 13520  17D9  084A               	movf	_DimmerLights^(0+128),w
 13521  17DA  0086               	movwf	6
 13522  17DB  3001               	movlw	1	; select bank2/3
 13523  17DC  0087               	movwf	7
 13524  17DD  1201               	bcf	1,4
 13525                           
 13526                           ;Dimmer_B1.c: 817: if (DimmerLights->DimmingSwitch == 1) {
 13527  17DE  084A               	movf	_DimmerLights^(0+128),w
 13528  17DF  0086               	movwf	6
 13529  17E0  3001               	movlw	1	; select bank2/3
 13530  17E1  0087               	movwf	7
 13531  17E2  1E81               	btfss	1,5
 13532  17E3  2FEC               	goto	l9572
 13533                           
 13534                           ;Dimmer_B1.c: 818: setDimmerLights_Dimming(lights, 1);
 13535  17E4  0020               	movlb	0	; select bank0
 13536  17E5  01EA               	clrf	setDimmerLights_Dimming@status
 13537  17E6  0AEA               	incf	setDimmerLights_Dimming@status,f
 13538  17E7  0021               	movlb	1	; select bank1
 13539  17E8  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13540  17E9  3194  24FB         	fcall	_setDimmerLights_Dimming
 13541                           
 13542                           ;Dimmer_B1.c: 819: } else {
 13543  17EB  0008               	return
 13544  17EC                     l9572:	
 13545                           
 13546                           ;Dimmer_B1.c: 820: setDimmerLights_Dimming(lights, 0);
 13547  17EC  0020               	movlb	0	; select bank0
 13548  17ED  01EA               	clrf	setDimmerLights_Dimming@status
 13549  17EE  0021               	movlb	1	; select bank1
 13550  17EF  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13551  17F0  3194  24FB         	fcall	_setDimmerLights_Dimming
 13552                           
 13553                           ;Dimmer_B1.c: 821: }
 13554                           ;Dimmer_B1.c: 822: }
 13555                           ;Dimmer_B1.c: 823: }
 13556                           ;Dimmer_B1.c: 824: } else {
 13557  17F2  0008               	return
 13558  17F3                     l9574:	
 13559                           
 13560                           ;Dimmer_B1.c: 825: if (DimmerLights->DimmingTrigger == 1) {
 13561  17F3  0021               	movlb	1	; select bank1
 13562  17F4  084A               	movf	_DimmerLights^(0+128),w
 13563  17F5  0086               	movwf	6
 13564  17F6  3001               	movlw	1	; select bank2/3
 13565  17F7  0087               	movwf	7
 13566  17F8  1E01               	btfss	1,4
 13567  17F9  0008               	return
 13568                           
 13569                           ;Dimmer_B1.c: 826: DimmerLights->DimmingTrigger = 0;
 13570  17FA  084A               	movf	_DimmerLights^(0+128),w
 13571  17FB  0086               	movwf	6
 13572  17FC  3001               	movlw	1	; select bank2/3
 13573  17FD  0087               	movwf	7
 13574  17FE  1201               	bcf	1,4
 13575  17FF  0008               	return
 13576  1800                     __end_of_setDimmerLights_Main:	
 13577                           
 13578                           	psect	text88
 13579  06F3                     __ptext88:	
 13580 ;; *************** function _setDimmerLights_OnOff *****************
 13581 ;; Defined at:
 13582 ;;		line 834 in file "../src/Dimmer_B1.c"
 13583 ;; Parameters:    Size  Location     Type
 13584 ;;  lights          1    wreg     unsigned char 
 13585 ;;  command         1   77[BANK0 ] unsigned char 
 13586 ;; Auto vars:     Size  Location     Type
 13587 ;;  lights          1    0[BANK1 ] unsigned char 
 13588 ;; Return value:  Size  Location     Type
 13589 ;;		None               void
 13590 ;; Registers used:
 13591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13592 ;; Tracked objects:
 13593 ;;		On entry : 0/0
 13594 ;;		On exit  : 0/0
 13595 ;;		Unchanged: 0/0
 13596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13597 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;Total ram usage:        4 bytes
 13602 ;; Hardware stack levels used:    1
 13603 ;; Hardware stack levels required when called:    8
 13604 ;; This function calls:
 13605 ;;		_getCmd_Status
 13606 ;;		_getDelayOff_GO
 13607 ;;		_getDimmerLights_PercentToValue
 13608 ;;		_getMain_All_LightsStatus
 13609 ;;		_setCmd_Status
 13610 ;;		_setDelayOff_GO
 13611 ;;		_setDimmerIntr_ControlStatus
 13612 ;;		_setDimmerIntr_DimmingValue
 13613 ;;		_setDimmerIntr_Dimming_RF
 13614 ;;		_setDimmerIntr_MaxmumValue
 13615 ;;		_setDimmerLights_Line
 13616 ;;		_setLED
 13617 ;;		_setProductData
 13618 ;;		_setRF_DimmerLights
 13619 ;;		_setTxData
 13620 ;; This function is called by:
 13621 ;;		_setDimmerLights_Main
 13622 ;; This function uses a non-reentrant model
 13623 ;;
 13624                           
 13625                           
 13626                           ;psect for function _setDimmerLights_OnOff
 13627  06F3                     _setDimmerLights_OnOff:	
 13628                           
 13629                           ;incstack = 0
 13630                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13631                           ;setDimmerLights_OnOff@lights stored from wreg
 13632  06F3  0021               	movlb	1	; select bank1
 13633  06F4  00DB               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13634                           
 13635                           ;Dimmer_B1.c: 836: if (command == 1) {
 13636  06F5  0020               	movlb	0	; select bank0
 13637  06F6  086D               	movf	setDimmerLights_OnOff@command,w
 13638  06F7  3A01               	xorlw	1
 13639  06F8  1D03               	skipz
 13640  06F9  2F58               	goto	l9342
 13641                           
 13642                           ;Dimmer_B1.c: 837: setDimmerIntr_ControlStatus(lights, 1);
 13643  06FA  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13644  06FB  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13645  06FC  0021               	movlb	1	; select bank1
 13646  06FD  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13647  06FE  319E  2684  3186   	fcall	_setDimmerIntr_ControlStatus
 13648                           
 13649                           ;Dimmer_B1.c: 840: Dimmer.Load_Status = 1;
 13650  0701  0022               	movlb	2	; select bank2
 13651  0702  152C               	bsf	_Dimmer^(0+256),2
 13652                           
 13653                           ;Dimmer_B1.c: 841: setDimmerLights_Line(lights);
 13654  0703  0021               	movlb	1	; select bank1
 13655  0704  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13656  0705  319D  2537  3186   	fcall	_setDimmerLights_Line
 13657                           
 13658                           ;Dimmer_B1.c: 847: setLED(lights, 0);
 13659  0708  0020               	movlb	0	; select bank0
 13660  0709  01A2               	clrf	setLED@command
 13661  070A  0021               	movlb	1	; select bank1
 13662  070B  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13663  070C  3192  22F1  3186   	fcall	_setLED
 13664                           
 13665                           ;Dimmer_B1.c: 848: ;;
 13666                           ;Dimmer_B1.c: 868: if (DimmerLights->DimmingRun == 1) {
 13667  070F  0021               	movlb	1	; select bank1
 13668  0710  0A4A               	incf	_DimmerLights^(0+128),w
 13669  0711  0086               	movwf	6
 13670  0712  3001               	movlw	1	; select bank2/3
 13671  0713  0087               	movwf	7
 13672  0714  1F01               	btfss	1,6
 13673  0715  2F3A               	goto	l9334
 13674                           
 13675                           ;Dimmer_B1.c: 869: DimmerLights->DimmingRun = 0;
 13676  0716  0A4A               	incf	_DimmerLights^(0+128),w
 13677  0717  0086               	movwf	6
 13678  0718  3001               	movlw	1	; select bank2/3
 13679  0719  0087               	movwf	7
 13680  071A  1301               	bcf	1,6
 13681                           
 13682                           ;Dimmer_B1.c: 870: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13683  071B  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13684  071C  3E14               	addlw	20
 13685  071D  0763               	addwf	_product^(0+128),w
 13686  071E  0020               	movlb	0	; select bank0
 13687  071F  00EE               	movwf	??_setDimmerLights_OnOff
 13688  0720  086E               	movf	??_setDimmerLights_OnOff,w
 13689  0721  0086               	movwf	6
 13690  0722  3002               	movlw	2	; select bank4/5
 13691  0723  0087               	movwf	7
 13692  0724  0801               	movf	1,w
 13693  0725  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13694  0728  0020               	movlb	0	; select bank0
 13695  0729  00EF               	movwf	??_setDimmerLights_OnOff+1
 13696  072A  086F               	movf	??_setDimmerLights_OnOff+1,w
 13697  072B  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13698  072C  0021               	movlb	1	; select bank1
 13699  072D  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13700  072E  319C  242A  3186   	fcall	_setDimmerIntr_MaxmumValue
 13701                           
 13702                           ;Dimmer_B1.c: 871: setDimmerIntr_Dimming_RF(lights, 1);
 13703  0731  0020               	movlb	0	; select bank0
 13704  0732  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13705  0733  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13706  0734  0021               	movlb	1	; select bank1
 13707  0735  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13708  0736  319E  269C  3186   	fcall	_setDimmerIntr_Dimming_RF
 13709                           
 13710                           ;Dimmer_B1.c: 872: } else {
 13711  0739  2F51               	goto	l9336
 13712  073A                     l9334:	
 13713                           
 13714                           ;Dimmer_B1.c: 873: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13715  073A  0021               	movlb	1	; select bank1
 13716  073B  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13717  073C  3E14               	addlw	20
 13718  073D  0763               	addwf	_product^(0+128),w
 13719  073E  0020               	movlb	0	; select bank0
 13720  073F  00EE               	movwf	??_setDimmerLights_OnOff
 13721  0740  086E               	movf	??_setDimmerLights_OnOff,w
 13722  0741  0086               	movwf	6
 13723  0742  3002               	movlw	2	; select bank4/5
 13724  0743  0087               	movwf	7
 13725  0744  0801               	movf	1,w
 13726  0745  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13727  0748  0020               	movlb	0	; select bank0
 13728  0749  00EF               	movwf	??_setDimmerLights_OnOff+1
 13729  074A  086F               	movf	??_setDimmerLights_OnOff+1,w
 13730  074B  00E2               	movwf	setDimmerIntr_DimmingValue@value
 13731  074C  0021               	movlb	1	; select bank1
 13732  074D  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13733  074E  319C  2436  3186   	fcall	_setDimmerIntr_DimmingValue
 13734  0751                     l9336:	
 13735                           
 13736                           ;Dimmer_B1.c: 876: }
 13737                           ;Dimmer_B1.c: 878: if (lights == 1) {
 13738  0751  0021               	movlb	1	; select bank1
 13739  0752  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13740  0753  3A01               	xorlw	1
 13741  0754  1D03               	skipz
 13742  0755  2F87               	goto	l9356
 13743                           
 13744                           ;Dimmer_B1.c: 880: DimmerIntr1.TuneGO = 1;
 13745  0756  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 13746                           
 13747                           ;Dimmer_B1.c: 886: }
 13748                           ;Dimmer_B1.c: 892: } else if (command == 0) {
 13749                           
 13750                           ;Dimmer_B1.c: 882: } else if (lights == 2) {
 13751  0757  2F87               	goto	l9356
 13752  0758                     l9342:	
 13753  0758  0020               	movlb	0	; select bank0
 13754  0759  08ED               	movf	setDimmerLights_OnOff@command,f
 13755  075A  1D03               	skipz
 13756  075B  2F87               	goto	l9356
 13757                           
 13758                           ;Dimmer_B1.c: 893: setDimmerIntr_ControlStatus(lights, 0);
 13759  075C  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13760  075D  0021               	movlb	1	; select bank1
 13761  075E  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13762  075F  319E  2684  3186   	fcall	_setDimmerIntr_ControlStatus
 13763                           
 13764                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 13765  0762  0022               	movlb	2	; select bank2
 13766  0763  112C               	bcf	_Dimmer^(0+256),2
 13767                           
 13768                           ;Dimmer_B1.c: 896: setDimmerLights_Line(0);
 13769  0764  3000               	movlw	0
 13770  0765  319D  2537  3186   	fcall	_setDimmerLights_Line
 13771                           
 13772                           ;Dimmer_B1.c: 900: if (getDelayOff_GO(lights) == 1) {
 13773  0768  0021               	movlb	1	; select bank1
 13774  0769  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13775  076A  319C  24E2  3186   	fcall	_getDelayOff_GO
 13776  076D  3A01               	xorlw	1
 13777  076E  1D03               	skipz
 13778  076F  2F78               	goto	l784
 13779                           
 13780                           ;Dimmer_B1.c: 901: setDelayOff_GO(lights, 0, 0);
 13781  0770  0020               	movlb	0	; select bank0
 13782  0771  01E5               	clrf	setDelayOff_GO@command
 13783  0772  01E6               	clrf	setDelayOff_GO@value
 13784  0773  0021               	movlb	1	; select bank1
 13785  0774  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13786  0775  318C  24AB  3186   	fcall	_setDelayOff_GO
 13787  0778                     l784:	
 13788                           
 13789                           ;Dimmer_B1.c: 902: }
 13790                           ;Dimmer_B1.c: 907: setLED(lights, 1);
 13791  0778  0020               	movlb	0	; select bank0
 13792  0779  01A2               	clrf	setLED@command
 13793  077A  0AA2               	incf	setLED@command,f
 13794  077B  0021               	movlb	1	; select bank1
 13795  077C  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13796  077D  3192  22F1  3186   	fcall	_setLED
 13797                           
 13798                           ;Dimmer_B1.c: 908: ;;
 13799                           ;Dimmer_B1.c: 912: if (lights == 1) {
 13800  0780  0021               	movlb	1	; select bank1
 13801  0781  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13802  0782  3A01               	xorlw	1
 13803  0783  1D03               	skipz
 13804  0784  2F87               	goto	l9356
 13805                           
 13806                           ;Dimmer_B1.c: 913: RB1 = 0;
 13807  0785  0020               	movlb	0	; select bank0
 13808  0786  108D               	bcf	13,1	;volatile
 13809  0787                     l9356:	
 13810                           
 13811                           ;Dimmer_B1.c: 915: }
 13812                           ;Dimmer_B1.c: 926: }
 13813                           ;Dimmer_B1.c: 929: setRF_DimmerLights(lights, command);
 13814  0787  0020               	movlb	0	; select bank0
 13815  0788  086D               	movf	setDimmerLights_OnOff@command,w
 13816  0789  00EE               	movwf	??_setDimmerLights_OnOff
 13817  078A  086E               	movf	??_setDimmerLights_OnOff,w
 13818  078B  00E5               	movwf	setRF_DimmerLights@on
 13819  078C  0021               	movlb	1	; select bank1
 13820  078D  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13821  078E  3197  2730  3186   	fcall	_setRF_DimmerLights
 13822                           
 13823                           ;Dimmer_B1.c: 931: if (getCmd_Status(1) == 1) {
 13824  0791  3001               	movlw	1
 13825  0792  319D  2549  3186   	fcall	_getCmd_Status
 13826  0795  3A01               	xorlw	1
 13827  0796  1D03               	skipz
 13828  0797  2FB3               	goto	l9370
 13829                           
 13830                           ;Dimmer_B1.c: 932: if (getMain_All_LightsStatus() == 0) {
 13831  0798  319B  23D0  3186   	fcall	_getMain_All_LightsStatus
 13832  079B  3800               	iorlw	0
 13833  079C  1D03               	skipz
 13834  079D  0008               	return
 13835                           
 13836                           ;Dimmer_B1.c: 933: setCmd_Status(1, 0);
 13837  079E  0020               	movlb	0	; select bank0
 13838  079F  01A0               	clrf	setCmd_Status@cmd
 13839  07A0  3001               	movlw	1
 13840  07A1  319E  26B4  3186   	fcall	_setCmd_Status
 13841                           
 13842                           ;Dimmer_B1.c: 934: setProductData(11, 0);
 13843  07A4  0020               	movlb	0	; select bank0
 13844  07A5  01E2               	clrf	setProductData@value
 13845  07A6  300B               	movlw	11
 13846  07A7  319C  241E  3186   	fcall	_setProductData
 13847                           
 13848                           ;Dimmer_B1.c: 935: setProductData(17, 0);
 13849  07AA  0020               	movlb	0	; select bank0
 13850  07AB  01E2               	clrf	setProductData@value
 13851  07AC  3011               	movlw	17
 13852  07AD  319C  241E  3186   	fcall	_setProductData
 13853                           
 13854                           ;Dimmer_B1.c: 936: setTxData();
 13855  07B0  318F  2745         	fcall	_setTxData
 13856                           
 13857                           ;Dimmer_B1.c: 937: }
 13858                           ;Dimmer_B1.c: 938: } else {
 13859  07B2  0008               	return
 13860  07B3                     l9370:	
 13861                           
 13862                           ;Dimmer_B1.c: 939: setTxData();
 13863  07B3  318F  2745         	fcall	_setTxData
 13864  07B5  0008               	return
 13865  07B6                     __end_of_setDimmerLights_OnOff:	
 13866                           
 13867                           	psect	text89
 13868  12F1                     __ptext89:	
 13869 ;; *************** function _setLED *****************
 13870 ;; Defined at:
 13871 ;;		line 81 in file "../src/LED_B1.c"
 13872 ;; Parameters:    Size  Location     Type
 13873 ;;  led             1    wreg     unsigned char 
 13874 ;;  command         1    2[BANK0 ] unsigned char 
 13875 ;; Auto vars:     Size  Location     Type
 13876 ;;  led             1    3[BANK0 ] unsigned char 
 13877 ;; Return value:  Size  Location     Type
 13878 ;;		None               void
 13879 ;; Registers used:
 13880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13881 ;; Tracked objects:
 13882 ;;		On entry : 0/0
 13883 ;;		On exit  : 0/0
 13884 ;;		Unchanged: 0/0
 13885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13886 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13890 ;;Total ram usage:        2 bytes
 13891 ;; Hardware stack levels used:    1
 13892 ;; Hardware stack levels required when called:    6
 13893 ;; This function calls:
 13894 ;;		_LedPointSelect
 13895 ;; This function is called by:
 13896 ;;		_setDimmerLights_OnOff
 13897 ;;		_setLED_Initialization
 13898 ;;		_Exception_Main
 13899 ;;		_setSw_Initialization
 13900 ;; This function uses a non-reentrant model
 13901 ;;
 13902                           
 13903                           
 13904                           ;psect for function _setLED
 13905  12F1                     _setLED:	
 13906                           
 13907                           ;incstack = 0
 13908                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13909                           ;setLED@led stored from wreg
 13910  12F1  0020               	movlb	0	; select bank0
 13911  12F2  00A3               	movwf	setLED@led
 13912                           
 13913                           ;LED_B1.c: 82: LedPointSelect(led);
 13914  12F3  0823               	movf	setLED@led,w
 13915  12F4  319C  2442  3192   	fcall	_LedPointSelect
 13916                           
 13917                           ;LED_B1.c: 83: if (command == 0) {
 13918  12F7  0020               	movlb	0	; select bank0
 13919  12F8  08A2               	movf	setLED@command,f
 13920  12F9  1D03               	skipz
 13921  12FA  2B00               	goto	l9112
 13922                           
 13923                           ;LED_B1.c: 112: if (led == 99) {
 13924  12FB  0823               	movf	setLED@led,w
 13925  12FC  3A63               	xorlw	99
 13926  12FD  1D03               	skipz
 13927  12FE  2B00               	goto	l9112
 13928                           
 13929                           ;LED_B1.c: 116: RB5 = 1;
 13930  12FF  168D               	bsf	13,5	;volatile
 13931  1300                     l9112:	
 13932                           
 13933                           ;LED_B1.c: 118: }
 13934                           ;LED_B1.c: 120: }
 13935                           ;LED_B1.c: 121: if (command == 1) {
 13936  1300  0822               	movf	setLED@command,w
 13937  1301  3A01               	xorlw	1
 13938  1302  1D03               	skipz
 13939  1303  2B09               	goto	l9118
 13940                           
 13941                           ;LED_B1.c: 150: if (led == 99) {
 13942  1304  0823               	movf	setLED@led,w
 13943  1305  3A63               	xorlw	99
 13944  1306  1D03               	skipz
 13945  1307  2B09               	goto	l9118
 13946                           
 13947                           ;LED_B1.c: 154: RB5 = 0;
 13948  1308  128D               	bcf	13,5	;volatile
 13949  1309                     l9118:	
 13950                           
 13951                           ;LED_B1.c: 156: }
 13952                           ;LED_B1.c: 158: }
 13953                           ;LED_B1.c: 159: if (command == 10) {
 13954  1309  0822               	movf	setLED@command,w
 13955  130A  3A0A               	xorlw	10
 13956  130B  1D03               	skipz
 13957  130C  2B1F               	goto	l9126
 13958                           
 13959                           ;LED_B1.c: 160: LED->GO = 0;
 13960  130D  0021               	movlb	1	; select bank1
 13961  130E  084B               	movf	_LED^(0+128),w
 13962  130F  0086               	movwf	6
 13963  1310  3001               	movlw	1	; select bank2/3
 13964  1311  0087               	movwf	7
 13965  1312  1081               	bcf	1,1
 13966                           
 13967                           ;LED_B1.c: 161: LED->Time = 0;
 13968  1313  0A4B               	incf	_LED^(0+128),w
 13969  1314  0086               	movwf	6
 13970  1315  3001               	movlw	1	; select bank2/3
 13971  1316  0087               	movwf	7
 13972  1317  3000               	movlw	0
 13973  1318  3FC0               	movwi [0]fsr1
 13974  1319  3FC1               	movwi [1]fsr1
 13975                           
 13976                           ;LED_B1.c: 190: if (led == 99) {
 13977  131A  0020               	movlb	0	; select bank0
 13978  131B  0823               	movf	setLED@led,w
 13979  131C  3A63               	xorlw	99
 13980  131D  1903               	btfsc	3,2
 13981                           
 13982                           ;LED_B1.c: 194: RB5 = 1;
 13983  131E  168D               	bsf	13,5	;volatile
 13984  131F                     l9126:	
 13985                           
 13986                           ;LED_B1.c: 196: }
 13987                           ;LED_B1.c: 198: }
 13988                           ;LED_B1.c: 199: if (command == 11) {
 13989  131F  0822               	movf	setLED@command,w
 13990  1320  3A0B               	xorlw	11
 13991  1321  1D03               	skipz
 13992  1322  0008               	return
 13993                           
 13994                           ;LED_B1.c: 200: LED->GO = 1;
 13995  1323  0021               	movlb	1	; select bank1
 13996  1324  084B               	movf	_LED^(0+128),w
 13997  1325  0086               	movwf	6
 13998  1326  3001               	movlw	1	; select bank2/3
 13999  1327  0087               	movwf	7
 14000  1328  1481               	bsf	1,1
 14001  1329  0008               	return
 14002  132A                     __end_of_setLED:	
 14003                           
 14004                           	psect	text90
 14005  1C42                     __ptext90:	
 14006 ;; *************** function _LedPointSelect *****************
 14007 ;; Defined at:
 14008 ;;		line 7 in file "../src/LED_B1.c"
 14009 ;; Parameters:    Size  Location     Type
 14010 ;;  led             1    wreg     unsigned char 
 14011 ;; Auto vars:     Size  Location     Type
 14012 ;;  led             1    1[BANK0 ] unsigned char 
 14013 ;; Return value:  Size  Location     Type
 14014 ;;		None               void
 14015 ;; Registers used:
 14016 ;;		wreg
 14017 ;; Tracked objects:
 14018 ;;		On entry : 0/0
 14019 ;;		On exit  : 0/0
 14020 ;;		Unchanged: 0/0
 14021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14025 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14026 ;;Total ram usage:        2 bytes
 14027 ;; Hardware stack levels used:    1
 14028 ;; Hardware stack levels required when called:    5
 14029 ;; This function calls:
 14030 ;;		Nothing
 14031 ;; This function is called by:
 14032 ;;		_setLED_Initialization
 14033 ;;		_setLED
 14034 ;;		_setLED_Main
 14035 ;; This function uses a non-reentrant model
 14036 ;;
 14037                           
 14038                           
 14039                           ;psect for function _LedPointSelect
 14040  1C42                     _LedPointSelect:	
 14041                           
 14042                           ;incstack = 0
 14043                           ; Regs used in _LedPointSelect: [wreg]
 14044                           ;LedPointSelect@led stored from wreg
 14045  1C42  0020               	movlb	0	; select bank0
 14046  1C43  00A1               	movwf	LedPointSelect@led
 14047                           
 14048                           ;LED_B1.c: 24: if (led == 99) {
 14049  1C44  0821               	movf	LedPointSelect@led,w
 14050  1C45  3A63               	xorlw	99
 14051  1C46  1D03               	skipz
 14052  1C47  0008               	return
 14053                           
 14054                           ;LED_B1.c: 25: LED = &VarErrLED;
 14055  1C48  306B               	movlw	_VarErrLED& (0+255)
 14056  1C49  00A0               	movwf	??_LedPointSelect
 14057  1C4A  0820               	movf	??_LedPointSelect,w
 14058  1C4B  0021               	movlb	1	; select bank1
 14059  1C4C  00CB               	movwf	_LED^(0+128)
 14060  1C4D  0008               	return
 14061  1C4E                     __end_of_LedPointSelect:	
 14062                           
 14063                           	psect	text91
 14064  1E9C                     __ptext91:	
 14065 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14066 ;; Defined at:
 14067 ;;		line 219 in file "../src/Dimmer_B1.c"
 14068 ;; Parameters:    Size  Location     Type
 14069 ;;  lights          1    wreg     unsigned char 
 14070 ;;  command         1    0[BANK0 ] unsigned char 
 14071 ;; Auto vars:     Size  Location     Type
 14072 ;;  lights          1    2[BANK0 ] unsigned char 
 14073 ;; Return value:  Size  Location     Type
 14074 ;;		None               void
 14075 ;; Registers used:
 14076 ;;		wreg, status,2, status,0
 14077 ;; Tracked objects:
 14078 ;;		On entry : 0/0
 14079 ;;		On exit  : 0/0
 14080 ;;		Unchanged: 0/0
 14081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14082 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;Total ram usage:        3 bytes
 14087 ;; Hardware stack levels used:    1
 14088 ;; Hardware stack levels required when called:    5
 14089 ;; This function calls:
 14090 ;;		Nothing
 14091 ;; This function is called by:
 14092 ;;		_setDimmerLights_OnOff
 14093 ;;		_setRFSW_AdjControl
 14094 ;; This function uses a non-reentrant model
 14095 ;;
 14096                           
 14097                           
 14098                           ;psect for function _setDimmerIntr_Dimming_RF
 14099  1E9C                     _setDimmerIntr_Dimming_RF:	
 14100                           
 14101                           ;incstack = 0
 14102                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14103                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14104  1E9C  0020               	movlb	0	; select bank0
 14105  1E9D  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14106                           
 14107                           ;Dimmer_B1.c: 221: if (lights == 1) {
 14108  1E9E  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14109  1E9F  3A01               	xorlw	1
 14110  1EA0  1D03               	skipz
 14111  1EA1  0008               	return
 14112                           
 14113                           ;Dimmer_B1.c: 222: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14114  1EA2  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14115  1EA3  3A01               	xorlw	1
 14116  1EA4  3000               	movlw	0
 14117  1EA5  1903               	skipnz
 14118  1EA6  3001               	movlw	1
 14119  1EA7  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14120  1EA8  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14121  1EA9  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14122  1EAA  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14123  1EAB  0021               	movlb	1	; select bank1
 14124  1EAC  083B               	movf	_DimmerIntr1^(0+128),w
 14125  1EAD  0020               	movlb	0	; select bank0
 14126  1EAE  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14127  1EAF  39BF               	andlw	-65
 14128  1EB0  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14129  1EB1  0021               	movlb	1	; select bank1
 14130  1EB2  00BB               	movwf	_DimmerIntr1^(0+128)
 14131  1EB3  0008               	return
 14132  1EB4                     __end_of_setDimmerIntr_Dimming_RF:	
 14133                           
 14134                           	psect	text92
 14135  1C36                     __ptext92:	
 14136 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14137 ;; Defined at:
 14138 ;;		line 84 in file "../src/Dimmer_B1.c"
 14139 ;; Parameters:    Size  Location     Type
 14140 ;;  lights          1    wreg     unsigned char 
 14141 ;;  value           1   66[BANK0 ] unsigned char 
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;  lights          1   68[BANK0 ] unsigned char 
 14144 ;; Return value:  Size  Location     Type
 14145 ;;		None               void
 14146 ;; Registers used:
 14147 ;;		wreg
 14148 ;; Tracked objects:
 14149 ;;		On entry : 0/0
 14150 ;;		On exit  : 0/0
 14151 ;;		Unchanged: 0/0
 14152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14153 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14156 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14157 ;;Total ram usage:        3 bytes
 14158 ;; Hardware stack levels used:    1
 14159 ;; Hardware stack levels required when called:    5
 14160 ;; This function calls:
 14161 ;;		Nothing
 14162 ;; This function is called by:
 14163 ;;		_setDimmerLights_OnOff
 14164 ;; This function uses a non-reentrant model
 14165 ;;
 14166                           
 14167                           
 14168                           ;psect for function _setDimmerIntr_DimmingValue
 14169  1C36                     _setDimmerIntr_DimmingValue:	
 14170                           
 14171                           ;incstack = 0
 14172                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14173                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14174  1C36  0020               	movlb	0	; select bank0
 14175  1C37  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14176                           
 14177                           ;Dimmer_B1.c: 86: if (lights == 1) {
 14178  1C38  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14179  1C39  3A01               	xorlw	1
 14180  1C3A  1D03               	skipz
 14181  1C3B  0008               	return
 14182                           
 14183                           ;Dimmer_B1.c: 87: DimmerIntr1.DimmingValue = value;
 14184  1C3C  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14185  1C3D  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14186  1C3E  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14187  1C3F  0021               	movlb	1	; select bank1
 14188  1C40  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 14189  1C41  0008               	return
 14190  1C42                     __end_of_setDimmerIntr_DimmingValue:	
 14191                           
 14192                           	psect	text93
 14193  1E84                     __ptext93:	
 14194 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14195 ;; Defined at:
 14196 ;;		line 66 in file "../src/Dimmer_B1.c"
 14197 ;; Parameters:    Size  Location     Type
 14198 ;;  lights          1    wreg     unsigned char 
 14199 ;;  command         1    0[BANK0 ] unsigned char 
 14200 ;; Auto vars:     Size  Location     Type
 14201 ;;  lights          1    2[BANK0 ] unsigned char 
 14202 ;; Return value:  Size  Location     Type
 14203 ;;		None               void
 14204 ;; Registers used:
 14205 ;;		wreg, status,2, status,0
 14206 ;; Tracked objects:
 14207 ;;		On entry : 0/0
 14208 ;;		On exit  : 0/0
 14209 ;;		Unchanged: 0/0
 14210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14211 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;Total ram usage:        3 bytes
 14216 ;; Hardware stack levels used:    1
 14217 ;; Hardware stack levels required when called:    5
 14218 ;; This function calls:
 14219 ;;		Nothing
 14220 ;; This function is called by:
 14221 ;;		_setDimmerLights_OnOff
 14222 ;; This function uses a non-reentrant model
 14223 ;;
 14224                           
 14225                           
 14226                           ;psect for function _setDimmerIntr_ControlStatus
 14227  1E84                     _setDimmerIntr_ControlStatus:	
 14228                           
 14229                           ;incstack = 0
 14230                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14231                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14232  1E84  0020               	movlb	0	; select bank0
 14233  1E85  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14234                           
 14235                           ;Dimmer_B1.c: 68: if (lights == 1) {
 14236  1E86  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14237  1E87  3A01               	xorlw	1
 14238  1E88  1D03               	skipz
 14239  1E89  0008               	return
 14240                           
 14241                           ;Dimmer_B1.c: 69: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14242  1E8A  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14243  1E8B  3A01               	xorlw	1
 14244  1E8C  3000               	movlw	0
 14245  1E8D  1903               	skipnz
 14246  1E8E  3001               	movlw	1
 14247  1E8F  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14248  1E90  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14249  1E91  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14250  1E92  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14251  1E93  0021               	movlb	1	; select bank1
 14252  1E94  083B               	movf	_DimmerIntr1^(0+128),w
 14253  1E95  0020               	movlb	0	; select bank0
 14254  1E96  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14255  1E97  39F7               	andlw	-9
 14256  1E98  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14257  1E99  0021               	movlb	1	; select bank1
 14258  1E9A  00BB               	movwf	_DimmerIntr1^(0+128)
 14259  1E9B  0008               	return
 14260  1E9C                     __end_of_setDimmerIntr_ControlStatus:	
 14261                           
 14262                           	psect	text94
 14263  0CAB                     __ptext94:	
 14264 ;; *************** function _setDelayOff_GO *****************
 14265 ;; Defined at:
 14266 ;;		line 87 in file "../src/DelayOff_B1.c"
 14267 ;; Parameters:    Size  Location     Type
 14268 ;;  sw              1    wreg     unsigned char 
 14269 ;;  command         1   69[BANK0 ] unsigned char 
 14270 ;;  value           1   70[BANK0 ] unsigned char 
 14271 ;; Auto vars:     Size  Location     Type
 14272 ;;  sw              1   76[BANK0 ] unsigned char 
 14273 ;;  k               1   75[BANK0 ] unsigned char 
 14274 ;;  j               1   74[BANK0 ] unsigned char 
 14275 ;;  i               1   73[BANK0 ] unsigned char 
 14276 ;; Return value:  Size  Location     Type
 14277 ;;		None               void
 14278 ;; Registers used:
 14279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14280 ;; Tracked objects:
 14281 ;;		On entry : 0/0
 14282 ;;		On exit  : 0/0
 14283 ;;		Unchanged: 0/0
 14284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14285 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14286 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14287 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14288 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14289 ;;Total ram usage:        8 bytes
 14290 ;; Hardware stack levels used:    1
 14291 ;; Hardware stack levels required when called:    6
 14292 ;; This function calls:
 14293 ;;		_DelayOffPointSelect
 14294 ;;		___bmul
 14295 ;;		_setProductData
 14296 ;; This function is called by:
 14297 ;;		_setDimmerLights_OnOff
 14298 ;;		_setRFSW_Control
 14299 ;; This function uses a non-reentrant model
 14300 ;;
 14301                           
 14302                           
 14303                           ;psect for function _setDelayOff_GO
 14304  0CAB                     _setDelayOff_GO:	
 14305                           
 14306                           ;incstack = 0
 14307                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14308                           ;setDelayOff_GO@sw stored from wreg
 14309  0CAB  0020               	movlb	0	; select bank0
 14310  0CAC  00EC               	movwf	setDelayOff_GO@sw
 14311                           
 14312                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14313  0CAD  086C               	movf	setDelayOff_GO@sw,w
 14314  0CAE  319C  2406  318C   	fcall	_DelayOffPointSelect
 14315                           
 14316                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14317  0CB1  0020               	movlb	0	; select bank0
 14318  0CB2  0865               	movf	setDelayOff_GO@command,w
 14319  0CB3  3A01               	xorlw	1
 14320  0CB4  3000               	movlw	0
 14321  0CB5  1903               	skipnz
 14322  0CB6  3001               	movlw	1
 14323  0CB7  00E7               	movwf	??_setDelayOff_GO
 14324  0CB8  0021               	movlb	1	; select bank1
 14325  0CB9  0849               	movf	_DelayOff^(0+128),w
 14326  0CBA  0086               	movwf	6
 14327  0CBB  3001               	movlw	1	; select bank2/3
 14328  0CBC  0087               	movwf	7
 14329  0CBD  0020               	movlb	0	; select bank0
 14330  0CBE  0DE7               	rlf	??_setDelayOff_GO,f
 14331  0CBF  0801               	movf	1,w
 14332  0CC0  0667               	xorwf	??_setDelayOff_GO,w
 14333  0CC1  39FD               	andlw	-3
 14334  0CC2  0667               	xorwf	??_setDelayOff_GO,w
 14335  0CC3  0081               	movwf	1
 14336                           
 14337                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14338  0CC4  0021               	movlb	1	; select bank1
 14339  0CC5  0849               	movf	_DelayOff^(0+128),w
 14340  0CC6  3E02               	addlw	2
 14341  0CC7  0086               	movwf	6
 14342  0CC8  3001               	movlw	1	; select bank2/3
 14343  0CC9  0087               	movwf	7
 14344  0CCA  3000               	movlw	0
 14345  0CCB  3FC0               	movwi [0]fsr1
 14346  0CCC  3FC1               	movwi [1]fsr1
 14347                           
 14348                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14349  0CCD  0849               	movf	_DelayOff^(0+128),w
 14350  0CCE  3E04               	addlw	4
 14351  0CCF  0086               	movwf	6
 14352  0CD0  3001               	movlw	1	; select bank2/3
 14353  0CD1  0087               	movwf	7
 14354  0CD2  0181               	clrf	1
 14355                           
 14356                           ;DelayOff_B1.c: 94: if (command == 1) {
 14357  0CD3  0020               	movlb	0	; select bank0
 14358  0CD4  0865               	movf	setDelayOff_GO@command,w
 14359  0CD5  3A01               	xorlw	1
 14360  0CD6  1D03               	skipz
 14361  0CD7  2D2D               	goto	l8732
 14362                           
 14363                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14364  0CD8  3005               	movlw	5
 14365  0CD9  00E7               	movwf	??_setDelayOff_GO
 14366  0CDA  0867               	movf	??_setDelayOff_GO,w
 14367  0CDB  00E9               	movwf	setDelayOff_GO@i
 14368  0CDC  01EA               	clrf	setDelayOff_GO@j
 14369  0CDD  01EB               	clrf	setDelayOff_GO@k
 14370                           
 14371                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14372  0CDE  300F               	movlw	15
 14373  0CDF  0566               	andwf	setDelayOff_GO@value,w
 14374  0CE0  00E7               	movwf	??_setDelayOff_GO
 14375  0CE1  0867               	movf	??_setDelayOff_GO,w
 14376  0CE2  3A05               	xorlw	5
 14377  0CE3  1903               	skipnz
 14378  0CE4  2CE9               	goto	l8718
 14379  0CE5  0866               	movf	setDelayOff_GO@value,w
 14380  0CE6  390F               	andlw	15
 14381  0CE7  1D03               	btfss	3,2
 14382  0CE8  2D19               	goto	l8728
 14383  0CE9                     l8718:	
 14384  0CE9  3031               	movlw	49
 14385  0CEA  0266               	subwf	setDelayOff_GO@value,w
 14386  0CEB  1803               	skipnc
 14387  0CEC  2D19               	goto	l8728
 14388                           
 14389                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14390  0CED  0866               	movf	setDelayOff_GO@value,w
 14391  0CEE  390F               	andlw	15
 14392  0CEF  00E7               	movwf	??_setDelayOff_GO
 14393  0CF0  0867               	movf	??_setDelayOff_GO,w
 14394  0CF1  00EA               	movwf	setDelayOff_GO@j
 14395                           
 14396                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14397  0CF2  0866               	movf	setDelayOff_GO@value,w
 14398  0CF3  00E7               	movwf	??_setDelayOff_GO
 14399  0CF4  3004               	movlw	4
 14400  0CF5                     u9565:	
 14401  0CF5  36E7               	lsrf	??_setDelayOff_GO,f
 14402  0CF6  0B89               	decfsz	9,f
 14403  0CF7  2CF5               	goto	u9565
 14404  0CF8  0867               	movf	??_setDelayOff_GO,w
 14405  0CF9  390F               	andlw	15
 14406  0CFA  00E8               	movwf	??_setDelayOff_GO+1
 14407  0CFB  0868               	movf	??_setDelayOff_GO+1,w
 14408  0CFC  00EB               	movwf	setDelayOff_GO@k
 14409                           
 14410                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14411  0CFD  300A               	movlw	10
 14412  0CFE  00E7               	movwf	??_setDelayOff_GO
 14413  0CFF  0867               	movf	??_setDelayOff_GO,w
 14414  0D00  00A0               	movwf	___bmul@multiplicand
 14415  0D01  086B               	movf	setDelayOff_GO@k,w
 14416  0D02  319D  255B  318C   	fcall	___bmul
 14417  0D05  0020               	movlb	0	; select bank0
 14418  0D06  076A               	addwf	setDelayOff_GO@j,w
 14419  0D07  00E8               	movwf	??_setDelayOff_GO+1
 14420  0D08  0021               	movlb	1	; select bank1
 14421  0D09  0A49               	incf	_DelayOff^(0+128),w
 14422  0D0A  0086               	movwf	6
 14423  0D0B  3001               	movlw	1	; select bank2/3
 14424  0D0C  0087               	movwf	7
 14425  0D0D  0020               	movlb	0	; select bank0
 14426  0D0E  0868               	movf	??_setDelayOff_GO+1,w
 14427  0D0F  0081               	movwf	1
 14428                           
 14429                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14430  0D10  0866               	movf	setDelayOff_GO@value,w
 14431  0D11  00E7               	movwf	??_setDelayOff_GO
 14432  0D12  0867               	movf	??_setDelayOff_GO,w
 14433  0D13  00E2               	movwf	setProductData@value
 14434  0D14  086C               	movf	setDelayOff_GO@sw,w
 14435  0D15  3E1A               	addlw	26
 14436  0D16  319C  241E         	fcall	_setProductData
 14437                           
 14438                           ;DelayOff_B1.c: 103: } else {
 14439  0D18  0008               	return
 14440  0D19                     l8728:	
 14441                           
 14442                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14443  0D19  3005               	movlw	5
 14444  0D1A  0020               	movlb	0	; select bank0
 14445  0D1B  00E7               	movwf	??_setDelayOff_GO
 14446  0D1C  0021               	movlb	1	; select bank1
 14447  0D1D  0A49               	incf	_DelayOff^(0+128),w
 14448  0D1E  0086               	movwf	6
 14449  0D1F  3001               	movlw	1	; select bank2/3
 14450  0D20  0087               	movwf	7
 14451  0D21  0020               	movlb	0	; select bank0
 14452  0D22  0867               	movf	??_setDelayOff_GO,w
 14453  0D23  0081               	movwf	1
 14454                           
 14455                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14456  0D24  3005               	movlw	5
 14457  0D25  00E7               	movwf	??_setDelayOff_GO
 14458  0D26  0867               	movf	??_setDelayOff_GO,w
 14459  0D27  00E2               	movwf	setProductData@value
 14460  0D28  086C               	movf	setDelayOff_GO@sw,w
 14461  0D29  3E1A               	addlw	26
 14462  0D2A  319C  241E         	fcall	_setProductData
 14463                           
 14464                           ;DelayOff_B1.c: 106: }
 14465                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14466  0D2C  0008               	return
 14467  0D2D                     l8732:	
 14468  0D2D  0020               	movlb	0	; select bank0
 14469  0D2E  08E5               	movf	setDelayOff_GO@command,f
 14470  0D2F  1D03               	skipz
 14471  0D30  0008               	return
 14472                           
 14473                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14474  0D31  01E2               	clrf	setProductData@value
 14475  0D32  086C               	movf	setDelayOff_GO@sw,w
 14476  0D33  3E1A               	addlw	26
 14477  0D34  319C  241E         	fcall	_setProductData
 14478  0D36  0008               	return
 14479  0D37                     __end_of_setDelayOff_GO:	
 14480                           
 14481                           	psect	text95
 14482  1D5B                     __ptext95:	
 14483 ;; *************** function ___bmul *****************
 14484 ;; Defined at:
 14485 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14486 ;; Parameters:    Size  Location     Type
 14487 ;;  multiplier      1    wreg     unsigned char 
 14488 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14489 ;; Auto vars:     Size  Location     Type
 14490 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14491 ;;  product         1    2[BANK0 ] unsigned char 
 14492 ;; Return value:  Size  Location     Type
 14493 ;;                  1    wreg      unsigned char 
 14494 ;; Registers used:
 14495 ;;		wreg, status,2, status,0
 14496 ;; Tracked objects:
 14497 ;;		On entry : 0/0
 14498 ;;		On exit  : 0/0
 14499 ;;		Unchanged: 0/0
 14500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14501 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;Total ram usage:        4 bytes
 14506 ;; Hardware stack levels used:    1
 14507 ;; Hardware stack levels required when called:    5
 14508 ;; This function calls:
 14509 ;;		Nothing
 14510 ;; This function is called by:
 14511 ;;		_setDelayOff_GO
 14512 ;;		_DelayTimejudge
 14513 ;; This function uses a non-reentrant model
 14514 ;;
 14515                           
 14516                           
 14517                           ;psect for function ___bmul
 14518  1D5B                     ___bmul:	
 14519                           
 14520                           ;incstack = 0
 14521                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14522                           ;___bmul@multiplier stored from wreg
 14523  1D5B  0020               	movlb	0	; select bank0
 14524  1D5C  00A3               	movwf	___bmul@multiplier
 14525  1D5D  01A2               	clrf	___bmul@product
 14526  1D5E                     l8396:	
 14527  1D5E  1C23               	btfss	___bmul@multiplier,0
 14528  1D5F  2D64               	goto	l8400
 14529  1D60  0820               	movf	___bmul@multiplicand,w
 14530  1D61  00A1               	movwf	??___bmul
 14531  1D62  0821               	movf	??___bmul,w
 14532  1D63  07A2               	addwf	___bmul@product,f
 14533  1D64                     l8400:	
 14534  1D64  1003               	clrc
 14535  1D65  0DA0               	rlf	___bmul@multiplicand,f
 14536  1D66  1003               	clrc
 14537  1D67  0CA3               	rrf	___bmul@multiplier,f
 14538  1D68  08A3               	movf	___bmul@multiplier,f
 14539  1D69  1D03               	skipz
 14540  1D6A  2D5E               	goto	l8396
 14541  1D6B  0822               	movf	___bmul@product,w
 14542  1D6C  0008               	return
 14543  1D6D                     __end_of___bmul:	
 14544                           
 14545                           	psect	text96
 14546  1EB4                     __ptext96:	
 14547 ;; *************** function _setCmd_Status *****************
 14548 ;; Defined at:
 14549 ;;		line 651 in file "../src/Main_B1.c"
 14550 ;; Parameters:    Size  Location     Type
 14551 ;;  number          1    wreg     unsigned char 
 14552 ;;  cmd             1    0[BANK0 ] unsigned char 
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;  number          1    2[BANK0 ] unsigned char 
 14555 ;; Return value:  Size  Location     Type
 14556 ;;		None               void
 14557 ;; Registers used:
 14558 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14559 ;; Tracked objects:
 14560 ;;		On entry : 0/0
 14561 ;;		On exit  : 0/0
 14562 ;;		Unchanged: 0/0
 14563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14564 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;Total ram usage:        3 bytes
 14569 ;; Hardware stack levels used:    1
 14570 ;; Hardware stack levels required when called:    5
 14571 ;; This function calls:
 14572 ;;		Nothing
 14573 ;; This function is called by:
 14574 ;;		_setDimmerLights_OnOff
 14575 ;;		_setControl_Lights_Table
 14576 ;; This function uses a non-reentrant model
 14577 ;;
 14578                           
 14579                           
 14580                           ;psect for function _setCmd_Status
 14581  1EB4                     _setCmd_Status:	
 14582                           
 14583                           ;incstack = 0
 14584                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14585                           ;setCmd_Status@number stored from wreg
 14586  1EB4  0020               	movlb	0	; select bank0
 14587  1EB5  00A2               	movwf	setCmd_Status@number
 14588                           
 14589                           ;Main_B1.c: 652: switch (number) {
 14590  1EB6  2EC6               	goto	l8886
 14591  1EB7                     l8882:	
 14592                           ;Main_B1.c: 653: case 1:
 14593                           
 14594                           
 14595                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14596  1EB7  0820               	movf	setCmd_Status@cmd,w
 14597  1EB8  3A01               	xorlw	1
 14598  1EB9  3000               	movlw	0
 14599  1EBA  1903               	skipnz
 14600  1EBB  3001               	movlw	1
 14601  1EBC  00A1               	movwf	??_setCmd_Status
 14602  1EBD  0021               	movlb	1	; select bank1
 14603  1EBE  0848               	movf	_Cmd^(0+128),w
 14604  1EBF  0020               	movlb	0	; select bank0
 14605  1EC0  0621               	xorwf	??_setCmd_Status,w
 14606  1EC1  39FE               	andlw	-2
 14607  1EC2  0621               	xorwf	??_setCmd_Status,w
 14608  1EC3  0021               	movlb	1	; select bank1
 14609  1EC4  00C8               	movwf	_Cmd^(0+128)
 14610                           
 14611                           ;Main_B1.c: 656: }
 14612                           
 14613                           ;Main_B1.c: 655: break;
 14614  1EC5  0008               	return
 14615  1EC6                     l8886:	
 14616  1EC6  0020               	movlb	0	; select bank0
 14617  1EC7  0822               	movf	setCmd_Status@number,w
 14618                           
 14619                           ; Switch size 1, requested type "space"
 14620                           ; Number of cases is 1, Range of values is 1 to 1
 14621                           ; switch strategies available:
 14622                           ; Name         Instructions Cycles
 14623                           ; simple_byte            4     3 (average)
 14624                           ; direct_byte           11     9 (fixed)
 14625                           ; jumptable            263     9 (fixed)
 14626                           ;	Chosen strategy is simple_byte
 14627  1EC8  3A01               	xorlw	1	; case 1
 14628  1EC9  1903               	skipnz
 14629  1ECA  2EB7               	goto	l8882
 14630  1ECB  2ECC               	goto	l1508
 14631  1ECC                     l1508:	
 14632  1ECC  0008               	return
 14633  1ECD                     __end_of_setCmd_Status:	
 14634                           
 14635                           	psect	text97
 14636  1BD0                     __ptext97:	
 14637 ;; *************** function _getMain_All_LightsStatus *****************
 14638 ;; Defined at:
 14639 ;;		line 373 in file "../src/Main_B1.c"
 14640 ;; Parameters:    Size  Location     Type
 14641 ;;		None
 14642 ;; Auto vars:     Size  Location     Type
 14643 ;;  status          1    0[BANK0 ] unsigned char 
 14644 ;; Return value:  Size  Location     Type
 14645 ;;                  1    wreg      unsigned char 
 14646 ;; Registers used:
 14647 ;;		wreg, status,2
 14648 ;; Tracked objects:
 14649 ;;		On entry : 0/0
 14650 ;;		On exit  : 0/0
 14651 ;;		Unchanged: 0/0
 14652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14656 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;Total ram usage:        1 bytes
 14658 ;; Hardware stack levels used:    1
 14659 ;; Hardware stack levels required when called:    5
 14660 ;; This function calls:
 14661 ;;		Nothing
 14662 ;; This function is called by:
 14663 ;;		_DimmerLights_Main
 14664 ;;		_setDimmerLights_Main
 14665 ;;		_setDimmerLights_OnOff
 14666 ;;		_Flash_Memory_Main
 14667 ;;		_Exception_Main
 14668 ;;		_Load_Main
 14669 ;;		_setTemp_Main
 14670 ;;		_setControl_Lights_Table
 14671 ;; This function uses a non-reentrant model
 14672 ;;
 14673                           
 14674                           
 14675                           ;psect for function _getMain_All_LightsStatus
 14676  1BD0                     _getMain_All_LightsStatus:	
 14677                           
 14678                           ;Main_B1.c: 374: char status = 0;
 14679                           
 14680                           ;incstack = 0
 14681                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14682  1BD0  0020               	movlb	0	; select bank0
 14683  1BD1  01A0               	clrf	getMain_All_LightsStatus@status
 14684                           
 14685                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14686  1BD2  3000               	movlw	0
 14687  1BD3  0023               	movlb	3	; select bank3
 14688  1BD4  1848               	btfsc	(_DimmerLights1^(0+384)+1),0
 14689  1BD5  3001               	movlw	1
 14690  1BD6  0020               	movlb	0	; select bank0
 14691  1BD7  00A0               	movwf	getMain_All_LightsStatus@status
 14692                           
 14693                           ;Main_B1.c: 420: return status;
 14694  1BD8  0820               	movf	getMain_All_LightsStatus@status,w
 14695  1BD9  0008               	return
 14696  1BDA                     __end_of_getMain_All_LightsStatus:	
 14697                           
 14698                           	psect	text98
 14699  1CE2                     __ptext98:	
 14700 ;; *************** function _getDelayOff_GO *****************
 14701 ;; Defined at:
 14702 ;;		line 114 in file "../src/DelayOff_B1.c"
 14703 ;; Parameters:    Size  Location     Type
 14704 ;;  sw              1    wreg     unsigned char 
 14705 ;; Auto vars:     Size  Location     Type
 14706 ;;  sw              1    2[BANK0 ] unsigned char 
 14707 ;;  go              1    3[BANK0 ] unsigned char 
 14708 ;; Return value:  Size  Location     Type
 14709 ;;                  1    wreg      unsigned char 
 14710 ;; Registers used:
 14711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14712 ;; Tracked objects:
 14713 ;;		On entry : 0/0
 14714 ;;		On exit  : 0/0
 14715 ;;		Unchanged: 0/0
 14716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;Total ram usage:        2 bytes
 14722 ;; Hardware stack levels used:    1
 14723 ;; Hardware stack levels required when called:    6
 14724 ;; This function calls:
 14725 ;;		_DelayOffPointSelect
 14726 ;; This function is called by:
 14727 ;;		_setDimmerLights_OnOff
 14728 ;; This function uses a non-reentrant model
 14729 ;;
 14730                           
 14731                           
 14732                           ;psect for function _getDelayOff_GO
 14733  1CE2                     _getDelayOff_GO:	
 14734                           
 14735                           ;incstack = 0
 14736                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14737                           ;getDelayOff_GO@sw stored from wreg
 14738  1CE2  0020               	movlb	0	; select bank0
 14739  1CE3  00A2               	movwf	getDelayOff_GO@sw
 14740                           
 14741                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14742  1CE4  0822               	movf	getDelayOff_GO@sw,w
 14743  1CE5  319C  2406         	fcall	_DelayOffPointSelect
 14744                           
 14745                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14746  1CE7  0021               	movlb	1	; select bank1
 14747  1CE8  0849               	movf	_DelayOff^(0+128),w
 14748  1CE9  0086               	movwf	6
 14749  1CEA  3001               	movlw	1	; select bank2/3
 14750  1CEB  0087               	movwf	7
 14751  1CEC  3000               	movlw	0
 14752  1CED  1881               	btfsc	1,1
 14753  1CEE  3001               	movlw	1
 14754  1CEF  0020               	movlb	0	; select bank0
 14755  1CF0  00A3               	movwf	getDelayOff_GO@go
 14756                           
 14757                           ;DelayOff_B1.c: 117: return go;
 14758  1CF1  0823               	movf	getDelayOff_GO@go,w
 14759  1CF2  0008               	return
 14760  1CF3                     __end_of_getDelayOff_GO:	
 14761                           
 14762                           	psect	text99
 14763  1D49                     __ptext99:	
 14764 ;; *************** function _getCmd_Status *****************
 14765 ;; Defined at:
 14766 ;;		line 659 in file "../src/Main_B1.c"
 14767 ;; Parameters:    Size  Location     Type
 14768 ;;  number          1    wreg     unsigned char 
 14769 ;; Auto vars:     Size  Location     Type
 14770 ;;  number          1    0[BANK0 ] unsigned char 
 14771 ;;  cmd             1    1[BANK0 ] unsigned char 
 14772 ;; Return value:  Size  Location     Type
 14773 ;;                  1    wreg      unsigned char 
 14774 ;; Registers used:
 14775 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14776 ;; Tracked objects:
 14777 ;;		On entry : 0/0
 14778 ;;		On exit  : 0/0
 14779 ;;		Unchanged: 0/0
 14780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14782 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;Total ram usage:        2 bytes
 14786 ;; Hardware stack levels used:    1
 14787 ;; Hardware stack levels required when called:    5
 14788 ;; This function calls:
 14789 ;;		Nothing
 14790 ;; This function is called by:
 14791 ;;		_setDimmerLights_OnOff
 14792 ;; This function uses a non-reentrant model
 14793 ;;
 14794                           
 14795                           
 14796                           ;psect for function _getCmd_Status
 14797  1D49                     _getCmd_Status:	
 14798                           
 14799                           ;incstack = 0
 14800                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14801                           ;getCmd_Status@number stored from wreg
 14802  1D49  0020               	movlb	0	; select bank0
 14803  1D4A  00A0               	movwf	getCmd_Status@number
 14804                           
 14805                           ;Main_B1.c: 660: char cmd = 0;
 14806  1D4B  01A1               	clrf	getCmd_Status@cmd
 14807                           
 14808                           ;Main_B1.c: 661: switch (number) {
 14809  1D4C  2D54               	goto	l9136
 14810  1D4D                     l9132:	
 14811                           ;Main_B1.c: 662: case 1:
 14812                           
 14813                           
 14814                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 14815  1D4D  3000               	movlw	0
 14816  1D4E  0021               	movlb	1	; select bank1
 14817  1D4F  1848               	btfsc	_Cmd^(0+128),0
 14818  1D50  3001               	movlw	1
 14819  1D51  0020               	movlb	0	; select bank0
 14820  1D52  00A1               	movwf	getCmd_Status@cmd
 14821                           
 14822                           ;Main_B1.c: 665: }
 14823                           
 14824                           ;Main_B1.c: 664: break;
 14825  1D53  2D59               	goto	l9138
 14826  1D54                     l9136:	
 14827  1D54  0820               	movf	getCmd_Status@number,w
 14828                           
 14829                           ; Switch size 1, requested type "space"
 14830                           ; Number of cases is 1, Range of values is 1 to 1
 14831                           ; switch strategies available:
 14832                           ; Name         Instructions Cycles
 14833                           ; simple_byte            4     3 (average)
 14834                           ; direct_byte           11     9 (fixed)
 14835                           ; jumptable            263     9 (fixed)
 14836                           ;	Chosen strategy is simple_byte
 14837  1D55  3A01               	xorlw	1	; case 1
 14838  1D56  1903               	skipnz
 14839  1D57  2D4D               	goto	l9132
 14840  1D58  2D59               	goto	l9138
 14841  1D59                     l9138:	
 14842                           
 14843                           ;Main_B1.c: 666: return cmd;
 14844  1D59  0821               	movf	getCmd_Status@cmd,w
 14845  1D5A  0008               	return
 14846  1D5B                     __end_of_getCmd_Status:	
 14847                           
 14848                           	psect	text100
 14849  14FB                     __ptext100:	
 14850 ;; *************** function _setDimmerLights_Dimming *****************
 14851 ;; Defined at:
 14852 ;;		line 945 in file "../src/Dimmer_B1.c"
 14853 ;; Parameters:    Size  Location     Type
 14854 ;;  lights          1    wreg     unsigned char 
 14855 ;;  status          1   74[BANK0 ] unsigned char 
 14856 ;; Auto vars:     Size  Location     Type
 14857 ;;  lights          1   77[BANK0 ] unsigned char 
 14858 ;;  value           1   76[BANK0 ] unsigned char 
 14859 ;; Return value:  Size  Location     Type
 14860 ;;		None               void
 14861 ;; Registers used:
 14862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14863 ;; Tracked objects:
 14864 ;;		On entry : 0/0
 14865 ;;		On exit  : 0/0
 14866 ;;		Unchanged: 0/0
 14867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14868 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14871 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14872 ;;Total ram usage:        4 bytes
 14873 ;; Hardware stack levels used:    1
 14874 ;; Hardware stack levels required when called:    8
 14875 ;; This function calls:
 14876 ;;		_getDimmerIntr_DimmingValue
 14877 ;;		_getDimmerLights_ValueToPercent
 14878 ;;		_setBuz
 14879 ;;		_setDimmerIntr_Dimming_Sw
 14880 ;;		_setDimmerIntr_MaxmumValue
 14881 ;;		_setDimmerLights_Line
 14882 ;;		_setMemory_Modify
 14883 ;;		_setProductData
 14884 ;;		_setRF_DimmerLights
 14885 ;;		_setRF_TransceiveGO
 14886 ;;		_setTxData
 14887 ;; This function is called by:
 14888 ;;		_setDimmerLights_Main
 14889 ;; This function uses a non-reentrant model
 14890 ;;
 14891                           
 14892                           
 14893                           ;psect for function _setDimmerLights_Dimming
 14894  14FB                     _setDimmerLights_Dimming:	
 14895                           
 14896                           ;incstack = 0
 14897                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14898                           ;setDimmerLights_Dimming@lights stored from wreg
 14899  14FB  0020               	movlb	0	; select bank0
 14900  14FC  00ED               	movwf	setDimmerLights_Dimming@lights
 14901                           
 14902                           ;Dimmer_B1.c: 946: if (status == 1) {
 14903  14FD  086A               	movf	setDimmerLights_Dimming@status,w
 14904  14FE  3A01               	xorlw	1
 14905  14FF  1D03               	skipz
 14906  1500  2D14               	goto	l9376
 14907                           
 14908                           ;Dimmer_B1.c: 947: setDimmerIntr_Dimming_Sw(lights, 1);
 14909  1501  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14910  1502  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 14911  1503  086D               	movf	setDimmerLights_Dimming@lights,w
 14912  1504  319E  266E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14913                           
 14914                           ;Dimmer_B1.c: 950: setRF_TransceiveGO(0);
 14915  1507  3000               	movlw	0
 14916  1508  319D  25A4  3194   	fcall	_setRF_TransceiveGO
 14917                           
 14918                           ;Dimmer_B1.c: 952: setBuz(1, 100);
 14919  150B  3064               	movlw	100
 14920  150C  0020               	movlb	0	; select bank0
 14921  150D  00A9               	movwf	setBuz@time
 14922  150E  3000               	movlw	0
 14923  150F  00AA               	movwf	setBuz@time+1
 14924  1510  3001               	movlw	1
 14925  1511  3195  2551         	fcall	_setBuz
 14926                           
 14927                           ;Dimmer_B1.c: 953: } else if (status == 0) {
 14928  1513  0008               	return
 14929  1514                     l9376:	
 14930  1514  0020               	movlb	0	; select bank0
 14931  1515  08EA               	movf	setDimmerLights_Dimming@status,f
 14932  1516  1D03               	skipz
 14933  1517  0008               	return
 14934                           
 14935                           ;Dimmer_B1.c: 954: setDimmerIntr_Dimming_Sw(lights, 0);
 14936  1518  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14937  1519  086D               	movf	setDimmerLights_Dimming@lights,w
 14938  151A  319E  266E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14939                           
 14940                           ;Dimmer_B1.c: 957: Dimmer.Load_Status = 0;
 14941  151D  0022               	movlb	2	; select bank2
 14942  151E  112C               	bcf	_Dimmer^(0+256),2
 14943                           
 14944                           ;Dimmer_B1.c: 958: setDimmerLights_Line(lights);
 14945  151F  0020               	movlb	0	; select bank0
 14946  1520  086D               	movf	setDimmerLights_Dimming@lights,w
 14947  1521  319D  2537  3194   	fcall	_setDimmerLights_Line
 14948                           
 14949                           ;Dimmer_B1.c: 960: char value = getDimmerIntr_DimmingValue(lights);
 14950  1524  0020               	movlb	0	; select bank0
 14951  1525  086D               	movf	setDimmerLights_Dimming@lights,w
 14952  1526  319C  24A3  3194   	fcall	_getDimmerIntr_DimmingValue
 14953  1529  0020               	movlb	0	; select bank0
 14954  152A  00EB               	movwf	??_setDimmerLights_Dimming
 14955  152B  086B               	movf	??_setDimmerLights_Dimming,w
 14956  152C  00EC               	movwf	setDimmerLights_Dimming@value
 14957                           
 14958                           ;Dimmer_B1.c: 961: setDimmerIntr_MaxmumValue(lights, value);
 14959  152D  086C               	movf	setDimmerLights_Dimming@value,w
 14960  152E  00EB               	movwf	??_setDimmerLights_Dimming
 14961  152F  086B               	movf	??_setDimmerLights_Dimming,w
 14962  1530  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14963  1531  086D               	movf	setDimmerLights_Dimming@lights,w
 14964  1532  319C  242A  3194   	fcall	_setDimmerIntr_MaxmumValue
 14965                           
 14966                           ;Dimmer_B1.c: 962: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 14967  1535  0020               	movlb	0	; select bank0
 14968  1536  086C               	movf	setDimmerLights_Dimming@value,w
 14969  1537  3196  26CB  3194   	fcall	_getDimmerLights_ValueToPercent
 14970  153A  0020               	movlb	0	; select bank0
 14971  153B  00EB               	movwf	??_setDimmerLights_Dimming
 14972  153C  086B               	movf	??_setDimmerLights_Dimming,w
 14973  153D  00E2               	movwf	setProductData@value
 14974  153E  086D               	movf	setDimmerLights_Dimming@lights,w
 14975  153F  3E14               	addlw	20
 14976  1540  319C  241E  3194   	fcall	_setProductData
 14977                           
 14978                           ;Dimmer_B1.c: 969: setMemory_Modify(1);
 14979  1543  3001               	movlw	1
 14980  1544  319D  2591  3194   	fcall	_setMemory_Modify
 14981                           
 14982                           ;Dimmer_B1.c: 973: setRF_DimmerLights(lights, 1);
 14983  1547  0020               	movlb	0	; select bank0
 14984  1548  01E5               	clrf	setRF_DimmerLights@on
 14985  1549  0AE5               	incf	setRF_DimmerLights@on,f
 14986  154A  086D               	movf	setDimmerLights_Dimming@lights,w
 14987  154B  3197  2730  3194   	fcall	_setRF_DimmerLights
 14988                           
 14989                           ;Dimmer_B1.c: 974: setTxData();
 14990  154E  318F  2745         	fcall	_setTxData
 14991  1550  0008               	return
 14992  1551                     __end_of_setDimmerLights_Dimming:	
 14993                           
 14994                           	psect	text101
 14995  0F45                     __ptext101:	
 14996 ;; *************** function _setTxData *****************
 14997 ;; Defined at:
 14998 ;;		line 183 in file "../src/RF_Control_B1.c"
 14999 ;; Parameters:    Size  Location     Type
 15000 ;;		None
 15001 ;; Auto vars:     Size  Location     Type
 15002 ;;  i               1    0        unsigned char 
 15003 ;; Return value:  Size  Location     Type
 15004 ;;		None               void
 15005 ;; Registers used:
 15006 ;;		wreg, fsr1l, fsr1h, status,2
 15007 ;; Tracked objects:
 15008 ;;		On entry : 0/0
 15009 ;;		On exit  : 0/0
 15010 ;;		Unchanged: 0/0
 15011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;Total ram usage:        1 bytes
 15017 ;; Hardware stack levels used:    1
 15018 ;; Hardware stack levels required when called:    5
 15019 ;; This function calls:
 15020 ;;		Nothing
 15021 ;; This function is called by:
 15022 ;;		_setDimmerLights_OnOff
 15023 ;;		_setDimmerLights_Dimming
 15024 ;;		_getRxData
 15025 ;;		_setControl_Lights_Table
 15026 ;;		_setRFSW_Control
 15027 ;;		_setRFSW_AdjControl
 15028 ;; This function uses a non-reentrant model
 15029 ;;
 15030                           
 15031                           
 15032                           ;psect for function _setTxData
 15033  0F45                     _setTxData:	
 15034                           
 15035                           ;RF_Control_B1.c: 184: char i;
 15036                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15037                           
 15038                           ;incstack = 0
 15039                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15040  0F45  0021               	movlb	1	; select bank1
 15041  0F46  1C20               	btfss	_RF1^(0+128),0
 15042  0F47  0008               	return
 15043                           
 15044                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15045  0F48  1520               	bsf	_RF1^(0+128),2
 15046                           
 15047                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15048  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15049  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15050                           
 15051                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15052  0F4B  3063               	movlw	99
 15053  0F4C  0020               	movlb	0	; select bank0
 15054  0F4D  00A0               	movwf	??_setTxData
 15055  0F4E  0820               	movf	??_setTxData,w
 15056  0F4F  0023               	movlb	3	; select bank3
 15057  0F50  00A0               	movwf	_RF_Data^(0+384)
 15058                           
 15059                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15060  0F51  3002               	movlw	2
 15061  0F52  0020               	movlb	0	; select bank0
 15062  0F53  00A0               	movwf	??_setTxData
 15063  0F54  0820               	movf	??_setTxData,w
 15064  0F55  0023               	movlb	3	; select bank3
 15065  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15066                           
 15067                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15068  0F57  0021               	movlb	1	; select bank1
 15069  0F58  0863               	movf	_product^(0+128),w
 15070  0F59  0086               	movwf	6
 15071  0F5A  3002               	movlw	2	; select bank4/5
 15072  0F5B  0087               	movwf	7
 15073  0F5C  3002               	movlw	2	; select bank4/5
 15074  0F5D  3F42               	moviw [2]fsr1
 15075  0F5E  0023               	movlb	3	; select bank3
 15076  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15077                           
 15078                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15079  0F60  0021               	movlb	1	; select bank1
 15080  0F61  0863               	movf	_product^(0+128),w
 15081  0F62  0086               	movwf	6
 15082  0F63  3002               	movlw	2	; select bank4/5
 15083  0F64  0087               	movwf	7
 15084  0F65  3002               	movlw	2	; select bank4/5
 15085  0F66  3F43               	moviw [3]fsr1
 15086  0F67  0023               	movlb	3	; select bank3
 15087  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15088                           
 15089                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15090  0F69  0021               	movlb	1	; select bank1
 15091  0F6A  0863               	movf	_product^(0+128),w
 15092  0F6B  0086               	movwf	6
 15093  0F6C  3002               	movlw	2	; select bank4/5
 15094  0F6D  0087               	movwf	7
 15095  0F6E  3002               	movlw	2	; select bank4/5
 15096  0F6F  3F44               	moviw [4]fsr1
 15097  0F70  0023               	movlb	3	; select bank3
 15098  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15099                           
 15100                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15101  0F72  0021               	movlb	1	; select bank1
 15102  0F73  0863               	movf	_product^(0+128),w
 15103  0F74  0086               	movwf	6
 15104  0F75  3002               	movlw	2	; select bank4/5
 15105  0F76  0087               	movwf	7
 15106  0F77  3002               	movlw	2	; select bank4/5
 15107  0F78  3F45               	moviw [5]fsr1
 15108  0F79  0023               	movlb	3	; select bank3
 15109  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15110                           
 15111                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15112  0F7B  0021               	movlb	1	; select bank1
 15113  0F7C  0863               	movf	_product^(0+128),w
 15114  0F7D  0086               	movwf	6
 15115  0F7E  3002               	movlw	2	; select bank4/5
 15116  0F7F  0087               	movwf	7
 15117  0F80  3002               	movlw	2	; select bank4/5
 15118  0F81  3F46               	moviw [6]fsr1
 15119  0F82  0023               	movlb	3	; select bank3
 15120  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15121                           
 15122                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15123  0F84  0021               	movlb	1	; select bank1
 15124  0F85  0863               	movf	_product^(0+128),w
 15125  0F86  0086               	movwf	6
 15126  0F87  3002               	movlw	2	; select bank4/5
 15127  0F88  0087               	movwf	7
 15128  0F89  3002               	movlw	2	; select bank4/5
 15129  0F8A  3F47               	moviw [7]fsr1
 15130  0F8B  0023               	movlb	3	; select bank3
 15131  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15132                           
 15133                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15134  0F8D  0021               	movlb	1	; select bank1
 15135  0F8E  0863               	movf	_product^(0+128),w
 15136  0F8F  0086               	movwf	6
 15137  0F90  3002               	movlw	2	; select bank4/5
 15138  0F91  0087               	movwf	7
 15139  0F92  3002               	movlw	2	; select bank4/5
 15140  0F93  3F48               	moviw [8]fsr1
 15141  0F94  0023               	movlb	3	; select bank3
 15142  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15143                           
 15144                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15145  0F96  0021               	movlb	1	; select bank1
 15146  0F97  0863               	movf	_product^(0+128),w
 15147  0F98  0086               	movwf	6
 15148  0F99  3002               	movlw	2	; select bank4/5
 15149  0F9A  0087               	movwf	7
 15150  0F9B  3002               	movlw	2	; select bank4/5
 15151  0F9C  3F49               	moviw [9]fsr1
 15152  0F9D  0023               	movlb	3	; select bank3
 15153  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15154                           
 15155                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15156  0F9F  0021               	movlb	1	; select bank1
 15157  0FA0  0863               	movf	_product^(0+128),w
 15158  0FA1  0086               	movwf	6
 15159  0FA2  3002               	movlw	2	; select bank4/5
 15160  0FA3  0087               	movwf	7
 15161  0FA4  3002               	movlw	2	; select bank4/5
 15162  0FA5  3F4A               	moviw [10]fsr1
 15163  0FA6  0023               	movlb	3	; select bank3
 15164  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15165                           
 15166                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15167  0FA8  0021               	movlb	1	; select bank1
 15168  0FA9  0863               	movf	_product^(0+128),w
 15169  0FAA  0086               	movwf	6
 15170  0FAB  3002               	movlw	2	; select bank4/5
 15171  0FAC  0087               	movwf	7
 15172  0FAD  3002               	movlw	2	; select bank4/5
 15173  0FAE  3F4B               	moviw [11]fsr1
 15174  0FAF  0023               	movlb	3	; select bank3
 15175  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15176                           
 15177                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15178  0FB1  0021               	movlb	1	; select bank1
 15179  0FB2  0863               	movf	_product^(0+128),w
 15180  0FB3  0086               	movwf	6
 15181  0FB4  3002               	movlw	2	; select bank4/5
 15182  0FB5  0087               	movwf	7
 15183  0FB6  3002               	movlw	2	; select bank4/5
 15184  0FB7  3F4C               	moviw [12]fsr1
 15185  0FB8  0023               	movlb	3	; select bank3
 15186  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15187                           
 15188                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15189  0FBA  0021               	movlb	1	; select bank1
 15190  0FBB  0863               	movf	_product^(0+128),w
 15191  0FBC  0086               	movwf	6
 15192  0FBD  3002               	movlw	2	; select bank4/5
 15193  0FBE  0087               	movwf	7
 15194  0FBF  3002               	movlw	2	; select bank4/5
 15195  0FC0  3F4D               	moviw [13]fsr1
 15196  0FC1  0023               	movlb	3	; select bank3
 15197  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15198                           
 15199                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15200  0FC3  0021               	movlb	1	; select bank1
 15201  0FC4  0863               	movf	_product^(0+128),w
 15202  0FC5  0086               	movwf	6
 15203  0FC6  3002               	movlw	2	; select bank4/5
 15204  0FC7  0087               	movwf	7
 15205  0FC8  3002               	movlw	2	; select bank4/5
 15206  0FC9  3F4E               	moviw [14]fsr1
 15207  0FCA  0023               	movlb	3	; select bank3
 15208  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15209                           
 15210                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15211  0FCC  0021               	movlb	1	; select bank1
 15212  0FCD  0863               	movf	_product^(0+128),w
 15213  0FCE  0086               	movwf	6
 15214  0FCF  3002               	movlw	2	; select bank4/5
 15215  0FD0  0087               	movwf	7
 15216  0FD1  3002               	movlw	2	; select bank4/5
 15217  0FD2  3F4F               	moviw [15]fsr1
 15218  0FD3  0023               	movlb	3	; select bank3
 15219  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15220                           
 15221                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15222  0FD5  0021               	movlb	1	; select bank1
 15223  0FD6  0863               	movf	_product^(0+128),w
 15224  0FD7  0086               	movwf	6
 15225  0FD8  3002               	movlw	2	; select bank4/5
 15226  0FD9  0087               	movwf	7
 15227  0FDA  3002               	movlw	2	; select bank4/5
 15228  0FDB  3F50               	moviw [16]fsr1
 15229  0FDC  0023               	movlb	3	; select bank3
 15230  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15231                           
 15232                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15233  0FDE  0021               	movlb	1	; select bank1
 15234  0FDF  0863               	movf	_product^(0+128),w
 15235  0FE0  0086               	movwf	6
 15236  0FE1  3002               	movlw	2	; select bank4/5
 15237  0FE2  0087               	movwf	7
 15238  0FE3  3002               	movlw	2	; select bank4/5
 15239  0FE4  3F51               	moviw [17]fsr1
 15240  0FE5  0023               	movlb	3	; select bank3
 15241  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15242                           
 15243                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15244  0FE7  0021               	movlb	1	; select bank1
 15245  0FE8  0863               	movf	_product^(0+128),w
 15246  0FE9  0086               	movwf	6
 15247  0FEA  3002               	movlw	2	; select bank4/5
 15248  0FEB  0087               	movwf	7
 15249  0FEC  3002               	movlw	2	; select bank4/5
 15250  0FED  3F52               	moviw [18]fsr1
 15251  0FEE  0023               	movlb	3	; select bank3
 15252  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15253                           
 15254                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15255  0FF0  0021               	movlb	1	; select bank1
 15256  0FF1  0863               	movf	_product^(0+128),w
 15257  0FF2  0086               	movwf	6
 15258  0FF3  3002               	movlw	2	; select bank4/5
 15259  0FF4  0087               	movwf	7
 15260  0FF5  3002               	movlw	2	; select bank4/5
 15261  0FF6  3F53               	moviw [19]fsr1
 15262  0FF7  0023               	movlb	3	; select bank3
 15263  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15264                           
 15265                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15266  0FF9  30D1               	movlw	209
 15267  0FFA  0020               	movlb	0	; select bank0
 15268  0FFB  00A0               	movwf	??_setTxData
 15269  0FFC  0820               	movf	??_setTxData,w
 15270  0FFD  0023               	movlb	3	; select bank3
 15271  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15272  0FFF  0008               	return
 15273  1000                     __end_of_setTxData:	
 15274                           
 15275                           	psect	text102
 15276  1DA4                     __ptext102:	
 15277 ;; *************** function _setRF_TransceiveGO *****************
 15278 ;; Defined at:
 15279 ;;		line 470 in file "../src/RF_Control_B1.c"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;  command         1    wreg     unsigned char 
 15282 ;; Auto vars:     Size  Location     Type
 15283 ;;  command         1    1[BANK0 ] unsigned char 
 15284 ;; Return value:  Size  Location     Type
 15285 ;;		None               void
 15286 ;; Registers used:
 15287 ;;		wreg, status,2, status,0
 15288 ;; Tracked objects:
 15289 ;;		On entry : 0/0
 15290 ;;		On exit  : 0/0
 15291 ;;		Unchanged: 0/0
 15292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;Total ram usage:        2 bytes
 15298 ;; Hardware stack levels used:    1
 15299 ;; Hardware stack levels required when called:    5
 15300 ;; This function calls:
 15301 ;;		Nothing
 15302 ;; This function is called by:
 15303 ;;		_setDimmerLights_Dimming
 15304 ;; This function uses a non-reentrant model
 15305 ;;
 15306                           
 15307                           
 15308                           ;psect for function _setRF_TransceiveGO
 15309  1DA4                     _setRF_TransceiveGO:	
 15310                           
 15311                           ;incstack = 0
 15312                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15313                           ;setRF_TransceiveGO@command stored from wreg
 15314  1DA4  0020               	movlb	0	; select bank0
 15315  1DA5  00A1               	movwf	setRF_TransceiveGO@command
 15316                           
 15317                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15318  1DA6  0821               	movf	setRF_TransceiveGO@command,w
 15319  1DA7  3A01               	xorlw	1
 15320  1DA8  3000               	movlw	0
 15321  1DA9  1903               	skipnz
 15322  1DAA  3001               	movlw	1
 15323  1DAB  00A0               	movwf	??_setRF_TransceiveGO
 15324  1DAC  0DA0               	rlf	??_setRF_TransceiveGO,f
 15325  1DAD  0DA0               	rlf	??_setRF_TransceiveGO,f
 15326  1DAE  0021               	movlb	1	; select bank1
 15327  1DAF  0820               	movf	_RF1^(0+128),w
 15328  1DB0  0020               	movlb	0	; select bank0
 15329  1DB1  0620               	xorwf	??_setRF_TransceiveGO,w
 15330  1DB2  39FB               	andlw	-5
 15331  1DB3  0620               	xorwf	??_setRF_TransceiveGO,w
 15332  1DB4  0021               	movlb	1	; select bank1
 15333  1DB5  00A0               	movwf	_RF1^(0+128)
 15334  1DB6  0008               	return
 15335  1DB7                     __end_of_setRF_TransceiveGO:	
 15336                           
 15337                           	psect	text103
 15338  1730                     __ptext103:	
 15339 ;; *************** function _setRF_DimmerLights *****************
 15340 ;; Defined at:
 15341 ;;		line 455 in file "../src/RF_Control_B1.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;  lights          1    wreg     unsigned char 
 15344 ;;  on              1   69[BANK0 ] unsigned char 
 15345 ;; Auto vars:     Size  Location     Type
 15346 ;;  lights          1   73[BANK0 ] unsigned char 
 15347 ;;  status          1   72[BANK0 ] unsigned char 
 15348 ;; Return value:  Size  Location     Type
 15349 ;;		None               void
 15350 ;; Registers used:
 15351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15352 ;; Tracked objects:
 15353 ;;		On entry : 0/0
 15354 ;;		On exit  : 0/0
 15355 ;;		Unchanged: 0/0
 15356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15357 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15358 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15359 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15360 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15361 ;;Total ram usage:        5 bytes
 15362 ;; Hardware stack levels used:    1
 15363 ;; Hardware stack levels required when called:    6
 15364 ;; This function calls:
 15365 ;;		_setProductData
 15366 ;; This function is called by:
 15367 ;;		_setDimmerLights_OnOff
 15368 ;;		_setDimmerLights_Dimming
 15369 ;;		_setRFSW_Control
 15370 ;; This function uses a non-reentrant model
 15371 ;;
 15372                           
 15373                           
 15374                           ;psect for function _setRF_DimmerLights
 15375  1730                     _setRF_DimmerLights:	
 15376                           
 15377                           ;incstack = 0
 15378                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15379                           ;setRF_DimmerLights@lights stored from wreg
 15380  1730  0020               	movlb	0	; select bank0
 15381  1731  00E9               	movwf	setRF_DimmerLights@lights
 15382                           
 15383                           ;RF_Control_B1.c: 456: char status = 1;
 15384  1732  01E8               	clrf	setRF_DimmerLights@status
 15385  1733  0AE8               	incf	setRF_DimmerLights@status,f
 15386                           
 15387                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15388  1734  0869               	movf	setRF_DimmerLights@lights,w
 15389  1735  3EFF               	addlw	-1
 15390  1736  0A89               	incf	9,f
 15391  1737  2F3A               	goto	u9600
 15392  1738                     u9605:	
 15393  1738  1003               	clrc
 15394  1739  0DE8               	rlf	setRF_DimmerLights@status,f
 15395  173A                     u9600:	
 15396  173A  3EFF               	addlw	-1
 15397  173B  1D03               	skipz
 15398  173C  2F38               	goto	u9605
 15399                           
 15400                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15401  173D  0869               	movf	setRF_DimmerLights@lights,w
 15402  173E  00E6               	movwf	??_setRF_DimmerLights
 15403  173F  0866               	movf	??_setRF_DimmerLights,w
 15404  1740  00E2               	movwf	setProductData@value
 15405  1741  300B               	movlw	11
 15406  1742  319C  241E  3197   	fcall	_setProductData
 15407                           
 15408                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15409  1745  0020               	movlb	0	; select bank0
 15410  1746  0869               	movf	setRF_DimmerLights@lights,w
 15411  1747  3E1A               	addlw	26
 15412  1748  0021               	movlb	1	; select bank1
 15413  1749  0763               	addwf	_product^(0+128),w
 15414  174A  0020               	movlb	0	; select bank0
 15415  174B  00E6               	movwf	??_setRF_DimmerLights
 15416  174C  0866               	movf	??_setRF_DimmerLights,w
 15417  174D  0086               	movwf	6
 15418  174E  3002               	movlw	2	; select bank4/5
 15419  174F  0087               	movwf	7
 15420  1750  0801               	movf	1,w
 15421  1751  00E7               	movwf	??_setRF_DimmerLights+1
 15422  1752  0867               	movf	??_setRF_DimmerLights+1,w
 15423  1753  00E2               	movwf	setProductData@value
 15424  1754  3011               	movlw	17
 15425  1755  319C  241E  3197   	fcall	_setProductData
 15426                           
 15427                           ;RF_Control_B1.c: 460: if (on == 1) {
 15428  1758  0020               	movlb	0	; select bank0
 15429  1759  0865               	movf	setRF_DimmerLights@on,w
 15430  175A  3A01               	xorlw	1
 15431  175B  1D03               	skipz
 15432  175C  2F7F               	goto	l8768
 15433                           
 15434                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15435  175D  0869               	movf	setRF_DimmerLights@lights,w
 15436  175E  3E14               	addlw	20
 15437  175F  0021               	movlb	1	; select bank1
 15438  1760  0763               	addwf	_product^(0+128),w
 15439  1761  0020               	movlb	0	; select bank0
 15440  1762  00E6               	movwf	??_setRF_DimmerLights
 15441  1763  0866               	movf	??_setRF_DimmerLights,w
 15442  1764  0086               	movwf	6
 15443  1765  3002               	movlw	2	; select bank4/5
 15444  1766  0087               	movwf	7
 15445  1767  0801               	movf	1,w
 15446  1768  00E7               	movwf	??_setRF_DimmerLights+1
 15447  1769  0867               	movf	??_setRF_DimmerLights+1,w
 15448  176A  00E2               	movwf	setProductData@value
 15449  176B  3009               	movlw	9
 15450  176C  319C  241E  3197   	fcall	_setProductData
 15451                           
 15452                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15453  176F  0021               	movlb	1	; select bank1
 15454  1770  0863               	movf	_product^(0+128),w
 15455  1771  3E0F               	addlw	15
 15456  1772  0086               	movwf	6
 15457  1773  3002               	movlw	2	; select bank4/5
 15458  1774  0087               	movwf	7
 15459  1775  0801               	movf	1,w
 15460  1776  0020               	movlb	0	; select bank0
 15461  1777  0468               	iorwf	setRF_DimmerLights@status,w
 15462  1778  00E6               	movwf	??_setRF_DimmerLights
 15463  1779  0866               	movf	??_setRF_DimmerLights,w
 15464  177A  00E2               	movwf	setProductData@value
 15465  177B  300F               	movlw	15
 15466  177C  319C  241E         	fcall	_setProductData
 15467                           
 15468                           ;RF_Control_B1.c: 463: } else {
 15469  177E  0008               	return
 15470  177F                     l8768:	
 15471                           
 15472                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15473  177F  0020               	movlb	0	; select bank0
 15474  1780  01E2               	clrf	setProductData@value
 15475  1781  3009               	movlw	9
 15476  1782  319C  241E  3197   	fcall	_setProductData
 15477                           
 15478                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15479  1785  0021               	movlb	1	; select bank1
 15480  1786  0863               	movf	_product^(0+128),w
 15481  1787  3E0F               	addlw	15
 15482  1788  0086               	movwf	6
 15483  1789  3002               	movlw	2	; select bank4/5
 15484  178A  0087               	movwf	7
 15485  178B  0020               	movlb	0	; select bank0
 15486  178C  0968               	comf	setRF_DimmerLights@status,w
 15487  178D  0501               	andwf	1,w
 15488  178E  00E6               	movwf	??_setRF_DimmerLights
 15489  178F  0866               	movf	??_setRF_DimmerLights,w
 15490  1790  00E2               	movwf	setProductData@value
 15491  1791  300F               	movlw	15
 15492  1792  319C  241E         	fcall	_setProductData
 15493  1794  0008               	return
 15494  1795                     __end_of_setRF_DimmerLights:	
 15495                           
 15496                           	psect	text104
 15497  1D37                     __ptext104:	
 15498 ;; *************** function _setDimmerLights_Line *****************
 15499 ;; Defined at:
 15500 ;;		line 1019 in file "../src/Dimmer_B1.c"
 15501 ;; Parameters:    Size  Location     Type
 15502 ;;  lights          1    wreg     unsigned char 
 15503 ;; Auto vars:     Size  Location     Type
 15504 ;;  lights          1    0[BANK0 ] unsigned char 
 15505 ;; Return value:  Size  Location     Type
 15506 ;;		None               void
 15507 ;; Registers used:
 15508 ;;		wreg
 15509 ;; Tracked objects:
 15510 ;;		On entry : 0/0
 15511 ;;		On exit  : 0/0
 15512 ;;		Unchanged: 0/0
 15513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;Total ram usage:        1 bytes
 15519 ;; Hardware stack levels used:    1
 15520 ;; Hardware stack levels required when called:    5
 15521 ;; This function calls:
 15522 ;;		Nothing
 15523 ;; This function is called by:
 15524 ;;		_setDimmerLights_OnOff
 15525 ;;		_setDimmerLights_Dimming
 15526 ;; This function uses a non-reentrant model
 15527 ;;
 15528                           
 15529                           
 15530                           ;psect for function _setDimmerLights_Line
 15531  1D37                     _setDimmerLights_Line:	
 15532                           
 15533                           ;incstack = 0
 15534                           ; Regs used in _setDimmerLights_Line: [wreg]
 15535                           ;setDimmerLights_Line@lights stored from wreg
 15536  1D37  0020               	movlb	0	; select bank0
 15537  1D38  00A0               	movwf	setDimmerLights_Line@lights
 15538                           
 15539                           ;Dimmer_B1.c: 1020: Dimmer.LoadGO = 1;
 15540  1D39  0022               	movlb	2	; select bank2
 15541  1D3A  14AC               	bsf	_Dimmer^(0+256),1
 15542                           
 15543                           ;Dimmer_B1.c: 1022: DimmerLights1.Line = 0;
 15544  1D3B  0023               	movlb	3	; select bank3
 15545  1D3C  10C8               	bcf	(_DimmerLights1^(0+384)+1),1
 15546                           
 15547                           ;Dimmer_B1.c: 1023: if (lights == 1 && lights != 0) {
 15548  1D3D  0020               	movlb	0	; select bank0
 15549  1D3E  0820               	movf	setDimmerLights_Line@lights,w
 15550  1D3F  3A01               	xorlw	1
 15551  1D40  1D03               	skipz
 15552  1D41  0008               	return
 15553  1D42  0820               	movf	setDimmerLights_Line@lights,w
 15554  1D43  1903               	btfsc	3,2
 15555  1D44  0008               	return
 15556                           
 15557                           ;Dimmer_B1.c: 1024: DimmerLights1.Line = 1;
 15558  1D45  0023               	movlb	3	; select bank3
 15559  1D46  14C8               	bsf	(_DimmerLights1^(0+384)+1),1
 15560  1D47  0020               	movlb	0	; select bank0
 15561  1D48  0008               	return
 15562  1D49                     __end_of_setDimmerLights_Line:	
 15563                           
 15564                           	psect	text105
 15565  1C2A                     __ptext105:	
 15566 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15567 ;; Defined at:
 15568 ;;		line 124 in file "../src/Dimmer_B1.c"
 15569 ;; Parameters:    Size  Location     Type
 15570 ;;  lights          1    wreg     unsigned char 
 15571 ;;  value           1   66[BANK0 ] unsigned char 
 15572 ;; Auto vars:     Size  Location     Type
 15573 ;;  lights          1   68[BANK0 ] unsigned char 
 15574 ;; Return value:  Size  Location     Type
 15575 ;;		None               void
 15576 ;; Registers used:
 15577 ;;		wreg
 15578 ;; Tracked objects:
 15579 ;;		On entry : 0/0
 15580 ;;		On exit  : 0/0
 15581 ;;		Unchanged: 0/0
 15582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15583 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;Total ram usage:        3 bytes
 15588 ;; Hardware stack levels used:    1
 15589 ;; Hardware stack levels required when called:    5
 15590 ;; This function calls:
 15591 ;;		Nothing
 15592 ;; This function is called by:
 15593 ;;		_setDimmerLights_OnOff
 15594 ;;		_setDimmerLights_Dimming
 15595 ;;		_setRFSW_AdjControl
 15596 ;; This function uses a non-reentrant model
 15597 ;;
 15598                           
 15599                           
 15600                           ;psect for function _setDimmerIntr_MaxmumValue
 15601  1C2A                     _setDimmerIntr_MaxmumValue:	
 15602                           
 15603                           ;incstack = 0
 15604                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15605                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15606  1C2A  0020               	movlb	0	; select bank0
 15607  1C2B  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15608                           
 15609                           ;Dimmer_B1.c: 126: if (lights == 1) {
 15610  1C2C  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15611  1C2D  3A01               	xorlw	1
 15612  1C2E  1D03               	skipz
 15613  1C2F  0008               	return
 15614                           
 15615                           ;Dimmer_B1.c: 127: DimmerIntr1.MaxmumValue = value;
 15616  1C30  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15617  1C31  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15618  1C32  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15619  1C33  0021               	movlb	1	; select bank1
 15620  1C34  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 15621  1C35  0008               	return
 15622  1C36                     __end_of_setDimmerIntr_MaxmumValue:	
 15623                           
 15624                           	psect	text106
 15625  1E6E                     __ptext106:	
 15626 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15627 ;; Defined at:
 15628 ;;		line 201 in file "../src/Dimmer_B1.c"
 15629 ;; Parameters:    Size  Location     Type
 15630 ;;  lights          1    wreg     unsigned char 
 15631 ;;  command         1    0[BANK0 ] unsigned char 
 15632 ;; Auto vars:     Size  Location     Type
 15633 ;;  lights          1    2[BANK0 ] unsigned char 
 15634 ;; Return value:  Size  Location     Type
 15635 ;;		None               void
 15636 ;; Registers used:
 15637 ;;		wreg, status,2, status,0
 15638 ;; Tracked objects:
 15639 ;;		On entry : 0/0
 15640 ;;		On exit  : 0/0
 15641 ;;		Unchanged: 0/0
 15642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15643 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15646 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15647 ;;Total ram usage:        3 bytes
 15648 ;; Hardware stack levels used:    1
 15649 ;; Hardware stack levels required when called:    5
 15650 ;; This function calls:
 15651 ;;		Nothing
 15652 ;; This function is called by:
 15653 ;;		_setDimmerLights_Dimming
 15654 ;; This function uses a non-reentrant model
 15655 ;;
 15656                           
 15657                           
 15658                           ;psect for function _setDimmerIntr_Dimming_Sw
 15659  1E6E                     _setDimmerIntr_Dimming_Sw:	
 15660                           
 15661                           ;incstack = 0
 15662                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15663                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15664  1E6E  0020               	movlb	0	; select bank0
 15665  1E6F  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15666                           
 15667                           ;Dimmer_B1.c: 203: if (lights == 1) {
 15668  1E70  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15669  1E71  3A01               	xorlw	1
 15670  1E72  1D03               	skipz
 15671  1E73  0008               	return
 15672                           
 15673                           ;Dimmer_B1.c: 204: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15674  1E74  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15675  1E75  3A01               	xorlw	1
 15676  1E76  3000               	movlw	0
 15677  1E77  1903               	skipnz
 15678  1E78  3001               	movlw	1
 15679  1E79  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 15680  1E7A  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15681  1E7B  0021               	movlb	1	; select bank1
 15682  1E7C  083B               	movf	_DimmerIntr1^(0+128),w
 15683  1E7D  0020               	movlb	0	; select bank0
 15684  1E7E  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15685  1E7F  39EF               	andlw	-17
 15686  1E80  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15687  1E81  0021               	movlb	1	; select bank1
 15688  1E82  00BB               	movwf	_DimmerIntr1^(0+128)
 15689  1E83  0008               	return
 15690  1E84                     __end_of_setDimmerIntr_Dimming_Sw:	
 15691                           
 15692                           	psect	text107
 15693  1CA3                     __ptext107:	
 15694 ;; *************** function _getDimmerIntr_DimmingValue *****************
 15695 ;; Defined at:
 15696 ;;		line 102 in file "../src/Dimmer_B1.c"
 15697 ;; Parameters:    Size  Location     Type
 15698 ;;  lights          1    wreg     unsigned char 
 15699 ;; Auto vars:     Size  Location     Type
 15700 ;;  lights          1    1[BANK0 ] unsigned char 
 15701 ;;  value           1    2[BANK0 ] unsigned char 
 15702 ;; Return value:  Size  Location     Type
 15703 ;;                  1    wreg      unsigned char 
 15704 ;; Registers used:
 15705 ;;		wreg, status,2
 15706 ;; Tracked objects:
 15707 ;;		On entry : 0/0
 15708 ;;		On exit  : 0/0
 15709 ;;		Unchanged: 0/0
 15710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15712 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15714 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;Total ram usage:        3 bytes
 15716 ;; Hardware stack levels used:    1
 15717 ;; Hardware stack levels required when called:    5
 15718 ;; This function calls:
 15719 ;;		Nothing
 15720 ;; This function is called by:
 15721 ;;		_setDimmerLights_Dimming
 15722 ;; This function uses a non-reentrant model
 15723 ;;
 15724                           
 15725                           
 15726                           ;psect for function _getDimmerIntr_DimmingValue
 15727  1CA3                     _getDimmerIntr_DimmingValue:	
 15728                           
 15729                           ;incstack = 0
 15730                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 15731                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 15732  1CA3  0020               	movlb	0	; select bank0
 15733  1CA4  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 15734                           
 15735                           ;Dimmer_B1.c: 103: char value = 0;
 15736  1CA5  01A2               	clrf	getDimmerIntr_DimmingValue@value
 15737                           
 15738                           ;Dimmer_B1.c: 105: if (lights == 1) {
 15739  1CA6  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 15740  1CA7  3A01               	xorlw	1
 15741  1CA8  1D03               	skipz
 15742  1CA9  2CB0               	goto	l688
 15743                           
 15744                           ;Dimmer_B1.c: 106: value = DimmerIntr1.DimmingValue;
 15745  1CAA  0021               	movlb	1	; select bank1
 15746  1CAB  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 15747  1CAC  0020               	movlb	0	; select bank0
 15748  1CAD  00A0               	movwf	??_getDimmerIntr_DimmingValue
 15749  1CAE  0820               	movf	??_getDimmerIntr_DimmingValue,w
 15750  1CAF  00A2               	movwf	getDimmerIntr_DimmingValue@value
 15751  1CB0                     l688:	
 15752                           
 15753                           ;Dimmer_B1.c: 107: }
 15754                           ;Dimmer_B1.c: 119: return value;
 15755  1CB0  0822               	movf	getDimmerIntr_DimmingValue@value,w
 15756  1CB1  0008               	return
 15757  1CB2                     __end_of_getDimmerIntr_DimmingValue:	
 15758                           
 15759                           	psect	text108
 15760  1E58                     __ptext108:	
 15761 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15762 ;; Defined at:
 15763 ;;		line 980 in file "../src/Dimmer_B1.c"
 15764 ;; Parameters:    Size  Location     Type
 15765 ;;  lights          1    wreg     unsigned char 
 15766 ;; Auto vars:     Size  Location     Type
 15767 ;;  lights          1    0[COMMON] unsigned char 
 15768 ;;  allow           1    2[BANK0 ] unsigned char 
 15769 ;; Return value:  Size  Location     Type
 15770 ;;                  1    wreg      unsigned char 
 15771 ;; Registers used:
 15772 ;;		wreg, status,2, pclath, cstack
 15773 ;; Tracked objects:
 15774 ;;		On entry : 0/0
 15775 ;;		On exit  : 0/0
 15776 ;;		Unchanged: 0/0
 15777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15779 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15780 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15781 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15782 ;;Total ram usage:        3 bytes
 15783 ;; Hardware stack levels used:    1
 15784 ;; Hardware stack levels required when called:    6
 15785 ;; This function calls:
 15786 ;;		_getLoad_OK
 15787 ;; This function is called by:
 15788 ;;		_setDimmerLights_Main
 15789 ;; This function uses a non-reentrant model
 15790 ;;
 15791                           
 15792                           
 15793                           ;psect for function _getDimmerLights_Allow_Condition
 15794  1E58                     _getDimmerLights_Allow_Condition:	
 15795                           
 15796                           ;Dimmer_B1.c: 981: char allow = 0;
 15797                           
 15798                           ;incstack = 0
 15799                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 15800  1E58  0020               	movlb	0	; select bank0
 15801  1E59  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 15802                           
 15803                           ;Dimmer_B1.c: 987: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15804  1E5A  01A3               	clrf	_getDimmerLights_Allow_Condition$2255
 15805  1E5B  0AA3               	incf	_getDimmerLights_Allow_Condition$2255,f
 15806  1E5C  319B  239D  319E   	fcall	_getLoad_OK
 15807  1E5F  3800               	iorlw	0
 15808  1E60  1D03               	skipz
 15809  1E61  2E67               	goto	l9312
 15810  1E62  0022               	movlb	2	; select bank2
 15811  1E63  18AC               	btfsc	_Dimmer^(0+256),1
 15812  1E64  2E67               	goto	l9312
 15813  1E65  0020               	movlb	0	; select bank0
 15814  1E66  01A3               	clrf	_getDimmerLights_Allow_Condition$2255
 15815  1E67                     l9312:	
 15816  1E67  0020               	movlb	0	; select bank0
 15817  1E68  0823               	movf	_getDimmerLights_Allow_Condition$2255,w
 15818  1E69  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15819  1E6A  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15820  1E6B  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 15821                           
 15822                           ;Dimmer_B1.c: 1014: return allow;
 15823  1E6C  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 15824  1E6D  0008               	return
 15825  1E6E                     __end_of_getDimmerLights_Allow_Condition:	
 15826                           
 15827                           	psect	text109
 15828  1B9D                     __ptext109:	
 15829 ;; *************** function _getLoad_OK *****************
 15830 ;; Defined at:
 15831 ;;		line 272 in file "../src/OverLoad_B1.c"
 15832 ;; Parameters:    Size  Location     Type
 15833 ;;		None
 15834 ;; Auto vars:     Size  Location     Type
 15835 ;;  ok              1    0[BANK0 ] unsigned char 
 15836 ;; Return value:  Size  Location     Type
 15837 ;;                  1    wreg      unsigned char 
 15838 ;; Registers used:
 15839 ;;		wreg, status,2
 15840 ;; Tracked objects:
 15841 ;;		On entry : 0/0
 15842 ;;		On exit  : 0/0
 15843 ;;		Unchanged: 0/0
 15844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15848 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15849 ;;Total ram usage:        1 bytes
 15850 ;; Hardware stack levels used:    1
 15851 ;; Hardware stack levels required when called:    5
 15852 ;; This function calls:
 15853 ;;		Nothing
 15854 ;; This function is called by:
 15855 ;;		_DimmerLights_Main
 15856 ;;		_getDimmerLights_Allow_Condition
 15857 ;; This function uses a non-reentrant model
 15858 ;;
 15859                           
 15860                           
 15861                           ;psect for function _getLoad_OK
 15862  1B9D                     _getLoad_OK:	
 15863                           
 15864                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 15865                           
 15866                           ;incstack = 0
 15867                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15868  1B9D  3000               	movlw	0
 15869  1B9E  0022               	movlb	2	; select bank2
 15870  1B9F  1BBE               	btfsc	_Load^(0+256),7
 15871  1BA0  3001               	movlw	1
 15872  1BA1  0020               	movlb	0	; select bank0
 15873  1BA2  00A0               	movwf	getLoad_OK@ok
 15874                           
 15875                           ;OverLoad_B1.c: 274: return ok;
 15876  1BA3  0820               	movf	getLoad_OK@ok,w
 15877  1BA4  0008               	return
 15878  1BA5                     __end_of_getLoad_OK:	
 15879                           
 15880                           	psect	text110
 15881  1178                     __ptext110:	
 15882 ;; *************** function _getMain_All_Error_Status *****************
 15883 ;; Defined at:
 15884 ;;		line 424 in file "../src/Main_B1.c"
 15885 ;; Parameters:    Size  Location     Type
 15886 ;;  command         1    wreg     unsigned char 
 15887 ;; Auto vars:     Size  Location     Type
 15888 ;;  command         1    5[BANK0 ] unsigned char 
 15889 ;;  status          1    6[BANK0 ] unsigned char 
 15890 ;; Return value:  Size  Location     Type
 15891 ;;                  1    wreg      unsigned char 
 15892 ;; Registers used:
 15893 ;;		wreg, status,2, status,0
 15894 ;; Tracked objects:
 15895 ;;		On entry : 0/0
 15896 ;;		On exit  : 0/0
 15897 ;;		Unchanged: 0/0
 15898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15900 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15902 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15903 ;;Total ram usage:        7 bytes
 15904 ;; Hardware stack levels used:    1
 15905 ;; Hardware stack levels required when called:    5
 15906 ;; This function calls:
 15907 ;;		Nothing
 15908 ;; This function is called by:
 15909 ;;		_DimmerLights_Main
 15910 ;;		_Exception_Main
 15911 ;;		_Load_Main
 15912 ;;		_setTemp_Main
 15913 ;;		_getRxData
 15914 ;;		_setSw_Main
 15915 ;; This function uses a non-reentrant model
 15916 ;;
 15917                           
 15918                           
 15919                           ;psect for function _getMain_All_Error_Status
 15920  1178                     _getMain_All_Error_Status:	
 15921                           
 15922                           ;incstack = 0
 15923                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15924                           ;getMain_All_Error_Status@command stored from wreg
 15925  1178  0020               	movlb	0	; select bank0
 15926  1179  00A5               	movwf	getMain_All_Error_Status@command
 15927                           
 15928                           ;Main_B1.c: 425: char status = 0;
 15929  117A  01A6               	clrf	getMain_All_Error_Status@status
 15930                           
 15931                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 15932  117B  08A6               	movf	getMain_All_Error_Status@status,f
 15933  117C  1D03               	skipz
 15934  117D  2992               	goto	l9084
 15935  117E  0825               	movf	getMain_All_Error_Status@command,w
 15936  117F  3A02               	xorlw	2
 15937  1180  1903               	skipnz
 15938  1181  2992               	goto	l9084
 15939                           
 15940                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 15941  1182  0021               	movlb	1	; select bank1
 15942  1183  18D1               	btfsc	_Temp^(0+128),1
 15943  1184  2989               	goto	l9082
 15944  1185  0020               	movlb	0	; select bank0
 15945  1186  01A1               	clrf	_getMain_All_Error_Status$3576
 15946  1187  01A2               	clrf	_getMain_All_Error_Status$3576+1
 15947  1188  298E               	goto	l1467
 15948  1189                     l9082:	
 15949  1189  3002               	movlw	2
 15950  118A  0020               	movlb	0	; select bank0
 15951  118B  00A1               	movwf	_getMain_All_Error_Status$3576
 15952  118C  3000               	movlw	0
 15953  118D  00A2               	movwf	_getMain_All_Error_Status$3576+1
 15954  118E                     l1467:	
 15955  118E  0821               	movf	_getMain_All_Error_Status$3576,w
 15956  118F  00A0               	movwf	??_getMain_All_Error_Status
 15957  1190  0820               	movf	??_getMain_All_Error_Status,w
 15958  1191  00A6               	movwf	getMain_All_Error_Status@status
 15959  1192                     l9084:	
 15960                           
 15961                           ;Main_B1.c: 438: }
 15962                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 15963  1192  08A6               	movf	getMain_All_Error_Status@status,f
 15964  1193  1D03               	skipz
 15965  1194  29A9               	goto	l1468
 15966  1195  0825               	movf	getMain_All_Error_Status@command,w
 15967  1196  3A03               	xorlw	3
 15968  1197  1903               	skipnz
 15969  1198  29A9               	goto	l1468
 15970                           
 15971                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 15972  1199  0022               	movlb	2	; select bank2
 15973  119A  1ABE               	btfsc	_Load^(0+256),5
 15974  119B  29A0               	goto	l9092
 15975  119C  0020               	movlb	0	; select bank0
 15976  119D  01A3               	clrf	_getMain_All_Error_Status$3577
 15977  119E  01A4               	clrf	_getMain_All_Error_Status$3577+1
 15978  119F  29A5               	goto	l1472
 15979  11A0                     l9092:	
 15980  11A0  3003               	movlw	3
 15981  11A1  0020               	movlb	0	; select bank0
 15982  11A2  00A3               	movwf	_getMain_All_Error_Status$3577
 15983  11A3  3000               	movlw	0
 15984  11A4  00A4               	movwf	_getMain_All_Error_Status$3577+1
 15985  11A5                     l1472:	
 15986  11A5  0823               	movf	_getMain_All_Error_Status$3577,w
 15987  11A6  00A0               	movwf	??_getMain_All_Error_Status
 15988  11A7  0820               	movf	??_getMain_All_Error_Status,w
 15989  11A8  00A6               	movwf	getMain_All_Error_Status@status
 15990  11A9                     l1468:	
 15991                           
 15992                           ;Main_B1.c: 445: }
 15993                           ;Main_B1.c: 455: return status;
 15994  11A9  0826               	movf	getMain_All_Error_Status@status,w
 15995  11AA  0008               	return
 15996  11AB                     __end_of_getMain_All_Error_Status:	
 15997                           
 15998                           	psect	text111
 15999  1B88                     __ptext111:	
 16000 ;; *************** function _DimmerLights_Initialization *****************
 16001 ;; Defined at:
 16002 ;;		line 632 in file "../src/Dimmer_B1.c"
 16003 ;; Parameters:    Size  Location     Type
 16004 ;;		None
 16005 ;; Auto vars:     Size  Location     Type
 16006 ;;		None
 16007 ;; Return value:  Size  Location     Type
 16008 ;;		None               void
 16009 ;; Registers used:
 16010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16011 ;; Tracked objects:
 16012 ;;		On entry : 0/0
 16013 ;;		On exit  : 0/0
 16014 ;;		Unchanged: 0/0
 16015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16020 ;;Total ram usage:        0 bytes
 16021 ;; Hardware stack levels used:    1
 16022 ;; Hardware stack levels required when called:    9
 16023 ;; This function calls:
 16024 ;;		_DimmerIntr_Initialization
 16025 ;;		_setDimmerLights_Initialization
 16026 ;; This function is called by:
 16027 ;;		_main
 16028 ;; This function uses a non-reentrant model
 16029 ;;
 16030                           
 16031                           
 16032                           ;psect for function _DimmerLights_Initialization
 16033  1B88                     _DimmerLights_Initialization:	
 16034                           
 16035                           ;Dimmer_B1.c: 634: setDimmerLights_Initialization(1);
 16036                           
 16037                           ;incstack = 0
 16038                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16039  1B88  3001               	movlw	1
 16040  1B89  319B  233B  319B   	fcall	_setDimmerLights_Initialization
 16041                           
 16042                           ;Dimmer_B1.c: 644: DimmerIntr_Initialization();
 16043  1B8C  3193  232A         	fcall	_DimmerIntr_Initialization
 16044  1B8E  0008               	return
 16045  1B8F                     __end_of_DimmerLights_Initialization:	
 16046                           
 16047                           	psect	text112
 16048  1B3B                     __ptext112:	
 16049 ;; *************** function _setDimmerLights_Initialization *****************
 16050 ;; Defined at:
 16051 ;;		line 648 in file "../src/Dimmer_B1.c"
 16052 ;; Parameters:    Size  Location     Type
 16053 ;;  lights          1    wreg     unsigned char 
 16054 ;; Auto vars:     Size  Location     Type
 16055 ;;  lights          1    0[COMMON] unsigned char 
 16056 ;; Return value:  Size  Location     Type
 16057 ;;		None               void
 16058 ;; Registers used:
 16059 ;;		wreg
 16060 ;; Tracked objects:
 16061 ;;		On entry : 0/0
 16062 ;;		On exit  : 0/0
 16063 ;;		Unchanged: 0/0
 16064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16069 ;;Total ram usage:        0 bytes
 16070 ;; Hardware stack levels used:    1
 16071 ;; Hardware stack levels required when called:    5
 16072 ;; This function calls:
 16073 ;;		Nothing
 16074 ;; This function is called by:
 16075 ;;		_DimmerLights_Initialization
 16076 ;; This function uses a non-reentrant model
 16077 ;;
 16078                           
 16079                           
 16080                           ;psect for function _setDimmerLights_Initialization
 16081  1B3B                     _setDimmerLights_Initialization:	
 16082                           
 16083                           ;incstack = 0
 16084                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16085  1B3B  0008               	return
 16086  1B3C                     __end_of_setDimmerLights_Initialization:	
 16087                           
 16088                           	psect	text113
 16089  132A                     __ptext113:	
 16090 ;; *************** function _DimmerIntr_Initialization *****************
 16091 ;; Defined at:
 16092 ;;		line 7 in file "../src/Dimmer_B1.c"
 16093 ;; Parameters:    Size  Location     Type
 16094 ;;		None
 16095 ;; Auto vars:     Size  Location     Type
 16096 ;;		None
 16097 ;; Return value:  Size  Location     Type
 16098 ;;		None               void
 16099 ;; Registers used:
 16100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16101 ;; Tracked objects:
 16102 ;;		On entry : 0/0
 16103 ;;		On exit  : 0/0
 16104 ;;		Unchanged: 0/0
 16105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;Total ram usage:        1 bytes
 16111 ;; Hardware stack levels used:    1
 16112 ;; Hardware stack levels required when called:    8
 16113 ;; This function calls:
 16114 ;;		_getDimmerLights_PercentToValue
 16115 ;;		_getDimmerLights_ValueToPercent
 16116 ;;		_setMemory_Modify
 16117 ;; This function is called by:
 16118 ;;		_DimmerLights_Initialization
 16119 ;; This function uses a non-reentrant model
 16120 ;;
 16121                           
 16122                           
 16123                           ;psect for function _DimmerIntr_Initialization
 16124  132A                     _DimmerIntr_Initialization:	
 16125                           
 16126                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16127                           
 16128                           ;incstack = 0
 16129                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16130  132A  3007               	movlw	7
 16131  132B  0020               	movlb	0	; select bank0
 16132  132C  00E2               	movwf	??_DimmerIntr_Initialization
 16133  132D  0862               	movf	??_DimmerIntr_Initialization,w
 16134  132E  0021               	movlb	1	; select bank1
 16135  132F  00BF               	movwf	(_DimmerIntr1^(0+128)+4)
 16136                           
 16137                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(65*0.6));
 16138  1330  3027               	movlw	39
 16139  1331  0020               	movlb	0	; select bank0
 16140  1332  00E2               	movwf	??_DimmerIntr_Initialization
 16141  1333  0862               	movf	??_DimmerIntr_Initialization,w
 16142  1334  0021               	movlb	1	; select bank1
 16143  1335  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16144                           
 16145                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16146  1336  3006               	movlw	6
 16147  1337  0020               	movlb	0	; select bank0
 16148  1338  00E2               	movwf	??_DimmerIntr_Initialization
 16149  1339  0862               	movf	??_DimmerIntr_Initialization,w
 16150  133A  0021               	movlb	1	; select bank1
 16151  133B  00C2               	movwf	(_DimmerIntr1^(0+128)+7)
 16152                           
 16153                           ;Dimmer_B1.c: 15: if (myMain.InitDimmer == 1) {
 16154  133C  1E38               	btfss	(_myMain^(0+128)+10),4
 16155  133D  2B4E               	goto	l9542
 16156                           
 16157                           ;Dimmer_B1.c: 16: product->Data[21] = getDimmerLights_ValueToPercent(((char)(65*0.6)));
 16158  133E  3027               	movlw	39
 16159  133F  3196  26CB  3193   	fcall	_getDimmerLights_ValueToPercent
 16160  1342  0020               	movlb	0	; select bank0
 16161  1343  00E2               	movwf	??_DimmerIntr_Initialization
 16162  1344  0021               	movlb	1	; select bank1
 16163  1345  0863               	movf	_product^(0+128),w
 16164  1346  3E15               	addlw	21
 16165  1347  0086               	movwf	6
 16166  1348  3002               	movlw	2	; select bank4/5
 16167  1349  0087               	movwf	7
 16168  134A  0020               	movlb	0	; select bank0
 16169  134B  0862               	movf	??_DimmerIntr_Initialization,w
 16170  134C  0081               	movwf	1
 16171                           
 16172                           ;Dimmer_B1.c: 17: } else {
 16173  134D  2B5D               	goto	l9544
 16174  134E                     l9542:	
 16175                           
 16176                           ;Dimmer_B1.c: 18: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16177  134E  0021               	movlb	1	; select bank1
 16178  134F  0863               	movf	_product^(0+128),w
 16179  1350  3E15               	addlw	21
 16180  1351  0086               	movwf	6
 16181  1352  3002               	movlw	2	; select bank4/5
 16182  1353  0087               	movwf	7
 16183  1354  0801               	movf	1,w
 16184  1355  3196  2666  3193   	fcall	_getDimmerLights_PercentToValue
 16185  1358  0020               	movlb	0	; select bank0
 16186  1359  00E2               	movwf	??_DimmerIntr_Initialization
 16187  135A  0862               	movf	??_DimmerIntr_Initialization,w
 16188  135B  0021               	movlb	1	; select bank1
 16189  135C  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 16190  135D                     l9544:	
 16191                           
 16192                           ;Dimmer_B1.c: 19: }
 16193                           ;Dimmer_B1.c: 58: if (myMain.InitDimmer == 1) {
 16194  135D  0021               	movlb	1	; select bank1
 16195  135E  1E38               	btfss	(_myMain^(0+128)+10),4
 16196  135F  0008               	return
 16197                           
 16198                           ;Dimmer_B1.c: 59: myMain.InitDimmer = 0;
 16199  1360  1238               	bcf	(_myMain^(0+128)+10),4
 16200                           
 16201                           ;Dimmer_B1.c: 60: myMain.SaveDimmer = 1;
 16202  1361  16B8               	bsf	(_myMain^(0+128)+10),5
 16203                           
 16204                           ;Dimmer_B1.c: 61: setMemory_Modify(1);
 16205  1362  3001               	movlw	1
 16206  1363  319D  2591         	fcall	_setMemory_Modify
 16207  1365  0008               	return
 16208  1366                     __end_of_DimmerIntr_Initialization:	
 16209                           
 16210                           	psect	text114
 16211  1D91                     __ptext114:	
 16212 ;; *************** function _setMemory_Modify *****************
 16213 ;; Defined at:
 16214 ;;		line 1083 in file "../src/MCU_B1.c"
 16215 ;; Parameters:    Size  Location     Type
 16216 ;;  command         1    wreg     unsigned char 
 16217 ;; Auto vars:     Size  Location     Type
 16218 ;;  command         1    1[BANK0 ] unsigned char 
 16219 ;; Return value:  Size  Location     Type
 16220 ;;		None               void
 16221 ;; Registers used:
 16222 ;;		wreg, status,2, status,0
 16223 ;; Tracked objects:
 16224 ;;		On entry : 0/0
 16225 ;;		On exit  : 0/0
 16226 ;;		Unchanged: 0/0
 16227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;Total ram usage:        2 bytes
 16233 ;; Hardware stack levels used:    1
 16234 ;; Hardware stack levels required when called:    5
 16235 ;; This function calls:
 16236 ;;		Nothing
 16237 ;; This function is called by:
 16238 ;;		_DimmerIntr_Initialization
 16239 ;;		_setDimmerLights_Dimming
 16240 ;;		_setLog_Code
 16241 ;;		_setRFSW_AdjControl
 16242 ;; This function uses a non-reentrant model
 16243 ;;
 16244                           
 16245                           
 16246                           ;psect for function _setMemory_Modify
 16247  1D91                     _setMemory_Modify:	
 16248                           
 16249                           ;incstack = 0
 16250                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16251                           ;setMemory_Modify@command stored from wreg
 16252  1D91  0020               	movlb	0	; select bank0
 16253  1D92  00A1               	movwf	setMemory_Modify@command
 16254                           
 16255                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16256  1D93  0821               	movf	setMemory_Modify@command,w
 16257  1D94  3A01               	xorlw	1
 16258  1D95  3000               	movlw	0
 16259  1D96  1903               	skipnz
 16260  1D97  3001               	movlw	1
 16261  1D98  00A0               	movwf	??_setMemory_Modify
 16262  1D99  0024               	movlb	4	; select bank4
 16263  1D9A  0844               	movf	(_Memory^(0+512)+36),w
 16264  1D9B  0020               	movlb	0	; select bank0
 16265  1D9C  0620               	xorwf	??_setMemory_Modify,w
 16266  1D9D  39FE               	andlw	-2
 16267  1D9E  0620               	xorwf	??_setMemory_Modify,w
 16268  1D9F  0024               	movlb	4	; select bank4
 16269  1DA0  00C4               	movwf	(_Memory^(0+512)+36)
 16270                           
 16271                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16272  1DA1  01C2               	clrf	(_Memory^(0+512)+34)
 16273  1DA2  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16274  1DA3  0008               	return
 16275  1DA4                     __end_of_setMemory_Modify:	
 16276                           
 16277                           	psect	text115
 16278  16CB                     __ptext115:	
 16279 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16280 ;; Defined at:
 16281 ;;		line 1119 in file "../src/Dimmer_B1.c"
 16282 ;; Parameters:    Size  Location     Type
 16283 ;;  value           1    wreg     unsigned char 
 16284 ;; Auto vars:     Size  Location     Type
 16285 ;;  value           1   62[BANK0 ] unsigned char 
 16286 ;;  i               3   63[BANK0 ] float 
 16287 ;; Return value:  Size  Location     Type
 16288 ;;                  1    wreg      unsigned char 
 16289 ;; Registers used:
 16290 ;;		wreg, status,2, status,0, pclath, cstack
 16291 ;; Tracked objects:
 16292 ;;		On entry : 0/0
 16293 ;;		On exit  : 0/0
 16294 ;;		Unchanged: 0/0
 16295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16299 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;Total ram usage:        6 bytes
 16301 ;; Hardware stack levels used:    1
 16302 ;; Hardware stack levels required when called:    7
 16303 ;; This function calls:
 16304 ;;		___awtoft
 16305 ;;		___ftadd
 16306 ;;		___ftdiv
 16307 ;;		___ftneg
 16308 ;;		___fttol
 16309 ;; This function is called by:
 16310 ;;		_DimmerIntr_Initialization
 16311 ;;		_setDimmerLights_Dimming
 16312 ;; This function uses a non-reentrant model
 16313 ;;
 16314                           
 16315                           
 16316                           ;psect for function _getDimmerLights_ValueToPercent
 16317  16CB                     _getDimmerLights_ValueToPercent:	
 16318                           
 16319                           ;incstack = 0
 16320                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16321                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16322  16CB  0020               	movlb	0	; select bank0
 16323  16CC  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16324                           
 16325                           ;Dimmer_B1.c: 1127: float i = ((char)(65*0.6)) - ((char)(10*0.6));
 16326  16CD  3000               	movlw	0
 16327  16CE  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16328  16CF  3004               	movlw	4
 16329  16D0  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16330  16D1  3042               	movlw	66
 16331  16D2  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16332                           
 16333                           ;Dimmer_B1.c: 1128: i /= 100;
 16334  16D3  3000               	movlw	0
 16335  16D4  00AE               	movwf	___ftdiv@f2
 16336  16D5  30C8               	movlw	200
 16337  16D6  00AF               	movwf	___ftdiv@f2+1
 16338  16D7  3042               	movlw	66
 16339  16D8  00B0               	movwf	___ftdiv@f2+2
 16340  16D9  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16341  16DA  00B1               	movwf	___ftdiv@f1
 16342  16DB  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16343  16DC  00B2               	movwf	___ftdiv@f1+1
 16344  16DD  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16345  16DE  00B3               	movwf	___ftdiv@f1+2
 16346  16DF  318D  2537  3196   	fcall	___ftdiv
 16347  16E2  0020               	movlb	0	; select bank0
 16348  16E3  082E               	movf	?___ftdiv,w
 16349  16E4  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16350  16E5  082F               	movf	?___ftdiv+1,w
 16351  16E6  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16352  16E7  0830               	movf	?___ftdiv+2,w
 16353  16E8  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16354                           
 16355                           ;Dimmer_B1.c: 1130: return (char) (100 - ((((char)(65*0.6)) - value) / i));
 16356  16E9  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16357  16EA  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16358  16EB  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16359  16EC  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16360  16ED  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16361  16EE  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16362  16EF  1903               	skipnz
 16363  16F0  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16364  16F1  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16365  16F2  3E27               	addlw	39
 16366  16F3  00A8               	movwf	___awtoft@c
 16367  16F4  3000               	movlw	0
 16368  16F5  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16369  16F6  00A9               	movwf	___awtoft@c+1
 16370  16F7  3190  2067  3196   	fcall	___awtoft
 16371  16FA  0020               	movlb	0	; select bank0
 16372  16FB  0828               	movf	?___awtoft,w
 16373  16FC  00B1               	movwf	___ftdiv@f1
 16374  16FD  0829               	movf	?___awtoft+1,w
 16375  16FE  00B2               	movwf	___ftdiv@f1+1
 16376  16FF  082A               	movf	?___awtoft+2,w
 16377  1700  00B3               	movwf	___ftdiv@f1+2
 16378  1701  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16379  1702  00AE               	movwf	___ftdiv@f2
 16380  1703  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16381  1704  00AF               	movwf	___ftdiv@f2+1
 16382  1705  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16383  1706  00B0               	movwf	___ftdiv@f2+2
 16384  1707  318D  2537  3196   	fcall	___ftdiv
 16385  170A  0020               	movlb	0	; select bank0
 16386  170B  082E               	movf	?___ftdiv,w
 16387  170C  00BE               	movwf	___ftneg@f1
 16388  170D  082F               	movf	?___ftdiv+1,w
 16389  170E  00BF               	movwf	___ftneg@f1+1
 16390  170F  0830               	movf	?___ftdiv+2,w
 16391  1710  00C0               	movwf	___ftneg@f1+2
 16392  1711  319B  23BE  3196   	fcall	___ftneg
 16393  1714  0020               	movlb	0	; select bank0
 16394  1715  083E               	movf	?___ftneg,w
 16395  1716  00C4               	movwf	___ftadd@f2
 16396  1717  083F               	movf	?___ftneg+1,w
 16397  1718  00C5               	movwf	___ftadd@f2+1
 16398  1719  0840               	movf	?___ftneg+2,w
 16399  171A  00C6               	movwf	___ftadd@f2+2
 16400  171B  3000               	movlw	0
 16401  171C  00C1               	movwf	___ftadd@f1
 16402  171D  30C8               	movlw	200
 16403  171E  00C2               	movwf	___ftadd@f1+1
 16404  171F  3042               	movlw	66
 16405  1720  00C3               	movwf	___ftadd@f1+2
 16406  1721  3183  2389  3196   	fcall	___ftadd
 16407  1724  0020               	movlb	0	; select bank0
 16408  1725  0841               	movf	?___ftadd,w
 16409  1726  00CE               	movwf	___fttol@f1
 16410  1727  0842               	movf	?___ftadd+1,w
 16411  1728  00CF               	movwf	___fttol@f1+1
 16412  1729  0843               	movf	?___ftadd+2,w
 16413  172A  00D0               	movwf	___fttol@f1+2
 16414  172B  318C  2424         	fcall	___fttol
 16415  172D  0020               	movlb	0	; select bank0
 16416  172E  084E               	movf	?___fttol,w
 16417  172F  0008               	return
 16418  1730                     __end_of_getDimmerLights_ValueToPercent:	
 16419                           
 16420                           	psect	text116
 16421  1666                     __ptext116:	
 16422 ;; *************** function _getDimmerLights_PercentToValue *****************
 16423 ;; Defined at:
 16424 ;;		line 1103 in file "../src/Dimmer_B1.c"
 16425 ;; Parameters:    Size  Location     Type
 16426 ;;  value           1    wreg     unsigned char 
 16427 ;; Auto vars:     Size  Location     Type
 16428 ;;  value           1   62[BANK0 ] unsigned char 
 16429 ;;  i               3   63[BANK0 ] float 
 16430 ;; Return value:  Size  Location     Type
 16431 ;;                  1    wreg      unsigned char 
 16432 ;; Registers used:
 16433 ;;		wreg, status,2, status,0, pclath, cstack
 16434 ;; Tracked objects:
 16435 ;;		On entry : 0/0
 16436 ;;		On exit  : 0/0
 16437 ;;		Unchanged: 0/0
 16438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16440 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16443 ;;Total ram usage:        6 bytes
 16444 ;; Hardware stack levels used:    1
 16445 ;; Hardware stack levels required when called:    7
 16446 ;; This function calls:
 16447 ;;		___awtoft
 16448 ;;		___ftadd
 16449 ;;		___ftdiv
 16450 ;;		___ftmul
 16451 ;;		___ftneg
 16452 ;;		___fttol
 16453 ;; This function is called by:
 16454 ;;		_DimmerIntr_Initialization
 16455 ;;		_setDimmerLights_OnOff
 16456 ;;		_setRFSW_AdjControl
 16457 ;; This function uses a non-reentrant model
 16458 ;;
 16459                           
 16460                           
 16461                           ;psect for function _getDimmerLights_PercentToValue
 16462  1666                     _getDimmerLights_PercentToValue:	
 16463                           
 16464                           ;incstack = 0
 16465                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16466                           ;getDimmerLights_PercentToValue@value stored from wreg
 16467  1666  0020               	movlb	0	; select bank0
 16468  1667  00DE               	movwf	getDimmerLights_PercentToValue@value
 16469                           
 16470                           ;Dimmer_B1.c: 1111: float i = ((char)(65*0.6)) - ((char)(10*0.6));
 16471  1668  3000               	movlw	0
 16472  1669  00DF               	movwf	getDimmerLights_PercentToValue@i
 16473  166A  3004               	movlw	4
 16474  166B  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16475  166C  3042               	movlw	66
 16476  166D  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16477                           
 16478                           ;Dimmer_B1.c: 1112: i /= 100;
 16479  166E  3000               	movlw	0
 16480  166F  00AE               	movwf	___ftdiv@f2
 16481  1670  30C8               	movlw	200
 16482  1671  00AF               	movwf	___ftdiv@f2+1
 16483  1672  3042               	movlw	66
 16484  1673  00B0               	movwf	___ftdiv@f2+2
 16485  1674  085F               	movf	getDimmerLights_PercentToValue@i,w
 16486  1675  00B1               	movwf	___ftdiv@f1
 16487  1676  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16488  1677  00B2               	movwf	___ftdiv@f1+1
 16489  1678  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16490  1679  00B3               	movwf	___ftdiv@f1+2
 16491  167A  318D  2537  3196   	fcall	___ftdiv
 16492  167D  0020               	movlb	0	; select bank0
 16493  167E  082E               	movf	?___ftdiv,w
 16494  167F  00DF               	movwf	getDimmerLights_PercentToValue@i
 16495  1680  082F               	movf	?___ftdiv+1,w
 16496  1681  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16497  1682  0830               	movf	?___ftdiv+2,w
 16498  1683  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16499                           
 16500                           ;Dimmer_B1.c: 1114: return (char) (((char)(65*0.6)) - ((100 - value) * i));
 16501  1684  085E               	movf	getDimmerLights_PercentToValue@value,w
 16502  1685  00DC               	movwf	??_getDimmerLights_PercentToValue
 16503  1686  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16504  1687  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16505  1688  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16506  1689  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16507  168A  1903               	skipnz
 16508  168B  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16509  168C  085C               	movf	??_getDimmerLights_PercentToValue,w
 16510  168D  3E64               	addlw	100
 16511  168E  00A8               	movwf	___awtoft@c
 16512  168F  3000               	movlw	0
 16513  1690  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16514  1691  00A9               	movwf	___awtoft@c+1
 16515  1692  3190  2067  3196   	fcall	___awtoft
 16516  1695  0020               	movlb	0	; select bank0
 16517  1696  0828               	movf	?___awtoft,w
 16518  1697  00B1               	movwf	___ftmul@f2
 16519  1698  0829               	movf	?___awtoft+1,w
 16520  1699  00B2               	movwf	___ftmul@f2+1
 16521  169A  082A               	movf	?___awtoft+2,w
 16522  169B  00B3               	movwf	___ftmul@f2+2
 16523  169C  085F               	movf	getDimmerLights_PercentToValue@i,w
 16524  169D  00AE               	movwf	___ftmul@f1
 16525  169E  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16526  169F  00AF               	movwf	___ftmul@f1+1
 16527  16A0  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16528  16A1  00B0               	movwf	___ftmul@f1+2
 16529  16A2  318E  2691  3196   	fcall	___ftmul
 16530  16A5  0020               	movlb	0	; select bank0
 16531  16A6  082E               	movf	?___ftmul,w
 16532  16A7  00BE               	movwf	___ftneg@f1
 16533  16A8  082F               	movf	?___ftmul+1,w
 16534  16A9  00BF               	movwf	___ftneg@f1+1
 16535  16AA  0830               	movf	?___ftmul+2,w
 16536  16AB  00C0               	movwf	___ftneg@f1+2
 16537  16AC  319B  23BE  3196   	fcall	___ftneg
 16538  16AF  0020               	movlb	0	; select bank0
 16539  16B0  083E               	movf	?___ftneg,w
 16540  16B1  00C4               	movwf	___ftadd@f2
 16541  16B2  083F               	movf	?___ftneg+1,w
 16542  16B3  00C5               	movwf	___ftadd@f2+1
 16543  16B4  0840               	movf	?___ftneg+2,w
 16544  16B5  00C6               	movwf	___ftadd@f2+2
 16545  16B6  3000               	movlw	0
 16546  16B7  00C1               	movwf	___ftadd@f1
 16547  16B8  301C               	movlw	28
 16548  16B9  00C2               	movwf	___ftadd@f1+1
 16549  16BA  3042               	movlw	66
 16550  16BB  00C3               	movwf	___ftadd@f1+2
 16551  16BC  3183  2389  3196   	fcall	___ftadd
 16552  16BF  0020               	movlb	0	; select bank0
 16553  16C0  0841               	movf	?___ftadd,w
 16554  16C1  00CE               	movwf	___fttol@f1
 16555  16C2  0842               	movf	?___ftadd+1,w
 16556  16C3  00CF               	movwf	___fttol@f1+1
 16557  16C4  0843               	movf	?___ftadd+2,w
 16558  16C5  00D0               	movwf	___fttol@f1+2
 16559  16C6  318C  2424         	fcall	___fttol
 16560  16C8  0020               	movlb	0	; select bank0
 16561  16C9  084E               	movf	?___fttol,w
 16562  16CA  0008               	return
 16563  16CB                     __end_of_getDimmerLights_PercentToValue:	
 16564                           
 16565                           	psect	text117
 16566  0C24                     __ptext117:	
 16567 ;; *************** function ___fttol *****************
 16568 ;; Defined at:
 16569 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16570 ;; Parameters:    Size  Location     Type
 16571 ;;  f1              3   46[BANK0 ] float 
 16572 ;; Auto vars:     Size  Location     Type
 16573 ;;  lval            4   55[BANK0 ] unsigned long 
 16574 ;;  exp1            1   59[BANK0 ] unsigned char 
 16575 ;;  sign1           1   54[BANK0 ] unsigned char 
 16576 ;; Return value:  Size  Location     Type
 16577 ;;                  4   46[BANK0 ] long 
 16578 ;; Registers used:
 16579 ;;		wreg, status,2, status,0
 16580 ;; Tracked objects:
 16581 ;;		On entry : 0/0
 16582 ;;		On exit  : 0/0
 16583 ;;		Unchanged: 0/0
 16584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16585 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;Total ram usage:       14 bytes
 16590 ;; Hardware stack levels used:    1
 16591 ;; Hardware stack levels required when called:    5
 16592 ;; This function calls:
 16593 ;;		Nothing
 16594 ;; This function is called by:
 16595 ;;		_getDimmerLights_PercentToValue
 16596 ;;		_getDimmerLights_ValueToPercent
 16597 ;; This function uses a non-reentrant model
 16598 ;;
 16599                           
 16600                           
 16601                           ;psect for function ___fttol
 16602  0C24                     ___fttol:	
 16603                           
 16604                           ;incstack = 0
 16605                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16606  0C24  0020               	movlb	0	; select bank0
 16607  0C25  084E               	movf	___fttol@f1,w
 16608  0C26  00D2               	movwf	??___fttol
 16609  0C27  084F               	movf	___fttol@f1+1,w
 16610  0C28  00D3               	movwf	??___fttol+1
 16611  0C29  0850               	movf	___fttol@f1+2,w
 16612  0C2A  00D4               	movwf	??___fttol+2
 16613  0C2B  1003               	clrc
 16614  0C2C  0D53               	rlf	??___fttol+1,w
 16615  0C2D  0D54               	rlf	??___fttol+2,w
 16616  0C2E  00D5               	movwf	??___fttol+3
 16617  0C2F  0855               	movf	??___fttol+3,w
 16618  0C30  00DB               	movwf	___fttol@exp1
 16619  0C31  08DB               	movf	___fttol@exp1,f
 16620  0C32  1D03               	skipz
 16621  0C33  2C3D               	goto	l8600
 16622  0C34  3000               	movlw	0
 16623  0C35  00D1               	movwf	?___fttol+3
 16624  0C36  3000               	movlw	0
 16625  0C37  00D0               	movwf	?___fttol+2
 16626  0C38  3000               	movlw	0
 16627  0C39  00CF               	movwf	?___fttol+1
 16628  0C3A  3000               	movlw	0
 16629  0C3B  00CE               	movwf	?___fttol
 16630  0C3C  0008               	return
 16631  0C3D                     l8600:	
 16632  0C3D  084E               	movf	___fttol@f1,w
 16633  0C3E  00D2               	movwf	??___fttol
 16634  0C3F  084F               	movf	___fttol@f1+1,w
 16635  0C40  00D3               	movwf	??___fttol+1
 16636  0C41  0850               	movf	___fttol@f1+2,w
 16637  0C42  00D4               	movwf	??___fttol+2
 16638  0C43  3017               	movlw	23
 16639  0C44                     u9345:	
 16640  0C44  36D4               	lsrf	??___fttol+2,f
 16641  0C45  0CD3               	rrf	??___fttol+1,f
 16642  0C46  0CD2               	rrf	??___fttol,f
 16643  0C47  0B89               	decfsz	9,f
 16644  0C48  2C44               	goto	u9345
 16645  0C49  0852               	movf	??___fttol,w
 16646  0C4A  00D5               	movwf	??___fttol+3
 16647  0C4B  0855               	movf	??___fttol+3,w
 16648  0C4C  00D6               	movwf	___fttol@sign1
 16649  0C4D  17CF               	bsf	___fttol@f1+1,7
 16650  0C4E  30FF               	movlw	255
 16651  0C4F  05CE               	andwf	___fttol@f1,f
 16652  0C50  30FF               	movlw	255
 16653  0C51  05CF               	andwf	___fttol@f1+1,f
 16654  0C52  3000               	movlw	0
 16655  0C53  05D0               	andwf	___fttol@f1+2,f
 16656  0C54  084E               	movf	___fttol@f1,w
 16657  0C55  00D7               	movwf	___fttol@lval
 16658  0C56  084F               	movf	___fttol@f1+1,w
 16659  0C57  00D8               	movwf	___fttol@lval+1
 16660  0C58  0850               	movf	___fttol@f1+2,w
 16661  0C59  00D9               	movwf	___fttol@lval+2
 16662  0C5A  01DA               	clrf	___fttol@lval+3
 16663  0C5B  308E               	movlw	142
 16664  0C5C  02DB               	subwf	___fttol@exp1,f
 16665  0C5D  1FDB               	btfss	___fttol@exp1,7
 16666  0C5E  2C7B               	goto	l8620
 16667  0C5F  085B               	movf	___fttol@exp1,w
 16668  0C60  3A80               	xorlw	128
 16669  0C61  3E8F               	addlw	143
 16670  0C62  1803               	skipnc
 16671  0C63  2C6D               	goto	l8618
 16672  0C64  3000               	movlw	0
 16673  0C65  00D1               	movwf	?___fttol+3
 16674  0C66  3000               	movlw	0
 16675  0C67  00D0               	movwf	?___fttol+2
 16676  0C68  3000               	movlw	0
 16677  0C69  00CF               	movwf	?___fttol+1
 16678  0C6A  3000               	movlw	0
 16679  0C6B  00CE               	movwf	?___fttol
 16680  0C6C  0008               	return
 16681  0C6D                     l8618:	
 16682  0C6D  3001               	movlw	1
 16683  0C6E                     u9375:	
 16684  0C6E  36DA               	lsrf	___fttol@lval+3,f
 16685  0C6F  0CD9               	rrf	___fttol@lval+2,f
 16686  0C70  0CD8               	rrf	___fttol@lval+1,f
 16687  0C71  0CD7               	rrf	___fttol@lval,f
 16688  0C72  0B89               	decfsz	9,f
 16689  0C73  2C6E               	goto	u9375
 16690  0C74  3001               	movlw	1
 16691  0C75  00D2               	movwf	??___fttol
 16692  0C76  0852               	movf	??___fttol,w
 16693  0C77  07DB               	addwf	___fttol@exp1,f
 16694  0C78  1903               	btfsc	3,2
 16695  0C79  2C94               	goto	l8630
 16696  0C7A  2C6D               	goto	l8618
 16697  0C7B                     l8620:	
 16698  0C7B  3018               	movlw	24
 16699  0C7C  025B               	subwf	___fttol@exp1,w
 16700  0C7D  1C03               	skipc
 16701  0C7E  2C91               	goto	l8628
 16702  0C7F  3000               	movlw	0
 16703  0C80  00D1               	movwf	?___fttol+3
 16704  0C81  3000               	movlw	0
 16705  0C82  00D0               	movwf	?___fttol+2
 16706  0C83  3000               	movlw	0
 16707  0C84  00CF               	movwf	?___fttol+1
 16708  0C85  3000               	movlw	0
 16709  0C86  00CE               	movwf	?___fttol
 16710  0C87  0008               	return
 16711  0C88                     l8626:	
 16712  0C88  3001               	movlw	1
 16713  0C89                     u9405:	
 16714  0C89  35D7               	lslf	___fttol@lval,f
 16715  0C8A  0DD8               	rlf	___fttol@lval+1,f
 16716  0C8B  0DD9               	rlf	___fttol@lval+2,f
 16717  0C8C  0DDA               	rlf	___fttol@lval+3,f
 16718  0C8D  0B89               	decfsz	9,f
 16719  0C8E  2C89               	goto	u9405
 16720  0C8F  3001               	movlw	1
 16721  0C90  02DB               	subwf	___fttol@exp1,f
 16722  0C91                     l8628:	
 16723  0C91  08DB               	movf	___fttol@exp1,f
 16724  0C92  1D03               	skipz
 16725  0C93  2C88               	goto	l8626
 16726  0C94                     l8630:	
 16727  0C94  0856               	movf	___fttol@sign1,w
 16728  0C95  1903               	btfsc	3,2
 16729  0C96  2CA2               	goto	l8634
 16730  0C97  09D7               	comf	___fttol@lval,f
 16731  0C98  09D8               	comf	___fttol@lval+1,f
 16732  0C99  09D9               	comf	___fttol@lval+2,f
 16733  0C9A  09DA               	comf	___fttol@lval+3,f
 16734  0C9B  0AD7               	incf	___fttol@lval,f
 16735  0C9C  1903               	skipnz
 16736  0C9D  0AD8               	incf	___fttol@lval+1,f
 16737  0C9E  1903               	skipnz
 16738  0C9F  0AD9               	incf	___fttol@lval+2,f
 16739  0CA0  1903               	skipnz
 16740  0CA1  0ADA               	incf	___fttol@lval+3,f
 16741  0CA2                     l8634:	
 16742  0CA2  085A               	movf	___fttol@lval+3,w
 16743  0CA3  00D1               	movwf	?___fttol+3
 16744  0CA4  0859               	movf	___fttol@lval+2,w
 16745  0CA5  00D0               	movwf	?___fttol+2
 16746  0CA6  0858               	movf	___fttol@lval+1,w
 16747  0CA7  00CF               	movwf	?___fttol+1
 16748  0CA8  0857               	movf	___fttol@lval,w
 16749  0CA9  00CE               	movwf	?___fttol
 16750  0CAA  0008               	return
 16751  0CAB                     __end_of___fttol:	
 16752                           
 16753                           	psect	text118
 16754  1BBE                     __ptext118:	
 16755 ;; *************** function ___ftneg *****************
 16756 ;; Defined at:
 16757 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16758 ;; Parameters:    Size  Location     Type
 16759 ;;  f1              3   30[BANK0 ] float 
 16760 ;; Auto vars:     Size  Location     Type
 16761 ;;		None
 16762 ;; Return value:  Size  Location     Type
 16763 ;;                  3   30[BANK0 ] float 
 16764 ;; Registers used:
 16765 ;;		wreg
 16766 ;; Tracked objects:
 16767 ;;		On entry : 0/0
 16768 ;;		On exit  : 0/0
 16769 ;;		Unchanged: 0/0
 16770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16771 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16774 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16775 ;;Total ram usage:        3 bytes
 16776 ;; Hardware stack levels used:    1
 16777 ;; Hardware stack levels required when called:    5
 16778 ;; This function calls:
 16779 ;;		Nothing
 16780 ;; This function is called by:
 16781 ;;		_getDimmerLights_PercentToValue
 16782 ;;		_getDimmerLights_ValueToPercent
 16783 ;; This function uses a non-reentrant model
 16784 ;;
 16785                           
 16786                           
 16787                           ;psect for function ___ftneg
 16788  1BBE                     ___ftneg:	
 16789                           
 16790                           ;incstack = 0
 16791                           ; Regs used in ___ftneg: [wreg]
 16792  1BBE  0020               	movlb	0	; select bank0
 16793  1BBF  0840               	movf	___ftneg@f1+2,w
 16794  1BC0  043F               	iorwf	___ftneg@f1+1,w
 16795  1BC1  043E               	iorwf	___ftneg@f1,w
 16796  1BC2  1903               	skipnz
 16797  1BC3  0008               	return
 16798  1BC4  3080               	movlw	128
 16799  1BC5  06C0               	xorwf	___ftneg@f1+2,f
 16800  1BC6  0008               	return
 16801  1BC7                     __end_of___ftneg:	
 16802                           
 16803                           	psect	text119
 16804  0E91                     __ptext119:	
 16805 ;; *************** function ___ftmul *****************
 16806 ;; Defined at:
 16807 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 16808 ;; Parameters:    Size  Location     Type
 16809 ;;  f1              3   14[BANK0 ] float 
 16810 ;;  f2              3   17[BANK0 ] float 
 16811 ;; Auto vars:     Size  Location     Type
 16812 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 16813 ;;  sign            1   29[BANK0 ] unsigned char 
 16814 ;;  cntr            1   28[BANK0 ] unsigned char 
 16815 ;;  exp             1   24[BANK0 ] unsigned char 
 16816 ;; Return value:  Size  Location     Type
 16817 ;;                  3   14[BANK0 ] float 
 16818 ;; Registers used:
 16819 ;;		wreg, status,2, status,0, pclath, cstack
 16820 ;; Tracked objects:
 16821 ;;		On entry : 0/0
 16822 ;;		On exit  : 0/0
 16823 ;;		Unchanged: 0/0
 16824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16825 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16826 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16827 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16828 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;Total ram usage:       16 bytes
 16830 ;; Hardware stack levels used:    1
 16831 ;; Hardware stack levels required when called:    6
 16832 ;; This function calls:
 16833 ;;		___ftpack
 16834 ;; This function is called by:
 16835 ;;		_getDimmerLights_PercentToValue
 16836 ;; This function uses a non-reentrant model
 16837 ;;
 16838                           
 16839                           
 16840                           ;psect for function ___ftmul
 16841  0E91                     ___ftmul:	
 16842                           
 16843                           ;incstack = 0
 16844                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16845  0E91  0020               	movlb	0	; select bank0
 16846  0E92  082E               	movf	___ftmul@f1,w
 16847  0E93  00B4               	movwf	??___ftmul
 16848  0E94  082F               	movf	___ftmul@f1+1,w
 16849  0E95  00B5               	movwf	??___ftmul+1
 16850  0E96  0830               	movf	___ftmul@f1+2,w
 16851  0E97  00B6               	movwf	??___ftmul+2
 16852  0E98  1003               	clrc
 16853  0E99  0D35               	rlf	??___ftmul+1,w
 16854  0E9A  0D36               	rlf	??___ftmul+2,w
 16855  0E9B  00B7               	movwf	??___ftmul+3
 16856  0E9C  0837               	movf	??___ftmul+3,w
 16857  0E9D  00B8               	movwf	___ftmul@exp
 16858  0E9E  08B8               	movf	___ftmul@exp,f
 16859  0E9F  1D03               	skipz
 16860  0EA0  2EA8               	goto	l8542
 16861  0EA1  3000               	movlw	0
 16862  0EA2  00AE               	movwf	?___ftmul
 16863  0EA3  3000               	movlw	0
 16864  0EA4  00AF               	movwf	?___ftmul+1
 16865  0EA5  3000               	movlw	0
 16866  0EA6  00B0               	movwf	?___ftmul+2
 16867  0EA7  0008               	return
 16868  0EA8                     l8542:	
 16869  0EA8  0831               	movf	___ftmul@f2,w
 16870  0EA9  00B4               	movwf	??___ftmul
 16871  0EAA  0832               	movf	___ftmul@f2+1,w
 16872  0EAB  00B5               	movwf	??___ftmul+1
 16873  0EAC  0833               	movf	___ftmul@f2+2,w
 16874  0EAD  00B6               	movwf	??___ftmul+2
 16875  0EAE  1003               	clrc
 16876  0EAF  0D35               	rlf	??___ftmul+1,w
 16877  0EB0  0D36               	rlf	??___ftmul+2,w
 16878  0EB1  00B7               	movwf	??___ftmul+3
 16879  0EB2  0837               	movf	??___ftmul+3,w
 16880  0EB3  00BD               	movwf	___ftmul@sign
 16881  0EB4  08BD               	movf	___ftmul@sign,f
 16882  0EB5  1D03               	skipz
 16883  0EB6  2EBE               	goto	l8548
 16884  0EB7  3000               	movlw	0
 16885  0EB8  00AE               	movwf	?___ftmul
 16886  0EB9  3000               	movlw	0
 16887  0EBA  00AF               	movwf	?___ftmul+1
 16888  0EBB  3000               	movlw	0
 16889  0EBC  00B0               	movwf	?___ftmul+2
 16890  0EBD  0008               	return
 16891  0EBE                     l8548:	
 16892  0EBE  083D               	movf	___ftmul@sign,w
 16893  0EBF  3E7B               	addlw	123
 16894  0EC0  00B4               	movwf	??___ftmul
 16895  0EC1  0834               	movf	??___ftmul,w
 16896  0EC2  07B8               	addwf	___ftmul@exp,f
 16897  0EC3  082E               	movf	___ftmul@f1,w
 16898  0EC4  00B4               	movwf	??___ftmul
 16899  0EC5  082F               	movf	___ftmul@f1+1,w
 16900  0EC6  00B5               	movwf	??___ftmul+1
 16901  0EC7  0830               	movf	___ftmul@f1+2,w
 16902  0EC8  00B6               	movwf	??___ftmul+2
 16903  0EC9  3010               	movlw	16
 16904  0ECA                     u9225:	
 16905  0ECA  36B6               	lsrf	??___ftmul+2,f
 16906  0ECB  0CB5               	rrf	??___ftmul+1,f
 16907  0ECC  0CB4               	rrf	??___ftmul,f
 16908  0ECD  0B89               	decfsz	9,f
 16909  0ECE  2ECA               	goto	u9225
 16910  0ECF  0834               	movf	??___ftmul,w
 16911  0ED0  00B7               	movwf	??___ftmul+3
 16912  0ED1  0837               	movf	??___ftmul+3,w
 16913  0ED2  00BD               	movwf	___ftmul@sign
 16914  0ED3  0831               	movf	___ftmul@f2,w
 16915  0ED4  00B4               	movwf	??___ftmul
 16916  0ED5  0832               	movf	___ftmul@f2+1,w
 16917  0ED6  00B5               	movwf	??___ftmul+1
 16918  0ED7  0833               	movf	___ftmul@f2+2,w
 16919  0ED8  00B6               	movwf	??___ftmul+2
 16920  0ED9  3010               	movlw	16
 16921  0EDA                     u9235:	
 16922  0EDA  36B6               	lsrf	??___ftmul+2,f
 16923  0EDB  0CB5               	rrf	??___ftmul+1,f
 16924  0EDC  0CB4               	rrf	??___ftmul,f
 16925  0EDD  0B89               	decfsz	9,f
 16926  0EDE  2EDA               	goto	u9235
 16927  0EDF  0834               	movf	??___ftmul,w
 16928  0EE0  00B7               	movwf	??___ftmul+3
 16929  0EE1  0837               	movf	??___ftmul+3,w
 16930  0EE2  06BD               	xorwf	___ftmul@sign,f
 16931  0EE3  3080               	movlw	128
 16932  0EE4  00B4               	movwf	??___ftmul
 16933  0EE5  0834               	movf	??___ftmul,w
 16934  0EE6  05BD               	andwf	___ftmul@sign,f
 16935  0EE7  17AF               	bsf	___ftmul@f1+1,7
 16936  0EE8  17B2               	bsf	___ftmul@f2+1,7
 16937  0EE9  30FF               	movlw	255
 16938  0EEA  05B1               	andwf	___ftmul@f2,f
 16939  0EEB  30FF               	movlw	255
 16940  0EEC  05B2               	andwf	___ftmul@f2+1,f
 16941  0EED  3000               	movlw	0
 16942  0EEE  05B3               	andwf	___ftmul@f2+2,f
 16943  0EEF  3000               	movlw	0
 16944  0EF0  00B9               	movwf	___ftmul@f3_as_product
 16945  0EF1  3000               	movlw	0
 16946  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 16947  0EF3  3000               	movlw	0
 16948  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 16949  0EF5  3007               	movlw	7
 16950  0EF6  00B4               	movwf	??___ftmul
 16951  0EF7  0834               	movf	??___ftmul,w
 16952  0EF8  00BC               	movwf	___ftmul@cntr
 16953  0EF9                     l8560:	
 16954  0EF9  1C2E               	btfss	___ftmul@f1,0
 16955  0EFA  2F01               	goto	l8564
 16956  0EFB  0831               	movf	___ftmul@f2,w
 16957  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 16958  0EFD  0832               	movf	___ftmul@f2+1,w
 16959  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16960  0EFF  0833               	movf	___ftmul@f2+2,w
 16961  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16962  0F01                     l8564:	
 16963  0F01  3001               	movlw	1
 16964  0F02                     u9255:	
 16965  0F02  36B0               	lsrf	___ftmul@f1+2,f
 16966  0F03  0CAF               	rrf	___ftmul@f1+1,f
 16967  0F04  0CAE               	rrf	___ftmul@f1,f
 16968  0F05  0B89               	decfsz	9,f
 16969  0F06  2F02               	goto	u9255
 16970  0F07  3001               	movlw	1
 16971  0F08                     u9265:	
 16972  0F08  35B1               	lslf	___ftmul@f2,f
 16973  0F09  0DB2               	rlf	___ftmul@f2+1,f
 16974  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 16975  0F0B  0B89               	decfsz	9,f
 16976  0F0C  2F08               	goto	u9265
 16977  0F0D  3001               	movlw	1
 16978  0F0E  02BC               	subwf	___ftmul@cntr,f
 16979  0F0F  1D03               	btfss	3,2
 16980  0F10  2EF9               	goto	l8560
 16981  0F11  3009               	movlw	9
 16982  0F12  00B4               	movwf	??___ftmul
 16983  0F13  0834               	movf	??___ftmul,w
 16984  0F14  00BC               	movwf	___ftmul@cntr
 16985  0F15                     l8572:	
 16986  0F15  1C2E               	btfss	___ftmul@f1,0
 16987  0F16  2F1D               	goto	l8576
 16988  0F17  0831               	movf	___ftmul@f2,w
 16989  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 16990  0F19  0832               	movf	___ftmul@f2+1,w
 16991  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16992  0F1B  0833               	movf	___ftmul@f2+2,w
 16993  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16994  0F1D                     l8576:	
 16995  0F1D  3001               	movlw	1
 16996  0F1E                     u9295:	
 16997  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 16998  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 16999  0F20  0CAE               	rrf	___ftmul@f1,f
 17000  0F21  0B89               	decfsz	9,f
 17001  0F22  2F1E               	goto	u9295
 17002  0F23  3001               	movlw	1
 17003  0F24                     u9305:	
 17004  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17005  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17006  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 17007  0F27  0B89               	decfsz	9,f
 17008  0F28  2F24               	goto	u9305
 17009  0F29  3001               	movlw	1
 17010  0F2A  02BC               	subwf	___ftmul@cntr,f
 17011  0F2B  1D03               	btfss	3,2
 17012  0F2C  2F15               	goto	l8572
 17013  0F2D  0839               	movf	___ftmul@f3_as_product,w
 17014  0F2E  00A0               	movwf	___ftpack@arg
 17015  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 17016  0F30  00A1               	movwf	___ftpack@arg+1
 17017  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 17018  0F32  00A2               	movwf	___ftpack@arg+2
 17019  0F33  0838               	movf	___ftmul@exp,w
 17020  0F34  00B4               	movwf	??___ftmul
 17021  0F35  0834               	movf	??___ftmul,w
 17022  0F36  00A3               	movwf	___ftpack@exp
 17023  0F37  083D               	movf	___ftmul@sign,w
 17024  0F38  00B5               	movwf	??___ftmul+1
 17025  0F39  0835               	movf	??___ftmul+1,w
 17026  0F3A  00A4               	movwf	___ftpack@sign
 17027  0F3B  3196  2605         	fcall	___ftpack
 17028  0F3D  0020               	movlb	0	; select bank0
 17029  0F3E  0820               	movf	?___ftpack,w
 17030  0F3F  00AE               	movwf	?___ftmul
 17031  0F40  0821               	movf	?___ftpack+1,w
 17032  0F41  00AF               	movwf	?___ftmul+1
 17033  0F42  0822               	movf	?___ftpack+2,w
 17034  0F43  00B0               	movwf	?___ftmul+2
 17035  0F44  0008               	return
 17036  0F45                     __end_of___ftmul:	
 17037                           
 17038                           	psect	text120
 17039  0D37                     __ptext120:	
 17040 ;; *************** function ___ftdiv *****************
 17041 ;; Defined at:
 17042 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17043 ;; Parameters:    Size  Location     Type
 17044 ;;  f2              3   14[BANK0 ] float 
 17045 ;;  f1              3   17[BANK0 ] float 
 17046 ;; Auto vars:     Size  Location     Type
 17047 ;;  f3              3   25[BANK0 ] float 
 17048 ;;  sign            1   29[BANK0 ] unsigned char 
 17049 ;;  exp             1   28[BANK0 ] unsigned char 
 17050 ;;  cntr            1   24[BANK0 ] unsigned char 
 17051 ;; Return value:  Size  Location     Type
 17052 ;;                  3   14[BANK0 ] float 
 17053 ;; Registers used:
 17054 ;;		wreg, status,2, status,0, pclath, cstack
 17055 ;; Tracked objects:
 17056 ;;		On entry : 0/0
 17057 ;;		On exit  : 0/0
 17058 ;;		Unchanged: 0/0
 17059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17060 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17061 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17062 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17063 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17064 ;;Total ram usage:       16 bytes
 17065 ;; Hardware stack levels used:    1
 17066 ;; Hardware stack levels required when called:    6
 17067 ;; This function calls:
 17068 ;;		___ftpack
 17069 ;; This function is called by:
 17070 ;;		_getDimmerLights_PercentToValue
 17071 ;;		_getDimmerLights_ValueToPercent
 17072 ;; This function uses a non-reentrant model
 17073 ;;
 17074                           
 17075                           
 17076                           ;psect for function ___ftdiv
 17077  0D37                     ___ftdiv:	
 17078                           
 17079                           ;incstack = 0
 17080                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17081  0D37  0020               	movlb	0	; select bank0
 17082  0D38  0831               	movf	___ftdiv@f1,w
 17083  0D39  00B4               	movwf	??___ftdiv
 17084  0D3A  0832               	movf	___ftdiv@f1+1,w
 17085  0D3B  00B5               	movwf	??___ftdiv+1
 17086  0D3C  0833               	movf	___ftdiv@f1+2,w
 17087  0D3D  00B6               	movwf	??___ftdiv+2
 17088  0D3E  1003               	clrc
 17089  0D3F  0D35               	rlf	??___ftdiv+1,w
 17090  0D40  0D36               	rlf	??___ftdiv+2,w
 17091  0D41  00B7               	movwf	??___ftdiv+3
 17092  0D42  0837               	movf	??___ftdiv+3,w
 17093  0D43  00BC               	movwf	___ftdiv@exp
 17094  0D44  08BC               	movf	___ftdiv@exp,f
 17095  0D45  1D03               	skipz
 17096  0D46  2D4E               	goto	l8500
 17097  0D47  3000               	movlw	0
 17098  0D48  00AE               	movwf	?___ftdiv
 17099  0D49  3000               	movlw	0
 17100  0D4A  00AF               	movwf	?___ftdiv+1
 17101  0D4B  3000               	movlw	0
 17102  0D4C  00B0               	movwf	?___ftdiv+2
 17103  0D4D  0008               	return
 17104  0D4E                     l8500:	
 17105  0D4E  082E               	movf	___ftdiv@f2,w
 17106  0D4F  00B4               	movwf	??___ftdiv
 17107  0D50  082F               	movf	___ftdiv@f2+1,w
 17108  0D51  00B5               	movwf	??___ftdiv+1
 17109  0D52  0830               	movf	___ftdiv@f2+2,w
 17110  0D53  00B6               	movwf	??___ftdiv+2
 17111  0D54  1003               	clrc
 17112  0D55  0D35               	rlf	??___ftdiv+1,w
 17113  0D56  0D36               	rlf	??___ftdiv+2,w
 17114  0D57  00B7               	movwf	??___ftdiv+3
 17115  0D58  0837               	movf	??___ftdiv+3,w
 17116  0D59  00BD               	movwf	___ftdiv@sign
 17117  0D5A  08BD               	movf	___ftdiv@sign,f
 17118  0D5B  1D03               	skipz
 17119  0D5C  2D64               	goto	l8506
 17120  0D5D  3000               	movlw	0
 17121  0D5E  00AE               	movwf	?___ftdiv
 17122  0D5F  3000               	movlw	0
 17123  0D60  00AF               	movwf	?___ftdiv+1
 17124  0D61  3000               	movlw	0
 17125  0D62  00B0               	movwf	?___ftdiv+2
 17126  0D63  0008               	return
 17127  0D64                     l8506:	
 17128  0D64  3000               	movlw	0
 17129  0D65  00B9               	movwf	___ftdiv@f3
 17130  0D66  3000               	movlw	0
 17131  0D67  00BA               	movwf	___ftdiv@f3+1
 17132  0D68  3000               	movlw	0
 17133  0D69  00BB               	movwf	___ftdiv@f3+2
 17134  0D6A  3089               	movlw	137
 17135  0D6B  073D               	addwf	___ftdiv@sign,w
 17136  0D6C  00B4               	movwf	??___ftdiv
 17137  0D6D  0834               	movf	??___ftdiv,w
 17138  0D6E  02BC               	subwf	___ftdiv@exp,f
 17139  0D6F  0831               	movf	___ftdiv@f1,w
 17140  0D70  00B4               	movwf	??___ftdiv
 17141  0D71  0832               	movf	___ftdiv@f1+1,w
 17142  0D72  00B5               	movwf	??___ftdiv+1
 17143  0D73  0833               	movf	___ftdiv@f1+2,w
 17144  0D74  00B6               	movwf	??___ftdiv+2
 17145  0D75  3010               	movlw	16
 17146  0D76                     u9145:	
 17147  0D76  36B6               	lsrf	??___ftdiv+2,f
 17148  0D77  0CB5               	rrf	??___ftdiv+1,f
 17149  0D78  0CB4               	rrf	??___ftdiv,f
 17150  0D79  0B89               	decfsz	9,f
 17151  0D7A  2D76               	goto	u9145
 17152  0D7B  0834               	movf	??___ftdiv,w
 17153  0D7C  00B7               	movwf	??___ftdiv+3
 17154  0D7D  0837               	movf	??___ftdiv+3,w
 17155  0D7E  00BD               	movwf	___ftdiv@sign
 17156  0D7F  082E               	movf	___ftdiv@f2,w
 17157  0D80  00B4               	movwf	??___ftdiv
 17158  0D81  082F               	movf	___ftdiv@f2+1,w
 17159  0D82  00B5               	movwf	??___ftdiv+1
 17160  0D83  0830               	movf	___ftdiv@f2+2,w
 17161  0D84  00B6               	movwf	??___ftdiv+2
 17162  0D85  3010               	movlw	16
 17163  0D86                     u9155:	
 17164  0D86  36B6               	lsrf	??___ftdiv+2,f
 17165  0D87  0CB5               	rrf	??___ftdiv+1,f
 17166  0D88  0CB4               	rrf	??___ftdiv,f
 17167  0D89  0B89               	decfsz	9,f
 17168  0D8A  2D86               	goto	u9155
 17169  0D8B  0834               	movf	??___ftdiv,w
 17170  0D8C  00B7               	movwf	??___ftdiv+3
 17171  0D8D  0837               	movf	??___ftdiv+3,w
 17172  0D8E  06BD               	xorwf	___ftdiv@sign,f
 17173  0D8F  3080               	movlw	128
 17174  0D90  00B4               	movwf	??___ftdiv
 17175  0D91  0834               	movf	??___ftdiv,w
 17176  0D92  05BD               	andwf	___ftdiv@sign,f
 17177  0D93  17B2               	bsf	___ftdiv@f1+1,7
 17178  0D94  30FF               	movlw	255
 17179  0D95  05B1               	andwf	___ftdiv@f1,f
 17180  0D96  30FF               	movlw	255
 17181  0D97  05B2               	andwf	___ftdiv@f1+1,f
 17182  0D98  3000               	movlw	0
 17183  0D99  05B3               	andwf	___ftdiv@f1+2,f
 17184  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 17185  0D9B  30FF               	movlw	255
 17186  0D9C  05AE               	andwf	___ftdiv@f2,f
 17187  0D9D  30FF               	movlw	255
 17188  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 17189  0D9F  3000               	movlw	0
 17190  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 17191  0DA1  3018               	movlw	24
 17192  0DA2  00B4               	movwf	??___ftdiv
 17193  0DA3  0834               	movf	??___ftdiv,w
 17194  0DA4  00B8               	movwf	___ftdiv@cntr
 17195  0DA5                     l8520:	
 17196  0DA5  3001               	movlw	1
 17197  0DA6                     u9165:	
 17198  0DA6  35B9               	lslf	___ftdiv@f3,f
 17199  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 17200  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 17201  0DA9  0B89               	decfsz	9,f
 17202  0DAA  2DA6               	goto	u9165
 17203  0DAB  0830               	movf	___ftdiv@f2+2,w
 17204  0DAC  0233               	subwf	___ftdiv@f1+2,w
 17205  0DAD  1D03               	skipz
 17206  0DAE  2DB5               	goto	u9175
 17207  0DAF  082F               	movf	___ftdiv@f2+1,w
 17208  0DB0  0232               	subwf	___ftdiv@f1+1,w
 17209  0DB1  1D03               	skipz
 17210  0DB2  2DB5               	goto	u9175
 17211  0DB3  082E               	movf	___ftdiv@f2,w
 17212  0DB4  0231               	subwf	___ftdiv@f1,w
 17213  0DB5                     u9175:	
 17214  0DB5  1C03               	skipc
 17215  0DB6  2DBE               	goto	l8528
 17216  0DB7  082E               	movf	___ftdiv@f2,w
 17217  0DB8  02B1               	subwf	___ftdiv@f1,f
 17218  0DB9  082F               	movf	___ftdiv@f2+1,w
 17219  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 17220  0DBB  0830               	movf	___ftdiv@f2+2,w
 17221  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 17222  0DBD  1439               	bsf	___ftdiv@f3,0
 17223  0DBE                     l8528:	
 17224  0DBE  3001               	movlw	1
 17225  0DBF                     u9185:	
 17226  0DBF  35B1               	lslf	___ftdiv@f1,f
 17227  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 17228  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 17229  0DC2  0B89               	decfsz	9,f
 17230  0DC3  2DBF               	goto	u9185
 17231  0DC4  3001               	movlw	1
 17232  0DC5  02B8               	subwf	___ftdiv@cntr,f
 17233  0DC6  1D03               	btfss	3,2
 17234  0DC7  2DA5               	goto	l8520
 17235  0DC8  0839               	movf	___ftdiv@f3,w
 17236  0DC9  00A0               	movwf	___ftpack@arg
 17237  0DCA  083A               	movf	___ftdiv@f3+1,w
 17238  0DCB  00A1               	movwf	___ftpack@arg+1
 17239  0DCC  083B               	movf	___ftdiv@f3+2,w
 17240  0DCD  00A2               	movwf	___ftpack@arg+2
 17241  0DCE  083C               	movf	___ftdiv@exp,w
 17242  0DCF  00B4               	movwf	??___ftdiv
 17243  0DD0  0834               	movf	??___ftdiv,w
 17244  0DD1  00A3               	movwf	___ftpack@exp
 17245  0DD2  083D               	movf	___ftdiv@sign,w
 17246  0DD3  00B5               	movwf	??___ftdiv+1
 17247  0DD4  0835               	movf	??___ftdiv+1,w
 17248  0DD5  00A4               	movwf	___ftpack@sign
 17249  0DD6  3196  2605         	fcall	___ftpack
 17250  0DD8  0020               	movlb	0	; select bank0
 17251  0DD9  0820               	movf	?___ftpack,w
 17252  0DDA  00AE               	movwf	?___ftdiv
 17253  0DDB  0821               	movf	?___ftpack+1,w
 17254  0DDC  00AF               	movwf	?___ftdiv+1
 17255  0DDD  0822               	movf	?___ftpack+2,w
 17256  0DDE  00B0               	movwf	?___ftdiv+2
 17257  0DDF  0008               	return
 17258  0DE0                     __end_of___ftdiv:	
 17259                           
 17260                           	psect	text121
 17261  0389                     __ptext121:	
 17262 ;; *************** function ___ftadd *****************
 17263 ;; Defined at:
 17264 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17265 ;; Parameters:    Size  Location     Type
 17266 ;;  f1              3   33[BANK0 ] float 
 17267 ;;  f2              3   36[BANK0 ] float 
 17268 ;; Auto vars:     Size  Location     Type
 17269 ;;  exp1            1   45[BANK0 ] unsigned char 
 17270 ;;  exp2            1   44[BANK0 ] unsigned char 
 17271 ;;  sign            1   43[BANK0 ] unsigned char 
 17272 ;; Return value:  Size  Location     Type
 17273 ;;                  3   33[BANK0 ] float 
 17274 ;; Registers used:
 17275 ;;		wreg, status,2, status,0, pclath, cstack
 17276 ;; Tracked objects:
 17277 ;;		On entry : 0/0
 17278 ;;		On exit  : 0/0
 17279 ;;		Unchanged: 0/0
 17280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17281 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17282 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17283 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17284 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17285 ;;Total ram usage:       13 bytes
 17286 ;; Hardware stack levels used:    1
 17287 ;; Hardware stack levels required when called:    6
 17288 ;; This function calls:
 17289 ;;		___ftpack
 17290 ;; This function is called by:
 17291 ;;		_getDimmerLights_PercentToValue
 17292 ;;		_getDimmerLights_ValueToPercent
 17293 ;; This function uses a non-reentrant model
 17294 ;;
 17295                           
 17296                           
 17297                           ;psect for function ___ftadd
 17298  0389                     ___ftadd:	
 17299                           
 17300                           ;incstack = 0
 17301                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17302  0389  0020               	movlb	0	; select bank0
 17303  038A  0841               	movf	___ftadd@f1,w
 17304  038B  00C7               	movwf	??___ftadd
 17305  038C  0842               	movf	___ftadd@f1+1,w
 17306  038D  00C8               	movwf	??___ftadd+1
 17307  038E  0843               	movf	___ftadd@f1+2,w
 17308  038F  00C9               	movwf	??___ftadd+2
 17309  0390  1003               	clrc
 17310  0391  0D48               	rlf	??___ftadd+1,w
 17311  0392  0D49               	rlf	??___ftadd+2,w
 17312  0393  00CA               	movwf	??___ftadd+3
 17313  0394  084A               	movf	??___ftadd+3,w
 17314  0395  00CD               	movwf	___ftadd@exp1
 17315  0396  0844               	movf	___ftadd@f2,w
 17316  0397  00C7               	movwf	??___ftadd
 17317  0398  0845               	movf	___ftadd@f2+1,w
 17318  0399  00C8               	movwf	??___ftadd+1
 17319  039A  0846               	movf	___ftadd@f2+2,w
 17320  039B  00C9               	movwf	??___ftadd+2
 17321  039C  1003               	clrc
 17322  039D  0D48               	rlf	??___ftadd+1,w
 17323  039E  0D49               	rlf	??___ftadd+2,w
 17324  039F  00CA               	movwf	??___ftadd+3
 17325  03A0  084A               	movf	??___ftadd+3,w
 17326  03A1  00CC               	movwf	___ftadd@exp2
 17327  03A2  084D               	movf	___ftadd@exp1,w
 17328  03A3  1903               	btfsc	3,2
 17329  03A4  2BB1               	goto	l8430
 17330  03A5  084C               	movf	___ftadd@exp2,w
 17331  03A6  024D               	subwf	___ftadd@exp1,w
 17332  03A7  1803               	skipnc
 17333  03A8  2BB8               	goto	l8434
 17334  03A9  034D               	decf	___ftadd@exp1,w
 17335  03AA  3AFF               	xorlw	255
 17336  03AB  074C               	addwf	___ftadd@exp2,w
 17337  03AC  00C7               	movwf	??___ftadd
 17338  03AD  3019               	movlw	25
 17339  03AE  0247               	subwf	??___ftadd,w
 17340  03AF  1C03               	skipc
 17341  03B0  2BB8               	goto	l8434
 17342  03B1                     l8430:	
 17343  03B1  0844               	movf	___ftadd@f2,w
 17344  03B2  00C1               	movwf	?___ftadd
 17345  03B3  0845               	movf	___ftadd@f2+1,w
 17346  03B4  00C2               	movwf	?___ftadd+1
 17347  03B5  0846               	movf	___ftadd@f2+2,w
 17348  03B6  00C3               	movwf	?___ftadd+2
 17349  03B7  0008               	return
 17350  03B8                     l8434:	
 17351  03B8  084C               	movf	___ftadd@exp2,w
 17352  03B9  1903               	btfsc	3,2
 17353  03BA  0008               	return
 17354  03BB  084D               	movf	___ftadd@exp1,w
 17355  03BC  024C               	subwf	___ftadd@exp2,w
 17356  03BD  1803               	skipnc
 17357  03BE  2BC7               	goto	l8440
 17358  03BF  034C               	decf	___ftadd@exp2,w
 17359  03C0  3AFF               	xorlw	255
 17360  03C1  074D               	addwf	___ftadd@exp1,w
 17361  03C2  00C7               	movwf	??___ftadd
 17362  03C3  3019               	movlw	25
 17363  03C4  0247               	subwf	??___ftadd,w
 17364  03C5  1803               	btfsc	3,0
 17365  03C6  0008               	return
 17366  03C7                     l8440:	
 17367  03C7  3006               	movlw	6
 17368  03C8  00C7               	movwf	??___ftadd
 17369  03C9  0847               	movf	??___ftadd,w
 17370  03CA  00CB               	movwf	___ftadd@sign
 17371  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 17372  03CC  17CB               	bsf	___ftadd@sign,7
 17373  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 17374  03CE  174B               	bsf	___ftadd@sign,6
 17375  03CF  17C2               	bsf	___ftadd@f1+1,7
 17376  03D0  30FF               	movlw	255
 17377  03D1  05C1               	andwf	___ftadd@f1,f
 17378  03D2  30FF               	movlw	255
 17379  03D3  05C2               	andwf	___ftadd@f1+1,f
 17380  03D4  3000               	movlw	0
 17381  03D5  05C3               	andwf	___ftadd@f1+2,f
 17382  03D6  17C5               	bsf	___ftadd@f2+1,7
 17383  03D7  30FF               	movlw	255
 17384  03D8  05C4               	andwf	___ftadd@f2,f
 17385  03D9  30FF               	movlw	255
 17386  03DA  05C5               	andwf	___ftadd@f2+1,f
 17387  03DB  3000               	movlw	0
 17388  03DC  05C6               	andwf	___ftadd@f2+2,f
 17389  03DD  084C               	movf	___ftadd@exp2,w
 17390  03DE  024D               	subwf	___ftadd@exp1,w
 17391  03DF  1803               	skipnc
 17392  03E0  2C03               	goto	l8462
 17393  03E1                     l8452:	
 17394  03E1  3001               	movlw	1
 17395  03E2                     u8985:	
 17396  03E2  35C4               	lslf	___ftadd@f2,f
 17397  03E3  0DC5               	rlf	___ftadd@f2+1,f
 17398  03E4  0DC6               	rlf	___ftadd@f2+2,f
 17399  03E5  0B89               	decfsz	9,f
 17400  03E6  2BE2               	goto	u8985
 17401  03E7  3001               	movlw	1
 17402  03E8  02CC               	subwf	___ftadd@exp2,f
 17403  03E9  084C               	movf	___ftadd@exp2,w
 17404  03EA  064D               	xorwf	___ftadd@exp1,w
 17405  03EB  1903               	skipnz
 17406  03EC  2BFE               	goto	l8460
 17407  03ED  3001               	movlw	1
 17408  03EE  02CB               	subwf	___ftadd@sign,f
 17409  03EF  084B               	movf	___ftadd@sign,w
 17410  03F0  3907               	andlw	7
 17411  03F1  1903               	btfsc	3,2
 17412  03F2  2BFE               	goto	l8460
 17413  03F3  2BE1               	goto	l8452
 17414  03F4                     l8458:	
 17415  03F4  3001               	movlw	1
 17416  03F5                     u9015:	
 17417  03F5  36C3               	lsrf	___ftadd@f1+2,f
 17418  03F6  0CC2               	rrf	___ftadd@f1+1,f
 17419  03F7  0CC1               	rrf	___ftadd@f1,f
 17420  03F8  0B89               	decfsz	9,f
 17421  03F9  2BF5               	goto	u9015
 17422  03FA  3001               	movlw	1
 17423  03FB  00C7               	movwf	??___ftadd
 17424  03FC  0847               	movf	??___ftadd,w
 17425  03FD  07CD               	addwf	___ftadd@exp1,f
 17426  03FE                     l8460:	
 17427  03FE  084D               	movf	___ftadd@exp1,w
 17428  03FF  064C               	xorwf	___ftadd@exp2,w
 17429  0400  1903               	btfsc	3,2
 17430  0401  2C28               	goto	l2867
 17431  0402  2BF4               	goto	l8458
 17432  0403                     l8462:	
 17433  0403  084D               	movf	___ftadd@exp1,w
 17434  0404  024C               	subwf	___ftadd@exp2,w
 17435  0405  1803               	skipnc
 17436  0406  2C28               	goto	l2867
 17437  0407                     l8464:	
 17438  0407  3001               	movlw	1
 17439  0408                     u9045:	
 17440  0408  35C1               	lslf	___ftadd@f1,f
 17441  0409  0DC2               	rlf	___ftadd@f1+1,f
 17442  040A  0DC3               	rlf	___ftadd@f1+2,f
 17443  040B  0B89               	decfsz	9,f
 17444  040C  2C08               	goto	u9045
 17445  040D  3001               	movlw	1
 17446  040E  02CD               	subwf	___ftadd@exp1,f
 17447  040F  084C               	movf	___ftadd@exp2,w
 17448  0410  064D               	xorwf	___ftadd@exp1,w
 17449  0411  1903               	skipnz
 17450  0412  2C24               	goto	l8472
 17451  0413  3001               	movlw	1
 17452  0414  02CB               	subwf	___ftadd@sign,f
 17453  0415  084B               	movf	___ftadd@sign,w
 17454  0416  3907               	andlw	7
 17455  0417  1903               	btfsc	3,2
 17456  0418  2C24               	goto	l8472
 17457  0419  2C07               	goto	l8464
 17458  041A                     l8470:	
 17459  041A  3001               	movlw	1
 17460  041B                     u9075:	
 17461  041B  36C6               	lsrf	___ftadd@f2+2,f
 17462  041C  0CC5               	rrf	___ftadd@f2+1,f
 17463  041D  0CC4               	rrf	___ftadd@f2,f
 17464  041E  0B89               	decfsz	9,f
 17465  041F  2C1B               	goto	u9075
 17466  0420  3001               	movlw	1
 17467  0421  00C7               	movwf	??___ftadd
 17468  0422  0847               	movf	??___ftadd,w
 17469  0423  07CC               	addwf	___ftadd@exp2,f
 17470  0424                     l8472:	
 17471  0424  084D               	movf	___ftadd@exp1,w
 17472  0425  064C               	xorwf	___ftadd@exp2,w
 17473  0426  1D03               	skipz
 17474  0427  2C1A               	goto	l8470
 17475  0428                     l2867:	
 17476  0428  1FCB               	btfss	___ftadd@sign,7
 17477  0429  2C3A               	goto	l8476
 17478  042A  30FF               	movlw	255
 17479  042B  06C1               	xorwf	___ftadd@f1,f
 17480  042C  30FF               	movlw	255
 17481  042D  06C2               	xorwf	___ftadd@f1+1,f
 17482  042E  30FF               	movlw	255
 17483  042F  06C3               	xorwf	___ftadd@f1+2,f
 17484  0430  3001               	movlw	1
 17485  0431  07C1               	addwf	___ftadd@f1,f
 17486  0432  3000               	movlw	0
 17487  0433  1803               	skipnc
 17488  0434  3001               	movlw	1
 17489  0435  07C2               	addwf	___ftadd@f1+1,f
 17490  0436  3000               	movlw	0
 17491  0437  1803               	skipnc
 17492  0438  3001               	movlw	1
 17493  0439  07C3               	addwf	___ftadd@f1+2,f
 17494  043A                     l8476:	
 17495  043A  1F4B               	btfss	___ftadd@sign,6
 17496  043B  2C4C               	goto	l8480
 17497  043C  30FF               	movlw	255
 17498  043D  06C4               	xorwf	___ftadd@f2,f
 17499  043E  30FF               	movlw	255
 17500  043F  06C5               	xorwf	___ftadd@f2+1,f
 17501  0440  30FF               	movlw	255
 17502  0441  06C6               	xorwf	___ftadd@f2+2,f
 17503  0442  3001               	movlw	1
 17504  0443  07C4               	addwf	___ftadd@f2,f
 17505  0444  3000               	movlw	0
 17506  0445  1803               	skipnc
 17507  0446  3001               	movlw	1
 17508  0447  07C5               	addwf	___ftadd@f2+1,f
 17509  0448  3000               	movlw	0
 17510  0449  1803               	skipnc
 17511  044A  3001               	movlw	1
 17512  044B  07C6               	addwf	___ftadd@f2+2,f
 17513  044C                     l8480:	
 17514  044C  01CB               	clrf	___ftadd@sign
 17515  044D  0841               	movf	___ftadd@f1,w
 17516  044E  07C4               	addwf	___ftadd@f2,f
 17517  044F  0842               	movf	___ftadd@f1+1,w
 17518  0450  3DC5               	addwfc	___ftadd@f2+1,f
 17519  0451  0843               	movf	___ftadd@f1+2,w
 17520  0452  3DC6               	addwfc	___ftadd@f2+2,f
 17521  0453  1FC6               	btfss	___ftadd@f2+2,7
 17522  0454  2C67               	goto	l8490
 17523  0455  30FF               	movlw	255
 17524  0456  06C4               	xorwf	___ftadd@f2,f
 17525  0457  30FF               	movlw	255
 17526  0458  06C5               	xorwf	___ftadd@f2+1,f
 17527  0459  30FF               	movlw	255
 17528  045A  06C6               	xorwf	___ftadd@f2+2,f
 17529  045B  3001               	movlw	1
 17530  045C  07C4               	addwf	___ftadd@f2,f
 17531  045D  3000               	movlw	0
 17532  045E  1803               	skipnc
 17533  045F  3001               	movlw	1
 17534  0460  07C5               	addwf	___ftadd@f2+1,f
 17535  0461  3000               	movlw	0
 17536  0462  1803               	skipnc
 17537  0463  3001               	movlw	1
 17538  0464  07C6               	addwf	___ftadd@f2+2,f
 17539  0465  01CB               	clrf	___ftadd@sign
 17540  0466  0ACB               	incf	___ftadd@sign,f
 17541  0467                     l8490:	
 17542  0467  0844               	movf	___ftadd@f2,w
 17543  0468  00A0               	movwf	___ftpack@arg
 17544  0469  0845               	movf	___ftadd@f2+1,w
 17545  046A  00A1               	movwf	___ftpack@arg+1
 17546  046B  0846               	movf	___ftadd@f2+2,w
 17547  046C  00A2               	movwf	___ftpack@arg+2
 17548  046D  084D               	movf	___ftadd@exp1,w
 17549  046E  00C7               	movwf	??___ftadd
 17550  046F  0847               	movf	??___ftadd,w
 17551  0470  00A3               	movwf	___ftpack@exp
 17552  0471  084B               	movf	___ftadd@sign,w
 17553  0472  00C8               	movwf	??___ftadd+1
 17554  0473  0848               	movf	??___ftadd+1,w
 17555  0474  00A4               	movwf	___ftpack@sign
 17556  0475  3196  2605         	fcall	___ftpack
 17557  0477  0020               	movlb	0	; select bank0
 17558  0478  0820               	movf	?___ftpack,w
 17559  0479  00C1               	movwf	?___ftadd
 17560  047A  0821               	movf	?___ftpack+1,w
 17561  047B  00C2               	movwf	?___ftadd+1
 17562  047C  0822               	movf	?___ftpack+2,w
 17563  047D  00C3               	movwf	?___ftadd+2
 17564  047E  0008               	return
 17565  047F                     __end_of___ftadd:	
 17566                           
 17567                           	psect	text122
 17568  1067                     __ptext122:	
 17569 ;; *************** function ___awtoft *****************
 17570 ;; Defined at:
 17571 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17572 ;; Parameters:    Size  Location     Type
 17573 ;;  c               2    8[BANK0 ] int 
 17574 ;; Auto vars:     Size  Location     Type
 17575 ;;  sign            1   13[BANK0 ] unsigned char 
 17576 ;; Return value:  Size  Location     Type
 17577 ;;                  3    8[BANK0 ] float 
 17578 ;; Registers used:
 17579 ;;		wreg, status,2, status,0, pclath, cstack
 17580 ;; Tracked objects:
 17581 ;;		On entry : 0/0
 17582 ;;		On exit  : 0/0
 17583 ;;		Unchanged: 0/0
 17584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17585 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17587 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17588 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17589 ;;Total ram usage:        6 bytes
 17590 ;; Hardware stack levels used:    1
 17591 ;; Hardware stack levels required when called:    6
 17592 ;; This function calls:
 17593 ;;		___ftpack
 17594 ;; This function is called by:
 17595 ;;		_getDimmerLights_PercentToValue
 17596 ;;		_getDimmerLights_ValueToPercent
 17597 ;; This function uses a non-reentrant model
 17598 ;;
 17599                           
 17600                           
 17601                           ;psect for function ___awtoft
 17602  1067                     ___awtoft:	
 17603                           
 17604                           ;incstack = 0
 17605                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17606  1067  0020               	movlb	0	; select bank0
 17607  1068  01AD               	clrf	___awtoft@sign
 17608  1069  1FA9               	btfss	___awtoft@c+1,7
 17609  106A  2872               	goto	l8418
 17610  106B  09A8               	comf	___awtoft@c,f
 17611  106C  09A9               	comf	___awtoft@c+1,f
 17612  106D  0AA8               	incf	___awtoft@c,f
 17613  106E  1903               	skipnz
 17614  106F  0AA9               	incf	___awtoft@c+1,f
 17615  1070  01AD               	clrf	___awtoft@sign
 17616  1071  0AAD               	incf	___awtoft@sign,f
 17617  1072                     l8418:	
 17618  1072  0828               	movf	___awtoft@c,w
 17619  1073  00A0               	movwf	___ftpack@arg
 17620  1074  0829               	movf	___awtoft@c+1,w
 17621  1075  00A1               	movwf	___ftpack@arg+1
 17622  1076  01A2               	clrf	___ftpack@arg+2
 17623  1077  308E               	movlw	142
 17624  1078  00AB               	movwf	??___awtoft
 17625  1079  082B               	movf	??___awtoft,w
 17626  107A  00A3               	movwf	___ftpack@exp
 17627  107B  082D               	movf	___awtoft@sign,w
 17628  107C  00AC               	movwf	??___awtoft+1
 17629  107D  082C               	movf	??___awtoft+1,w
 17630  107E  00A4               	movwf	___ftpack@sign
 17631  107F  3196  2605         	fcall	___ftpack
 17632  1081  0020               	movlb	0	; select bank0
 17633  1082  0820               	movf	?___ftpack,w
 17634  1083  00A8               	movwf	?___awtoft
 17635  1084  0821               	movf	?___ftpack+1,w
 17636  1085  00A9               	movwf	?___awtoft+1
 17637  1086  0822               	movf	?___ftpack+2,w
 17638  1087  00AA               	movwf	?___awtoft+2
 17639  1088  0008               	return
 17640  1089                     __end_of___awtoft:	
 17641                           
 17642                           	psect	text123
 17643  1605                     __ptext123:	
 17644 ;; *************** function ___ftpack *****************
 17645 ;; Defined at:
 17646 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17647 ;; Parameters:    Size  Location     Type
 17648 ;;  arg             3    0[BANK0 ] unsigned um
 17649 ;;  exp             1    3[BANK0 ] unsigned char 
 17650 ;;  sign            1    4[BANK0 ] unsigned char 
 17651 ;; Auto vars:     Size  Location     Type
 17652 ;;		None
 17653 ;; Return value:  Size  Location     Type
 17654 ;;                  3    0[BANK0 ] float 
 17655 ;; Registers used:
 17656 ;;		wreg, status,2, status,0
 17657 ;; Tracked objects:
 17658 ;;		On entry : 0/0
 17659 ;;		On exit  : 0/0
 17660 ;;		Unchanged: 0/0
 17661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17662 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17664 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17665 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17666 ;;Total ram usage:        8 bytes
 17667 ;; Hardware stack levels used:    1
 17668 ;; Hardware stack levels required when called:    5
 17669 ;; This function calls:
 17670 ;;		Nothing
 17671 ;; This function is called by:
 17672 ;;		___awtoft
 17673 ;;		___ftadd
 17674 ;;		___ftdiv
 17675 ;;		___ftmul
 17676 ;; This function uses a non-reentrant model
 17677 ;;
 17678                           
 17679                           
 17680                           ;psect for function ___ftpack
 17681  1605                     ___ftpack:	
 17682                           
 17683                           ;incstack = 0
 17684                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17685  1605  0020               	movlb	0	; select bank0
 17686  1606  0823               	movf	___ftpack@exp,w
 17687  1607  1903               	btfsc	3,2
 17688  1608  2E0E               	goto	l8286
 17689  1609  0822               	movf	___ftpack@arg+2,w
 17690  160A  0421               	iorwf	___ftpack@arg+1,w
 17691  160B  0420               	iorwf	___ftpack@arg,w
 17692  160C  1D03               	skipz
 17693  160D  2E1F               	goto	l8292
 17694  160E                     l8286:	
 17695  160E  3000               	movlw	0
 17696  160F  00A0               	movwf	?___ftpack
 17697  1610  3000               	movlw	0
 17698  1611  00A1               	movwf	?___ftpack+1
 17699  1612  3000               	movlw	0
 17700  1613  00A2               	movwf	?___ftpack+2
 17701  1614  0008               	return
 17702  1615                     l8290:	
 17703  1615  3001               	movlw	1
 17704  1616  00A5               	movwf	??___ftpack
 17705  1617  0825               	movf	??___ftpack,w
 17706  1618  07A3               	addwf	___ftpack@exp,f
 17707  1619  3001               	movlw	1
 17708  161A                     u8615:	
 17709  161A  36A2               	lsrf	___ftpack@arg+2,f
 17710  161B  0CA1               	rrf	___ftpack@arg+1,f
 17711  161C  0CA0               	rrf	___ftpack@arg,f
 17712  161D  0B89               	decfsz	9,f
 17713  161E  2E1A               	goto	u8615
 17714  161F                     l8292:	
 17715  161F  30FE               	movlw	254
 17716  1620  0522               	andwf	___ftpack@arg+2,w
 17717  1621  1903               	btfsc	3,2
 17718  1622  2E38               	goto	l2838
 17719  1623  2E15               	goto	l8290
 17720  1624                     l8294:	
 17721  1624  3001               	movlw	1
 17722  1625  00A5               	movwf	??___ftpack
 17723  1626  0825               	movf	??___ftpack,w
 17724  1627  07A3               	addwf	___ftpack@exp,f
 17725  1628  3001               	movlw	1
 17726  1629  07A0               	addwf	___ftpack@arg,f
 17727  162A  3000               	movlw	0
 17728  162B  1803               	skipnc
 17729  162C  3001               	movlw	1
 17730  162D  07A1               	addwf	___ftpack@arg+1,f
 17731  162E  3000               	movlw	0
 17732  162F  1803               	skipnc
 17733  1630  3001               	movlw	1
 17734  1631  07A2               	addwf	___ftpack@arg+2,f
 17735  1632  3001               	movlw	1
 17736  1633                     u8635:	
 17737  1633  36A2               	lsrf	___ftpack@arg+2,f
 17738  1634  0CA1               	rrf	___ftpack@arg+1,f
 17739  1635  0CA0               	rrf	___ftpack@arg,f
 17740  1636  0B89               	decfsz	9,f
 17741  1637  2E33               	goto	u8635
 17742  1638                     l2838:	
 17743  1638  30FF               	movlw	255
 17744  1639  0522               	andwf	___ftpack@arg+2,w
 17745  163A  1903               	btfsc	3,2
 17746  163B  2E45               	goto	l8302
 17747  163C  2E24               	goto	l8294
 17748  163D                     l8300:	
 17749  163D  3001               	movlw	1
 17750  163E  02A3               	subwf	___ftpack@exp,f
 17751  163F  3001               	movlw	1
 17752  1640                     u8655:	
 17753  1640  35A0               	lslf	___ftpack@arg,f
 17754  1641  0DA1               	rlf	___ftpack@arg+1,f
 17755  1642  0DA2               	rlf	___ftpack@arg+2,f
 17756  1643  0B89               	decfsz	9,f
 17757  1644  2E40               	goto	u8655
 17758  1645                     l8302:	
 17759  1645  1FA1               	btfss	___ftpack@arg+1,7
 17760  1646  2E3D               	goto	l8300
 17761  1647  1823               	btfsc	___ftpack@exp,0
 17762  1648  2E4F               	goto	l2844
 17763  1649  30FF               	movlw	255
 17764  164A  05A0               	andwf	___ftpack@arg,f
 17765  164B  307F               	movlw	127
 17766  164C  05A1               	andwf	___ftpack@arg+1,f
 17767  164D  30FF               	movlw	255
 17768  164E  05A2               	andwf	___ftpack@arg+2,f
 17769  164F                     l2844:	
 17770  164F  1003               	clrc
 17771  1650  0CA3               	rrf	___ftpack@exp,f
 17772  1651  0823               	movf	___ftpack@exp,w
 17773  1652  00A5               	movwf	??___ftpack
 17774  1653  01A6               	clrf	??___ftpack+1
 17775  1654  01A7               	clrf	??___ftpack+2
 17776  1655  3010               	movlw	16
 17777  1656                     u8685:	
 17778  1656  35A5               	lslf	??___ftpack,f
 17779  1657  0DA6               	rlf	??___ftpack+1,f
 17780  1658  0DA7               	rlf	??___ftpack+2,f
 17781  1659  0B89               	decfsz	9,f
 17782  165A  2E56               	goto	u8685
 17783  165B  0825               	movf	??___ftpack,w
 17784  165C  04A0               	iorwf	___ftpack@arg,f
 17785  165D  0826               	movf	??___ftpack+1,w
 17786  165E  04A1               	iorwf	___ftpack@arg+1,f
 17787  165F  0827               	movf	??___ftpack+2,w
 17788  1660  04A2               	iorwf	___ftpack@arg+2,f
 17789  1661  0824               	movf	___ftpack@sign,w
 17790  1662  1903               	btfsc	3,2
 17791  1663  0008               	return
 17792  1664  17A2               	bsf	___ftpack@arg+2,7
 17793  1665  0008               	return
 17794  1666                     __end_of___ftpack:	
 17795                           
 17796                           	psect	text124
 17797  1B53                     __ptext124:	
 17798 ;; *************** function _DelayOff_Main *****************
 17799 ;; Defined at:
 17800 ;;		line 41 in file "../src/DelayOff_B1.c"
 17801 ;; Parameters:    Size  Location     Type
 17802 ;;		None
 17803 ;; Auto vars:     Size  Location     Type
 17804 ;;		None
 17805 ;; Return value:  Size  Location     Type
 17806 ;;		None               void
 17807 ;; Registers used:
 17808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17809 ;; Tracked objects:
 17810 ;;		On entry : 0/0
 17811 ;;		On exit  : 0/0
 17812 ;;		Unchanged: 0/0
 17813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17818 ;;Total ram usage:        0 bytes
 17819 ;; Hardware stack levels used:    1
 17820 ;; Hardware stack levels required when called:    9
 17821 ;; This function calls:
 17822 ;;		_DlyOff_Main
 17823 ;; This function is called by:
 17824 ;;		_main
 17825 ;; This function uses a non-reentrant model
 17826 ;;
 17827                           
 17828                           
 17829                           ;psect for function _DelayOff_Main
 17830  1B53                     _DelayOff_Main:	
 17831                           
 17832                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17833                           
 17834                           ;incstack = 0
 17835                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17836  1B53  3001               	movlw	1
 17837  1B54  3188  20E9         	fcall	_DlyOff_Main
 17838  1B56  0008               	return
 17839  1B57                     __end_of_DelayOff_Main:	
 17840                           
 17841                           	psect	text125
 17842  08E9                     __ptext125:	
 17843 ;; *************** function _DlyOff_Main *****************
 17844 ;; Defined at:
 17845 ;;		line 61 in file "../src/DelayOff_B1.c"
 17846 ;; Parameters:    Size  Location     Type
 17847 ;;  sw              1    wreg     unsigned char 
 17848 ;; Auto vars:     Size  Location     Type
 17849 ;;  sw              1   71[BANK0 ] unsigned char 
 17850 ;; Return value:  Size  Location     Type
 17851 ;;		None               void
 17852 ;; Registers used:
 17853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17854 ;; Tracked objects:
 17855 ;;		On entry : 0/0
 17856 ;;		On exit  : 0/0
 17857 ;;		Unchanged: 0/0
 17858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17861 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17863 ;;Total ram usage:        3 bytes
 17864 ;; Hardware stack levels used:    1
 17865 ;; Hardware stack levels required when called:    8
 17866 ;; This function calls:
 17867 ;;		_DelayOffPointSelect
 17868 ;;		_getDimmerLights_Status
 17869 ;;		_setDimmerLights_SwOff
 17870 ;;		_setDimmerLights_SwOn
 17871 ;;		_setProductData
 17872 ;; This function is called by:
 17873 ;;		_DelayOff_Main
 17874 ;; This function uses a non-reentrant model
 17875 ;;
 17876                           
 17877                           
 17878                           ;psect for function _DlyOff_Main
 17879  08E9                     _DlyOff_Main:	
 17880                           
 17881                           ;incstack = 0
 17882                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17883                           ;DlyOff_Main@sw stored from wreg
 17884  08E9  0020               	movlb	0	; select bank0
 17885  08EA  00E7               	movwf	DlyOff_Main@sw
 17886                           
 17887                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17888  08EB  0867               	movf	DlyOff_Main@sw,w
 17889  08EC  319C  2406  3188   	fcall	_DelayOffPointSelect
 17890                           
 17891                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17892  08EF  0021               	movlb	1	; select bank1
 17893  08F0  0849               	movf	_DelayOff^(0+128),w
 17894  08F1  0086               	movwf	6
 17895  08F2  3001               	movlw	1	; select bank2/3
 17896  08F3  0087               	movwf	7
 17897  08F4  1C81               	btfss	1,1
 17898  08F5  0008               	return
 17899                           
 17900                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17901  08F6  0849               	movf	_DelayOff^(0+128),w
 17902  08F7  3E02               	addlw	2
 17903  08F8  0086               	movwf	6
 17904  08F9  3001               	movlw	1	; select bank2/3
 17905  08FA  0087               	movwf	7
 17906  08FB  3001               	movlw	1
 17907  08FC  0781               	addwf	1,f
 17908  08FD  3141               	addfsr 1,1
 17909  08FE  1803               	skipnc
 17910  08FF  0A81               	incf	1,f
 17911                           
 17912                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17913  0900  0849               	movf	_DelayOff^(0+128),w
 17914  0901  3E02               	addlw	2
 17915  0902  0086               	movwf	6
 17916  0903  3001               	movlw	1	; select bank2/3
 17917  0904  0087               	movwf	7
 17918  0905  3F40               	moviw [0]fsr1
 17919  0906  0020               	movlb	0	; select bank0
 17920  0907  00E5               	movwf	??_DlyOff_Main
 17921  0908  3F41               	moviw [1]fsr1
 17922  0909  00E6               	movwf	??_DlyOff_Main+1
 17923  090A  300B               	movlw	11
 17924  090B  0266               	subwf	??_DlyOff_Main+1,w
 17925  090C  30B8               	movlw	184
 17926  090D  1903               	skipnz
 17927  090E  0265               	subwf	??_DlyOff_Main,w
 17928  090F  1C03               	skipc
 17929  0910  0008               	return
 17930                           
 17931                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17932  0911  0021               	movlb	1	; select bank1
 17933  0912  0849               	movf	_DelayOff^(0+128),w
 17934  0913  3E02               	addlw	2
 17935  0914  0086               	movwf	6
 17936  0915  3001               	movlw	1	; select bank2/3
 17937  0916  0087               	movwf	7
 17938  0917  3000               	movlw	0
 17939  0918  3FC0               	movwi [0]fsr1
 17940  0919  3FC1               	movwi [1]fsr1
 17941                           
 17942                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17943  091A  3001               	movlw	1
 17944  091B  0020               	movlb	0	; select bank0
 17945  091C  00E5               	movwf	??_DlyOff_Main
 17946  091D  0021               	movlb	1	; select bank1
 17947  091E  0849               	movf	_DelayOff^(0+128),w
 17948  091F  3E04               	addlw	4
 17949  0920  0086               	movwf	6
 17950  0921  3001               	movlw	1	; select bank2/3
 17951  0922  0087               	movwf	7
 17952  0923  0020               	movlb	0	; select bank0
 17953  0924  0865               	movf	??_DlyOff_Main,w
 17954  0925  0781               	addwf	1,f
 17955                           
 17956                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17957  0926  0021               	movlb	1	; select bank1
 17958  0927  0849               	movf	_DelayOff^(0+128),w
 17959  0928  3E04               	addlw	4
 17960  0929  0086               	movwf	6
 17961  092A  3001               	movlw	1	; select bank2/3
 17962  092B  0087               	movwf	7
 17963  092C  0A49               	incf	_DelayOff^(0+128),w
 17964  092D  0084               	movwf	4
 17965  092E  3001               	movlw	1	; select bank2/3
 17966  092F  0085               	movwf	5
 17967  0930  0800               	movf	0,w
 17968  0931  0201               	subwf	1,w
 17969  0932  1C03               	skipc
 17970  0933  0008               	return
 17971                           
 17972                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17973  0934  0849               	movf	_DelayOff^(0+128),w
 17974  0935  3E04               	addlw	4
 17975  0936  0086               	movwf	6
 17976  0937  3001               	movlw	1	; select bank2/3
 17977  0938  0087               	movwf	7
 17978  0939  0181               	clrf	1
 17979                           
 17980                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17981  093A  0849               	movf	_DelayOff^(0+128),w
 17982  093B  0086               	movwf	6
 17983  093C  3001               	movlw	1	; select bank2/3
 17984  093D  0087               	movwf	7
 17985  093E  1081               	bcf	1,1
 17986                           
 17987                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17988  093F  0020               	movlb	0	; select bank0
 17989  0940  0867               	movf	DlyOff_Main@sw,w
 17990  0941  319C  24D1  3188   	fcall	_getDimmerLights_Status
 17991  0944  3A01               	xorlw	1
 17992  0945  1D03               	skipz
 17993  0946  2951               	goto	l531
 17994                           
 17995                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17996  0947  0020               	movlb	0	; select bank0
 17997  0948  0867               	movf	DlyOff_Main@sw,w
 17998  0949  3191  21DF  3188   	fcall	_setDimmerLights_SwOn
 17999                           
 18000                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18001  094C  0020               	movlb	0	; select bank0
 18002  094D  0867               	movf	DlyOff_Main@sw,w
 18003  094E  3192  22B8  3188   	fcall	_setDimmerLights_SwOff
 18004  0951                     l531:	
 18005                           
 18006                           ;DelayOff_B1.c: 78: }
 18007                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18008  0951  0020               	movlb	0	; select bank0
 18009  0952  01E2               	clrf	setProductData@value
 18010  0953  0867               	movf	DlyOff_Main@sw,w
 18011  0954  3E1A               	addlw	26
 18012  0955  319C  241E         	fcall	_setProductData
 18013  0957  0008               	return
 18014  0958                     __end_of_DlyOff_Main:	
 18015                           
 18016                           	psect	text126
 18017  1C1E                     __ptext126:	
 18018 ;; *************** function _setProductData *****************
 18019 ;; Defined at:
 18020 ;;		line 645 in file "../src/Main_B1.c"
 18021 ;; Parameters:    Size  Location     Type
 18022 ;;  address         1    wreg     unsigned char 
 18023 ;;  value           1   66[BANK0 ] unsigned char 
 18024 ;; Auto vars:     Size  Location     Type
 18025 ;;  address         1   68[BANK0 ] unsigned char 
 18026 ;; Return value:  Size  Location     Type
 18027 ;;		None               void
 18028 ;; Registers used:
 18029 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18030 ;; Tracked objects:
 18031 ;;		On entry : 0/0
 18032 ;;		On exit  : 0/0
 18033 ;;		Unchanged: 0/0
 18034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18035 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18038 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18039 ;;Total ram usage:        3 bytes
 18040 ;; Hardware stack levels used:    1
 18041 ;; Hardware stack levels required when called:    5
 18042 ;; This function calls:
 18043 ;;		Nothing
 18044 ;; This function is called by:
 18045 ;;		_DlyOff_Main
 18046 ;;		_setDelayOff_GO
 18047 ;;		_setDimmerLights_OnOff
 18048 ;;		_setDimmerLights_Dimming
 18049 ;;		_setTemp_Main
 18050 ;;		_setLog_Code
 18051 ;;		_setControl_Lights_Table
 18052 ;;		_setRFSW_AdjControl
 18053 ;;		_setRF_DimmerLights
 18054 ;; This function uses a non-reentrant model
 18055 ;;
 18056                           
 18057                           
 18058                           ;psect for function _setProductData
 18059  1C1E                     _setProductData:	
 18060                           
 18061                           ;incstack = 0
 18062                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18063                           ;setProductData@address stored from wreg
 18064  1C1E  0020               	movlb	0	; select bank0
 18065  1C1F  00E4               	movwf	setProductData@address
 18066                           
 18067                           ;Main_B1.c: 646: _product.Data[address] = value;
 18068  1C20  0862               	movf	setProductData@value,w
 18069  1C21  00E3               	movwf	??_setProductData
 18070  1C22  0864               	movf	setProductData@address,w
 18071  1C23  3E45               	addlw	__product& (0+255)
 18072  1C24  0086               	movwf	6
 18073  1C25  3002               	movlw	2	; select bank4/5
 18074  1C26  0087               	movwf	7
 18075  1C27  0863               	movf	??_setProductData,w
 18076  1C28  0081               	movwf	1
 18077  1C29  0008               	return
 18078  1C2A                     __end_of_setProductData:	
 18079                           
 18080                           	psect	text127
 18081  11DF                     __ptext127:	
 18082 ;; *************** function _setDimmerLights_SwOn *****************
 18083 ;; Defined at:
 18084 ;;		line 688 in file "../src/Dimmer_B1.c"
 18085 ;; Parameters:    Size  Location     Type
 18086 ;;  sw              1    wreg     unsigned char 
 18087 ;; Auto vars:     Size  Location     Type
 18088 ;;  sw              1   13[BANK0 ] unsigned char 
 18089 ;;  idle            1   14[BANK0 ] unsigned char 
 18090 ;; Return value:  Size  Location     Type
 18091 ;;		None               void
 18092 ;; Registers used:
 18093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18094 ;; Tracked objects:
 18095 ;;		On entry : 0/0
 18096 ;;		On exit  : 0/0
 18097 ;;		Unchanged: 0/0
 18098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18102 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18103 ;;Total ram usage:        2 bytes
 18104 ;; Hardware stack levels used:    1
 18105 ;; Hardware stack levels required when called:    7
 18106 ;; This function calls:
 18107 ;;		_DimmerLights_SelectPointer
 18108 ;;		_setBuz
 18109 ;; This function is called by:
 18110 ;;		_DlyOff_Main
 18111 ;;		_setControl_Lights_Table
 18112 ;;		_setRFSW_Control
 18113 ;;		_setRFSW_AdjControl
 18114 ;;		_setSw_Main
 18115 ;; This function uses a non-reentrant model
 18116 ;;
 18117                           
 18118                           
 18119                           ;psect for function _setDimmerLights_SwOn
 18120  11DF                     _setDimmerLights_SwOn:	
 18121                           
 18122                           ;incstack = 0
 18123                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18124                           ;setDimmerLights_SwOn@sw stored from wreg
 18125  11DF  0020               	movlb	0	; select bank0
 18126  11E0  00AD               	movwf	setDimmerLights_SwOn@sw
 18127                           
 18128                           ;Dimmer_B1.c: 689: char idle = 0;
 18129  11E1  01AE               	clrf	setDimmerLights_SwOn@idle
 18130                           
 18131                           ;Dimmer_B1.c: 714: DimmerLights_SelectPointer(sw);
 18132  11E2  082D               	movf	setDimmerLights_SwOn@sw,w
 18133  11E3  319C  2412  3191   	fcall	_DimmerLights_SelectPointer
 18134                           
 18135                           ;Dimmer_B1.c: 715: if (idle == 0) {
 18136  11E6  0020               	movlb	0	; select bank0
 18137  11E7  08AE               	movf	setDimmerLights_SwOn@idle,f
 18138  11E8  1D03               	skipz
 18139  11E9  0008               	return
 18140                           
 18141                           ;Dimmer_B1.c: 716: DimmerLights->SwFlag = 1;
 18142  11EA  0021               	movlb	1	; select bank1
 18143  11EB  084A               	movf	_DimmerLights^(0+128),w
 18144  11EC  0086               	movwf	6
 18145  11ED  3001               	movlw	1	; select bank2/3
 18146  11EE  0087               	movwf	7
 18147  11EF  1401               	bsf	1,0
 18148                           
 18149                           ;Dimmer_B1.c: 717: if (DimmerLights->Status == 0) {
 18150  11F0  0A4A               	incf	_DimmerLights^(0+128),w
 18151  11F1  0086               	movwf	6
 18152  11F2  3001               	movlw	1	; select bank2/3
 18153  11F3  0087               	movwf	7
 18154  11F4  1801               	btfsc	1,0
 18155  11F5  2A06               	goto	l8682
 18156                           
 18157                           ;Dimmer_B1.c: 718: DimmerLights->Status = 1;
 18158  11F6  0A4A               	incf	_DimmerLights^(0+128),w
 18159  11F7  0086               	movwf	6
 18160  11F8  3001               	movlw	1	; select bank2/3
 18161  11F9  0087               	movwf	7
 18162  11FA  1401               	bsf	1,0
 18163                           
 18164                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = 1;
 18165  11FB  084A               	movf	_DimmerLights^(0+128),w
 18166  11FC  0086               	movwf	6
 18167  11FD  3001               	movlw	1	; select bank2/3
 18168  11FE  0087               	movwf	7
 18169  11FF  1481               	bsf	1,1
 18170                           
 18171                           ;Dimmer_B1.c: 720: DimmerLights->Switch = 1;
 18172  1200  084A               	movf	_DimmerLights^(0+128),w
 18173  1201  0086               	movwf	6
 18174  1202  3001               	movlw	1	; select bank2/3
 18175  1203  0087               	movwf	7
 18176  1204  1501               	bsf	1,2
 18177                           
 18178                           ;Dimmer_B1.c: 721: } else {
 18179  1205  2A0B               	goto	l8684
 18180  1206                     l8682:	
 18181                           
 18182                           ;Dimmer_B1.c: 722: DimmerLights->Status = 0;
 18183  1206  0A4A               	incf	_DimmerLights^(0+128),w
 18184  1207  0086               	movwf	6
 18185  1208  3001               	movlw	1	; select bank2/3
 18186  1209  0087               	movwf	7
 18187  120A  1001               	bcf	1,0
 18188  120B                     l8684:	
 18189                           
 18190                           ;Dimmer_B1.c: 723: }
 18191                           ;Dimmer_B1.c: 724: setBuz(1, 100);
 18192  120B  3064               	movlw	100
 18193  120C  0020               	movlb	0	; select bank0
 18194  120D  00A9               	movwf	setBuz@time
 18195  120E  3000               	movlw	0
 18196  120F  00AA               	movwf	setBuz@time+1
 18197  1210  3001               	movlw	1
 18198  1211  3195  2551         	fcall	_setBuz
 18199  1213  0008               	return
 18200  1214                     __end_of_setDimmerLights_SwOn:	
 18201                           
 18202                           	psect	text128
 18203  1551                     __ptext128:	
 18204 ;; *************** function _setBuz *****************
 18205 ;; Defined at:
 18206 ;;		line 22 in file "../src/Buzzer_B1.c"
 18207 ;; Parameters:    Size  Location     Type
 18208 ;;  count           1    wreg     unsigned char 
 18209 ;;  time            2    9[BANK0 ] int 
 18210 ;; Auto vars:     Size  Location     Type
 18211 ;;  count           1   12[BANK0 ] unsigned char 
 18212 ;; Return value:  Size  Location     Type
 18213 ;;		None               void
 18214 ;; Registers used:
 18215 ;;		wreg, status,2, status,0, pclath, cstack
 18216 ;; Tracked objects:
 18217 ;;		On entry : 0/0
 18218 ;;		On exit  : 0/0
 18219 ;;		Unchanged: 0/0
 18220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18221 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18224 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18225 ;;Total ram usage:        4 bytes
 18226 ;; Hardware stack levels used:    1
 18227 ;; Hardware stack levels required when called:    6
 18228 ;; This function calls:
 18229 ;;		___awdiv
 18230 ;; This function is called by:
 18231 ;;		_setDimmerLights_SwOn
 18232 ;;		_setDimmerLights_Dimming
 18233 ;;		_my_MainTimer
 18234 ;;		_Exception_Main
 18235 ;;		_setTemp_Main
 18236 ;;		_setLog_Code
 18237 ;;		_setRFSW_Control
 18238 ;;		_setSw_Main
 18239 ;; This function uses a non-reentrant model
 18240 ;;
 18241                           
 18242                           
 18243                           ;psect for function _setBuz
 18244  1551                     _setBuz:	
 18245                           
 18246                           ;incstack = 0
 18247                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18248                           ;setBuz@count stored from wreg
 18249  1551  0020               	movlb	0	; select bank0
 18250  1552  00AC               	movwf	setBuz@count
 18251                           
 18252                           ;Buzzer_B1.c: 23: time /= 20;
 18253  1553  3014               	movlw	20
 18254  1554  00A0               	movwf	___awdiv@divisor
 18255  1555  3000               	movlw	0
 18256  1556  00A1               	movwf	___awdiv@divisor+1
 18257  1557  082A               	movf	setBuz@time+1,w
 18258  1558  01A3               	clrf	___awdiv@dividend+1
 18259  1559  07A3               	addwf	___awdiv@dividend+1,f
 18260  155A  0829               	movf	setBuz@time,w
 18261  155B  01A2               	clrf	___awdiv@dividend
 18262  155C  07A2               	addwf	___awdiv@dividend,f
 18263  155D  3194  24A7  3195   	fcall	___awdiv
 18264  1560  0020               	movlb	0	; select bank0
 18265  1561  0821               	movf	?___awdiv+1,w
 18266  1562  01AA               	clrf	setBuz@time+1
 18267  1563  07AA               	addwf	setBuz@time+1,f
 18268  1564  0820               	movf	?___awdiv,w
 18269  1565  01A9               	clrf	setBuz@time
 18270  1566  07A9               	addwf	setBuz@time,f
 18271                           
 18272                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18273  1567  0022               	movlb	2	; select bank2
 18274  1568  1C20               	btfss	_Buz1^(0+256),0
 18275  1569  0008               	return
 18276                           
 18277                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18278  156A  18A0               	btfsc	_Buz1^(0+256),1
 18279  156B  2D82               	goto	l86
 18280                           
 18281                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18282  156C  14A0               	bsf	_Buz1^(0+256),1
 18283                           
 18284                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18285  156D  01A1               	clrf	(_Buz1^(0+256)+1)
 18286  156E  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18287                           
 18288                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18289  156F  0020               	movlb	0	; select bank0
 18290  1570  082C               	movf	setBuz@count,w
 18291  1571  00AB               	movwf	??_setBuz
 18292  1572  082B               	movf	??_setBuz,w
 18293  1573  0022               	movlb	2	; select bank2
 18294  1574  00A3               	movwf	(_Buz1^(0+256)+3)
 18295                           
 18296                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18297  1575  0020               	movlb	0	; select bank0
 18298  1576  082A               	movf	setBuz@time+1,w
 18299  1577  0022               	movlb	2	; select bank2
 18300  1578  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18301  1579  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18302  157A  0020               	movlb	0	; select bank0
 18303  157B  0829               	movf	setBuz@time,w
 18304  157C  0022               	movlb	2	; select bank2
 18305  157D  01A6               	clrf	(_Buz1^(0+256)+6)
 18306  157E  07A6               	addwf	(_Buz1^(0+256)+6),f
 18307                           
 18308                           ;Buzzer_B1.c: 30: RB3 = 1;
 18309  157F  0020               	movlb	0	; select bank0
 18310  1580  158D               	bsf	13,3	;volatile
 18311                           
 18312                           ;Buzzer_B1.c: 31: } else {
 18313  1581  0008               	return
 18314  1582                     l86:	
 18315                           
 18316                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18317  1582  19A0               	btfsc	_Buz1^(0+256),3
 18318  1583  2D96               	goto	l88
 18319                           
 18320                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18321  1584  15A0               	bsf	_Buz1^(0+256),3
 18322                           
 18323                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18324  1585  0020               	movlb	0	; select bank0
 18325  1586  082C               	movf	setBuz@count,w
 18326  1587  00AB               	movwf	??_setBuz
 18327  1588  082B               	movf	??_setBuz,w
 18328  1589  0022               	movlb	2	; select bank2
 18329  158A  00A4               	movwf	(_Buz1^(0+256)+4)
 18330                           
 18331                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18332  158B  0020               	movlb	0	; select bank0
 18333  158C  082A               	movf	setBuz@time+1,w
 18334  158D  0022               	movlb	2	; select bank2
 18335  158E  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18336  158F  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18337  1590  0020               	movlb	0	; select bank0
 18338  1591  0829               	movf	setBuz@time,w
 18339  1592  0022               	movlb	2	; select bank2
 18340  1593  01A8               	clrf	(_Buz1^(0+256)+8)
 18341  1594  07A8               	addwf	(_Buz1^(0+256)+8),f
 18342                           
 18343                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18344  1595  0008               	return
 18345  1596                     l88:	
 18346  1596  1A20               	btfsc	_Buz1^(0+256),4
 18347  1597  0008               	return
 18348                           
 18349                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18350  1598  1620               	bsf	_Buz1^(0+256),4
 18351                           
 18352                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18353  1599  0020               	movlb	0	; select bank0
 18354  159A  082C               	movf	setBuz@count,w
 18355  159B  00AB               	movwf	??_setBuz
 18356  159C  082B               	movf	??_setBuz,w
 18357  159D  0022               	movlb	2	; select bank2
 18358  159E  00A5               	movwf	(_Buz1^(0+256)+5)
 18359                           
 18360                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18361  159F  0020               	movlb	0	; select bank0
 18362  15A0  082A               	movf	setBuz@time+1,w
 18363  15A1  0022               	movlb	2	; select bank2
 18364  15A2  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18365  15A3  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18366  15A4  0020               	movlb	0	; select bank0
 18367  15A5  0829               	movf	setBuz@time,w
 18368  15A6  0022               	movlb	2	; select bank2
 18369  15A7  01AA               	clrf	(_Buz1^(0+256)+10)
 18370  15A8  07AA               	addwf	(_Buz1^(0+256)+10),f
 18371  15A9  0008               	return
 18372  15AA                     __end_of_setBuz:	
 18373                           
 18374                           	psect	text129
 18375  14A7                     __ptext129:	
 18376 ;; *************** function ___awdiv *****************
 18377 ;; Defined at:
 18378 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18379 ;; Parameters:    Size  Location     Type
 18380 ;;  divisor         2    0[BANK0 ] int 
 18381 ;;  dividend        2    2[BANK0 ] int 
 18382 ;; Auto vars:     Size  Location     Type
 18383 ;;  quotient        2    7[BANK0 ] int 
 18384 ;;  sign            1    6[BANK0 ] unsigned char 
 18385 ;;  counter         1    5[BANK0 ] unsigned char 
 18386 ;; Return value:  Size  Location     Type
 18387 ;;                  2    0[BANK0 ] int 
 18388 ;; Registers used:
 18389 ;;		wreg, status,2, status,0
 18390 ;; Tracked objects:
 18391 ;;		On entry : 0/0
 18392 ;;		On exit  : 0/0
 18393 ;;		Unchanged: 0/0
 18394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18395 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18396 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18398 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18399 ;;Total ram usage:        9 bytes
 18400 ;; Hardware stack levels used:    1
 18401 ;; Hardware stack levels required when called:    5
 18402 ;; This function calls:
 18403 ;;		Nothing
 18404 ;; This function is called by:
 18405 ;;		_setBuz
 18406 ;; This function uses a non-reentrant model
 18407 ;;
 18408                           
 18409                           
 18410                           ;psect for function ___awdiv
 18411  14A7                     ___awdiv:	
 18412                           
 18413                           ;incstack = 0
 18414                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18415  14A7  0020               	movlb	0	; select bank0
 18416  14A8  01A6               	clrf	___awdiv@sign
 18417  14A9  1FA1               	btfss	___awdiv@divisor+1,7
 18418  14AA  2CB2               	goto	l8320
 18419  14AB  09A0               	comf	___awdiv@divisor,f
 18420  14AC  09A1               	comf	___awdiv@divisor+1,f
 18421  14AD  0AA0               	incf	___awdiv@divisor,f
 18422  14AE  1903               	skipnz
 18423  14AF  0AA1               	incf	___awdiv@divisor+1,f
 18424  14B0  01A6               	clrf	___awdiv@sign
 18425  14B1  0AA6               	incf	___awdiv@sign,f
 18426  14B2                     l8320:	
 18427  14B2  1FA3               	btfss	___awdiv@dividend+1,7
 18428  14B3  2CBD               	goto	l8326
 18429  14B4  09A2               	comf	___awdiv@dividend,f
 18430  14B5  09A3               	comf	___awdiv@dividend+1,f
 18431  14B6  0AA2               	incf	___awdiv@dividend,f
 18432  14B7  1903               	skipnz
 18433  14B8  0AA3               	incf	___awdiv@dividend+1,f
 18434  14B9  3001               	movlw	1
 18435  14BA  00A4               	movwf	??___awdiv
 18436  14BB  0824               	movf	??___awdiv,w
 18437  14BC  06A6               	xorwf	___awdiv@sign,f
 18438  14BD                     l8326:	
 18439  14BD  01A7               	clrf	___awdiv@quotient
 18440  14BE  01A8               	clrf	___awdiv@quotient+1
 18441  14BF  0821               	movf	___awdiv@divisor+1,w
 18442  14C0  0420               	iorwf	___awdiv@divisor,w
 18443  14C1  1903               	skipnz
 18444  14C2  2CEC               	goto	l8348
 18445  14C3  01A5               	clrf	___awdiv@counter
 18446  14C4  0AA5               	incf	___awdiv@counter,f
 18447  14C5                     l8336:	
 18448  14C5  1BA1               	btfsc	___awdiv@divisor+1,7
 18449  14C6  2CD1               	goto	l8338
 18450  14C7  3001               	movlw	1
 18451  14C8                     u8735:	
 18452  14C8  35A0               	lslf	___awdiv@divisor,f
 18453  14C9  0DA1               	rlf	___awdiv@divisor+1,f
 18454  14CA  0B89               	decfsz	9,f
 18455  14CB  2CC8               	goto	u8735
 18456  14CC  3001               	movlw	1
 18457  14CD  00A4               	movwf	??___awdiv
 18458  14CE  0824               	movf	??___awdiv,w
 18459  14CF  07A5               	addwf	___awdiv@counter,f
 18460  14D0  2CC5               	goto	l8336
 18461  14D1                     l8338:	
 18462  14D1  3001               	movlw	1
 18463  14D2                     u8755:	
 18464  14D2  35A7               	lslf	___awdiv@quotient,f
 18465  14D3  0DA8               	rlf	___awdiv@quotient+1,f
 18466  14D4  0B89               	decfsz	9,f
 18467  14D5  2CD2               	goto	u8755
 18468  14D6  0821               	movf	___awdiv@divisor+1,w
 18469  14D7  0223               	subwf	___awdiv@dividend+1,w
 18470  14D8  1D03               	skipz
 18471  14D9  2CDC               	goto	u8765
 18472  14DA  0820               	movf	___awdiv@divisor,w
 18473  14DB  0222               	subwf	___awdiv@dividend,w
 18474  14DC                     u8765:	
 18475  14DC  1C03               	skipc
 18476  14DD  2CE3               	goto	l8344
 18477  14DE  0820               	movf	___awdiv@divisor,w
 18478  14DF  02A2               	subwf	___awdiv@dividend,f
 18479  14E0  0821               	movf	___awdiv@divisor+1,w
 18480  14E1  3BA3               	subwfb	___awdiv@dividend+1,f
 18481  14E2  1427               	bsf	___awdiv@quotient,0
 18482  14E3                     l8344:	
 18483  14E3  3001               	movlw	1
 18484  14E4                     u8775:	
 18485  14E4  36A1               	lsrf	___awdiv@divisor+1,f
 18486  14E5  0CA0               	rrf	___awdiv@divisor,f
 18487  14E6  0B89               	decfsz	9,f
 18488  14E7  2CE4               	goto	u8775
 18489  14E8  3001               	movlw	1
 18490  14E9  02A5               	subwf	___awdiv@counter,f
 18491  14EA  1D03               	btfss	3,2
 18492  14EB  2CD1               	goto	l8338
 18493  14EC                     l8348:	
 18494  14EC  0826               	movf	___awdiv@sign,w
 18495  14ED  1903               	btfsc	3,2
 18496  14EE  2CF4               	goto	l8352
 18497  14EF  09A7               	comf	___awdiv@quotient,f
 18498  14F0  09A8               	comf	___awdiv@quotient+1,f
 18499  14F1  0AA7               	incf	___awdiv@quotient,f
 18500  14F2  1903               	skipnz
 18501  14F3  0AA8               	incf	___awdiv@quotient+1,f
 18502  14F4                     l8352:	
 18503  14F4  0828               	movf	___awdiv@quotient+1,w
 18504  14F5  01A1               	clrf	?___awdiv+1
 18505  14F6  07A1               	addwf	?___awdiv+1,f
 18506  14F7  0827               	movf	___awdiv@quotient,w
 18507  14F8  01A0               	clrf	?___awdiv
 18508  14F9  07A0               	addwf	?___awdiv,f
 18509  14FA  0008               	return
 18510  14FB                     __end_of___awdiv:	
 18511                           
 18512                           	psect	text130
 18513  12B8                     __ptext130:	
 18514 ;; *************** function _setDimmerLights_SwOff *****************
 18515 ;; Defined at:
 18516 ;;		line 729 in file "../src/Dimmer_B1.c"
 18517 ;; Parameters:    Size  Location     Type
 18518 ;;  sw              1    wreg     unsigned char 
 18519 ;; Auto vars:     Size  Location     Type
 18520 ;;  sw              1    2[BANK0 ] unsigned char 
 18521 ;; Return value:  Size  Location     Type
 18522 ;;		None               void
 18523 ;; Registers used:
 18524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18525 ;; Tracked objects:
 18526 ;;		On entry : 0/0
 18527 ;;		On exit  : 0/0
 18528 ;;		Unchanged: 0/0
 18529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18533 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18534 ;;Total ram usage:        1 bytes
 18535 ;; Hardware stack levels used:    1
 18536 ;; Hardware stack levels required when called:    6
 18537 ;; This function calls:
 18538 ;;		_DimmerLights_SelectPointer
 18539 ;; This function is called by:
 18540 ;;		_DlyOff_Main
 18541 ;;		_Exception_Main
 18542 ;;		_setControl_Lights_Table
 18543 ;;		_setRFSW_Control
 18544 ;;		_setRFSW_AdjControl
 18545 ;;		_setSw_Main
 18546 ;; This function uses a non-reentrant model
 18547 ;;
 18548                           
 18549                           
 18550                           ;psect for function _setDimmerLights_SwOff
 18551  12B8                     _setDimmerLights_SwOff:	
 18552                           
 18553                           ;incstack = 0
 18554                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18555                           ;setDimmerLights_SwOff@sw stored from wreg
 18556  12B8  0020               	movlb	0	; select bank0
 18557  12B9  00A2               	movwf	setDimmerLights_SwOff@sw
 18558                           
 18559                           ;Dimmer_B1.c: 730: DimmerLights_SelectPointer(sw);
 18560  12BA  0822               	movf	setDimmerLights_SwOff@sw,w
 18561  12BB  319C  2412  3192   	fcall	_DimmerLights_SelectPointer
 18562                           
 18563                           ;Dimmer_B1.c: 732: if (DimmerLights->SwFlag == 1) {
 18564  12BE  0021               	movlb	1	; select bank1
 18565  12BF  084A               	movf	_DimmerLights^(0+128),w
 18566  12C0  0086               	movwf	6
 18567  12C1  3001               	movlw	1	; select bank2/3
 18568  12C2  0087               	movwf	7
 18569  12C3  1C01               	btfss	1,0
 18570  12C4  0008               	return
 18571                           
 18572                           ;Dimmer_B1.c: 733: DimmerLights->SwFlag = 0;
 18573  12C5  084A               	movf	_DimmerLights^(0+128),w
 18574  12C6  0086               	movwf	6
 18575  12C7  3001               	movlw	1	; select bank2/3
 18576  12C8  0087               	movwf	7
 18577  12C9  1001               	bcf	1,0
 18578                           
 18579                           ;Dimmer_B1.c: 734: if (DimmerLights->Status == 1) {
 18580  12CA  0A4A               	incf	_DimmerLights^(0+128),w
 18581  12CB  0086               	movwf	6
 18582  12CC  3001               	movlw	1	; select bank2/3
 18583  12CD  0087               	movwf	7
 18584  12CE  1C01               	btfss	1,0
 18585  12CF  2AE6               	goto	l8696
 18586                           
 18587                           ;Dimmer_B1.c: 735: if (DimmerLights->DimmingSwFlag == 1) {
 18588  12D0  084A               	movf	_DimmerLights^(0+128),w
 18589  12D1  0086               	movwf	6
 18590  12D2  3001               	movlw	1	; select bank2/3
 18591  12D3  0087               	movwf	7
 18592  12D4  1D81               	btfss	1,3
 18593  12D5  0008               	return
 18594                           
 18595                           ;Dimmer_B1.c: 736: DimmerLights->DimmingSwFlag = 0;
 18596  12D6  084A               	movf	_DimmerLights^(0+128),w
 18597  12D7  0086               	movwf	6
 18598  12D8  3001               	movlw	1	; select bank2/3
 18599  12D9  0087               	movwf	7
 18600  12DA  1181               	bcf	1,3
 18601                           
 18602                           ;Dimmer_B1.c: 738: DimmerLights->DimmingTrigger = 1;
 18603  12DB  084A               	movf	_DimmerLights^(0+128),w
 18604  12DC  0086               	movwf	6
 18605  12DD  3001               	movlw	1	; select bank2/3
 18606  12DE  0087               	movwf	7
 18607  12DF  1601               	bsf	1,4
 18608                           
 18609                           ;Dimmer_B1.c: 739: DimmerLights->DimmingSwitch = 0;
 18610  12E0  084A               	movf	_DimmerLights^(0+128),w
 18611  12E1  0086               	movwf	6
 18612  12E2  3001               	movlw	1	; select bank2/3
 18613  12E3  0087               	movwf	7
 18614  12E4  1281               	bcf	1,5
 18615                           
 18616                           ;Dimmer_B1.c: 740: }
 18617                           ;Dimmer_B1.c: 741: } else {
 18618  12E5  0008               	return
 18619  12E6                     l8696:	
 18620                           
 18621                           ;Dimmer_B1.c: 743: DimmerLights->Trigger = 1;
 18622  12E6  084A               	movf	_DimmerLights^(0+128),w
 18623  12E7  0086               	movwf	6
 18624  12E8  3001               	movlw	1	; select bank2/3
 18625  12E9  0087               	movwf	7
 18626  12EA  1481               	bsf	1,1
 18627                           
 18628                           ;Dimmer_B1.c: 744: DimmerLights->Switch = 0;
 18629  12EB  084A               	movf	_DimmerLights^(0+128),w
 18630  12EC  0086               	movwf	6
 18631  12ED  3001               	movlw	1	; select bank2/3
 18632  12EE  0087               	movwf	7
 18633  12EF  1101               	bcf	1,2
 18634  12F0  0008               	return
 18635  12F1                     __end_of_setDimmerLights_SwOff:	
 18636                           
 18637                           	psect	text131
 18638  1CD1                     __ptext131:	
 18639 ;; *************** function _getDimmerLights_Status *****************
 18640 ;; Defined at:
 18641 ;;		line 1070 in file "../src/Dimmer_B1.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;  lights          1    wreg     unsigned char 
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;  lights          1    2[BANK0 ] unsigned char 
 18646 ;;  status          1    3[BANK0 ] unsigned char 
 18647 ;; Return value:  Size  Location     Type
 18648 ;;                  1    wreg      unsigned char 
 18649 ;; Registers used:
 18650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18651 ;; Tracked objects:
 18652 ;;		On entry : 0/0
 18653 ;;		On exit  : 0/0
 18654 ;;		Unchanged: 0/0
 18655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18657 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18660 ;;Total ram usage:        2 bytes
 18661 ;; Hardware stack levels used:    1
 18662 ;; Hardware stack levels required when called:    6
 18663 ;; This function calls:
 18664 ;;		_DimmerLights_SelectPointer
 18665 ;; This function is called by:
 18666 ;;		_DlyOff_Main
 18667 ;;		_Exception_Main
 18668 ;;		_setControl_Lights_Table
 18669 ;;		_setRFSW_Control
 18670 ;;		_setRFSW_AdjControl
 18671 ;; This function uses a non-reentrant model
 18672 ;;
 18673                           
 18674                           
 18675                           ;psect for function _getDimmerLights_Status
 18676  1CD1                     _getDimmerLights_Status:	
 18677                           
 18678                           ;incstack = 0
 18679                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18680                           ;getDimmerLights_Status@lights stored from wreg
 18681  1CD1  0020               	movlb	0	; select bank0
 18682  1CD2  00A2               	movwf	getDimmerLights_Status@lights
 18683                           
 18684                           ;Dimmer_B1.c: 1071: DimmerLights_SelectPointer(lights);
 18685  1CD3  0822               	movf	getDimmerLights_Status@lights,w
 18686  1CD4  319C  2412         	fcall	_DimmerLights_SelectPointer
 18687                           
 18688                           ;Dimmer_B1.c: 1072: char status = DimmerLights->Status == 1 ? 1 : 0;
 18689  1CD6  0021               	movlb	1	; select bank1
 18690  1CD7  0A4A               	incf	_DimmerLights^(0+128),w
 18691  1CD8  0086               	movwf	6
 18692  1CD9  3001               	movlw	1	; select bank2/3
 18693  1CDA  0087               	movwf	7
 18694  1CDB  3000               	movlw	0
 18695  1CDC  1801               	btfsc	1,0
 18696  1CDD  3001               	movlw	1
 18697  1CDE  0020               	movlb	0	; select bank0
 18698  1CDF  00A3               	movwf	getDimmerLights_Status@status
 18699                           
 18700                           ;Dimmer_B1.c: 1073: return status;
 18701  1CE0  0823               	movf	getDimmerLights_Status@status,w
 18702  1CE1  0008               	return
 18703  1CE2                     __end_of_getDimmerLights_Status:	
 18704                           
 18705                           	psect	text132
 18706  1C12                     __ptext132:	
 18707 ;; *************** function _DimmerLights_SelectPointer *****************
 18708 ;; Defined at:
 18709 ;;		line 611 in file "../src/Dimmer_B1.c"
 18710 ;; Parameters:    Size  Location     Type
 18711 ;;  lights          1    wreg     unsigned char 
 18712 ;; Auto vars:     Size  Location     Type
 18713 ;;  lights          1    1[BANK0 ] unsigned char 
 18714 ;; Return value:  Size  Location     Type
 18715 ;;		None               void
 18716 ;; Registers used:
 18717 ;;		wreg
 18718 ;; Tracked objects:
 18719 ;;		On entry : 0/0
 18720 ;;		On exit  : 0/0
 18721 ;;		Unchanged: 0/0
 18722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18727 ;;Total ram usage:        2 bytes
 18728 ;; Hardware stack levels used:    1
 18729 ;; Hardware stack levels required when called:    5
 18730 ;; This function calls:
 18731 ;;		Nothing
 18732 ;; This function is called by:
 18733 ;;		_setDimmerLights_SwOn
 18734 ;;		_setDimmerLights_SwOff
 18735 ;;		_setDimmerLights_DimmingOn
 18736 ;;		_setDimmerLights_Main
 18737 ;;		_getDimmerLights_Status
 18738 ;;		_setDimmerLights_DimmingRun
 18739 ;;		_setDimmerLights_Status
 18740 ;; This function uses a non-reentrant model
 18741 ;;
 18742                           
 18743                           
 18744                           ;psect for function _DimmerLights_SelectPointer
 18745  1C12                     _DimmerLights_SelectPointer:	
 18746                           
 18747                           ;incstack = 0
 18748                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18749                           ;DimmerLights_SelectPointer@lights stored from wreg
 18750  1C12  0020               	movlb	0	; select bank0
 18751  1C13  00A1               	movwf	DimmerLights_SelectPointer@lights
 18752                           
 18753                           ;Dimmer_B1.c: 613: if (lights == 1) {
 18754  1C14  0821               	movf	DimmerLights_SelectPointer@lights,w
 18755  1C15  3A01               	xorlw	1
 18756  1C16  1D03               	skipz
 18757  1C17  0008               	return
 18758                           
 18759                           ;Dimmer_B1.c: 614: DimmerLights = &DimmerLights1;
 18760  1C18  30C7               	movlw	_DimmerLights1& (0+255)
 18761  1C19  00A0               	movwf	??_DimmerLights_SelectPointer
 18762  1C1A  0820               	movf	??_DimmerLights_SelectPointer,w
 18763  1C1B  0021               	movlb	1	; select bank1
 18764  1C1C  00CA               	movwf	_DimmerLights^(0+128)
 18765  1C1D  0008               	return
 18766  1C1E                     __end_of_DimmerLights_SelectPointer:	
 18767                           
 18768                           	psect	text133
 18769  1B4F                     __ptext133:	
 18770 ;; *************** function _DelayOff_Initialization *****************
 18771 ;; Defined at:
 18772 ;;		line 26 in file "../src/DelayOff_B1.c"
 18773 ;; Parameters:    Size  Location     Type
 18774 ;;		None
 18775 ;; Auto vars:     Size  Location     Type
 18776 ;;		None
 18777 ;; Return value:  Size  Location     Type
 18778 ;;		None               void
 18779 ;; Registers used:
 18780 ;;		wreg, status,2, status,0, pclath, cstack
 18781 ;; Tracked objects:
 18782 ;;		On entry : 0/0
 18783 ;;		On exit  : 0/0
 18784 ;;		Unchanged: 0/0
 18785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18790 ;;Total ram usage:        0 bytes
 18791 ;; Hardware stack levels used:    1
 18792 ;; Hardware stack levels required when called:    7
 18793 ;; This function calls:
 18794 ;;		_DlyOff_Initialization
 18795 ;; This function is called by:
 18796 ;;		_main
 18797 ;; This function uses a non-reentrant model
 18798 ;;
 18799                           
 18800                           
 18801                           ;psect for function _DelayOff_Initialization
 18802  1B4F                     _DelayOff_Initialization:	
 18803                           
 18804                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18805                           
 18806                           ;incstack = 0
 18807                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18808  1B4F  3001               	movlw	1
 18809  1B50  319B  237C         	fcall	_DlyOff_Initialization
 18810  1B52  0008               	return
 18811  1B53                     __end_of_DelayOff_Initialization:	
 18812                           
 18813                           	psect	text134
 18814  1B7C                     __ptext134:	
 18815 ;; *************** function _DlyOff_Initialization *****************
 18816 ;; Defined at:
 18817 ;;		line 56 in file "../src/DelayOff_B1.c"
 18818 ;; Parameters:    Size  Location     Type
 18819 ;;  sw              1    wreg     unsigned char 
 18820 ;; Auto vars:     Size  Location     Type
 18821 ;;  sw              1    2[BANK0 ] unsigned char 
 18822 ;; Return value:  Size  Location     Type
 18823 ;;		None               void
 18824 ;; Registers used:
 18825 ;;		wreg, status,2, status,0, pclath, cstack
 18826 ;; Tracked objects:
 18827 ;;		On entry : 0/0
 18828 ;;		On exit  : 0/0
 18829 ;;		Unchanged: 0/0
 18830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18834 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18835 ;;Total ram usage:        1 bytes
 18836 ;; Hardware stack levels used:    1
 18837 ;; Hardware stack levels required when called:    6
 18838 ;; This function calls:
 18839 ;;		_DelayOffPointSelect
 18840 ;; This function is called by:
 18841 ;;		_DelayOff_Initialization
 18842 ;; This function uses a non-reentrant model
 18843 ;;
 18844                           
 18845                           
 18846                           ;psect for function _DlyOff_Initialization
 18847  1B7C                     _DlyOff_Initialization:	
 18848                           
 18849                           ;incstack = 0
 18850                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18851                           ;DlyOff_Initialization@sw stored from wreg
 18852  1B7C  0020               	movlb	0	; select bank0
 18853  1B7D  00A2               	movwf	DlyOff_Initialization@sw
 18854                           
 18855                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18856  1B7E  0822               	movf	DlyOff_Initialization@sw,w
 18857  1B7F  319C  2406         	fcall	_DelayOffPointSelect
 18858  1B81  0008               	return
 18859  1B82                     __end_of_DlyOff_Initialization:	
 18860                           
 18861                           	psect	text135
 18862  1C06                     __ptext135:	
 18863 ;; *************** function _DelayOffPointSelect *****************
 18864 ;; Defined at:
 18865 ;;		line 7 in file "../src/DelayOff_B1.c"
 18866 ;; Parameters:    Size  Location     Type
 18867 ;;  sw              1    wreg     unsigned char 
 18868 ;; Auto vars:     Size  Location     Type
 18869 ;;  sw              1    1[BANK0 ] unsigned char 
 18870 ;; Return value:  Size  Location     Type
 18871 ;;		None               void
 18872 ;; Registers used:
 18873 ;;		wreg
 18874 ;; Tracked objects:
 18875 ;;		On entry : 0/0
 18876 ;;		On exit  : 0/0
 18877 ;;		Unchanged: 0/0
 18878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18880 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18882 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18883 ;;Total ram usage:        2 bytes
 18884 ;; Hardware stack levels used:    1
 18885 ;; Hardware stack levels required when called:    5
 18886 ;; This function calls:
 18887 ;;		Nothing
 18888 ;; This function is called by:
 18889 ;;		_DlyOff_Initialization
 18890 ;;		_DlyOff_Main
 18891 ;;		_setDelayOff_GO
 18892 ;;		_getDelayOff_GO
 18893 ;; This function uses a non-reentrant model
 18894 ;;
 18895                           
 18896                           
 18897                           ;psect for function _DelayOffPointSelect
 18898  1C06                     _DelayOffPointSelect:	
 18899                           
 18900                           ;incstack = 0
 18901                           ; Regs used in _DelayOffPointSelect: [wreg]
 18902                           ;DelayOffPointSelect@sw stored from wreg
 18903  1C06  0020               	movlb	0	; select bank0
 18904  1C07  00A1               	movwf	DelayOffPointSelect@sw
 18905                           
 18906                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18907  1C08  0821               	movf	DelayOffPointSelect@sw,w
 18908  1C09  3A01               	xorlw	1
 18909  1C0A  1D03               	skipz
 18910  1C0B  0008               	return
 18911                           
 18912                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18913  1C0C  3066               	movlw	_DlySw1& (0+255)
 18914  1C0D  00A0               	movwf	??_DelayOffPointSelect
 18915  1C0E  0820               	movf	??_DelayOffPointSelect,w
 18916  1C0F  0021               	movlb	1	; select bank1
 18917  1C10  00C9               	movwf	_DelayOff^(0+128)
 18918  1C11  0008               	return
 18919  1C12                     __end_of_DelayOffPointSelect:	
 18920                           
 18921                           	psect	text136
 18922  07B6                     __ptext136:	
 18923 ;; *************** function _Buzzer_Main *****************
 18924 ;; Defined at:
 18925 ;;		line 46 in file "../src/Buzzer_B1.c"
 18926 ;; Parameters:    Size  Location     Type
 18927 ;;		None
 18928 ;; Auto vars:     Size  Location     Type
 18929 ;;		None
 18930 ;; Return value:  Size  Location     Type
 18931 ;;		None               void
 18932 ;; Registers used:
 18933 ;;		wreg, status,2, status,0
 18934 ;; Tracked objects:
 18935 ;;		On entry : 0/0
 18936 ;;		On exit  : 0/0
 18937 ;;		Unchanged: 0/0
 18938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18942 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18943 ;;Total ram usage:        1 bytes
 18944 ;; Hardware stack levels used:    1
 18945 ;; Hardware stack levels required when called:    5
 18946 ;; This function calls:
 18947 ;;		Nothing
 18948 ;; This function is called by:
 18949 ;;		_main
 18950 ;; This function uses a non-reentrant model
 18951 ;;
 18952                           
 18953                           
 18954                           ;psect for function _Buzzer_Main
 18955  07B6                     _Buzzer_Main:	
 18956                           
 18957                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18958                           
 18959                           ;incstack = 0
 18960                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18961  07B6  0022               	movlb	2	; select bank2
 18962  07B7  1CA0               	btfss	_Buz1^(0+256),1
 18963  07B8  0008               	return
 18964                           
 18965                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18966  07B9  3001               	movlw	1
 18967  07BA  07A1               	addwf	(_Buz1^(0+256)+1),f
 18968  07BB  3000               	movlw	0
 18969  07BC  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 18970                           
 18971                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18972  07BD  0827               	movf	((_Buz1+1)^(0+256)+6),w
 18973  07BE  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 18974  07BF  1D03               	skipz
 18975  07C0  2FC3               	goto	u11275
 18976  07C1  0826               	movf	(_Buz1^(0+256)+6),w
 18977  07C2  0221               	subwf	(_Buz1^(0+256)+1),w
 18978  07C3                     u11275:	
 18979  07C3  1C03               	skipc
 18980  07C4  0008               	return
 18981                           
 18982                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18983  07C5  01A1               	clrf	(_Buz1^(0+256)+1)
 18984  07C6  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18985                           
 18986                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18987  07C7  12A0               	bcf	_Buz1^(0+256),5
 18988  07C8  0020               	movlb	0	; select bank0
 18989  07C9  1D8D               	btfss	13,3	;volatile
 18990  07CA  2FCD               	goto	l9908
 18991  07CB  0022               	movlb	2	; select bank2
 18992  07CC  16A0               	bsf	_Buz1^(0+256),5
 18993  07CD                     l9908:	
 18994                           
 18995                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18996  07CD  0022               	movlb	2	; select bank2
 18997  07CE  1AA0               	btfsc	_Buz1^(0+256),5
 18998  07CF  2FF9               	goto	l96
 18999                           
 19000                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19001  07D0  08A3               	movf	(_Buz1^(0+256)+3),f
 19002  07D1  1D03               	skipz
 19003  07D2  2FF5               	goto	l97
 19004                           
 19005                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19006  07D3  1DA0               	btfss	_Buz1^(0+256),3
 19007  07D4  2FE3               	goto	l98
 19008                           
 19009                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19010  07D5  11A0               	bcf	_Buz1^(0+256),3
 19011                           
 19012                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19013  07D6  0824               	movf	(_Buz1^(0+256)+4),w
 19014  07D7  0020               	movlb	0	; select bank0
 19015  07D8  00A0               	movwf	??_Buzzer_Main
 19016  07D9  0820               	movf	??_Buzzer_Main,w
 19017  07DA  0022               	movlb	2	; select bank2
 19018  07DB  00A3               	movwf	(_Buz1^(0+256)+3)
 19019                           
 19020                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19021  07DC  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19022  07DD  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19023  07DE  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19024  07DF  0828               	movf	(_Buz1^(0+256)+8),w
 19025  07E0  01A6               	clrf	(_Buz1^(0+256)+6)
 19026  07E1  07A6               	addwf	(_Buz1^(0+256)+6),f
 19027                           
 19028                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19029  07E2  0008               	return
 19030  07E3                     l98:	
 19031  07E3  1E20               	btfss	_Buz1^(0+256),4
 19032  07E4  2FF3               	goto	l100
 19033                           
 19034                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19035  07E5  1220               	bcf	_Buz1^(0+256),4
 19036                           
 19037                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19038  07E6  0825               	movf	(_Buz1^(0+256)+5),w
 19039  07E7  0020               	movlb	0	; select bank0
 19040  07E8  00A0               	movwf	??_Buzzer_Main
 19041  07E9  0820               	movf	??_Buzzer_Main,w
 19042  07EA  0022               	movlb	2	; select bank2
 19043  07EB  00A3               	movwf	(_Buz1^(0+256)+3)
 19044                           
 19045                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19046  07EC  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19047  07ED  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19048  07EE  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19049  07EF  082A               	movf	(_Buz1^(0+256)+10),w
 19050  07F0  01A6               	clrf	(_Buz1^(0+256)+6)
 19051  07F1  07A6               	addwf	(_Buz1^(0+256)+6),f
 19052                           
 19053                           ;Buzzer_B1.c: 62: } else {
 19054  07F2  0008               	return
 19055  07F3                     l100:	
 19056                           
 19057                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19058  07F3  10A0               	bcf	_Buz1^(0+256),1
 19059                           
 19060                           ;Buzzer_B1.c: 64: }
 19061                           ;Buzzer_B1.c: 65: } else {
 19062  07F4  0008               	return
 19063  07F5                     l97:	
 19064                           
 19065                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19066  07F5  16A0               	bsf	_Buz1^(0+256),5
 19067                           
 19068                           ;Buzzer_B1.c: 68: RB3 = 1;
 19069  07F6  0020               	movlb	0	; select bank0
 19070  07F7  158D               	bsf	13,3	;volatile
 19071                           
 19072                           ;Buzzer_B1.c: 69: }
 19073                           ;Buzzer_B1.c: 70: } else {
 19074  07F8  0008               	return
 19075  07F9                     l96:	
 19076                           
 19077                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19078  07F9  12A0               	bcf	_Buz1^(0+256),5
 19079                           
 19080                           ;Buzzer_B1.c: 73: RB3 = 0;
 19081  07FA  0020               	movlb	0	; select bank0
 19082  07FB  118D               	bcf	13,3	;volatile
 19083                           
 19084                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19085  07FC  3001               	movlw	1
 19086  07FD  0022               	movlb	2	; select bank2
 19087  07FE  02A3               	subwf	(_Buz1^(0+256)+3),f
 19088  07FF  0008               	return
 19089  0800                     __end_of_Buzzer_Main:	
 19090                           
 19091                           	psect	text137
 19092  1B3D                     __ptext137:	
 19093 ;; *************** function _Buzzer_Initialization *****************
 19094 ;; Defined at:
 19095 ;;		line 11 in file "../src/Buzzer_B1.c"
 19096 ;; Parameters:    Size  Location     Type
 19097 ;;		None
 19098 ;; Auto vars:     Size  Location     Type
 19099 ;;		None
 19100 ;; Return value:  Size  Location     Type
 19101 ;;		None               void
 19102 ;; Registers used:
 19103 ;;		None
 19104 ;; Tracked objects:
 19105 ;;		On entry : 0/0
 19106 ;;		On exit  : 0/0
 19107 ;;		Unchanged: 0/0
 19108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19113 ;;Total ram usage:        0 bytes
 19114 ;; Hardware stack levels used:    1
 19115 ;; Hardware stack levels required when called:    5
 19116 ;; This function calls:
 19117 ;;		Nothing
 19118 ;; This function is called by:
 19119 ;;		_main
 19120 ;; This function uses a non-reentrant model
 19121 ;;
 19122                           
 19123                           
 19124                           ;psect for function _Buzzer_Initialization
 19125  1B3D                     _Buzzer_Initialization:	
 19126                           
 19127                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19128                           
 19129                           ;incstack = 0
 19130                           ; Regs used in _Buzzer_Initialization: []
 19131  1B3D  0022               	movlb	2	; select bank2
 19132  1B3E  1420               	bsf	_Buz1^(0+256),0
 19133  1B3F  0008               	return
 19134  1B40                     __end_of_Buzzer_Initialization:	
 19135                           
 19136                           	psect	intentry
 19137  0004                     __pintentry:	
 19138 ;; *************** function _ISR *****************
 19139 ;; Defined at:
 19140 ;;		line 116 in file "../src/MCU_B1.c"
 19141 ;; Parameters:    Size  Location     Type
 19142 ;;		None
 19143 ;; Auto vars:     Size  Location     Type
 19144 ;;		None
 19145 ;; Return value:  Size  Location     Type
 19146 ;;		None               void
 19147 ;; Registers used:
 19148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19149 ;; Tracked objects:
 19150 ;;		On entry : 0/0
 19151 ;;		On exit  : 0/0
 19152 ;;		Unchanged: 0/0
 19153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19158 ;;Total ram usage:        1 bytes
 19159 ;; Hardware stack levels used:    1
 19160 ;; Hardware stack levels required when called:    4
 19161 ;; This function calls:
 19162 ;;		_IOC_ISR
 19163 ;;		_TMR1_ISR
 19164 ;; This function is called by:
 19165 ;;		Interrupt level 1
 19166 ;; This function uses a non-reentrant model
 19167 ;;
 19168                           
 19169  0004                     _ISR:	
 19170                           
 19171                           ;incstack = 0
 19172                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19173  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19174  0005  3180               	pagesel	$
 19175  0006  0020               	movlb	0	; select bank0
 19176  0007  087F               	movf	127,w
 19177  0008  00FC               	movwf	??_ISR
 19178                           
 19179                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19180  0009  0021               	movlb	1	; select bank1
 19181  000A  1C11               	btfss	17,0	;volatile
 19182  000B  2812               	goto	i1l8210
 19183  000C  0020               	movlb	0	; select bank0
 19184  000D  1C11               	btfss	17,0	;volatile
 19185  000E  2812               	goto	i1l8210
 19186                           
 19187                           ;MCU_B1.c: 126: TMR1_ISR();
 19188  000F  319F  27C2  3180   	fcall	_TMR1_ISR
 19189  0012                     i1l8210:	
 19190                           
 19191                           ;MCU_B1.c: 127: }
 19192                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19193  0012  198B               	btfsc	11,3	;volatile
 19194  0013  1C0B               	btfss	11,0	;volatile
 19195  0014  281A               	goto	i1l1206
 19196  0015  0027               	movlb	7	; select bank7
 19197  0016  1D16               	btfss	22,2	;volatile
 19198  0017  281A               	goto	i1l1206
 19199                           
 19200                           ;MCU_B1.c: 139: IOC_ISR();
 19201  0018  319B  23B5         	fcall	_IOC_ISR
 19202  001A                     i1l1206:	
 19203                           ;MCU_B1.c: 140: }
 19204                           ;MCU_B1.c: 148: return;
 19205                           
 19206  001A  087C               	movf	??_ISR,w
 19207  001B  0020               	movlb	0	; select bank0
 19208  001C  00FF               	movwf	127
 19209  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19210  001E  0009               	retfie
 19211  001F                     __end_of_ISR:	
 19212                           
 19213                           	psect	text139
 19214  1FC2                     __ptext139:	
 19215 ;; *************** function _TMR1_ISR *****************
 19216 ;; Defined at:
 19217 ;;		line 236 in file "../src/MCU_B1.c"
 19218 ;; Parameters:    Size  Location     Type
 19219 ;;		None
 19220 ;; Auto vars:     Size  Location     Type
 19221 ;;		None
 19222 ;; Return value:  Size  Location     Type
 19223 ;;		None               void
 19224 ;; Registers used:
 19225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19226 ;; Tracked objects:
 19227 ;;		On entry : 0/0
 19228 ;;		On exit  : 0/0
 19229 ;;		Unchanged: 0/0
 19230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19235 ;;Total ram usage:        0 bytes
 19236 ;; Hardware stack levels used:    1
 19237 ;; Hardware stack levels required when called:    1
 19238 ;; This function calls:
 19239 ;;		_DimmerLights_TMR_1
 19240 ;; This function is called by:
 19241 ;;		_ISR
 19242 ;; This function uses a non-reentrant model
 19243 ;;
 19244                           
 19245                           
 19246                           ;psect for function _TMR1_ISR
 19247  1FC2                     _TMR1_ISR:	
 19248                           
 19249                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19250                           
 19251                           ;incstack = 0
 19252                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19253  1FC2  3189  2158  319F   	fcall	_DimmerLights_TMR_1
 19254                           
 19255                           ;MCU_B1.c: 268: Timer1.Count++;
 19256  1FC5  3001               	movlw	1
 19257  1FC6  0022               	movlb	2	; select bank2
 19258  1FC7  07B2               	addwf	(_Timer1^(0+256)+1),f
 19259  1FC8  3000               	movlw	0
 19260  1FC9  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19261                           
 19262                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19263  1FCA  3001               	movlw	1
 19264  1FCB  3E31               	addlw	_Timer1& (0+255)
 19265  1FCC  0086               	movwf	6
 19266  1FCD  3001               	movlw	1	; select bank2/3
 19267  1FCE  0087               	movwf	7
 19268  1FCF  3F40               	moviw [0]fsr1
 19269  1FD0  3AC8               	xorlw	200
 19270  1FD1  1D03               	skipz
 19271  1FD2  2FD5               	goto	u771_25
 19272  1FD3  3F41               	moviw [1]fsr1
 19273  1FD4  3A00               	xorlw	0
 19274  1FD5                     u771_25:	
 19275  1FD5  1D03               	skipz
 19276  1FD6  2FDA               	goto	i1l7714
 19277                           
 19278                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19279  1FD7  01B2               	clrf	(_Timer1^(0+256)+1)
 19280  1FD8  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19281                           
 19282                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19283  1FD9  1431               	bsf	_Timer1^(0+256),0
 19284  1FDA                     i1l7714:	
 19285                           
 19286                           ;MCU_B1.c: 272: }
 19287                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19288  1FDA  30FA               	movlw	250
 19289  1FDB  0020               	movlb	0	; select bank0
 19290  1FDC  0097               	movwf	23	;volatile
 19291                           
 19292                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19293  1FDD  3038               	movlw	56
 19294  1FDE  0096               	movwf	22	;volatile
 19295                           
 19296                           ;MCU_B1.c: 276: TMR1IF = 0;
 19297  1FDF  1011               	bcf	17,0	;volatile
 19298  1FE0  0008               	return
 19299  1FE1                     __end_of_TMR1_ISR:	
 19300                           
 19301                           	psect	text140
 19302  0958                     __ptext140:	
 19303 ;; *************** function _DimmerLights_TMR_1 *****************
 19304 ;; Defined at:
 19305 ;;		line 1377 in file "../src/Dimmer_B1.c"
 19306 ;; Parameters:    Size  Location     Type
 19307 ;;		None
 19308 ;; Auto vars:     Size  Location     Type
 19309 ;;		None
 19310 ;; Return value:  Size  Location     Type
 19311 ;;		None               void
 19312 ;; Registers used:
 19313 ;;		wreg, status,2, status,0
 19314 ;; Tracked objects:
 19315 ;;		On entry : 0/0
 19316 ;;		On exit  : 0/0
 19317 ;;		Unchanged: 0/0
 19318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19323 ;;Total ram usage:        1 bytes
 19324 ;; Hardware stack levels used:    1
 19325 ;; This function calls:
 19326 ;;		Nothing
 19327 ;; This function is called by:
 19328 ;;		_TMR1_ISR
 19329 ;; This function uses a non-reentrant model
 19330 ;;
 19331                           
 19332                           
 19333                           ;psect for function _DimmerLights_TMR_1
 19334  0958                     _DimmerLights_TMR_1:	
 19335                           
 19336                           ;Dimmer_B1.c: 1379: if (DimmerIntr1.Start == 1) {
 19337                           
 19338                           ;incstack = 0
 19339                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19340  0958  0021               	movlb	1	; select bank1
 19341  0959  1D3B               	btfss	_DimmerIntr1^(0+128),2
 19342  095A  297D               	goto	i1l841
 19343                           
 19344                           ;Dimmer_B1.c: 1380: DimmerIntr1.Count++;
 19345  095B  3001               	movlw	1
 19346  095C  00F0               	movwf	??_DimmerLights_TMR_1
 19347  095D  0870               	movf	??_DimmerLights_TMR_1,w
 19348  095E  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 19349                           
 19350                           ;Dimmer_B1.c: 1382: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19351  095F  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19352  0960  0646               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19353  0961  1D03               	skipz
 19354  0962  2965               	goto	i1l7142
 19355                           
 19356                           ;Dimmer_B1.c: 1383: DimmerIntr1.Count = 0;
 19357  0963  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19358                           
 19359                           ;Dimmer_B1.c: 1384: DimmerIntr1.Start = 0;
 19360  0964  113B               	bcf	_DimmerIntr1^(0+128),2
 19361  0965                     i1l7142:	
 19362                           
 19363                           ;Dimmer_B1.c: 1385: }
 19364                           ;Dimmer_B1.c: 1399: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19365  0965  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19366  0966  0643               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19367  0967  1903               	btfsc	3,2
 19368                           
 19369                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.ControlStatus == 1) {
 19370  0968  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19371  0969  296C               	goto	i1l7148
 19372                           
 19373                           ;Dimmer_B1.c: 1401: RB1 = 0;
 19374  096A  0020               	movlb	0	; select bank0
 19375  096B  108D               	bcf	13,1	;volatile
 19376  096C                     i1l7148:	
 19377                           
 19378                           ;Dimmer_B1.c: 1402: }
 19379                           ;Dimmer_B1.c: 1403: }
 19380                           ;Dimmer_B1.c: 1406: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19381  096C  0021               	movlb	1	; select bank1
 19382  096D  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19383  096E  0644               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19384  096F  1903               	btfsc	3,2
 19385                           
 19386                           ;Dimmer_B1.c: 1407: if (DimmerIntr1.ControlStatus == 1) {
 19387  0970  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19388  0971  2974               	goto	i1l7154
 19389                           
 19390                           ;Dimmer_B1.c: 1408: RB1 = 1;
 19391  0972  0020               	movlb	0	; select bank0
 19392  0973  148D               	bsf	13,1	;volatile
 19393  0974                     i1l7154:	
 19394                           
 19395                           ;Dimmer_B1.c: 1409: }
 19396                           ;Dimmer_B1.c: 1410: }
 19397                           ;Dimmer_B1.c: 1413: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19398  0974  0021               	movlb	1	; select bank1
 19399  0975  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19400  0976  0645               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19401  0977  1903               	btfsc	3,2
 19402                           
 19403                           ;Dimmer_B1.c: 1414: if (DimmerIntr1.ControlStatus == 1) {
 19404  0978  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19405  0979  298E               	goto	i1l849
 19406                           
 19407                           ;Dimmer_B1.c: 1415: RB1 = 0;
 19408  097A  0020               	movlb	0	; select bank0
 19409  097B  108D               	bcf	13,1	;volatile
 19410                           
 19411                           ;Dimmer_B1.c: 1416: }
 19412                           ;Dimmer_B1.c: 1419: }
 19413                           ;Dimmer_B1.c: 1421: } else {
 19414  097C  298E               	goto	i1l849
 19415  097D                     i1l841:	
 19416                           
 19417                           ;Dimmer_B1.c: 1422: if (DimmerIntr1.GO == 1) {
 19418  097D  1C3B               	btfss	_DimmerIntr1^(0+128),0
 19419  097E  298E               	goto	i1l849
 19420                           
 19421                           ;Dimmer_B1.c: 1423: DimmerIntr1.Count++;
 19422  097F  3001               	movlw	1
 19423  0980  00F0               	movwf	??_DimmerLights_TMR_1
 19424  0981  0870               	movf	??_DimmerLights_TMR_1,w
 19425  0982  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 19426                           
 19427                           ;Dimmer_B1.c: 1424: if (DimmerIntr1.Count == 8) {
 19428  0983  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19429  0984  3A08               	xorlw	8
 19430  0985  1D03               	skipz
 19431  0986  298E               	goto	i1l849
 19432                           
 19433                           ;Dimmer_B1.c: 1425: DimmerIntr1.Count = 0;
 19434  0987  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19435                           
 19436                           ;Dimmer_B1.c: 1426: DimmerIntr1.GO = 0;
 19437  0988  103B               	bcf	_DimmerIntr1^(0+128),0
 19438                           
 19439                           ;Dimmer_B1.c: 1427: DimmerIntr1.Start = 1;
 19440  0989  153B               	bsf	_DimmerIntr1^(0+128),2
 19441                           
 19442                           ;Dimmer_B1.c: 1429: if (DimmerIntr1.ControlStatus == 1) {
 19443  098A  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19444  098B  298E               	goto	i1l849
 19445                           
 19446                           ;Dimmer_B1.c: 1430: RB1 = 1;
 19447  098C  0020               	movlb	0	; select bank0
 19448  098D  148D               	bsf	13,1	;volatile
 19449  098E                     i1l849:	
 19450                           
 19451                           ;Dimmer_B1.c: 1431: }
 19452                           ;Dimmer_B1.c: 1432: }
 19453                           ;Dimmer_B1.c: 1433: }
 19454                           ;Dimmer_B1.c: 1434: }
 19455                           ;Dimmer_B1.c: 1436: if (DimmerIntr1.Tune == 1) {
 19456  098E  0021               	movlb	1	; select bank1
 19457  098F  1CBB               	btfss	_DimmerIntr1^(0+128),1
 19458  0990  0008               	return
 19459                           
 19460                           ;Dimmer_B1.c: 1437: DimmerIntr1.Tune = 0;
 19461  0991  10BB               	bcf	_DimmerIntr1^(0+128),1
 19462                           
 19463                           ;Dimmer_B1.c: 1438: DimmerIntr1.TuneTime++;
 19464  0992  3001               	movlw	1
 19465  0993  00F0               	movwf	??_DimmerLights_TMR_1
 19466  0994  0870               	movf	??_DimmerLights_TMR_1,w
 19467  0995  07BE               	addwf	(_DimmerIntr1^(0+128)+3),f
 19468                           
 19469                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19470  0996  083F               	movf	(_DimmerIntr1^(0+128)+4),w
 19471  0997  023E               	subwf	(_DimmerIntr1^(0+128)+3),w
 19472  0998  1C03               	skipc
 19473  0999  0008               	return
 19474                           
 19475                           ;Dimmer_B1.c: 1440: DimmerIntr1.TuneTime = 0;
 19476  099A  01BE               	clrf	(_DimmerIntr1^(0+128)+3)
 19477                           
 19478                           ;Dimmer_B1.c: 1441: DimmerIntr1.TuneGO = 1;
 19479  099B  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 19480                           
 19481                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.Dimming_Sw == 1) {
 19482  099C  1E3B               	btfss	_DimmerIntr1^(0+128),4
 19483  099D  29B4               	goto	i1l855
 19484                           
 19485                           ;Dimmer_B1.c: 1443: if (DimmerIntr1.Dimming_Status == 0) {
 19486  099E  1ABB               	btfsc	_DimmerIntr1^(0+128),5
 19487  099F  29AB               	goto	i1l7192
 19488                           
 19489                           ;Dimmer_B1.c: 1444: if (DimmerIntr1.DimmingValue < ((char)(65*0.6))) {
 19490  09A0  3027               	movlw	39
 19491  09A1  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19492  09A2  1803               	skipnc
 19493  09A3  29A9               	goto	i1l857
 19494                           
 19495                           ;Dimmer_B1.c: 1445: DimmerIntr1.DimmingValue++;
 19496  09A4  3001               	movlw	1
 19497  09A5  00F0               	movwf	??_DimmerLights_TMR_1
 19498  09A6  0870               	movf	??_DimmerLights_TMR_1,w
 19499  09A7  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 19500                           
 19501                           ;Dimmer_B1.c: 1446: } else {
 19502  09A8  0008               	return
 19503  09A9                     i1l857:	
 19504                           
 19505                           ;Dimmer_B1.c: 1447: DimmerIntr1.Dimming_Status = 1;
 19506  09A9  16BB               	bsf	_DimmerIntr1^(0+128),5
 19507                           
 19508                           ;Dimmer_B1.c: 1448: }
 19509                           ;Dimmer_B1.c: 1449: } else {
 19510  09AA  0008               	return
 19511  09AB                     i1l7192:	
 19512                           
 19513                           ;Dimmer_B1.c: 1450: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 19514  09AB  3007               	movlw	7
 19515  09AC  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19516  09AD  1C03               	skipc
 19517  09AE  29B2               	goto	i1l860
 19518                           
 19519                           ;Dimmer_B1.c: 1451: DimmerIntr1.DimmingValue--;
 19520  09AF  3001               	movlw	1
 19521  09B0  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 19522                           
 19523                           ;Dimmer_B1.c: 1452: } else {
 19524  09B1  0008               	return
 19525  09B2                     i1l860:	
 19526                           
 19527                           ;Dimmer_B1.c: 1453: DimmerIntr1.Dimming_Status = 0;
 19528  09B2  12BB               	bcf	_DimmerIntr1^(0+128),5
 19529                           
 19530                           ;Dimmer_B1.c: 1454: }
 19531                           ;Dimmer_B1.c: 1455: }
 19532                           ;Dimmer_B1.c: 1456: } else if (DimmerIntr1.Dimming_RF == 1) {
 19533  09B3  0008               	return
 19534  09B4                     i1l855:	
 19535  09B4  1F3B               	btfss	_DimmerIntr1^(0+128),6
 19536  09B5  0008               	return
 19537                           
 19538                           ;Dimmer_B1.c: 1457: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19539  09B6  0841               	movf	(_DimmerIntr1^(0+128)+6),w
 19540  09B7  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19541  09B8  1803               	skipnc
 19542  09B9  29BF               	goto	i1l7200
 19543                           
 19544                           ;Dimmer_B1.c: 1458: DimmerIntr1.DimmingValue++;
 19545  09BA  3001               	movlw	1
 19546  09BB  00F0               	movwf	??_DimmerLights_TMR_1
 19547  09BC  0870               	movf	??_DimmerLights_TMR_1,w
 19548  09BD  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 19549                           
 19550                           ;Dimmer_B1.c: 1459: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19551  09BE  0008               	return
 19552  09BF                     i1l7200:	
 19553  09BF  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 19554  09C0  0241               	subwf	(_DimmerIntr1^(0+128)+6),w
 19555  09C1  1803               	skipnc
 19556  09C2  29C6               	goto	i1l866
 19557                           
 19558                           ;Dimmer_B1.c: 1460: DimmerIntr1.DimmingValue--;
 19559  09C3  3001               	movlw	1
 19560  09C4  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 19561                           
 19562                           ;Dimmer_B1.c: 1461: } else {
 19563  09C5  0008               	return
 19564  09C6                     i1l866:	
 19565                           
 19566                           ;Dimmer_B1.c: 1462: DimmerIntr1.Dimming_RF = 0;
 19567  09C6  133B               	bcf	_DimmerIntr1^(0+128),6
 19568  09C7  0008               	return
 19569  09C8                     __end_of_DimmerLights_TMR_1:	
 19570                           
 19571                           	psect	text141
 19572  1BB5                     __ptext141:	
 19573 ;; *************** function _IOC_ISR *****************
 19574 ;; Defined at:
 19575 ;;		line 395 in file "../src/MCU_B1.c"
 19576 ;; Parameters:    Size  Location     Type
 19577 ;;		None
 19578 ;; Auto vars:     Size  Location     Type
 19579 ;;		None
 19580 ;; Return value:  Size  Location     Type
 19581 ;;		None               void
 19582 ;; Registers used:
 19583 ;;		wreg, status,2, status,0, pclath, cstack
 19584 ;; Tracked objects:
 19585 ;;		On entry : 0/0
 19586 ;;		On exit  : 0/0
 19587 ;;		Unchanged: 0/0
 19588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19593 ;;Total ram usage:        0 bytes
 19594 ;; Hardware stack levels used:    1
 19595 ;; Hardware stack levels required when called:    3
 19596 ;; This function calls:
 19597 ;;		_DimmerLights_IOC_1
 19598 ;; This function is called by:
 19599 ;;		_ISR
 19600 ;; This function uses a non-reentrant model
 19601 ;;
 19602                           
 19603                           
 19604                           ;psect for function _IOC_ISR
 19605  1BB5                     _IOC_ISR:	
 19606                           
 19607                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 19608                           
 19609                           ;incstack = 0
 19610                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19611  1BB5  0021               	movlb	1	; select bank1
 19612  1BB6  1C2E               	btfss	_myMain^(0+128),0
 19613  1BB7  2BBA               	goto	i1l7724
 19614                           
 19615                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 19616  1BB8  3192  224A         	fcall	_DimmerLights_IOC_1
 19617  1BBA                     i1l7724:	
 19618                           
 19619                           ;MCU_B1.c: 416: }
 19620                           ;MCU_B1.c: 418: IOCBF2 = 0;
 19621  1BBA  0027               	movlb	7	; select bank7
 19622  1BBB  1116               	bcf	22,2	;volatile
 19623                           
 19624                           ;MCU_B1.c: 419: IOCIF = 0;
 19625  1BBC  100B               	bcf	11,0	;volatile
 19626  1BBD  0008               	return
 19627  1BBE                     __end_of_IOC_ISR:	
 19628                           
 19629                           	psect	text142
 19630  124A                     __ptext142:	
 19631 ;; *************** function _DimmerLights_IOC_1 *****************
 19632 ;; Defined at:
 19633 ;;		line 1469 in file "../src/Dimmer_B1.c"
 19634 ;; Parameters:    Size  Location     Type
 19635 ;;		None
 19636 ;; Auto vars:     Size  Location     Type
 19637 ;;		None
 19638 ;; Return value:  Size  Location     Type
 19639 ;;		None               void
 19640 ;; Registers used:
 19641 ;;		wreg, status,2, status,0, pclath, cstack
 19642 ;; Tracked objects:
 19643 ;;		On entry : 0/0
 19644 ;;		On exit  : 0/0
 19645 ;;		Unchanged: 0/0
 19646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19649 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19650 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19651 ;;Total ram usage:        2 bytes
 19652 ;; Hardware stack levels used:    1
 19653 ;; Hardware stack levels required when called:    2
 19654 ;; This function calls:
 19655 ;;		_Division
 19656 ;; This function is called by:
 19657 ;;		_IOC_ISR
 19658 ;; This function uses a non-reentrant model
 19659 ;;
 19660                           
 19661                           
 19662                           ;psect for function _DimmerLights_IOC_1
 19663  124A                     _DimmerLights_IOC_1:	
 19664                           
 19665                           ;Dimmer_B1.c: 1483: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 19666                           
 19667                           ;incstack = 0
 19668                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19669  124A  0021               	movlb	1	; select bank1
 19670  124B  193B               	btfsc	_DimmerIntr1^(0+128),2
 19671  124C  0008               	return
 19672  124D  183B               	btfsc	_DimmerIntr1^(0+128),0
 19673  124E  0008               	return
 19674                           
 19675                           ;Dimmer_B1.c: 1484: if (RB2 != DimmerIntr1.Status) {
 19676  124F  0E3C               	swapf	(_DimmerIntr1^(0+128)+1),w
 19677  1250  0C89               	rrf	9,f
 19678  1251  3901               	andlw	1
 19679  1252  00FA               	movwf	??_DimmerLights_IOC_1
 19680  1253  3000               	movlw	0
 19681  1254  0020               	movlb	0	; select bank0
 19682  1255  190D               	btfsc	13,2	;volatile
 19683  1256  3001               	movlw	1
 19684  1257  067A               	xorwf	??_DimmerLights_IOC_1,w
 19685  1258  1903               	skipnz
 19686  1259  0008               	return
 19687                           
 19688                           ;Dimmer_B1.c: 1486: DimmerIntr1.Count = 0;
 19689  125A  0021               	movlb	1	; select bank1
 19690  125B  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19691                           
 19692                           ;Dimmer_B1.c: 1487: DimmerIntr1.GO = 1;
 19693  125C  143B               	bsf	_DimmerIntr1^(0+128),0
 19694                           
 19695                           ;Dimmer_B1.c: 1489: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 19696  125D  1E3B               	btfss	_DimmerIntr1^(0+128),4
 19697  125E  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 19698                           
 19699                           ;Dimmer_B1.c: 1490: DimmerIntr1.Tune = 1;
 19700  125F  14BB               	bsf	_DimmerIntr1^(0+128),1
 19701                           
 19702                           ;Dimmer_B1.c: 1491: }
 19703                           ;Dimmer_B1.c: 1493: if (DimmerIntr1.TuneGO == 1) {
 19704  1260  1F3C               	btfss	(_DimmerIntr1^(0+128)+1),6
 19705  1261  2A7F               	goto	i1l7228
 19706                           
 19707                           ;Dimmer_B1.c: 1494: DimmerIntr1.TuneGO = 0;
 19708  1262  133C               	bcf	(_DimmerIntr1^(0+128)+1),6
 19709                           
 19710                           ;Dimmer_B1.c: 1497: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 19711  1263  3002               	movlw	2
 19712  1264  00FA               	movwf	??_DimmerLights_IOC_1
 19713  1265  087A               	movf	??_DimmerLights_IOC_1,w
 19714  1266  00F5               	movwf	Division@num
 19715  1267  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 19716  1268  319C  2496         	fcall	_Division
 19717  126A  00FB               	movwf	??_DimmerLights_IOC_1+1
 19718  126B  087B               	movf	??_DimmerLights_IOC_1+1,w
 19719  126C  0021               	movlb	1	; select bank1
 19720  126D  00C3               	movwf	(_DimmerIntr1^(0+128)+8)
 19721                           
 19722                           ;Dimmer_B1.c: 1498: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 19723  126E  0340               	decf	(_DimmerIntr1^(0+128)+5),w
 19724  126F  3AFF               	xorlw	255
 19725  1270  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 19726  1271  3E3C               	addlw	60
 19727  1272  00FA               	movwf	??_DimmerLights_IOC_1
 19728  1273  087A               	movf	??_DimmerLights_IOC_1,w
 19729  1274  00C4               	movwf	(_DimmerIntr1^(0+128)+9)
 19730                           
 19731                           ;Dimmer_B1.c: 1499: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 19732  1275  0844               	movf	(_DimmerIntr1^(0+128)+9),w
 19733  1276  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 19734  1277  00FA               	movwf	??_DimmerLights_IOC_1
 19735  1278  087A               	movf	??_DimmerLights_IOC_1,w
 19736  1279  00C5               	movwf	(_DimmerIntr1^(0+128)+10)
 19737                           
 19738                           ;Dimmer_B1.c: 1500: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 3;
 19739  127A  0845               	movf	(_DimmerIntr1^(0+128)+10),w
 19740  127B  3E03               	addlw	3
 19741  127C  00FA               	movwf	??_DimmerLights_IOC_1
 19742  127D  087A               	movf	??_DimmerLights_IOC_1,w
 19743  127E  00C6               	movwf	(_DimmerIntr1^(0+128)+11)
 19744  127F                     i1l7228:	
 19745                           
 19746                           ;Dimmer_B1.c: 1501: }
 19747                           ;Dimmer_B1.c: 1504: DimmerIntr1.Status = 0;
 19748  127F  12BC               	bcf	(_DimmerIntr1^(0+128)+1),5
 19749  1280  0008               	return
 19750  1281                     __end_of_DimmerLights_IOC_1:	
 19751                           
 19752                           	psect	text143
 19753  1C96                     __ptext143:	
 19754 ;; *************** function _Division *****************
 19755 ;; Defined at:
 19756 ;;		line 1372 in file "../src/Dimmer_B1.c"
 19757 ;; Parameters:    Size  Location     Type
 19758 ;;  value           1    wreg     unsigned char 
 19759 ;;  num             1    5[COMMON] unsigned char 
 19760 ;; Auto vars:     Size  Location     Type
 19761 ;;  value           1    8[COMMON] unsigned char 
 19762 ;;  result          1    9[COMMON] unsigned char 
 19763 ;; Return value:  Size  Location     Type
 19764 ;;                  1    wreg      unsigned char 
 19765 ;; Registers used:
 19766 ;;		wreg, status,2, status,0, pclath, cstack
 19767 ;; Tracked objects:
 19768 ;;		On entry : 0/0
 19769 ;;		On exit  : 0/0
 19770 ;;		Unchanged: 0/0
 19771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19772 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19775 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19776 ;;Total ram usage:        5 bytes
 19777 ;; Hardware stack levels used:    1
 19778 ;; Hardware stack levels required when called:    1
 19779 ;; This function calls:
 19780 ;;		___lbdiv
 19781 ;; This function is called by:
 19782 ;;		_DimmerLights_IOC_1
 19783 ;; This function uses a non-reentrant model
 19784 ;;
 19785                           
 19786                           
 19787                           ;psect for function _Division
 19788  1C96                     _Division:	
 19789                           
 19790                           ;incstack = 0
 19791                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19792                           ;Division@value stored from wreg
 19793  1C96  00F8               	movwf	Division@value
 19794                           
 19795                           ;Dimmer_B1.c: 1373: char result = (char) (value / num);
 19796  1C97  0875               	movf	Division@num,w
 19797  1C98  00F6               	movwf	??_Division
 19798  1C99  0876               	movf	??_Division,w
 19799  1C9A  00F0               	movwf	___lbdiv@divisor
 19800  1C9B  0878               	movf	Division@value,w
 19801  1C9C  3190  2046         	fcall	___lbdiv
 19802  1C9E  00F7               	movwf	??_Division+1
 19803  1C9F  0877               	movf	??_Division+1,w
 19804  1CA0  00F9               	movwf	Division@result
 19805                           
 19806                           ;Dimmer_B1.c: 1374: return result;
 19807  1CA1  0879               	movf	Division@result,w
 19808  1CA2  0008               	return
 19809  1CA3                     __end_of_Division:	
 19810                           
 19811                           	psect	text144
 19812  1046                     __ptext144:	
 19813 ;; *************** function ___lbdiv *****************
 19814 ;; Defined at:
 19815 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19816 ;; Parameters:    Size  Location     Type
 19817 ;;  dividend        1    wreg     unsigned char 
 19818 ;;  divisor         1    0[COMMON] unsigned char 
 19819 ;; Auto vars:     Size  Location     Type
 19820 ;;  dividend        1    2[COMMON] unsigned char 
 19821 ;;  quotient        1    4[COMMON] unsigned char 
 19822 ;;  counter         1    3[COMMON] unsigned char 
 19823 ;; Return value:  Size  Location     Type
 19824 ;;                  1    wreg      unsigned char 
 19825 ;; Registers used:
 19826 ;;		wreg, status,2, status,0
 19827 ;; Tracked objects:
 19828 ;;		On entry : 0/0
 19829 ;;		On exit  : 0/0
 19830 ;;		Unchanged: 0/0
 19831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19832 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19833 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19835 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19836 ;;Total ram usage:        5 bytes
 19837 ;; Hardware stack levels used:    1
 19838 ;; This function calls:
 19839 ;;		Nothing
 19840 ;; This function is called by:
 19841 ;;		_Division
 19842 ;; This function uses a non-reentrant model
 19843 ;;
 19844                           
 19845                           
 19846                           ;psect for function ___lbdiv
 19847  1046                     ___lbdiv:	
 19848                           
 19849                           ;incstack = 0
 19850                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19851                           ;___lbdiv@dividend stored from wreg
 19852  1046  00F2               	movwf	___lbdiv@dividend
 19853  1047  01F4               	clrf	___lbdiv@quotient
 19854  1048  0870               	movf	___lbdiv@divisor,w
 19855  1049  1903               	btfsc	3,2
 19856  104A  2865               	goto	i1l6610
 19857  104B  01F3               	clrf	___lbdiv@counter
 19858  104C  0AF3               	incf	___lbdiv@counter,f
 19859  104D                     i1l6598:	
 19860  104D  1BF0               	btfsc	___lbdiv@divisor,7
 19861  104E  2856               	goto	i1l6600
 19862  104F  1003               	clrc
 19863  1050  0DF0               	rlf	___lbdiv@divisor,f
 19864  1051  3001               	movlw	1
 19865  1052  00F1               	movwf	??___lbdiv
 19866  1053  0871               	movf	??___lbdiv,w
 19867  1054  07F3               	addwf	___lbdiv@counter,f
 19868  1055  284D               	goto	i1l6598
 19869  1056                     i1l6600:	
 19870  1056  1003               	clrc
 19871  1057  0DF4               	rlf	___lbdiv@quotient,f
 19872  1058  0870               	movf	___lbdiv@divisor,w
 19873  1059  0272               	subwf	___lbdiv@dividend,w
 19874  105A  1C03               	skipc
 19875  105B  2860               	goto	L9
 19876  105C  0870               	movf	___lbdiv@divisor,w
 19877  105D  02F2               	subwf	___lbdiv@dividend,f
 19878  105E  1474               	bsf	___lbdiv@quotient,0
 19879  105F  1003               	clrc
 19880  1060                     L9:	
 19881  1060  0CF0               	rrf	___lbdiv@divisor,f
 19882  1061  3001               	movlw	1
 19883  1062  02F3               	subwf	___lbdiv@counter,f
 19884  1063  1D03               	btfss	3,2
 19885  1064  2856               	goto	i1l6600
 19886  1065                     i1l6610:	
 19887  1065  0874               	movf	___lbdiv@quotient,w
 19888  1066  0008               	return
 19889  1067                     __end_of___lbdiv:	
 19890  007E                     btemp	set	126	;btemp
 19891  007E                     pic14e$flags	set	126
 19892  007E                     wtemp	set	126
 19893  007E                     wtemp0	set	126
 19894  0080                     wtemp1	set	128
 19895  0082                     wtemp2	set	130
 19896  0084                     wtemp3	set	132
 19897  0086                     wtemp4	set	134
 19898  0088                     wtemp5	set	136
 19899  007F                     wtemp6	set	127
 19900  007E                     ttemp	set	126
 19901  007E                     ttemp0	set	126
 19902  0081                     ttemp1	set	129
 19903  0084                     ttemp2	set	132
 19904  0087                     ttemp3	set	135
 19905  007F                     ttemp4	set	127
 19906  007E                     ltemp	set	126
 19907  007E                     ltemp0	set	126
 19908  0082                     ltemp1	set	130
 19909  0086                     ltemp2	set	134
 19910  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         222
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      69
    BANK2            80      0      79
    BANK3            80      0      47
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK3[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  174899
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5504
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5504
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4323
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4323
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1069
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1069
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   52119
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   52119
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   47712
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5053
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   42387
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12234
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   24601
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     197
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2210
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1100
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1100
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2043
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1858
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1728
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1518
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3747
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   57821
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   57512
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   32906
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1007
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     166
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4453
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     344
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   24213
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3717
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     374
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   32285
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   32285
                                             66 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5431
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5431
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3182
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1905
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     407
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     407
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     407
                                             10 COMMON     2     2      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     407
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      45       7       86.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     166      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     166      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Feb 11 11:46:48 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1ECD  
                          ___bmul@product 0022                 getMain_Lights_Count@count 0020  
                                      l86 1582                                        l96 07F9  
                                      l88 1596                                        l97 07F5  
                                      l98 07E3                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10AC                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 00CE  
                          setTemp_Main@AD 006C                       ___wmul@multiplicand 0022  
                    _getDimmerLights_Line 1BDA                    __end_of_setDelayOff_GO 0D37  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1795  
                    _setDimmerLights_Line 1D37                              ___ftadd@sign 004B  
                                     l100 07F3                                       l303 1ED9  
                                     l304 1EDB                                       l235 08C1  
                    _setDimmerLights_SwOn 11DF                                       l531 0951  
                                     l347 10D6                                       l757 1F65  
                                     l688 1CB0                                       l784 0778  
                                     _GIE 005F                                       _CRC 00C7  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0007                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CB  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0136                                       _Cmd 00C8  
            getDimmerLights_Status@lights 0022                                       _Sw1 01BE  
              ??_setDimmerIntr_Dimming_RF 0021                ??_setDimmerIntr_Dimming_Sw 0021  
         setDimmerIntr_Dimming_RF@command 0020                  __end_of_CC2500_WriteByte 1EE6  
                   _Buzzer_Initialization 1B3D                           __end_of_ADC_Set 1B96  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0023       __end_of_setDimmerIntr_ControlStatus 1E9C  
             _setDimmerIntr_ControlStatus 1E84                         ??_getSw_KeyStatus 0020  
                                    ?_ISR 0070                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1BBE                     _setDimmerLights_OnOff 06F3  
        setDimmerLights_DimmingRun@lights 0024                                Load_Main@i 0030  
                            ___ftdiv@sign 003D                                      l2120 04F0  
                                    l1243 145D                                      l2115 0550  
                                    l2119 049F                                      l2160 0AAA  
                                    l1257 1171                                      l2145 1CB7  
                                    l1267 0C1C                                      l1508 1ECC  
                                    l1444 13A0                                      l1621 01FF  
                                    l1631 01DB                                      l1623 008B  
                                    l2175 11DB                                      l1472 11A5  
                                    l1632 01D9                                      l1624 0087  
                                    l1625 0082                                      l1467 118E  
                                    l1468 11A9                                      l2188 0A39  
                         __end_of_IOC_Set 1BFB                                      l2473 1E4A  
                                    l1499 0628                                      l2493 0381  
                                    l2495 024D                                      l1783 0E8D  
                                    l7000 1D31                                      l1794 0E85  
                                    l2844 164F                                      l2677 1FAD  
                                    l1789 0E00                                      l2838 1638  
                                    l7024 12A8                                      l7016 128A  
                                    l7018 1296                            _Load_Main$3948 002B  
                                    l2867 0428                                      l7028 12B1  
                                    l7300 1011                                      l7302 1014  
                                    l6256 10E7                                      l6258 10F2  
                                    l7306 1019                                      l8300 163D  
                   _setDimmerLights_SwOff 12B8                                      l8302 1645  
                                    l7078 1DC8                                      l8320 14B2  
                                    l8400 1D64                                      l9112 1300  
                                    l9200 0896                                      l8500 0D4E  
                                    l9132 1D4D                                      l9220 08CA  
                                    l8326 14BD                                      l8430 03B1  
                                    l9126 131F                                      l9118 1309  
                                    l9214 08A8                                      l7542 1E4F  
                                    l8352 14F4                                      l8344 14E3  
                                    l8336 14C5                                      l8440 03C7  
                                    l8520 0DA5                                      l8600 0C3D  
                                    l9312 1E67                                      l9136 1D54  
                                    l7640 1FA7                                      l9232 08DD  
                                    l9224 08D0                                      l8338 14D1  
                                    l8290 1615                                      l8418 1072  
                                    l8434 03B8                                      l8506 0D64  
                                    l9082 1189                                      l9138 1D59  
                                    l9250 0825                                      l9226 08D4  
                                    l9218 08C7                                      l9170 09DE  
                                    l7546 1E55                                      l8348 14EC  
                                    l8292 161F                                      l8460 03FE  
                                    l8452 03E1                                      l8620 0C7B  
                                    l9092 11A0                                      l9084 1192  
                                    l9252 0828                                      l9228 08D7  
                                    l9172 09E5                                      l9164 09C9  
                                    l8294 1624                                      l8286 160E  
                                    l8470 041A                                      l8462 0403  
                                    l8542 0EA8                                      l8630 0C94  
                                    l9334 073A                                      l9342 0758  
                                    l6926 1D20                                      l9174 0A00  
                                    l9182 0A2A                                      l7830 0AEA  
                                    l7822 0ACB                                      l8480 044C  
                                    l8472 0424                                      l8464 0407  
                                    l8528 0DBE                                      l8560 0EF9  
                                    l9336 0751                                      l9272 0840  
                                    l9256 082E                                      l9176 0A22  
                                    l9504 0A86                                      l8490 0467  
                                    l8458 03F4                                      l8634 0CA2  
                                    l8626 0C88                                      l8618 0C6D  
                                    l9370 07B3                                      l9434 1159  
                                    l9274 0859                                      l9194 088D  
                                    l9178 0A26                                      l7850 0B19  
                                    l7834 0AF2                                      l8476 043A  
                                    l8572 0F15                                      l8564 0F01  
                                    l8548 0EBE                                      l8628 0C91  
                                    l8396 1D5E                                      l8732 0D2D  
                                    l9356 0787                                      l9196 0890  
                   _myMain_Initialization 1DDD                                      l9542 134E  
                                    l8718 0CE9                                      l9622 1CFE  
                                    l8576 0F1D                                      l9544 135D  
                                    l9376 1514                                      l8728 0D19  
                                    l9560 17BD                                      l9640 0BBA  
                                    l8832 1F2C                                      l8920 0B35  
                                    l9800 0549                                      l9712 0E5D  
                                    l8682 1206                                      l9562 17C4  
                                    l9634 0BA5                                      l8826 1F23  
                                    l8850 1F97                                      l9722 0E72  
                                    l7866 1412                                      l8684 120B  
                                    l9572 17EC                                      l8828 1F26  
                                    l8860 1092                                      l8852 1F9D  
                                    l8924 0B3A                                      l8908 13D5  
                                    l9492 0A71                                      l9476 0A50  
                                    l9820 0237                                      l9724 0E74  
                                    l9574 17F3                                      l8862 1095  
                                    l8942 10B6                                      l8934 0B8A  
                                    l8696 12E6                                      l8768 177F  
                                    l9584 1BE2                                      l9648 0C15  
                                    l8944 10B9                                      l9488 0A68  
                                    l9680 0E12                                      _CFGS 0CAE  
                                    l8882 1EB7                                      l8866 109B  
                                    l8970 1488                                      l9674 0E03  
                                    l9682 0E15                                      l9908 07CD  
                                    l8980 1498                                      l8972 148B  
                                    l8948 10BF                                      l9772 04FF  
                                    l9860 02F5                                      l9836 0280  
                                    l8886 1EC6                                      l8982 149B  
                                    l9758 04EB                                      l9846 02B5  
                                    l9870 0329                                      l9944 1F67  
                                    l8976 1491                              __CFG_WDTE$ON 0000  
                                    l8986 14A1                                      l9786 0531  
                                    l9964 06AB                                      l9990 143C  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u5415 10DC  
                                    u6155 1E3D                                      u6505 12A9  
                                    u9015 03F5                                      u6465 128D  
                                    u9045 0408                                      u6485 1297  
                                    u6495 12A1                                      u9145 0D76  
                                    u9305 0F24                                      u9225 0ECA  
                                    u9075 041B                                      u9155 0D86  
                                    u9235 0EDA                                      u9165 0DA6  
                                    u9405 0C89                                      u8615 161A  
                                    u9175 0DB5                                      u9255 0F02  
                                    u7575 1FAE                                      u9600 173A  
                                    u9185 0DBF                                      u9265 0F08  
                                    u9345 0C44                                      u7585 1FB3  
                                    u8635 1633                                      u9435 1E13  
                                    u9605 1738                                      u7925 0B09  
                                    u8735 14C8                                      u8655 1640  
                                    u9295 0F1E                                      u9375 0C6E  
                                    u8755 14D2                                      u7875 0ADA  
                                    u8765 14DC                                      u8685 1656  
                                    u9565 0CF5                                      u8775 14E4  
                                    u7975 1406                                      _LWLO 0CAD  
                                    u8985 03E2                                      _RSSI 013A  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1F4F                _setDimmerLights_DimmingRun 1F34  
                                    _Buz1 0120                                      _Load 013E  
                                    _Temp 00D1                                      _main 15AA  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0958  
                         __end_of_RF_Main 1B49                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1C7E  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0B9E  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2255 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1E6E  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1E58                    _getDimmerLights_Status 1CD1  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 1B5F  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 0138  
                                   l10100 00E0                                     l10132 0172  
                                   l10140 019B                                     l10060 0069  
                                   l10028 1380                                     l10222 0572  
                                   l10126 0163                                     l10240 05B9  
                                   l10232 0591                                     l10136 018F  
                                   l10242 0594                                     l10146 01AB  
                                   l10260 05D6                                     l10244 05C1  
                                   l10228 0582                                     l10156 01C1  
                                   l10262 0603                                     l10270 061E  
                                   l10094 00AE                                     l10078 008A  
                                   l10342 15D9                                     l10264 060D  
                                   l10192 01EE                                     l10258 05FB  
                                   l10338 15CE                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0065  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 00DF  
                         __end_of___awdiv 14FB                           __end_of___lbdiv 1067  
                         __end_of___ftadd 047F                           __end_of___ftdiv 0DE0  
                         __end_of___ftneg 1BC7                                     u11035 04C3  
                         __end_of___ftmul 0F45                                     u11065 0520  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                                   u11505 1398                                     u11275 07C3  
                         __end_of___fttol 0CAB                                     u11455 1454  
                                   u11645 00AC                                     u10925 0E46  
                                   u11910 0601                                     u11655 00DE  
                                   u11745 01A2                                     u11665 0122  
                                   u10945 0E64                                     u11915 05DF  
                                   u11880 05BF                                     u11885 059D  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 12B8  
                                   i1l841 097D                                     i1l860 09B2  
                                   i1l855 09B4                                     i1l857 09A9  
                                   i1l849 098E                                     i1l866 09C6  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1E43                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 1730   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 16CB                                     _Light 0139  
                        __end_of_TMR1_ISR 1FE1                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C72  
                                   _getAD 1006                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 0812  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1BF0                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1D7F                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                       _getAll_Sw_KeyStatus 1CF3  
                      _setRF_DimmerLights 1730                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1CA3                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 1605                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 1B63            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 0554                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1CC1  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 09C8                            _setMemory_Data 1C4E  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0720        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 14FB                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BB  
                _getMain_All_LightsStatus 1BD0                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1E04                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08E9  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1BAD  
                               ??_WDT_Set 0020                          __end_of___awtoft 1089  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1666  
                _getMain_All_Error_Status 1178                                    _IOCBF2 1CB2  
                                  i1l1206 001A                                    i1l7200 09BF  
                                  i1l7142 0965                                    i1l6600 1056  
                                  i1l6610 1065                                    i1l7154 0974  
                                  i1l8210 0012                                    i1l7228 127F  
                                  i1l7148 096C                                    i1l7192 09AB  
                                  i1l7714 1FDA                                    i1l7724 1BBA  
                                  i1l6598 104D                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    u771_25 1FD5  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1F00                                    _WDTCON 0097  
                      DelayTime_1us@count 0020                      Exception_Main@i_3588 0033  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1E2E                                    _Dimmer 012C  
                                  _DlySw1 0166             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1D5B                __end_of_Mcu_Initialization 1D91  
                     __end_of_Buzzer_Main 0800                                    _Memory 0220  
                                  _Timer1 0131                                    ___bmul 1D5B  
                  __end_of_Exception_Main 0629                      Exception_Main@lights 0035  
                                  ___wmul 1FA4                                 ??___awdiv 0024  
                               ??___lbdiv 0071                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 013D                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1DCA  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1DB7                                    _s_data 00D0  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 12F1  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1C5A                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 1551  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 1B43          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1EB4          __end_of_setDimmerIntr_Dimming_Sw 1E84  
                   ___ftmul@f3_as_product 0039                 _setDimmerLights_DimmingOn 10F7  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1DDD               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 0037                     __end_of_SwPointSelect 1C96  
             __size_of_DimmerLights_TMR_1 0070              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 0067                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1E43               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0022                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5346 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1026  
                           __end_of_getAD 1026                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 1B57  
                         _getSw_KeyStatus 1D26                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1BE5  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1C2A                __end_of_set_TimeoutCleared 1B7C  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1C1E                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1B49                        ??_CC2500_WriteByte 0020  
                               ?_Division 0075                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 07B6                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 1B4F  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B4F                             ??_Switch_Main 0032  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00CA  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0020  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 15AA                            _getDelayOff_GO 1CE2  
                     _CC2500_WriteCommand 1F1A                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 1366             ??_DimmerLights_Initialization 0063  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070                                _getLoad_AD 0AAC  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1B9D  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1B8F                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 13E2        __end_of_DimmerLights_SelectPointer 1C1E  
              _DimmerLights_SelectPointer 1C12                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 1C06                        _setRFSW_AdjControl 0B1E  
                  __end_of_setProductData 1C2A             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1BB5                                   _IOC_Set 1BF0  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 1422                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1EE6                    __size_of_CC2500_RxData 006B  
                  __size_of_CC2500_TxData 006C                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1B46  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0076                                   _WDT_Set 1C72  
         __end_of_setControl_Lights_Table 0A3A                           setRF_Main@error 00DE  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 1551  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 1C8A                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 0018  
       __size_of_setDimmerIntr_Dimming_Sw 0016                         __end_of_getBuz_GO 1D15  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1CF3            __end_of_getDimmerLights_Status 1CE2  
                       __end_of_getRxData 0AAC                   __end_of_getSw_KeyStatus 1D37  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0065                            ??_setTemp_Main 0065  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 14A7                                   ___lbdiv 1046  
                                 ___ftadd 0389                                   ___ftdiv 0D37  
                                 ___ftneg 1BBE                           __size_of___wmul 001E  
                                 ___ftmul 0E91                                   ___fttol 0C24  
                     __end_of_Switch_Main 1B9D                                   ___lwdiv 1281  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1D15                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 1366                                   __ptext2 1DDD  
                                 __ptext3 13E2                                   __ptext4 0AAC  
                                 __ptext5 1006                                   __ptext6 0800  
                                 __ptext7 0002                                   __ptext8 1B4C  
                                 __ptext9 0DE0                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1463                 __end_of_Flash_Memory_Read 1F00  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 047F  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1B53  
                       _DimmerLights_Main 1F4F            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1B82                __end_of_CC2500_ClearRXFIFO 1B6B  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1B6F  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00E3                            _LedPointSelect 1C42  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 1C06                                   clrloop0 1001  
          __size_of_Switch_Initialization 0004             __end_of_Switch_Initialization 1B77  
                    end_of_initialization 004F                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 111F                             _DelayTime_1us 10D1  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 1178  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 1B82  
              __end_of_setRF_TransceiveGO 1DB7                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0070                      Flash_Memory_Read@ret 0023  
                                 initloop 1B83                                _setSw_Main 0205  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 002D  
                       _CC2500_ReadStatus 10AC                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1D6D                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0812  
                           _CC2500_TxData 087D                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0B9E                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1EB4  
                     _Flash_Memory_Unlock 1BC7                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F6B                        _Mcu_Initialization 1D7F  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1B67  
                    __end_of_my_MainTimer 13A2                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1C4E  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002D  
        setDimmerIntr_DimmingValue@lights 0064          getDimmerIntr_DimmingValue@lights 0021  
               __end_of_CC2500_InitSetREG 1149                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 10D1  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 111F                          ??_Exception_Main 002D  
                          __end_of_IO_Set 1F1A                      _setRF_Initialization 1BFB  
                      _setMemory_LoopSave 1DCA                               _Switch_Main 1B96  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1D26                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1E19  
             ??_DimmerIntr_Initialization 0062                      ??_Mcu_Initialization 0021  
             __end_of_getAll_Sw_KeyStatus 1D04                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0020  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1D6D  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 0065  
                          __end_of___wmul 1FC2                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0021  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006B  
                          __end_of_setLED 132A                             __pbitbssBANK1 0720  
           __size_of_setDimmerLights_Line 0012             __size_of_setDimmerLights_SwOn 0035  
                          __end_of_setBuz 15AA                __end_of_DimmerLights_IOC_1 1281  
                    _CC2500_FrequencyCabr 1C7E                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 13A2  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 09C8  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1BA5  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 2000  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 16CB  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1666  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1B77         __end_of_setDimmerIntr_MaxmumValue 1C36  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 016B                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0040  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1B4C                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00CC  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0030                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1BDA                                 _Tx_Length 00CF  
                             __pdataBANK4 0245                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 11AB  
                        _CC2500_SIDLEMode 1B6F                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1D91                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00DB  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 132A                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 01C7  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1F87                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00E3  
                          getRxData@error 00DC               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1B63                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0031                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1D49  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002A  
                  _setTemp_Initialization 1B3C                                 _getBuz_GO 1D04  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 06F3  
             _Flash_Memory_Initialization 0629                                  ?___awdiv 0020  
                               __ptext100 14FB                                 __ptext101 0F45  
                                ?___lbdiv 0070                                 __ptext110 1178  
                               __ptext102 1DA4                                 __ptext111 1B88  
                               __ptext103 1730                                 __ptext120 0D37  
                               __ptext112 1B3B                                 __ptext104 1D37  
                               __ptext121 0389                                 __ptext113 132A  
                               __ptext105 1C2A                                 __ptext130 12B8  
                               __ptext122 1067                                 __ptext114 1D91  
                               __ptext106 1E6E                                 __ptext131 1CD1  
                               __ptext123 1605                                 __ptext115 16CB  
                               __ptext107 1CA3                                 __ptext140 0958  
                               __ptext132 1C12                                 __ptext124 1B53  
                               __ptext116 1666                                 __ptext108 1E58  
                               __ptext141 1BB5                                 __ptext133 1B4F  
                               __ptext125 08E9                                 __ptext117 0C24  
                               __ptext109 1B9D                                  ?___ftadd 0041  
                               __ptext142 124A                                 __ptext134 1B7C  
                               __ptext126 1C1E                                 __ptext118 1BBE  
                               __ptext143 1C96                                 __ptext135 1C06  
                               __ptext127 11DF                                 __ptext119 0E91  
                               __ptext144 1046                                 __ptext136 07B6  
                               __ptext128 1551                                 __ptext137 1B3D  
                               __ptext129 14A7                                 __ptext139 1FC2  
                               _getRxData 0A3A                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 13E2  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1B40  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1E58                       __size_of_setSw_Main 0184  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1CB2  
            ??_setDimmerIntr_DimmingValue 0063                _getDimmerIntr_DimmingValue 1CA3  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00C3  
                               _r_address 013C             __end_of_setDimmerLights_OnOff 07B6  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 12F1              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1DF0                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                             _SwPointSelect 1C8A  
                     __end_of_setLED_Main 124A                          ??_getDelayOff_GO 0022  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1B4C  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 1B5B                           SwPointSelect@sw 0021  
                               clear_ram0 1000                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 1366  
                               _setTxData 0F45       __end_of_DimmerLights_Initialization 1B8F  
             _DimmerLights_Initialization 1B88                    _Flash_Memory_Main$3119 0028  
                      _CC2500_ClearRXFIFO 1B67                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1B6B                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1E04  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 1149                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1FC2  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1C66  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1DA4                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 1CC1                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1F34                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 0800                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B1                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00C9  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1C66  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11DF  
                   _DlyOff_Initialization 1B7C         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1C96  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1E9C               setDimmerLights_OnOff@lights 00DB  
                _setDimmerIntr_Dimming_Sw 1E6E                                  _Fosc_Set 1B5F  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 0B1E                        __end_of_getLoad_OK 1BA5  
                   _Switch_Initialization 1B73         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 1422  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1ECD                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 013B                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3576 0021  
           _getMain_All_Error_Status$3577 0023                  __end_of_getDimmer_LoadGO 1BAD  
                     _Load_Initialization 1B40          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 0DE0                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 1067  
                        ??_LedPointSelect 0020                                  ___ftpack 1605  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00DD  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1214  
              __end_of_setRF_DimmerLights 1795            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1BB5  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0027  
                                __ptext10 1B49                                  __ptext11 1B3C  
                                __ptext20 1E2E                                  __ptext12 1B96  
                                __ptext21 1B73                                  __ptext13 0205  
                                __ptext30 0B1E                                  __ptext22 1CC1  
                                __ptext14 1DF0                                  __ptext31 1F34  
                                __ptext23 1B46                                  __ptext15 10F7  
                                __ptext40 1B6F                                  __ptext32 1D15  
                                __ptext24 047F                                  __ptext16 1D26  
                                __ptext41 1463                                  __ptext33 1D04  
                                __ptext25 0A3A                                  __ptext17 1C8A  
                                __ptext50 1B63                                  __ptext42 111F  
                                __ptext34 1CB2                                  __ptext26 11AB  
                                __ptext18 1E43                                  __ptext51 1E04  
                                __ptext43 1FE1                                  __ptext35 087D  
                                __ptext27 1DCA                                  __ptext19 1B77  
                                __ptext60 1B5F                                  __ptext52 1ECD  
                                __ptext44 1089                                  __ptext36 0812  
                                __ptext28 09C8                                  __ptext61 1B8F  
                                __ptext53 1B43                                  __ptext45 1C7E  
                                __ptext37 10AC                                  __ptext29 13A2  
                                __ptext70 1F6B                                  __ptext62 0053  
                                __ptext54 1BFB                                  __ptext46 10D1  
                                __ptext38 1F87                                  __ptext71 1B5B  
                                __ptext63 1BE5                                  __ptext55 1D7F  
                                __ptext47 1B6B                                  __ptext39 1E19  
                                __ptext80 1C4E                                  __ptext72 1214  
                                __ptext64 1BAD                                  __ptext56 1C72  
                                __ptext48 1B67                                  __ptext81 1149  
                                __ptext73 1B57                                  __ptext65 1BA5  
                                __ptext57 1C66                                  __ptext49 1F1A  
                                __ptext90 1C42                                  __ptext82 1BC7  
                                __ptext74 1D6D                                  __ptext66 1DB7  
                                __ptext58 1F00                                  __ptext91 1E9C  
                                __ptext83 1EE6                                  __ptext75 1422  
                                __ptext67 1FA4                                  __ptext59 1BF0  
                                __ptext92 1C36                                  __ptext84 0554  
                                __ptext76 1CF3                                  __ptext68 1281  
                                __ptext93 1E84                                  __ptext85 1BDA  
                                __ptext77 0B9E                                  __ptext69 1B40  
                                __ptext94 0CAB                                  __ptext86 1F4F  
                                __ptext78 1C5A                                  __ptext95 1D5B  
                                __ptext87 1795                                  __ptext79 0629  
                                __ptext96 1EB4                                  __ptext88 06F3  
                                __ptext97 1BD0                                  __ptext89 12F1  
                                __ptext98 1CE2                                  __ptext99 1D49  
                                __product 0245                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1BE5  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1D49  
                      _DimmerLights_IOC_1 124A              __end_of_setDimmerLights_SwOn 1214  
                            ??_setSw_Main 002F                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1DF0  
      __size_of_DimmerIntr_Initialization 003C                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 0958                  __end_of_CC2500_SIDLEMode 1B73  
              setDimmerLights_Main@lights 00DC               __end_of_DelayOffPointSelect 1C12  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1F87  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1FE1  
                __end_of_setMemory_Modify 1DA4                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 0554                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00DB  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1E19  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6387 0022  
                                main@argc 00DF                                  main@argv 00E1  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6384 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 1463  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1C42                _setDimmerIntr_DimmingValue 1C36  
             __end_of_Flash_Memory_Modify 0C24              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 11AB               __end_of_Flash_Memory_Unlock 1BD0  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1089  
                      __end_of_setSw_Main 0389                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 1B3C   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1B3B                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1B43  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1C5A  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00CD  
                 __size_of_Exception_Main 00D5                             Division@value 0078  
         __end_of_DelayOff_Initialization 1B53                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B57                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0CAB  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0072  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 10F7                   __end_of_CC2500_ReadByte 1FA4  
            __end_of_setSw_Initialization 1CD1                           _Timeout_Counter 1E2E  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 1CB2          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 1B5B            __end_of_setTemp_Initialization 1B3D  
                             Division@num 0075                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 1B46                     __end_of_CC2500_RxData 087D  
                   __end_of_CC2500_TxData 08E9                     _setLoad_AH_AL_Restore 1F6B  
                 __end_of_CC2500_PowerRST 14A7  
