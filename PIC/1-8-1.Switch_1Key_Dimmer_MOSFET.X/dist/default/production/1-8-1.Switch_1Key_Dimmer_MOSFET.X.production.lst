

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Mar 24 08:08:14 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	intentry,global,class=CODE,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,inline,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,delta=2
   172                           	dabs	1,0x7E,2
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  0007                     	;# 
   181  0008                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  0010                     	;# 
   189  0011                     	;# 
   190  0012                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  0116                     	;# 
   220  0117                     	;# 
   221  011D                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0191                     	;# 
   226  0191                     	;# 
   227  0192                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0197                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020D                     	;# 
   246  0210                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0291                     	;# 
   263  0291                     	;# 
   264  0292                     	;# 
   265  0293                     	;# 
   266  0298                     	;# 
   267  0298                     	;# 
   268  0299                     	;# 
   269  029A                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0015                     	;# 
   303  0016                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001C                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0090                     	;# 
   315  0091                     	;# 
   316  0092                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  010C                     	;# 
   328  010D                     	;# 
   329  010E                     	;# 
   330  0116                     	;# 
   331  0117                     	;# 
   332  011D                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0194                     	;# 
   342  0195                     	;# 
   343  0196                     	;# 
   344  0197                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019C                     	;# 
   352  019C                     	;# 
   353  019D                     	;# 
   354  019E                     	;# 
   355  019F                     	;# 
   356  020D                     	;# 
   357  0210                     	;# 
   358  0211                     	;# 
   359  0211                     	;# 
   360  0212                     	;# 
   361  0212                     	;# 
   362  0213                     	;# 
   363  0213                     	;# 
   364  0214                     	;# 
   365  0214                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0216                     	;# 
   370  0216                     	;# 
   371  0217                     	;# 
   372  0217                     	;# 
   373  0291                     	;# 
   374  0291                     	;# 
   375  0292                     	;# 
   376  0293                     	;# 
   377  0298                     	;# 
   378  0298                     	;# 
   379  0299                     	;# 
   380  029A                     	;# 
   381  0394                     	;# 
   382  0395                     	;# 
   383  0396                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000D                     	;# 
   409  000E                     	;# 
   410  0010                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0016                     	;# 
   416  0017                     	;# 
   417  0018                     	;# 
   418  0019                     	;# 
   419  001A                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0090                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  0116                     	;# 
   442  0117                     	;# 
   443  011D                     	;# 
   444  018C                     	;# 
   445  018D                     	;# 
   446  018E                     	;# 
   447  0191                     	;# 
   448  0191                     	;# 
   449  0192                     	;# 
   450  0193                     	;# 
   451  0193                     	;# 
   452  0194                     	;# 
   453  0195                     	;# 
   454  0196                     	;# 
   455  0197                     	;# 
   456  0199                     	;# 
   457  019A                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019E                     	;# 
   466  019F                     	;# 
   467  020D                     	;# 
   468  0210                     	;# 
   469  0211                     	;# 
   470  0211                     	;# 
   471  0212                     	;# 
   472  0212                     	;# 
   473  0213                     	;# 
   474  0213                     	;# 
   475  0214                     	;# 
   476  0214                     	;# 
   477  0215                     	;# 
   478  0215                     	;# 
   479  0215                     	;# 
   480  0216                     	;# 
   481  0216                     	;# 
   482  0217                     	;# 
   483  0217                     	;# 
   484  0291                     	;# 
   485  0291                     	;# 
   486  0292                     	;# 
   487  0293                     	;# 
   488  0298                     	;# 
   489  0298                     	;# 
   490  0299                     	;# 
   491  029A                     	;# 
   492  0394                     	;# 
   493  0395                     	;# 
   494  0396                     	;# 
   495  0FE4                     	;# 
   496  0FE5                     	;# 
   497  0FE6                     	;# 
   498  0FE7                     	;# 
   499  0FE8                     	;# 
   500  0FE9                     	;# 
   501  0FEA                     	;# 
   502  0FEB                     	;# 
   503  0FED                     	;# 
   504  0FEE                     	;# 
   505  0FEF                     	;# 
   506  0000                     	;# 
   507  0001                     	;# 
   508  0002                     	;# 
   509  0003                     	;# 
   510  0004                     	;# 
   511  0005                     	;# 
   512  0006                     	;# 
   513  0007                     	;# 
   514  0008                     	;# 
   515  0009                     	;# 
   516  000A                     	;# 
   517  000B                     	;# 
   518  000C                     	;# 
   519  000D                     	;# 
   520  000E                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0015                     	;# 
   525  0016                     	;# 
   526  0016                     	;# 
   527  0017                     	;# 
   528  0018                     	;# 
   529  0019                     	;# 
   530  001A                     	;# 
   531  001B                     	;# 
   532  001C                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  0090                     	;# 
   537  0091                     	;# 
   538  0092                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0099                     	;# 
   543  009A                     	;# 
   544  009B                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  010C                     	;# 
   550  010D                     	;# 
   551  010E                     	;# 
   552  0116                     	;# 
   553  0117                     	;# 
   554  011D                     	;# 
   555  018C                     	;# 
   556  018D                     	;# 
   557  018E                     	;# 
   558  0191                     	;# 
   559  0191                     	;# 
   560  0192                     	;# 
   561  0193                     	;# 
   562  0193                     	;# 
   563  0194                     	;# 
   564  0195                     	;# 
   565  0196                     	;# 
   566  0197                     	;# 
   567  0199                     	;# 
   568  019A                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019C                     	;# 
   574  019C                     	;# 
   575  019D                     	;# 
   576  019E                     	;# 
   577  019F                     	;# 
   578  020D                     	;# 
   579  0210                     	;# 
   580  0211                     	;# 
   581  0211                     	;# 
   582  0212                     	;# 
   583  0212                     	;# 
   584  0213                     	;# 
   585  0213                     	;# 
   586  0214                     	;# 
   587  0214                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0216                     	;# 
   592  0216                     	;# 
   593  0217                     	;# 
   594  0217                     	;# 
   595  0291                     	;# 
   596  0291                     	;# 
   597  0292                     	;# 
   598  0293                     	;# 
   599  0298                     	;# 
   600  0298                     	;# 
   601  0299                     	;# 
   602  029A                     	;# 
   603  0394                     	;# 
   604  0395                     	;# 
   605  0396                     	;# 
   606  0FE4                     	;# 
   607  0FE5                     	;# 
   608  0FE6                     	;# 
   609  0FE7                     	;# 
   610  0FE8                     	;# 
   611  0FE9                     	;# 
   612  0FEA                     	;# 
   613  0FEB                     	;# 
   614  0FED                     	;# 
   615  0FEE                     	;# 
   616  0FEF                     	;# 
   617  0000                     	;# 
   618  0001                     	;# 
   619  0002                     	;# 
   620  0003                     	;# 
   621  0004                     	;# 
   622  0005                     	;# 
   623  0006                     	;# 
   624  0007                     	;# 
   625  0008                     	;# 
   626  0009                     	;# 
   627  000A                     	;# 
   628  000B                     	;# 
   629  000C                     	;# 
   630  000D                     	;# 
   631  000E                     	;# 
   632  0010                     	;# 
   633  0011                     	;# 
   634  0012                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  008C                     	;# 
   645  008D                     	;# 
   646  008E                     	;# 
   647  0090                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  0116                     	;# 
   664  0117                     	;# 
   665  011D                     	;# 
   666  018C                     	;# 
   667  018D                     	;# 
   668  018E                     	;# 
   669  0191                     	;# 
   670  0191                     	;# 
   671  0192                     	;# 
   672  0193                     	;# 
   673  0193                     	;# 
   674  0194                     	;# 
   675  0195                     	;# 
   676  0196                     	;# 
   677  0197                     	;# 
   678  0199                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019C                     	;# 
   685  019C                     	;# 
   686  019D                     	;# 
   687  019E                     	;# 
   688  019F                     	;# 
   689  020D                     	;# 
   690  0210                     	;# 
   691  0211                     	;# 
   692  0211                     	;# 
   693  0212                     	;# 
   694  0212                     	;# 
   695  0213                     	;# 
   696  0213                     	;# 
   697  0214                     	;# 
   698  0214                     	;# 
   699  0215                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0216                     	;# 
   703  0216                     	;# 
   704  0217                     	;# 
   705  0217                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0298                     	;# 
   711  0298                     	;# 
   712  0299                     	;# 
   713  029A                     	;# 
   714  0394                     	;# 
   715  0395                     	;# 
   716  0396                     	;# 
   717  0FE4                     	;# 
   718  0FE5                     	;# 
   719  0FE6                     	;# 
   720  0FE7                     	;# 
   721  0FE8                     	;# 
   722  0FE9                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEF                     	;# 
   728  0000                     	;# 
   729  0001                     	;# 
   730  0002                     	;# 
   731  0003                     	;# 
   732  0004                     	;# 
   733  0005                     	;# 
   734  0006                     	;# 
   735  0007                     	;# 
   736  0008                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000D                     	;# 
   742  000E                     	;# 
   743  0010                     	;# 
   744  0011                     	;# 
   745  0012                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  008E                     	;# 
   758  0090                     	;# 
   759  0091                     	;# 
   760  0092                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  010C                     	;# 
   772  010D                     	;# 
   773  010E                     	;# 
   774  0116                     	;# 
   775  0117                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018D                     	;# 
   779  018E                     	;# 
   780  0191                     	;# 
   781  0191                     	;# 
   782  0192                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0197                     	;# 
   789  0199                     	;# 
   790  019A                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019C                     	;# 
   797  019D                     	;# 
   798  019E                     	;# 
   799  019F                     	;# 
   800  020D                     	;# 
   801  0210                     	;# 
   802  0211                     	;# 
   803  0211                     	;# 
   804  0212                     	;# 
   805  0212                     	;# 
   806  0213                     	;# 
   807  0213                     	;# 
   808  0214                     	;# 
   809  0214                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0216                     	;# 
   814  0216                     	;# 
   815  0217                     	;# 
   816  0217                     	;# 
   817  0291                     	;# 
   818  0291                     	;# 
   819  0292                     	;# 
   820  0293                     	;# 
   821  0298                     	;# 
   822  0298                     	;# 
   823  0299                     	;# 
   824  029A                     	;# 
   825  0394                     	;# 
   826  0395                     	;# 
   827  0396                     	;# 
   828  0FE4                     	;# 
   829  0FE5                     	;# 
   830  0FE6                     	;# 
   831  0FE7                     	;# 
   832  0FE8                     	;# 
   833  0FE9                     	;# 
   834  0FEA                     	;# 
   835  0FEB                     	;# 
   836  0FED                     	;# 
   837  0FEE                     	;# 
   838  0FEF                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0008                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  0010                     	;# 
   855  0011                     	;# 
   856  0012                     	;# 
   857  0015                     	;# 
   858  0016                     	;# 
   859  0016                     	;# 
   860  0017                     	;# 
   861  0018                     	;# 
   862  0019                     	;# 
   863  001A                     	;# 
   864  001B                     	;# 
   865  001C                     	;# 
   866  008C                     	;# 
   867  008D                     	;# 
   868  008E                     	;# 
   869  0090                     	;# 
   870  0091                     	;# 
   871  0092                     	;# 
   872  0095                     	;# 
   873  0096                     	;# 
   874  0097                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009B                     	;# 
   879  009C                     	;# 
   880  009D                     	;# 
   881  009E                     	;# 
   882  010C                     	;# 
   883  010D                     	;# 
   884  010E                     	;# 
   885  0116                     	;# 
   886  0117                     	;# 
   887  011D                     	;# 
   888  018C                     	;# 
   889  018D                     	;# 
   890  018E                     	;# 
   891  0191                     	;# 
   892  0191                     	;# 
   893  0192                     	;# 
   894  0193                     	;# 
   895  0193                     	;# 
   896  0194                     	;# 
   897  0195                     	;# 
   898  0196                     	;# 
   899  0197                     	;# 
   900  0199                     	;# 
   901  019A                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019C                     	;# 
   907  019C                     	;# 
   908  019D                     	;# 
   909  019E                     	;# 
   910  019F                     	;# 
   911  020D                     	;# 
   912  0210                     	;# 
   913  0211                     	;# 
   914  0211                     	;# 
   915  0212                     	;# 
   916  0212                     	;# 
   917  0213                     	;# 
   918  0213                     	;# 
   919  0214                     	;# 
   920  0214                     	;# 
   921  0215                     	;# 
   922  0215                     	;# 
   923  0215                     	;# 
   924  0216                     	;# 
   925  0216                     	;# 
   926  0217                     	;# 
   927  0217                     	;# 
   928  0291                     	;# 
   929  0291                     	;# 
   930  0292                     	;# 
   931  0293                     	;# 
   932  0298                     	;# 
   933  0298                     	;# 
   934  0299                     	;# 
   935  029A                     	;# 
   936  0394                     	;# 
   937  0395                     	;# 
   938  0396                     	;# 
   939  0FE4                     	;# 
   940  0FE5                     	;# 
   941  0FE6                     	;# 
   942  0FE7                     	;# 
   943  0FE8                     	;# 
   944  0FE9                     	;# 
   945  0FEA                     	;# 
   946  0FEB                     	;# 
   947  0FED                     	;# 
   948  0FEE                     	;# 
   949  0FEF                     	;# 
   950  0000                     	;# 
   951  0001                     	;# 
   952  0002                     	;# 
   953  0003                     	;# 
   954  0004                     	;# 
   955  0005                     	;# 
   956  0006                     	;# 
   957  0007                     	;# 
   958  0008                     	;# 
   959  0009                     	;# 
   960  000A                     	;# 
   961  000B                     	;# 
   962  000C                     	;# 
   963  000D                     	;# 
   964  000E                     	;# 
   965  0010                     	;# 
   966  0011                     	;# 
   967  0012                     	;# 
   968  0015                     	;# 
   969  0016                     	;# 
   970  0016                     	;# 
   971  0017                     	;# 
   972  0018                     	;# 
   973  0019                     	;# 
   974  001A                     	;# 
   975  001B                     	;# 
   976  001C                     	;# 
   977  008C                     	;# 
   978  008D                     	;# 
   979  008E                     	;# 
   980  0090                     	;# 
   981  0091                     	;# 
   982  0092                     	;# 
   983  0095                     	;# 
   984  0096                     	;# 
   985  0097                     	;# 
   986  0099                     	;# 
   987  009A                     	;# 
   988  009B                     	;# 
   989  009B                     	;# 
   990  009C                     	;# 
   991  009D                     	;# 
   992  009E                     	;# 
   993  010C                     	;# 
   994  010D                     	;# 
   995  010E                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018D                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0197                     	;# 
  1011  0199                     	;# 
  1012  019A                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020D                     	;# 
  1023  0210                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0291                     	;# 
  1040  0291                     	;# 
  1041  0292                     	;# 
  1042  0293                     	;# 
  1043  0298                     	;# 
  1044  0298                     	;# 
  1045  0299                     	;# 
  1046  029A                     	;# 
  1047  0394                     	;# 
  1048  0395                     	;# 
  1049  0396                     	;# 
  1050  0FE4                     	;# 
  1051  0FE5                     	;# 
  1052  0FE6                     	;# 
  1053  0FE7                     	;# 
  1054  0FE8                     	;# 
  1055  0FE9                     	;# 
  1056  0FEA                     	;# 
  1057  0FEB                     	;# 
  1058  0FED                     	;# 
  1059  0FEE                     	;# 
  1060  0FEF                     	;# 
  1061  0000                     	;# 
  1062  0001                     	;# 
  1063  0002                     	;# 
  1064  0003                     	;# 
  1065  0004                     	;# 
  1066  0005                     	;# 
  1067  0006                     	;# 
  1068  0007                     	;# 
  1069  0008                     	;# 
  1070  0009                     	;# 
  1071  000A                     	;# 
  1072  000B                     	;# 
  1073  000C                     	;# 
  1074  000D                     	;# 
  1075  000E                     	;# 
  1076  0010                     	;# 
  1077  0011                     	;# 
  1078  0012                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  0090                     	;# 
  1092  0091                     	;# 
  1093  0092                     	;# 
  1094  0095                     	;# 
  1095  0096                     	;# 
  1096  0097                     	;# 
  1097  0099                     	;# 
  1098  009A                     	;# 
  1099  009B                     	;# 
  1100  009B                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009E                     	;# 
  1104  010C                     	;# 
  1105  010D                     	;# 
  1106  010E                     	;# 
  1107  0116                     	;# 
  1108  0117                     	;# 
  1109  011D                     	;# 
  1110  018C                     	;# 
  1111  018D                     	;# 
  1112  018E                     	;# 
  1113  0191                     	;# 
  1114  0191                     	;# 
  1115  0192                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0194                     	;# 
  1119  0195                     	;# 
  1120  0196                     	;# 
  1121  0197                     	;# 
  1122  0199                     	;# 
  1123  019A                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019D                     	;# 
  1131  019E                     	;# 
  1132  019F                     	;# 
  1133  020D                     	;# 
  1134  0210                     	;# 
  1135  0211                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0212                     	;# 
  1139  0213                     	;# 
  1140  0213                     	;# 
  1141  0214                     	;# 
  1142  0214                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0216                     	;# 
  1147  0216                     	;# 
  1148  0217                     	;# 
  1149  0217                     	;# 
  1150  0291                     	;# 
  1151  0291                     	;# 
  1152  0292                     	;# 
  1153  0293                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  0394                     	;# 
  1159  0395                     	;# 
  1160  0396                     	;# 
  1161  0FE4                     	;# 
  1162  0FE5                     	;# 
  1163  0FE6                     	;# 
  1164  0FE7                     	;# 
  1165  0FE8                     	;# 
  1166  0FE9                     	;# 
  1167  0FEA                     	;# 
  1168  0FEB                     	;# 
  1169  0FED                     	;# 
  1170  0FEE                     	;# 
  1171  0FEF                     	;# 
  1172  0000                     	;# 
  1173  0001                     	;# 
  1174  0002                     	;# 
  1175  0003                     	;# 
  1176  0004                     	;# 
  1177  0005                     	;# 
  1178  0006                     	;# 
  1179  0007                     	;# 
  1180  0008                     	;# 
  1181  0009                     	;# 
  1182  000A                     	;# 
  1183  000B                     	;# 
  1184  000C                     	;# 
  1185  000D                     	;# 
  1186  000E                     	;# 
  1187  0010                     	;# 
  1188  0011                     	;# 
  1189  0012                     	;# 
  1190  0015                     	;# 
  1191  0016                     	;# 
  1192  0016                     	;# 
  1193  0017                     	;# 
  1194  0018                     	;# 
  1195  0019                     	;# 
  1196  001A                     	;# 
  1197  001B                     	;# 
  1198  001C                     	;# 
  1199  008C                     	;# 
  1200  008D                     	;# 
  1201  008E                     	;# 
  1202  0090                     	;# 
  1203  0091                     	;# 
  1204  0092                     	;# 
  1205  0095                     	;# 
  1206  0096                     	;# 
  1207  0097                     	;# 
  1208  0099                     	;# 
  1209  009A                     	;# 
  1210  009B                     	;# 
  1211  009B                     	;# 
  1212  009C                     	;# 
  1213  009D                     	;# 
  1214  009E                     	;# 
  1215  010C                     	;# 
  1216  010D                     	;# 
  1217  010E                     	;# 
  1218  0116                     	;# 
  1219  0117                     	;# 
  1220  011D                     	;# 
  1221  018C                     	;# 
  1222  018D                     	;# 
  1223  018E                     	;# 
  1224  0191                     	;# 
  1225  0191                     	;# 
  1226  0192                     	;# 
  1227  0193                     	;# 
  1228  0193                     	;# 
  1229  0194                     	;# 
  1230  0195                     	;# 
  1231  0196                     	;# 
  1232  0197                     	;# 
  1233  0199                     	;# 
  1234  019A                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019C                     	;# 
  1240  019C                     	;# 
  1241  019D                     	;# 
  1242  019E                     	;# 
  1243  019F                     	;# 
  1244  020D                     	;# 
  1245  0210                     	;# 
  1246  0211                     	;# 
  1247  0211                     	;# 
  1248  0212                     	;# 
  1249  0212                     	;# 
  1250  0213                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0216                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0217                     	;# 
  1261  0291                     	;# 
  1262  0291                     	;# 
  1263  0292                     	;# 
  1264  0293                     	;# 
  1265  0298                     	;# 
  1266  0298                     	;# 
  1267  0299                     	;# 
  1268  029A                     	;# 
  1269  0394                     	;# 
  1270  0395                     	;# 
  1271  0396                     	;# 
  1272  0FE4                     	;# 
  1273  0FE5                     	;# 
  1274  0FE6                     	;# 
  1275  0FE7                     	;# 
  1276  0FE8                     	;# 
  1277  0FE9                     	;# 
  1278  0FEA                     	;# 
  1279  0FEB                     	;# 
  1280  0FED                     	;# 
  1281  0FEE                     	;# 
  1282  0FEF                     	;# 
  1283  0000                     	;# 
  1284  0001                     	;# 
  1285  0002                     	;# 
  1286  0003                     	;# 
  1287  0004                     	;# 
  1288  0005                     	;# 
  1289  0006                     	;# 
  1290  0007                     	;# 
  1291  0008                     	;# 
  1292  0009                     	;# 
  1293  000A                     	;# 
  1294  000B                     	;# 
  1295  000C                     	;# 
  1296  000D                     	;# 
  1297  000E                     	;# 
  1298  0010                     	;# 
  1299  0011                     	;# 
  1300  0012                     	;# 
  1301  0015                     	;# 
  1302  0016                     	;# 
  1303  0016                     	;# 
  1304  0017                     	;# 
  1305  0018                     	;# 
  1306  0019                     	;# 
  1307  001A                     	;# 
  1308  001B                     	;# 
  1309  001C                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0090                     	;# 
  1314  0091                     	;# 
  1315  0092                     	;# 
  1316  0095                     	;# 
  1317  0096                     	;# 
  1318  0097                     	;# 
  1319  0099                     	;# 
  1320  009A                     	;# 
  1321  009B                     	;# 
  1322  009B                     	;# 
  1323  009C                     	;# 
  1324  009D                     	;# 
  1325  009E                     	;# 
  1326  010C                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  0116                     	;# 
  1330  0117                     	;# 
  1331  011D                     	;# 
  1332  018C                     	;# 
  1333  018D                     	;# 
  1334  018E                     	;# 
  1335  0191                     	;# 
  1336  0191                     	;# 
  1337  0192                     	;# 
  1338  0193                     	;# 
  1339  0193                     	;# 
  1340  0194                     	;# 
  1341  0195                     	;# 
  1342  0196                     	;# 
  1343  0197                     	;# 
  1344  0199                     	;# 
  1345  019A                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019C                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019E                     	;# 
  1354  019F                     	;# 
  1355  020D                     	;# 
  1356  0210                     	;# 
  1357  0211                     	;# 
  1358  0211                     	;# 
  1359  0212                     	;# 
  1360  0212                     	;# 
  1361  0213                     	;# 
  1362  0213                     	;# 
  1363  0214                     	;# 
  1364  0214                     	;# 
  1365  0215                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0216                     	;# 
  1369  0216                     	;# 
  1370  0217                     	;# 
  1371  0217                     	;# 
  1372  0291                     	;# 
  1373  0291                     	;# 
  1374  0292                     	;# 
  1375  0293                     	;# 
  1376  0298                     	;# 
  1377  0298                     	;# 
  1378  0299                     	;# 
  1379  029A                     	;# 
  1380  0394                     	;# 
  1381  0395                     	;# 
  1382  0396                     	;# 
  1383  0FE4                     	;# 
  1384  0FE5                     	;# 
  1385  0FE6                     	;# 
  1386  0FE7                     	;# 
  1387  0FE8                     	;# 
  1388  0FE9                     	;# 
  1389  0FEA                     	;# 
  1390  0FEB                     	;# 
  1391  0FED                     	;# 
  1392  0FEE                     	;# 
  1393  0FEF                     	;# 
  1394  0000                     	;# 
  1395  0001                     	;# 
  1396  0002                     	;# 
  1397  0003                     	;# 
  1398  0004                     	;# 
  1399  0005                     	;# 
  1400  0006                     	;# 
  1401  0007                     	;# 
  1402  0008                     	;# 
  1403  0009                     	;# 
  1404  000A                     	;# 
  1405  000B                     	;# 
  1406  000C                     	;# 
  1407  000D                     	;# 
  1408  000E                     	;# 
  1409  0010                     	;# 
  1410  0011                     	;# 
  1411  0012                     	;# 
  1412  0015                     	;# 
  1413  0016                     	;# 
  1414  0016                     	;# 
  1415  0017                     	;# 
  1416  0018                     	;# 
  1417  0019                     	;# 
  1418  001A                     	;# 
  1419  001B                     	;# 
  1420  001C                     	;# 
  1421  008C                     	;# 
  1422  008D                     	;# 
  1423  008E                     	;# 
  1424  0090                     	;# 
  1425  0091                     	;# 
  1426  0092                     	;# 
  1427  0095                     	;# 
  1428  0096                     	;# 
  1429  0097                     	;# 
  1430  0099                     	;# 
  1431  009A                     	;# 
  1432  009B                     	;# 
  1433  009B                     	;# 
  1434  009C                     	;# 
  1435  009D                     	;# 
  1436  009E                     	;# 
  1437  010C                     	;# 
  1438  010D                     	;# 
  1439  010E                     	;# 
  1440  0116                     	;# 
  1441  0117                     	;# 
  1442  011D                     	;# 
  1443  018C                     	;# 
  1444  018D                     	;# 
  1445  018E                     	;# 
  1446  0191                     	;# 
  1447  0191                     	;# 
  1448  0192                     	;# 
  1449  0193                     	;# 
  1450  0193                     	;# 
  1451  0194                     	;# 
  1452  0195                     	;# 
  1453  0196                     	;# 
  1454  0197                     	;# 
  1455  0199                     	;# 
  1456  019A                     	;# 
  1457  019B                     	;# 
  1458  019B                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019C                     	;# 
  1462  019C                     	;# 
  1463  019D                     	;# 
  1464  019E                     	;# 
  1465  019F                     	;# 
  1466  020D                     	;# 
  1467  0210                     	;# 
  1468  0211                     	;# 
  1469  0211                     	;# 
  1470  0212                     	;# 
  1471  0212                     	;# 
  1472  0213                     	;# 
  1473  0213                     	;# 
  1474  0214                     	;# 
  1475  0214                     	;# 
  1476  0215                     	;# 
  1477  0215                     	;# 
  1478  0215                     	;# 
  1479  0216                     	;# 
  1480  0216                     	;# 
  1481  0217                     	;# 
  1482  0217                     	;# 
  1483  0291                     	;# 
  1484  0291                     	;# 
  1485  0292                     	;# 
  1486  0293                     	;# 
  1487  0298                     	;# 
  1488  0298                     	;# 
  1489  0299                     	;# 
  1490  029A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000D                     	;# 
  1519  000E                     	;# 
  1520  0010                     	;# 
  1521  0011                     	;# 
  1522  0012                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  008C                     	;# 
  1533  008D                     	;# 
  1534  008E                     	;# 
  1535  0090                     	;# 
  1536  0091                     	;# 
  1537  0092                     	;# 
  1538  0095                     	;# 
  1539  0096                     	;# 
  1540  0097                     	;# 
  1541  0099                     	;# 
  1542  009A                     	;# 
  1543  009B                     	;# 
  1544  009B                     	;# 
  1545  009C                     	;# 
  1546  009D                     	;# 
  1547  009E                     	;# 
  1548  010C                     	;# 
  1549  010D                     	;# 
  1550  010E                     	;# 
  1551  0116                     	;# 
  1552  0117                     	;# 
  1553  011D                     	;# 
  1554  018C                     	;# 
  1555  018D                     	;# 
  1556  018E                     	;# 
  1557  0191                     	;# 
  1558  0191                     	;# 
  1559  0192                     	;# 
  1560  0193                     	;# 
  1561  0193                     	;# 
  1562  0194                     	;# 
  1563  0195                     	;# 
  1564  0196                     	;# 
  1565  0197                     	;# 
  1566  0199                     	;# 
  1567  019A                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019D                     	;# 
  1575  019E                     	;# 
  1576  019F                     	;# 
  1577  020D                     	;# 
  1578  0210                     	;# 
  1579  0211                     	;# 
  1580  0211                     	;# 
  1581  0212                     	;# 
  1582  0212                     	;# 
  1583  0213                     	;# 
  1584  0213                     	;# 
  1585  0214                     	;# 
  1586  0214                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  0291                     	;# 
  1595  0291                     	;# 
  1596  0292                     	;# 
  1597  0293                     	;# 
  1598  0298                     	;# 
  1599  0298                     	;# 
  1600  0299                     	;# 
  1601  029A                     	;# 
  1602  0394                     	;# 
  1603  0395                     	;# 
  1604  0396                     	;# 
  1605  0FE4                     	;# 
  1606  0FE5                     	;# 
  1607  0FE6                     	;# 
  1608  0FE7                     	;# 
  1609  0FE8                     	;# 
  1610  0FE9                     	;# 
  1611  0FEA                     	;# 
  1612  0FEB                     	;# 
  1613  0FED                     	;# 
  1614  0FEE                     	;# 
  1615  0FEF                     	;# 
  1616  0000                     	;# 
  1617  0001                     	;# 
  1618  0002                     	;# 
  1619  0003                     	;# 
  1620  0004                     	;# 
  1621  0005                     	;# 
  1622  0006                     	;# 
  1623  0007                     	;# 
  1624  0008                     	;# 
  1625  0009                     	;# 
  1626  000A                     	;# 
  1627  000B                     	;# 
  1628  000C                     	;# 
  1629  000D                     	;# 
  1630  000E                     	;# 
  1631  0010                     	;# 
  1632  0011                     	;# 
  1633  0012                     	;# 
  1634  0015                     	;# 
  1635  0016                     	;# 
  1636  0016                     	;# 
  1637  0017                     	;# 
  1638  0018                     	;# 
  1639  0019                     	;# 
  1640  001A                     	;# 
  1641  001B                     	;# 
  1642  001C                     	;# 
  1643  008C                     	;# 
  1644  008D                     	;# 
  1645  008E                     	;# 
  1646  0090                     	;# 
  1647  0091                     	;# 
  1648  0092                     	;# 
  1649  0095                     	;# 
  1650  0096                     	;# 
  1651  0097                     	;# 
  1652  0099                     	;# 
  1653  009A                     	;# 
  1654  009B                     	;# 
  1655  009B                     	;# 
  1656  009C                     	;# 
  1657  009D                     	;# 
  1658  009E                     	;# 
  1659  010C                     	;# 
  1660  010D                     	;# 
  1661  010E                     	;# 
  1662  0116                     	;# 
  1663  0117                     	;# 
  1664  011D                     	;# 
  1665  018C                     	;# 
  1666  018D                     	;# 
  1667  018E                     	;# 
  1668  0191                     	;# 
  1669  0191                     	;# 
  1670  0192                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0194                     	;# 
  1674  0195                     	;# 
  1675  0196                     	;# 
  1676  0197                     	;# 
  1677  0199                     	;# 
  1678  019A                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019C                     	;# 
  1684  019C                     	;# 
  1685  019D                     	;# 
  1686  019E                     	;# 
  1687  019F                     	;# 
  1688  020D                     	;# 
  1689  0210                     	;# 
  1690  0211                     	;# 
  1691  0211                     	;# 
  1692  0212                     	;# 
  1693  0212                     	;# 
  1694  0213                     	;# 
  1695  0213                     	;# 
  1696  0214                     	;# 
  1697  0214                     	;# 
  1698  0215                     	;# 
  1699  0215                     	;# 
  1700  0215                     	;# 
  1701  0216                     	;# 
  1702  0216                     	;# 
  1703  0217                     	;# 
  1704  0217                     	;# 
  1705  0291                     	;# 
  1706  0291                     	;# 
  1707  0292                     	;# 
  1708  0293                     	;# 
  1709  0298                     	;# 
  1710  0298                     	;# 
  1711  0299                     	;# 
  1712  029A                     	;# 
  1713  0394                     	;# 
  1714  0395                     	;# 
  1715  0396                     	;# 
  1716  0FE4                     	;# 
  1717  0FE5                     	;# 
  1718  0FE6                     	;# 
  1719  0FE7                     	;# 
  1720  0FE8                     	;# 
  1721  0FE9                     	;# 
  1722  0FEA                     	;# 
  1723  0FEB                     	;# 
  1724  0FED                     	;# 
  1725  0FEE                     	;# 
  1726  0FEF                     	;# 
  1727  0000                     	;# 
  1728  0001                     	;# 
  1729  0002                     	;# 
  1730  0003                     	;# 
  1731  0004                     	;# 
  1732  0005                     	;# 
  1733  0006                     	;# 
  1734  0007                     	;# 
  1735  0008                     	;# 
  1736  0009                     	;# 
  1737  000A                     	;# 
  1738  000B                     	;# 
  1739  000C                     	;# 
  1740  000D                     	;# 
  1741  000E                     	;# 
  1742  0010                     	;# 
  1743  0011                     	;# 
  1744  0012                     	;# 
  1745  0015                     	;# 
  1746  0016                     	;# 
  1747  0016                     	;# 
  1748  0017                     	;# 
  1749  0018                     	;# 
  1750  0019                     	;# 
  1751  001A                     	;# 
  1752  001B                     	;# 
  1753  001C                     	;# 
  1754  008C                     	;# 
  1755  008D                     	;# 
  1756  008E                     	;# 
  1757  0090                     	;# 
  1758  0091                     	;# 
  1759  0092                     	;# 
  1760  0095                     	;# 
  1761  0096                     	;# 
  1762  0097                     	;# 
  1763  0099                     	;# 
  1764  009A                     	;# 
  1765  009B                     	;# 
  1766  009B                     	;# 
  1767  009C                     	;# 
  1768  009D                     	;# 
  1769  009E                     	;# 
  1770  010C                     	;# 
  1771  010D                     	;# 
  1772  010E                     	;# 
  1773  0116                     	;# 
  1774  0117                     	;# 
  1775  011D                     	;# 
  1776  018C                     	;# 
  1777  018D                     	;# 
  1778  018E                     	;# 
  1779  0191                     	;# 
  1780  0191                     	;# 
  1781  0192                     	;# 
  1782  0193                     	;# 
  1783  0193                     	;# 
  1784  0194                     	;# 
  1785  0195                     	;# 
  1786  0196                     	;# 
  1787  0197                     	;# 
  1788  0199                     	;# 
  1789  019A                     	;# 
  1790  019B                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019C                     	;# 
  1795  019C                     	;# 
  1796  019D                     	;# 
  1797  019E                     	;# 
  1798  019F                     	;# 
  1799  020D                     	;# 
  1800  0210                     	;# 
  1801  0211                     	;# 
  1802  0211                     	;# 
  1803  0212                     	;# 
  1804  0212                     	;# 
  1805  0213                     	;# 
  1806  0213                     	;# 
  1807  0214                     	;# 
  1808  0214                     	;# 
  1809  0215                     	;# 
  1810  0215                     	;# 
  1811  0215                     	;# 
  1812  0216                     	;# 
  1813  0216                     	;# 
  1814  0217                     	;# 
  1815  0217                     	;# 
  1816  0291                     	;# 
  1817  0291                     	;# 
  1818  0292                     	;# 
  1819  0293                     	;# 
  1820  0298                     	;# 
  1821  0298                     	;# 
  1822  0299                     	;# 
  1823  029A                     	;# 
  1824  0394                     	;# 
  1825  0395                     	;# 
  1826  0396                     	;# 
  1827  0FE4                     	;# 
  1828  0FE5                     	;# 
  1829  0FE6                     	;# 
  1830  0FE7                     	;# 
  1831  0FE8                     	;# 
  1832  0FE9                     	;# 
  1833  0FEA                     	;# 
  1834  0FEB                     	;# 
  1835  0FED                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;# 
  1838  0000                     	;# 
  1839  0001                     	;# 
  1840  0002                     	;# 
  1841  0003                     	;# 
  1842  0004                     	;# 
  1843  0005                     	;# 
  1844  0006                     	;# 
  1845  0007                     	;# 
  1846  0008                     	;# 
  1847  0009                     	;# 
  1848  000A                     	;# 
  1849  000B                     	;# 
  1850  000C                     	;# 
  1851  000D                     	;# 
  1852  000E                     	;# 
  1853  0010                     	;# 
  1854  0011                     	;# 
  1855  0012                     	;# 
  1856  0015                     	;# 
  1857  0016                     	;# 
  1858  0016                     	;# 
  1859  0017                     	;# 
  1860  0018                     	;# 
  1861  0019                     	;# 
  1862  001A                     	;# 
  1863  001B                     	;# 
  1864  001C                     	;# 
  1865  008C                     	;# 
  1866  008D                     	;# 
  1867  008E                     	;# 
  1868  0090                     	;# 
  1869  0091                     	;# 
  1870  0092                     	;# 
  1871  0095                     	;# 
  1872  0096                     	;# 
  1873  0097                     	;# 
  1874  0099                     	;# 
  1875  009A                     	;# 
  1876  009B                     	;# 
  1877  009B                     	;# 
  1878  009C                     	;# 
  1879  009D                     	;# 
  1880  009E                     	;# 
  1881  010C                     	;# 
  1882  010D                     	;# 
  1883  010E                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  011D                     	;# 
  1887  018C                     	;# 
  1888  018D                     	;# 
  1889  018E                     	;# 
  1890  0191                     	;# 
  1891  0191                     	;# 
  1892  0192                     	;# 
  1893  0193                     	;# 
  1894  0193                     	;# 
  1895  0194                     	;# 
  1896  0195                     	;# 
  1897  0196                     	;# 
  1898  0197                     	;# 
  1899  0199                     	;# 
  1900  019A                     	;# 
  1901  019B                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019C                     	;# 
  1906  019C                     	;# 
  1907  019D                     	;# 
  1908  019E                     	;# 
  1909  019F                     	;# 
  1910  020D                     	;# 
  1911  0210                     	;# 
  1912  0211                     	;# 
  1913  0211                     	;# 
  1914  0212                     	;# 
  1915  0212                     	;# 
  1916  0213                     	;# 
  1917  0213                     	;# 
  1918  0214                     	;# 
  1919  0214                     	;# 
  1920  0215                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0216                     	;# 
  1924  0216                     	;# 
  1925  0217                     	;# 
  1926  0217                     	;# 
  1927  0291                     	;# 
  1928  0291                     	;# 
  1929  0292                     	;# 
  1930  0293                     	;# 
  1931  0298                     	;# 
  1932  0298                     	;# 
  1933  0299                     	;# 
  1934  029A                     	;# 
  1935  0394                     	;# 
  1936  0395                     	;# 
  1937  0396                     	;# 
  1938  0FE4                     	;# 
  1939  0FE5                     	;# 
  1940  0FE6                     	;# 
  1941  0FE7                     	;# 
  1942  0FE8                     	;# 
  1943  0FE9                     	;# 
  1944  0FEA                     	;# 
  1945  0FEB                     	;# 
  1946  0FED                     	;# 
  1947  0FEE                     	;# 
  1948  0FEF                     	;# 
  1949  0000                     	;# 
  1950  0001                     	;# 
  1951  0002                     	;# 
  1952  0003                     	;# 
  1953  0004                     	;# 
  1954  0005                     	;# 
  1955  0006                     	;# 
  1956  0007                     	;# 
  1957  0008                     	;# 
  1958  0009                     	;# 
  1959  000A                     	;# 
  1960  000B                     	;# 
  1961  000C                     	;# 
  1962  000D                     	;# 
  1963  000E                     	;# 
  1964  0010                     	;# 
  1965  0011                     	;# 
  1966  0012                     	;# 
  1967  0015                     	;# 
  1968  0016                     	;# 
  1969  0016                     	;# 
  1970  0017                     	;# 
  1971  0018                     	;# 
  1972  0019                     	;# 
  1973  001A                     	;# 
  1974  001B                     	;# 
  1975  001C                     	;# 
  1976  008C                     	;# 
  1977  008D                     	;# 
  1978  008E                     	;# 
  1979  0090                     	;# 
  1980  0091                     	;# 
  1981  0092                     	;# 
  1982  0095                     	;# 
  1983  0096                     	;# 
  1984  0097                     	;# 
  1985  0099                     	;# 
  1986  009A                     	;# 
  1987  009B                     	;# 
  1988  009B                     	;# 
  1989  009C                     	;# 
  1990  009D                     	;# 
  1991  009E                     	;# 
  1992  010C                     	;# 
  1993  010D                     	;# 
  1994  010E                     	;# 
  1995  0116                     	;# 
  1996  0117                     	;# 
  1997  011D                     	;# 
  1998  018C                     	;# 
  1999  018D                     	;# 
  2000  018E                     	;# 
  2001  0191                     	;# 
  2002  0191                     	;# 
  2003  0192                     	;# 
  2004  0193                     	;# 
  2005  0193                     	;# 
  2006  0194                     	;# 
  2007  0195                     	;# 
  2008  0196                     	;# 
  2009  0197                     	;# 
  2010  0199                     	;# 
  2011  019A                     	;# 
  2012  019B                     	;# 
  2013  019B                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019C                     	;# 
  2017  019C                     	;# 
  2018  019D                     	;# 
  2019  019E                     	;# 
  2020  019F                     	;# 
  2021  020D                     	;# 
  2022  0210                     	;# 
  2023  0211                     	;# 
  2024  0211                     	;# 
  2025  0212                     	;# 
  2026  0212                     	;# 
  2027  0213                     	;# 
  2028  0213                     	;# 
  2029  0214                     	;# 
  2030  0214                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0216                     	;# 
  2035  0216                     	;# 
  2036  0217                     	;# 
  2037  0217                     	;# 
  2038  0291                     	;# 
  2039  0291                     	;# 
  2040  0292                     	;# 
  2041  0293                     	;# 
  2042  0298                     	;# 
  2043  0298                     	;# 
  2044  0299                     	;# 
  2045  029A                     	;# 
  2046  0394                     	;# 
  2047  0395                     	;# 
  2048  0396                     	;# 
  2049  0FE4                     	;# 
  2050  0FE5                     	;# 
  2051  0FE6                     	;# 
  2052  0FE7                     	;# 
  2053  0FE8                     	;# 
  2054  0FE9                     	;# 
  2055  0FEA                     	;# 
  2056  0FEB                     	;# 
  2057  0FED                     	;# 
  2058  0FEE                     	;# 
  2059  0FEF                     	;# 
  2060  0000                     	;# 
  2061  0001                     	;# 
  2062  0002                     	;# 
  2063  0003                     	;# 
  2064  0004                     	;# 
  2065  0005                     	;# 
  2066  0006                     	;# 
  2067  0007                     	;# 
  2068  0008                     	;# 
  2069  0009                     	;# 
  2070  000A                     	;# 
  2071  000B                     	;# 
  2072  000C                     	;# 
  2073  000D                     	;# 
  2074  000E                     	;# 
  2075  0010                     	;# 
  2076  0011                     	;# 
  2077  0012                     	;# 
  2078  0015                     	;# 
  2079  0016                     	;# 
  2080  0016                     	;# 
  2081  0017                     	;# 
  2082  0018                     	;# 
  2083  0019                     	;# 
  2084  001A                     	;# 
  2085  001B                     	;# 
  2086  001C                     	;# 
  2087  008C                     	;# 
  2088  008D                     	;# 
  2089  008E                     	;# 
  2090  0090                     	;# 
  2091  0091                     	;# 
  2092  0092                     	;# 
  2093  0095                     	;# 
  2094  0096                     	;# 
  2095  0097                     	;# 
  2096  0099                     	;# 
  2097  009A                     	;# 
  2098  009B                     	;# 
  2099  009B                     	;# 
  2100  009C                     	;# 
  2101  009D                     	;# 
  2102  009E                     	;# 
  2103  010C                     	;# 
  2104  010D                     	;# 
  2105  010E                     	;# 
  2106  0116                     	;# 
  2107  0117                     	;# 
  2108  011D                     	;# 
  2109  018C                     	;# 
  2110  018D                     	;# 
  2111  018E                     	;# 
  2112  0191                     	;# 
  2113  0191                     	;# 
  2114  0192                     	;# 
  2115  0193                     	;# 
  2116  0193                     	;# 
  2117  0194                     	;# 
  2118  0195                     	;# 
  2119  0196                     	;# 
  2120  0197                     	;# 
  2121  0199                     	;# 
  2122  019A                     	;# 
  2123  019B                     	;# 
  2124  019B                     	;# 
  2125  019B                     	;# 
  2126  019B                     	;# 
  2127  019C                     	;# 
  2128  019C                     	;# 
  2129  019D                     	;# 
  2130  019E                     	;# 
  2131  019F                     	;# 
  2132  020D                     	;# 
  2133  0210                     	;# 
  2134  0211                     	;# 
  2135  0211                     	;# 
  2136  0212                     	;# 
  2137  0212                     	;# 
  2138  0213                     	;# 
  2139  0213                     	;# 
  2140  0214                     	;# 
  2141  0214                     	;# 
  2142  0215                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0216                     	;# 
  2146  0216                     	;# 
  2147  0217                     	;# 
  2148  0217                     	;# 
  2149  0291                     	;# 
  2150  0291                     	;# 
  2151  0292                     	;# 
  2152  0293                     	;# 
  2153  0298                     	;# 
  2154  0298                     	;# 
  2155  0299                     	;# 
  2156  029A                     	;# 
  2157  0394                     	;# 
  2158  0395                     	;# 
  2159  0396                     	;# 
  2160  0FE4                     	;# 
  2161  0FE5                     	;# 
  2162  0FE6                     	;# 
  2163  0FE7                     	;# 
  2164  0FE8                     	;# 
  2165  0FE9                     	;# 
  2166  0FEA                     	;# 
  2167  0FEB                     	;# 
  2168  0FED                     	;# 
  2169  0FEE                     	;# 
  2170  0FEF                     	;# 
  2171                           
  2172                           	psect	idataBANK4
  2173  1EDD                     __pidataBANK4:	
  2174                           
  2175                           ;initializer for __product
  2176  1EDD  3463               	retlw	99
  2177  1EDE  3402               	retlw	2
  2178  1EDF  3400               	retlw	0
  2179  1EE0  3400               	retlw	0
  2180  1EE1  3400               	retlw	0
  2181  1EE2  3400               	retlw	0
  2182  1EE3  3400               	retlw	0
  2183  1EE4  3400               	retlw	0
  2184  1EE5  3400               	retlw	0
  2185  1EE6  3400               	retlw	0
  2186  1EE7  3400               	retlw	0
  2187  1EE8  3400               	retlw	0
  2188  1EE9  34FF               	retlw	255
  2189  1EEA  34FF               	retlw	255
  2190  1EEB  34FF               	retlw	255
  2191  1EEC  3400               	retlw	0
  2192  1EED  3400               	retlw	0
  2193  1EEE  3400               	retlw	0
  2194  1EEF  3400               	retlw	0
  2195  1EF0  3400               	retlw	0
  2196  1EF1  3400               	retlw	0
  2197  1EF2  3400               	retlw	0
  2198  1EF3  3400               	retlw	0
  2199  1EF4  3400               	retlw	0
  2200  1EF5  3400               	retlw	0
  2201  1EF6  3400               	retlw	0
  2202  1EF7  3400               	retlw	0
  2203  1EF8  3400               	retlw	0
  2204  1EF9  3400               	retlw	0
  2205  1EFA  3400               	retlw	0
  2206  1EFB  3400               	retlw	0
  2207  1EFC  3400               	retlw	0
  2208                           
  2209                           	psect	stringtext
  2210  1800                     __pstringtext:	
  2211  1800                     _CC2500_registers_address:	
  2212  1800  3403               	retlw	3
  2213  1801  3416               	retlw	22
  2214  1802  3417               	retlw	23
  2215  1803  341E               	retlw	30
  2216  1804  341F               	retlw	31
  2217  1805  3420               	retlw	32
  2218  1806  342A               	retlw	42
  2219  1807  342B               	retlw	43
  2220  1808  340B               	retlw	11
  2221  1809  340C               	retlw	12
  2222  180A  340D               	retlw	13
  2223  180B  340E               	retlw	14
  2224  180C  340F               	retlw	15
  2225  180D  3410               	retlw	16
  2226  180E  3411               	retlw	17
  2227  180F  3412               	retlw	18
  2228  1810  3413               	retlw	19
  2229  1811  3414               	retlw	20
  2230  1812  340A               	retlw	10
  2231  1813  3415               	retlw	21
  2232  1814  3421               	retlw	33
  2233  1815  3422               	retlw	34
  2234  1816  3418               	retlw	24
  2235  1817  3419               	retlw	25
  2236  1818  341A               	retlw	26
  2237  1819  341B               	retlw	27
  2238  181A  341C               	retlw	28
  2239  181B  341D               	retlw	29
  2240  181C  3423               	retlw	35
  2241  181D  3424               	retlw	36
  2242  181E  3425               	retlw	37
  2243  181F  3426               	retlw	38
  2244  1820  3429               	retlw	41
  2245  1821  342C               	retlw	44
  2246  1822  342D               	retlw	45
  2247  1823  342E               	retlw	46
  2248  1824  3400               	retlw	0
  2249  1825  3401               	retlw	1
  2250  1826  3402               	retlw	2
  2251  1827  3407               	retlw	7
  2252  1828  3408               	retlw	8
  2253  1829  3409               	retlw	9
  2254  182A  3406               	retlw	6
  2255  182B  3404               	retlw	4
  2256  182C  3405               	retlw	5
  2257  182D  3427               	retlw	39
  2258  182E  3428               	retlw	40
  2259  182F                     __end_of_CC2500_registers_address:	
  2260  182F                     _CC2500_rfSettings:	
  2261  182F  3407               	retlw	7
  2262  1830  3407               	retlw	7
  2263  1831  3430               	retlw	48
  2264  1832  3487               	retlw	135
  2265  1833  346B               	retlw	107
  2266  1834  34F8               	retlw	248
  2267  1835  347F               	retlw	127
  2268  1836  343F               	retlw	63
  2269  1837  3409               	retlw	9
  2270  1838  3400               	retlw	0
  2271  1839  345C               	retlw	92
  2272  183A  34A7               	retlw	167
  2273  183B  3462               	retlw	98
  2274  183C  3486               	retlw	134
  2275  183D  3483               	retlw	131
  2276  183E  3403               	retlw	3
  2277  183F  3422               	retlw	34
  2278  1840  34F8               	retlw	248
  2279  1841  3400               	retlw	0
  2280  1842  3444               	retlw	68
  2281  1843  34B6               	retlw	182
  2282  1844  3410               	retlw	16
  2283  1845  3418               	retlw	24
  2284  1846  341D               	retlw	29
  2285  1847  341C               	retlw	28
  2286  1848  34C7               	retlw	199
  2287  1849  3400               	retlw	0
  2288  184A  34B2               	retlw	178
  2289  184B  34EA               	retlw	234
  2290  184C  340A               	retlw	10
  2291  184D  3400               	retlw	0
  2292  184E  3411               	retlw	17
  2293  184F  3459               	retlw	89
  2294  1850  3488               	retlw	136
  2295  1851  3431               	retlw	49
  2296  1852  340B               	retlw	11
  2297  1853  342F               	retlw	47
  2298  1854  342E               	retlw	46
  2299  1855  3406               	retlw	6
  2300  1856  3404               	retlw	4
  2301  1857  3405               	retlw	5
  2302  1858  3400               	retlw	0
  2303  1859  3430               	retlw	48
  2304  185A  34D3               	retlw	211
  2305  185B  3491               	retlw	145
  2306  185C  3441               	retlw	65
  2307  185D  3400               	retlw	0
  2308  185E                     __end_of_CC2500_rfSettings:	
  2309  185E                     _CC2500_patable_vaule:	
  2310  185E  34FE               	retlw	254
  2311  185F  34FE               	retlw	254
  2312  1860  34FE               	retlw	254
  2313  1861  34FE               	retlw	254
  2314  1862  34FE               	retlw	254
  2315  1863  34FE               	retlw	254
  2316  1864  34FE               	retlw	254
  2317  1865  34FE               	retlw	254
  2318  1866                     __end_of_CC2500_patable_vaule:	
  2319                           
  2320                           	psect	nvBANK1
  2321  00EE                     __pnvBANK1:	
  2322  00EE                     _product:	
  2323  00EE                     	ds	1
  2324  000C                     _PORTA	set	12
  2325  000D                     _PORTB	set	13
  2326  000E                     _PORTC	set	14
  2327  0018                     _T1CON	set	24
  2328  0017                     _TMR1H	set	23
  2329  0016                     _TMR1L	set	22
  2330  005F                     _GIE	set	95
  2331  005B                     _IOCIE	set	91
  2332  0058                     _IOCIF	set	88
  2333  005E                     _PEIE	set	94
  2334  0060                     _RA0	set	96
  2335  0064                     _RA4	set	100
  2336  0066                     _RA6	set	102
  2337  0067                     _RA7	set	103
  2338  0068                     _RB0	set	104
  2339  0069                     _RB1	set	105
  2340  006A                     _RB2	set	106
  2341  006B                     _RB3	set	107
  2342  006D                     _RB5	set	109
  2343  0070                     _RC0	set	112
  2344  0071                     _RC1	set	113
  2345  0073                     _RC3	set	115
  2346  0074                     _RC4	set	116
  2347  0075                     _RC5	set	117
  2348  0088                     _TMR1IF	set	136
  2349  009D                     _ADCON0	set	157
  2350  009E                     _ADCON1	set	158
  2351  009C                     _ADRESH	set	156
  2352  009B                     _ADRESL	set	155
  2353  0099                     _OSCCON	set	153
  2354  008C                     _TRISA	set	140
  2355  008D                     _TRISB	set	141
  2356  008E                     _TRISC	set	142
  2357  0097                     _WDTCON	set	151
  2358  04E9                     _GO_nDONE	set	1257
  2359  0488                     _TMR1IE	set	1160
  2360  0117                     _FVRCON	set	279
  2361  010C                     _LATA	set	268
  2362  010D                     _LATB	set	269
  2363  010E                     _LATC	set	270
  2364  018C                     _ANSELA	set	396
  2365  018D                     _ANSELB	set	397
  2366  018E                     _ANSELC	set	398
  2367  0192                     _PMADRH	set	402
  2368  0191                     _PMADRL	set	401
  2369  0196                     _PMCON2	set	406
  2370  0194                     _PMDATH	set	404
  2371  0193                     _PMDATL	set	403
  2372  0CAE                     _CFGS	set	3246
  2373  0CAC                     _FREE	set	3244
  2374  0CAD                     _LWLO	set	3245
  2375  0CA8                     _RD	set	3240
  2376  0CA9                     _WR	set	3241
  2377  0CAA                     _WREN	set	3242
  2378  020D                     _WPUB	set	525
  2379  0396                     _IOCBF	set	918
  2380  0395                     _IOCBN	set	917
  2381  0394                     _IOCBP	set	916
  2382  1CB2                     _IOCBF2	set	7346
  2383                           
  2384                           ; #config settings
  2385  0000                     
  2386                           	psect	cinit
  2387  0021                     start_initialization:	
  2388  0021                     __initialization:	
  2389                           
  2390                           ; Clear objects allocated to BITCOMMON
  2391  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2392                           
  2393                           ; Clear objects allocated to BITBANK1
  2394  0022  0021               	movlb	1	; select bank1
  2395  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2396                           
  2397                           ; Clear objects allocated to BANK1
  2398  0024  30A0               	movlw	low __pbssBANK1
  2399  0025  0084               	movwf	4
  2400  0026  3000               	movlw	high __pbssBANK1
  2401  0027  0085               	movwf	5
  2402  0028  3046               	movlw	70
  2403  0029  319A  2207  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK2
  2406  002C  3020               	movlw	low __pbssBANK2
  2407  002D  0084               	movwf	4
  2408  002E  3001               	movlw	high __pbssBANK2
  2409  002F  0085               	movwf	5
  2410  0030  304D               	movlw	77
  2411  0031  319A  2207  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Clear objects allocated to BANK3
  2414  0034  30A0               	movlw	low __pbssBANK3
  2415  0035  0084               	movwf	4
  2416  0036  3001               	movlw	high __pbssBANK3
  2417  0037  0085               	movwf	5
  2418  0038  303C               	movlw	60
  2419  0039  319A  2207  3180   	fcall	clear_ram0
  2420                           
  2421                           ; Clear objects allocated to BANK4
  2422  003C  3020               	movlw	low __pbssBANK4
  2423  003D  0084               	movwf	4
  2424  003E  3002               	movlw	high __pbssBANK4
  2425  003F  0085               	movwf	5
  2426  0040  3025               	movlw	37
  2427  0041  319A  2207  3180   	fcall	clear_ram0
  2428                           
  2429                           ; Initialize objects allocated to BANK4
  2430  0044  30DD               	movlw	low __pidataBANK4
  2431  0045  0084               	movwf	4
  2432  0046  309E               	movlw	(high __pidataBANK4)| (0+128)
  2433  0047  0085               	movwf	5
  2434  0048  3045               	movlw	low __pdataBANK4
  2435  0049  0086               	movwf	6
  2436  004A  3002               	movlw	high __pdataBANK4
  2437  004B  0087               	movwf	7
  2438  004C  3020               	movlw	32
  2439  004D  319A  2201         	fcall	init_ram
  2440  004F                     end_of_initialization:	
  2441                           ;End of C runtime variable initialization code
  2442                           
  2443  004F                     __end_of__initialization:	
  2444  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2445  0050  0020               	movlb	0
  2446  0051  3194  2CE8         	ljmp	_main	;jump to C main() function
  2447                           
  2448                           	psect	bitbssCOMMON
  2449  03E8                     __pbitbssCOMMON:	
  2450  03E8                     _Transceive_OK:	
  2451  03E8                     	ds	1
  2452                           
  2453                           	psect	bitbssBANK1
  2454  0778                     __pbitbssBANK1:	
  2455  0778                     _Receive_OK:	
  2456  0778                     	ds	1
  2457                           
  2458                           	psect	bssBANK1
  2459  00A0                     __pbssBANK1:	
  2460  00A0                     _RF1:	
  2461  00A0                     	ds	15
  2462  00AF                     _myMain:	
  2463  00AF                     	ds	13
  2464  00BC                     _DimmerIntr1:	
  2465  00BC                     	ds	12
  2466  00C8                     _CRC:	
  2467  00C8                     	ds	1
  2468  00C9                     _Cmd:	
  2469  00C9                     	ds	1
  2470  00CA                     _DelayOff:	
  2471  00CA                     	ds	1
  2472  00CB                     _DimmerIntr:	
  2473  00CB                     	ds	1
  2474  00CC                     _DimmerLights:	
  2475  00CC                     	ds	1
  2476  00CD                     _LED:	
  2477  00CD                     	ds	1
  2478  00CE                     _Light:	
  2479  00CE                     	ds	1
  2480  00CF                     _RSSI:	
  2481  00CF                     	ds	1
  2482  00D0                     _Rx_Length:	
  2483  00D0                     	ds	1
  2484  00D1                     _SPI0Buffer:	
  2485  00D1                     	ds	1
  2486  00D2                     _Sw:	
  2487  00D2                     	ds	1
  2488  00D3                     _SwDetect:	
  2489  00D3                     	ds	1
  2490  00D4                     _Tx_Length:	
  2491  00D4                     	ds	1
  2492  00D5                     _r_address:	
  2493  00D5                     	ds	1
  2494  00D6                     _r_data:	
  2495  00D6                     	ds	1
  2496  00D7                     _s_data:	
  2497  00D7                     	ds	1
  2498  00D8                     _Temp:	
  2499  00D8                     	ds	14
  2500                           
  2501                           	psect	bssBANK2
  2502  0120                     __pbssBANK2:	
  2503  0120                     _Buz1:	
  2504  0120                     	ds	12
  2505  012C                     _Dimmer:	
  2506  012C                     	ds	5
  2507  0131                     _Timer1:	
  2508  0131                     	ds	3
  2509  0134                     _RF_Count:	
  2510  0134                     	ds	2
  2511  0136                     _WDT:	
  2512  0136                     	ds	2
  2513  0138                     _Load:	
  2514  0138                     	ds	40
  2515  0160                     _DimmerLights1:	
  2516  0160                     	ds	9
  2517  0169                     _VarErrLED:	
  2518  0169                     	ds	4
  2519                           
  2520                           	psect	bssBANK3
  2521  01A0                     __pbssBANK3:	
  2522  01A0                     _RF_Data:	
  2523  01A0                     	ds	30
  2524  01BE                     _u1:	
  2525  01BE                     	ds	16
  2526  01CE                     _Sw1:	
  2527  01CE                     	ds	9
  2528  01D7                     _DlySw1:	
  2529  01D7                     	ds	5
  2530                           
  2531                           	psect	bssBANK4
  2532  0220                     __pbssBANK4:	
  2533  0220                     _Memory:	
  2534  0220                     	ds	37
  2535                           
  2536                           	psect	dataBANK4
  2537  0245                     __pdataBANK4:	
  2538  0245                     __product:	
  2539  0245                     	ds	32
  2540                           
  2541                           	psect	clrtext
  2542  1A07                     clear_ram0:	
  2543                           ;	Called with FSR0 containing the base address, and
  2544                           ;	WREG with the size to clear
  2545                           
  2546  1A07  0064               	clrwdt	;clear the watchdog before getting into this loop
  2547  1A08                     clrloop0:	
  2548  1A08  0180               	clrf	0	;clear RAM location pointed to by FSR
  2549  1A09  3101               	addfsr 0,1
  2550  1A0A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2551  1A0B  2A08               	goto	clrloop0	;have we reached the end yet?
  2552  1A0C  3400               	retlw	0	;all done for this memory range, return
  2553                           
  2554                           	psect	inittext
  2555  1A01                     init_ram:	
  2556  1A01  00FE               	movwf	126
  2557  1A02                     initloop:	
  2558  1A02  0012               	moviw fsr0++
  2559  1A03  001E               	movwi fsr1++
  2560  1A04  0BFE               	decfsz	126,f
  2561  1A05  2A02               	goto	initloop
  2562  1A06  3400               	retlw	0
  2563                           
  2564                           	psect	cstackBANK1
  2565  00E6                     __pcstackBANK1:	
  2566  00E6                     ??_getRxData:	
  2567  00E6                     setDimmerLights_OnOff@lights:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570                           
  2571                           ; 1 bytes @ 0x0
  2572  00E6                     	ds	1
  2573  00E7                     setDimmerLights_Main@lights:	
  2574  00E7                     getRxData@error:	
  2575                           ; 1 bytes @ 0x1
  2576                           
  2577                           
  2578                           ; 1 bytes @ 0x1
  2579  00E7                     	ds	1
  2580  00E8                     ??_setRF_Main:	
  2581                           
  2582                           ; 0 bytes @ 0x2
  2583  00E8                     	ds	1
  2584  00E9                     setRF_Main@error:	
  2585                           
  2586                           ; 1 bytes @ 0x3
  2587  00E9                     	ds	1
  2588  00EA                     ?_main:	
  2589  00EA                     main@argc:	
  2590                           ; 2 bytes @ 0x4
  2591                           
  2592                           
  2593                           ; 2 bytes @ 0x4
  2594  00EA                     	ds	2
  2595  00EC                     main@argv:	
  2596                           
  2597                           ; 2 bytes @ 0x6
  2598  00EC                     	ds	2
  2599                           
  2600                           	psect	cstackCOMMON
  2601  0070                     __pcstackCOMMON:	
  2602  0070                     ?_CC2500_WriteCommand:	
  2603  0070                     ?_RF_Timeout_Counter:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_setRF_TimeoutCleared:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_WriteByte:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_ReadStatus:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_ReadByte:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_PowerRST:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_InitSetREG:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_InitPATable:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_ClearTXFIFO:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_ClearRXFIFO:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_CC2500_FrequencyCabr:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_CC2500_SIDLEMode:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DlyOff_Initialization:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DlyOff_Main:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setDimmerLights_SwOn:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setDimmerLights_SwOff:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setMemory_Modify:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setDimmerLights_Initialization:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setDimmerLights_Main:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_DimmerLights_DimmingFunction:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setDimmerLights_Line:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setDimmerLights_DimmingClose:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setTxData:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_setRF_TransceiveGO:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_setLED_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_setLED_Main:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Fosc_Set:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_IO_Set:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_TMR1_Set:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_ADC_Set:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_IOC_Set:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_WDT_Set:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_TMR1_ISR:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_IOC_ISR:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Timeout_Counter:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_set_TimeoutCleared:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Flash_Memory_Write:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Flash_Memory_Modify:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_WDT_Clearing:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_myMain_Initialization:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Temp_Initialization:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_Load_Initialization:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_Switch_Initialization:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_RF_Initialization:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_getLoad_AD:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_getTemp_AD:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_my_MainTimer:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Temp_Main:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_Load_Main:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_Switch_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_RF_Main:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_Exception_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setLoad_AH_AL_Restore:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setTemp_Initialization:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setTemp_Main:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setOverTemp_ADV_Restore:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setRF_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setRF_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_RF_RxDisable:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_getRxData:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_setLog_Code:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_setControl_Lights_Table:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_setRFSW_Control:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_setRFSW_AdjControl:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_setRF_AdjControl:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_setSw_Initialization:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_setSw_Main:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_Buzzer_Initialization:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_Buzzer_Main:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_CC2500_TxData:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_CC2500_RxData:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_CC2500_PowerOnInitial:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_DelayOffPointSelect:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_DelayOff_Initialization:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_DelayOff_Main:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_DimmerIntr_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_DimmerLights_SelectPointer:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_DimmerLights_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_setDimmerLights_DimmingOn:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_DimmerLights_Main:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_DimmerLights_TMR_1:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ??_DimmerLights_TMR_1:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_DimmerLights_IOC_1:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_LedPointSelect:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_LED_Initialization:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_LED_Main:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_Mcu_Initialization:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_ISR:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_Flash_Memory_Initialization:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_Flash_Memory_Main:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_Flash_Memory_Unlock:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_Flash_Memory_Erasing:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_setMemory_LoopSave:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_WDT_Main:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_setRF_Learn:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_TouchPower:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_SwPointSelect:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_getDimmerLights_Status:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0070                     ?_getDimmerLights_ValueToPercent:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getDimmerLights_PercentToValue:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getLoad_OK:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getMain_All_Error_Status:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getMain_All_LightsStatus:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getDimmerLights_Allow_Condition:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getCmd_Status:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_Flash_Memory_Read:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getAll_Sw_KeyStatus:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getRF_KeyStatus:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getSw_KeyStatus:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_getDelayOff_GO:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_getDimmerIntr_DimmingValue:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_getDimmerLights_Line:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_getDimmer_LoadGO:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_getDimmer_Load_Status:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_getMain_Lights_Count:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?i1___lbdiv:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     setDimmerLights_Initialization@lights:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     getDimmerLights_Allow_Condition@lights:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     getSw_KeyStatus@sw:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     i1___lbdiv@divisor:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969                           
  2970                           ; 1 bytes @ 0x0
  2971  0070                     	ds	1
  2972  0071                     ??_TMR1_ISR:	
  2973  0071                     ??i1___lbdiv:	
  2974                           ; 0 bytes @ 0x1
  2975                           
  2976                           
  2977                           ; 0 bytes @ 0x1
  2978  0071                     	ds	1
  2979  0072                     i1___lbdiv@dividend:	
  2980                           
  2981                           ; 1 bytes @ 0x2
  2982  0072                     	ds	1
  2983  0073                     i1___lbdiv@counter:	
  2984                           
  2985                           ; 1 bytes @ 0x3
  2986  0073                     	ds	1
  2987  0074                     i1___lbdiv@quotient:	
  2988                           
  2989                           ; 1 bytes @ 0x4
  2990  0074                     	ds	1
  2991  0075                     ?i1_Division:	
  2992  0075                     i1Division@num:	
  2993                           ; 1 bytes @ 0x5
  2994                           
  2995                           
  2996                           ; 1 bytes @ 0x5
  2997  0075                     	ds	1
  2998  0076                     ??i1_Division:	
  2999                           
  3000                           ; 0 bytes @ 0x6
  3001  0076                     	ds	2
  3002  0078                     i1Division@value:	
  3003                           
  3004                           ; 1 bytes @ 0x8
  3005  0078                     	ds	1
  3006  0079                     i1Division@result:	
  3007                           
  3008                           ; 1 bytes @ 0x9
  3009  0079                     	ds	1
  3010  007A                     ??_DimmerLights_IOC_1:	
  3011                           
  3012                           ; 0 bytes @ 0xA
  3013  007A                     	ds	2
  3014  007C                     ??_IOC_ISR:	
  3015  007C                     ??_ISR:	
  3016                           ; 0 bytes @ 0xC
  3017                           
  3018                           
  3019                           ; 0 bytes @ 0xC
  3020  007C                     	ds	1
  3021                           
  3022                           	psect	cstackBANK0
  3023  0020                     __pcstackBANK0:	
  3024  0020                     ??_RF_Timeout_Counter:	
  3025  0020                     ??_setRF_TimeoutCleared:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_CC2500_WriteByte:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_CC2500_ReadByte:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ?_DelayTime_1us:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_setMemory_Modify:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_setDimmerLights_Initialization:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_getLoad_OK:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_getMain_All_Error_Status:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_getMain_All_LightsStatus:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_DimmerLights_DimmingFunction:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_setDimmerLights_Line:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_getCmd_Status:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ?_setCmd_Status:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_setTxData:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_setRF_TransceiveGO:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_Fosc_Set:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_IO_Set:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_TMR1_Set:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_ADC_Set:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_IOC_Set:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_WDT_Set:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_Timeout_Counter:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_set_TimeoutCleared:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_Flash_Memory_Read:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ?_setMemory_Data:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_Flash_Memory_Write:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_getAll_Sw_KeyStatus:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ??_WDT_Clearing:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_myMain_Initialization:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ??_Temp_Initialization:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ??_setLoad_AH_AL_Restore:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ??_setTemp_Initialization:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ??_setOverTemp_ADV_Restore:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_setRF_Initialization:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_getRF_KeyStatus:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_getSw_KeyStatus:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_Buzzer_Initialization:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_Buzzer_Main:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_DelayOffPointSelect:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ?_setDimmerIntr_ControlStatus:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ??_getDimmerIntr_DimmingValue:	
  3146                           ; 0 bytes @ 0x0
  3147                           
  3148  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3149                           ; 0 bytes @ 0x0
  3150                           
  3151  0020                     ??_getDimmerIntr_Dimming_Sw:	
  3152                           ; 0 bytes @ 0x0
  3153                           
  3154  0020                     ?_setDimmerIntr_Dimming_RF:	
  3155                           ; 0 bytes @ 0x0
  3156                           
  3157  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3158                           ; 0 bytes @ 0x0
  3159                           
  3160  0020                     ??_DimmerLights_SelectPointer:	
  3161                           ; 0 bytes @ 0x0
  3162                           
  3163  0020                     ??_getDimmerLights_Line:	
  3164                           ; 0 bytes @ 0x0
  3165                           
  3166  0020                     ??_getDimmer_LoadGO:	
  3167                           ; 0 bytes @ 0x0
  3168                           
  3169  0020                     ??_getDimmer_Load_Status:	
  3170                           ; 0 bytes @ 0x0
  3171                           
  3172  0020                     ??_LedPointSelect:	
  3173                           ; 0 bytes @ 0x0
  3174                           
  3175  0020                     ??_Flash_Memory_Unlock:	
  3176                           ; 0 bytes @ 0x0
  3177                           
  3178  0020                     ??_Flash_Memory_Erasing:	
  3179                           ; 0 bytes @ 0x0
  3180                           
  3181  0020                     ??_setMemory_LoopSave:	
  3182                           ; 0 bytes @ 0x0
  3183                           
  3184  0020                     ??_WDT_Main:	
  3185                           ; 0 bytes @ 0x0
  3186                           
  3187  0020                     ??_getMain_Lights_Count:	
  3188                           ; 0 bytes @ 0x0
  3189                           
  3190  0020                     ??_setRF_Learn:	
  3191                           ; 0 bytes @ 0x0
  3192                           
  3193  0020                     ??_TouchPower:	
  3194                           ; 0 bytes @ 0x0
  3195                           
  3196  0020                     ??_SwPointSelect:	
  3197                           ; 0 bytes @ 0x0
  3198                           
  3199  0020                     ?___bmul:	
  3200                           ; 0 bytes @ 0x0
  3201                           
  3202  0020                     ?___lbdiv:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0020                     ?_getBuz_GO:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0020                     ?_getAD:	
  3209                           ; 2 bytes @ 0x0
  3210                           
  3211  0020                     ?___wmul:	
  3212                           ; 2 bytes @ 0x0
  3213                           
  3214  0020                     ?___awdiv:	
  3215                           ; 2 bytes @ 0x0
  3216                           
  3217  0020                     ?___lwdiv:	
  3218                           ; 2 bytes @ 0x0
  3219                           
  3220  0020                     ?___ftpack:	
  3221                           ; 2 bytes @ 0x0
  3222                           
  3223  0020                     setDimmerIntr_ControlStatus@command:	
  3224                           ; 3 bytes @ 0x0
  3225                           
  3226  0020                     setDimmerIntr_Dimming_Sw@command:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0020                     getDimmerIntr_Dimming_Sw@lights:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0020                     setDimmerIntr_Dimming_RF@command:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0020                     setDimmerLights_Line@lights:	
  3239                           ; 1 bytes @ 0x0
  3240                           
  3241  0020                     getDimmerLights_Line@line:	
  3242                           ; 1 bytes @ 0x0
  3243                           
  3244  0020                     getDimmer_LoadGO@loadgo:	
  3245                           ; 1 bytes @ 0x0
  3246                           
  3247  0020                     getDimmer_Load_Status@status:	
  3248                           ; 1 bytes @ 0x0
  3249                           
  3250  0020                     getAD@adcon1:	
  3251                           ; 1 bytes @ 0x0
  3252                           
  3253  0020                     setMemory_Data@data:	
  3254                           ; 1 bytes @ 0x0
  3255                           
  3256  0020                     getMain_All_LightsStatus@status:	
  3257                           ; 1 bytes @ 0x0
  3258                           
  3259  0020                     setCmd_Status@cmd:	
  3260                           ; 1 bytes @ 0x0
  3261                           
  3262  0020                     getCmd_Status@number:	
  3263                           ; 1 bytes @ 0x0
  3264                           
  3265  0020                     getLoad_OK@ok:	
  3266                           ; 1 bytes @ 0x0
  3267                           
  3268  0020                     ___bmul@multiplicand:	
  3269                           ; 1 bytes @ 0x0
  3270                           
  3271  0020                     ___lbdiv@divisor:	
  3272                           ; 1 bytes @ 0x0
  3273                           
  3274  0020                     DelayTime_1us@count:	
  3275                           ; 1 bytes @ 0x0
  3276                           
  3277  0020                     ___wmul@multiplier:	
  3278                           ; 2 bytes @ 0x0
  3279                           
  3280  0020                     ___awdiv@divisor:	
  3281                           ; 2 bytes @ 0x0
  3282                           
  3283  0020                     ___lwdiv@divisor:	
  3284                           ; 2 bytes @ 0x0
  3285                           
  3286  0020                     ___ftpack@arg:	
  3287                           ; 2 bytes @ 0x0
  3288                           
  3289                           
  3290                           ; 3 bytes @ 0x0
  3291  0020                     	ds	1
  3292  0021                     ??_getDimmerLights_Allow_Condition:	
  3293  0021                     ??_setCmd_Status:	
  3294                           ; 0 bytes @ 0x1
  3295                           
  3296  0021                     ??_setMemory_Data:	
  3297                           ; 0 bytes @ 0x1
  3298                           
  3299  0021                     ??_RF_Initialization:	
  3300                           ; 0 bytes @ 0x1
  3301                           
  3302  0021                     ??_setDimmerIntr_ControlStatus:	
  3303                           ; 0 bytes @ 0x1
  3304                           
  3305  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3306                           ; 0 bytes @ 0x1
  3307                           
  3308  0021                     ??_setDimmerIntr_Dimming_RF:	
  3309                           ; 0 bytes @ 0x1
  3310                           
  3311  0021                     ??_Mcu_Initialization:	
  3312                           ; 0 bytes @ 0x1
  3313                           
  3314  0021                     ??___bmul:	
  3315                           ; 0 bytes @ 0x1
  3316                           
  3317  0021                     ??___lbdiv:	
  3318                           ; 0 bytes @ 0x1
  3319                           
  3320  0021                     CC2500_WriteByte@loop_a:	
  3321                           ; 0 bytes @ 0x1
  3322                           
  3323  0021                     CC2500_ReadByte@loop_b:	
  3324                           ; 1 bytes @ 0x1
  3325                           
  3326  0021                     DelayOffPointSelect@sw:	
  3327                           ; 1 bytes @ 0x1
  3328                           
  3329  0021                     getDimmerIntr_DimmingValue@lights:	
  3330                           ; 1 bytes @ 0x1
  3331                           
  3332  0021                     getDimmerIntr_Dimming_Sw@status:	
  3333                           ; 1 bytes @ 0x1
  3334                           
  3335  0021                     DimmerLights_SelectPointer@lights:	
  3336                           ; 1 bytes @ 0x1
  3337                           
  3338  0021                     DimmerLights_DimmingFunction@lights:	
  3339                           ; 1 bytes @ 0x1
  3340                           
  3341  0021                     LedPointSelect@led:	
  3342                           ; 1 bytes @ 0x1
  3343                           
  3344  0021                     Flash_Memory_Read@i:	
  3345                           ; 1 bytes @ 0x1
  3346                           
  3347  0021                     Flash_Memory_Write@i:	
  3348                           ; 1 bytes @ 0x1
  3349                           
  3350  0021                     setMemory_Modify@command:	
  3351                           ; 1 bytes @ 0x1
  3352                           
  3353  0021                     setMemory_LoopSave@command:	
  3354                           ; 1 bytes @ 0x1
  3355                           
  3356  0021                     getMain_Lights_Count@status1:	
  3357                           ; 1 bytes @ 0x1
  3358                           
  3359  0021                     getCmd_Status@cmd:	
  3360                           ; 1 bytes @ 0x1
  3361                           
  3362  0021                     setLoad_AH_AL_Restore@i:	
  3363                           ; 1 bytes @ 0x1
  3364                           
  3365  0021                     setRF_Learn@command:	
  3366                           ; 1 bytes @ 0x1
  3367                           
  3368  0021                     getRF_KeyStatus@key:	
  3369                           ; 1 bytes @ 0x1
  3370                           
  3371  0021                     setRF_TransceiveGO@command:	
  3372                           ; 1 bytes @ 0x1
  3373                           
  3374  0021                     SwPointSelect@sw:	
  3375                           ; 1 bytes @ 0x1
  3376                           
  3377  0021                     getSw_KeyStatus@status:	
  3378                           ; 1 bytes @ 0x1
  3379                           
  3380  0021                     getAll_Sw_KeyStatus@status:	
  3381                           ; 1 bytes @ 0x1
  3382                           
  3383  0021                     _getMain_All_Error_Status$3963:	
  3384                           ; 1 bytes @ 0x1
  3385                           
  3386  0021                     setOverTemp_ADV_Restore@i:	
  3387                           ; 2 bytes @ 0x1
  3388                           
  3389                           
  3390                           ; 2 bytes @ 0x1
  3391  0021                     	ds	1
  3392  0022                     ??_CC2500_WriteCommand:	
  3393  0022                     ??_CC2500_ReadStatus:	
  3394                           ; 0 bytes @ 0x2
  3395                           
  3396  0022                     ??_DelayTime_1us:	
  3397                           ; 0 bytes @ 0x2
  3398                           
  3399  0022                     ?_CC2500_WriteREG:	
  3400                           ; 0 bytes @ 0x2
  3401                           
  3402  0022                     ??_DlyOff_Initialization:	
  3403                           ; 0 bytes @ 0x2
  3404                           
  3405  0022                     ??_getDimmerLights_Status:	
  3406                           ; 0 bytes @ 0x2
  3407                           
  3408  0022                     ??_setDimmerLights_SwOff:	
  3409                           ; 0 bytes @ 0x2
  3410                           
  3411  0022                     ?_setLED:	
  3412                           ; 0 bytes @ 0x2
  3413                           
  3414  0022                     ??_setLED_Main:	
  3415                           ; 0 bytes @ 0x2
  3416                           
  3417  0022                     ??_Load_Initialization:	
  3418                           ; 0 bytes @ 0x2
  3419                           
  3420  0022                     ??_getBuz_GO:	
  3421                           ; 0 bytes @ 0x2
  3422                           
  3423  0022                     ??_getDelayOff_GO:	
  3424                           ; 0 bytes @ 0x2
  3425                           
  3426  0022                     ??_setDimmerLights_DimmingOn:	
  3427                           ; 0 bytes @ 0x2
  3428                           
  3429  0022                     ?_setDimmerLights_DimmingRun:	
  3430                           ; 0 bytes @ 0x2
  3431                           
  3432  0022                     CC2500_WriteREG@value:	
  3433                           ; 0 bytes @ 0x2
  3434                           
  3435  0022                     DlyOff_Initialization@sw:	
  3436                           ; 1 bytes @ 0x2
  3437                           
  3438  0022                     getDelayOff_GO@sw:	
  3439                           ; 1 bytes @ 0x2
  3440                           
  3441  0022                     setDimmerIntr_ControlStatus@lights:	
  3442                           ; 1 bytes @ 0x2
  3443                           
  3444  0022                     getDimmerIntr_DimmingValue@value:	
  3445                           ; 1 bytes @ 0x2
  3446                           
  3447  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3448                           ; 1 bytes @ 0x2
  3449                           
  3450  0022                     setDimmerIntr_Dimming_RF@lights:	
  3451                           ; 1 bytes @ 0x2
  3452                           
  3453  0022                     setDimmerLights_SwOff@sw:	
  3454                           ; 1 bytes @ 0x2
  3455                           
  3456  0022                     setDimmerLights_DimmingOn@sw:	
  3457                           ; 1 bytes @ 0x2
  3458                           
  3459  0022                     getDimmerLights_Allow_Condition@allow:	
  3460                           ; 1 bytes @ 0x2
  3461                           
  3462  0022                     getDimmerLights_Status@lights:	
  3463                           ; 1 bytes @ 0x2
  3464                           
  3465  0022                     setDimmerLights_DimmingRun@command:	
  3466                           ; 1 bytes @ 0x2
  3467                           
  3468  0022                     setLED@command:	
  3469                           ; 1 bytes @ 0x2
  3470                           
  3471  0022                     Flash_Memory_Read@address:	
  3472                           ; 1 bytes @ 0x2
  3473                           
  3474  0022                     setMemory_Data@address:	
  3475                           ; 1 bytes @ 0x2
  3476                           
  3477  0022                     getMain_Lights_Count@count:	
  3478                           ; 1 bytes @ 0x2
  3479                           
  3480  0022                     setCmd_Status@number:	
  3481                           ; 1 bytes @ 0x2
  3482                           
  3483  0022                     _getRF_KeyStatus$5942:	
  3484                           ; 1 bytes @ 0x2
  3485                           
  3486  0022                     _getSw_KeyStatus$7105:	
  3487                           ; 1 bytes @ 0x2
  3488                           
  3489  0022                     _getAll_Sw_KeyStatus$7108:	
  3490                           ; 1 bytes @ 0x2
  3491                           
  3492  0022                     ___bmul@product:	
  3493                           ; 1 bytes @ 0x2
  3494                           
  3495  0022                     ___lbdiv@dividend:	
  3496                           ; 1 bytes @ 0x2
  3497                           
  3498  0022                     DelayTime_1us@i:	
  3499                           ; 1 bytes @ 0x2
  3500                           
  3501  0022                     ___wmul@multiplicand:	
  3502                           ; 2 bytes @ 0x2
  3503                           
  3504  0022                     ___awdiv@dividend:	
  3505                           ; 2 bytes @ 0x2
  3506                           
  3507  0022                     ___lwdiv@dividend:	
  3508                           ; 2 bytes @ 0x2
  3509                           
  3510                           
  3511                           ; 2 bytes @ 0x2
  3512  0022                     	ds	1
  3513  0023                     ??_CC2500_WriteREG:	
  3514  0023                     ??_setLED:	
  3515                           ; 0 bytes @ 0x3
  3516                           
  3517  0023                     ??_setDimmerLights_DimmingClose:	
  3518                           ; 0 bytes @ 0x3
  3519                           
  3520  0023                     ??_DelayOff_Initialization:	
  3521                           ; 0 bytes @ 0x3
  3522                           
  3523  0023                     ??_setDimmerLights_DimmingRun:	
  3524                           ; 0 bytes @ 0x3
  3525                           
  3526  0023                     ??_getAD:	
  3527                           ; 0 bytes @ 0x3
  3528                           
  3529  0023                     CC2500_WriteCommand@command:	
  3530                           ; 0 bytes @ 0x3
  3531                           
  3532  0023                     CC2500_ReadStatus@status_addr:	
  3533                           ; 1 bytes @ 0x3
  3534                           
  3535  0023                     getDelayOff_GO@go:	
  3536                           ; 1 bytes @ 0x3
  3537                           
  3538  0023                     _getDimmerLights_Allow_Condition$2524:	
  3539                           ; 1 bytes @ 0x3
  3540                           
  3541  0023                     getDimmerLights_Status@status:	
  3542                           ; 1 bytes @ 0x3
  3543                           
  3544  0023                     setLED@led:	
  3545                           ; 1 bytes @ 0x3
  3546                           
  3547  0023                     getAD@adcon0:	
  3548                           ; 1 bytes @ 0x3
  3549                           
  3550  0023                     Flash_Memory_Read@ret:	
  3551                           ; 1 bytes @ 0x3
  3552                           
  3553  0023                     ___bmul@multiplier:	
  3554                           ; 1 bytes @ 0x3
  3555                           
  3556  0023                     ___ftpack@exp:	
  3557                           ; 1 bytes @ 0x3
  3558                           
  3559  0023                     ___lbdiv@counter:	
  3560                           ; 1 bytes @ 0x3
  3561                           
  3562  0023                     _getMain_All_Error_Status$3964:	
  3563                           ; 1 bytes @ 0x3
  3564                           
  3565                           
  3566                           ; 2 bytes @ 0x3
  3567  0023                     	ds	1
  3568  0024                     ??_CC2500_ClearTXFIFO:	
  3569  0024                     ??_CC2500_ClearRXFIFO:	
  3570                           ; 0 bytes @ 0x4
  3571                           
  3572  0024                     ??_CC2500_SIDLEMode:	
  3573                           ; 0 bytes @ 0x4
  3574                           
  3575  0024                     ??_setLED_Initialization:	
  3576                           ; 0 bytes @ 0x4
  3577                           
  3578  0024                     ??_Flash_Memory_Modify:	
  3579                           ; 0 bytes @ 0x4
  3580                           
  3581  0024                     ??_getLoad_AD:	
  3582                           ; 0 bytes @ 0x4
  3583                           
  3584  0024                     ??_getTemp_AD:	
  3585                           ; 0 bytes @ 0x4
  3586                           
  3587  0024                     ??_RF_RxDisable:	
  3588                           ; 0 bytes @ 0x4
  3589                           
  3590  0024                     ??_setRF_AdjControl:	
  3591                           ; 0 bytes @ 0x4
  3592                           
  3593  0024                     ??_setSw_Initialization:	
  3594                           ; 0 bytes @ 0x4
  3595                           
  3596  0024                     ??_CC2500_TxData:	
  3597                           ; 0 bytes @ 0x4
  3598                           
  3599  0024                     ??_CC2500_RxData:	
  3600                           ; 0 bytes @ 0x4
  3601                           
  3602  0024                     ??_Flash_Memory_Initialization:	
  3603                           ; 0 bytes @ 0x4
  3604                           
  3605  0024                     ??___wmul:	
  3606                           ; 0 bytes @ 0x4
  3607                           
  3608  0024                     ??___awdiv:	
  3609                           ; 0 bytes @ 0x4
  3610                           
  3611  0024                     ??___lwdiv:	
  3612                           ; 0 bytes @ 0x4
  3613                           
  3614  0024                     CC2500_WriteREG@w_addr:	
  3615                           ; 0 bytes @ 0x4
  3616                           
  3617  0024                     setDimmerLights_DimmingRun@lights:	
  3618                           ; 1 bytes @ 0x4
  3619                           
  3620  0024                     setLED_Initialization@led:	
  3621                           ; 1 bytes @ 0x4
  3622                           
  3623  0024                     setLED_Main@led:	
  3624                           ; 1 bytes @ 0x4
  3625                           
  3626  0024                     setSw_Initialization@sw:	
  3627                           ; 1 bytes @ 0x4
  3628                           
  3629  0024                     ___ftpack@sign:	
  3630                           ; 1 bytes @ 0x4
  3631                           
  3632  0024                     ___lbdiv@quotient:	
  3633                           ; 1 bytes @ 0x4
  3634                           
  3635  0024                     getBuz_GO@i:	
  3636                           ; 1 bytes @ 0x4
  3637                           
  3638  0024                     DelayTime_1us@j:	
  3639                           ; 2 bytes @ 0x4
  3640                           
  3641  0024                     ___wmul@product:	
  3642                           ; 2 bytes @ 0x4
  3643                           
  3644                           
  3645                           ; 2 bytes @ 0x4
  3646  0024                     	ds	1
  3647  0025                     ??_CC2500_InitSetREG:	
  3648  0025                     ??_CC2500_InitPATable:	
  3649                           ; 0 bytes @ 0x5
  3650                           
  3651  0025                     ??_Switch_Initialization:	
  3652                           ; 0 bytes @ 0x5
  3653                           
  3654  0025                     ??___ftpack:	
  3655                           ; 0 bytes @ 0x5
  3656                           
  3657  0025                     ??_LED_Initialization:	
  3658                           ; 0 bytes @ 0x5
  3659                           
  3660  0025                     ??_LED_Main:	
  3661                           ; 0 bytes @ 0x5
  3662                           
  3663  0025                     ?_Division:	
  3664                           ; 0 bytes @ 0x5
  3665                           
  3666  0025                     CC2500_TxData@loop_e:	
  3667                           ; 1 bytes @ 0x5
  3668                           
  3669  0025                     CC2500_RxData@loop_f:	
  3670                           ; 1 bytes @ 0x5
  3671                           
  3672  0025                     Division@num:	
  3673                           ; 1 bytes @ 0x5
  3674                           
  3675  0025                     Flash_Memory_Initialization@value:	
  3676                           ; 1 bytes @ 0x5
  3677                           
  3678  0025                     Flash_Memory_Modify@i:	
  3679                           ; 1 bytes @ 0x5
  3680                           
  3681  0025                     getMain_All_Error_Status@command:	
  3682                           ; 1 bytes @ 0x5
  3683                           
  3684  0025                     getTemp_AD@channel:	
  3685                           ; 1 bytes @ 0x5
  3686                           
  3687  0025                     setRF_AdjControl@status:	
  3688                           ; 1 bytes @ 0x5
  3689                           
  3690  0025                     ___awdiv@counter:	
  3691                           ; 1 bytes @ 0x5
  3692                           
  3693  0025                     ___lwdiv@quotient:	
  3694                           ; 1 bytes @ 0x5
  3695                           
  3696                           
  3697                           ; 2 bytes @ 0x5
  3698  0025                     	ds	1
  3699  0026                     ??_CC2500_PowerRST:	
  3700  0026                     ??_CC2500_FrequencyCabr:	
  3701                           ; 0 bytes @ 0x6
  3702                           
  3703  0026                     ??_Division:	
  3704                           ; 0 bytes @ 0x6
  3705                           
  3706  0026                     ??_Flash_Memory_Main:	
  3707                           ; 0 bytes @ 0x6
  3708                           
  3709  0026                     CC2500_InitSetREG@temp1:	
  3710                           ; 0 bytes @ 0x6
  3711                           
  3712  0026                     CC2500_InitPATable@temp:	
  3713                           ; 1 bytes @ 0x6
  3714                           
  3715  0026                     getMain_All_Error_Status@status:	
  3716                           ; 1 bytes @ 0x6
  3717                           
  3718  0026                     getLoad_AD@channel:	
  3719                           ; 1 bytes @ 0x6
  3720                           
  3721  0026                     setRF_AdjControl@dimmingStatus:	
  3722                           ; 1 bytes @ 0x6
  3723                           
  3724  0026                     ___awdiv@sign:	
  3725                           ; 1 bytes @ 0x6
  3726                           
  3727  0026                     getTemp_AD@ADRES:	
  3728                           ; 1 bytes @ 0x6
  3729                           
  3730                           
  3731                           ; 2 bytes @ 0x6
  3732  0026                     	ds	1
  3733  0027                     CC2500_InitSetREG@temp2:	
  3734  0027                     CC2500_InitPATable@loop_d:	
  3735                           ; 1 bytes @ 0x7
  3736                           
  3737  0027                     Flash_Memory_Main@key_Status:	
  3738                           ; 1 bytes @ 0x7
  3739                           
  3740  0027                     getLoad_AD@k:	
  3741                           ; 1 bytes @ 0x7
  3742                           
  3743  0027                     setRF_AdjControl@sw:	
  3744                           ; 1 bytes @ 0x7
  3745                           
  3746  0027                     ___lwdiv@counter:	
  3747                           ; 1 bytes @ 0x7
  3748                           
  3749  0027                     ___awdiv@quotient:	
  3750                           ; 1 bytes @ 0x7
  3751                           
  3752                           
  3753                           ; 2 bytes @ 0x7
  3754  0027                     	ds	1
  3755  0028                     ??_Load_Main:	
  3756  0028                     ?___awtoft:	
  3757                           ; 0 bytes @ 0x8
  3758                           
  3759  0028                     CC2500_InitSetREG@loop_c:	
  3760                           ; 3 bytes @ 0x8
  3761                           
  3762  0028                     Division@value:	
  3763                           ; 1 bytes @ 0x8
  3764                           
  3765  0028                     _Flash_Memory_Main$3467:	
  3766                           ; 1 bytes @ 0x8
  3767                           
  3768  0028                     getLoad_AD@j:	
  3769                           ; 1 bytes @ 0x8
  3770                           
  3771  0028                     ___awtoft@c:	
  3772                           ; 1 bytes @ 0x8
  3773                           
  3774                           
  3775                           ; 2 bytes @ 0x8
  3776  0028                     	ds	1
  3777  0029                     ?_setBuz:	
  3778  0029                     ??_CC2500_PowerOnInitial:	
  3779                           ; 0 bytes @ 0x9
  3780                           
  3781  0029                     Division@result:	
  3782                           ; 0 bytes @ 0x9
  3783                           
  3784  0029                     setBuz@time:	
  3785                           ; 1 bytes @ 0x9
  3786                           
  3787  0029                     getLoad_AD@ADRES:	
  3788                           ; 2 bytes @ 0x9
  3789                           
  3790                           
  3791                           ; 2 bytes @ 0x9
  3792  0029                     	ds	1
  3793  002A                     _Load_Main$4374:	
  3794                           
  3795                           ; 2 bytes @ 0xA
  3796  002A                     	ds	1
  3797  002B                     ??_setBuz:	
  3798  002B                     ??___awtoft:	
  3799                           ; 0 bytes @ 0xB
  3800                           
  3801  002B                     getLoad_AD@i:	
  3802                           ; 0 bytes @ 0xB
  3803                           
  3804                           
  3805                           ; 1 bytes @ 0xB
  3806  002B                     	ds	1
  3807  002C                     setBuz@count:	
  3808  002C                     Load_Main@error:	
  3809                           ; 1 bytes @ 0xC
  3810                           
  3811                           
  3812                           ; 1 bytes @ 0xC
  3813  002C                     	ds	1
  3814  002D                     ??_setDimmerLights_SwOn:	
  3815  002D                     ??_my_MainTimer:	
  3816                           ; 0 bytes @ 0xD
  3817                           
  3818  002D                     ??_Exception_Main:	
  3819                           ; 0 bytes @ 0xD
  3820                           
  3821  002D                     Load_Main@ErrorCountValue:	
  3822                           ; 0 bytes @ 0xD
  3823                           
  3824  002D                     ___awtoft@sign:	
  3825                           ; 1 bytes @ 0xD
  3826                           
  3827                           
  3828                           ; 1 bytes @ 0xD
  3829  002D                     	ds	1
  3830  002E                     ?___ftdiv:	
  3831  002E                     ?___ftmul:	
  3832                           ; 3 bytes @ 0xE
  3833                           
  3834  002E                     setDimmerLights_SwOn@idle:	
  3835                           ; 3 bytes @ 0xE
  3836                           
  3837  002E                     Exception_Main@status:	
  3838                           ; 1 bytes @ 0xE
  3839                           
  3840  002E                     Load_Main@Load_RunStatus:	
  3841                           ; 1 bytes @ 0xE
  3842                           
  3843  002E                     ___ftdiv@f2:	
  3844                           ; 1 bytes @ 0xE
  3845                           
  3846  002E                     ___ftmul@f1:	
  3847                           ; 3 bytes @ 0xE
  3848                           
  3849                           
  3850                           ; 3 bytes @ 0xE
  3851  002E                     	ds	1
  3852  002F                     setDimmerLights_SwOn@dimmingStatus:	
  3853  002F                     Exception_Main@count:	
  3854                           ; 1 bytes @ 0xF
  3855                           
  3856  002F                     Load_Main@LightsCount:	
  3857                           ; 1 bytes @ 0xF
  3858                           
  3859                           
  3860                           ; 1 bytes @ 0xF
  3861  002F                     	ds	1
  3862  0030                     setDimmerLights_SwOn@sw:	
  3863  0030                     Exception_Main@i:	
  3864                           ; 1 bytes @ 0x10
  3865                           
  3866  0030                     Load_Main@i:	
  3867                           ; 2 bytes @ 0x10
  3868                           
  3869                           
  3870                           ; 2 bytes @ 0x10
  3871  0030                     	ds	1
  3872  0031                     ??_setSw_Main:	
  3873  0031                     ___ftdiv@f1:	
  3874                           ; 0 bytes @ 0x11
  3875                           
  3876  0031                     ___ftmul@f2:	
  3877                           ; 3 bytes @ 0x11
  3878                           
  3879                           
  3880                           ; 3 bytes @ 0x11
  3881  0031                     	ds	1
  3882  0032                     Exception_Main@i_3975:	
  3883                           
  3884                           ; 2 bytes @ 0x12
  3885  0032                     	ds	1
  3886  0033                     setSw_Main@sw:	
  3887                           
  3888                           ; 1 bytes @ 0x13
  3889  0033                     	ds	1
  3890  0034                     ??_Switch_Main:	
  3891  0034                     ??___ftdiv:	
  3892                           ; 0 bytes @ 0x14
  3893                           
  3894  0034                     ??___ftmul:	
  3895                           ; 0 bytes @ 0x14
  3896                           
  3897  0034                     Exception_Main@error:	
  3898                           ; 0 bytes @ 0x14
  3899                           
  3900                           
  3901                           ; 1 bytes @ 0x14
  3902  0034                     	ds	1
  3903  0035                     Exception_Main@lights:	
  3904                           
  3905                           ; 1 bytes @ 0x15
  3906  0035                     	ds	3
  3907  0038                     ___ftdiv@cntr:	
  3908  0038                     ___ftmul@exp:	
  3909                           ; 1 bytes @ 0x18
  3910                           
  3911                           
  3912                           ; 1 bytes @ 0x18
  3913  0038                     	ds	1
  3914  0039                     ___ftdiv@f3:	
  3915  0039                     ___ftmul@f3_as_product:	
  3916                           ; 3 bytes @ 0x19
  3917                           
  3918                           
  3919                           ; 3 bytes @ 0x19
  3920  0039                     	ds	3
  3921  003C                     ___ftdiv@exp:	
  3922  003C                     ___ftmul@cntr:	
  3923                           ; 1 bytes @ 0x1C
  3924                           
  3925                           
  3926                           ; 1 bytes @ 0x1C
  3927  003C                     	ds	1
  3928  003D                     ___ftdiv@sign:	
  3929  003D                     ___ftmul@sign:	
  3930                           ; 1 bytes @ 0x1D
  3931                           
  3932                           
  3933                           ; 1 bytes @ 0x1D
  3934  003D                     	ds	1
  3935  003E                     ?___ftneg:	
  3936  003E                     ___ftneg@f1:	
  3937                           ; 3 bytes @ 0x1E
  3938                           
  3939                           
  3940                           ; 3 bytes @ 0x1E
  3941  003E                     	ds	3
  3942  0041                     ??___ftneg:	
  3943  0041                     ?___ftadd:	
  3944                           ; 0 bytes @ 0x21
  3945                           
  3946  0041                     ___ftadd@f1:	
  3947                           ; 3 bytes @ 0x21
  3948                           
  3949                           
  3950                           ; 3 bytes @ 0x21
  3951  0041                     	ds	3
  3952  0044                     ___ftadd@f2:	
  3953                           
  3954                           ; 3 bytes @ 0x24
  3955  0044                     	ds	3
  3956  0047                     ??___ftadd:	
  3957                           
  3958                           ; 0 bytes @ 0x27
  3959  0047                     	ds	4
  3960  004B                     ___ftadd@sign:	
  3961                           
  3962                           ; 1 bytes @ 0x2B
  3963  004B                     	ds	1
  3964  004C                     ___ftadd@exp2:	
  3965                           
  3966                           ; 1 bytes @ 0x2C
  3967  004C                     	ds	1
  3968  004D                     ___ftadd@exp1:	
  3969                           
  3970                           ; 1 bytes @ 0x2D
  3971  004D                     	ds	1
  3972  004E                     ?___fttol:	
  3973  004E                     ___fttol@f1:	
  3974                           ; 4 bytes @ 0x2E
  3975                           
  3976                           
  3977                           ; 3 bytes @ 0x2E
  3978  004E                     	ds	4
  3979  0052                     ??___fttol:	
  3980                           
  3981                           ; 0 bytes @ 0x32
  3982  0052                     	ds	4
  3983  0056                     ___fttol@sign1:	
  3984                           
  3985                           ; 1 bytes @ 0x36
  3986  0056                     	ds	1
  3987  0057                     ___fttol@lval:	
  3988                           
  3989                           ; 4 bytes @ 0x37
  3990  0057                     	ds	4
  3991  005B                     ___fttol@exp1:	
  3992                           
  3993                           ; 1 bytes @ 0x3B
  3994  005B                     	ds	1
  3995  005C                     ??_getDimmerLights_ValueToPercent:	
  3996  005C                     ??_getDimmerLights_PercentToValue:	
  3997                           ; 0 bytes @ 0x3C
  3998                           
  3999                           
  4000                           ; 0 bytes @ 0x3C
  4001  005C                     	ds	2
  4002  005E                     getDimmerLights_PercentToValue@value:	
  4003  005E                     getDimmerLights_ValueToPercent@value:	
  4004                           ; 1 bytes @ 0x3E
  4005                           
  4006                           
  4007                           ; 1 bytes @ 0x3E
  4008  005E                     	ds	1
  4009  005F                     getDimmerLights_PercentToValue@i:	
  4010  005F                     getDimmerLights_ValueToPercent@i:	
  4011                           ; 3 bytes @ 0x3F
  4012                           
  4013                           
  4014                           ; 3 bytes @ 0x3F
  4015  005F                     	ds	3
  4016  0062                     ?_setProductData:	
  4017  0062                     ??_DimmerIntr_Initialization:	
  4018                           ; 0 bytes @ 0x42
  4019                           
  4020  0062                     ?_setDimmerIntr_DimmingValue:	
  4021                           ; 0 bytes @ 0x42
  4022                           
  4023  0062                     ?_setDimmerIntr_MaxmumValue:	
  4024                           ; 0 bytes @ 0x42
  4025                           
  4026  0062                     setDimmerIntr_DimmingValue@value:	
  4027                           ; 0 bytes @ 0x42
  4028                           
  4029  0062                     setDimmerIntr_MaxmumValue@value:	
  4030                           ; 1 bytes @ 0x42
  4031                           
  4032  0062                     setProductData@value:	
  4033                           ; 1 bytes @ 0x42
  4034                           
  4035                           
  4036                           ; 1 bytes @ 0x42
  4037  0062                     	ds	1
  4038  0063                     ??_setProductData:	
  4039  0063                     ??_setDimmerIntr_DimmingValue:	
  4040                           ; 0 bytes @ 0x43
  4041                           
  4042  0063                     ??_setDimmerIntr_MaxmumValue:	
  4043                           ; 0 bytes @ 0x43
  4044                           
  4045                           
  4046                           ; 0 bytes @ 0x43
  4047  0063                     	ds	1
  4048  0064                     ??_DimmerLights_Initialization:	
  4049  0064                     setDimmerIntr_DimmingValue@lights:	
  4050                           ; 0 bytes @ 0x44
  4051                           
  4052  0064                     setDimmerIntr_MaxmumValue@lights:	
  4053                           ; 1 bytes @ 0x44
  4054                           
  4055  0064                     setProductData@address:	
  4056                           ; 1 bytes @ 0x44
  4057                           
  4058                           
  4059                           ; 1 bytes @ 0x44
  4060  0064                     	ds	1
  4061  0065                     ??_DlyOff_Main:	
  4062  0065                     ?_setRF_DimmerLights:	
  4063                           ; 0 bytes @ 0x45
  4064                           
  4065  0065                     ??_setTemp_Main:	
  4066                           ; 0 bytes @ 0x45
  4067                           
  4068  0065                     ??_setLog_Code:	
  4069                           ; 0 bytes @ 0x45
  4070                           
  4071  0065                     ??_setRFSW_AdjControl:	
  4072                           ; 0 bytes @ 0x45
  4073                           
  4074  0065                     ?_setDelayOff_GO:	
  4075                           ; 0 bytes @ 0x45
  4076                           
  4077  0065                     setDelayOff_GO@command:	
  4078                           ; 0 bytes @ 0x45
  4079                           
  4080  0065                     setRF_DimmerLights@on:	
  4081                           ; 1 bytes @ 0x45
  4082                           
  4083                           
  4084                           ; 1 bytes @ 0x45
  4085  0065                     	ds	1
  4086  0066                     ??_setRF_DimmerLights:	
  4087  0066                     setDelayOff_GO@value:	
  4088                           ; 0 bytes @ 0x46
  4089                           
  4090                           
  4091                           ; 1 bytes @ 0x46
  4092  0066                     	ds	1
  4093  0067                     ??_setDelayOff_GO:	
  4094  0067                     DlyOff_Main@sw:	
  4095                           ; 0 bytes @ 0x47
  4096                           
  4097  0067                     setTemp_Main@error:	
  4098                           ; 1 bytes @ 0x47
  4099                           
  4100  0067                     setRFSW_AdjControl@status:	
  4101                           ; 1 bytes @ 0x47
  4102                           
  4103                           
  4104                           ; 1 bytes @ 0x47
  4105  0067                     	ds	1
  4106  0068                     ??_DelayOff_Main:	
  4107  0068                     setRFSW_AdjControl@sw:	
  4108                           ; 0 bytes @ 0x48
  4109                           
  4110  0068                     setRF_DimmerLights@status:	
  4111                           ; 1 bytes @ 0x48
  4112                           
  4113  0068                     setTemp_Main@SafeValue:	
  4114                           ; 1 bytes @ 0x48
  4115                           
  4116                           
  4117                           ; 2 bytes @ 0x48
  4118  0068                     	ds	1
  4119  0069                     setDelayOff_GO@i:	
  4120  0069                     setRF_DimmerLights@lights:	
  4121                           ; 1 bytes @ 0x49
  4122                           
  4123                           
  4124                           ; 1 bytes @ 0x49
  4125  0069                     	ds	1
  4126  006A                     ?_setDimmerLights_Dimming:	
  4127  006A                     setDelayOff_GO@j:	
  4128                           ; 0 bytes @ 0x4A
  4129                           
  4130  006A                     setDimmerLights_Dimming@status:	
  4131                           ; 1 bytes @ 0x4A
  4132                           
  4133  006A                     setTemp_Main@DangerValue:	
  4134                           ; 1 bytes @ 0x4A
  4135                           
  4136                           
  4137                           ; 2 bytes @ 0x4A
  4138  006A                     	ds	1
  4139  006B                     ??_setDimmerLights_Dimming:	
  4140  006B                     setDelayOff_GO@k:	
  4141                           ; 0 bytes @ 0x4B
  4142                           
  4143                           
  4144                           ; 1 bytes @ 0x4B
  4145  006B                     	ds	1
  4146  006C                     setDelayOff_GO@sw:	
  4147  006C                     setDimmerLights_Dimming@value:	
  4148                           ; 1 bytes @ 0x4C
  4149                           
  4150  006C                     setTemp_Main@TempGO:	
  4151                           ; 1 bytes @ 0x4C
  4152                           
  4153                           
  4154                           ; 1 bytes @ 0x4C
  4155  006C                     	ds	1
  4156  006D                     ?_setDimmerLights_OnOff:	
  4157  006D                     ??_setRFSW_Control:	
  4158                           ; 0 bytes @ 0x4D
  4159                           
  4160  006D                     setDimmerLights_OnOff@command:	
  4161                           ; 0 bytes @ 0x4D
  4162                           
  4163  006D                     setDimmerLights_Dimming@lights:	
  4164                           ; 1 bytes @ 0x4D
  4165                           
  4166  006D                     setTemp_Main@AD:	
  4167                           ; 1 bytes @ 0x4D
  4168                           
  4169                           
  4170                           ; 2 bytes @ 0x4D
  4171  006D                     	ds	1
  4172  006E                     ??_setDimmerLights_OnOff:	
  4173  006E                     setRFSW_Control@status:	
  4174                           ; 0 bytes @ 0x4E
  4175                           
  4176                           
  4177                           ; 1 bytes @ 0x4E
  4178  006E                     	ds	1
  4179  006F                     ??_Temp_Main:	
  4180  006F                     setRFSW_Control@sw:	
  4181                           ; 0 bytes @ 0x4F
  4182                           
  4183                           
  4184                           ; 1 bytes @ 0x4F
  4185  006F                     	ds	1
  4186  0070                     ??_setDimmerLights_Main:	
  4187  0070                     ??_RF_Main:	
  4188                           ; 0 bytes @ 0x50
  4189                           
  4190  0070                     ??_setControl_Lights_Table:	
  4191                           ; 0 bytes @ 0x50
  4192                           
  4193  0070                     ??_DimmerLights_Main:	
  4194                           ; 0 bytes @ 0x50
  4195                           
  4196  0070                     ??_main:	
  4197                           ; 0 bytes @ 0x50
  4198                           
  4199                           
  4200                           	psect	maintext
  4201  14E8                     __pmaintext:	
  4202                           ; 0 bytes @ 0x50
  4203 ;;
  4204 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4205 ;;
  4206 ;; *************** function _main *****************
  4207 ;; Defined at:
  4208 ;;		line 7 in file "../src/Main_B1.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;  argc            2    4[BANK1 ] int 
  4211 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  2    4[BANK1 ] int 
  4216 ;; Registers used:
  4217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 17F/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4223 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;Total ram usage:        4 bytes
  4228 ;; Hardware stack levels required when called:   13
  4229 ;; This function calls:
  4230 ;;		_Buzzer_Initialization
  4231 ;;		_Buzzer_Main
  4232 ;;		_CC2500_PowerOnInitial
  4233 ;;		_DelayOff_Initialization
  4234 ;;		_DelayOff_Main
  4235 ;;		_DimmerLights_Initialization
  4236 ;;		_DimmerLights_Main
  4237 ;;		_Exception_Main
  4238 ;;		_Flash_Memory_Initialization
  4239 ;;		_Flash_Memory_Main
  4240 ;;		_LED_Initialization
  4241 ;;		_LED_Main
  4242 ;;		_Load_Initialization
  4243 ;;		_Load_Main
  4244 ;;		_Mcu_Initialization
  4245 ;;		_RF_Initialization
  4246 ;;		_RF_Main
  4247 ;;		_Switch_Initialization
  4248 ;;		_Switch_Main
  4249 ;;		_Temp_Initialization
  4250 ;;		_Temp_Main
  4251 ;;		_WDT_Main
  4252 ;;		_getLoad_AD
  4253 ;;		_getTemp_AD
  4254 ;;		_myMain_Initialization
  4255 ;;		_my_MainTimer
  4256 ;; This function is called by:
  4257 ;;		Startup code after reset
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _main
  4263  14E8                     _main:	
  4264                           
  4265                           ;Main_B1.c: 8: myMain_Initialization();
  4266                           
  4267                           ;incstack = 0
  4268                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4269  14E8  319C  2494  3194   	fcall	_myMain_Initialization
  4270                           
  4271                           ;Main_B1.c: 9: Mcu_Initialization();
  4272  14EB  319C  2424  3194   	fcall	_Mcu_Initialization
  4273                           
  4274                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4275  14EE  3184  247F  3194   	fcall	_Flash_Memory_Initialization
  4276                           
  4277                           ;Main_B1.c: 11: LED_Initialization();
  4278  14F1  3199  21D0  3194   	fcall	_LED_Initialization
  4279                           
  4280                           ;Main_B1.c: 12: Buzzer_Initialization();
  4281  14F4  3199  21B6  3194   	fcall	_Buzzer_Initialization
  4282                           
  4283                           ;Main_B1.c: 14: ;;
  4284                           ;Main_B1.c: 15: Temp_Initialization();
  4285  14F7  3199  21C2  3194   	fcall	_Temp_Initialization
  4286                           
  4287                           ;Main_B1.c: 16: Load_Initialization();
  4288  14FA  3199  21B9  3194   	fcall	_Load_Initialization
  4289                           
  4290                           ;Main_B1.c: 17: ;;
  4291                           ;Main_B1.c: 18: DelayOff_Initialization();
  4292  14FD  3199  21C8  3194   	fcall	_DelayOff_Initialization
  4293                           
  4294                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4295  1500  319A  220D  3194   	fcall	_DimmerLights_Initialization
  4296                           
  4297                           ;Main_B1.c: 21: ;;
  4298                           ;Main_B1.c: 22: ;;
  4299                           ;Main_B1.c: 23: ;;
  4300                           ;Main_B1.c: 24: Switch_Initialization();
  4301  1503  3199  21EC  3194   	fcall	_Switch_Initialization
  4302                           
  4303                           ;Main_B1.c: 25: RF_Initialization();
  4304  1506  3199  21BC  3194   	fcall	_RF_Initialization
  4305                           
  4306                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4307  1509  319C  24D0  3194   	fcall	_CC2500_PowerOnInitial
  4308  150C                     l9087:	
  4309                           ;Main_B1.c: 27: ;;
  4310                           ;Main_B1.c: 28: ;;
  4311                           ;Main_B1.c: 30: while (1) {
  4312                           
  4313                           
  4314                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4315  150C  0021               	movlb	1	; select bank1
  4316  150D  1C2F               	btfss	_myMain^(0+128),0
  4317  150E  2D17               	goto	l9091
  4318                           
  4319                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4320  150F  3005               	movlw	5
  4321  1510  3189  217B  3194   	fcall	_getLoad_AD
  4322                           
  4323                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4324  1513  3009               	movlw	9
  4325  1514  318C  2402  3194   	fcall	_getTemp_AD
  4326  1517                     l9091:	
  4327                           
  4328                           ;Main_B1.c: 57: }
  4329                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4330  1517  0022               	movlb	2	; select bank2
  4331  1518  1C31               	btfss	_Timer1^(0+256),0
  4332  1519  2D0C               	goto	l9087
  4333                           
  4334                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4335  151A  1031               	bcf	_Timer1^(0+256),0
  4336                           
  4337                           ;Main_B1.c: 96: my_MainTimer();
  4338  151B  3191  21CC  3194   	fcall	_my_MainTimer
  4339                           
  4340                           ;Main_B1.c: 97: WDT_Main();
  4341  151E  319C  2436  3194   	fcall	_WDT_Main
  4342                           
  4343                           ;Main_B1.c: 98: ;;
  4344                           ;Main_B1.c: 99: ;;
  4345                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4346  1521  0021               	movlb	1	; select bank1
  4347  1522  1C2F               	btfss	_myMain^(0+128),0
  4348  1523  2D0C               	goto	l9087
  4349                           
  4350                           ;Main_B1.c: 101: Flash_Memory_Main();
  4351  1524  3192  2285  3194   	fcall	_Flash_Memory_Main
  4352                           
  4353                           ;Main_B1.c: 103: LED_Main();
  4354  1527  3199  21D4  3194   	fcall	_LED_Main
  4355                           
  4356                           ;Main_B1.c: 104: Buzzer_Main();
  4357  152A  3193  2350  3194   	fcall	_Buzzer_Main
  4358                           
  4359                           ;Main_B1.c: 106: ;;
  4360                           ;Main_B1.c: 107: Temp_Main();
  4361  152D  3199  21C5  3194   	fcall	_Temp_Main
  4362                           
  4363                           ;Main_B1.c: 108: Load_Main();
  4364  1530  3180  2053  3194   	fcall	_Load_Main
  4365                           
  4366                           ;Main_B1.c: 109: ;;
  4367                           ;Main_B1.c: 111: ;;
  4368                           ;Main_B1.c: 112: DimmerLights_Main();
  4369  1533  319E  269D  3194   	fcall	_DimmerLights_Main
  4370                           
  4371                           ;Main_B1.c: 113: Switch_Main();
  4372  1536  319A  221B  3194   	fcall	_Switch_Main
  4373                           
  4374                           ;Main_B1.c: 114: ;;
  4375                           ;Main_B1.c: 115: ;;
  4376                           ;Main_B1.c: 117: RF_Main();
  4377  1539  3199  21BF  3194   	fcall	_RF_Main
  4378                           
  4379                           ;Main_B1.c: 118: DelayOff_Main();
  4380  153C  3199  21CC  3194   	fcall	_DelayOff_Main
  4381                           
  4382                           ;Main_B1.c: 119: ;;
  4383                           ;Main_B1.c: 120: ;;
  4384                           ;Main_B1.c: 121: Exception_Main();
  4385  153F  3186  2636  3194   	fcall	_Exception_Main
  4386  1542  2D0C               	goto	l9087
  4387  1543                     __end_of_main:	
  4388                           ;Main_B1.c: 128: }
  4389                           ;Main_B1.c: 129: }
  4390                           ;Main_B1.c: 163: }
  4391                           ;Main_B1.c: 164: return (0);
  4392                           ;	Return value of _main is never used
  4393                           
  4394                           
  4395                           	psect	text1
  4396  11CC                     __ptext1:	
  4397 ;; *************** function _my_MainTimer *****************
  4398 ;; Defined at:
  4399 ;;		line 185 in file "../src/Main_B1.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;		None
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;		None
  4404 ;; Return value:  Size  Location     Type
  4405 ;;		None               void
  4406 ;; Registers used:
  4407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;Total ram usage:        1 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:    7
  4420 ;; This function calls:
  4421 ;;		_setBuz
  4422 ;; This function is called by:
  4423 ;;		_main
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           
  4428                           ;psect for function _my_MainTimer
  4429  11CC                     _my_MainTimer:	
  4430                           
  4431                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4432                           
  4433                           ;incstack = 0
  4434                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4435  11CC  0021               	movlb	1	; select bank1
  4436  11CD  182F               	btfsc	_myMain^(0+128),0
  4437  11CE  29E6               	goto	l8249
  4438                           
  4439                           ;Main_B1.c: 188: myMain.PowerCount++;
  4440  11CF  3001               	movlw	1
  4441  11D0  0020               	movlb	0	; select bank0
  4442  11D1  00AD               	movwf	??_my_MainTimer
  4443  11D2  082D               	movf	??_my_MainTimer,w
  4444  11D3  0021               	movlb	1	; select bank1
  4445  11D4  07B0               	addwf	(_myMain^(0+128)+1),f
  4446                           
  4447                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4448  11D5  0830               	movf	(_myMain^(0+128)+1),w
  4449  11D6  3A4B               	xorlw	75
  4450  11D7  1D03               	skipz
  4451  11D8  0008               	return
  4452                           
  4453                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4454  11D9  01B0               	clrf	(_myMain^(0+128)+1)
  4455                           
  4456                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4457  11DA  142F               	bsf	_myMain^(0+128),0
  4458                           
  4459                           ;Main_B1.c: 196: setBuz(3, 50);
  4460  11DB  3032               	movlw	50
  4461  11DC  0020               	movlb	0	; select bank0
  4462  11DD  00A9               	movwf	setBuz@time
  4463  11DE  3000               	movlw	0
  4464  11DF  00AA               	movwf	setBuz@time+1
  4465  11E0  3003               	movlw	3
  4466  11E1  3194  248F         	fcall	_setBuz
  4467                           
  4468                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4469  11E3  0021               	movlb	1	; select bank1
  4470  11E4  162F               	bsf	_myMain^(0+128),4
  4471                           
  4472                           ;Main_B1.c: 206: }
  4473                           ;Main_B1.c: 207: } else {
  4474  11E5  0008               	return
  4475  11E6                     l8249:	
  4476                           
  4477                           ;Main_B1.c: 208: myMain.PowerCount++;
  4478  11E6  3001               	movlw	1
  4479  11E7  0020               	movlb	0	; select bank0
  4480  11E8  00AD               	movwf	??_my_MainTimer
  4481  11E9  082D               	movf	??_my_MainTimer,w
  4482  11EA  0021               	movlb	1	; select bank1
  4483  11EB  07B0               	addwf	(_myMain^(0+128)+1),f
  4484                           
  4485                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4486  11EC  0830               	movf	(_myMain^(0+128)+1),w
  4487  11ED  3A32               	xorlw	50
  4488  11EE  1903               	btfsc	3,2
  4489                           
  4490                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4491  11EF  01B0               	clrf	(_myMain^(0+128)+1)
  4492                           
  4493                           ;Main_B1.c: 226: }
  4494                           ;Main_B1.c: 228: myMain.Count1++;
  4495  11F0  3001               	movlw	1
  4496  11F1  07B3               	addwf	(_myMain^(0+128)+4),f
  4497  11F2  3000               	movlw	0
  4498  11F3  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4499                           
  4500                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4501  11F4  3004               	movlw	4
  4502  11F5  3EAF               	addlw	_myMain& (0+255)
  4503  11F6  0086               	movwf	6
  4504  11F7  0187               	clrf	7
  4505  11F8  3F40               	moviw [0]fsr1
  4506  11F9  3A32               	xorlw	50
  4507  11FA  1D03               	skipz
  4508  11FB  29FE               	goto	u8325
  4509  11FC  3F41               	moviw [1]fsr1
  4510  11FD  3A00               	xorlw	0
  4511  11FE                     u8325:	
  4512  11FE  1D03               	skipz
  4513  11FF  0008               	return
  4514                           
  4515                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4516  1200  01B3               	clrf	(_myMain^(0+128)+4)
  4517  1201  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4518                           
  4519                           ;Main_B1.c: 242: if (myMain.Flag) {
  4520  1202  1CAF               	btfss	_myMain^(0+128),1
  4521  1203  2A06               	goto	l1495
  4522                           
  4523                           ;Main_B1.c: 243: myMain.Flag = 0;
  4524  1204  10AF               	bcf	_myMain^(0+128),1
  4525                           
  4526                           ;Main_B1.c: 252: } else {
  4527  1205  0008               	return
  4528  1206                     l1495:	
  4529                           
  4530                           ;Main_B1.c: 253: myMain.Flag = 1;
  4531  1206  14AF               	bsf	_myMain^(0+128),1
  4532  1207  0008               	return
  4533  1208                     __end_of_my_MainTimer:	
  4534                           
  4535                           	psect	text2
  4536  1C94                     __ptext2:	
  4537 ;; *************** function _myMain_Initialization *****************
  4538 ;; Defined at:
  4539 ;;		line 170 in file "../src/Main_B1.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;		None
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;		None
  4544 ;; Return value:  Size  Location     Type
  4545 ;;		None               void
  4546 ;; Registers used:
  4547 ;;		wreg, fsr1l, fsr1h
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;Total ram usage:        1 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:    5
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_main
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _myMain_Initialization
  4569  1C94                     _myMain_Initialization:	
  4570                           
  4571                           ;Main_B1.c: 173: product = &_product;
  4572                           
  4573                           ;incstack = 0
  4574                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4575  1C94  3045               	movlw	__product& (0+255)
  4576  1C95  0020               	movlb	0	; select bank0
  4577  1C96  00A0               	movwf	??_myMain_Initialization
  4578  1C97  0820               	movf	??_myMain_Initialization,w
  4579  1C98  0021               	movlb	1	; select bank1
  4580  1C99  00EE               	movwf	_product^(0+128)
  4581                           
  4582                           ;Main_B1.c: 174: product->Data[20] = 209;
  4583  1C9A  30D1               	movlw	209
  4584  1C9B  0020               	movlb	0	; select bank0
  4585  1C9C  00A0               	movwf	??_myMain_Initialization
  4586  1C9D  0021               	movlb	1	; select bank1
  4587  1C9E  086E               	movf	_product^(0+128),w
  4588  1C9F  3E14               	addlw	20
  4589  1CA0  0086               	movwf	6
  4590  1CA1  3002               	movlw	2	; select bank4/5
  4591  1CA2  0087               	movwf	7
  4592  1CA3  0020               	movlb	0	; select bank0
  4593  1CA4  0820               	movf	??_myMain_Initialization,w
  4594  1CA5  0081               	movwf	1
  4595  1CA6  0008               	return
  4596  1CA7                     __end_of_myMain_Initialization:	
  4597                           
  4598                           	psect	text3
  4599  0C02                     __ptext3:	
  4600 ;; *************** function _getTemp_AD *****************
  4601 ;; Defined at:
  4602 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  channel         1    wreg     unsigned char 
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;  channel         1    5[BANK0 ] unsigned char 
  4607 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4608 ;; Return value:  Size  Location     Type
  4609 ;;		None               void
  4610 ;; Registers used:
  4611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;Total ram usage:        4 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; Hardware stack levels required when called:    7
  4624 ;; This function calls:
  4625 ;;		_getAD
  4626 ;; This function is called by:
  4627 ;;		_main
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function _getTemp_AD
  4633  0C02                     _getTemp_AD:	
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4637                           ;getTemp_AD@channel stored from wreg
  4638  0C02  0020               	movlb	0	; select bank0
  4639  0C03  00A5               	movwf	getTemp_AD@channel
  4640                           
  4641                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4642  0C04  01A6               	clrf	getTemp_AD@ADRES
  4643  0C05  01A7               	clrf	getTemp_AD@ADRES+1
  4644                           
  4645                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4646  0C06  0021               	movlb	1	; select bank1
  4647  0C07  1D58               	btfss	_Temp^(0+128),2
  4648  0C08  0008               	return
  4649                           
  4650                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4651  0C09  30F0               	movlw	240
  4652  0C0A  0020               	movlb	0	; select bank0
  4653  0C0B  00A4               	movwf	??_getTemp_AD
  4654  0C0C  0824               	movf	??_getTemp_AD,w
  4655  0C0D  00A0               	movwf	getAD@adcon1
  4656  0C0E  0825               	movf	getTemp_AD@channel,w
  4657  0C0F  319E  26BD  318C   	fcall	_getAD
  4658  0C12  0020               	movlb	0	; select bank0
  4659  0C13  0821               	movf	?_getAD+1,w
  4660  0C14  01A7               	clrf	getTemp_AD@ADRES+1
  4661  0C15  07A7               	addwf	getTemp_AD@ADRES+1,f
  4662  0C16  0820               	movf	?_getAD,w
  4663  0C17  01A6               	clrf	getTemp_AD@ADRES
  4664  0C18  07A6               	addwf	getTemp_AD@ADRES,f
  4665                           
  4666                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4667  0C19  0827               	movf	getTemp_AD@ADRES+1,w
  4668  0C1A  0426               	iorwf	getTemp_AD@ADRES,w
  4669  0C1B  1903               	skipnz
  4670  0C1C  0008               	return
  4671                           
  4672                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4673  0C1D  0827               	movf	getTemp_AD@ADRES+1,w
  4674  0C1E  0021               	movlb	1	; select bank1
  4675  0C1F  025D               	subwf	((_Temp+1)^(0+128)+4),w
  4676  0C20  1D03               	skipz
  4677  0C21  2C26               	goto	u8245
  4678  0C22  0020               	movlb	0	; select bank0
  4679  0C23  0826               	movf	getTemp_AD@ADRES,w
  4680  0C24  0021               	movlb	1	; select bank1
  4681  0C25  025C               	subwf	(_Temp^(0+128)+4),w
  4682  0C26                     u8245:	
  4683  0C26  1803               	skipnc
  4684  0C27  2C33               	goto	l8219
  4685                           
  4686                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4687  0C28  0020               	movlb	0	; select bank0
  4688  0C29  0827               	movf	getTemp_AD@ADRES+1,w
  4689  0C2A  0021               	movlb	1	; select bank1
  4690  0C2B  01DD               	clrf	((_Temp+1)^(0+128)+4)
  4691  0C2C  07DD               	addwf	((_Temp+1)^(0+128)+4),f
  4692  0C2D  0020               	movlb	0	; select bank0
  4693  0C2E  0826               	movf	getTemp_AD@ADRES,w
  4694  0C2F  0021               	movlb	1	; select bank1
  4695  0C30  01DC               	clrf	(_Temp^(0+128)+4)
  4696  0C31  07DC               	addwf	(_Temp^(0+128)+4),f
  4697                           
  4698                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4699  0C32  0008               	return
  4700  0C33                     l8219:	
  4701  0C33  0020               	movlb	0	; select bank0
  4702  0C34  0827               	movf	getTemp_AD@ADRES+1,w
  4703  0C35  0021               	movlb	1	; select bank1
  4704  0C36  025F               	subwf	((_Temp+1)^(0+128)+6),w
  4705  0C37  1D03               	skipz
  4706  0C38  2C3D               	goto	u8255
  4707  0C39  0020               	movlb	0	; select bank0
  4708  0C3A  0826               	movf	getTemp_AD@ADRES,w
  4709  0C3B  0021               	movlb	1	; select bank1
  4710  0C3C  025E               	subwf	(_Temp^(0+128)+6),w
  4711  0C3D                     u8255:	
  4712  0C3D  1803               	skipnc
  4713  0C3E  2C4A               	goto	l8223
  4714                           
  4715                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4716  0C3F  0020               	movlb	0	; select bank0
  4717  0C40  0827               	movf	getTemp_AD@ADRES+1,w
  4718  0C41  0021               	movlb	1	; select bank1
  4719  0C42  01DF               	clrf	((_Temp+1)^(0+128)+6)
  4720  0C43  07DF               	addwf	((_Temp+1)^(0+128)+6),f
  4721  0C44  0020               	movlb	0	; select bank0
  4722  0C45  0826               	movf	getTemp_AD@ADRES,w
  4723  0C46  0021               	movlb	1	; select bank1
  4724  0C47  01DE               	clrf	(_Temp^(0+128)+6)
  4725  0C48  07DE               	addwf	(_Temp^(0+128)+6),f
  4726                           
  4727                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4728  0C49  0008               	return
  4729  0C4A                     l8223:	
  4730  0C4A  0020               	movlb	0	; select bank0
  4731  0C4B  0827               	movf	getTemp_AD@ADRES+1,w
  4732  0C4C  0021               	movlb	1	; select bank1
  4733  0C4D  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4734  0C4E  1D03               	skipz
  4735  0C4F  2C54               	goto	u8265
  4736  0C50  0020               	movlb	0	; select bank0
  4737  0C51  0826               	movf	getTemp_AD@ADRES,w
  4738  0C52  0021               	movlb	1	; select bank1
  4739  0C53  0260               	subwf	(_Temp^(0+128)+8),w
  4740  0C54                     u8265:	
  4741  0C54  1803               	skipnc
  4742  0C55  2C61               	goto	l8227
  4743                           
  4744                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4745  0C56  0020               	movlb	0	; select bank0
  4746  0C57  0827               	movf	getTemp_AD@ADRES+1,w
  4747  0C58  0021               	movlb	1	; select bank1
  4748  0C59  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4749  0C5A  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4750  0C5B  0020               	movlb	0	; select bank0
  4751  0C5C  0826               	movf	getTemp_AD@ADRES,w
  4752  0C5D  0021               	movlb	1	; select bank1
  4753  0C5E  01E0               	clrf	(_Temp^(0+128)+8)
  4754  0C5F  07E0               	addwf	(_Temp^(0+128)+8),f
  4755                           
  4756                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4757  0C60  0008               	return
  4758  0C61                     l8227:	
  4759  0C61  0020               	movlb	0	; select bank0
  4760  0C62  0827               	movf	getTemp_AD@ADRES+1,w
  4761  0C63  0021               	movlb	1	; select bank1
  4762  0C64  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4763  0C65  1D03               	skipz
  4764  0C66  2C6B               	goto	u8275
  4765  0C67  0020               	movlb	0	; select bank0
  4766  0C68  0826               	movf	getTemp_AD@ADRES,w
  4767  0C69  0021               	movlb	1	; select bank1
  4768  0C6A  0262               	subwf	(_Temp^(0+128)+10),w
  4769  0C6B                     u8275:	
  4770  0C6B  1803               	skipnc
  4771  0C6C  2C78               	goto	l8231
  4772                           
  4773                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4774  0C6D  0020               	movlb	0	; select bank0
  4775  0C6E  0827               	movf	getTemp_AD@ADRES+1,w
  4776  0C6F  0021               	movlb	1	; select bank1
  4777  0C70  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4778  0C71  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4779  0C72  0020               	movlb	0	; select bank0
  4780  0C73  0826               	movf	getTemp_AD@ADRES,w
  4781  0C74  0021               	movlb	1	; select bank1
  4782  0C75  01E2               	clrf	(_Temp^(0+128)+10)
  4783  0C76  07E2               	addwf	(_Temp^(0+128)+10),f
  4784                           
  4785                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4786  0C77  0008               	return
  4787  0C78                     l8231:	
  4788  0C78  0020               	movlb	0	; select bank0
  4789  0C79  0827               	movf	getTemp_AD@ADRES+1,w
  4790  0C7A  0021               	movlb	1	; select bank1
  4791  0C7B  0265               	subwf	((_Temp+1)^(0+128)+12),w
  4792  0C7C  1D03               	skipz
  4793  0C7D  2C82               	goto	u8285
  4794  0C7E  0020               	movlb	0	; select bank0
  4795  0C7F  0826               	movf	getTemp_AD@ADRES,w
  4796  0C80  0021               	movlb	1	; select bank1
  4797  0C81  0264               	subwf	(_Temp^(0+128)+12),w
  4798  0C82                     u8285:	
  4799  0C82  1803               	skipnc
  4800  0C83  0008               	return
  4801                           
  4802                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4803  0C84  0020               	movlb	0	; select bank0
  4804  0C85  0827               	movf	getTemp_AD@ADRES+1,w
  4805  0C86  0021               	movlb	1	; select bank1
  4806  0C87  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4807  0C88  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4808  0C89  0020               	movlb	0	; select bank0
  4809  0C8A  0826               	movf	getTemp_AD@ADRES,w
  4810  0C8B  0021               	movlb	1	; select bank1
  4811  0C8C  01E4               	clrf	(_Temp^(0+128)+12)
  4812  0C8D  07E4               	addwf	(_Temp^(0+128)+12),f
  4813  0C8E  0008               	return
  4814  0C8F                     __end_of_getTemp_AD:	
  4815                           
  4816                           	psect	text4
  4817  097B                     __ptext4:	
  4818 ;; *************** function _getLoad_AD *****************
  4819 ;; Defined at:
  4820 ;;		line 16 in file "../src/OverLoad_B1.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  channel         1    wreg     unsigned char 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  channel         1    6[BANK0 ] unsigned char 
  4825 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4826 ;;  i               1   11[BANK0 ] unsigned char 
  4827 ;;  j               1    8[BANK0 ] unsigned char 
  4828 ;;  k               1    7[BANK0 ] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;		None               void
  4831 ;; Registers used:
  4832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4839 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;Total ram usage:        8 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    7
  4845 ;; This function calls:
  4846 ;;		_getAD
  4847 ;; This function is called by:
  4848 ;;		_main
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           
  4853                           ;psect for function _getLoad_AD
  4854  097B                     _getLoad_AD:	
  4855                           
  4856                           ;incstack = 0
  4857                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4858                           ;getLoad_AD@channel stored from wreg
  4859  097B  0020               	movlb	0	; select bank0
  4860  097C  00A6               	movwf	getLoad_AD@channel
  4861                           
  4862                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4863  097D  01AB               	clrf	getLoad_AD@i
  4864  097E  01A8               	clrf	getLoad_AD@j
  4865  097F  01A7               	clrf	getLoad_AD@k
  4866                           
  4867                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4868  0980  01A9               	clrf	getLoad_AD@ADRES
  4869  0981  01AA               	clrf	getLoad_AD@ADRES+1
  4870                           
  4871                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4872  0982  0022               	movlb	2	; select bank2
  4873  0983  1E38               	btfss	_Load^(0+256),4
  4874  0984  0008               	return
  4875                           
  4876                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4877  0985  30F3               	movlw	243
  4878  0986  0020               	movlb	0	; select bank0
  4879  0987  00A4               	movwf	??_getLoad_AD
  4880  0988  0824               	movf	??_getLoad_AD,w
  4881  0989  00A0               	movwf	getAD@adcon1
  4882  098A  0826               	movf	getLoad_AD@channel,w
  4883  098B  319E  26BD  3189   	fcall	_getAD
  4884  098E  0020               	movlb	0	; select bank0
  4885  098F  0821               	movf	?_getAD+1,w
  4886  0990  01AA               	clrf	getLoad_AD@ADRES+1
  4887  0991  07AA               	addwf	getLoad_AD@ADRES+1,f
  4888  0992  0820               	movf	?_getAD,w
  4889  0993  01A9               	clrf	getLoad_AD@ADRES
  4890  0994  07A9               	addwf	getLoad_AD@ADRES,f
  4891                           
  4892                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4893  0995  01AB               	clrf	getLoad_AD@i
  4894  0996  3004               	movlw	4
  4895  0997  022B               	subwf	getLoad_AD@i,w
  4896  0998  1803               	btfsc	3,0
  4897  0999  29C1               	goto	l8187
  4898  099A                     l8175:	
  4899                           
  4900                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4901  099A  352B               	lslf	getLoad_AD@i,w
  4902  099B  3E43               	addlw	(_Load+11)& (0+255)
  4903  099C  0086               	movwf	6
  4904  099D  3001               	movlw	1	; select bank2/3
  4905  099E  0087               	movwf	7
  4906  099F  3F40               	moviw [0]fsr1
  4907  09A0  00A4               	movwf	??_getLoad_AD
  4908  09A1  3F41               	moviw [1]fsr1
  4909  09A2  00A5               	movwf	??_getLoad_AD+1
  4910  09A3  082A               	movf	getLoad_AD@ADRES+1,w
  4911  09A4  0225               	subwf	??_getLoad_AD+1,w
  4912  09A5  1D03               	skipz
  4913  09A6  29A9               	goto	u8145
  4914  09A7  0829               	movf	getLoad_AD@ADRES,w
  4915  09A8  0224               	subwf	??_getLoad_AD,w
  4916  09A9                     u8145:	
  4917  09A9  1803               	skipnc
  4918  09AA  29B9               	goto	l8183
  4919  09AB  08A8               	movf	getLoad_AD@j,f
  4920  09AC  1D03               	skipz
  4921  09AD  29B9               	goto	l8183
  4922                           
  4923                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4924  09AE  352B               	lslf	getLoad_AD@i,w
  4925  09AF  3E43               	addlw	(_Load+11)& (0+255)
  4926  09B0  0086               	movwf	6
  4927  09B1  3001               	movlw	1	; select bank2/3
  4928  09B2  0087               	movwf	7
  4929  09B3  0829               	movf	getLoad_AD@ADRES,w
  4930  09B4  3FC0               	movwi [0]fsr1
  4931  09B5  082A               	movf	getLoad_AD@ADRES+1,w
  4932  09B6  3FC1               	movwi [1]fsr1
  4933                           
  4934                           ;OverLoad_B1.c: 25: j = 1;
  4935  09B7  01A8               	clrf	getLoad_AD@j
  4936  09B8  0AA8               	incf	getLoad_AD@j,f
  4937  09B9                     l8183:	
  4938  09B9  3001               	movlw	1
  4939  09BA  00A4               	movwf	??_getLoad_AD
  4940  09BB  0824               	movf	??_getLoad_AD,w
  4941  09BC  07AB               	addwf	getLoad_AD@i,f
  4942  09BD  3004               	movlw	4
  4943  09BE  022B               	subwf	getLoad_AD@i,w
  4944  09BF  1C03               	skipc
  4945  09C0  299A               	goto	l8175
  4946  09C1                     l8187:	
  4947                           
  4948                           ;OverLoad_B1.c: 26: }
  4949                           ;OverLoad_B1.c: 27: }
  4950                           ;OverLoad_B1.c: 28: if (j == 0) {
  4951  09C1  08A8               	movf	getLoad_AD@j,f
  4952  09C2  1D03               	skipz
  4953  09C3  0008               	return
  4954                           
  4955                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4956  09C4  01AB               	clrf	getLoad_AD@i
  4957  09C5                     L1:	
  4958  09C5  3004               	movlw	4
  4959  09C6  022B               	subwf	getLoad_AD@i,w
  4960  09C7  1803               	btfsc	3,0
  4961  09C8  0008               	return
  4962                           
  4963                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4964  09C9  352B               	lslf	getLoad_AD@i,w
  4965  09CA  3E4D               	addlw	(_Load+21)& (0+255)
  4966  09CB  0086               	movwf	6
  4967  09CC  3001               	movlw	1	; select bank2/3
  4968  09CD  0087               	movwf	7
  4969  09CE  3F40               	moviw [0]fsr1
  4970  09CF  00A4               	movwf	??_getLoad_AD
  4971  09D0  3F41               	moviw [1]fsr1
  4972  09D1  00A5               	movwf	??_getLoad_AD+1
  4973  09D2  0825               	movf	??_getLoad_AD+1,w
  4974  09D3  022A               	subwf	getLoad_AD@ADRES+1,w
  4975  09D4  1D03               	skipz
  4976  09D5  29D8               	goto	u8195
  4977  09D6  0824               	movf	??_getLoad_AD,w
  4978  09D7  0229               	subwf	getLoad_AD@ADRES,w
  4979  09D8                     u8195:	
  4980  09D8  1803               	skipnc
  4981  09D9  29E8               	goto	l8203
  4982  09DA  08A7               	movf	getLoad_AD@k,f
  4983  09DB  1D03               	skipz
  4984  09DC  29E8               	goto	l8203
  4985                           
  4986                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4987  09DD  352B               	lslf	getLoad_AD@i,w
  4988  09DE  3E4D               	addlw	(_Load+21)& (0+255)
  4989  09DF  0086               	movwf	6
  4990  09E0  3001               	movlw	1	; select bank2/3
  4991  09E1  0087               	movwf	7
  4992  09E2  0829               	movf	getLoad_AD@ADRES,w
  4993  09E3  3FC0               	movwi [0]fsr1
  4994  09E4  082A               	movf	getLoad_AD@ADRES+1,w
  4995  09E5  3FC1               	movwi [1]fsr1
  4996                           
  4997                           ;OverLoad_B1.c: 32: k = 1;
  4998  09E6  01A7               	clrf	getLoad_AD@k
  4999  09E7  0AA7               	incf	getLoad_AD@k,f
  5000  09E8                     l8203:	
  5001  09E8  3001               	movlw	1
  5002  09E9  00A4               	movwf	??_getLoad_AD
  5003  09EA  0824               	movf	??_getLoad_AD,w
  5004  09EB  07AB               	addwf	getLoad_AD@i,f
  5005  09EC  29C5               	goto	L1
  5006  09ED                     __end_of_getLoad_AD:	
  5007                           
  5008                           	psect	text5
  5009  1EBD                     __ptext5:	
  5010 ;; *************** function _getAD *****************
  5011 ;; Defined at:
  5012 ;;		line 461 in file "../src/MCU_B1.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  adcon0          1    wreg     unsigned char 
  5015 ;;  adcon1          1    0[BANK0 ] unsigned char 
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;  adcon0          1    3[BANK0 ] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  2    0[BANK0 ] int 
  5020 ;; Registers used:
  5021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5027 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;Total ram usage:        4 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    6
  5034 ;; This function calls:
  5035 ;;		_Timeout_Counter
  5036 ;;		_set_TimeoutCleared
  5037 ;; This function is called by:
  5038 ;;		_getLoad_AD
  5039 ;;		_getTemp_AD
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           
  5044                           ;psect for function _getAD
  5045  1EBD                     _getAD:	
  5046                           
  5047                           ;incstack = 0
  5048                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5049                           ;getAD@adcon0 stored from wreg
  5050  1EBD  0020               	movlb	0	; select bank0
  5051  1EBE  00A3               	movwf	getAD@adcon0
  5052                           
  5053                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5054  1EBF  0823               	movf	getAD@adcon0,w
  5055  1EC0  0021               	movlb	1	; select bank1
  5056  1EC1  009D               	movwf	29	;volatile
  5057                           
  5058                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5059  1EC2  0020               	movlb	0	; select bank0
  5060  1EC3  0820               	movf	getAD@adcon1,w
  5061  1EC4  0021               	movlb	1	; select bank1
  5062  1EC5  009E               	movwf	30	;volatile
  5063                           
  5064                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5065  1EC6  149D               	bsf	29,1	;volatile
  5066                           
  5067                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5068  1EC7  2ECB               	goto	l7651
  5069  1EC8                     l7649:	
  5070                           
  5071                           ;MCU_B1.c: 466: Timeout_Counter();
  5072  1EC8  319C  24E5  319E   	fcall	_Timeout_Counter
  5073  1ECB                     l7651:	
  5074  1ECB  0021               	movlb	1	; select bank1
  5075  1ECC  1C9D               	btfss	29,1	;volatile
  5076  1ECD  2ED0               	goto	l7655
  5077  1ECE  1D39               	btfss	(_myMain^(0+128)+10),2
  5078  1ECF  2EC8               	goto	l7649
  5079  1ED0                     l7655:	
  5080                           
  5081                           ;MCU_B1.c: 467: };
  5082                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5083  1ED0  3199  21F0         	fcall	_set_TimeoutCleared
  5084                           
  5085                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5086  1ED2  0021               	movlb	1	; select bank1
  5087  1ED3  081C               	movf	28,w	;volatile
  5088  1ED4  0020               	movlb	0	; select bank0
  5089  1ED5  01A1               	clrf	?_getAD+1
  5090  1ED6  07A1               	addwf	?_getAD+1,f
  5091  1ED7  0021               	movlb	1	; select bank1
  5092  1ED8  081B               	movf	27,w	;volatile
  5093  1ED9  0020               	movlb	0	; select bank0
  5094  1EDA  01A0               	clrf	?_getAD
  5095  1EDB  07A0               	addwf	?_getAD,f
  5096  1EDC  0008               	return
  5097  1EDD                     __end_of_getAD:	
  5098                           
  5099                           	psect	text6
  5100  1C36                     __ptext6:	
  5101 ;; *************** function _WDT_Main *****************
  5102 ;; Defined at:
  5103 ;;		line 1119 in file "../src/MCU_B1.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;		None
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;		None
  5108 ;; Return value:  Size  Location     Type
  5109 ;;		None               void
  5110 ;; Registers used:
  5111 ;;		wreg, status,2, status,0, pclath, cstack
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;Total ram usage:        1 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    6
  5124 ;; This function calls:
  5125 ;;		_WDT_Clearing
  5126 ;; This function is called by:
  5127 ;;		_main
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           
  5132                           ;psect for function _WDT_Main
  5133  1C36                     _WDT_Main:	
  5134                           
  5135                           ;MCU_B1.c: 1120: if (WDT.Enable == 1) {
  5136                           
  5137                           ;incstack = 0
  5138                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5139  1C36  0022               	movlb	2	; select bank2
  5140  1C37  1C36               	btfss	_WDT^(0+256),0
  5141  1C38  0008               	return
  5142                           
  5143                           ;MCU_B1.c: 1121: if (WDT.Timer-- > 0) {
  5144  1C39  3001               	movlw	1
  5145  1C3A  02B7               	subwf	(_WDT^(0+256)+1),f
  5146  1C3B  0837               	movf	(_WDT^(0+256)+1),w
  5147  1C3C  3AFF               	xorlw	255
  5148  1C3D  1903               	skipnz
  5149  1C3E  0008               	return
  5150                           
  5151                           ;MCU_B1.c: 1122: WDT.Timer = 100;
  5152  1C3F  3064               	movlw	100
  5153  1C40  0020               	movlb	0	; select bank0
  5154  1C41  00A0               	movwf	??_WDT_Main
  5155  1C42  0820               	movf	??_WDT_Main,w
  5156  1C43  0022               	movlb	2	; select bank2
  5157  1C44  00B7               	movwf	(_WDT^(0+256)+1)
  5158                           
  5159                           ;MCU_B1.c: 1123: WDT_Clearing();
  5160  1C45  3180  2002         	fcall	_WDT_Clearing
  5161  1C47  0008               	return
  5162  1C48                     __end_of_WDT_Main:	
  5163                           
  5164                           	psect	text7
  5165  0002                     __ptext7:	
  5166 ;; *************** function _WDT_Clearing *****************
  5167 ;; Defined at:
  5168 ;;		line 1129 in file "../src/MCU_B1.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;		None
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;		None
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		None
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;Total ram usage:        0 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    5
  5189 ;; This function calls:
  5190 ;;		Nothing
  5191 ;; This function is called by:
  5192 ;;		_WDT_Main
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           
  5197                           ;psect for function _WDT_Clearing
  5198  0002                     _WDT_Clearing:	
  5199                           
  5200                           ;incstack = 0
  5201                           ; Regs used in _WDT_Clearing: []
  5202  0002  0064               	clrwdt	;# 
  5203  0003  0008               	return
  5204  0004                     __end_of_WDT_Clearing:	
  5205                           
  5206                           	psect	text8
  5207  19C5                     __ptext8:	
  5208 ;; *************** function _Temp_Main *****************
  5209 ;; Defined at:
  5210 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;		None
  5215 ;; Return value:  Size  Location     Type
  5216 ;;		None               void
  5217 ;; Registers used:
  5218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;Total ram usage:        0 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    8
  5231 ;; This function calls:
  5232 ;;		_setTemp_Main
  5233 ;; This function is called by:
  5234 ;;		_main
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           
  5239                           ;psect for function _Temp_Main
  5240  19C5                     _Temp_Main:	
  5241                           
  5242                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5243                           
  5244                           ;incstack = 0
  5245                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5246  19C5  3187  270B         	fcall	_setTemp_Main
  5247  19C7  0008               	return
  5248  19C8                     __end_of_Temp_Main:	
  5249                           
  5250                           	psect	text9
  5251  070B                     __ptext9:	
  5252 ;; *************** function _setTemp_Main *****************
  5253 ;; Defined at:
  5254 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;  AD              2   77[BANK0 ] int 
  5259 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5260 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5261 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5262 ;;  error           1   71[BANK0 ] unsigned char 
  5263 ;; Return value:  Size  Location     Type
  5264 ;;		None               void
  5265 ;; Registers used:
  5266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5275 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;Total ram usage:       10 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    7
  5279 ;; This function calls:
  5280 ;;		___lwdiv
  5281 ;;		_getMain_All_Error_Status
  5282 ;;		_getMain_All_LightsStatus
  5283 ;;		_setBuz
  5284 ;;		_setOverTemp_ADV_Restore
  5285 ;;		_setProductData
  5286 ;; This function is called by:
  5287 ;;		_Temp_Main
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           
  5292                           ;psect for function _setTemp_Main
  5293  070B                     _setTemp_Main:	
  5294                           
  5295                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5296                           
  5297                           ;incstack = 0
  5298                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5299  070B  3000               	movlw	0
  5300  070C  3190  2048  3187   	fcall	_getMain_All_Error_Status
  5301  070F  0020               	movlb	0	; select bank0
  5302  0710  00E5               	movwf	??_setTemp_Main
  5303  0711  0865               	movf	??_setTemp_Main,w
  5304  0712  00E7               	movwf	setTemp_Main@error
  5305                           
  5306                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5307  0713  01E8               	clrf	setTemp_Main@SafeValue
  5308  0714  01E9               	clrf	setTemp_Main@SafeValue+1
  5309  0715  01EA               	clrf	setTemp_Main@DangerValue
  5310  0716  01EB               	clrf	setTemp_Main@DangerValue+1
  5311                           
  5312                           ;OverTemperature_B1.c: 75: int AD = 0;
  5313  0717  01ED               	clrf	setTemp_Main@AD
  5314  0718  01EE               	clrf	setTemp_Main@AD+1
  5315                           
  5316                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5317  0719  319A  2255  3187   	fcall	_getMain_All_LightsStatus
  5318  071C  0020               	movlb	0	; select bank0
  5319  071D  00E5               	movwf	??_setTemp_Main
  5320  071E  0865               	movf	??_setTemp_Main,w
  5321  071F  00EC               	movwf	setTemp_Main@TempGO
  5322                           
  5323                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5324  0720  0021               	movlb	1	; select bank1
  5325  0721  1C58               	btfss	_Temp^(0+128),0
  5326  0722  2FDA               	goto	l1848
  5327                           
  5328                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5329  0723  1958               	btfsc	_Temp^(0+128),2
  5330  0724  2F42               	goto	l7757
  5331                           
  5332                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5333  0725  0020               	movlb	0	; select bank0
  5334  0726  086C               	movf	setTemp_Main@TempGO,w
  5335  0727  3A01               	xorlw	1
  5336  0728  1D03               	skipz
  5337  0729  2F2D               	goto	l1854
  5338  072A  0021               	movlb	1	; select bank1
  5339  072B  1CD8               	btfss	_Temp^(0+128),1
  5340  072C  2F30               	goto	l7749
  5341  072D                     l1854:	
  5342  072D  0021               	movlb	1	; select bank1
  5343  072E  1CD8               	btfss	_Temp^(0+128),1
  5344  072F  2F3F               	goto	l7755
  5345  0730                     l7749:	
  5346                           
  5347                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5348  0730  3001               	movlw	1
  5349  0731  07D9               	addwf	(_Temp^(0+128)+1),f
  5350  0732  3000               	movlw	0
  5351  0733  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5352                           
  5353                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5354  0734  3000               	movlw	0
  5355  0735  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5356  0736  30FA               	movlw	250
  5357  0737  1903               	skipnz
  5358  0738  0259               	subwf	(_Temp^(0+128)+1),w
  5359  0739  1C03               	skipc
  5360  073A  0008               	return
  5361                           
  5362                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5363  073B  01D9               	clrf	(_Temp^(0+128)+1)
  5364  073C  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5365                           
  5366                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5367  073D  1558               	bsf	_Temp^(0+128),2
  5368                           
  5369                           ;OverTemperature_B1.c: 92: }
  5370                           ;OverTemperature_B1.c: 93: } else {
  5371  073E  0008               	return
  5372  073F                     l7755:	
  5373                           
  5374                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5375  073F  01D9               	clrf	(_Temp^(0+128)+1)
  5376  0740  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5377                           
  5378                           ;OverTemperature_B1.c: 95: }
  5379                           ;OverTemperature_B1.c: 96: } else {
  5380  0741  0008               	return
  5381  0742                     l7757:	
  5382                           
  5383                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5384  0742  3001               	movlw	1
  5385  0743  07D9               	addwf	(_Temp^(0+128)+1),f
  5386  0744  3000               	movlw	0
  5387  0745  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5388                           
  5389                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5390  0746  3000               	movlw	0
  5391  0747  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5392  0748  3005               	movlw	5
  5393  0749  1903               	skipnz
  5394  074A  0259               	subwf	(_Temp^(0+128)+1),w
  5395  074B  1C03               	skipc
  5396  074C  0008               	return
  5397                           
  5398                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5399  074D  01D9               	clrf	(_Temp^(0+128)+1)
  5400  074E  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5401                           
  5402                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5403  074F  3003               	movlw	3
  5404  0750  0020               	movlb	0	; select bank0
  5405  0751  00A0               	movwf	___lwdiv@divisor
  5406  0752  3000               	movlw	0
  5407  0753  00A1               	movwf	___lwdiv@divisor+1
  5408  0754  300A               	movlw	10
  5409  0755  3ED8               	addlw	_Temp& (0+255)
  5410  0756  0086               	movwf	6
  5411  0757  0187               	clrf	7
  5412  0758  3008               	movlw	8
  5413  0759  3ED8               	addlw	_Temp& (0+255)
  5414  075A  0084               	movwf	4
  5415  075B  0185               	clrf	5
  5416  075C  3F00               	moviw [0]fsr0
  5417  075D  0021               	movlb	1	; select bank1
  5418  075E  075E               	addwf	(_Temp^(0+128)+6),w
  5419  075F  0020               	movlb	0	; select bank0
  5420  0760  00E5               	movwf	??_setTemp_Main
  5421  0761  3F01               	moviw [1]fsr0
  5422  0762  0021               	movlb	1	; select bank1
  5423  0763  3D5F               	addwfc	((_Temp+1)^(0+128)+6),w
  5424  0764  0020               	movlb	0	; select bank0
  5425  0765  00E6               	movwf	??_setTemp_Main+1
  5426  0766  3F40               	moviw [0]fsr1
  5427  0767  0765               	addwf	??_setTemp_Main,w
  5428  0768  00A2               	movwf	___lwdiv@dividend
  5429  0769  3F41               	moviw [1]fsr1
  5430  076A  3D66               	addwfc	??_setTemp_Main+1,w
  5431  076B  00A3               	movwf	___lwdiv@dividend+1
  5432  076C  3190  20B1  3187   	fcall	___lwdiv
  5433  076F  0020               	movlb	0	; select bank0
  5434  0770  0821               	movf	?___lwdiv+1,w
  5435  0771  01EE               	clrf	setTemp_Main@AD+1
  5436  0772  07EE               	addwf	setTemp_Main@AD+1,f
  5437  0773  0820               	movf	?___lwdiv,w
  5438  0774  01ED               	clrf	setTemp_Main@AD
  5439  0775  07ED               	addwf	setTemp_Main@AD,f
  5440                           
  5441                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5442  0776  319D  25ED  3187   	fcall	_setOverTemp_ADV_Restore
  5443                           
  5444                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5445  0779  0020               	movlb	0	; select bank0
  5446  077A  086E               	movf	setTemp_Main@AD+1,w
  5447  077B  3A80               	xorlw	128
  5448  077C  00E5               	movwf	??_setTemp_Main
  5449  077D  3080               	movlw	128
  5450  077E  0265               	subwf	??_setTemp_Main,w
  5451  077F  1D03               	skipz
  5452  0780  2F83               	goto	u7435
  5453  0781  3001               	movlw	1
  5454  0782  026D               	subwf	setTemp_Main@AD,w
  5455  0783                     u7435:	
  5456  0783  1C03               	skipc
  5457  0784  0008               	return
  5458                           
  5459                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5460  0785  0021               	movlb	1	; select bank1
  5461  0786  1158               	bcf	_Temp^(0+128),2
  5462                           
  5463                           ;OverTemperature_B1.c: 123: SafeValue = 0x205;
  5464  0787  3005               	movlw	5
  5465  0788  0020               	movlb	0	; select bank0
  5466  0789  00E8               	movwf	setTemp_Main@SafeValue
  5467  078A  3002               	movlw	2
  5468  078B  00E9               	movwf	setTemp_Main@SafeValue+1
  5469                           
  5470                           ;OverTemperature_B1.c: 124: DangerValue = 0x1ba;
  5471  078C  30BA               	movlw	186
  5472  078D  00EA               	movwf	setTemp_Main@DangerValue
  5473  078E  3001               	movlw	1
  5474  078F  00EB               	movwf	setTemp_Main@DangerValue+1
  5475                           
  5476                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5477  0790  0021               	movlb	1	; select bank1
  5478  0791  1CD8               	btfss	_Temp^(0+128),1
  5479  0792  2FB1               	goto	l7787
  5480                           
  5481                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5482  0793  0020               	movlb	0	; select bank0
  5483  0794  0869               	movf	setTemp_Main@SafeValue+1,w
  5484  0795  026E               	subwf	setTemp_Main@AD+1,w
  5485  0796  1D03               	skipz
  5486  0797  2F9A               	goto	u7455
  5487  0798  0868               	movf	setTemp_Main@SafeValue,w
  5488  0799  026D               	subwf	setTemp_Main@AD,w
  5489  079A                     u7455:	
  5490  079A  1C03               	skipc
  5491  079B  2FC6               	goto	l7797
  5492                           
  5493                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5494  079C  3001               	movlw	1
  5495  079D  00E5               	movwf	??_setTemp_Main
  5496  079E  0865               	movf	??_setTemp_Main,w
  5497  079F  0021               	movlb	1	; select bank1
  5498  07A0  07DB               	addwf	(_Temp^(0+128)+3),f
  5499                           
  5500                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5501  07A1  3003               	movlw	3
  5502  07A2  025B               	subwf	(_Temp^(0+128)+3),w
  5503  07A3  1C03               	skipc
  5504  07A4  2FC8               	goto	l7799
  5505                           
  5506                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5507  07A5  01DB               	clrf	(_Temp^(0+128)+3)
  5508                           
  5509                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5510  07A6  10D8               	bcf	_Temp^(0+128),1
  5511                           
  5512                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5513  07A7  3064               	movlw	100
  5514  07A8  0020               	movlb	0	; select bank0
  5515  07A9  00A9               	movwf	setBuz@time
  5516  07AA  3000               	movlw	0
  5517  07AB  00AA               	movwf	setBuz@time+1
  5518  07AC  3002               	movlw	2
  5519  07AD  3194  248F  3187   	fcall	_setBuz
  5520                           
  5521                           ;OverTemperature_B1.c: 137: }
  5522                           ;OverTemperature_B1.c: 138: } else {
  5523  07B0  2FC8               	goto	l7799
  5524  07B1                     l7787:	
  5525                           ;OverTemperature_B1.c: 140: }
  5526                           ;OverTemperature_B1.c: 141: } else {
  5527                           
  5528                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5529                           
  5530                           
  5531                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5532  07B1  0020               	movlb	0	; select bank0
  5533  07B2  086E               	movf	setTemp_Main@AD+1,w
  5534  07B3  026B               	subwf	setTemp_Main@DangerValue+1,w
  5535  07B4  1D03               	skipz
  5536  07B5  2FB8               	goto	u7475
  5537  07B6  086D               	movf	setTemp_Main@AD,w
  5538  07B7  026A               	subwf	setTemp_Main@DangerValue,w
  5539  07B8                     u7475:	
  5540  07B8  1C03               	skipc
  5541  07B9  2FC6               	goto	l7797
  5542                           
  5543                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5544  07BA  3001               	movlw	1
  5545  07BB  00E5               	movwf	??_setTemp_Main
  5546  07BC  0865               	movf	??_setTemp_Main,w
  5547  07BD  0021               	movlb	1	; select bank1
  5548  07BE  07DB               	addwf	(_Temp^(0+128)+3),f
  5549                           
  5550                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5551  07BF  3003               	movlw	3
  5552  07C0  025B               	subwf	(_Temp^(0+128)+3),w
  5553  07C1  1C03               	skipc
  5554  07C2  2FC8               	goto	l7799
  5555                           
  5556                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5557  07C3  01DB               	clrf	(_Temp^(0+128)+3)
  5558                           
  5559                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5560  07C4  14D8               	bsf	_Temp^(0+128),1
  5561                           
  5562                           ;OverTemperature_B1.c: 147: }
  5563                           ;OverTemperature_B1.c: 148: } else {
  5564  07C5  2FC8               	goto	l7799
  5565  07C6                     l7797:	
  5566                           
  5567                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5568  07C6  0021               	movlb	1	; select bank1
  5569  07C7  01DB               	clrf	(_Temp^(0+128)+3)
  5570  07C8                     l7799:	
  5571                           
  5572                           ;OverTemperature_B1.c: 150: }
  5573                           ;OverTemperature_B1.c: 151: }
  5574                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5575  07C8  0020               	movlb	0	; select bank0
  5576  07C9  086E               	movf	setTemp_Main@AD+1,w
  5577  07CA  00E5               	movwf	??_setTemp_Main
  5578  07CB  0865               	movf	??_setTemp_Main,w
  5579  07CC  00E2               	movwf	setProductData@value
  5580  07CD  3018               	movlw	24
  5581  07CE  319A  2298  3187   	fcall	_setProductData
  5582                           
  5583                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5584  07D1  0020               	movlb	0	; select bank0
  5585  07D2  086D               	movf	setTemp_Main@AD,w
  5586  07D3  00E5               	movwf	??_setTemp_Main
  5587  07D4  0865               	movf	??_setTemp_Main,w
  5588  07D5  00E2               	movwf	setProductData@value
  5589  07D6  3019               	movlw	25
  5590  07D7  319A  2298         	fcall	_setProductData
  5591                           
  5592                           ;OverTemperature_B1.c: 169: }
  5593                           ;OverTemperature_B1.c: 170: }
  5594                           ;OverTemperature_B1.c: 171: }
  5595                           ;OverTemperature_B1.c: 174: } else {
  5596  07D9  0008               	return
  5597  07DA                     l1848:	
  5598                           
  5599                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5600  07DA  1C2F               	btfss	_myMain^(0+128),0
  5601  07DB  0008               	return
  5602                           
  5603                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5604  07DC  1458               	bsf	_Temp^(0+128),0
  5605  07DD  0008               	return
  5606  07DE                     __end_of_setTemp_Main:	
  5607                           
  5608                           	psect	text10
  5609  1DED                     __ptext10:	
  5610 ;; *************** function _setOverTemp_ADV_Restore *****************
  5611 ;; Defined at:
  5612 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;		None
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;  i               2    1[BANK0 ] int 
  5617 ;; Return value:  Size  Location     Type
  5618 ;;		None               void
  5619 ;; Registers used:
  5620 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;Total ram usage:        3 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; Hardware stack levels required when called:    5
  5633 ;; This function calls:
  5634 ;;		Nothing
  5635 ;; This function is called by:
  5636 ;;		_setTemp_Main
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           
  5641                           ;psect for function _setOverTemp_ADV_Restore
  5642  1DED                     _setOverTemp_ADV_Restore:	
  5643                           
  5644                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5648  1DED  0020               	movlb	0	; select bank0
  5649  1DEE  01A1               	clrf	setOverTemp_ADV_Restore@i
  5650  1DEF  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5651  1DF0                     L2:	
  5652  1DF0  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5653  1DF1  3A80               	xorlw	128
  5654  1DF2  00A0               	movwf	??_setOverTemp_ADV_Restore
  5655  1DF3  3080               	movlw	128
  5656  1DF4  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5657  1DF5  1D03               	skipz
  5658  1DF6  2DF9               	goto	u6445
  5659  1DF7  3005               	movlw	5
  5660  1DF8  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5661  1DF9                     u6445:	
  5662  1DF9  1803               	btfsc	3,0
  5663  1DFA  0008               	return
  5664                           
  5665                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5666  1DFB  0020               	movlb	0	; select bank0
  5667  1DFC  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5668  1DFD  3EDC               	addlw	(_Temp+4)& (0+255)
  5669  1DFE  0086               	movwf	6
  5670  1DFF  0187               	clrf	7
  5671  1E00  3000               	movlw	0
  5672  1E01  3FC0               	movwi [0]fsr1
  5673  1E02  3FC1               	movwi [1]fsr1
  5674  1E03  3001               	movlw	1
  5675  1E04  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5676  1E05  3000               	movlw	0
  5677  1E06  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5678  1E07  2DF0               	goto	L2
  5679  1E08                     __end_of_setOverTemp_ADV_Restore:	
  5680                           
  5681                           	psect	text11
  5682  19C2                     __ptext11:	
  5683 ;; *************** function _Temp_Initialization *****************
  5684 ;; Defined at:
  5685 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;		None
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;		None
  5690 ;; Return value:  Size  Location     Type
  5691 ;;		None               void
  5692 ;; Registers used:
  5693 ;;		status,2, status,0, pclath, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;Total ram usage:        0 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    6
  5706 ;; This function calls:
  5707 ;;		_setTemp_Initialization
  5708 ;; This function is called by:
  5709 ;;		_main
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           
  5714                           ;psect for function _Temp_Initialization
  5715  19C2                     _Temp_Initialization:	
  5716                           
  5717                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5718                           
  5719                           ;incstack = 0
  5720                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5721  19C2  3188  2000         	fcall	_setTemp_Initialization
  5722  19C4  0008               	return
  5723  19C5                     __end_of_Temp_Initialization:	
  5724                           
  5725                           	psect	text12
  5726  0800                     __ptext12:	
  5727 ;; *************** function _setTemp_Initialization *****************
  5728 ;; Defined at:
  5729 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;		None               void
  5736 ;; Registers used:
  5737 ;;		None
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;Total ram usage:        0 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    5
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_Temp_Initialization
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           
  5758                           ;psect for function _setTemp_Initialization
  5759  0800                     _setTemp_Initialization:	
  5760                           
  5761                           ;incstack = 0
  5762                           ; Regs used in _setTemp_Initialization: []
  5763  0800  0008               	return
  5764  0801                     __end_of_setTemp_Initialization:	
  5765                           
  5766                           	psect	text13
  5767  1A1B                     __ptext13:	
  5768 ;; *************** function _Switch_Main *****************
  5769 ;; Defined at:
  5770 ;;		line 76 in file "../src/Switch_B1.c"
  5771 ;; Parameters:    Size  Location     Type
  5772 ;;		None
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;		None
  5775 ;; Return value:  Size  Location     Type
  5776 ;;		None               void
  5777 ;; Registers used:
  5778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;Total ram usage:        0 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; Hardware stack levels required when called:    9
  5791 ;; This function calls:
  5792 ;;		_TouchPower
  5793 ;;		_setSw_Main
  5794 ;; This function is called by:
  5795 ;;		_main
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           
  5800                           ;psect for function _Switch_Main
  5801  1A1B                     _Switch_Main:	
  5802                           
  5803                           ;Switch_B1.c: 79: setSw_Main(1);
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5807  1A1B  3001               	movlw	1
  5808  1A1C  3182  2205  319A   	fcall	_setSw_Main
  5809                           
  5810                           ;Switch_B1.c: 91: TouchPower();
  5811  1A1F  319C  24FA         	fcall	_TouchPower
  5812  1A21  0008               	return
  5813  1A22                     __end_of_Switch_Main:	
  5814                           
  5815                           	psect	text14
  5816  0205                     __ptext14:	
  5817 ;; *************** function _setSw_Main *****************
  5818 ;; Defined at:
  5819 ;;		line 117 in file "../src/Switch_B1.c"
  5820 ;; Parameters:    Size  Location     Type
  5821 ;;  sw              1    wreg     unsigned char 
  5822 ;; Auto vars:     Size  Location     Type
  5823 ;;  sw              1   19[BANK0 ] unsigned char 
  5824 ;; Return value:  Size  Location     Type
  5825 ;;		None               void
  5826 ;; Registers used:
  5827 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5828 ;; Tracked objects:
  5829 ;;		On entry : 0/0
  5830 ;;		On exit  : 0/0
  5831 ;;		Unchanged: 0/0
  5832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5836 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5837 ;;Total ram usage:        3 bytes
  5838 ;; Hardware stack levels used:    1
  5839 ;; Hardware stack levels required when called:    8
  5840 ;; This function calls:
  5841 ;;		_SwPointSelect
  5842 ;;		_getMain_All_Error_Status
  5843 ;;		_getSw_KeyStatus
  5844 ;;		_setBuz
  5845 ;;		_setDimmerLights_DimmingOn
  5846 ;;		_setDimmerLights_SwOff
  5847 ;;		_setDimmerLights_SwOn
  5848 ;;		_setRF_Learn
  5849 ;; This function is called by:
  5850 ;;		_Switch_Main
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           
  5855                           ;psect for function _setSw_Main
  5856  0205                     _setSw_Main:	
  5857                           
  5858                           ;incstack = 0
  5859                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5860                           ;setSw_Main@sw stored from wreg
  5861  0205  0020               	movlb	0	; select bank0
  5862  0206  00B3               	movwf	setSw_Main@sw
  5863                           
  5864                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5865  0207  0833               	movf	setSw_Main@sw,w
  5866  0208  319B  2304  3182   	fcall	_SwPointSelect
  5867                           
  5868                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5869  020B  0021               	movlb	1	; select bank1
  5870  020C  0852               	movf	_Sw^(0+128),w
  5871  020D  0086               	movwf	6
  5872  020E  3001               	movlw	1	; select bank2/3
  5873  020F  0087               	movwf	7
  5874  0210  1C01               	btfss	1,0
  5875  0211  2B81               	goto	l2592
  5876                           
  5877                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5878  0212  3000               	movlw	0
  5879  0213  3190  2048  3182   	fcall	_getMain_All_Error_Status
  5880  0216  3800               	iorlw	0
  5881  0217  1D03               	skipz
  5882  0218  2A37               	goto	l7911
  5883                           
  5884                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5885  0219  0021               	movlb	1	; select bank1
  5886  021A  0A52               	incf	_Sw^(0+128),w
  5887  021B  0086               	movwf	6
  5888  021C  3001               	movlw	1	; select bank2/3
  5889  021D  0087               	movwf	7
  5890  021E  1081               	bcf	1,1
  5891                           
  5892                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5893  021F  0020               	movlb	0	; select bank0
  5894  0220  0833               	movf	setSw_Main@sw,w
  5895  0221  319B  23DD  3182   	fcall	_getSw_KeyStatus
  5896  0224  3A01               	xorlw	1
  5897  0225  3000               	movlw	0
  5898  0226  1903               	skipnz
  5899  0227  3001               	movlw	1
  5900  0228  0020               	movlb	0	; select bank0
  5901  0229  00B1               	movwf	??_setSw_Main
  5902  022A  0021               	movlb	1	; select bank1
  5903  022B  0852               	movf	_Sw^(0+128),w
  5904  022C  0086               	movwf	6
  5905  022D  3001               	movlw	1	; select bank2/3
  5906  022E  0087               	movwf	7
  5907  022F  0020               	movlb	0	; select bank0
  5908  0230  0DB1               	rlf	??_setSw_Main,f
  5909  0231  0801               	movf	1,w
  5910  0232  0631               	xorwf	??_setSw_Main,w
  5911  0233  39FD               	andlw	-3
  5912  0234  0631               	xorwf	??_setSw_Main,w
  5913  0235  0081               	movwf	1
  5914                           
  5915                           ;Switch_B1.c: 124: } else {
  5916  0236  2A4D               	goto	l2594
  5917  0237                     l7911:	
  5918                           
  5919                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5920  0237  0021               	movlb	1	; select bank1
  5921  0238  0A52               	incf	_Sw^(0+128),w
  5922  0239  0086               	movwf	6
  5923  023A  3001               	movlw	1	; select bank2/3
  5924  023B  0087               	movwf	7
  5925  023C  1881               	btfsc	1,1
  5926  023D  2A4D               	goto	l2594
  5927                           
  5928                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5929  023E  0A52               	incf	_Sw^(0+128),w
  5930  023F  0086               	movwf	6
  5931  0240  3001               	movlw	1	; select bank2/3
  5932  0241  0087               	movwf	7
  5933  0242  1481               	bsf	1,1
  5934                           
  5935                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5936  0243  0852               	movf	_Sw^(0+128),w
  5937  0244  0086               	movwf	6
  5938  0245  3001               	movlw	1	; select bank2/3
  5939  0246  0087               	movwf	7
  5940  0247  1081               	bcf	1,1
  5941                           
  5942                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5943  0248  0852               	movf	_Sw^(0+128),w
  5944  0249  0086               	movwf	6
  5945  024A  3001               	movlw	1	; select bank2/3
  5946  024B  0087               	movwf	7
  5947  024C  1501               	bsf	1,2
  5948  024D                     l2594:	
  5949                           
  5950                           ;Switch_B1.c: 130: }
  5951                           ;Switch_B1.c: 131: }
  5952                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5953  024D  0021               	movlb	1	; select bank1
  5954  024E  0852               	movf	_Sw^(0+128),w
  5955  024F  0086               	movwf	6
  5956  0250  3001               	movlw	1	; select bank2/3
  5957  0251  0087               	movwf	7
  5958  0252  1C81               	btfss	1,1
  5959  0253  2B29               	goto	l7961
  5960                           
  5961                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5962  0254  0852               	movf	_Sw^(0+128),w
  5963  0255  0086               	movwf	6
  5964  0256  3001               	movlw	1	; select bank2/3
  5965  0257  0087               	movwf	7
  5966  0258  1901               	btfsc	1,2
  5967  0259  2A80               	goto	l7927
  5968                           
  5969                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5970  025A  3001               	movlw	1
  5971  025B  0020               	movlb	0	; select bank0
  5972  025C  00B1               	movwf	??_setSw_Main
  5973  025D  0021               	movlb	1	; select bank1
  5974  025E  0852               	movf	_Sw^(0+128),w
  5975  025F  3E02               	addlw	2
  5976  0260  0086               	movwf	6
  5977  0261  3001               	movlw	1	; select bank2/3
  5978  0262  0087               	movwf	7
  5979  0263  0020               	movlb	0	; select bank0
  5980  0264  0831               	movf	??_setSw_Main,w
  5981  0265  0781               	addwf	1,f
  5982                           
  5983                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  5984  0266  0021               	movlb	1	; select bank1
  5985  0267  0852               	movf	_Sw^(0+128),w
  5986  0268  3E02               	addlw	2
  5987  0269  0086               	movwf	6
  5988  026A  3001               	movlw	1	; select bank2/3
  5989  026B  0087               	movwf	7
  5990  026C  3005               	movlw	5
  5991  026D  0201               	subwf	1,w
  5992  026E  1C03               	skipc
  5993  026F  0008               	return
  5994                           
  5995                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5996  0270  0852               	movf	_Sw^(0+128),w
  5997  0271  3E02               	addlw	2
  5998  0272  0086               	movwf	6
  5999  0273  3001               	movlw	1	; select bank2/3
  6000  0274  0087               	movwf	7
  6001  0275  0181               	clrf	1
  6002                           
  6003                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  6004  0276  0852               	movf	_Sw^(0+128),w
  6005  0277  0086               	movwf	6
  6006  0278  3001               	movlw	1	; select bank2/3
  6007  0279  0087               	movwf	7
  6008  027A  1501               	bsf	1,2
  6009                           
  6010                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  6011  027B  0020               	movlb	0	; select bank0
  6012  027C  0833               	movf	setSw_Main@sw,w
  6013  027D  3193  239A         	fcall	_setDimmerLights_SwOn
  6014                           
  6015                           ;Switch_B1.c: 147: }
  6016                           ;Switch_B1.c: 148: } else {
  6017  027F  0008               	return
  6018  0280                     l7927:	
  6019                           
  6020                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6021  0280  0021               	movlb	1	; select bank1
  6022  0281  0852               	movf	_Sw^(0+128),w
  6023  0282  0086               	movwf	6
  6024  0283  3001               	movlw	1	; select bank2/3
  6025  0284  0087               	movwf	7
  6026  0285  1981               	btfsc	1,3
  6027  0286  2AB5               	goto	l7937
  6028                           
  6029                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6030  0287  0852               	movf	_Sw^(0+128),w
  6031  0288  3E03               	addlw	3
  6032  0289  0086               	movwf	6
  6033  028A  3001               	movlw	1	; select bank2/3
  6034  028B  0087               	movwf	7
  6035  028C  3001               	movlw	1
  6036  028D  0781               	addwf	1,f
  6037  028E  3141               	addfsr 1,1
  6038  028F  1803               	skipnc
  6039  0290  0A81               	incf	1,f
  6040                           
  6041                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6042  0291  0852               	movf	_Sw^(0+128),w
  6043  0292  3E03               	addlw	3
  6044  0293  0086               	movwf	6
  6045  0294  3001               	movlw	1	; select bank2/3
  6046  0295  0087               	movwf	7
  6047  0296  3F40               	moviw [0]fsr1
  6048  0297  0020               	movlb	0	; select bank0
  6049  0298  00B1               	movwf	??_setSw_Main
  6050  0299  3F41               	moviw [1]fsr1
  6051  029A  00B2               	movwf	??_setSw_Main+1
  6052  029B  3000               	movlw	0
  6053  029C  0232               	subwf	??_setSw_Main+1,w
  6054  029D  304B               	movlw	75
  6055  029E  1903               	skipnz
  6056  029F  0231               	subwf	??_setSw_Main,w
  6057  02A0  1C03               	skipc
  6058  02A1  0008               	return
  6059                           
  6060                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6061  02A2  0021               	movlb	1	; select bank1
  6062  02A3  0852               	movf	_Sw^(0+128),w
  6063  02A4  3E03               	addlw	3
  6064  02A5  0086               	movwf	6
  6065  02A6  3001               	movlw	1	; select bank2/3
  6066  02A7  0087               	movwf	7
  6067  02A8  3000               	movlw	0
  6068  02A9  3FC0               	movwi [0]fsr1
  6069  02AA  3FC1               	movwi [1]fsr1
  6070                           
  6071                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6072  02AB  0852               	movf	_Sw^(0+128),w
  6073  02AC  0086               	movwf	6
  6074  02AD  3001               	movlw	1	; select bank2/3
  6075  02AE  0087               	movwf	7
  6076  02AF  1581               	bsf	1,3
  6077                           
  6078                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6079  02B0  0020               	movlb	0	; select bank0
  6080  02B1  0833               	movf	setSw_Main@sw,w
  6081  02B2  319F  27AE         	fcall	_setDimmerLights_DimmingOn
  6082                           
  6083                           ;Switch_B1.c: 162: }
  6084                           ;Switch_B1.c: 163: } else {
  6085  02B4  0008               	return
  6086  02B5                     l7937:	
  6087                           
  6088                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6089  02B5  0021               	movlb	1	; select bank1
  6090  02B6  0852               	movf	_Sw^(0+128),w
  6091  02B7  0086               	movwf	6
  6092  02B8  3001               	movlw	1	; select bank2/3
  6093  02B9  0087               	movwf	7
  6094  02BA  1A01               	btfsc	1,4
  6095  02BB  2AF5               	goto	l7951
  6096                           
  6097                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6098  02BC  0852               	movf	_Sw^(0+128),w
  6099  02BD  3E05               	addlw	5
  6100  02BE  0086               	movwf	6
  6101  02BF  3001               	movlw	1	; select bank2/3
  6102  02C0  0087               	movwf	7
  6103  02C1  3001               	movlw	1
  6104  02C2  0781               	addwf	1,f
  6105  02C3  3141               	addfsr 1,1
  6106  02C4  1803               	skipnc
  6107  02C5  0A81               	incf	1,f
  6108                           
  6109                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6110  02C6  0852               	movf	_Sw^(0+128),w
  6111  02C7  3E05               	addlw	5
  6112  02C8  0086               	movwf	6
  6113  02C9  3001               	movlw	1	; select bank2/3
  6114  02CA  0087               	movwf	7
  6115  02CB  3F40               	moviw [0]fsr1
  6116  02CC  0020               	movlb	0	; select bank0
  6117  02CD  00B1               	movwf	??_setSw_Main
  6118  02CE  3F41               	moviw [1]fsr1
  6119  02CF  00B2               	movwf	??_setSw_Main+1
  6120  02D0  3000               	movlw	0
  6121  02D1  0232               	subwf	??_setSw_Main+1,w
  6122  02D2  304B               	movlw	75
  6123  02D3  1903               	skipnz
  6124  02D4  0231               	subwf	??_setSw_Main,w
  6125  02D5  1C03               	skipc
  6126  02D6  0008               	return
  6127                           
  6128                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6129  02D7  0021               	movlb	1	; select bank1
  6130  02D8  0852               	movf	_Sw^(0+128),w
  6131  02D9  3E05               	addlw	5
  6132  02DA  0086               	movwf	6
  6133  02DB  3001               	movlw	1	; select bank2/3
  6134  02DC  0087               	movwf	7
  6135  02DD  3000               	movlw	0
  6136  02DE  3FC0               	movwi [0]fsr1
  6137  02DF  3FC1               	movwi [1]fsr1
  6138                           
  6139                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6140  02E0  0852               	movf	_Sw^(0+128),w
  6141  02E1  0086               	movwf	6
  6142  02E2  3001               	movlw	1	; select bank2/3
  6143  02E3  0087               	movwf	7
  6144  02E4  1601               	bsf	1,4
  6145                           
  6146                           ;Switch_B1.c: 172: setRF_Learn(1);
  6147  02E5  3001               	movlw	1
  6148  02E6  319C  24A7  3182   	fcall	_setRF_Learn
  6149                           
  6150                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6151  02E9  0021               	movlb	1	; select bank1
  6152  02EA  1EAF               	btfss	_myMain^(0+128),5
  6153  02EB  0008               	return
  6154                           
  6155                           ;Switch_B1.c: 174: setBuz(2, 100);
  6156  02EC  3064               	movlw	100
  6157  02ED  0020               	movlb	0	; select bank0
  6158  02EE  00A9               	movwf	setBuz@time
  6159  02EF  3000               	movlw	0
  6160  02F0  00AA               	movwf	setBuz@time+1
  6161  02F1  3002               	movlw	2
  6162  02F2  3194  248F         	fcall	_setBuz
  6163                           
  6164                           ;Switch_B1.c: 175: }
  6165                           ;Switch_B1.c: 179: }
  6166                           ;Switch_B1.c: 180: } else {
  6167  02F4  0008               	return
  6168  02F5                     l7951:	
  6169                           
  6170                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6171  02F5  0021               	movlb	1	; select bank1
  6172  02F6  0852               	movf	_Sw^(0+128),w
  6173  02F7  0086               	movwf	6
  6174  02F8  3001               	movlw	1	; select bank2/3
  6175  02F9  0087               	movwf	7
  6176  02FA  1A81               	btfsc	1,5
  6177  02FB  0008               	return
  6178                           
  6179                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6180  02FC  0852               	movf	_Sw^(0+128),w
  6181  02FD  3E07               	addlw	7
  6182  02FE  0086               	movwf	6
  6183  02FF  3001               	movlw	1	; select bank2/3
  6184  0300  0087               	movwf	7
  6185  0301  3001               	movlw	1
  6186  0302  0781               	addwf	1,f
  6187  0303  3141               	addfsr 1,1
  6188  0304  1803               	skipnc
  6189  0305  0A81               	incf	1,f
  6190                           
  6191                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6192  0306  0852               	movf	_Sw^(0+128),w
  6193  0307  3E07               	addlw	7
  6194  0308  0086               	movwf	6
  6195  0309  3001               	movlw	1	; select bank2/3
  6196  030A  0087               	movwf	7
  6197  030B  3F40               	moviw [0]fsr1
  6198  030C  0020               	movlb	0	; select bank0
  6199  030D  00B1               	movwf	??_setSw_Main
  6200  030E  3F41               	moviw [1]fsr1
  6201  030F  00B2               	movwf	??_setSw_Main+1
  6202  0310  3000               	movlw	0
  6203  0311  0232               	subwf	??_setSw_Main+1,w
  6204  0312  3096               	movlw	150
  6205  0313  1903               	skipnz
  6206  0314  0231               	subwf	??_setSw_Main,w
  6207  0315  1C03               	skipc
  6208  0316  0008               	return
  6209                           
  6210                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6211  0317  0021               	movlb	1	; select bank1
  6212  0318  0852               	movf	_Sw^(0+128),w
  6213  0319  3E07               	addlw	7
  6214  031A  0086               	movwf	6
  6215  031B  3001               	movlw	1	; select bank2/3
  6216  031C  0087               	movwf	7
  6217  031D  3000               	movlw	0
  6218  031E  3FC0               	movwi [0]fsr1
  6219  031F  3FC1               	movwi [1]fsr1
  6220                           
  6221                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6222  0320  0852               	movf	_Sw^(0+128),w
  6223  0321  0086               	movwf	6
  6224  0322  3001               	movlw	1	; select bank2/3
  6225  0323  0087               	movwf	7
  6226  0324  1681               	bsf	1,5
  6227                           
  6228                           ;Switch_B1.c: 188: setRF_Learn(0);
  6229  0325  3000               	movlw	0
  6230  0326  319C  24A7         	fcall	_setRF_Learn
  6231                           
  6232                           ;Switch_B1.c: 191: }
  6233                           ;Switch_B1.c: 192: }
  6234                           ;Switch_B1.c: 193: }
  6235                           ;Switch_B1.c: 195: }
  6236                           ;Switch_B1.c: 196: }
  6237                           ;Switch_B1.c: 197: } else {
  6238  0328  0008               	return
  6239  0329                     l7961:	
  6240                           
  6241                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6242  0329  0021               	movlb	1	; select bank1
  6243  032A  0852               	movf	_Sw^(0+128),w
  6244  032B  0086               	movwf	6
  6245  032C  3001               	movlw	1	; select bank2/3
  6246  032D  0087               	movwf	7
  6247  032E  1D01               	btfss	1,2
  6248  032F  0008               	return
  6249                           
  6250                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6251  0330  3001               	movlw	1
  6252  0331  0020               	movlb	0	; select bank0
  6253  0332  00B1               	movwf	??_setSw_Main
  6254  0333  0021               	movlb	1	; select bank1
  6255  0334  0852               	movf	_Sw^(0+128),w
  6256  0335  3E02               	addlw	2
  6257  0336  0086               	movwf	6
  6258  0337  3001               	movlw	1	; select bank2/3
  6259  0338  0087               	movwf	7
  6260  0339  0020               	movlb	0	; select bank0
  6261  033A  0831               	movf	??_setSw_Main,w
  6262  033B  0781               	addwf	1,f
  6263                           
  6264                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  6265  033C  0021               	movlb	1	; select bank1
  6266  033D  0852               	movf	_Sw^(0+128),w
  6267  033E  3E02               	addlw	2
  6268  033F  0086               	movwf	6
  6269  0340  3001               	movlw	1	; select bank2/3
  6270  0341  0087               	movwf	7
  6271  0342  3005               	movlw	5
  6272  0343  0201               	subwf	1,w
  6273  0344  1C03               	skipc
  6274  0345  0008               	return
  6275                           
  6276                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6277  0346  0852               	movf	_Sw^(0+128),w
  6278  0347  3E02               	addlw	2
  6279  0348  0086               	movwf	6
  6280  0349  3001               	movlw	1	; select bank2/3
  6281  034A  0087               	movwf	7
  6282  034B  0181               	clrf	1
  6283                           
  6284                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6285  034C  0852               	movf	_Sw^(0+128),w
  6286  034D  0086               	movwf	6
  6287  034E  3001               	movlw	1	; select bank2/3
  6288  034F  0087               	movwf	7
  6289  0350  1101               	bcf	1,2
  6290                           
  6291                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6292  0351  0852               	movf	_Sw^(0+128),w
  6293  0352  3E03               	addlw	3
  6294  0353  0086               	movwf	6
  6295  0354  3001               	movlw	1	; select bank2/3
  6296  0355  0087               	movwf	7
  6297  0356  3000               	movlw	0
  6298  0357  3FC0               	movwi [0]fsr1
  6299  0358  3FC1               	movwi [1]fsr1
  6300                           
  6301                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6302  0359  0852               	movf	_Sw^(0+128),w
  6303  035A  0086               	movwf	6
  6304  035B  3001               	movlw	1	; select bank2/3
  6305  035C  0087               	movwf	7
  6306  035D  1181               	bcf	1,3
  6307                           
  6308                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6309  035E  0852               	movf	_Sw^(0+128),w
  6310  035F  0086               	movwf	6
  6311  0360  3001               	movlw	1	; select bank2/3
  6312  0361  0087               	movwf	7
  6313  0362  1201               	bcf	1,4
  6314                           
  6315                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6316  0363  0852               	movf	_Sw^(0+128),w
  6317  0364  0086               	movwf	6
  6318  0365  3001               	movlw	1	; select bank2/3
  6319  0366  0087               	movwf	7
  6320  0367  1281               	bcf	1,5
  6321                           
  6322                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6323  0368  0852               	movf	_Sw^(0+128),w
  6324  0369  3E05               	addlw	5
  6325  036A  0086               	movwf	6
  6326  036B  3001               	movlw	1	; select bank2/3
  6327  036C  0087               	movwf	7
  6328  036D  3000               	movlw	0
  6329  036E  3FC0               	movwi [0]fsr1
  6330  036F  3FC1               	movwi [1]fsr1
  6331                           
  6332                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6333  0370  0852               	movf	_Sw^(0+128),w
  6334  0371  3E07               	addlw	7
  6335  0372  0086               	movwf	6
  6336  0373  3001               	movlw	1	; select bank2/3
  6337  0374  0087               	movwf	7
  6338  0375  3000               	movlw	0
  6339  0376  3FC0               	movwi [0]fsr1
  6340  0377  3FC1               	movwi [1]fsr1
  6341                           
  6342                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6343  0378  0020               	movlb	0	; select bank0
  6344  0379  0833               	movf	setSw_Main@sw,w
  6345  037A  3191  2120  3182   	fcall	_setDimmerLights_SwOff
  6346                           
  6347                           ;Switch_B1.c: 220: setRF_Learn(0);
  6348  037D  3000               	movlw	0
  6349  037E  319C  24A7         	fcall	_setRF_Learn
  6350                           
  6351                           ;Switch_B1.c: 222: }
  6352                           ;Switch_B1.c: 223: }
  6353                           ;Switch_B1.c: 224: }
  6354                           ;Switch_B1.c: 225: } else {
  6355  0380  0008               	return
  6356  0381                     l2592:	
  6357                           
  6358                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6359  0381  1C2F               	btfss	_myMain^(0+128),0
  6360  0382  0008               	return
  6361                           
  6362                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6363  0383  0852               	movf	_Sw^(0+128),w
  6364  0384  0086               	movwf	6
  6365  0385  3001               	movlw	1	; select bank2/3
  6366  0386  0087               	movwf	7
  6367  0387  1401               	bsf	1,0
  6368  0388  0008               	return
  6369  0389                     __end_of_setSw_Main:	
  6370                           
  6371                           	psect	text15
  6372  1CA7                     __ptext15:	
  6373 ;; *************** function _setRF_Learn *****************
  6374 ;; Defined at:
  6375 ;;		line 33 in file "../src/RF_Control_B1.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  command         1    wreg     unsigned char 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  command         1    1[BANK0 ] unsigned char 
  6380 ;; Return value:  Size  Location     Type
  6381 ;;		None               void
  6382 ;; Registers used:
  6383 ;;		wreg, status,2, status,0
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;Total ram usage:        2 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    5
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_setSw_Main
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           
  6404                           ;psect for function _setRF_Learn
  6405  1CA7                     _setRF_Learn:	
  6406                           
  6407                           ;incstack = 0
  6408                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6409                           ;setRF_Learn@command stored from wreg
  6410  1CA7  0020               	movlb	0	; select bank0
  6411  1CA8  00A1               	movwf	setRF_Learn@command
  6412                           
  6413                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6414  1CA9  0821               	movf	setRF_Learn@command,w
  6415  1CAA  3A01               	xorlw	1
  6416  1CAB  3000               	movlw	0
  6417  1CAC  1903               	skipnz
  6418  1CAD  3001               	movlw	1
  6419  1CAE  00A0               	movwf	??_setRF_Learn
  6420  1CAF  0EA0               	swapf	??_setRF_Learn,f
  6421  1CB0  0DA0               	rlf	??_setRF_Learn,f
  6422  1CB1  0DA0               	rlf	??_setRF_Learn,f
  6423  1CB2  0021               	movlb	1	; select bank1
  6424  1CB3  0820               	movf	_RF1^(0+128),w
  6425  1CB4  0020               	movlb	0	; select bank0
  6426  1CB5  0620               	xorwf	??_setRF_Learn,w
  6427  1CB6  39BF               	andlw	-65
  6428  1CB7  0620               	xorwf	??_setRF_Learn,w
  6429  1CB8  0021               	movlb	1	; select bank1
  6430  1CB9  00A0               	movwf	_RF1^(0+128)
  6431  1CBA  0008               	return
  6432  1CBB                     __end_of_setRF_Learn:	
  6433                           
  6434                           	psect	text16
  6435  1FAE                     __ptext16:	
  6436 ;; *************** function _setDimmerLights_DimmingOn *****************
  6437 ;; Defined at:
  6438 ;;		line 816 in file "../src/Dimmer_B1.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  sw              1    wreg     unsigned char 
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;  sw              1    2[BANK0 ] unsigned char 
  6443 ;; Return value:  Size  Location     Type
  6444 ;;		None               void
  6445 ;; Registers used:
  6446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;Total ram usage:        1 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    6
  6459 ;; This function calls:
  6460 ;;		_DimmerLights_SelectPointer
  6461 ;; This function is called by:
  6462 ;;		_setSw_Main
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           
  6467                           ;psect for function _setDimmerLights_DimmingOn
  6468  1FAE                     _setDimmerLights_DimmingOn:	
  6469                           
  6470                           ;incstack = 0
  6471                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6472                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6473  1FAE  0020               	movlb	0	; select bank0
  6474  1FAF  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6475                           
  6476                           ;Dimmer_B1.c: 822: DimmerLights_SelectPointer(sw);
  6477  1FB0  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6478  1FB1  319A  228C  319F   	fcall	_DimmerLights_SelectPointer
  6479                           
  6480                           ;Dimmer_B1.c: 823: if (DimmerLights->Trigger == 0) {
  6481  1FB4  0021               	movlb	1	; select bank1
  6482  1FB5  084C               	movf	_DimmerLights^(0+128),w
  6483  1FB6  0086               	movwf	6
  6484  1FB7  3001               	movlw	1	; select bank2/3
  6485  1FB8  0087               	movwf	7
  6486  1FB9  1881               	btfsc	1,1
  6487  1FBA  0008               	return
  6488                           
  6489                           ;Dimmer_B1.c: 824: if (DimmerLights->SwFlag == 1) {
  6490  1FBB  084C               	movf	_DimmerLights^(0+128),w
  6491  1FBC  0086               	movwf	6
  6492  1FBD  3001               	movlw	1	; select bank2/3
  6493  1FBE  0087               	movwf	7
  6494  1FBF  1C01               	btfss	1,0
  6495  1FC0  0008               	return
  6496                           
  6497                           ;Dimmer_B1.c: 825: DimmerLights->Status = 1;
  6498  1FC1  0A4C               	incf	_DimmerLights^(0+128),w
  6499  1FC2  0086               	movwf	6
  6500  1FC3  3001               	movlw	1	; select bank2/3
  6501  1FC4  0087               	movwf	7
  6502  1FC5  1401               	bsf	1,0
  6503                           
  6504                           ;Dimmer_B1.c: 827: DimmerLights->DimmingSwFlag = 1;
  6505  1FC6  084C               	movf	_DimmerLights^(0+128),w
  6506  1FC7  0086               	movwf	6
  6507  1FC8  3001               	movlw	1	; select bank2/3
  6508  1FC9  0087               	movwf	7
  6509  1FCA  1581               	bsf	1,3
  6510                           
  6511                           ;Dimmer_B1.c: 828: DimmerLights->DimmingTrigger = 1;
  6512  1FCB  084C               	movf	_DimmerLights^(0+128),w
  6513  1FCC  0086               	movwf	6
  6514  1FCD  3001               	movlw	1	; select bank2/3
  6515  1FCE  0087               	movwf	7
  6516  1FCF  1601               	bsf	1,4
  6517                           
  6518                           ;Dimmer_B1.c: 829: DimmerLights->DimmingSwitch = 1;
  6519  1FD0  084C               	movf	_DimmerLights^(0+128),w
  6520  1FD1  0086               	movwf	6
  6521  1FD2  3001               	movlw	1	; select bank2/3
  6522  1FD3  0087               	movwf	7
  6523  1FD4  1681               	bsf	1,5
  6524  1FD5  0008               	return
  6525  1FD6                     __end_of_setDimmerLights_DimmingOn:	
  6526                           
  6527                           	psect	text17
  6528  1BDD                     __ptext17:	
  6529 ;; *************** function _getSw_KeyStatus *****************
  6530 ;; Defined at:
  6531 ;;		line 238 in file "../src/Switch_B1.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;  sw              1    wreg     unsigned char 
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  sw              1    0[COMMON] unsigned char 
  6536 ;;  status          1    1[BANK0 ] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      unsigned char 
  6539 ;; Registers used:
  6540 ;;		wreg, status,2
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;Total ram usage:        3 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    5
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_setSw_Main
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _getSw_KeyStatus
  6562  1BDD                     _getSw_KeyStatus:	
  6563                           
  6564                           ;Switch_B1.c: 239: char status = 0;
  6565                           
  6566                           ;incstack = 0
  6567                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6568  1BDD  0020               	movlb	0	; select bank0
  6569  1BDE  01A1               	clrf	getSw_KeyStatus@status
  6570                           
  6571                           ;Switch_B1.c: 272: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6572  1BDF  01A2               	clrf	_getSw_KeyStatus$7105
  6573  1BE0  0AA2               	incf	_getSw_KeyStatus$7105,f
  6574  1BE1  1F0C               	btfss	12,6	;volatile
  6575  1BE2  1A0C               	btfsc	12,4	;volatile
  6576  1BE3  2BE8               	goto	l7331
  6577  1BE4  1C0C               	btfss	12,0	;volatile
  6578  1BE5  1B8C               	btfsc	12,7	;volatile
  6579  1BE6  2BE8               	goto	l7331
  6580  1BE7  01A2               	clrf	_getSw_KeyStatus$7105
  6581  1BE8                     l7331:	
  6582  1BE8  0822               	movf	_getSw_KeyStatus$7105,w
  6583  1BE9  00A0               	movwf	??_getSw_KeyStatus
  6584  1BEA  0820               	movf	??_getSw_KeyStatus,w
  6585  1BEB  00A1               	movwf	getSw_KeyStatus@status
  6586                           
  6587                           ;Switch_B1.c: 276: return status;
  6588  1BEC  0821               	movf	getSw_KeyStatus@status,w
  6589  1BED  0008               	return
  6590  1BEE                     __end_of_getSw_KeyStatus:	
  6591                           
  6592                           	psect	text18
  6593  1B04                     __ptext18:	
  6594 ;; *************** function _SwPointSelect *****************
  6595 ;; Defined at:
  6596 ;;		line 25 in file "../src/Switch_B1.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;  sw              1    wreg     unsigned char 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  sw              1    1[BANK0 ] unsigned char 
  6601 ;; Return value:  Size  Location     Type
  6602 ;;		None               void
  6603 ;; Registers used:
  6604 ;;		wreg
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;Total ram usage:        2 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    5
  6617 ;; This function calls:
  6618 ;;		Nothing
  6619 ;; This function is called by:
  6620 ;;		_setSw_Main
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           
  6625                           ;psect for function _SwPointSelect
  6626  1B04                     _SwPointSelect:	
  6627                           
  6628                           ;incstack = 0
  6629                           ; Regs used in _SwPointSelect: [wreg]
  6630                           ;SwPointSelect@sw stored from wreg
  6631  1B04  0020               	movlb	0	; select bank0
  6632  1B05  00A1               	movwf	SwPointSelect@sw
  6633                           
  6634                           ;Switch_B1.c: 28: if (sw == 1) {
  6635  1B06  0821               	movf	SwPointSelect@sw,w
  6636  1B07  3A01               	xorlw	1
  6637  1B08  1D03               	skipz
  6638  1B09  0008               	return
  6639                           
  6640                           ;Switch_B1.c: 29: Sw = &Sw1;
  6641  1B0A  30CE               	movlw	_Sw1& (0+255)
  6642  1B0B  00A0               	movwf	??_SwPointSelect
  6643  1B0C  0820               	movf	??_SwPointSelect,w
  6644  1B0D  0021               	movlb	1	; select bank1
  6645  1B0E  00D2               	movwf	_Sw^(0+128)
  6646  1B0F  0008               	return
  6647  1B10                     __end_of_SwPointSelect:	
  6648                           
  6649                           	psect	text19
  6650  1CFA                     __ptext19:	
  6651 ;; *************** function _TouchPower *****************
  6652 ;; Defined at:
  6653 ;;		line 10 in file "../src/Switch_B1.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;		None
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;		None
  6658 ;; Return value:  Size  Location     Type
  6659 ;;		None               void
  6660 ;; Registers used:
  6661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6662 ;; Tracked objects:
  6663 ;;		On entry : 0/0
  6664 ;;		On exit  : 0/0
  6665 ;;		Unchanged: 0/0
  6666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;Total ram usage:        0 bytes
  6672 ;; Hardware stack levels used:    1
  6673 ;; Hardware stack levels required when called:    6
  6674 ;; This function calls:
  6675 ;;		_Timeout_Counter
  6676 ;;		_set_TimeoutCleared
  6677 ;; This function is called by:
  6678 ;;		_Switch_Main
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _TouchPower
  6684  1CFA                     _TouchPower:	
  6685                           
  6686                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6690  1CFA  0021               	movlb	1	; select bank1
  6691  1CFB  1C2F               	btfss	_myMain^(0+128),0
  6692  1CFC  0008               	return
  6693                           
  6694                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6695  1CFD  0020               	movlb	0	; select bank0
  6696  1CFE  180D               	btfsc	13,0	;volatile
  6697  1CFF  0008               	return
  6698  1D00  2D06               	goto	l7893
  6699  1D01                     l2572:	
  6700                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6701                           
  6702                           
  6703                           ;Switch_B1.c: 14: RB0 = 1;
  6704  1D01  0020               	movlb	0	; select bank0
  6705  1D02  140D               	bsf	13,0	;volatile
  6706                           
  6707                           ;Switch_B1.c: 15: Timeout_Counter();
  6708  1D03  319C  24E5  319C   	fcall	_Timeout_Counter
  6709  1D06                     l7893:	
  6710  1D06  0020               	movlb	0	; select bank0
  6711  1D07  180D               	btfsc	13,0	;volatile
  6712  1D08  2D0C               	goto	l7897
  6713  1D09  0021               	movlb	1	; select bank1
  6714  1D0A  1D39               	btfss	(_myMain^(0+128)+10),2
  6715  1D0B  2D01               	goto	l2572
  6716  1D0C                     l7897:	
  6717                           
  6718                           ;Switch_B1.c: 16: }
  6719                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6720  1D0C  3199  21F0         	fcall	_set_TimeoutCleared
  6721  1D0E  0008               	return
  6722  1D0F                     __end_of_TouchPower:	
  6723                           
  6724                           	psect	text20
  6725  19F0                     __ptext20:	
  6726 ;; *************** function _set_TimeoutCleared *****************
  6727 ;; Defined at:
  6728 ;;		line 281 in file "../src/Main_B1.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;		None
  6731 ;; Auto vars:     Size  Location     Type
  6732 ;;		None
  6733 ;; Return value:  Size  Location     Type
  6734 ;;		None               void
  6735 ;; Registers used:
  6736 ;;		status,2
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;Total ram usage:        0 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    5
  6749 ;; This function calls:
  6750 ;;		Nothing
  6751 ;; This function is called by:
  6752 ;;		_getAD
  6753 ;;		_TouchPower
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           
  6758                           ;psect for function _set_TimeoutCleared
  6759  19F0                     _set_TimeoutCleared:	
  6760                           
  6761                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6762                           
  6763                           ;incstack = 0
  6764                           ; Regs used in _set_TimeoutCleared: [status,2]
  6765  19F0  0021               	movlb	1	; select bank1
  6766  19F1  1139               	bcf	(_myMain^(0+128)+10),2
  6767                           
  6768                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6769  19F2  01BA               	clrf	(_myMain^(0+128)+11)
  6770  19F3  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6771  19F4  0008               	return
  6772  19F5                     __end_of_set_TimeoutCleared:	
  6773                           
  6774                           	psect	text21
  6775  1CE5                     __ptext21:	
  6776 ;; *************** function _Timeout_Counter *****************
  6777 ;; Defined at:
  6778 ;;		line 272 in file "../src/Main_B1.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;		None
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;		None
  6783 ;; Return value:  Size  Location     Type
  6784 ;;		None               void
  6785 ;; Registers used:
  6786 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;Total ram usage:        0 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    5
  6799 ;; This function calls:
  6800 ;;		Nothing
  6801 ;; This function is called by:
  6802 ;;		_getAD
  6803 ;;		_TouchPower
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           
  6808                           ;psect for function _Timeout_Counter
  6809  1CE5                     _Timeout_Counter:	
  6810                           
  6811                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6812                           
  6813                           ;incstack = 0
  6814                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6815  1CE5  3001               	movlw	1
  6816  1CE6  0021               	movlb	1	; select bank1
  6817  1CE7  07BA               	addwf	(_myMain^(0+128)+11),f
  6818  1CE8  3000               	movlw	0
  6819  1CE9  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6820                           
  6821                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6822  1CEA  300B               	movlw	11
  6823  1CEB  3EAF               	addlw	_myMain& (0+255)
  6824  1CEC  0086               	movwf	6
  6825  1CED  0187               	clrf	7
  6826  1CEE  3F40               	moviw [0]fsr1
  6827  1CEF  3AA8               	xorlw	168
  6828  1CF0  1D03               	skipz
  6829  1CF1  2CF4               	goto	u6415
  6830  1CF2  3F41               	moviw [1]fsr1
  6831  1CF3  3A61               	xorlw	97
  6832  1CF4                     u6415:	
  6833  1CF4  1D03               	skipz
  6834  1CF5  0008               	return
  6835                           
  6836                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6837  1CF6  01BA               	clrf	(_myMain^(0+128)+11)
  6838  1CF7  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6839                           
  6840                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6841  1CF8  1539               	bsf	(_myMain^(0+128)+10),2
  6842  1CF9  0008               	return
  6843  1CFA                     __end_of_Timeout_Counter:	
  6844                           
  6845                           	psect	text22
  6846  19EC                     __ptext22:	
  6847 ;; *************** function _Switch_Initialization *****************
  6848 ;; Defined at:
  6849 ;;		line 46 in file "../src/Switch_B1.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;		None
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;		None
  6854 ;; Return value:  Size  Location     Type
  6855 ;;		None               void
  6856 ;; Registers used:
  6857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6858 ;; Tracked objects:
  6859 ;;		On entry : 0/0
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;Total ram usage:        0 bytes
  6868 ;; Hardware stack levels used:    1
  6869 ;; Hardware stack levels required when called:    8
  6870 ;; This function calls:
  6871 ;;		_setSw_Initialization
  6872 ;; This function is called by:
  6873 ;;		_main
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           
  6878                           ;psect for function _Switch_Initialization
  6879  19EC                     _Switch_Initialization:	
  6880                           
  6881                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6882                           
  6883                           ;incstack = 0
  6884                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6885  19EC  3001               	movlw	1
  6886  19ED  319B  2367         	fcall	_setSw_Initialization
  6887  19EF  0008               	return
  6888  19F0                     __end_of_Switch_Initialization:	
  6889                           
  6890                           	psect	text23
  6891  1B67                     __ptext23:	
  6892 ;; *************** function _setSw_Initialization *****************
  6893 ;; Defined at:
  6894 ;;		line 66 in file "../src/Switch_B1.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;  sw              1    wreg     unsigned char 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  sw              1    4[BANK0 ] unsigned char 
  6899 ;; Return value:  Size  Location     Type
  6900 ;;		None               void
  6901 ;; Registers used:
  6902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;Total ram usage:        1 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    7
  6915 ;; This function calls:
  6916 ;;		_setLED
  6917 ;; This function is called by:
  6918 ;;		_Switch_Initialization
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _setSw_Initialization
  6924  1B67                     _setSw_Initialization:	
  6925                           
  6926                           ;incstack = 0
  6927                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6928                           ;setSw_Initialization@sw stored from wreg
  6929  1B67  0020               	movlb	0	; select bank0
  6930  1B68  00A4               	movwf	setSw_Initialization@sw
  6931                           
  6932                           ;Switch_B1.c: 68: setLED(sw, 1);
  6933  1B69  01A2               	clrf	setLED@command
  6934  1B6A  0AA2               	incf	setLED@command,f
  6935  1B6B  0824               	movf	setSw_Initialization@sw,w
  6936  1B6C  3191  2159  319B   	fcall	_setLED
  6937                           
  6938                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6939  1B6F  0020               	movlb	0	; select bank0
  6940  1B70  01A2               	clrf	setLED@command
  6941  1B71  0AA2               	incf	setLED@command,f
  6942  1B72  0824               	movf	setSw_Initialization@sw,w
  6943  1B73  3E01               	addlw	1
  6944  1B74  3191  2159         	fcall	_setLED
  6945  1B76  0008               	return
  6946  1B77                     __end_of_setSw_Initialization:	
  6947                           
  6948                           	psect	text24
  6949  19BF                     __ptext24:	
  6950 ;; *************** function _RF_Main *****************
  6951 ;; Defined at:
  6952 ;;		line 26 in file "../src/RF_Control_B1.c"
  6953 ;; Parameters:    Size  Location     Type
  6954 ;;		None
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;		None
  6957 ;; Return value:  Size  Location     Type
  6958 ;;		None               void
  6959 ;; Registers used:
  6960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6970 ;;Total ram usage:        0 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; Hardware stack levels required when called:   12
  6973 ;; This function calls:
  6974 ;;		_setRF_Main
  6975 ;; This function is called by:
  6976 ;;		_main
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _RF_Main
  6982  19BF                     _RF_Main:	
  6983                           
  6984                           ;RF_Control_B1.c: 28: setRF_Main();
  6985                           
  6986                           ;incstack = 0
  6987                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6988  19BF  3185  2561         	fcall	_setRF_Main
  6989  19C1  0008               	return
  6990  19C2                     __end_of_RF_Main:	
  6991                           
  6992                           	psect	text25
  6993  0561                     __ptext25:	
  6994 ;; *************** function _setRF_Main *****************
  6995 ;; Defined at:
  6996 ;;		line 53 in file "../src/RF_Control_B1.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;		None
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  error           1    3[BANK1 ] unsigned char 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;		None               void
  7003 ;; Registers used:
  7004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7011 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7012 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;Total ram usage:        2 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:   11
  7017 ;; This function calls:
  7018 ;;		_CC2500_PowerOnInitial
  7019 ;;		_CC2500_RxData
  7020 ;;		_CC2500_TxData
  7021 ;;		_CC2500_WriteCommand
  7022 ;;		_RF_RxDisable
  7023 ;;		___lwdiv
  7024 ;;		_getBuz_GO
  7025 ;;		_getRF_KeyStatus
  7026 ;;		_getRxData
  7027 ;; This function is called by:
  7028 ;;		_RF_Main
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           
  7033                           ;psect for function _setRF_Main
  7034  0561                     _setRF_Main:	
  7035                           
  7036                           ;RF_Control_B1.c: 54: char error = 0;
  7037                           
  7038                           ;incstack = 0
  7039                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7040  0561  0021               	movlb	1	; select bank1
  7041  0562  01E9               	clrf	setRF_Main@error^(0+128)
  7042                           
  7043                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7044  0563  1C20               	btfss	_RF1^(0+128),0
  7045  0564  2E32               	goto	l2197
  7046                           
  7047                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7048  0565  319B  23BB  3185   	fcall	_getBuz_GO
  7049  0568  0020               	movlb	0	; select bank0
  7050  0569  0821               	movf	?_getBuz_GO+1,w
  7051  056A  0420               	iorwf	?_getBuz_GO,w
  7052  056B  1D03               	skipz
  7053  056C  2E13               	goto	l9023
  7054                           
  7055                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7056  056D  319B  23CC  3185   	fcall	_getRF_KeyStatus
  7057  0570  3A01               	xorlw	1
  7058  0571  3000               	movlw	0
  7059  0572  1903               	skipnz
  7060  0573  3001               	movlw	1
  7061  0574  0021               	movlb	1	; select bank1
  7062  0575  00E8               	movwf	??_setRF_Main^(0+128)
  7063  0576  0CE8               	rrf	??_setRF_Main^(0+128),f
  7064  0577  0CE8               	rrf	??_setRF_Main^(0+128),f
  7065  0578  0820               	movf	_RF1^(0+128),w
  7066  0579  0668               	xorwf	??_setRF_Main^(0+128),w
  7067  057A  397F               	andlw	-129
  7068  057B  0668               	xorwf	??_setRF_Main^(0+128),w
  7069  057C  00A0               	movwf	_RF1^(0+128)
  7070                           
  7071                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7072  057D  1FA0               	btfss	_RF1^(0+128),7
  7073  057E  2D81               	goto	l2201
  7074  057F  1F20               	btfss	_RF1^(0+128),6
  7075  0580  2E13               	goto	l9023
  7076  0581                     l2201:	
  7077                           
  7078                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7079  0581  1D20               	btfss	_RF1^(0+128),2
  7080  0582  2DD2               	goto	l2202
  7081                           
  7082                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7083  0583  1B20               	btfsc	_RF1^(0+128),6
  7084  0584  2DCD               	goto	l8995
  7085                           
  7086                           ;RF_Control_B1.c: 68: RF1.Count++;
  7087  0585  3001               	movlw	1
  7088  0586  07A3               	addwf	(_RF1^(0+128)+3),f
  7089  0587  3000               	movlw	0
  7090  0588  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7091                           
  7092                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7093  0589  3014               	movlw	20
  7094  058A  0020               	movlb	0	; select bank0
  7095  058B  00A0               	movwf	___lwdiv@divisor
  7096  058C  3000               	movlw	0
  7097  058D  00A1               	movwf	___lwdiv@divisor+1
  7098  058E  0021               	movlb	1	; select bank1
  7099  058F  0829               	movf	((_RF1+1)^(0+128)+8),w
  7100  0590  0020               	movlb	0	; select bank0
  7101  0591  01A3               	clrf	___lwdiv@dividend+1
  7102  0592  07A3               	addwf	___lwdiv@dividend+1,f
  7103  0593  0021               	movlb	1	; select bank1
  7104  0594  0828               	movf	(_RF1^(0+128)+8),w
  7105  0595  0020               	movlb	0	; select bank0
  7106  0596  01A2               	clrf	___lwdiv@dividend
  7107  0597  07A2               	addwf	___lwdiv@dividend,f
  7108  0598  3190  20B1  3185   	fcall	___lwdiv
  7109  059B  0020               	movlb	0	; select bank0
  7110  059C  0821               	movf	?___lwdiv+1,w
  7111  059D  0021               	movlb	1	; select bank1
  7112  059E  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7113  059F  1D03               	skipz
  7114  05A0  2DA5               	goto	u9375
  7115  05A1  0020               	movlb	0	; select bank0
  7116  05A2  0820               	movf	?___lwdiv,w
  7117  05A3  0021               	movlb	1	; select bank1
  7118  05A4  0223               	subwf	(_RF1^(0+128)+3),w
  7119  05A5                     u9375:	
  7120  05A5  1C03               	skipc
  7121  05A6  2E13               	goto	l9023
  7122                           
  7123                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7124  05A7  3014               	movlw	20
  7125  05A8  0020               	movlb	0	; select bank0
  7126  05A9  00A0               	movwf	___lwdiv@divisor
  7127  05AA  3000               	movlw	0
  7128  05AB  00A1               	movwf	___lwdiv@divisor+1
  7129  05AC  0021               	movlb	1	; select bank1
  7130  05AD  0829               	movf	((_RF1+1)^(0+128)+8),w
  7131  05AE  0020               	movlb	0	; select bank0
  7132  05AF  01A3               	clrf	___lwdiv@dividend+1
  7133  05B0  07A3               	addwf	___lwdiv@dividend+1,f
  7134  05B1  0021               	movlb	1	; select bank1
  7135  05B2  0828               	movf	(_RF1^(0+128)+8),w
  7136  05B3  0020               	movlb	0	; select bank0
  7137  05B4  01A2               	clrf	___lwdiv@dividend
  7138  05B5  07A2               	addwf	___lwdiv@dividend,f
  7139  05B6  3190  20B1  3185   	fcall	___lwdiv
  7140  05B9  0020               	movlb	0	; select bank0
  7141  05BA  0821               	movf	?___lwdiv+1,w
  7142  05BB  0021               	movlb	1	; select bank1
  7143  05BC  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7144  05BD  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7145  05BE  0020               	movlb	0	; select bank0
  7146  05BF  0820               	movf	?___lwdiv,w
  7147  05C0  0021               	movlb	1	; select bank1
  7148  05C1  01A3               	clrf	(_RF1^(0+128)+3)
  7149  05C2  07A3               	addwf	(_RF1^(0+128)+3),f
  7150                           
  7151                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7152  05C3  1120               	bcf	_RF1^(0+128),2
  7153                           
  7154                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7155  05C4  01AB               	clrf	(_RF1^(0+128)+11)
  7156  05C5  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7157                           
  7158                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7159  05C6  319B  2358  3185   	fcall	_RF_RxDisable
  7160                           
  7161                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7162  05C9  3188  20A0  3185   	fcall	_CC2500_TxData
  7163                           
  7164                           ;RF_Control_B1.c: 77: }
  7165                           ;RF_Control_B1.c: 78: } else {
  7166  05CC  2E13               	goto	l9023
  7167  05CD                     l8995:	
  7168                           
  7169                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7170  05CD  0021               	movlb	1	; select bank1
  7171  05CE  01A3               	clrf	(_RF1^(0+128)+3)
  7172  05CF  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7173                           
  7174                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7175  05D0  1120               	bcf	_RF1^(0+128),2
  7176                           
  7177                           ;RF_Control_B1.c: 81: }
  7178                           ;RF_Control_B1.c: 82: } else {
  7179  05D1  2E13               	goto	l9023
  7180  05D2                     l2202:	
  7181                           
  7182                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7183  05D2  1DA0               	btfss	_RF1^(0+128),3
  7184  05D3  2DE1               	goto	l9009
  7185                           
  7186                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7187  05D4  3188  2035  3185   	fcall	_CC2500_RxData
  7188                           
  7189                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7190  05D7  0021               	movlb	1	; select bank1
  7191  05D8  1CA0               	btfss	_RF1^(0+128),1
  7192  05D9  2E13               	goto	l9023
  7193                           
  7194                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7195  05DA  10A0               	bcf	_RF1^(0+128),1
  7196                           
  7197                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7198  05DB  01AB               	clrf	(_RF1^(0+128)+11)
  7199  05DC  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7200                           
  7201                           ;RF_Control_B1.c: 97: getRxData();
  7202  05DD  3196  2602  3185   	fcall	_getRxData
  7203                           
  7204                           ;RF_Control_B1.c: 100: }
  7205                           ;RF_Control_B1.c: 101: } else {
  7206  05E0  2E13               	goto	l9023
  7207  05E1                     l9009:	
  7208                           
  7209                           ;RF_Control_B1.c: 102: RF1.Count++;
  7210  05E1  3001               	movlw	1
  7211  05E2  0021               	movlb	1	; select bank1
  7212  05E3  07A3               	addwf	(_RF1^(0+128)+3),f
  7213  05E4  3000               	movlw	0
  7214  05E5  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7215                           
  7216                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7217  05E6  3014               	movlw	20
  7218  05E7  0020               	movlb	0	; select bank0
  7219  05E8  00A0               	movwf	___lwdiv@divisor
  7220  05E9  3000               	movlw	0
  7221  05EA  00A1               	movwf	___lwdiv@divisor+1
  7222  05EB  0021               	movlb	1	; select bank1
  7223  05EC  0829               	movf	((_RF1+1)^(0+128)+8),w
  7224  05ED  0020               	movlb	0	; select bank0
  7225  05EE  01A3               	clrf	___lwdiv@dividend+1
  7226  05EF  07A3               	addwf	___lwdiv@dividend+1,f
  7227  05F0  0021               	movlb	1	; select bank1
  7228  05F1  0828               	movf	(_RF1^(0+128)+8),w
  7229  05F2  0020               	movlb	0	; select bank0
  7230  05F3  01A2               	clrf	___lwdiv@dividend
  7231  05F4  07A2               	addwf	___lwdiv@dividend,f
  7232  05F5  3190  20B1  3185   	fcall	___lwdiv
  7233  05F8  0020               	movlb	0	; select bank0
  7234  05F9  0821               	movf	?___lwdiv+1,w
  7235  05FA  0021               	movlb	1	; select bank1
  7236  05FB  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7237  05FC  1D03               	skipz
  7238  05FD  2E02               	goto	u9405
  7239  05FE  0020               	movlb	0	; select bank0
  7240  05FF  0820               	movf	?___lwdiv,w
  7241  0600  0021               	movlb	1	; select bank1
  7242  0601  0223               	subwf	(_RF1^(0+128)+3),w
  7243  0602                     u9405:	
  7244  0602  1C03               	skipc
  7245  0603  2E13               	goto	l9023
  7246                           
  7247                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7248  0604  01A3               	clrf	(_RF1^(0+128)+3)
  7249  0605  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7250                           
  7251                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7252  0606  15A0               	bsf	_RF1^(0+128),3
  7253                           
  7254                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7255  0607  3036               	movlw	54
  7256  0608  319D  25B8  3185   	fcall	_CC2500_WriteCommand
  7257                           
  7258                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7259  060B  303A               	movlw	58
  7260  060C  319D  25B8  3185   	fcall	_CC2500_WriteCommand
  7261                           
  7262                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7263  060F  3034               	movlw	52
  7264  0610  319D  25B8  3185   	fcall	_CC2500_WriteCommand
  7265  0613                     l9023:	
  7266                           
  7267                           ;RF_Control_B1.c: 111: }
  7268                           ;RF_Control_B1.c: 112: }
  7269                           ;RF_Control_B1.c: 113: }
  7270                           ;RF_Control_B1.c: 114: }
  7271                           ;RF_Control_B1.c: 115: }
  7272                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7273  0613  3001               	movlw	1
  7274  0614  0021               	movlb	1	; select bank1
  7275  0615  07AB               	addwf	(_RF1^(0+128)+11),f
  7276  0616  3000               	movlw	0
  7277  0617  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7278                           
  7279                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7280  0618  300B               	movlw	11
  7281  0619  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7282  061A  30B9               	movlw	185
  7283  061B  1903               	skipnz
  7284  061C  022B               	subwf	(_RF1^(0+128)+11),w
  7285  061D  1C03               	skipc
  7286  061E  2E2B               	goto	l9037
  7287                           
  7288                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7289  061F  01AB               	clrf	(_RF1^(0+128)+11)
  7290  0620  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7291                           
  7292                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7293  0621  11A0               	bcf	_RF1^(0+128),3
  7294                           
  7295                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7296  0622  10A0               	bcf	_RF1^(0+128),1
  7297                           
  7298                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7299  0623  3036               	movlw	54
  7300  0624  319D  25B8  3185   	fcall	_CC2500_WriteCommand
  7301                           
  7302                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7303  0627  303A               	movlw	58
  7304  0628  319D  25B8  3185   	fcall	_CC2500_WriteCommand
  7305  062B                     l9037:	
  7306                           
  7307                           ;RF_Control_B1.c: 125: }
  7308                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7309  062B  0021               	movlb	1	; select bank1
  7310  062C  1F21               	btfss	(_RF1^(0+128)+1),6
  7311  062D  0008               	return
  7312                           
  7313                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7314  062E  1321               	bcf	(_RF1^(0+128)+1),6
  7315                           
  7316                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7317  062F  319C  24D0         	fcall	_CC2500_PowerOnInitial
  7318                           
  7319                           ;RF_Control_B1.c: 130: }
  7320                           ;RF_Control_B1.c: 132: } else {
  7321  0631  0008               	return
  7322  0632                     l2197:	
  7323                           
  7324                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7325  0632  1C2F               	btfss	_myMain^(0+128),0
  7326  0633  0008               	return
  7327                           
  7328                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7329  0634  1420               	bsf	_RF1^(0+128),0
  7330  0635  0008               	return
  7331  0636                     __end_of_setRF_Main:	
  7332                           
  7333                           	psect	text26
  7334  1602                     __ptext26:	
  7335 ;; *************** function _getRxData *****************
  7336 ;; Defined at:
  7337 ;;		line 245 in file "../src/RF_Control_B1.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;		None
  7340 ;; Auto vars:     Size  Location     Type
  7341 ;;  error           1    1[BANK1 ] unsigned char 
  7342 ;; Return value:  Size  Location     Type
  7343 ;;		None               void
  7344 ;; Registers used:
  7345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7346 ;; Tracked objects:
  7347 ;;		On entry : 0/0
  7348 ;;		On exit  : 0/0
  7349 ;;		Unchanged: 0/0
  7350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7352 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7353 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;Total ram usage:        2 bytes
  7356 ;; Hardware stack levels used:    1
  7357 ;; Hardware stack levels required when called:   10
  7358 ;; This function calls:
  7359 ;;		_getMain_All_Error_Status
  7360 ;;		_setControl_Lights_Table
  7361 ;;		_setLog_Code
  7362 ;;		_setTxData
  7363 ;; This function is called by:
  7364 ;;		_setRF_Main
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           
  7369                           ;psect for function _getRxData
  7370  1602                     _getRxData:	
  7371                           
  7372                           ;RF_Control_B1.c: 247: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7373                           
  7374                           ;incstack = 0
  7375                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7376  1602  0023               	movlb	3	; select bank3
  7377  1603  0820               	movf	_RF_Data^(0+384),w
  7378  1604  3AAA               	xorlw	170
  7379  1605  1D03               	skipz
  7380  1606  2E18               	goto	l7285
  7381  1607  0821               	movf	(_RF_Data^(0+384)+1),w
  7382  1608  3A01               	xorlw	1
  7383  1609  1D03               	skipz
  7384  160A  2E18               	goto	l7285
  7385                           
  7386                           ;RF_Control_B1.c: 248: product->Data[2] = 0x55;
  7387  160B  3055               	movlw	85
  7388  160C  0021               	movlb	1	; select bank1
  7389  160D  00E6               	movwf	??_getRxData^(0+128)
  7390  160E  086E               	movf	_product^(0+128),w
  7391  160F  3E02               	addlw	2
  7392  1610  0086               	movwf	6
  7393  1611  3002               	movlw	2	; select bank4/5
  7394  1612  0087               	movwf	7
  7395  1613  0866               	movf	??_getRxData^(0+128),w
  7396  1614  0081               	movwf	1
  7397                           
  7398                           ;RF_Control_B1.c: 249: setTxData();
  7399  1615  318E  267F         	fcall	_setTxData
  7400                           
  7401                           ;RF_Control_B1.c: 253: } else {
  7402  1617  0008               	return
  7403  1618                     l7285:	
  7404                           
  7405                           ;RF_Control_B1.c: 254: char error = getMain_All_Error_Status(0);
  7406  1618  3000               	movlw	0
  7407  1619  3190  2048  3196   	fcall	_getMain_All_Error_Status
  7408  161C  0021               	movlb	1	; select bank1
  7409  161D  00E6               	movwf	??_getRxData^(0+128)
  7410  161E  0866               	movf	??_getRxData^(0+128),w
  7411  161F  00E7               	movwf	getRxData@error^(0+128)
  7412                           
  7413                           ;RF_Control_B1.c: 255: if (error == 0) {
  7414  1620  08E7               	movf	getRxData@error^(0+128),f
  7415  1621  1D03               	skipz
  7416  1622  2E64               	goto	l2242
  7417                           
  7418                           ;RF_Control_B1.c: 256: if (RF1.Learn == 1) {
  7419  1623  1F20               	btfss	_RF1^(0+128),6
  7420  1624  2E30               	goto	l7297
  7421                           
  7422                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7423  1625  0023               	movlb	3	; select bank3
  7424  1626  08A0               	movf	_RF_Data^(0+384),f
  7425  1627  1D03               	skipz
  7426  1628  0008               	return
  7427  1629  0821               	movf	(_RF_Data^(0+384)+1),w
  7428  162A  3A64               	xorlw	100
  7429  162B  1D03               	skipz
  7430  162C  0008               	return
  7431                           
  7432                           ;RF_Control_B1.c: 259: setLog_Code();
  7433  162D  3188  2001         	fcall	_setLog_Code
  7434                           
  7435                           ;RF_Control_B1.c: 260: }
  7436                           ;RF_Control_B1.c: 278: } else {
  7437  162F  0008               	return
  7438  1630                     l7297:	
  7439                           
  7440                           ;RF_Control_B1.c: 279: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7441  1630  0023               	movlb	3	; select bank3
  7442  1631  0834               	movf	(_RF_Data^(0+384)+20),w
  7443  1632  3AD1               	xorlw	209
  7444  1633  1903               	skipnz
  7445  1634  2E39               	goto	l7301
  7446  1635  0834               	movf	(_RF_Data^(0+384)+20),w
  7447  1636  3A0A               	xorlw	10
  7448  1637  1D03               	skipz
  7449  1638  0008               	return
  7450  1639                     l7301:	
  7451                           
  7452                           ;RF_Control_B1.c: 281: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7453  1639  08A0               	movf	_RF_Data^(0+384),f
  7454  163A  1D03               	skipz
  7455  163B  0008               	return
  7456  163C  0821               	movf	(_RF_Data^(0+384)+1),w
  7457  163D  3A02               	xorlw	2
  7458  163E  1D03               	skipz
  7459  163F  0008               	return
  7460                           
  7461                           ;RF_Control_B1.c: 283: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7462  1640  0021               	movlb	1	; select bank1
  7463  1641  086E               	movf	_product^(0+128),w
  7464  1642  3E0C               	addlw	12
  7465  1643  0086               	movwf	6
  7466  1644  3002               	movlw	2	; select bank4/5
  7467  1645  0087               	movwf	7
  7468  1646  0023               	movlb	3	; select bank3
  7469  1647  082C               	movf	(_RF_Data^(0+384)+12),w
  7470  1648  0601               	xorwf	1,w
  7471  1649  1D03               	skipz
  7472  164A  0008               	return
  7473  164B  0021               	movlb	1	; select bank1
  7474  164C  086E               	movf	_product^(0+128),w
  7475  164D  3E0D               	addlw	13
  7476  164E  0086               	movwf	6
  7477  164F  3002               	movlw	2	; select bank4/5
  7478  1650  0087               	movwf	7
  7479  1651  0023               	movlb	3	; select bank3
  7480  1652  082D               	movf	(_RF_Data^(0+384)+13),w
  7481  1653  0601               	xorwf	1,w
  7482  1654  1D03               	skipz
  7483  1655  0008               	return
  7484  1656  0021               	movlb	1	; select bank1
  7485  1657  086E               	movf	_product^(0+128),w
  7486  1658  3E0E               	addlw	14
  7487  1659  0086               	movwf	6
  7488  165A  3002               	movlw	2	; select bank4/5
  7489  165B  0087               	movwf	7
  7490  165C  0023               	movlb	3	; select bank3
  7491  165D  082E               	movf	(_RF_Data^(0+384)+14),w
  7492  165E  0601               	xorwf	1,w
  7493  165F  1D03               	skipz
  7494  1660  0008               	return
  7495                           
  7496                           ;RF_Control_B1.c: 284: setControl_Lights_Table();
  7497  1661  3189  21ED         	fcall	_setControl_Lights_Table
  7498                           
  7499                           ;RF_Control_B1.c: 285: }
  7500                           ;RF_Control_B1.c: 288: }
  7501                           ;RF_Control_B1.c: 299: }
  7502                           ;RF_Control_B1.c: 300: }
  7503                           ;RF_Control_B1.c: 301: } else {
  7504  1663  0008               	return
  7505  1664                     l2242:	
  7506                           
  7507                           ;RF_Control_B1.c: 302: __nop();
  7508  1664  0000               	nop
  7509  1665  0008               	return
  7510  1666                     __end_of_getRxData:	
  7511                           
  7512                           	psect	text27
  7513  0801                     __ptext27:	
  7514 ;; *************** function _setLog_Code *****************
  7515 ;; Defined at:
  7516 ;;		line 308 in file "../src/RF_Control_B1.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;		None
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;		None
  7521 ;; Return value:  Size  Location     Type
  7522 ;;		None               void
  7523 ;; Registers used:
  7524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/0
  7527 ;;		On exit  : 0/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;Total ram usage:        1 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    7
  7537 ;; This function calls:
  7538 ;;		_setBuz
  7539 ;;		_setMemory_LoopSave
  7540 ;;		_setMemory_Modify
  7541 ;;		_setProductData
  7542 ;; This function is called by:
  7543 ;;		_getRxData
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           
  7548                           ;psect for function _setLog_Code
  7549  0801                     _setLog_Code:	
  7550                           
  7551                           ;RF_Control_B1.c: 309: RF1.Learn = 0;
  7552                           
  7553                           ;incstack = 0
  7554                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7555  0801  0021               	movlb	1	; select bank1
  7556  0802  1320               	bcf	_RF1^(0+128),6
  7557                           
  7558                           ;RF_Control_B1.c: 310: setProductData(12, RF_Data[12]);
  7559  0803  0023               	movlb	3	; select bank3
  7560  0804  082C               	movf	(_RF_Data^(0+384)+12),w
  7561  0805  0020               	movlb	0	; select bank0
  7562  0806  00E5               	movwf	??_setLog_Code
  7563  0807  0865               	movf	??_setLog_Code,w
  7564  0808  00E2               	movwf	setProductData@value
  7565  0809  300C               	movlw	12
  7566  080A  319A  2298  3188   	fcall	_setProductData
  7567                           
  7568                           ;RF_Control_B1.c: 311: setProductData(13, RF_Data[13]);
  7569  080D  0023               	movlb	3	; select bank3
  7570  080E  082D               	movf	(_RF_Data^(0+384)+13),w
  7571  080F  0020               	movlb	0	; select bank0
  7572  0810  00E5               	movwf	??_setLog_Code
  7573  0811  0865               	movf	??_setLog_Code,w
  7574  0812  00E2               	movwf	setProductData@value
  7575  0813  300D               	movlw	13
  7576  0814  319A  2298  3188   	fcall	_setProductData
  7577                           
  7578                           ;RF_Control_B1.c: 312: setProductData(14, RF_Data[14]);
  7579  0817  0023               	movlb	3	; select bank3
  7580  0818  082E               	movf	(_RF_Data^(0+384)+14),w
  7581  0819  0020               	movlb	0	; select bank0
  7582  081A  00E5               	movwf	??_setLog_Code
  7583  081B  0865               	movf	??_setLog_Code,w
  7584  081C  00E2               	movwf	setProductData@value
  7585  081D  300E               	movlw	14
  7586  081E  319A  2298  3188   	fcall	_setProductData
  7587                           
  7588                           ;RF_Control_B1.c: 313: setBuz(1, 100);
  7589  0821  3064               	movlw	100
  7590  0822  0020               	movlb	0	; select bank0
  7591  0823  00A9               	movwf	setBuz@time
  7592  0824  3000               	movlw	0
  7593  0825  00AA               	movwf	setBuz@time+1
  7594  0826  3001               	movlw	1
  7595  0827  3194  248F  3188   	fcall	_setBuz
  7596                           
  7597                           ;RF_Control_B1.c: 314: if (myMain.First == 1) {
  7598  082A  0021               	movlb	1	; select bank1
  7599  082B  1EAF               	btfss	_myMain^(0+128),5
  7600  082C  2831               	goto	l2255
  7601                           
  7602                           ;RF_Control_B1.c: 315: setMemory_LoopSave(1);
  7603  082D  3001               	movlw	1
  7604  082E  319C  2481  3188   	fcall	_setMemory_LoopSave
  7605  0831                     l2255:	
  7606                           
  7607                           ;RF_Control_B1.c: 316: }
  7608                           ;RF_Control_B1.c: 317: setMemory_Modify(1);
  7609  0831  3001               	movlw	1
  7610  0832  319C  2448         	fcall	_setMemory_Modify
  7611  0834  0008               	return
  7612  0835                     __end_of_setLog_Code:	
  7613                           
  7614                           	psect	text28
  7615  1C81                     __ptext28:	
  7616 ;; *************** function _setMemory_LoopSave *****************
  7617 ;; Defined at:
  7618 ;;		line 1092 in file "../src/MCU_B1.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  command         1    wreg     unsigned char 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  command         1    1[BANK0 ] unsigned char 
  7623 ;; Return value:  Size  Location     Type
  7624 ;;		None               void
  7625 ;; Registers used:
  7626 ;;		wreg, status,2, status,0
  7627 ;; Tracked objects:
  7628 ;;		On entry : 0/0
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;Total ram usage:        2 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:    5
  7639 ;; This function calls:
  7640 ;;		Nothing
  7641 ;; This function is called by:
  7642 ;;		_setLog_Code
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           
  7647                           ;psect for function _setMemory_LoopSave
  7648  1C81                     _setMemory_LoopSave:	
  7649                           
  7650                           ;incstack = 0
  7651                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7652                           ;setMemory_LoopSave@command stored from wreg
  7653  1C81  0020               	movlb	0	; select bank0
  7654  1C82  00A1               	movwf	setMemory_LoopSave@command
  7655                           
  7656                           ;MCU_B1.c: 1093: Memory.LoopSave = command == 1 ? 1 : 0;
  7657  1C83  0821               	movf	setMemory_LoopSave@command,w
  7658  1C84  3A01               	xorlw	1
  7659  1C85  3000               	movlw	0
  7660  1C86  1903               	skipnz
  7661  1C87  3001               	movlw	1
  7662  1C88  00A0               	movwf	??_setMemory_LoopSave
  7663  1C89  0DA0               	rlf	??_setMemory_LoopSave,f
  7664  1C8A  0DA0               	rlf	??_setMemory_LoopSave,f
  7665  1C8B  0024               	movlb	4	; select bank4
  7666  1C8C  0844               	movf	(_Memory^(0+512)+36),w
  7667  1C8D  0020               	movlb	0	; select bank0
  7668  1C8E  0620               	xorwf	??_setMemory_LoopSave,w
  7669  1C8F  39FB               	andlw	-5
  7670  1C90  0620               	xorwf	??_setMemory_LoopSave,w
  7671  1C91  0024               	movlb	4	; select bank4
  7672  1C92  00C4               	movwf	(_Memory^(0+512)+36)
  7673  1C93  0008               	return
  7674  1C94                     __end_of_setMemory_LoopSave:	
  7675                           
  7676                           	psect	text29
  7677  09ED                     __ptext29:	
  7678 ;; *************** function _setControl_Lights_Table *****************
  7679 ;; Defined at:
  7680 ;;		line 321 in file "../src/RF_Control_B1.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;		None
  7683 ;; Auto vars:     Size  Location     Type
  7684 ;;		None
  7685 ;; Return value:  Size  Location     Type
  7686 ;;		None               void
  7687 ;; Registers used:
  7688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7689 ;; Tracked objects:
  7690 ;;		On entry : 0/0
  7691 ;;		On exit  : 0/0
  7692 ;;		Unchanged: 0/0
  7693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7698 ;;Total ram usage:        0 bytes
  7699 ;; Hardware stack levels used:    1
  7700 ;; Hardware stack levels required when called:    9
  7701 ;; This function calls:
  7702 ;;		_getDimmerLights_Status
  7703 ;;		_getMain_All_LightsStatus
  7704 ;;		_setCmd_Status
  7705 ;;		_setDimmerLights_SwOff
  7706 ;;		_setDimmerLights_SwOn
  7707 ;;		_setProductData
  7708 ;;		_setRFSW_AdjControl
  7709 ;;		_setRFSW_Control
  7710 ;;		_setRF_AdjControl
  7711 ;;		_setTxData
  7712 ;; This function is called by:
  7713 ;;		_getRxData
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           
  7718                           ;psect for function _setControl_Lights_Table
  7719  09ED                     _setControl_Lights_Table:	
  7720                           
  7721                           ;RF_Control_B1.c: 323: switch (RF_Data[15]) {
  7722                           
  7723                           ;incstack = 0
  7724                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7725  09ED  2A53               	goto	l6883
  7726  09EE                     l6863:	
  7727                           ;RF_Control_B1.c: 325: case 0x00:
  7728                           
  7729                           
  7730                           ;RF_Control_B1.c: 326: if (getMain_All_LightsStatus() == 1) {
  7731  09EE  319A  2255  3189   	fcall	_getMain_All_LightsStatus
  7732  09F1  3A01               	xorlw	1
  7733  09F2  1D03               	skipz
  7734  09F3  2A0A               	goto	l6871
  7735                           
  7736                           ;RF_Control_B1.c: 329: if (getDimmerLights_Status(1) == 1) {
  7737  09F4  3001               	movlw	1
  7738  09F5  319B  2377  3189   	fcall	_getDimmerLights_Status
  7739  09F8  3A01               	xorlw	1
  7740  09F9  1D03               	skipz
  7741  09FA  2A03               	goto	l6869
  7742                           
  7743                           ;RF_Control_B1.c: 330: setDimmerLights_SwOn(1);
  7744  09FB  3001               	movlw	1
  7745  09FC  3193  239A  3189   	fcall	_setDimmerLights_SwOn
  7746                           
  7747                           ;RF_Control_B1.c: 331: setDimmerLights_SwOff(1);
  7748  09FF  3001               	movlw	1
  7749  0A00  3191  2120  3189   	fcall	_setDimmerLights_SwOff
  7750  0A03                     l6869:	
  7751                           
  7752                           ;RF_Control_B1.c: 332: }
  7753                           ;RF_Control_B1.c: 347: setCmd_Status(1, 1);
  7754  0A03  0020               	movlb	0	; select bank0
  7755  0A04  01A0               	clrf	setCmd_Status@cmd
  7756  0A05  0AA0               	incf	setCmd_Status@cmd,f
  7757  0A06  3001               	movlw	1
  7758  0A07  319D  256B         	fcall	_setCmd_Status
  7759                           
  7760                           ;RF_Control_B1.c: 348: } else {
  7761  0A09  0008               	return
  7762  0A0A                     l6871:	
  7763                           
  7764                           ;RF_Control_B1.c: 349: setProductData(9, 0);
  7765  0A0A  0020               	movlb	0	; select bank0
  7766  0A0B  01E2               	clrf	setProductData@value
  7767  0A0C  3009               	movlw	9
  7768  0A0D  319A  2298  3189   	fcall	_setProductData
  7769                           
  7770                           ;RF_Control_B1.c: 350: setProductData(11, 0);
  7771  0A10  0020               	movlb	0	; select bank0
  7772  0A11  01E2               	clrf	setProductData@value
  7773  0A12  300B               	movlw	11
  7774  0A13  319A  2298  3189   	fcall	_setProductData
  7775                           
  7776                           ;RF_Control_B1.c: 351: setProductData(15, 0);
  7777  0A16  0020               	movlb	0	; select bank0
  7778  0A17  01E2               	clrf	setProductData@value
  7779  0A18  300F               	movlw	15
  7780  0A19  319A  2298  3189   	fcall	_setProductData
  7781                           
  7782                           ;RF_Control_B1.c: 352: setProductData(17, 0);
  7783  0A1C  0020               	movlb	0	; select bank0
  7784  0A1D  01E2               	clrf	setProductData@value
  7785  0A1E  3011               	movlw	17
  7786  0A1F  319A  2298  3189   	fcall	_setProductData
  7787                           
  7788                           ;RF_Control_B1.c: 353: setTxData();
  7789  0A22  318E  267F         	fcall	_setTxData
  7790                           
  7791                           ;RF_Control_B1.c: 354: }
  7792                           ;RF_Control_B1.c: 355: break;
  7793  0A24  0008               	return
  7794  0A25                     l6873:	
  7795                           ;RF_Control_B1.c: 357: case 0x20:
  7796                           
  7797                           
  7798                           ;RF_Control_B1.c: 358: setProductData(9, 0);
  7799  0A25  0020               	movlb	0	; select bank0
  7800  0A26  01E2               	clrf	setProductData@value
  7801  0A27  3009               	movlw	9
  7802  0A28  319A  2298  3189   	fcall	_setProductData
  7803                           
  7804                           ;RF_Control_B1.c: 359: setProductData(11, 0);
  7805  0A2B  0020               	movlb	0	; select bank0
  7806  0A2C  01E2               	clrf	setProductData@value
  7807  0A2D  300B               	movlw	11
  7808  0A2E  319A  2298  3189   	fcall	_setProductData
  7809                           
  7810                           ;RF_Control_B1.c: 360: setProductData(15, product->Data[15]);
  7811  0A31  0021               	movlb	1	; select bank1
  7812  0A32  086E               	movf	_product^(0+128),w
  7813  0A33  0086               	movwf	6
  7814  0A34  3002               	movlw	2	; select bank4/5
  7815  0A35  0087               	movwf	7
  7816  0A36  3002               	movlw	2	; select bank4/5
  7817  0A37  3F4F               	moviw [15]fsr1
  7818  0A38  0020               	movlb	0	; select bank0
  7819  0A39  00E2               	movwf	setProductData@value
  7820  0A3A  300F               	movlw	15
  7821  0A3B  319A  2298  3189   	fcall	_setProductData
  7822                           
  7823                           ;RF_Control_B1.c: 361: setProductData(17, 0);
  7824  0A3E  0020               	movlb	0	; select bank0
  7825  0A3F  01E2               	clrf	setProductData@value
  7826  0A40  3011               	movlw	17
  7827  0A41  319A  2298  3189   	fcall	_setProductData
  7828                           
  7829                           ;RF_Control_B1.c: 362: setTxData();
  7830  0A44  318E  267F         	fcall	_setTxData
  7831                           
  7832                           ;RF_Control_B1.c: 363: break;
  7833  0A46  0008               	return
  7834  0A47                     l6875:	
  7835                           ;RF_Control_B1.c: 366: case 0x01:
  7836                           
  7837                           
  7838                           ;RF_Control_B1.c: 367: setRFSW_Control(1);
  7839  0A47  3001               	movlw	1
  7840  0A48  3192  2245         	fcall	_setRFSW_Control
  7841                           
  7842                           ;RF_Control_B1.c: 368: break;
  7843  0A4A  0008               	return
  7844  0A4B                     l6877:	
  7845                           ;RF_Control_B1.c: 372: case 0x11:
  7846                           
  7847                           
  7848                           ;RF_Control_B1.c: 373: setRFSW_AdjControl(1);
  7849  0A4B  3001               	movlw	1
  7850  0A4C  318A  22ED         	fcall	_setRFSW_AdjControl
  7851                           
  7852                           ;RF_Control_B1.c: 374: break;
  7853  0A4E  0008               	return
  7854  0A4F                     l6879:	
  7855                           ;RF_Control_B1.c: 376: case 0xd1:
  7856                           
  7857                           
  7858                           ;RF_Control_B1.c: 377: setRF_AdjControl(1);
  7859  0A4F  3001               	movlw	1
  7860  0A50  3191  2192         	fcall	_setRF_AdjControl
  7861                           
  7862                           ;RF_Control_B1.c: 411: }
  7863                           
  7864                           ;RF_Control_B1.c: 378: break;
  7865  0A52  0008               	return
  7866  0A53                     l6883:	
  7867  0A53  0023               	movlb	3	; select bank3
  7868  0A54  082F               	movf	(_RF_Data^(0+384)+15),w
  7869                           
  7870                           ; Switch size 1, requested type "space"
  7871                           ; Number of cases is 5, Range of values is 0 to 209
  7872                           ; switch strategies available:
  7873                           ; Name         Instructions Cycles
  7874                           ; simple_byte           16     9 (average)
  7875                           ; jumptable            260     6 (fixed)
  7876                           ;	Chosen strategy is simple_byte
  7877  0A55  3A00               	xorlw	0	; case 0
  7878  0A56  1903               	skipnz
  7879  0A57  29EE               	goto	l6863
  7880  0A58  3A01               	xorlw	1	; case 1
  7881  0A59  1903               	skipnz
  7882  0A5A  2A47               	goto	l6875
  7883  0A5B  3A10               	xorlw	16	; case 17
  7884  0A5C  1903               	skipnz
  7885  0A5D  2A4B               	goto	l6877
  7886  0A5E  3A31               	xorlw	49	; case 32
  7887  0A5F  1903               	skipnz
  7888  0A60  2A25               	goto	l6873
  7889  0A61  3AF1               	xorlw	241	; case 209
  7890  0A62  1903               	skipnz
  7891  0A63  2A4F               	goto	l6879
  7892  0A64  2A65               	goto	l2269
  7893  0A65                     l2269:	
  7894  0A65  0008               	return
  7895  0A66                     __end_of_setControl_Lights_Table:	
  7896                           
  7897                           	psect	text30
  7898  1192                     __ptext30:	
  7899 ;; *************** function _setRF_AdjControl *****************
  7900 ;; Defined at:
  7901 ;;		line 490 in file "../src/RF_Control_B1.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  sw              1    wreg     unsigned char 
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;  sw              1    7[BANK0 ] unsigned char 
  7906 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
  7907 ;;  status          1    5[BANK0 ] unsigned char 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;		None               void
  7910 ;; Registers used:
  7911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;Total ram usage:        4 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    7
  7924 ;; This function calls:
  7925 ;;		_DimmerLights_SelectPointer
  7926 ;;		_getDimmerIntr_Dimming_Sw
  7927 ;;		_getDimmerLights_Status
  7928 ;; This function is called by:
  7929 ;;		_setControl_Lights_Table
  7930 ;; This function uses a non-reentrant model
  7931 ;;
  7932                           
  7933                           
  7934                           ;psect for function _setRF_AdjControl
  7935  1192                     _setRF_AdjControl:	
  7936                           
  7937                           ;incstack = 0
  7938                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7939                           ;setRF_AdjControl@sw stored from wreg
  7940  1192  0020               	movlb	0	; select bank0
  7941  1193  00A7               	movwf	setRF_AdjControl@sw
  7942                           
  7943                           ;RF_Control_B1.c: 491: char status = 0;
  7944  1194  01A5               	clrf	setRF_AdjControl@status
  7945                           
  7946                           ;RF_Control_B1.c: 493: status = getDimmerLights_Status(sw);
  7947  1195  0827               	movf	setRF_AdjControl@sw,w
  7948  1196  319B  2377  3191   	fcall	_getDimmerLights_Status
  7949  1199  0020               	movlb	0	; select bank0
  7950  119A  00A4               	movwf	??_setRF_AdjControl
  7951  119B  0824               	movf	??_setRF_AdjControl,w
  7952  119C  00A5               	movwf	setRF_AdjControl@status
  7953                           
  7954                           ;RF_Control_B1.c: 494: char dimmingStatus = 0;
  7955  119D  01A6               	clrf	setRF_AdjControl@dimmingStatus
  7956                           
  7957                           ;RF_Control_B1.c: 495: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  7958  119E  0827               	movf	setRF_AdjControl@sw,w
  7959  119F  319B  232B  3191   	fcall	_getDimmerIntr_Dimming_Sw
  7960  11A2  0020               	movlb	0	; select bank0
  7961  11A3  00A4               	movwf	??_setRF_AdjControl
  7962  11A4  0824               	movf	??_setRF_AdjControl,w
  7963  11A5  00A6               	movwf	setRF_AdjControl@dimmingStatus
  7964                           
  7965                           ;RF_Control_B1.c: 497: if (status == 1) {
  7966  11A6  0825               	movf	setRF_AdjControl@status,w
  7967  11A7  3A01               	xorlw	1
  7968  11A8  1D03               	skipz
  7969  11A9  0008               	return
  7970                           
  7971                           ;RF_Control_B1.c: 498: if (dimmingStatus == 0) {
  7972  11AA  08A6               	movf	setRF_AdjControl@dimmingStatus,f
  7973  11AB  1D03               	skipz
  7974  11AC  29BC               	goto	l6633
  7975                           
  7976                           ;RF_Control_B1.c: 499: DimmerLights_SelectPointer(sw);
  7977  11AD  0827               	movf	setRF_AdjControl@sw,w
  7978  11AE  319A  228C         	fcall	_DimmerLights_SelectPointer
  7979                           
  7980                           ;RF_Control_B1.c: 500: DimmerLights->DimmingTrigger = 1;
  7981  11B0  0021               	movlb	1	; select bank1
  7982  11B1  084C               	movf	_DimmerLights^(0+128),w
  7983  11B2  0086               	movwf	6
  7984  11B3  3001               	movlw	1	; select bank2/3
  7985  11B4  0087               	movwf	7
  7986  11B5  1601               	bsf	1,4
  7987                           
  7988                           ;RF_Control_B1.c: 501: DimmerLights->DimmingSwitch = 1;
  7989  11B6  084C               	movf	_DimmerLights^(0+128),w
  7990  11B7  0086               	movwf	6
  7991  11B8  3001               	movlw	1	; select bank2/3
  7992  11B9  0087               	movwf	7
  7993  11BA  1681               	bsf	1,5
  7994                           
  7995                           ;RF_Control_B1.c: 503: } else {
  7996  11BB  0008               	return
  7997  11BC                     l6633:	
  7998                           
  7999                           ;RF_Control_B1.c: 504: DimmerLights_SelectPointer(sw);
  8000  11BC  0020               	movlb	0	; select bank0
  8001  11BD  0827               	movf	setRF_AdjControl@sw,w
  8002  11BE  319A  228C         	fcall	_DimmerLights_SelectPointer
  8003                           
  8004                           ;RF_Control_B1.c: 505: DimmerLights->DimmingTrigger = 1;
  8005  11C0  0021               	movlb	1	; select bank1
  8006  11C1  084C               	movf	_DimmerLights^(0+128),w
  8007  11C2  0086               	movwf	6
  8008  11C3  3001               	movlw	1	; select bank2/3
  8009  11C4  0087               	movwf	7
  8010  11C5  1601               	bsf	1,4
  8011                           
  8012                           ;RF_Control_B1.c: 506: DimmerLights->DimmingSwitch = 0;
  8013  11C6  084C               	movf	_DimmerLights^(0+128),w
  8014  11C7  0086               	movwf	6
  8015  11C8  3001               	movlw	1	; select bank2/3
  8016  11C9  0087               	movwf	7
  8017  11CA  1281               	bcf	1,5
  8018  11CB  0008               	return
  8019  11CC                     __end_of_setRF_AdjControl:	
  8020                           
  8021                           	psect	text31
  8022  1245                     __ptext31:	
  8023 ;; *************** function _setRFSW_Control *****************
  8024 ;; Defined at:
  8025 ;;		line 419 in file "../src/RF_Control_B1.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  sw              1    wreg     unsigned char 
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  sw              1   79[BANK0 ] unsigned char 
  8030 ;;  status          1   78[BANK0 ] unsigned char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;		None               void
  8033 ;; Registers used:
  8034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;Total ram usage:        3 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    8
  8047 ;; This function calls:
  8048 ;;		_getDimmerLights_Status
  8049 ;;		_setBuz
  8050 ;;		_setDelayOff_GO
  8051 ;;		_setDimmerLights_SwOff
  8052 ;;		_setDimmerLights_SwOn
  8053 ;;		_setRF_DimmerLights
  8054 ;;		_setTxData
  8055 ;; This function is called by:
  8056 ;;		_setControl_Lights_Table
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _setRFSW_Control
  8062  1245                     _setRFSW_Control:	
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8066                           ;setRFSW_Control@sw stored from wreg
  8067  1245  0020               	movlb	0	; select bank0
  8068  1246  00EF               	movwf	setRFSW_Control@sw
  8069                           
  8070                           ;RF_Control_B1.c: 420: char status = 0;
  8071  1247  01EE               	clrf	setRFSW_Control@status
  8072                           
  8073                           ;RF_Control_B1.c: 422: if (RF_Data[16] == 0x80) {
  8074  1248  0023               	movlb	3	; select bank3
  8075  1249  0830               	movf	(_RF_Data^(0+384)+16),w
  8076  124A  3A80               	xorlw	128
  8077  124B  1D03               	skipz
  8078  124C  2A78               	goto	l6583
  8079                           
  8080                           ;RF_Control_B1.c: 423: setDelayOff_GO(sw, 1, RF_Data[17]);
  8081  124D  0020               	movlb	0	; select bank0
  8082  124E  01E5               	clrf	setDelayOff_GO@command
  8083  124F  0AE5               	incf	setDelayOff_GO@command,f
  8084  1250  0023               	movlb	3	; select bank3
  8085  1251  0831               	movf	(_RF_Data^(0+384)+17),w
  8086  1252  0020               	movlb	0	; select bank0
  8087  1253  00ED               	movwf	??_setRFSW_Control
  8088  1254  086D               	movf	??_setRFSW_Control,w
  8089  1255  00E6               	movwf	setDelayOff_GO@value
  8090  1256  086F               	movf	setRFSW_Control@sw,w
  8091  1257  318B  2376  3192   	fcall	_setDelayOff_GO
  8092                           
  8093                           ;RF_Control_B1.c: 424: if (getDimmerLights_Status(sw) == 1) {
  8094  125A  0020               	movlb	0	; select bank0
  8095  125B  086F               	movf	setRFSW_Control@sw,w
  8096  125C  319B  2377  3192   	fcall	_getDimmerLights_Status
  8097  125F  3A01               	xorlw	1
  8098  1260  1D03               	skipz
  8099  1261  2A78               	goto	l6583
  8100                           
  8101                           ;RF_Control_B1.c: 425: setBuz(1, 100);
  8102  1262  3064               	movlw	100
  8103  1263  0020               	movlb	0	; select bank0
  8104  1264  00A9               	movwf	setBuz@time
  8105  1265  3000               	movlw	0
  8106  1266  00AA               	movwf	setBuz@time+1
  8107  1267  3001               	movlw	1
  8108  1268  3194  248F  3192   	fcall	_setBuz
  8109                           
  8110                           ;RF_Control_B1.c: 426: setRF_DimmerLights(sw, 1);
  8111  126B  0020               	movlb	0	; select bank0
  8112  126C  01E5               	clrf	setRF_DimmerLights@on
  8113  126D  0AE5               	incf	setRF_DimmerLights@on,f
  8114  126E  086F               	movf	setRFSW_Control@sw,w
  8115  126F  3197  2730  3192   	fcall	_setRF_DimmerLights
  8116                           
  8117                           ;RF_Control_B1.c: 427: setTxData();
  8118  1272  318E  267F  3192   	fcall	_setTxData
  8119                           
  8120                           ;RF_Control_B1.c: 428: status = 1;
  8121  1275  0020               	movlb	0	; select bank0
  8122  1276  01EE               	clrf	setRFSW_Control@status
  8123  1277  0AEE               	incf	setRFSW_Control@status,f
  8124  1278                     l6583:	
  8125                           
  8126                           ;RF_Control_B1.c: 429: }
  8127                           ;RF_Control_B1.c: 430: }
  8128                           ;RF_Control_B1.c: 432: if (status == 0) {
  8129  1278  0020               	movlb	0	; select bank0
  8130  1279  08EE               	movf	setRFSW_Control@status,f
  8131  127A  1D03               	skipz
  8132  127B  0008               	return
  8133                           
  8134                           ;RF_Control_B1.c: 434: setDimmerLights_SwOn(sw);
  8135  127C  086F               	movf	setRFSW_Control@sw,w
  8136  127D  3193  239A  3192   	fcall	_setDimmerLights_SwOn
  8137                           
  8138                           ;RF_Control_B1.c: 435: setDimmerLights_SwOff(sw);
  8139  1280  0020               	movlb	0	; select bank0
  8140  1281  086F               	movf	setRFSW_Control@sw,w
  8141  1282  3191  2120         	fcall	_setDimmerLights_SwOff
  8142  1284  0008               	return
  8143  1285                     __end_of_setRFSW_Control:	
  8144                           
  8145                           	psect	text32
  8146  0AED                     __ptext32:	
  8147 ;; *************** function _setRFSW_AdjControl *****************
  8148 ;; Defined at:
  8149 ;;		line 442 in file "../src/RF_Control_B1.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  sw              1    wreg     unsigned char 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  sw              1   72[BANK0 ] unsigned char 
  8154 ;;  status          1   71[BANK0 ] unsigned char 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;		None               void
  8157 ;; Registers used:
  8158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;Total ram usage:        4 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    8
  8171 ;; This function calls:
  8172 ;;		_getDimmerLights_PercentToValue
  8173 ;;		_getDimmerLights_Status
  8174 ;;		_setBuz
  8175 ;;		_setDimmerIntr_Dimming_RF
  8176 ;;		_setDimmerIntr_MaxmumValue
  8177 ;;		_setDimmerLights_DimmingRun
  8178 ;;		_setDimmerLights_SwOff
  8179 ;;		_setDimmerLights_SwOn
  8180 ;;		_setMemory_Modify
  8181 ;;		_setProductData
  8182 ;;		_setTxData
  8183 ;; This function is called by:
  8184 ;;		_setControl_Lights_Table
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _setRFSW_AdjControl
  8190  0AED                     _setRFSW_AdjControl:	
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8194                           ;setRFSW_AdjControl@sw stored from wreg
  8195  0AED  0020               	movlb	0	; select bank0
  8196  0AEE  00E8               	movwf	setRFSW_AdjControl@sw
  8197                           
  8198                           ;RF_Control_B1.c: 443: char status = 0;
  8199  0AEF  01E7               	clrf	setRFSW_AdjControl@status
  8200                           
  8201                           ;RF_Control_B1.c: 445: status = getDimmerLights_Status(sw);
  8202  0AF0  0868               	movf	setRFSW_AdjControl@sw,w
  8203  0AF1  319B  2377  318A   	fcall	_getDimmerLights_Status
  8204  0AF4  0020               	movlb	0	; select bank0
  8205  0AF5  00E5               	movwf	??_setRFSW_AdjControl
  8206  0AF6  0865               	movf	??_setRFSW_AdjControl,w
  8207  0AF7  00E7               	movwf	setRFSW_AdjControl@status
  8208                           
  8209                           ;RF_Control_B1.c: 447: if (RF_Data[9] > 0x64) {
  8210  0AF8  3065               	movlw	101
  8211  0AF9  0023               	movlb	3	; select bank3
  8212  0AFA  0229               	subwf	(_RF_Data^(0+384)+9),w
  8213  0AFB  1C03               	skipc
  8214  0AFC  2B04               	goto	l6595
  8215                           
  8216                           ;RF_Control_B1.c: 448: RF_Data[9] = 0x64;
  8217  0AFD  3064               	movlw	100
  8218  0AFE  0020               	movlb	0	; select bank0
  8219  0AFF  00E5               	movwf	??_setRFSW_AdjControl
  8220  0B00  0865               	movf	??_setRFSW_AdjControl,w
  8221  0B01  0023               	movlb	3	; select bank3
  8222  0B02  00A9               	movwf	(_RF_Data^(0+384)+9)
  8223                           
  8224                           ;RF_Control_B1.c: 449: } else if (RF_Data[9] < 0x01) {
  8225  0B03  2B09               	goto	l6599
  8226  0B04                     l6595:	
  8227  0B04  08A9               	movf	(_RF_Data^(0+384)+9),f
  8228  0B05  1D03               	skipz
  8229  0B06  2B09               	goto	l6599
  8230                           
  8231                           ;RF_Control_B1.c: 450: RF_Data[9] = 0x01;
  8232  0B07  01A9               	clrf	(_RF_Data^(0+384)+9)
  8233  0B08  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8234  0B09                     l6599:	
  8235                           
  8236                           ;RF_Control_B1.c: 451: }
  8237                           ;RF_Control_B1.c: 452: setProductData(9, RF_Data[9]);
  8238  0B09  0829               	movf	(_RF_Data^(0+384)+9),w
  8239  0B0A  0020               	movlb	0	; select bank0
  8240  0B0B  00E5               	movwf	??_setRFSW_AdjControl
  8241  0B0C  0865               	movf	??_setRFSW_AdjControl,w
  8242  0B0D  00E2               	movwf	setProductData@value
  8243  0B0E  3009               	movlw	9
  8244  0B0F  319A  2298  318A   	fcall	_setProductData
  8245                           
  8246                           ;RF_Control_B1.c: 453: setProductData(11, sw);
  8247  0B12  0020               	movlb	0	; select bank0
  8248  0B13  0868               	movf	setRFSW_AdjControl@sw,w
  8249  0B14  00E5               	movwf	??_setRFSW_AdjControl
  8250  0B15  0865               	movf	??_setRFSW_AdjControl,w
  8251  0B16  00E2               	movwf	setProductData@value
  8252  0B17  300B               	movlw	11
  8253  0B18  319A  2298  318A   	fcall	_setProductData
  8254                           
  8255                           ;RF_Control_B1.c: 454: setProductData(17, product->Data[26 + sw]);
  8256  0B1B  0020               	movlb	0	; select bank0
  8257  0B1C  0868               	movf	setRFSW_AdjControl@sw,w
  8258  0B1D  3E1A               	addlw	26
  8259  0B1E  0021               	movlb	1	; select bank1
  8260  0B1F  076E               	addwf	_product^(0+128),w
  8261  0B20  0020               	movlb	0	; select bank0
  8262  0B21  00E5               	movwf	??_setRFSW_AdjControl
  8263  0B22  0865               	movf	??_setRFSW_AdjControl,w
  8264  0B23  0086               	movwf	6
  8265  0B24  3002               	movlw	2	; select bank4/5
  8266  0B25  0087               	movwf	7
  8267  0B26  0801               	movf	1,w
  8268  0B27  00E6               	movwf	??_setRFSW_AdjControl+1
  8269  0B28  0866               	movf	??_setRFSW_AdjControl+1,w
  8270  0B29  00E2               	movwf	setProductData@value
  8271  0B2A  3011               	movlw	17
  8272  0B2B  319A  2298  318A   	fcall	_setProductData
  8273                           
  8274                           ;RF_Control_B1.c: 455: setProductData((20 + sw), RF_Data[9]);
  8275  0B2E  0023               	movlb	3	; select bank3
  8276  0B2F  0829               	movf	(_RF_Data^(0+384)+9),w
  8277  0B30  0020               	movlb	0	; select bank0
  8278  0B31  00E5               	movwf	??_setRFSW_AdjControl
  8279  0B32  0865               	movf	??_setRFSW_AdjControl,w
  8280  0B33  00E2               	movwf	setProductData@value
  8281  0B34  0868               	movf	setRFSW_AdjControl@sw,w
  8282  0B35  3E14               	addlw	20
  8283  0B36  319A  2298  318A   	fcall	_setProductData
  8284                           
  8285                           ;RF_Control_B1.c: 463: setMemory_Modify(1);
  8286  0B39  3001               	movlw	1
  8287  0B3A  319C  2448  318A   	fcall	_setMemory_Modify
  8288                           
  8289                           ;RF_Control_B1.c: 467: if (status == 1) {
  8290  0B3D  0020               	movlb	0	; select bank0
  8291  0B3E  0867               	movf	setRFSW_AdjControl@status,w
  8292  0B3F  3A01               	xorlw	1
  8293  0B40  1D03               	skipz
  8294  0B41  2B62               	goto	l6611
  8295                           
  8296                           ;RF_Control_B1.c: 469: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8297  0B42  0023               	movlb	3	; select bank3
  8298  0B43  0829               	movf	(_RF_Data^(0+384)+9),w
  8299  0B44  3196  2666  318A   	fcall	_getDimmerLights_PercentToValue
  8300  0B47  0020               	movlb	0	; select bank0
  8301  0B48  00E5               	movwf	??_setRFSW_AdjControl
  8302  0B49  0865               	movf	??_setRFSW_AdjControl,w
  8303  0B4A  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8304  0B4B  0868               	movf	setRFSW_AdjControl@sw,w
  8305  0B4C  319A  22A4  318A   	fcall	_setDimmerIntr_MaxmumValue
  8306                           
  8307                           ;RF_Control_B1.c: 470: setDimmerIntr_Dimming_RF(sw, 1);
  8308  0B4F  0020               	movlb	0	; select bank0
  8309  0B50  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8310  0B51  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8311  0B52  0868               	movf	setRFSW_AdjControl@sw,w
  8312  0B53  319D  2553  318A   	fcall	_setDimmerIntr_Dimming_RF
  8313                           
  8314                           ;RF_Control_B1.c: 472: setTxData();
  8315  0B56  318E  267F  318A   	fcall	_setTxData
  8316                           
  8317                           ;RF_Control_B1.c: 474: setBuz(1, 100);
  8318  0B59  3064               	movlw	100
  8319  0B5A  0020               	movlb	0	; select bank0
  8320  0B5B  00A9               	movwf	setBuz@time
  8321  0B5C  3000               	movlw	0
  8322  0B5D  00AA               	movwf	setBuz@time+1
  8323  0B5E  3001               	movlw	1
  8324  0B5F  3194  248F         	fcall	_setBuz
  8325                           
  8326                           ;RF_Control_B1.c: 475: } else if (status == 0) {
  8327  0B61  0008               	return
  8328  0B62                     l6611:	
  8329  0B62  0020               	movlb	0	; select bank0
  8330  0B63  08E7               	movf	setRFSW_AdjControl@status,f
  8331  0B64  1D03               	skipz
  8332  0B65  0008               	return
  8333                           
  8334                           ;RF_Control_B1.c: 479: setDimmerLights_DimmingRun(sw, 1);
  8335  0B66  01A2               	clrf	setDimmerLights_DimmingRun@command
  8336  0B67  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8337  0B68  0868               	movf	setRFSW_AdjControl@sw,w
  8338  0B69  319D  25D2  318A   	fcall	_setDimmerLights_DimmingRun
  8339                           
  8340                           ;RF_Control_B1.c: 480: setDimmerLights_SwOn(sw);
  8341  0B6C  0020               	movlb	0	; select bank0
  8342  0B6D  0868               	movf	setRFSW_AdjControl@sw,w
  8343  0B6E  3193  239A  318A   	fcall	_setDimmerLights_SwOn
  8344                           
  8345                           ;RF_Control_B1.c: 481: setDimmerLights_SwOff(sw);
  8346  0B71  0020               	movlb	0	; select bank0
  8347  0B72  0868               	movf	setRFSW_AdjControl@sw,w
  8348  0B73  3191  2120         	fcall	_setDimmerLights_SwOff
  8349  0B75  0008               	return
  8350  0B76                     __end_of_setRFSW_AdjControl:	
  8351                           
  8352                           	psect	text33
  8353  1DD2                     __ptext33:	
  8354 ;; *************** function _setDimmerLights_DimmingRun *****************
  8355 ;; Defined at:
  8356 ;;		line 1208 in file "../src/Dimmer_B1.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;  lights          1    wreg     unsigned char 
  8359 ;;  command         1    2[BANK0 ] unsigned char 
  8360 ;; Auto vars:     Size  Location     Type
  8361 ;;  lights          1    4[BANK0 ] unsigned char 
  8362 ;; Return value:  Size  Location     Type
  8363 ;;		None               void
  8364 ;; Registers used:
  8365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8371 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8374 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8375 ;;Total ram usage:        3 bytes
  8376 ;; Hardware stack levels used:    1
  8377 ;; Hardware stack levels required when called:    6
  8378 ;; This function calls:
  8379 ;;		_DimmerLights_SelectPointer
  8380 ;; This function is called by:
  8381 ;;		_setRFSW_AdjControl
  8382 ;; This function uses a non-reentrant model
  8383 ;;
  8384                           
  8385                           
  8386                           ;psect for function _setDimmerLights_DimmingRun
  8387  1DD2                     _setDimmerLights_DimmingRun:	
  8388                           
  8389                           ;incstack = 0
  8390                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8391                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8392  1DD2  0020               	movlb	0	; select bank0
  8393  1DD3  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8394                           
  8395                           ;Dimmer_B1.c: 1209: DimmerLights_SelectPointer(lights);
  8396  1DD4  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8397  1DD5  319A  228C         	fcall	_DimmerLights_SelectPointer
  8398                           
  8399                           ;Dimmer_B1.c: 1210: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8400  1DD7  0020               	movlb	0	; select bank0
  8401  1DD8  0822               	movf	setDimmerLights_DimmingRun@command,w
  8402  1DD9  3A01               	xorlw	1
  8403  1DDA  3000               	movlw	0
  8404  1DDB  1903               	skipnz
  8405  1DDC  3001               	movlw	1
  8406  1DDD  00A3               	movwf	??_setDimmerLights_DimmingRun
  8407  1DDE  0021               	movlb	1	; select bank1
  8408  1DDF  0A4C               	incf	_DimmerLights^(0+128),w
  8409  1DE0  0086               	movwf	6
  8410  1DE1  3001               	movlw	1	; select bank2/3
  8411  1DE2  0087               	movwf	7
  8412  1DE3  0020               	movlb	0	; select bank0
  8413  1DE4  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8414  1DE5  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8415  1DE6  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8416  1DE7  0801               	movf	1,w
  8417  1DE8  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8418  1DE9  39BF               	andlw	-65
  8419  1DEA  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8420  1DEB  0081               	movwf	1
  8421  1DEC  0008               	return
  8422  1DED                     __end_of_setDimmerLights_DimmingRun:	
  8423                           
  8424                           	psect	text34
  8425  1BCC                     __ptext34:	
  8426 ;; *************** function _getRF_KeyStatus *****************
  8427 ;; Defined at:
  8428 ;;		line 166 in file "../src/RF_Control_B1.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;		None
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;  key             1    1[BANK0 ] unsigned char 
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  1    wreg      unsigned char 
  8435 ;; Registers used:
  8436 ;;		wreg, status,2
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8443 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;Total ram usage:        3 bytes
  8447 ;; Hardware stack levels used:    1
  8448 ;; Hardware stack levels required when called:    5
  8449 ;; This function calls:
  8450 ;;		Nothing
  8451 ;; This function is called by:
  8452 ;;		_setRF_Main
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           
  8457                           ;psect for function _getRF_KeyStatus
  8458  1BCC                     _getRF_KeyStatus:	
  8459                           
  8460                           ;RF_Control_B1.c: 167: char key = 0;
  8461                           
  8462                           ;incstack = 0
  8463                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8464  1BCC  0020               	movlb	0	; select bank0
  8465  1BCD  01A1               	clrf	getRF_KeyStatus@key
  8466                           
  8467                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8468  1BCE  01A2               	clrf	_getRF_KeyStatus$5942
  8469  1BCF  0AA2               	incf	_getRF_KeyStatus$5942,f
  8470  1BD0  1F0C               	btfss	12,6	;volatile
  8471  1BD1  1A0C               	btfsc	12,4	;volatile
  8472  1BD2  2BD7               	goto	l7265
  8473  1BD3  1C0C               	btfss	12,0	;volatile
  8474  1BD4  1B8C               	btfsc	12,7	;volatile
  8475  1BD5  2BD7               	goto	l7265
  8476  1BD6  01A2               	clrf	_getRF_KeyStatus$5942
  8477  1BD7                     l7265:	
  8478  1BD7  0822               	movf	_getRF_KeyStatus$5942,w
  8479  1BD8  00A0               	movwf	??_getRF_KeyStatus
  8480  1BD9  0820               	movf	??_getRF_KeyStatus,w
  8481  1BDA  00A1               	movwf	getRF_KeyStatus@key
  8482                           
  8483                           ;RF_Control_B1.c: 179: return key;
  8484  1BDB  0821               	movf	getRF_KeyStatus@key,w
  8485  1BDC  0008               	return
  8486  1BDD                     __end_of_getRF_KeyStatus:	
  8487                           
  8488                           	psect	text35
  8489  1BBB                     __ptext35:	
  8490 ;; *************** function _getBuz_GO *****************
  8491 ;; Defined at:
  8492 ;;		line 82 in file "../src/Buzzer_B1.c"
  8493 ;; Parameters:    Size  Location     Type
  8494 ;;		None
  8495 ;; Auto vars:     Size  Location     Type
  8496 ;;  i               2    4[BANK0 ] int 
  8497 ;; Return value:  Size  Location     Type
  8498 ;;                  2    0[BANK0 ] int 
  8499 ;; Registers used:
  8500 ;;		wreg, status,2, status,0
  8501 ;; Tracked objects:
  8502 ;;		On entry : 0/0
  8503 ;;		On exit  : 0/0
  8504 ;;		Unchanged: 0/0
  8505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8506 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8507 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8508 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;Total ram usage:        6 bytes
  8511 ;; Hardware stack levels used:    1
  8512 ;; Hardware stack levels required when called:    5
  8513 ;; This function calls:
  8514 ;;		Nothing
  8515 ;; This function is called by:
  8516 ;;		_setRF_Main
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           
  8521                           ;psect for function _getBuz_GO
  8522  1BBB                     _getBuz_GO:	
  8523                           
  8524                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8525                           
  8526                           ;incstack = 0
  8527                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8528  1BBB  0022               	movlb	2	; select bank2
  8529  1BBC  0C20               	rrf	_Buz1^(0+256),w
  8530  1BBD  3901               	andlw	1
  8531  1BBE  0020               	movlb	0	; select bank0
  8532  1BBF  00A2               	movwf	??_getBuz_GO
  8533  1BC0  01A3               	clrf	??_getBuz_GO+1
  8534  1BC1  0822               	movf	??_getBuz_GO,w
  8535  1BC2  00A4               	movwf	getBuz_GO@i
  8536  1BC3  0823               	movf	??_getBuz_GO+1,w
  8537  1BC4  00A5               	movwf	getBuz_GO@i+1
  8538                           
  8539                           ;Buzzer_B1.c: 84: return i;
  8540  1BC5  0825               	movf	getBuz_GO@i+1,w
  8541  1BC6  01A1               	clrf	?_getBuz_GO+1
  8542  1BC7  07A1               	addwf	?_getBuz_GO+1,f
  8543  1BC8  0824               	movf	getBuz_GO@i,w
  8544  1BC9  01A0               	clrf	?_getBuz_GO
  8545  1BCA  07A0               	addwf	?_getBuz_GO,f
  8546  1BCB  0008               	return
  8547  1BCC                     __end_of_getBuz_GO:	
  8548                           
  8549                           	psect	text36
  8550  1B58                     __ptext36:	
  8551 ;; *************** function _RF_RxDisable *****************
  8552 ;; Defined at:
  8553 ;;		line 154 in file "../src/RF_Control_B1.c"
  8554 ;; Parameters:    Size  Location     Type
  8555 ;;		None
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;		None
  8558 ;; Return value:  Size  Location     Type
  8559 ;;		None               void
  8560 ;; Registers used:
  8561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;Total ram usage:        0 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    7
  8574 ;; This function calls:
  8575 ;;		_CC2500_WriteCommand
  8576 ;; This function is called by:
  8577 ;;		_setRF_Main
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           
  8582                           ;psect for function _RF_RxDisable
  8583  1B58                     _RF_RxDisable:	
  8584                           
  8585                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8586                           
  8587                           ;incstack = 0
  8588                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8589  1B58  0021               	movlb	1	; select bank1
  8590  1B59  18A0               	btfsc	_RF1^(0+128),1
  8591  1B5A  2B5D               	goto	l2227
  8592  1B5B  1DA0               	btfss	_RF1^(0+128),3
  8593  1B5C  0008               	return
  8594  1B5D                     l2227:	
  8595                           
  8596                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8597  1B5D  11A0               	bcf	_RF1^(0+128),3
  8598                           
  8599                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8600  1B5E  10A0               	bcf	_RF1^(0+128),1
  8601                           
  8602                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8603  1B5F  3036               	movlw	54
  8604  1B60  319D  25B8  319B   	fcall	_CC2500_WriteCommand
  8605                           
  8606                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8607  1B63  303A               	movlw	58
  8608  1B64  319D  25B8         	fcall	_CC2500_WriteCommand
  8609  1B66  0008               	return
  8610  1B67                     __end_of_RF_RxDisable:	
  8611                           
  8612                           	psect	text37
  8613  08A0                     __ptext37:	
  8614 ;; *************** function _CC2500_TxData *****************
  8615 ;; Defined at:
  8616 ;;		line 32 in file "../src/CC2500_B1.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;		None
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;		None               void
  8623 ;; Registers used:
  8624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;Total ram usage:        2 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:    7
  8637 ;; This function calls:
  8638 ;;		_CC2500_WriteByte
  8639 ;;		_CC2500_WriteCommand
  8640 ;;		_RF_Timeout_Counter
  8641 ;;		_setRF_TimeoutCleared
  8642 ;; This function is called by:
  8643 ;;		_setRF_Main
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           
  8648                           ;psect for function _CC2500_TxData
  8649  08A0                     _CC2500_TxData:	
  8650                           
  8651                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8652                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8653                           
  8654                           ;incstack = 0
  8655                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8656  08A0  3036               	movlw	54
  8657  08A1  319D  25B8  3188   	fcall	_CC2500_WriteCommand
  8658                           
  8659                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8660  08A4  303B               	movlw	59
  8661  08A5  319D  25B8  3188   	fcall	_CC2500_WriteCommand
  8662                           
  8663                           ;CC2500_B1.c: 38: RC0 = 0;
  8664  08A8  0020               	movlb	0	; select bank0
  8665  08A9  100E               	bcf	14,0	;volatile
  8666                           
  8667                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8668  08AA  307F               	movlw	127
  8669  08AB  00A4               	movwf	??_CC2500_TxData
  8670  08AC  0824               	movf	??_CC2500_TxData,w
  8671  08AD  0021               	movlb	1	; select bank1
  8672  08AE  00D1               	movwf	_SPI0Buffer^(0+128)
  8673                           
  8674                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8675  08AF  28B3               	goto	l8863
  8676  08B0                     l8861:	
  8677                           
  8678                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8679  08B0  319C  24BB  3188   	fcall	_RF_Timeout_Counter
  8680  08B3                     l8863:	
  8681  08B3  0020               	movlb	0	; select bank0
  8682  08B4  1E8E               	btfss	14,5	;volatile
  8683  08B5  28B9               	goto	l8867
  8684  08B6  0021               	movlb	1	; select bank1
  8685  08B7  1F21               	btfss	(_RF1^(0+128)+1),6
  8686  08B8  28B0               	goto	l8861
  8687  08B9                     l8867:	
  8688                           
  8689                           ;CC2500_B1.c: 42: };
  8690                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8691  08B9  3199  21DC  3188   	fcall	_setRF_TimeoutCleared
  8692                           
  8693                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8694  08BC  3190  2000  3188   	fcall	_CC2500_WriteByte
  8695                           
  8696                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8697  08BF  0021               	movlb	1	; select bank1
  8698  08C0  0854               	movf	_Tx_Length^(0+128),w
  8699  08C1  0020               	movlb	0	; select bank0
  8700  08C2  00A4               	movwf	??_CC2500_TxData
  8701  08C3  0824               	movf	??_CC2500_TxData,w
  8702  08C4  0021               	movlb	1	; select bank1
  8703  08C5  00D1               	movwf	_SPI0Buffer^(0+128)
  8704                           
  8705                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8706  08C6  3190  2000  3188   	fcall	_CC2500_WriteByte
  8707                           
  8708                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8709  08C9  0020               	movlb	0	; select bank0
  8710  08CA  01A5               	clrf	CC2500_TxData@loop_e
  8711  08CB                     l8881:	
  8712  08CB  0021               	movlb	1	; select bank1
  8713  08CC  0854               	movf	_Tx_Length^(0+128),w
  8714  08CD  0020               	movlb	0	; select bank0
  8715  08CE  0225               	subwf	CC2500_TxData@loop_e,w
  8716  08CF  1803               	btfsc	3,0
  8717  08D0  28E4               	goto	l239
  8718                           
  8719                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8720  08D1  0825               	movf	CC2500_TxData@loop_e,w
  8721  08D2  3EA0               	addlw	_RF_Data& (0+255)
  8722  08D3  0086               	movwf	6
  8723  08D4  3001               	movlw	1	; select bank3/4
  8724  08D5  0087               	movwf	7
  8725  08D6  0801               	movf	1,w
  8726  08D7  00A4               	movwf	??_CC2500_TxData
  8727  08D8  0824               	movf	??_CC2500_TxData,w
  8728  08D9  0021               	movlb	1	; select bank1
  8729  08DA  00D1               	movwf	_SPI0Buffer^(0+128)
  8730                           
  8731                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8732  08DB  3190  2000  3188   	fcall	_CC2500_WriteByte
  8733  08DE  3001               	movlw	1
  8734  08DF  0020               	movlb	0	; select bank0
  8735  08E0  00A4               	movwf	??_CC2500_TxData
  8736  08E1  0824               	movf	??_CC2500_TxData,w
  8737  08E2  07A5               	addwf	CC2500_TxData@loop_e,f
  8738  08E3  28CB               	goto	l8881
  8739  08E4                     l239:	
  8740                           
  8741                           ;CC2500_B1.c: 51: }
  8742                           ;CC2500_B1.c: 52: RC0 = 1;
  8743  08E4  140E               	bsf	14,0	;volatile
  8744                           
  8745                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8746  08E5  3035               	movlw	53
  8747  08E6  319D  25B8  3188   	fcall	_CC2500_WriteCommand
  8748                           
  8749                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8750  08E9  28ED               	goto	l8887
  8751  08EA                     l8885:	
  8752                           
  8753                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8754  08EA  319C  24BB  3188   	fcall	_RF_Timeout_Counter
  8755  08ED                     l8887:	
  8756  08ED  0020               	movlb	0	; select bank0
  8757  08EE  188E               	btfsc	14,1	;volatile
  8758  08EF  28F3               	goto	l8891
  8759  08F0  0021               	movlb	1	; select bank1
  8760  08F1  1F21               	btfss	(_RF1^(0+128)+1),6
  8761  08F2  28EA               	goto	l8885
  8762  08F3                     l8891:	
  8763                           
  8764                           ;CC2500_B1.c: 56: };
  8765                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8766  08F3  3199  21DC  3188   	fcall	_setRF_TimeoutCleared
  8767                           
  8768                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8769  08F6  28FA               	goto	l8895
  8770  08F7                     l8893:	
  8771                           
  8772                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8773  08F7  319C  24BB  3188   	fcall	_RF_Timeout_Counter
  8774  08FA                     l8895:	
  8775  08FA  0020               	movlb	0	; select bank0
  8776  08FB  1C8E               	btfss	14,1	;volatile
  8777  08FC  2900               	goto	l8899
  8778  08FD  0021               	movlb	1	; select bank1
  8779  08FE  1F21               	btfss	(_RF1^(0+128)+1),6
  8780  08FF  28F7               	goto	l8893
  8781  0900                     l8899:	
  8782                           
  8783                           ;CC2500_B1.c: 61: };
  8784                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8785  0900  3199  21DC  3188   	fcall	_setRF_TimeoutCleared
  8786                           
  8787                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8788  0903  3036               	movlw	54
  8789  0904  319D  25B8  3188   	fcall	_CC2500_WriteCommand
  8790                           
  8791                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8792  0907  303B               	movlw	59
  8793  0908  319D  25B8         	fcall	_CC2500_WriteCommand
  8794                           
  8795                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8796  090A  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8797  090B  0008               	return
  8798  090C                     __end_of_CC2500_TxData:	
  8799                           
  8800                           	psect	text38
  8801  0835                     __ptext38:	
  8802 ;; *************** function _CC2500_RxData *****************
  8803 ;; Defined at:
  8804 ;;		line 73 in file "../src/CC2500_B1.c"
  8805 ;; Parameters:    Size  Location     Type
  8806 ;;		None
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8809 ;; Return value:  Size  Location     Type
  8810 ;;		None               void
  8811 ;; Registers used:
  8812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8813 ;; Tracked objects:
  8814 ;;		On entry : 0/0
  8815 ;;		On exit  : 0/0
  8816 ;;		Unchanged: 0/0
  8817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;Total ram usage:        2 bytes
  8823 ;; Hardware stack levels used:    1
  8824 ;; Hardware stack levels required when called:    7
  8825 ;; This function calls:
  8826 ;;		_CC2500_ReadByte
  8827 ;;		_CC2500_ReadStatus
  8828 ;;		_CC2500_WriteByte
  8829 ;;		_CC2500_WriteCommand
  8830 ;;		_RF_Timeout_Counter
  8831 ;;		_setRF_TimeoutCleared
  8832 ;; This function is called by:
  8833 ;;		_setRF_Main
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function _CC2500_RxData
  8839  0835                     _CC2500_RxData:	
  8840                           
  8841                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8842                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8843                           
  8844                           ;incstack = 0
  8845                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8846  0835  0020               	movlb	0	; select bank0
  8847  0836  188E               	btfsc	14,1	;volatile
  8848  0837  0008               	return
  8849                           
  8850                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8851  0838  303B               	movlw	59
  8852  0839  319F  2763  3188   	fcall	_CC2500_ReadStatus
  8853                           
  8854                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8855  083C  0021               	movlb	1	; select bank1
  8856  083D  0857               	movf	_s_data^(0+128),w
  8857  083E  1903               	btfsc	3,2
  8858  083F  0008               	return
  8859                           
  8860                           ;CC2500_B1.c: 90: RC0 = 0;
  8861  0840  0020               	movlb	0	; select bank0
  8862  0841  100E               	bcf	14,0	;volatile
  8863                           
  8864                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8865  0842  30FF               	movlw	255
  8866  0843  00A4               	movwf	??_CC2500_RxData
  8867  0844  0824               	movf	??_CC2500_RxData,w
  8868  0845  0021               	movlb	1	; select bank1
  8869  0846  00D1               	movwf	_SPI0Buffer^(0+128)
  8870                           
  8871                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8872  0847  284B               	goto	l8919
  8873  0848                     l8917:	
  8874                           
  8875                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8876  0848  319C  24BB  3188   	fcall	_RF_Timeout_Counter
  8877  084B                     l8919:	
  8878  084B  0020               	movlb	0	; select bank0
  8879  084C  1E8E               	btfss	14,5	;volatile
  8880  084D  2851               	goto	l8923
  8881  084E  0021               	movlb	1	; select bank1
  8882  084F  1F21               	btfss	(_RF1^(0+128)+1),6
  8883  0850  2848               	goto	l8917
  8884  0851                     l8923:	
  8885                           
  8886                           ;CC2500_B1.c: 95: };
  8887                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8888  0851  3199  21DC  3188   	fcall	_setRF_TimeoutCleared
  8889                           
  8890                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8891  0854  3190  2000  3188   	fcall	_CC2500_WriteByte
  8892                           
  8893                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8894  0857  319E  2624  3188   	fcall	_CC2500_ReadByte
  8895                           
  8896                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8897  085A  0021               	movlb	1	; select bank1
  8898  085B  0851               	movf	_SPI0Buffer^(0+128),w
  8899  085C  0020               	movlb	0	; select bank0
  8900  085D  00A4               	movwf	??_CC2500_RxData
  8901  085E  0824               	movf	??_CC2500_RxData,w
  8902  085F  0021               	movlb	1	; select bank1
  8903  0860  00D0               	movwf	_Rx_Length^(0+128)
  8904                           
  8905                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8906  0861  0020               	movlb	0	; select bank0
  8907  0862  01A5               	clrf	CC2500_RxData@loop_f
  8908  0863                     l8939:	
  8909  0863  0021               	movlb	1	; select bank1
  8910  0864  0850               	movf	_Rx_Length^(0+128),w
  8911  0865  0020               	movlb	0	; select bank0
  8912  0866  0225               	subwf	CC2500_RxData@loop_f,w
  8913  0867  1803               	btfsc	3,0
  8914  0868  287C               	goto	l8941
  8915                           
  8916                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8917  0869  319E  2624  3188   	fcall	_CC2500_ReadByte
  8918                           
  8919                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8920  086C  0021               	movlb	1	; select bank1
  8921  086D  0851               	movf	_SPI0Buffer^(0+128),w
  8922  086E  0020               	movlb	0	; select bank0
  8923  086F  00A4               	movwf	??_CC2500_RxData
  8924  0870  0825               	movf	CC2500_RxData@loop_f,w
  8925  0871  3EA0               	addlw	_RF_Data& (0+255)
  8926  0872  0086               	movwf	6
  8927  0873  3001               	movlw	1	; select bank3/4
  8928  0874  0087               	movwf	7
  8929  0875  0824               	movf	??_CC2500_RxData,w
  8930  0876  0081               	movwf	1
  8931  0877  3001               	movlw	1
  8932  0878  00A4               	movwf	??_CC2500_RxData
  8933  0879  0824               	movf	??_CC2500_RxData,w
  8934  087A  07A5               	addwf	CC2500_RxData@loop_f,f
  8935  087B  2863               	goto	l8939
  8936  087C                     l8941:	
  8937                           
  8938                           ;CC2500_B1.c: 104: }
  8939                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8940  087C  319E  2624  3188   	fcall	_CC2500_ReadByte
  8941                           
  8942                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8943  087F  0021               	movlb	1	; select bank1
  8944  0880  0851               	movf	_SPI0Buffer^(0+128),w
  8945  0881  0020               	movlb	0	; select bank0
  8946  0882  00A4               	movwf	??_CC2500_RxData
  8947  0883  0824               	movf	??_CC2500_RxData,w
  8948  0884  0021               	movlb	1	; select bank1
  8949  0885  00CF               	movwf	_RSSI^(0+128)
  8950                           
  8951                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8952  0886  319E  2624  3188   	fcall	_CC2500_ReadByte
  8953                           
  8954                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8955  0889  0021               	movlb	1	; select bank1
  8956  088A  0851               	movf	_SPI0Buffer^(0+128),w
  8957  088B  0020               	movlb	0	; select bank0
  8958  088C  00A4               	movwf	??_CC2500_RxData
  8959  088D  0824               	movf	??_CC2500_RxData,w
  8960  088E  0021               	movlb	1	; select bank1
  8961  088F  00C8               	movwf	_CRC^(0+128)
  8962                           
  8963                           ;CC2500_B1.c: 109: RC0 = 1;
  8964  0890  0020               	movlb	0	; select bank0
  8965  0891  140E               	bsf	14,0	;volatile
  8966                           
  8967                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8968  0892  0021               	movlb	1	; select bank1
  8969  0893  1BC8               	btfsc	_CRC^(0+128),7
  8970                           
  8971                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8972  0894  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8973                           
  8974                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8975  0895  11A0               	bcf	_RF1^(0+128),3
  8976                           
  8977                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8978  0896  14A0               	bsf	_RF1^(0+128),1
  8979                           
  8980                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8981  0897  3036               	movlw	54
  8982  0898  319D  25B8  3188   	fcall	_CC2500_WriteCommand
  8983                           
  8984                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8985  089B  303A               	movlw	58
  8986  089C  319D  25B8         	fcall	_CC2500_WriteCommand
  8987  089E  0021               	movlb	1	; select bank1
  8988  089F  0008               	return
  8989  08A0                     __end_of_CC2500_RxData:	
  8990                           
  8991                           	psect	text39
  8992  1F63                     __ptext39:	
  8993 ;; *************** function _CC2500_ReadStatus *****************
  8994 ;; Defined at:
  8995 ;;		line 308 in file "../src/CC2500_B1.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;  status_addr     1    wreg     unsigned char 
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;		None               void
  9002 ;; Registers used:
  9003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;Total ram usage:        2 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    6
  9016 ;; This function calls:
  9017 ;;		_CC2500_ReadByte
  9018 ;;		_CC2500_WriteByte
  9019 ;;		_RF_Timeout_Counter
  9020 ;;		_setRF_TimeoutCleared
  9021 ;; This function is called by:
  9022 ;;		_CC2500_RxData
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           
  9027                           ;psect for function _CC2500_ReadStatus
  9028  1F63                     _CC2500_ReadStatus:	
  9029                           
  9030                           ;incstack = 0
  9031                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9032                           ;CC2500_ReadStatus@status_addr stored from wreg
  9033  1F63  0020               	movlb	0	; select bank0
  9034  1F64  00A3               	movwf	CC2500_ReadStatus@status_addr
  9035                           
  9036                           ;CC2500_B1.c: 309: RC0 = 0;
  9037  1F65  100E               	bcf	14,0	;volatile
  9038                           
  9039                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9040  1F66  0823               	movf	CC2500_ReadStatus@status_addr,w
  9041  1F67  3EC0               	addlw	192
  9042  1F68  00A2               	movwf	??_CC2500_ReadStatus
  9043  1F69  0822               	movf	??_CC2500_ReadStatus,w
  9044  1F6A  0021               	movlb	1	; select bank1
  9045  1F6B  00D1               	movwf	_SPI0Buffer^(0+128)
  9046                           
  9047                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  9048  1F6C  2F70               	goto	l8769
  9049  1F6D                     l8767:	
  9050                           
  9051                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9052  1F6D  319C  24BB  319F   	fcall	_RF_Timeout_Counter
  9053  1F70                     l8769:	
  9054  1F70  0020               	movlb	0	; select bank0
  9055  1F71  1E8E               	btfss	14,5	;volatile
  9056  1F72  2F76               	goto	l8773
  9057  1F73  0021               	movlb	1	; select bank1
  9058  1F74  1F21               	btfss	(_RF1^(0+128)+1),6
  9059  1F75  2F6D               	goto	l8767
  9060  1F76                     l8773:	
  9061                           
  9062                           ;CC2500_B1.c: 314: };
  9063                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9064  1F76  3199  21DC  319F   	fcall	_setRF_TimeoutCleared
  9065                           
  9066                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9067  1F79  3190  2000  319F   	fcall	_CC2500_WriteByte
  9068                           
  9069                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9070  1F7C  319E  2624         	fcall	_CC2500_ReadByte
  9071                           
  9072                           ;CC2500_B1.c: 319: RC0 = 1;
  9073  1F7E  0020               	movlb	0	; select bank0
  9074  1F7F  140E               	bsf	14,0	;volatile
  9075                           
  9076                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9077  1F80  0021               	movlb	1	; select bank1
  9078  1F81  0851               	movf	_SPI0Buffer^(0+128),w
  9079  1F82  0020               	movlb	0	; select bank0
  9080  1F83  00A2               	movwf	??_CC2500_ReadStatus
  9081  1F84  0822               	movf	??_CC2500_ReadStatus,w
  9082  1F85  0021               	movlb	1	; select bank1
  9083  1F86  00D7               	movwf	_s_data^(0+128)
  9084  1F87  0008               	return
  9085  1F88                     __end_of_CC2500_ReadStatus:	
  9086                           
  9087                           	psect	text40
  9088  1E24                     __ptext40:	
  9089 ;; *************** function _CC2500_ReadByte *****************
  9090 ;; Defined at:
  9091 ;;		line 242 in file "../src/CC2500_B1.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;		None
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;		None               void
  9098 ;; Registers used:
  9099 ;;		wreg, status,2, status,0
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;Total ram usage:        2 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    5
  9112 ;; This function calls:
  9113 ;;		Nothing
  9114 ;; This function is called by:
  9115 ;;		_CC2500_RxData
  9116 ;;		_CC2500_ReadStatus
  9117 ;;		_CC2500_ReadREG
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _CC2500_ReadByte
  9123  1E24                     _CC2500_ReadByte:	
  9124                           
  9125                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9126                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9127                           
  9128                           ;incstack = 0
  9129                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9130  1E24  0020               	movlb	0	; select bank0
  9131  1E25  01A1               	clrf	CC2500_ReadByte@loop_b
  9132  1E26                     L3:	
  9133  1E26  3008               	movlw	8
  9134  1E27  0221               	subwf	CC2500_ReadByte@loop_b,w
  9135  1E28  1803               	btfsc	3,0
  9136  1E29  0008               	return
  9137                           
  9138                           ;CC2500_B1.c: 245: RC3 = 1;
  9139  1E2A  158E               	bsf	14,3	;volatile
  9140                           
  9141                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9142  1E2B  1003               	clrc
  9143  1E2C  0021               	movlb	1	; select bank1
  9144  1E2D  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9145                           
  9146                           ;CC2500_B1.c: 247: if (RC5 == 1)
  9147  1E2E  0020               	movlb	0	; select bank0
  9148  1E2F  1E8E               	btfss	14,5	;volatile
  9149  1E30  2E34               	goto	l8739
  9150                           
  9151                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9152  1E31  0021               	movlb	1	; select bank1
  9153  1E32  1451               	bsf	_SPI0Buffer^(0+128),0
  9154  1E33  2E3A               	goto	l8741
  9155  1E34                     l8739:	
  9156                           
  9157                           ;CC2500_B1.c: 249: else
  9158                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9159  1E34  30FE               	movlw	254
  9160  1E35  0020               	movlb	0	; select bank0
  9161  1E36  00A0               	movwf	??_CC2500_ReadByte
  9162  1E37  0820               	movf	??_CC2500_ReadByte,w
  9163  1E38  0021               	movlb	1	; select bank1
  9164  1E39  05D1               	andwf	_SPI0Buffer^(0+128),f
  9165  1E3A                     l8741:	
  9166                           
  9167                           ;CC2500_B1.c: 251: RC3 = 0;
  9168  1E3A  0020               	movlb	0	; select bank0
  9169  1E3B  118E               	bcf	14,3	;volatile
  9170  1E3C  3001               	movlw	1
  9171  1E3D  00A0               	movwf	??_CC2500_ReadByte
  9172  1E3E  0820               	movf	??_CC2500_ReadByte,w
  9173  1E3F  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9174  1E40  2E26               	goto	L3
  9175  1E41                     __end_of_CC2500_ReadByte:	
  9176                           
  9177                           	psect	text41
  9178  1CD0                     __ptext41:	
  9179 ;; *************** function _CC2500_PowerOnInitial *****************
  9180 ;; Defined at:
  9181 ;;		line 126 in file "../src/CC2500_B1.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;		None
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;		None               void
  9188 ;; Registers used:
  9189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;Total ram usage:        0 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:    8
  9202 ;; This function calls:
  9203 ;;		_CC2500_ClearRXFIFO
  9204 ;;		_CC2500_ClearTXFIFO
  9205 ;;		_CC2500_FrequencyCabr
  9206 ;;		_CC2500_InitPATable
  9207 ;;		_CC2500_InitSetREG
  9208 ;;		_CC2500_PowerRST
  9209 ;;		_CC2500_SIDLEMode
  9210 ;; This function is called by:
  9211 ;;		_main
  9212 ;;		_setRF_Main
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           
  9217                           ;psect for function _CC2500_PowerOnInitial
  9218  1CD0                     _CC2500_PowerOnInitial:	
  9219                           
  9220                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9221                           
  9222                           ;incstack = 0
  9223                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9224  1CD0  3192  22C6  319C   	fcall	_CC2500_PowerRST
  9225                           
  9226                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9227  1CD3  319F  27D6  319C   	fcall	_CC2500_InitSetREG
  9228                           
  9229                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9230  1CD6  319E  267E  319C   	fcall	_CC2500_InitPATable
  9231                           
  9232                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9233  1CD9  3199  21E4  319C   	fcall	_CC2500_ClearTXFIFO
  9234                           
  9235                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9236  1CDC  3199  21E0  319C   	fcall	_CC2500_ClearRXFIFO
  9237                           
  9238                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9239  1CDF  319A  22F8  319C   	fcall	_CC2500_FrequencyCabr
  9240                           
  9241                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9242  1CE2  3199  21E8         	fcall	_CC2500_SIDLEMode
  9243  1CE4  0008               	return
  9244  1CE5                     __end_of_CC2500_PowerOnInitial:	
  9245                           
  9246                           	psect	text42
  9247  19E8                     __ptext42:	
  9248 ;; *************** function _CC2500_SIDLEMode *****************
  9249 ;; Defined at:
  9250 ;;		line 216 in file "../src/CC2500_B1.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;Total ram usage:        0 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    7
  9271 ;; This function calls:
  9272 ;;		_CC2500_WriteCommand
  9273 ;; This function is called by:
  9274 ;;		_CC2500_PowerOnInitial
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           
  9279                           ;psect for function _CC2500_SIDLEMode
  9280  19E8                     _CC2500_SIDLEMode:	
  9281                           
  9282                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9283                           
  9284                           ;incstack = 0
  9285                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9286  19E8  3036               	movlw	54
  9287  19E9  319D  25B8         	fcall	_CC2500_WriteCommand
  9288  19EB  0008               	return
  9289  19EC                     __end_of_CC2500_SIDLEMode:	
  9290                           
  9291                           	psect	text43
  9292  12C6                     __ptext43:	
  9293 ;; *************** function _CC2500_PowerRST *****************
  9294 ;; Defined at:
  9295 ;;		line 139 in file "../src/CC2500_B1.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;		None
  9300 ;; Return value:  Size  Location     Type
  9301 ;;		None               void
  9302 ;; Registers used:
  9303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;Total ram usage:        1 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    6
  9316 ;; This function calls:
  9317 ;;		_CC2500_WriteByte
  9318 ;;		_DelayTime_1us
  9319 ;;		_RF_Timeout_Counter
  9320 ;;		_setRF_TimeoutCleared
  9321 ;; This function is called by:
  9322 ;;		_CC2500_PowerOnInitial
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           
  9327                           ;psect for function _CC2500_PowerRST
  9328  12C6                     _CC2500_PowerRST:	
  9329                           
  9330                           ;CC2500_B1.c: 140: RC3 = 0;
  9331                           
  9332                           ;incstack = 0
  9333                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9334  12C6  0020               	movlb	0	; select bank0
  9335  12C7  118E               	bcf	14,3	;volatile
  9336                           
  9337                           ;CC2500_B1.c: 141: RC4 = 0;
  9338  12C8  120E               	bcf	14,4	;volatile
  9339                           
  9340                           ;CC2500_B1.c: 142: RC0 = 1;
  9341  12C9  140E               	bsf	14,0	;volatile
  9342                           
  9343                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9344  12CA  300A               	movlw	10
  9345  12CB  00A0               	movwf	DelayTime_1us@count
  9346  12CC  3000               	movlw	0
  9347  12CD  00A1               	movwf	DelayTime_1us@count+1
  9348  12CE  319F  2788  3192   	fcall	_DelayTime_1us
  9349                           
  9350                           ;CC2500_B1.c: 144: RC0 = 0;
  9351  12D1  0020               	movlb	0	; select bank0
  9352  12D2  100E               	bcf	14,0	;volatile
  9353                           
  9354                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9355  12D3  300A               	movlw	10
  9356  12D4  00A0               	movwf	DelayTime_1us@count
  9357  12D5  3000               	movlw	0
  9358  12D6  00A1               	movwf	DelayTime_1us@count+1
  9359  12D7  319F  2788  3192   	fcall	_DelayTime_1us
  9360                           
  9361                           ;CC2500_B1.c: 146: RC0 = 1;
  9362  12DA  0020               	movlb	0	; select bank0
  9363  12DB  140E               	bsf	14,0	;volatile
  9364                           
  9365                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9366  12DC  3028               	movlw	40
  9367  12DD  00A0               	movwf	DelayTime_1us@count
  9368  12DE  3000               	movlw	0
  9369  12DF  00A1               	movwf	DelayTime_1us@count+1
  9370  12E0  319F  2788  3192   	fcall	_DelayTime_1us
  9371                           
  9372                           ;CC2500_B1.c: 148: RC0 = 0;
  9373  12E3  0020               	movlb	0	; select bank0
  9374  12E4  100E               	bcf	14,0	;volatile
  9375                           
  9376                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9377  12E5  3030               	movlw	48
  9378  12E6  00A6               	movwf	??_CC2500_PowerRST
  9379  12E7  0826               	movf	??_CC2500_PowerRST,w
  9380  12E8  0021               	movlb	1	; select bank1
  9381  12E9  00D1               	movwf	_SPI0Buffer^(0+128)
  9382                           
  9383                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9384  12EA  2AEE               	goto	l8797
  9385  12EB                     l8795:	
  9386                           
  9387                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9388  12EB  319C  24BB  3192   	fcall	_RF_Timeout_Counter
  9389  12EE                     l8797:	
  9390  12EE  0020               	movlb	0	; select bank0
  9391  12EF  1E8E               	btfss	14,5	;volatile
  9392  12F0  2AF4               	goto	l8801
  9393  12F1  0021               	movlb	1	; select bank1
  9394  12F2  1F21               	btfss	(_RF1^(0+128)+1),6
  9395  12F3  2AEB               	goto	l8795
  9396  12F4                     l8801:	
  9397                           
  9398                           ;CC2500_B1.c: 152: };
  9399                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9400  12F4  3199  21DC  3192   	fcall	_setRF_TimeoutCleared
  9401                           
  9402                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9403  12F7  3190  2000  3192   	fcall	_CC2500_WriteByte
  9404                           
  9405                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9406  12FA  2AFE               	goto	l8807
  9407  12FB                     l8805:	
  9408                           
  9409                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9410  12FB  319C  24BB  3192   	fcall	_RF_Timeout_Counter
  9411  12FE                     l8807:	
  9412  12FE  0020               	movlb	0	; select bank0
  9413  12FF  1E8E               	btfss	14,5	;volatile
  9414  1300  2B04               	goto	l8811
  9415  1301  0021               	movlb	1	; select bank1
  9416  1302  1F21               	btfss	(_RF1^(0+128)+1),6
  9417  1303  2AFB               	goto	l8805
  9418  1304                     l8811:	
  9419                           
  9420                           ;CC2500_B1.c: 157: };
  9421                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9422  1304  3199  21DC         	fcall	_setRF_TimeoutCleared
  9423                           
  9424                           ;CC2500_B1.c: 159: RC4 = 0;
  9425  1306  0020               	movlb	0	; select bank0
  9426  1307  120E               	bcf	14,4	;volatile
  9427                           
  9428                           ;CC2500_B1.c: 160: RC0 = 1;
  9429  1308  140E               	bsf	14,0	;volatile
  9430  1309  0008               	return
  9431  130A                     __end_of_CC2500_PowerRST:	
  9432                           
  9433                           	psect	text44
  9434  1FD6                     __ptext44:	
  9435 ;; *************** function _CC2500_InitSetREG *****************
  9436 ;; Defined at:
  9437 ;;		line 166 in file "../src/CC2500_B1.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;		None
  9440 ;; Auto vars:     Size  Location     Type
  9441 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9442 ;;  temp2           1    7[BANK0 ] unsigned char 
  9443 ;;  temp1           1    6[BANK0 ] unsigned char 
  9444 ;; Return value:  Size  Location     Type
  9445 ;;		None               void
  9446 ;; Registers used:
  9447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9448 ;; Tracked objects:
  9449 ;;		On entry : 0/0
  9450 ;;		On exit  : 0/0
  9451 ;;		Unchanged: 0/0
  9452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;Total ram usage:        4 bytes
  9458 ;; Hardware stack levels used:    1
  9459 ;; Hardware stack levels required when called:    7
  9460 ;; This function calls:
  9461 ;;		_CC2500_WriteREG
  9462 ;; This function is called by:
  9463 ;;		_CC2500_PowerOnInitial
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           
  9468                           ;psect for function _CC2500_InitSetREG
  9469  1FD6                     _CC2500_InitSetREG:	
  9470                           
  9471                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9472                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9473                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9474                           
  9475                           ;incstack = 0
  9476                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9477  1FD6  0020               	movlb	0	; select bank0
  9478  1FD7  01A8               	clrf	CC2500_InitSetREG@loop_c
  9479  1FD8                     L4:	
  9480  1FD8  302F               	movlw	47
  9481  1FD9  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9482  1FDA  1803               	btfsc	3,0
  9483  1FDB  0008               	return
  9484                           
  9485                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9486  1FDC  0828               	movf	CC2500_InitSetREG@loop_c,w
  9487  1FDD  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9488  1FDE  0084               	movwf	4
  9489  1FDF  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9490  1FE0  1803               	skipnc
  9491  1FE1  3E01               	addlw	1
  9492  1FE2  0085               	movwf	5
  9493  1FE3  0800               	movf	0,w	;code access
  9494  1FE4  00A5               	movwf	??_CC2500_InitSetREG
  9495  1FE5  0825               	movf	??_CC2500_InitSetREG,w
  9496  1FE6  00A6               	movwf	CC2500_InitSetREG@temp1
  9497                           
  9498                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9499  1FE7  0828               	movf	CC2500_InitSetREG@loop_c,w
  9500  1FE8  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9501  1FE9  0084               	movwf	4
  9502  1FEA  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9503  1FEB  1803               	skipnc
  9504  1FEC  3E01               	addlw	1
  9505  1FED  0085               	movwf	5
  9506  1FEE  0800               	movf	0,w	;code access
  9507  1FEF  00A5               	movwf	??_CC2500_InitSetREG
  9508  1FF0  0825               	movf	??_CC2500_InitSetREG,w
  9509  1FF1  00A7               	movwf	CC2500_InitSetREG@temp2
  9510                           
  9511                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9512  1FF2  0827               	movf	CC2500_InitSetREG@temp2,w
  9513  1FF3  00A5               	movwf	??_CC2500_InitSetREG
  9514  1FF4  0825               	movf	??_CC2500_InitSetREG,w
  9515  1FF5  00A2               	movwf	CC2500_WriteREG@value
  9516  1FF6  0826               	movf	CC2500_InitSetREG@temp1,w
  9517  1FF7  319F  2740  319F   	fcall	_CC2500_WriteREG
  9518  1FFA  3001               	movlw	1
  9519  1FFB  0020               	movlb	0	; select bank0
  9520  1FFC  00A5               	movwf	??_CC2500_InitSetREG
  9521  1FFD  0825               	movf	??_CC2500_InitSetREG,w
  9522  1FFE  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9523  1FFF  2FD8               	goto	L4
  9524  2000                     __end_of_CC2500_InitSetREG:	
  9525                           
  9526                           	psect	text45
  9527  1E7E                     __ptext45:	
  9528 ;; *************** function _CC2500_InitPATable *****************
  9529 ;; Defined at:
  9530 ;;		line 181 in file "../src/CC2500_B1.c"
  9531 ;; Parameters:    Size  Location     Type
  9532 ;;		None
  9533 ;; Auto vars:     Size  Location     Type
  9534 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9535 ;;  temp            1    6[BANK0 ] unsigned char 
  9536 ;; Return value:  Size  Location     Type
  9537 ;;		None               void
  9538 ;; Registers used:
  9539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;Total ram usage:        3 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:    7
  9552 ;; This function calls:
  9553 ;;		_CC2500_WriteREG
  9554 ;; This function is called by:
  9555 ;;		_CC2500_PowerOnInitial
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           
  9560                           ;psect for function _CC2500_InitPATable
  9561  1E7E                     _CC2500_InitPATable:	
  9562                           
  9563                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9564                           ;CC2500_B1.c: 183: unsigned char temp;
  9565                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9566                           
  9567                           ;incstack = 0
  9568                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9569  1E7E  0020               	movlb	0	; select bank0
  9570  1E7F  01A7               	clrf	CC2500_InitPATable@loop_d
  9571  1E80                     L5:	
  9572  1E80  3008               	movlw	8
  9573  1E81  0227               	subwf	CC2500_InitPATable@loop_d,w
  9574  1E82  1803               	btfsc	3,0
  9575  1E83  0008               	return
  9576                           
  9577                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9578  1E84  0827               	movf	CC2500_InitPATable@loop_d,w
  9579  1E85  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9580  1E86  0084               	movwf	4
  9581  1E87  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9582  1E88  1803               	skipnc
  9583  1E89  3E01               	addlw	1
  9584  1E8A  0085               	movwf	5
  9585  1E8B  0800               	movf	0,w	;code access
  9586  1E8C  00A5               	movwf	??_CC2500_InitPATable
  9587  1E8D  0825               	movf	??_CC2500_InitPATable,w
  9588  1E8E  00A6               	movwf	CC2500_InitPATable@temp
  9589                           
  9590                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9591  1E8F  0826               	movf	CC2500_InitPATable@temp,w
  9592  1E90  00A5               	movwf	??_CC2500_InitPATable
  9593  1E91  0825               	movf	??_CC2500_InitPATable,w
  9594  1E92  00A2               	movwf	CC2500_WriteREG@value
  9595  1E93  303E               	movlw	62
  9596  1E94  319F  2740  319E   	fcall	_CC2500_WriteREG
  9597  1E97  3001               	movlw	1
  9598  1E98  0020               	movlb	0	; select bank0
  9599  1E99  00A5               	movwf	??_CC2500_InitPATable
  9600  1E9A  0825               	movf	??_CC2500_InitPATable,w
  9601  1E9B  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9602  1E9C  2E80               	goto	L5
  9603  1E9D                     __end_of_CC2500_InitPATable:	
  9604                           
  9605                           	psect	text46
  9606  1F40                     __ptext46:	
  9607 ;; *************** function _CC2500_WriteREG *****************
  9608 ;; Defined at:
  9609 ;;		line 258 in file "../src/CC2500_B1.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;  w_addr          1    wreg     unsigned char 
  9612 ;;  value           1    2[BANK0 ] unsigned char 
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9615 ;; Return value:  Size  Location     Type
  9616 ;;		None               void
  9617 ;; Registers used:
  9618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9624 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;Total ram usage:        3 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; Hardware stack levels required when called:    6
  9631 ;; This function calls:
  9632 ;;		_CC2500_WriteByte
  9633 ;;		_RF_Timeout_Counter
  9634 ;;		_setRF_TimeoutCleared
  9635 ;; This function is called by:
  9636 ;;		_CC2500_InitSetREG
  9637 ;;		_CC2500_InitPATable
  9638 ;; This function uses a non-reentrant model
  9639 ;;
  9640                           
  9641                           
  9642                           ;psect for function _CC2500_WriteREG
  9643  1F40                     _CC2500_WriteREG:	
  9644                           
  9645                           ;incstack = 0
  9646                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9647                           ;CC2500_WriteREG@w_addr stored from wreg
  9648  1F40  0020               	movlb	0	; select bank0
  9649  1F41  00A4               	movwf	CC2500_WriteREG@w_addr
  9650                           
  9651                           ;CC2500_B1.c: 259: RC0 = 0;
  9652  1F42  100E               	bcf	14,0	;volatile
  9653                           
  9654                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9655  1F43  0824               	movf	CC2500_WriteREG@w_addr,w
  9656  1F44  00A3               	movwf	??_CC2500_WriteREG
  9657  1F45  0823               	movf	??_CC2500_WriteREG,w
  9658  1F46  0021               	movlb	1	; select bank1
  9659  1F47  00D1               	movwf	_SPI0Buffer^(0+128)
  9660                           
  9661                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9662  1F48  2F4C               	goto	l8751
  9663  1F49                     l8749:	
  9664                           
  9665                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9666  1F49  319C  24BB  319F   	fcall	_RF_Timeout_Counter
  9667  1F4C                     l8751:	
  9668  1F4C  0020               	movlb	0	; select bank0
  9669  1F4D  1E8E               	btfss	14,5	;volatile
  9670  1F4E  2F52               	goto	l8755
  9671  1F4F  0021               	movlb	1	; select bank1
  9672  1F50  1F21               	btfss	(_RF1^(0+128)+1),6
  9673  1F51  2F49               	goto	l8749
  9674  1F52                     l8755:	
  9675                           
  9676                           ;CC2500_B1.c: 263: };
  9677                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9678  1F52  3199  21DC  319F   	fcall	_setRF_TimeoutCleared
  9679                           
  9680                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9681  1F55  3190  2000  319F   	fcall	_CC2500_WriteByte
  9682                           
  9683                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9684  1F58  0020               	movlb	0	; select bank0
  9685  1F59  0822               	movf	CC2500_WriteREG@value,w
  9686  1F5A  00A3               	movwf	??_CC2500_WriteREG
  9687  1F5B  0823               	movf	??_CC2500_WriteREG,w
  9688  1F5C  0021               	movlb	1	; select bank1
  9689  1F5D  00D1               	movwf	_SPI0Buffer^(0+128)
  9690                           
  9691                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9692  1F5E  3190  2000         	fcall	_CC2500_WriteByte
  9693                           
  9694                           ;CC2500_B1.c: 269: RC0 = 1;
  9695  1F60  0020               	movlb	0	; select bank0
  9696  1F61  140E               	bsf	14,0	;volatile
  9697  1F62  0008               	return
  9698  1F63                     __end_of_CC2500_WriteREG:	
  9699                           
  9700                           	psect	text47
  9701  1AF8                     __ptext47:	
  9702 ;; *************** function _CC2500_FrequencyCabr *****************
  9703 ;; Defined at:
  9704 ;;		line 208 in file "../src/CC2500_B1.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;		None
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;		None
  9709 ;; Return value:  Size  Location     Type
  9710 ;;		None               void
  9711 ;; Registers used:
  9712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;Total ram usage:        0 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    7
  9725 ;; This function calls:
  9726 ;;		_CC2500_WriteCommand
  9727 ;;		_DelayTime_1us
  9728 ;; This function is called by:
  9729 ;;		_CC2500_PowerOnInitial
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           
  9734                           ;psect for function _CC2500_FrequencyCabr
  9735  1AF8                     _CC2500_FrequencyCabr:	
  9736                           
  9737                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9738                           
  9739                           ;incstack = 0
  9740                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9741  1AF8  3033               	movlw	51
  9742  1AF9  319D  25B8  319A   	fcall	_CC2500_WriteCommand
  9743                           
  9744                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9745  1AFC  30E8               	movlw	232
  9746  1AFD  0020               	movlb	0	; select bank0
  9747  1AFE  00A0               	movwf	DelayTime_1us@count
  9748  1AFF  3003               	movlw	3
  9749  1B00  00A1               	movwf	DelayTime_1us@count+1
  9750  1B01  319F  2788         	fcall	_DelayTime_1us
  9751  1B03  0008               	return
  9752  1B04                     __end_of_CC2500_FrequencyCabr:	
  9753                           
  9754                           	psect	text48
  9755  1F88                     __ptext48:	
  9756 ;; *************** function _DelayTime_1us *****************
  9757 ;; Defined at:
  9758 ;;		line 327 in file "../src/CC2500_B1.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;  count           2    0[BANK0 ] int 
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;  j               2    4[BANK0 ] unsigned int 
  9763 ;;  i               2    2[BANK0 ] unsigned int 
  9764 ;; Return value:  Size  Location     Type
  9765 ;;		None               void
  9766 ;; Registers used:
  9767 ;;		wreg, status,2
  9768 ;; Tracked objects:
  9769 ;;		On entry : 0/0
  9770 ;;		On exit  : 0/0
  9771 ;;		Unchanged: 0/0
  9772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9773 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9774 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;Total ram usage:        6 bytes
  9778 ;; Hardware stack levels used:    1
  9779 ;; Hardware stack levels required when called:    5
  9780 ;; This function calls:
  9781 ;;		Nothing
  9782 ;; This function is called by:
  9783 ;;		_CC2500_PowerRST
  9784 ;;		_CC2500_FrequencyCabr
  9785 ;; This function uses a non-reentrant model
  9786 ;;
  9787                           
  9788                           
  9789                           ;psect for function _DelayTime_1us
  9790  1F88                     _DelayTime_1us:	
  9791                           
  9792                           ;CC2500_B1.c: 328: unsigned int i, j;
  9793                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9794                           
  9795                           ;incstack = 0
  9796                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9797  1F88  3001               	movlw	1
  9798  1F89  0020               	movlb	0	; select bank0
  9799  1F8A  00A2               	movwf	DelayTime_1us@i
  9800  1F8B  3000               	movlw	0
  9801  1F8C  00A3               	movwf	DelayTime_1us@i+1
  9802  1F8D                     l351:	
  9803  1F8D  0821               	movf	DelayTime_1us@count+1,w
  9804  1F8E  0223               	subwf	DelayTime_1us@i+1,w
  9805  1F8F  1D03               	skipz
  9806  1F90  2F93               	goto	u5615
  9807  1F91  0820               	movf	DelayTime_1us@count,w
  9808  1F92  0222               	subwf	DelayTime_1us@i,w
  9809  1F93                     u5615:	
  9810  1F93  1803               	btfsc	3,0
  9811  1F94  0008               	return
  9812                           
  9813                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9814  1F95  01A4               	clrf	DelayTime_1us@j
  9815  1F96  01A5               	clrf	DelayTime_1us@j+1
  9816  1F97  3000               	movlw	0
  9817  1F98  0225               	subwf	DelayTime_1us@j+1,w
  9818  1F99  3002               	movlw	2
  9819  1F9A  1903               	skipnz
  9820  1F9B  0224               	subwf	DelayTime_1us@j,w
  9821  1F9C  1803               	btfsc	3,0
  9822  1F9D  2FA9               	goto	l6525
  9823  1F9E                     l6523:	
  9824  1F9E  3001               	movlw	1
  9825  1F9F  07A4               	addwf	DelayTime_1us@j,f
  9826  1FA0  3000               	movlw	0
  9827  1FA1  3DA5               	addwfc	DelayTime_1us@j+1,f
  9828  1FA2  3000               	movlw	0
  9829  1FA3  0225               	subwf	DelayTime_1us@j+1,w
  9830  1FA4  3002               	movlw	2
  9831  1FA5  1903               	skipnz
  9832  1FA6  0224               	subwf	DelayTime_1us@j,w
  9833  1FA7  1C03               	skipc
  9834  1FA8  2F9E               	goto	l6523
  9835  1FA9                     l6525:	
  9836  1FA9  3001               	movlw	1
  9837  1FAA  07A2               	addwf	DelayTime_1us@i,f
  9838  1FAB  3000               	movlw	0
  9839  1FAC  3DA3               	addwfc	DelayTime_1us@i+1,f
  9840  1FAD  2F8D               	goto	l351
  9841  1FAE                     __end_of_DelayTime_1us:	
  9842                           
  9843                           	psect	text49
  9844  19E4                     __ptext49:	
  9845 ;; *************** function _CC2500_ClearTXFIFO *****************
  9846 ;; Defined at:
  9847 ;;		line 194 in file "../src/CC2500_B1.c"
  9848 ;; Parameters:    Size  Location     Type
  9849 ;;		None
  9850 ;; Auto vars:     Size  Location     Type
  9851 ;;		None
  9852 ;; Return value:  Size  Location     Type
  9853 ;;		None               void
  9854 ;; Registers used:
  9855 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9856 ;; Tracked objects:
  9857 ;;		On entry : 0/0
  9858 ;;		On exit  : 0/0
  9859 ;;		Unchanged: 0/0
  9860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;Total ram usage:        0 bytes
  9866 ;; Hardware stack levels used:    1
  9867 ;; Hardware stack levels required when called:    7
  9868 ;; This function calls:
  9869 ;;		_CC2500_WriteCommand
  9870 ;; This function is called by:
  9871 ;;		_CC2500_PowerOnInitial
  9872 ;; This function uses a non-reentrant model
  9873 ;;
  9874                           
  9875                           
  9876                           ;psect for function _CC2500_ClearTXFIFO
  9877  19E4                     _CC2500_ClearTXFIFO:	
  9878                           
  9879                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9880                           
  9881                           ;incstack = 0
  9882                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9883  19E4  303B               	movlw	59
  9884  19E5  319D  25B8         	fcall	_CC2500_WriteCommand
  9885  19E7  0008               	return
  9886  19E8                     __end_of_CC2500_ClearTXFIFO:	
  9887                           
  9888                           	psect	text50
  9889  19E0                     __ptext50:	
  9890 ;; *************** function _CC2500_ClearRXFIFO *****************
  9891 ;; Defined at:
  9892 ;;		line 201 in file "../src/CC2500_B1.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;		None
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;		None
  9897 ;; Return value:  Size  Location     Type
  9898 ;;		None               void
  9899 ;; Registers used:
  9900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;Total ram usage:        0 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; Hardware stack levels required when called:    7
  9913 ;; This function calls:
  9914 ;;		_CC2500_WriteCommand
  9915 ;; This function is called by:
  9916 ;;		_CC2500_PowerOnInitial
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           
  9921                           ;psect for function _CC2500_ClearRXFIFO
  9922  19E0                     _CC2500_ClearRXFIFO:	
  9923                           
  9924                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9925                           
  9926                           ;incstack = 0
  9927                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9928  19E0  303A               	movlw	58
  9929  19E1  319D  25B8         	fcall	_CC2500_WriteCommand
  9930  19E3  0008               	return
  9931  19E4                     __end_of_CC2500_ClearRXFIFO:	
  9932                           
  9933                           	psect	text51
  9934  1DB8                     __ptext51:	
  9935 ;; *************** function _CC2500_WriteCommand *****************
  9936 ;; Defined at:
  9937 ;;		line 292 in file "../src/CC2500_B1.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;  command         1    wreg     unsigned char 
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;  command         1    3[BANK0 ] unsigned char 
  9942 ;; Return value:  Size  Location     Type
  9943 ;;		None               void
  9944 ;; Registers used:
  9945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9946 ;; Tracked objects:
  9947 ;;		On entry : 0/0
  9948 ;;		On exit  : 0/0
  9949 ;;		Unchanged: 0/0
  9950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;Total ram usage:        2 bytes
  9956 ;; Hardware stack levels used:    1
  9957 ;; Hardware stack levels required when called:    6
  9958 ;; This function calls:
  9959 ;;		_CC2500_WriteByte
  9960 ;;		_RF_Timeout_Counter
  9961 ;;		_setRF_TimeoutCleared
  9962 ;; This function is called by:
  9963 ;;		_CC2500_TxData
  9964 ;;		_CC2500_RxData
  9965 ;;		_CC2500_ClearTXFIFO
  9966 ;;		_CC2500_ClearRXFIFO
  9967 ;;		_CC2500_FrequencyCabr
  9968 ;;		_CC2500_SIDLEMode
  9969 ;;		_setRF_Main
  9970 ;;		_RF_RxDisable
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           
  9975                           ;psect for function _CC2500_WriteCommand
  9976  1DB8                     _CC2500_WriteCommand:	
  9977                           
  9978                           ;incstack = 0
  9979                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9980                           ;CC2500_WriteCommand@command stored from wreg
  9981  1DB8  0020               	movlb	0	; select bank0
  9982  1DB9  00A3               	movwf	CC2500_WriteCommand@command
  9983                           
  9984                           ;CC2500_B1.c: 293: RC0 = 0;
  9985  1DBA  100E               	bcf	14,0	;volatile
  9986                           
  9987                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9988  1DBB  0823               	movf	CC2500_WriteCommand@command,w
  9989  1DBC  00A2               	movwf	??_CC2500_WriteCommand
  9990  1DBD  0822               	movf	??_CC2500_WriteCommand,w
  9991  1DBE  0021               	movlb	1	; select bank1
  9992  1DBF  00D1               	movwf	_SPI0Buffer^(0+128)
  9993                           
  9994                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9995  1DC0  2DC4               	goto	l8717
  9996  1DC1                     l8715:	
  9997                           
  9998                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9999  1DC1  319C  24BB  319D   	fcall	_RF_Timeout_Counter
 10000  1DC4                     l8717:	
 10001  1DC4  0020               	movlb	0	; select bank0
 10002  1DC5  1E8E               	btfss	14,5	;volatile
 10003  1DC6  2DCA               	goto	l8721
 10004  1DC7  0021               	movlb	1	; select bank1
 10005  1DC8  1F21               	btfss	(_RF1^(0+128)+1),6
 10006  1DC9  2DC1               	goto	l8715
 10007  1DCA                     l8721:	
 10008                           
 10009                           ;CC2500_B1.c: 298: };
 10010                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10011  1DCA  3199  21DC  319D   	fcall	_setRF_TimeoutCleared
 10012                           
 10013                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10014  1DCD  3190  2000         	fcall	_CC2500_WriteByte
 10015                           
 10016                           ;CC2500_B1.c: 302: RC0 = 1;
 10017  1DCF  0020               	movlb	0	; select bank0
 10018  1DD0  140E               	bsf	14,0	;volatile
 10019  1DD1  0008               	return
 10020  1DD2                     __end_of_CC2500_WriteCommand:	
 10021                           
 10022                           	psect	text52
 10023  19DC                     __ptext52:	
 10024 ;; *************** function _setRF_TimeoutCleared *****************
 10025 ;; Defined at:
 10026 ;;		line 149 in file "../src/RF_Control_B1.c"
 10027 ;; Parameters:    Size  Location     Type
 10028 ;;		None
 10029 ;; Auto vars:     Size  Location     Type
 10030 ;;		None
 10031 ;; Return value:  Size  Location     Type
 10032 ;;		None               void
 10033 ;; Registers used:
 10034 ;;		status,2
 10035 ;; Tracked objects:
 10036 ;;		On entry : 0/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;Total ram usage:        0 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; Hardware stack levels required when called:    5
 10047 ;; This function calls:
 10048 ;;		Nothing
 10049 ;; This function is called by:
 10050 ;;		_CC2500_TxData
 10051 ;;		_CC2500_RxData
 10052 ;;		_CC2500_PowerRST
 10053 ;;		_CC2500_WriteREG
 10054 ;;		_CC2500_WriteCommand
 10055 ;;		_CC2500_ReadStatus
 10056 ;;		_CC2500_ReadREG
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           
 10061                           ;psect for function _setRF_TimeoutCleared
 10062  19DC                     _setRF_TimeoutCleared:	
 10063                           
 10064                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
 10065                           
 10066                           ;incstack = 0
 10067                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10068  19DC  0021               	movlb	1	; select bank1
 10069  19DD  01AD               	clrf	(_RF1^(0+128)+13)
 10070  19DE  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10071  19DF  0008               	return
 10072  19E0                     __end_of_setRF_TimeoutCleared:	
 10073                           
 10074                           	psect	text53
 10075  1CBB                     __ptext53:	
 10076 ;; *************** function _RF_Timeout_Counter *****************
 10077 ;; Defined at:
 10078 ;;		line 141 in file "../src/RF_Control_B1.c"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;		None
 10081 ;; Auto vars:     Size  Location     Type
 10082 ;;		None
 10083 ;; Return value:  Size  Location     Type
 10084 ;;		None               void
 10085 ;; Registers used:
 10086 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10087 ;; Tracked objects:
 10088 ;;		On entry : 0/0
 10089 ;;		On exit  : 0/0
 10090 ;;		Unchanged: 0/0
 10091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;Total ram usage:        0 bytes
 10097 ;; Hardware stack levels used:    1
 10098 ;; Hardware stack levels required when called:    5
 10099 ;; This function calls:
 10100 ;;		Nothing
 10101 ;; This function is called by:
 10102 ;;		_CC2500_TxData
 10103 ;;		_CC2500_RxData
 10104 ;;		_CC2500_PowerRST
 10105 ;;		_CC2500_WriteREG
 10106 ;;		_CC2500_WriteCommand
 10107 ;;		_CC2500_ReadStatus
 10108 ;;		_CC2500_ReadREG
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           
 10113                           ;psect for function _RF_Timeout_Counter
 10114  1CBB                     _RF_Timeout_Counter:	
 10115                           
 10116                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
 10117                           
 10118                           ;incstack = 0
 10119                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10120  1CBB  3001               	movlw	1
 10121  1CBC  0021               	movlb	1	; select bank1
 10122  1CBD  07AD               	addwf	(_RF1^(0+128)+13),f
 10123  1CBE  3000               	movlw	0
 10124  1CBF  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
 10125                           
 10126                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
 10127  1CC0  300D               	movlw	13
 10128  1CC1  3EA0               	addlw	_RF1& (0+255)
 10129  1CC2  0086               	movwf	6
 10130  1CC3  0187               	clrf	7
 10131  1CC4  3F40               	moviw [0]fsr1
 10132  1CC5  3AA8               	xorlw	168
 10133  1CC6  1D03               	skipz
 10134  1CC7  2CCA               	goto	u8955
 10135  1CC8  3F41               	moviw [1]fsr1
 10136  1CC9  3A61               	xorlw	97
 10137  1CCA                     u8955:	
 10138  1CCA  1D03               	skipz
 10139  1CCB  0008               	return
 10140                           
 10141                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
 10142  1CCC  01AD               	clrf	(_RF1^(0+128)+13)
 10143  1CCD  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10144                           
 10145                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
 10146  1CCE  1721               	bsf	(_RF1^(0+128)+1),6
 10147  1CCF  0008               	return
 10148  1CD0                     __end_of_RF_Timeout_Counter:	
 10149                           
 10150                           	psect	text54
 10151  1000                     __ptext54:	
 10152 ;; *************** function _CC2500_WriteByte *****************
 10153 ;; Defined at:
 10154 ;;		line 226 in file "../src/CC2500_B1.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;		None
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10159 ;; Return value:  Size  Location     Type
 10160 ;;		None               void
 10161 ;; Registers used:
 10162 ;;		wreg, status,2, status,0
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;Total ram usage:        2 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    5
 10175 ;; This function calls:
 10176 ;;		Nothing
 10177 ;; This function is called by:
 10178 ;;		_CC2500_TxData
 10179 ;;		_CC2500_RxData
 10180 ;;		_CC2500_PowerRST
 10181 ;;		_CC2500_WriteREG
 10182 ;;		_CC2500_WriteCommand
 10183 ;;		_CC2500_ReadStatus
 10184 ;;		_CC2500_ReadREG
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           
 10189                           ;psect for function _CC2500_WriteByte
 10190  1000                     _CC2500_WriteByte:	
 10191                           
 10192                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10193                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10194                           
 10195                           ;incstack = 0
 10196                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10197  1000  0020               	movlb	0	; select bank0
 10198  1001  01A1               	clrf	CC2500_WriteByte@loop_a
 10199  1002                     L6:	
 10200  1002  3008               	movlw	8
 10201  1003  0221               	subwf	CC2500_WriteByte@loop_a,w
 10202  1004  1803               	btfsc	3,0
 10203  1005  0008               	return
 10204                           
 10205                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10206  1006  0021               	movlb	1	; select bank1
 10207  1007  1FD1               	btfss	_SPI0Buffer^(0+128),7
 10208  1008  280C               	goto	l307
 10209                           
 10210                           ;CC2500_B1.c: 230: RC4 = 1;
 10211  1009  0020               	movlb	0	; select bank0
 10212  100A  160E               	bsf	14,4	;volatile
 10213  100B  280E               	goto	l308
 10214  100C                     l307:	
 10215                           
 10216                           ;CC2500_B1.c: 231: else
 10217                           ;CC2500_B1.c: 232: RC4 = 0;
 10218  100C  0020               	movlb	0	; select bank0
 10219  100D  120E               	bcf	14,4	;volatile
 10220  100E                     l308:	
 10221                           
 10222                           ;CC2500_B1.c: 233: RC3 = 1;
 10223  100E  158E               	bsf	14,3	;volatile
 10224                           
 10225                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10226  100F  1003               	clrc
 10227  1010  0021               	movlb	1	; select bank1
 10228  1011  0DD1               	rlf	_SPI0Buffer^(0+128),f
 10229                           
 10230                           ;CC2500_B1.c: 235: RC3 = 0;
 10231  1012  0020               	movlb	0	; select bank0
 10232  1013  118E               	bcf	14,3	;volatile
 10233  1014  3001               	movlw	1
 10234  1015  00A0               	movwf	??_CC2500_WriteByte
 10235  1016  0820               	movf	??_CC2500_WriteByte,w
 10236  1017  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10237  1018  2802               	goto	L6
 10238  1019                     __end_of_CC2500_WriteByte:	
 10239                           
 10240                           	psect	text55
 10241  19BC                     __ptext55:	
 10242 ;; *************** function _RF_Initialization *****************
 10243 ;; Defined at:
 10244 ;;		line 9 in file "../src/RF_Control_B1.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;		None
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;		None
 10249 ;; Return value:  Size  Location     Type
 10250 ;;		None               void
 10251 ;; Registers used:
 10252 ;;		wreg, status,2, status,0, pclath, cstack
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;Total ram usage:        0 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; Hardware stack levels required when called:    6
 10265 ;; This function calls:
 10266 ;;		_setRF_Initialization
 10267 ;; This function is called by:
 10268 ;;		_main
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           
 10273                           ;psect for function _RF_Initialization
 10274  19BC                     _RF_Initialization:	
 10275                           
 10276                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10277                           
 10278                           ;incstack = 0
 10279                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10280  19BC  319A  2275         	fcall	_setRF_Initialization
 10281  19BE  0008               	return
 10282  19BF                     __end_of_RF_Initialization:	
 10283                           
 10284                           	psect	text56
 10285  1A75                     __ptext56:	
 10286 ;; *************** function _setRF_Initialization *****************
 10287 ;; Defined at:
 10288 ;;		line 17 in file "../src/RF_Control_B1.c"
 10289 ;; Parameters:    Size  Location     Type
 10290 ;;		None
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;		None
 10293 ;; Return value:  Size  Location     Type
 10294 ;;		None               void
 10295 ;; Registers used:
 10296 ;;		wreg
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;Total ram usage:        1 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    5
 10309 ;; This function calls:
 10310 ;;		Nothing
 10311 ;; This function is called by:
 10312 ;;		_RF_Initialization
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           
 10317                           ;psect for function _setRF_Initialization
 10318  1A75                     _setRF_Initialization:	
 10319                           
 10320                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10321                           
 10322                           ;incstack = 0
 10323                           ; Regs used in _setRF_Initialization: [wreg]
 10324  1A75  3015               	movlw	21
 10325  1A76  0020               	movlb	0	; select bank0
 10326  1A77  00A0               	movwf	??_setRF_Initialization
 10327  1A78  0820               	movf	??_setRF_Initialization,w
 10328  1A79  0021               	movlb	1	; select bank1
 10329  1A7A  00D4               	movwf	_Tx_Length^(0+128)
 10330                           
 10331                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10332  1A7B  30C8               	movlw	200
 10333  1A7C  00A8               	movwf	(_RF1^(0+128)+8)
 10334  1A7D  3000               	movlw	0
 10335  1A7E  00A9               	movwf	(_RF1^(0+128)+9)
 10336  1A7F  0008               	return
 10337  1A80                     __end_of_setRF_Initialization:	
 10338                           
 10339                           	psect	text57
 10340  1C24                     __ptext57:	
 10341 ;; *************** function _Mcu_Initialization *****************
 10342 ;; Defined at:
 10343 ;;		line 30 in file "../src/MCU_B1.c"
 10344 ;; Parameters:    Size  Location     Type
 10345 ;;		None
 10346 ;; Auto vars:     Size  Location     Type
 10347 ;;		None
 10348 ;; Return value:  Size  Location     Type
 10349 ;;		None               void
 10350 ;; Registers used:
 10351 ;;		wreg, status,2, status,0, pclath, cstack
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;Total ram usage:        0 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    6
 10364 ;; This function calls:
 10365 ;;		_ADC_Set
 10366 ;;		_Fosc_Set
 10367 ;;		_IOC_Set
 10368 ;;		_IO_Set
 10369 ;;		_TMR1_Set
 10370 ;;		_WDT_Set
 10371 ;; This function is called by:
 10372 ;;		_main
 10373 ;; This function uses a non-reentrant model
 10374 ;;
 10375                           
 10376                           
 10377                           ;psect for function _Mcu_Initialization
 10378  1C24                     _Mcu_Initialization:	
 10379                           
 10380                           ;MCU_B1.c: 32: Fosc_Set();
 10381                           
 10382                           ;incstack = 0
 10383                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10384  1C24  3199  21D8  319C   	fcall	_Fosc_Set
 10385                           
 10386                           ;MCU_B1.c: 34: IO_Set();
 10387  1C27  319D  259E  319C   	fcall	_IO_Set
 10388                           
 10389                           ;MCU_B1.c: 36: ;;
 10390                           ;MCU_B1.c: 38: TMR1_Set();
 10391  1C2A  319A  22E0  319C   	fcall	_TMR1_Set
 10392                           
 10393                           ;MCU_B1.c: 40: ADC_Set();
 10394  1C2D  319A  2214  319C   	fcall	_ADC_Set
 10395                           
 10396                           ;MCU_B1.c: 42: ;;
 10397                           ;MCU_B1.c: 44: ;;
 10398                           ;MCU_B1.c: 46: IOC_Set();
 10399  1C30  319A  226A  319C   	fcall	_IOC_Set
 10400                           
 10401                           ;MCU_B1.c: 48: ;;
 10402                           ;MCU_B1.c: 50: ;;
 10403                           ;MCU_B1.c: 52: WDT_Set();
 10404  1C33  319A  22EC         	fcall	_WDT_Set
 10405  1C35  0008               	return
 10406  1C36                     __end_of_Mcu_Initialization:	
 10407                           
 10408                           	psect	text58
 10409  1AEC                     __ptext58:	
 10410 ;; *************** function _WDT_Set *****************
 10411 ;; Defined at:
 10412 ;;		line 1105 in file "../src/MCU_B1.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;		None
 10417 ;; Return value:  Size  Location     Type
 10418 ;;		None               void
 10419 ;; Registers used:
 10420 ;;		wreg
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;Total ram usage:        1 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    5
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_Mcu_Initialization
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function _WDT_Set
 10442  1AEC                     _WDT_Set:	
 10443                           
 10444                           ;MCU_B1.c: 1112: WDTCON = 0b00010111;;
 10445                           
 10446                           ;incstack = 0
 10447                           ; Regs used in _WDT_Set: [wreg]
 10448  1AEC  3017               	movlw	23
 10449  1AED  0021               	movlb	1	; select bank1
 10450  1AEE  0097               	movwf	23	;volatile
 10451                           
 10452                           ;MCU_B1.c: 1114: WDT.Enable = 1;
 10453  1AEF  0022               	movlb	2	; select bank2
 10454  1AF0  1436               	bsf	_WDT^(0+256),0
 10455                           
 10456                           ;MCU_B1.c: 1115: WDT.Timer = 10;
 10457  1AF1  300A               	movlw	10
 10458  1AF2  0020               	movlb	0	; select bank0
 10459  1AF3  00A0               	movwf	??_WDT_Set
 10460  1AF4  0820               	movf	??_WDT_Set,w
 10461  1AF5  0022               	movlb	2	; select bank2
 10462  1AF6  00B7               	movwf	(_WDT^(0+256)+1)
 10463  1AF7  0008               	return
 10464  1AF8                     __end_of_WDT_Set:	
 10465                           
 10466                           	psect	text59
 10467  1AE0                     __ptext59:	
 10468 ;; *************** function _TMR1_Set *****************
 10469 ;; Defined at:
 10470 ;;		line 226 in file "../src/MCU_B1.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;		None
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;		None
 10475 ;; Return value:  Size  Location     Type
 10476 ;;		None               void
 10477 ;; Registers used:
 10478 ;;		wreg
 10479 ;; Tracked objects:
 10480 ;;		On entry : 0/0
 10481 ;;		On exit  : 0/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;Total ram usage:        0 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:    5
 10491 ;; This function calls:
 10492 ;;		Nothing
 10493 ;; This function is called by:
 10494 ;;		_Mcu_Initialization
 10495 ;; This function uses a non-reentrant model
 10496 ;;
 10497                           
 10498                           
 10499                           ;psect for function _TMR1_Set
 10500  1AE0                     _TMR1_Set:	
 10501                           
 10502                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10503                           
 10504                           ;incstack = 0
 10505                           ; Regs used in _TMR1_Set: [wreg]
 10506  1AE0  3041               	movlw	65
 10507  1AE1  0020               	movlb	0	; select bank0
 10508  1AE2  0098               	movwf	24	;volatile
 10509                           
 10510                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10511  1AE3  30FA               	movlw	250
 10512  1AE4  0097               	movwf	23	;volatile
 10513                           
 10514                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10515  1AE5  3038               	movlw	56
 10516  1AE6  0096               	movwf	22	;volatile
 10517                           
 10518                           ;MCU_B1.c: 230: TMR1IE = 1;
 10519  1AE7  0021               	movlb	1	; select bank1
 10520  1AE8  1411               	bsf	17,0	;volatile
 10521                           
 10522                           ;MCU_B1.c: 231: PEIE = 1;
 10523  1AE9  170B               	bsf	11,6	;volatile
 10524                           
 10525                           ;MCU_B1.c: 232: GIE = 1;
 10526  1AEA  178B               	bsf	11,7	;volatile
 10527  1AEB  0008               	return
 10528  1AEC                     __end_of_TMR1_Set:	
 10529                           
 10530                           	psect	text60
 10531  1D9E                     __ptext60:	
 10532 ;; *************** function _IO_Set *****************
 10533 ;; Defined at:
 10534 ;;		line 60 in file "../src/MCU_B1.c"
 10535 ;; Parameters:    Size  Location     Type
 10536 ;;		None
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;		None
 10539 ;; Return value:  Size  Location     Type
 10540 ;;		None               void
 10541 ;; Registers used:
 10542 ;;		wreg, status,2
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        0 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    5
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_Mcu_Initialization
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           
 10563                           ;psect for function _IO_Set
 10564  1D9E                     _IO_Set:	
 10565                           
 10566                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10567                           
 10568                           ;incstack = 0
 10569                           ; Regs used in _IO_Set: [wreg+status,2]
 10570  1D9E  30F7               	movlw	247
 10571  1D9F  0021               	movlb	1	; select bank1
 10572  1DA0  008C               	movwf	12	;volatile
 10573                           
 10574                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10575  1DA1  3004               	movlw	4
 10576  1DA2  008D               	movwf	13	;volatile
 10577                           
 10578                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10579  1DA3  3026               	movlw	38
 10580  1DA4  008E               	movwf	14	;volatile
 10581                           
 10582                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10583  1DA5  0022               	movlb	2	; select bank2
 10584  1DA6  018C               	clrf	12	;volatile
 10585                           
 10586                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10587  1DA7  018D               	clrf	13	;volatile
 10588                           
 10589                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10590  1DA8  018E               	clrf	14	;volatile
 10591                           
 10592                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10593  1DA9  300E               	movlw	14
 10594  1DAA  0023               	movlb	3	; select bank3
 10595  1DAB  008C               	movwf	12	;volatile
 10596                           
 10597                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10598  1DAC  018D               	clrf	13	;volatile
 10599                           
 10600                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10601  1DAD  018E               	clrf	14	;volatile
 10602                           
 10603                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10604  1DAE  30F7               	movlw	247
 10605  1DAF  0020               	movlb	0	; select bank0
 10606  1DB0  008C               	movwf	12	;volatile
 10607                           
 10608                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10609  1DB1  3004               	movlw	4
 10610  1DB2  008D               	movwf	13	;volatile
 10611                           
 10612                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10613  1DB3  3026               	movlw	38
 10614  1DB4  008E               	movwf	14	;volatile
 10615                           
 10616                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10617  1DB5  0024               	movlb	4	; select bank4
 10618  1DB6  018D               	clrf	13	;volatile
 10619  1DB7  0008               	return
 10620  1DB8                     __end_of_IO_Set:	
 10621                           
 10622                           	psect	text61
 10623  1A6A                     __ptext61:	
 10624 ;; *************** function _IOC_Set *****************
 10625 ;; Defined at:
 10626 ;;		line 380 in file "../src/MCU_B1.c"
 10627 ;; Parameters:    Size  Location     Type
 10628 ;;		None
 10629 ;; Auto vars:     Size  Location     Type
 10630 ;;		None
 10631 ;; Return value:  Size  Location     Type
 10632 ;;		None               void
 10633 ;; Registers used:
 10634 ;;		wreg, status,2
 10635 ;; Tracked objects:
 10636 ;;		On entry : 0/0
 10637 ;;		On exit  : 0/0
 10638 ;;		Unchanged: 0/0
 10639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;Total ram usage:        0 bytes
 10645 ;; Hardware stack levels used:    1
 10646 ;; Hardware stack levels required when called:    5
 10647 ;; This function calls:
 10648 ;;		Nothing
 10649 ;; This function is called by:
 10650 ;;		_Mcu_Initialization
 10651 ;; This function uses a non-reentrant model
 10652 ;;
 10653                           
 10654                           
 10655                           ;psect for function _IOC_Set
 10656  1A6A                     _IOC_Set:	
 10657                           
 10658                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10659                           
 10660                           ;incstack = 0
 10661                           ; Regs used in _IOC_Set: [wreg+status,2]
 10662  1A6A  3004               	movlw	4
 10663  1A6B  0027               	movlb	7	; select bank7
 10664  1A6C  0094               	movwf	20	;volatile
 10665                           
 10666                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10667  1A6D  3004               	movlw	4
 10668  1A6E  0095               	movwf	21	;volatile
 10669                           
 10670                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10671  1A6F  0196               	clrf	22	;volatile
 10672                           
 10673                           ;MCU_B1.c: 387: IOCIE = 1;
 10674  1A70  158B               	bsf	11,3	;volatile
 10675                           
 10676                           ;MCU_B1.c: 388: IOCIF = 0;
 10677  1A71  100B               	bcf	11,0	;volatile
 10678                           
 10679                           ;MCU_B1.c: 389: PEIE = 1;
 10680  1A72  170B               	bsf	11,6	;volatile
 10681                           
 10682                           ;MCU_B1.c: 390: GIE = 1;
 10683  1A73  178B               	bsf	11,7	;volatile
 10684  1A74  0008               	return
 10685  1A75                     __end_of_IOC_Set:	
 10686                           
 10687                           	psect	text62
 10688  19D8                     __ptext62:	
 10689 ;; *************** function _Fosc_Set *****************
 10690 ;; Defined at:
 10691 ;;		line 56 in file "../src/MCU_B1.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;		None
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;		None
 10696 ;; Return value:  Size  Location     Type
 10697 ;;		None               void
 10698 ;; Registers used:
 10699 ;;		wreg
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;Total ram usage:        0 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; Hardware stack levels required when called:    5
 10712 ;; This function calls:
 10713 ;;		Nothing
 10714 ;; This function is called by:
 10715 ;;		_Mcu_Initialization
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           
 10720                           ;psect for function _Fosc_Set
 10721  19D8                     _Fosc_Set:	
 10722                           
 10723                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in _Fosc_Set: [wreg]
 10727  19D8  3078               	movlw	120
 10728  19D9  0021               	movlb	1	; select bank1
 10729  19DA  0099               	movwf	25	;volatile
 10730  19DB  0008               	return
 10731  19DC                     __end_of_Fosc_Set:	
 10732                           
 10733                           	psect	text63
 10734  1A14                     __ptext63:	
 10735 ;; *************** function _ADC_Set *****************
 10736 ;; Defined at:
 10737 ;;		line 427 in file "../src/MCU_B1.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;		None
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;		None
 10742 ;; Return value:  Size  Location     Type
 10743 ;;		None               void
 10744 ;; Registers used:
 10745 ;;		wreg
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;Total ram usage:        0 bytes
 10756 ;; Hardware stack levels used:    1
 10757 ;; Hardware stack levels required when called:    5
 10758 ;; This function calls:
 10759 ;;		Nothing
 10760 ;; This function is called by:
 10761 ;;		_Mcu_Initialization
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           
 10766                           ;psect for function _ADC_Set
 10767  1A14                     _ADC_Set:	
 10768                           
 10769                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10770                           
 10771                           ;incstack = 0
 10772                           ; Regs used in _ADC_Set: [wreg]
 10773  1A14  30F3               	movlw	243
 10774  1A15  0021               	movlb	1	; select bank1
 10775  1A16  009E               	movwf	30	;volatile
 10776                           
 10777                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10778  1A17  30C1               	movlw	193
 10779  1A18  0022               	movlb	2	; select bank2
 10780  1A19  0097               	movwf	23	;volatile
 10781  1A1A  0008               	return
 10782  1A1B                     __end_of_ADC_Set:	
 10783                           
 10784                           	psect	text64
 10785  0053                     __ptext64:	
 10786 ;; *************** function _Load_Main *****************
 10787 ;; Defined at:
 10788 ;;		line 40 in file "../src/OverLoad_B1.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;		None
 10791 ;; Auto vars:     Size  Location     Type
 10792 ;;  i               2   16[BANK0 ] int 
 10793 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10794 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10795 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10796 ;;  error           1   12[BANK0 ] unsigned char 
 10797 ;; Return value:  Size  Location     Type
 10798 ;;		None               void
 10799 ;; Registers used:
 10800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10807 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;Total ram usage:       10 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; Hardware stack levels required when called:    6
 10813 ;; This function calls:
 10814 ;;		___lwdiv
 10815 ;;		___wmul
 10816 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10817 ;;		_getDimmer_LoadGO
 10818 ;;		_getDimmer_Load_Status
 10819 ;;		_getMain_All_Error_Status
 10820 ;;		_getMain_All_LightsStatus
 10821 ;;		_getMain_Lights_Count
 10822 ;;		_setLoad_AH_AL_Restore
 10823 ;; This function is called by:
 10824 ;;		_main
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _Load_Main
 10830  0053                     _Load_Main:	
 10831                           
 10832                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10833                           
 10834                           ;incstack = 0
 10835                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10836  0053  3000               	movlw	0
 10837  0054  3190  2048  3180   	fcall	_getMain_All_Error_Status
 10838  0057  0020               	movlb	0	; select bank0
 10839  0058  00A8               	movwf	??_Load_Main
 10840  0059  0828               	movf	??_Load_Main,w
 10841  005A  00AC               	movwf	Load_Main@error
 10842                           
 10843                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10844  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10845  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10846  005D  01AF               	clrf	Load_Main@LightsCount
 10847                           
 10848                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10849  005E  0022               	movlb	2	; select bank2
 10850  005F  1C38               	btfss	_Load^(0+256),0
 10851  0060  29FF               	goto	l1674
 10852                           
 10853                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10854  0061  319A  2255  3180   	fcall	_getMain_All_LightsStatus
 10855  0064  3800               	iorlw	0
 10856  0065  1D03               	skipz
 10857  0066  2869               	goto	l8281
 10858                           
 10859                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10860  0067  0022               	movlb	2	; select bank2
 10861  0068  288A               	goto	l8299
 10862  0069                     l8281:	
 10863                           ;OverLoad_B1.c: 47: } else {
 10864                           
 10865                           
 10866                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10867  0069  0020               	movlb	0	; select bank0
 10868  006A  08AC               	movf	Load_Main@error,f
 10869  006B  1D03               	skipz
 10870  006C  2887               	goto	l1677
 10871  006D  319C  246E  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10872  0070  3800               	iorlw	0
 10873  0071  1D03               	skipz
 10874  0072  2887               	goto	l1677
 10875                           
 10876                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10877  0073  0022               	movlb	2	; select bank2
 10878  0074  14B8               	bsf	_Load^(0+256),1
 10879                           
 10880                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10881  0075  319A  222A  3180   	fcall	_getDimmer_LoadGO
 10882  0078  3A01               	xorlw	1
 10883  0079  1D03               	skipz
 10884  007A  2882               	goto	l1678
 10885                           
 10886                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10887  007B  0022               	movlb	2	; select bank2
 10888  007C  1DB8               	btfss	_Load^(0+256),3
 10889  007D  1BB8               	btfsc	_Load^(0+256),7
 10890  007E  288B               	goto	l1676
 10891                           
 10892                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10893  007F  15B8               	bsf	_Load^(0+256),3
 10894                           
 10895                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10896  0080  01DD               	clrf	(_Load^(0+256)+37)
 10897                           
 10898                           ;OverLoad_B1.c: 57: }
 10899                           ;OverLoad_B1.c: 58: } else {
 10900  0081  288B               	goto	l1676
 10901  0082                     l1678:	
 10902                           
 10903                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10904  0082  0022               	movlb	2	; select bank2
 10905  0083  1FB8               	btfss	_Load^(0+256),7
 10906  0084  288B               	goto	l1676
 10907                           
 10908                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10909  0085  13B8               	bcf	_Load^(0+256),7
 10910                           
 10911                           ;OverLoad_B1.c: 61: }
 10912                           ;OverLoad_B1.c: 62: }
 10913                           ;OverLoad_B1.c: 63: } else {
 10914  0086  288B               	goto	l1676
 10915  0087                     l1677:	
 10916                           
 10917                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10918  0087  0022               	movlb	2	; select bank2
 10919  0088  1CB8               	btfss	_Load^(0+256),1
 10920  0089  288B               	goto	l1676
 10921  008A                     l8299:	
 10922                           
 10923                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10924  008A  10B8               	bcf	_Load^(0+256),1
 10925  008B                     l1676:	
 10926                           
 10927                           ;OverLoad_B1.c: 66: }
 10928                           ;OverLoad_B1.c: 67: }
 10929                           ;OverLoad_B1.c: 89: }
 10930                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10931  008B  1CB8               	btfss	_Load^(0+256),1
 10932  008C  29DB               	goto	l1684
 10933                           
 10934                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10935  008D  1538               	bsf	_Load^(0+256),2
 10936                           
 10937                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10938  008E  1E38               	btfss	_Load^(0+256),4
 10939  008F  29D9               	goto	l1685
 10940                           
 10941                           ;OverLoad_B1.c: 96: Load.Time++;
 10942  0090  3001               	movlw	1
 10943  0091  07B9               	addwf	(_Load^(0+256)+1),f
 10944  0092  3000               	movlw	0
 10945  0093  3DBA               	addwfc	((_Load+1)^(0+256)+1),f
 10946                           
 10947                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10948  0094  3000               	movlw	0
 10949  0095  023A               	subwf	((_Load+1)^(0+256)+1),w
 10950  0096  3002               	movlw	2
 10951  0097  1903               	skipnz
 10952  0098  0239               	subwf	(_Load^(0+256)+1),w
 10953  0099  1C03               	skipc
 10954  009A  0008               	return
 10955                           
 10956                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10957  009B  01B9               	clrf	(_Load^(0+256)+1)
 10958  009C  01BA               	clrf	((_Load+1)^(0+256)+1)
 10959                           
 10960                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10961  009D  1238               	bcf	_Load^(0+256),4
 10962                           
 10963                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10964  009E  3001               	movlw	1
 10965  009F  0020               	movlb	0	; select bank0
 10966  00A0  00B0               	movwf	Load_Main@i
 10967  00A1  3000               	movlw	0
 10968  00A2  00B1               	movwf	Load_Main@i+1
 10969  00A3  0831               	movf	Load_Main@i+1,w
 10970  00A4  3A80               	xorlw	128
 10971  00A5  00A8               	movwf	??_Load_Main
 10972  00A6  3080               	movlw	128
 10973  00A7  0228               	subwf	??_Load_Main,w
 10974  00A8  1D03               	skipz
 10975  00A9  28AC               	goto	u8465
 10976  00AA  3004               	movlw	4
 10977  00AB  0230               	subwf	Load_Main@i,w
 10978  00AC                     u8465:	
 10979  00AC  1803               	btfsc	3,0
 10980  00AD  28E0               	goto	l8321
 10981  00AE                     l8315:	
 10982                           
 10983                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10984  00AE  0020               	movlb	0	; select bank0
 10985  00AF  3530               	lslf	Load_Main@i,w
 10986  00B0  3E43               	addlw	(_Load+11)& (0+255)
 10987  00B1  0086               	movwf	6
 10988  00B2  3001               	movlw	1	; select bank2/3
 10989  00B3  0087               	movwf	7
 10990  00B4  3F40               	moviw [0]fsr1
 10991  00B5  00A8               	movwf	??_Load_Main
 10992  00B6  3F41               	moviw [1]fsr1
 10993  00B7  00A9               	movwf	??_Load_Main+1
 10994  00B8  0828               	movf	??_Load_Main,w
 10995  00B9  0022               	movlb	2	; select bank2
 10996  00BA  07BD               	addwf	(_Load^(0+256)+5),f
 10997  00BB  0020               	movlb	0	; select bank0
 10998  00BC  0829               	movf	??_Load_Main+1,w
 10999  00BD  0022               	movlb	2	; select bank2
 11000  00BE  3DBE               	addwfc	((_Load+1)^(0+256)+5),f
 11001                           
 11002                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11003  00BF  0020               	movlb	0	; select bank0
 11004  00C0  3530               	lslf	Load_Main@i,w
 11005  00C1  3E4D               	addlw	(_Load+21)& (0+255)
 11006  00C2  0086               	movwf	6
 11007  00C3  3001               	movlw	1	; select bank2/3
 11008  00C4  0087               	movwf	7
 11009  00C5  3F40               	moviw [0]fsr1
 11010  00C6  00A8               	movwf	??_Load_Main
 11011  00C7  3F41               	moviw [1]fsr1
 11012  00C8  00A9               	movwf	??_Load_Main+1
 11013  00C9  0828               	movf	??_Load_Main,w
 11014  00CA  0022               	movlb	2	; select bank2
 11015  00CB  07BF               	addwf	(_Load^(0+256)+7),f
 11016  00CC  0020               	movlb	0	; select bank0
 11017  00CD  0829               	movf	??_Load_Main+1,w
 11018  00CE  0022               	movlb	2	; select bank2
 11019  00CF  3DC0               	addwfc	((_Load+1)^(0+256)+7),f
 11020  00D0  3001               	movlw	1
 11021  00D1  0020               	movlb	0	; select bank0
 11022  00D2  07B0               	addwf	Load_Main@i,f
 11023  00D3  3000               	movlw	0
 11024  00D4  3DB1               	addwfc	Load_Main@i+1,f
 11025  00D5  0831               	movf	Load_Main@i+1,w
 11026  00D6  3A80               	xorlw	128
 11027  00D7  00A8               	movwf	??_Load_Main
 11028  00D8  3080               	movlw	128
 11029  00D9  0228               	subwf	??_Load_Main,w
 11030  00DA  1D03               	skipz
 11031  00DB  28DE               	goto	u8475
 11032  00DC  3004               	movlw	4
 11033  00DD  0230               	subwf	Load_Main@i,w
 11034  00DE                     u8475:	
 11035  00DE  1C03               	skipc
 11036  00DF  28AE               	goto	l8315
 11037  00E0                     l8321:	
 11038                           
 11039                           ;OverLoad_B1.c: 104: }
 11040                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11041  00E0  3003               	movlw	3
 11042  00E1  0020               	movlb	0	; select bank0
 11043  00E2  00A0               	movwf	___lwdiv@divisor
 11044  00E3  3000               	movlw	0
 11045  00E4  00A1               	movwf	___lwdiv@divisor+1
 11046  00E5  0022               	movlb	2	; select bank2
 11047  00E6  083E               	movf	((_Load+1)^(0+256)+5),w
 11048  00E7  0020               	movlb	0	; select bank0
 11049  00E8  01A3               	clrf	___lwdiv@dividend+1
 11050  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 11051  00EA  0022               	movlb	2	; select bank2
 11052  00EB  083D               	movf	(_Load^(0+256)+5),w
 11053  00EC  0020               	movlb	0	; select bank0
 11054  00ED  01A2               	clrf	___lwdiv@dividend
 11055  00EE  07A2               	addwf	___lwdiv@dividend,f
 11056  00EF  3190  20B1  3180   	fcall	___lwdiv
 11057  00F2  0020               	movlb	0	; select bank0
 11058  00F3  0821               	movf	?___lwdiv+1,w
 11059  00F4  0022               	movlb	2	; select bank2
 11060  00F5  01BE               	clrf	((_Load+1)^(0+256)+5)
 11061  00F6  07BE               	addwf	((_Load+1)^(0+256)+5),f
 11062  00F7  0020               	movlb	0	; select bank0
 11063  00F8  0820               	movf	?___lwdiv,w
 11064  00F9  0022               	movlb	2	; select bank2
 11065  00FA  01BD               	clrf	(_Load^(0+256)+5)
 11066  00FB  07BD               	addwf	(_Load^(0+256)+5),f
 11067                           
 11068                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11069  00FC  3003               	movlw	3
 11070  00FD  0020               	movlb	0	; select bank0
 11071  00FE  00A0               	movwf	___lwdiv@divisor
 11072  00FF  3000               	movlw	0
 11073  0100  00A1               	movwf	___lwdiv@divisor+1
 11074  0101  0022               	movlb	2	; select bank2
 11075  0102  0840               	movf	((_Load+1)^(0+256)+7),w
 11076  0103  0020               	movlb	0	; select bank0
 11077  0104  01A3               	clrf	___lwdiv@dividend+1
 11078  0105  07A3               	addwf	___lwdiv@dividend+1,f
 11079  0106  0022               	movlb	2	; select bank2
 11080  0107  083F               	movf	(_Load^(0+256)+7),w
 11081  0108  0020               	movlb	0	; select bank0
 11082  0109  01A2               	clrf	___lwdiv@dividend
 11083  010A  07A2               	addwf	___lwdiv@dividend,f
 11084  010B  3190  20B1  3180   	fcall	___lwdiv
 11085  010E  0020               	movlb	0	; select bank0
 11086  010F  0821               	movf	?___lwdiv+1,w
 11087  0110  0022               	movlb	2	; select bank2
 11088  0111  01C0               	clrf	((_Load+1)^(0+256)+7)
 11089  0112  07C0               	addwf	((_Load+1)^(0+256)+7),f
 11090  0113  0020               	movlb	0	; select bank0
 11091  0114  0820               	movf	?___lwdiv,w
 11092  0115  0022               	movlb	2	; select bank2
 11093  0116  01BF               	clrf	(_Load^(0+256)+7)
 11094  0117  07BF               	addwf	(_Load^(0+256)+7),f
 11095                           
 11096                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11097  0118  319E  2608  3180   	fcall	_setLoad_AH_AL_Restore
 11098                           
 11099                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11100  011B  0022               	movlb	2	; select bank2
 11101  011C  0840               	movf	((_Load+1)^(0+256)+7),w
 11102  011D  023E               	subwf	((_Load+1)^(0+256)+5),w
 11103  011E  1D03               	skipz
 11104  011F  2922               	goto	u8485
 11105  0120  083F               	movf	(_Load^(0+256)+7),w
 11106  0121  023D               	subwf	(_Load^(0+256)+5),w
 11107  0122                     u8485:	
 11108  0122  1C03               	skipc
 11109  0123  0008               	return
 11110                           
 11111                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11112  0124  3005               	movlw	5
 11113  0125  3E38               	addlw	_Load& (0+255)
 11114  0126  0086               	movwf	6
 11115  0127  3001               	movlw	1	; select bank2/3
 11116  0128  0087               	movwf	7
 11117  0129  093F               	comf	(_Load^(0+256)+7),w
 11118  012A  0020               	movlb	0	; select bank0
 11119  012B  00A8               	movwf	??_Load_Main
 11120  012C  0022               	movlb	2	; select bank2
 11121  012D  0940               	comf	((_Load+1)^(0+256)+7),w
 11122  012E  0020               	movlb	0	; select bank0
 11123  012F  00A9               	movwf	??_Load_Main+1
 11124  0130  0AA8               	incf	??_Load_Main,f
 11125  0131  1903               	skipnz
 11126  0132  0AA9               	incf	??_Load_Main+1,f
 11127  0133  3F40               	moviw [0]fsr1
 11128  0134  0728               	addwf	??_Load_Main,w
 11129  0135  0022               	movlb	2	; select bank2
 11130  0136  00D7               	movwf	(_Load^(0+256)+31)
 11131  0137  3F41               	moviw [1]fsr1
 11132  0138  0020               	movlb	0	; select bank0
 11133  0139  3D29               	addwfc	??_Load_Main+1,w
 11134  013A  0022               	movlb	2	; select bank2
 11135  013B  00D8               	movwf	(_Load^(0+256)+32)
 11136                           
 11137                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11138  013C  01BD               	clrf	(_Load^(0+256)+5)
 11139  013D  01BE               	clrf	((_Load+1)^(0+256)+5)
 11140                           
 11141                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11142  013E  01BF               	clrf	(_Load^(0+256)+7)
 11143  013F  01C0               	clrf	((_Load+1)^(0+256)+7)
 11144                           
 11145                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11146  0140  1DB8               	btfss	_Load^(0+256),3
 11147  0141  299B               	goto	l8361
 11148                           
 11149                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11150  0142  3002               	movlw	2
 11151  0143  025D               	subwf	(_Load^(0+256)+37),w
 11152  0144  1803               	skipnc
 11153  0145  299B               	goto	l8361
 11154                           
 11155                           ;OverLoad_B1.c: 117: Load.Count++;
 11156  0146  3001               	movlw	1
 11157  0147  0020               	movlb	0	; select bank0
 11158  0148  00A8               	movwf	??_Load_Main
 11159  0149  0828               	movf	??_Load_Main,w
 11160  014A  0022               	movlb	2	; select bank2
 11161  014B  07DD               	addwf	(_Load^(0+256)+37),f
 11162                           
 11163                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11164  014C  319A  2232  3180   	fcall	_getDimmer_Load_Status
 11165  014F  0020               	movlb	0	; select bank0
 11166  0150  00A8               	movwf	??_Load_Main
 11167  0151  0828               	movf	??_Load_Main,w
 11168  0152  00AE               	movwf	Load_Main@Load_RunStatus
 11169                           
 11170                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11171  0153  319B  231D  3180   	fcall	_getMain_Lights_Count
 11172  0156  0020               	movlb	0	; select bank0
 11173  0157  00A8               	movwf	??_Load_Main
 11174  0158  0828               	movf	??_Load_Main,w
 11175  0159  00AF               	movwf	Load_Main@LightsCount
 11176                           
 11177                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11178  015A  0022               	movlb	2	; select bank2
 11179  015B  085D               	movf	(_Load^(0+256)+37),w
 11180  015C  3A01               	xorlw	1
 11181  015D  1D03               	skipz
 11182  015E  2963               	goto	l8347
 11183                           
 11184                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 11185  015F  3014               	movlw	20
 11186  0160  00DB               	movwf	(_Load^(0+256)+35)
 11187  0161  3005               	movlw	5
 11188  0162  2970               	goto	L7
 11189  0163                     l8347:	
 11190                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11191                           
 11192  0163  085D               	movf	(_Load^(0+256)+37),w
 11193  0164  3A02               	xorlw	2
 11194  0165  1D03               	skipz
 11195  0166  299B               	goto	l8361
 11196                           
 11197                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11198  0167  0020               	movlb	0	; select bank0
 11199  0168  082F               	movf	Load_Main@LightsCount,w
 11200  0169  3A01               	xorlw	1
 11201  016A  1D03               	skipz
 11202  016B  2972               	goto	l8353
 11203                           
 11204                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 11205  016C  3075               	movlw	117
 11206  016D  0022               	movlb	2	; select bank2
 11207  016E  00DB               	movwf	(_Load^(0+256)+35)
 11208  016F  3000               	movlw	0
 11209  0170                     L7:	
 11210  0170  00DC               	movwf	(_Load^(0+256)+36)
 11211                           
 11212                           ;OverLoad_B1.c: 132: } else {
 11213  0171  299B               	goto	l8361
 11214  0172                     l8353:	
 11215                           
 11216                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11217  0172  0020               	movlb	0	; select bank0
 11218  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 11219  0174  1D03               	skipz
 11220  0175  298F               	goto	l8357
 11221                           
 11222                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 11223  0176  082F               	movf	Load_Main@LightsCount,w
 11224  0177  00A8               	movwf	??_Load_Main
 11225  0178  01A9               	clrf	??_Load_Main+1
 11226  0179  0828               	movf	??_Load_Main,w
 11227  017A  00A0               	movwf	___wmul@multiplier
 11228  017B  0829               	movf	??_Load_Main+1,w
 11229  017C  00A1               	movwf	___wmul@multiplier+1
 11230  017D  3075               	movlw	117
 11231  017E  00A2               	movwf	___wmul@multiplicand
 11232  017F  3000               	movlw	0
 11233  0180  00A3               	movwf	___wmul@multiplicand+1
 11234  0181  319E  2641  3180   	fcall	___wmul
 11235  0184  0020               	movlb	0	; select bank0
 11236  0185  0821               	movf	?___wmul+1,w
 11237  0186  0022               	movlb	2	; select bank2
 11238  0187  01DC               	clrf	((_Load+1)^(0+256)+35)
 11239  0188  07DC               	addwf	((_Load+1)^(0+256)+35),f
 11240  0189  0020               	movlb	0	; select bank0
 11241  018A  0820               	movf	?___wmul,w
 11242  018B  0022               	movlb	2	; select bank2
 11243  018C  01DB               	clrf	(_Load^(0+256)+35)
 11244  018D  07DB               	addwf	(_Load^(0+256)+35),f
 11245                           
 11246                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11247  018E  299B               	goto	l8361
 11248  018F                     l8357:	
 11249  018F  0020               	movlb	0	; select bank0
 11250  0190  082E               	movf	Load_Main@Load_RunStatus,w
 11251  0191  3A01               	xorlw	1
 11252  0192  1D03               	skipz
 11253  0193  299B               	goto	l8361
 11254                           
 11255                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 11256  0194  0022               	movlb	2	; select bank2
 11257  0195  0841               	movf	(_Load^(0+256)+9),w
 11258  0196  3E75               	addlw	117
 11259  0197  00DB               	movwf	(_Load^(0+256)+35)
 11260  0198  3000               	movlw	0
 11261  0199  3D42               	addwfc	((_Load+1)^(0+256)+9),w
 11262  019A  00DC               	movwf	((_Load+1)^(0+256)+35)
 11263  019B                     l8361:	
 11264                           
 11265                           ;OverLoad_B1.c: 137: }
 11266                           ;OverLoad_B1.c: 138: }
 11267                           ;OverLoad_B1.c: 139: }
 11268                           ;OverLoad_B1.c: 140: }
 11269                           ;OverLoad_B1.c: 141: }
 11270                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11271  019B  0022               	movlb	2	; select bank2
 11272  019C  085C               	movf	((_Load+1)^(0+256)+35),w
 11273  019D  0258               	subwf	((_Load+1)^(0+256)+31),w
 11274  019E  1D03               	skipz
 11275  019F  29A2               	goto	u8565
 11276  01A0  085B               	movf	(_Load^(0+256)+35),w
 11277  01A1  0257               	subwf	(_Load^(0+256)+31),w
 11278  01A2                     u8565:	
 11279  01A2  1C03               	skipc
 11280  01A3  29C1               	goto	l8377
 11281                           
 11282                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11283  01A4  0020               	movlb	0	; select bank0
 11284  01A5  082F               	movf	Load_Main@LightsCount,w
 11285  01A6  3A01               	xorlw	1
 11286  01A7  1903               	skipnz
 11287  01A8  29AB               	goto	l8367
 11288  01A9  3003               	movlw	3
 11289  01AA  29AC               	goto	L8
 11290  01AB                     l8367:	
 11291  01AB  3002               	movlw	2
 11292  01AC                     L8:	
 11293  01AC  00AA               	movwf	_Load_Main$4374
 11294  01AD  3000               	movlw	0
 11295  01AE  00AB               	movwf	_Load_Main$4374+1
 11296  01AF  082A               	movf	_Load_Main$4374,w
 11297  01B0  00A8               	movwf	??_Load_Main
 11298  01B1  0828               	movf	??_Load_Main,w
 11299  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11300                           
 11301                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11302  01B3  3001               	movlw	1
 11303  01B4  00A8               	movwf	??_Load_Main
 11304  01B5  0828               	movf	??_Load_Main,w
 11305  01B6  0022               	movlb	2	; select bank2
 11306  01B7  07DE               	addwf	(_Load^(0+256)+38),f
 11307                           
 11308                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11309  01B8  085E               	movf	(_Load^(0+256)+38),w
 11310  01B9  0020               	movlb	0	; select bank0
 11311  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11312  01BB  1803               	skipnc
 11313  01BC  0008               	return
 11314                           
 11315                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11316  01BD  0022               	movlb	2	; select bank2
 11317  01BE  01DE               	clrf	(_Load^(0+256)+38)
 11318                           
 11319                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11320  01BF  16B8               	bsf	_Load^(0+256),5
 11321                           
 11322                           ;OverLoad_B1.c: 170: }
 11323                           ;OverLoad_B1.c: 171: } else {
 11324  01C0  0008               	return
 11325  01C1                     l8377:	
 11326                           
 11327                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11328  01C1  01DE               	clrf	(_Load^(0+256)+38)
 11329                           
 11330                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11331  01C2  1DB8               	btfss	_Load^(0+256),3
 11332  01C3  0008               	return
 11333                           
 11334                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11335  01C4  3001               	movlw	1
 11336  01C5  0020               	movlb	0	; select bank0
 11337  01C6  00A8               	movwf	??_Load_Main
 11338  01C7  0828               	movf	??_Load_Main,w
 11339  01C8  0022               	movlb	2	; select bank2
 11340  01C9  07DF               	addwf	(_Load^(0+256)+39),f
 11341                           
 11342                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11343  01CA  3003               	movlw	3
 11344  01CB  025F               	subwf	(_Load^(0+256)+39),w
 11345  01CC  1C03               	skipc
 11346  01CD  0008               	return
 11347                           
 11348                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11349  01CE  01DF               	clrf	(_Load^(0+256)+39)
 11350                           
 11351                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11352  01CF  17B8               	bsf	_Load^(0+256),7
 11353                           
 11354                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11355  01D0  11B8               	bcf	_Load^(0+256),3
 11356                           
 11357                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11358  01D1  01DD               	clrf	(_Load^(0+256)+37)
 11359                           
 11360                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11361  01D2  0858               	movf	((_Load+1)^(0+256)+31),w
 11362  01D3  01C2               	clrf	((_Load+1)^(0+256)+9)
 11363  01D4  07C2               	addwf	((_Load+1)^(0+256)+9),f
 11364  01D5  0857               	movf	(_Load^(0+256)+31),w
 11365  01D6  01C1               	clrf	(_Load^(0+256)+9)
 11366  01D7  07C1               	addwf	(_Load^(0+256)+9),f
 11367                           
 11368                           ;OverLoad_B1.c: 184: }
 11369                           ;OverLoad_B1.c: 185: }
 11370                           ;OverLoad_B1.c: 208: }
 11371                           ;OverLoad_B1.c: 209: }
 11372                           ;OverLoad_B1.c: 210: }
 11373                           ;OverLoad_B1.c: 211: } else {
 11374  01D8  0008               	return
 11375  01D9                     l1685:	
 11376                           
 11377                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11378  01D9  1638               	bsf	_Load^(0+256),4
 11379                           
 11380                           ;OverLoad_B1.c: 213: }
 11381                           ;OverLoad_B1.c: 214: } else {
 11382  01DA  0008               	return
 11383  01DB                     l1684:	
 11384                           
 11385                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11386  01DB  1D38               	btfss	_Load^(0+256),2
 11387  01DC  29EE               	goto	l8413
 11388                           
 11389                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11390  01DD  1138               	bcf	_Load^(0+256),2
 11391                           
 11392                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11393  01DE  1238               	bcf	_Load^(0+256),4
 11394                           
 11395                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11396  01DF  01B9               	clrf	(_Load^(0+256)+1)
 11397  01E0  01BA               	clrf	((_Load+1)^(0+256)+1)
 11398                           
 11399                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11400  01E1  319E  2608  3180   	fcall	_setLoad_AH_AL_Restore
 11401                           
 11402                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11403  01E4  0022               	movlb	2	; select bank2
 11404  01E5  01DE               	clrf	(_Load^(0+256)+38)
 11405                           
 11406                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11407  01E6  01DF               	clrf	(_Load^(0+256)+39)
 11408                           
 11409                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11410  01E7  01BD               	clrf	(_Load^(0+256)+5)
 11411  01E8  01BE               	clrf	((_Load+1)^(0+256)+5)
 11412                           
 11413                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11414  01E9  01BF               	clrf	(_Load^(0+256)+7)
 11415  01EA  01C0               	clrf	((_Load+1)^(0+256)+7)
 11416                           
 11417                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11418  01EB  11B8               	bcf	_Load^(0+256),3
 11419                           
 11420                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11421  01EC  01DD               	clrf	(_Load^(0+256)+37)
 11422                           
 11423                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11424  01ED  13B8               	bcf	_Load^(0+256),7
 11425  01EE                     l8413:	
 11426                           
 11427                           ;OverLoad_B1.c: 257: }
 11428                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11429  01EE  1EB8               	btfss	_Load^(0+256),5
 11430  01EF  0008               	return
 11431                           
 11432                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11433  01F0  3001               	movlw	1
 11434  01F1  07BB               	addwf	(_Load^(0+256)+3),f
 11435  01F2  3000               	movlw	0
 11436  01F3  3DBC               	addwfc	((_Load+1)^(0+256)+3),f
 11437                           
 11438                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11439  01F4  3001               	movlw	1
 11440  01F5  023C               	subwf	((_Load+1)^(0+256)+3),w
 11441  01F6  30F4               	movlw	244
 11442  01F7  1903               	skipnz
 11443  01F8  023B               	subwf	(_Load^(0+256)+3),w
 11444  01F9  1C03               	skipc
 11445  01FA  0008               	return
 11446                           
 11447                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11448  01FB  01BB               	clrf	(_Load^(0+256)+3)
 11449  01FC  01BC               	clrf	((_Load+1)^(0+256)+3)
 11450                           
 11451                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11452  01FD  12B8               	bcf	_Load^(0+256),5
 11453                           
 11454                           ;OverLoad_B1.c: 263: }
 11455                           ;OverLoad_B1.c: 264: }
 11456                           ;OverLoad_B1.c: 265: }
 11457                           ;OverLoad_B1.c: 266: } else {
 11458  01FE  0008               	return
 11459  01FF                     l1674:	
 11460                           
 11461                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11462  01FF  0021               	movlb	1	; select bank1
 11463  0200  1C2F               	btfss	_myMain^(0+128),0
 11464  0201  0008               	return
 11465                           
 11466                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11467  0202  0022               	movlb	2	; select bank2
 11468  0203  1438               	bsf	_Load^(0+256),0
 11469  0204  0008               	return
 11470  0205                     __end_of_Load_Main:	
 11471                           
 11472                           	psect	text65
 11473  1B1D                     __ptext65:	
 11474 ;; *************** function _getMain_Lights_Count *****************
 11475 ;; Defined at:
 11476 ;;		line 459 in file "../src/Main_B1.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;		None
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;  count           1    2[BANK0 ] unsigned char 
 11481 ;;  status1         1    1[BANK0 ] unsigned char 
 11482 ;; Return value:  Size  Location     Type
 11483 ;;                  1    wreg      unsigned char 
 11484 ;; Registers used:
 11485 ;;		wreg, status,2
 11486 ;; Tracked objects:
 11487 ;;		On entry : 0/0
 11488 ;;		On exit  : 0/0
 11489 ;;		Unchanged: 0/0
 11490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;Total ram usage:        3 bytes
 11496 ;; Hardware stack levels used:    1
 11497 ;; Hardware stack levels required when called:    5
 11498 ;; This function calls:
 11499 ;;		Nothing
 11500 ;; This function is called by:
 11501 ;;		_Load_Main
 11502 ;; This function uses a non-reentrant model
 11503 ;;
 11504                           
 11505                           
 11506                           ;psect for function _getMain_Lights_Count
 11507  1B1D                     _getMain_Lights_Count:	
 11508                           
 11509                           ;Main_B1.c: 460: char count = 0;
 11510                           
 11511                           ;incstack = 0
 11512                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11513  1B1D  0020               	movlb	0	; select bank0
 11514  1B1E  01A2               	clrf	getMain_Lights_Count@count
 11515                           
 11516                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11517  1B1F  3000               	movlw	0
 11518  1B20  0021               	movlb	1	; select bank1
 11519  1B21  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11520  1B22  3001               	movlw	1
 11521  1B23  0020               	movlb	0	; select bank0
 11522  1B24  00A1               	movwf	getMain_Lights_Count@status1
 11523                           
 11524                           ;Main_B1.c: 487: count = status1;
 11525  1B25  0821               	movf	getMain_Lights_Count@status1,w
 11526  1B26  00A0               	movwf	??_getMain_Lights_Count
 11527  1B27  0820               	movf	??_getMain_Lights_Count,w
 11528  1B28  00A2               	movwf	getMain_Lights_Count@count
 11529                           
 11530                           ;Main_B1.c: 495: return count;
 11531  1B29  0822               	movf	getMain_Lights_Count@count,w
 11532  1B2A  0008               	return
 11533  1B2B                     __end_of_getMain_Lights_Count:	
 11534                           
 11535                           	psect	text66
 11536  1A32                     __ptext66:	
 11537 ;; *************** function _getDimmer_Load_Status *****************
 11538 ;; Defined at:
 11539 ;;		line 1280 in file "../src/Dimmer_B1.c"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;		None
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;  status          1    0[BANK0 ] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;                  1    wreg      unsigned char 
 11546 ;; Registers used:
 11547 ;;		wreg, status,2
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;Total ram usage:        1 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    5
 11560 ;; This function calls:
 11561 ;;		Nothing
 11562 ;; This function is called by:
 11563 ;;		_Load_Main
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           
 11568                           ;psect for function _getDimmer_Load_Status
 11569  1A32                     _getDimmer_Load_Status:	
 11570                           
 11571                           ;Dimmer_B1.c: 1281: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11572                           
 11573                           ;incstack = 0
 11574                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11575  1A32  3000               	movlw	0
 11576  1A33  0022               	movlb	2	; select bank2
 11577  1A34  192C               	btfsc	_Dimmer^(0+256),2
 11578  1A35  3001               	movlw	1
 11579  1A36  0020               	movlb	0	; select bank0
 11580  1A37  00A0               	movwf	getDimmer_Load_Status@status
 11581                           
 11582                           ;Dimmer_B1.c: 1282: return status;
 11583  1A38  0820               	movf	getDimmer_Load_Status@status,w
 11584  1A39  0008               	return
 11585  1A3A                     __end_of_getDimmer_Load_Status:	
 11586                           
 11587                           	psect	text67
 11588  1A2A                     __ptext67:	
 11589 ;; *************** function _getDimmer_LoadGO *****************
 11590 ;; Defined at:
 11591 ;;		line 1274 in file "../src/Dimmer_B1.c"
 11592 ;; Parameters:    Size  Location     Type
 11593 ;;		None
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11596 ;; Return value:  Size  Location     Type
 11597 ;;                  1    wreg      unsigned char 
 11598 ;; Registers used:
 11599 ;;		wreg, status,2
 11600 ;; Tracked objects:
 11601 ;;		On entry : 0/0
 11602 ;;		On exit  : 0/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11608 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11609 ;;Total ram usage:        1 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; Hardware stack levels required when called:    5
 11612 ;; This function calls:
 11613 ;;		Nothing
 11614 ;; This function is called by:
 11615 ;;		_Load_Main
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           
 11620                           ;psect for function _getDimmer_LoadGO
 11621  1A2A                     _getDimmer_LoadGO:	
 11622                           
 11623                           ;Dimmer_B1.c: 1275: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11624                           
 11625                           ;incstack = 0
 11626                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11627  1A2A  3000               	movlw	0
 11628  1A2B  0022               	movlb	2	; select bank2
 11629  1A2C  18AC               	btfsc	_Dimmer^(0+256),1
 11630  1A2D  3001               	movlw	1
 11631  1A2E  0020               	movlb	0	; select bank0
 11632  1A2F  00A0               	movwf	getDimmer_LoadGO@loadgo
 11633                           
 11634                           ;Dimmer_B1.c: 1276: return loadgo;
 11635  1A30  0820               	movf	getDimmer_LoadGO@loadgo,w
 11636  1A31  0008               	return
 11637  1A32                     __end_of_getDimmer_LoadGO:	
 11638                           
 11639                           	psect	text68
 11640  1C6E                     __ptext68:	
 11641 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11642 ;; Defined at:
 11643 ;;		line 318 in file "../src/Dimmer_B1.c"
 11644 ;; Parameters:    Size  Location     Type
 11645 ;;		None
 11646 ;; Auto vars:     Size  Location     Type
 11647 ;;  status          1    0[BANK0 ] unsigned char 
 11648 ;; Return value:  Size  Location     Type
 11649 ;;                  1    wreg      unsigned char 
 11650 ;; Registers used:
 11651 ;;		wreg, status,2, status,0
 11652 ;; Tracked objects:
 11653 ;;		On entry : 0/0
 11654 ;;		On exit  : 0/0
 11655 ;;		Unchanged: 0/0
 11656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;Total ram usage:        1 bytes
 11662 ;; Hardware stack levels used:    1
 11663 ;; Hardware stack levels required when called:    5
 11664 ;; This function calls:
 11665 ;;		Nothing
 11666 ;; This function is called by:
 11667 ;;		_Load_Main
 11668 ;; This function uses a non-reentrant model
 11669 ;;
 11670                           
 11671                           
 11672                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11673  1C6E                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11674                           
 11675                           ;Dimmer_B1.c: 319: char status = 0;
 11676                           
 11677                           ;incstack = 0
 11678                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11679  1C6E  0020               	movlb	0	; select bank0
 11680  1C6F  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11681                           
 11682                           ;Dimmer_B1.c: 330: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11683  1C70  3000               	movlw	0
 11684  1C71  0021               	movlb	1	; select bank1
 11685  1C72  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11686  1C73  3001               	movlw	1
 11687  1C74  0020               	movlb	0	; select bank0
 11688  1C75  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11689                           
 11690                           ;Dimmer_B1.c: 334: if (status == 0) {
 11691  1C76  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11692  1C77  1D03               	skipz
 11693  1C78  2C7F               	goto	l7423
 11694                           
 11695                           ;Dimmer_B1.c: 344: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11696  1C79  3000               	movlw	0
 11697  1C7A  0021               	movlb	1	; select bank1
 11698  1C7B  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11699  1C7C  3001               	movlw	1
 11700  1C7D  0020               	movlb	0	; select bank0
 11701  1C7E  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11702  1C7F                     l7423:	
 11703                           
 11704                           ;Dimmer_B1.c: 346: }
 11705                           ;Dimmer_B1.c: 348: return status;
 11706  1C7F  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11707  1C80  0008               	return
 11708  1C81                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11709                           
 11710                           	psect	text69
 11711  1E41                     __ptext69:	
 11712 ;; *************** function ___wmul *****************
 11713 ;; Defined at:
 11714 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11715 ;; Parameters:    Size  Location     Type
 11716 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11717 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;  product         2    4[BANK0 ] unsigned int 
 11720 ;; Return value:  Size  Location     Type
 11721 ;;                  2    0[BANK0 ] unsigned int 
 11722 ;; Registers used:
 11723 ;;		wreg, status,2, status,0
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;Total ram usage:        6 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; Hardware stack levels required when called:    5
 11736 ;; This function calls:
 11737 ;;		Nothing
 11738 ;; This function is called by:
 11739 ;;		_Load_Main
 11740 ;; This function uses a non-reentrant model
 11741 ;;
 11742                           
 11743                           
 11744                           ;psect for function ___wmul
 11745  1E41                     ___wmul:	
 11746                           
 11747                           ;incstack = 0
 11748                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11749  1E41  0020               	movlb	0	; select bank0
 11750  1E42  01A4               	clrf	___wmul@product
 11751  1E43  01A5               	clrf	___wmul@product+1
 11752  1E44                     l7991:	
 11753  1E44  1C20               	btfss	___wmul@multiplier,0
 11754  1E45  2E4A               	goto	l2780
 11755  1E46  0822               	movf	___wmul@multiplicand,w
 11756  1E47  07A4               	addwf	___wmul@product,f
 11757  1E48  0823               	movf	___wmul@multiplicand+1,w
 11758  1E49  3DA5               	addwfc	___wmul@product+1,f
 11759  1E4A                     l2780:	
 11760  1E4A  3001               	movlw	1
 11761  1E4B                     u7845:	
 11762  1E4B  35A2               	lslf	___wmul@multiplicand,f
 11763  1E4C  0DA3               	rlf	___wmul@multiplicand+1,f
 11764  1E4D  0B89               	decfsz	9,f
 11765  1E4E  2E4B               	goto	u7845
 11766  1E4F  3001               	movlw	1
 11767  1E50                     u7855:	
 11768  1E50  36A1               	lsrf	___wmul@multiplier+1,f
 11769  1E51  0CA0               	rrf	___wmul@multiplier,f
 11770  1E52  0B89               	decfsz	9,f
 11771  1E53  2E50               	goto	u7855
 11772  1E54  0821               	movf	___wmul@multiplier+1,w
 11773  1E55  0420               	iorwf	___wmul@multiplier,w
 11774  1E56  1D03               	skipz
 11775  1E57  2E44               	goto	l7991
 11776  1E58  0825               	movf	___wmul@product+1,w
 11777  1E59  01A1               	clrf	?___wmul+1
 11778  1E5A  07A1               	addwf	?___wmul+1,f
 11779  1E5B  0824               	movf	___wmul@product,w
 11780  1E5C  01A0               	clrf	?___wmul
 11781  1E5D  07A0               	addwf	?___wmul,f
 11782  1E5E  0008               	return
 11783  1E5F                     __end_of___wmul:	
 11784                           
 11785                           	psect	text70
 11786  10B1                     __ptext70:	
 11787 ;; *************** function ___lwdiv *****************
 11788 ;; Defined at:
 11789 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;  divisor         2    0[BANK0 ] unsigned int 
 11792 ;;  dividend        2    2[BANK0 ] unsigned int 
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;  quotient        2    5[BANK0 ] unsigned int 
 11795 ;;  counter         1    7[BANK0 ] unsigned char 
 11796 ;; Return value:  Size  Location     Type
 11797 ;;                  2    0[BANK0 ] unsigned int 
 11798 ;; Registers used:
 11799 ;;		wreg, status,2, status,0
 11800 ;; Tracked objects:
 11801 ;;		On entry : 0/0
 11802 ;;		On exit  : 0/0
 11803 ;;		Unchanged: 0/0
 11804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11805 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;Total ram usage:        8 bytes
 11810 ;; Hardware stack levels used:    1
 11811 ;; Hardware stack levels required when called:    5
 11812 ;; This function calls:
 11813 ;;		Nothing
 11814 ;; This function is called by:
 11815 ;;		_Load_Main
 11816 ;;		_setTemp_Main
 11817 ;;		_setRF_Main
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           
 11822                           ;psect for function ___lwdiv
 11823  10B1                     ___lwdiv:	
 11824                           
 11825                           ;incstack = 0
 11826                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11827  10B1  0020               	movlb	0	; select bank0
 11828  10B2  01A5               	clrf	___lwdiv@quotient
 11829  10B3  01A6               	clrf	___lwdiv@quotient+1
 11830  10B4  0821               	movf	___lwdiv@divisor+1,w
 11831  10B5  0420               	iorwf	___lwdiv@divisor,w
 11832  10B6  1903               	skipnz
 11833  10B7  28E1               	goto	l7359
 11834  10B8  01A7               	clrf	___lwdiv@counter
 11835  10B9  0AA7               	incf	___lwdiv@counter,f
 11836  10BA                     l7347:	
 11837  10BA  1BA1               	btfsc	___lwdiv@divisor+1,7
 11838  10BB  28C6               	goto	l7349
 11839  10BC  3001               	movlw	1
 11840  10BD                     u6715:	
 11841  10BD  35A0               	lslf	___lwdiv@divisor,f
 11842  10BE  0DA1               	rlf	___lwdiv@divisor+1,f
 11843  10BF  0B89               	decfsz	9,f
 11844  10C0  28BD               	goto	u6715
 11845  10C1  3001               	movlw	1
 11846  10C2  00A4               	movwf	??___lwdiv
 11847  10C3  0824               	movf	??___lwdiv,w
 11848  10C4  07A7               	addwf	___lwdiv@counter,f
 11849  10C5  28BA               	goto	l7347
 11850  10C6                     l7349:	
 11851  10C6  3001               	movlw	1
 11852  10C7                     u6735:	
 11853  10C7  35A5               	lslf	___lwdiv@quotient,f
 11854  10C8  0DA6               	rlf	___lwdiv@quotient+1,f
 11855  10C9  0B89               	decfsz	9,f
 11856  10CA  28C7               	goto	u6735
 11857  10CB  0821               	movf	___lwdiv@divisor+1,w
 11858  10CC  0223               	subwf	___lwdiv@dividend+1,w
 11859  10CD  1D03               	skipz
 11860  10CE  28D1               	goto	u6745
 11861  10CF  0820               	movf	___lwdiv@divisor,w
 11862  10D0  0222               	subwf	___lwdiv@dividend,w
 11863  10D1                     u6745:	
 11864  10D1  1C03               	skipc
 11865  10D2  28D8               	goto	l7355
 11866  10D3  0820               	movf	___lwdiv@divisor,w
 11867  10D4  02A2               	subwf	___lwdiv@dividend,f
 11868  10D5  0821               	movf	___lwdiv@divisor+1,w
 11869  10D6  3BA3               	subwfb	___lwdiv@dividend+1,f
 11870  10D7  1425               	bsf	___lwdiv@quotient,0
 11871  10D8                     l7355:	
 11872  10D8  3001               	movlw	1
 11873  10D9                     u6755:	
 11874  10D9  36A1               	lsrf	___lwdiv@divisor+1,f
 11875  10DA  0CA0               	rrf	___lwdiv@divisor,f
 11876  10DB  0B89               	decfsz	9,f
 11877  10DC  28D9               	goto	u6755
 11878  10DD  3001               	movlw	1
 11879  10DE  02A7               	subwf	___lwdiv@counter,f
 11880  10DF  1D03               	btfss	3,2
 11881  10E0  28C6               	goto	l7349
 11882  10E1                     l7359:	
 11883  10E1  0826               	movf	___lwdiv@quotient+1,w
 11884  10E2  01A1               	clrf	?___lwdiv+1
 11885  10E3  07A1               	addwf	?___lwdiv+1,f
 11886  10E4  0825               	movf	___lwdiv@quotient,w
 11887  10E5  01A0               	clrf	?___lwdiv
 11888  10E6  07A0               	addwf	?___lwdiv,f
 11889  10E7  0008               	return
 11890  10E8                     __end_of___lwdiv:	
 11891                           
 11892                           	psect	text71
 11893  19B9                     __ptext71:	
 11894 ;; *************** function _Load_Initialization *****************
 11895 ;; Defined at:
 11896 ;;		line 9 in file "../src/OverLoad_B1.c"
 11897 ;; Parameters:    Size  Location     Type
 11898 ;;		None
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;		None
 11901 ;; Return value:  Size  Location     Type
 11902 ;;		None               void
 11903 ;; Registers used:
 11904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11905 ;; Tracked objects:
 11906 ;;		On entry : 0/0
 11907 ;;		On exit  : 0/0
 11908 ;;		Unchanged: 0/0
 11909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;Total ram usage:        0 bytes
 11915 ;; Hardware stack levels used:    1
 11916 ;; Hardware stack levels required when called:    6
 11917 ;; This function calls:
 11918 ;;		_setLoad_AH_AL_Restore
 11919 ;; This function is called by:
 11920 ;;		_main
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           
 11925                           ;psect for function _Load_Initialization
 11926  19B9                     _Load_Initialization:	
 11927                           
 11928                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11929                           
 11930                           ;incstack = 0
 11931                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11932  19B9  319E  2608         	fcall	_setLoad_AH_AL_Restore
 11933  19BB  0008               	return
 11934  19BC                     __end_of_Load_Initialization:	
 11935                           
 11936                           	psect	text72
 11937  1E08                     __ptext72:	
 11938 ;; *************** function _setLoad_AH_AL_Restore *****************
 11939 ;; Defined at:
 11940 ;;		line 294 in file "../src/OverLoad_B1.c"
 11941 ;; Parameters:    Size  Location     Type
 11942 ;;		None
 11943 ;; Auto vars:     Size  Location     Type
 11944 ;;  i               1    1[BANK0 ] unsigned char 
 11945 ;; Return value:  Size  Location     Type
 11946 ;;		None               void
 11947 ;; Registers used:
 11948 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11949 ;; Tracked objects:
 11950 ;;		On entry : 0/0
 11951 ;;		On exit  : 0/0
 11952 ;;		Unchanged: 0/0
 11953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;Total ram usage:        2 bytes
 11959 ;; Hardware stack levels used:    1
 11960 ;; Hardware stack levels required when called:    5
 11961 ;; This function calls:
 11962 ;;		Nothing
 11963 ;; This function is called by:
 11964 ;;		_Load_Initialization
 11965 ;;		_Load_Main
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           
 11970                           ;psect for function _setLoad_AH_AL_Restore
 11971  1E08                     _setLoad_AH_AL_Restore:	
 11972                           
 11973                           ;OverLoad_B1.c: 295: char i;
 11974                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 11975                           
 11976                           ;incstack = 0
 11977                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11978  1E08  0020               	movlb	0	; select bank0
 11979  1E09  01A1               	clrf	setLoad_AH_AL_Restore@i
 11980  1E0A                     L9:	
 11981  1E0A  3005               	movlw	5
 11982  1E0B  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11983  1E0C  1803               	btfsc	3,0
 11984  1E0D  0008               	return
 11985                           
 11986                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 11987  1E0E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11988  1E0F  3E43               	addlw	(_Load+11)& (0+255)
 11989  1E10  0086               	movwf	6
 11990  1E11  3001               	movlw	1	; select bank2/3
 11991  1E12  0087               	movwf	7
 11992  1E13  3000               	movlw	0
 11993  1E14  3FC0               	movwi [0]fsr1
 11994  1E15  3FC1               	movwi [1]fsr1
 11995                           
 11996                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 11997  1E16  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11998  1E17  3E4D               	addlw	(_Load+21)& (0+255)
 11999  1E18  0086               	movwf	6
 12000  1E19  3001               	movlw	1	; select bank2/3
 12001  1E1A  0087               	movwf	7
 12002  1E1B  30FF               	movlw	255
 12003  1E1C  3FC0               	movwi [0]fsr1
 12004  1E1D  30FF               	movlw	255
 12005  1E1E  3FC1               	movwi [1]fsr1
 12006  1E1F  3001               	movlw	1
 12007  1E20  00A0               	movwf	??_setLoad_AH_AL_Restore
 12008  1E21  0820               	movf	??_setLoad_AH_AL_Restore,w
 12009  1E22  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12010  1E23  2E0A               	goto	L9
 12011  1E24                     __end_of_setLoad_AH_AL_Restore:	
 12012                           
 12013                           	psect	text73
 12014  19D4                     __ptext73:	
 12015 ;; *************** function _LED_Main *****************
 12016 ;; Defined at:
 12017 ;;		line 47 in file "../src/LED_B1.c"
 12018 ;; Parameters:    Size  Location     Type
 12019 ;;		None
 12020 ;; Auto vars:     Size  Location     Type
 12021 ;;		None
 12022 ;; Return value:  Size  Location     Type
 12023 ;;		None               void
 12024 ;; Registers used:
 12025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12026 ;; Tracked objects:
 12027 ;;		On entry : 0/0
 12028 ;;		On exit  : 0/0
 12029 ;;		Unchanged: 0/0
 12030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;Total ram usage:        0 bytes
 12036 ;; Hardware stack levels used:    1
 12037 ;; Hardware stack levels required when called:    7
 12038 ;; This function calls:
 12039 ;;		_setLED_Main
 12040 ;; This function is called by:
 12041 ;;		_main
 12042 ;; This function uses a non-reentrant model
 12043 ;;
 12044                           
 12045                           
 12046                           ;psect for function _LED_Main
 12047  19D4                     _LED_Main:	
 12048                           
 12049                           ;LED_B1.c: 67: setLED_Main(99);
 12050                           
 12051                           ;incstack = 0
 12052                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12053  19D4  3063               	movlw	99
 12054  19D5  3190  207B         	fcall	_setLED_Main
 12055  19D7  0008               	return
 12056  19D8                     __end_of_LED_Main:	
 12057                           
 12058                           	psect	text74
 12059  107B                     __ptext74:	
 12060 ;; *************** function _setLED_Main *****************
 12061 ;; Defined at:
 12062 ;;		line 229 in file "../src/LED_B1.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;  led             1    wreg     unsigned char 
 12065 ;; Auto vars:     Size  Location     Type
 12066 ;;  led             1    4[BANK0 ] unsigned char 
 12067 ;; Return value:  Size  Location     Type
 12068 ;;		None               void
 12069 ;; Registers used:
 12070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12071 ;; Tracked objects:
 12072 ;;		On entry : 0/0
 12073 ;;		On exit  : 0/0
 12074 ;;		Unchanged: 0/0
 12075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;Total ram usage:        3 bytes
 12081 ;; Hardware stack levels used:    1
 12082 ;; Hardware stack levels required when called:    6
 12083 ;; This function calls:
 12084 ;;		_LedPointSelect
 12085 ;; This function is called by:
 12086 ;;		_LED_Main
 12087 ;; This function uses a non-reentrant model
 12088 ;;
 12089                           
 12090                           
 12091                           ;psect for function _setLED_Main
 12092  107B                     _setLED_Main:	
 12093                           
 12094                           ;incstack = 0
 12095                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12096                           ;setLED_Main@led stored from wreg
 12097  107B  0020               	movlb	0	; select bank0
 12098  107C  00A4               	movwf	setLED_Main@led
 12099                           
 12100                           ;LED_B1.c: 230: LedPointSelect(led);
 12101  107D  0824               	movf	setLED_Main@led,w
 12102  107E  319A  22BC  3190   	fcall	_LedPointSelect
 12103                           
 12104                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12105  1081  0021               	movlb	1	; select bank1
 12106  1082  084D               	movf	_LED^(0+128),w
 12107  1083  0086               	movwf	6
 12108  1084  3001               	movlw	1	; select bank2/3
 12109  1085  0087               	movwf	7
 12110  1086  1C81               	btfss	1,1
 12111  1087  0008               	return
 12112                           
 12113                           ;LED_B1.c: 232: LED->Time++;
 12114  1088  0A4D               	incf	_LED^(0+128),w
 12115  1089  0086               	movwf	6
 12116  108A  3001               	movlw	1	; select bank2/3
 12117  108B  0087               	movwf	7
 12118  108C  3001               	movlw	1
 12119  108D  0781               	addwf	1,f
 12120  108E  3141               	addfsr 1,1
 12121  108F  1803               	skipnc
 12122  1090  0A81               	incf	1,f
 12123                           
 12124                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12125  1091  0A4D               	incf	_LED^(0+128),w
 12126  1092  0086               	movwf	6
 12127  1093  3001               	movlw	1	; select bank2/3
 12128  1094  0087               	movwf	7
 12129  1095  3F40               	moviw [0]fsr1
 12130  1096  0020               	movlb	0	; select bank0
 12131  1097  00A2               	movwf	??_setLED_Main
 12132  1098  3F41               	moviw [1]fsr1
 12133  1099  00A3               	movwf	??_setLED_Main+1
 12134  109A  3000               	movlw	0
 12135  109B  0223               	subwf	??_setLED_Main+1,w
 12136  109C  3019               	movlw	25
 12137  109D  1903               	skipnz
 12138  109E  0222               	subwf	??_setLED_Main,w
 12139  109F  1C03               	skipc
 12140  10A0  0008               	return
 12141                           
 12142                           ;LED_B1.c: 234: LED->Time = 0;
 12143  10A1  0021               	movlb	1	; select bank1
 12144  10A2  0A4D               	incf	_LED^(0+128),w
 12145  10A3  0086               	movwf	6
 12146  10A4  3001               	movlw	1	; select bank2/3
 12147  10A5  0087               	movwf	7
 12148  10A6  3000               	movlw	0
 12149  10A7  3FC0               	movwi [0]fsr1
 12150  10A8  3FC1               	movwi [1]fsr1
 12151                           
 12152                           ;LED_B1.c: 252: if (led == 99) {
 12153  10A9  0020               	movlb	0	; select bank0
 12154  10AA  0824               	movf	setLED_Main@led,w
 12155  10AB  3A63               	xorlw	99
 12156  10AC  1D03               	skipz
 12157  10AD  0008               	return
 12158                           
 12159                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12160  10AE  3020               	movlw	32
 12161  10AF  068D               	xorwf	13,f
 12162  10B0  0008               	return
 12163  10B1                     __end_of_setLED_Main:	
 12164                           
 12165                           	psect	text75
 12166  19D0                     __ptext75:	
 12167 ;; *************** function _LED_Initialization *****************
 12168 ;; Defined at:
 12169 ;;		line 31 in file "../src/LED_B1.c"
 12170 ;; Parameters:    Size  Location     Type
 12171 ;;		None
 12172 ;; Auto vars:     Size  Location     Type
 12173 ;;		None
 12174 ;; Return value:  Size  Location     Type
 12175 ;;		None               void
 12176 ;; Registers used:
 12177 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12178 ;; Tracked objects:
 12179 ;;		On entry : 0/0
 12180 ;;		On exit  : 0/0
 12181 ;;		Unchanged: 0/0
 12182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;Total ram usage:        0 bytes
 12188 ;; Hardware stack levels used:    1
 12189 ;; Hardware stack levels required when called:    8
 12190 ;; This function calls:
 12191 ;;		_setLED_Initialization
 12192 ;; This function is called by:
 12193 ;;		_main
 12194 ;; This function uses a non-reentrant model
 12195 ;;
 12196                           
 12197                           
 12198                           ;psect for function _LED_Initialization
 12199  19D0                     _LED_Initialization:	
 12200                           
 12201                           ;LED_B1.c: 42: setLED_Initialization(99);
 12202                           
 12203                           ;incstack = 0
 12204                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12205  19D0  3063               	movlw	99
 12206  19D1  319C  2412         	fcall	_setLED_Initialization
 12207  19D3  0008               	return
 12208  19D4                     __end_of_LED_Initialization:	
 12209                           
 12210                           	psect	text76
 12211  1C12                     __ptext76:	
 12212 ;; *************** function _setLED_Initialization *****************
 12213 ;; Defined at:
 12214 ;;		line 74 in file "../src/LED_B1.c"
 12215 ;; Parameters:    Size  Location     Type
 12216 ;;  led             1    wreg     unsigned char 
 12217 ;; Auto vars:     Size  Location     Type
 12218 ;;  led             1    4[BANK0 ] unsigned char 
 12219 ;; Return value:  Size  Location     Type
 12220 ;;		None               void
 12221 ;; Registers used:
 12222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12223 ;; Tracked objects:
 12224 ;;		On entry : 0/0
 12225 ;;		On exit  : 0/0
 12226 ;;		Unchanged: 0/0
 12227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12232 ;;Total ram usage:        1 bytes
 12233 ;; Hardware stack levels used:    1
 12234 ;; Hardware stack levels required when called:    7
 12235 ;; This function calls:
 12236 ;;		_LedPointSelect
 12237 ;;		_setLED
 12238 ;; This function is called by:
 12239 ;;		_LED_Initialization
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           
 12244                           ;psect for function _setLED_Initialization
 12245  1C12                     _setLED_Initialization:	
 12246                           
 12247                           ;incstack = 0
 12248                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12249                           ;setLED_Initialization@led stored from wreg
 12250  1C12  0020               	movlb	0	; select bank0
 12251  1C13  00A4               	movwf	setLED_Initialization@led
 12252                           
 12253                           ;LED_B1.c: 75: LedPointSelect(led);
 12254  1C14  0824               	movf	setLED_Initialization@led,w
 12255  1C15  319A  22BC  319C   	fcall	_LedPointSelect
 12256                           
 12257                           ;LED_B1.c: 76: LED->Enable = 1;
 12258  1C18  0021               	movlb	1	; select bank1
 12259  1C19  084D               	movf	_LED^(0+128),w
 12260  1C1A  0086               	movwf	6
 12261  1C1B  3001               	movlw	1	; select bank2/3
 12262  1C1C  0087               	movwf	7
 12263  1C1D  1401               	bsf	1,0
 12264                           
 12265                           ;LED_B1.c: 77: setLED(led, 0);
 12266  1C1E  0020               	movlb	0	; select bank0
 12267  1C1F  01A2               	clrf	setLED@command
 12268  1C20  0824               	movf	setLED_Initialization@led,w
 12269  1C21  3191  2159         	fcall	_setLED
 12270  1C23  0008               	return
 12271  1C24                     __end_of_setLED_Initialization:	
 12272                           
 12273                           	psect	text77
 12274  1285                     __ptext77:	
 12275 ;; *************** function _Flash_Memory_Main *****************
 12276 ;; Defined at:
 12277 ;;		line 978 in file "../src/MCU_B1.c"
 12278 ;; Parameters:    Size  Location     Type
 12279 ;;		None
 12280 ;; Auto vars:     Size  Location     Type
 12281 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12282 ;; Return value:  Size  Location     Type
 12283 ;;		None               void
 12284 ;; Registers used:
 12285 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12286 ;; Tracked objects:
 12287 ;;		On entry : 0/0
 12288 ;;		On exit  : 0/0
 12289 ;;		Unchanged: 0/0
 12290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;Total ram usage:        3 bytes
 12296 ;; Hardware stack levels used:    1
 12297 ;; Hardware stack levels required when called:    8
 12298 ;; This function calls:
 12299 ;;		_Flash_Memory_Modify
 12300 ;;		_getAll_Sw_KeyStatus
 12301 ;;		_getMain_All_LightsStatus
 12302 ;; This function is called by:
 12303 ;;		_main
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           
 12308                           ;psect for function _Flash_Memory_Main
 12309  1285                     _Flash_Memory_Main:	
 12310                           
 12311                           ;MCU_B1.c: 979: char key_Status = 0;
 12312                           
 12313                           ;incstack = 0
 12314                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12315  1285  0020               	movlb	0	; select bank0
 12316  1286  01A7               	clrf	Flash_Memory_Main@key_Status
 12317                           
 12318                           ;MCU_B1.c: 981: key_Status = getAll_Sw_KeyStatus();
 12319  1287  319B  23AA  3192   	fcall	_getAll_Sw_KeyStatus
 12320  128A  0020               	movlb	0	; select bank0
 12321  128B  00A6               	movwf	??_Flash_Memory_Main
 12322  128C  0826               	movf	??_Flash_Memory_Main,w
 12323  128D  00A7               	movwf	Flash_Memory_Main@key_Status
 12324                           
 12325                           ;MCU_B1.c: 983: if (Memory.Modify == 1) {
 12326  128E  0024               	movlb	4	; select bank4
 12327  128F  1C44               	btfss	(_Memory^(0+512)+36),0
 12328  1290  0008               	return
 12329                           
 12330                           ;MCU_B1.c: 984: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12331  1291  0020               	movlb	0	; select bank0
 12332  1292  01A8               	clrf	_Flash_Memory_Main$3467
 12333  1293  319A  2255  3192   	fcall	_getMain_All_LightsStatus
 12334  1296  3800               	iorlw	0
 12335  1297  1D03               	skipz
 12336  1298  2A9F               	goto	l8121
 12337  1299  0020               	movlb	0	; select bank0
 12338  129A  08A7               	movf	Flash_Memory_Main@key_Status,f
 12339  129B  1D03               	skipz
 12340  129C  2A9F               	goto	l8121
 12341  129D  01A8               	clrf	_Flash_Memory_Main$3467
 12342  129E  0AA8               	incf	_Flash_Memory_Main$3467,f
 12343  129F                     l8121:	
 12344  129F  0020               	movlb	0	; select bank0
 12345  12A0  0828               	movf	_Flash_Memory_Main$3467,w
 12346  12A1  0024               	movlb	4	; select bank4
 12347  12A2  10C4               	bcf	(_Memory^(0+512)+36),1
 12348  12A3  1D03               	skipz
 12349  12A4  14C4               	bsf	(_Memory^(0+512)+36),1
 12350                           
 12351                           ;MCU_B1.c: 985: if (Memory.GO == 1) {
 12352  12A5  1CC4               	btfss	(_Memory^(0+512)+36),1
 12353  12A6  2AC0               	goto	l1292
 12354                           
 12355                           ;MCU_B1.c: 986: Memory.Runtime = 1;
 12356  12A7  15C4               	bsf	(_Memory^(0+512)+36),3
 12357                           
 12358                           ;MCU_B1.c: 987: Memory.Time++;
 12359  12A8  3001               	movlw	1
 12360  12A9  07C2               	addwf	(_Memory^(0+512)+34),f
 12361  12AA  3000               	movlw	0
 12362  12AB  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12363                           
 12364                           ;MCU_B1.c: 988: if (Memory.Time == (200 / 20)) {
 12365  12AC  3022               	movlw	34
 12366  12AD  3E20               	addlw	_Memory& (0+255)
 12367  12AE  0086               	movwf	6
 12368  12AF  3002               	movlw	2	; select bank4/5
 12369  12B0  0087               	movwf	7
 12370  12B1  3F40               	moviw [0]fsr1
 12371  12B2  3A0A               	xorlw	10
 12372  12B3  1D03               	skipz
 12373  12B4  2AB7               	goto	u8085
 12374  12B5  3F41               	moviw [1]fsr1
 12375  12B6  3A00               	xorlw	0
 12376  12B7                     u8085:	
 12377  12B7  1D03               	skipz
 12378  12B8  0008               	return
 12379                           
 12380                           ;MCU_B1.c: 989: Memory.Time = 0;
 12381  12B9  01C2               	clrf	(_Memory^(0+512)+34)
 12382  12BA  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12383                           
 12384                           ;MCU_B1.c: 990: Memory.Modify = 0;
 12385  12BB  1044               	bcf	(_Memory^(0+512)+36),0
 12386                           
 12387                           ;MCU_B1.c: 991: Memory.GO = 0;
 12388  12BC  10C4               	bcf	(_Memory^(0+512)+36),1
 12389                           
 12390                           ;MCU_B1.c: 992: Flash_Memory_Modify();
 12391  12BD  318C  248F         	fcall	_Flash_Memory_Modify
 12392                           
 12393                           ;MCU_B1.c: 993: }
 12394                           ;MCU_B1.c: 994: } else {
 12395  12BF  0008               	return
 12396  12C0                     l1292:	
 12397                           
 12398                           ;MCU_B1.c: 995: if (Memory.Runtime == 1) {
 12399  12C0  1DC4               	btfss	(_Memory^(0+512)+36),3
 12400  12C1  0008               	return
 12401                           
 12402                           ;MCU_B1.c: 996: Memory.Runtime = 0;
 12403  12C2  11C4               	bcf	(_Memory^(0+512)+36),3
 12404                           
 12405                           ;MCU_B1.c: 997: Memory.Time = 0;
 12406  12C3  01C2               	clrf	(_Memory^(0+512)+34)
 12407  12C4  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12408  12C5  0008               	return
 12409  12C6                     __end_of_Flash_Memory_Main:	
 12410                           
 12411                           	psect	text78
 12412  1BAA                     __ptext78:	
 12413 ;; *************** function _getAll_Sw_KeyStatus *****************
 12414 ;; Defined at:
 12415 ;;		line 279 in file "../src/Switch_B1.c"
 12416 ;; Parameters:    Size  Location     Type
 12417 ;;		None
 12418 ;; Auto vars:     Size  Location     Type
 12419 ;;  status          1    1[BANK0 ] unsigned char 
 12420 ;; Return value:  Size  Location     Type
 12421 ;;                  1    wreg      unsigned char 
 12422 ;; Registers used:
 12423 ;;		wreg, status,2
 12424 ;; Tracked objects:
 12425 ;;		On entry : 0/0
 12426 ;;		On exit  : 0/0
 12427 ;;		Unchanged: 0/0
 12428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12430 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;Total ram usage:        3 bytes
 12434 ;; Hardware stack levels used:    1
 12435 ;; Hardware stack levels required when called:    5
 12436 ;; This function calls:
 12437 ;;		Nothing
 12438 ;; This function is called by:
 12439 ;;		_Flash_Memory_Main
 12440 ;; This function uses a non-reentrant model
 12441 ;;
 12442                           
 12443                           
 12444                           ;psect for function _getAll_Sw_KeyStatus
 12445  1BAA                     _getAll_Sw_KeyStatus:	
 12446                           
 12447                           ;Switch_B1.c: 280: char status = 0;
 12448                           
 12449                           ;incstack = 0
 12450                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12451  1BAA  0020               	movlb	0	; select bank0
 12452  1BAB  01A1               	clrf	getAll_Sw_KeyStatus@status
 12453                           
 12454                           ;Switch_B1.c: 299: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12455  1BAC  01A2               	clrf	_getAll_Sw_KeyStatus$7108
 12456  1BAD  0AA2               	incf	_getAll_Sw_KeyStatus$7108,f
 12457  1BAE  1F0C               	btfss	12,6	;volatile
 12458  1BAF  1A0C               	btfsc	12,4	;volatile
 12459  1BB0  2BB5               	goto	l7675
 12460  1BB1  1C0C               	btfss	12,0	;volatile
 12461  1BB2  1B8C               	btfsc	12,7	;volatile
 12462  1BB3  2BB5               	goto	l7675
 12463  1BB4  01A2               	clrf	_getAll_Sw_KeyStatus$7108
 12464  1BB5                     l7675:	
 12465  1BB5  0822               	movf	_getAll_Sw_KeyStatus$7108,w
 12466  1BB6  00A0               	movwf	??_getAll_Sw_KeyStatus
 12467  1BB7  0820               	movf	??_getAll_Sw_KeyStatus,w
 12468  1BB8  00A1               	movwf	getAll_Sw_KeyStatus@status
 12469                           
 12470                           ;Switch_B1.c: 303: return status;
 12471  1BB9  0821               	movf	getAll_Sw_KeyStatus@status,w
 12472  1BBA  0008               	return
 12473  1BBB                     __end_of_getAll_Sw_KeyStatus:	
 12474                           
 12475                           	psect	text79
 12476  0C8F                     __ptext79:	
 12477 ;; *************** function _Flash_Memory_Modify *****************
 12478 ;; Defined at:
 12479 ;;		line 1055 in file "../src/MCU_B1.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;		None
 12482 ;; Auto vars:     Size  Location     Type
 12483 ;;  i               1    5[BANK0 ] unsigned char 
 12484 ;; Return value:  Size  Location     Type
 12485 ;;		None               void
 12486 ;; Registers used:
 12487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12488 ;; Tracked objects:
 12489 ;;		On entry : 0/0
 12490 ;;		On exit  : 0/0
 12491 ;;		Unchanged: 0/0
 12492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12497 ;;Total ram usage:        2 bytes
 12498 ;; Hardware stack levels used:    1
 12499 ;; Hardware stack levels required when called:    7
 12500 ;; This function calls:
 12501 ;;		_Flash_Memory_Erasing
 12502 ;;		_Flash_Memory_Read
 12503 ;;		_Flash_Memory_Write
 12504 ;;		_setMemory_Data
 12505 ;; This function is called by:
 12506 ;;		_Flash_Memory_Main
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           
 12511                           ;psect for function _Flash_Memory_Modify
 12512  0C8F                     _Flash_Memory_Modify:	
 12513                           
 12514                           ;MCU_B1.c: 1056: char i = 0;
 12515                           
 12516                           ;incstack = 0
 12517                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12518  0C8F  0020               	movlb	0	; select bank0
 12519  0C90  01A5               	clrf	Flash_Memory_Modify@i
 12520                           
 12521                           ;MCU_B1.c: 1057: for (i = 0; i < 32; i++) {
 12522  0C91  01A5               	clrf	Flash_Memory_Modify@i
 12523  0C92  3020               	movlw	32
 12524  0C93  0225               	subwf	Flash_Memory_Modify@i,w
 12525  0C94  1803               	btfsc	3,0
 12526  0C95  2CAB               	goto	l7693
 12527  0C96                     l7687:	
 12528                           
 12529                           ;MCU_B1.c: 1058: Memory.Data[i] = Flash_Memory_Read(i);
 12530  0C96  0825               	movf	Flash_Memory_Modify@i,w
 12531  0C97  319D  2584  318C   	fcall	_Flash_Memory_Read
 12532  0C9A  0020               	movlb	0	; select bank0
 12533  0C9B  00A4               	movwf	??_Flash_Memory_Modify
 12534  0C9C  0825               	movf	Flash_Memory_Modify@i,w
 12535  0C9D  3E20               	addlw	_Memory& (0+255)
 12536  0C9E  0086               	movwf	6
 12537  0C9F  3002               	movlw	2	; select bank4/5
 12538  0CA0  0087               	movwf	7
 12539  0CA1  0824               	movf	??_Flash_Memory_Modify,w
 12540  0CA2  0081               	movwf	1
 12541  0CA3  3001               	movlw	1
 12542  0CA4  00A4               	movwf	??_Flash_Memory_Modify
 12543  0CA5  0824               	movf	??_Flash_Memory_Modify,w
 12544  0CA6  07A5               	addwf	Flash_Memory_Modify@i,f
 12545  0CA7  3020               	movlw	32
 12546  0CA8  0225               	subwf	Flash_Memory_Modify@i,w
 12547  0CA9  1C03               	skipc
 12548  0CAA  2C96               	goto	l7687
 12549  0CAB                     l7693:	
 12550                           
 12551                           ;MCU_B1.c: 1059: }
 12552                           ;MCU_B1.c: 1060: setMemory_Data(6, product->Data[11]);
 12553  0CAB  0021               	movlb	1	; select bank1
 12554  0CAC  086E               	movf	_product^(0+128),w
 12555  0CAD  0086               	movwf	6
 12556  0CAE  3002               	movlw	2	; select bank4/5
 12557  0CAF  0087               	movwf	7
 12558  0CB0  3002               	movlw	2	; select bank4/5
 12559  0CB1  3F4B               	moviw [11]fsr1
 12560  0CB2  0020               	movlb	0	; select bank0
 12561  0CB3  00A0               	movwf	setMemory_Data@data
 12562  0CB4  3006               	movlw	6
 12563  0CB5  319A  22C8  318C   	fcall	_setMemory_Data
 12564                           
 12565                           ;MCU_B1.c: 1061: setMemory_Data(0, product->Data[12]);
 12566  0CB8  0021               	movlb	1	; select bank1
 12567  0CB9  086E               	movf	_product^(0+128),w
 12568  0CBA  0086               	movwf	6
 12569  0CBB  3002               	movlw	2	; select bank4/5
 12570  0CBC  0087               	movwf	7
 12571  0CBD  3002               	movlw	2	; select bank4/5
 12572  0CBE  3F4C               	moviw [12]fsr1
 12573  0CBF  0020               	movlb	0	; select bank0
 12574  0CC0  00A0               	movwf	setMemory_Data@data
 12575  0CC1  3000               	movlw	0
 12576  0CC2  319A  22C8  318C   	fcall	_setMemory_Data
 12577                           
 12578                           ;MCU_B1.c: 1062: setMemory_Data(1, product->Data[13]);
 12579  0CC5  0021               	movlb	1	; select bank1
 12580  0CC6  086E               	movf	_product^(0+128),w
 12581  0CC7  0086               	movwf	6
 12582  0CC8  3002               	movlw	2	; select bank4/5
 12583  0CC9  0087               	movwf	7
 12584  0CCA  3002               	movlw	2	; select bank4/5
 12585  0CCB  3F4D               	moviw [13]fsr1
 12586  0CCC  0020               	movlb	0	; select bank0
 12587  0CCD  00A0               	movwf	setMemory_Data@data
 12588  0CCE  3001               	movlw	1
 12589  0CCF  319A  22C8  318C   	fcall	_setMemory_Data
 12590                           
 12591                           ;MCU_B1.c: 1063: setMemory_Data(2, product->Data[14]);
 12592  0CD2  0021               	movlb	1	; select bank1
 12593  0CD3  086E               	movf	_product^(0+128),w
 12594  0CD4  0086               	movwf	6
 12595  0CD5  3002               	movlw	2	; select bank4/5
 12596  0CD6  0087               	movwf	7
 12597  0CD7  3002               	movlw	2	; select bank4/5
 12598  0CD8  3F4E               	moviw [14]fsr1
 12599  0CD9  0020               	movlb	0	; select bank0
 12600  0CDA  00A0               	movwf	setMemory_Data@data
 12601  0CDB  3002               	movlw	2
 12602  0CDC  319A  22C8  318C   	fcall	_setMemory_Data
 12603                           
 12604                           ;MCU_B1.c: 1065: setMemory_Data(3, product->Data[21]);
 12605  0CDF  0021               	movlb	1	; select bank1
 12606  0CE0  086E               	movf	_product^(0+128),w
 12607  0CE1  0086               	movwf	6
 12608  0CE2  3002               	movlw	2	; select bank4/5
 12609  0CE3  0087               	movwf	7
 12610  0CE4  3002               	movlw	2	; select bank4/5
 12611  0CE5  3F55               	moviw [21]fsr1
 12612  0CE6  0020               	movlb	0	; select bank0
 12613  0CE7  00A0               	movwf	setMemory_Data@data
 12614  0CE8  3003               	movlw	3
 12615  0CE9  319A  22C8  318C   	fcall	_setMemory_Data
 12616                           
 12617                           ;MCU_B1.c: 1066: setMemory_Data(4, product->Data[22]);
 12618  0CEC  0021               	movlb	1	; select bank1
 12619  0CED  086E               	movf	_product^(0+128),w
 12620  0CEE  0086               	movwf	6
 12621  0CEF  3002               	movlw	2	; select bank4/5
 12622  0CF0  0087               	movwf	7
 12623  0CF1  3002               	movlw	2	; select bank4/5
 12624  0CF2  3F56               	moviw [22]fsr1
 12625  0CF3  0020               	movlb	0	; select bank0
 12626  0CF4  00A0               	movwf	setMemory_Data@data
 12627  0CF5  3004               	movlw	4
 12628  0CF6  319A  22C8  318C   	fcall	_setMemory_Data
 12629                           
 12630                           ;MCU_B1.c: 1067: setMemory_Data(5, product->Data[23]);
 12631  0CF9  0021               	movlb	1	; select bank1
 12632  0CFA  086E               	movf	_product^(0+128),w
 12633  0CFB  0086               	movwf	6
 12634  0CFC  3002               	movlw	2	; select bank4/5
 12635  0CFD  0087               	movwf	7
 12636  0CFE  3002               	movlw	2	; select bank4/5
 12637  0CFF  3F57               	moviw [23]fsr1
 12638  0D00  0020               	movlb	0	; select bank0
 12639  0D01  00A0               	movwf	setMemory_Data@data
 12640  0D02  3005               	movlw	5
 12641  0D03  319A  22C8  318C   	fcall	_setMemory_Data
 12642                           
 12643                           ;MCU_B1.c: 1068: if (myMain.SaveDimmer == 1) {
 12644  0D06  0021               	movlb	1	; select bank1
 12645  0D07  1EB9               	btfss	(_myMain^(0+128)+10),5
 12646  0D08  2D13               	goto	l7701
 12647                           
 12648                           ;MCU_B1.c: 1069: myMain.SaveDimmer = 0;
 12649  0D09  12B9               	bcf	(_myMain^(0+128)+10),5
 12650                           
 12651                           ;MCU_B1.c: 1070: setMemory_Data(30, 0xaa);
 12652  0D0A  30AA               	movlw	170
 12653  0D0B  0020               	movlb	0	; select bank0
 12654  0D0C  00A4               	movwf	??_Flash_Memory_Modify
 12655  0D0D  0824               	movf	??_Flash_Memory_Modify,w
 12656  0D0E  00A0               	movwf	setMemory_Data@data
 12657  0D0F  301E               	movlw	30
 12658  0D10  319A  22C8  318C   	fcall	_setMemory_Data
 12659  0D13                     l7701:	
 12660                           
 12661                           ;MCU_B1.c: 1071: }
 12662                           ;MCU_B1.c: 1073: if (Memory.LoopSave == 1) {
 12663  0D13  0024               	movlb	4	; select bank4
 12664  0D14  1D44               	btfss	(_Memory^(0+512)+36),2
 12665  0D15  2D1A               	goto	l1316
 12666                           
 12667                           ;MCU_B1.c: 1074: Memory.LoopSave = 0;
 12668  0D16  1144               	bcf	(_Memory^(0+512)+36),2
 12669                           
 12670                           ;MCU_B1.c: 1075: myMain.FirstOpen = 0;
 12671  0D17  0021               	movlb	1	; select bank1
 12672  0D18  11AF               	bcf	_myMain^(0+128),3
 12673                           
 12674                           ;MCU_B1.c: 1076: myMain.First = 0;
 12675  0D19  12AF               	bcf	_myMain^(0+128),5
 12676  0D1A                     l1316:	
 12677                           
 12678                           ;MCU_B1.c: 1078: }
 12679                           ;MCU_B1.c: 1079: GIE = 0;
 12680  0D1A  138B               	bcf	11,7	;volatile
 12681                           
 12682                           ;MCU_B1.c: 1080: Flash_Memory_Erasing();
 12683  0D1B  319A  22D4  318C   	fcall	_Flash_Memory_Erasing
 12684                           
 12685                           ;MCU_B1.c: 1081: Flash_Memory_Write();
 12686  0D1E  3190  2019         	fcall	_Flash_Memory_Write
 12687                           
 12688                           ;MCU_B1.c: 1082: GIE = 1;
 12689  0D20  178B               	bsf	11,7	;volatile
 12690  0D21  0008               	return
 12691  0D22                     __end_of_Flash_Memory_Modify:	
 12692                           
 12693                           	psect	text80
 12694  1AD4                     __ptext80:	
 12695 ;; *************** function _Flash_Memory_Erasing *****************
 12696 ;; Defined at:
 12697 ;;		line 1044 in file "../src/MCU_B1.c"
 12698 ;; Parameters:    Size  Location     Type
 12699 ;;		None
 12700 ;; Auto vars:     Size  Location     Type
 12701 ;;		None
 12702 ;; Return value:  Size  Location     Type
 12703 ;;		None               void
 12704 ;; Registers used:
 12705 ;;		wreg, status,2, status,0, pclath, cstack
 12706 ;; Tracked objects:
 12707 ;;		On entry : 0/0
 12708 ;;		On exit  : 0/0
 12709 ;;		Unchanged: 0/0
 12710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;Total ram usage:        0 bytes
 12716 ;; Hardware stack levels used:    1
 12717 ;; Hardware stack levels required when called:    6
 12718 ;; This function calls:
 12719 ;;		_Flash_Memory_Unlock
 12720 ;; This function is called by:
 12721 ;;		_Flash_Memory_Modify
 12722 ;; This function uses a non-reentrant model
 12723 ;;
 12724                           
 12725                           
 12726                           ;psect for function _Flash_Memory_Erasing
 12727  1AD4                     _Flash_Memory_Erasing:	
 12728                           
 12729                           ;MCU_B1.c: 1045: CFGS = 0;
 12730                           
 12731                           ;incstack = 0
 12732                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12733  1AD4  0023               	movlb	3	; select bank3
 12734  1AD5  1315               	bcf	21,6	;volatile
 12735                           
 12736                           ;MCU_B1.c: 1046: PMADRH = 0x30;
 12737  1AD6  3030               	movlw	48
 12738  1AD7  0092               	movwf	18	;volatile
 12739                           
 12740                           ;MCU_B1.c: 1047: PMADRL = 0x00;
 12741  1AD8  0191               	clrf	17	;volatile
 12742                           
 12743                           ;MCU_B1.c: 1048: FREE = 1;
 12744  1AD9  1615               	bsf	21,4	;volatile
 12745                           
 12746                           ;MCU_B1.c: 1049: WREN = 1;
 12747  1ADA  1515               	bsf	21,2	;volatile
 12748                           
 12749                           ;MCU_B1.c: 1050: Flash_Memory_Unlock();
 12750  1ADB  319A  224C         	fcall	_Flash_Memory_Unlock
 12751                           
 12752                           ;MCU_B1.c: 1051: WREN = 0;
 12753  1ADD  0023               	movlb	3	; select bank3
 12754  1ADE  1115               	bcf	21,2	;volatile
 12755  1ADF  0008               	return
 12756  1AE0                     __end_of_Flash_Memory_Erasing:	
 12757                           
 12758                           	psect	text81
 12759  047F                     __ptext81:	
 12760 ;; *************** function _Flash_Memory_Initialization *****************
 12761 ;; Defined at:
 12762 ;;		line 932 in file "../src/MCU_B1.c"
 12763 ;; Parameters:    Size  Location     Type
 12764 ;;		None
 12765 ;; Auto vars:     Size  Location     Type
 12766 ;;  value           1    5[BANK0 ] unsigned char 
 12767 ;; Return value:  Size  Location     Type
 12768 ;;		None               void
 12769 ;; Registers used:
 12770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12771 ;; Tracked objects:
 12772 ;;		On entry : 0/0
 12773 ;;		On exit  : 0/0
 12774 ;;		Unchanged: 0/0
 12775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12777 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;Total ram usage:        2 bytes
 12781 ;; Hardware stack levels used:    1
 12782 ;; Hardware stack levels required when called:    7
 12783 ;; This function calls:
 12784 ;;		_Flash_Memory_Read
 12785 ;;		_Flash_Memory_Write
 12786 ;;		_setMemory_Data
 12787 ;; This function is called by:
 12788 ;;		_main
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           
 12793                           ;psect for function _Flash_Memory_Initialization
 12794  047F                     _Flash_Memory_Initialization:	
 12795                           
 12796                           ;MCU_B1.c: 933: char value = 0;
 12797                           
 12798                           ;incstack = 0
 12799                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12800  047F  0020               	movlb	0	; select bank0
 12801  0480  01A5               	clrf	Flash_Memory_Initialization@value
 12802                           
 12803                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12804  0481  301F               	movlw	31
 12805  0482  319D  2584  3184   	fcall	_Flash_Memory_Read
 12806  0485  3AAA               	xorlw	170
 12807  0486  1D03               	skipz
 12808  0487  2D10               	goto	l8095
 12809                           
 12810                           ;MCU_B1.c: 935: product->Data[11] = Flash_Memory_Read(6);
 12811  0488  3006               	movlw	6
 12812  0489  319D  2584  3184   	fcall	_Flash_Memory_Read
 12813  048C  0020               	movlb	0	; select bank0
 12814  048D  00A4               	movwf	??_Flash_Memory_Initialization
 12815  048E  0021               	movlb	1	; select bank1
 12816  048F  086E               	movf	_product^(0+128),w
 12817  0490  3E0B               	addlw	11
 12818  0491  0086               	movwf	6
 12819  0492  3002               	movlw	2	; select bank4/5
 12820  0493  0087               	movwf	7
 12821  0494  0020               	movlb	0	; select bank0
 12822  0495  0824               	movf	??_Flash_Memory_Initialization,w
 12823  0496  0081               	movwf	1
 12824                           
 12825                           ;MCU_B1.c: 936: product->Data[12] = Flash_Memory_Read(0);
 12826  0497  3000               	movlw	0
 12827  0498  319D  2584  3184   	fcall	_Flash_Memory_Read
 12828  049B  0020               	movlb	0	; select bank0
 12829  049C  00A4               	movwf	??_Flash_Memory_Initialization
 12830  049D  0021               	movlb	1	; select bank1
 12831  049E  086E               	movf	_product^(0+128),w
 12832  049F  3E0C               	addlw	12
 12833  04A0  0086               	movwf	6
 12834  04A1  3002               	movlw	2	; select bank4/5
 12835  04A2  0087               	movwf	7
 12836  04A3  0020               	movlb	0	; select bank0
 12837  04A4  0824               	movf	??_Flash_Memory_Initialization,w
 12838  04A5  0081               	movwf	1
 12839                           
 12840                           ;MCU_B1.c: 937: product->Data[13] = Flash_Memory_Read(1);
 12841  04A6  3001               	movlw	1
 12842  04A7  319D  2584  3184   	fcall	_Flash_Memory_Read
 12843  04AA  0020               	movlb	0	; select bank0
 12844  04AB  00A4               	movwf	??_Flash_Memory_Initialization
 12845  04AC  0021               	movlb	1	; select bank1
 12846  04AD  086E               	movf	_product^(0+128),w
 12847  04AE  3E0D               	addlw	13
 12848  04AF  0086               	movwf	6
 12849  04B0  3002               	movlw	2	; select bank4/5
 12850  04B1  0087               	movwf	7
 12851  04B2  0020               	movlb	0	; select bank0
 12852  04B3  0824               	movf	??_Flash_Memory_Initialization,w
 12853  04B4  0081               	movwf	1
 12854                           
 12855                           ;MCU_B1.c: 938: product->Data[14] = Flash_Memory_Read(2);
 12856  04B5  3002               	movlw	2
 12857  04B6  319D  2584  3184   	fcall	_Flash_Memory_Read
 12858  04B9  0020               	movlb	0	; select bank0
 12859  04BA  00A4               	movwf	??_Flash_Memory_Initialization
 12860  04BB  0021               	movlb	1	; select bank1
 12861  04BC  086E               	movf	_product^(0+128),w
 12862  04BD  3E0E               	addlw	14
 12863  04BE  0086               	movwf	6
 12864  04BF  3002               	movlw	2	; select bank4/5
 12865  04C0  0087               	movwf	7
 12866  04C1  0020               	movlb	0	; select bank0
 12867  04C2  0824               	movf	??_Flash_Memory_Initialization,w
 12868  04C3  0081               	movwf	1
 12869                           
 12870                           ;MCU_B1.c: 941: product->Data[21] = Flash_Memory_Read(3);
 12871  04C4  3003               	movlw	3
 12872  04C5  319D  2584  3184   	fcall	_Flash_Memory_Read
 12873  04C8  0020               	movlb	0	; select bank0
 12874  04C9  00A4               	movwf	??_Flash_Memory_Initialization
 12875  04CA  0021               	movlb	1	; select bank1
 12876  04CB  086E               	movf	_product^(0+128),w
 12877  04CC  3E15               	addlw	21
 12878  04CD  0086               	movwf	6
 12879  04CE  3002               	movlw	2	; select bank4/5
 12880  04CF  0087               	movwf	7
 12881  04D0  0020               	movlb	0	; select bank0
 12882  04D1  0824               	movf	??_Flash_Memory_Initialization,w
 12883  04D2  0081               	movwf	1
 12884                           
 12885                           ;MCU_B1.c: 942: product->Data[22] = Flash_Memory_Read(4);
 12886  04D3  3004               	movlw	4
 12887  04D4  319D  2584  3184   	fcall	_Flash_Memory_Read
 12888  04D7  0020               	movlb	0	; select bank0
 12889  04D8  00A4               	movwf	??_Flash_Memory_Initialization
 12890  04D9  0021               	movlb	1	; select bank1
 12891  04DA  086E               	movf	_product^(0+128),w
 12892  04DB  3E16               	addlw	22
 12893  04DC  0086               	movwf	6
 12894  04DD  3002               	movlw	2	; select bank4/5
 12895  04DE  0087               	movwf	7
 12896  04DF  0020               	movlb	0	; select bank0
 12897  04E0  0824               	movf	??_Flash_Memory_Initialization,w
 12898  04E1  0081               	movwf	1
 12899                           
 12900                           ;MCU_B1.c: 943: product->Data[23] = Flash_Memory_Read(5);
 12901  04E2  3005               	movlw	5
 12902  04E3  319D  2584  3184   	fcall	_Flash_Memory_Read
 12903  04E6  0020               	movlb	0	; select bank0
 12904  04E7  00A4               	movwf	??_Flash_Memory_Initialization
 12905  04E8  0021               	movlb	1	; select bank1
 12906  04E9  086E               	movf	_product^(0+128),w
 12907  04EA  3E17               	addlw	23
 12908  04EB  0086               	movwf	6
 12909  04EC  3002               	movlw	2	; select bank4/5
 12910  04ED  0087               	movwf	7
 12911  04EE  0020               	movlb	0	; select bank0
 12912  04EF  0824               	movf	??_Flash_Memory_Initialization,w
 12913  04F0  0081               	movwf	1
 12914                           
 12915                           ;MCU_B1.c: 950: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12916  04F1  0021               	movlb	1	; select bank1
 12917  04F2  086E               	movf	_product^(0+128),w
 12918  04F3  3E0C               	addlw	12
 12919  04F4  0086               	movwf	6
 12920  04F5  3002               	movlw	2	; select bank4/5
 12921  04F6  0087               	movwf	7
 12922  04F7  0801               	movf	1,w
 12923  04F8  3AFF               	xorlw	255
 12924  04F9  1D03               	skipz
 12925  04FA  0008               	return
 12926  04FB  086E               	movf	_product^(0+128),w
 12927  04FC  3E0D               	addlw	13
 12928  04FD  0086               	movwf	6
 12929  04FE  3002               	movlw	2	; select bank4/5
 12930  04FF  0087               	movwf	7
 12931  0500  0801               	movf	1,w
 12932  0501  3AFF               	xorlw	255
 12933  0502  1D03               	skipz
 12934  0503  0008               	return
 12935  0504  086E               	movf	_product^(0+128),w
 12936  0505  3E0E               	addlw	14
 12937  0506  0086               	movwf	6
 12938  0507  3002               	movlw	2	; select bank4/5
 12939  0508  0087               	movwf	7
 12940  0509  0801               	movf	1,w
 12941  050A  3AFF               	xorlw	255
 12942  050B  1D03               	skipz
 12943  050C  0008               	return
 12944                           
 12945                           ;MCU_B1.c: 951: myMain.FirstOpen = 1;
 12946  050D  15AF               	bsf	_myMain^(0+128),3
 12947                           
 12948                           ;MCU_B1.c: 952: myMain.First = 1;
 12949  050E  16AF               	bsf	_myMain^(0+128),5
 12950                           
 12951                           ;MCU_B1.c: 953: }
 12952                           ;MCU_B1.c: 954: } else {
 12953  050F  0008               	return
 12954  0510                     l8095:	
 12955                           
 12956                           ;MCU_B1.c: 956: setMemory_Data(0, 0xff);
 12957  0510  30FF               	movlw	255
 12958  0511  0020               	movlb	0	; select bank0
 12959  0512  00A4               	movwf	??_Flash_Memory_Initialization
 12960  0513  0824               	movf	??_Flash_Memory_Initialization,w
 12961  0514  00A0               	movwf	setMemory_Data@data
 12962  0515  3000               	movlw	0
 12963  0516  319A  22C8  3184   	fcall	_setMemory_Data
 12964                           
 12965                           ;MCU_B1.c: 957: setMemory_Data(1, 0xff);
 12966  0519  30FF               	movlw	255
 12967  051A  0020               	movlb	0	; select bank0
 12968  051B  00A4               	movwf	??_Flash_Memory_Initialization
 12969  051C  0824               	movf	??_Flash_Memory_Initialization,w
 12970  051D  00A0               	movwf	setMemory_Data@data
 12971  051E  3001               	movlw	1
 12972  051F  319A  22C8  3184   	fcall	_setMemory_Data
 12973                           
 12974                           ;MCU_B1.c: 958: setMemory_Data(2, 0xff);
 12975  0522  30FF               	movlw	255
 12976  0523  0020               	movlb	0	; select bank0
 12977  0524  00A4               	movwf	??_Flash_Memory_Initialization
 12978  0525  0824               	movf	??_Flash_Memory_Initialization,w
 12979  0526  00A0               	movwf	setMemory_Data@data
 12980  0527  3002               	movlw	2
 12981  0528  319A  22C8  3184   	fcall	_setMemory_Data
 12982                           
 12983                           ;MCU_B1.c: 959: setMemory_Data(3, 0xff);
 12984  052B  30FF               	movlw	255
 12985  052C  0020               	movlb	0	; select bank0
 12986  052D  00A4               	movwf	??_Flash_Memory_Initialization
 12987  052E  0824               	movf	??_Flash_Memory_Initialization,w
 12988  052F  00A0               	movwf	setMemory_Data@data
 12989  0530  3003               	movlw	3
 12990  0531  319A  22C8  3184   	fcall	_setMemory_Data
 12991                           
 12992                           ;MCU_B1.c: 960: setMemory_Data(4, 0xff);
 12993  0534  30FF               	movlw	255
 12994  0535  0020               	movlb	0	; select bank0
 12995  0536  00A4               	movwf	??_Flash_Memory_Initialization
 12996  0537  0824               	movf	??_Flash_Memory_Initialization,w
 12997  0538  00A0               	movwf	setMemory_Data@data
 12998  0539  3004               	movlw	4
 12999  053A  319A  22C8  3184   	fcall	_setMemory_Data
 13000                           
 13001                           ;MCU_B1.c: 961: setMemory_Data(5, 0xff);
 13002  053D  30FF               	movlw	255
 13003  053E  0020               	movlb	0	; select bank0
 13004  053F  00A4               	movwf	??_Flash_Memory_Initialization
 13005  0540  0824               	movf	??_Flash_Memory_Initialization,w
 13006  0541  00A0               	movwf	setMemory_Data@data
 13007  0542  3005               	movlw	5
 13008  0543  319A  22C8  3184   	fcall	_setMemory_Data
 13009                           
 13010                           ;MCU_B1.c: 962: setMemory_Data(6, 0xff);
 13011  0546  30FF               	movlw	255
 13012  0547  0020               	movlb	0	; select bank0
 13013  0548  00A4               	movwf	??_Flash_Memory_Initialization
 13014  0549  0824               	movf	??_Flash_Memory_Initialization,w
 13015  054A  00A0               	movwf	setMemory_Data@data
 13016  054B  3006               	movlw	6
 13017  054C  319A  22C8  3184   	fcall	_setMemory_Data
 13018                           
 13019                           ;MCU_B1.c: 963: setMemory_Data(31, 0xaa);
 13020  054F  30AA               	movlw	170
 13021  0550  0020               	movlb	0	; select bank0
 13022  0551  00A4               	movwf	??_Flash_Memory_Initialization
 13023  0552  0824               	movf	??_Flash_Memory_Initialization,w
 13024  0553  00A0               	movwf	setMemory_Data@data
 13025  0554  301F               	movlw	31
 13026  0555  319A  22C8  3184   	fcall	_setMemory_Data
 13027                           
 13028                           ;MCU_B1.c: 968: GIE = 0;
 13029  0558  138B               	bcf	11,7	;volatile
 13030                           
 13031                           ;MCU_B1.c: 969: Flash_Memory_Write();
 13032  0559  3190  2019         	fcall	_Flash_Memory_Write
 13033                           
 13034                           ;MCU_B1.c: 970: GIE = 1;
 13035  055B  178B               	bsf	11,7	;volatile
 13036                           
 13037                           ;MCU_B1.c: 971: myMain.FirstOpen = 1;
 13038  055C  0021               	movlb	1	; select bank1
 13039  055D  15AF               	bsf	_myMain^(0+128),3
 13040                           
 13041                           ;MCU_B1.c: 972: myMain.First = 1;
 13042  055E  16AF               	bsf	_myMain^(0+128),5
 13043                           
 13044                           ;MCU_B1.c: 973: myMain.InitDimmer = 1;
 13045  055F  1639               	bsf	(_myMain^(0+128)+10),4
 13046  0560  0008               	return
 13047  0561                     __end_of_Flash_Memory_Initialization:	
 13048                           
 13049                           	psect	text82
 13050  1AC8                     __ptext82:	
 13051 ;; *************** function _setMemory_Data *****************
 13052 ;; Defined at:
 13053 ;;		line 1097 in file "../src/MCU_B1.c"
 13054 ;; Parameters:    Size  Location     Type
 13055 ;;  address         1    wreg     unsigned char 
 13056 ;;  data            1    0[BANK0 ] unsigned char 
 13057 ;; Auto vars:     Size  Location     Type
 13058 ;;  address         1    2[BANK0 ] unsigned char 
 13059 ;; Return value:  Size  Location     Type
 13060 ;;		None               void
 13061 ;; Registers used:
 13062 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13063 ;; Tracked objects:
 13064 ;;		On entry : 0/0
 13065 ;;		On exit  : 0/0
 13066 ;;		Unchanged: 0/0
 13067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13068 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13072 ;;Total ram usage:        3 bytes
 13073 ;; Hardware stack levels used:    1
 13074 ;; Hardware stack levels required when called:    5
 13075 ;; This function calls:
 13076 ;;		Nothing
 13077 ;; This function is called by:
 13078 ;;		_Flash_Memory_Initialization
 13079 ;;		_Flash_Memory_Modify
 13080 ;; This function uses a non-reentrant model
 13081 ;;
 13082                           
 13083                           
 13084                           ;psect for function _setMemory_Data
 13085  1AC8                     _setMemory_Data:	
 13086                           
 13087                           ;incstack = 0
 13088                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13089                           ;setMemory_Data@address stored from wreg
 13090  1AC8  0020               	movlb	0	; select bank0
 13091  1AC9  00A2               	movwf	setMemory_Data@address
 13092                           
 13093                           ;MCU_B1.c: 1098: Memory.Data[address] = data;
 13094  1ACA  0820               	movf	setMemory_Data@data,w
 13095  1ACB  00A1               	movwf	??_setMemory_Data
 13096  1ACC  0822               	movf	setMemory_Data@address,w
 13097  1ACD  3E20               	addlw	_Memory& (0+255)
 13098  1ACE  0086               	movwf	6
 13099  1ACF  3002               	movlw	2	; select bank4/5
 13100  1AD0  0087               	movwf	7
 13101  1AD1  0821               	movf	??_setMemory_Data,w
 13102  1AD2  0081               	movwf	1
 13103  1AD3  0008               	return
 13104  1AD4                     __end_of_setMemory_Data:	
 13105                           
 13106                           	psect	text83
 13107  1019                     __ptext83:	
 13108 ;; *************** function _Flash_Memory_Write *****************
 13109 ;; Defined at:
 13110 ;;		line 1025 in file "../src/MCU_B1.c"
 13111 ;; Parameters:    Size  Location     Type
 13112 ;;		None
 13113 ;; Auto vars:     Size  Location     Type
 13114 ;;  i               1    1[BANK0 ] unsigned char 
 13115 ;; Return value:  Size  Location     Type
 13116 ;;		None               void
 13117 ;; Registers used:
 13118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13119 ;; Tracked objects:
 13120 ;;		On entry : 0/0
 13121 ;;		On exit  : 0/0
 13122 ;;		Unchanged: 0/0
 13123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13125 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13127 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13128 ;;Total ram usage:        2 bytes
 13129 ;; Hardware stack levels used:    1
 13130 ;; Hardware stack levels required when called:    6
 13131 ;; This function calls:
 13132 ;;		_Flash_Memory_Unlock
 13133 ;; This function is called by:
 13134 ;;		_Flash_Memory_Initialization
 13135 ;;		_Flash_Memory_Modify
 13136 ;; This function uses a non-reentrant model
 13137 ;;
 13138                           
 13139                           
 13140                           ;psect for function _Flash_Memory_Write
 13141  1019                     _Flash_Memory_Write:	
 13142                           
 13143                           ;MCU_B1.c: 1026: char i = 0;
 13144                           
 13145                           ;incstack = 0
 13146                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13147  1019  0020               	movlb	0	; select bank0
 13148  101A  01A1               	clrf	Flash_Memory_Write@i
 13149                           
 13150                           ;MCU_B1.c: 1027: CFGS = 0;
 13151  101B  0023               	movlb	3	; select bank3
 13152  101C  1315               	bcf	21,6	;volatile
 13153                           
 13154                           ;MCU_B1.c: 1028: PMADRH = 0x30;
 13155  101D  3030               	movlw	48
 13156  101E  0092               	movwf	18	;volatile
 13157                           
 13158                           ;MCU_B1.c: 1029: PMDATH = 0;
 13159  101F  0194               	clrf	20	;volatile
 13160                           
 13161                           ;MCU_B1.c: 1030: FREE = 0;
 13162  1020  1215               	bcf	21,4	;volatile
 13163                           
 13164                           ;MCU_B1.c: 1031: LWLO = 1;
 13165  1021  1695               	bsf	21,5	;volatile
 13166                           
 13167                           ;MCU_B1.c: 1032: WREN = 1;
 13168  1022  1515               	bsf	21,2	;volatile
 13169                           
 13170                           ;MCU_B1.c: 1033: for (i = 0; i < 32; i++) {
 13171  1023  0020               	movlb	0	; select bank0
 13172  1024  01A1               	clrf	Flash_Memory_Write@i
 13173  1025  3020               	movlw	32
 13174  1026  0221               	subwf	Flash_Memory_Write@i,w
 13175  1027  1803               	btfsc	3,0
 13176  1028  2841               	goto	l1306
 13177  1029                     l7209:	
 13178                           
 13179                           ;MCU_B1.c: 1034: PMADRL = i;
 13180  1029  0821               	movf	Flash_Memory_Write@i,w
 13181  102A  0023               	movlb	3	; select bank3
 13182  102B  0091               	movwf	17	;volatile
 13183                           
 13184                           ;MCU_B1.c: 1035: PMDATL = Memory.Data[i];
 13185  102C  0020               	movlb	0	; select bank0
 13186  102D  0821               	movf	Flash_Memory_Write@i,w
 13187  102E  3E20               	addlw	_Memory& (0+255)
 13188  102F  0086               	movwf	6
 13189  1030  3002               	movlw	2	; select bank4/5
 13190  1031  0087               	movwf	7
 13191  1032  0801               	movf	1,w
 13192  1033  0023               	movlb	3	; select bank3
 13193  1034  0093               	movwf	19	;volatile
 13194                           
 13195                           ;MCU_B1.c: 1036: Flash_Memory_Unlock();
 13196  1035  319A  224C  3190   	fcall	_Flash_Memory_Unlock
 13197  1038  3001               	movlw	1
 13198  1039  0020               	movlb	0	; select bank0
 13199  103A  00A0               	movwf	??_Flash_Memory_Write
 13200  103B  0820               	movf	??_Flash_Memory_Write,w
 13201  103C  07A1               	addwf	Flash_Memory_Write@i,f
 13202  103D  3020               	movlw	32
 13203  103E  0221               	subwf	Flash_Memory_Write@i,w
 13204  103F  1C03               	skipc
 13205  1040  2829               	goto	l7209
 13206  1041                     l1306:	
 13207                           
 13208                           ;MCU_B1.c: 1037: }
 13209                           ;MCU_B1.c: 1038: LWLO = 0;
 13210  1041  0023               	movlb	3	; select bank3
 13211  1042  1295               	bcf	21,5	;volatile
 13212                           
 13213                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 13214  1043  319A  224C         	fcall	_Flash_Memory_Unlock
 13215                           
 13216                           ;MCU_B1.c: 1040: WREN = 0;
 13217  1045  0023               	movlb	3	; select bank3
 13218  1046  1115               	bcf	21,2	;volatile
 13219  1047  0008               	return
 13220  1048                     __end_of_Flash_Memory_Write:	
 13221                           
 13222                           	psect	text84
 13223  1A4C                     __ptext84:	
 13224 ;; *************** function _Flash_Memory_Unlock *****************
 13225 ;; Defined at:
 13226 ;;		line 1004 in file "../src/MCU_B1.c"
 13227 ;; Parameters:    Size  Location     Type
 13228 ;;		None
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;		None
 13231 ;; Return value:  Size  Location     Type
 13232 ;;		None               void
 13233 ;; Registers used:
 13234 ;;		wreg
 13235 ;; Tracked objects:
 13236 ;;		On entry : 0/0
 13237 ;;		On exit  : 0/0
 13238 ;;		Unchanged: 0/0
 13239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;Total ram usage:        0 bytes
 13245 ;; Hardware stack levels used:    1
 13246 ;; Hardware stack levels required when called:    5
 13247 ;; This function calls:
 13248 ;;		Nothing
 13249 ;; This function is called by:
 13250 ;;		_Flash_Memory_Write
 13251 ;;		_Flash_Memory_Erasing
 13252 ;; This function uses a non-reentrant model
 13253 ;;
 13254                           
 13255                           
 13256                           ;psect for function _Flash_Memory_Unlock
 13257  1A4C                     _Flash_Memory_Unlock:	
 13258                           
 13259                           ;MCU_B1.c: 1005: PMCON2 = 0x55;
 13260                           
 13261                           ;incstack = 0
 13262                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13263  1A4C  3055               	movlw	85
 13264  1A4D  0023               	movlb	3	; select bank3
 13265  1A4E  0096               	movwf	22	;volatile
 13266                           
 13267                           ;MCU_B1.c: 1006: PMCON2 = 0xaa;
 13268  1A4F  30AA               	movlw	170
 13269  1A50  0096               	movwf	22	;volatile
 13270                           
 13271                           ;MCU_B1.c: 1007: WR = 1;
 13272  1A51  1495               	bsf	21,1	;volatile
 13273                           
 13274                           ;MCU_B1.c: 1008: __nop();
 13275  1A52  0000               	nop
 13276                           
 13277                           ;MCU_B1.c: 1009: __nop();
 13278  1A53  0000               	nop
 13279  1A54  0008               	return
 13280  1A55                     __end_of_Flash_Memory_Unlock:	
 13281                           
 13282                           	psect	text85
 13283  1D84                     __ptext85:	
 13284 ;; *************** function _Flash_Memory_Read *****************
 13285 ;; Defined at:
 13286 ;;		line 1013 in file "../src/MCU_B1.c"
 13287 ;; Parameters:    Size  Location     Type
 13288 ;;  address         1    wreg     unsigned char 
 13289 ;; Auto vars:     Size  Location     Type
 13290 ;;  address         1    2[BANK0 ] unsigned char 
 13291 ;;  ret             1    3[BANK0 ] unsigned char 
 13292 ;;  i               1    1[BANK0 ] unsigned char 
 13293 ;; Return value:  Size  Location     Type
 13294 ;;                  1    wreg      unsigned char 
 13295 ;; Registers used:
 13296 ;;		wreg, status,2
 13297 ;; Tracked objects:
 13298 ;;		On entry : 0/0
 13299 ;;		On exit  : 0/0
 13300 ;;		Unchanged: 0/0
 13301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;Total ram usage:        4 bytes
 13307 ;; Hardware stack levels used:    1
 13308 ;; Hardware stack levels required when called:    5
 13309 ;; This function calls:
 13310 ;;		Nothing
 13311 ;; This function is called by:
 13312 ;;		_Flash_Memory_Initialization
 13313 ;;		_Flash_Memory_Modify
 13314 ;; This function uses a non-reentrant model
 13315 ;;
 13316                           
 13317                           
 13318                           ;psect for function _Flash_Memory_Read
 13319  1D84                     _Flash_Memory_Read:	
 13320                           
 13321                           ;incstack = 0
 13322                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13323                           ;Flash_Memory_Read@address stored from wreg
 13324  1D84  0020               	movlb	0	; select bank0
 13325  1D85  00A2               	movwf	Flash_Memory_Read@address
 13326                           
 13327                           ;MCU_B1.c: 1014: char i = 0, ret = 0;
 13328  1D86  01A1               	clrf	Flash_Memory_Read@i
 13329  1D87  01A3               	clrf	Flash_Memory_Read@ret
 13330                           
 13331                           ;MCU_B1.c: 1015: PMADRH = 0x30;
 13332  1D88  3030               	movlw	48
 13333  1D89  0023               	movlb	3	; select bank3
 13334  1D8A  0092               	movwf	18	;volatile
 13335                           
 13336                           ;MCU_B1.c: 1016: PMADRL = address;
 13337  1D8B  0020               	movlb	0	; select bank0
 13338  1D8C  0822               	movf	Flash_Memory_Read@address,w
 13339  1D8D  0023               	movlb	3	; select bank3
 13340  1D8E  0091               	movwf	17	;volatile
 13341                           
 13342                           ;MCU_B1.c: 1017: CFGS = 0;
 13343  1D8F  1315               	bcf	21,6	;volatile
 13344                           
 13345                           ;MCU_B1.c: 1018: RD = 1;
 13346  1D90  1415               	bsf	21,0	;volatile
 13347                           
 13348                           ;MCU_B1.c: 1019: i = PMDATH;
 13349  1D91  0814               	movf	20,w	;volatile
 13350  1D92  0020               	movlb	0	; select bank0
 13351  1D93  00A0               	movwf	??_Flash_Memory_Read
 13352  1D94  0820               	movf	??_Flash_Memory_Read,w
 13353  1D95  00A1               	movwf	Flash_Memory_Read@i
 13354                           
 13355                           ;MCU_B1.c: 1020: ret = PMDATL;
 13356  1D96  0023               	movlb	3	; select bank3
 13357  1D97  0813               	movf	19,w	;volatile
 13358  1D98  0020               	movlb	0	; select bank0
 13359  1D99  00A0               	movwf	??_Flash_Memory_Read
 13360  1D9A  0820               	movf	??_Flash_Memory_Read,w
 13361  1D9B  00A3               	movwf	Flash_Memory_Read@ret
 13362                           
 13363                           ;MCU_B1.c: 1021: return ret;
 13364  1D9C  0823               	movf	Flash_Memory_Read@ret,w
 13365  1D9D  0008               	return
 13366  1D9E                     __end_of_Flash_Memory_Read:	
 13367                           
 13368                           	psect	text86
 13369  0636                     __ptext86:	
 13370 ;; *************** function _Exception_Main *****************
 13371 ;; Defined at:
 13372 ;;		line 499 in file "../src/Main_B1.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;		None
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;  i               2   18[BANK0 ] int 
 13377 ;;  i               2   16[BANK0 ] int 
 13378 ;;  lights          1   21[BANK0 ] unsigned char 
 13379 ;;  error           1   20[BANK0 ] unsigned char 
 13380 ;;  count           1   15[BANK0 ] unsigned char 
 13381 ;;  status          1   14[BANK0 ] unsigned char 
 13382 ;; Return value:  Size  Location     Type
 13383 ;;		None               void
 13384 ;; Registers used:
 13385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/0
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;Total ram usage:        9 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    7
 13398 ;; This function calls:
 13399 ;;		_getDimmerLights_Line
 13400 ;;		_getDimmerLights_Status
 13401 ;;		_getMain_All_Error_Status
 13402 ;;		_getMain_All_LightsStatus
 13403 ;;		_setBuz
 13404 ;;		_setDimmerLights_SwOff
 13405 ;;		_setLED
 13406 ;; This function is called by:
 13407 ;;		_main
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           
 13412                           ;psect for function _Exception_Main
 13413  0636                     _Exception_Main:	
 13414                           
 13415                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13416                           
 13417                           ;incstack = 0
 13418                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13419  0636  3000               	movlw	0
 13420  0637  3190  2048  3186   	fcall	_getMain_All_Error_Status
 13421  063A  0020               	movlb	0	; select bank0
 13422  063B  00AD               	movwf	??_Exception_Main
 13423  063C  082D               	movf	??_Exception_Main,w
 13424  063D  00B4               	movwf	Exception_Main@error
 13425                           
 13426                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13427  063E  01B5               	clrf	Exception_Main@lights
 13428  063F  01AF               	clrf	Exception_Main@count
 13429  0640  0AAF               	incf	Exception_Main@count,f
 13430                           
 13431                           ;Main_B1.c: 502: char status = 0;
 13432  0641  01AE               	clrf	Exception_Main@status
 13433                           
 13434                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13435  0642  0021               	movlb	1	; select bank1
 13436  0643  1DB9               	btfss	(_myMain^(0+128)+10),3
 13437  0644  2E54               	goto	l8443
 13438                           
 13439                           ;Main_B1.c: 505: if (error == 0) {
 13440  0645  0020               	movlb	0	; select bank0
 13441  0646  08B4               	movf	Exception_Main@error,f
 13442  0647  1D03               	skipz
 13443  0648  0008               	return
 13444                           
 13445                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13446  0649  0021               	movlb	1	; select bank1
 13447  064A  11B9               	bcf	(_myMain^(0+128)+10),3
 13448                           
 13449                           ;Main_B1.c: 509: setLED(99, 10);
 13450  064B  300A               	movlw	10
 13451  064C  0020               	movlb	0	; select bank0
 13452  064D  00AD               	movwf	??_Exception_Main
 13453  064E  082D               	movf	??_Exception_Main,w
 13454  064F  00A2               	movwf	setLED@command
 13455  0650  3063               	movlw	99
 13456  0651  3191  2159         	fcall	_setLED
 13457                           
 13458                           ;Main_B1.c: 522: }
 13459                           ;Main_B1.c: 523: } else {
 13460  0653  0008               	return
 13461  0654                     l8443:	
 13462                           
 13463                           ;Main_B1.c: 524: if (error != 0) {
 13464  0654  0020               	movlb	0	; select bank0
 13465  0655  0834               	movf	Exception_Main@error,w
 13466  0656  1903               	btfsc	3,2
 13467  0657  0008               	return
 13468                           
 13469                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13470  0658  0021               	movlb	1	; select bank1
 13471  0659  15B9               	bsf	(_myMain^(0+128)+10),3
 13472                           
 13473                           ;Main_B1.c: 527: setLED(99, 11);
 13474  065A  300B               	movlw	11
 13475  065B  0020               	movlb	0	; select bank0
 13476  065C  00AD               	movwf	??_Exception_Main
 13477  065D  082D               	movf	??_Exception_Main,w
 13478  065E  00A2               	movwf	setLED@command
 13479  065F  3063               	movlw	99
 13480  0660  3191  2159  3186   	fcall	_setLED
 13481                           
 13482                           ;Main_B1.c: 538: switch (error) {
 13483  0663  2F00               	goto	l8491
 13484  0664                     l8449:	
 13485                           ;Main_B1.c: 539: case 2:
 13486                           
 13487                           
 13488                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13489  0664  319A  2255  3186   	fcall	_getMain_All_LightsStatus
 13490  0667  3A01               	xorlw	1
 13491  0668  1D03               	skipz
 13492  0669  2E73               	goto	l8453
 13493                           
 13494                           ;Main_B1.c: 547: setBuz(10, 300);
 13495  066A  302C               	movlw	44
 13496  066B  0020               	movlb	0	; select bank0
 13497  066C  00A9               	movwf	setBuz@time
 13498  066D  3001               	movlw	1
 13499  066E  00AA               	movwf	setBuz@time+1
 13500  066F  300A               	movlw	10
 13501  0670  3194  248F  3186   	fcall	_setBuz
 13502  0673                     l8453:	
 13503                           
 13504                           ;Main_B1.c: 548: }
 13505                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13506  0673  0020               	movlb	0	; select bank0
 13507  0674  01B0               	clrf	Exception_Main@i
 13508  0675  01B1               	clrf	Exception_Main@i+1
 13509  0676                     l8463:	
 13510  0676  0831               	movf	Exception_Main@i+1,w
 13511  0677  3A80               	xorlw	128
 13512  0678  00AD               	movwf	??_Exception_Main
 13513  0679  3080               	movlw	128
 13514  067A  022D               	subwf	??_Exception_Main,w
 13515  067B  1D03               	skipz
 13516  067C  2E7F               	goto	u8705
 13517  067D  082F               	movf	Exception_Main@count,w
 13518  067E  0230               	subwf	Exception_Main@i,w
 13519  067F                     u8705:	
 13520  067F  1803               	btfsc	3,0
 13521  0680  2EA1               	goto	u8700
 13522                           
 13523                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13524  0681  0020               	movlb	0	; select bank0
 13525  0682  0830               	movf	Exception_Main@i,w
 13526  0683  3E01               	addlw	1
 13527  0684  319B  2377  3186   	fcall	_getDimmerLights_Status
 13528  0687  3A01               	xorlw	1
 13529  0688  1D03               	skipz
 13530  0689  2E9B               	goto	l8461
 13531                           
 13532                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13533  068A  0021               	movlb	1	; select bank1
 13534  068B  084C               	movf	_DimmerLights^(0+128),w
 13535  068C  0086               	movwf	6
 13536  068D  3001               	movlw	1	; select bank2/3
 13537  068E  0087               	movwf	7
 13538  068F  1401               	bsf	1,0
 13539                           
 13540                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13541  0690  0A4C               	incf	_DimmerLights^(0+128),w
 13542  0691  0086               	movwf	6
 13543  0692  3001               	movlw	1	; select bank2/3
 13544  0693  0087               	movwf	7
 13545  0694  1001               	bcf	1,0
 13546                           
 13547                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13548  0695  0020               	movlb	0	; select bank0
 13549  0696  0830               	movf	Exception_Main@i,w
 13550  0697  3E01               	addlw	1
 13551  0698  3191  2120  3186   	fcall	_setDimmerLights_SwOff
 13552  069B                     l8461:	
 13553  069B  3001               	movlw	1
 13554  069C  0020               	movlb	0	; select bank0
 13555  069D  07B0               	addwf	Exception_Main@i,f
 13556  069E  3000               	movlw	0
 13557  069F  3DB1               	addwfc	Exception_Main@i+1,f
 13558  06A0  2E76               	goto	l8463
 13559  06A1                     u8700:	
 13560  06A1  0020               	movlb	0	; select bank0
 13561  06A2  0008               	return
 13562  06A3                     l8465:	
 13563                           ;Main_B1.c: 561: case 3:
 13564                           
 13565                           ;Main_B1.c: 556: }
 13566                           ;Main_B1.c: 557: }
 13567                           ;Main_B1.c: 560: break;
 13568                           
 13569                           
 13570                           ;Main_B1.c: 563: setBuz(5, 300);
 13571  06A3  302C               	movlw	44
 13572  06A4  0020               	movlb	0	; select bank0
 13573  06A5  00A9               	movwf	setBuz@time
 13574  06A6  3001               	movlw	1
 13575  06A7  00AA               	movwf	setBuz@time+1
 13576  06A8  3005               	movlw	5
 13577  06A9  3194  248F  3186   	fcall	_setBuz
 13578                           
 13579                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13580  06AC  319A  225F  3186   	fcall	_getDimmerLights_Line
 13581  06AF  0020               	movlb	0	; select bank0
 13582  06B0  00AD               	movwf	??_Exception_Main
 13583  06B1  082D               	movf	??_Exception_Main,w
 13584  06B2  00B5               	movwf	Exception_Main@lights
 13585                           
 13586                           ;Main_B1.c: 565: if (lights == 0) {
 13587  06B3  08B5               	movf	Exception_Main@lights,f
 13588  06B4  1D03               	skipz
 13589  06B5  2EE5               	goto	l8483
 13590                           
 13591                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13592  06B6  01B2               	clrf	Exception_Main@i_3975
 13593  06B7  01B3               	clrf	Exception_Main@i_3975+1
 13594  06B8                     l8481:	
 13595  06B8  0833               	movf	Exception_Main@i_3975+1,w
 13596  06B9  3A80               	xorlw	128
 13597  06BA  00AD               	movwf	??_Exception_Main
 13598  06BB  3080               	movlw	128
 13599  06BC  022D               	subwf	??_Exception_Main,w
 13600  06BD  1D03               	skipz
 13601  06BE  2EC1               	goto	u8735
 13602  06BF  082F               	movf	Exception_Main@count,w
 13603  06C0  0232               	subwf	Exception_Main@i_3975,w
 13604  06C1                     u8735:	
 13605  06C1  1803               	btfsc	3,0
 13606  06C2  2EE3               	goto	u8730
 13607                           
 13608                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13609  06C3  0020               	movlb	0	; select bank0
 13610  06C4  0832               	movf	Exception_Main@i_3975,w
 13611  06C5  3E01               	addlw	1
 13612  06C6  319B  2377  3186   	fcall	_getDimmerLights_Status
 13613  06C9  3A01               	xorlw	1
 13614  06CA  1D03               	skipz
 13615  06CB  2EDD               	goto	l8479
 13616                           
 13617                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13618  06CC  0021               	movlb	1	; select bank1
 13619  06CD  084C               	movf	_DimmerLights^(0+128),w
 13620  06CE  0086               	movwf	6
 13621  06CF  3001               	movlw	1	; select bank2/3
 13622  06D0  0087               	movwf	7
 13623  06D1  1401               	bsf	1,0
 13624                           
 13625                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13626  06D2  0A4C               	incf	_DimmerLights^(0+128),w
 13627  06D3  0086               	movwf	6
 13628  06D4  3001               	movlw	1	; select bank2/3
 13629  06D5  0087               	movwf	7
 13630  06D6  1001               	bcf	1,0
 13631                           
 13632                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13633  06D7  0020               	movlb	0	; select bank0
 13634  06D8  0832               	movf	Exception_Main@i_3975,w
 13635  06D9  3E01               	addlw	1
 13636  06DA  3191  2120  3186   	fcall	_setDimmerLights_SwOff
 13637  06DD                     l8479:	
 13638  06DD  3001               	movlw	1
 13639  06DE  0020               	movlb	0	; select bank0
 13640  06DF  07B2               	addwf	Exception_Main@i_3975,f
 13641  06E0  3000               	movlw	0
 13642  06E1  3DB3               	addwfc	Exception_Main@i_3975+1,f
 13643  06E2  2EB8               	goto	l8481
 13644  06E3                     u8730:	
 13645  06E3  0020               	movlb	0	; select bank0
 13646  06E4  0008               	return
 13647  06E5                     l8483:	
 13648                           ;Main_B1.c: 573: }
 13649                           ;Main_B1.c: 574: }
 13650                           ;Main_B1.c: 575: } else {
 13651                           
 13652                           
 13653                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13654  06E5  0020               	movlb	0	; select bank0
 13655  06E6  0835               	movf	Exception_Main@lights,w
 13656  06E7  319B  2377  3186   	fcall	_getDimmerLights_Status
 13657  06EA  3A01               	xorlw	1
 13658  06EB  1903               	btfsc	3,2
 13659  06EC  2EEF               	goto	l8485
 13660  06ED  0020               	movlb	0	; select bank0
 13661  06EE  0008               	return
 13662  06EF                     l8485:	
 13663                           
 13664                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13665  06EF  0021               	movlb	1	; select bank1
 13666  06F0  084C               	movf	_DimmerLights^(0+128),w
 13667  06F1  0086               	movwf	6
 13668  06F2  3001               	movlw	1	; select bank2/3
 13669  06F3  0087               	movwf	7
 13670  06F4  1401               	bsf	1,0
 13671                           
 13672                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13673  06F5  0A4C               	incf	_DimmerLights^(0+128),w
 13674  06F6  0086               	movwf	6
 13675  06F7  3001               	movlw	1	; select bank2/3
 13676  06F8  0087               	movwf	7
 13677  06F9  1001               	bcf	1,0
 13678                           
 13679                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13680  06FA  0020               	movlb	0	; select bank0
 13681  06FB  0835               	movf	Exception_Main@lights,w
 13682  06FC  3191  2120         	fcall	_setDimmerLights_SwOff
 13683  06FE  0020               	movlb	0	; select bank0
 13684  06FF  0008               	return
 13685  0700                     l8491:	
 13686                           ;Main_B1.c: 586: }
 13687                           
 13688                           ;Main_B1.c: 582: }
 13689                           ;Main_B1.c: 583: }
 13690                           ;Main_B1.c: 585: break;
 13691                           
 13692  0700  0020               	movlb	0	; select bank0
 13693  0701  0834               	movf	Exception_Main@error,w
 13694                           
 13695                           ; Switch size 1, requested type "space"
 13696                           ; Number of cases is 2, Range of values is 2 to 3
 13697                           ; switch strategies available:
 13698                           ; Name         Instructions Cycles
 13699                           ; simple_byte            7     4 (average)
 13700                           ; direct_byte           13     9 (fixed)
 13701                           ; jumptable            263     9 (fixed)
 13702                           ;	Chosen strategy is simple_byte
 13703  0702  3A02               	xorlw	2	; case 2
 13704  0703  1903               	skipnz
 13705  0704  2E64               	goto	l8449
 13706  0705  3A01               	xorlw	1	; case 3
 13707  0706  1903               	skipnz
 13708  0707  2EA3               	goto	l8465
 13709  0708  2F0A               	goto	l1550
 13710  0709  0008               	return
 13711  070A                     l1550:	
 13712  070A  0008               	return
 13713  070B                     __end_of_Exception_Main:	
 13714                           
 13715                           	psect	text87
 13716  1A5F                     __ptext87:	
 13717 ;; *************** function _getDimmerLights_Line *****************
 13718 ;; Defined at:
 13719 ;;		line 1174 in file "../src/Dimmer_B1.c"
 13720 ;; Parameters:    Size  Location     Type
 13721 ;;		None
 13722 ;; Auto vars:     Size  Location     Type
 13723 ;;  line            1    0[BANK0 ] unsigned char 
 13724 ;; Return value:  Size  Location     Type
 13725 ;;                  1    wreg      unsigned char 
 13726 ;; Registers used:
 13727 ;;		wreg, status,2
 13728 ;; Tracked objects:
 13729 ;;		On entry : 0/0
 13730 ;;		On exit  : 0/0
 13731 ;;		Unchanged: 0/0
 13732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;Total ram usage:        1 bytes
 13738 ;; Hardware stack levels used:    1
 13739 ;; Hardware stack levels required when called:    5
 13740 ;; This function calls:
 13741 ;;		Nothing
 13742 ;; This function is called by:
 13743 ;;		_Exception_Main
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747                           
 13748                           ;psect for function _getDimmerLights_Line
 13749  1A5F                     _getDimmerLights_Line:	
 13750                           
 13751                           ;Dimmer_B1.c: 1175: char line = 0;
 13752                           
 13753                           ;incstack = 0
 13754                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13755  1A5F  0020               	movlb	0	; select bank0
 13756  1A60  01A0               	clrf	getDimmerLights_Line@line
 13757                           
 13758                           ;Dimmer_B1.c: 1177: if (DimmerLights1.Line == 1) {
 13759  1A61  0022               	movlb	2	; select bank2
 13760  1A62  1CE1               	btfss	(_DimmerLights1^(0+256)+1),1
 13761  1A63  2A67               	goto	l7495
 13762                           
 13763                           ;Dimmer_B1.c: 1178: line = 1;
 13764  1A64  0020               	movlb	0	; select bank0
 13765  1A65  01A0               	clrf	getDimmerLights_Line@line
 13766  1A66  0AA0               	incf	getDimmerLights_Line@line,f
 13767  1A67                     l7495:	
 13768                           
 13769                           ;Dimmer_B1.c: 1179: }
 13770                           ;Dimmer_B1.c: 1191: return line;
 13771  1A67  0020               	movlb	0	; select bank0
 13772  1A68  0820               	movf	getDimmerLights_Line@line,w
 13773  1A69  0008               	return
 13774  1A6A                     __end_of_getDimmerLights_Line:	
 13775                           
 13776                           	psect	text88
 13777  1E9D                     __ptext88:	
 13778 ;; *************** function _DimmerLights_Main *****************
 13779 ;; Defined at:
 13780 ;;		line 837 in file "../src/Dimmer_B1.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;		None
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;		None
 13785 ;; Return value:  Size  Location     Type
 13786 ;;		None               void
 13787 ;; Registers used:
 13788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13789 ;; Tracked objects:
 13790 ;;		On entry : 0/0
 13791 ;;		On exit  : 0/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;Total ram usage:        0 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:   10
 13801 ;; This function calls:
 13802 ;;		_DimmerLights_DimmingFunction
 13803 ;;		_getLoad_OK
 13804 ;;		_getMain_All_Error_Status
 13805 ;;		_getMain_All_LightsStatus
 13806 ;;		_setDimmerLights_Main
 13807 ;; This function is called by:
 13808 ;;		_main
 13809 ;; This function uses a non-reentrant model
 13810 ;;
 13811                           
 13812                           
 13813                           ;psect for function _DimmerLights_Main
 13814  1E9D                     _DimmerLights_Main:	
 13815                           
 13816                           ;Dimmer_B1.c: 840: if (Dimmer.LoadGO == 1) {
 13817                           
 13818                           ;incstack = 0
 13819                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13820  1E9D  0022               	movlb	2	; select bank2
 13821  1E9E  1CAC               	btfss	_Dimmer^(0+256),1
 13822  1E9F  2EB5               	goto	l8047
 13823                           
 13824                           ;Dimmer_B1.c: 841: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13825  1EA0  319A  2222  319E   	fcall	_getLoad_OK
 13826  1EA3  3A01               	xorlw	1
 13827  1EA4  1903               	skipnz
 13828  1EA5  2EB3               	goto	l782
 13829  1EA6  3000               	movlw	0
 13830  1EA7  3190  2048  319E   	fcall	_getMain_All_Error_Status
 13831  1EAA  3800               	iorlw	0
 13832  1EAB  1D03               	skipz
 13833  1EAC  2EB3               	goto	l782
 13834  1EAD  319A  2255  319E   	fcall	_getMain_All_LightsStatus
 13835  1EB0  3800               	iorlw	0
 13836  1EB1  1D03               	skipz
 13837  1EB2  2EB5               	goto	l8047
 13838  1EB3                     l782:	
 13839                           
 13840                           ;Dimmer_B1.c: 842: Dimmer.LoadGO = 0;
 13841  1EB3  0022               	movlb	2	; select bank2
 13842  1EB4  10AC               	bcf	_Dimmer^(0+256),1
 13843  1EB5                     l8047:	
 13844                           
 13845                           ;Dimmer_B1.c: 843: }
 13846                           ;Dimmer_B1.c: 844: }
 13847                           ;Dimmer_B1.c: 849: setDimmerLights_Main(1);
 13848  1EB5  3001               	movlw	1
 13849  1EB6  3197  2795  319E   	fcall	_setDimmerLights_Main
 13850                           
 13851                           ;Dimmer_B1.c: 852: DimmerLights_DimmingFunction(1);
 13852  1EB9  3001               	movlw	1
 13853  1EBA  3193  230A         	fcall	_DimmerLights_DimmingFunction
 13854  1EBC  0008               	return
 13855  1EBD                     __end_of_DimmerLights_Main:	
 13856                           
 13857                           	psect	text89
 13858  1795                     __ptext89:	
 13859 ;; *************** function _setDimmerLights_Main *****************
 13860 ;; Defined at:
 13861 ;;		line 884 in file "../src/Dimmer_B1.c"
 13862 ;; Parameters:    Size  Location     Type
 13863 ;;  lights          1    wreg     unsigned char 
 13864 ;; Auto vars:     Size  Location     Type
 13865 ;;  lights          1    1[BANK1 ] unsigned char 
 13866 ;; Return value:  Size  Location     Type
 13867 ;;		None               void
 13868 ;; Registers used:
 13869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13870 ;; Tracked objects:
 13871 ;;		On entry : 0/0
 13872 ;;		On exit  : 0/0
 13873 ;;		Unchanged: 0/0
 13874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13879 ;;Total ram usage:        1 bytes
 13880 ;; Hardware stack levels used:    1
 13881 ;; Hardware stack levels required when called:    9
 13882 ;; This function calls:
 13883 ;;		_DimmerLights_SelectPointer
 13884 ;;		_getDimmerLights_Allow_Condition
 13885 ;;		_getMain_All_LightsStatus
 13886 ;;		_setDimmerLights_Dimming
 13887 ;;		_setDimmerLights_OnOff
 13888 ;; This function is called by:
 13889 ;;		_DimmerLights_Main
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           
 13894                           ;psect for function _setDimmerLights_Main
 13895  1795                     _setDimmerLights_Main:	
 13896                           
 13897                           ;incstack = 0
 13898                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13899                           ;setDimmerLights_Main@lights stored from wreg
 13900  1795  0021               	movlb	1	; select bank1
 13901  1796  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13902                           
 13903                           ;Dimmer_B1.c: 886: DimmerLights_SelectPointer(lights);
 13904  1797  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13905  1798  319A  228C  3197   	fcall	_DimmerLights_SelectPointer
 13906                           
 13907                           ;Dimmer_B1.c: 887: if (DimmerLights->Trigger == 1) {
 13908  179B  0021               	movlb	1	; select bank1
 13909  179C  084C               	movf	_DimmerLights^(0+128),w
 13910  179D  0086               	movwf	6
 13911  179E  3001               	movlw	1	; select bank2/3
 13912  179F  0087               	movwf	7
 13913  17A0  1C81               	btfss	1,1
 13914  17A1  2FC4               	goto	l7439
 13915                           
 13916                           ;Dimmer_B1.c: 888: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13917  17A2  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13918  17A3  319D  250F  3197   	fcall	_getDimmerLights_Allow_Condition
 13919  17A6  3800               	iorlw	0
 13920  17A7  1D03               	skipz
 13921  17A8  0008               	return
 13922                           
 13923                           ;Dimmer_B1.c: 889: DimmerLights->Trigger = 0;
 13924  17A9  0021               	movlb	1	; select bank1
 13925  17AA  084C               	movf	_DimmerLights^(0+128),w
 13926  17AB  0086               	movwf	6
 13927  17AC  3001               	movlw	1	; select bank2/3
 13928  17AD  0087               	movwf	7
 13929  17AE  1081               	bcf	1,1
 13930                           
 13931                           ;Dimmer_B1.c: 890: if (DimmerLights->Switch == 1) {
 13932  17AF  084C               	movf	_DimmerLights^(0+128),w
 13933  17B0  0086               	movwf	6
 13934  17B1  3001               	movlw	1	; select bank2/3
 13935  17B2  0087               	movwf	7
 13936  17B3  1D01               	btfss	1,2
 13937  17B4  2FBD               	goto	l7437
 13938                           
 13939                           ;Dimmer_B1.c: 891: setDimmerLights_OnOff(lights, 1);
 13940  17B5  0020               	movlb	0	; select bank0
 13941  17B6  01ED               	clrf	setDimmerLights_OnOff@command
 13942  17B7  0AED               	incf	setDimmerLights_OnOff@command,f
 13943  17B8  0021               	movlb	1	; select bank1
 13944  17B9  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13945  17BA  318F  273A         	fcall	_setDimmerLights_OnOff
 13946                           
 13947                           ;Dimmer_B1.c: 892: } else {
 13948  17BC  0008               	return
 13949  17BD                     l7437:	
 13950                           
 13951                           ;Dimmer_B1.c: 893: setDimmerLights_OnOff(lights, 0);
 13952  17BD  0020               	movlb	0	; select bank0
 13953  17BE  01ED               	clrf	setDimmerLights_OnOff@command
 13954  17BF  0021               	movlb	1	; select bank1
 13955  17C0  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13956  17C1  318F  273A         	fcall	_setDimmerLights_OnOff
 13957                           
 13958                           ;Dimmer_B1.c: 894: }
 13959                           ;Dimmer_B1.c: 895: }
 13960                           ;Dimmer_B1.c: 896: } else {
 13961  17C3  0008               	return
 13962  17C4                     l7439:	
 13963                           
 13964                           ;Dimmer_B1.c: 897: if (getMain_All_LightsStatus() == 1) {
 13965  17C4  319A  2255  3197   	fcall	_getMain_All_LightsStatus
 13966  17C7  3A01               	xorlw	1
 13967  17C8  1D03               	skipz
 13968  17C9  2FF3               	goto	l7451
 13969                           
 13970                           ;Dimmer_B1.c: 898: if (DimmerLights->DimmingTrigger == 1) {
 13971  17CA  0021               	movlb	1	; select bank1
 13972  17CB  084C               	movf	_DimmerLights^(0+128),w
 13973  17CC  0086               	movwf	6
 13974  17CD  3001               	movlw	1	; select bank2/3
 13975  17CE  0087               	movwf	7
 13976  17CF  1E01               	btfss	1,4
 13977  17D0  0008               	return
 13978                           
 13979                           ;Dimmer_B1.c: 899: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13980  17D1  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13981  17D2  319D  250F  3197   	fcall	_getDimmerLights_Allow_Condition
 13982  17D5  3800               	iorlw	0
 13983  17D6  1D03               	skipz
 13984  17D7  0008               	return
 13985                           
 13986                           ;Dimmer_B1.c: 900: DimmerLights->DimmingTrigger = 0;
 13987  17D8  0021               	movlb	1	; select bank1
 13988  17D9  084C               	movf	_DimmerLights^(0+128),w
 13989  17DA  0086               	movwf	6
 13990  17DB  3001               	movlw	1	; select bank2/3
 13991  17DC  0087               	movwf	7
 13992  17DD  1201               	bcf	1,4
 13993                           
 13994                           ;Dimmer_B1.c: 901: if (DimmerLights->DimmingSwitch == 1) {
 13995  17DE  084C               	movf	_DimmerLights^(0+128),w
 13996  17DF  0086               	movwf	6
 13997  17E0  3001               	movlw	1	; select bank2/3
 13998  17E1  0087               	movwf	7
 13999  17E2  1E81               	btfss	1,5
 14000  17E3  2FEC               	goto	l7449
 14001                           
 14002                           ;Dimmer_B1.c: 902: setDimmerLights_Dimming(lights, 1);
 14003  17E4  0020               	movlb	0	; select bank0
 14004  17E5  01EA               	clrf	setDimmerLights_Dimming@status
 14005  17E6  0AEA               	incf	setDimmerLights_Dimming@status,f
 14006  17E7  0021               	movlb	1	; select bank1
 14007  17E8  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 14008  17E9  3194  243B         	fcall	_setDimmerLights_Dimming
 14009                           
 14010                           ;Dimmer_B1.c: 903: } else {
 14011  17EB  0008               	return
 14012  17EC                     l7449:	
 14013                           
 14014                           ;Dimmer_B1.c: 904: setDimmerLights_Dimming(lights, 0);
 14015  17EC  0020               	movlb	0	; select bank0
 14016  17ED  01EA               	clrf	setDimmerLights_Dimming@status
 14017  17EE  0021               	movlb	1	; select bank1
 14018  17EF  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 14019  17F0  3194  243B         	fcall	_setDimmerLights_Dimming
 14020                           
 14021                           ;Dimmer_B1.c: 905: }
 14022                           ;Dimmer_B1.c: 906: }
 14023                           ;Dimmer_B1.c: 907: }
 14024                           ;Dimmer_B1.c: 908: } else {
 14025  17F2  0008               	return
 14026  17F3                     l7451:	
 14027                           
 14028                           ;Dimmer_B1.c: 909: if (DimmerLights->DimmingTrigger == 1) {
 14029  17F3  0021               	movlb	1	; select bank1
 14030  17F4  084C               	movf	_DimmerLights^(0+128),w
 14031  17F5  0086               	movwf	6
 14032  17F6  3001               	movlw	1	; select bank2/3
 14033  17F7  0087               	movwf	7
 14034  17F8  1E01               	btfss	1,4
 14035  17F9  0008               	return
 14036                           
 14037                           ;Dimmer_B1.c: 910: DimmerLights->DimmingTrigger = 0;
 14038  17FA  084C               	movf	_DimmerLights^(0+128),w
 14039  17FB  0086               	movwf	6
 14040  17FC  3001               	movlw	1	; select bank2/3
 14041  17FD  0087               	movwf	7
 14042  17FE  1201               	bcf	1,4
 14043  17FF  0008               	return
 14044  1800                     __end_of_setDimmerLights_Main:	
 14045                           
 14046                           	psect	text90
 14047  0F3A                     __ptext90:	
 14048 ;; *************** function _setDimmerLights_OnOff *****************
 14049 ;; Defined at:
 14050 ;;		line 961 in file "../src/Dimmer_B1.c"
 14051 ;; Parameters:    Size  Location     Type
 14052 ;;  lights          1    wreg     unsigned char 
 14053 ;;  command         1   77[BANK0 ] unsigned char 
 14054 ;; Auto vars:     Size  Location     Type
 14055 ;;  lights          1    0[BANK1 ] unsigned char 
 14056 ;; Return value:  Size  Location     Type
 14057 ;;		None               void
 14058 ;; Registers used:
 14059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14060 ;; Tracked objects:
 14061 ;;		On entry : 0/0
 14062 ;;		On exit  : 0/0
 14063 ;;		Unchanged: 0/0
 14064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14065 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14069 ;;Total ram usage:        4 bytes
 14070 ;; Hardware stack levels used:    1
 14071 ;; Hardware stack levels required when called:    8
 14072 ;; This function calls:
 14073 ;;		_getCmd_Status
 14074 ;;		_getDelayOff_GO
 14075 ;;		_getDimmerLights_PercentToValue
 14076 ;;		_getMain_All_LightsStatus
 14077 ;;		_setCmd_Status
 14078 ;;		_setDelayOff_GO
 14079 ;;		_setDimmerIntr_ControlStatus
 14080 ;;		_setDimmerIntr_DimmingValue
 14081 ;;		_setDimmerIntr_Dimming_RF
 14082 ;;		_setDimmerIntr_MaxmumValue
 14083 ;;		_setDimmerLights_DimmingClose
 14084 ;;		_setDimmerLights_Line
 14085 ;;		_setLED
 14086 ;;		_setProductData
 14087 ;;		_setRF_DimmerLights
 14088 ;;		_setTxData
 14089 ;; This function is called by:
 14090 ;;		_setDimmerLights_Main
 14091 ;; This function uses a non-reentrant model
 14092 ;;
 14093                           
 14094                           
 14095                           ;psect for function _setDimmerLights_OnOff
 14096  0F3A                     _setDimmerLights_OnOff:	
 14097                           
 14098                           ;incstack = 0
 14099                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14100                           ;setDimmerLights_OnOff@lights stored from wreg
 14101  0F3A  0021               	movlb	1	; select bank1
 14102  0F3B  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 14103                           
 14104                           ;Dimmer_B1.c: 963: if (command == 1) {
 14105  0F3C  0020               	movlb	0	; select bank0
 14106  0F3D  086D               	movf	setDimmerLights_OnOff@command,w
 14107  0F3E  3A01               	xorlw	1
 14108  0F3F  1D03               	skipz
 14109  0F40  2F9F               	goto	l7101
 14110                           
 14111                           ;Dimmer_B1.c: 965: setDimmerIntr_ControlStatus(lights, 1);
 14112  0F41  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14113  0F42  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 14114  0F43  0021               	movlb	1	; select bank1
 14115  0F44  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14116  0F45  319D  253B  318F   	fcall	_setDimmerIntr_ControlStatus
 14117                           
 14118                           ;Dimmer_B1.c: 968: Dimmer.Load_Status = 1;
 14119  0F48  0022               	movlb	2	; select bank2
 14120  0F49  152C               	bsf	_Dimmer^(0+256),2
 14121                           
 14122                           ;Dimmer_B1.c: 969: setDimmerLights_Line(lights);
 14123  0F4A  0021               	movlb	1	; select bank1
 14124  0F4B  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14125  0F4C  319B  2388  318F   	fcall	_setDimmerLights_Line
 14126                           
 14127                           ;Dimmer_B1.c: 975: setLED(lights, 0);
 14128  0F4F  0020               	movlb	0	; select bank0
 14129  0F50  01A2               	clrf	setLED@command
 14130  0F51  0021               	movlb	1	; select bank1
 14131  0F52  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14132  0F53  3191  2159  318F   	fcall	_setLED
 14133                           
 14134                           ;Dimmer_B1.c: 976: ;;
 14135                           ;Dimmer_B1.c: 996: if (DimmerLights->DimmingRun == 1) {
 14136  0F56  0021               	movlb	1	; select bank1
 14137  0F57  0A4C               	incf	_DimmerLights^(0+128),w
 14138  0F58  0086               	movwf	6
 14139  0F59  3001               	movlw	1	; select bank2/3
 14140  0F5A  0087               	movwf	7
 14141  0F5B  1F01               	btfss	1,6
 14142  0F5C  2F81               	goto	l7093
 14143                           
 14144                           ;Dimmer_B1.c: 997: DimmerLights->DimmingRun = 0;
 14145  0F5D  0A4C               	incf	_DimmerLights^(0+128),w
 14146  0F5E  0086               	movwf	6
 14147  0F5F  3001               	movlw	1	; select bank2/3
 14148  0F60  0087               	movwf	7
 14149  0F61  1301               	bcf	1,6
 14150                           
 14151                           ;Dimmer_B1.c: 998: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14152  0F62  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14153  0F63  3E14               	addlw	20
 14154  0F64  076E               	addwf	_product^(0+128),w
 14155  0F65  0020               	movlb	0	; select bank0
 14156  0F66  00EE               	movwf	??_setDimmerLights_OnOff
 14157  0F67  086E               	movf	??_setDimmerLights_OnOff,w
 14158  0F68  0086               	movwf	6
 14159  0F69  3002               	movlw	2	; select bank4/5
 14160  0F6A  0087               	movwf	7
 14161  0F6B  0801               	movf	1,w
 14162  0F6C  3196  2666  318F   	fcall	_getDimmerLights_PercentToValue
 14163  0F6F  0020               	movlb	0	; select bank0
 14164  0F70  00EF               	movwf	??_setDimmerLights_OnOff+1
 14165  0F71  086F               	movf	??_setDimmerLights_OnOff+1,w
 14166  0F72  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14167  0F73  0021               	movlb	1	; select bank1
 14168  0F74  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14169  0F75  319A  22A4  318F   	fcall	_setDimmerIntr_MaxmumValue
 14170                           
 14171                           ;Dimmer_B1.c: 999: setDimmerIntr_Dimming_RF(lights, 1);
 14172  0F78  0020               	movlb	0	; select bank0
 14173  0F79  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14174  0F7A  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14175  0F7B  0021               	movlb	1	; select bank1
 14176  0F7C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14177  0F7D  319D  2553  318F   	fcall	_setDimmerIntr_Dimming_RF
 14178                           
 14179                           ;Dimmer_B1.c: 1000: } else {
 14180  0F80  2F98               	goto	l7095
 14181  0F81                     l7093:	
 14182                           
 14183                           ;Dimmer_B1.c: 1002: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pr
      +                          oduct->Data[20 + lights]));
 14184  0F81  0021               	movlb	1	; select bank1
 14185  0F82  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14186  0F83  3E14               	addlw	20
 14187  0F84  076E               	addwf	_product^(0+128),w
 14188  0F85  0020               	movlb	0	; select bank0
 14189  0F86  00EE               	movwf	??_setDimmerLights_OnOff
 14190  0F87  086E               	movf	??_setDimmerLights_OnOff,w
 14191  0F88  0086               	movwf	6
 14192  0F89  3002               	movlw	2	; select bank4/5
 14193  0F8A  0087               	movwf	7
 14194  0F8B  0801               	movf	1,w
 14195  0F8C  3196  2666  318F   	fcall	_getDimmerLights_PercentToValue
 14196  0F8F  0020               	movlb	0	; select bank0
 14197  0F90  00EF               	movwf	??_setDimmerLights_OnOff+1
 14198  0F91  086F               	movf	??_setDimmerLights_OnOff+1,w
 14199  0F92  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14200  0F93  0021               	movlb	1	; select bank1
 14201  0F94  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14202  0F95  319A  22B0  318F   	fcall	_setDimmerIntr_DimmingValue
 14203  0F98                     l7095:	
 14204                           
 14205                           ;Dimmer_B1.c: 1008: }
 14206                           ;Dimmer_B1.c: 1010: if (lights == 1) {
 14207  0F98  0021               	movlb	1	; select bank1
 14208  0F99  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14209  0F9A  3A01               	xorlw	1
 14210  0F9B  1D03               	skipz
 14211  0F9C  2FCE               	goto	l7115
 14212                           
 14213                           ;Dimmer_B1.c: 1012: DimmerIntr1.TuneGO = 1;
 14214  0F9D  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14215                           
 14216                           ;Dimmer_B1.c: 1018: }
 14217                           ;Dimmer_B1.c: 1024: } else if (command == 0) {
 14218                           
 14219                           ;Dimmer_B1.c: 1014: } else if (lights == 2) {
 14220  0F9E  2FCE               	goto	l7115
 14221  0F9F                     l7101:	
 14222  0F9F  0020               	movlb	0	; select bank0
 14223  0FA0  08ED               	movf	setDimmerLights_OnOff@command,f
 14224  0FA1  1D03               	skipz
 14225  0FA2  2FCE               	goto	l7115
 14226                           
 14227                           ;Dimmer_B1.c: 1026: setDimmerIntr_ControlStatus(lights, 0);
 14228  0FA3  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14229  0FA4  0021               	movlb	1	; select bank1
 14230  0FA5  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14231  0FA6  319D  253B  318F   	fcall	_setDimmerIntr_ControlStatus
 14232                           
 14233                           ;Dimmer_B1.c: 1028: Dimmer.Load_Status = 0;
 14234  0FA9  0022               	movlb	2	; select bank2
 14235  0FAA  112C               	bcf	_Dimmer^(0+256),2
 14236                           
 14237                           ;Dimmer_B1.c: 1029: setDimmerLights_Line(0);
 14238  0FAB  3000               	movlw	0
 14239  0FAC  319B  2388  318F   	fcall	_setDimmerLights_Line
 14240                           
 14241                           ;Dimmer_B1.c: 1033: if (getDelayOff_GO(lights) == 1) {
 14242  0FAF  0021               	movlb	1	; select bank1
 14243  0FB0  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14244  0FB1  319B  2399  318F   	fcall	_getDelayOff_GO
 14245  0FB4  3A01               	xorlw	1
 14246  0FB5  1D03               	skipz
 14247  0FB6  2FBF               	goto	l822
 14248                           
 14249                           ;Dimmer_B1.c: 1034: setDelayOff_GO(lights, 0, 0);
 14250  0FB7  0020               	movlb	0	; select bank0
 14251  0FB8  01E5               	clrf	setDelayOff_GO@command
 14252  0FB9  01E6               	clrf	setDelayOff_GO@value
 14253  0FBA  0021               	movlb	1	; select bank1
 14254  0FBB  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14255  0FBC  318B  2376  318F   	fcall	_setDelayOff_GO
 14256  0FBF                     l822:	
 14257                           
 14258                           ;Dimmer_B1.c: 1035: }
 14259                           ;Dimmer_B1.c: 1040: setLED(lights, 1);
 14260  0FBF  0020               	movlb	0	; select bank0
 14261  0FC0  01A2               	clrf	setLED@command
 14262  0FC1  0AA2               	incf	setLED@command,f
 14263  0FC2  0021               	movlb	1	; select bank1
 14264  0FC3  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14265  0FC4  3191  2159  318F   	fcall	_setLED
 14266                           
 14267                           ;Dimmer_B1.c: 1041: ;;
 14268                           ;Dimmer_B1.c: 1045: if (lights == 1) {
 14269  0FC7  0021               	movlb	1	; select bank1
 14270  0FC8  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14271  0FC9  3A01               	xorlw	1
 14272  0FCA  1D03               	skipz
 14273  0FCB  2FCE               	goto	l7115
 14274                           
 14275                           ;Dimmer_B1.c: 1046: RB1 = 0;
 14276  0FCC  0020               	movlb	0	; select bank0
 14277  0FCD  108D               	bcf	13,1	;volatile
 14278  0FCE                     l7115:	
 14279                           
 14280                           ;Dimmer_B1.c: 1048: }
 14281                           ;Dimmer_B1.c: 1059: }
 14282                           ;Dimmer_B1.c: 1061: setDimmerLights_DimmingClose();
 14283  0FCE  3199  21FB  318F   	fcall	_setDimmerLights_DimmingClose
 14284                           
 14285                           ;Dimmer_B1.c: 1063: setRF_DimmerLights(lights, command);
 14286  0FD1  0020               	movlb	0	; select bank0
 14287  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 14288  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 14289  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 14290  0FD5  00E5               	movwf	setRF_DimmerLights@on
 14291  0FD6  0021               	movlb	1	; select bank1
 14292  0FD7  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14293  0FD8  3197  2730  318F   	fcall	_setRF_DimmerLights
 14294                           
 14295                           ;Dimmer_B1.c: 1065: if (getCmd_Status(1) == 1) {
 14296  0FDB  3001               	movlw	1
 14297  0FDC  319B  23EE  318F   	fcall	_getCmd_Status
 14298  0FDF  3A01               	xorlw	1
 14299  0FE0  1D03               	skipz
 14300  0FE1  2FFD               	goto	l7131
 14301                           
 14302                           ;Dimmer_B1.c: 1066: if (getMain_All_LightsStatus() == 0) {
 14303  0FE2  319A  2255  318F   	fcall	_getMain_All_LightsStatus
 14304  0FE5  3800               	iorlw	0
 14305  0FE6  1D03               	skipz
 14306  0FE7  0008               	return
 14307                           
 14308                           ;Dimmer_B1.c: 1067: setCmd_Status(1, 0);
 14309  0FE8  0020               	movlb	0	; select bank0
 14310  0FE9  01A0               	clrf	setCmd_Status@cmd
 14311  0FEA  3001               	movlw	1
 14312  0FEB  319D  256B  318F   	fcall	_setCmd_Status
 14313                           
 14314                           ;Dimmer_B1.c: 1068: setProductData(11, 0);
 14315  0FEE  0020               	movlb	0	; select bank0
 14316  0FEF  01E2               	clrf	setProductData@value
 14317  0FF0  300B               	movlw	11
 14318  0FF1  319A  2298  318F   	fcall	_setProductData
 14319                           
 14320                           ;Dimmer_B1.c: 1069: setProductData(17, 0);
 14321  0FF4  0020               	movlb	0	; select bank0
 14322  0FF5  01E2               	clrf	setProductData@value
 14323  0FF6  3011               	movlw	17
 14324  0FF7  319A  2298  318F   	fcall	_setProductData
 14325                           
 14326                           ;Dimmer_B1.c: 1070: setTxData();
 14327  0FFA  318E  267F         	fcall	_setTxData
 14328                           
 14329                           ;Dimmer_B1.c: 1071: }
 14330                           ;Dimmer_B1.c: 1072: } else {
 14331  0FFC  0008               	return
 14332  0FFD                     l7131:	
 14333                           
 14334                           ;Dimmer_B1.c: 1073: setTxData();
 14335  0FFD  318E  267F         	fcall	_setTxData
 14336  0FFF  0008               	return
 14337  1000                     __end_of_setDimmerLights_OnOff:	
 14338                           
 14339                           	psect	text91
 14340  1159                     __ptext91:	
 14341 ;; *************** function _setLED *****************
 14342 ;; Defined at:
 14343 ;;		line 81 in file "../src/LED_B1.c"
 14344 ;; Parameters:    Size  Location     Type
 14345 ;;  led             1    wreg     unsigned char 
 14346 ;;  command         1    2[BANK0 ] unsigned char 
 14347 ;; Auto vars:     Size  Location     Type
 14348 ;;  led             1    3[BANK0 ] unsigned char 
 14349 ;; Return value:  Size  Location     Type
 14350 ;;		None               void
 14351 ;; Registers used:
 14352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14353 ;; Tracked objects:
 14354 ;;		On entry : 0/0
 14355 ;;		On exit  : 0/0
 14356 ;;		Unchanged: 0/0
 14357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14358 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14361 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14362 ;;Total ram usage:        2 bytes
 14363 ;; Hardware stack levels used:    1
 14364 ;; Hardware stack levels required when called:    6
 14365 ;; This function calls:
 14366 ;;		_LedPointSelect
 14367 ;; This function is called by:
 14368 ;;		_setDimmerLights_OnOff
 14369 ;;		_setLED_Initialization
 14370 ;;		_Exception_Main
 14371 ;;		_setSw_Initialization
 14372 ;; This function uses a non-reentrant model
 14373 ;;
 14374                           
 14375                           
 14376                           ;psect for function _setLED
 14377  1159                     _setLED:	
 14378                           
 14379                           ;incstack = 0
 14380                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14381                           ;setLED@led stored from wreg
 14382  1159  0020               	movlb	0	; select bank0
 14383  115A  00A3               	movwf	setLED@led
 14384                           
 14385                           ;LED_B1.c: 82: LedPointSelect(led);
 14386  115B  0823               	movf	setLED@led,w
 14387  115C  319A  22BC  3191   	fcall	_LedPointSelect
 14388                           
 14389                           ;LED_B1.c: 83: if (command == 0) {
 14390  115F  0020               	movlb	0	; select bank0
 14391  1160  08A2               	movf	setLED@command,f
 14392  1161  1D03               	skipz
 14393  1162  2968               	goto	l6809
 14394                           
 14395                           ;LED_B1.c: 112: if (led == 99) {
 14396  1163  0823               	movf	setLED@led,w
 14397  1164  3A63               	xorlw	99
 14398  1165  1D03               	skipz
 14399  1166  2968               	goto	l6809
 14400                           
 14401                           ;LED_B1.c: 116: RB5 = 1;
 14402  1167  168D               	bsf	13,5	;volatile
 14403  1168                     l6809:	
 14404                           
 14405                           ;LED_B1.c: 118: }
 14406                           ;LED_B1.c: 120: }
 14407                           ;LED_B1.c: 121: if (command == 1) {
 14408  1168  0822               	movf	setLED@command,w
 14409  1169  3A01               	xorlw	1
 14410  116A  1D03               	skipz
 14411  116B  2971               	goto	l6815
 14412                           
 14413                           ;LED_B1.c: 150: if (led == 99) {
 14414  116C  0823               	movf	setLED@led,w
 14415  116D  3A63               	xorlw	99
 14416  116E  1D03               	skipz
 14417  116F  2971               	goto	l6815
 14418                           
 14419                           ;LED_B1.c: 154: RB5 = 0;
 14420  1170  128D               	bcf	13,5	;volatile
 14421  1171                     l6815:	
 14422                           
 14423                           ;LED_B1.c: 156: }
 14424                           ;LED_B1.c: 158: }
 14425                           ;LED_B1.c: 159: if (command == 10) {
 14426  1171  0822               	movf	setLED@command,w
 14427  1172  3A0A               	xorlw	10
 14428  1173  1D03               	skipz
 14429  1174  2987               	goto	l6823
 14430                           
 14431                           ;LED_B1.c: 160: LED->GO = 0;
 14432  1175  0021               	movlb	1	; select bank1
 14433  1176  084D               	movf	_LED^(0+128),w
 14434  1177  0086               	movwf	6
 14435  1178  3001               	movlw	1	; select bank2/3
 14436  1179  0087               	movwf	7
 14437  117A  1081               	bcf	1,1
 14438                           
 14439                           ;LED_B1.c: 161: LED->Time = 0;
 14440  117B  0A4D               	incf	_LED^(0+128),w
 14441  117C  0086               	movwf	6
 14442  117D  3001               	movlw	1	; select bank2/3
 14443  117E  0087               	movwf	7
 14444  117F  3000               	movlw	0
 14445  1180  3FC0               	movwi [0]fsr1
 14446  1181  3FC1               	movwi [1]fsr1
 14447                           
 14448                           ;LED_B1.c: 190: if (led == 99) {
 14449  1182  0020               	movlb	0	; select bank0
 14450  1183  0823               	movf	setLED@led,w
 14451  1184  3A63               	xorlw	99
 14452  1185  1903               	btfsc	3,2
 14453                           
 14454                           ;LED_B1.c: 194: RB5 = 1;
 14455  1186  168D               	bsf	13,5	;volatile
 14456  1187                     l6823:	
 14457                           
 14458                           ;LED_B1.c: 196: }
 14459                           ;LED_B1.c: 198: }
 14460                           ;LED_B1.c: 199: if (command == 11) {
 14461  1187  0822               	movf	setLED@command,w
 14462  1188  3A0B               	xorlw	11
 14463  1189  1D03               	skipz
 14464  118A  0008               	return
 14465                           
 14466                           ;LED_B1.c: 200: LED->GO = 1;
 14467  118B  0021               	movlb	1	; select bank1
 14468  118C  084D               	movf	_LED^(0+128),w
 14469  118D  0086               	movwf	6
 14470  118E  3001               	movlw	1	; select bank2/3
 14471  118F  0087               	movwf	7
 14472  1190  1481               	bsf	1,1
 14473  1191  0008               	return
 14474  1192                     __end_of_setLED:	
 14475                           
 14476                           	psect	text92
 14477  1ABC                     __ptext92:	
 14478 ;; *************** function _LedPointSelect *****************
 14479 ;; Defined at:
 14480 ;;		line 7 in file "../src/LED_B1.c"
 14481 ;; Parameters:    Size  Location     Type
 14482 ;;  led             1    wreg     unsigned char 
 14483 ;; Auto vars:     Size  Location     Type
 14484 ;;  led             1    1[BANK0 ] unsigned char 
 14485 ;; Return value:  Size  Location     Type
 14486 ;;		None               void
 14487 ;; Registers used:
 14488 ;;		wreg
 14489 ;; Tracked objects:
 14490 ;;		On entry : 0/0
 14491 ;;		On exit  : 0/0
 14492 ;;		Unchanged: 0/0
 14493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;Total ram usage:        2 bytes
 14499 ;; Hardware stack levels used:    1
 14500 ;; Hardware stack levels required when called:    5
 14501 ;; This function calls:
 14502 ;;		Nothing
 14503 ;; This function is called by:
 14504 ;;		_setLED_Initialization
 14505 ;;		_setLED
 14506 ;;		_setLED_Main
 14507 ;; This function uses a non-reentrant model
 14508 ;;
 14509                           
 14510                           
 14511                           ;psect for function _LedPointSelect
 14512  1ABC                     _LedPointSelect:	
 14513                           
 14514                           ;incstack = 0
 14515                           ; Regs used in _LedPointSelect: [wreg]
 14516                           ;LedPointSelect@led stored from wreg
 14517  1ABC  0020               	movlb	0	; select bank0
 14518  1ABD  00A1               	movwf	LedPointSelect@led
 14519                           
 14520                           ;LED_B1.c: 24: if (led == 99) {
 14521  1ABE  0821               	movf	LedPointSelect@led,w
 14522  1ABF  3A63               	xorlw	99
 14523  1AC0  1D03               	skipz
 14524  1AC1  0008               	return
 14525                           
 14526                           ;LED_B1.c: 25: LED = &VarErrLED;
 14527  1AC2  3069               	movlw	_VarErrLED& (0+255)
 14528  1AC3  00A0               	movwf	??_LedPointSelect
 14529  1AC4  0820               	movf	??_LedPointSelect,w
 14530  1AC5  0021               	movlb	1	; select bank1
 14531  1AC6  00CD               	movwf	_LED^(0+128)
 14532  1AC7  0008               	return
 14533  1AC8                     __end_of_LedPointSelect:	
 14534                           
 14535                           	psect	text93
 14536  19FB                     __ptext93:	
 14537 ;; *************** function _setDimmerLights_DimmingClose *****************
 14538 ;; Defined at:
 14539 ;;		line 1842 in file "../src/Dimmer_B1.c"
 14540 ;; Parameters:    Size  Location     Type
 14541 ;;		None
 14542 ;; Auto vars:     Size  Location     Type
 14543 ;;		None
 14544 ;; Return value:  Size  Location     Type
 14545 ;;		None               void
 14546 ;; Registers used:
 14547 ;;		wreg, status,2, status,0, pclath, cstack
 14548 ;; Tracked objects:
 14549 ;;		On entry : 0/0
 14550 ;;		On exit  : 0/0
 14551 ;;		Unchanged: 0/0
 14552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14557 ;;Total ram usage:        0 bytes
 14558 ;; Hardware stack levels used:    1
 14559 ;; Hardware stack levels required when called:    6
 14560 ;; This function calls:
 14561 ;;		_setDimmerIntr_Dimming_Sw
 14562 ;; This function is called by:
 14563 ;;		_setDimmerLights_OnOff
 14564 ;; This function uses a non-reentrant model
 14565 ;;
 14566                           
 14567                           
 14568                           ;psect for function _setDimmerLights_DimmingClose
 14569  19FB                     _setDimmerLights_DimmingClose:	
 14570                           
 14571                           ;Dimmer_B1.c: 1844: setDimmerIntr_Dimming_Sw(1, 0);
 14572                           
 14573                           ;incstack = 0
 14574                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14575  19FB  0020               	movlb	0	; select bank0
 14576  19FC  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14577  19FD  3001               	movlw	1
 14578  19FE  319D  2525         	fcall	_setDimmerIntr_Dimming_Sw
 14579  1A00  0008               	return
 14580  1A01                     __end_of_setDimmerLights_DimmingClose:	
 14581                           
 14582                           	psect	text94
 14583  1D53                     __ptext94:	
 14584 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14585 ;; Defined at:
 14586 ;;		line 260 in file "../src/Dimmer_B1.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  lights          1    wreg     unsigned char 
 14589 ;;  command         1    0[BANK0 ] unsigned char 
 14590 ;; Auto vars:     Size  Location     Type
 14591 ;;  lights          1    2[BANK0 ] unsigned char 
 14592 ;; Return value:  Size  Location     Type
 14593 ;;		None               void
 14594 ;; Registers used:
 14595 ;;		wreg, status,2, status,0
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14601 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;Total ram usage:        3 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    5
 14608 ;; This function calls:
 14609 ;;		Nothing
 14610 ;; This function is called by:
 14611 ;;		_setDimmerLights_OnOff
 14612 ;;		_setRFSW_AdjControl
 14613 ;;		_DimmerLights_AssignationDimming
 14614 ;; This function uses a non-reentrant model
 14615 ;;
 14616                           
 14617                           
 14618                           ;psect for function _setDimmerIntr_Dimming_RF
 14619  1D53                     _setDimmerIntr_Dimming_RF:	
 14620                           
 14621                           ;incstack = 0
 14622                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14623                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14624  1D53  0020               	movlb	0	; select bank0
 14625  1D54  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14626                           
 14627                           ;Dimmer_B1.c: 262: if (lights == 1) {
 14628  1D55  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14629  1D56  3A01               	xorlw	1
 14630  1D57  1D03               	skipz
 14631  1D58  0008               	return
 14632                           
 14633                           ;Dimmer_B1.c: 263: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14634  1D59  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14635  1D5A  3A01               	xorlw	1
 14636  1D5B  3000               	movlw	0
 14637  1D5C  1903               	skipnz
 14638  1D5D  3001               	movlw	1
 14639  1D5E  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14640  1D5F  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14641  1D60  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14642  1D61  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14643  1D62  0021               	movlb	1	; select bank1
 14644  1D63  083C               	movf	_DimmerIntr1^(0+128),w
 14645  1D64  0020               	movlb	0	; select bank0
 14646  1D65  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14647  1D66  39BF               	andlw	-65
 14648  1D67  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14649  1D68  0021               	movlb	1	; select bank1
 14650  1D69  00BC               	movwf	_DimmerIntr1^(0+128)
 14651  1D6A  0008               	return
 14652  1D6B                     __end_of_setDimmerIntr_Dimming_RF:	
 14653                           
 14654                           	psect	text95
 14655  1AB0                     __ptext95:	
 14656 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14657 ;; Defined at:
 14658 ;;		line 107 in file "../src/Dimmer_B1.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;  lights          1    wreg     unsigned char 
 14661 ;;  value           1   66[BANK0 ] unsigned char 
 14662 ;; Auto vars:     Size  Location     Type
 14663 ;;  lights          1   68[BANK0 ] unsigned char 
 14664 ;; Return value:  Size  Location     Type
 14665 ;;		None               void
 14666 ;; Registers used:
 14667 ;;		wreg
 14668 ;; Tracked objects:
 14669 ;;		On entry : 0/0
 14670 ;;		On exit  : 0/0
 14671 ;;		Unchanged: 0/0
 14672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14673 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;Total ram usage:        3 bytes
 14678 ;; Hardware stack levels used:    1
 14679 ;; Hardware stack levels required when called:    5
 14680 ;; This function calls:
 14681 ;;		Nothing
 14682 ;; This function is called by:
 14683 ;;		_setDimmerLights_OnOff
 14684 ;; This function uses a non-reentrant model
 14685 ;;
 14686                           
 14687                           
 14688                           ;psect for function _setDimmerIntr_DimmingValue
 14689  1AB0                     _setDimmerIntr_DimmingValue:	
 14690                           
 14691                           ;incstack = 0
 14692                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14693                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14694  1AB0  0020               	movlb	0	; select bank0
 14695  1AB1  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14696                           
 14697                           ;Dimmer_B1.c: 109: if (lights == 1) {
 14698  1AB2  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14699  1AB3  3A01               	xorlw	1
 14700  1AB4  1D03               	skipz
 14701  1AB5  0008               	return
 14702                           
 14703                           ;Dimmer_B1.c: 110: DimmerIntr1.DimmingValue = value;
 14704  1AB6  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14705  1AB7  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14706  1AB8  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14707  1AB9  0021               	movlb	1	; select bank1
 14708  1ABA  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14709  1ABB  0008               	return
 14710  1ABC                     __end_of_setDimmerIntr_DimmingValue:	
 14711                           
 14712                           	psect	text96
 14713  1D3B                     __ptext96:	
 14714 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14715 ;; Defined at:
 14716 ;;		line 89 in file "../src/Dimmer_B1.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;  lights          1    wreg     unsigned char 
 14719 ;;  command         1    0[BANK0 ] unsigned char 
 14720 ;; Auto vars:     Size  Location     Type
 14721 ;;  lights          1    2[BANK0 ] unsigned char 
 14722 ;; Return value:  Size  Location     Type
 14723 ;;		None               void
 14724 ;; Registers used:
 14725 ;;		wreg, status,2, status,0
 14726 ;; Tracked objects:
 14727 ;;		On entry : 0/0
 14728 ;;		On exit  : 0/0
 14729 ;;		Unchanged: 0/0
 14730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14731 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;Total ram usage:        3 bytes
 14736 ;; Hardware stack levels used:    1
 14737 ;; Hardware stack levels required when called:    5
 14738 ;; This function calls:
 14739 ;;		Nothing
 14740 ;; This function is called by:
 14741 ;;		_setDimmerLights_OnOff
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           
 14746                           ;psect for function _setDimmerIntr_ControlStatus
 14747  1D3B                     _setDimmerIntr_ControlStatus:	
 14748                           
 14749                           ;incstack = 0
 14750                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14751                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14752  1D3B  0020               	movlb	0	; select bank0
 14753  1D3C  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14754                           
 14755                           ;Dimmer_B1.c: 91: if (lights == 1) {
 14756  1D3D  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14757  1D3E  3A01               	xorlw	1
 14758  1D3F  1D03               	skipz
 14759  1D40  0008               	return
 14760                           
 14761                           ;Dimmer_B1.c: 92: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14762  1D41  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14763  1D42  3A01               	xorlw	1
 14764  1D43  3000               	movlw	0
 14765  1D44  1903               	skipnz
 14766  1D45  3001               	movlw	1
 14767  1D46  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14768  1D47  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14769  1D48  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14770  1D49  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14771  1D4A  0021               	movlb	1	; select bank1
 14772  1D4B  083C               	movf	_DimmerIntr1^(0+128),w
 14773  1D4C  0020               	movlb	0	; select bank0
 14774  1D4D  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14775  1D4E  39F7               	andlw	-9
 14776  1D4F  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14777  1D50  0021               	movlb	1	; select bank1
 14778  1D51  00BC               	movwf	_DimmerIntr1^(0+128)
 14779  1D52  0008               	return
 14780  1D53                     __end_of_setDimmerIntr_ControlStatus:	
 14781                           
 14782                           	psect	text97
 14783  0B76                     __ptext97:	
 14784 ;; *************** function _setDelayOff_GO *****************
 14785 ;; Defined at:
 14786 ;;		line 87 in file "../src/DelayOff_B1.c"
 14787 ;; Parameters:    Size  Location     Type
 14788 ;;  sw              1    wreg     unsigned char 
 14789 ;;  command         1   69[BANK0 ] unsigned char 
 14790 ;;  value           1   70[BANK0 ] unsigned char 
 14791 ;; Auto vars:     Size  Location     Type
 14792 ;;  sw              1   76[BANK0 ] unsigned char 
 14793 ;;  k               1   75[BANK0 ] unsigned char 
 14794 ;;  j               1   74[BANK0 ] unsigned char 
 14795 ;;  i               1   73[BANK0 ] unsigned char 
 14796 ;; Return value:  Size  Location     Type
 14797 ;;		None               void
 14798 ;; Registers used:
 14799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14800 ;; Tracked objects:
 14801 ;;		On entry : 0/0
 14802 ;;		On exit  : 0/0
 14803 ;;		Unchanged: 0/0
 14804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14805 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14806 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14807 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14808 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14809 ;;Total ram usage:        8 bytes
 14810 ;; Hardware stack levels used:    1
 14811 ;; Hardware stack levels required when called:    6
 14812 ;; This function calls:
 14813 ;;		_DelayOffPointSelect
 14814 ;;		___bmul
 14815 ;;		_setProductData
 14816 ;; This function is called by:
 14817 ;;		_setDimmerLights_OnOff
 14818 ;;		_setRFSW_Control
 14819 ;; This function uses a non-reentrant model
 14820 ;;
 14821                           
 14822                           
 14823                           ;psect for function _setDelayOff_GO
 14824  0B76                     _setDelayOff_GO:	
 14825                           
 14826                           ;incstack = 0
 14827                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14828                           ;setDelayOff_GO@sw stored from wreg
 14829  0B76  0020               	movlb	0	; select bank0
 14830  0B77  00EC               	movwf	setDelayOff_GO@sw
 14831                           
 14832                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14833  0B78  086C               	movf	setDelayOff_GO@sw,w
 14834  0B79  319A  2280  318B   	fcall	_DelayOffPointSelect
 14835                           
 14836                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14837  0B7C  0020               	movlb	0	; select bank0
 14838  0B7D  0865               	movf	setDelayOff_GO@command,w
 14839  0B7E  3A01               	xorlw	1
 14840  0B7F  3000               	movlw	0
 14841  0B80  1903               	skipnz
 14842  0B81  3001               	movlw	1
 14843  0B82  00E7               	movwf	??_setDelayOff_GO
 14844  0B83  0021               	movlb	1	; select bank1
 14845  0B84  084A               	movf	_DelayOff^(0+128),w
 14846  0B85  0086               	movwf	6
 14847  0B86  3001               	movlw	1	; select bank2/3
 14848  0B87  0087               	movwf	7
 14849  0B88  0020               	movlb	0	; select bank0
 14850  0B89  0DE7               	rlf	??_setDelayOff_GO,f
 14851  0B8A  0801               	movf	1,w
 14852  0B8B  0667               	xorwf	??_setDelayOff_GO,w
 14853  0B8C  39FD               	andlw	-3
 14854  0B8D  0667               	xorwf	??_setDelayOff_GO,w
 14855  0B8E  0081               	movwf	1
 14856                           
 14857                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14858  0B8F  0021               	movlb	1	; select bank1
 14859  0B90  084A               	movf	_DelayOff^(0+128),w
 14860  0B91  3E02               	addlw	2
 14861  0B92  0086               	movwf	6
 14862  0B93  3001               	movlw	1	; select bank2/3
 14863  0B94  0087               	movwf	7
 14864  0B95  3000               	movlw	0
 14865  0B96  3FC0               	movwi [0]fsr1
 14866  0B97  3FC1               	movwi [1]fsr1
 14867                           
 14868                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14869  0B98  084A               	movf	_DelayOff^(0+128),w
 14870  0B99  3E04               	addlw	4
 14871  0B9A  0086               	movwf	6
 14872  0B9B  3001               	movlw	1	; select bank2/3
 14873  0B9C  0087               	movwf	7
 14874  0B9D  0181               	clrf	1
 14875                           
 14876                           ;DelayOff_B1.c: 94: if (command == 1) {
 14877  0B9E  0020               	movlb	0	; select bank0
 14878  0B9F  0865               	movf	setDelayOff_GO@command,w
 14879  0BA0  3A01               	xorlw	1
 14880  0BA1  1D03               	skipz
 14881  0BA2  2BF8               	goto	l6391
 14882                           
 14883                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14884  0BA3  3005               	movlw	5
 14885  0BA4  00E7               	movwf	??_setDelayOff_GO
 14886  0BA5  0867               	movf	??_setDelayOff_GO,w
 14887  0BA6  00E9               	movwf	setDelayOff_GO@i
 14888  0BA7  01EA               	clrf	setDelayOff_GO@j
 14889  0BA8  01EB               	clrf	setDelayOff_GO@k
 14890                           
 14891                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14892  0BA9  300F               	movlw	15
 14893  0BAA  0566               	andwf	setDelayOff_GO@value,w
 14894  0BAB  00E7               	movwf	??_setDelayOff_GO
 14895  0BAC  0867               	movf	??_setDelayOff_GO,w
 14896  0BAD  3A05               	xorlw	5
 14897  0BAE  1903               	skipnz
 14898  0BAF  2BB4               	goto	l6377
 14899  0BB0  0866               	movf	setDelayOff_GO@value,w
 14900  0BB1  390F               	andlw	15
 14901  0BB2  1D03               	btfss	3,2
 14902  0BB3  2BE4               	goto	l6387
 14903  0BB4                     l6377:	
 14904  0BB4  3031               	movlw	49
 14905  0BB5  0266               	subwf	setDelayOff_GO@value,w
 14906  0BB6  1803               	skipnc
 14907  0BB7  2BE4               	goto	l6387
 14908                           
 14909                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14910  0BB8  0866               	movf	setDelayOff_GO@value,w
 14911  0BB9  390F               	andlw	15
 14912  0BBA  00E7               	movwf	??_setDelayOff_GO
 14913  0BBB  0867               	movf	??_setDelayOff_GO,w
 14914  0BBC  00EA               	movwf	setDelayOff_GO@j
 14915                           
 14916                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14917  0BBD  0866               	movf	setDelayOff_GO@value,w
 14918  0BBE  00E7               	movwf	??_setDelayOff_GO
 14919  0BBF  3004               	movlw	4
 14920  0BC0                     u5475:	
 14921  0BC0  36E7               	lsrf	??_setDelayOff_GO,f
 14922  0BC1  0B89               	decfsz	9,f
 14923  0BC2  2BC0               	goto	u5475
 14924  0BC3  0867               	movf	??_setDelayOff_GO,w
 14925  0BC4  390F               	andlw	15
 14926  0BC5  00E8               	movwf	??_setDelayOff_GO+1
 14927  0BC6  0868               	movf	??_setDelayOff_GO+1,w
 14928  0BC7  00EB               	movwf	setDelayOff_GO@k
 14929                           
 14930                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14931  0BC8  300A               	movlw	10
 14932  0BC9  00E7               	movwf	??_setDelayOff_GO
 14933  0BCA  0867               	movf	??_setDelayOff_GO,w
 14934  0BCB  00A0               	movwf	___bmul@multiplicand
 14935  0BCC  086B               	movf	setDelayOff_GO@k,w
 14936  0BCD  319C  2400  318B   	fcall	___bmul
 14937  0BD0  0020               	movlb	0	; select bank0
 14938  0BD1  076A               	addwf	setDelayOff_GO@j,w
 14939  0BD2  00E8               	movwf	??_setDelayOff_GO+1
 14940  0BD3  0021               	movlb	1	; select bank1
 14941  0BD4  0A4A               	incf	_DelayOff^(0+128),w
 14942  0BD5  0086               	movwf	6
 14943  0BD6  3001               	movlw	1	; select bank2/3
 14944  0BD7  0087               	movwf	7
 14945  0BD8  0020               	movlb	0	; select bank0
 14946  0BD9  0868               	movf	??_setDelayOff_GO+1,w
 14947  0BDA  0081               	movwf	1
 14948                           
 14949                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14950  0BDB  0866               	movf	setDelayOff_GO@value,w
 14951  0BDC  00E7               	movwf	??_setDelayOff_GO
 14952  0BDD  0867               	movf	??_setDelayOff_GO,w
 14953  0BDE  00E2               	movwf	setProductData@value
 14954  0BDF  086C               	movf	setDelayOff_GO@sw,w
 14955  0BE0  3E1A               	addlw	26
 14956  0BE1  319A  2298         	fcall	_setProductData
 14957                           
 14958                           ;DelayOff_B1.c: 103: } else {
 14959  0BE3  0008               	return
 14960  0BE4                     l6387:	
 14961                           
 14962                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14963  0BE4  3005               	movlw	5
 14964  0BE5  0020               	movlb	0	; select bank0
 14965  0BE6  00E7               	movwf	??_setDelayOff_GO
 14966  0BE7  0021               	movlb	1	; select bank1
 14967  0BE8  0A4A               	incf	_DelayOff^(0+128),w
 14968  0BE9  0086               	movwf	6
 14969  0BEA  3001               	movlw	1	; select bank2/3
 14970  0BEB  0087               	movwf	7
 14971  0BEC  0020               	movlb	0	; select bank0
 14972  0BED  0867               	movf	??_setDelayOff_GO,w
 14973  0BEE  0081               	movwf	1
 14974                           
 14975                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14976  0BEF  3005               	movlw	5
 14977  0BF0  00E7               	movwf	??_setDelayOff_GO
 14978  0BF1  0867               	movf	??_setDelayOff_GO,w
 14979  0BF2  00E2               	movwf	setProductData@value
 14980  0BF3  086C               	movf	setDelayOff_GO@sw,w
 14981  0BF4  3E1A               	addlw	26
 14982  0BF5  319A  2298         	fcall	_setProductData
 14983                           
 14984                           ;DelayOff_B1.c: 106: }
 14985                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14986  0BF7  0008               	return
 14987  0BF8                     l6391:	
 14988  0BF8  0020               	movlb	0	; select bank0
 14989  0BF9  08E5               	movf	setDelayOff_GO@command,f
 14990  0BFA  1D03               	skipz
 14991  0BFB  0008               	return
 14992                           
 14993                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14994  0BFC  01E2               	clrf	setProductData@value
 14995  0BFD  086C               	movf	setDelayOff_GO@sw,w
 14996  0BFE  3E1A               	addlw	26
 14997  0BFF  319A  2298         	fcall	_setProductData
 14998  0C01  0008               	return
 14999  0C02                     __end_of_setDelayOff_GO:	
 15000                           
 15001                           	psect	text98
 15002  1C00                     __ptext98:	
 15003 ;; *************** function ___bmul *****************
 15004 ;; Defined at:
 15005 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15006 ;; Parameters:    Size  Location     Type
 15007 ;;  multiplier      1    wreg     unsigned char 
 15008 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15009 ;; Auto vars:     Size  Location     Type
 15010 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15011 ;;  product         1    2[BANK0 ] unsigned char 
 15012 ;; Return value:  Size  Location     Type
 15013 ;;                  1    wreg      unsigned char 
 15014 ;; Registers used:
 15015 ;;		wreg, status,2, status,0
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15021 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;Total ram usage:        4 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; Hardware stack levels required when called:    5
 15028 ;; This function calls:
 15029 ;;		Nothing
 15030 ;; This function is called by:
 15031 ;;		_setDelayOff_GO
 15032 ;;		_DelayTimejudge
 15033 ;; This function uses a non-reentrant model
 15034 ;;
 15035                           
 15036                           
 15037                           ;psect for function ___bmul
 15038  1C00                     ___bmul:	
 15039                           
 15040                           ;incstack = 0
 15041                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15042                           ;___bmul@multiplier stored from wreg
 15043  1C00  0020               	movlb	0	; select bank0
 15044  1C01  00A3               	movwf	___bmul@multiplier
 15045  1C02  01A2               	clrf	___bmul@product
 15046  1C03                     l6051:	
 15047  1C03  1C23               	btfss	___bmul@multiplier,0
 15048  1C04  2C09               	goto	l6055
 15049  1C05  0820               	movf	___bmul@multiplicand,w
 15050  1C06  00A1               	movwf	??___bmul
 15051  1C07  0821               	movf	??___bmul,w
 15052  1C08  07A2               	addwf	___bmul@product,f
 15053  1C09                     l6055:	
 15054  1C09  1003               	clrc
 15055  1C0A  0DA0               	rlf	___bmul@multiplicand,f
 15056  1C0B  1003               	clrc
 15057  1C0C  0CA3               	rrf	___bmul@multiplier,f
 15058  1C0D  08A3               	movf	___bmul@multiplier,f
 15059  1C0E  1D03               	skipz
 15060  1C0F  2C03               	goto	l6051
 15061  1C10  0822               	movf	___bmul@product,w
 15062  1C11  0008               	return
 15063  1C12                     __end_of___bmul:	
 15064                           
 15065                           	psect	text99
 15066  1D6B                     __ptext99:	
 15067 ;; *************** function _setCmd_Status *****************
 15068 ;; Defined at:
 15069 ;;		line 651 in file "../src/Main_B1.c"
 15070 ;; Parameters:    Size  Location     Type
 15071 ;;  number          1    wreg     unsigned char 
 15072 ;;  cmd             1    0[BANK0 ] unsigned char 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  number          1    2[BANK0 ] unsigned char 
 15075 ;; Return value:  Size  Location     Type
 15076 ;;		None               void
 15077 ;; Registers used:
 15078 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15079 ;; Tracked objects:
 15080 ;;		On entry : 0/0
 15081 ;;		On exit  : 0/0
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15084 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;Total ram usage:        3 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; Hardware stack levels required when called:    5
 15091 ;; This function calls:
 15092 ;;		Nothing
 15093 ;; This function is called by:
 15094 ;;		_setDimmerLights_OnOff
 15095 ;;		_setControl_Lights_Table
 15096 ;; This function uses a non-reentrant model
 15097 ;;
 15098                           
 15099                           
 15100                           ;psect for function _setCmd_Status
 15101  1D6B                     _setCmd_Status:	
 15102                           
 15103                           ;incstack = 0
 15104                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15105                           ;setCmd_Status@number stored from wreg
 15106  1D6B  0020               	movlb	0	; select bank0
 15107  1D6C  00A2               	movwf	setCmd_Status@number
 15108                           
 15109                           ;Main_B1.c: 652: switch (number) {
 15110  1D6D  2D7D               	goto	l6561
 15111  1D6E                     l6557:	
 15112                           ;Main_B1.c: 653: case 1:
 15113                           
 15114                           
 15115                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15116  1D6E  0820               	movf	setCmd_Status@cmd,w
 15117  1D6F  3A01               	xorlw	1
 15118  1D70  3000               	movlw	0
 15119  1D71  1903               	skipnz
 15120  1D72  3001               	movlw	1
 15121  1D73  00A1               	movwf	??_setCmd_Status
 15122  1D74  0021               	movlb	1	; select bank1
 15123  1D75  0849               	movf	_Cmd^(0+128),w
 15124  1D76  0020               	movlb	0	; select bank0
 15125  1D77  0621               	xorwf	??_setCmd_Status,w
 15126  1D78  39FE               	andlw	-2
 15127  1D79  0621               	xorwf	??_setCmd_Status,w
 15128  1D7A  0021               	movlb	1	; select bank1
 15129  1D7B  00C9               	movwf	_Cmd^(0+128)
 15130                           
 15131                           ;Main_B1.c: 656: }
 15132                           
 15133                           ;Main_B1.c: 655: break;
 15134  1D7C  0008               	return
 15135  1D7D                     l6561:	
 15136  1D7D  0020               	movlb	0	; select bank0
 15137  1D7E  0822               	movf	setCmd_Status@number,w
 15138                           
 15139                           ; Switch size 1, requested type "space"
 15140                           ; Number of cases is 1, Range of values is 1 to 1
 15141                           ; switch strategies available:
 15142                           ; Name         Instructions Cycles
 15143                           ; simple_byte            4     3 (average)
 15144                           ; direct_byte           11     9 (fixed)
 15145                           ; jumptable            263     9 (fixed)
 15146                           ;	Chosen strategy is simple_byte
 15147  1D7F  3A01               	xorlw	1	; case 1
 15148  1D80  1903               	skipnz
 15149  1D81  2D6E               	goto	l6557
 15150  1D82  2D83               	goto	l1559
 15151  1D83                     l1559:	
 15152  1D83  0008               	return
 15153  1D84                     __end_of_setCmd_Status:	
 15154                           
 15155                           	psect	text100
 15156  1A55                     __ptext100:	
 15157 ;; *************** function _getMain_All_LightsStatus *****************
 15158 ;; Defined at:
 15159 ;;		line 373 in file "../src/Main_B1.c"
 15160 ;; Parameters:    Size  Location     Type
 15161 ;;		None
 15162 ;; Auto vars:     Size  Location     Type
 15163 ;;  status          1    0[BANK0 ] unsigned char 
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      unsigned char 
 15166 ;; Registers used:
 15167 ;;		wreg, status,2
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15177 ;;Total ram usage:        1 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:    5
 15180 ;; This function calls:
 15181 ;;		Nothing
 15182 ;; This function is called by:
 15183 ;;		_DimmerLights_Main
 15184 ;;		_setDimmerLights_Main
 15185 ;;		_setDimmerLights_OnOff
 15186 ;;		_Flash_Memory_Main
 15187 ;;		_Exception_Main
 15188 ;;		_Load_Main
 15189 ;;		_setTemp_Main
 15190 ;;		_setControl_Lights_Table
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           
 15195                           ;psect for function _getMain_All_LightsStatus
 15196  1A55                     _getMain_All_LightsStatus:	
 15197                           
 15198                           ;Main_B1.c: 374: char status = 0;
 15199                           
 15200                           ;incstack = 0
 15201                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 15202  1A55  0020               	movlb	0	; select bank0
 15203  1A56  01A0               	clrf	getMain_All_LightsStatus@status
 15204                           
 15205                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 15206  1A57  3000               	movlw	0
 15207  1A58  0022               	movlb	2	; select bank2
 15208  1A59  1861               	btfsc	(_DimmerLights1^(0+256)+1),0
 15209  1A5A  3001               	movlw	1
 15210  1A5B  0020               	movlb	0	; select bank0
 15211  1A5C  00A0               	movwf	getMain_All_LightsStatus@status
 15212                           
 15213                           ;Main_B1.c: 420: return status;
 15214  1A5D  0820               	movf	getMain_All_LightsStatus@status,w
 15215  1A5E  0008               	return
 15216  1A5F                     __end_of_getMain_All_LightsStatus:	
 15217                           
 15218                           	psect	text101
 15219  1B99                     __ptext101:	
 15220 ;; *************** function _getDelayOff_GO *****************
 15221 ;; Defined at:
 15222 ;;		line 114 in file "../src/DelayOff_B1.c"
 15223 ;; Parameters:    Size  Location     Type
 15224 ;;  sw              1    wreg     unsigned char 
 15225 ;; Auto vars:     Size  Location     Type
 15226 ;;  sw              1    2[BANK0 ] unsigned char 
 15227 ;;  go              1    3[BANK0 ] unsigned char 
 15228 ;; Return value:  Size  Location     Type
 15229 ;;                  1    wreg      unsigned char 
 15230 ;; Registers used:
 15231 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : 0/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;Total ram usage:        2 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; Hardware stack levels required when called:    6
 15244 ;; This function calls:
 15245 ;;		_DelayOffPointSelect
 15246 ;; This function is called by:
 15247 ;;		_setDimmerLights_OnOff
 15248 ;; This function uses a non-reentrant model
 15249 ;;
 15250                           
 15251                           
 15252                           ;psect for function _getDelayOff_GO
 15253  1B99                     _getDelayOff_GO:	
 15254                           
 15255                           ;incstack = 0
 15256                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15257                           ;getDelayOff_GO@sw stored from wreg
 15258  1B99  0020               	movlb	0	; select bank0
 15259  1B9A  00A2               	movwf	getDelayOff_GO@sw
 15260                           
 15261                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15262  1B9B  0822               	movf	getDelayOff_GO@sw,w
 15263  1B9C  319A  2280         	fcall	_DelayOffPointSelect
 15264                           
 15265                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15266  1B9E  0021               	movlb	1	; select bank1
 15267  1B9F  084A               	movf	_DelayOff^(0+128),w
 15268  1BA0  0086               	movwf	6
 15269  1BA1  3001               	movlw	1	; select bank2/3
 15270  1BA2  0087               	movwf	7
 15271  1BA3  3000               	movlw	0
 15272  1BA4  1881               	btfsc	1,1
 15273  1BA5  3001               	movlw	1
 15274  1BA6  0020               	movlb	0	; select bank0
 15275  1BA7  00A3               	movwf	getDelayOff_GO@go
 15276                           
 15277                           ;DelayOff_B1.c: 117: return go;
 15278  1BA8  0823               	movf	getDelayOff_GO@go,w
 15279  1BA9  0008               	return
 15280  1BAA                     __end_of_getDelayOff_GO:	
 15281                           
 15282                           	psect	text102
 15283  1BEE                     __ptext102:	
 15284 ;; *************** function _getCmd_Status *****************
 15285 ;; Defined at:
 15286 ;;		line 659 in file "../src/Main_B1.c"
 15287 ;; Parameters:    Size  Location     Type
 15288 ;;  number          1    wreg     unsigned char 
 15289 ;; Auto vars:     Size  Location     Type
 15290 ;;  number          1    0[BANK0 ] unsigned char 
 15291 ;;  cmd             1    1[BANK0 ] unsigned char 
 15292 ;; Return value:  Size  Location     Type
 15293 ;;                  1    wreg      unsigned char 
 15294 ;; Registers used:
 15295 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15296 ;; Tracked objects:
 15297 ;;		On entry : 0/0
 15298 ;;		On exit  : 0/0
 15299 ;;		Unchanged: 0/0
 15300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;Total ram usage:        2 bytes
 15306 ;; Hardware stack levels used:    1
 15307 ;; Hardware stack levels required when called:    5
 15308 ;; This function calls:
 15309 ;;		Nothing
 15310 ;; This function is called by:
 15311 ;;		_setDimmerLights_OnOff
 15312 ;; This function uses a non-reentrant model
 15313 ;;
 15314                           
 15315                           
 15316                           ;psect for function _getCmd_Status
 15317  1BEE                     _getCmd_Status:	
 15318                           
 15319                           ;incstack = 0
 15320                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15321                           ;getCmd_Status@number stored from wreg
 15322  1BEE  0020               	movlb	0	; select bank0
 15323  1BEF  00A0               	movwf	getCmd_Status@number
 15324                           
 15325                           ;Main_B1.c: 660: char cmd = 0;
 15326  1BF0  01A1               	clrf	getCmd_Status@cmd
 15327                           
 15328                           ;Main_B1.c: 661: switch (number) {
 15329  1BF1  2BF9               	goto	l6835
 15330  1BF2                     l6831:	
 15331                           ;Main_B1.c: 662: case 1:
 15332                           
 15333                           
 15334                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15335  1BF2  3000               	movlw	0
 15336  1BF3  0021               	movlb	1	; select bank1
 15337  1BF4  1849               	btfsc	_Cmd^(0+128),0
 15338  1BF5  3001               	movlw	1
 15339  1BF6  0020               	movlb	0	; select bank0
 15340  1BF7  00A1               	movwf	getCmd_Status@cmd
 15341                           
 15342                           ;Main_B1.c: 665: }
 15343                           
 15344                           ;Main_B1.c: 664: break;
 15345  1BF8  2BFE               	goto	l6837
 15346  1BF9                     l6835:	
 15347  1BF9  0820               	movf	getCmd_Status@number,w
 15348                           
 15349                           ; Switch size 1, requested type "space"
 15350                           ; Number of cases is 1, Range of values is 1 to 1
 15351                           ; switch strategies available:
 15352                           ; Name         Instructions Cycles
 15353                           ; simple_byte            4     3 (average)
 15354                           ; direct_byte           11     9 (fixed)
 15355                           ; jumptable            263     9 (fixed)
 15356                           ;	Chosen strategy is simple_byte
 15357  1BFA  3A01               	xorlw	1	; case 1
 15358  1BFB  1903               	skipnz
 15359  1BFC  2BF2               	goto	l6831
 15360  1BFD  2BFE               	goto	l6837
 15361  1BFE                     l6837:	
 15362                           
 15363                           ;Main_B1.c: 666: return cmd;
 15364  1BFE  0821               	movf	getCmd_Status@cmd,w
 15365  1BFF  0008               	return
 15366  1C00                     __end_of_getCmd_Status:	
 15367                           
 15368                           	psect	text103
 15369  143B                     __ptext103:	
 15370 ;; *************** function _setDimmerLights_Dimming *****************
 15371 ;; Defined at:
 15372 ;;		line 1079 in file "../src/Dimmer_B1.c"
 15373 ;; Parameters:    Size  Location     Type
 15374 ;;  lights          1    wreg     unsigned char 
 15375 ;;  status          1   74[BANK0 ] unsigned char 
 15376 ;; Auto vars:     Size  Location     Type
 15377 ;;  lights          1   77[BANK0 ] unsigned char 
 15378 ;;  value           1   76[BANK0 ] unsigned char 
 15379 ;; Return value:  Size  Location     Type
 15380 ;;		None               void
 15381 ;; Registers used:
 15382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15383 ;; Tracked objects:
 15384 ;;		On entry : 0/0
 15385 ;;		On exit  : 0/0
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15388 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;Total ram usage:        4 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; Hardware stack levels required when called:    8
 15395 ;; This function calls:
 15396 ;;		_getDimmerIntr_DimmingValue
 15397 ;;		_getDimmerLights_ValueToPercent
 15398 ;;		_setBuz
 15399 ;;		_setDimmerIntr_Dimming_Sw
 15400 ;;		_setDimmerIntr_MaxmumValue
 15401 ;;		_setDimmerLights_Line
 15402 ;;		_setMemory_Modify
 15403 ;;		_setProductData
 15404 ;;		_setRF_DimmerLights
 15405 ;;		_setRF_TransceiveGO
 15406 ;;		_setTxData
 15407 ;; This function is called by:
 15408 ;;		_setDimmerLights_Main
 15409 ;; This function uses a non-reentrant model
 15410 ;;
 15411                           
 15412                           
 15413                           ;psect for function _setDimmerLights_Dimming
 15414  143B                     _setDimmerLights_Dimming:	
 15415                           
 15416                           ;incstack = 0
 15417                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15418                           ;setDimmerLights_Dimming@lights stored from wreg
 15419  143B  0020               	movlb	0	; select bank0
 15420  143C  00ED               	movwf	setDimmerLights_Dimming@lights
 15421                           
 15422                           ;Dimmer_B1.c: 1080: setDimmerIntr_Dimming_Sw(lights, status);
 15423  143D  086A               	movf	setDimmerLights_Dimming@status,w
 15424  143E  00EB               	movwf	??_setDimmerLights_Dimming
 15425  143F  086B               	movf	??_setDimmerLights_Dimming,w
 15426  1440  00A0               	movwf	setDimmerIntr_Dimming_Sw@command
 15427  1441  086D               	movf	setDimmerLights_Dimming@lights,w
 15428  1442  319D  2525  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15429                           
 15430                           ;Dimmer_B1.c: 1081: if (status == 1) {
 15431  1445  0020               	movlb	0	; select bank0
 15432  1446  086A               	movf	setDimmerLights_Dimming@status,w
 15433  1447  3A01               	xorlw	1
 15434  1448  1D03               	skipz
 15435  1449  2C57               	goto	l7139
 15436                           
 15437                           ;Dimmer_B1.c: 1083: setRF_TransceiveGO(0);
 15438  144A  3000               	movlw	0
 15439  144B  319C  245B  3194   	fcall	_setRF_TransceiveGO
 15440                           
 15441                           ;Dimmer_B1.c: 1085: setBuz(1, 100);
 15442  144E  3064               	movlw	100
 15443  144F  0020               	movlb	0	; select bank0
 15444  1450  00A9               	movwf	setBuz@time
 15445  1451  3000               	movlw	0
 15446  1452  00AA               	movwf	setBuz@time+1
 15447  1453  3001               	movlw	1
 15448  1454  3194  248F         	fcall	_setBuz
 15449                           
 15450                           ;Dimmer_B1.c: 1086: } else if (status == 0) {
 15451  1456  0008               	return
 15452  1457                     l7139:	
 15453  1457  0020               	movlb	0	; select bank0
 15454  1458  08EA               	movf	setDimmerLights_Dimming@status,f
 15455  1459  1D03               	skipz
 15456  145A  0008               	return
 15457                           
 15458                           ;Dimmer_B1.c: 1089: Dimmer.Load_Status = 0;
 15459  145B  0022               	movlb	2	; select bank2
 15460  145C  112C               	bcf	_Dimmer^(0+256),2
 15461                           
 15462                           ;Dimmer_B1.c: 1090: setDimmerLights_Line(lights);
 15463  145D  0020               	movlb	0	; select bank0
 15464  145E  086D               	movf	setDimmerLights_Dimming@lights,w
 15465  145F  319B  2388  3194   	fcall	_setDimmerLights_Line
 15466                           
 15467                           ;Dimmer_B1.c: 1092: char value = getDimmerIntr_DimmingValue(lights);
 15468  1462  0020               	movlb	0	; select bank0
 15469  1463  086D               	movf	setDimmerLights_Dimming@lights,w
 15470  1464  319B  2349  3194   	fcall	_getDimmerIntr_DimmingValue
 15471  1467  0020               	movlb	0	; select bank0
 15472  1468  00EB               	movwf	??_setDimmerLights_Dimming
 15473  1469  086B               	movf	??_setDimmerLights_Dimming,w
 15474  146A  00EC               	movwf	setDimmerLights_Dimming@value
 15475                           
 15476                           ;Dimmer_B1.c: 1093: setDimmerIntr_MaxmumValue(lights, value);
 15477  146B  086C               	movf	setDimmerLights_Dimming@value,w
 15478  146C  00EB               	movwf	??_setDimmerLights_Dimming
 15479  146D  086B               	movf	??_setDimmerLights_Dimming,w
 15480  146E  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15481  146F  086D               	movf	setDimmerLights_Dimming@lights,w
 15482  1470  319A  22A4  3194   	fcall	_setDimmerIntr_MaxmumValue
 15483                           
 15484                           ;Dimmer_B1.c: 1094: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15485  1473  0020               	movlb	0	; select bank0
 15486  1474  086C               	movf	setDimmerLights_Dimming@value,w
 15487  1475  3196  26CB  3194   	fcall	_getDimmerLights_ValueToPercent
 15488  1478  0020               	movlb	0	; select bank0
 15489  1479  00EB               	movwf	??_setDimmerLights_Dimming
 15490  147A  086B               	movf	??_setDimmerLights_Dimming,w
 15491  147B  00E2               	movwf	setProductData@value
 15492  147C  086D               	movf	setDimmerLights_Dimming@lights,w
 15493  147D  3E14               	addlw	20
 15494  147E  319A  2298  3194   	fcall	_setProductData
 15495                           
 15496                           ;Dimmer_B1.c: 1101: setMemory_Modify(1);
 15497  1481  3001               	movlw	1
 15498  1482  319C  2448  3194   	fcall	_setMemory_Modify
 15499                           
 15500                           ;Dimmer_B1.c: 1105: setRF_DimmerLights(lights, 1);
 15501  1485  0020               	movlb	0	; select bank0
 15502  1486  01E5               	clrf	setRF_DimmerLights@on
 15503  1487  0AE5               	incf	setRF_DimmerLights@on,f
 15504  1488  086D               	movf	setDimmerLights_Dimming@lights,w
 15505  1489  3197  2730  3194   	fcall	_setRF_DimmerLights
 15506                           
 15507                           ;Dimmer_B1.c: 1106: setTxData();
 15508  148C  318E  267F         	fcall	_setTxData
 15509  148E  0008               	return
 15510  148F                     __end_of_setDimmerLights_Dimming:	
 15511                           
 15512                           	psect	text104
 15513  0E7F                     __ptext104:	
 15514 ;; *************** function _setTxData *****************
 15515 ;; Defined at:
 15516 ;;		line 183 in file "../src/RF_Control_B1.c"
 15517 ;; Parameters:    Size  Location     Type
 15518 ;;		None
 15519 ;; Auto vars:     Size  Location     Type
 15520 ;;  i               1    0        unsigned char 
 15521 ;; Return value:  Size  Location     Type
 15522 ;;		None               void
 15523 ;; Registers used:
 15524 ;;		wreg, fsr1l, fsr1h, status,2
 15525 ;; Tracked objects:
 15526 ;;		On entry : 0/0
 15527 ;;		On exit  : 0/0
 15528 ;;		Unchanged: 0/0
 15529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15534 ;;Total ram usage:        1 bytes
 15535 ;; Hardware stack levels used:    1
 15536 ;; Hardware stack levels required when called:    5
 15537 ;; This function calls:
 15538 ;;		Nothing
 15539 ;; This function is called by:
 15540 ;;		_setDimmerLights_OnOff
 15541 ;;		_setDimmerLights_Dimming
 15542 ;;		_getRxData
 15543 ;;		_setControl_Lights_Table
 15544 ;;		_setRFSW_Control
 15545 ;;		_setRFSW_AdjControl
 15546 ;; This function uses a non-reentrant model
 15547 ;;
 15548                           
 15549                           
 15550                           ;psect for function _setTxData
 15551  0E7F                     _setTxData:	
 15552                           
 15553                           ;RF_Control_B1.c: 184: char i;
 15554                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15555                           
 15556                           ;incstack = 0
 15557                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15558  0E7F  0021               	movlb	1	; select bank1
 15559  0E80  1C20               	btfss	_RF1^(0+128),0
 15560  0E81  0008               	return
 15561                           
 15562                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15563  0E82  1520               	bsf	_RF1^(0+128),2
 15564                           
 15565                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15566  0E83  01A3               	clrf	(_RF1^(0+128)+3)
 15567  0E84  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15568                           
 15569                           ;RF_Control_B1.c: 218: RF_Data[0] = 0x63;
 15570  0E85  3063               	movlw	99
 15571  0E86  0020               	movlb	0	; select bank0
 15572  0E87  00A0               	movwf	??_setTxData
 15573  0E88  0820               	movf	??_setTxData,w
 15574  0E89  0023               	movlb	3	; select bank3
 15575  0E8A  00A0               	movwf	_RF_Data^(0+384)
 15576                           
 15577                           ;RF_Control_B1.c: 219: RF_Data[1] = 0x02;
 15578  0E8B  3002               	movlw	2
 15579  0E8C  0020               	movlb	0	; select bank0
 15580  0E8D  00A0               	movwf	??_setTxData
 15581  0E8E  0820               	movf	??_setTxData,w
 15582  0E8F  0023               	movlb	3	; select bank3
 15583  0E90  00A1               	movwf	(_RF_Data^(0+384)+1)
 15584                           
 15585                           ;RF_Control_B1.c: 221: RF_Data[2] = product->Data[2];
 15586  0E91  0021               	movlb	1	; select bank1
 15587  0E92  086E               	movf	_product^(0+128),w
 15588  0E93  0086               	movwf	6
 15589  0E94  3002               	movlw	2	; select bank4/5
 15590  0E95  0087               	movwf	7
 15591  0E96  3002               	movlw	2	; select bank4/5
 15592  0E97  3F42               	moviw [2]fsr1
 15593  0E98  0023               	movlb	3	; select bank3
 15594  0E99  00A2               	movwf	(_RF_Data^(0+384)+2)
 15595                           
 15596                           ;RF_Control_B1.c: 222: RF_Data[3] = product->Data[3];
 15597  0E9A  0021               	movlb	1	; select bank1
 15598  0E9B  086E               	movf	_product^(0+128),w
 15599  0E9C  0086               	movwf	6
 15600  0E9D  3002               	movlw	2	; select bank4/5
 15601  0E9E  0087               	movwf	7
 15602  0E9F  3002               	movlw	2	; select bank4/5
 15603  0EA0  3F43               	moviw [3]fsr1
 15604  0EA1  0023               	movlb	3	; select bank3
 15605  0EA2  00A3               	movwf	(_RF_Data^(0+384)+3)
 15606                           
 15607                           ;RF_Control_B1.c: 223: RF_Data[4] = product->Data[4];
 15608  0EA3  0021               	movlb	1	; select bank1
 15609  0EA4  086E               	movf	_product^(0+128),w
 15610  0EA5  0086               	movwf	6
 15611  0EA6  3002               	movlw	2	; select bank4/5
 15612  0EA7  0087               	movwf	7
 15613  0EA8  3002               	movlw	2	; select bank4/5
 15614  0EA9  3F44               	moviw [4]fsr1
 15615  0EAA  0023               	movlb	3	; select bank3
 15616  0EAB  00A4               	movwf	(_RF_Data^(0+384)+4)
 15617                           
 15618                           ;RF_Control_B1.c: 224: RF_Data[5] = product->Data[5];
 15619  0EAC  0021               	movlb	1	; select bank1
 15620  0EAD  086E               	movf	_product^(0+128),w
 15621  0EAE  0086               	movwf	6
 15622  0EAF  3002               	movlw	2	; select bank4/5
 15623  0EB0  0087               	movwf	7
 15624  0EB1  3002               	movlw	2	; select bank4/5
 15625  0EB2  3F45               	moviw [5]fsr1
 15626  0EB3  0023               	movlb	3	; select bank3
 15627  0EB4  00A5               	movwf	(_RF_Data^(0+384)+5)
 15628                           
 15629                           ;RF_Control_B1.c: 225: RF_Data[6] = product->Data[6];
 15630  0EB5  0021               	movlb	1	; select bank1
 15631  0EB6  086E               	movf	_product^(0+128),w
 15632  0EB7  0086               	movwf	6
 15633  0EB8  3002               	movlw	2	; select bank4/5
 15634  0EB9  0087               	movwf	7
 15635  0EBA  3002               	movlw	2	; select bank4/5
 15636  0EBB  3F46               	moviw [6]fsr1
 15637  0EBC  0023               	movlb	3	; select bank3
 15638  0EBD  00A6               	movwf	(_RF_Data^(0+384)+6)
 15639                           
 15640                           ;RF_Control_B1.c: 226: RF_Data[7] = product->Data[7];
 15641  0EBE  0021               	movlb	1	; select bank1
 15642  0EBF  086E               	movf	_product^(0+128),w
 15643  0EC0  0086               	movwf	6
 15644  0EC1  3002               	movlw	2	; select bank4/5
 15645  0EC2  0087               	movwf	7
 15646  0EC3  3002               	movlw	2	; select bank4/5
 15647  0EC4  3F47               	moviw [7]fsr1
 15648  0EC5  0023               	movlb	3	; select bank3
 15649  0EC6  00A7               	movwf	(_RF_Data^(0+384)+7)
 15650                           
 15651                           ;RF_Control_B1.c: 227: RF_Data[8] = product->Data[8];
 15652  0EC7  0021               	movlb	1	; select bank1
 15653  0EC8  086E               	movf	_product^(0+128),w
 15654  0EC9  0086               	movwf	6
 15655  0ECA  3002               	movlw	2	; select bank4/5
 15656  0ECB  0087               	movwf	7
 15657  0ECC  3002               	movlw	2	; select bank4/5
 15658  0ECD  3F48               	moviw [8]fsr1
 15659  0ECE  0023               	movlb	3	; select bank3
 15660  0ECF  00A8               	movwf	(_RF_Data^(0+384)+8)
 15661                           
 15662                           ;RF_Control_B1.c: 228: RF_Data[9] = product->Data[9];
 15663  0ED0  0021               	movlb	1	; select bank1
 15664  0ED1  086E               	movf	_product^(0+128),w
 15665  0ED2  0086               	movwf	6
 15666  0ED3  3002               	movlw	2	; select bank4/5
 15667  0ED4  0087               	movwf	7
 15668  0ED5  3002               	movlw	2	; select bank4/5
 15669  0ED6  3F49               	moviw [9]fsr1
 15670  0ED7  0023               	movlb	3	; select bank3
 15671  0ED8  00A9               	movwf	(_RF_Data^(0+384)+9)
 15672                           
 15673                           ;RF_Control_B1.c: 229: RF_Data[10] = product->Data[10];
 15674  0ED9  0021               	movlb	1	; select bank1
 15675  0EDA  086E               	movf	_product^(0+128),w
 15676  0EDB  0086               	movwf	6
 15677  0EDC  3002               	movlw	2	; select bank4/5
 15678  0EDD  0087               	movwf	7
 15679  0EDE  3002               	movlw	2	; select bank4/5
 15680  0EDF  3F4A               	moviw [10]fsr1
 15681  0EE0  0023               	movlb	3	; select bank3
 15682  0EE1  00AA               	movwf	(_RF_Data^(0+384)+10)
 15683                           
 15684                           ;RF_Control_B1.c: 230: RF_Data[11] = product->Data[11];
 15685  0EE2  0021               	movlb	1	; select bank1
 15686  0EE3  086E               	movf	_product^(0+128),w
 15687  0EE4  0086               	movwf	6
 15688  0EE5  3002               	movlw	2	; select bank4/5
 15689  0EE6  0087               	movwf	7
 15690  0EE7  3002               	movlw	2	; select bank4/5
 15691  0EE8  3F4B               	moviw [11]fsr1
 15692  0EE9  0023               	movlb	3	; select bank3
 15693  0EEA  00AB               	movwf	(_RF_Data^(0+384)+11)
 15694                           
 15695                           ;RF_Control_B1.c: 231: RF_Data[12] = product->Data[12];
 15696  0EEB  0021               	movlb	1	; select bank1
 15697  0EEC  086E               	movf	_product^(0+128),w
 15698  0EED  0086               	movwf	6
 15699  0EEE  3002               	movlw	2	; select bank4/5
 15700  0EEF  0087               	movwf	7
 15701  0EF0  3002               	movlw	2	; select bank4/5
 15702  0EF1  3F4C               	moviw [12]fsr1
 15703  0EF2  0023               	movlb	3	; select bank3
 15704  0EF3  00AC               	movwf	(_RF_Data^(0+384)+12)
 15705                           
 15706                           ;RF_Control_B1.c: 232: RF_Data[13] = product->Data[13];
 15707  0EF4  0021               	movlb	1	; select bank1
 15708  0EF5  086E               	movf	_product^(0+128),w
 15709  0EF6  0086               	movwf	6
 15710  0EF7  3002               	movlw	2	; select bank4/5
 15711  0EF8  0087               	movwf	7
 15712  0EF9  3002               	movlw	2	; select bank4/5
 15713  0EFA  3F4D               	moviw [13]fsr1
 15714  0EFB  0023               	movlb	3	; select bank3
 15715  0EFC  00AD               	movwf	(_RF_Data^(0+384)+13)
 15716                           
 15717                           ;RF_Control_B1.c: 233: RF_Data[14] = product->Data[14];
 15718  0EFD  0021               	movlb	1	; select bank1
 15719  0EFE  086E               	movf	_product^(0+128),w
 15720  0EFF  0086               	movwf	6
 15721  0F00  3002               	movlw	2	; select bank4/5
 15722  0F01  0087               	movwf	7
 15723  0F02  3002               	movlw	2	; select bank4/5
 15724  0F03  3F4E               	moviw [14]fsr1
 15725  0F04  0023               	movlb	3	; select bank3
 15726  0F05  00AE               	movwf	(_RF_Data^(0+384)+14)
 15727                           
 15728                           ;RF_Control_B1.c: 234: RF_Data[15] = product->Data[15];
 15729  0F06  0021               	movlb	1	; select bank1
 15730  0F07  086E               	movf	_product^(0+128),w
 15731  0F08  0086               	movwf	6
 15732  0F09  3002               	movlw	2	; select bank4/5
 15733  0F0A  0087               	movwf	7
 15734  0F0B  3002               	movlw	2	; select bank4/5
 15735  0F0C  3F4F               	moviw [15]fsr1
 15736  0F0D  0023               	movlb	3	; select bank3
 15737  0F0E  00AF               	movwf	(_RF_Data^(0+384)+15)
 15738                           
 15739                           ;RF_Control_B1.c: 235: RF_Data[16] = product->Data[16];
 15740  0F0F  0021               	movlb	1	; select bank1
 15741  0F10  086E               	movf	_product^(0+128),w
 15742  0F11  0086               	movwf	6
 15743  0F12  3002               	movlw	2	; select bank4/5
 15744  0F13  0087               	movwf	7
 15745  0F14  3002               	movlw	2	; select bank4/5
 15746  0F15  3F50               	moviw [16]fsr1
 15747  0F16  0023               	movlb	3	; select bank3
 15748  0F17  00B0               	movwf	(_RF_Data^(0+384)+16)
 15749                           
 15750                           ;RF_Control_B1.c: 236: RF_Data[17] = product->Data[17];
 15751  0F18  0021               	movlb	1	; select bank1
 15752  0F19  086E               	movf	_product^(0+128),w
 15753  0F1A  0086               	movwf	6
 15754  0F1B  3002               	movlw	2	; select bank4/5
 15755  0F1C  0087               	movwf	7
 15756  0F1D  3002               	movlw	2	; select bank4/5
 15757  0F1E  3F51               	moviw [17]fsr1
 15758  0F1F  0023               	movlb	3	; select bank3
 15759  0F20  00B1               	movwf	(_RF_Data^(0+384)+17)
 15760                           
 15761                           ;RF_Control_B1.c: 237: RF_Data[18] = product->Data[18];
 15762  0F21  0021               	movlb	1	; select bank1
 15763  0F22  086E               	movf	_product^(0+128),w
 15764  0F23  0086               	movwf	6
 15765  0F24  3002               	movlw	2	; select bank4/5
 15766  0F25  0087               	movwf	7
 15767  0F26  3002               	movlw	2	; select bank4/5
 15768  0F27  3F52               	moviw [18]fsr1
 15769  0F28  0023               	movlb	3	; select bank3
 15770  0F29  00B2               	movwf	(_RF_Data^(0+384)+18)
 15771                           
 15772                           ;RF_Control_B1.c: 238: RF_Data[19] = product->Data[19];
 15773  0F2A  0021               	movlb	1	; select bank1
 15774  0F2B  086E               	movf	_product^(0+128),w
 15775  0F2C  0086               	movwf	6
 15776  0F2D  3002               	movlw	2	; select bank4/5
 15777  0F2E  0087               	movwf	7
 15778  0F2F  3002               	movlw	2	; select bank4/5
 15779  0F30  3F53               	moviw [19]fsr1
 15780  0F31  0023               	movlb	3	; select bank3
 15781  0F32  00B3               	movwf	(_RF_Data^(0+384)+19)
 15782                           
 15783                           ;RF_Control_B1.c: 239: RF_Data[20] = 209;
 15784  0F33  30D1               	movlw	209
 15785  0F34  0020               	movlb	0	; select bank0
 15786  0F35  00A0               	movwf	??_setTxData
 15787  0F36  0820               	movf	??_setTxData,w
 15788  0F37  0023               	movlb	3	; select bank3
 15789  0F38  00B4               	movwf	(_RF_Data^(0+384)+20)
 15790  0F39  0008               	return
 15791  0F3A                     __end_of_setTxData:	
 15792                           
 15793                           	psect	text105
 15794  1C5B                     __ptext105:	
 15795 ;; *************** function _setRF_TransceiveGO *****************
 15796 ;; Defined at:
 15797 ;;		line 551 in file "../src/RF_Control_B1.c"
 15798 ;; Parameters:    Size  Location     Type
 15799 ;;  command         1    wreg     unsigned char 
 15800 ;; Auto vars:     Size  Location     Type
 15801 ;;  command         1    1[BANK0 ] unsigned char 
 15802 ;; Return value:  Size  Location     Type
 15803 ;;		None               void
 15804 ;; Registers used:
 15805 ;;		wreg, status,2, status,0
 15806 ;; Tracked objects:
 15807 ;;		On entry : 0/0
 15808 ;;		On exit  : 0/0
 15809 ;;		Unchanged: 0/0
 15810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;Total ram usage:        2 bytes
 15816 ;; Hardware stack levels used:    1
 15817 ;; Hardware stack levels required when called:    5
 15818 ;; This function calls:
 15819 ;;		Nothing
 15820 ;; This function is called by:
 15821 ;;		_setDimmerLights_Dimming
 15822 ;; This function uses a non-reentrant model
 15823 ;;
 15824                           
 15825                           
 15826                           ;psect for function _setRF_TransceiveGO
 15827  1C5B                     _setRF_TransceiveGO:	
 15828                           
 15829                           ;incstack = 0
 15830                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15831                           ;setRF_TransceiveGO@command stored from wreg
 15832  1C5B  0020               	movlb	0	; select bank0
 15833  1C5C  00A1               	movwf	setRF_TransceiveGO@command
 15834                           
 15835                           ;RF_Control_B1.c: 552: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15836  1C5D  0821               	movf	setRF_TransceiveGO@command,w
 15837  1C5E  3A01               	xorlw	1
 15838  1C5F  3000               	movlw	0
 15839  1C60  1903               	skipnz
 15840  1C61  3001               	movlw	1
 15841  1C62  00A0               	movwf	??_setRF_TransceiveGO
 15842  1C63  0DA0               	rlf	??_setRF_TransceiveGO,f
 15843  1C64  0DA0               	rlf	??_setRF_TransceiveGO,f
 15844  1C65  0021               	movlb	1	; select bank1
 15845  1C66  0820               	movf	_RF1^(0+128),w
 15846  1C67  0020               	movlb	0	; select bank0
 15847  1C68  0620               	xorwf	??_setRF_TransceiveGO,w
 15848  1C69  39FB               	andlw	-5
 15849  1C6A  0620               	xorwf	??_setRF_TransceiveGO,w
 15850  1C6B  0021               	movlb	1	; select bank1
 15851  1C6C  00A0               	movwf	_RF1^(0+128)
 15852  1C6D  0008               	return
 15853  1C6E                     __end_of_setRF_TransceiveGO:	
 15854                           
 15855                           	psect	text106
 15856  1730                     __ptext106:	
 15857 ;; *************** function _setRF_DimmerLights *****************
 15858 ;; Defined at:
 15859 ;;		line 536 in file "../src/RF_Control_B1.c"
 15860 ;; Parameters:    Size  Location     Type
 15861 ;;  lights          1    wreg     unsigned char 
 15862 ;;  on              1   69[BANK0 ] unsigned char 
 15863 ;; Auto vars:     Size  Location     Type
 15864 ;;  lights          1   73[BANK0 ] unsigned char 
 15865 ;;  status          1   72[BANK0 ] unsigned char 
 15866 ;; Return value:  Size  Location     Type
 15867 ;;		None               void
 15868 ;; Registers used:
 15869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15870 ;; Tracked objects:
 15871 ;;		On entry : 0/0
 15872 ;;		On exit  : 0/0
 15873 ;;		Unchanged: 0/0
 15874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15875 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15876 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15878 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;Total ram usage:        5 bytes
 15880 ;; Hardware stack levels used:    1
 15881 ;; Hardware stack levels required when called:    6
 15882 ;; This function calls:
 15883 ;;		_setProductData
 15884 ;; This function is called by:
 15885 ;;		_setDimmerLights_OnOff
 15886 ;;		_setDimmerLights_Dimming
 15887 ;;		_setRFSW_Control
 15888 ;; This function uses a non-reentrant model
 15889 ;;
 15890                           
 15891                           
 15892                           ;psect for function _setRF_DimmerLights
 15893  1730                     _setRF_DimmerLights:	
 15894                           
 15895                           ;incstack = 0
 15896                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15897                           ;setRF_DimmerLights@lights stored from wreg
 15898  1730  0020               	movlb	0	; select bank0
 15899  1731  00E9               	movwf	setRF_DimmerLights@lights
 15900                           
 15901                           ;RF_Control_B1.c: 537: char status = 1;
 15902  1732  01E8               	clrf	setRF_DimmerLights@status
 15903  1733  0AE8               	incf	setRF_DimmerLights@status,f
 15904                           
 15905                           ;RF_Control_B1.c: 538: status <<= (lights - 1);
 15906  1734  0869               	movf	setRF_DimmerLights@lights,w
 15907  1735  3EFF               	addlw	-1
 15908  1736  0A89               	incf	9,f
 15909  1737  2F3A               	goto	u5510
 15910  1738                     u5515:	
 15911  1738  1003               	clrc
 15912  1739  0DE8               	rlf	setRF_DimmerLights@status,f
 15913  173A                     u5510:	
 15914  173A  3EFF               	addlw	-1
 15915  173B  1D03               	skipz
 15916  173C  2F38               	goto	u5515
 15917                           
 15918                           ;RF_Control_B1.c: 539: setProductData(11, lights);
 15919  173D  0869               	movf	setRF_DimmerLights@lights,w
 15920  173E  00E6               	movwf	??_setRF_DimmerLights
 15921  173F  0866               	movf	??_setRF_DimmerLights,w
 15922  1740  00E2               	movwf	setProductData@value
 15923  1741  300B               	movlw	11
 15924  1742  319A  2298  3197   	fcall	_setProductData
 15925                           
 15926                           ;RF_Control_B1.c: 540: setProductData(17, product->Data[26 + lights]);
 15927  1745  0020               	movlb	0	; select bank0
 15928  1746  0869               	movf	setRF_DimmerLights@lights,w
 15929  1747  3E1A               	addlw	26
 15930  1748  0021               	movlb	1	; select bank1
 15931  1749  076E               	addwf	_product^(0+128),w
 15932  174A  0020               	movlb	0	; select bank0
 15933  174B  00E6               	movwf	??_setRF_DimmerLights
 15934  174C  0866               	movf	??_setRF_DimmerLights,w
 15935  174D  0086               	movwf	6
 15936  174E  3002               	movlw	2	; select bank4/5
 15937  174F  0087               	movwf	7
 15938  1750  0801               	movf	1,w
 15939  1751  00E7               	movwf	??_setRF_DimmerLights+1
 15940  1752  0867               	movf	??_setRF_DimmerLights+1,w
 15941  1753  00E2               	movwf	setProductData@value
 15942  1754  3011               	movlw	17
 15943  1755  319A  2298  3197   	fcall	_setProductData
 15944                           
 15945                           ;RF_Control_B1.c: 541: if (on == 1) {
 15946  1758  0020               	movlb	0	; select bank0
 15947  1759  0865               	movf	setRF_DimmerLights@on,w
 15948  175A  3A01               	xorlw	1
 15949  175B  1D03               	skipz
 15950  175C  2F7F               	goto	l6427
 15951                           
 15952                           ;RF_Control_B1.c: 542: setProductData(9, product->Data[20 + lights]);
 15953  175D  0869               	movf	setRF_DimmerLights@lights,w
 15954  175E  3E14               	addlw	20
 15955  175F  0021               	movlb	1	; select bank1
 15956  1760  076E               	addwf	_product^(0+128),w
 15957  1761  0020               	movlb	0	; select bank0
 15958  1762  00E6               	movwf	??_setRF_DimmerLights
 15959  1763  0866               	movf	??_setRF_DimmerLights,w
 15960  1764  0086               	movwf	6
 15961  1765  3002               	movlw	2	; select bank4/5
 15962  1766  0087               	movwf	7
 15963  1767  0801               	movf	1,w
 15964  1768  00E7               	movwf	??_setRF_DimmerLights+1
 15965  1769  0867               	movf	??_setRF_DimmerLights+1,w
 15966  176A  00E2               	movwf	setProductData@value
 15967  176B  3009               	movlw	9
 15968  176C  319A  2298  3197   	fcall	_setProductData
 15969                           
 15970                           ;RF_Control_B1.c: 543: setProductData(15, (product->Data[15] | status));
 15971  176F  0021               	movlb	1	; select bank1
 15972  1770  086E               	movf	_product^(0+128),w
 15973  1771  3E0F               	addlw	15
 15974  1772  0086               	movwf	6
 15975  1773  3002               	movlw	2	; select bank4/5
 15976  1774  0087               	movwf	7
 15977  1775  0801               	movf	1,w
 15978  1776  0020               	movlb	0	; select bank0
 15979  1777  0468               	iorwf	setRF_DimmerLights@status,w
 15980  1778  00E6               	movwf	??_setRF_DimmerLights
 15981  1779  0866               	movf	??_setRF_DimmerLights,w
 15982  177A  00E2               	movwf	setProductData@value
 15983  177B  300F               	movlw	15
 15984  177C  319A  2298         	fcall	_setProductData
 15985                           
 15986                           ;RF_Control_B1.c: 544: } else {
 15987  177E  0008               	return
 15988  177F                     l6427:	
 15989                           
 15990                           ;RF_Control_B1.c: 545: setProductData(9, 0x00);
 15991  177F  0020               	movlb	0	; select bank0
 15992  1780  01E2               	clrf	setProductData@value
 15993  1781  3009               	movlw	9
 15994  1782  319A  2298  3197   	fcall	_setProductData
 15995                           
 15996                           ;RF_Control_B1.c: 546: setProductData(15, (product->Data[15]&(~status)));
 15997  1785  0021               	movlb	1	; select bank1
 15998  1786  086E               	movf	_product^(0+128),w
 15999  1787  3E0F               	addlw	15
 16000  1788  0086               	movwf	6
 16001  1789  3002               	movlw	2	; select bank4/5
 16002  178A  0087               	movwf	7
 16003  178B  0020               	movlb	0	; select bank0
 16004  178C  0968               	comf	setRF_DimmerLights@status,w
 16005  178D  0501               	andwf	1,w
 16006  178E  00E6               	movwf	??_setRF_DimmerLights
 16007  178F  0866               	movf	??_setRF_DimmerLights,w
 16008  1790  00E2               	movwf	setProductData@value
 16009  1791  300F               	movlw	15
 16010  1792  319A  2298         	fcall	_setProductData
 16011  1794  0008               	return
 16012  1795                     __end_of_setRF_DimmerLights:	
 16013                           
 16014                           	psect	text107
 16015  1B88                     __ptext107:	
 16016 ;; *************** function _setDimmerLights_Line *****************
 16017 ;; Defined at:
 16018 ;;		line 1151 in file "../src/Dimmer_B1.c"
 16019 ;; Parameters:    Size  Location     Type
 16020 ;;  lights          1    wreg     unsigned char 
 16021 ;; Auto vars:     Size  Location     Type
 16022 ;;  lights          1    0[BANK0 ] unsigned char 
 16023 ;; Return value:  Size  Location     Type
 16024 ;;		None               void
 16025 ;; Registers used:
 16026 ;;		wreg
 16027 ;; Tracked objects:
 16028 ;;		On entry : 0/0
 16029 ;;		On exit  : 0/0
 16030 ;;		Unchanged: 0/0
 16031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16035 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;Total ram usage:        1 bytes
 16037 ;; Hardware stack levels used:    1
 16038 ;; Hardware stack levels required when called:    5
 16039 ;; This function calls:
 16040 ;;		Nothing
 16041 ;; This function is called by:
 16042 ;;		_setDimmerLights_OnOff
 16043 ;;		_setDimmerLights_Dimming
 16044 ;; This function uses a non-reentrant model
 16045 ;;
 16046                           
 16047                           
 16048                           ;psect for function _setDimmerLights_Line
 16049  1B88                     _setDimmerLights_Line:	
 16050                           
 16051                           ;incstack = 0
 16052                           ; Regs used in _setDimmerLights_Line: [wreg]
 16053                           ;setDimmerLights_Line@lights stored from wreg
 16054  1B88  0020               	movlb	0	; select bank0
 16055  1B89  00A0               	movwf	setDimmerLights_Line@lights
 16056                           
 16057                           ;Dimmer_B1.c: 1152: Dimmer.LoadGO = 1;
 16058  1B8A  0022               	movlb	2	; select bank2
 16059  1B8B  14AC               	bsf	_Dimmer^(0+256),1
 16060                           
 16061                           ;Dimmer_B1.c: 1154: DimmerLights1.Line = 0;
 16062  1B8C  10E1               	bcf	(_DimmerLights1^(0+256)+1),1
 16063                           
 16064                           ;Dimmer_B1.c: 1155: if (lights == 1 && lights != 0) {
 16065  1B8D  0020               	movlb	0	; select bank0
 16066  1B8E  0820               	movf	setDimmerLights_Line@lights,w
 16067  1B8F  3A01               	xorlw	1
 16068  1B90  1D03               	skipz
 16069  1B91  0008               	return
 16070  1B92  0820               	movf	setDimmerLights_Line@lights,w
 16071  1B93  1903               	btfsc	3,2
 16072  1B94  0008               	return
 16073                           
 16074                           ;Dimmer_B1.c: 1156: DimmerLights1.Line = 1;
 16075  1B95  0022               	movlb	2	; select bank2
 16076  1B96  14E1               	bsf	(_DimmerLights1^(0+256)+1),1
 16077  1B97  0020               	movlb	0	; select bank0
 16078  1B98  0008               	return
 16079  1B99                     __end_of_setDimmerLights_Line:	
 16080                           
 16081                           	psect	text108
 16082  1AA4                     __ptext108:	
 16083 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16084 ;; Defined at:
 16085 ;;		line 145 in file "../src/Dimmer_B1.c"
 16086 ;; Parameters:    Size  Location     Type
 16087 ;;  lights          1    wreg     unsigned char 
 16088 ;;  value           1   66[BANK0 ] unsigned char 
 16089 ;; Auto vars:     Size  Location     Type
 16090 ;;  lights          1   68[BANK0 ] unsigned char 
 16091 ;; Return value:  Size  Location     Type
 16092 ;;		None               void
 16093 ;; Registers used:
 16094 ;;		wreg
 16095 ;; Tracked objects:
 16096 ;;		On entry : 0/0
 16097 ;;		On exit  : 0/0
 16098 ;;		Unchanged: 0/0
 16099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16100 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16103 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;Total ram usage:        3 bytes
 16105 ;; Hardware stack levels used:    1
 16106 ;; Hardware stack levels required when called:    5
 16107 ;; This function calls:
 16108 ;;		Nothing
 16109 ;; This function is called by:
 16110 ;;		_setDimmerLights_OnOff
 16111 ;;		_setDimmerLights_Dimming
 16112 ;;		_setRFSW_AdjControl
 16113 ;;		_DimmerLights_AssignationDimming
 16114 ;; This function uses a non-reentrant model
 16115 ;;
 16116                           
 16117                           
 16118                           ;psect for function _setDimmerIntr_MaxmumValue
 16119  1AA4                     _setDimmerIntr_MaxmumValue:	
 16120                           
 16121                           ;incstack = 0
 16122                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16123                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16124  1AA4  0020               	movlb	0	; select bank0
 16125  1AA5  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16126                           
 16127                           ;Dimmer_B1.c: 147: if (lights == 1) {
 16128  1AA6  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16129  1AA7  3A01               	xorlw	1
 16130  1AA8  1D03               	skipz
 16131  1AA9  0008               	return
 16132                           
 16133                           ;Dimmer_B1.c: 148: DimmerIntr1.MaxmumValue = value;
 16134  1AAA  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16135  1AAB  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16136  1AAC  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16137  1AAD  0021               	movlb	1	; select bank1
 16138  1AAE  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16139  1AAF  0008               	return
 16140  1AB0                     __end_of_setDimmerIntr_MaxmumValue:	
 16141                           
 16142                           	psect	text109
 16143  1D25                     __ptext109:	
 16144 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16145 ;; Defined at:
 16146 ;;		line 221 in file "../src/Dimmer_B1.c"
 16147 ;; Parameters:    Size  Location     Type
 16148 ;;  lights          1    wreg     unsigned char 
 16149 ;;  command         1    0[BANK0 ] unsigned char 
 16150 ;; Auto vars:     Size  Location     Type
 16151 ;;  lights          1    2[BANK0 ] unsigned char 
 16152 ;; Return value:  Size  Location     Type
 16153 ;;		None               void
 16154 ;; Registers used:
 16155 ;;		wreg, status,2, status,0
 16156 ;; Tracked objects:
 16157 ;;		On entry : 0/0
 16158 ;;		On exit  : 0/0
 16159 ;;		Unchanged: 0/0
 16160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16161 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;Total ram usage:        3 bytes
 16166 ;; Hardware stack levels used:    1
 16167 ;; Hardware stack levels required when called:    5
 16168 ;; This function calls:
 16169 ;;		Nothing
 16170 ;; This function is called by:
 16171 ;;		_setDimmerLights_Dimming
 16172 ;;		_setDimmerLights_DimmingClose
 16173 ;; This function uses a non-reentrant model
 16174 ;;
 16175                           
 16176                           
 16177                           ;psect for function _setDimmerIntr_Dimming_Sw
 16178  1D25                     _setDimmerIntr_Dimming_Sw:	
 16179                           
 16180                           ;incstack = 0
 16181                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16182                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16183  1D25  0020               	movlb	0	; select bank0
 16184  1D26  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16185                           
 16186                           ;Dimmer_B1.c: 223: if (lights == 1) {
 16187  1D27  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16188  1D28  3A01               	xorlw	1
 16189  1D29  1D03               	skipz
 16190  1D2A  0008               	return
 16191                           
 16192                           ;Dimmer_B1.c: 224: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16193  1D2B  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16194  1D2C  3A01               	xorlw	1
 16195  1D2D  3000               	movlw	0
 16196  1D2E  1903               	skipnz
 16197  1D2F  3001               	movlw	1
 16198  1D30  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16199  1D31  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16200  1D32  0021               	movlb	1	; select bank1
 16201  1D33  083C               	movf	_DimmerIntr1^(0+128),w
 16202  1D34  0020               	movlb	0	; select bank0
 16203  1D35  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16204  1D36  39EF               	andlw	-17
 16205  1D37  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16206  1D38  0021               	movlb	1	; select bank1
 16207  1D39  00BC               	movwf	_DimmerIntr1^(0+128)
 16208  1D3A  0008               	return
 16209  1D3B                     __end_of_setDimmerIntr_Dimming_Sw:	
 16210                           
 16211                           	psect	text110
 16212  1B49                     __ptext110:	
 16213 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16214 ;; Defined at:
 16215 ;;		line 125 in file "../src/Dimmer_B1.c"
 16216 ;; Parameters:    Size  Location     Type
 16217 ;;  lights          1    wreg     unsigned char 
 16218 ;; Auto vars:     Size  Location     Type
 16219 ;;  lights          1    1[BANK0 ] unsigned char 
 16220 ;;  value           1    2[BANK0 ] unsigned char 
 16221 ;; Return value:  Size  Location     Type
 16222 ;;                  1    wreg      unsigned char 
 16223 ;; Registers used:
 16224 ;;		wreg, status,2
 16225 ;; Tracked objects:
 16226 ;;		On entry : 0/0
 16227 ;;		On exit  : 0/0
 16228 ;;		Unchanged: 0/0
 16229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;Total ram usage:        3 bytes
 16235 ;; Hardware stack levels used:    1
 16236 ;; Hardware stack levels required when called:    5
 16237 ;; This function calls:
 16238 ;;		Nothing
 16239 ;; This function is called by:
 16240 ;;		_setDimmerLights_Dimming
 16241 ;; This function uses a non-reentrant model
 16242 ;;
 16243                           
 16244                           
 16245                           ;psect for function _getDimmerIntr_DimmingValue
 16246  1B49                     _getDimmerIntr_DimmingValue:	
 16247                           
 16248                           ;incstack = 0
 16249                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16250                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16251  1B49  0020               	movlb	0	; select bank0
 16252  1B4A  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 16253                           
 16254                           ;Dimmer_B1.c: 126: char value = 0;
 16255  1B4B  01A2               	clrf	getDimmerIntr_DimmingValue@value
 16256                           
 16257                           ;Dimmer_B1.c: 128: if (lights == 1) {
 16258  1B4C  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 16259  1B4D  3A01               	xorlw	1
 16260  1B4E  1D03               	skipz
 16261  1B4F  2B56               	goto	l707
 16262                           
 16263                           ;Dimmer_B1.c: 129: value = DimmerIntr1.DimmingValue;
 16264  1B50  0021               	movlb	1	; select bank1
 16265  1B51  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16266  1B52  0020               	movlb	0	; select bank0
 16267  1B53  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16268  1B54  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16269  1B55  00A2               	movwf	getDimmerIntr_DimmingValue@value
 16270  1B56                     l707:	
 16271                           
 16272                           ;Dimmer_B1.c: 130: }
 16273                           ;Dimmer_B1.c: 142: return value;
 16274  1B56  0822               	movf	getDimmerIntr_DimmingValue@value,w
 16275  1B57  0008               	return
 16276  1B58                     __end_of_getDimmerIntr_DimmingValue:	
 16277                           
 16278                           	psect	text111
 16279  1D0F                     __ptext111:	
 16280 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16281 ;; Defined at:
 16282 ;;		line 1112 in file "../src/Dimmer_B1.c"
 16283 ;; Parameters:    Size  Location     Type
 16284 ;;  lights          1    wreg     unsigned char 
 16285 ;; Auto vars:     Size  Location     Type
 16286 ;;  lights          1    0[COMMON] unsigned char 
 16287 ;;  allow           1    2[BANK0 ] unsigned char 
 16288 ;; Return value:  Size  Location     Type
 16289 ;;                  1    wreg      unsigned char 
 16290 ;; Registers used:
 16291 ;;		wreg, status,2, pclath, cstack
 16292 ;; Tracked objects:
 16293 ;;		On entry : 0/0
 16294 ;;		On exit  : 0/0
 16295 ;;		Unchanged: 0/0
 16296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;Total ram usage:        3 bytes
 16302 ;; Hardware stack levels used:    1
 16303 ;; Hardware stack levels required when called:    6
 16304 ;; This function calls:
 16305 ;;		_getLoad_OK
 16306 ;; This function is called by:
 16307 ;;		_setDimmerLights_Main
 16308 ;; This function uses a non-reentrant model
 16309 ;;
 16310                           
 16311                           
 16312                           ;psect for function _getDimmerLights_Allow_Condition
 16313  1D0F                     _getDimmerLights_Allow_Condition:	
 16314                           
 16315                           ;Dimmer_B1.c: 1113: char allow = 0;
 16316                           
 16317                           ;incstack = 0
 16318                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16319  1D0F  0020               	movlb	0	; select bank0
 16320  1D10  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 16321                           
 16322                           ;Dimmer_B1.c: 1119: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16323  1D11  01A3               	clrf	_getDimmerLights_Allow_Condition$2524
 16324  1D12  0AA3               	incf	_getDimmerLights_Allow_Condition$2524,f
 16325  1D13  319A  2222  319D   	fcall	_getLoad_OK
 16326  1D16  3800               	iorlw	0
 16327  1D17  1D03               	skipz
 16328  1D18  2D1E               	goto	l7071
 16329  1D19  0022               	movlb	2	; select bank2
 16330  1D1A  18AC               	btfsc	_Dimmer^(0+256),1
 16331  1D1B  2D1E               	goto	l7071
 16332  1D1C  0020               	movlb	0	; select bank0
 16333  1D1D  01A3               	clrf	_getDimmerLights_Allow_Condition$2524
 16334  1D1E                     l7071:	
 16335  1D1E  0020               	movlb	0	; select bank0
 16336  1D1F  0823               	movf	_getDimmerLights_Allow_Condition$2524,w
 16337  1D20  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16338  1D21  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16339  1D22  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 16340                           
 16341                           ;Dimmer_B1.c: 1146: return allow;
 16342  1D23  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 16343  1D24  0008               	return
 16344  1D25                     __end_of_getDimmerLights_Allow_Condition:	
 16345                           
 16346                           	psect	text112
 16347  1A22                     __ptext112:	
 16348 ;; *************** function _getLoad_OK *****************
 16349 ;; Defined at:
 16350 ;;		line 274 in file "../src/OverLoad_B1.c"
 16351 ;; Parameters:    Size  Location     Type
 16352 ;;		None
 16353 ;; Auto vars:     Size  Location     Type
 16354 ;;  ok              1    0[BANK0 ] unsigned char 
 16355 ;; Return value:  Size  Location     Type
 16356 ;;                  1    wreg      unsigned char 
 16357 ;; Registers used:
 16358 ;;		wreg, status,2
 16359 ;; Tracked objects:
 16360 ;;		On entry : 0/0
 16361 ;;		On exit  : 0/0
 16362 ;;		Unchanged: 0/0
 16363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16368 ;;Total ram usage:        1 bytes
 16369 ;; Hardware stack levels used:    1
 16370 ;; Hardware stack levels required when called:    5
 16371 ;; This function calls:
 16372 ;;		Nothing
 16373 ;; This function is called by:
 16374 ;;		_DimmerLights_Main
 16375 ;;		_getDimmerLights_Allow_Condition
 16376 ;; This function uses a non-reentrant model
 16377 ;;
 16378                           
 16379                           
 16380                           ;psect for function _getLoad_OK
 16381  1A22                     _getLoad_OK:	
 16382                           
 16383                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16384                           
 16385                           ;incstack = 0
 16386                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16387  1A22  3000               	movlw	0
 16388  1A23  0022               	movlb	2	; select bank2
 16389  1A24  1BB8               	btfsc	_Load^(0+256),7
 16390  1A25  3001               	movlw	1
 16391  1A26  0020               	movlb	0	; select bank0
 16392  1A27  00A0               	movwf	getLoad_OK@ok
 16393                           
 16394                           ;OverLoad_B1.c: 276: return ok;
 16395  1A28  0820               	movf	getLoad_OK@ok,w
 16396  1A29  0008               	return
 16397  1A2A                     __end_of_getLoad_OK:	
 16398                           
 16399                           	psect	text113
 16400  1048                     __ptext113:	
 16401 ;; *************** function _getMain_All_Error_Status *****************
 16402 ;; Defined at:
 16403 ;;		line 424 in file "../src/Main_B1.c"
 16404 ;; Parameters:    Size  Location     Type
 16405 ;;  command         1    wreg     unsigned char 
 16406 ;; Auto vars:     Size  Location     Type
 16407 ;;  command         1    5[BANK0 ] unsigned char 
 16408 ;;  status          1    6[BANK0 ] unsigned char 
 16409 ;; Return value:  Size  Location     Type
 16410 ;;                  1    wreg      unsigned char 
 16411 ;; Registers used:
 16412 ;;		wreg, status,2, status,0
 16413 ;; Tracked objects:
 16414 ;;		On entry : 0/0
 16415 ;;		On exit  : 0/0
 16416 ;;		Unchanged: 0/0
 16417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;Total ram usage:        7 bytes
 16423 ;; Hardware stack levels used:    1
 16424 ;; Hardware stack levels required when called:    5
 16425 ;; This function calls:
 16426 ;;		Nothing
 16427 ;; This function is called by:
 16428 ;;		_DimmerLights_Main
 16429 ;;		_Exception_Main
 16430 ;;		_Load_Main
 16431 ;;		_setTemp_Main
 16432 ;;		_getRxData
 16433 ;;		_setSw_Main
 16434 ;; This function uses a non-reentrant model
 16435 ;;
 16436                           
 16437                           
 16438                           ;psect for function _getMain_All_Error_Status
 16439  1048                     _getMain_All_Error_Status:	
 16440                           
 16441                           ;incstack = 0
 16442                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16443                           ;getMain_All_Error_Status@command stored from wreg
 16444  1048  0020               	movlb	0	; select bank0
 16445  1049  00A5               	movwf	getMain_All_Error_Status@command
 16446                           
 16447                           ;Main_B1.c: 425: char status = 0;
 16448  104A  01A6               	clrf	getMain_All_Error_Status@status
 16449                           
 16450                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16451  104B  08A6               	movf	getMain_All_Error_Status@status,f
 16452  104C  1D03               	skipz
 16453  104D  2862               	goto	l6781
 16454  104E  0825               	movf	getMain_All_Error_Status@command,w
 16455  104F  3A02               	xorlw	2
 16456  1050  1903               	skipnz
 16457  1051  2862               	goto	l6781
 16458                           
 16459                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16460  1052  0021               	movlb	1	; select bank1
 16461  1053  18D8               	btfsc	_Temp^(0+128),1
 16462  1054  2859               	goto	l6779
 16463  1055  0020               	movlb	0	; select bank0
 16464  1056  01A1               	clrf	_getMain_All_Error_Status$3963
 16465  1057  01A2               	clrf	_getMain_All_Error_Status$3963+1
 16466  1058  285E               	goto	l1518
 16467  1059                     l6779:	
 16468  1059  3002               	movlw	2
 16469  105A  0020               	movlb	0	; select bank0
 16470  105B  00A1               	movwf	_getMain_All_Error_Status$3963
 16471  105C  3000               	movlw	0
 16472  105D  00A2               	movwf	_getMain_All_Error_Status$3963+1
 16473  105E                     l1518:	
 16474  105E  0821               	movf	_getMain_All_Error_Status$3963,w
 16475  105F  00A0               	movwf	??_getMain_All_Error_Status
 16476  1060  0820               	movf	??_getMain_All_Error_Status,w
 16477  1061  00A6               	movwf	getMain_All_Error_Status@status
 16478  1062                     l6781:	
 16479                           
 16480                           ;Main_B1.c: 438: }
 16481                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16482  1062  08A6               	movf	getMain_All_Error_Status@status,f
 16483  1063  1D03               	skipz
 16484  1064  2879               	goto	l1519
 16485  1065  0825               	movf	getMain_All_Error_Status@command,w
 16486  1066  3A03               	xorlw	3
 16487  1067  1903               	skipnz
 16488  1068  2879               	goto	l1519
 16489                           
 16490                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16491  1069  0022               	movlb	2	; select bank2
 16492  106A  1AB8               	btfsc	_Load^(0+256),5
 16493  106B  2870               	goto	l6789
 16494  106C  0020               	movlb	0	; select bank0
 16495  106D  01A3               	clrf	_getMain_All_Error_Status$3964
 16496  106E  01A4               	clrf	_getMain_All_Error_Status$3964+1
 16497  106F  2875               	goto	l1523
 16498  1070                     l6789:	
 16499  1070  3003               	movlw	3
 16500  1071  0020               	movlb	0	; select bank0
 16501  1072  00A3               	movwf	_getMain_All_Error_Status$3964
 16502  1073  3000               	movlw	0
 16503  1074  00A4               	movwf	_getMain_All_Error_Status$3964+1
 16504  1075                     l1523:	
 16505  1075  0823               	movf	_getMain_All_Error_Status$3964,w
 16506  1076  00A0               	movwf	??_getMain_All_Error_Status
 16507  1077  0820               	movf	??_getMain_All_Error_Status,w
 16508  1078  00A6               	movwf	getMain_All_Error_Status@status
 16509  1079                     l1519:	
 16510                           
 16511                           ;Main_B1.c: 445: }
 16512                           ;Main_B1.c: 455: return status;
 16513  1079  0826               	movf	getMain_All_Error_Status@status,w
 16514  107A  0008               	return
 16515  107B                     __end_of_getMain_All_Error_Status:	
 16516                           
 16517                           	psect	text114
 16518  130A                     __ptext114:	
 16519 ;; *************** function _DimmerLights_DimmingFunction *****************
 16520 ;; Defined at:
 16521 ;;		line 1857 in file "../src/Dimmer_B1.c"
 16522 ;; Parameters:    Size  Location     Type
 16523 ;;  lights          1    wreg     unsigned char 
 16524 ;; Auto vars:     Size  Location     Type
 16525 ;;  lights          1    1[BANK0 ] unsigned char 
 16526 ;; Return value:  Size  Location     Type
 16527 ;;		None               void
 16528 ;; Registers used:
 16529 ;;		wreg, status,2, status,0
 16530 ;; Tracked objects:
 16531 ;;		On entry : 0/0
 16532 ;;		On exit  : 0/0
 16533 ;;		Unchanged: 0/0
 16534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16539 ;;Total ram usage:        2 bytes
 16540 ;; Hardware stack levels used:    1
 16541 ;; Hardware stack levels required when called:    5
 16542 ;; This function calls:
 16543 ;;		Nothing
 16544 ;; This function is called by:
 16545 ;;		_DimmerLights_Main
 16546 ;; This function uses a non-reentrant model
 16547 ;;
 16548                           
 16549                           
 16550                           ;psect for function _DimmerLights_DimmingFunction
 16551  130A                     _DimmerLights_DimmingFunction:	
 16552                           
 16553                           ;incstack = 0
 16554                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0]
 16555                           ;DimmerLights_DimmingFunction@lights stored from wreg
 16556  130A  0020               	movlb	0	; select bank0
 16557  130B  00A1               	movwf	DimmerLights_DimmingFunction@lights
 16558                           
 16559                           ;Dimmer_B1.c: 1859: if (lights == 1) {
 16560  130C  0821               	movf	DimmerLights_DimmingFunction@lights,w
 16561  130D  3A01               	xorlw	1
 16562  130E  1D03               	skipz
 16563  130F  0008               	return
 16564                           
 16565                           ;Dimmer_B1.c: 1860: if (DimmerIntr1.Tune == 1) {
 16566  1310  0021               	movlb	1	; select bank1
 16567  1311  1CBC               	btfss	_DimmerIntr1^(0+128),1
 16568  1312  0008               	return
 16569                           
 16570                           ;Dimmer_B1.c: 1861: DimmerIntr1.Tune = 0;
 16571  1313  10BC               	bcf	_DimmerIntr1^(0+128),1
 16572                           
 16573                           ;Dimmer_B1.c: 1862: DimmerIntr1.TuneTime++;
 16574  1314  3001               	movlw	1
 16575  1315  0020               	movlb	0	; select bank0
 16576  1316  00A0               	movwf	??_DimmerLights_DimmingFunction
 16577  1317  0820               	movf	??_DimmerLights_DimmingFunction,w
 16578  1318  0021               	movlb	1	; select bank1
 16579  1319  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 16580                           
 16581                           ;Dimmer_B1.c: 1863: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 16582  131A  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 16583  131B  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 16584  131C  1C03               	skipc
 16585  131D  0008               	return
 16586                           
 16587                           ;Dimmer_B1.c: 1864: DimmerIntr1.TuneTime = 0;
 16588  131E  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 16589                           
 16590                           ;Dimmer_B1.c: 1865: DimmerIntr1.TuneGO = 1;
 16591  131F  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 16592                           
 16593                           ;Dimmer_B1.c: 1866: if (DimmerIntr1.Dimming_Sw == 1) {
 16594  1320  1E3C               	btfss	_DimmerIntr1^(0+128),4
 16595  1321  2B3A               	goto	l909
 16596                           
 16597                           ;Dimmer_B1.c: 1867: if (DimmerIntr1.Dimming_Status == 0) {
 16598  1322  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 16599  1323  2B31               	goto	l7477
 16600                           
 16601                           ;Dimmer_B1.c: 1868: if (DimmerIntr1.DimmingValue < ((char)(87*0.6))) {
 16602  1324  3034               	movlw	52
 16603  1325  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 16604  1326  1803               	skipnc
 16605  1327  2B2F               	goto	l911
 16606                           
 16607                           ;Dimmer_B1.c: 1869: DimmerIntr1.DimmingValue++;
 16608  1328  3001               	movlw	1
 16609  1329  0020               	movlb	0	; select bank0
 16610  132A  00A0               	movwf	??_DimmerLights_DimmingFunction
 16611  132B  0820               	movf	??_DimmerLights_DimmingFunction,w
 16612  132C  0021               	movlb	1	; select bank1
 16613  132D  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 16614                           
 16615                           ;Dimmer_B1.c: 1870: } else {
 16616  132E  0008               	return
 16617  132F                     l911:	
 16618                           
 16619                           ;Dimmer_B1.c: 1871: DimmerIntr1.Dimming_Status = 1;
 16620  132F  16BC               	bsf	_DimmerIntr1^(0+128),5
 16621                           
 16622                           ;Dimmer_B1.c: 1872: }
 16623                           ;Dimmer_B1.c: 1873: } else {
 16624  1330  0008               	return
 16625  1331                     l7477:	
 16626                           
 16627                           ;Dimmer_B1.c: 1874: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 16628  1331  3007               	movlw	7
 16629  1332  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 16630  1333  1C03               	skipc
 16631  1334  2B38               	goto	l914
 16632                           
 16633                           ;Dimmer_B1.c: 1875: DimmerIntr1.DimmingValue--;
 16634  1335  3001               	movlw	1
 16635  1336  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 16636                           
 16637                           ;Dimmer_B1.c: 1876: } else {
 16638  1337  0008               	return
 16639  1338                     l914:	
 16640                           
 16641                           ;Dimmer_B1.c: 1877: DimmerIntr1.Dimming_Status = 0;
 16642  1338  12BC               	bcf	_DimmerIntr1^(0+128),5
 16643                           
 16644                           ;Dimmer_B1.c: 1878: }
 16645                           ;Dimmer_B1.c: 1879: }
 16646                           ;Dimmer_B1.c: 1880: } else if (DimmerIntr1.Dimming_RF == 1) {
 16647  1339  0008               	return
 16648  133A                     l909:	
 16649  133A  1F3C               	btfss	_DimmerIntr1^(0+128),6
 16650  133B  0008               	return
 16651                           
 16652                           ;Dimmer_B1.c: 1881: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 16653  133C  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 16654  133D  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 16655  133E  1803               	skipnc
 16656  133F  2B47               	goto	l7485
 16657                           
 16658                           ;Dimmer_B1.c: 1882: DimmerIntr1.DimmingValue++;
 16659  1340  3001               	movlw	1
 16660  1341  0020               	movlb	0	; select bank0
 16661  1342  00A0               	movwf	??_DimmerLights_DimmingFunction
 16662  1343  0820               	movf	??_DimmerLights_DimmingFunction,w
 16663  1344  0021               	movlb	1	; select bank1
 16664  1345  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 16665                           
 16666                           ;Dimmer_B1.c: 1883: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 16667  1346  0008               	return
 16668  1347                     l7485:	
 16669  1347  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16670  1348  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 16671  1349  1803               	skipnc
 16672  134A  2B4E               	goto	l920
 16673                           
 16674                           ;Dimmer_B1.c: 1884: DimmerIntr1.DimmingValue--;
 16675  134B  3001               	movlw	1
 16676  134C  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 16677                           
 16678                           ;Dimmer_B1.c: 1885: } else {
 16679  134D  0008               	return
 16680  134E                     l920:	
 16681                           
 16682                           ;Dimmer_B1.c: 1886: DimmerIntr1.Dimming_RF = 0;
 16683  134E  133C               	bcf	_DimmerIntr1^(0+128),6
 16684  134F  0008               	return
 16685  1350                     __end_of_DimmerLights_DimmingFunction:	
 16686                           
 16687                           	psect	text115
 16688  1A0D                     __ptext115:	
 16689 ;; *************** function _DimmerLights_Initialization *****************
 16690 ;; Defined at:
 16691 ;;		line 673 in file "../src/Dimmer_B1.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;		None
 16694 ;; Auto vars:     Size  Location     Type
 16695 ;;		None
 16696 ;; Return value:  Size  Location     Type
 16697 ;;		None               void
 16698 ;; Registers used:
 16699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16700 ;; Tracked objects:
 16701 ;;		On entry : 0/0
 16702 ;;		On exit  : 0/0
 16703 ;;		Unchanged: 0/0
 16704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;Total ram usage:        0 bytes
 16710 ;; Hardware stack levels used:    1
 16711 ;; Hardware stack levels required when called:    9
 16712 ;; This function calls:
 16713 ;;		_DimmerIntr_Initialization
 16714 ;;		_setDimmerLights_Initialization
 16715 ;; This function is called by:
 16716 ;;		_main
 16717 ;; This function uses a non-reentrant model
 16718 ;;
 16719                           
 16720                           
 16721                           ;psect for function _DimmerLights_Initialization
 16722  1A0D                     _DimmerLights_Initialization:	
 16723                           
 16724                           ;Dimmer_B1.c: 675: setDimmerLights_Initialization(1);
 16725                           
 16726                           ;incstack = 0
 16727                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16728  1A0D  3001               	movlw	1
 16729  1A0E  3199  21B5  319A   	fcall	_setDimmerLights_Initialization
 16730                           
 16731                           ;Dimmer_B1.c: 685: DimmerIntr_Initialization();
 16732  1A11  3195  2543         	fcall	_DimmerIntr_Initialization
 16733  1A13  0008               	return
 16734  1A14                     __end_of_DimmerLights_Initialization:	
 16735                           
 16736                           	psect	text116
 16737  19B5                     __ptext116:	
 16738 ;; *************** function _setDimmerLights_Initialization *****************
 16739 ;; Defined at:
 16740 ;;		line 689 in file "../src/Dimmer_B1.c"
 16741 ;; Parameters:    Size  Location     Type
 16742 ;;  lights          1    wreg     unsigned char 
 16743 ;; Auto vars:     Size  Location     Type
 16744 ;;  lights          1    0[COMMON] unsigned char 
 16745 ;; Return value:  Size  Location     Type
 16746 ;;		None               void
 16747 ;; Registers used:
 16748 ;;		wreg
 16749 ;; Tracked objects:
 16750 ;;		On entry : 0/0
 16751 ;;		On exit  : 0/0
 16752 ;;		Unchanged: 0/0
 16753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16758 ;;Total ram usage:        0 bytes
 16759 ;; Hardware stack levels used:    1
 16760 ;; Hardware stack levels required when called:    5
 16761 ;; This function calls:
 16762 ;;		Nothing
 16763 ;; This function is called by:
 16764 ;;		_DimmerLights_Initialization
 16765 ;; This function uses a non-reentrant model
 16766 ;;
 16767                           
 16768                           
 16769                           ;psect for function _setDimmerLights_Initialization
 16770  19B5                     _setDimmerLights_Initialization:	
 16771                           
 16772                           ;incstack = 0
 16773                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16774  19B5  0008               	return
 16775  19B6                     __end_of_setDimmerLights_Initialization:	
 16776                           
 16777                           	psect	text117
 16778  1543                     __ptext117:	
 16779 ;; *************** function _DimmerIntr_Initialization *****************
 16780 ;; Defined at:
 16781 ;;		line 7 in file "../src/Dimmer_B1.c"
 16782 ;; Parameters:    Size  Location     Type
 16783 ;;		None
 16784 ;; Auto vars:     Size  Location     Type
 16785 ;;		None
 16786 ;; Return value:  Size  Location     Type
 16787 ;;		None               void
 16788 ;; Registers used:
 16789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16790 ;; Tracked objects:
 16791 ;;		On entry : 0/0
 16792 ;;		On exit  : 0/0
 16793 ;;		Unchanged: 0/0
 16794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16797 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16798 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16799 ;;Total ram usage:        2 bytes
 16800 ;; Hardware stack levels used:    1
 16801 ;; Hardware stack levels required when called:    8
 16802 ;; This function calls:
 16803 ;;		_Division
 16804 ;;		_getDimmerLights_PercentToValue
 16805 ;;		_getDimmerLights_ValueToPercent
 16806 ;;		_setMemory_Modify
 16807 ;; This function is called by:
 16808 ;;		_DimmerLights_Initialization
 16809 ;; This function uses a non-reentrant model
 16810 ;;
 16811                           
 16812                           
 16813                           ;psect for function _DimmerIntr_Initialization
 16814  1543                     _DimmerIntr_Initialization:	
 16815                           
 16816                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 16817                           
 16818                           ;incstack = 0
 16819                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16820  1543  3003               	movlw	3
 16821  1544  0020               	movlb	0	; select bank0
 16822  1545  00E2               	movwf	??_DimmerIntr_Initialization
 16823  1546  0862               	movf	??_DimmerIntr_Initialization,w
 16824  1547  0021               	movlb	1	; select bank1
 16825  1548  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16826                           
 16827                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(87*0.6));
 16828  1549  3034               	movlw	52
 16829  154A  0020               	movlb	0	; select bank0
 16830  154B  00E2               	movwf	??_DimmerIntr_Initialization
 16831  154C  0862               	movf	??_DimmerIntr_Initialization,w
 16832  154D  0021               	movlb	1	; select bank1
 16833  154E  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16834                           
 16835                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16836  154F  3006               	movlw	6
 16837  1550  0020               	movlb	0	; select bank0
 16838  1551  00E2               	movwf	??_DimmerIntr_Initialization
 16839  1552  0862               	movf	??_DimmerIntr_Initialization,w
 16840  1553  0021               	movlb	1	; select bank1
 16841  1554  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16842                           
 16843                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 16844  1555  10BC               	bcf	_DimmerIntr1^(0+128),1
 16845                           
 16846                           ;Dimmer_B1.c: 17: if (myMain.InitDimmer == 1) {
 16847  1556  1E39               	btfss	(_myMain^(0+128)+10),4
 16848  1557  2D67               	goto	l694
 16849                           
 16850                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(87*0.6)));
 16851  1558  3034               	movlw	52
 16852  1559  3196  26CB  3195   	fcall	_getDimmerLights_ValueToPercent
 16853  155C  0020               	movlb	0	; select bank0
 16854  155D  00E2               	movwf	??_DimmerIntr_Initialization
 16855  155E  0021               	movlb	1	; select bank1
 16856  155F  086E               	movf	_product^(0+128),w
 16857  1560  3E15               	addlw	21
 16858  1561  0086               	movwf	6
 16859  1562  3002               	movlw	2	; select bank4/5
 16860  1563  0087               	movwf	7
 16861  1564  0020               	movlb	0	; select bank0
 16862  1565  0862               	movf	??_DimmerIntr_Initialization,w
 16863  1566  0081               	movwf	1
 16864  1567                     l694:	
 16865                           
 16866                           ;Dimmer_B1.c: 19: }
 16867                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16868  1567  0021               	movlb	1	; select bank1
 16869  1568  086E               	movf	_product^(0+128),w
 16870  1569  3E15               	addlw	21
 16871  156A  0086               	movwf	6
 16872  156B  3002               	movlw	2	; select bank4/5
 16873  156C  0087               	movwf	7
 16874  156D  0801               	movf	1,w
 16875  156E  3196  2666  3195   	fcall	_getDimmerLights_PercentToValue
 16876  1571  0020               	movlb	0	; select bank0
 16877  1572  00E2               	movwf	??_DimmerIntr_Initialization
 16878  1573  0862               	movf	??_DimmerIntr_Initialization,w
 16879  1574  0021               	movlb	1	; select bank1
 16880  1575  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16881                           
 16882                           ;Dimmer_B1.c: 28: DimmerIntr1.TuneValue2 = Division(((char)(87*0.6)), 2);
 16883  1576  3002               	movlw	2
 16884  1577  0020               	movlb	0	; select bank0
 16885  1578  00E2               	movwf	??_DimmerIntr_Initialization
 16886  1579  0862               	movf	??_DimmerIntr_Initialization,w
 16887  157A  00A5               	movwf	Division@num
 16888  157B  3034               	movlw	52
 16889  157C  319B  233A  3195   	fcall	_Division
 16890  157F  0020               	movlb	0	; select bank0
 16891  1580  00E3               	movwf	??_DimmerIntr_Initialization+1
 16892  1581  0863               	movf	??_DimmerIntr_Initialization+1,w
 16893  1582  0021               	movlb	1	; select bank1
 16894  1583  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16895                           
 16896                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(87*0.6
      +                          )));
 16897  1584  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16898  1585  3E08               	addlw	8
 16899  1586  0020               	movlb	0	; select bank0
 16900  1587  00E2               	movwf	??_DimmerIntr_Initialization
 16901  1588  0862               	movf	??_DimmerIntr_Initialization,w
 16902  1589  0021               	movlb	1	; select bank1
 16903  158A  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16904                           
 16905                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16906  158B  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16907  158C  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16908  158D  0020               	movlb	0	; select bank0
 16909  158E  00E2               	movwf	??_DimmerIntr_Initialization
 16910  158F  0862               	movf	??_DimmerIntr_Initialization,w
 16911  1590  0021               	movlb	1	; select bank1
 16912  1591  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16913                           
 16914                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16915  1592  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16916  1593  3E01               	addlw	1
 16917  1594  0020               	movlb	0	; select bank0
 16918  1595  00E2               	movwf	??_DimmerIntr_Initialization
 16919  1596  0862               	movf	??_DimmerIntr_Initialization,w
 16920  1597  0021               	movlb	1	; select bank1
 16921  1598  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16922                           
 16923                           ;Dimmer_B1.c: 81: if (myMain.InitDimmer == 1) {
 16924  1599  1E39               	btfss	(_myMain^(0+128)+10),4
 16925  159A  0008               	return
 16926                           
 16927                           ;Dimmer_B1.c: 82: myMain.InitDimmer = 0;
 16928  159B  1239               	bcf	(_myMain^(0+128)+10),4
 16929                           
 16930                           ;Dimmer_B1.c: 83: myMain.SaveDimmer = 1;
 16931  159C  16B9               	bsf	(_myMain^(0+128)+10),5
 16932                           
 16933                           ;Dimmer_B1.c: 84: setMemory_Modify(1);
 16934  159D  3001               	movlw	1
 16935  159E  319C  2448         	fcall	_setMemory_Modify
 16936  15A0  0008               	return
 16937  15A1                     __end_of_DimmerIntr_Initialization:	
 16938                           
 16939                           	psect	text118
 16940  1C48                     __ptext118:	
 16941 ;; *************** function _setMemory_Modify *****************
 16942 ;; Defined at:
 16943 ;;		line 1086 in file "../src/MCU_B1.c"
 16944 ;; Parameters:    Size  Location     Type
 16945 ;;  command         1    wreg     unsigned char 
 16946 ;; Auto vars:     Size  Location     Type
 16947 ;;  command         1    1[BANK0 ] unsigned char 
 16948 ;; Return value:  Size  Location     Type
 16949 ;;		None               void
 16950 ;; Registers used:
 16951 ;;		wreg, status,2, status,0
 16952 ;; Tracked objects:
 16953 ;;		On entry : 0/0
 16954 ;;		On exit  : 0/0
 16955 ;;		Unchanged: 0/0
 16956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16960 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16961 ;;Total ram usage:        2 bytes
 16962 ;; Hardware stack levels used:    1
 16963 ;; Hardware stack levels required when called:    5
 16964 ;; This function calls:
 16965 ;;		Nothing
 16966 ;; This function is called by:
 16967 ;;		_DimmerIntr_Initialization
 16968 ;;		_setDimmerLights_Dimming
 16969 ;;		_setLog_Code
 16970 ;;		_setRFSW_AdjControl
 16971 ;;		_DimmerLights_AssignationDimming
 16972 ;; This function uses a non-reentrant model
 16973 ;;
 16974                           
 16975                           
 16976                           ;psect for function _setMemory_Modify
 16977  1C48                     _setMemory_Modify:	
 16978                           
 16979                           ;incstack = 0
 16980                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16981                           ;setMemory_Modify@command stored from wreg
 16982  1C48  0020               	movlb	0	; select bank0
 16983  1C49  00A1               	movwf	setMemory_Modify@command
 16984                           
 16985                           ;MCU_B1.c: 1087: Memory.Modify = command == 1 ? 1 : 0;
 16986  1C4A  0821               	movf	setMemory_Modify@command,w
 16987  1C4B  3A01               	xorlw	1
 16988  1C4C  3000               	movlw	0
 16989  1C4D  1903               	skipnz
 16990  1C4E  3001               	movlw	1
 16991  1C4F  00A0               	movwf	??_setMemory_Modify
 16992  1C50  0024               	movlb	4	; select bank4
 16993  1C51  0844               	movf	(_Memory^(0+512)+36),w
 16994  1C52  0020               	movlb	0	; select bank0
 16995  1C53  0620               	xorwf	??_setMemory_Modify,w
 16996  1C54  39FE               	andlw	-2
 16997  1C55  0620               	xorwf	??_setMemory_Modify,w
 16998  1C56  0024               	movlb	4	; select bank4
 16999  1C57  00C4               	movwf	(_Memory^(0+512)+36)
 17000                           
 17001                           ;MCU_B1.c: 1088: Memory.Time = 0;
 17002  1C58  01C2               	clrf	(_Memory^(0+512)+34)
 17003  1C59  01C3               	clrf	((_Memory+1)^(0+512)+34)
 17004  1C5A  0008               	return
 17005  1C5B                     __end_of_setMemory_Modify:	
 17006                           
 17007                           	psect	text119
 17008  16CB                     __ptext119:	
 17009 ;; *************** function _getDimmerLights_ValueToPercent *****************
 17010 ;; Defined at:
 17011 ;;		line 1251 in file "../src/Dimmer_B1.c"
 17012 ;; Parameters:    Size  Location     Type
 17013 ;;  value           1    wreg     unsigned char 
 17014 ;; Auto vars:     Size  Location     Type
 17015 ;;  value           1   62[BANK0 ] unsigned char 
 17016 ;;  i               3   63[BANK0 ] float 
 17017 ;; Return value:  Size  Location     Type
 17018 ;;                  1    wreg      unsigned char 
 17019 ;; Registers used:
 17020 ;;		wreg, status,2, status,0, pclath, cstack
 17021 ;; Tracked objects:
 17022 ;;		On entry : 0/0
 17023 ;;		On exit  : 0/0
 17024 ;;		Unchanged: 0/0
 17025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17027 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17028 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17029 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;Total ram usage:        6 bytes
 17031 ;; Hardware stack levels used:    1
 17032 ;; Hardware stack levels required when called:    7
 17033 ;; This function calls:
 17034 ;;		___awtoft
 17035 ;;		___ftadd
 17036 ;;		___ftdiv
 17037 ;;		___ftneg
 17038 ;;		___fttol
 17039 ;; This function is called by:
 17040 ;;		_DimmerIntr_Initialization
 17041 ;;		_setDimmerLights_Dimming
 17042 ;; This function uses a non-reentrant model
 17043 ;;
 17044                           
 17045                           
 17046                           ;psect for function _getDimmerLights_ValueToPercent
 17047  16CB                     _getDimmerLights_ValueToPercent:	
 17048                           
 17049                           ;incstack = 0
 17050                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 17051                           ;getDimmerLights_ValueToPercent@value stored from wreg
 17052  16CB  0020               	movlb	0	; select bank0
 17053  16CC  00DE               	movwf	getDimmerLights_ValueToPercent@value
 17054                           
 17055                           ;Dimmer_B1.c: 1259: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 17056  16CD  3000               	movlw	0
 17057  16CE  00DF               	movwf	getDimmerLights_ValueToPercent@i
 17058  16CF  3038               	movlw	56
 17059  16D0  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 17060  16D1  3042               	movlw	66
 17061  16D2  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 17062                           
 17063                           ;Dimmer_B1.c: 1260: i /= 100;
 17064  16D3  3000               	movlw	0
 17065  16D4  00AE               	movwf	___ftdiv@f2
 17066  16D5  30C8               	movlw	200
 17067  16D6  00AF               	movwf	___ftdiv@f2+1
 17068  16D7  3042               	movlw	66
 17069  16D8  00B0               	movwf	___ftdiv@f2+2
 17070  16D9  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17071  16DA  00B1               	movwf	___ftdiv@f1
 17072  16DB  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17073  16DC  00B2               	movwf	___ftdiv@f1+1
 17074  16DD  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17075  16DE  00B3               	movwf	___ftdiv@f1+2
 17076  16DF  318D  2522  3196   	fcall	___ftdiv
 17077  16E2  0020               	movlb	0	; select bank0
 17078  16E3  082E               	movf	?___ftdiv,w
 17079  16E4  00DF               	movwf	getDimmerLights_ValueToPercent@i
 17080  16E5  082F               	movf	?___ftdiv+1,w
 17081  16E6  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 17082  16E7  0830               	movf	?___ftdiv+2,w
 17083  16E8  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 17084                           
 17085                           ;Dimmer_B1.c: 1262: return (char) (100 - ((((char)(87*0.6)) - value) / i));
 17086  16E9  085E               	movf	getDimmerLights_ValueToPercent@value,w
 17087  16EA  00DC               	movwf	??_getDimmerLights_ValueToPercent
 17088  16EB  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 17089  16EC  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 17090  16ED  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 17091  16EE  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 17092  16EF  1903               	skipnz
 17093  16F0  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 17094  16F1  085C               	movf	??_getDimmerLights_ValueToPercent,w
 17095  16F2  3E34               	addlw	52
 17096  16F3  00A8               	movwf	___awtoft@c
 17097  16F4  3000               	movlw	0
 17098  16F5  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17099  16F6  00A9               	movwf	___awtoft@c+1
 17100  16F7  3187  27DE  3196   	fcall	___awtoft
 17101  16FA  0020               	movlb	0	; select bank0
 17102  16FB  0828               	movf	?___awtoft,w
 17103  16FC  00B1               	movwf	___ftdiv@f1
 17104  16FD  0829               	movf	?___awtoft+1,w
 17105  16FE  00B2               	movwf	___ftdiv@f1+1
 17106  16FF  082A               	movf	?___awtoft+2,w
 17107  1700  00B3               	movwf	___ftdiv@f1+2
 17108  1701  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17109  1702  00AE               	movwf	___ftdiv@f2
 17110  1703  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17111  1704  00AF               	movwf	___ftdiv@f2+1
 17112  1705  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17113  1706  00B0               	movwf	___ftdiv@f2+2
 17114  1707  318D  2522  3196   	fcall	___ftdiv
 17115  170A  0020               	movlb	0	; select bank0
 17116  170B  082E               	movf	?___ftdiv,w
 17117  170C  00BE               	movwf	___ftneg@f1
 17118  170D  082F               	movf	?___ftdiv+1,w
 17119  170E  00BF               	movwf	___ftneg@f1+1
 17120  170F  0830               	movf	?___ftdiv+2,w
 17121  1710  00C0               	movwf	___ftneg@f1+2
 17122  1711  319A  2243  3196   	fcall	___ftneg
 17123  1714  0020               	movlb	0	; select bank0
 17124  1715  083E               	movf	?___ftneg,w
 17125  1716  00C4               	movwf	___ftadd@f2
 17126  1717  083F               	movf	?___ftneg+1,w
 17127  1718  00C5               	movwf	___ftadd@f2+1
 17128  1719  0840               	movf	?___ftneg+2,w
 17129  171A  00C6               	movwf	___ftadd@f2+2
 17130  171B  3000               	movlw	0
 17131  171C  00C1               	movwf	___ftadd@f1
 17132  171D  30C8               	movlw	200
 17133  171E  00C2               	movwf	___ftadd@f1+1
 17134  171F  3042               	movlw	66
 17135  1720  00C3               	movwf	___ftadd@f1+2
 17136  1721  3183  2389  3196   	fcall	___ftadd
 17137  1724  0020               	movlb	0	; select bank0
 17138  1725  0841               	movf	?___ftadd,w
 17139  1726  00CE               	movwf	___fttol@f1
 17140  1727  0842               	movf	?___ftadd+1,w
 17141  1728  00CF               	movwf	___fttol@f1+1
 17142  1729  0843               	movf	?___ftadd+2,w
 17143  172A  00D0               	movwf	___fttol@f1+2
 17144  172B  318A  2266         	fcall	___fttol
 17145  172D  0020               	movlb	0	; select bank0
 17146  172E  084E               	movf	?___fttol,w
 17147  172F  0008               	return
 17148  1730                     __end_of_getDimmerLights_ValueToPercent:	
 17149                           
 17150                           	psect	text120
 17151  1666                     __ptext120:	
 17152 ;; *************** function _getDimmerLights_PercentToValue *****************
 17153 ;; Defined at:
 17154 ;;		line 1235 in file "../src/Dimmer_B1.c"
 17155 ;; Parameters:    Size  Location     Type
 17156 ;;  value           1    wreg     unsigned char 
 17157 ;; Auto vars:     Size  Location     Type
 17158 ;;  value           1   62[BANK0 ] unsigned char 
 17159 ;;  i               3   63[BANK0 ] float 
 17160 ;; Return value:  Size  Location     Type
 17161 ;;                  1    wreg      unsigned char 
 17162 ;; Registers used:
 17163 ;;		wreg, status,2, status,0, pclath, cstack
 17164 ;; Tracked objects:
 17165 ;;		On entry : 0/0
 17166 ;;		On exit  : 0/0
 17167 ;;		Unchanged: 0/0
 17168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17172 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17173 ;;Total ram usage:        6 bytes
 17174 ;; Hardware stack levels used:    1
 17175 ;; Hardware stack levels required when called:    7
 17176 ;; This function calls:
 17177 ;;		___awtoft
 17178 ;;		___ftadd
 17179 ;;		___ftdiv
 17180 ;;		___ftmul
 17181 ;;		___ftneg
 17182 ;;		___fttol
 17183 ;; This function is called by:
 17184 ;;		_DimmerIntr_Initialization
 17185 ;;		_setDimmerLights_OnOff
 17186 ;;		_setRFSW_AdjControl
 17187 ;;		_DimmerLights_AssignationDimming
 17188 ;; This function uses a non-reentrant model
 17189 ;;
 17190                           
 17191                           
 17192                           ;psect for function _getDimmerLights_PercentToValue
 17193  1666                     _getDimmerLights_PercentToValue:	
 17194                           
 17195                           ;incstack = 0
 17196                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 17197                           ;getDimmerLights_PercentToValue@value stored from wreg
 17198  1666  0020               	movlb	0	; select bank0
 17199  1667  00DE               	movwf	getDimmerLights_PercentToValue@value
 17200                           
 17201                           ;Dimmer_B1.c: 1243: float i = ((char)(87*0.6)) - ((char)(10*0.6));
 17202  1668  3000               	movlw	0
 17203  1669  00DF               	movwf	getDimmerLights_PercentToValue@i
 17204  166A  3038               	movlw	56
 17205  166B  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17206  166C  3042               	movlw	66
 17207  166D  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17208                           
 17209                           ;Dimmer_B1.c: 1244: i /= 100;
 17210  166E  3000               	movlw	0
 17211  166F  00AE               	movwf	___ftdiv@f2
 17212  1670  30C8               	movlw	200
 17213  1671  00AF               	movwf	___ftdiv@f2+1
 17214  1672  3042               	movlw	66
 17215  1673  00B0               	movwf	___ftdiv@f2+2
 17216  1674  085F               	movf	getDimmerLights_PercentToValue@i,w
 17217  1675  00B1               	movwf	___ftdiv@f1
 17218  1676  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17219  1677  00B2               	movwf	___ftdiv@f1+1
 17220  1678  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17221  1679  00B3               	movwf	___ftdiv@f1+2
 17222  167A  318D  2522  3196   	fcall	___ftdiv
 17223  167D  0020               	movlb	0	; select bank0
 17224  167E  082E               	movf	?___ftdiv,w
 17225  167F  00DF               	movwf	getDimmerLights_PercentToValue@i
 17226  1680  082F               	movf	?___ftdiv+1,w
 17227  1681  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17228  1682  0830               	movf	?___ftdiv+2,w
 17229  1683  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17230                           
 17231                           ;Dimmer_B1.c: 1246: return (char) (((char)(87*0.6)) - ((100 - value) * i));
 17232  1684  085E               	movf	getDimmerLights_PercentToValue@value,w
 17233  1685  00DC               	movwf	??_getDimmerLights_PercentToValue
 17234  1686  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 17235  1687  09DC               	comf	??_getDimmerLights_PercentToValue,f
 17236  1688  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 17237  1689  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 17238  168A  1903               	skipnz
 17239  168B  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 17240  168C  085C               	movf	??_getDimmerLights_PercentToValue,w
 17241  168D  3E64               	addlw	100
 17242  168E  00A8               	movwf	___awtoft@c
 17243  168F  3000               	movlw	0
 17244  1690  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 17245  1691  00A9               	movwf	___awtoft@c+1
 17246  1692  3187  27DE  3196   	fcall	___awtoft
 17247  1695  0020               	movlb	0	; select bank0
 17248  1696  0828               	movf	?___awtoft,w
 17249  1697  00B1               	movwf	___ftmul@f2
 17250  1698  0829               	movf	?___awtoft+1,w
 17251  1699  00B2               	movwf	___ftmul@f2+1
 17252  169A  082A               	movf	?___awtoft+2,w
 17253  169B  00B3               	movwf	___ftmul@f2+2
 17254  169C  085F               	movf	getDimmerLights_PercentToValue@i,w
 17255  169D  00AE               	movwf	___ftmul@f1
 17256  169E  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17257  169F  00AF               	movwf	___ftmul@f1+1
 17258  16A0  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17259  16A1  00B0               	movwf	___ftmul@f1+2
 17260  16A2  318D  25CB  3196   	fcall	___ftmul
 17261  16A5  0020               	movlb	0	; select bank0
 17262  16A6  082E               	movf	?___ftmul,w
 17263  16A7  00BE               	movwf	___ftneg@f1
 17264  16A8  082F               	movf	?___ftmul+1,w
 17265  16A9  00BF               	movwf	___ftneg@f1+1
 17266  16AA  0830               	movf	?___ftmul+2,w
 17267  16AB  00C0               	movwf	___ftneg@f1+2
 17268  16AC  319A  2243  3196   	fcall	___ftneg
 17269  16AF  0020               	movlb	0	; select bank0
 17270  16B0  083E               	movf	?___ftneg,w
 17271  16B1  00C4               	movwf	___ftadd@f2
 17272  16B2  083F               	movf	?___ftneg+1,w
 17273  16B3  00C5               	movwf	___ftadd@f2+1
 17274  16B4  0840               	movf	?___ftneg+2,w
 17275  16B5  00C6               	movwf	___ftadd@f2+2
 17276  16B6  3000               	movlw	0
 17277  16B7  00C1               	movwf	___ftadd@f1
 17278  16B8  3050               	movlw	80
 17279  16B9  00C2               	movwf	___ftadd@f1+1
 17280  16BA  3042               	movlw	66
 17281  16BB  00C3               	movwf	___ftadd@f1+2
 17282  16BC  3183  2389  3196   	fcall	___ftadd
 17283  16BF  0020               	movlb	0	; select bank0
 17284  16C0  0841               	movf	?___ftadd,w
 17285  16C1  00CE               	movwf	___fttol@f1
 17286  16C2  0842               	movf	?___ftadd+1,w
 17287  16C3  00CF               	movwf	___fttol@f1+1
 17288  16C4  0843               	movf	?___ftadd+2,w
 17289  16C5  00D0               	movwf	___fttol@f1+2
 17290  16C6  318A  2266         	fcall	___fttol
 17291  16C8  0020               	movlb	0	; select bank0
 17292  16C9  084E               	movf	?___fttol,w
 17293  16CA  0008               	return
 17294  16CB                     __end_of_getDimmerLights_PercentToValue:	
 17295                           
 17296                           	psect	text121
 17297  0A66                     __ptext121:	
 17298 ;; *************** function ___fttol *****************
 17299 ;; Defined at:
 17300 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17301 ;; Parameters:    Size  Location     Type
 17302 ;;  f1              3   46[BANK0 ] float 
 17303 ;; Auto vars:     Size  Location     Type
 17304 ;;  lval            4   55[BANK0 ] unsigned long 
 17305 ;;  exp1            1   59[BANK0 ] unsigned char 
 17306 ;;  sign1           1   54[BANK0 ] unsigned char 
 17307 ;; Return value:  Size  Location     Type
 17308 ;;                  4   46[BANK0 ] long 
 17309 ;; Registers used:
 17310 ;;		wreg, status,2, status,0
 17311 ;; Tracked objects:
 17312 ;;		On entry : 0/0
 17313 ;;		On exit  : 0/0
 17314 ;;		Unchanged: 0/0
 17315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17316 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;Total ram usage:       14 bytes
 17321 ;; Hardware stack levels used:    1
 17322 ;; Hardware stack levels required when called:    5
 17323 ;; This function calls:
 17324 ;;		Nothing
 17325 ;; This function is called by:
 17326 ;;		_getDimmerLights_PercentToValue
 17327 ;;		_getDimmerLights_ValueToPercent
 17328 ;; This function uses a non-reentrant model
 17329 ;;
 17330                           
 17331                           
 17332                           ;psect for function ___fttol
 17333  0A66                     ___fttol:	
 17334                           
 17335                           ;incstack = 0
 17336                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17337  0A66  0020               	movlb	0	; select bank0
 17338  0A67  084E               	movf	___fttol@f1,w
 17339  0A68  00D2               	movwf	??___fttol
 17340  0A69  084F               	movf	___fttol@f1+1,w
 17341  0A6A  00D3               	movwf	??___fttol+1
 17342  0A6B  0850               	movf	___fttol@f1+2,w
 17343  0A6C  00D4               	movwf	??___fttol+2
 17344  0A6D  1003               	clrc
 17345  0A6E  0D53               	rlf	??___fttol+1,w
 17346  0A6F  0D54               	rlf	??___fttol+2,w
 17347  0A70  00D5               	movwf	??___fttol+3
 17348  0A71  0855               	movf	??___fttol+3,w
 17349  0A72  00DB               	movwf	___fttol@exp1
 17350  0A73  08DB               	movf	___fttol@exp1,f
 17351  0A74  1D03               	skipz
 17352  0A75  2A7F               	goto	l6255
 17353  0A76  3000               	movlw	0
 17354  0A77  00D1               	movwf	?___fttol+3
 17355  0A78  3000               	movlw	0
 17356  0A79  00D0               	movwf	?___fttol+2
 17357  0A7A  3000               	movlw	0
 17358  0A7B  00CF               	movwf	?___fttol+1
 17359  0A7C  3000               	movlw	0
 17360  0A7D  00CE               	movwf	?___fttol
 17361  0A7E  0008               	return
 17362  0A7F                     l6255:	
 17363  0A7F  084E               	movf	___fttol@f1,w
 17364  0A80  00D2               	movwf	??___fttol
 17365  0A81  084F               	movf	___fttol@f1+1,w
 17366  0A82  00D3               	movwf	??___fttol+1
 17367  0A83  0850               	movf	___fttol@f1+2,w
 17368  0A84  00D4               	movwf	??___fttol+2
 17369  0A85  3017               	movlw	23
 17370  0A86                     u5245:	
 17371  0A86  36D4               	lsrf	??___fttol+2,f
 17372  0A87  0CD3               	rrf	??___fttol+1,f
 17373  0A88  0CD2               	rrf	??___fttol,f
 17374  0A89  0B89               	decfsz	9,f
 17375  0A8A  2A86               	goto	u5245
 17376  0A8B  0852               	movf	??___fttol,w
 17377  0A8C  00D5               	movwf	??___fttol+3
 17378  0A8D  0855               	movf	??___fttol+3,w
 17379  0A8E  00D6               	movwf	___fttol@sign1
 17380  0A8F  17CF               	bsf	___fttol@f1+1,7
 17381  0A90  30FF               	movlw	255
 17382  0A91  05CE               	andwf	___fttol@f1,f
 17383  0A92  30FF               	movlw	255
 17384  0A93  05CF               	andwf	___fttol@f1+1,f
 17385  0A94  3000               	movlw	0
 17386  0A95  05D0               	andwf	___fttol@f1+2,f
 17387  0A96  084E               	movf	___fttol@f1,w
 17388  0A97  00D7               	movwf	___fttol@lval
 17389  0A98  084F               	movf	___fttol@f1+1,w
 17390  0A99  00D8               	movwf	___fttol@lval+1
 17391  0A9A  0850               	movf	___fttol@f1+2,w
 17392  0A9B  00D9               	movwf	___fttol@lval+2
 17393  0A9C  01DA               	clrf	___fttol@lval+3
 17394  0A9D  308E               	movlw	142
 17395  0A9E  02DB               	subwf	___fttol@exp1,f
 17396  0A9F  1FDB               	btfss	___fttol@exp1,7
 17397  0AA0  2ABD               	goto	l6275
 17398  0AA1  085B               	movf	___fttol@exp1,w
 17399  0AA2  3A80               	xorlw	128
 17400  0AA3  3E8F               	addlw	143
 17401  0AA4  1803               	skipnc
 17402  0AA5  2AAF               	goto	l6273
 17403  0AA6  3000               	movlw	0
 17404  0AA7  00D1               	movwf	?___fttol+3
 17405  0AA8  3000               	movlw	0
 17406  0AA9  00D0               	movwf	?___fttol+2
 17407  0AAA  3000               	movlw	0
 17408  0AAB  00CF               	movwf	?___fttol+1
 17409  0AAC  3000               	movlw	0
 17410  0AAD  00CE               	movwf	?___fttol
 17411  0AAE  0008               	return
 17412  0AAF                     l6273:	
 17413  0AAF  3001               	movlw	1
 17414  0AB0                     u5275:	
 17415  0AB0  36DA               	lsrf	___fttol@lval+3,f
 17416  0AB1  0CD9               	rrf	___fttol@lval+2,f
 17417  0AB2  0CD8               	rrf	___fttol@lval+1,f
 17418  0AB3  0CD7               	rrf	___fttol@lval,f
 17419  0AB4  0B89               	decfsz	9,f
 17420  0AB5  2AB0               	goto	u5275
 17421  0AB6  3001               	movlw	1
 17422  0AB7  00D2               	movwf	??___fttol
 17423  0AB8  0852               	movf	??___fttol,w
 17424  0AB9  07DB               	addwf	___fttol@exp1,f
 17425  0ABA  1903               	btfsc	3,2
 17426  0ABB  2AD6               	goto	l6285
 17427  0ABC  2AAF               	goto	l6273
 17428  0ABD                     l6275:	
 17429  0ABD  3018               	movlw	24
 17430  0ABE  025B               	subwf	___fttol@exp1,w
 17431  0ABF  1C03               	skipc
 17432  0AC0  2AD3               	goto	l6283
 17433  0AC1  3000               	movlw	0
 17434  0AC2  00D1               	movwf	?___fttol+3
 17435  0AC3  3000               	movlw	0
 17436  0AC4  00D0               	movwf	?___fttol+2
 17437  0AC5  3000               	movlw	0
 17438  0AC6  00CF               	movwf	?___fttol+1
 17439  0AC7  3000               	movlw	0
 17440  0AC8  00CE               	movwf	?___fttol
 17441  0AC9  0008               	return
 17442  0ACA                     l6281:	
 17443  0ACA  3001               	movlw	1
 17444  0ACB                     u5305:	
 17445  0ACB  35D7               	lslf	___fttol@lval,f
 17446  0ACC  0DD8               	rlf	___fttol@lval+1,f
 17447  0ACD  0DD9               	rlf	___fttol@lval+2,f
 17448  0ACE  0DDA               	rlf	___fttol@lval+3,f
 17449  0ACF  0B89               	decfsz	9,f
 17450  0AD0  2ACB               	goto	u5305
 17451  0AD1  3001               	movlw	1
 17452  0AD2  02DB               	subwf	___fttol@exp1,f
 17453  0AD3                     l6283:	
 17454  0AD3  08DB               	movf	___fttol@exp1,f
 17455  0AD4  1D03               	skipz
 17456  0AD5  2ACA               	goto	l6281
 17457  0AD6                     l6285:	
 17458  0AD6  0856               	movf	___fttol@sign1,w
 17459  0AD7  1903               	btfsc	3,2
 17460  0AD8  2AE4               	goto	l6289
 17461  0AD9  09D7               	comf	___fttol@lval,f
 17462  0ADA  09D8               	comf	___fttol@lval+1,f
 17463  0ADB  09D9               	comf	___fttol@lval+2,f
 17464  0ADC  09DA               	comf	___fttol@lval+3,f
 17465  0ADD  0AD7               	incf	___fttol@lval,f
 17466  0ADE  1903               	skipnz
 17467  0ADF  0AD8               	incf	___fttol@lval+1,f
 17468  0AE0  1903               	skipnz
 17469  0AE1  0AD9               	incf	___fttol@lval+2,f
 17470  0AE2  1903               	skipnz
 17471  0AE3  0ADA               	incf	___fttol@lval+3,f
 17472  0AE4                     l6289:	
 17473  0AE4  085A               	movf	___fttol@lval+3,w
 17474  0AE5  00D1               	movwf	?___fttol+3
 17475  0AE6  0859               	movf	___fttol@lval+2,w
 17476  0AE7  00D0               	movwf	?___fttol+2
 17477  0AE8  0858               	movf	___fttol@lval+1,w
 17478  0AE9  00CF               	movwf	?___fttol+1
 17479  0AEA  0857               	movf	___fttol@lval,w
 17480  0AEB  00CE               	movwf	?___fttol
 17481  0AEC  0008               	return
 17482  0AED                     __end_of___fttol:	
 17483                           
 17484                           	psect	text122
 17485  1A43                     __ptext122:	
 17486 ;; *************** function ___ftneg *****************
 17487 ;; Defined at:
 17488 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17489 ;; Parameters:    Size  Location     Type
 17490 ;;  f1              3   30[BANK0 ] float 
 17491 ;; Auto vars:     Size  Location     Type
 17492 ;;		None
 17493 ;; Return value:  Size  Location     Type
 17494 ;;                  3   30[BANK0 ] float 
 17495 ;; Registers used:
 17496 ;;		wreg
 17497 ;; Tracked objects:
 17498 ;;		On entry : 0/0
 17499 ;;		On exit  : 0/0
 17500 ;;		Unchanged: 0/0
 17501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17502 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17505 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;Total ram usage:        3 bytes
 17507 ;; Hardware stack levels used:    1
 17508 ;; Hardware stack levels required when called:    5
 17509 ;; This function calls:
 17510 ;;		Nothing
 17511 ;; This function is called by:
 17512 ;;		_getDimmerLights_PercentToValue
 17513 ;;		_getDimmerLights_ValueToPercent
 17514 ;; This function uses a non-reentrant model
 17515 ;;
 17516                           
 17517                           
 17518                           ;psect for function ___ftneg
 17519  1A43                     ___ftneg:	
 17520                           
 17521                           ;incstack = 0
 17522                           ; Regs used in ___ftneg: [wreg]
 17523  1A43  0020               	movlb	0	; select bank0
 17524  1A44  0840               	movf	___ftneg@f1+2,w
 17525  1A45  043F               	iorwf	___ftneg@f1+1,w
 17526  1A46  043E               	iorwf	___ftneg@f1,w
 17527  1A47  1903               	skipnz
 17528  1A48  0008               	return
 17529  1A49  3080               	movlw	128
 17530  1A4A  06C0               	xorwf	___ftneg@f1+2,f
 17531  1A4B  0008               	return
 17532  1A4C                     __end_of___ftneg:	
 17533                           
 17534                           	psect	text123
 17535  0DCB                     __ptext123:	
 17536 ;; *************** function ___ftmul *****************
 17537 ;; Defined at:
 17538 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17539 ;; Parameters:    Size  Location     Type
 17540 ;;  f1              3   14[BANK0 ] float 
 17541 ;;  f2              3   17[BANK0 ] float 
 17542 ;; Auto vars:     Size  Location     Type
 17543 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17544 ;;  sign            1   29[BANK0 ] unsigned char 
 17545 ;;  cntr            1   28[BANK0 ] unsigned char 
 17546 ;;  exp             1   24[BANK0 ] unsigned char 
 17547 ;; Return value:  Size  Location     Type
 17548 ;;                  3   14[BANK0 ] float 
 17549 ;; Registers used:
 17550 ;;		wreg, status,2, status,0, pclath, cstack
 17551 ;; Tracked objects:
 17552 ;;		On entry : 0/0
 17553 ;;		On exit  : 0/0
 17554 ;;		Unchanged: 0/0
 17555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17556 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;Total ram usage:       16 bytes
 17561 ;; Hardware stack levels used:    1
 17562 ;; Hardware stack levels required when called:    6
 17563 ;; This function calls:
 17564 ;;		___ftpack
 17565 ;; This function is called by:
 17566 ;;		_getDimmerLights_PercentToValue
 17567 ;; This function uses a non-reentrant model
 17568 ;;
 17569                           
 17570                           
 17571                           ;psect for function ___ftmul
 17572  0DCB                     ___ftmul:	
 17573                           
 17574                           ;incstack = 0
 17575                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17576  0DCB  0020               	movlb	0	; select bank0
 17577  0DCC  082E               	movf	___ftmul@f1,w
 17578  0DCD  00B4               	movwf	??___ftmul
 17579  0DCE  082F               	movf	___ftmul@f1+1,w
 17580  0DCF  00B5               	movwf	??___ftmul+1
 17581  0DD0  0830               	movf	___ftmul@f1+2,w
 17582  0DD1  00B6               	movwf	??___ftmul+2
 17583  0DD2  1003               	clrc
 17584  0DD3  0D35               	rlf	??___ftmul+1,w
 17585  0DD4  0D36               	rlf	??___ftmul+2,w
 17586  0DD5  00B7               	movwf	??___ftmul+3
 17587  0DD6  0837               	movf	??___ftmul+3,w
 17588  0DD7  00B8               	movwf	___ftmul@exp
 17589  0DD8  08B8               	movf	___ftmul@exp,f
 17590  0DD9  1D03               	skipz
 17591  0DDA  2DE2               	goto	l6197
 17592  0DDB  3000               	movlw	0
 17593  0DDC  00AE               	movwf	?___ftmul
 17594  0DDD  3000               	movlw	0
 17595  0DDE  00AF               	movwf	?___ftmul+1
 17596  0DDF  3000               	movlw	0
 17597  0DE0  00B0               	movwf	?___ftmul+2
 17598  0DE1  0008               	return
 17599  0DE2                     l6197:	
 17600  0DE2  0831               	movf	___ftmul@f2,w
 17601  0DE3  00B4               	movwf	??___ftmul
 17602  0DE4  0832               	movf	___ftmul@f2+1,w
 17603  0DE5  00B5               	movwf	??___ftmul+1
 17604  0DE6  0833               	movf	___ftmul@f2+2,w
 17605  0DE7  00B6               	movwf	??___ftmul+2
 17606  0DE8  1003               	clrc
 17607  0DE9  0D35               	rlf	??___ftmul+1,w
 17608  0DEA  0D36               	rlf	??___ftmul+2,w
 17609  0DEB  00B7               	movwf	??___ftmul+3
 17610  0DEC  0837               	movf	??___ftmul+3,w
 17611  0DED  00BD               	movwf	___ftmul@sign
 17612  0DEE  08BD               	movf	___ftmul@sign,f
 17613  0DEF  1D03               	skipz
 17614  0DF0  2DF8               	goto	l6203
 17615  0DF1  3000               	movlw	0
 17616  0DF2  00AE               	movwf	?___ftmul
 17617  0DF3  3000               	movlw	0
 17618  0DF4  00AF               	movwf	?___ftmul+1
 17619  0DF5  3000               	movlw	0
 17620  0DF6  00B0               	movwf	?___ftmul+2
 17621  0DF7  0008               	return
 17622  0DF8                     l6203:	
 17623  0DF8  083D               	movf	___ftmul@sign,w
 17624  0DF9  3E7B               	addlw	123
 17625  0DFA  00B4               	movwf	??___ftmul
 17626  0DFB  0834               	movf	??___ftmul,w
 17627  0DFC  07B8               	addwf	___ftmul@exp,f
 17628  0DFD  082E               	movf	___ftmul@f1,w
 17629  0DFE  00B4               	movwf	??___ftmul
 17630  0DFF  082F               	movf	___ftmul@f1+1,w
 17631  0E00  00B5               	movwf	??___ftmul+1
 17632  0E01  0830               	movf	___ftmul@f1+2,w
 17633  0E02  00B6               	movwf	??___ftmul+2
 17634  0E03  3010               	movlw	16
 17635  0E04                     u5125:	
 17636  0E04  36B6               	lsrf	??___ftmul+2,f
 17637  0E05  0CB5               	rrf	??___ftmul+1,f
 17638  0E06  0CB4               	rrf	??___ftmul,f
 17639  0E07  0B89               	decfsz	9,f
 17640  0E08  2E04               	goto	u5125
 17641  0E09  0834               	movf	??___ftmul,w
 17642  0E0A  00B7               	movwf	??___ftmul+3
 17643  0E0B  0837               	movf	??___ftmul+3,w
 17644  0E0C  00BD               	movwf	___ftmul@sign
 17645  0E0D  0831               	movf	___ftmul@f2,w
 17646  0E0E  00B4               	movwf	??___ftmul
 17647  0E0F  0832               	movf	___ftmul@f2+1,w
 17648  0E10  00B5               	movwf	??___ftmul+1
 17649  0E11  0833               	movf	___ftmul@f2+2,w
 17650  0E12  00B6               	movwf	??___ftmul+2
 17651  0E13  3010               	movlw	16
 17652  0E14                     u5135:	
 17653  0E14  36B6               	lsrf	??___ftmul+2,f
 17654  0E15  0CB5               	rrf	??___ftmul+1,f
 17655  0E16  0CB4               	rrf	??___ftmul,f
 17656  0E17  0B89               	decfsz	9,f
 17657  0E18  2E14               	goto	u5135
 17658  0E19  0834               	movf	??___ftmul,w
 17659  0E1A  00B7               	movwf	??___ftmul+3
 17660  0E1B  0837               	movf	??___ftmul+3,w
 17661  0E1C  06BD               	xorwf	___ftmul@sign,f
 17662  0E1D  3080               	movlw	128
 17663  0E1E  00B4               	movwf	??___ftmul
 17664  0E1F  0834               	movf	??___ftmul,w
 17665  0E20  05BD               	andwf	___ftmul@sign,f
 17666  0E21  17AF               	bsf	___ftmul@f1+1,7
 17667  0E22  17B2               	bsf	___ftmul@f2+1,7
 17668  0E23  30FF               	movlw	255
 17669  0E24  05B1               	andwf	___ftmul@f2,f
 17670  0E25  30FF               	movlw	255
 17671  0E26  05B2               	andwf	___ftmul@f2+1,f
 17672  0E27  3000               	movlw	0
 17673  0E28  05B3               	andwf	___ftmul@f2+2,f
 17674  0E29  3000               	movlw	0
 17675  0E2A  00B9               	movwf	___ftmul@f3_as_product
 17676  0E2B  3000               	movlw	0
 17677  0E2C  00BA               	movwf	___ftmul@f3_as_product+1
 17678  0E2D  3000               	movlw	0
 17679  0E2E  00BB               	movwf	___ftmul@f3_as_product+2
 17680  0E2F  3007               	movlw	7
 17681  0E30  00B4               	movwf	??___ftmul
 17682  0E31  0834               	movf	??___ftmul,w
 17683  0E32  00BC               	movwf	___ftmul@cntr
 17684  0E33                     l6215:	
 17685  0E33  1C2E               	btfss	___ftmul@f1,0
 17686  0E34  2E3B               	goto	l6219
 17687  0E35  0831               	movf	___ftmul@f2,w
 17688  0E36  07B9               	addwf	___ftmul@f3_as_product,f
 17689  0E37  0832               	movf	___ftmul@f2+1,w
 17690  0E38  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17691  0E39  0833               	movf	___ftmul@f2+2,w
 17692  0E3A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17693  0E3B                     l6219:	
 17694  0E3B  3001               	movlw	1
 17695  0E3C                     u5155:	
 17696  0E3C  36B0               	lsrf	___ftmul@f1+2,f
 17697  0E3D  0CAF               	rrf	___ftmul@f1+1,f
 17698  0E3E  0CAE               	rrf	___ftmul@f1,f
 17699  0E3F  0B89               	decfsz	9,f
 17700  0E40  2E3C               	goto	u5155
 17701  0E41  3001               	movlw	1
 17702  0E42                     u5165:	
 17703  0E42  35B1               	lslf	___ftmul@f2,f
 17704  0E43  0DB2               	rlf	___ftmul@f2+1,f
 17705  0E44  0DB3               	rlf	___ftmul@f2+2,f
 17706  0E45  0B89               	decfsz	9,f
 17707  0E46  2E42               	goto	u5165
 17708  0E47  3001               	movlw	1
 17709  0E48  02BC               	subwf	___ftmul@cntr,f
 17710  0E49  1D03               	btfss	3,2
 17711  0E4A  2E33               	goto	l6215
 17712  0E4B  3009               	movlw	9
 17713  0E4C  00B4               	movwf	??___ftmul
 17714  0E4D  0834               	movf	??___ftmul,w
 17715  0E4E  00BC               	movwf	___ftmul@cntr
 17716  0E4F                     l6227:	
 17717  0E4F  1C2E               	btfss	___ftmul@f1,0
 17718  0E50  2E57               	goto	l6231
 17719  0E51  0831               	movf	___ftmul@f2,w
 17720  0E52  07B9               	addwf	___ftmul@f3_as_product,f
 17721  0E53  0832               	movf	___ftmul@f2+1,w
 17722  0E54  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17723  0E55  0833               	movf	___ftmul@f2+2,w
 17724  0E56  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17725  0E57                     l6231:	
 17726  0E57  3001               	movlw	1
 17727  0E58                     u5195:	
 17728  0E58  36B0               	lsrf	___ftmul@f1+2,f
 17729  0E59  0CAF               	rrf	___ftmul@f1+1,f
 17730  0E5A  0CAE               	rrf	___ftmul@f1,f
 17731  0E5B  0B89               	decfsz	9,f
 17732  0E5C  2E58               	goto	u5195
 17733  0E5D  3001               	movlw	1
 17734  0E5E                     u5205:	
 17735  0E5E  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17736  0E5F  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17737  0E60  0CB9               	rrf	___ftmul@f3_as_product,f
 17738  0E61  0B89               	decfsz	9,f
 17739  0E62  2E5E               	goto	u5205
 17740  0E63  3001               	movlw	1
 17741  0E64  02BC               	subwf	___ftmul@cntr,f
 17742  0E65  1D03               	btfss	3,2
 17743  0E66  2E4F               	goto	l6227
 17744  0E67  0839               	movf	___ftmul@f3_as_product,w
 17745  0E68  00A0               	movwf	___ftpack@arg
 17746  0E69  083A               	movf	___ftmul@f3_as_product+1,w
 17747  0E6A  00A1               	movwf	___ftpack@arg+1
 17748  0E6B  083B               	movf	___ftmul@f3_as_product+2,w
 17749  0E6C  00A2               	movwf	___ftpack@arg+2
 17750  0E6D  0838               	movf	___ftmul@exp,w
 17751  0E6E  00B4               	movwf	??___ftmul
 17752  0E6F  0834               	movf	??___ftmul,w
 17753  0E70  00A3               	movwf	___ftpack@exp
 17754  0E71  083D               	movf	___ftmul@sign,w
 17755  0E72  00B5               	movwf	??___ftmul+1
 17756  0E73  0835               	movf	??___ftmul+1,w
 17757  0E74  00A4               	movwf	___ftpack@sign
 17758  0E75  3195  25A1         	fcall	___ftpack
 17759  0E77  0020               	movlb	0	; select bank0
 17760  0E78  0820               	movf	?___ftpack,w
 17761  0E79  00AE               	movwf	?___ftmul
 17762  0E7A  0821               	movf	?___ftpack+1,w
 17763  0E7B  00AF               	movwf	?___ftmul+1
 17764  0E7C  0822               	movf	?___ftpack+2,w
 17765  0E7D  00B0               	movwf	?___ftmul+2
 17766  0E7E  0008               	return
 17767  0E7F                     __end_of___ftmul:	
 17768                           
 17769                           	psect	text124
 17770  0D22                     __ptext124:	
 17771 ;; *************** function ___ftdiv *****************
 17772 ;; Defined at:
 17773 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17774 ;; Parameters:    Size  Location     Type
 17775 ;;  f2              3   14[BANK0 ] float 
 17776 ;;  f1              3   17[BANK0 ] float 
 17777 ;; Auto vars:     Size  Location     Type
 17778 ;;  f3              3   25[BANK0 ] float 
 17779 ;;  sign            1   29[BANK0 ] unsigned char 
 17780 ;;  exp             1   28[BANK0 ] unsigned char 
 17781 ;;  cntr            1   24[BANK0 ] unsigned char 
 17782 ;; Return value:  Size  Location     Type
 17783 ;;                  3   14[BANK0 ] float 
 17784 ;; Registers used:
 17785 ;;		wreg, status,2, status,0, pclath, cstack
 17786 ;; Tracked objects:
 17787 ;;		On entry : 0/0
 17788 ;;		On exit  : 0/0
 17789 ;;		Unchanged: 0/0
 17790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17791 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17792 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17793 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17794 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17795 ;;Total ram usage:       16 bytes
 17796 ;; Hardware stack levels used:    1
 17797 ;; Hardware stack levels required when called:    6
 17798 ;; This function calls:
 17799 ;;		___ftpack
 17800 ;; This function is called by:
 17801 ;;		_getDimmerLights_PercentToValue
 17802 ;;		_getDimmerLights_ValueToPercent
 17803 ;; This function uses a non-reentrant model
 17804 ;;
 17805                           
 17806                           
 17807                           ;psect for function ___ftdiv
 17808  0D22                     ___ftdiv:	
 17809                           
 17810                           ;incstack = 0
 17811                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17812  0D22  0020               	movlb	0	; select bank0
 17813  0D23  0831               	movf	___ftdiv@f1,w
 17814  0D24  00B4               	movwf	??___ftdiv
 17815  0D25  0832               	movf	___ftdiv@f1+1,w
 17816  0D26  00B5               	movwf	??___ftdiv+1
 17817  0D27  0833               	movf	___ftdiv@f1+2,w
 17818  0D28  00B6               	movwf	??___ftdiv+2
 17819  0D29  1003               	clrc
 17820  0D2A  0D35               	rlf	??___ftdiv+1,w
 17821  0D2B  0D36               	rlf	??___ftdiv+2,w
 17822  0D2C  00B7               	movwf	??___ftdiv+3
 17823  0D2D  0837               	movf	??___ftdiv+3,w
 17824  0D2E  00BC               	movwf	___ftdiv@exp
 17825  0D2F  08BC               	movf	___ftdiv@exp,f
 17826  0D30  1D03               	skipz
 17827  0D31  2D39               	goto	l6155
 17828  0D32  3000               	movlw	0
 17829  0D33  00AE               	movwf	?___ftdiv
 17830  0D34  3000               	movlw	0
 17831  0D35  00AF               	movwf	?___ftdiv+1
 17832  0D36  3000               	movlw	0
 17833  0D37  00B0               	movwf	?___ftdiv+2
 17834  0D38  0008               	return
 17835  0D39                     l6155:	
 17836  0D39  082E               	movf	___ftdiv@f2,w
 17837  0D3A  00B4               	movwf	??___ftdiv
 17838  0D3B  082F               	movf	___ftdiv@f2+1,w
 17839  0D3C  00B5               	movwf	??___ftdiv+1
 17840  0D3D  0830               	movf	___ftdiv@f2+2,w
 17841  0D3E  00B6               	movwf	??___ftdiv+2
 17842  0D3F  1003               	clrc
 17843  0D40  0D35               	rlf	??___ftdiv+1,w
 17844  0D41  0D36               	rlf	??___ftdiv+2,w
 17845  0D42  00B7               	movwf	??___ftdiv+3
 17846  0D43  0837               	movf	??___ftdiv+3,w
 17847  0D44  00BD               	movwf	___ftdiv@sign
 17848  0D45  08BD               	movf	___ftdiv@sign,f
 17849  0D46  1D03               	skipz
 17850  0D47  2D4F               	goto	l6161
 17851  0D48  3000               	movlw	0
 17852  0D49  00AE               	movwf	?___ftdiv
 17853  0D4A  3000               	movlw	0
 17854  0D4B  00AF               	movwf	?___ftdiv+1
 17855  0D4C  3000               	movlw	0
 17856  0D4D  00B0               	movwf	?___ftdiv+2
 17857  0D4E  0008               	return
 17858  0D4F                     l6161:	
 17859  0D4F  3000               	movlw	0
 17860  0D50  00B9               	movwf	___ftdiv@f3
 17861  0D51  3000               	movlw	0
 17862  0D52  00BA               	movwf	___ftdiv@f3+1
 17863  0D53  3000               	movlw	0
 17864  0D54  00BB               	movwf	___ftdiv@f3+2
 17865  0D55  3089               	movlw	137
 17866  0D56  073D               	addwf	___ftdiv@sign,w
 17867  0D57  00B4               	movwf	??___ftdiv
 17868  0D58  0834               	movf	??___ftdiv,w
 17869  0D59  02BC               	subwf	___ftdiv@exp,f
 17870  0D5A  0831               	movf	___ftdiv@f1,w
 17871  0D5B  00B4               	movwf	??___ftdiv
 17872  0D5C  0832               	movf	___ftdiv@f1+1,w
 17873  0D5D  00B5               	movwf	??___ftdiv+1
 17874  0D5E  0833               	movf	___ftdiv@f1+2,w
 17875  0D5F  00B6               	movwf	??___ftdiv+2
 17876  0D60  3010               	movlw	16
 17877  0D61                     u5045:	
 17878  0D61  36B6               	lsrf	??___ftdiv+2,f
 17879  0D62  0CB5               	rrf	??___ftdiv+1,f
 17880  0D63  0CB4               	rrf	??___ftdiv,f
 17881  0D64  0B89               	decfsz	9,f
 17882  0D65  2D61               	goto	u5045
 17883  0D66  0834               	movf	??___ftdiv,w
 17884  0D67  00B7               	movwf	??___ftdiv+3
 17885  0D68  0837               	movf	??___ftdiv+3,w
 17886  0D69  00BD               	movwf	___ftdiv@sign
 17887  0D6A  082E               	movf	___ftdiv@f2,w
 17888  0D6B  00B4               	movwf	??___ftdiv
 17889  0D6C  082F               	movf	___ftdiv@f2+1,w
 17890  0D6D  00B5               	movwf	??___ftdiv+1
 17891  0D6E  0830               	movf	___ftdiv@f2+2,w
 17892  0D6F  00B6               	movwf	??___ftdiv+2
 17893  0D70  3010               	movlw	16
 17894  0D71                     u5055:	
 17895  0D71  36B6               	lsrf	??___ftdiv+2,f
 17896  0D72  0CB5               	rrf	??___ftdiv+1,f
 17897  0D73  0CB4               	rrf	??___ftdiv,f
 17898  0D74  0B89               	decfsz	9,f
 17899  0D75  2D71               	goto	u5055
 17900  0D76  0834               	movf	??___ftdiv,w
 17901  0D77  00B7               	movwf	??___ftdiv+3
 17902  0D78  0837               	movf	??___ftdiv+3,w
 17903  0D79  06BD               	xorwf	___ftdiv@sign,f
 17904  0D7A  3080               	movlw	128
 17905  0D7B  00B4               	movwf	??___ftdiv
 17906  0D7C  0834               	movf	??___ftdiv,w
 17907  0D7D  05BD               	andwf	___ftdiv@sign,f
 17908  0D7E  17B2               	bsf	___ftdiv@f1+1,7
 17909  0D7F  30FF               	movlw	255
 17910  0D80  05B1               	andwf	___ftdiv@f1,f
 17911  0D81  30FF               	movlw	255
 17912  0D82  05B2               	andwf	___ftdiv@f1+1,f
 17913  0D83  3000               	movlw	0
 17914  0D84  05B3               	andwf	___ftdiv@f1+2,f
 17915  0D85  17AF               	bsf	___ftdiv@f2+1,7
 17916  0D86  30FF               	movlw	255
 17917  0D87  05AE               	andwf	___ftdiv@f2,f
 17918  0D88  30FF               	movlw	255
 17919  0D89  05AF               	andwf	___ftdiv@f2+1,f
 17920  0D8A  3000               	movlw	0
 17921  0D8B  05B0               	andwf	___ftdiv@f2+2,f
 17922  0D8C  3018               	movlw	24
 17923  0D8D  00B4               	movwf	??___ftdiv
 17924  0D8E  0834               	movf	??___ftdiv,w
 17925  0D8F  00B8               	movwf	___ftdiv@cntr
 17926  0D90                     l6175:	
 17927  0D90  3001               	movlw	1
 17928  0D91                     u5065:	
 17929  0D91  35B9               	lslf	___ftdiv@f3,f
 17930  0D92  0DBA               	rlf	___ftdiv@f3+1,f
 17931  0D93  0DBB               	rlf	___ftdiv@f3+2,f
 17932  0D94  0B89               	decfsz	9,f
 17933  0D95  2D91               	goto	u5065
 17934  0D96  0830               	movf	___ftdiv@f2+2,w
 17935  0D97  0233               	subwf	___ftdiv@f1+2,w
 17936  0D98  1D03               	skipz
 17937  0D99  2DA0               	goto	u5075
 17938  0D9A  082F               	movf	___ftdiv@f2+1,w
 17939  0D9B  0232               	subwf	___ftdiv@f1+1,w
 17940  0D9C  1D03               	skipz
 17941  0D9D  2DA0               	goto	u5075
 17942  0D9E  082E               	movf	___ftdiv@f2,w
 17943  0D9F  0231               	subwf	___ftdiv@f1,w
 17944  0DA0                     u5075:	
 17945  0DA0  1C03               	skipc
 17946  0DA1  2DA9               	goto	l6183
 17947  0DA2  082E               	movf	___ftdiv@f2,w
 17948  0DA3  02B1               	subwf	___ftdiv@f1,f
 17949  0DA4  082F               	movf	___ftdiv@f2+1,w
 17950  0DA5  3BB2               	subwfb	___ftdiv@f1+1,f
 17951  0DA6  0830               	movf	___ftdiv@f2+2,w
 17952  0DA7  3BB3               	subwfb	___ftdiv@f1+2,f
 17953  0DA8  1439               	bsf	___ftdiv@f3,0
 17954  0DA9                     l6183:	
 17955  0DA9  3001               	movlw	1
 17956  0DAA                     u5085:	
 17957  0DAA  35B1               	lslf	___ftdiv@f1,f
 17958  0DAB  0DB2               	rlf	___ftdiv@f1+1,f
 17959  0DAC  0DB3               	rlf	___ftdiv@f1+2,f
 17960  0DAD  0B89               	decfsz	9,f
 17961  0DAE  2DAA               	goto	u5085
 17962  0DAF  3001               	movlw	1
 17963  0DB0  02B8               	subwf	___ftdiv@cntr,f
 17964  0DB1  1D03               	btfss	3,2
 17965  0DB2  2D90               	goto	l6175
 17966  0DB3  0839               	movf	___ftdiv@f3,w
 17967  0DB4  00A0               	movwf	___ftpack@arg
 17968  0DB5  083A               	movf	___ftdiv@f3+1,w
 17969  0DB6  00A1               	movwf	___ftpack@arg+1
 17970  0DB7  083B               	movf	___ftdiv@f3+2,w
 17971  0DB8  00A2               	movwf	___ftpack@arg+2
 17972  0DB9  083C               	movf	___ftdiv@exp,w
 17973  0DBA  00B4               	movwf	??___ftdiv
 17974  0DBB  0834               	movf	??___ftdiv,w
 17975  0DBC  00A3               	movwf	___ftpack@exp
 17976  0DBD  083D               	movf	___ftdiv@sign,w
 17977  0DBE  00B5               	movwf	??___ftdiv+1
 17978  0DBF  0835               	movf	??___ftdiv+1,w
 17979  0DC0  00A4               	movwf	___ftpack@sign
 17980  0DC1  3195  25A1         	fcall	___ftpack
 17981  0DC3  0020               	movlb	0	; select bank0
 17982  0DC4  0820               	movf	?___ftpack,w
 17983  0DC5  00AE               	movwf	?___ftdiv
 17984  0DC6  0821               	movf	?___ftpack+1,w
 17985  0DC7  00AF               	movwf	?___ftdiv+1
 17986  0DC8  0822               	movf	?___ftpack+2,w
 17987  0DC9  00B0               	movwf	?___ftdiv+2
 17988  0DCA  0008               	return
 17989  0DCB                     __end_of___ftdiv:	
 17990                           
 17991                           	psect	text125
 17992  0389                     __ptext125:	
 17993 ;; *************** function ___ftadd *****************
 17994 ;; Defined at:
 17995 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17996 ;; Parameters:    Size  Location     Type
 17997 ;;  f1              3   33[BANK0 ] float 
 17998 ;;  f2              3   36[BANK0 ] float 
 17999 ;; Auto vars:     Size  Location     Type
 18000 ;;  exp1            1   45[BANK0 ] unsigned char 
 18001 ;;  exp2            1   44[BANK0 ] unsigned char 
 18002 ;;  sign            1   43[BANK0 ] unsigned char 
 18003 ;; Return value:  Size  Location     Type
 18004 ;;                  3   33[BANK0 ] float 
 18005 ;; Registers used:
 18006 ;;		wreg, status,2, status,0, pclath, cstack
 18007 ;; Tracked objects:
 18008 ;;		On entry : 0/0
 18009 ;;		On exit  : 0/0
 18010 ;;		Unchanged: 0/0
 18011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18012 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18013 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18014 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18015 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;Total ram usage:       13 bytes
 18017 ;; Hardware stack levels used:    1
 18018 ;; Hardware stack levels required when called:    6
 18019 ;; This function calls:
 18020 ;;		___ftpack
 18021 ;; This function is called by:
 18022 ;;		_getDimmerLights_PercentToValue
 18023 ;;		_getDimmerLights_ValueToPercent
 18024 ;; This function uses a non-reentrant model
 18025 ;;
 18026                           
 18027                           
 18028                           ;psect for function ___ftadd
 18029  0389                     ___ftadd:	
 18030                           
 18031                           ;incstack = 0
 18032                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18033  0389  0020               	movlb	0	; select bank0
 18034  038A  0841               	movf	___ftadd@f1,w
 18035  038B  00C7               	movwf	??___ftadd
 18036  038C  0842               	movf	___ftadd@f1+1,w
 18037  038D  00C8               	movwf	??___ftadd+1
 18038  038E  0843               	movf	___ftadd@f1+2,w
 18039  038F  00C9               	movwf	??___ftadd+2
 18040  0390  1003               	clrc
 18041  0391  0D48               	rlf	??___ftadd+1,w
 18042  0392  0D49               	rlf	??___ftadd+2,w
 18043  0393  00CA               	movwf	??___ftadd+3
 18044  0394  084A               	movf	??___ftadd+3,w
 18045  0395  00CD               	movwf	___ftadd@exp1
 18046  0396  0844               	movf	___ftadd@f2,w
 18047  0397  00C7               	movwf	??___ftadd
 18048  0398  0845               	movf	___ftadd@f2+1,w
 18049  0399  00C8               	movwf	??___ftadd+1
 18050  039A  0846               	movf	___ftadd@f2+2,w
 18051  039B  00C9               	movwf	??___ftadd+2
 18052  039C  1003               	clrc
 18053  039D  0D48               	rlf	??___ftadd+1,w
 18054  039E  0D49               	rlf	??___ftadd+2,w
 18055  039F  00CA               	movwf	??___ftadd+3
 18056  03A0  084A               	movf	??___ftadd+3,w
 18057  03A1  00CC               	movwf	___ftadd@exp2
 18058  03A2  084D               	movf	___ftadd@exp1,w
 18059  03A3  1903               	btfsc	3,2
 18060  03A4  2BB1               	goto	l6085
 18061  03A5  084C               	movf	___ftadd@exp2,w
 18062  03A6  024D               	subwf	___ftadd@exp1,w
 18063  03A7  1803               	skipnc
 18064  03A8  2BB8               	goto	l6089
 18065  03A9  034D               	decf	___ftadd@exp1,w
 18066  03AA  3AFF               	xorlw	255
 18067  03AB  074C               	addwf	___ftadd@exp2,w
 18068  03AC  00C7               	movwf	??___ftadd
 18069  03AD  3019               	movlw	25
 18070  03AE  0247               	subwf	??___ftadd,w
 18071  03AF  1C03               	skipc
 18072  03B0  2BB8               	goto	l6089
 18073  03B1                     l6085:	
 18074  03B1  0844               	movf	___ftadd@f2,w
 18075  03B2  00C1               	movwf	?___ftadd
 18076  03B3  0845               	movf	___ftadd@f2+1,w
 18077  03B4  00C2               	movwf	?___ftadd+1
 18078  03B5  0846               	movf	___ftadd@f2+2,w
 18079  03B6  00C3               	movwf	?___ftadd+2
 18080  03B7  0008               	return
 18081  03B8                     l6089:	
 18082  03B8  084C               	movf	___ftadd@exp2,w
 18083  03B9  1903               	btfsc	3,2
 18084  03BA  0008               	return
 18085  03BB  084D               	movf	___ftadd@exp1,w
 18086  03BC  024C               	subwf	___ftadd@exp2,w
 18087  03BD  1803               	skipnc
 18088  03BE  2BC7               	goto	l6095
 18089  03BF  034C               	decf	___ftadd@exp2,w
 18090  03C0  3AFF               	xorlw	255
 18091  03C1  074D               	addwf	___ftadd@exp1,w
 18092  03C2  00C7               	movwf	??___ftadd
 18093  03C3  3019               	movlw	25
 18094  03C4  0247               	subwf	??___ftadd,w
 18095  03C5  1803               	btfsc	3,0
 18096  03C6  0008               	return
 18097  03C7                     l6095:	
 18098  03C7  3006               	movlw	6
 18099  03C8  00C7               	movwf	??___ftadd
 18100  03C9  0847               	movf	??___ftadd,w
 18101  03CA  00CB               	movwf	___ftadd@sign
 18102  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 18103  03CC  17CB               	bsf	___ftadd@sign,7
 18104  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 18105  03CE  174B               	bsf	___ftadd@sign,6
 18106  03CF  17C2               	bsf	___ftadd@f1+1,7
 18107  03D0  30FF               	movlw	255
 18108  03D1  05C1               	andwf	___ftadd@f1,f
 18109  03D2  30FF               	movlw	255
 18110  03D3  05C2               	andwf	___ftadd@f1+1,f
 18111  03D4  3000               	movlw	0
 18112  03D5  05C3               	andwf	___ftadd@f1+2,f
 18113  03D6  17C5               	bsf	___ftadd@f2+1,7
 18114  03D7  30FF               	movlw	255
 18115  03D8  05C4               	andwf	___ftadd@f2,f
 18116  03D9  30FF               	movlw	255
 18117  03DA  05C5               	andwf	___ftadd@f2+1,f
 18118  03DB  3000               	movlw	0
 18119  03DC  05C6               	andwf	___ftadd@f2+2,f
 18120  03DD  084C               	movf	___ftadd@exp2,w
 18121  03DE  024D               	subwf	___ftadd@exp1,w
 18122  03DF  1803               	skipnc
 18123  03E0  2C03               	goto	l6117
 18124  03E1                     l6107:	
 18125  03E1  3001               	movlw	1
 18126  03E2                     u4885:	
 18127  03E2  35C4               	lslf	___ftadd@f2,f
 18128  03E3  0DC5               	rlf	___ftadd@f2+1,f
 18129  03E4  0DC6               	rlf	___ftadd@f2+2,f
 18130  03E5  0B89               	decfsz	9,f
 18131  03E6  2BE2               	goto	u4885
 18132  03E7  3001               	movlw	1
 18133  03E8  02CC               	subwf	___ftadd@exp2,f
 18134  03E9  084C               	movf	___ftadd@exp2,w
 18135  03EA  064D               	xorwf	___ftadd@exp1,w
 18136  03EB  1903               	skipnz
 18137  03EC  2BFE               	goto	l6115
 18138  03ED  3001               	movlw	1
 18139  03EE  02CB               	subwf	___ftadd@sign,f
 18140  03EF  084B               	movf	___ftadd@sign,w
 18141  03F0  3907               	andlw	7
 18142  03F1  1903               	btfsc	3,2
 18143  03F2  2BFE               	goto	l6115
 18144  03F3  2BE1               	goto	l6107
 18145  03F4                     l6113:	
 18146  03F4  3001               	movlw	1
 18147  03F5                     u4915:	
 18148  03F5  36C3               	lsrf	___ftadd@f1+2,f
 18149  03F6  0CC2               	rrf	___ftadd@f1+1,f
 18150  03F7  0CC1               	rrf	___ftadd@f1,f
 18151  03F8  0B89               	decfsz	9,f
 18152  03F9  2BF5               	goto	u4915
 18153  03FA  3001               	movlw	1
 18154  03FB  00C7               	movwf	??___ftadd
 18155  03FC  0847               	movf	??___ftadd,w
 18156  03FD  07CD               	addwf	___ftadd@exp1,f
 18157  03FE                     l6115:	
 18158  03FE  084D               	movf	___ftadd@exp1,w
 18159  03FF  064C               	xorwf	___ftadd@exp2,w
 18160  0400  1903               	btfsc	3,2
 18161  0401  2C28               	goto	l2970
 18162  0402  2BF4               	goto	l6113
 18163  0403                     l6117:	
 18164  0403  084D               	movf	___ftadd@exp1,w
 18165  0404  024C               	subwf	___ftadd@exp2,w
 18166  0405  1803               	skipnc
 18167  0406  2C28               	goto	l2970
 18168  0407                     l6119:	
 18169  0407  3001               	movlw	1
 18170  0408                     u4945:	
 18171  0408  35C1               	lslf	___ftadd@f1,f
 18172  0409  0DC2               	rlf	___ftadd@f1+1,f
 18173  040A  0DC3               	rlf	___ftadd@f1+2,f
 18174  040B  0B89               	decfsz	9,f
 18175  040C  2C08               	goto	u4945
 18176  040D  3001               	movlw	1
 18177  040E  02CD               	subwf	___ftadd@exp1,f
 18178  040F  084C               	movf	___ftadd@exp2,w
 18179  0410  064D               	xorwf	___ftadd@exp1,w
 18180  0411  1903               	skipnz
 18181  0412  2C24               	goto	l6127
 18182  0413  3001               	movlw	1
 18183  0414  02CB               	subwf	___ftadd@sign,f
 18184  0415  084B               	movf	___ftadd@sign,w
 18185  0416  3907               	andlw	7
 18186  0417  1903               	btfsc	3,2
 18187  0418  2C24               	goto	l6127
 18188  0419  2C07               	goto	l6119
 18189  041A                     l6125:	
 18190  041A  3001               	movlw	1
 18191  041B                     u4975:	
 18192  041B  36C6               	lsrf	___ftadd@f2+2,f
 18193  041C  0CC5               	rrf	___ftadd@f2+1,f
 18194  041D  0CC4               	rrf	___ftadd@f2,f
 18195  041E  0B89               	decfsz	9,f
 18196  041F  2C1B               	goto	u4975
 18197  0420  3001               	movlw	1
 18198  0421  00C7               	movwf	??___ftadd
 18199  0422  0847               	movf	??___ftadd,w
 18200  0423  07CC               	addwf	___ftadd@exp2,f
 18201  0424                     l6127:	
 18202  0424  084D               	movf	___ftadd@exp1,w
 18203  0425  064C               	xorwf	___ftadd@exp2,w
 18204  0426  1D03               	skipz
 18205  0427  2C1A               	goto	l6125
 18206  0428                     l2970:	
 18207  0428  1FCB               	btfss	___ftadd@sign,7
 18208  0429  2C3A               	goto	l6131
 18209  042A  30FF               	movlw	255
 18210  042B  06C1               	xorwf	___ftadd@f1,f
 18211  042C  30FF               	movlw	255
 18212  042D  06C2               	xorwf	___ftadd@f1+1,f
 18213  042E  30FF               	movlw	255
 18214  042F  06C3               	xorwf	___ftadd@f1+2,f
 18215  0430  3001               	movlw	1
 18216  0431  07C1               	addwf	___ftadd@f1,f
 18217  0432  3000               	movlw	0
 18218  0433  1803               	skipnc
 18219  0434  3001               	movlw	1
 18220  0435  07C2               	addwf	___ftadd@f1+1,f
 18221  0436  3000               	movlw	0
 18222  0437  1803               	skipnc
 18223  0438  3001               	movlw	1
 18224  0439  07C3               	addwf	___ftadd@f1+2,f
 18225  043A                     l6131:	
 18226  043A  1F4B               	btfss	___ftadd@sign,6
 18227  043B  2C4C               	goto	l6135
 18228  043C  30FF               	movlw	255
 18229  043D  06C4               	xorwf	___ftadd@f2,f
 18230  043E  30FF               	movlw	255
 18231  043F  06C5               	xorwf	___ftadd@f2+1,f
 18232  0440  30FF               	movlw	255
 18233  0441  06C6               	xorwf	___ftadd@f2+2,f
 18234  0442  3001               	movlw	1
 18235  0443  07C4               	addwf	___ftadd@f2,f
 18236  0444  3000               	movlw	0
 18237  0445  1803               	skipnc
 18238  0446  3001               	movlw	1
 18239  0447  07C5               	addwf	___ftadd@f2+1,f
 18240  0448  3000               	movlw	0
 18241  0449  1803               	skipnc
 18242  044A  3001               	movlw	1
 18243  044B  07C6               	addwf	___ftadd@f2+2,f
 18244  044C                     l6135:	
 18245  044C  01CB               	clrf	___ftadd@sign
 18246  044D  0841               	movf	___ftadd@f1,w
 18247  044E  07C4               	addwf	___ftadd@f2,f
 18248  044F  0842               	movf	___ftadd@f1+1,w
 18249  0450  3DC5               	addwfc	___ftadd@f2+1,f
 18250  0451  0843               	movf	___ftadd@f1+2,w
 18251  0452  3DC6               	addwfc	___ftadd@f2+2,f
 18252  0453  1FC6               	btfss	___ftadd@f2+2,7
 18253  0454  2C67               	goto	l6145
 18254  0455  30FF               	movlw	255
 18255  0456  06C4               	xorwf	___ftadd@f2,f
 18256  0457  30FF               	movlw	255
 18257  0458  06C5               	xorwf	___ftadd@f2+1,f
 18258  0459  30FF               	movlw	255
 18259  045A  06C6               	xorwf	___ftadd@f2+2,f
 18260  045B  3001               	movlw	1
 18261  045C  07C4               	addwf	___ftadd@f2,f
 18262  045D  3000               	movlw	0
 18263  045E  1803               	skipnc
 18264  045F  3001               	movlw	1
 18265  0460  07C5               	addwf	___ftadd@f2+1,f
 18266  0461  3000               	movlw	0
 18267  0462  1803               	skipnc
 18268  0463  3001               	movlw	1
 18269  0464  07C6               	addwf	___ftadd@f2+2,f
 18270  0465  01CB               	clrf	___ftadd@sign
 18271  0466  0ACB               	incf	___ftadd@sign,f
 18272  0467                     l6145:	
 18273  0467  0844               	movf	___ftadd@f2,w
 18274  0468  00A0               	movwf	___ftpack@arg
 18275  0469  0845               	movf	___ftadd@f2+1,w
 18276  046A  00A1               	movwf	___ftpack@arg+1
 18277  046B  0846               	movf	___ftadd@f2+2,w
 18278  046C  00A2               	movwf	___ftpack@arg+2
 18279  046D  084D               	movf	___ftadd@exp1,w
 18280  046E  00C7               	movwf	??___ftadd
 18281  046F  0847               	movf	??___ftadd,w
 18282  0470  00A3               	movwf	___ftpack@exp
 18283  0471  084B               	movf	___ftadd@sign,w
 18284  0472  00C8               	movwf	??___ftadd+1
 18285  0473  0848               	movf	??___ftadd+1,w
 18286  0474  00A4               	movwf	___ftpack@sign
 18287  0475  3195  25A1         	fcall	___ftpack
 18288  0477  0020               	movlb	0	; select bank0
 18289  0478  0820               	movf	?___ftpack,w
 18290  0479  00C1               	movwf	?___ftadd
 18291  047A  0821               	movf	?___ftpack+1,w
 18292  047B  00C2               	movwf	?___ftadd+1
 18293  047C  0822               	movf	?___ftpack+2,w
 18294  047D  00C3               	movwf	?___ftadd+2
 18295  047E  0008               	return
 18296  047F                     __end_of___ftadd:	
 18297                           
 18298                           	psect	text126
 18299  07DE                     __ptext126:	
 18300 ;; *************** function ___awtoft *****************
 18301 ;; Defined at:
 18302 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18303 ;; Parameters:    Size  Location     Type
 18304 ;;  c               2    8[BANK0 ] int 
 18305 ;; Auto vars:     Size  Location     Type
 18306 ;;  sign            1   13[BANK0 ] unsigned char 
 18307 ;; Return value:  Size  Location     Type
 18308 ;;                  3    8[BANK0 ] float 
 18309 ;; Registers used:
 18310 ;;		wreg, status,2, status,0, pclath, cstack
 18311 ;; Tracked objects:
 18312 ;;		On entry : 0/0
 18313 ;;		On exit  : 0/0
 18314 ;;		Unchanged: 0/0
 18315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18316 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18318 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18319 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;Total ram usage:        6 bytes
 18321 ;; Hardware stack levels used:    1
 18322 ;; Hardware stack levels required when called:    6
 18323 ;; This function calls:
 18324 ;;		___ftpack
 18325 ;; This function is called by:
 18326 ;;		_getDimmerLights_PercentToValue
 18327 ;;		_getDimmerLights_ValueToPercent
 18328 ;; This function uses a non-reentrant model
 18329 ;;
 18330                           
 18331                           
 18332                           ;psect for function ___awtoft
 18333  07DE                     ___awtoft:	
 18334                           
 18335                           ;incstack = 0
 18336                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18337  07DE  0020               	movlb	0	; select bank0
 18338  07DF  01AD               	clrf	___awtoft@sign
 18339  07E0  1FA9               	btfss	___awtoft@c+1,7
 18340  07E1  2FE9               	goto	l6073
 18341  07E2  09A8               	comf	___awtoft@c,f
 18342  07E3  09A9               	comf	___awtoft@c+1,f
 18343  07E4  0AA8               	incf	___awtoft@c,f
 18344  07E5  1903               	skipnz
 18345  07E6  0AA9               	incf	___awtoft@c+1,f
 18346  07E7  01AD               	clrf	___awtoft@sign
 18347  07E8  0AAD               	incf	___awtoft@sign,f
 18348  07E9                     l6073:	
 18349  07E9  0828               	movf	___awtoft@c,w
 18350  07EA  00A0               	movwf	___ftpack@arg
 18351  07EB  0829               	movf	___awtoft@c+1,w
 18352  07EC  00A1               	movwf	___ftpack@arg+1
 18353  07ED  01A2               	clrf	___ftpack@arg+2
 18354  07EE  308E               	movlw	142
 18355  07EF  00AB               	movwf	??___awtoft
 18356  07F0  082B               	movf	??___awtoft,w
 18357  07F1  00A3               	movwf	___ftpack@exp
 18358  07F2  082D               	movf	___awtoft@sign,w
 18359  07F3  00AC               	movwf	??___awtoft+1
 18360  07F4  082C               	movf	??___awtoft+1,w
 18361  07F5  00A4               	movwf	___ftpack@sign
 18362  07F6  3195  25A1         	fcall	___ftpack
 18363  07F8  0020               	movlb	0	; select bank0
 18364  07F9  0820               	movf	?___ftpack,w
 18365  07FA  00A8               	movwf	?___awtoft
 18366  07FB  0821               	movf	?___ftpack+1,w
 18367  07FC  00A9               	movwf	?___awtoft+1
 18368  07FD  0822               	movf	?___ftpack+2,w
 18369  07FE  00AA               	movwf	?___awtoft+2
 18370  07FF  0008               	return
 18371  0800                     __end_of___awtoft:	
 18372                           
 18373                           	psect	text127
 18374  15A1                     __ptext127:	
 18375 ;; *************** function ___ftpack *****************
 18376 ;; Defined at:
 18377 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;  arg             3    0[BANK0 ] unsigned um
 18380 ;;  exp             1    3[BANK0 ] unsigned char 
 18381 ;;  sign            1    4[BANK0 ] unsigned char 
 18382 ;; Auto vars:     Size  Location     Type
 18383 ;;		None
 18384 ;; Return value:  Size  Location     Type
 18385 ;;                  3    0[BANK0 ] float 
 18386 ;; Registers used:
 18387 ;;		wreg, status,2, status,0
 18388 ;; Tracked objects:
 18389 ;;		On entry : 0/0
 18390 ;;		On exit  : 0/0
 18391 ;;		Unchanged: 0/0
 18392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18393 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18396 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18397 ;;Total ram usage:        8 bytes
 18398 ;; Hardware stack levels used:    1
 18399 ;; Hardware stack levels required when called:    5
 18400 ;; This function calls:
 18401 ;;		Nothing
 18402 ;; This function is called by:
 18403 ;;		___awtoft
 18404 ;;		___ftadd
 18405 ;;		___ftdiv
 18406 ;;		___ftmul
 18407 ;; This function uses a non-reentrant model
 18408 ;;
 18409                           
 18410                           
 18411                           ;psect for function ___ftpack
 18412  15A1                     ___ftpack:	
 18413                           
 18414                           ;incstack = 0
 18415                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18416  15A1  0020               	movlb	0	; select bank0
 18417  15A2  0823               	movf	___ftpack@exp,w
 18418  15A3  1903               	btfsc	3,2
 18419  15A4  2DAA               	goto	l5931
 18420  15A5  0822               	movf	___ftpack@arg+2,w
 18421  15A6  0421               	iorwf	___ftpack@arg+1,w
 18422  15A7  0420               	iorwf	___ftpack@arg,w
 18423  15A8  1D03               	skipz
 18424  15A9  2DBB               	goto	l5937
 18425  15AA                     l5931:	
 18426  15AA  3000               	movlw	0
 18427  15AB  00A0               	movwf	?___ftpack
 18428  15AC  3000               	movlw	0
 18429  15AD  00A1               	movwf	?___ftpack+1
 18430  15AE  3000               	movlw	0
 18431  15AF  00A2               	movwf	?___ftpack+2
 18432  15B0  0008               	return
 18433  15B1                     l5935:	
 18434  15B1  3001               	movlw	1
 18435  15B2  00A5               	movwf	??___ftpack
 18436  15B3  0825               	movf	??___ftpack,w
 18437  15B4  07A3               	addwf	___ftpack@exp,f
 18438  15B5  3001               	movlw	1
 18439  15B6                     u4505:	
 18440  15B6  36A2               	lsrf	___ftpack@arg+2,f
 18441  15B7  0CA1               	rrf	___ftpack@arg+1,f
 18442  15B8  0CA0               	rrf	___ftpack@arg,f
 18443  15B9  0B89               	decfsz	9,f
 18444  15BA  2DB6               	goto	u4505
 18445  15BB                     l5937:	
 18446  15BB  30FE               	movlw	254
 18447  15BC  0522               	andwf	___ftpack@arg+2,w
 18448  15BD  1903               	btfsc	3,2
 18449  15BE  2DD4               	goto	l2941
 18450  15BF  2DB1               	goto	l5935
 18451  15C0                     l5939:	
 18452  15C0  3001               	movlw	1
 18453  15C1  00A5               	movwf	??___ftpack
 18454  15C2  0825               	movf	??___ftpack,w
 18455  15C3  07A3               	addwf	___ftpack@exp,f
 18456  15C4  3001               	movlw	1
 18457  15C5  07A0               	addwf	___ftpack@arg,f
 18458  15C6  3000               	movlw	0
 18459  15C7  1803               	skipnc
 18460  15C8  3001               	movlw	1
 18461  15C9  07A1               	addwf	___ftpack@arg+1,f
 18462  15CA  3000               	movlw	0
 18463  15CB  1803               	skipnc
 18464  15CC  3001               	movlw	1
 18465  15CD  07A2               	addwf	___ftpack@arg+2,f
 18466  15CE  3001               	movlw	1
 18467  15CF                     u4525:	
 18468  15CF  36A2               	lsrf	___ftpack@arg+2,f
 18469  15D0  0CA1               	rrf	___ftpack@arg+1,f
 18470  15D1  0CA0               	rrf	___ftpack@arg,f
 18471  15D2  0B89               	decfsz	9,f
 18472  15D3  2DCF               	goto	u4525
 18473  15D4                     l2941:	
 18474  15D4  30FF               	movlw	255
 18475  15D5  0522               	andwf	___ftpack@arg+2,w
 18476  15D6  1903               	btfsc	3,2
 18477  15D7  2DE1               	goto	l5947
 18478  15D8  2DC0               	goto	l5939
 18479  15D9                     l5945:	
 18480  15D9  3001               	movlw	1
 18481  15DA  02A3               	subwf	___ftpack@exp,f
 18482  15DB  3001               	movlw	1
 18483  15DC                     u4545:	
 18484  15DC  35A0               	lslf	___ftpack@arg,f
 18485  15DD  0DA1               	rlf	___ftpack@arg+1,f
 18486  15DE  0DA2               	rlf	___ftpack@arg+2,f
 18487  15DF  0B89               	decfsz	9,f
 18488  15E0  2DDC               	goto	u4545
 18489  15E1                     l5947:	
 18490  15E1  1FA1               	btfss	___ftpack@arg+1,7
 18491  15E2  2DD9               	goto	l5945
 18492  15E3  1823               	btfsc	___ftpack@exp,0
 18493  15E4  2DEB               	goto	l2947
 18494  15E5  30FF               	movlw	255
 18495  15E6  05A0               	andwf	___ftpack@arg,f
 18496  15E7  307F               	movlw	127
 18497  15E8  05A1               	andwf	___ftpack@arg+1,f
 18498  15E9  30FF               	movlw	255
 18499  15EA  05A2               	andwf	___ftpack@arg+2,f
 18500  15EB                     l2947:	
 18501  15EB  1003               	clrc
 18502  15EC  0CA3               	rrf	___ftpack@exp,f
 18503  15ED  0823               	movf	___ftpack@exp,w
 18504  15EE  00A5               	movwf	??___ftpack
 18505  15EF  01A6               	clrf	??___ftpack+1
 18506  15F0  01A7               	clrf	??___ftpack+2
 18507  15F1  3010               	movlw	16
 18508  15F2                     u4575:	
 18509  15F2  35A5               	lslf	??___ftpack,f
 18510  15F3  0DA6               	rlf	??___ftpack+1,f
 18511  15F4  0DA7               	rlf	??___ftpack+2,f
 18512  15F5  0B89               	decfsz	9,f
 18513  15F6  2DF2               	goto	u4575
 18514  15F7  0825               	movf	??___ftpack,w
 18515  15F8  04A0               	iorwf	___ftpack@arg,f
 18516  15F9  0826               	movf	??___ftpack+1,w
 18517  15FA  04A1               	iorwf	___ftpack@arg+1,f
 18518  15FB  0827               	movf	??___ftpack+2,w
 18519  15FC  04A2               	iorwf	___ftpack@arg+2,f
 18520  15FD  0824               	movf	___ftpack@sign,w
 18521  15FE  1903               	btfsc	3,2
 18522  15FF  0008               	return
 18523  1600  17A2               	bsf	___ftpack@arg+2,7
 18524  1601  0008               	return
 18525  1602                     __end_of___ftpack:	
 18526                           
 18527                           	psect	text128
 18528  1B3A                     __ptext128:	
 18529 ;; *************** function _Division *****************
 18530 ;; Defined at:
 18531 ;;		line 1504 in file "../src/Dimmer_B1.c"
 18532 ;; Parameters:    Size  Location     Type
 18533 ;;  value           1    wreg     unsigned char 
 18534 ;;  num             1    5[BANK0 ] unsigned char 
 18535 ;; Auto vars:     Size  Location     Type
 18536 ;;  value           1    8[BANK0 ] unsigned char 
 18537 ;;  result          1    9[BANK0 ] unsigned char 
 18538 ;; Return value:  Size  Location     Type
 18539 ;;                  1    wreg      unsigned char 
 18540 ;; Registers used:
 18541 ;;		wreg, status,2, status,0, pclath, cstack
 18542 ;; Tracked objects:
 18543 ;;		On entry : 0/0
 18544 ;;		On exit  : 0/0
 18545 ;;		Unchanged: 0/0
 18546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18550 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18551 ;;Total ram usage:        5 bytes
 18552 ;; Hardware stack levels used:    1
 18553 ;; Hardware stack levels required when called:    6
 18554 ;; This function calls:
 18555 ;;		___lbdiv
 18556 ;; This function is called by:
 18557 ;;		_DimmerIntr_Initialization
 18558 ;; This function uses a non-reentrant model
 18559 ;;
 18560                           
 18561                           
 18562                           ;psect for function _Division
 18563  1B3A                     _Division:	
 18564                           
 18565                           ;incstack = 0
 18566                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18567                           ;Division@value stored from wreg
 18568  1B3A  0020               	movlb	0	; select bank0
 18569  1B3B  00A8               	movwf	Division@value
 18570                           
 18571                           ;Dimmer_B1.c: 1505: char result = (char) (value / num);
 18572  1B3C  0825               	movf	Division@num,w
 18573  1B3D  00A6               	movwf	??_Division
 18574  1B3E  0826               	movf	??_Division,w
 18575  1B3F  00A0               	movwf	___lbdiv@divisor
 18576  1B40  0828               	movf	Division@value,w
 18577  1B41  319F  271E         	fcall	___lbdiv
 18578  1B43  0020               	movlb	0	; select bank0
 18579  1B44  00A7               	movwf	??_Division+1
 18580  1B45  0827               	movf	??_Division+1,w
 18581  1B46  00A9               	movwf	Division@result
 18582                           
 18583                           ;Dimmer_B1.c: 1506: return result;
 18584  1B47  0829               	movf	Division@result,w
 18585  1B48  0008               	return
 18586  1B49                     __end_of_Division:	
 18587                           
 18588                           	psect	text129
 18589  1F1E                     __ptext129:	
 18590 ;; *************** function ___lbdiv *****************
 18591 ;; Defined at:
 18592 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18593 ;; Parameters:    Size  Location     Type
 18594 ;;  dividend        1    wreg     unsigned char 
 18595 ;;  divisor         1    0[BANK0 ] unsigned char 
 18596 ;; Auto vars:     Size  Location     Type
 18597 ;;  dividend        1    2[BANK0 ] unsigned char 
 18598 ;;  quotient        1    4[BANK0 ] unsigned char 
 18599 ;;  counter         1    3[BANK0 ] unsigned char 
 18600 ;; Return value:  Size  Location     Type
 18601 ;;                  1    wreg      unsigned char 
 18602 ;; Registers used:
 18603 ;;		wreg, status,2, status,0
 18604 ;; Tracked objects:
 18605 ;;		On entry : 0/0
 18606 ;;		On exit  : 0/0
 18607 ;;		Unchanged: 0/0
 18608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18609 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18610 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18612 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18613 ;;Total ram usage:        5 bytes
 18614 ;; Hardware stack levels used:    1
 18615 ;; Hardware stack levels required when called:    5
 18616 ;; This function calls:
 18617 ;;		Nothing
 18618 ;; This function is called by:
 18619 ;;		_Division
 18620 ;; This function uses a non-reentrant model
 18621 ;;
 18622                           
 18623                           
 18624                           ;psect for function ___lbdiv
 18625  1F1E                     ___lbdiv:	
 18626                           
 18627                           ;incstack = 0
 18628                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18629                           ;___lbdiv@dividend stored from wreg
 18630  1F1E  0020               	movlb	0	; select bank0
 18631  1F1F  00A2               	movwf	___lbdiv@dividend
 18632  1F20  01A4               	clrf	___lbdiv@quotient
 18633  1F21  0820               	movf	___lbdiv@divisor,w
 18634  1F22  1903               	btfsc	3,2
 18635  1F23  2F3E               	goto	l6907
 18636  1F24  01A3               	clrf	___lbdiv@counter
 18637  1F25  0AA3               	incf	___lbdiv@counter,f
 18638  1F26                     l6895:	
 18639  1F26  1BA0               	btfsc	___lbdiv@divisor,7
 18640  1F27  2F2F               	goto	l6897
 18641  1F28  1003               	clrc
 18642  1F29  0DA0               	rlf	___lbdiv@divisor,f
 18643  1F2A  3001               	movlw	1
 18644  1F2B  00A1               	movwf	??___lbdiv
 18645  1F2C  0821               	movf	??___lbdiv,w
 18646  1F2D  07A3               	addwf	___lbdiv@counter,f
 18647  1F2E  2F26               	goto	l6895
 18648  1F2F                     l6897:	
 18649  1F2F  1003               	clrc
 18650  1F30  0DA4               	rlf	___lbdiv@quotient,f
 18651  1F31  0820               	movf	___lbdiv@divisor,w
 18652  1F32  0222               	subwf	___lbdiv@dividend,w
 18653  1F33  1C03               	skipc
 18654  1F34  2F39               	goto	L10
 18655  1F35  0820               	movf	___lbdiv@divisor,w
 18656  1F36  02A2               	subwf	___lbdiv@dividend,f
 18657  1F37  1424               	bsf	___lbdiv@quotient,0
 18658  1F38  1003               	clrc
 18659  1F39                     L10:	
 18660  1F39  0CA0               	rrf	___lbdiv@divisor,f
 18661  1F3A  3001               	movlw	1
 18662  1F3B  02A3               	subwf	___lbdiv@counter,f
 18663  1F3C  1D03               	btfss	3,2
 18664  1F3D  2F2F               	goto	l6897
 18665  1F3E                     l6907:	
 18666  1F3E  0824               	movf	___lbdiv@quotient,w
 18667  1F3F  0008               	return
 18668  1F40                     __end_of___lbdiv:	
 18669                           
 18670                           	psect	text130
 18671  19CC                     __ptext130:	
 18672 ;; *************** function _DelayOff_Main *****************
 18673 ;; Defined at:
 18674 ;;		line 41 in file "../src/DelayOff_B1.c"
 18675 ;; Parameters:    Size  Location     Type
 18676 ;;		None
 18677 ;; Auto vars:     Size  Location     Type
 18678 ;;		None
 18679 ;; Return value:  Size  Location     Type
 18680 ;;		None               void
 18681 ;; Registers used:
 18682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18683 ;; Tracked objects:
 18684 ;;		On entry : 0/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18692 ;;Total ram usage:        0 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    9
 18695 ;; This function calls:
 18696 ;;		_DlyOff_Main
 18697 ;; This function is called by:
 18698 ;;		_main
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           
 18703                           ;psect for function _DelayOff_Main
 18704  19CC                     _DelayOff_Main:	
 18705                           
 18706                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18707                           
 18708                           ;incstack = 0
 18709                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18710  19CC  3001               	movlw	1
 18711  19CD  3189  210C         	fcall	_DlyOff_Main
 18712  19CF  0008               	return
 18713  19D0                     __end_of_DelayOff_Main:	
 18714                           
 18715                           	psect	text131
 18716  090C                     __ptext131:	
 18717 ;; *************** function _DlyOff_Main *****************
 18718 ;; Defined at:
 18719 ;;		line 61 in file "../src/DelayOff_B1.c"
 18720 ;; Parameters:    Size  Location     Type
 18721 ;;  sw              1    wreg     unsigned char 
 18722 ;; Auto vars:     Size  Location     Type
 18723 ;;  sw              1   71[BANK0 ] unsigned char 
 18724 ;; Return value:  Size  Location     Type
 18725 ;;		None               void
 18726 ;; Registers used:
 18727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18728 ;; Tracked objects:
 18729 ;;		On entry : 0/0
 18730 ;;		On exit  : 0/0
 18731 ;;		Unchanged: 0/0
 18732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18737 ;;Total ram usage:        3 bytes
 18738 ;; Hardware stack levels used:    1
 18739 ;; Hardware stack levels required when called:    8
 18740 ;; This function calls:
 18741 ;;		_DelayOffPointSelect
 18742 ;;		_getDimmerLights_Status
 18743 ;;		_setDimmerLights_SwOff
 18744 ;;		_setDimmerLights_SwOn
 18745 ;;		_setProductData
 18746 ;; This function is called by:
 18747 ;;		_DelayOff_Main
 18748 ;; This function uses a non-reentrant model
 18749 ;;
 18750                           
 18751                           
 18752                           ;psect for function _DlyOff_Main
 18753  090C                     _DlyOff_Main:	
 18754                           
 18755                           ;incstack = 0
 18756                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18757                           ;DlyOff_Main@sw stored from wreg
 18758  090C  0020               	movlb	0	; select bank0
 18759  090D  00E7               	movwf	DlyOff_Main@sw
 18760                           
 18761                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18762  090E  0867               	movf	DlyOff_Main@sw,w
 18763  090F  319A  2280  3189   	fcall	_DelayOffPointSelect
 18764                           
 18765                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18766  0912  0021               	movlb	1	; select bank1
 18767  0913  084A               	movf	_DelayOff^(0+128),w
 18768  0914  0086               	movwf	6
 18769  0915  3001               	movlw	1	; select bank2/3
 18770  0916  0087               	movwf	7
 18771  0917  1C81               	btfss	1,1
 18772  0918  0008               	return
 18773                           
 18774                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18775  0919  084A               	movf	_DelayOff^(0+128),w
 18776  091A  3E02               	addlw	2
 18777  091B  0086               	movwf	6
 18778  091C  3001               	movlw	1	; select bank2/3
 18779  091D  0087               	movwf	7
 18780  091E  3001               	movlw	1
 18781  091F  0781               	addwf	1,f
 18782  0920  3141               	addfsr 1,1
 18783  0921  1803               	skipnc
 18784  0922  0A81               	incf	1,f
 18785                           
 18786                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= (60000-10000)/20) {
 18787  0923  084A               	movf	_DelayOff^(0+128),w
 18788  0924  3E02               	addlw	2
 18789  0925  0086               	movwf	6
 18790  0926  3001               	movlw	1	; select bank2/3
 18791  0927  0087               	movwf	7
 18792  0928  3F40               	moviw [0]fsr1
 18793  0929  0020               	movlb	0	; select bank0
 18794  092A  00E5               	movwf	??_DlyOff_Main
 18795  092B  3F41               	moviw [1]fsr1
 18796  092C  00E6               	movwf	??_DlyOff_Main+1
 18797  092D  3009               	movlw	9
 18798  092E  0266               	subwf	??_DlyOff_Main+1,w
 18799  092F  30C4               	movlw	196
 18800  0930  1903               	skipnz
 18801  0931  0265               	subwf	??_DlyOff_Main,w
 18802  0932  1C03               	skipc
 18803  0933  0008               	return
 18804                           
 18805                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18806  0934  0021               	movlb	1	; select bank1
 18807  0935  084A               	movf	_DelayOff^(0+128),w
 18808  0936  3E02               	addlw	2
 18809  0937  0086               	movwf	6
 18810  0938  3001               	movlw	1	; select bank2/3
 18811  0939  0087               	movwf	7
 18812  093A  3000               	movlw	0
 18813  093B  3FC0               	movwi [0]fsr1
 18814  093C  3FC1               	movwi [1]fsr1
 18815                           
 18816                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18817  093D  3001               	movlw	1
 18818  093E  0020               	movlb	0	; select bank0
 18819  093F  00E5               	movwf	??_DlyOff_Main
 18820  0940  0021               	movlb	1	; select bank1
 18821  0941  084A               	movf	_DelayOff^(0+128),w
 18822  0942  3E04               	addlw	4
 18823  0943  0086               	movwf	6
 18824  0944  3001               	movlw	1	; select bank2/3
 18825  0945  0087               	movwf	7
 18826  0946  0020               	movlb	0	; select bank0
 18827  0947  0865               	movf	??_DlyOff_Main,w
 18828  0948  0781               	addwf	1,f
 18829                           
 18830                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18831  0949  0021               	movlb	1	; select bank1
 18832  094A  084A               	movf	_DelayOff^(0+128),w
 18833  094B  3E04               	addlw	4
 18834  094C  0086               	movwf	6
 18835  094D  3001               	movlw	1	; select bank2/3
 18836  094E  0087               	movwf	7
 18837  094F  0A4A               	incf	_DelayOff^(0+128),w
 18838  0950  0084               	movwf	4
 18839  0951  3001               	movlw	1	; select bank2/3
 18840  0952  0085               	movwf	5
 18841  0953  0800               	movf	0,w
 18842  0954  0201               	subwf	1,w
 18843  0955  1C03               	skipc
 18844  0956  0008               	return
 18845                           
 18846                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18847  0957  084A               	movf	_DelayOff^(0+128),w
 18848  0958  3E04               	addlw	4
 18849  0959  0086               	movwf	6
 18850  095A  3001               	movlw	1	; select bank2/3
 18851  095B  0087               	movwf	7
 18852  095C  0181               	clrf	1
 18853                           
 18854                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18855  095D  084A               	movf	_DelayOff^(0+128),w
 18856  095E  0086               	movwf	6
 18857  095F  3001               	movlw	1	; select bank2/3
 18858  0960  0087               	movwf	7
 18859  0961  1081               	bcf	1,1
 18860                           
 18861                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18862  0962  0020               	movlb	0	; select bank0
 18863  0963  0867               	movf	DlyOff_Main@sw,w
 18864  0964  319B  2377  3189   	fcall	_getDimmerLights_Status
 18865  0967  3A01               	xorlw	1
 18866  0968  1D03               	skipz
 18867  0969  2974               	goto	l539
 18868                           
 18869                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18870  096A  0020               	movlb	0	; select bank0
 18871  096B  0867               	movf	DlyOff_Main@sw,w
 18872  096C  3193  239A  3189   	fcall	_setDimmerLights_SwOn
 18873                           
 18874                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18875  096F  0020               	movlb	0	; select bank0
 18876  0970  0867               	movf	DlyOff_Main@sw,w
 18877  0971  3191  2120  3189   	fcall	_setDimmerLights_SwOff
 18878  0974                     l539:	
 18879                           
 18880                           ;DelayOff_B1.c: 78: }
 18881                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18882  0974  0020               	movlb	0	; select bank0
 18883  0975  01E2               	clrf	setProductData@value
 18884  0976  0867               	movf	DlyOff_Main@sw,w
 18885  0977  3E1A               	addlw	26
 18886  0978  319A  2298         	fcall	_setProductData
 18887  097A  0008               	return
 18888  097B                     __end_of_DlyOff_Main:	
 18889                           
 18890                           	psect	text132
 18891  1A98                     __ptext132:	
 18892 ;; *************** function _setProductData *****************
 18893 ;; Defined at:
 18894 ;;		line 645 in file "../src/Main_B1.c"
 18895 ;; Parameters:    Size  Location     Type
 18896 ;;  address         1    wreg     unsigned char 
 18897 ;;  value           1   66[BANK0 ] unsigned char 
 18898 ;; Auto vars:     Size  Location     Type
 18899 ;;  address         1   68[BANK0 ] unsigned char 
 18900 ;; Return value:  Size  Location     Type
 18901 ;;		None               void
 18902 ;; Registers used:
 18903 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18904 ;; Tracked objects:
 18905 ;;		On entry : 0/0
 18906 ;;		On exit  : 0/0
 18907 ;;		Unchanged: 0/0
 18908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18909 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18913 ;;Total ram usage:        3 bytes
 18914 ;; Hardware stack levels used:    1
 18915 ;; Hardware stack levels required when called:    5
 18916 ;; This function calls:
 18917 ;;		Nothing
 18918 ;; This function is called by:
 18919 ;;		_DlyOff_Main
 18920 ;;		_setDelayOff_GO
 18921 ;;		_setDimmerLights_OnOff
 18922 ;;		_setDimmerLights_Dimming
 18923 ;;		_setTemp_Main
 18924 ;;		_setLog_Code
 18925 ;;		_setControl_Lights_Table
 18926 ;;		_setRFSW_AdjControl
 18927 ;;		_setRF_DimmerLights
 18928 ;; This function uses a non-reentrant model
 18929 ;;
 18930                           
 18931                           
 18932                           ;psect for function _setProductData
 18933  1A98                     _setProductData:	
 18934                           
 18935                           ;incstack = 0
 18936                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18937                           ;setProductData@address stored from wreg
 18938  1A98  0020               	movlb	0	; select bank0
 18939  1A99  00E4               	movwf	setProductData@address
 18940                           
 18941                           ;Main_B1.c: 646: _product.Data[address] = value;
 18942  1A9A  0862               	movf	setProductData@value,w
 18943  1A9B  00E3               	movwf	??_setProductData
 18944  1A9C  0864               	movf	setProductData@address,w
 18945  1A9D  3E45               	addlw	__product& (0+255)
 18946  1A9E  0086               	movwf	6
 18947  1A9F  3002               	movlw	2	; select bank4/5
 18948  1AA0  0087               	movwf	7
 18949  1AA1  0863               	movf	??_setProductData,w
 18950  1AA2  0081               	movwf	1
 18951  1AA3  0008               	return
 18952  1AA4                     __end_of_setProductData:	
 18953                           
 18954                           	psect	text133
 18955  139A                     __ptext133:	
 18956 ;; *************** function _setDimmerLights_SwOn *****************
 18957 ;; Defined at:
 18958 ;;		line 729 in file "../src/Dimmer_B1.c"
 18959 ;; Parameters:    Size  Location     Type
 18960 ;;  sw              1    wreg     unsigned char 
 18961 ;; Auto vars:     Size  Location     Type
 18962 ;;  sw              1   16[BANK0 ] unsigned char 
 18963 ;;  dimmingStatu    1   15[BANK0 ] unsigned char 
 18964 ;;  idle            1   14[BANK0 ] unsigned char 
 18965 ;; Return value:  Size  Location     Type
 18966 ;;		None               void
 18967 ;; Registers used:
 18968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18969 ;; Tracked objects:
 18970 ;;		On entry : 0/0
 18971 ;;		On exit  : 0/0
 18972 ;;		Unchanged: 0/0
 18973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18975 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18977 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18978 ;;Total ram usage:        4 bytes
 18979 ;; Hardware stack levels used:    1
 18980 ;; Hardware stack levels required when called:    7
 18981 ;; This function calls:
 18982 ;;		_DimmerLights_SelectPointer
 18983 ;;		_getDimmerIntr_Dimming_Sw
 18984 ;;		_setBuz
 18985 ;; This function is called by:
 18986 ;;		_DlyOff_Main
 18987 ;;		_setControl_Lights_Table
 18988 ;;		_setRFSW_Control
 18989 ;;		_setRFSW_AdjControl
 18990 ;;		_setSw_Main
 18991 ;; This function uses a non-reentrant model
 18992 ;;
 18993                           
 18994                           
 18995                           ;psect for function _setDimmerLights_SwOn
 18996  139A                     _setDimmerLights_SwOn:	
 18997                           
 18998                           ;incstack = 0
 18999                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19000                           ;setDimmerLights_SwOn@sw stored from wreg
 19001  139A  0020               	movlb	0	; select bank0
 19002  139B  00B0               	movwf	setDimmerLights_SwOn@sw
 19003                           
 19004                           ;Dimmer_B1.c: 730: char idle = 0;
 19005  139C  01AE               	clrf	setDimmerLights_SwOn@idle
 19006                           
 19007                           ;Dimmer_B1.c: 732: char dimmingStatus = 0;
 19008  139D  01AF               	clrf	setDimmerLights_SwOn@dimmingStatus
 19009                           
 19010                           ;Dimmer_B1.c: 733: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 19011  139E  0830               	movf	setDimmerLights_SwOn@sw,w
 19012  139F  319B  232B  3193   	fcall	_getDimmerIntr_Dimming_Sw
 19013  13A2  0020               	movlb	0	; select bank0
 19014  13A3  00AD               	movwf	??_setDimmerLights_SwOn
 19015  13A4  082D               	movf	??_setDimmerLights_SwOn,w
 19016  13A5  00AF               	movwf	setDimmerLights_SwOn@dimmingStatus
 19017                           
 19018                           ;Dimmer_B1.c: 760: DimmerLights_SelectPointer(sw);
 19019  13A6  0830               	movf	setDimmerLights_SwOn@sw,w
 19020  13A7  319A  228C  3193   	fcall	_DimmerLights_SelectPointer
 19021                           
 19022                           ;Dimmer_B1.c: 761: if (idle == 0) {
 19023  13AA  0020               	movlb	0	; select bank0
 19024  13AB  08AE               	movf	setDimmerLights_SwOn@idle,f
 19025  13AC  1D03               	skipz
 19026  13AD  0008               	return
 19027                           
 19028                           ;Dimmer_B1.c: 763: if (dimmingStatus == 0) {
 19029  13AE  08AF               	movf	setDimmerLights_SwOn@dimmingStatus,f
 19030  13AF  1D03               	skipz
 19031  13B0  2BD3               	goto	l6341
 19032                           
 19033                           ;Dimmer_B1.c: 764: DimmerLights->SwFlag = 1;
 19034  13B1  0021               	movlb	1	; select bank1
 19035  13B2  084C               	movf	_DimmerLights^(0+128),w
 19036  13B3  0086               	movwf	6
 19037  13B4  3001               	movlw	1	; select bank2/3
 19038  13B5  0087               	movwf	7
 19039  13B6  1401               	bsf	1,0
 19040                           
 19041                           ;Dimmer_B1.c: 765: if (DimmerLights->Status == 0) {
 19042  13B7  0A4C               	incf	_DimmerLights^(0+128),w
 19043  13B8  0086               	movwf	6
 19044  13B9  3001               	movlw	1	; select bank2/3
 19045  13BA  0087               	movwf	7
 19046  13BB  1801               	btfsc	1,0
 19047  13BC  2BCD               	goto	l6339
 19048                           
 19049                           ;Dimmer_B1.c: 766: DimmerLights->Status = 1;
 19050  13BD  0A4C               	incf	_DimmerLights^(0+128),w
 19051  13BE  0086               	movwf	6
 19052  13BF  3001               	movlw	1	; select bank2/3
 19053  13C0  0087               	movwf	7
 19054  13C1  1401               	bsf	1,0
 19055                           
 19056                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 19057  13C2  084C               	movf	_DimmerLights^(0+128),w
 19058  13C3  0086               	movwf	6
 19059  13C4  3001               	movlw	1	; select bank2/3
 19060  13C5  0087               	movwf	7
 19061  13C6  1481               	bsf	1,1
 19062                           
 19063                           ;Dimmer_B1.c: 770: DimmerLights->Switch = 1;
 19064  13C7  084C               	movf	_DimmerLights^(0+128),w
 19065  13C8  0086               	movwf	6
 19066  13C9  3001               	movlw	1	; select bank2/3
 19067  13CA  0087               	movwf	7
 19068  13CB  1501               	bsf	1,2
 19069                           
 19070                           ;Dimmer_B1.c: 777: } else {
 19071  13CC  2BDE               	goto	l6343
 19072  13CD                     l6339:	
 19073                           
 19074                           ;Dimmer_B1.c: 778: DimmerLights->Status = 0;
 19075  13CD  0A4C               	incf	_DimmerLights^(0+128),w
 19076  13CE  0086               	movwf	6
 19077  13CF  3001               	movlw	1	; select bank2/3
 19078  13D0  0087               	movwf	7
 19079  13D1  1001               	bcf	1,0
 19080                           
 19081                           ;Dimmer_B1.c: 779: }
 19082                           ;Dimmer_B1.c: 780: } else {
 19083  13D2  2BDE               	goto	l6343
 19084  13D3                     l6341:	
 19085                           
 19086                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 1;
 19087  13D3  0021               	movlb	1	; select bank1
 19088  13D4  084C               	movf	_DimmerLights^(0+128),w
 19089  13D5  0086               	movwf	6
 19090  13D6  3001               	movlw	1	; select bank2/3
 19091  13D7  0087               	movwf	7
 19092  13D8  1601               	bsf	1,4
 19093                           
 19094                           ;Dimmer_B1.c: 782: DimmerLights->DimmingSwitch = 0;
 19095  13D9  084C               	movf	_DimmerLights^(0+128),w
 19096  13DA  0086               	movwf	6
 19097  13DB  3001               	movlw	1	; select bank2/3
 19098  13DC  0087               	movwf	7
 19099  13DD  1281               	bcf	1,5
 19100  13DE                     l6343:	
 19101                           
 19102                           ;Dimmer_B1.c: 783: }
 19103                           ;Dimmer_B1.c: 784: setBuz(1, 100);
 19104  13DE  3064               	movlw	100
 19105  13DF  0020               	movlb	0	; select bank0
 19106  13E0  00A9               	movwf	setBuz@time
 19107  13E1  3000               	movlw	0
 19108  13E2  00AA               	movwf	setBuz@time+1
 19109  13E3  3001               	movlw	1
 19110  13E4  3194  248F         	fcall	_setBuz
 19111  13E6  0008               	return
 19112  13E7                     __end_of_setDimmerLights_SwOn:	
 19113                           
 19114                           	psect	text134
 19115  148F                     __ptext134:	
 19116 ;; *************** function _setBuz *****************
 19117 ;; Defined at:
 19118 ;;		line 22 in file "../src/Buzzer_B1.c"
 19119 ;; Parameters:    Size  Location     Type
 19120 ;;  count           1    wreg     unsigned char 
 19121 ;;  time            2    9[BANK0 ] int 
 19122 ;; Auto vars:     Size  Location     Type
 19123 ;;  count           1   12[BANK0 ] unsigned char 
 19124 ;; Return value:  Size  Location     Type
 19125 ;;		None               void
 19126 ;; Registers used:
 19127 ;;		wreg, status,2, status,0, pclath, cstack
 19128 ;; Tracked objects:
 19129 ;;		On entry : 0/0
 19130 ;;		On exit  : 0/0
 19131 ;;		Unchanged: 0/0
 19132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19133 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19136 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19137 ;;Total ram usage:        4 bytes
 19138 ;; Hardware stack levels used:    1
 19139 ;; Hardware stack levels required when called:    6
 19140 ;; This function calls:
 19141 ;;		___awdiv
 19142 ;; This function is called by:
 19143 ;;		_setDimmerLights_SwOn
 19144 ;;		_setDimmerLights_Dimming
 19145 ;;		_my_MainTimer
 19146 ;;		_Exception_Main
 19147 ;;		_setTemp_Main
 19148 ;;		_setLog_Code
 19149 ;;		_setRFSW_Control
 19150 ;;		_setRFSW_AdjControl
 19151 ;;		_setSw_Main
 19152 ;; This function uses a non-reentrant model
 19153 ;;
 19154                           
 19155                           
 19156                           ;psect for function _setBuz
 19157  148F                     _setBuz:	
 19158                           
 19159                           ;incstack = 0
 19160                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 19161                           ;setBuz@count stored from wreg
 19162  148F  0020               	movlb	0	; select bank0
 19163  1490  00AC               	movwf	setBuz@count
 19164                           
 19165                           ;Buzzer_B1.c: 23: time /= 20;
 19166  1491  3014               	movlw	20
 19167  1492  00A0               	movwf	___awdiv@divisor
 19168  1493  3000               	movlw	0
 19169  1494  00A1               	movwf	___awdiv@divisor+1
 19170  1495  082A               	movf	setBuz@time+1,w
 19171  1496  01A3               	clrf	___awdiv@dividend+1
 19172  1497  07A3               	addwf	___awdiv@dividend+1,f
 19173  1498  0829               	movf	setBuz@time,w
 19174  1499  01A2               	clrf	___awdiv@dividend
 19175  149A  07A2               	addwf	___awdiv@dividend,f
 19176  149B  3193  23E7  3194   	fcall	___awdiv
 19177  149E  0020               	movlb	0	; select bank0
 19178  149F  0821               	movf	?___awdiv+1,w
 19179  14A0  01AA               	clrf	setBuz@time+1
 19180  14A1  07AA               	addwf	setBuz@time+1,f
 19181  14A2  0820               	movf	?___awdiv,w
 19182  14A3  01A9               	clrf	setBuz@time
 19183  14A4  07A9               	addwf	setBuz@time,f
 19184                           
 19185                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 19186  14A5  0022               	movlb	2	; select bank2
 19187  14A6  1C20               	btfss	_Buz1^(0+256),0
 19188  14A7  0008               	return
 19189                           
 19190                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 19191  14A8  18A0               	btfsc	_Buz1^(0+256),1
 19192  14A9  2CC0               	goto	l88
 19193                           
 19194                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 19195  14AA  14A0               	bsf	_Buz1^(0+256),1
 19196                           
 19197                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 19198  14AB  01A1               	clrf	(_Buz1^(0+256)+1)
 19199  14AC  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19200                           
 19201                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 19202  14AD  0020               	movlb	0	; select bank0
 19203  14AE  082C               	movf	setBuz@count,w
 19204  14AF  00AB               	movwf	??_setBuz
 19205  14B0  082B               	movf	??_setBuz,w
 19206  14B1  0022               	movlb	2	; select bank2
 19207  14B2  00A3               	movwf	(_Buz1^(0+256)+3)
 19208                           
 19209                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 19210  14B3  0020               	movlb	0	; select bank0
 19211  14B4  082A               	movf	setBuz@time+1,w
 19212  14B5  0022               	movlb	2	; select bank2
 19213  14B6  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19214  14B7  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19215  14B8  0020               	movlb	0	; select bank0
 19216  14B9  0829               	movf	setBuz@time,w
 19217  14BA  0022               	movlb	2	; select bank2
 19218  14BB  01A6               	clrf	(_Buz1^(0+256)+6)
 19219  14BC  07A6               	addwf	(_Buz1^(0+256)+6),f
 19220                           
 19221                           ;Buzzer_B1.c: 30: RB3 = 1;
 19222  14BD  0020               	movlb	0	; select bank0
 19223  14BE  158D               	bsf	13,3	;volatile
 19224                           
 19225                           ;Buzzer_B1.c: 31: } else {
 19226  14BF  0008               	return
 19227  14C0                     l88:	
 19228                           
 19229                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 19230  14C0  19A0               	btfsc	_Buz1^(0+256),3
 19231  14C1  2CD4               	goto	l90
 19232                           
 19233                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 19234  14C2  15A0               	bsf	_Buz1^(0+256),3
 19235                           
 19236                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 19237  14C3  0020               	movlb	0	; select bank0
 19238  14C4  082C               	movf	setBuz@count,w
 19239  14C5  00AB               	movwf	??_setBuz
 19240  14C6  082B               	movf	??_setBuz,w
 19241  14C7  0022               	movlb	2	; select bank2
 19242  14C8  00A4               	movwf	(_Buz1^(0+256)+4)
 19243                           
 19244                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 19245  14C9  0020               	movlb	0	; select bank0
 19246  14CA  082A               	movf	setBuz@time+1,w
 19247  14CB  0022               	movlb	2	; select bank2
 19248  14CC  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 19249  14CD  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 19250  14CE  0020               	movlb	0	; select bank0
 19251  14CF  0829               	movf	setBuz@time,w
 19252  14D0  0022               	movlb	2	; select bank2
 19253  14D1  01A8               	clrf	(_Buz1^(0+256)+8)
 19254  14D2  07A8               	addwf	(_Buz1^(0+256)+8),f
 19255                           
 19256                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 19257  14D3  0008               	return
 19258  14D4                     l90:	
 19259  14D4  1A20               	btfsc	_Buz1^(0+256),4
 19260  14D5  0008               	return
 19261                           
 19262                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 19263  14D6  1620               	bsf	_Buz1^(0+256),4
 19264                           
 19265                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 19266  14D7  0020               	movlb	0	; select bank0
 19267  14D8  082C               	movf	setBuz@count,w
 19268  14D9  00AB               	movwf	??_setBuz
 19269  14DA  082B               	movf	??_setBuz,w
 19270  14DB  0022               	movlb	2	; select bank2
 19271  14DC  00A5               	movwf	(_Buz1^(0+256)+5)
 19272                           
 19273                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 19274  14DD  0020               	movlb	0	; select bank0
 19275  14DE  082A               	movf	setBuz@time+1,w
 19276  14DF  0022               	movlb	2	; select bank2
 19277  14E0  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 19278  14E1  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 19279  14E2  0020               	movlb	0	; select bank0
 19280  14E3  0829               	movf	setBuz@time,w
 19281  14E4  0022               	movlb	2	; select bank2
 19282  14E5  01AA               	clrf	(_Buz1^(0+256)+10)
 19283  14E6  07AA               	addwf	(_Buz1^(0+256)+10),f
 19284  14E7  0008               	return
 19285  14E8                     __end_of_setBuz:	
 19286                           
 19287                           	psect	text135
 19288  13E7                     __ptext135:	
 19289 ;; *************** function ___awdiv *****************
 19290 ;; Defined at:
 19291 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19292 ;; Parameters:    Size  Location     Type
 19293 ;;  divisor         2    0[BANK0 ] int 
 19294 ;;  dividend        2    2[BANK0 ] int 
 19295 ;; Auto vars:     Size  Location     Type
 19296 ;;  quotient        2    7[BANK0 ] int 
 19297 ;;  sign            1    6[BANK0 ] unsigned char 
 19298 ;;  counter         1    5[BANK0 ] unsigned char 
 19299 ;; Return value:  Size  Location     Type
 19300 ;;                  2    0[BANK0 ] int 
 19301 ;; Registers used:
 19302 ;;		wreg, status,2, status,0
 19303 ;; Tracked objects:
 19304 ;;		On entry : 0/0
 19305 ;;		On exit  : 0/0
 19306 ;;		Unchanged: 0/0
 19307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19308 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19309 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19310 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19311 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19312 ;;Total ram usage:        9 bytes
 19313 ;; Hardware stack levels used:    1
 19314 ;; Hardware stack levels required when called:    5
 19315 ;; This function calls:
 19316 ;;		Nothing
 19317 ;; This function is called by:
 19318 ;;		_setBuz
 19319 ;; This function uses a non-reentrant model
 19320 ;;
 19321                           
 19322                           
 19323                           ;psect for function ___awdiv
 19324  13E7                     ___awdiv:	
 19325                           
 19326                           ;incstack = 0
 19327                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19328  13E7  0020               	movlb	0	; select bank0
 19329  13E8  01A6               	clrf	___awdiv@sign
 19330  13E9  1FA1               	btfss	___awdiv@divisor+1,7
 19331  13EA  2BF2               	goto	l5965
 19332  13EB  09A0               	comf	___awdiv@divisor,f
 19333  13EC  09A1               	comf	___awdiv@divisor+1,f
 19334  13ED  0AA0               	incf	___awdiv@divisor,f
 19335  13EE  1903               	skipnz
 19336  13EF  0AA1               	incf	___awdiv@divisor+1,f
 19337  13F0  01A6               	clrf	___awdiv@sign
 19338  13F1  0AA6               	incf	___awdiv@sign,f
 19339  13F2                     l5965:	
 19340  13F2  1FA3               	btfss	___awdiv@dividend+1,7
 19341  13F3  2BFD               	goto	l5971
 19342  13F4  09A2               	comf	___awdiv@dividend,f
 19343  13F5  09A3               	comf	___awdiv@dividend+1,f
 19344  13F6  0AA2               	incf	___awdiv@dividend,f
 19345  13F7  1903               	skipnz
 19346  13F8  0AA3               	incf	___awdiv@dividend+1,f
 19347  13F9  3001               	movlw	1
 19348  13FA  00A4               	movwf	??___awdiv
 19349  13FB  0824               	movf	??___awdiv,w
 19350  13FC  06A6               	xorwf	___awdiv@sign,f
 19351  13FD                     l5971:	
 19352  13FD  01A7               	clrf	___awdiv@quotient
 19353  13FE  01A8               	clrf	___awdiv@quotient+1
 19354  13FF  0821               	movf	___awdiv@divisor+1,w
 19355  1400  0420               	iorwf	___awdiv@divisor,w
 19356  1401  1903               	skipnz
 19357  1402  2C2C               	goto	l5993
 19358  1403  01A5               	clrf	___awdiv@counter
 19359  1404  0AA5               	incf	___awdiv@counter,f
 19360  1405                     l5981:	
 19361  1405  1BA1               	btfsc	___awdiv@divisor+1,7
 19362  1406  2C11               	goto	l5983
 19363  1407  3001               	movlw	1
 19364  1408                     u4625:	
 19365  1408  35A0               	lslf	___awdiv@divisor,f
 19366  1409  0DA1               	rlf	___awdiv@divisor+1,f
 19367  140A  0B89               	decfsz	9,f
 19368  140B  2C08               	goto	u4625
 19369  140C  3001               	movlw	1
 19370  140D  00A4               	movwf	??___awdiv
 19371  140E  0824               	movf	??___awdiv,w
 19372  140F  07A5               	addwf	___awdiv@counter,f
 19373  1410  2C05               	goto	l5981
 19374  1411                     l5983:	
 19375  1411  3001               	movlw	1
 19376  1412                     u4645:	
 19377  1412  35A7               	lslf	___awdiv@quotient,f
 19378  1413  0DA8               	rlf	___awdiv@quotient+1,f
 19379  1414  0B89               	decfsz	9,f
 19380  1415  2C12               	goto	u4645
 19381  1416  0821               	movf	___awdiv@divisor+1,w
 19382  1417  0223               	subwf	___awdiv@dividend+1,w
 19383  1418  1D03               	skipz
 19384  1419  2C1C               	goto	u4655
 19385  141A  0820               	movf	___awdiv@divisor,w
 19386  141B  0222               	subwf	___awdiv@dividend,w
 19387  141C                     u4655:	
 19388  141C  1C03               	skipc
 19389  141D  2C23               	goto	l5989
 19390  141E  0820               	movf	___awdiv@divisor,w
 19391  141F  02A2               	subwf	___awdiv@dividend,f
 19392  1420  0821               	movf	___awdiv@divisor+1,w
 19393  1421  3BA3               	subwfb	___awdiv@dividend+1,f
 19394  1422  1427               	bsf	___awdiv@quotient,0
 19395  1423                     l5989:	
 19396  1423  3001               	movlw	1
 19397  1424                     u4665:	
 19398  1424  36A1               	lsrf	___awdiv@divisor+1,f
 19399  1425  0CA0               	rrf	___awdiv@divisor,f
 19400  1426  0B89               	decfsz	9,f
 19401  1427  2C24               	goto	u4665
 19402  1428  3001               	movlw	1
 19403  1429  02A5               	subwf	___awdiv@counter,f
 19404  142A  1D03               	btfss	3,2
 19405  142B  2C11               	goto	l5983
 19406  142C                     l5993:	
 19407  142C  0826               	movf	___awdiv@sign,w
 19408  142D  1903               	btfsc	3,2
 19409  142E  2C34               	goto	l5997
 19410  142F  09A7               	comf	___awdiv@quotient,f
 19411  1430  09A8               	comf	___awdiv@quotient+1,f
 19412  1431  0AA7               	incf	___awdiv@quotient,f
 19413  1432  1903               	skipnz
 19414  1433  0AA8               	incf	___awdiv@quotient+1,f
 19415  1434                     l5997:	
 19416  1434  0828               	movf	___awdiv@quotient+1,w
 19417  1435  01A1               	clrf	?___awdiv+1
 19418  1436  07A1               	addwf	?___awdiv+1,f
 19419  1437  0827               	movf	___awdiv@quotient,w
 19420  1438  01A0               	clrf	?___awdiv
 19421  1439  07A0               	addwf	?___awdiv,f
 19422  143A  0008               	return
 19423  143B                     __end_of___awdiv:	
 19424                           
 19425                           	psect	text136
 19426  1B2B                     __ptext136:	
 19427 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 19428 ;; Defined at:
 19429 ;;		line 239 in file "../src/Dimmer_B1.c"
 19430 ;; Parameters:    Size  Location     Type
 19431 ;;  lights          1    wreg     unsigned char 
 19432 ;; Auto vars:     Size  Location     Type
 19433 ;;  lights          1    0[BANK0 ] unsigned char 
 19434 ;;  status          1    1[BANK0 ] unsigned char 
 19435 ;; Return value:  Size  Location     Type
 19436 ;;                  1    wreg      unsigned char 
 19437 ;; Registers used:
 19438 ;;		wreg, status,2
 19439 ;; Tracked objects:
 19440 ;;		On entry : 0/0
 19441 ;;		On exit  : 0/0
 19442 ;;		Unchanged: 0/0
 19443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19445 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19447 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19448 ;;Total ram usage:        2 bytes
 19449 ;; Hardware stack levels used:    1
 19450 ;; Hardware stack levels required when called:    5
 19451 ;; This function calls:
 19452 ;;		Nothing
 19453 ;; This function is called by:
 19454 ;;		_setDimmerLights_SwOn
 19455 ;;		_setRF_AdjControl
 19456 ;; This function uses a non-reentrant model
 19457 ;;
 19458                           
 19459                           
 19460                           ;psect for function _getDimmerIntr_Dimming_Sw
 19461  1B2B                     _getDimmerIntr_Dimming_Sw:	
 19462                           
 19463                           ;incstack = 0
 19464                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 19465                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 19466  1B2B  0020               	movlb	0	; select bank0
 19467  1B2C  00A0               	movwf	getDimmerIntr_Dimming_Sw@lights
 19468                           
 19469                           ;Dimmer_B1.c: 240: char status = 0;
 19470  1B2D  01A1               	clrf	getDimmerIntr_Dimming_Sw@status
 19471                           
 19472                           ;Dimmer_B1.c: 242: if (lights == 1) {
 19473  1B2E  0820               	movf	getDimmerIntr_Dimming_Sw@lights,w
 19474  1B2F  3A01               	xorlw	1
 19475  1B30  1D03               	skipz
 19476  1B31  2B38               	goto	l6041
 19477                           
 19478                           ;Dimmer_B1.c: 243: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 19479  1B32  3000               	movlw	0
 19480  1B33  0021               	movlb	1	; select bank1
 19481  1B34  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 19482  1B35  3001               	movlw	1
 19483  1B36  0020               	movlb	0	; select bank0
 19484  1B37  00A1               	movwf	getDimmerIntr_Dimming_Sw@status
 19485  1B38                     l6041:	
 19486                           
 19487                           ;Dimmer_B1.c: 244: }
 19488                           ;Dimmer_B1.c: 257: return status;
 19489  1B38  0821               	movf	getDimmerIntr_Dimming_Sw@status,w
 19490  1B39  0008               	return
 19491  1B3A                     __end_of_getDimmerIntr_Dimming_Sw:	
 19492                           
 19493                           	psect	text137
 19494  1120                     __ptext137:	
 19495 ;; *************** function _setDimmerLights_SwOff *****************
 19496 ;; Defined at:
 19497 ;;		line 789 in file "../src/Dimmer_B1.c"
 19498 ;; Parameters:    Size  Location     Type
 19499 ;;  sw              1    wreg     unsigned char 
 19500 ;; Auto vars:     Size  Location     Type
 19501 ;;  sw              1    2[BANK0 ] unsigned char 
 19502 ;; Return value:  Size  Location     Type
 19503 ;;		None               void
 19504 ;; Registers used:
 19505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19506 ;; Tracked objects:
 19507 ;;		On entry : 0/0
 19508 ;;		On exit  : 0/0
 19509 ;;		Unchanged: 0/0
 19510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19512 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19514 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19515 ;;Total ram usage:        1 bytes
 19516 ;; Hardware stack levels used:    1
 19517 ;; Hardware stack levels required when called:    6
 19518 ;; This function calls:
 19519 ;;		_DimmerLights_SelectPointer
 19520 ;; This function is called by:
 19521 ;;		_DlyOff_Main
 19522 ;;		_Exception_Main
 19523 ;;		_setControl_Lights_Table
 19524 ;;		_setRFSW_Control
 19525 ;;		_setRFSW_AdjControl
 19526 ;;		_setSw_Main
 19527 ;; This function uses a non-reentrant model
 19528 ;;
 19529                           
 19530                           
 19531                           ;psect for function _setDimmerLights_SwOff
 19532  1120                     _setDimmerLights_SwOff:	
 19533                           
 19534                           ;incstack = 0
 19535                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19536                           ;setDimmerLights_SwOff@sw stored from wreg
 19537  1120  0020               	movlb	0	; select bank0
 19538  1121  00A2               	movwf	setDimmerLights_SwOff@sw
 19539                           
 19540                           ;Dimmer_B1.c: 791: DimmerLights_SelectPointer(sw);
 19541  1122  0822               	movf	setDimmerLights_SwOff@sw,w
 19542  1123  319A  228C  3191   	fcall	_DimmerLights_SelectPointer
 19543                           
 19544                           ;Dimmer_B1.c: 793: if (DimmerLights->SwFlag == 1) {
 19545  1126  0021               	movlb	1	; select bank1
 19546  1127  084C               	movf	_DimmerLights^(0+128),w
 19547  1128  0086               	movwf	6
 19548  1129  3001               	movlw	1	; select bank2/3
 19549  112A  0087               	movwf	7
 19550  112B  1C01               	btfss	1,0
 19551  112C  0008               	return
 19552                           
 19553                           ;Dimmer_B1.c: 794: DimmerLights->SwFlag = 0;
 19554  112D  084C               	movf	_DimmerLights^(0+128),w
 19555  112E  0086               	movwf	6
 19556  112F  3001               	movlw	1	; select bank2/3
 19557  1130  0087               	movwf	7
 19558  1131  1001               	bcf	1,0
 19559                           
 19560                           ;Dimmer_B1.c: 795: if (DimmerLights->Status == 1) {
 19561  1132  0A4C               	incf	_DimmerLights^(0+128),w
 19562  1133  0086               	movwf	6
 19563  1134  3001               	movlw	1	; select bank2/3
 19564  1135  0087               	movwf	7
 19565  1136  1C01               	btfss	1,0
 19566  1137  294E               	goto	l6355
 19567                           
 19568                           ;Dimmer_B1.c: 796: if (DimmerLights->DimmingSwFlag == 1) {
 19569  1138  084C               	movf	_DimmerLights^(0+128),w
 19570  1139  0086               	movwf	6
 19571  113A  3001               	movlw	1	; select bank2/3
 19572  113B  0087               	movwf	7
 19573  113C  1D81               	btfss	1,3
 19574  113D  0008               	return
 19575                           
 19576                           ;Dimmer_B1.c: 797: DimmerLights->DimmingSwFlag = 0;
 19577  113E  084C               	movf	_DimmerLights^(0+128),w
 19578  113F  0086               	movwf	6
 19579  1140  3001               	movlw	1	; select bank2/3
 19580  1141  0087               	movwf	7
 19581  1142  1181               	bcf	1,3
 19582                           
 19583                           ;Dimmer_B1.c: 799: DimmerLights->DimmingTrigger = 1;
 19584  1143  084C               	movf	_DimmerLights^(0+128),w
 19585  1144  0086               	movwf	6
 19586  1145  3001               	movlw	1	; select bank2/3
 19587  1146  0087               	movwf	7
 19588  1147  1601               	bsf	1,4
 19589                           
 19590                           ;Dimmer_B1.c: 800: DimmerLights->DimmingSwitch = 0;
 19591  1148  084C               	movf	_DimmerLights^(0+128),w
 19592  1149  0086               	movwf	6
 19593  114A  3001               	movlw	1	; select bank2/3
 19594  114B  0087               	movwf	7
 19595  114C  1281               	bcf	1,5
 19596                           
 19597                           ;Dimmer_B1.c: 801: }
 19598                           ;Dimmer_B1.c: 802: } else {
 19599  114D  0008               	return
 19600  114E                     l6355:	
 19601                           
 19602                           ;Dimmer_B1.c: 805: DimmerLights->Trigger = 1;
 19603  114E  084C               	movf	_DimmerLights^(0+128),w
 19604  114F  0086               	movwf	6
 19605  1150  3001               	movlw	1	; select bank2/3
 19606  1151  0087               	movwf	7
 19607  1152  1481               	bsf	1,1
 19608                           
 19609                           ;Dimmer_B1.c: 806: DimmerLights->Switch = 0;
 19610  1153  084C               	movf	_DimmerLights^(0+128),w
 19611  1154  0086               	movwf	6
 19612  1155  3001               	movlw	1	; select bank2/3
 19613  1156  0087               	movwf	7
 19614  1157  1101               	bcf	1,2
 19615  1158  0008               	return
 19616  1159                     __end_of_setDimmerLights_SwOff:	
 19617                           
 19618                           	psect	text138
 19619  1B77                     __ptext138:	
 19620 ;; *************** function _getDimmerLights_Status *****************
 19621 ;; Defined at:
 19622 ;;		line 1202 in file "../src/Dimmer_B1.c"
 19623 ;; Parameters:    Size  Location     Type
 19624 ;;  lights          1    wreg     unsigned char 
 19625 ;; Auto vars:     Size  Location     Type
 19626 ;;  lights          1    2[BANK0 ] unsigned char 
 19627 ;;  status          1    3[BANK0 ] unsigned char 
 19628 ;; Return value:  Size  Location     Type
 19629 ;;                  1    wreg      unsigned char 
 19630 ;; Registers used:
 19631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19632 ;; Tracked objects:
 19633 ;;		On entry : 0/0
 19634 ;;		On exit  : 0/0
 19635 ;;		Unchanged: 0/0
 19636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19638 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19640 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19641 ;;Total ram usage:        2 bytes
 19642 ;; Hardware stack levels used:    1
 19643 ;; Hardware stack levels required when called:    6
 19644 ;; This function calls:
 19645 ;;		_DimmerLights_SelectPointer
 19646 ;; This function is called by:
 19647 ;;		_DlyOff_Main
 19648 ;;		_Exception_Main
 19649 ;;		_setControl_Lights_Table
 19650 ;;		_setRFSW_Control
 19651 ;;		_setRFSW_AdjControl
 19652 ;;		_setRF_AdjControl
 19653 ;;		_DimmerLights_AssignationDimming
 19654 ;; This function uses a non-reentrant model
 19655 ;;
 19656                           
 19657                           
 19658                           ;psect for function _getDimmerLights_Status
 19659  1B77                     _getDimmerLights_Status:	
 19660                           
 19661                           ;incstack = 0
 19662                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19663                           ;getDimmerLights_Status@lights stored from wreg
 19664  1B77  0020               	movlb	0	; select bank0
 19665  1B78  00A2               	movwf	getDimmerLights_Status@lights
 19666                           
 19667                           ;Dimmer_B1.c: 1203: DimmerLights_SelectPointer(lights);
 19668  1B79  0822               	movf	getDimmerLights_Status@lights,w
 19669  1B7A  319A  228C         	fcall	_DimmerLights_SelectPointer
 19670                           
 19671                           ;Dimmer_B1.c: 1204: char status = DimmerLights->Status == 1 ? 1 : 0;
 19672  1B7C  0021               	movlb	1	; select bank1
 19673  1B7D  0A4C               	incf	_DimmerLights^(0+128),w
 19674  1B7E  0086               	movwf	6
 19675  1B7F  3001               	movlw	1	; select bank2/3
 19676  1B80  0087               	movwf	7
 19677  1B81  3000               	movlw	0
 19678  1B82  1801               	btfsc	1,0
 19679  1B83  3001               	movlw	1
 19680  1B84  0020               	movlb	0	; select bank0
 19681  1B85  00A3               	movwf	getDimmerLights_Status@status
 19682                           
 19683                           ;Dimmer_B1.c: 1205: return status;
 19684  1B86  0823               	movf	getDimmerLights_Status@status,w
 19685  1B87  0008               	return
 19686  1B88                     __end_of_getDimmerLights_Status:	
 19687                           
 19688                           	psect	text139
 19689  1A8C                     __ptext139:	
 19690 ;; *************** function _DimmerLights_SelectPointer *****************
 19691 ;; Defined at:
 19692 ;;		line 652 in file "../src/Dimmer_B1.c"
 19693 ;; Parameters:    Size  Location     Type
 19694 ;;  lights          1    wreg     unsigned char 
 19695 ;; Auto vars:     Size  Location     Type
 19696 ;;  lights          1    1[BANK0 ] unsigned char 
 19697 ;; Return value:  Size  Location     Type
 19698 ;;		None               void
 19699 ;; Registers used:
 19700 ;;		wreg
 19701 ;; Tracked objects:
 19702 ;;		On entry : 0/0
 19703 ;;		On exit  : 0/0
 19704 ;;		Unchanged: 0/0
 19705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19708 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19710 ;;Total ram usage:        2 bytes
 19711 ;; Hardware stack levels used:    1
 19712 ;; Hardware stack levels required when called:    5
 19713 ;; This function calls:
 19714 ;;		Nothing
 19715 ;; This function is called by:
 19716 ;;		_setDimmerLights_SwOn
 19717 ;;		_setDimmerLights_SwOff
 19718 ;;		_setDimmerLights_DimmingOn
 19719 ;;		_setDimmerLights_Main
 19720 ;;		_getDimmerLights_Status
 19721 ;;		_setDimmerLights_DimmingRun
 19722 ;;		_setRF_AdjControl
 19723 ;;		_DimmerLights_TwoPhase_Main
 19724 ;;		_setDimmerLights_Status
 19725 ;; This function uses a non-reentrant model
 19726 ;;
 19727                           
 19728                           
 19729                           ;psect for function _DimmerLights_SelectPointer
 19730  1A8C                     _DimmerLights_SelectPointer:	
 19731                           
 19732                           ;incstack = 0
 19733                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19734                           ;DimmerLights_SelectPointer@lights stored from wreg
 19735  1A8C  0020               	movlb	0	; select bank0
 19736  1A8D  00A1               	movwf	DimmerLights_SelectPointer@lights
 19737                           
 19738                           ;Dimmer_B1.c: 654: if (lights == 1) {
 19739  1A8E  0821               	movf	DimmerLights_SelectPointer@lights,w
 19740  1A8F  3A01               	xorlw	1
 19741  1A90  1D03               	skipz
 19742  1A91  0008               	return
 19743                           
 19744                           ;Dimmer_B1.c: 655: DimmerLights = &DimmerLights1;
 19745  1A92  3060               	movlw	_DimmerLights1& (0+255)
 19746  1A93  00A0               	movwf	??_DimmerLights_SelectPointer
 19747  1A94  0820               	movf	??_DimmerLights_SelectPointer,w
 19748  1A95  0021               	movlb	1	; select bank1
 19749  1A96  00CC               	movwf	_DimmerLights^(0+128)
 19750  1A97  0008               	return
 19751  1A98                     __end_of_DimmerLights_SelectPointer:	
 19752                           
 19753                           	psect	text140
 19754  19C8                     __ptext140:	
 19755 ;; *************** function _DelayOff_Initialization *****************
 19756 ;; Defined at:
 19757 ;;		line 26 in file "../src/DelayOff_B1.c"
 19758 ;; Parameters:    Size  Location     Type
 19759 ;;		None
 19760 ;; Auto vars:     Size  Location     Type
 19761 ;;		None
 19762 ;; Return value:  Size  Location     Type
 19763 ;;		None               void
 19764 ;; Registers used:
 19765 ;;		wreg, status,2, status,0, pclath, cstack
 19766 ;; Tracked objects:
 19767 ;;		On entry : 0/0
 19768 ;;		On exit  : 0/0
 19769 ;;		Unchanged: 0/0
 19770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19775 ;;Total ram usage:        0 bytes
 19776 ;; Hardware stack levels used:    1
 19777 ;; Hardware stack levels required when called:    7
 19778 ;; This function calls:
 19779 ;;		_DlyOff_Initialization
 19780 ;; This function is called by:
 19781 ;;		_main
 19782 ;; This function uses a non-reentrant model
 19783 ;;
 19784                           
 19785                           
 19786                           ;psect for function _DelayOff_Initialization
 19787  19C8                     _DelayOff_Initialization:	
 19788                           
 19789                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19790                           
 19791                           ;incstack = 0
 19792                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19793  19C8  3001               	movlw	1
 19794  19C9  3199  21F5         	fcall	_DlyOff_Initialization
 19795  19CB  0008               	return
 19796  19CC                     __end_of_DelayOff_Initialization:	
 19797                           
 19798                           	psect	text141
 19799  19F5                     __ptext141:	
 19800 ;; *************** function _DlyOff_Initialization *****************
 19801 ;; Defined at:
 19802 ;;		line 56 in file "../src/DelayOff_B1.c"
 19803 ;; Parameters:    Size  Location     Type
 19804 ;;  sw              1    wreg     unsigned char 
 19805 ;; Auto vars:     Size  Location     Type
 19806 ;;  sw              1    2[BANK0 ] unsigned char 
 19807 ;; Return value:  Size  Location     Type
 19808 ;;		None               void
 19809 ;; Registers used:
 19810 ;;		wreg, status,2, status,0, pclath, cstack
 19811 ;; Tracked objects:
 19812 ;;		On entry : 0/0
 19813 ;;		On exit  : 0/0
 19814 ;;		Unchanged: 0/0
 19815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19819 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19820 ;;Total ram usage:        1 bytes
 19821 ;; Hardware stack levels used:    1
 19822 ;; Hardware stack levels required when called:    6
 19823 ;; This function calls:
 19824 ;;		_DelayOffPointSelect
 19825 ;; This function is called by:
 19826 ;;		_DelayOff_Initialization
 19827 ;; This function uses a non-reentrant model
 19828 ;;
 19829                           
 19830                           
 19831                           ;psect for function _DlyOff_Initialization
 19832  19F5                     _DlyOff_Initialization:	
 19833                           
 19834                           ;incstack = 0
 19835                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19836                           ;DlyOff_Initialization@sw stored from wreg
 19837  19F5  0020               	movlb	0	; select bank0
 19838  19F6  00A2               	movwf	DlyOff_Initialization@sw
 19839                           
 19840                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19841  19F7  0822               	movf	DlyOff_Initialization@sw,w
 19842  19F8  319A  2280         	fcall	_DelayOffPointSelect
 19843  19FA  0008               	return
 19844  19FB                     __end_of_DlyOff_Initialization:	
 19845                           
 19846                           	psect	text142
 19847  1A80                     __ptext142:	
 19848 ;; *************** function _DelayOffPointSelect *****************
 19849 ;; Defined at:
 19850 ;;		line 7 in file "../src/DelayOff_B1.c"
 19851 ;; Parameters:    Size  Location     Type
 19852 ;;  sw              1    wreg     unsigned char 
 19853 ;; Auto vars:     Size  Location     Type
 19854 ;;  sw              1    1[BANK0 ] unsigned char 
 19855 ;; Return value:  Size  Location     Type
 19856 ;;		None               void
 19857 ;; Registers used:
 19858 ;;		wreg
 19859 ;; Tracked objects:
 19860 ;;		On entry : 0/0
 19861 ;;		On exit  : 0/0
 19862 ;;		Unchanged: 0/0
 19863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19868 ;;Total ram usage:        2 bytes
 19869 ;; Hardware stack levels used:    1
 19870 ;; Hardware stack levels required when called:    5
 19871 ;; This function calls:
 19872 ;;		Nothing
 19873 ;; This function is called by:
 19874 ;;		_DlyOff_Initialization
 19875 ;;		_DlyOff_Main
 19876 ;;		_setDelayOff_GO
 19877 ;;		_getDelayOff_GO
 19878 ;; This function uses a non-reentrant model
 19879 ;;
 19880                           
 19881                           
 19882                           ;psect for function _DelayOffPointSelect
 19883  1A80                     _DelayOffPointSelect:	
 19884                           
 19885                           ;incstack = 0
 19886                           ; Regs used in _DelayOffPointSelect: [wreg]
 19887                           ;DelayOffPointSelect@sw stored from wreg
 19888  1A80  0020               	movlb	0	; select bank0
 19889  1A81  00A1               	movwf	DelayOffPointSelect@sw
 19890                           
 19891                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19892  1A82  0821               	movf	DelayOffPointSelect@sw,w
 19893  1A83  3A01               	xorlw	1
 19894  1A84  1D03               	skipz
 19895  1A85  0008               	return
 19896                           
 19897                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19898  1A86  30D7               	movlw	_DlySw1& (0+255)
 19899  1A87  00A0               	movwf	??_DelayOffPointSelect
 19900  1A88  0820               	movf	??_DelayOffPointSelect,w
 19901  1A89  0021               	movlb	1	; select bank1
 19902  1A8A  00CA               	movwf	_DelayOff^(0+128)
 19903  1A8B  0008               	return
 19904  1A8C                     __end_of_DelayOffPointSelect:	
 19905                           
 19906                           	psect	text143
 19907  1350                     __ptext143:	
 19908 ;; *************** function _Buzzer_Main *****************
 19909 ;; Defined at:
 19910 ;;		line 46 in file "../src/Buzzer_B1.c"
 19911 ;; Parameters:    Size  Location     Type
 19912 ;;		None
 19913 ;; Auto vars:     Size  Location     Type
 19914 ;;		None
 19915 ;; Return value:  Size  Location     Type
 19916 ;;		None               void
 19917 ;; Registers used:
 19918 ;;		wreg, status,2, status,0
 19919 ;; Tracked objects:
 19920 ;;		On entry : 0/0
 19921 ;;		On exit  : 0/0
 19922 ;;		Unchanged: 0/0
 19923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19927 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19928 ;;Total ram usage:        1 bytes
 19929 ;; Hardware stack levels used:    1
 19930 ;; Hardware stack levels required when called:    5
 19931 ;; This function calls:
 19932 ;;		Nothing
 19933 ;; This function is called by:
 19934 ;;		_main
 19935 ;; This function uses a non-reentrant model
 19936 ;;
 19937                           
 19938                           
 19939                           ;psect for function _Buzzer_Main
 19940  1350                     _Buzzer_Main:	
 19941                           
 19942                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19943                           
 19944                           ;incstack = 0
 19945                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19946  1350  0022               	movlb	2	; select bank2
 19947  1351  1CA0               	btfss	_Buz1^(0+256),1
 19948  1352  0008               	return
 19949                           
 19950                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19951  1353  3001               	movlw	1
 19952  1354  07A1               	addwf	(_Buz1^(0+256)+1),f
 19953  1355  3000               	movlw	0
 19954  1356  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19955                           
 19956                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19957  1357  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19958  1358  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19959  1359  1D03               	skipz
 19960  135A  2B5D               	goto	u7885
 19961  135B  0826               	movf	(_Buz1^(0+256)+6),w
 19962  135C  0221               	subwf	(_Buz1^(0+256)+1),w
 19963  135D                     u7885:	
 19964  135D  1C03               	skipc
 19965  135E  0008               	return
 19966                           
 19967                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19968  135F  01A1               	clrf	(_Buz1^(0+256)+1)
 19969  1360  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19970                           
 19971                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19972  1361  12A0               	bcf	_Buz1^(0+256),5
 19973  1362  0020               	movlb	0	; select bank0
 19974  1363  1D8D               	btfss	13,3	;volatile
 19975  1364  2B67               	goto	l8011
 19976  1365  0022               	movlb	2	; select bank2
 19977  1366  16A0               	bsf	_Buz1^(0+256),5
 19978  1367                     l8011:	
 19979                           
 19980                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19981  1367  0022               	movlb	2	; select bank2
 19982  1368  1AA0               	btfsc	_Buz1^(0+256),5
 19983  1369  2B93               	goto	l98
 19984                           
 19985                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19986  136A  08A3               	movf	(_Buz1^(0+256)+3),f
 19987  136B  1D03               	skipz
 19988  136C  2B8F               	goto	l99
 19989                           
 19990                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19991  136D  1DA0               	btfss	_Buz1^(0+256),3
 19992  136E  2B7D               	goto	l100
 19993                           
 19994                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19995  136F  11A0               	bcf	_Buz1^(0+256),3
 19996                           
 19997                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19998  1370  0824               	movf	(_Buz1^(0+256)+4),w
 19999  1371  0020               	movlb	0	; select bank0
 20000  1372  00A0               	movwf	??_Buzzer_Main
 20001  1373  0820               	movf	??_Buzzer_Main,w
 20002  1374  0022               	movlb	2	; select bank2
 20003  1375  00A3               	movwf	(_Buz1^(0+256)+3)
 20004                           
 20005                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 20006  1376  0829               	movf	((_Buz1+1)^(0+256)+8),w
 20007  1377  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20008  1378  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20009  1379  0828               	movf	(_Buz1^(0+256)+8),w
 20010  137A  01A6               	clrf	(_Buz1^(0+256)+6)
 20011  137B  07A6               	addwf	(_Buz1^(0+256)+6),f
 20012                           
 20013                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 20014  137C  0008               	return
 20015  137D                     l100:	
 20016  137D  1E20               	btfss	_Buz1^(0+256),4
 20017  137E  2B8D               	goto	l102
 20018                           
 20019                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 20020  137F  1220               	bcf	_Buz1^(0+256),4
 20021                           
 20022                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 20023  1380  0825               	movf	(_Buz1^(0+256)+5),w
 20024  1381  0020               	movlb	0	; select bank0
 20025  1382  00A0               	movwf	??_Buzzer_Main
 20026  1383  0820               	movf	??_Buzzer_Main,w
 20027  1384  0022               	movlb	2	; select bank2
 20028  1385  00A3               	movwf	(_Buz1^(0+256)+3)
 20029                           
 20030                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 20031  1386  082B               	movf	((_Buz1+1)^(0+256)+10),w
 20032  1387  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20033  1388  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20034  1389  082A               	movf	(_Buz1^(0+256)+10),w
 20035  138A  01A6               	clrf	(_Buz1^(0+256)+6)
 20036  138B  07A6               	addwf	(_Buz1^(0+256)+6),f
 20037                           
 20038                           ;Buzzer_B1.c: 62: } else {
 20039  138C  0008               	return
 20040  138D                     l102:	
 20041                           
 20042                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 20043  138D  10A0               	bcf	_Buz1^(0+256),1
 20044                           
 20045                           ;Buzzer_B1.c: 64: }
 20046                           ;Buzzer_B1.c: 65: } else {
 20047  138E  0008               	return
 20048  138F                     l99:	
 20049                           
 20050                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 20051  138F  16A0               	bsf	_Buz1^(0+256),5
 20052                           
 20053                           ;Buzzer_B1.c: 68: RB3 = 1;
 20054  1390  0020               	movlb	0	; select bank0
 20055  1391  158D               	bsf	13,3	;volatile
 20056                           
 20057                           ;Buzzer_B1.c: 69: }
 20058                           ;Buzzer_B1.c: 70: } else {
 20059  1392  0008               	return
 20060  1393                     l98:	
 20061                           
 20062                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 20063  1393  12A0               	bcf	_Buz1^(0+256),5
 20064                           
 20065                           ;Buzzer_B1.c: 73: RB3 = 0;
 20066  1394  0020               	movlb	0	; select bank0
 20067  1395  118D               	bcf	13,3	;volatile
 20068                           
 20069                           ;Buzzer_B1.c: 75: Buz1.Count--;
 20070  1396  3001               	movlw	1
 20071  1397  0022               	movlb	2	; select bank2
 20072  1398  02A3               	subwf	(_Buz1^(0+256)+3),f
 20073  1399  0008               	return
 20074  139A                     __end_of_Buzzer_Main:	
 20075                           
 20076                           	psect	text144
 20077  19B6                     __ptext144:	
 20078 ;; *************** function _Buzzer_Initialization *****************
 20079 ;; Defined at:
 20080 ;;		line 11 in file "../src/Buzzer_B1.c"
 20081 ;; Parameters:    Size  Location     Type
 20082 ;;		None
 20083 ;; Auto vars:     Size  Location     Type
 20084 ;;		None
 20085 ;; Return value:  Size  Location     Type
 20086 ;;		None               void
 20087 ;; Registers used:
 20088 ;;		None
 20089 ;; Tracked objects:
 20090 ;;		On entry : 0/0
 20091 ;;		On exit  : 0/0
 20092 ;;		Unchanged: 0/0
 20093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20098 ;;Total ram usage:        0 bytes
 20099 ;; Hardware stack levels used:    1
 20100 ;; Hardware stack levels required when called:    5
 20101 ;; This function calls:
 20102 ;;		Nothing
 20103 ;; This function is called by:
 20104 ;;		_main
 20105 ;; This function uses a non-reentrant model
 20106 ;;
 20107                           
 20108                           
 20109                           ;psect for function _Buzzer_Initialization
 20110  19B6                     _Buzzer_Initialization:	
 20111                           
 20112                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 20113                           
 20114                           ;incstack = 0
 20115                           ; Regs used in _Buzzer_Initialization: []
 20116  19B6  0022               	movlb	2	; select bank2
 20117  19B7  1420               	bsf	_Buz1^(0+256),0
 20118  19B8  0008               	return
 20119  19B9                     __end_of_Buzzer_Initialization:	
 20120                           
 20121                           	psect	intentry
 20122  0004                     __pintentry:	
 20123 ;; *************** function _ISR *****************
 20124 ;; Defined at:
 20125 ;;		line 116 in file "../src/MCU_B1.c"
 20126 ;; Parameters:    Size  Location     Type
 20127 ;;		None
 20128 ;; Auto vars:     Size  Location     Type
 20129 ;;		None
 20130 ;; Return value:  Size  Location     Type
 20131 ;;		None               void
 20132 ;; Registers used:
 20133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20134 ;; Tracked objects:
 20135 ;;		On entry : 0/0
 20136 ;;		On exit  : 0/0
 20137 ;;		Unchanged: 0/0
 20138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20141 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20143 ;;Total ram usage:        1 bytes
 20144 ;; Hardware stack levels used:    1
 20145 ;; Hardware stack levels required when called:    4
 20146 ;; This function calls:
 20147 ;;		_IOC_ISR
 20148 ;;		_TMR1_ISR
 20149 ;; This function is called by:
 20150 ;;		Interrupt level 1
 20151 ;; This function uses a non-reentrant model
 20152 ;;
 20153                           
 20154  0004                     _ISR:	
 20155                           
 20156                           ;incstack = 0
 20157                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20158  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20159  0005  3180               	pagesel	$
 20160  0006  0020               	movlb	0	; select bank0
 20161  0007  087F               	movf	127,w
 20162  0008  00FC               	movwf	??_ISR
 20163                           
 20164                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 20165  0009  0021               	movlb	1	; select bank1
 20166  000A  1C11               	btfss	17,0	;volatile
 20167  000B  2812               	goto	i1l8607
 20168  000C  0020               	movlb	0	; select bank0
 20169  000D  1C11               	btfss	17,0	;volatile
 20170  000E  2812               	goto	i1l8607
 20171                           
 20172                           ;MCU_B1.c: 126: TMR1_ISR();
 20173  000F  319E  265F  3180   	fcall	_TMR1_ISR
 20174  0012                     i1l8607:	
 20175                           
 20176                           ;MCU_B1.c: 127: }
 20177                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 20178  0012  198B               	btfsc	11,3	;volatile
 20179  0013  1C0B               	btfss	11,0	;volatile
 20180  0014  281A               	goto	i1l1255
 20181  0015  0027               	movlb	7	; select bank7
 20182  0016  1D16               	btfss	22,2	;volatile
 20183  0017  281A               	goto	i1l1255
 20184                           
 20185                           ;MCU_B1.c: 139: IOC_ISR();
 20186  0018  319A  223A         	fcall	_IOC_ISR
 20187  001A                     i1l1255:	
 20188                           ;MCU_B1.c: 140: }
 20189                           ;MCU_B1.c: 148: return;
 20190                           
 20191  001A  087C               	movf	??_ISR,w
 20192  001B  0020               	movlb	0	; select bank0
 20193  001C  00FF               	movwf	127
 20194  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 20195  001E  0009               	retfie
 20196  001F                     __end_of_ISR:	
 20197                           
 20198                           	psect	text146
 20199  1E5F                     __ptext146:	
 20200 ;; *************** function _TMR1_ISR *****************
 20201 ;; Defined at:
 20202 ;;		line 236 in file "../src/MCU_B1.c"
 20203 ;; Parameters:    Size  Location     Type
 20204 ;;		None
 20205 ;; Auto vars:     Size  Location     Type
 20206 ;;		None
 20207 ;; Return value:  Size  Location     Type
 20208 ;;		None               void
 20209 ;; Registers used:
 20210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20211 ;; Tracked objects:
 20212 ;;		On entry : 0/0
 20213 ;;		On exit  : 0/0
 20214 ;;		Unchanged: 0/0
 20215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20220 ;;Total ram usage:        0 bytes
 20221 ;; Hardware stack levels used:    1
 20222 ;; Hardware stack levels required when called:    1
 20223 ;; This function calls:
 20224 ;;		_DimmerLights_TMR_1
 20225 ;; This function is called by:
 20226 ;;		_ISR
 20227 ;; This function uses a non-reentrant model
 20228 ;;
 20229                           
 20230                           
 20231                           ;psect for function _TMR1_ISR
 20232  1E5F                     _TMR1_ISR:	
 20233                           
 20234                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 20235                           
 20236                           ;incstack = 0
 20237                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20238  1E5F  3190  20E8  319E   	fcall	_DimmerLights_TMR_1
 20239                           
 20240                           ;MCU_B1.c: 268: Timer1.Count++;
 20241  1E62  3001               	movlw	1
 20242  1E63  0022               	movlb	2	; select bank2
 20243  1E64  07B2               	addwf	(_Timer1^(0+256)+1),f
 20244  1E65  3000               	movlw	0
 20245  1E66  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 20246                           
 20247                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 20248  1E67  3001               	movlw	1
 20249  1E68  3E31               	addlw	_Timer1& (0+255)
 20250  1E69  0086               	movwf	6
 20251  1E6A  3001               	movlw	1	; select bank2/3
 20252  1E6B  0087               	movwf	7
 20253  1E6C  3F40               	moviw [0]fsr1
 20254  1E6D  3AC8               	xorlw	200
 20255  1E6E  1D03               	skipz
 20256  1E6F  2E72               	goto	u798_25
 20257  1E70  3F41               	moviw [1]fsr1
 20258  1E71  3A00               	xorlw	0
 20259  1E72                     u798_25:	
 20260  1E72  1D03               	skipz
 20261  1E73  2E77               	goto	i1l8067
 20262                           
 20263                           ;MCU_B1.c: 270: Timer1.Count = 0;
 20264  1E74  01B2               	clrf	(_Timer1^(0+256)+1)
 20265  1E75  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 20266                           
 20267                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 20268  1E76  1431               	bsf	_Timer1^(0+256),0
 20269  1E77                     i1l8067:	
 20270                           
 20271                           ;MCU_B1.c: 272: }
 20272                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 20273  1E77  30FA               	movlw	250
 20274  1E78  0020               	movlb	0	; select bank0
 20275  1E79  0097               	movwf	23	;volatile
 20276                           
 20277                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 20278  1E7A  3038               	movlw	56
 20279  1E7B  0096               	movwf	22	;volatile
 20280                           
 20281                           ;MCU_B1.c: 276: TMR1IF = 0;
 20282  1E7C  1011               	bcf	17,0	;volatile
 20283  1E7D  0008               	return
 20284  1E7E                     __end_of_TMR1_ISR:	
 20285                           
 20286                           	psect	text147
 20287  10E8                     __ptext147:	
 20288 ;; *************** function _DimmerLights_TMR_1 *****************
 20289 ;; Defined at:
 20290 ;;		line 1509 in file "../src/Dimmer_B1.c"
 20291 ;; Parameters:    Size  Location     Type
 20292 ;;		None
 20293 ;; Auto vars:     Size  Location     Type
 20294 ;;		None
 20295 ;; Return value:  Size  Location     Type
 20296 ;;		None               void
 20297 ;; Registers used:
 20298 ;;		wreg, status,2, status,0
 20299 ;; Tracked objects:
 20300 ;;		On entry : 0/0
 20301 ;;		On exit  : 0/0
 20302 ;;		Unchanged: 0/0
 20303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20308 ;;Total ram usage:        1 bytes
 20309 ;; Hardware stack levels used:    1
 20310 ;; This function calls:
 20311 ;;		Nothing
 20312 ;; This function is called by:
 20313 ;;		_TMR1_ISR
 20314 ;; This function uses a non-reentrant model
 20315 ;;
 20316                           
 20317                           
 20318                           ;psect for function _DimmerLights_TMR_1
 20319  10E8                     _DimmerLights_TMR_1:	
 20320                           
 20321                           ;Dimmer_B1.c: 1511: if (DimmerIntr1.Start == 1) {
 20322                           
 20323                           ;incstack = 0
 20324                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20325  10E8  0021               	movlb	1	; select bank1
 20326  10E9  1D3C               	btfss	_DimmerIntr1^(0+128),2
 20327  10EA  290E               	goto	i1l879
 20328                           
 20329                           ;Dimmer_B1.c: 1512: DimmerIntr1.Count++;
 20330  10EB  3001               	movlw	1
 20331  10EC  00F0               	movwf	??_DimmerLights_TMR_1
 20332  10ED  0870               	movf	??_DimmerLights_TMR_1,w
 20333  10EE  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 20334                           
 20335                           ;Dimmer_B1.c: 1514: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 20336  10EF  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20337  10F0  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 20338  10F1  1D03               	skipz
 20339  10F2  28F5               	goto	i1l7521
 20340                           
 20341                           ;Dimmer_B1.c: 1515: DimmerIntr1.Count = 0;
 20342  10F3  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20343                           
 20344                           ;Dimmer_B1.c: 1516: DimmerIntr1.Start = 0;
 20345  10F4  113C               	bcf	_DimmerIntr1^(0+128),2
 20346  10F5                     i1l7521:	
 20347                           
 20348                           ;Dimmer_B1.c: 1517: }
 20349                           ;Dimmer_B1.c: 1531: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20350  10F5  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20351  10F6  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 20352  10F7  1903               	btfsc	3,2
 20353                           
 20354                           ;Dimmer_B1.c: 1532: if (DimmerIntr1.ControlStatus == 1) {
 20355  10F8  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20356  10F9  28FC               	goto	i1l7527
 20357                           
 20358                           ;Dimmer_B1.c: 1533: RB1 = 0;
 20359  10FA  0020               	movlb	0	; select bank0
 20360  10FB  108D               	bcf	13,1	;volatile
 20361  10FC                     i1l7527:	
 20362                           
 20363                           ;Dimmer_B1.c: 1534: }
 20364                           ;Dimmer_B1.c: 1535: }
 20365                           ;Dimmer_B1.c: 1538: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20366  10FC  0021               	movlb	1	; select bank1
 20367  10FD  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20368  10FE  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20369  10FF  1903               	btfsc	3,2
 20370                           
 20371                           ;Dimmer_B1.c: 1539: if (DimmerIntr1.ControlStatus == 1) {
 20372  1100  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20373  1101  2904               	goto	i1l7533
 20374                           
 20375                           ;Dimmer_B1.c: 1540: RB1 = 1;
 20376  1102  0020               	movlb	0	; select bank0
 20377  1103  148D               	bsf	13,1	;volatile
 20378  1104                     i1l7533:	
 20379                           
 20380                           ;Dimmer_B1.c: 1541: }
 20381                           ;Dimmer_B1.c: 1542: }
 20382                           ;Dimmer_B1.c: 1545: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20383  1104  0021               	movlb	1	; select bank1
 20384  1105  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20385  1106  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20386  1107  1D03               	skipz
 20387  1108  0008               	return
 20388                           
 20389                           ;Dimmer_B1.c: 1546: if (DimmerIntr1.ControlStatus == 1) {
 20390  1109  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20391  110A  0008               	return
 20392                           
 20393                           ;Dimmer_B1.c: 1547: RB1 = 0;
 20394  110B  0020               	movlb	0	; select bank0
 20395  110C  108D               	bcf	13,1	;volatile
 20396                           
 20397                           ;Dimmer_B1.c: 1548: }
 20398                           ;Dimmer_B1.c: 1551: }
 20399                           ;Dimmer_B1.c: 1553: } else {
 20400  110D  0008               	return
 20401  110E                     i1l879:	
 20402                           
 20403                           ;Dimmer_B1.c: 1554: if (DimmerIntr1.GO == 1) {
 20404  110E  1C3C               	btfss	_DimmerIntr1^(0+128),0
 20405  110F  0008               	return
 20406                           
 20407                           ;Dimmer_B1.c: 1555: DimmerIntr1.Count++;
 20408  1110  3001               	movlw	1
 20409  1111  00F0               	movwf	??_DimmerLights_TMR_1
 20410  1112  0870               	movf	??_DimmerLights_TMR_1,w
 20411  1113  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 20412                           
 20413                           ;Dimmer_B1.c: 1556: if (DimmerIntr1.Count == 7) {
 20414  1114  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20415  1115  3A07               	xorlw	7
 20416  1116  1D03               	skipz
 20417  1117  0008               	return
 20418                           
 20419                           ;Dimmer_B1.c: 1557: DimmerIntr1.Count = 0;
 20420  1118  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20421                           
 20422                           ;Dimmer_B1.c: 1558: DimmerIntr1.GO = 0;
 20423  1119  103C               	bcf	_DimmerIntr1^(0+128),0
 20424                           
 20425                           ;Dimmer_B1.c: 1559: DimmerIntr1.Start = 1;
 20426  111A  153C               	bsf	_DimmerIntr1^(0+128),2
 20427                           
 20428                           ;Dimmer_B1.c: 1561: if (DimmerIntr1.ControlStatus == 1) {
 20429  111B  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20430  111C  0008               	return
 20431                           
 20432                           ;Dimmer_B1.c: 1562: RB1 = 1;
 20433  111D  0020               	movlb	0	; select bank0
 20434  111E  148D               	bsf	13,1	;volatile
 20435  111F  0008               	return
 20436  1120                     __end_of_DimmerLights_TMR_1:	
 20437                           
 20438                           	psect	text148
 20439  1A3A                     __ptext148:	
 20440 ;; *************** function _IOC_ISR *****************
 20441 ;; Defined at:
 20442 ;;		line 395 in file "../src/MCU_B1.c"
 20443 ;; Parameters:    Size  Location     Type
 20444 ;;		None
 20445 ;; Auto vars:     Size  Location     Type
 20446 ;;		None
 20447 ;; Return value:  Size  Location     Type
 20448 ;;		None               void
 20449 ;; Registers used:
 20450 ;;		wreg, status,2, status,0, pclath, cstack
 20451 ;; Tracked objects:
 20452 ;;		On entry : 0/0
 20453 ;;		On exit  : 0/0
 20454 ;;		Unchanged: 0/0
 20455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20460 ;;Total ram usage:        0 bytes
 20461 ;; Hardware stack levels used:    1
 20462 ;; Hardware stack levels required when called:    3
 20463 ;; This function calls:
 20464 ;;		_DimmerLights_IOC_1
 20465 ;; This function is called by:
 20466 ;;		_ISR
 20467 ;; This function uses a non-reentrant model
 20468 ;;
 20469                           
 20470                           
 20471                           ;psect for function _IOC_ISR
 20472  1A3A                     _IOC_ISR:	
 20473                           
 20474                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20475                           
 20476                           ;incstack = 0
 20477                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20478  1A3A  0021               	movlb	1	; select bank1
 20479  1A3B  1C2F               	btfss	_myMain^(0+128),0
 20480  1A3C  2A3F               	goto	i1l8077
 20481                           
 20482                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20483  1A3D  3192  2208         	fcall	_DimmerLights_IOC_1
 20484  1A3F                     i1l8077:	
 20485                           
 20486                           ;MCU_B1.c: 416: }
 20487                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20488  1A3F  0027               	movlb	7	; select bank7
 20489  1A40  1116               	bcf	22,2	;volatile
 20490                           
 20491                           ;MCU_B1.c: 419: IOCIF = 0;
 20492  1A41  100B               	bcf	11,0	;volatile
 20493  1A42  0008               	return
 20494  1A43                     __end_of_IOC_ISR:	
 20495                           
 20496                           	psect	text149
 20497  1208                     __ptext149:	
 20498 ;; *************** function _DimmerLights_IOC_1 *****************
 20499 ;; Defined at:
 20500 ;;		line 1604 in file "../src/Dimmer_B1.c"
 20501 ;; Parameters:    Size  Location     Type
 20502 ;;		None
 20503 ;; Auto vars:     Size  Location     Type
 20504 ;;		None
 20505 ;; Return value:  Size  Location     Type
 20506 ;;		None               void
 20507 ;; Registers used:
 20508 ;;		wreg, status,2, status,0, pclath, cstack
 20509 ;; Tracked objects:
 20510 ;;		On entry : 0/0
 20511 ;;		On exit  : 0/0
 20512 ;;		Unchanged: 0/0
 20513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20516 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20518 ;;Total ram usage:        2 bytes
 20519 ;; Hardware stack levels used:    1
 20520 ;; Hardware stack levels required when called:    2
 20521 ;; This function calls:
 20522 ;;		i1_Division
 20523 ;; This function is called by:
 20524 ;;		_IOC_ISR
 20525 ;; This function uses a non-reentrant model
 20526 ;;
 20527                           
 20528                           
 20529                           ;psect for function _DimmerLights_IOC_1
 20530  1208                     _DimmerLights_IOC_1:	
 20531                           
 20532                           ;Dimmer_B1.c: 1618: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20533                           
 20534                           ;incstack = 0
 20535                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20536  1208  0021               	movlb	1	; select bank1
 20537  1209  193C               	btfsc	_DimmerIntr1^(0+128),2
 20538  120A  0008               	return
 20539  120B  183C               	btfsc	_DimmerIntr1^(0+128),0
 20540  120C  0008               	return
 20541                           
 20542                           ;Dimmer_B1.c: 1620: if (RB2 != DimmerIntr1.Status) {
 20543  120D  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20544  120E  0C89               	rrf	9,f
 20545  120F  3901               	andlw	1
 20546  1210  00FA               	movwf	??_DimmerLights_IOC_1
 20547  1211  3000               	movlw	0
 20548  1212  0020               	movlb	0	; select bank0
 20549  1213  190D               	btfsc	13,2	;volatile
 20550  1214  3001               	movlw	1
 20551  1215  067A               	xorwf	??_DimmerLights_IOC_1,w
 20552  1216  1903               	skipnz
 20553  1217  0008               	return
 20554                           
 20555                           ;Dimmer_B1.c: 1623: DimmerIntr1.Count = 0;
 20556  1218  0021               	movlb	1	; select bank1
 20557  1219  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20558                           
 20559                           ;Dimmer_B1.c: 1624: DimmerIntr1.GO = 1;
 20560  121A  143C               	bsf	_DimmerIntr1^(0+128),0
 20561                           
 20562                           ;Dimmer_B1.c: 1626: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20563  121B  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20564  121C  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20565                           
 20566                           ;Dimmer_B1.c: 1627: DimmerIntr1.Tune = 1;
 20567  121D  14BC               	bsf	_DimmerIntr1^(0+128),1
 20568                           
 20569                           ;Dimmer_B1.c: 1628: }
 20570                           ;Dimmer_B1.c: 1630: if (DimmerIntr1.TuneGO == 1) {
 20571  121E  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20572  121F  2A3E               	goto	i1l7577
 20573                           
 20574                           ;Dimmer_B1.c: 1631: DimmerIntr1.TuneGO = 0;
 20575  1220  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20576                           
 20577                           ;Dimmer_B1.c: 1634: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20578  1221  3002               	movlw	2
 20579  1222  00FA               	movwf	??_DimmerLights_IOC_1
 20580  1223  087A               	movf	??_DimmerLights_IOC_1,w
 20581  1224  00F5               	movwf	i1Division@num
 20582  1225  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20583  1226  319B  2310  3192   	fcall	i1_Division
 20584  1229  00FB               	movwf	??_DimmerLights_IOC_1+1
 20585  122A  087B               	movf	??_DimmerLights_IOC_1+1,w
 20586  122B  0021               	movlb	1	; select bank1
 20587  122C  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20588                           
 20589                           ;Dimmer_B1.c: 1635: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20590  122D  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20591  122E  3AFF               	xorlw	255
 20592  122F  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20593  1230  3E3C               	addlw	60
 20594  1231  00FA               	movwf	??_DimmerLights_IOC_1
 20595  1232  087A               	movf	??_DimmerLights_IOC_1,w
 20596  1233  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20597                           
 20598                           ;Dimmer_B1.c: 1636: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20599  1234  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20600  1235  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20601  1236  00FA               	movwf	??_DimmerLights_IOC_1
 20602  1237  087A               	movf	??_DimmerLights_IOC_1,w
 20603  1238  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20604                           
 20605                           ;Dimmer_B1.c: 1637: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 20606  1239  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20607  123A  3E05               	addlw	5
 20608  123B  00FA               	movwf	??_DimmerLights_IOC_1
 20609  123C  087A               	movf	??_DimmerLights_IOC_1,w
 20610  123D  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20611  123E                     i1l7577:	
 20612                           
 20613                           ;Dimmer_B1.c: 1638: }
 20614                           ;Dimmer_B1.c: 1642: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20615  123E  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20616  123F  0020               	movlb	0	; select bank0
 20617  1240  1D0D               	btfss	13,2	;volatile
 20618  1241  0008               	return
 20619  1242  0021               	movlb	1	; select bank1
 20620  1243  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20621  1244  0008               	return
 20622  1245                     __end_of_DimmerLights_IOC_1:	
 20623                           
 20624                           	psect	text150
 20625  1B10                     __ptext150:	
 20626 ;; *************** function i1_Division *****************
 20627 ;; Defined at:
 20628 ;;		line 1504 in file "../src/Dimmer_B1.c"
 20629 ;; Parameters:    Size  Location     Type
 20630 ;;  value           1    wreg     unsigned char 
 20631 ;;  num             1    5[COMMON] unsigned char 
 20632 ;; Auto vars:     Size  Location     Type
 20633 ;;  value           1    8[COMMON] unsigned char 
 20634 ;;  Division        1    9[COMMON] unsigned char 
 20635 ;; Return value:  Size  Location     Type
 20636 ;;                  1    wreg      unsigned char 
 20637 ;; Registers used:
 20638 ;;		wreg, status,2, status,0, pclath, cstack
 20639 ;; Tracked objects:
 20640 ;;		On entry : 0/0
 20641 ;;		On exit  : 0/0
 20642 ;;		Unchanged: 0/0
 20643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20644 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20645 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20646 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20647 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20648 ;;Total ram usage:        5 bytes
 20649 ;; Hardware stack levels used:    1
 20650 ;; Hardware stack levels required when called:    1
 20651 ;; This function calls:
 20652 ;;		i1___lbdiv
 20653 ;; This function is called by:
 20654 ;;		_DimmerLights_IOC_1
 20655 ;; This function uses a non-reentrant model
 20656 ;;
 20657                           
 20658                           
 20659                           ;psect for function i1_Division
 20660  1B10                     i1_Division:	
 20661                           
 20662                           ;incstack = 0
 20663                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20664                           ;i1Division@value stored from wreg
 20665  1B10  00F8               	movwf	i1Division@value
 20666                           
 20667                           ;Dimmer_B1.c: 1505: char result = (char) (value / num);
 20668  1B11  0875               	movf	i1Division@num,w
 20669  1B12  00F6               	movwf	??i1_Division
 20670  1B13  0876               	movf	??i1_Division,w
 20671  1B14  00F0               	movwf	i1___lbdiv@divisor
 20672  1B15  0878               	movf	i1Division@value,w
 20673  1B16  319E  26FD         	fcall	i1___lbdiv
 20674  1B18  00F7               	movwf	??i1_Division+1
 20675  1B19  0877               	movf	??i1_Division+1,w
 20676  1B1A  00F9               	movwf	i1Division@result
 20677                           
 20678                           ;Dimmer_B1.c: 1506: return result;
 20679  1B1B  0879               	movf	i1Division@result,w
 20680  1B1C  0008               	return
 20681  1B1D                     __end_ofi1_Division:	
 20682                           
 20683                           	psect	text151
 20684  1EFD                     __ptext151:	
 20685 ;; *************** function i1___lbdiv *****************
 20686 ;; Defined at:
 20687 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20688 ;; Parameters:    Size  Location     Type
 20689 ;;  dividend        1    wreg     unsigned char 
 20690 ;;  divisor         1    0[COMMON] unsigned char 
 20691 ;; Auto vars:     Size  Location     Type
 20692 ;;  dividend        1    2[COMMON] unsigned char 
 20693 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20694 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20695 ;; Return value:  Size  Location     Type
 20696 ;;                  1    wreg      unsigned char 
 20697 ;; Registers used:
 20698 ;;		wreg, status,2, status,0
 20699 ;; Tracked objects:
 20700 ;;		On entry : 0/0
 20701 ;;		On exit  : 0/0
 20702 ;;		Unchanged: 0/0
 20703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20704 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20705 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20706 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20707 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20708 ;;Total ram usage:        5 bytes
 20709 ;; Hardware stack levels used:    1
 20710 ;; This function calls:
 20711 ;;		Nothing
 20712 ;; This function is called by:
 20713 ;;		i1_Division
 20714 ;; This function uses a non-reentrant model
 20715 ;;
 20716                           
 20717                           
 20718                           ;psect for function i1___lbdiv
 20719  1EFD                     i1___lbdiv:	
 20720                           
 20721                           ;incstack = 0
 20722                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20723                           ;i1___lbdiv@dividend stored from wreg
 20724  1EFD  00F2               	movwf	i1___lbdiv@dividend
 20725  1EFE  01F4               	clrf	i1___lbdiv@quotient
 20726  1EFF  0870               	movf	i1___lbdiv@divisor,w
 20727  1F00  1903               	btfsc	3,2
 20728  1F01  2F1C               	goto	i1l6933
 20729  1F02  01F3               	clrf	i1___lbdiv@counter
 20730  1F03  0AF3               	incf	i1___lbdiv@counter,f
 20731  1F04                     i1l6921:	
 20732  1F04  1BF0               	btfsc	i1___lbdiv@divisor,7
 20733  1F05  2F0D               	goto	i1l6923
 20734  1F06  1003               	clrc
 20735  1F07  0DF0               	rlf	i1___lbdiv@divisor,f
 20736  1F08  3001               	movlw	1
 20737  1F09  00F1               	movwf	??i1___lbdiv
 20738  1F0A  0871               	movf	??i1___lbdiv,w
 20739  1F0B  07F3               	addwf	i1___lbdiv@counter,f
 20740  1F0C  2F04               	goto	i1l6921
 20741  1F0D                     i1l6923:	
 20742  1F0D  1003               	clrc
 20743  1F0E  0DF4               	rlf	i1___lbdiv@quotient,f
 20744  1F0F  0870               	movf	i1___lbdiv@divisor,w
 20745  1F10  0272               	subwf	i1___lbdiv@dividend,w
 20746  1F11  1C03               	skipc
 20747  1F12  2F17               	goto	L11
 20748  1F13  0870               	movf	i1___lbdiv@divisor,w
 20749  1F14  02F2               	subwf	i1___lbdiv@dividend,f
 20750  1F15  1474               	bsf	i1___lbdiv@quotient,0
 20751  1F16  1003               	clrc
 20752  1F17                     L11:	
 20753  1F17  0CF0               	rrf	i1___lbdiv@divisor,f
 20754  1F18  3001               	movlw	1
 20755  1F19  02F3               	subwf	i1___lbdiv@counter,f
 20756  1F1A  1D03               	btfss	3,2
 20757  1F1B  2F0D               	goto	i1l6923
 20758  1F1C                     i1l6933:	
 20759  1F1C  0874               	movf	i1___lbdiv@quotient,w
 20760  1F1D  0008               	return
 20761  1F1E                     __end_ofi1___lbdiv:	
 20762  007E                     btemp	set	126	;btemp
 20763  007E                     pic14e$flags	set	126
 20764  007E                     wtemp	set	126
 20765  007E                     wtemp0	set	126
 20766  0080                     wtemp1	set	128
 20767  0082                     wtemp2	set	130
 20768  0084                     wtemp3	set	132
 20769  0086                     wtemp4	set	134
 20770  0088                     wtemp5	set	136
 20771  007F                     wtemp6	set	127
 20772  007E                     ttemp	set	126
 20773  007E                     ttemp0	set	126
 20774  0081                     ttemp1	set	129
 20775  0084                     ttemp2	set	132
 20776  0087                     ttemp3	set	135
 20777  007F                     ttemp4	set	127
 20778  007E                     ltemp	set	126
 20779  007E                     ltemp0	set	126
 20780  0082                     ltemp1	set	130
 20781  0086                     ltemp2	set	134
 20782  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         244
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      77
    BANK3            80      0      60
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights1(BANK2[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  152406
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1523
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5904
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    5904
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3656
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3656
                                             17 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   46657
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   46657
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   42083
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4281
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   37618
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     271
                                              4 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10284
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   22310
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
                             _setBuz
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2190
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      47
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1818
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1698
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1608
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1468
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    2981
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48627
       _DimmerLights_DimmingFunction
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48397
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27804
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     222
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     311
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3697
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20322
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     400
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27411
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27411
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     470
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4639
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4639
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 4     4      0    1682
                                             13 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1523
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Mar 24 08:08:14 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1D84                            ___bmul@product 0022  
               getMain_Lights_Count@count 0022                                        l90 14D4  
                                      l88 14C0                                        l98 1393  
                                      l99 138F                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1F63                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _u1 01BE  
                                      _Sw 00D2                            setTemp_Main@AD 006D  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1A5F  
                  __end_of_setDelayOff_GO 0C02                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1795  
                    _setDimmerLights_Line 1B88                              ___ftadd@sign 004B  
                                     l100 137D                                       l102 138D  
                                     l307 100C                      _setDimmerLights_SwOn 139A  
                                     l308 100E                                       l351 1F8D  
                                     l239 08E4                                       l539 0974  
                                     l707 1B56                                       l822 0FBF  
                                     l911 132F                                       l920 134E  
                                     l914 1338                                       l909 133A  
                                     l694 1567                                       l782 1EB3  
                                     _GIE 005F                                       _CRC 00C8  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0007                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CD  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0136                                       _Cmd 00C9  
            getDimmerLights_Status@lights 0022                                       _Sw1 01CE  
              ??_setDimmerIntr_Dimming_RF 0021                ??_setDimmerIntr_Dimming_Sw 0021  
         setDimmerIntr_Dimming_RF@command 0020                  __end_of_CC2500_WriteByte 1019  
                   _Buzzer_Initialization 19B6                           __end_of_ADC_Set 1A1B  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0023       __end_of_setDimmerIntr_ControlStatus 1D53  
             _setDimmerIntr_ControlStatus 1D3B                         ??_getSw_KeyStatus 0020  
                                    ?_ISR 0070                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1A43                     _setDimmerLights_OnOff 0F3A  
        setDimmerLights_DimmingRun@lights 0024                                Load_Main@i 0030  
                            ___ftdiv@sign 003D                                      l2201 0581  
                                    l1306 1041                                      l2202 05D2  
                                    l1316 0D1A                                      l2242 1664  
                                    l1523 1075                                      l2227 1B5D  
                                    l1292 12C0                                      l1518 105E  
                                    l1550 070A                                      l1519 1079  
                                    l2255 0831                           __end_of_IOC_Set 1A75  
                                    l2269 0A65                                      l2197 0632  
                                    l1559 1D83                                      l1495 1206  
                                    l1674 01FF                                      l1684 01DB  
                                    l1676 008B                                      l2572 1D01  
                          _Load_Main$4374 002A                                      l1685 01D9  
                                    l1677 0087                                      l1678 0082  
                                    l1854 072D                                      l2592 0381  
                                    l1848 07DA                                      l6041 1B38  
                                    l6113 03F4                                      l2594 024D  
                                    l6131 043A                                      l6115 03FE  
                                    l6107 03E1                                      l6203 0DF8  
                                    l6051 1C03                                      l2780 1E4A  
                                    l2941 15D4                                      l6125 041A  
                                    l6117 0403                                      l7101 0F9F  
                                    l6135 044C                                      l6127 0424  
                                    l6119 0407                                      l6231 0E57  
                                    l6215 0E33                                      l6055 1C09  
                                    l6073 07E9                                      l6145 0467  
                                    l6161 0D4F                                      l2970 0428  
                                    l8011 1367                                      l2947 15EB  
                                    l6155 0D39                                      l6227 0E4F  
                                    l6219 0E3B                                      l7131 0FFD  
                                    l7115 0FCE                                      l6341 13D3  
                                    l6085 03B1                                      l7301 1639  
                                    l6343 13DE                                      l6095 03C7  
                                    l6183 0DA9                                      l6175 0D90  
                                    l6255 0A7F                                      l7071 1D1E  
                                    l6089 03B8                                      l6281 0ACA  
                                    l6273 0AAF                                      l7209 1029  
                                    l8121 129F                                      l6355 114E  
                                    l6339 13CD                                      l6283 0AD3  
                                    l6275 0ABD                                      l6427 177F  
                                    l7139 1457                                      l6523 1F9E  
                                    l6611 0B62                                      l7331 1BE8  
                                    l8203 09E8                     _setDimmerLights_SwOff 1120  
                                    l6197 0DE2                                      l6285 0AD6  
                                    l7093 0F81                                      l6525 1FA9  
                                    l6391 0BF8                                      l7095 0F98  
                                    l8047 1EB5                                      l7423 1C7F  
                                    l9023 0613                                      l8231 0C78  
                                    l8223 0C4A                                      l6289 0AE4  
                                    l6561 1D7D                                      l6377 0BB4  
                                    l8321 00E0                                      l7265 1BD7  
                                    l6633 11BC                                      l9009 05E1  
                                    l5931 15AA                                      l6387 0BE4  
                                    l7451 17F3                                      l7355 10D8  
                                    l7347 10BA                                      l8315 00AE  
                                    l8227 0C61                                      l8219 0C33  
                                    l6557 1D6E                                      l7437 17BD  
                                    l7701 0D13                                      l7349 10C6  
                                    l8413 01EE                                      l7285 1618  
                                    l9037 062B                                      l5935 15B1  
                                    l6831 1BF2                                      l6823 1187  
                                    l6815 1171                                      l7439 17C4  
                                    l8095 0510                                      l7359 10E1  
                                    l6583 1278                                      l8183 09B9  
                                    l8175 099A                                      l5945 15D9  
                                    l5937 15BB                                      l6809 1168  
                                    l7449 17EC                                      l8353 0172  
                                    l8361 019B                                      l8281 0069  
                                    l7297 1630                                      l8249 11E6  
                                    l5971 13FD                                      l6907 1F3E  
                                    l5947 15E1                                      l5939 15C0  
                                    l6835 1BF9                                      l8443 0654  
                                    l8347 0163                                      l6595 0B04  
                                    l7651 1ECB                                      l8187 09C1  
                                    l9091 1517                                      l5981 1405  
                                    l5965 13F2                                      l7485 1347  
                                    l7477 1331                                      l6781 1062  
                                    l6837 1BFE                                      l8461 069B  
                                    l8453 0673                                      l8357 018F  
                                    l5983 1411                                      l7495 1A67  
                                    l8463 0676                                      l8367 01AB  
                                    l6599 0B09                                      l6871 0A0A  
                                    l6863 09EE                                      l7911 0237  
                                    l7655 1ED0                                      l9087 150C  
                                    l5993 142C                                      l8481 06B8  
                                    l8465 06A3                                      l8449 0664  
                                    l8377 01C1                                      l8721 1DCA  
                                    l8801 12F4                                      l6873 0A25  
                                    l7649 1EC8                                      l6779 1059  
                                    l8483 06E5                                      l8491 0700  
                                    l7675 1BB5                                      l8299 008A  
                                    l8715 1DC1                                      l8811 1304  
                                    l6875 0A47                                      l6883 0A53  
                                    l7755 073F                                      l5997 1434  
                                    l5989 1423                                      l6789 1070  
                                    l8485 06EF                                      l7693 0CAB  
                                    l8717 1DC4                                      l8805 12FB  
                                    l8741 1E3A                                      l6877 0A4B  
                                    l6869 0A03                                      l7749 0730  
                                    l7757 0742                     _myMain_Initialization 1C94  
                                    l6895 1F26                                      l8479 06DD  
                                    l7687 0C96                                      l8751 1F4C  
                                    l8807 12FE                                      l6879 0A4F  
                                    l7951 02F5                                      l7927 0280  
                                    l6897 1F2F                                      l7937 02B5  
                                    l7961 0329                                      l8755 1F52  
                                    l8739 1E34                                      l8923 0851  
                                    l7787 07B1                                      l8749 1F49  
                                    l8773 1F76                                      l8941 087C  
                                    l8917 0848                                      l8861 08B0  
                                    l7893 1D06                                      l7797 07C6  
                                    l7991 1E44                                      l8767 1F6D  
                                    l8919 084B                                      l8863 08B3  
                                    l7799 07C8                                      l8769 1F70  
                                    l8881 08CB                                      l7897 1D0C  
                                    _CFGS 0CAE                                      l8795 12EB  
                                    l8939 0863                                      l8891 08F3  
                                    l8867 08B9                                      l8797 12EE  
                                    l8893 08F7                                      l8885 08EA  
                                    l8895 08FA                                      l8887 08ED  
                            __CFG_WDTE$ON 0000                                      l8899 0900  
                                    l8995 05CD                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5045 0D61  
                                    u5205 0E5E                                      u5125 0E04  
                                    u5055 0D71                                      u5135 0E14  
                                    u4505 15B6                                      u5065 0D91  
                                    u5305 0ACB                                      u5075 0DA0  
                                    u5155 0E3C                                      _PEIE 005E  
                                    u4525 15CF                                      u5085 0DAA  
                                    u5165 0E42                                      u5245 0A86  
                                    u5510 173A                                      u4625 1408  
                                    u4545 15DC                                      u5195 0E58  
                                    u5275 0AB0                                      u5515 1738  
                                    u4645 1412                                      u4655 141C  
                                    u4575 15F2                                      u5615 1F93  
                                    u6415 1CF4                                      u4665 1424  
                                    u4915 03F5                                      u5475 0BC0  
                                    u6445 1DF9                                      u4945 0408  
                                    u8145 09A9                                      u6715 10BD  
                                    u7435 0783                                      u4885 03E2  
                                    u8085 12B7                                      u8245 0C26  
                                    u8325 11FE                                      u4975 041B  
                                    u6735 10C7                                      u7455 079A  
                                    u8255 0C3D                                      u6745 10D1  
                                    u8265 0C54                                      u6755 10D9  
                                    u7475 07B8                                      u8195 09D8  
                                    u8275 0C6B                                      u8700 06A1  
                                    u9405 0602                                      u8285 0C82  
                                    u8705 067F                                      u8465 00AC  
                                    u8730 06E3                                      u8475 00DE  
                                    u7845 1E4B                                      u8565 01A2  
                                    u8485 0122                                      u8735 06C1  
                                    u7855 1E50                                      u9375 05A5  
                                    u7885 135D                                      u8955 1CCA  
                                    _LWLO 0CAD                                      _RSSI 00CF  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1DED                _setDimmerLights_DimmingRun 1DD2  
                                    _Buz1 0120                                      _Load 0138  
                                    _Temp 00D8                                      _main 14E8  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 097B  
                         __end_of_RF_Main 19C2                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1AF8  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E         setDimmerLights_SwOn@dimmingStatus 002F  
    __end_of_DimmerLights_DimmingFunction 1350     __size_of_DimmerLights_DimmingFunction 0046  
            _DimmerLights_DimmingFunction 130A                __end_of_setRFSW_AdjControl 0B76  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2524 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1D25  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1D0F                    _getDimmerLights_Status 1B77  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 19D8  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00CB  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                           __end_of___awdiv 143B  
                         __end_of___lbdiv 1F40                           __end_of___ftadd 047F  
                         __end_of___ftdiv 0DCB                           __end_of___ftneg 1A4C  
                         __end_of___ftmul 0E7F                           ___awdiv@divisor 0020  
                                   _T1CON 0018                           __end_of___fttol 0AED  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 10E8  
                                   i1l879 110E                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1CFA  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 1730  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 16CB  
                                   _Light 00CE                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1E7E                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1AEC        DimmerLights_DimmingFunction@lights 0021  
                                   _getAD 1EBD                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1C48  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1B2B                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1C24                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___lbdiv 0021  
                     _getAll_Sw_KeyStatus 1BAA                        _setRF_DimmerLights 1730  
                         ___lbdiv@divisor 0020               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0023  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0067  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0020  
             ??_setDimmerLights_DimmingOn 0022                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1B49                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 1543                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 19DC            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 0636                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1B67  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 09ED                            _setMemory_Data 1AC8  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 143B                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                _getMain_All_LightsStatus 1A55                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1CBB                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 090C  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E          __end_of_getDimmerIntr_Dimming_Sw 1B3A  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1A32                                 ??_WDT_Set 0020  
                        __end_of___awtoft 0800                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1602                  _getMain_All_Error_Status 1048  
                                  _IOCBF2 1CB2                                    i1l1255 001A  
                                  i1l7521 10F5                                    i1l8067 1E77  
                                  i1l8077 1A3F                                    i1l7533 1104  
                                  i1l7527 10FC                                    i1l6921 1F04  
                                  i1l6923 1F0D                                    i1l6933 1F1C  
                                  i1l8607 0012                                    i1l7577 123E  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0022  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B2  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1D9E                                    _WDTCON 0097  
    __end_of_setDimmerLights_DimmingClose 1A01     __size_of_setDimmerLights_DimmingClose 0006  
            _setDimmerLights_DimmingClose 19FB                                    u798_25 1E72  
                      DelayTime_1us@count 0020                        setRF_AdjControl@sw 0027  
                    Exception_Main@i_3975 0032            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0063             __end_of_CC2500_PowerOnInitial 1CE5  
                                  _Dimmer 012C                                    _DlySw1 01D7  
                        _setRF_AdjControl 1192                  ?_setOverTemp_ADV_Restore 0070  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1C00  
              __end_of_Mcu_Initialization 1C36                       __end_of_Buzzer_Main 139A  
                                  _Memory 0220                          i1Division@result 0079  
                                  _Timer1 0131                                    ___bmul 1C00  
                  __end_of_Exception_Main 070B                      Exception_Main@lights 0035  
                                  ___wmul 1E41                       __size_ofi1_Division 000D  
                               ??___awdiv 0024                                 ??___lbdiv 0021  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 000C  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024                    ??_setDimmerLights_Main 0070  
                  ??_setDimmerLights_Line 0020                                    _r_data 00D6  
                    Exception_Main@status 002E   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1C81  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013         ??_getAll_DimmerIntr_Dimming_Sw_RF 0020  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1C6E  
                                  _s_data 00D7                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 1159                                    _myMain 00AF  
                    ??_RF_Timeout_Counter 0020                    __end_of_setMemory_Data 1AD4  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0027  
                                  _setBuz 148F                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 002F               __end_of_Load_Initialization 19BC  
        ??_setDimmerLights_Initialization 0020           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0020          __end_of_setDimmerIntr_Dimming_RF 1D6B  
        __end_of_setDimmerIntr_Dimming_Sw 1D3B                     ___ftmul@f3_as_product 0039  
                       __end_ofi1___lbdiv 1F1E                 _setDimmerLights_DimmingOn 1FAE  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1C94               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 003D                     __end_of_SwPointSelect 1B10  
             __size_of_DimmerLights_TMR_1 0038              __size_of_Flash_Memory_Modify 0093  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 006C                          ___lbdiv@dividend 0022  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1CFA               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0022                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5942 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039             ?_setDimmerLights_DimmingClose 0070  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1EDD                             __end_of_getAD 1EDD  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
                      _LED_Initialization 19D0                           _getSw_KeyStatus 1BDD  
               ??_setControl_Lights_Table 0070                        getRF_KeyStatus@key 0021  
                         ?_setMemory_Data 0020            ??_DimmerLights_DimmingFunction 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 1B1D  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1AA4                __end_of_set_TimeoutCleared 19F5  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0064  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1A98                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 19C2                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 1350                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 19C8  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 19C8                             ??_Switch_Main 0034  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00CC  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0020  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 14E8                            _getDelayOff_GO 1B99  
                     _CC2500_WriteCommand 1DB8                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 15A1             ??_DimmerLights_Initialization 0064  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070         __size_of_getDimmerIntr_Dimming_Sw 000F  
                              _getLoad_AD 097B                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1A22                 ?_getDimmerIntr_Dimming_Sw 0070  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1A14                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 0C02        __end_of_DimmerLights_SelectPointer 1A98  
              _DimmerLights_SelectPointer 1A8C                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 1A80                        _setRFSW_AdjControl 0AED  
                  __end_of_setProductData 1AA4             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1A3A                                   _IOC_Set 1A6A  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 1285  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1D84  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 19BF                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 1AEC           __end_of_setControl_Lights_Table 0A66  
                         setRF_Main@error 00E9                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 148F                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 1B04  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1BCC                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1BAA  
          __end_of_getDimmerLights_Status 1B88                         __end_of_getRxData 1666  
                 __end_of_getSw_KeyStatus 1BEE                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 13E7  
          ??_setDimmerLights_DimmingClose 0023                                   ___lbdiv 1F1E  
                                 ___ftadd 0389                                   ___ftdiv 0D22  
                                 ___ftneg 1A43                           __size_of___wmul 001E  
                                 ___ftmul 0DCB                                   ___fttol 0A66  
                     __end_of_Switch_Main 1A22                        __end_ofi1_Division 1B1D  
                                 ___lwdiv 10B1                ??_getMain_All_LightsStatus 0020  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1BCC  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 0068  
                         __size_of_setBuz 0059                                   __ptext1 11CC  
                                 __ptext2 1C94                                   __ptext3 0C02  
                                 __ptext4 097B                                   __ptext5 1EBD  
                                 __ptext6 1C36                                   __ptext7 0002  
                                 __ptext8 19C5                                   __ptext9 070B  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0020                   ??_setDimmerLights_OnOff 006E  
                         ?_setProductData 0062                        i1___lbdiv@dividend 0072  
               __end_of_Flash_Memory_Main 12C6                 __end_of_Flash_Memory_Read 1D9E  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 0561  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 19CC  
                __end_of_setRF_AdjControl 11CC                         _DimmerLights_Main 1E9D  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 19FB  
              __end_of_CC2500_ClearRXFIFO 19E4                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 19E8                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EE  
                          _LedPointSelect 1ABC                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1A80  
                                 clrloop0 1A08            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 19F0                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1FD6  
                           _DelayTime_1us 1F88                         __end_of_setTxData 0F3A  
              __end_of_Flash_Memory_Write 1048        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1A01                __end_of_setRF_TransceiveGO 1C6E  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 1A02  
                              _setSw_Main 0205                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0030                         _CC2500_ReadStatus 1F63  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C12  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                        i1___lbdiv@quotient 0074  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0835  
                           _CC2500_TxData 08A0                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0C8F                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1D6B  
                     _Flash_Memory_Unlock 1A4C                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1EBD                        _Mcu_Initialization 1C24  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 001B  
            __end_of_setRF_TimeoutCleared 19E0                      __end_of_my_MainTimer 1208  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1AC8                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___lbdiv 1EFD  
               __end_of_CC2500_InitSetREG 2000                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 1F88  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 1FD6                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1DB8  
                    _setRF_Initialization 1A75                        _setMemory_LoopSave 1C81  
                             _Switch_Main 1A1B                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1BDD  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1CD0               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1BBB  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1C12       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1E5F  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 1192  
                           __pbitbssBANK1 0778             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 004D                            __end_of_setBuz 14E8  
              __end_of_DimmerLights_IOC_1 1245                      _CC2500_FrequencyCabr 1AF8  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 1245                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 1120                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1A2A                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1E9D  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 07DE  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 16CB  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1666  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
           setRF_AdjControl@dimmingStatus 0026                        _set_TimeoutCleared 19F0  
       __end_of_setDimmerIntr_MaxmumValue 1AB0                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0169  
                       __size_of_Division 000F                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 008D                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 19C5  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00D0                     setProductData@address 0064  
                     Exception_Main@count 002F                       Exception_Main@error 0034  
                                ??___bmul 0021                                  ??___wmul 0024  
                  __size_of_SwPointSelect 000C          __end_of_getMain_All_LightsStatus 1A5F  
                               _Tx_Length 00D4                               __pdataBANK4 0245  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0068  
                       ??_CC2500_ReadByte 0020               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 107B                          _CC2500_SIDLEMode 19E8  
              __size_of_DimmerLights_Main 0020                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0022  
          getDimmerIntr_Dimming_Sw@lights 0020                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E            getDimmerIntr_Dimming_Sw@status 0021  
                               ___latbits 0003                          _setMemory_Modify 1C48  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E6                 setRF_TransceiveGO@command 0021  
                    ??_set_TimeoutCleared 0020                 _DimmerIntr_Initialization 1543  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0067                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0021                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0062               setDimmerLights_DimmingOn@sw 0022  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0160                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0065            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1E24  
                setRFSW_AdjControl@status 0067                           ??_CC2500_TxData 0024  
                               __pnvBANK1 00EE                            getRxData@error 00E7  
             __size_of_LED_Initialization 0004                      _setRF_TimeoutCleared 19DC  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0030  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                           _getCmd_Status 1BEE                                setBuz@time 0029  
                         ??_setCmd_Status 0021                       setDelayOff_GO@value 0066  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002C                    _setTemp_Initialization 0800  
                               _getBuz_GO 1BBB                  ?_setDimmerLights_Dimming 006A  
     __end_of_Flash_Memory_Initialization 0561               _Flash_Memory_Initialization 047F  
                                ?___awdiv 0020                                 __ptext100 1A55  
                               __ptext101 1B99                                  ?___lbdiv 0020  
                               __ptext110 1B49                                 __ptext102 1BEE  
                               __ptext111 1D0F                                 __ptext103 143B  
                               __ptext120 1666                                 __ptext112 1A22  
                               __ptext104 0E7F                                 __ptext121 0A66  
                               __ptext113 1048                                 __ptext105 1C5B  
                               __ptext130 19CC                                 __ptext122 1A43  
                               __ptext114 130A                                 __ptext106 1730  
                               __ptext131 090C                                 __ptext123 0DCB  
                               __ptext115 1A0D                                 __ptext107 1B88  
                               __ptext140 19C8                                 __ptext132 1A98  
                               __ptext124 0D22                                 __ptext116 19B5  
                               __ptext108 1AA4                                 __ptext141 19F5  
                               __ptext133 139A                                 __ptext125 0389  
                               __ptext117 1543                                 __ptext109 1D25  
                                ?___ftadd 0041                                 __ptext150 1B10  
                               __ptext142 1A80                                 __ptext134 148F  
                               __ptext126 07DE                                 __ptext118 1C48  
                               __ptext151 1EFD                                 __ptext143 1350  
                               __ptext135 13E7                                 __ptext127 15A1  
                               __ptext119 16CB                                 __ptext144 19B6  
                               __ptext136 1B2B                                 __ptext128 1B3A  
                               __ptext137 1120                                 __ptext129 1F1E  
                               __ptext146 1E5F                                 __ptext138 1B77  
                               __ptext147 10E8                                 __ptext139 1A8C  
                               __ptext148 1A3A                                 __ptext149 1208  
                               _getRxData 1602                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 1285  
                        ??_setProductData 0063                   _setOverTemp_ADV_Restore 1DED  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 19B9                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 1D0F  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1B58              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1B49                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00C6                         ?_setRF_AdjControl 0070  
                               _r_address 00D5             __end_of_setDimmerLights_OnOff 1000  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 1159              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1CA7                               ??i1___lbdiv 0071  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0025  
                      ??_setRF_AdjControl 0024                             _SwPointSelect 1B04  
                     __end_of_setLED_Main 10B1                          ??_getDelayOff_GO 0022  
                       i1___lbdiv@divisor 0070                         i1___lbdiv@counter 0073  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 19C5  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 19D4                           SwPointSelect@sw 0021  
                               clear_ram0 1A07                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 11CC  
                               _setTxData 0E7F       __end_of_DimmerLights_Initialization 1A14  
             _DimmerLights_Initialization 1A0D                        _CC2500_ClearRXFIFO 19E0  
                  _Flash_Memory_Main$3467 0028                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 19E4                  _getDimmerIntr_Dimming_Sw 1B2B  
                setRF_DimmerLights@lights 0069                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1CBB                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  setRF_DimmerLights@status 0068  
    __size_of_setDimmerIntr_ControlStatus 0018               __size_of_setRFSW_AdjControl 0089  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 1019  
                              ?_getRxData 0070                              ??_getLoad_AD 0024  
                                _TMR1_ISR 1E5F                    CC2500_InitSetREG@temp1 0026  
                  CC2500_InitSetREG@temp2 0027                              ??_getLoad_OK 0020  
                                _TMR1_Set 1AE0                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1C5B  
                                _RF_Count 0134                      __end_of_RF_RxDisable 1B67  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1DD2  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1C36  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0021  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00D3  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CA                              setSw_Main@sw 0033  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0026                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1AE0                            ?_SwPointSelect 0070  
                             getAD@adcon0 0023                               getAD@adcon1 0020  
                          setLED_Main@led 0024                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 0835                     _DlyOff_Initialization 19F5  
       __size_of_getMain_All_LightsStatus 000A                      ??_CC2500_ClearRXFIFO 0024  
                                _Division 1B3A                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1D53  
             setDimmerLights_OnOff@lights 00E6                  _setDimmerIntr_Dimming_Sw 1D25  
                                _Fosc_Set 19D8                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 006E                        __end_of_getLoad_AD 09ED  
                      __end_of_getLoad_OK 1A2A                     _Switch_Initialization 19EC  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 0C8F                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1000  
                       getLoad_AD@channel 0026       __size_of_DimmerLights_SelectPointer 000C  
                    ??_setRF_TransceiveGO 0020                                  _SwDetect 00D3  
                             ??_Temp_Main 006F                          getCmd_Status@cmd 0021  
                        setCmd_Status@cmd 0020                         setRFSW_Control@sw 006F  
           _getMain_All_Error_Status$3963 0021             _getMain_All_Error_Status$3964 0023  
                __end_of_getDimmer_LoadGO 1A32                       _Load_Initialization 19B9  
        ??_getDimmerLights_ValueToPercent 005C           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0023                 ??_setOverTemp_ADV_Restore 0020  
                            _setTemp_Main 070B                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0022                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 07DE  
                        ??_LedPointSelect 0020                                  ___ftpack 15A1  
           __size_of_getMain_Lights_Count 000E                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00E8  
                    CC2500_WriteREG@value 0022                               _setLED_Main 107B  
              __end_of_setRF_DimmerLights 1795            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1A3A  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0027  
                                __ptext10 1DED                                  __ptext11 19C2  
                                __ptext20 19F0                                  __ptext12 0800  
                                __ptext21 1CE5                                  __ptext13 1A1B  
                                __ptext30 1192                                  __ptext22 19EC  
                                __ptext14 0205                                  __ptext31 1245  
                                __ptext23 1B67                                  __ptext15 1CA7  
                                __ptext40 1E24                                  __ptext32 0AED  
                                __ptext24 19BF                                  __ptext16 1FAE  
                                __ptext41 1CD0                                  __ptext33 1DD2  
                                __ptext25 0561                                  __ptext17 1BDD  
                                __ptext50 19E0                                  __ptext42 19E8  
                                __ptext34 1BCC                                  __ptext26 1602  
                                __ptext18 1B04                                  __ptext51 1DB8  
                                __ptext43 12C6                                  __ptext35 1BBB  
                                __ptext27 0801                                  __ptext19 1CFA  
                                __ptext60 1D9E                                  __ptext52 19DC  
                                __ptext44 1FD6                                  __ptext36 1B58  
                                __ptext28 1C81                                  __ptext61 1A6A  
                                __ptext53 1CBB                                  __ptext45 1E7E  
                                __ptext37 08A0                                  __ptext29 09ED  
                                __ptext70 10B1                                  __ptext62 19D8  
                                __ptext54 1000                                  __ptext46 1F40  
                                __ptext38 0835                                  __ptext71 19B9  
                                __ptext63 1A14                                  __ptext55 19BC  
                                __ptext47 1AF8                                  __ptext39 1F63  
                                __ptext80 1AD4                                  __ptext72 1E08  
                                __ptext64 0053                                  __ptext56 1A75  
                                __ptext48 1F88                                  __ptext81 047F  
                                __ptext73 19D4                                  __ptext65 1B1D  
                                __ptext57 1C24                                  __ptext49 19E4  
                                __ptext90 0F3A                                  __ptext82 1AC8  
                                __ptext74 107B                                  __ptext66 1A32  
                                __ptext58 1AEC                                  __ptext91 1159  
                                __ptext83 1019                                  __ptext75 19D0  
                                __ptext67 1A2A                                  __ptext59 1AE0  
                                __ptext92 1ABC                                  __ptext84 1A4C  
                                __ptext76 1C12                                  __ptext68 1C6E  
                                __ptext93 19FB                                  __ptext85 1D84  
                                __ptext77 1285                                  __ptext69 1E41  
                                __ptext94 1D53                                  __ptext86 0636  
                                __ptext78 1BAA                                  __ptext95 1AB0  
                                __ptext87 1A5F                                  __ptext79 0C8F  
                                __ptext96 1D3B                                  __ptext88 1E9D  
                                __ptext97 0B76                                  __ptext89 1795  
                                __ptext98 1C00                                  __ptext99 1D6B  
                                __product 0245                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1A6A  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1B99  
                      _DimmerLights_IOC_1 1208              __end_of_setDimmerLights_SwOn 13E7  
                            ??_setSw_Main 0031                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1CA7  
      __size_of_DimmerIntr_Initialization 005E                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 10E8                  __end_of_CC2500_SIDLEMode 19EC  
              setDimmerLights_Main@lights 00E7               __end_of_DelayOffPointSelect 1A8C  
                setOverTemp_ADV_Restore@i 0021                CC2500_WriteCommand@command 0023  
                         _CC2500_ReadByte 1E24                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1E7E                  __end_of_setMemory_Modify 1C5B  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 0636  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00E6                              getLoad_OK@ok 0020  
              __end_of_RF_Timeout_Counter 1CD0               Flash_Memory_Main@key_Status 0027  
                _getAll_Sw_KeyStatus$7108 0022                                  main@argc 00EA  
                                main@argv 00EC                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$7105 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 12C6                  __size_of_getSw_KeyStatus 0011  
            setDimmerLights_Dimming@value 006C        __end_of_setDimmerIntr_DimmingValue 1ABC  
              _setDimmerIntr_DimmingValue 1AB0               __end_of_Flash_Memory_Modify 0D22  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 0801  
             __end_of_Flash_Memory_Unlock 1A55                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1F40                        __end_of_setSw_Main 0389  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 007A  
         getDimmerLights_PercentToValue@i 005F       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                            Division@result 0029  
         __end_of_setOverTemp_ADV_Restore 1E08                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 19B6   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 19B5                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 19BC  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1AD4  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D1  
                 __size_of_Exception_Main 00D5                             Division@value 0028  
         __end_of_DelayOff_Initialization 19CC                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 19D0                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0B76  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0079  
        __size_of_setDimmerLights_Dimming 0054               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00E2               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 1B10  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1FAE  
              ??_getDimmerIntr_Dimming_Sw 0020                   __end_of_CC2500_ReadByte 1E41  
            __end_of_setSw_Initialization 1B77                           _Timeout_Counter 1CE5  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 1B58          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 19D4            __end_of_setTemp_Initialization 0801  
                             Division@num 0025                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 19BF                 __size_of_setRF_AdjControl 003A  
                   __end_of_CC2500_RxData 08A0                     __end_of_CC2500_TxData 090C  
                   _setLoad_AH_AL_Restore 1E08                   __end_of_CC2500_PowerRST 130A  
