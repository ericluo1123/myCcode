

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Dec 15 08:21:21 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	intentry,global,class=CODE,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	dabs	1,0x7E,2
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  018E                     	;# 
   208  0191                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0193                     	;# 
   212  0193                     	;# 
   213  0194                     	;# 
   214  0195                     	;# 
   215  0196                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020D                     	;# 
   229  0210                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  0394                     	;# 
   254  0395                     	;# 
   255  0396                     	;# 
   256  0FE4                     	;# 
   257  0FE5                     	;# 
   258  0FE6                     	;# 
   259  0FE7                     	;# 
   260  0FE8                     	;# 
   261  0FE9                     	;# 
   262  0FEA                     	;# 
   263  0FEB                     	;# 
   264  0FED                     	;# 
   265  0FEE                     	;# 
   266  0FEF                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  0010                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0197                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020D                     	;# 
   340  0210                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0291                     	;# 
   357  0291                     	;# 
   358  0292                     	;# 
   359  0293                     	;# 
   360  0298                     	;# 
   361  0298                     	;# 
   362  0299                     	;# 
   363  029A                     	;# 
   364  0394                     	;# 
   365  0395                     	;# 
   366  0396                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  011D                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0197                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019D                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  020D                     	;# 
   451  0210                     	;# 
   452  0211                     	;# 
   453  0211                     	;# 
   454  0212                     	;# 
   455  0212                     	;# 
   456  0213                     	;# 
   457  0213                     	;# 
   458  0214                     	;# 
   459  0214                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0217                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  010C                     	;# 
   533  010D                     	;# 
   534  010E                     	;# 
   535  0116                     	;# 
   536  0117                     	;# 
   537  011D                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  018E                     	;# 
   541  0191                     	;# 
   542  0191                     	;# 
   543  0192                     	;# 
   544  0193                     	;# 
   545  0193                     	;# 
   546  0194                     	;# 
   547  0195                     	;# 
   548  0196                     	;# 
   549  0197                     	;# 
   550  0199                     	;# 
   551  019A                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019D                     	;# 
   559  019E                     	;# 
   560  019F                     	;# 
   561  020D                     	;# 
   562  0210                     	;# 
   563  0211                     	;# 
   564  0211                     	;# 
   565  0212                     	;# 
   566  0212                     	;# 
   567  0213                     	;# 
   568  0213                     	;# 
   569  0214                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0216                     	;# 
   575  0216                     	;# 
   576  0217                     	;# 
   577  0217                     	;# 
   578  0291                     	;# 
   579  0291                     	;# 
   580  0292                     	;# 
   581  0293                     	;# 
   582  0298                     	;# 
   583  0298                     	;# 
   584  0299                     	;# 
   585  029A                     	;# 
   586  0394                     	;# 
   587  0395                     	;# 
   588  0396                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0090                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  0199                     	;# 
   662  019A                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019C                     	;# 
   668  019C                     	;# 
   669  019D                     	;# 
   670  019E                     	;# 
   671  019F                     	;# 
   672  020D                     	;# 
   673  0210                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0FE4                     	;# 
   701  0FE5                     	;# 
   702  0FE6                     	;# 
   703  0FE7                     	;# 
   704  0FE8                     	;# 
   705  0FE9                     	;# 
   706  0FEA                     	;# 
   707  0FEB                     	;# 
   708  0FED                     	;# 
   709  0FEE                     	;# 
   710  0FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  0090                     	;# 
   742  0091                     	;# 
   743  0092                     	;# 
   744  0095                     	;# 
   745  0096                     	;# 
   746  0097                     	;# 
   747  0099                     	;# 
   748  009A                     	;# 
   749  009B                     	;# 
   750  009B                     	;# 
   751  009C                     	;# 
   752  009D                     	;# 
   753  009E                     	;# 
   754  010C                     	;# 
   755  010D                     	;# 
   756  010E                     	;# 
   757  0116                     	;# 
   758  0117                     	;# 
   759  011D                     	;# 
   760  018C                     	;# 
   761  018D                     	;# 
   762  018E                     	;# 
   763  0191                     	;# 
   764  0191                     	;# 
   765  0192                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0194                     	;# 
   769  0195                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0199                     	;# 
   773  019A                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019C                     	;# 
   780  019D                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  020D                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0212                     	;# 
   789  0213                     	;# 
   790  0213                     	;# 
   791  0214                     	;# 
   792  0214                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0216                     	;# 
   797  0216                     	;# 
   798  0217                     	;# 
   799  0217                     	;# 
   800  0291                     	;# 
   801  0291                     	;# 
   802  0292                     	;# 
   803  0293                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0015                     	;# 
   841  0016                     	;# 
   842  0016                     	;# 
   843  0017                     	;# 
   844  0018                     	;# 
   845  0019                     	;# 
   846  001A                     	;# 
   847  001B                     	;# 
   848  001C                     	;# 
   849  008C                     	;# 
   850  008D                     	;# 
   851  008E                     	;# 
   852  0090                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  011D                     	;# 
   871  018C                     	;# 
   872  018D                     	;# 
   873  018E                     	;# 
   874  0191                     	;# 
   875  0191                     	;# 
   876  0192                     	;# 
   877  0193                     	;# 
   878  0193                     	;# 
   879  0194                     	;# 
   880  0195                     	;# 
   881  0196                     	;# 
   882  0197                     	;# 
   883  0199                     	;# 
   884  019A                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020D                     	;# 
   895  0210                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0298                     	;# 
   916  0298                     	;# 
   917  0299                     	;# 
   918  029A                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0010                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  0090                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0116                     	;# 
   980  0117                     	;# 
   981  011D                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  0191                     	;# 
   986  0191                     	;# 
   987  0192                     	;# 
   988  0193                     	;# 
   989  0193                     	;# 
   990  0194                     	;# 
   991  0195                     	;# 
   992  0196                     	;# 
   993  0197                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019C                     	;# 
  1002  019D                     	;# 
  1003  019E                     	;# 
  1004  019F                     	;# 
  1005  020D                     	;# 
  1006  0210                     	;# 
  1007  0211                     	;# 
  1008  0211                     	;# 
  1009  0212                     	;# 
  1010  0212                     	;# 
  1011  0213                     	;# 
  1012  0213                     	;# 
  1013  0214                     	;# 
  1014  0214                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0216                     	;# 
  1019  0216                     	;# 
  1020  0217                     	;# 
  1021  0217                     	;# 
  1022  0291                     	;# 
  1023  0291                     	;# 
  1024  0292                     	;# 
  1025  0293                     	;# 
  1026  0298                     	;# 
  1027  0298                     	;# 
  1028  0299                     	;# 
  1029  029A                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0FE4                     	;# 
  1034  0FE5                     	;# 
  1035  0FE6                     	;# 
  1036  0FE7                     	;# 
  1037  0FE8                     	;# 
  1038  0FE9                     	;# 
  1039  0FEA                     	;# 
  1040  0FEB                     	;# 
  1041  0FED                     	;# 
  1042  0FEE                     	;# 
  1043  0FEF                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0008                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  0010                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0090                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  010E                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0197                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019C                     	;# 
  1113  019D                     	;# 
  1114  019E                     	;# 
  1115  019F                     	;# 
  1116  020D                     	;# 
  1117  0210                     	;# 
  1118  0211                     	;# 
  1119  0211                     	;# 
  1120  0212                     	;# 
  1121  0212                     	;# 
  1122  0213                     	;# 
  1123  0213                     	;# 
  1124  0214                     	;# 
  1125  0214                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0216                     	;# 
  1130  0216                     	;# 
  1131  0217                     	;# 
  1132  0217                     	;# 
  1133  0291                     	;# 
  1134  0291                     	;# 
  1135  0292                     	;# 
  1136  0293                     	;# 
  1137  0298                     	;# 
  1138  0298                     	;# 
  1139  0299                     	;# 
  1140  029A                     	;# 
  1141  0394                     	;# 
  1142  0395                     	;# 
  1143  0396                     	;# 
  1144  0FE4                     	;# 
  1145  0FE5                     	;# 
  1146  0FE6                     	;# 
  1147  0FE7                     	;# 
  1148  0FE8                     	;# 
  1149  0FE9                     	;# 
  1150  0FEA                     	;# 
  1151  0FEB                     	;# 
  1152  0FED                     	;# 
  1153  0FEE                     	;# 
  1154  0FEF                     	;# 
  1155  0000                     	;# 
  1156  0001                     	;# 
  1157  0002                     	;# 
  1158  0003                     	;# 
  1159  0004                     	;# 
  1160  0005                     	;# 
  1161  0006                     	;# 
  1162  0007                     	;# 
  1163  0008                     	;# 
  1164  0009                     	;# 
  1165  000A                     	;# 
  1166  000B                     	;# 
  1167  000C                     	;# 
  1168  000D                     	;# 
  1169  000E                     	;# 
  1170  0010                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  008C                     	;# 
  1183  008D                     	;# 
  1184  008E                     	;# 
  1185  0090                     	;# 
  1186  0091                     	;# 
  1187  0092                     	;# 
  1188  0095                     	;# 
  1189  0096                     	;# 
  1190  0097                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  010E                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  011D                     	;# 
  1204  018C                     	;# 
  1205  018D                     	;# 
  1206  018E                     	;# 
  1207  0191                     	;# 
  1208  0191                     	;# 
  1209  0192                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0197                     	;# 
  1216  0199                     	;# 
  1217  019A                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019C                     	;# 
  1223  019C                     	;# 
  1224  019D                     	;# 
  1225  019E                     	;# 
  1226  019F                     	;# 
  1227  020D                     	;# 
  1228  0210                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0216                     	;# 
  1241  0216                     	;# 
  1242  0217                     	;# 
  1243  0217                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0298                     	;# 
  1249  0298                     	;# 
  1250  0299                     	;# 
  1251  029A                     	;# 
  1252  0394                     	;# 
  1253  0395                     	;# 
  1254  0396                     	;# 
  1255  0FE4                     	;# 
  1256  0FE5                     	;# 
  1257  0FE6                     	;# 
  1258  0FE7                     	;# 
  1259  0FE8                     	;# 
  1260  0FE9                     	;# 
  1261  0FEA                     	;# 
  1262  0FEB                     	;# 
  1263  0FED                     	;# 
  1264  0FEE                     	;# 
  1265  0FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0010                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0097                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  011D                     	;# 
  1315  018C                     	;# 
  1316  018D                     	;# 
  1317  018E                     	;# 
  1318  0191                     	;# 
  1319  0191                     	;# 
  1320  0192                     	;# 
  1321  0193                     	;# 
  1322  0193                     	;# 
  1323  0194                     	;# 
  1324  0195                     	;# 
  1325  0196                     	;# 
  1326  0197                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  020D                     	;# 
  1339  0210                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0291                     	;# 
  1356  0291                     	;# 
  1357  0292                     	;# 
  1358  0293                     	;# 
  1359  0298                     	;# 
  1360  0298                     	;# 
  1361  0299                     	;# 
  1362  029A                     	;# 
  1363  0394                     	;# 
  1364  0395                     	;# 
  1365  0396                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0010                     	;# 
  1393  0011                     	;# 
  1394  0012                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0090                     	;# 
  1408  0091                     	;# 
  1409  0092                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0099                     	;# 
  1414  009A                     	;# 
  1415  009B                     	;# 
  1416  009B                     	;# 
  1417  009C                     	;# 
  1418  009D                     	;# 
  1419  009E                     	;# 
  1420  010C                     	;# 
  1421  010D                     	;# 
  1422  010E                     	;# 
  1423  0116                     	;# 
  1424  0117                     	;# 
  1425  011D                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  018E                     	;# 
  1429  0191                     	;# 
  1430  0191                     	;# 
  1431  0192                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0197                     	;# 
  1438  0199                     	;# 
  1439  019A                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019C                     	;# 
  1445  019C                     	;# 
  1446  019D                     	;# 
  1447  019E                     	;# 
  1448  019F                     	;# 
  1449  020D                     	;# 
  1450  0210                     	;# 
  1451  0211                     	;# 
  1452  0211                     	;# 
  1453  0212                     	;# 
  1454  0212                     	;# 
  1455  0213                     	;# 
  1456  0213                     	;# 
  1457  0214                     	;# 
  1458  0214                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0216                     	;# 
  1463  0216                     	;# 
  1464  0217                     	;# 
  1465  0217                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0298                     	;# 
  1471  0298                     	;# 
  1472  0299                     	;# 
  1473  029A                     	;# 
  1474  0394                     	;# 
  1475  0395                     	;# 
  1476  0396                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0010                     	;# 
  1504  0011                     	;# 
  1505  0012                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008D                     	;# 
  1517  008E                     	;# 
  1518  0090                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  010C                     	;# 
  1532  010D                     	;# 
  1533  010E                     	;# 
  1534  0116                     	;# 
  1535  0117                     	;# 
  1536  011D                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0194                     	;# 
  1546  0195                     	;# 
  1547  0196                     	;# 
  1548  0197                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020D                     	;# 
  1561  0210                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0298                     	;# 
  1582  0298                     	;# 
  1583  0299                     	;# 
  1584  029A                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0010                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0015                     	;# 
  1618  0016                     	;# 
  1619  0016                     	;# 
  1620  0017                     	;# 
  1621  0018                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  008C                     	;# 
  1627  008D                     	;# 
  1628  008E                     	;# 
  1629  0090                     	;# 
  1630  0091                     	;# 
  1631  0092                     	;# 
  1632  0095                     	;# 
  1633  0096                     	;# 
  1634  0097                     	;# 
  1635  0099                     	;# 
  1636  009A                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0116                     	;# 
  1646  0117                     	;# 
  1647  011D                     	;# 
  1648  018C                     	;# 
  1649  018D                     	;# 
  1650  018E                     	;# 
  1651  0191                     	;# 
  1652  0191                     	;# 
  1653  0192                     	;# 
  1654  0193                     	;# 
  1655  0193                     	;# 
  1656  0194                     	;# 
  1657  0195                     	;# 
  1658  0196                     	;# 
  1659  0197                     	;# 
  1660  0199                     	;# 
  1661  019A                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019D                     	;# 
  1669  019E                     	;# 
  1670  019F                     	;# 
  1671  020D                     	;# 
  1672  0210                     	;# 
  1673  0211                     	;# 
  1674  0211                     	;# 
  1675  0212                     	;# 
  1676  0212                     	;# 
  1677  0213                     	;# 
  1678  0213                     	;# 
  1679  0214                     	;# 
  1680  0214                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0216                     	;# 
  1685  0216                     	;# 
  1686  0217                     	;# 
  1687  0217                     	;# 
  1688  0291                     	;# 
  1689  0291                     	;# 
  1690  0292                     	;# 
  1691  0293                     	;# 
  1692  0298                     	;# 
  1693  0298                     	;# 
  1694  0299                     	;# 
  1695  029A                     	;# 
  1696  0394                     	;# 
  1697  0395                     	;# 
  1698  0396                     	;# 
  1699  0FE4                     	;# 
  1700  0FE5                     	;# 
  1701  0FE6                     	;# 
  1702  0FE7                     	;# 
  1703  0FE8                     	;# 
  1704  0FE9                     	;# 
  1705  0FEA                     	;# 
  1706  0FEB                     	;# 
  1707  0FED                     	;# 
  1708  0FEE                     	;# 
  1709  0FEF                     	;# 
  1710  0000                     	;# 
  1711  0001                     	;# 
  1712  0002                     	;# 
  1713  0003                     	;# 
  1714  0004                     	;# 
  1715  0005                     	;# 
  1716  0006                     	;# 
  1717  0007                     	;# 
  1718  0008                     	;# 
  1719  0009                     	;# 
  1720  000A                     	;# 
  1721  000B                     	;# 
  1722  000C                     	;# 
  1723  000D                     	;# 
  1724  000E                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0015                     	;# 
  1729  0016                     	;# 
  1730  0016                     	;# 
  1731  0017                     	;# 
  1732  0018                     	;# 
  1733  0019                     	;# 
  1734  001A                     	;# 
  1735  001B                     	;# 
  1736  001C                     	;# 
  1737  008C                     	;# 
  1738  008D                     	;# 
  1739  008E                     	;# 
  1740  0090                     	;# 
  1741  0091                     	;# 
  1742  0092                     	;# 
  1743  0095                     	;# 
  1744  0096                     	;# 
  1745  0097                     	;# 
  1746  0099                     	;# 
  1747  009A                     	;# 
  1748  009B                     	;# 
  1749  009B                     	;# 
  1750  009C                     	;# 
  1751  009D                     	;# 
  1752  009E                     	;# 
  1753  010C                     	;# 
  1754  010D                     	;# 
  1755  010E                     	;# 
  1756  0116                     	;# 
  1757  0117                     	;# 
  1758  011D                     	;# 
  1759  018C                     	;# 
  1760  018D                     	;# 
  1761  018E                     	;# 
  1762  0191                     	;# 
  1763  0191                     	;# 
  1764  0192                     	;# 
  1765  0193                     	;# 
  1766  0193                     	;# 
  1767  0194                     	;# 
  1768  0195                     	;# 
  1769  0196                     	;# 
  1770  0197                     	;# 
  1771  0199                     	;# 
  1772  019A                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019C                     	;# 
  1778  019C                     	;# 
  1779  019D                     	;# 
  1780  019E                     	;# 
  1781  019F                     	;# 
  1782  020D                     	;# 
  1783  0210                     	;# 
  1784  0211                     	;# 
  1785  0211                     	;# 
  1786  0212                     	;# 
  1787  0212                     	;# 
  1788  0213                     	;# 
  1789  0213                     	;# 
  1790  0214                     	;# 
  1791  0214                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0216                     	;# 
  1796  0216                     	;# 
  1797  0217                     	;# 
  1798  0217                     	;# 
  1799  0291                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0293                     	;# 
  1803  0298                     	;# 
  1804  0298                     	;# 
  1805  0299                     	;# 
  1806  029A                     	;# 
  1807  0394                     	;# 
  1808  0395                     	;# 
  1809  0396                     	;# 
  1810  0FE4                     	;# 
  1811  0FE5                     	;# 
  1812  0FE6                     	;# 
  1813  0FE7                     	;# 
  1814  0FE8                     	;# 
  1815  0FE9                     	;# 
  1816  0FEA                     	;# 
  1817  0FEB                     	;# 
  1818  0FED                     	;# 
  1819  0FEE                     	;# 
  1820  0FEF                     	;# 
  1821  0000                     	;# 
  1822  0001                     	;# 
  1823  0002                     	;# 
  1824  0003                     	;# 
  1825  0004                     	;# 
  1826  0005                     	;# 
  1827  0006                     	;# 
  1828  0007                     	;# 
  1829  0008                     	;# 
  1830  0009                     	;# 
  1831  000A                     	;# 
  1832  000B                     	;# 
  1833  000C                     	;# 
  1834  000D                     	;# 
  1835  000E                     	;# 
  1836  0010                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0015                     	;# 
  1840  0016                     	;# 
  1841  0016                     	;# 
  1842  0017                     	;# 
  1843  0018                     	;# 
  1844  0019                     	;# 
  1845  001A                     	;# 
  1846  001B                     	;# 
  1847  001C                     	;# 
  1848  008C                     	;# 
  1849  008D                     	;# 
  1850  008E                     	;# 
  1851  0090                     	;# 
  1852  0091                     	;# 
  1853  0092                     	;# 
  1854  0095                     	;# 
  1855  0096                     	;# 
  1856  0097                     	;# 
  1857  0099                     	;# 
  1858  009A                     	;# 
  1859  009B                     	;# 
  1860  009B                     	;# 
  1861  009C                     	;# 
  1862  009D                     	;# 
  1863  009E                     	;# 
  1864  010C                     	;# 
  1865  010D                     	;# 
  1866  010E                     	;# 
  1867  0116                     	;# 
  1868  0117                     	;# 
  1869  011D                     	;# 
  1870  018C                     	;# 
  1871  018D                     	;# 
  1872  018E                     	;# 
  1873  0191                     	;# 
  1874  0191                     	;# 
  1875  0192                     	;# 
  1876  0193                     	;# 
  1877  0193                     	;# 
  1878  0194                     	;# 
  1879  0195                     	;# 
  1880  0196                     	;# 
  1881  0197                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019C                     	;# 
  1889  019C                     	;# 
  1890  019D                     	;# 
  1891  019E                     	;# 
  1892  019F                     	;# 
  1893  020D                     	;# 
  1894  0210                     	;# 
  1895  0211                     	;# 
  1896  0211                     	;# 
  1897  0212                     	;# 
  1898  0212                     	;# 
  1899  0213                     	;# 
  1900  0213                     	;# 
  1901  0214                     	;# 
  1902  0214                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0216                     	;# 
  1907  0216                     	;# 
  1908  0217                     	;# 
  1909  0217                     	;# 
  1910  0291                     	;# 
  1911  0291                     	;# 
  1912  0292                     	;# 
  1913  0293                     	;# 
  1914  0298                     	;# 
  1915  0298                     	;# 
  1916  0299                     	;# 
  1917  029A                     	;# 
  1918  0394                     	;# 
  1919  0395                     	;# 
  1920  0396                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932  0000                     	;# 
  1933  0001                     	;# 
  1934  0002                     	;# 
  1935  0003                     	;# 
  1936  0004                     	;# 
  1937  0005                     	;# 
  1938  0006                     	;# 
  1939  0007                     	;# 
  1940  0008                     	;# 
  1941  0009                     	;# 
  1942  000A                     	;# 
  1943  000B                     	;# 
  1944  000C                     	;# 
  1945  000D                     	;# 
  1946  000E                     	;# 
  1947  0010                     	;# 
  1948  0011                     	;# 
  1949  0012                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001C                     	;# 
  1959  008C                     	;# 
  1960  008D                     	;# 
  1961  008E                     	;# 
  1962  0090                     	;# 
  1963  0091                     	;# 
  1964  0092                     	;# 
  1965  0095                     	;# 
  1966  0096                     	;# 
  1967  0097                     	;# 
  1968  0099                     	;# 
  1969  009A                     	;# 
  1970  009B                     	;# 
  1971  009B                     	;# 
  1972  009C                     	;# 
  1973  009D                     	;# 
  1974  009E                     	;# 
  1975  010C                     	;# 
  1976  010D                     	;# 
  1977  010E                     	;# 
  1978  0116                     	;# 
  1979  0117                     	;# 
  1980  011D                     	;# 
  1981  018C                     	;# 
  1982  018D                     	;# 
  1983  018E                     	;# 
  1984  0191                     	;# 
  1985  0191                     	;# 
  1986  0192                     	;# 
  1987  0193                     	;# 
  1988  0193                     	;# 
  1989  0194                     	;# 
  1990  0195                     	;# 
  1991  0196                     	;# 
  1992  0197                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019C                     	;# 
  2000  019C                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019F                     	;# 
  2004  020D                     	;# 
  2005  0210                     	;# 
  2006  0211                     	;# 
  2007  0211                     	;# 
  2008  0212                     	;# 
  2009  0212                     	;# 
  2010  0213                     	;# 
  2011  0213                     	;# 
  2012  0214                     	;# 
  2013  0214                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0216                     	;# 
  2018  0216                     	;# 
  2019  0217                     	;# 
  2020  0217                     	;# 
  2021  0291                     	;# 
  2022  0291                     	;# 
  2023  0292                     	;# 
  2024  0293                     	;# 
  2025  0298                     	;# 
  2026  0298                     	;# 
  2027  0299                     	;# 
  2028  029A                     	;# 
  2029  0394                     	;# 
  2030  0395                     	;# 
  2031  0396                     	;# 
  2032  0FE4                     	;# 
  2033  0FE5                     	;# 
  2034  0FE6                     	;# 
  2035  0FE7                     	;# 
  2036  0FE8                     	;# 
  2037  0FE9                     	;# 
  2038  0FEA                     	;# 
  2039  0FEB                     	;# 
  2040  0FED                     	;# 
  2041  0FEE                     	;# 
  2042  0FEF                     	;# 
  2043  0000                     	;# 
  2044  0001                     	;# 
  2045  0002                     	;# 
  2046  0003                     	;# 
  2047  0004                     	;# 
  2048  0005                     	;# 
  2049  0006                     	;# 
  2050  0007                     	;# 
  2051  0008                     	;# 
  2052  0009                     	;# 
  2053  000A                     	;# 
  2054  000B                     	;# 
  2055  000C                     	;# 
  2056  000D                     	;# 
  2057  000E                     	;# 
  2058  0010                     	;# 
  2059  0011                     	;# 
  2060  0012                     	;# 
  2061  0015                     	;# 
  2062  0016                     	;# 
  2063  0016                     	;# 
  2064  0017                     	;# 
  2065  0018                     	;# 
  2066  0019                     	;# 
  2067  001A                     	;# 
  2068  001B                     	;# 
  2069  001C                     	;# 
  2070  008C                     	;# 
  2071  008D                     	;# 
  2072  008E                     	;# 
  2073  0090                     	;# 
  2074  0091                     	;# 
  2075  0092                     	;# 
  2076  0095                     	;# 
  2077  0096                     	;# 
  2078  0097                     	;# 
  2079  0099                     	;# 
  2080  009A                     	;# 
  2081  009B                     	;# 
  2082  009B                     	;# 
  2083  009C                     	;# 
  2084  009D                     	;# 
  2085  009E                     	;# 
  2086  010C                     	;# 
  2087  010D                     	;# 
  2088  010E                     	;# 
  2089  0116                     	;# 
  2090  0117                     	;# 
  2091  011D                     	;# 
  2092  018C                     	;# 
  2093  018D                     	;# 
  2094  018E                     	;# 
  2095  0191                     	;# 
  2096  0191                     	;# 
  2097  0192                     	;# 
  2098  0193                     	;# 
  2099  0193                     	;# 
  2100  0194                     	;# 
  2101  0195                     	;# 
  2102  0196                     	;# 
  2103  0197                     	;# 
  2104  0199                     	;# 
  2105  019A                     	;# 
  2106  019B                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019C                     	;# 
  2111  019C                     	;# 
  2112  019D                     	;# 
  2113  019E                     	;# 
  2114  019F                     	;# 
  2115  020D                     	;# 
  2116  0210                     	;# 
  2117  0211                     	;# 
  2118  0211                     	;# 
  2119  0212                     	;# 
  2120  0212                     	;# 
  2121  0213                     	;# 
  2122  0213                     	;# 
  2123  0214                     	;# 
  2124  0214                     	;# 
  2125  0215                     	;# 
  2126  0215                     	;# 
  2127  0215                     	;# 
  2128  0216                     	;# 
  2129  0216                     	;# 
  2130  0217                     	;# 
  2131  0217                     	;# 
  2132  0291                     	;# 
  2133  0291                     	;# 
  2134  0292                     	;# 
  2135  0293                     	;# 
  2136  0298                     	;# 
  2137  0298                     	;# 
  2138  0299                     	;# 
  2139  029A                     	;# 
  2140  0394                     	;# 
  2141  0395                     	;# 
  2142  0396                     	;# 
  2143  0FE4                     	;# 
  2144  0FE5                     	;# 
  2145  0FE6                     	;# 
  2146  0FE7                     	;# 
  2147  0FE8                     	;# 
  2148  0FE9                     	;# 
  2149  0FEA                     	;# 
  2150  0FEB                     	;# 
  2151  0FED                     	;# 
  2152  0FEE                     	;# 
  2153  0FEF                     	;# 
  2154                           
  2155                           	psect	idataBANK4
  2156  1FBE                     __pidataBANK4:	
  2157                           
  2158                           ;initializer for __product
  2159  1FBE  3463               	retlw	99
  2160  1FBF  3402               	retlw	2
  2161  1FC0  3400               	retlw	0
  2162  1FC1  3400               	retlw	0
  2163  1FC2  3400               	retlw	0
  2164  1FC3  3400               	retlw	0
  2165  1FC4  3400               	retlw	0
  2166  1FC5  3400               	retlw	0
  2167  1FC6  3400               	retlw	0
  2168  1FC7  3400               	retlw	0
  2169  1FC8  3400               	retlw	0
  2170  1FC9  3400               	retlw	0
  2171  1FCA  34FF               	retlw	255
  2172  1FCB  34FF               	retlw	255
  2173  1FCC  34FF               	retlw	255
  2174  1FCD  3400               	retlw	0
  2175  1FCE  3400               	retlw	0
  2176  1FCF  3400               	retlw	0
  2177  1FD0  3400               	retlw	0
  2178  1FD1  3400               	retlw	0
  2179  1FD2  3400               	retlw	0
  2180  1FD3  3400               	retlw	0
  2181  1FD4  3400               	retlw	0
  2182  1FD5  3400               	retlw	0
  2183  1FD6  3400               	retlw	0
  2184  1FD7  3400               	retlw	0
  2185  1FD8  3400               	retlw	0
  2186  1FD9  3400               	retlw	0
  2187  1FDA  3400               	retlw	0
  2188  1FDB  3400               	retlw	0
  2189  1FDC  3400               	retlw	0
  2190  1FDD  3400               	retlw	0
  2191                           
  2192                           	psect	stringtext
  2193  1000                     __pstringtext:	
  2194  1000                     _CC2500_registers_address:	
  2195  1000  3403               	retlw	3
  2196  1001  3416               	retlw	22
  2197  1002  3417               	retlw	23
  2198  1003  341E               	retlw	30
  2199  1004  341F               	retlw	31
  2200  1005  3420               	retlw	32
  2201  1006  342A               	retlw	42
  2202  1007  342B               	retlw	43
  2203  1008  340B               	retlw	11
  2204  1009  340C               	retlw	12
  2205  100A  340D               	retlw	13
  2206  100B  340E               	retlw	14
  2207  100C  340F               	retlw	15
  2208  100D  3410               	retlw	16
  2209  100E  3411               	retlw	17
  2210  100F  3412               	retlw	18
  2211  1010  3413               	retlw	19
  2212  1011  3414               	retlw	20
  2213  1012  340A               	retlw	10
  2214  1013  3415               	retlw	21
  2215  1014  3421               	retlw	33
  2216  1015  3422               	retlw	34
  2217  1016  3418               	retlw	24
  2218  1017  3419               	retlw	25
  2219  1018  341A               	retlw	26
  2220  1019  341B               	retlw	27
  2221  101A  341C               	retlw	28
  2222  101B  341D               	retlw	29
  2223  101C  3423               	retlw	35
  2224  101D  3424               	retlw	36
  2225  101E  3425               	retlw	37
  2226  101F  3426               	retlw	38
  2227  1020  3429               	retlw	41
  2228  1021  342C               	retlw	44
  2229  1022  342D               	retlw	45
  2230  1023  342E               	retlw	46
  2231  1024  3400               	retlw	0
  2232  1025  3401               	retlw	1
  2233  1026  3402               	retlw	2
  2234  1027  3407               	retlw	7
  2235  1028  3408               	retlw	8
  2236  1029  3409               	retlw	9
  2237  102A  3406               	retlw	6
  2238  102B  3404               	retlw	4
  2239  102C  3405               	retlw	5
  2240  102D  3427               	retlw	39
  2241  102E  3428               	retlw	40
  2242  102F                     __end_of_CC2500_registers_address:	
  2243  102F                     _CC2500_rfSettings:	
  2244  102F  3407               	retlw	7
  2245  1030  3407               	retlw	7
  2246  1031  3430               	retlw	48
  2247  1032  3487               	retlw	135
  2248  1033  346B               	retlw	107
  2249  1034  34F8               	retlw	248
  2250  1035  347F               	retlw	127
  2251  1036  343F               	retlw	63
  2252  1037  3409               	retlw	9
  2253  1038  3400               	retlw	0
  2254  1039  345C               	retlw	92
  2255  103A  34A7               	retlw	167
  2256  103B  3462               	retlw	98
  2257  103C  3486               	retlw	134
  2258  103D  3483               	retlw	131
  2259  103E  3403               	retlw	3
  2260  103F  3422               	retlw	34
  2261  1040  34F8               	retlw	248
  2262  1041  3400               	retlw	0
  2263  1042  3444               	retlw	68
  2264  1043  34B6               	retlw	182
  2265  1044  3410               	retlw	16
  2266  1045  3418               	retlw	24
  2267  1046  341D               	retlw	29
  2268  1047  341C               	retlw	28
  2269  1048  34C7               	retlw	199
  2270  1049  3400               	retlw	0
  2271  104A  34B2               	retlw	178
  2272  104B  34EA               	retlw	234
  2273  104C  340A               	retlw	10
  2274  104D  3400               	retlw	0
  2275  104E  3411               	retlw	17
  2276  104F  3459               	retlw	89
  2277  1050  3488               	retlw	136
  2278  1051  3431               	retlw	49
  2279  1052  340B               	retlw	11
  2280  1053  342F               	retlw	47
  2281  1054  342E               	retlw	46
  2282  1055  3406               	retlw	6
  2283  1056  3404               	retlw	4
  2284  1057  3405               	retlw	5
  2285  1058  3400               	retlw	0
  2286  1059  3430               	retlw	48
  2287  105A  34D3               	retlw	211
  2288  105B  3491               	retlw	145
  2289  105C  3441               	retlw	65
  2290  105D  3400               	retlw	0
  2291  105E                     __end_of_CC2500_rfSettings:	
  2292  105E                     _CC2500_patable_vaule:	
  2293  105E  34FE               	retlw	254
  2294  105F  34FE               	retlw	254
  2295  1060  34FE               	retlw	254
  2296  1061  34FE               	retlw	254
  2297  1062  34FE               	retlw	254
  2298  1063  34FE               	retlw	254
  2299  1064  34FE               	retlw	254
  2300  1065  34FE               	retlw	254
  2301  1066                     __end_of_CC2500_patable_vaule:	
  2302                           
  2303                           	psect	nvCOMMON
  2304  0079                     __pnvCOMMON:	
  2305  0079                     _product:	
  2306  0079                     	ds	1
  2307  000C                     _PORTA	set	12
  2308  000D                     _PORTB	set	13
  2309  000E                     _PORTC	set	14
  2310  0018                     _T1CON	set	24
  2311  0017                     _TMR1H	set	23
  2312  0016                     _TMR1L	set	22
  2313  005F                     _GIE	set	95
  2314  005B                     _IOCIE	set	91
  2315  0058                     _IOCIF	set	88
  2316  005E                     _PEIE	set	94
  2317  0060                     _RA0	set	96
  2318  0064                     _RA4	set	100
  2319  0066                     _RA6	set	102
  2320  0067                     _RA7	set	103
  2321  0068                     _RB0	set	104
  2322  0069                     _RB1	set	105
  2323  006A                     _RB2	set	106
  2324  006B                     _RB3	set	107
  2325  006D                     _RB5	set	109
  2326  0070                     _RC0	set	112
  2327  0071                     _RC1	set	113
  2328  0073                     _RC3	set	115
  2329  0074                     _RC4	set	116
  2330  0075                     _RC5	set	117
  2331  0088                     _TMR1IF	set	136
  2332  009D                     _ADCON0	set	157
  2333  009E                     _ADCON1	set	158
  2334  009C                     _ADRESH	set	156
  2335  009B                     _ADRESL	set	155
  2336  0099                     _OSCCON	set	153
  2337  008C                     _TRISA	set	140
  2338  008D                     _TRISB	set	141
  2339  008E                     _TRISC	set	142
  2340  0097                     _WDTCON	set	151
  2341  04E9                     _GO_nDONE	set	1257
  2342  0488                     _TMR1IE	set	1160
  2343  0117                     _FVRCON	set	279
  2344  010C                     _LATA	set	268
  2345  010D                     _LATB	set	269
  2346  010E                     _LATC	set	270
  2347  018C                     _ANSELA	set	396
  2348  018D                     _ANSELB	set	397
  2349  018E                     _ANSELC	set	398
  2350  0192                     _PMADRH	set	402
  2351  0191                     _PMADRL	set	401
  2352  0196                     _PMCON2	set	406
  2353  0194                     _PMDATH	set	404
  2354  0193                     _PMDATL	set	403
  2355  0CAE                     _CFGS	set	3246
  2356  0CAC                     _FREE	set	3244
  2357  0CAD                     _LWLO	set	3245
  2358  0CA8                     _RD	set	3240
  2359  0CA9                     _WR	set	3241
  2360  0CAA                     _WREN	set	3242
  2361  1069                     _WPUB1	set	4201
  2362  106A                     _WPUB2	set	4202
  2363  0396                     _IOCBF	set	918
  2364  0395                     _IOCBN	set	917
  2365  0394                     _IOCBP	set	916
  2366  1CB2                     _IOCBF2	set	7346
  2367                           
  2368                           ; #config settings
  2369  0000                     
  2370                           	psect	cinit
  2371  0015                     start_initialization:	
  2372  0015                     __initialization:	
  2373                           
  2374                           ; Clear objects allocated to BITCOMMON
  2375  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2376                           
  2377                           ; Clear objects allocated to COMMON
  2378  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2379  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2380  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2381                           
  2382                           ; Clear objects allocated to BANK1
  2383  0019  30A0               	movlw	low __pbssBANK1
  2384  001A  0084               	movwf	4
  2385  001B  3000               	movlw	high __pbssBANK1
  2386  001C  0085               	movwf	5
  2387  001D  3049               	movlw	73
  2388  001E  319C  248E  3180   	fcall	clear_ram0
  2389                           
  2390                           ; Clear objects allocated to BANK2
  2391  0021  3020               	movlw	low __pbssBANK2
  2392  0022  0084               	movwf	4
  2393  0023  3001               	movlw	high __pbssBANK2
  2394  0024  0085               	movwf	5
  2395  0025  304E               	movlw	78
  2396  0026  319C  248E  3180   	fcall	clear_ram0
  2397                           
  2398                           ; Clear objects allocated to BANK3
  2399  0029  30A0               	movlw	low __pbssBANK3
  2400  002A  0084               	movwf	4
  2401  002B  3001               	movlw	high __pbssBANK3
  2402  002C  0085               	movwf	5
  2403  002D  304C               	movlw	76
  2404  002E  319C  248E  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Initialize objects allocated to BANK4
  2407  0031  30BE               	movlw	low __pidataBANK4
  2408  0032  0084               	movwf	4
  2409  0033  309F               	movlw	(high __pidataBANK4)| (0+128)
  2410  0034  0085               	movwf	5
  2411  0035  3020               	movlw	low __pdataBANK4
  2412  0036  0086               	movwf	6
  2413  0037  3002               	movlw	high __pdataBANK4
  2414  0038  0087               	movwf	7
  2415  0039  3020               	movlw	32
  2416  003A  319C  2488         	fcall	init_ram
  2417  003C                     end_of_initialization:	
  2418                           ;End of C runtime variable initialization code
  2419                           
  2420  003C                     __end_of__initialization:	
  2421  003C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2422  003D  0020               	movlb	0
  2423  003E  3188  28C3         	ljmp	_main	;jump to C main() function
  2424                           
  2425                           	psect	bitbssCOMMON
  2426  03C0                     __pbitbssCOMMON:	
  2427  03C0                     _Receive_OK:	
  2428  03C0                     	ds	1
  2429  03C1                     _Transceive_OK:	
  2430  03C1                     	ds	1
  2431                           
  2432                           	psect	bssCOMMON
  2433  0075                     __pbssCOMMON:	
  2434  0075                     _DimmerLights:	
  2435  0075                     	ds	1
  2436  0076                     _DimmerLightsIntr:	
  2437  0076                     	ds	1
  2438  0077                     _Sw:	
  2439  0077                     	ds	1
  2440                           
  2441                           	psect	bssBANK1
  2442  00A0                     __pbssBANK1:	
  2443  00A0                     _myMain:	
  2444  00A0                     	ds	14
  2445  00AE                     _Buz1:	
  2446  00AE                     	ds	12
  2447  00BA                     _RF1:	
  2448  00BA                     	ds	12
  2449  00C6                     _RF_Count:	
  2450  00C6                     	ds	2
  2451  00C8                     _WDT:	
  2452  00C8                     	ds	2
  2453  00CA                     _CRC:	
  2454  00CA                     	ds	1
  2455  00CB                     _DelayOff:	
  2456  00CB                     	ds	1
  2457  00CC                     _DimmerLights11:	
  2458  00CC                     	ds	1
  2459  00CD                     _DimmerLightsIntrIOC:	
  2460  00CD                     	ds	1
  2461  00CE                     _LED:	
  2462  00CE                     	ds	1
  2463  00CF                     _RSSI:	
  2464  00CF                     	ds	1
  2465  00D0                     _Rx_Length:	
  2466  00D0                     	ds	1
  2467  00D1                     _SPI0Buffer:	
  2468  00D1                     	ds	1
  2469  00D2                     _SwDetect:	
  2470  00D2                     	ds	1
  2471  00D3                     _Tx_Length:	
  2472  00D3                     	ds	1
  2473  00D4                     _r_address:	
  2474  00D4                     	ds	1
  2475  00D5                     _r_data:	
  2476  00D5                     	ds	1
  2477  00D6                     _s_data:	
  2478  00D6                     	ds	1
  2479  00D7                     _Temp:	
  2480  00D7                     	ds	18
  2481                           
  2482                           	psect	bssBANK2
  2483  0120                     __pbssBANK2:	
  2484  0120                     _Dimmer:	
  2485  0120                     	ds	3
  2486  0123                     _Timer1:	
  2487  0123                     	ds	3
  2488  0126                     _Load:	
  2489  0126                     	ds	46
  2490  0154                     _DimmerLights1:	
  2491  0154                     	ds	17
  2492  0165                     _DlySw1:	
  2493  0165                     	ds	5
  2494  016A                     _VarErrLED:	
  2495  016A                     	ds	4
  2496                           
  2497                           	psect	bssBANK3
  2498  01A0                     __pbssBANK3:	
  2499  01A0                     _RF_Data:	
  2500  01A0                     	ds	30
  2501  01BE                     _Memory:	
  2502  01BE                     	ds	37
  2503  01E3                     _Sw1:	
  2504  01E3                     	ds	9
  2505                           
  2506                           	psect	dataBANK4
  2507  0220                     __pdataBANK4:	
  2508  0220                     __product:	
  2509  0220                     	ds	32
  2510                           
  2511                           	psect	clrtext
  2512  1C8E                     clear_ram0:	
  2513                           ;	Called with FSR0 containing the base address, and
  2514                           ;	WREG with the size to clear
  2515                           
  2516  1C8E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2517  1C8F                     clrloop0:	
  2518  1C8F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2519  1C90  3101               	addfsr 0,1
  2520  1C91  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2521  1C92  2C8F               	goto	clrloop0	;have we reached the end yet?
  2522  1C93  3400               	retlw	0	;all done for this memory range, return
  2523                           
  2524                           	psect	inittext
  2525  1C88                     init_ram:	
  2526  1C88  00FE               	movwf	126
  2527  1C89                     initloop:	
  2528  1C89  0012               	moviw fsr0++
  2529  1C8A  001E               	movwi fsr1++
  2530  1C8B  0BFE               	decfsz	126,f
  2531  1C8C  2C89               	goto	initloop
  2532  1C8D  3400               	retlw	0
  2533                           
  2534                           	psect	cstackBANK4
  2535  0240                     __pcstackBANK4:	
  2536  0240                     ?_main:	
  2537  0240                     main@argc:	
  2538                           ; 2 bytes @ 0x0
  2539                           
  2540                           
  2541                           ; 2 bytes @ 0x0
  2542  0240                     	ds	2
  2543  0242                     main@argv:	
  2544                           
  2545                           ; 2 bytes @ 0x2
  2546  0242                     	ds	2
  2547                           
  2548                           	psect	cstackBANK3
  2549  01EC                     __pcstackBANK3:	
  2550  01EC                     setRF_Main@loop_f:	
  2551                           
  2552                           ; 1 bytes @ 0x0
  2553  01EC                     	ds	1
  2554  01ED                     setRF_Main@Receive_OK:	
  2555                           
  2556                           ; 1 bytes @ 0x1
  2557  01ED                     	ds	1
  2558  01EE                     setRF_Main@error:	
  2559                           
  2560                           ; 1 bytes @ 0x2
  2561  01EE                     	ds	1
  2562                           
  2563                           	psect	cstackBANK1
  2564  00E9                     __pcstackBANK1:	
  2565  00E9                     setDimmerLights_ErrorClose@count:	
  2566  00E9                     Exception_Main@count:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569                           
  2570                           ; 1 bytes @ 0x0
  2571  00E9                     	ds	1
  2572  00EA                     setDimmerLights_ErrorClose@lights:	
  2573  00EA                     Exception_Main@error:	
  2574                           ; 1 bytes @ 0x1
  2575                           
  2576                           
  2577                           ; 1 bytes @ 0x1
  2578  00EA                     	ds	1
  2579  00EB                     Exception_Main@lights:	
  2580  00EB                     setDimmerLights_ErrorClose@i:	
  2581                           ; 1 bytes @ 0x2
  2582                           
  2583                           
  2584                           ; 2 bytes @ 0x2
  2585  00EB                     	ds	1
  2586  00EC                     Exception_Main@i:	
  2587                           
  2588                           ; 2 bytes @ 0x3
  2589  00EC                     	ds	1
  2590  00ED                     getRxData@error:	
  2591                           
  2592                           ; 1 bytes @ 0x4
  2593  00ED                     	ds	1
  2594  00EE                     ??_setRF_Main:	
  2595                           
  2596                           ; 0 bytes @ 0x5
  2597  00EE                     	ds	1
  2598                           
  2599                           	psect	cstackCOMMON
  2600  0070                     __pcstackCOMMON:	
  2601  0070                     ?_Timeout_Counter:	
  2602  0070                     ?_set_TimeoutCleared:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_WriteByte:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_WriteCommand:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_ReadStatus:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_ReadByte:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_PowerRST:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_InitSetREG:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_InitPATable:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_ClearTXFIFO:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_ClearRXFIFO:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_FrequencyCabr:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_SIDLEMode:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DlyOff_Initialization:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_DlyOff_Main:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setDimmerLights_ErrorClose:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_Line:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setTxData:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setLED_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setLED_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Fosc_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_IO_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_TMR1_Set:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_ADC_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IOC_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_WDT_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_IOC_ISR:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_TMR1_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Flash_Memory_Write:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Flash_Memory_Modify:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_WDT_Clearing:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_myMain_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Temp_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Load_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Switch_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_RF_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_getLoad_AD:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_getTemp_AD:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_my_MainTimer:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Temp_Main:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Load_Main:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_Switch_Main:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_RF_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Exception_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setLoad_AH_AL_Restore:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setTemp_Initialization:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setTemp_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setRF_Initialization:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setRF_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_RF_RxDisable:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_getRxData:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setLog_Code:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setControl_Lights_Table:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setRFSW_Control:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setRFSW_AdjControl:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setRF_DimmerValue:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setSw_Initialization:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setSw_Main:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_Buzzer_Initialization:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_Buzzer_Main:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_CC2500_TxData:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_CC2500_RxData:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_CC2500_PowerOnInitial:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DelayOffPointSelect:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DelayOff_Initialization:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DelayOff_Main:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DimmerIntrIOCPointSelect:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ??_DimmerIntrIOCPointSelect:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerIntrPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ??_DimmerIntrPointSelect:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_setDimmerLights_IntrControl:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerLightsPointSelect:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_Initialization:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerLights_SwOn:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_setDimmerLights_SwOff:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_setDimmerLights_AdjOn:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_Main:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setDimmerLights_AdjRF:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_LedPointSelect:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_LED_Initialization:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_LED_Main:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Mcu_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_ISR:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_setDimmerReClock:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Flash_Memory_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Flash_Memory_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Flash_Memory_Unlock:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Erasing:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_setMemory_Modify:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_setMemory_LoopSave:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_WDT_Main:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setRF_Learn:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_TouchPower:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_SwPointSelect:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_DelayTimejudge:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerLights_Allow_Condition:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_setPercentValue:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getPercentValue:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_Flash_Memory_Read:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getMain_LightsStatus:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getRF_KeyStatus:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getSw_KeyStatus:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getDelayOff_GO:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getDimmerLights_Line:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getDimmerLights_Status:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getAll_DimmerLights_AdjGO:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmer_LoadOK:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getMain_All_Error_Status:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getMain_Lights_Count:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getMain_LoadOK:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     getDimmerLights_Allow_Condition@lights:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     getAll_DimmerLights_AdjGO@sw:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     getSw_KeyStatus@sw:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947                           
  2948                           ; 1 bytes @ 0x0
  2949  0070                     	ds	1
  2950  0071                     DimmerIntrIOCPointSelect@lights:	
  2951  0071                     DimmerIntrPointSelect@lights:	
  2952                           ; 1 bytes @ 0x1
  2953                           
  2954                           
  2955                           ; 1 bytes @ 0x1
  2956  0071                     	ds	1
  2957  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2958  0072                     ??_setDimmerLights_IntrControl:	
  2959                           ; 0 bytes @ 0x2
  2960                           
  2961  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2962                           ; 0 bytes @ 0x2
  2963                           
  2964                           
  2965                           ; 1 bytes @ 0x2
  2966  0072                     	ds	1
  2967  0073                     ??_IOC_ISR:	
  2968  0073                     ??_setDimmerReClock:	
  2969                           ; 0 bytes @ 0x3
  2970                           
  2971  0073                     setDimmerLights_IntrControl@lights:	
  2972                           ; 0 bytes @ 0x3
  2973                           
  2974                           
  2975                           ; 1 bytes @ 0x3
  2976  0073                     	ds	1
  2977  0074                     ??_TMR1_ISR:	
  2978  0074                     ??_ISR:	
  2979                           ; 0 bytes @ 0x4
  2980                           
  2981                           
  2982                           ; 0 bytes @ 0x4
  2983  0074                     	ds	1
  2984                           
  2985                           	psect	cstackBANK0
  2986  0020                     __pcstackBANK0:	
  2987  0020                     ??_Timeout_Counter:	
  2988  0020                     ??_set_TimeoutCleared:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_CC2500_WriteByte:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_CC2500_ReadByte:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ?_DelayTime_1us:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_getDimmerLights_Allow_Condition:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_setDimmerLights_Line:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_setTxData:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_Fosc_Set:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_IO_Set:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_TMR1_Set:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_ADC_Set:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_IOC_Set:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_WDT_Set:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_Flash_Memory_Read:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ?_setMemory_Data:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_Flash_Memory_Write:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_WDT_Clearing:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_myMain_Initialization:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_Temp_Initialization:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_setLoad_AH_AL_Restore:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_setTemp_Initialization:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_setRF_Initialization:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_getRF_KeyStatus:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_getSw_KeyStatus:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_Buzzer_Initialization:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_Buzzer_Main:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_DelayOffPointSelect:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_DimmerLightsPointSelect:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_getDimmerLights_Line:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_getAll_DimmerLights_AdjGO:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_getDimmer_LoadOK:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_LedPointSelect:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_Flash_Memory_Unlock:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_Flash_Memory_Erasing:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_setMemory_Modify:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_setMemory_LoopSave:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_WDT_Main:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_getMain_All_Error_Status:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_getMain_Lights_Count:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_setRF_Learn:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_TouchPower:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_SwPointSelect:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ?___bmul:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ?_getBuz_GO:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120  0020                     ?_getAD:	
  3121                           ; 2 bytes @ 0x0
  3122                           
  3123  0020                     ?___awdiv:	
  3124                           ; 2 bytes @ 0x0
  3125                           
  3126  0020                     ?___lwdiv:	
  3127                           ; 2 bytes @ 0x0
  3128                           
  3129  0020                     ?___ftpack:	
  3130                           ; 2 bytes @ 0x0
  3131                           
  3132  0020                     getDimmerLights_Allow_Condition@allow:	
  3133                           ; 3 bytes @ 0x0
  3134                           
  3135  0020                     setDimmerLights_Line@lights:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138  0020                     getDimmerLights_Line@line:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144  0020                     getDimmer_LoadOK@status:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0020                     getAD@adcon1:	
  3148                           ; 1 bytes @ 0x0
  3149                           
  3150  0020                     setMemory_Data@data:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0020                     getMain_Lights_Count@count:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0020                     ___bmul@multiplicand:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0020                     DelayTime_1us@count:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0020                     ___awdiv@divisor:	
  3163                           ; 2 bytes @ 0x0
  3164                           
  3165  0020                     ___lwdiv@divisor:	
  3166                           ; 2 bytes @ 0x0
  3167                           
  3168  0020                     ___ftpack@arg:	
  3169                           ; 2 bytes @ 0x0
  3170                           
  3171                           
  3172                           ; 3 bytes @ 0x0
  3173  0020                     	ds	1
  3174  0021                     ??_setMemory_Data:	
  3175  0021                     ??_RF_Initialization:	
  3176                           ; 0 bytes @ 0x1
  3177                           
  3178  0021                     ??_Mcu_Initialization:	
  3179                           ; 0 bytes @ 0x1
  3180                           
  3181  0021                     ??_getMain_LoadOK:	
  3182                           ; 0 bytes @ 0x1
  3183                           
  3184  0021                     ??___bmul:	
  3185                           ; 0 bytes @ 0x1
  3186                           
  3187  0021                     CC2500_WriteByte@loop_a:	
  3188                           ; 0 bytes @ 0x1
  3189                           
  3190  0021                     CC2500_ReadByte@loop_b:	
  3191                           ; 1 bytes @ 0x1
  3192                           
  3193  0021                     DelayOffPointSelect@sw:	
  3194                           ; 1 bytes @ 0x1
  3195                           
  3196  0021                     DimmerLightsPointSelect@lights:	
  3197                           ; 1 bytes @ 0x1
  3198                           
  3199  0021                     LedPointSelect@led:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0021                     Flash_Memory_Read@i:	
  3203                           ; 1 bytes @ 0x1
  3204                           
  3205  0021                     Flash_Memory_Write@i:	
  3206                           ; 1 bytes @ 0x1
  3207                           
  3208  0021                     setMemory_Modify@command:	
  3209                           ; 1 bytes @ 0x1
  3210                           
  3211  0021                     setMemory_LoopSave@command:	
  3212                           ; 1 bytes @ 0x1
  3213                           
  3214  0021                     getMain_Lights_Count@status2:	
  3215                           ; 1 bytes @ 0x1
  3216                           
  3217  0021                     setLoad_AH_AL_Restore@i:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220  0021                     setRF_Learn@command:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223  0021                     getRF_KeyStatus@key:	
  3224                           ; 1 bytes @ 0x1
  3225                           
  3226  0021                     SwPointSelect@sw:	
  3227                           ; 1 bytes @ 0x1
  3228                           
  3229  0021                     getSw_KeyStatus@status:	
  3230                           ; 1 bytes @ 0x1
  3231                           
  3232  0021                     _getMain_All_Error_Status$3416:	
  3233                           ; 1 bytes @ 0x1
  3234                           
  3235                           
  3236                           ; 2 bytes @ 0x1
  3237  0021                     	ds	1
  3238  0022                     ??_CC2500_WriteCommand:	
  3239  0022                     ??_CC2500_ReadStatus:	
  3240                           ; 0 bytes @ 0x2
  3241                           
  3242  0022                     ??_DelayTime_1us:	
  3243                           ; 0 bytes @ 0x2
  3244                           
  3245  0022                     ?_CC2500_WriteREG:	
  3246                           ; 0 bytes @ 0x2
  3247                           
  3248  0022                     ??_DlyOff_Initialization:	
  3249                           ; 0 bytes @ 0x2
  3250                           
  3251  0022                     ??_setDimmerLights_Initialization:	
  3252                           ; 0 bytes @ 0x2
  3253                           
  3254  0022                     ?_setLED:	
  3255                           ; 0 bytes @ 0x2
  3256                           
  3257  0022                     ??_setLED_Main:	
  3258                           ; 0 bytes @ 0x2
  3259                           
  3260  0022                     ??_Load_Initialization:	
  3261                           ; 0 bytes @ 0x2
  3262                           
  3263  0022                     ??_getBuz_GO:	
  3264                           ; 0 bytes @ 0x2
  3265                           
  3266  0022                     ??_getDelayOff_GO:	
  3267                           ; 0 bytes @ 0x2
  3268                           
  3269  0022                     ??_setDimmerLights_AdjOn:	
  3270                           ; 0 bytes @ 0x2
  3271                           
  3272  0022                     ??_getDimmerLights_Status:	
  3273                           ; 0 bytes @ 0x2
  3274                           
  3275  0022                     CC2500_WriteREG@value:	
  3276                           ; 0 bytes @ 0x2
  3277                           
  3278  0022                     DlyOff_Initialization@sw:	
  3279                           ; 1 bytes @ 0x2
  3280                           
  3281  0022                     getDelayOff_GO@sw:	
  3282                           ; 1 bytes @ 0x2
  3283                           
  3284  0022                     setDimmerLights_AdjOn@sw:	
  3285                           ; 1 bytes @ 0x2
  3286                           
  3287  0022                     getDimmerLights_Status@lights:	
  3288                           ; 1 bytes @ 0x2
  3289                           
  3290  0022                     setLED@command:	
  3291                           ; 1 bytes @ 0x2
  3292                           
  3293  0022                     Flash_Memory_Read@address:	
  3294                           ; 1 bytes @ 0x2
  3295                           
  3296  0022                     setMemory_Data@address:	
  3297                           ; 1 bytes @ 0x2
  3298                           
  3299  0022                     getMain_Lights_Count@status3:	
  3300                           ; 1 bytes @ 0x2
  3301                           
  3302  0022                     getMain_LoadOK@ok:	
  3303                           ; 1 bytes @ 0x2
  3304                           
  3305  0022                     _getRF_KeyStatus$5042:	
  3306                           ; 1 bytes @ 0x2
  3307                           
  3308  0022                     _getSw_KeyStatus$6010:	
  3309                           ; 1 bytes @ 0x2
  3310                           
  3311  0022                     ___bmul@product:	
  3312                           ; 1 bytes @ 0x2
  3313                           
  3314  0022                     DelayTime_1us@i:	
  3315                           ; 1 bytes @ 0x2
  3316                           
  3317  0022                     ___awdiv@dividend:	
  3318                           ; 2 bytes @ 0x2
  3319                           
  3320  0022                     ___lwdiv@dividend:	
  3321                           ; 2 bytes @ 0x2
  3322                           
  3323                           
  3324                           ; 2 bytes @ 0x2
  3325  0022                     	ds	1
  3326  0023                     ??_CC2500_WriteREG:	
  3327  0023                     ??_setLED:	
  3328                           ; 0 bytes @ 0x3
  3329                           
  3330  0023                     ??_DelayOff_Initialization:	
  3331                           ; 0 bytes @ 0x3
  3332                           
  3333  0023                     ??_getAD:	
  3334                           ; 0 bytes @ 0x3
  3335                           
  3336  0023                     CC2500_WriteCommand@command:	
  3337                           ; 0 bytes @ 0x3
  3338                           
  3339  0023                     CC2500_ReadStatus@status_addr:	
  3340                           ; 1 bytes @ 0x3
  3341                           
  3342  0023                     getDelayOff_GO@go:	
  3343                           ; 1 bytes @ 0x3
  3344                           
  3345  0023                     setDimmerLights_Initialization@lights:	
  3346                           ; 1 bytes @ 0x3
  3347                           
  3348  0023                     getDimmerLights_Status@status:	
  3349                           ; 1 bytes @ 0x3
  3350                           
  3351  0023                     setLED@led:	
  3352                           ; 1 bytes @ 0x3
  3353                           
  3354  0023                     getAD@adcon0:	
  3355                           ; 1 bytes @ 0x3
  3356                           
  3357  0023                     Flash_Memory_Read@ret:	
  3358                           ; 1 bytes @ 0x3
  3359                           
  3360  0023                     getMain_Lights_Count@status1:	
  3361                           ; 1 bytes @ 0x3
  3362                           
  3363  0023                     ___bmul@multiplier:	
  3364                           ; 1 bytes @ 0x3
  3365                           
  3366  0023                     ___ftpack@exp:	
  3367                           ; 1 bytes @ 0x3
  3368                           
  3369  0023                     _getMain_All_Error_Status$3417:	
  3370                           ; 1 bytes @ 0x3
  3371                           
  3372                           
  3373                           ; 2 bytes @ 0x3
  3374  0023                     	ds	1
  3375  0024                     ??_CC2500_ClearTXFIFO:	
  3376  0024                     ??_CC2500_ClearRXFIFO:	
  3377                           ; 0 bytes @ 0x4
  3378                           
  3379  0024                     ??_CC2500_SIDLEMode:	
  3380                           ; 0 bytes @ 0x4
  3381                           
  3382  0024                     ??_DelayTimejudge:	
  3383                           ; 0 bytes @ 0x4
  3384                           
  3385  0024                     ??_setLED_Initialization:	
  3386                           ; 0 bytes @ 0x4
  3387                           
  3388  0024                     ??_getMain_LightsStatus:	
  3389                           ; 0 bytes @ 0x4
  3390                           
  3391  0024                     ??_Flash_Memory_Modify:	
  3392                           ; 0 bytes @ 0x4
  3393                           
  3394  0024                     ??_getLoad_AD:	
  3395                           ; 0 bytes @ 0x4
  3396                           
  3397  0024                     ??_getTemp_AD:	
  3398                           ; 0 bytes @ 0x4
  3399                           
  3400  0024                     ??_RF_RxDisable:	
  3401                           ; 0 bytes @ 0x4
  3402                           
  3403  0024                     ??_setSw_Initialization:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0024                     ??_CC2500_TxData:	
  3407                           ; 0 bytes @ 0x4
  3408                           
  3409  0024                     ??_CC2500_RxData:	
  3410                           ; 0 bytes @ 0x4
  3411                           
  3412  0024                     ??_DimmerLights_Initialization:	
  3413                           ; 0 bytes @ 0x4
  3414                           
  3415  0024                     ??___awdiv:	
  3416                           ; 0 bytes @ 0x4
  3417                           
  3418  0024                     ??___lwdiv:	
  3419                           ; 0 bytes @ 0x4
  3420                           
  3421  0024                     CC2500_WriteREG@w_addr:	
  3422                           ; 0 bytes @ 0x4
  3423                           
  3424  0024                     setLED_Initialization@led:	
  3425                           ; 1 bytes @ 0x4
  3426                           
  3427  0024                     setLED_Main@led:	
  3428                           ; 1 bytes @ 0x4
  3429                           
  3430  0024                     setSw_Initialization@sw:	
  3431                           ; 1 bytes @ 0x4
  3432                           
  3433  0024                     ___ftpack@sign:	
  3434                           ; 1 bytes @ 0x4
  3435                           
  3436  0024                     getBuz_GO@i:	
  3437                           ; 1 bytes @ 0x4
  3438                           
  3439  0024                     DelayTime_1us@j:	
  3440                           ; 2 bytes @ 0x4
  3441                           
  3442                           
  3443                           ; 2 bytes @ 0x4
  3444  0024                     	ds	1
  3445  0025                     ??_CC2500_InitSetREG:	
  3446  0025                     ??_CC2500_InitPATable:	
  3447                           ; 0 bytes @ 0x5
  3448                           
  3449  0025                     ??_Switch_Initialization:	
  3450                           ; 0 bytes @ 0x5
  3451                           
  3452  0025                     ??___ftpack:	
  3453                           ; 0 bytes @ 0x5
  3454                           
  3455  0025                     ??_LED_Initialization:	
  3456                           ; 0 bytes @ 0x5
  3457                           
  3458  0025                     ??_LED_Main:	
  3459                           ; 0 bytes @ 0x5
  3460                           
  3461  0025                     CC2500_TxData@loop_e:	
  3462                           ; 0 bytes @ 0x5
  3463                           
  3464  0025                     CC2500_RxData@loop_f:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467  0025                     Flash_Memory_Modify@i:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470  0025                     getMain_LightsStatus@count:	
  3471                           ; 1 bytes @ 0x5
  3472                           
  3473  0025                     getMain_All_Error_Status@command:	
  3474                           ; 1 bytes @ 0x5
  3475                           
  3476  0025                     getTemp_AD@channel:	
  3477                           ; 1 bytes @ 0x5
  3478                           
  3479  0025                     ___awdiv@counter:	
  3480                           ; 1 bytes @ 0x5
  3481                           
  3482  0025                     ___lwdiv@counter:	
  3483                           ; 1 bytes @ 0x5
  3484                           
  3485                           
  3486                           ; 1 bytes @ 0x5
  3487  0025                     	ds	1
  3488  0026                     ??_CC2500_PowerRST:	
  3489  0026                     ??_CC2500_FrequencyCabr:	
  3490                           ; 0 bytes @ 0x6
  3491                           
  3492  0026                     CC2500_InitSetREG@temp1:	
  3493                           ; 0 bytes @ 0x6
  3494                           
  3495  0026                     CC2500_InitPATable@temp:	
  3496                           ; 1 bytes @ 0x6
  3497                           
  3498  0026                     DelayTimejudge@i:	
  3499                           ; 1 bytes @ 0x6
  3500                           
  3501  0026                     getMain_All_Error_Status@status:	
  3502                           ; 1 bytes @ 0x6
  3503                           
  3504  0026                     getLoad_AD@channel:	
  3505                           ; 1 bytes @ 0x6
  3506                           
  3507  0026                     ___awdiv@sign:	
  3508                           ; 1 bytes @ 0x6
  3509                           
  3510  0026                     getMain_LightsStatus@i:	
  3511                           ; 1 bytes @ 0x6
  3512                           
  3513  0026                     ___lwdiv@quotient:	
  3514                           ; 2 bytes @ 0x6
  3515                           
  3516                           
  3517                           ; 2 bytes @ 0x6
  3518  0026                     	ds	1
  3519  0027                     CC2500_InitSetREG@temp2:	
  3520  0027                     CC2500_InitPATable@loop_d:	
  3521                           ; 1 bytes @ 0x7
  3522                           
  3523  0027                     DelayTimejudge@j:	
  3524                           ; 1 bytes @ 0x7
  3525                           
  3526  0027                     getLoad_AD@k:	
  3527                           ; 1 bytes @ 0x7
  3528                           
  3529  0027                     ___awdiv@quotient:	
  3530                           ; 1 bytes @ 0x7
  3531                           
  3532                           
  3533                           ; 2 bytes @ 0x7
  3534  0027                     	ds	1
  3535  0028                     ?___awtoft:	
  3536  0028                     CC2500_InitSetREG@loop_c:	
  3537                           ; 3 bytes @ 0x8
  3538                           
  3539  0028                     DelayTimejudge@k:	
  3540                           ; 1 bytes @ 0x8
  3541                           
  3542  0028                     getMain_LightsStatus@status:	
  3543                           ; 1 bytes @ 0x8
  3544                           
  3545  0028                     getLoad_AD@j:	
  3546                           ; 1 bytes @ 0x8
  3547                           
  3548  0028                     ___awtoft@c:	
  3549                           ; 1 bytes @ 0x8
  3550                           
  3551                           
  3552                           ; 2 bytes @ 0x8
  3553  0028                     	ds	1
  3554  0029                     ??_Load_Main:	
  3555  0029                     ?_setBuz:	
  3556                           ; 0 bytes @ 0x9
  3557                           
  3558  0029                     ??_CC2500_PowerOnInitial:	
  3559                           ; 0 bytes @ 0x9
  3560                           
  3561  0029                     ??_Flash_Memory_Main:	
  3562                           ; 0 bytes @ 0x9
  3563                           
  3564  0029                     DelayTimejudge@value:	
  3565                           ; 0 bytes @ 0x9
  3566                           
  3567  0029                     getLoad_AD@i:	
  3568                           ; 1 bytes @ 0x9
  3569                           
  3570  0029                     setBuz@time:	
  3571                           ; 1 bytes @ 0x9
  3572                           
  3573                           
  3574                           ; 2 bytes @ 0x9
  3575  0029                     	ds	2
  3576  002B                     ??_setBuz:	
  3577  002B                     ??___awtoft:	
  3578                           ; 0 bytes @ 0xB
  3579                           
  3580  002B                     Load_Main@j:	
  3581                           ; 0 bytes @ 0xB
  3582                           
  3583                           
  3584                           ; 1 bytes @ 0xB
  3585  002B                     	ds	1
  3586  002C                     setBuz@count:	
  3587  002C                     Load_Main@sw:	
  3588                           ; 1 bytes @ 0xC
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0xC
  3592  002C                     	ds	1
  3593  002D                     ??_my_MainTimer:	
  3594  002D                     ??_setDimmerLights_SwOn:	
  3595                           ; 0 bytes @ 0xD
  3596                           
  3597  002D                     Load_Main@adjgo:	
  3598                           ; 0 bytes @ 0xD
  3599                           
  3600  002D                     ___awtoft@sign:	
  3601                           ; 1 bytes @ 0xD
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0xD
  3605  002D                     	ds	1
  3606  002E                     ?___ftdiv:	
  3607  002E                     ?___ftmul:	
  3608                           ; 3 bytes @ 0xE
  3609                           
  3610  002E                     setDimmerLights_SwOn@idle:	
  3611                           ; 3 bytes @ 0xE
  3612                           
  3613  002E                     _Load_Main$3755:	
  3614                           ; 1 bytes @ 0xE
  3615                           
  3616  002E                     ___ftdiv@f2:	
  3617                           ; 1 bytes @ 0xE
  3618                           
  3619  002E                     ___ftmul@f1:	
  3620                           ; 3 bytes @ 0xE
  3621                           
  3622                           
  3623                           ; 3 bytes @ 0xE
  3624  002E                     	ds	1
  3625  002F                     setDimmerLights_SwOn@sw:	
  3626  002F                     Load_Main@error:	
  3627                           ; 1 bytes @ 0xF
  3628                           
  3629                           
  3630                           ; 1 bytes @ 0xF
  3631  002F                     	ds	1
  3632  0030                     Load_Main@i:	
  3633                           
  3634                           ; 1 bytes @ 0x10
  3635  0030                     	ds	1
  3636  0031                     ___ftdiv@f1:	
  3637  0031                     ___ftmul@f2:	
  3638                           ; 3 bytes @ 0x11
  3639                           
  3640                           
  3641                           ; 3 bytes @ 0x11
  3642  0031                     	ds	3
  3643  0034                     ??___ftdiv:	
  3644  0034                     ??___ftmul:	
  3645                           ; 0 bytes @ 0x14
  3646                           
  3647                           
  3648                           ; 0 bytes @ 0x14
  3649  0034                     	ds	4
  3650  0038                     ___ftdiv@cntr:	
  3651  0038                     ___ftmul@exp:	
  3652                           ; 1 bytes @ 0x18
  3653                           
  3654                           
  3655                           ; 1 bytes @ 0x18
  3656  0038                     	ds	1
  3657  0039                     ___ftdiv@f3:	
  3658  0039                     ___ftmul@f3_as_product:	
  3659                           ; 3 bytes @ 0x19
  3660                           
  3661                           
  3662                           ; 3 bytes @ 0x19
  3663  0039                     	ds	3
  3664  003C                     ___ftdiv@exp:	
  3665  003C                     ___ftmul@cntr:	
  3666                           ; 1 bytes @ 0x1C
  3667                           
  3668                           
  3669                           ; 1 bytes @ 0x1C
  3670  003C                     	ds	1
  3671  003D                     ___ftdiv@sign:	
  3672  003D                     ___ftmul@sign:	
  3673                           ; 1 bytes @ 0x1D
  3674                           
  3675                           
  3676                           ; 1 bytes @ 0x1D
  3677  003D                     	ds	1
  3678  003E                     ?___ftneg:	
  3679  003E                     ___ftneg@f1:	
  3680                           ; 3 bytes @ 0x1E
  3681                           
  3682                           
  3683                           ; 3 bytes @ 0x1E
  3684  003E                     	ds	3
  3685  0041                     ??___ftneg:	
  3686  0041                     ?___ftadd:	
  3687                           ; 0 bytes @ 0x21
  3688                           
  3689  0041                     ___ftadd@f1:	
  3690                           ; 3 bytes @ 0x21
  3691                           
  3692                           
  3693                           ; 3 bytes @ 0x21
  3694  0041                     	ds	3
  3695  0044                     ___ftadd@f2:	
  3696                           
  3697                           ; 3 bytes @ 0x24
  3698  0044                     	ds	3
  3699  0047                     ??___ftadd:	
  3700                           
  3701                           ; 0 bytes @ 0x27
  3702  0047                     	ds	4
  3703  004B                     ___ftadd@sign:	
  3704                           
  3705                           ; 1 bytes @ 0x2B
  3706  004B                     	ds	1
  3707  004C                     ___ftadd@exp2:	
  3708                           
  3709                           ; 1 bytes @ 0x2C
  3710  004C                     	ds	1
  3711  004D                     ___ftadd@exp1:	
  3712                           
  3713                           ; 1 bytes @ 0x2D
  3714  004D                     	ds	1
  3715  004E                     ?___fttol:	
  3716  004E                     ___fttol@f1:	
  3717                           ; 4 bytes @ 0x2E
  3718                           
  3719                           
  3720                           ; 3 bytes @ 0x2E
  3721  004E                     	ds	4
  3722  0052                     ??___fttol:	
  3723                           
  3724                           ; 0 bytes @ 0x32
  3725  0052                     	ds	4
  3726  0056                     ___fttol@sign1:	
  3727                           
  3728                           ; 1 bytes @ 0x36
  3729  0056                     	ds	1
  3730  0057                     ___fttol@lval:	
  3731                           
  3732                           ; 4 bytes @ 0x37
  3733  0057                     	ds	4
  3734  005B                     ___fttol@exp1:	
  3735                           
  3736                           ; 1 bytes @ 0x3B
  3737  005B                     	ds	1
  3738  005C                     ??_setPercentValue:	
  3739  005C                     ??_getPercentValue:	
  3740                           ; 0 bytes @ 0x3C
  3741                           
  3742                           
  3743                           ; 0 bytes @ 0x3C
  3744  005C                     	ds	2
  3745  005E                     getPercentValue@value:	
  3746  005E                     setPercentValue@value:	
  3747                           ; 1 bytes @ 0x3E
  3748                           
  3749                           
  3750                           ; 1 bytes @ 0x3E
  3751  005E                     	ds	1
  3752  005F                     getPercentValue@i:	
  3753  005F                     setPercentValue@i:	
  3754                           ; 3 bytes @ 0x3F
  3755                           
  3756                           
  3757                           ; 3 bytes @ 0x3F
  3758  005F                     	ds	3
  3759  0062                     ?_setProductData:	
  3760  0062                     ??_setDimmerLights_AdjRF:	
  3761                           ; 0 bytes @ 0x42
  3762                           
  3763  0062                     ??_Flash_Memory_Initialization:	
  3764                           ; 0 bytes @ 0x42
  3765                           
  3766  0062                     setProductData@value:	
  3767                           ; 0 bytes @ 0x42
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0x42
  3771  0062                     	ds	1
  3772  0063                     ??_setProductData:	
  3773  0063                     setDimmerLights_AdjRF@lights:	
  3774                           ; 0 bytes @ 0x43
  3775                           
  3776  0063                     Flash_Memory_Initialization@i:	
  3777                           ; 1 bytes @ 0x43
  3778                           
  3779                           
  3780                           ; 1 bytes @ 0x43
  3781  0063                     	ds	2
  3782  0065                     setProductData@address:	
  3783                           
  3784                           ; 1 bytes @ 0x45
  3785  0065                     	ds	1
  3786  0066                     ?_setRF_DimmerLights:	
  3787  0066                     ??_setTemp_Main:	
  3788                           ; 0 bytes @ 0x46
  3789                           
  3790  0066                     ??_setLog_Code:	
  3791                           ; 0 bytes @ 0x46
  3792                           
  3793  0066                     ??_setRF_DimmerValue:	
  3794                           ; 0 bytes @ 0x46
  3795                           
  3796  0066                     ?_setDelayOff_GO:	
  3797                           ; 0 bytes @ 0x46
  3798                           
  3799  0066                     setDelayOff_GO@command:	
  3800                           ; 0 bytes @ 0x46
  3801                           
  3802  0066                     setRF_DimmerLights@on:	
  3803                           ; 1 bytes @ 0x46
  3804                           
  3805                           
  3806                           ; 1 bytes @ 0x46
  3807  0066                     	ds	1
  3808  0067                     ??_setRF_DimmerLights:	
  3809  0067                     setDelayOff_GO@value:	
  3810                           ; 0 bytes @ 0x47
  3811                           
  3812  0067                     setRF_DimmerValue@lights:	
  3813                           ; 1 bytes @ 0x47
  3814                           
  3815                           
  3816                           ; 1 bytes @ 0x47
  3817  0067                     	ds	1
  3818  0068                     ??_setRFSW_AdjControl:	
  3819  0068                     ??_setDelayOff_GO:	
  3820                           ; 0 bytes @ 0x48
  3821                           
  3822  0068                     setTemp_Main@error:	
  3823                           ; 0 bytes @ 0x48
  3824                           
  3825                           
  3826                           ; 1 bytes @ 0x48
  3827  0068                     	ds	1
  3828  0069                     ??_Temp_Main:	
  3829  0069                     setDelayOff_GO@sw:	
  3830                           ; 0 bytes @ 0x49
  3831                           
  3832  0069                     setRF_DimmerLights@status:	
  3833                           ; 1 bytes @ 0x49
  3834                           
  3835                           
  3836                           ; 1 bytes @ 0x49
  3837  0069                     	ds	1
  3838  006A                     ??_setDimmerLights_SwOff:	
  3839  006A                     setDimmerLights_SwOff@command:	
  3840                           ; 0 bytes @ 0x4A
  3841                           
  3842  006A                     setRFSW_AdjControl@status:	
  3843                           ; 1 bytes @ 0x4A
  3844                           
  3845  006A                     setRF_DimmerLights@lights:	
  3846                           ; 1 bytes @ 0x4A
  3847                           
  3848                           
  3849                           ; 1 bytes @ 0x4A
  3850  006A                     	ds	1
  3851  006B                     ?_setDimmerLights:	
  3852  006B                     ?_setDimmerLights_Adj:	
  3853                           ; 0 bytes @ 0x4B
  3854                           
  3855  006B                     setDimmerLights_SwOff@sw:	
  3856                           ; 0 bytes @ 0x4B
  3857                           
  3858  006B                     setDimmerLights@status:	
  3859                           ; 1 bytes @ 0x4B
  3860                           
  3861  006B                     setDimmerLights_Adj@status:	
  3862                           ; 1 bytes @ 0x4B
  3863                           
  3864  006B                     setRFSW_AdjControl@sw:	
  3865                           ; 1 bytes @ 0x4B
  3866                           
  3867                           
  3868                           ; 1 bytes @ 0x4B
  3869  006B                     	ds	1
  3870  006C                     ??_setDimmerLights_ErrorClose:	
  3871  006C                     ??_setDimmerLights:	
  3872                           ; 0 bytes @ 0x4C
  3873                           
  3874  006C                     ??_setDimmerLights_Adj:	
  3875                           ; 0 bytes @ 0x4C
  3876                           
  3877  006C                     ??_Exception_Main:	
  3878                           ; 0 bytes @ 0x4C
  3879                           
  3880  006C                     ??_setRFSW_Control:	
  3881                           ; 0 bytes @ 0x4C
  3882                           
  3883  006C                     ??_setSw_Main:	
  3884                           ; 0 bytes @ 0x4C
  3885                           
  3886                           
  3887                           ; 0 bytes @ 0x4C
  3888  006C                     	ds	1
  3889  006D                     ??_DlyOff_Main:	
  3890  006D                     setDimmerLights@lights:	
  3891                           ; 0 bytes @ 0x4D
  3892                           
  3893  006D                     setDimmerLights_Adj@lights:	
  3894                           ; 1 bytes @ 0x4D
  3895                           
  3896  006D                     setRFSW_Control@status:	
  3897                           ; 1 bytes @ 0x4D
  3898                           
  3899                           
  3900                           ; 1 bytes @ 0x4D
  3901  006D                     	ds	1
  3902  006E                     ??_setDimmerLights_Main:	
  3903  006E                     setDimmerLights_Main@lights:	
  3904                           ; 0 bytes @ 0x4E
  3905                           
  3906  006E                     setRFSW_Control@sw:	
  3907                           ; 1 bytes @ 0x4E
  3908                           
  3909  006E                     setSw_Main@sw:	
  3910                           ; 1 bytes @ 0x4E
  3911                           
  3912                           
  3913                           ; 1 bytes @ 0x4E
  3914  006E                     	ds	1
  3915  006F                     ??_Switch_Main:	
  3916  006F                     ??_getRxData:	
  3917                           ; 0 bytes @ 0x4F
  3918                           
  3919  006F                     ??_setControl_Lights_Table:	
  3920                           ; 0 bytes @ 0x4F
  3921                           
  3922  006F                     ??_DimmerLights_Main:	
  3923                           ; 0 bytes @ 0x4F
  3924                           
  3925  006F                     DlyOff_Main@sw:	
  3926                           ; 0 bytes @ 0x4F
  3927                           
  3928                           
  3929                           ; 1 bytes @ 0x4F
  3930  006F                     	ds	1
  3931  0070                     ??_RF_Main:	
  3932  0070                     ??_DelayOff_Main:	
  3933                           ; 0 bytes @ 0x50
  3934                           
  3935  0070                     ??_main:	
  3936                           ; 0 bytes @ 0x50
  3937                           
  3938                           
  3939                           	psect	maintext
  3940  08C3                     __pmaintext:	
  3941                           ; 0 bytes @ 0x50
  3942 ;;
  3943 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3944 ;;
  3945 ;; *************** function _main *****************
  3946 ;; Defined at:
  3947 ;;		line 7 in file "../src/Main_B1.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  argc            2    0[BANK4 ] int 
  3950 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  3951 ;; Auto vars:     Size  Location     Type
  3952 ;;		None
  3953 ;; Return value:  Size  Location     Type
  3954 ;;                  2    0[BANK4 ] int 
  3955 ;; Registers used:
  3956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3957 ;; Tracked objects:
  3958 ;;		On entry : 17F/0
  3959 ;;		On exit  : 0/0
  3960 ;;		Unchanged: 0/0
  3961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3962 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  3963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3965 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  3966 ;;Total ram usage:        4 bytes
  3967 ;; Hardware stack levels required when called:   15
  3968 ;; This function calls:
  3969 ;;		_Buzzer_Initialization
  3970 ;;		_Buzzer_Main
  3971 ;;		_CC2500_PowerOnInitial
  3972 ;;		_DelayOff_Initialization
  3973 ;;		_DelayOff_Main
  3974 ;;		_DimmerLights_Initialization
  3975 ;;		_DimmerLights_Main
  3976 ;;		_Exception_Main
  3977 ;;		_Flash_Memory_Initialization
  3978 ;;		_Flash_Memory_Main
  3979 ;;		_LED_Initialization
  3980 ;;		_LED_Main
  3981 ;;		_Load_Initialization
  3982 ;;		_Load_Main
  3983 ;;		_Mcu_Initialization
  3984 ;;		_RF_Initialization
  3985 ;;		_RF_Main
  3986 ;;		_Switch_Initialization
  3987 ;;		_Switch_Main
  3988 ;;		_Temp_Initialization
  3989 ;;		_Temp_Main
  3990 ;;		_WDT_Main
  3991 ;;		_getLoad_AD
  3992 ;;		_getTemp_AD
  3993 ;;		_myMain_Initialization
  3994 ;;		_my_MainTimer
  3995 ;; This function is called by:
  3996 ;;		Startup code after reset
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           
  4001                           ;psect for function _main
  4002  08C3                     _main:	
  4003                           
  4004                           ;Main_B1.c: 8: myMain_Initialization();
  4005                           
  4006                           ;incstack = 0
  4007                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4008  08C3  319D  25AD  3188   	fcall	_myMain_Initialization
  4009                           
  4010                           ;Main_B1.c: 9: Mcu_Initialization();
  4011  08C6  319E  2644  3188   	fcall	_Mcu_Initialization
  4012                           
  4013                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4014  08C9  3185  2524  3188   	fcall	_Flash_Memory_Initialization
  4015                           
  4016                           ;Main_B1.c: 11: LED_Initialization();
  4017  08CC  319C  2468  3188   	fcall	_LED_Initialization
  4018                           
  4019                           ;Main_B1.c: 12: Buzzer_Initialization();
  4020  08CF  319C  2439  3188   	fcall	_Buzzer_Initialization
  4021                           
  4022                           ;Main_B1.c: 14: ;;
  4023                           ;Main_B1.c: 15: Temp_Initialization();
  4024  08D2  319C  2442  3188   	fcall	_Temp_Initialization
  4025                           
  4026                           ;Main_B1.c: 16: Load_Initialization();
  4027  08D5  319C  247D  3188   	fcall	_Load_Initialization
  4028                           
  4029                           ;Main_B1.c: 17: ;;
  4030                           ;Main_B1.c: 18: DelayOff_Initialization();
  4031  08D8  319C  2458  3188   	fcall	_DelayOff_Initialization
  4032                           
  4033                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4034  08DB  319C  24C7  3188   	fcall	_DimmerLights_Initialization
  4035                           
  4036                           ;Main_B1.c: 21: ;;
  4037                           ;Main_B1.c: 22: ;;
  4038                           ;Main_B1.c: 23: ;;
  4039                           ;Main_B1.c: 24: Switch_Initialization();
  4040  08DE  319C  24B4  3188   	fcall	_Switch_Initialization
  4041                           
  4042                           ;Main_B1.c: 25: RF_Initialization();
  4043  08E1  319C  243C  3188   	fcall	_RF_Initialization
  4044                           
  4045                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4046  08E4  319E  26B7  3188   	fcall	_CC2500_PowerOnInitial
  4047  08E7                     l10248:	
  4048                           ;Main_B1.c: 27: ;;
  4049                           ;Main_B1.c: 28: ;;
  4050                           ;Main_B1.c: 30: while (1) {
  4051                           
  4052                           
  4053                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4054  08E7  0021               	movlb	1	; select bank1
  4055  08E8  1C20               	btfss	_myMain^(0+128),0
  4056  08E9  28F2               	goto	l10252
  4057                           
  4058                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4059  08EA  3005               	movlw	5
  4060  08EB  318B  23CC  3188   	fcall	_getLoad_AD
  4061                           
  4062                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4063  08EE  3009               	movlw	9
  4064  08EF  3194  245A  3188   	fcall	_getTemp_AD
  4065  08F2                     l10252:	
  4066                           
  4067                           ;Main_B1.c: 57: }
  4068                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4069  08F2  0022               	movlb	2	; select bank2
  4070  08F3  1C23               	btfss	_Timer1^(0+256),0
  4071  08F4  28E7               	goto	l10248
  4072                           
  4073                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4074  08F5  1023               	bcf	_Timer1^(0+256),0
  4075                           
  4076                           ;Main_B1.c: 96: my_MainTimer();
  4077  08F6  3193  23E0  3188   	fcall	_my_MainTimer
  4078                           
  4079                           ;Main_B1.c: 97: WDT_Main();
  4080  08F9  319E  2656  3188   	fcall	_WDT_Main
  4081                           
  4082                           ;Main_B1.c: 98: ;;
  4083                           ;Main_B1.c: 99: ;;
  4084                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4085  08FC  0021               	movlb	1	; select bank1
  4086  08FD  1C20               	btfss	_myMain^(0+128),0
  4087  08FE  28E7               	goto	l10248
  4088                           
  4089                           ;Main_B1.c: 101: Flash_Memory_Main();
  4090  08FF  3193  2304  3188   	fcall	_Flash_Memory_Main
  4091                           
  4092                           ;Main_B1.c: 103: LED_Main();
  4093  0902  319C  246C  3188   	fcall	_LED_Main
  4094                           
  4095                           ;Main_B1.c: 104: Buzzer_Main();
  4096  0905  3195  251C  3188   	fcall	_Buzzer_Main
  4097                           
  4098                           ;Main_B1.c: 106: ;;
  4099                           ;Main_B1.c: 107: Temp_Main();
  4100  0908  319C  2445  3188   	fcall	_Temp_Main
  4101                           
  4102                           ;Main_B1.c: 108: Load_Main();
  4103  090B  3180  2040  3188   	fcall	_Load_Main
  4104                           
  4105                           ;Main_B1.c: 109: ;;
  4106                           ;Main_B1.c: 111: ;;
  4107                           ;Main_B1.c: 112: DimmerLights_Main();
  4108  090E  319C  2464  3188   	fcall	_DimmerLights_Main
  4109                           
  4110                           ;Main_B1.c: 113: Switch_Main();
  4111  0911  319C  249B  3188   	fcall	_Switch_Main
  4112                           
  4113                           ;Main_B1.c: 114: ;;
  4114                           ;Main_B1.c: 115: ;;
  4115                           ;Main_B1.c: 117: RF_Main();
  4116  0914  319C  243F  3188   	fcall	_RF_Main
  4117                           
  4118                           ;Main_B1.c: 118: DelayOff_Main();
  4119  0917  319C  245C  3188   	fcall	_DelayOff_Main
  4120                           
  4121                           ;Main_B1.c: 119: ;;
  4122                           ;Main_B1.c: 120: ;;
  4123                           ;Main_B1.c: 121: Exception_Main();
  4124  091A  318E  26A3  3188   	fcall	_Exception_Main
  4125  091D  28E7               	goto	l10248
  4126  091E                     __end_of_main:	
  4127                           ;Main_B1.c: 128: }
  4128                           ;Main_B1.c: 129: }
  4129                           ;Main_B1.c: 163: }
  4130                           ;Main_B1.c: 164: return (0);
  4131                           ;	Return value of _main is never used
  4132                           
  4133                           
  4134                           	psect	text1
  4135  13E0                     __ptext1:	
  4136 ;; *************** function _my_MainTimer *****************
  4137 ;; Defined at:
  4138 ;;		line 185 in file "../src/Main_B1.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;		None
  4143 ;; Return value:  Size  Location     Type
  4144 ;;		None               void
  4145 ;; Registers used:
  4146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;Total ram usage:        1 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    7
  4159 ;; This function calls:
  4160 ;;		_setBuz
  4161 ;; This function is called by:
  4162 ;;		_main
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function _my_MainTimer
  4168  13E0                     _my_MainTimer:	
  4169                           
  4170                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4174  13E0  0021               	movlb	1	; select bank1
  4175  13E1  1820               	btfsc	_myMain^(0+128),0
  4176  13E2  2BFA               	goto	l9958
  4177                           
  4178                           ;Main_B1.c: 189: myMain.PowerCount++;
  4179  13E3  3001               	movlw	1
  4180  13E4  0020               	movlb	0	; select bank0
  4181  13E5  00AD               	movwf	??_my_MainTimer
  4182  13E6  082D               	movf	??_my_MainTimer,w
  4183  13E7  0021               	movlb	1	; select bank1
  4184  13E8  07A1               	addwf	(_myMain^(0+128)+1),f
  4185                           
  4186                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4187  13E9  0821               	movf	(_myMain^(0+128)+1),w
  4188  13EA  3A96               	xorlw	150
  4189  13EB  1D03               	skipz
  4190  13EC  0008               	return
  4191                           
  4192                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4193  13ED  01A1               	clrf	(_myMain^(0+128)+1)
  4194                           
  4195                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4196  13EE  1420               	bsf	_myMain^(0+128),0
  4197                           
  4198                           ;Main_B1.c: 197: setBuz(3, 50);
  4199  13EF  3032               	movlw	50
  4200  13F0  0020               	movlb	0	; select bank0
  4201  13F1  00A9               	movwf	setBuz@time
  4202  13F2  3000               	movlw	0
  4203  13F3  00AA               	movwf	setBuz@time+1
  4204  13F4  3003               	movlw	3
  4205  13F5  3197  27A7         	fcall	_setBuz
  4206                           
  4207                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4208  13F7  0021               	movlb	1	; select bank1
  4209  13F8  1620               	bsf	_myMain^(0+128),4
  4210                           
  4211                           ;Main_B1.c: 207: }
  4212                           ;Main_B1.c: 208: } else {
  4213  13F9  0008               	return
  4214  13FA                     l9958:	
  4215                           
  4216                           ;Main_B1.c: 209: myMain.PowerCount++;
  4217  13FA  3001               	movlw	1
  4218  13FB  0020               	movlb	0	; select bank0
  4219  13FC  00AD               	movwf	??_my_MainTimer
  4220  13FD  082D               	movf	??_my_MainTimer,w
  4221  13FE  0021               	movlb	1	; select bank1
  4222  13FF  07A1               	addwf	(_myMain^(0+128)+1),f
  4223                           
  4224                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4225  1400  0821               	movf	(_myMain^(0+128)+1),w
  4226  1401  3A64               	xorlw	100
  4227  1402  1903               	btfsc	3,2
  4228                           
  4229                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4230  1403  01A1               	clrf	(_myMain^(0+128)+1)
  4231                           
  4232                           ;Main_B1.c: 226: }
  4233                           ;Main_B1.c: 228: myMain.Count1++;
  4234  1404  3001               	movlw	1
  4235  1405  07A4               	addwf	(_myMain^(0+128)+4),f
  4236  1406  3000               	movlw	0
  4237  1407  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4238                           
  4239                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4240  1408  3004               	movlw	4
  4241  1409  3EA0               	addlw	_myMain& (0+255)
  4242  140A  0086               	movwf	6
  4243  140B  0187               	clrf	7
  4244  140C  3F40               	moviw [0]fsr1
  4245  140D  3A64               	xorlw	100
  4246  140E  1D03               	skipz
  4247  140F  2C12               	goto	u11175
  4248  1410  3F41               	moviw [1]fsr1
  4249  1411  3A00               	xorlw	0
  4250  1412                     u11175:	
  4251  1412  1D03               	skipz
  4252  1413  0008               	return
  4253                           
  4254                           ;Main_B1.c: 230: {
  4255                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4256  1414  01A4               	clrf	(_myMain^(0+128)+4)
  4257  1415  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4258                           
  4259                           ;Main_B1.c: 243: if (myMain.Flag) {
  4260  1416  1CA0               	btfss	_myMain^(0+128),1
  4261  1417  2C1A               	goto	l1376
  4262                           
  4263                           ;Main_B1.c: 244: myMain.Flag = 0;
  4264  1418  10A0               	bcf	_myMain^(0+128),1
  4265                           
  4266                           ;Main_B1.c: 253: } else {
  4267  1419  0008               	return
  4268  141A                     l1376:	
  4269                           
  4270                           ;Main_B1.c: 254: myMain.Flag = 1;
  4271  141A  14A0               	bsf	_myMain^(0+128),1
  4272  141B  0008               	return
  4273  141C                     __end_of_my_MainTimer:	
  4274                           
  4275                           	psect	text2
  4276  1DAD                     __ptext2:	
  4277 ;; *************** function _myMain_Initialization *****************
  4278 ;; Defined at:
  4279 ;;		line 170 in file "../src/Main_B1.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;		None
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;		None
  4284 ;; Return value:  Size  Location     Type
  4285 ;;		None               void
  4286 ;; Registers used:
  4287 ;;		wreg, fsr1l, fsr1h
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4296 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4297 ;;Total ram usage:        1 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    5
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_main
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           
  4308                           ;psect for function _myMain_Initialization
  4309  1DAD                     _myMain_Initialization:	
  4310                           
  4311                           ;Main_B1.c: 173: product = &_product;
  4312                           
  4313                           ;incstack = 0
  4314                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4315  1DAD  3020               	movlw	__product& (0+255)
  4316  1DAE  0020               	movlb	0	; select bank0
  4317  1DAF  00A0               	movwf	??_myMain_Initialization
  4318  1DB0  0820               	movf	??_myMain_Initialization,w
  4319  1DB1  00F9               	movwf	_product
  4320                           
  4321                           ;Main_B1.c: 174: product->Data[20] = 209;
  4322  1DB2  30D1               	movlw	209
  4323  1DB3  00A0               	movwf	??_myMain_Initialization
  4324  1DB4  0879               	movf	_product,w
  4325  1DB5  3E14               	addlw	20
  4326  1DB6  0086               	movwf	6
  4327  1DB7  3002               	movlw	2	; select bank4/5
  4328  1DB8  0087               	movwf	7
  4329  1DB9  0820               	movf	??_myMain_Initialization,w
  4330  1DBA  0081               	movwf	1
  4331  1DBB  0008               	return
  4332  1DBC                     __end_of_myMain_Initialization:	
  4333                           
  4334                           	psect	text3
  4335  145A                     __ptext3:	
  4336 ;; *************** function _getTemp_AD *****************
  4337 ;; Defined at:
  4338 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  channel         1    wreg     unsigned char 
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  channel         1    5[BANK0 ] unsigned char 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:        2 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    7
  4359 ;; This function calls:
  4360 ;;		_getAD
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _getTemp_AD
  4368  145A                     _getTemp_AD:	
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4372                           ;getTemp_AD@channel stored from wreg
  4373  145A  0020               	movlb	0	; select bank0
  4374  145B  00A5               	movwf	getTemp_AD@channel
  4375                           
  4376                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4377  145C  0021               	movlb	1	; select bank1
  4378  145D  1D57               	btfss	_Temp^(0+128),2
  4379  145E  0008               	return
  4380                           
  4381                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4382  145F  30F0               	movlw	240
  4383  1460  0020               	movlb	0	; select bank0
  4384  1461  00A4               	movwf	??_getTemp_AD
  4385  1462  0824               	movf	??_getTemp_AD,w
  4386  1463  00A0               	movwf	getAD@adcon1
  4387  1464  0825               	movf	getTemp_AD@channel,w
  4388  1465  319F  279E  3194   	fcall	_getAD
  4389  1468  0020               	movlb	0	; select bank0
  4390  1469  0821               	movf	?_getAD+1,w
  4391  146A  0021               	movlb	1	; select bank1
  4392  146B  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4393  146C  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4394  146D  0020               	movlb	0	; select bank0
  4395  146E  0820               	movf	?_getAD,w
  4396  146F  0021               	movlb	1	; select bank1
  4397  1470  01E3               	clrf	(_Temp^(0+128)+12)
  4398  1471  07E3               	addwf	(_Temp^(0+128)+12),f
  4399                           
  4400                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4401  1472  300C               	movlw	12
  4402  1473  3ED7               	addlw	_Temp& (0+255)
  4403  1474  0086               	movwf	6
  4404  1475  0187               	clrf	7
  4405  1476  0016               	moviw fsr1++
  4406  1477  0401               	iorwf	1,w
  4407  1478  1903               	skipnz
  4408  1479  0008               	return
  4409                           
  4410                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4411  147A  0864               	movf	((_Temp+1)^(0+128)+12),w
  4412  147B  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4413  147C  1D03               	skipz
  4414  147D  2C80               	goto	u11125
  4415  147E  0863               	movf	(_Temp^(0+128)+12),w
  4416  147F  025F               	subwf	(_Temp^(0+128)+8),w
  4417  1480                     u11125:	
  4418  1480  1803               	skipnc
  4419  1481  2C89               	goto	l9940
  4420                           
  4421                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4422  1482  0864               	movf	((_Temp+1)^(0+128)+12),w
  4423  1483  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4424  1484  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4425  1485  0863               	movf	(_Temp^(0+128)+12),w
  4426  1486  01DF               	clrf	(_Temp^(0+128)+8)
  4427  1487  07DF               	addwf	(_Temp^(0+128)+8),f
  4428                           
  4429                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4430  1488  0008               	return
  4431  1489                     l9940:	
  4432  1489  0864               	movf	((_Temp+1)^(0+128)+12),w
  4433  148A  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4434  148B  1D03               	skipz
  4435  148C  2C8F               	goto	u11135
  4436  148D  0863               	movf	(_Temp^(0+128)+12),w
  4437  148E  0261               	subwf	(_Temp^(0+128)+10),w
  4438  148F                     u11135:	
  4439  148F  1803               	skipnc
  4440  1490  0008               	return
  4441                           
  4442                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4443  1491  0864               	movf	((_Temp+1)^(0+128)+12),w
  4444  1492  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4445  1493  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4446  1494  0863               	movf	(_Temp^(0+128)+12),w
  4447  1495  01E1               	clrf	(_Temp^(0+128)+10)
  4448  1496  07E1               	addwf	(_Temp^(0+128)+10),f
  4449  1497  0008               	return
  4450  1498                     __end_of_getTemp_AD:	
  4451                           
  4452                           	psect	text4
  4453  0BCC                     __ptext4:	
  4454 ;; *************** function _getLoad_AD *****************
  4455 ;; Defined at:
  4456 ;;		line 15 in file "../src/OverLoad_B1.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  channel         1    wreg     unsigned char 
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;  channel         1    6[BANK0 ] unsigned char 
  4461 ;;  i               1    9[BANK0 ] unsigned char 
  4462 ;;  j               1    8[BANK0 ] unsigned char 
  4463 ;;  k               1    7[BANK0 ] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;		None               void
  4466 ;; Registers used:
  4467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;Total ram usage:        6 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    7
  4480 ;; This function calls:
  4481 ;;		_getAD
  4482 ;; This function is called by:
  4483 ;;		_main
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function _getLoad_AD
  4489  0BCC                     _getLoad_AD:	
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4493                           ;getLoad_AD@channel stored from wreg
  4494  0BCC  0020               	movlb	0	; select bank0
  4495  0BCD  00A6               	movwf	getLoad_AD@channel
  4496                           
  4497                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4498  0BCE  01A9               	clrf	getLoad_AD@i
  4499  0BCF  01A8               	clrf	getLoad_AD@j
  4500  0BD0  01A7               	clrf	getLoad_AD@k
  4501                           
  4502                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4503  0BD1  0022               	movlb	2	; select bank2
  4504  0BD2  1E26               	btfss	_Load^(0+256),4
  4505  0BD3  0008               	return
  4506                           
  4507                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4508  0BD4  30F3               	movlw	243
  4509  0BD5  0020               	movlb	0	; select bank0
  4510  0BD6  00A4               	movwf	??_getLoad_AD
  4511  0BD7  0824               	movf	??_getLoad_AD,w
  4512  0BD8  00A0               	movwf	getAD@adcon1
  4513  0BD9  0826               	movf	getLoad_AD@channel,w
  4514  0BDA  319F  279E  318B   	fcall	_getAD
  4515  0BDD  0020               	movlb	0	; select bank0
  4516  0BDE  0821               	movf	?_getAD+1,w
  4517  0BDF  0022               	movlb	2	; select bank2
  4518  0BE0  01C8               	clrf	((_Load+1)^(0+256)+33)
  4519  0BE1  07C8               	addwf	((_Load+1)^(0+256)+33),f
  4520  0BE2  0020               	movlb	0	; select bank0
  4521  0BE3  0820               	movf	?_getAD,w
  4522  0BE4  0022               	movlb	2	; select bank2
  4523  0BE5  01C7               	clrf	(_Load^(0+256)+33)
  4524  0BE6  07C7               	addwf	(_Load^(0+256)+33),f
  4525                           
  4526                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4527  0BE7  0020               	movlb	0	; select bank0
  4528  0BE8  01A9               	clrf	getLoad_AD@i
  4529  0BE9  3004               	movlw	4
  4530  0BEA  0229               	subwf	getLoad_AD@i,w
  4531  0BEB  1803               	btfsc	3,0
  4532  0BEC  2C1A               	goto	l9910
  4533  0BED                     l9898:	
  4534                           
  4535                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4536  0BED  3529               	lslf	getLoad_AD@i,w
  4537  0BEE  3E31               	addlw	(_Load+11)& (0+255)
  4538  0BEF  0086               	movwf	6
  4539  0BF0  3001               	movlw	1	; select bank2/3
  4540  0BF1  0087               	movwf	7
  4541  0BF2  3F40               	moviw [0]fsr1
  4542  0BF3  00A4               	movwf	??_getLoad_AD
  4543  0BF4  3F41               	moviw [1]fsr1
  4544  0BF5  00A5               	movwf	??_getLoad_AD+1
  4545  0BF6  0022               	movlb	2	; select bank2
  4546  0BF7  0848               	movf	((_Load+1)^(0+256)+33),w
  4547  0BF8  0020               	movlb	0	; select bank0
  4548  0BF9  0225               	subwf	??_getLoad_AD+1,w
  4549  0BFA  1D03               	skipz
  4550  0BFB  2C00               	goto	u11025
  4551  0BFC  0022               	movlb	2	; select bank2
  4552  0BFD  0847               	movf	(_Load^(0+256)+33),w
  4553  0BFE  0020               	movlb	0	; select bank0
  4554  0BFF  0224               	subwf	??_getLoad_AD,w
  4555  0C00                     u11025:	
  4556  0C00  1803               	skipnc
  4557  0C01  2C12               	goto	l9906
  4558  0C02  08A8               	movf	getLoad_AD@j,f
  4559  0C03  1D03               	skipz
  4560  0C04  2C12               	goto	l9906
  4561                           
  4562                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4563  0C05  3529               	lslf	getLoad_AD@i,w
  4564  0C06  3E31               	addlw	(_Load+11)& (0+255)
  4565  0C07  0086               	movwf	6
  4566  0C08  3001               	movlw	1	; select bank2/3
  4567  0C09  0087               	movwf	7
  4568  0C0A  0022               	movlb	2	; select bank2
  4569  0C0B  0847               	movf	(_Load^(0+256)+33),w
  4570  0C0C  3FC0               	movwi [0]fsr1
  4571  0C0D  0848               	movf	((_Load+1)^(0+256)+33),w
  4572  0C0E  3FC1               	movwi [1]fsr1
  4573                           
  4574                           ;OverLoad_B1.c: 24: j = 1;
  4575  0C0F  0020               	movlb	0	; select bank0
  4576  0C10  01A8               	clrf	getLoad_AD@j
  4577  0C11  0AA8               	incf	getLoad_AD@j,f
  4578  0C12                     l9906:	
  4579  0C12  3001               	movlw	1
  4580  0C13  00A4               	movwf	??_getLoad_AD
  4581  0C14  0824               	movf	??_getLoad_AD,w
  4582  0C15  07A9               	addwf	getLoad_AD@i,f
  4583  0C16  3004               	movlw	4
  4584  0C17  0229               	subwf	getLoad_AD@i,w
  4585  0C18  1C03               	skipc
  4586  0C19  2BED               	goto	l9898
  4587  0C1A                     l9910:	
  4588                           
  4589                           ;OverLoad_B1.c: 25: }
  4590                           ;OverLoad_B1.c: 26: }
  4591                           ;OverLoad_B1.c: 27: if (j == 0) {
  4592  0C1A  08A8               	movf	getLoad_AD@j,f
  4593  0C1B  1D03               	skipz
  4594  0C1C  0008               	return
  4595                           
  4596                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4597  0C1D  01A9               	clrf	getLoad_AD@i
  4598  0C1E                     L1:	
  4599  0C1E  3004               	movlw	4
  4600  0C1F  0229               	subwf	getLoad_AD@i,w
  4601  0C20  1803               	btfsc	3,0
  4602  0C21  0008               	return
  4603                           
  4604                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4605  0C22  3529               	lslf	getLoad_AD@i,w
  4606  0C23  3E3B               	addlw	(_Load+21)& (0+255)
  4607  0C24  0086               	movwf	6
  4608  0C25  3001               	movlw	1	; select bank2/3
  4609  0C26  0087               	movwf	7
  4610  0C27  3F40               	moviw [0]fsr1
  4611  0C28  00A4               	movwf	??_getLoad_AD
  4612  0C29  3F41               	moviw [1]fsr1
  4613  0C2A  00A5               	movwf	??_getLoad_AD+1
  4614  0C2B  0825               	movf	??_getLoad_AD+1,w
  4615  0C2C  0022               	movlb	2	; select bank2
  4616  0C2D  0248               	subwf	((_Load+1)^(0+256)+33),w
  4617  0C2E  1D03               	skipz
  4618  0C2F  2C34               	goto	u11075
  4619  0C30  0020               	movlb	0	; select bank0
  4620  0C31  0824               	movf	??_getLoad_AD,w
  4621  0C32  0022               	movlb	2	; select bank2
  4622  0C33  0247               	subwf	(_Load^(0+256)+33),w
  4623  0C34                     u11075:	
  4624  0C34  1803               	skipnc
  4625  0C35  2C47               	goto	l9926
  4626  0C36  0020               	movlb	0	; select bank0
  4627  0C37  08A7               	movf	getLoad_AD@k,f
  4628  0C38  1D03               	skipz
  4629  0C39  2C47               	goto	l9926
  4630                           
  4631                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4632  0C3A  3529               	lslf	getLoad_AD@i,w
  4633  0C3B  3E3B               	addlw	(_Load+21)& (0+255)
  4634  0C3C  0086               	movwf	6
  4635  0C3D  3001               	movlw	1	; select bank2/3
  4636  0C3E  0087               	movwf	7
  4637  0C3F  0022               	movlb	2	; select bank2
  4638  0C40  0847               	movf	(_Load^(0+256)+33),w
  4639  0C41  3FC0               	movwi [0]fsr1
  4640  0C42  0848               	movf	((_Load+1)^(0+256)+33),w
  4641  0C43  3FC1               	movwi [1]fsr1
  4642                           
  4643                           ;OverLoad_B1.c: 31: k = 1;
  4644  0C44  0020               	movlb	0	; select bank0
  4645  0C45  01A7               	clrf	getLoad_AD@k
  4646  0C46  0AA7               	incf	getLoad_AD@k,f
  4647  0C47                     l9926:	
  4648  0C47  3001               	movlw	1
  4649  0C48  0020               	movlb	0	; select bank0
  4650  0C49  00A4               	movwf	??_getLoad_AD
  4651  0C4A  0824               	movf	??_getLoad_AD,w
  4652  0C4B  07A9               	addwf	getLoad_AD@i,f
  4653  0C4C  2C1E               	goto	L1
  4654  0C4D                     __end_of_getLoad_AD:	
  4655                           
  4656                           	psect	text5
  4657  1F9E                     __ptext5:	
  4658 ;; *************** function _getAD *****************
  4659 ;; Defined at:
  4660 ;;		line 453 in file "../src/MCU_B1.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  adcon0          1    wreg     unsigned char 
  4663 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  2    0[BANK0 ] int 
  4668 ;; Registers used:
  4669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4675 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;Total ram usage:        4 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    6
  4682 ;; This function calls:
  4683 ;;		_Timeout_Counter
  4684 ;;		_set_TimeoutCleared
  4685 ;; This function is called by:
  4686 ;;		_getLoad_AD
  4687 ;;		_getTemp_AD
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           
  4692                           ;psect for function _getAD
  4693  1F9E                     _getAD:	
  4694                           
  4695                           ;incstack = 0
  4696                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4697                           ;getAD@adcon0 stored from wreg
  4698  1F9E  0020               	movlb	0	; select bank0
  4699  1F9F  00A3               	movwf	getAD@adcon0
  4700                           
  4701                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4702  1FA0  0823               	movf	getAD@adcon0,w
  4703  1FA1  0021               	movlb	1	; select bank1
  4704  1FA2  009D               	movwf	29	;volatile
  4705                           
  4706                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4707  1FA3  0020               	movlb	0	; select bank0
  4708  1FA4  0820               	movf	getAD@adcon1,w
  4709  1FA5  0021               	movlb	1	; select bank1
  4710  1FA6  009E               	movwf	30	;volatile
  4711                           
  4712                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4713  1FA7  149D               	bsf	29,1	;volatile
  4714                           
  4715                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4716  1FA8  2FAC               	goto	l9354
  4717  1FA9                     l9352:	
  4718                           
  4719                           ;MCU_B1.c: 458: Timeout_Counter();
  4720  1FA9  319E  26A2  319F   	fcall	_Timeout_Counter
  4721  1FAC                     l9354:	
  4722  1FAC  0021               	movlb	1	; select bank1
  4723  1FAD  1C9D               	btfss	29,1	;volatile
  4724  1FAE  2FB1               	goto	l9358
  4725  1FAF  1D2B               	btfss	(_myMain^(0+128)+11),2
  4726  1FB0  2FA9               	goto	l9352
  4727  1FB1                     l9358:	
  4728                           
  4729                           ;MCU_B1.c: 459: };
  4730                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4731  1FB1  319C  2478         	fcall	_set_TimeoutCleared
  4732                           
  4733                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4734  1FB3  0021               	movlb	1	; select bank1
  4735  1FB4  081C               	movf	28,w	;volatile
  4736  1FB5  0020               	movlb	0	; select bank0
  4737  1FB6  01A1               	clrf	?_getAD+1
  4738  1FB7  07A1               	addwf	?_getAD+1,f
  4739  1FB8  0021               	movlb	1	; select bank1
  4740  1FB9  081B               	movf	27,w	;volatile
  4741  1FBA  0020               	movlb	0	; select bank0
  4742  1FBB  01A0               	clrf	?_getAD
  4743  1FBC  07A0               	addwf	?_getAD,f
  4744  1FBD  0008               	return
  4745  1FBE                     __end_of_getAD:	
  4746                           
  4747                           	psect	text6
  4748  1E56                     __ptext6:	
  4749 ;; *************** function _WDT_Main *****************
  4750 ;; Defined at:
  4751 ;;		line 1097 in file "../src/MCU_B1.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;		None
  4756 ;; Return value:  Size  Location     Type
  4757 ;;		None               void
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0, pclath, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;Total ram usage:        1 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    6
  4772 ;; This function calls:
  4773 ;;		_WDT_Clearing
  4774 ;; This function is called by:
  4775 ;;		_main
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           
  4780                           ;psect for function _WDT_Main
  4781  1E56                     _WDT_Main:	
  4782                           
  4783                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4784                           
  4785                           ;incstack = 0
  4786                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4787  1E56  0021               	movlb	1	; select bank1
  4788  1E57  1C48               	btfss	_WDT^(0+128),0
  4789  1E58  0008               	return
  4790                           
  4791                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4792  1E59  3001               	movlw	1
  4793  1E5A  02C9               	subwf	(_WDT^(0+128)+1),f
  4794  1E5B  0849               	movf	(_WDT^(0+128)+1),w
  4795  1E5C  3AFF               	xorlw	255
  4796  1E5D  1903               	skipnz
  4797  1E5E  0008               	return
  4798                           
  4799                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4800  1E5F  3064               	movlw	100
  4801  1E60  0020               	movlb	0	; select bank0
  4802  1E61  00A0               	movwf	??_WDT_Main
  4803  1E62  0820               	movf	??_WDT_Main,w
  4804  1E63  0021               	movlb	1	; select bank1
  4805  1E64  00C9               	movwf	(_WDT^(0+128)+1)
  4806                           
  4807                           ;MCU_B1.c: 1101: WDT_Clearing();
  4808  1E65  3187  27FE         	fcall	_WDT_Clearing
  4809  1E67  0008               	return
  4810  1E68                     __end_of_WDT_Main:	
  4811                           
  4812                           	psect	text7
  4813  07FE                     __ptext7:	
  4814 ;; *************** function _WDT_Clearing *****************
  4815 ;; Defined at:
  4816 ;;		line 1107 in file "../src/MCU_B1.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;		None
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;		None               void
  4823 ;; Registers used:
  4824 ;;		None
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;Total ram usage:        0 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    5
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_WDT_Main
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function _WDT_Clearing
  4846  07FE                     _WDT_Clearing:	
  4847                           
  4848                           ;incstack = 0
  4849                           ; Regs used in _WDT_Clearing: []
  4850  07FE  0064               	clrwdt	;# 
  4851  07FF  0008               	return
  4852  0800                     __end_of_WDT_Clearing:	
  4853                           
  4854                           	psect	text8
  4855  1C45                     __ptext8:	
  4856 ;; *************** function _Temp_Main *****************
  4857 ;; Defined at:
  4858 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;		None
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;		None
  4863 ;; Return value:  Size  Location     Type
  4864 ;;		None               void
  4865 ;; Registers used:
  4866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;Total ram usage:        0 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    8
  4879 ;; This function calls:
  4880 ;;		_setTemp_Main
  4881 ;; This function is called by:
  4882 ;;		_main
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           
  4887                           ;psect for function _Temp_Main
  4888  1C45                     _Temp_Main:	
  4889                           
  4890                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4891                           
  4892                           ;incstack = 0
  4893                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4894  1C45  318F  2750         	fcall	_setTemp_Main
  4895  1C47  0008               	return
  4896  1C48                     __end_of_Temp_Main:	
  4897                           
  4898                           	psect	text9
  4899  0F50                     __ptext9:	
  4900 ;; *************** function _setTemp_Main *****************
  4901 ;; Defined at:
  4902 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;		None
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  error           1   72[BANK0 ] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;		None               void
  4909 ;; Registers used:
  4910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;Total ram usage:        3 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    7
  4923 ;; This function calls:
  4924 ;;		_getMain_All_Error_Status
  4925 ;;		_setBuz
  4926 ;;		_setProductData
  4927 ;; This function is called by:
  4928 ;;		_Temp_Main
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932                           
  4933                           ;psect for function _setTemp_Main
  4934  0F50                     _setTemp_Main:	
  4935                           
  4936                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4937                           
  4938                           ;incstack = 0
  4939                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4940  0F50  3000               	movlw	0
  4941  0F51  3192  2232  318F   	fcall	_getMain_All_Error_Status
  4942  0F54  0020               	movlb	0	; select bank0
  4943  0F55  00E6               	movwf	??_setTemp_Main
  4944  0F56  0866               	movf	??_setTemp_Main,w
  4945  0F57  00E8               	movwf	setTemp_Main@error
  4946                           
  4947                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4948  0F58  0021               	movlb	1	; select bank1
  4949  0F59  1C57               	btfss	_Temp^(0+128),0
  4950  0F5A  2FFC               	goto	l1702
  4951                           
  4952                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4953  0F5B  1957               	btfsc	_Temp^(0+128),2
  4954  0F5C  2F6C               	goto	l9446
  4955                           
  4956                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4957  0F5D  3001               	movlw	1
  4958  0F5E  07D8               	addwf	(_Temp^(0+128)+1),f
  4959  0F5F  3000               	movlw	0
  4960  0F60  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4961                           
  4962                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4963  0F61  3001               	movlw	1
  4964  0F62  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4965  0F63  30F4               	movlw	244
  4966  0F64  1903               	skipnz
  4967  0F65  0258               	subwf	(_Temp^(0+128)+1),w
  4968  0F66  1C03               	skipc
  4969  0F67  0008               	return
  4970                           
  4971                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4972  0F68  01D8               	clrf	(_Temp^(0+128)+1)
  4973  0F69  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4974                           
  4975                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4976  0F6A  1557               	bsf	_Temp^(0+128),2
  4977                           
  4978                           ;OverTemperature_B1.c: 70: }
  4979                           ;OverTemperature_B1.c: 71: } else {
  4980  0F6B  0008               	return
  4981  0F6C                     l9446:	
  4982                           
  4983                           ;OverTemperature_B1.c: 72: Temp.Time++;
  4984  0F6C  3001               	movlw	1
  4985  0F6D  07D8               	addwf	(_Temp^(0+128)+1),f
  4986  0F6E  3000               	movlw	0
  4987  0F6F  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4988                           
  4989                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  4990  0F70  3000               	movlw	0
  4991  0F71  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4992  0F72  3005               	movlw	5
  4993  0F73  1903               	skipnz
  4994  0F74  0258               	subwf	(_Temp^(0+128)+1),w
  4995  0F75  1C03               	skipc
  4996  0F76  0008               	return
  4997                           
  4998                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  4999  0F77  01D8               	clrf	(_Temp^(0+128)+1)
  5000  0F78  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5001                           
  5002                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5003  0F79  3008               	movlw	8
  5004  0F7A  3ED7               	addlw	_Temp& (0+255)
  5005  0F7B  0086               	movwf	6
  5006  0F7C  0187               	clrf	7
  5007  0F7D  0016               	moviw fsr1++
  5008  0F7E  0401               	iorwf	1,w
  5009  0F7F  1903               	skipnz
  5010  0F80  2FF6               	goto	l1707
  5011  0F81  300A               	movlw	10
  5012  0F82  3ED7               	addlw	_Temp& (0+255)
  5013  0F83  0086               	movwf	6
  5014  0F84  0187               	clrf	7
  5015  0F85  0016               	moviw fsr1++
  5016  0F86  0401               	iorwf	1,w
  5017  0F87  1903               	skipnz
  5018  0F88  2FF6               	goto	l1707
  5019                           
  5020                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5021  0F89  1157               	bcf	_Temp^(0+128),2
  5022                           
  5023                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5024  0F8A  300A               	movlw	10
  5025  0F8B  3ED7               	addlw	_Temp& (0+255)
  5026  0F8C  0086               	movwf	6
  5027  0F8D  0187               	clrf	7
  5028  0F8E  3008               	movlw	8
  5029  0F8F  3ED7               	addlw	_Temp& (0+255)
  5030  0F90  0084               	movwf	4
  5031  0F91  0185               	clrf	5
  5032  0F92  3F40               	moviw [0]fsr1
  5033  0F93  0700               	addwf	0,w
  5034  0F94  0020               	movlb	0	; select bank0
  5035  0F95  00E6               	movwf	??_setTemp_Main
  5036  0F96  3101               	addfsr 0,1
  5037  0F97  3F41               	moviw [1]fsr1
  5038  0F98  3D00               	addwfc	0,w
  5039  0F99  00E7               	movwf	??_setTemp_Main+1
  5040  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5041  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5042  0F9C  0866               	movf	??_setTemp_Main,w
  5043  0F9D  0021               	movlb	1	; select bank1
  5044  0F9E  00DD               	movwf	(_Temp^(0+128)+6)
  5045  0F9F  0020               	movlb	0	; select bank0
  5046  0FA0  0867               	movf	??_setTemp_Main+1,w
  5047  0FA1  0021               	movlb	1	; select bank1
  5048  0FA2  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5049                           
  5050                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5051  0FA3  3090               	movlw	144
  5052  0FA4  00E5               	movwf	(_Temp^(0+128)+14)
  5053  0FA5  3001               	movlw	1
  5054  0FA6  00E6               	movwf	(_Temp^(0+128)+15)
  5055                           
  5056                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5057  0FA7  3059               	movlw	89
  5058  0FA8  00E7               	movwf	(_Temp^(0+128)+16)
  5059  0FA9  3001               	movlw	1
  5060  0FAA  00E8               	movwf	(_Temp^(0+128)+17)
  5061                           
  5062                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5063  0FAB  1CD7               	btfss	_Temp^(0+128),1
  5064  0FAC  2FCD               	goto	l9478
  5065                           
  5066                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5067  0FAD  0866               	movf	((_Temp+1)^(0+128)+14),w
  5068  0FAE  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5069  0FAF  1D03               	skipz
  5070  0FB0  2FB3               	goto	u10265
  5071  0FB1  0865               	movf	(_Temp^(0+128)+14),w
  5072  0FB2  025D               	subwf	(_Temp^(0+128)+6),w
  5073  0FB3                     u10265:	
  5074  0FB3  1C03               	skipc
  5075  0FB4  2FCB               	goto	l9476
  5076                           
  5077                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5078  0FB5  3001               	movlw	1
  5079  0FB6  0020               	movlb	0	; select bank0
  5080  0FB7  00E6               	movwf	??_setTemp_Main
  5081  0FB8  0866               	movf	??_setTemp_Main,w
  5082  0FB9  0021               	movlb	1	; select bank1
  5083  0FBA  07DA               	addwf	(_Temp^(0+128)+3),f
  5084                           
  5085                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5086  0FBB  3003               	movlw	3
  5087  0FBC  025A               	subwf	(_Temp^(0+128)+3),w
  5088  0FBD  1C03               	skipc
  5089  0FBE  2FE3               	goto	l9490
  5090                           
  5091                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5092  0FBF  01DA               	clrf	(_Temp^(0+128)+3)
  5093                           
  5094                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5095  0FC0  10D7               	bcf	_Temp^(0+128),1
  5096                           
  5097                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5098  0FC1  3064               	movlw	100
  5099  0FC2  0020               	movlb	0	; select bank0
  5100  0FC3  00A9               	movwf	setBuz@time
  5101  0FC4  3000               	movlw	0
  5102  0FC5  00AA               	movwf	setBuz@time+1
  5103  0FC6  3002               	movlw	2
  5104  0FC7  3197  27A7  318F   	fcall	_setBuz
  5105                           
  5106                           ;OverTemperature_B1.c: 103: }
  5107                           ;OverTemperature_B1.c: 104: } else {
  5108  0FCA  2FE3               	goto	l9490
  5109  0FCB                     l9476:	
  5110                           
  5111                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5112  0FCB  0021               	movlb	1	; select bank1
  5113  0FCC  2FE2               	goto	l9488
  5114  0FCD                     l9478:	
  5115                           ;OverTemperature_B1.c: 106: }
  5116                           ;OverTemperature_B1.c: 107: } else {
  5117                           
  5118                           
  5119                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5120  0FCD  085E               	movf	((_Temp+1)^(0+128)+6),w
  5121  0FCE  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5122  0FCF  1D03               	skipz
  5123  0FD0  2FD3               	goto	u10285
  5124  0FD1  085D               	movf	(_Temp^(0+128)+6),w
  5125  0FD2  0267               	subwf	(_Temp^(0+128)+16),w
  5126  0FD3                     u10285:	
  5127  0FD3  1C03               	skipc
  5128  0FD4  2FE2               	goto	l9488
  5129                           
  5130                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5131  0FD5  3001               	movlw	1
  5132  0FD6  0020               	movlb	0	; select bank0
  5133  0FD7  00E6               	movwf	??_setTemp_Main
  5134  0FD8  0866               	movf	??_setTemp_Main,w
  5135  0FD9  0021               	movlb	1	; select bank1
  5136  0FDA  07DA               	addwf	(_Temp^(0+128)+3),f
  5137                           
  5138                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5139  0FDB  3003               	movlw	3
  5140  0FDC  025A               	subwf	(_Temp^(0+128)+3),w
  5141  0FDD  1C03               	skipc
  5142  0FDE  2FE3               	goto	l9490
  5143                           
  5144                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5145  0FDF  01DA               	clrf	(_Temp^(0+128)+3)
  5146                           
  5147                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5148  0FE0  14D7               	bsf	_Temp^(0+128),1
  5149                           
  5150                           ;OverTemperature_B1.c: 113: }
  5151                           ;OverTemperature_B1.c: 114: } else {
  5152  0FE1  2FE3               	goto	l9490
  5153  0FE2                     l9488:	
  5154                           
  5155                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5156  0FE2  01DA               	clrf	(_Temp^(0+128)+3)
  5157  0FE3                     l9490:	
  5158                           
  5159                           ;OverTemperature_B1.c: 116: }
  5160                           ;OverTemperature_B1.c: 117: }
  5161                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5162  0FE3  0021               	movlb	1	; select bank1
  5163  0FE4  085E               	movf	((_Temp+1)^(0+128)+6),w
  5164  0FE5  0020               	movlb	0	; select bank0
  5165  0FE6  00E6               	movwf	??_setTemp_Main
  5166  0FE7  0866               	movf	??_setTemp_Main,w
  5167  0FE8  00E2               	movwf	setProductData@value
  5168  0FE9  3018               	movlw	24
  5169  0FEA  319D  2573  318F   	fcall	_setProductData
  5170                           
  5171                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5172  0FED  0021               	movlb	1	; select bank1
  5173  0FEE  085D               	movf	(_Temp^(0+128)+6),w
  5174  0FEF  0020               	movlb	0	; select bank0
  5175  0FF0  00E6               	movwf	??_setTemp_Main
  5176  0FF1  0866               	movf	??_setTemp_Main,w
  5177  0FF2  00E2               	movwf	setProductData@value
  5178  0FF3  3019               	movlw	25
  5179  0FF4  319D  2573         	fcall	_setProductData
  5180  0FF6                     l1707:	
  5181                           
  5182                           ;OverTemperature_B1.c: 135: }
  5183                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5184  0FF6  0021               	movlb	1	; select bank1
  5185  0FF7  01DF               	clrf	(_Temp^(0+128)+8)
  5186  0FF8  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5187                           
  5188                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5189  0FF9  01E1               	clrf	(_Temp^(0+128)+10)
  5190  0FFA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5191                           
  5192                           ;OverTemperature_B1.c: 138: }
  5193                           ;OverTemperature_B1.c: 139: }
  5194                           ;OverTemperature_B1.c: 141: } else {
  5195  0FFB  0008               	return
  5196  0FFC                     l1702:	
  5197                           
  5198                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5199  0FFC  1C20               	btfss	_myMain^(0+128),0
  5200  0FFD  0008               	return
  5201                           
  5202                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5203  0FFE  1457               	bsf	_Temp^(0+128),0
  5204  0FFF  0008               	return
  5205  1000                     __end_of_setTemp_Main:	
  5206                           
  5207                           	psect	text10
  5208  1C42                     __ptext10:	
  5209 ;; *************** function _Temp_Initialization *****************
  5210 ;; Defined at:
  5211 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;		None
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;		None               void
  5218 ;; Registers used:
  5219 ;;		status,2, status,0, pclath, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;Total ram usage:        0 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    6
  5232 ;; This function calls:
  5233 ;;		_setTemp_Initialization
  5234 ;; This function is called by:
  5235 ;;		_main
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _Temp_Initialization
  5241  1C42                     _Temp_Initialization:	
  5242                           
  5243                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5244                           
  5245                           ;incstack = 0
  5246                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5247  1C42  3180  2003         	fcall	_setTemp_Initialization
  5248  1C44  0008               	return
  5249  1C45                     __end_of_Temp_Initialization:	
  5250                           
  5251                           	psect	text11
  5252  0003                     __ptext11:	
  5253 ;; *************** function _setTemp_Initialization *****************
  5254 ;; Defined at:
  5255 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;		None
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;		None               void
  5262 ;; Registers used:
  5263 ;;		None
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;Total ram usage:        0 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    5
  5276 ;; This function calls:
  5277 ;;		Nothing
  5278 ;; This function is called by:
  5279 ;;		_Temp_Initialization
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _setTemp_Initialization
  5285  0003                     _setTemp_Initialization:	
  5286                           
  5287                           ;incstack = 0
  5288                           ; Regs used in _setTemp_Initialization: []
  5289  0003  0008               	return
  5290  0004                     __end_of_setTemp_Initialization:	
  5291                           
  5292                           	psect	text12
  5293  1C9B                     __ptext12:	
  5294 ;; *************** function _Switch_Main *****************
  5295 ;; Defined at:
  5296 ;;		line 72 in file "../src/Switch_B1.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;		None
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;		None
  5301 ;; Return value:  Size  Location     Type
  5302 ;;		None               void
  5303 ;; Registers used:
  5304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5314 ;;Total ram usage:        0 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:   10
  5317 ;; This function calls:
  5318 ;;		_TouchPower
  5319 ;;		_setSw_Main
  5320 ;; This function is called by:
  5321 ;;		_main
  5322 ;; This function uses a non-reentrant model
  5323 ;;
  5324                           
  5325                           
  5326                           ;psect for function _Switch_Main
  5327  1C9B                     _Switch_Main:	
  5328                           
  5329                           ;Switch_B1.c: 75: setSw_Main(1);
  5330                           
  5331                           ;incstack = 0
  5332                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5333  1C9B  3001               	movlw	1
  5334  1C9C  3181  21C1  319C   	fcall	_setSw_Main
  5335                           
  5336                           ;Switch_B1.c: 87: TouchPower();
  5337  1C9F  319E  26CC         	fcall	_TouchPower
  5338  1CA1  0008               	return
  5339  1CA2                     __end_of_Switch_Main:	
  5340                           
  5341                           	psect	text13
  5342  01C1                     __ptext13:	
  5343 ;; *************** function _setSw_Main *****************
  5344 ;; Defined at:
  5345 ;;		line 121 in file "../src/Switch_B1.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  sw              1    wreg     unsigned char 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  sw              1   78[BANK0 ] unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;		None               void
  5352 ;; Registers used:
  5353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;Total ram usage:        3 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    9
  5366 ;; This function calls:
  5367 ;;		_SwPointSelect
  5368 ;;		_getMain_All_Error_Status
  5369 ;;		_getSw_KeyStatus
  5370 ;;		_setBuz
  5371 ;;		_setDimmerLights_AdjOn
  5372 ;;		_setDimmerLights_SwOff
  5373 ;;		_setDimmerLights_SwOn
  5374 ;;		_setRF_Learn
  5375 ;; This function is called by:
  5376 ;;		_Switch_Main
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function _setSw_Main
  5382  01C1                     _setSw_Main:	
  5383                           
  5384                           ;incstack = 0
  5385                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5386                           ;setSw_Main@sw stored from wreg
  5387  01C1  0020               	movlb	0	; select bank0
  5388  01C2  00EE               	movwf	setSw_Main@sw
  5389                           
  5390                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5391  01C3  086E               	movf	setSw_Main@sw,w
  5392  01C4  319D  2508  3181   	fcall	_SwPointSelect
  5393                           
  5394                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5395  01C7  0877               	movf	_Sw,w
  5396  01C8  0086               	movwf	6
  5397  01C9  3001               	movlw	1	; select bank2/3
  5398  01CA  0087               	movwf	7
  5399  01CB  1C01               	btfss	1,0
  5400  01CC  2B2B               	goto	l2403
  5401                           
  5402                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5403  01CD  3000               	movlw	0
  5404  01CE  3192  2232  3181   	fcall	_getMain_All_Error_Status
  5405  01D1  3800               	iorlw	0
  5406  01D2  1D03               	skipz
  5407  01D3  29EF               	goto	l9626
  5408                           
  5409                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5410  01D4  0A77               	incf	_Sw,w
  5411  01D5  0086               	movwf	6
  5412  01D6  3001               	movlw	1	; select bank2/3
  5413  01D7  0087               	movwf	7
  5414  01D8  1081               	bcf	1,1
  5415                           
  5416                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5417  01D9  0020               	movlb	0	; select bank0
  5418  01DA  086E               	movf	setSw_Main@sw,w
  5419  01DB  3188  2000  3181   	fcall	_getSw_KeyStatus
  5420  01DE  3A01               	xorlw	1
  5421  01DF  3000               	movlw	0
  5422  01E0  1903               	skipnz
  5423  01E1  3001               	movlw	1
  5424  01E2  0020               	movlb	0	; select bank0
  5425  01E3  00EC               	movwf	??_setSw_Main
  5426  01E4  0877               	movf	_Sw,w
  5427  01E5  0086               	movwf	6
  5428  01E6  3001               	movlw	1	; select bank2/3
  5429  01E7  0087               	movwf	7
  5430  01E8  0DEC               	rlf	??_setSw_Main,f
  5431  01E9  0801               	movf	1,w
  5432  01EA  066C               	xorwf	??_setSw_Main,w
  5433  01EB  39FD               	andlw	-3
  5434  01EC  066C               	xorwf	??_setSw_Main,w
  5435  01ED  0081               	movwf	1
  5436                           
  5437                           ;Switch_B1.c: 128: } else {
  5438  01EE  2A04               	goto	l2405
  5439  01EF                     l9626:	
  5440                           
  5441                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5442  01EF  0A77               	incf	_Sw,w
  5443  01F0  0086               	movwf	6
  5444  01F1  3001               	movlw	1	; select bank2/3
  5445  01F2  0087               	movwf	7
  5446  01F3  1881               	btfsc	1,1
  5447  01F4  2A04               	goto	l2405
  5448                           
  5449                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5450  01F5  0A77               	incf	_Sw,w
  5451  01F6  0086               	movwf	6
  5452  01F7  3001               	movlw	1	; select bank2/3
  5453  01F8  0087               	movwf	7
  5454  01F9  1481               	bsf	1,1
  5455                           
  5456                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5457  01FA  0877               	movf	_Sw,w
  5458  01FB  0086               	movwf	6
  5459  01FC  3001               	movlw	1	; select bank2/3
  5460  01FD  0087               	movwf	7
  5461  01FE  1081               	bcf	1,1
  5462                           
  5463                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5464  01FF  0877               	movf	_Sw,w
  5465  0200  0086               	movwf	6
  5466  0201  3001               	movlw	1	; select bank2/3
  5467  0202  0087               	movwf	7
  5468  0203  1501               	bsf	1,2
  5469  0204                     l2405:	
  5470                           
  5471                           ;Switch_B1.c: 133: }
  5472                           ;Switch_B1.c: 134: }
  5473                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5474  0204  0877               	movf	_Sw,w
  5475  0205  0086               	movwf	6
  5476  0206  3001               	movlw	1	; select bank2/3
  5477  0207  0087               	movwf	7
  5478  0208  1C81               	btfss	1,1
  5479  0209  2AD4               	goto	l9676
  5480                           
  5481                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5482  020A  0877               	movf	_Sw,w
  5483  020B  0086               	movwf	6
  5484  020C  3001               	movlw	1	; select bank2/3
  5485  020D  0087               	movwf	7
  5486  020E  1901               	btfsc	1,2
  5487  020F  2A32               	goto	l9642
  5488                           
  5489                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5490  0210  3001               	movlw	1
  5491  0211  0020               	movlb	0	; select bank0
  5492  0212  00EC               	movwf	??_setSw_Main
  5493  0213  0877               	movf	_Sw,w
  5494  0214  3E02               	addlw	2
  5495  0215  0086               	movwf	6
  5496  0216  3001               	movlw	1	; select bank2/3
  5497  0217  0087               	movwf	7
  5498  0218  086C               	movf	??_setSw_Main,w
  5499  0219  0781               	addwf	1,f
  5500                           
  5501                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5502  021A  0877               	movf	_Sw,w
  5503  021B  3E02               	addlw	2
  5504  021C  0086               	movwf	6
  5505  021D  3001               	movlw	1	; select bank2/3
  5506  021E  0087               	movwf	7
  5507  021F  3005               	movlw	5
  5508  0220  0201               	subwf	1,w
  5509  0221  1C03               	skipc
  5510  0222  0008               	return
  5511                           
  5512                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5513  0223  0877               	movf	_Sw,w
  5514  0224  3E02               	addlw	2
  5515  0225  0086               	movwf	6
  5516  0226  3001               	movlw	1	; select bank2/3
  5517  0227  0087               	movwf	7
  5518  0228  0181               	clrf	1
  5519                           
  5520                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5521  0229  0877               	movf	_Sw,w
  5522  022A  0086               	movwf	6
  5523  022B  3001               	movlw	1	; select bank2/3
  5524  022C  0087               	movwf	7
  5525  022D  1501               	bsf	1,2
  5526                           
  5527                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5528  022E  086E               	movf	setSw_Main@sw,w
  5529  022F  3194  2498         	fcall	_setDimmerLights_SwOn
  5530                           
  5531                           ;Switch_B1.c: 147: }
  5532                           ;Switch_B1.c: 148: } else {
  5533  0231  0008               	return
  5534  0232                     l9642:	
  5535                           
  5536                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5537  0232  0877               	movf	_Sw,w
  5538  0233  0086               	movwf	6
  5539  0234  3001               	movlw	1	; select bank2/3
  5540  0235  0087               	movwf	7
  5541  0236  1981               	btfsc	1,3
  5542  0237  2A64               	goto	l9652
  5543                           
  5544                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5545  0238  0877               	movf	_Sw,w
  5546  0239  3E03               	addlw	3
  5547  023A  0086               	movwf	6
  5548  023B  3001               	movlw	1	; select bank2/3
  5549  023C  0087               	movwf	7
  5550  023D  3001               	movlw	1
  5551  023E  0781               	addwf	1,f
  5552  023F  3141               	addfsr 1,1
  5553  0240  1803               	skipnc
  5554  0241  0A81               	incf	1,f
  5555                           
  5556                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5557  0242  0877               	movf	_Sw,w
  5558  0243  3E03               	addlw	3
  5559  0244  0086               	movwf	6
  5560  0245  3001               	movlw	1	; select bank2/3
  5561  0246  0087               	movwf	7
  5562  0247  3F40               	moviw [0]fsr1
  5563  0248  0020               	movlb	0	; select bank0
  5564  0249  00EC               	movwf	??_setSw_Main
  5565  024A  3F41               	moviw [1]fsr1
  5566  024B  00ED               	movwf	??_setSw_Main+1
  5567  024C  3000               	movlw	0
  5568  024D  026D               	subwf	??_setSw_Main+1,w
  5569  024E  3096               	movlw	150
  5570  024F  1903               	skipnz
  5571  0250  026C               	subwf	??_setSw_Main,w
  5572  0251  1C03               	skipc
  5573  0252  0008               	return
  5574                           
  5575                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5576  0253  0877               	movf	_Sw,w
  5577  0254  3E03               	addlw	3
  5578  0255  0086               	movwf	6
  5579  0256  3001               	movlw	1	; select bank2/3
  5580  0257  0087               	movwf	7
  5581  0258  3000               	movlw	0
  5582  0259  3FC0               	movwi [0]fsr1
  5583  025A  3FC1               	movwi [1]fsr1
  5584                           
  5585                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5586  025B  0877               	movf	_Sw,w
  5587  025C  0086               	movwf	6
  5588  025D  3001               	movlw	1	; select bank2/3
  5589  025E  0087               	movwf	7
  5590  025F  1581               	bsf	1,3
  5591                           
  5592                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5593  0260  086E               	movf	setSw_Main@sw,w
  5594  0261  3192  2299         	fcall	_setDimmerLights_AdjOn
  5595                           
  5596                           ;Switch_B1.c: 159: }
  5597                           ;Switch_B1.c: 160: } else {
  5598  0263  0008               	return
  5599  0264                     l9652:	
  5600                           
  5601                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5602  0264  0877               	movf	_Sw,w
  5603  0265  0086               	movwf	6
  5604  0266  3001               	movlw	1	; select bank2/3
  5605  0267  0087               	movwf	7
  5606  0268  1A01               	btfsc	1,4
  5607  0269  2AA2               	goto	l9666
  5608                           
  5609                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5610  026A  0877               	movf	_Sw,w
  5611  026B  3E05               	addlw	5
  5612  026C  0086               	movwf	6
  5613  026D  3001               	movlw	1	; select bank2/3
  5614  026E  0087               	movwf	7
  5615  026F  3001               	movlw	1
  5616  0270  0781               	addwf	1,f
  5617  0271  3141               	addfsr 1,1
  5618  0272  1803               	skipnc
  5619  0273  0A81               	incf	1,f
  5620                           
  5621                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5622  0274  0877               	movf	_Sw,w
  5623  0275  3E05               	addlw	5
  5624  0276  0086               	movwf	6
  5625  0277  3001               	movlw	1	; select bank2/3
  5626  0278  0087               	movwf	7
  5627  0279  3F40               	moviw [0]fsr1
  5628  027A  0020               	movlb	0	; select bank0
  5629  027B  00EC               	movwf	??_setSw_Main
  5630  027C  3F41               	moviw [1]fsr1
  5631  027D  00ED               	movwf	??_setSw_Main+1
  5632  027E  3000               	movlw	0
  5633  027F  026D               	subwf	??_setSw_Main+1,w
  5634  0280  3096               	movlw	150
  5635  0281  1903               	skipnz
  5636  0282  026C               	subwf	??_setSw_Main,w
  5637  0283  1C03               	skipc
  5638  0284  0008               	return
  5639                           
  5640                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5641  0285  0877               	movf	_Sw,w
  5642  0286  3E05               	addlw	5
  5643  0287  0086               	movwf	6
  5644  0288  3001               	movlw	1	; select bank2/3
  5645  0289  0087               	movwf	7
  5646  028A  3000               	movlw	0
  5647  028B  3FC0               	movwi [0]fsr1
  5648  028C  3FC1               	movwi [1]fsr1
  5649                           
  5650                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5651  028D  0877               	movf	_Sw,w
  5652  028E  0086               	movwf	6
  5653  028F  3001               	movlw	1	; select bank2/3
  5654  0290  0087               	movwf	7
  5655  0291  1601               	bsf	1,4
  5656                           
  5657                           ;Switch_B1.c: 168: setRF_Learn(1);
  5658  0292  3001               	movlw	1
  5659  0293  319E  268E  3181   	fcall	_setRF_Learn
  5660                           
  5661                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5662  0296  0021               	movlb	1	; select bank1
  5663  0297  1EA0               	btfss	_myMain^(0+128),5
  5664  0298  0008               	return
  5665                           
  5666                           ;Switch_B1.c: 171: setBuz(2, 100);
  5667  0299  3064               	movlw	100
  5668  029A  0020               	movlb	0	; select bank0
  5669  029B  00A9               	movwf	setBuz@time
  5670  029C  3000               	movlw	0
  5671  029D  00AA               	movwf	setBuz@time+1
  5672  029E  3002               	movlw	2
  5673  029F  3197  27A7         	fcall	_setBuz
  5674                           
  5675                           ;Switch_B1.c: 172: }
  5676                           ;Switch_B1.c: 174: }
  5677                           ;Switch_B1.c: 175: } else {
  5678  02A1  0008               	return
  5679  02A2                     l9666:	
  5680                           
  5681                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5682  02A2  0877               	movf	_Sw,w
  5683  02A3  0086               	movwf	6
  5684  02A4  3001               	movlw	1	; select bank2/3
  5685  02A5  0087               	movwf	7
  5686  02A6  1A81               	btfsc	1,5
  5687  02A7  0008               	return
  5688                           
  5689                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5690  02A8  0877               	movf	_Sw,w
  5691  02A9  3E07               	addlw	7
  5692  02AA  0086               	movwf	6
  5693  02AB  3001               	movlw	1	; select bank2/3
  5694  02AC  0087               	movwf	7
  5695  02AD  3001               	movlw	1
  5696  02AE  0781               	addwf	1,f
  5697  02AF  3141               	addfsr 1,1
  5698  02B0  1803               	skipnc
  5699  02B1  0A81               	incf	1,f
  5700                           
  5701                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5702  02B2  0877               	movf	_Sw,w
  5703  02B3  3E07               	addlw	7
  5704  02B4  0086               	movwf	6
  5705  02B5  3001               	movlw	1	; select bank2/3
  5706  02B6  0087               	movwf	7
  5707  02B7  3F40               	moviw [0]fsr1
  5708  02B8  0020               	movlb	0	; select bank0
  5709  02B9  00EC               	movwf	??_setSw_Main
  5710  02BA  3F41               	moviw [1]fsr1
  5711  02BB  00ED               	movwf	??_setSw_Main+1
  5712  02BC  3001               	movlw	1
  5713  02BD  026D               	subwf	??_setSw_Main+1,w
  5714  02BE  302C               	movlw	44
  5715  02BF  1903               	skipnz
  5716  02C0  026C               	subwf	??_setSw_Main,w
  5717  02C1  1C03               	skipc
  5718  02C2  0008               	return
  5719                           
  5720                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5721  02C3  0877               	movf	_Sw,w
  5722  02C4  3E07               	addlw	7
  5723  02C5  0086               	movwf	6
  5724  02C6  3001               	movlw	1	; select bank2/3
  5725  02C7  0087               	movwf	7
  5726  02C8  3000               	movlw	0
  5727  02C9  3FC0               	movwi [0]fsr1
  5728  02CA  3FC1               	movwi [1]fsr1
  5729                           
  5730                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5731  02CB  0877               	movf	_Sw,w
  5732  02CC  0086               	movwf	6
  5733  02CD  3001               	movlw	1	; select bank2/3
  5734  02CE  0087               	movwf	7
  5735  02CF  1681               	bsf	1,5
  5736                           
  5737                           ;Switch_B1.c: 183: setRF_Learn(0);
  5738  02D0  3000               	movlw	0
  5739  02D1  319E  268E         	fcall	_setRF_Learn
  5740                           
  5741                           ;Switch_B1.c: 186: }
  5742                           ;Switch_B1.c: 187: }
  5743                           ;Switch_B1.c: 188: }
  5744                           ;Switch_B1.c: 189: }
  5745                           ;Switch_B1.c: 190: }
  5746                           ;Switch_B1.c: 191: } else {
  5747  02D3  0008               	return
  5748  02D4                     l9676:	
  5749                           
  5750                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5751  02D4  0877               	movf	_Sw,w
  5752  02D5  0086               	movwf	6
  5753  02D6  3001               	movlw	1	; select bank2/3
  5754  02D7  0087               	movwf	7
  5755  02D8  1D01               	btfss	1,2
  5756  02D9  0008               	return
  5757                           
  5758                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5759  02DA  3001               	movlw	1
  5760  02DB  0020               	movlb	0	; select bank0
  5761  02DC  00EC               	movwf	??_setSw_Main
  5762  02DD  0877               	movf	_Sw,w
  5763  02DE  3E02               	addlw	2
  5764  02DF  0086               	movwf	6
  5765  02E0  3001               	movlw	1	; select bank2/3
  5766  02E1  0087               	movwf	7
  5767  02E2  086C               	movf	??_setSw_Main,w
  5768  02E3  0781               	addwf	1,f
  5769                           
  5770                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5771  02E4  0877               	movf	_Sw,w
  5772  02E5  3E02               	addlw	2
  5773  02E6  0086               	movwf	6
  5774  02E7  3001               	movlw	1	; select bank2/3
  5775  02E8  0087               	movwf	7
  5776  02E9  3005               	movlw	5
  5777  02EA  0201               	subwf	1,w
  5778  02EB  1C03               	skipc
  5779  02EC  0008               	return
  5780                           
  5781                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5782  02ED  0877               	movf	_Sw,w
  5783  02EE  3E02               	addlw	2
  5784  02EF  0086               	movwf	6
  5785  02F0  3001               	movlw	1	; select bank2/3
  5786  02F1  0087               	movwf	7
  5787  02F2  0181               	clrf	1
  5788                           
  5789                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5790  02F3  0877               	movf	_Sw,w
  5791  02F4  0086               	movwf	6
  5792  02F5  3001               	movlw	1	; select bank2/3
  5793  02F6  0087               	movwf	7
  5794  02F7  1101               	bcf	1,2
  5795                           
  5796                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5797  02F8  0877               	movf	_Sw,w
  5798  02F9  3E03               	addlw	3
  5799  02FA  0086               	movwf	6
  5800  02FB  3001               	movlw	1	; select bank2/3
  5801  02FC  0087               	movwf	7
  5802  02FD  3000               	movlw	0
  5803  02FE  3FC0               	movwi [0]fsr1
  5804  02FF  3FC1               	movwi [1]fsr1
  5805                           
  5806                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5807  0300  0877               	movf	_Sw,w
  5808  0301  0086               	movwf	6
  5809  0302  3001               	movlw	1	; select bank2/3
  5810  0303  0087               	movwf	7
  5811  0304  1181               	bcf	1,3
  5812                           
  5813                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5814  0305  0877               	movf	_Sw,w
  5815  0306  3E05               	addlw	5
  5816  0307  0086               	movwf	6
  5817  0308  3001               	movlw	1	; select bank2/3
  5818  0309  0087               	movwf	7
  5819  030A  3000               	movlw	0
  5820  030B  3FC0               	movwi [0]fsr1
  5821  030C  3FC1               	movwi [1]fsr1
  5822                           
  5823                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5824  030D  0877               	movf	_Sw,w
  5825  030E  0086               	movwf	6
  5826  030F  3001               	movlw	1	; select bank2/3
  5827  0310  0087               	movwf	7
  5828  0311  1201               	bcf	1,4
  5829                           
  5830                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5831  0312  0877               	movf	_Sw,w
  5832  0313  3E07               	addlw	7
  5833  0314  0086               	movwf	6
  5834  0315  3001               	movlw	1	; select bank2/3
  5835  0316  0087               	movwf	7
  5836  0317  3000               	movlw	0
  5837  0318  3FC0               	movwi [0]fsr1
  5838  0319  3FC1               	movwi [1]fsr1
  5839                           
  5840                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5841  031A  0877               	movf	_Sw,w
  5842  031B  0086               	movwf	6
  5843  031C  3001               	movlw	1	; select bank2/3
  5844  031D  0087               	movwf	7
  5845  031E  1281               	bcf	1,5
  5846                           
  5847                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5848  031F  0021               	movlb	1	; select bank1
  5849  0320  1852               	btfsc	_SwDetect^(0+128),0
  5850  0321  2B27               	goto	l9702
  5851                           
  5852                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5853  0322  0020               	movlb	0	; select bank0
  5854  0323  086E               	movf	setSw_Main@sw,w
  5855  0324  3197  274F  3181   	fcall	_setDimmerLights_SwOff
  5856  0327                     l9702:	
  5857                           
  5858                           ;Switch_B1.c: 206: }
  5859                           ;Switch_B1.c: 209: setRF_Learn(0);
  5860  0327  3000               	movlw	0
  5861  0328  319E  268E         	fcall	_setRF_Learn
  5862                           
  5863                           ;Switch_B1.c: 211: }
  5864                           ;Switch_B1.c: 212: }
  5865                           ;Switch_B1.c: 213: }
  5866                           ;Switch_B1.c: 214: } else {
  5867  032A  0008               	return
  5868  032B                     l2403:	
  5869                           
  5870                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5871  032B  0021               	movlb	1	; select bank1
  5872  032C  1C20               	btfss	_myMain^(0+128),0
  5873  032D  0008               	return
  5874                           
  5875                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5876  032E  0877               	movf	_Sw,w
  5877  032F  0086               	movwf	6
  5878  0330  3001               	movlw	1	; select bank2/3
  5879  0331  0087               	movwf	7
  5880  0332  1401               	bsf	1,0
  5881  0333  0008               	return
  5882  0334                     __end_of_setSw_Main:	
  5883                           
  5884                           	psect	text14
  5885  1E8E                     __ptext14:	
  5886 ;; *************** function _setRF_Learn *****************
  5887 ;; Defined at:
  5888 ;;		line 23 in file "../src/RF_Control_B1.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;  command         1    wreg     unsigned char 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  command         1    1[BANK0 ] unsigned char 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;		None               void
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;Total ram usage:        2 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    5
  5909 ;; This function calls:
  5910 ;;		Nothing
  5911 ;; This function is called by:
  5912 ;;		_setSw_Main
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           
  5917                           ;psect for function _setRF_Learn
  5918  1E8E                     _setRF_Learn:	
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5922                           ;setRF_Learn@command stored from wreg
  5923  1E8E  0020               	movlb	0	; select bank0
  5924  1E8F  00A1               	movwf	setRF_Learn@command
  5925                           
  5926                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5927  1E90  0821               	movf	setRF_Learn@command,w
  5928  1E91  3A01               	xorlw	1
  5929  1E92  3000               	movlw	0
  5930  1E93  1903               	skipnz
  5931  1E94  3001               	movlw	1
  5932  1E95  00A0               	movwf	??_setRF_Learn
  5933  1E96  0EA0               	swapf	??_setRF_Learn,f
  5934  1E97  0DA0               	rlf	??_setRF_Learn,f
  5935  1E98  0DA0               	rlf	??_setRF_Learn,f
  5936  1E99  0021               	movlb	1	; select bank1
  5937  1E9A  083A               	movf	_RF1^(0+128),w
  5938  1E9B  0020               	movlb	0	; select bank0
  5939  1E9C  0620               	xorwf	??_setRF_Learn,w
  5940  1E9D  39BF               	andlw	-65
  5941  1E9E  0620               	xorwf	??_setRF_Learn,w
  5942  1E9F  0021               	movlb	1	; select bank1
  5943  1EA0  00BA               	movwf	_RF1^(0+128)
  5944  1EA1  0008               	return
  5945  1EA2                     __end_of_setRF_Learn:	
  5946                           
  5947                           	psect	text15
  5948  1299                     __ptext15:	
  5949 ;; *************** function _setDimmerLights_AdjOn *****************
  5950 ;; Defined at:
  5951 ;;		line 454 in file "../src/Dimmer_B1.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  sw              1    wreg     unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  sw              1    2[BANK0 ] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;		None               void
  5958 ;; Registers used:
  5959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;Total ram usage:        1 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    6
  5972 ;; This function calls:
  5973 ;;		_DimmerLightsPointSelect
  5974 ;;		_getDimmerLights_Allow_Condition
  5975 ;; This function is called by:
  5976 ;;		_setSw_Main
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           
  5981                           ;psect for function _setDimmerLights_AdjOn
  5982  1299                     _setDimmerLights_AdjOn:	
  5983                           
  5984                           ;incstack = 0
  5985                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5986                           ;setDimmerLights_AdjOn@sw stored from wreg
  5987  1299  0020               	movlb	0	; select bank0
  5988  129A  00A2               	movwf	setDimmerLights_AdjOn@sw
  5989                           
  5990                           ;Dimmer_B1.c: 455: DimmerLightsPointSelect(sw);
  5991  129B  0822               	movf	setDimmerLights_AdjOn@sw,w
  5992  129C  319C  24DC  3192   	fcall	_DimmerLightsPointSelect
  5993                           
  5994                           ;Dimmer_B1.c: 465: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  5995  129F  0875               	movf	_DimmerLights,w
  5996  12A0  3E0A               	addlw	10
  5997  12A1  0086               	movwf	6
  5998  12A2  3001               	movlw	1	; select bank2/3
  5999  12A3  0087               	movwf	7
  6000  12A4  1881               	btfsc	1,1
  6001  12A5  0008               	return
  6002  12A6  0020               	movlb	0	; select bank0
  6003  12A7  0822               	movf	setDimmerLights_AdjOn@sw,w
  6004  12A8  319C  2460  3192   	fcall	_getDimmerLights_Allow_Condition
  6005  12AB  3800               	iorlw	0
  6006  12AC  1D03               	skipz
  6007  12AD  0008               	return
  6008                           
  6009                           ;Dimmer_B1.c: 466: if (DimmerLights->SwFlag == 1) {
  6010  12AE  0875               	movf	_DimmerLights,w
  6011  12AF  3E0B               	addlw	11
  6012  12B0  0086               	movwf	6
  6013  12B1  3001               	movlw	1	; select bank2/3
  6014  12B2  0087               	movwf	7
  6015  12B3  1C81               	btfss	1,1
  6016  12B4  0008               	return
  6017                           
  6018                           ;Dimmer_B1.c: 467: DimmerLights->SwAdj = 1;
  6019  12B5  0875               	movf	_DimmerLights,w
  6020  12B6  3E0B               	addlw	11
  6021  12B7  0086               	movwf	6
  6022  12B8  3001               	movlw	1	; select bank2/3
  6023  12B9  0087               	movwf	7
  6024  12BA  1501               	bsf	1,2
  6025                           
  6026                           ;Dimmer_B1.c: 468: DimmerLights->Status = 1;
  6027  12BB  0875               	movf	_DimmerLights,w
  6028  12BC  3E02               	addlw	2
  6029  12BD  0086               	movwf	6
  6030  12BE  3001               	movlw	1	; select bank2/3
  6031  12BF  0087               	movwf	7
  6032  12C0  1481               	bsf	1,1
  6033                           
  6034                           ;Dimmer_B1.c: 470: DimmerLights->TriggerAdj = 1;
  6035  12C1  0875               	movf	_DimmerLights,w
  6036  12C2  3E0A               	addlw	10
  6037  12C3  0086               	movwf	6
  6038  12C4  3001               	movlw	1	; select bank2/3
  6039  12C5  0087               	movwf	7
  6040  12C6  1581               	bsf	1,3
  6041                           
  6042                           ;Dimmer_B1.c: 471: DimmerLights->SwitchAdj = 1;
  6043  12C7  0875               	movf	_DimmerLights,w
  6044  12C8  3E0A               	addlw	10
  6045  12C9  0086               	movwf	6
  6046  12CA  3001               	movlw	1	; select bank2/3
  6047  12CB  0087               	movwf	7
  6048  12CC  1501               	bsf	1,2
  6049  12CD  0008               	return
  6050  12CE                     __end_of_setDimmerLights_AdjOn:	
  6051                           
  6052                           	psect	text16
  6053  0800                     __ptext16:	
  6054 ;; *************** function _getSw_KeyStatus *****************
  6055 ;; Defined at:
  6056 ;;		line 222 in file "../src/Switch_B1.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  sw              1    wreg     unsigned char 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  sw              1    0[COMMON] unsigned char 
  6061 ;;  status          1    1[BANK0 ] unsigned char 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  1    wreg      unsigned char 
  6064 ;; Registers used:
  6065 ;;		wreg, status,2
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;Total ram usage:        3 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    5
  6078 ;; This function calls:
  6079 ;;		Nothing
  6080 ;; This function is called by:
  6081 ;;		_setSw_Main
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           
  6086                           ;psect for function _getSw_KeyStatus
  6087  0800                     _getSw_KeyStatus:	
  6088                           
  6089                           ;Switch_B1.c: 223: char status = 0;
  6090                           
  6091                           ;incstack = 0
  6092                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6093  0800  0020               	movlb	0	; select bank0
  6094  0801  01A1               	clrf	getSw_KeyStatus@status
  6095                           
  6096                           ;Switch_B1.c: 243: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6097  0802  01A2               	clrf	_getSw_KeyStatus$6010
  6098  0803  0AA2               	incf	_getSw_KeyStatus$6010,f
  6099  0804  1F0C               	btfss	12,6	;volatile
  6100  0805  1A0C               	btfsc	12,4	;volatile
  6101  0806  280B               	goto	l9132
  6102  0807  1C0C               	btfss	12,0	;volatile
  6103  0808  1B8C               	btfsc	12,7	;volatile
  6104  0809  280B               	goto	l9132
  6105  080A  01A2               	clrf	_getSw_KeyStatus$6010
  6106  080B                     l9132:	
  6107  080B  0822               	movf	_getSw_KeyStatus$6010,w
  6108  080C  00A0               	movwf	??_getSw_KeyStatus
  6109  080D  0820               	movf	??_getSw_KeyStatus,w
  6110  080E  00A1               	movwf	getSw_KeyStatus@status
  6111                           
  6112                           ;Switch_B1.c: 246: return status;
  6113  080F  0821               	movf	getSw_KeyStatus@status,w
  6114  0810  0008               	return
  6115  0811                     __end_of_getSw_KeyStatus:	
  6116                           
  6117                           	psect	text17
  6118  1D08                     __ptext17:	
  6119 ;; *************** function _SwPointSelect *****************
  6120 ;; Defined at:
  6121 ;;		line 25 in file "../src/Switch_B1.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;  sw              1    wreg     unsigned char 
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;  sw              1    1[BANK0 ] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;		None               void
  6128 ;; Registers used:
  6129 ;;		wreg
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        2 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    5
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_setSw_Main
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _SwPointSelect
  6151  1D08                     _SwPointSelect:	
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _SwPointSelect: [wreg]
  6155                           ;SwPointSelect@sw stored from wreg
  6156  1D08  0020               	movlb	0	; select bank0
  6157  1D09  00A1               	movwf	SwPointSelect@sw
  6158                           
  6159                           ;Switch_B1.c: 28: if (sw == 1) {
  6160  1D0A  0821               	movf	SwPointSelect@sw,w
  6161  1D0B  3A01               	xorlw	1
  6162  1D0C  1D03               	skipz
  6163  1D0D  0008               	return
  6164                           
  6165                           ;Switch_B1.c: 29: Sw = &Sw1;
  6166  1D0E  30E3               	movlw	_Sw1& (0+255)
  6167  1D0F  00A0               	movwf	??_SwPointSelect
  6168  1D10  0820               	movf	??_SwPointSelect,w
  6169  1D11  00F7               	movwf	_Sw
  6170  1D12  0008               	return
  6171  1D13                     __end_of_SwPointSelect:	
  6172                           
  6173                           	psect	text18
  6174  1CB4                     __ptext18:	
  6175 ;; *************** function _Switch_Initialization *****************
  6176 ;; Defined at:
  6177 ;;		line 46 in file "../src/Switch_B1.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;		None
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;		None
  6182 ;; Return value:  Size  Location     Type
  6183 ;;		None               void
  6184 ;; Registers used:
  6185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;Total ram usage:        0 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:    8
  6198 ;; This function calls:
  6199 ;;		_TouchPower
  6200 ;;		_setSw_Initialization
  6201 ;; This function is called by:
  6202 ;;		_main
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function _Switch_Initialization
  6208  1CB4                     _Switch_Initialization:	
  6209                           
  6210                           ;Switch_B1.c: 47: TouchPower();
  6211                           
  6212                           ;incstack = 0
  6213                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6214  1CB4  319E  26CC  319C   	fcall	_TouchPower
  6215                           
  6216                           ;Switch_B1.c: 49: WPUB1 = 0;
  6217  1CB7  0024               	movlb	4	; select bank4
  6218  1CB8  108D               	bcf	13,1	;volatile
  6219                           
  6220                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6221  1CB9  3001               	movlw	1
  6222  1CBA  319D  25CC         	fcall	_setSw_Initialization
  6223  1CBC  0008               	return
  6224  1CBD                     __end_of_Switch_Initialization:	
  6225                           
  6226                           	psect	text19
  6227  1DCC                     __ptext19:	
  6228 ;; *************** function _setSw_Initialization *****************
  6229 ;; Defined at:
  6230 ;;		line 93 in file "../src/Switch_B1.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  sw              1    wreg     unsigned char 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;  sw              1    4[BANK0 ] unsigned char 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;		None               void
  6237 ;; Registers used:
  6238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;Total ram usage:        1 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    7
  6251 ;; This function calls:
  6252 ;;		_setLED
  6253 ;; This function is called by:
  6254 ;;		_Switch_Initialization
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           
  6259                           ;psect for function _setSw_Initialization
  6260  1DCC                     _setSw_Initialization:	
  6261                           
  6262                           ;incstack = 0
  6263                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6264                           ;setSw_Initialization@sw stored from wreg
  6265  1DCC  0020               	movlb	0	; select bank0
  6266  1DCD  00A4               	movwf	setSw_Initialization@sw
  6267                           
  6268                           ;Switch_B1.c: 94: setLED(sw, 1);
  6269  1DCE  01A2               	clrf	setLED@command
  6270  1DCF  0AA2               	incf	setLED@command,f
  6271  1DD0  0824               	movf	setSw_Initialization@sw,w
  6272  1DD1  3193  23A7  319D   	fcall	_setLED
  6273                           
  6274                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6275  1DD4  0020               	movlb	0	; select bank0
  6276  1DD5  01A2               	clrf	setLED@command
  6277  1DD6  0AA2               	incf	setLED@command,f
  6278  1DD7  0824               	movf	setSw_Initialization@sw,w
  6279  1DD8  3E01               	addlw	1
  6280  1DD9  3193  23A7         	fcall	_setLED
  6281  1DDB  0008               	return
  6282  1DDC                     __end_of_setSw_Initialization:	
  6283                           
  6284                           	psect	text20
  6285  1ECC                     __ptext20:	
  6286 ;; *************** function _TouchPower *****************
  6287 ;; Defined at:
  6288 ;;		line 10 in file "../src/Switch_B1.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;		None
  6293 ;; Return value:  Size  Location     Type
  6294 ;;		None               void
  6295 ;; Registers used:
  6296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;Total ram usage:        0 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    6
  6309 ;; This function calls:
  6310 ;;		_Timeout_Counter
  6311 ;;		_set_TimeoutCleared
  6312 ;; This function is called by:
  6313 ;;		_Switch_Initialization
  6314 ;;		_Switch_Main
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           
  6319                           ;psect for function _TouchPower
  6320  1ECC                     _TouchPower:	
  6321                           
  6322                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6323                           
  6324                           ;incstack = 0
  6325                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6326  1ECC  0020               	movlb	0	; select bank0
  6327  1ECD  180D               	btfsc	13,0	;volatile
  6328  1ECE  0008               	return
  6329                           
  6330                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6331  1ECF  0021               	movlb	1	; select bank1
  6332  1ED0  1C20               	btfss	_myMain^(0+128),0
  6333  1ED1  0008               	return
  6334  1ED2  2ED8               	goto	l9608
  6335  1ED3                     l2383:	
  6336                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6337                           
  6338                           
  6339                           ;Switch_B1.c: 14: RB0 = 1;
  6340  1ED3  0020               	movlb	0	; select bank0
  6341  1ED4  140D               	bsf	13,0	;volatile
  6342                           
  6343                           ;Switch_B1.c: 15: Timeout_Counter();
  6344  1ED5  319E  26A2  319E   	fcall	_Timeout_Counter
  6345  1ED8                     l9608:	
  6346  1ED8  0020               	movlb	0	; select bank0
  6347  1ED9  180D               	btfsc	13,0	;volatile
  6348  1EDA  2EDE               	goto	l9612
  6349  1EDB  0021               	movlb	1	; select bank1
  6350  1EDC  1D2B               	btfss	(_myMain^(0+128)+11),2
  6351  1EDD  2ED3               	goto	l2383
  6352  1EDE                     l9612:	
  6353                           
  6354                           ;Switch_B1.c: 16: }
  6355                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6356  1EDE  319C  2478         	fcall	_set_TimeoutCleared
  6357  1EE0  0008               	return
  6358  1EE1                     __end_of_TouchPower:	
  6359                           
  6360                           	psect	text21
  6361  1C3F                     __ptext21:	
  6362 ;; *************** function _RF_Main *****************
  6363 ;; Defined at:
  6364 ;;		line 16 in file "../src/RF_Control_B1.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;		None
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;		None
  6369 ;; Return value:  Size  Location     Type
  6370 ;;		None               void
  6371 ;; Registers used:
  6372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;Total ram usage:        0 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:   14
  6385 ;; This function calls:
  6386 ;;		_setRF_Main
  6387 ;; This function is called by:
  6388 ;;		_main
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           
  6393                           ;psect for function _RF_Main
  6394  1C3F                     _RF_Main:	
  6395                           
  6396                           ;RF_Control_B1.c: 18: setRF_Main();
  6397                           
  6398                           ;incstack = 0
  6399                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6400  1C3F  3186  2600         	fcall	_setRF_Main
  6401  1C41  0008               	return
  6402  1C42                     __end_of_RF_Main:	
  6403                           
  6404                           	psect	text22
  6405  0600                     __ptext22:	
  6406 ;; *************** function _setRF_Main *****************
  6407 ;; Defined at:
  6408 ;;		line 52 in file "../src/RF_Control_B1.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;  error           1    2[BANK3 ] unsigned char 
  6413 ;;  Receive_OK      1    1[BANK3 ] unsigned char 
  6414 ;;  loop_f          1    0[BANK3 ] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Totals:         0       0       1       0       3       0       0       0       0       0       0       0       
      +0       0
  6428 ;;Total ram usage:        4 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:   13
  6431 ;; This function calls:
  6432 ;;		_CC2500_RxData
  6433 ;;		_CC2500_TxData
  6434 ;;		_CC2500_WriteCommand
  6435 ;;		_RF_RxDisable
  6436 ;;		_getBuz_GO
  6437 ;;		_getMain_All_Error_Status
  6438 ;;		_getRF_KeyStatus
  6439 ;;		_getRxData
  6440 ;; This function is called by:
  6441 ;;		_RF_Main
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           
  6446                           ;psect for function _setRF_Main
  6447  0600                     _setRF_Main:	
  6448                           
  6449                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6453  0600  0023               	movlb	3	; select bank3
  6454  0601  01EC               	clrf	setRF_Main@loop_f^(0+384)
  6455  0602  01ED               	clrf	setRF_Main@Receive_OK^(0+384)
  6456  0603  01EE               	clrf	setRF_Main@error^(0+384)
  6457                           
  6458                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6459  0604  0021               	movlb	1	; select bank1
  6460  0605  1C3A               	btfss	_RF1^(0+128),0
  6461  0606  2ED7               	goto	l2020
  6462                           
  6463                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6464  0607  319D  25FE  3186   	fcall	_getBuz_GO
  6465  060A  0020               	movlb	0	; select bank0
  6466  060B  0821               	movf	?_getBuz_GO+1,w
  6467  060C  0420               	iorwf	?_getBuz_GO,w
  6468  060D  1D03               	skipz
  6469  060E  0008               	return
  6470                           
  6471                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6472  060F  3000               	movlw	0
  6473  0610  3192  2232  3186   	fcall	_getMain_All_Error_Status
  6474  0613  3800               	iorlw	0
  6475  0614  1D03               	skipz
  6476  0615  2E27               	goto	l2022
  6477                           
  6478                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6479  0616  319E  260F  3186   	fcall	_getRF_KeyStatus
  6480  0619  3A01               	xorlw	1
  6481  061A  3000               	movlw	0
  6482  061B  1903               	skipnz
  6483  061C  3001               	movlw	1
  6484  061D  0021               	movlb	1	; select bank1
  6485  061E  00EE               	movwf	??_setRF_Main^(0+128)
  6486  061F  0CEE               	rrf	??_setRF_Main^(0+128),f
  6487  0620  0CEE               	rrf	??_setRF_Main^(0+128),f
  6488  0621  083A               	movf	_RF1^(0+128),w
  6489  0622  066E               	xorwf	??_setRF_Main^(0+128),w
  6490  0623  397F               	andlw	-129
  6491  0624  066E               	xorwf	??_setRF_Main^(0+128),w
  6492  0625  00BA               	movwf	_RF1^(0+128)
  6493                           
  6494                           ;RF_Control_B1.c: 65: } else {
  6495  0626  2E29               	goto	l2023
  6496  0627                     l2022:	
  6497                           
  6498                           ;RF_Control_B1.c: 66: RF1.Key = 0;
  6499  0627  0021               	movlb	1	; select bank1
  6500  0628  13BA               	bcf	_RF1^(0+128),7
  6501  0629                     l2023:	
  6502                           
  6503                           ;RF_Control_B1.c: 67: }
  6504                           ;RF_Control_B1.c: 69: if (RF1.Key == 1 && RF1.Learn == 0) {
  6505  0629  1BBA               	btfsc	_RF1^(0+128),7
  6506  062A  1B3A               	btfsc	_RF1^(0+128),6
  6507  062B  2E31               	goto	l2024
  6508                           
  6509                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6510  062C  01BC               	clrf	(_RF1^(0+128)+2)
  6511  062D  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6512                           
  6513                           ;RF_Control_B1.c: 71: RF1.Run = 1;
  6514  062E  14BB               	bsf	(_RF1^(0+128)+1),1
  6515                           
  6516                           ;RF_Control_B1.c: 72: RF1.RxStatus = 0;
  6517  062F  11BA               	bcf	_RF1^(0+128),3
  6518                           
  6519                           ;RF_Control_B1.c: 73: } else {
  6520  0630  0008               	return
  6521  0631                     l2024:	
  6522                           
  6523                           ;RF_Control_B1.c: 74: if (RF1.Run == 1 && RF1.Learn == 0) {
  6524  0631  18BB               	btfsc	(_RF1^(0+128)+1),1
  6525  0632  1B3A               	btfsc	_RF1^(0+128),6
  6526  0633  2E48               	goto	l9526
  6527                           
  6528                           ;RF_Control_B1.c: 75: RF1.Count++;
  6529  0634  3001               	movlw	1
  6530  0635  07BC               	addwf	(_RF1^(0+128)+2),f
  6531  0636  3000               	movlw	0
  6532  0637  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6533                           
  6534                           ;RF_Control_B1.c: 76: if (RF1.Count == RF1.RunTime) {
  6535  0638  3002               	movlw	2
  6536  0639  3EBA               	addlw	_RF1& (0+255)
  6537  063A  0086               	movwf	6
  6538  063B  0187               	clrf	7
  6539  063C  3F40               	moviw [0]fsr1
  6540  063D  0641               	xorwf	(_RF1^(0+128)+7),w
  6541  063E  1D03               	skipz
  6542  063F  2E42               	goto	u10385
  6543  0640  3F41               	moviw [1]fsr1
  6544  0641  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6545  0642                     u10385:	
  6546  0642  1D03               	skipz
  6547  0643  2EA4               	goto	l9578
  6548                           
  6549                           ;RF_Control_B1.c: 77: RF1.Count = 0;
  6550  0644  01BC               	clrf	(_RF1^(0+128)+2)
  6551  0645  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6552                           
  6553                           ;RF_Control_B1.c: 78: RF1.Run = 0;
  6554  0646  10BB               	bcf	(_RF1^(0+128)+1),1
  6555                           
  6556                           ;RF_Control_B1.c: 79: }
  6557                           ;RF_Control_B1.c: 80: } else {
  6558  0647  2EA4               	goto	l9578
  6559  0648                     l9526:	
  6560                           
  6561                           ;RF_Control_B1.c: 81: RF1.Count = 0;
  6562  0648  01BC               	clrf	(_RF1^(0+128)+2)
  6563  0649  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6564                           
  6565                           ;RF_Control_B1.c: 82: RF1.Run = 0;
  6566  064A  10BB               	bcf	(_RF1^(0+128)+1),1
  6567                           
  6568                           ;RF_Control_B1.c: 84: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6569  064B  193A               	btfsc	_RF1^(0+128),2
  6570  064C  1B3A               	btfsc	_RF1^(0+128),6
  6571  064D  2E5C               	goto	l2029
  6572                           
  6573                           ;RF_Control_B1.c: 85: RF1.TransceiveGO = 0;
  6574  064E  113A               	bcf	_RF1^(0+128),2
  6575                           
  6576                           ;RF_Control_B1.c: 86: RF1.RxStatus = 0;
  6577  064F  11BA               	bcf	_RF1^(0+128),3
  6578                           
  6579                           ;RF_Control_B1.c: 87: RF1.ReceiveGO = 0;
  6580  0650  10BA               	bcf	_RF1^(0+128),1
  6581                           
  6582                           ;RF_Control_B1.c: 88: RF1.RunTime = 5;
  6583  0651  3005               	movlw	5
  6584  0652  00C1               	movwf	(_RF1^(0+128)+7)
  6585  0653  3000               	movlw	0
  6586  0654  00C2               	movwf	(_RF1^(0+128)+8)
  6587                           
  6588                           ;RF_Control_B1.c: 92: RF_RxDisable();
  6589  0655  319D  259E  3186   	fcall	_RF_RxDisable
  6590                           
  6591                           ;RF_Control_B1.c: 99: CC2500_TxData();
  6592  0658  318A  229E  3186   	fcall	_CC2500_TxData
  6593                           
  6594                           ;RF_Control_B1.c: 101: } else {
  6595  065B  2EA4               	goto	l9578
  6596  065C                     l2029:	
  6597                           
  6598                           ;RF_Control_B1.c: 103: if (RF1.RxStatus == 1) {
  6599  065C  1DBA               	btfss	_RF1^(0+128),3
  6600  065D  2E93               	goto	l2031
  6601                           
  6602                           ;RF_Control_B1.c: 105: CC2500_RxData();
  6603  065E  3187  278F  3186   	fcall	_CC2500_RxData
  6604                           
  6605                           ;RF_Control_B1.c: 107: if (RF1.ReceiveGO == 1) {
  6606  0661  0021               	movlb	1	; select bank1
  6607  0662  1CBA               	btfss	_RF1^(0+128),1
  6608  0663  2EA4               	goto	l9578
  6609                           
  6610                           ;RF_Control_B1.c: 108: RF1.ReceiveGO = 0;
  6611  0664  10BA               	bcf	_RF1^(0+128),1
  6612                           
  6613                           ;RF_Control_B1.c: 109: RF1.Correction = 0;
  6614  0665  12BB               	bcf	(_RF1^(0+128)+1),5
  6615                           
  6616                           ;RF_Control_B1.c: 110: RF1.CorrectionCounter = 0;
  6617  0666  01C4               	clrf	(_RF1^(0+128)+10)
  6618  0667  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6619                           
  6620                           ;RF_Control_B1.c: 121: getRxData();
  6621  0668  318C  24D4  3186   	fcall	_getRxData
  6622                           
  6623                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6624  066B  0021               	movlb	1	; select bank1
  6625  066C  14BB               	bsf	(_RF1^(0+128)+1),1
  6626                           
  6627                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  6628  066D  1DBB               	btfss	(_RF1^(0+128)+1),3
  6629  066E  2E7C               	goto	l9562
  6630                           
  6631                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 5) {
  6632  066F  3000               	movlw	0
  6633  0670  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6634  0671  3006               	movlw	6
  6635  0672  1903               	skipnz
  6636  0673  0241               	subwf	(_RF1^(0+128)+7),w
  6637  0674  1C03               	skipc
  6638  0675  2E7A               	goto	l9560
  6639                           
  6640                           ;RF_Control_B1.c: 126: RF1.RunTime = 5;
  6641  0676  3005               	movlw	5
  6642  0677  00C1               	movwf	(_RF1^(0+128)+7)
  6643  0678  3000               	movlw	0
  6644  0679  00C2               	movwf	(_RF1^(0+128)+8)
  6645  067A                     l9560:	
  6646                           
  6647                           ;RF_Control_B1.c: 127: }
  6648                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6649  067A  01BE               	clrf	(_RF1^(0+128)+4)
  6650                           
  6651                           ;RF_Control_B1.c: 129: } else {
  6652  067B  2EA4               	goto	l9578
  6653  067C                     l9562:	
  6654                           
  6655                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  6656  067C  3001               	movlw	1
  6657  067D  00EE               	movwf	??_setRF_Main^(0+128)
  6658  067E  086E               	movf	??_setRF_Main^(0+128),w
  6659  067F  07BE               	addwf	(_RF1^(0+128)+4),f
  6660                           
  6661                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  6662  0680  083E               	movf	(_RF1^(0+128)+4),w
  6663  0681  3A02               	xorlw	2
  6664  0682  1D03               	skipz
  6665  0683  2EA4               	goto	l9578
  6666                           
  6667                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6668  0684  01BE               	clrf	(_RF1^(0+128)+4)
  6669                           
  6670                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  6671  0685  01BF               	clrf	(_RF1^(0+128)+5)
  6672  0686  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6673                           
  6674                           ;RF_Control_B1.c: 135: if (RF1.RunTime < (5 * 20)) {
  6675  0687  3000               	movlw	0
  6676  0688  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6677  0689  3064               	movlw	100
  6678  068A  1903               	skipnz
  6679  068B  0241               	subwf	(_RF1^(0+128)+7),w
  6680  068C  1803               	skipnc
  6681  068D  2EA4               	goto	l9578
  6682                           
  6683                           ;RF_Control_B1.c: 136: RF1.RunTime += 5;
  6684  068E  3005               	movlw	5
  6685  068F  07C1               	addwf	(_RF1^(0+128)+7),f
  6686  0690  3000               	movlw	0
  6687  0691  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  6688                           
  6689                           ;RF_Control_B1.c: 137: }
  6690                           ;RF_Control_B1.c: 138: }
  6691                           ;RF_Control_B1.c: 139: }
  6692                           ;RF_Control_B1.c: 140: }
  6693                           ;RF_Control_B1.c: 141: } else {
  6694  0692  2EA4               	goto	l9578
  6695  0693                     l2031:	
  6696                           
  6697                           ;RF_Control_B1.c: 143: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6698  0693  1DBA               	btfss	_RF1^(0+128),3
  6699  0694  18BA               	btfsc	_RF1^(0+128),1
  6700  0695  2EA4               	goto	l9578
  6701                           
  6702                           ;RF_Control_B1.c: 144: RF1.RxStatus = 1;
  6703  0696  15BA               	bsf	_RF1^(0+128),3
  6704                           
  6705                           ;RF_Control_B1.c: 145: RF1.Correction = 1;
  6706  0697  16BB               	bsf	(_RF1^(0+128)+1),5
  6707                           
  6708                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x36);
  6709  0698  3036               	movlw	54
  6710  0699  319F  2712  3186   	fcall	_CC2500_WriteCommand
  6711                           
  6712                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x3A);
  6713  069C  303A               	movlw	58
  6714  069D  319F  2712  3186   	fcall	_CC2500_WriteCommand
  6715                           
  6716                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x34);
  6717  06A0  3034               	movlw	52
  6718  06A1  319F  2712  3186   	fcall	_CC2500_WriteCommand
  6719  06A4                     l9578:	
  6720                           
  6721                           ;RF_Control_B1.c: 151: }
  6722                           ;RF_Control_B1.c: 153: }
  6723                           ;RF_Control_B1.c: 154: }
  6724                           ;RF_Control_B1.c: 155: }
  6725                           ;RF_Control_B1.c: 157: if (RF1.RxStatus == 1) {
  6726  06A4  0021               	movlb	1	; select bank1
  6727  06A5  1DBA               	btfss	_RF1^(0+128),3
  6728  06A6  2EC5               	goto	l9590
  6729                           
  6730                           ;RF_Control_B1.c: 158: RF1.CheckedCounter++;
  6731  06A7  3001               	movlw	1
  6732  06A8  07BF               	addwf	(_RF1^(0+128)+5),f
  6733  06A9  3000               	movlw	0
  6734  06AA  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  6735                           
  6736                           ;RF_Control_B1.c: 159: if (RF1.CheckedCounter == 100) {
  6737  06AB  3005               	movlw	5
  6738  06AC  3EBA               	addlw	_RF1& (0+255)
  6739  06AD  0086               	movwf	6
  6740  06AE  0187               	clrf	7
  6741  06AF  3F40               	moviw [0]fsr1
  6742  06B0  3A64               	xorlw	100
  6743  06B1  1D03               	skipz
  6744  06B2  2EB5               	goto	u10505
  6745  06B3  3F41               	moviw [1]fsr1
  6746  06B4  3A00               	xorlw	0
  6747  06B5                     u10505:	
  6748  06B5  1D03               	skipz
  6749  06B6  2EC5               	goto	l9590
  6750                           
  6751                           ;RF_Control_B1.c: 160: RF1.CheckedCounter = 0;
  6752  06B7  01BF               	clrf	(_RF1^(0+128)+5)
  6753  06B8  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6754                           
  6755                           ;RF_Control_B1.c: 161: RF1.CheckCount = 0;
  6756  06B9  01BE               	clrf	(_RF1^(0+128)+4)
  6757                           
  6758                           ;RF_Control_B1.c: 162: if (RF1.RunTime > 5) {
  6759  06BA  3000               	movlw	0
  6760  06BB  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6761  06BC  3006               	movlw	6
  6762  06BD  1903               	skipnz
  6763  06BE  0241               	subwf	(_RF1^(0+128)+7),w
  6764  06BF  1C03               	skipc
  6765  06C0  2EC5               	goto	l9590
  6766                           
  6767                           ;RF_Control_B1.c: 163: RF1.RunTime -= 5;
  6768  06C1  3005               	movlw	5
  6769  06C2  02C1               	subwf	(_RF1^(0+128)+7),f
  6770  06C3  3000               	movlw	0
  6771  06C4  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  6772  06C5                     l9590:	
  6773                           
  6774                           ;RF_Control_B1.c: 164: }
  6775                           ;RF_Control_B1.c: 165: }
  6776                           ;RF_Control_B1.c: 166: }
  6777                           ;RF_Control_B1.c: 167: if (RF1.Correction == 1) {
  6778  06C5  1EBB               	btfss	(_RF1^(0+128)+1),5
  6779  06C6  0008               	return
  6780                           
  6781                           ;RF_Control_B1.c: 168: RF1.CorrectionCounter++;
  6782  06C7  3001               	movlw	1
  6783  06C8  07C4               	addwf	(_RF1^(0+128)+10),f
  6784  06C9  3000               	movlw	0
  6785  06CA  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  6786                           
  6787                           ;RF_Control_B1.c: 169: if (RF1.CorrectionCounter >= 6000) {
  6788  06CB  3017               	movlw	23
  6789  06CC  0245               	subwf	((_RF1+1)^(0+128)+10),w
  6790  06CD  3070               	movlw	112
  6791  06CE  1903               	skipnz
  6792  06CF  0244               	subwf	(_RF1^(0+128)+10),w
  6793  06D0  1C03               	skipc
  6794  06D1  0008               	return
  6795                           
  6796                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter = 0;
  6797  06D2  01C4               	clrf	(_RF1^(0+128)+10)
  6798  06D3  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6799                           
  6800                           ;RF_Control_B1.c: 171: RF_RxDisable();
  6801  06D4  319D  259E         	fcall	_RF_RxDisable
  6802                           
  6803                           ;RF_Control_B1.c: 172: }
  6804                           ;RF_Control_B1.c: 173: }
  6805                           ;RF_Control_B1.c: 174: }
  6806                           ;RF_Control_B1.c: 175: }
  6807                           ;RF_Control_B1.c: 182: } else {
  6808  06D6  0008               	return
  6809  06D7                     l2020:	
  6810                           
  6811                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  6812  06D7  1C20               	btfss	_myMain^(0+128),0
  6813  06D8  0008               	return
  6814                           
  6815                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  6816  06D9  143A               	bsf	_RF1^(0+128),0
  6817  06DA  0008               	return
  6818  06DB                     __end_of_setRF_Main:	
  6819                           
  6820                           	psect	text23
  6821  0CD4                     __ptext23:	
  6822 ;; *************** function _getRxData *****************
  6823 ;; Defined at:
  6824 ;;		line 278 in file "../src/RF_Control_B1.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;		None
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;  error           1    4[BANK1 ] unsigned char 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;		None               void
  6831 ;; Registers used:
  6832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;Total ram usage:        2 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:   12
  6845 ;; This function calls:
  6846 ;;		_getMain_All_Error_Status
  6847 ;;		_setControl_Lights_Table
  6848 ;;		_setLog_Code
  6849 ;;		_setTxData
  6850 ;; This function is called by:
  6851 ;;		_setRF_Main
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           
  6856                           ;psect for function _getRxData
  6857  0CD4                     _getRxData:	
  6858                           
  6859                           ;RF_Control_B1.c: 279: char error = getMain_All_Error_Status(0);
  6860                           
  6861                           ;incstack = 0
  6862                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6863  0CD4  3000               	movlw	0
  6864  0CD5  3192  2232  318C   	fcall	_getMain_All_Error_Status
  6865  0CD8  0020               	movlb	0	; select bank0
  6866  0CD9  00EF               	movwf	??_getRxData
  6867  0CDA  086F               	movf	??_getRxData,w
  6868  0CDB  0021               	movlb	1	; select bank1
  6869  0CDC  00ED               	movwf	getRxData@error^(0+128)
  6870                           
  6871                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6872  0CDD  0023               	movlb	3	; select bank3
  6873  0CDE  0820               	movf	_RF_Data^(0+384),w
  6874  0CDF  3AAA               	xorlw	170
  6875  0CE0  1D03               	skipz
  6876  0CE1  2CF8               	goto	l9068
  6877  0CE2  0821               	movf	(_RF_Data^(0+384)+1),w
  6878  0CE3  3A01               	xorlw	1
  6879  0CE4  1D03               	skipz
  6880  0CE5  2CF8               	goto	l9068
  6881                           
  6882                           ;RF_Control_B1.c: 282: product->Data[2] = 0x55;
  6883  0CE6  3055               	movlw	85
  6884  0CE7  0020               	movlb	0	; select bank0
  6885  0CE8  00EF               	movwf	??_getRxData
  6886  0CE9  0879               	movf	_product,w
  6887  0CEA  3E02               	addlw	2
  6888  0CEB  0086               	movwf	6
  6889  0CEC  3002               	movlw	2	; select bank4/5
  6890  0CED  0087               	movwf	7
  6891  0CEE  086F               	movf	??_getRxData,w
  6892  0CEF  0081               	movwf	1
  6893                           
  6894                           ;RF_Control_B1.c: 283: setTxData();
  6895  0CF0  318D  255F         	fcall	_setTxData
  6896                           
  6897                           ;RF_Control_B1.c: 284: RF1.RunTime = 10;
  6898  0CF2  300A               	movlw	10
  6899  0CF3  0021               	movlb	1	; select bank1
  6900  0CF4  00C1               	movwf	(_RF1^(0+128)+7)
  6901  0CF5  3000               	movlw	0
  6902  0CF6  00C2               	movwf	(_RF1^(0+128)+8)
  6903                           
  6904                           ;RF_Control_B1.c: 290: } else {
  6905  0CF7  0008               	return
  6906  0CF8                     l9068:	
  6907                           
  6908                           ;RF_Control_B1.c: 292: if (error == 0) {
  6909  0CF8  0021               	movlb	1	; select bank1
  6910  0CF9  08ED               	movf	getRxData@error^(0+128),f
  6911  0CFA  1D03               	skipz
  6912  0CFB  0008               	return
  6913                           
  6914                           ;RF_Control_B1.c: 293: if (RF1.Learn == 1) {
  6915  0CFC  1F3A               	btfss	_RF1^(0+128),6
  6916  0CFD  2D0E               	goto	l9080
  6917                           
  6918                           ;RF_Control_B1.c: 294: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6919  0CFE  0023               	movlb	3	; select bank3
  6920  0CFF  08A0               	movf	_RF_Data^(0+384),f
  6921  0D00  1D03               	skipz
  6922  0D01  2D0B               	goto	l2073
  6923  0D02  0821               	movf	(_RF_Data^(0+384)+1),w
  6924  0D03  3A64               	xorlw	100
  6925  0D04  1D03               	skipz
  6926  0D05  2D0B               	goto	l2073
  6927                           
  6928                           ;RF_Control_B1.c: 295: setLog_Code();
  6929  0D06  3192  2265         	fcall	_setLog_Code
  6930                           
  6931                           ;RF_Control_B1.c: 296: RF1.Checked = 1;
  6932  0D08  0021               	movlb	1	; select bank1
  6933  0D09  15BB               	bsf	(_RF1^(0+128)+1),3
  6934                           
  6935                           ;RF_Control_B1.c: 297: } else {
  6936  0D0A  0008               	return
  6937  0D0B                     l2073:	
  6938                           
  6939                           ;RF_Control_B1.c: 298: RF1.Checked = 0;
  6940  0D0B  0021               	movlb	1	; select bank1
  6941  0D0C  11BB               	bcf	(_RF1^(0+128)+1),3
  6942                           
  6943                           ;RF_Control_B1.c: 299: }
  6944                           ;RF_Control_B1.c: 300: } else {
  6945  0D0D  0008               	return
  6946  0D0E                     l9080:	
  6947                           
  6948                           ;RF_Control_B1.c: 301: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6949  0D0E  0023               	movlb	3	; select bank3
  6950  0D0F  08A0               	movf	_RF_Data^(0+384),f
  6951  0D10  1D03               	skipz
  6952  0D11  2D47               	goto	l9102
  6953  0D12  0821               	movf	(_RF_Data^(0+384)+1),w
  6954  0D13  3A02               	xorlw	2
  6955  0D14  1D03               	skipz
  6956  0D15  2D47               	goto	l9102
  6957                           
  6958                           ;RF_Control_B1.c: 303: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6959  0D16  082C               	movf	(_RF_Data^(0+384)+12),w
  6960  0D17  3AFF               	xorlw	255
  6961  0D18  1D03               	skipz
  6962  0D19  2D26               	goto	l9092
  6963  0D1A  082D               	movf	(_RF_Data^(0+384)+13),w
  6964  0D1B  3AFF               	xorlw	255
  6965  0D1C  1D03               	skipz
  6966  0D1D  2D26               	goto	l9092
  6967  0D1E  082E               	movf	(_RF_Data^(0+384)+14),w
  6968  0D1F  3AFF               	xorlw	255
  6969  0D20  1D03               	skipz
  6970  0D21  2D26               	goto	l9092
  6971                           
  6972                           ;RF_Control_B1.c: 304: __nop();
  6973  0D22  0000               	nop
  6974                           
  6975                           ;RF_Control_B1.c: 305: RF1.Checked = 0;
  6976  0D23  0021               	movlb	1	; select bank1
  6977  0D24  11BB               	bcf	(_RF1^(0+128)+1),3
  6978                           
  6979                           ;RF_Control_B1.c: 306: } else {
  6980  0D25  0008               	return
  6981  0D26                     l9092:	
  6982                           
  6983                           ;RF_Control_B1.c: 307: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6984  0D26  0879               	movf	_product,w
  6985  0D27  3E0C               	addlw	12
  6986  0D28  0086               	movwf	6
  6987  0D29  3002               	movlw	2	; select bank4/5
  6988  0D2A  0087               	movwf	7
  6989  0D2B  0023               	movlb	3	; select bank3
  6990  0D2C  082C               	movf	(_RF_Data^(0+384)+12),w
  6991  0D2D  0601               	xorwf	1,w
  6992  0D2E  1D03               	skipz
  6993  0D2F  0008               	return
  6994  0D30  0879               	movf	_product,w
  6995  0D31  3E0D               	addlw	13
  6996  0D32  0086               	movwf	6
  6997  0D33  3002               	movlw	2	; select bank4/5
  6998  0D34  0087               	movwf	7
  6999  0D35  082D               	movf	(_RF_Data^(0+384)+13),w
  7000  0D36  0601               	xorwf	1,w
  7001  0D37  1D03               	skipz
  7002  0D38  0008               	return
  7003  0D39  0879               	movf	_product,w
  7004  0D3A  3E0E               	addlw	14
  7005  0D3B  0086               	movwf	6
  7006  0D3C  3002               	movlw	2	; select bank4/5
  7007  0D3D  0087               	movwf	7
  7008  0D3E  082E               	movf	(_RF_Data^(0+384)+14),w
  7009  0D3F  0601               	xorwf	1,w
  7010  0D40  1D03               	skipz
  7011  0D41  0008               	return
  7012                           
  7013                           ;RF_Control_B1.c: 308: setControl_Lights_Table();
  7014  0D42  3189  217A         	fcall	_setControl_Lights_Table
  7015                           
  7016                           ;RF_Control_B1.c: 309: RF1.Checked = 1;
  7017  0D44  0021               	movlb	1	; select bank1
  7018  0D45  15BB               	bsf	(_RF1^(0+128)+1),3
  7019                           
  7020                           ;RF_Control_B1.c: 310: }
  7021                           ;RF_Control_B1.c: 311: }
  7022                           ;RF_Control_B1.c: 312: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7023  0D46  0008               	return
  7024  0D47                     l9102:	
  7025  0D47  0023               	movlb	3	; select bank3
  7026  0D48  0820               	movf	_RF_Data^(0+384),w
  7027  0D49  3AFF               	xorlw	255
  7028  0D4A  1D03               	skipz
  7029  0D4B  2D52               	goto	l9108
  7030  0D4C  0821               	movf	(_RF_Data^(0+384)+1),w
  7031  0D4D  3A02               	xorlw	2
  7032  0D4E  1D03               	skipz
  7033  0D4F  2D52               	goto	l9108
  7034                           
  7035                           ;RF_Control_B1.c: 313: __nop();
  7036  0D50  0000               	nop
  7037                           
  7038                           ;RF_Control_B1.c: 314: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7039  0D51  0008               	return
  7040  0D52                     l9108:	
  7041  0D52  0023               	movlb	3	; select bank3
  7042  0D53  08A0               	movf	_RF_Data^(0+384),f
  7043  0D54  1D03               	skipz
  7044  0D55  2D5C               	goto	l2083
  7045  0D56  0821               	movf	(_RF_Data^(0+384)+1),w
  7046  0D57  3A65               	xorlw	101
  7047  0D58  1D03               	skipz
  7048  0D59  2D5C               	goto	l2083
  7049                           
  7050                           ;RF_Control_B1.c: 315: __nop();
  7051  0D5A  0000               	nop
  7052                           
  7053                           ;RF_Control_B1.c: 316: } else {
  7054  0D5B  0008               	return
  7055  0D5C                     l2083:	
  7056                           
  7057                           ;RF_Control_B1.c: 317: RF1.Checked = 0;
  7058  0D5C  0021               	movlb	1	; select bank1
  7059  0D5D  11BB               	bcf	(_RF1^(0+128)+1),3
  7060                           
  7061                           ;RF_Control_B1.c: 325: ;
  7062                           
  7063                           ;RF_Control_B1.c: 318: }
  7064                           ;RF_Control_B1.c: 323: }
  7065                           ;RF_Control_B1.c: 324: } else {
  7066  0D5E  0008               	return
  7067  0D5F                     __end_of_getRxData:	
  7068                           
  7069                           	psect	text24
  7070  1265                     __ptext24:	
  7071 ;; *************** function _setLog_Code *****************
  7072 ;; Defined at:
  7073 ;;		line 331 in file "../src/RF_Control_B1.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;		None
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;		None
  7078 ;; Return value:  Size  Location     Type
  7079 ;;		None               void
  7080 ;; Registers used:
  7081 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;Total ram usage:        1 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    7
  7094 ;; This function calls:
  7095 ;;		_setBuz
  7096 ;;		_setMemory_LoopSave
  7097 ;;		_setMemory_Modify
  7098 ;;		_setProductData
  7099 ;; This function is called by:
  7100 ;;		_getRxData
  7101 ;; This function uses a non-reentrant model
  7102 ;;
  7103                           
  7104                           
  7105                           ;psect for function _setLog_Code
  7106  1265                     _setLog_Code:	
  7107                           
  7108                           ;RF_Control_B1.c: 332: RF1.Learn = 0;
  7109                           
  7110                           ;incstack = 0
  7111                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7112  1265  0021               	movlb	1	; select bank1
  7113  1266  133A               	bcf	_RF1^(0+128),6
  7114                           
  7115                           ;RF_Control_B1.c: 333: setProductData(12, RF_Data[12]);
  7116  1267  0023               	movlb	3	; select bank3
  7117  1268  082C               	movf	(_RF_Data^(0+384)+12),w
  7118  1269  0020               	movlb	0	; select bank0
  7119  126A  00E6               	movwf	??_setLog_Code
  7120  126B  0866               	movf	??_setLog_Code,w
  7121  126C  00E2               	movwf	setProductData@value
  7122  126D  300C               	movlw	12
  7123  126E  319D  2573  3192   	fcall	_setProductData
  7124                           
  7125                           ;RF_Control_B1.c: 334: setProductData(13, RF_Data[13]);
  7126  1271  0023               	movlb	3	; select bank3
  7127  1272  082D               	movf	(_RF_Data^(0+384)+13),w
  7128  1273  0020               	movlb	0	; select bank0
  7129  1274  00E6               	movwf	??_setLog_Code
  7130  1275  0866               	movf	??_setLog_Code,w
  7131  1276  00E2               	movwf	setProductData@value
  7132  1277  300D               	movlw	13
  7133  1278  319D  2573  3192   	fcall	_setProductData
  7134                           
  7135                           ;RF_Control_B1.c: 335: setProductData(14, RF_Data[14]);
  7136  127B  0023               	movlb	3	; select bank3
  7137  127C  082E               	movf	(_RF_Data^(0+384)+14),w
  7138  127D  0020               	movlb	0	; select bank0
  7139  127E  00E6               	movwf	??_setLog_Code
  7140  127F  0866               	movf	??_setLog_Code,w
  7141  1280  00E2               	movwf	setProductData@value
  7142  1281  300E               	movlw	14
  7143  1282  319D  2573  3192   	fcall	_setProductData
  7144                           
  7145                           ;RF_Control_B1.c: 336: setBuz(1, 100);
  7146  1285  3064               	movlw	100
  7147  1286  0020               	movlb	0	; select bank0
  7148  1287  00A9               	movwf	setBuz@time
  7149  1288  3000               	movlw	0
  7150  1289  00AA               	movwf	setBuz@time+1
  7151  128A  3001               	movlw	1
  7152  128B  3197  27A7  3192   	fcall	_setBuz
  7153                           
  7154                           ;RF_Control_B1.c: 337: if (myMain.First == 1) {
  7155  128E  0021               	movlb	1	; select bank1
  7156  128F  1EA0               	btfss	_myMain^(0+128),5
  7157  1290  2A95               	goto	l2089
  7158                           
  7159                           ;RF_Control_B1.c: 338: setMemory_LoopSave(1);
  7160  1291  3001               	movlw	1
  7161  1292  319E  267B  3192   	fcall	_setMemory_LoopSave
  7162  1295                     l2089:	
  7163                           
  7164                           ;RF_Control_B1.c: 339: }
  7165                           ;RF_Control_B1.c: 340: setMemory_Modify(1);
  7166  1295  3001               	movlw	1
  7167  1296  319E  2668         	fcall	_setMemory_Modify
  7168  1298  0008               	return
  7169  1299                     __end_of_setLog_Code:	
  7170                           
  7171                           	psect	text25
  7172  1E7B                     __ptext25:	
  7173 ;; *************** function _setMemory_LoopSave *****************
  7174 ;; Defined at:
  7175 ;;		line 1070 in file "../src/MCU_B1.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;  command         1    wreg     unsigned char 
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;  command         1    1[BANK0 ] unsigned char 
  7180 ;; Return value:  Size  Location     Type
  7181 ;;		None               void
  7182 ;; Registers used:
  7183 ;;		wreg, status,2, status,0
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;Total ram usage:        2 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:    5
  7196 ;; This function calls:
  7197 ;;		Nothing
  7198 ;; This function is called by:
  7199 ;;		_setLog_Code
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           
  7204                           ;psect for function _setMemory_LoopSave
  7205  1E7B                     _setMemory_LoopSave:	
  7206                           
  7207                           ;incstack = 0
  7208                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7209                           ;setMemory_LoopSave@command stored from wreg
  7210  1E7B  0020               	movlb	0	; select bank0
  7211  1E7C  00A1               	movwf	setMemory_LoopSave@command
  7212                           
  7213                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  7214  1E7D  0821               	movf	setMemory_LoopSave@command,w
  7215  1E7E  3A01               	xorlw	1
  7216  1E7F  3000               	movlw	0
  7217  1E80  1903               	skipnz
  7218  1E81  3001               	movlw	1
  7219  1E82  00A0               	movwf	??_setMemory_LoopSave
  7220  1E83  0DA0               	rlf	??_setMemory_LoopSave,f
  7221  1E84  0DA0               	rlf	??_setMemory_LoopSave,f
  7222  1E85  0023               	movlb	3	; select bank3
  7223  1E86  0862               	movf	(_Memory^(0+384)+36),w
  7224  1E87  0020               	movlb	0	; select bank0
  7225  1E88  0620               	xorwf	??_setMemory_LoopSave,w
  7226  1E89  39FB               	andlw	-5
  7227  1E8A  0620               	xorwf	??_setMemory_LoopSave,w
  7228  1E8B  0023               	movlb	3	; select bank3
  7229  1E8C  00E2               	movwf	(_Memory^(0+384)+36)
  7230  1E8D  0008               	return
  7231  1E8E                     __end_of_setMemory_LoopSave:	
  7232                           
  7233                           	psect	text26
  7234  097A                     __ptext26:	
  7235 ;; *************** function _setControl_Lights_Table *****************
  7236 ;; Defined at:
  7237 ;;		line 344 in file "../src/RF_Control_B1.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;		None
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;		None               void
  7244 ;; Registers used:
  7245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;Total ram usage:        0 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:   11
  7258 ;; This function calls:
  7259 ;;		_setBuz
  7260 ;;		_setDimmerLights_ErrorClose
  7261 ;;		_setProductData
  7262 ;;		_setRFSW_AdjControl
  7263 ;;		_setRFSW_Control
  7264 ;;		_setTxData
  7265 ;; This function is called by:
  7266 ;;		_getRxData
  7267 ;; This function uses a non-reentrant model
  7268 ;;
  7269                           
  7270                           
  7271                           ;psect for function _setControl_Lights_Table
  7272  097A                     _setControl_Lights_Table:	
  7273                           
  7274                           ;RF_Control_B1.c: 345: switch (RF_Data[15]) {
  7275                           
  7276                           ;incstack = 0
  7277                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7278  097A  29BD               	goto	l8762
  7279  097B                     l8750:	
  7280                           ;RF_Control_B1.c: 346: case 0x00:
  7281                           
  7282                           
  7283                           ;RF_Control_B1.c: 348: setDimmerLights_ErrorClose(255);
  7284  097B  30FF               	movlw	255
  7285  097C  3189  211E  3189   	fcall	_setDimmerLights_ErrorClose
  7286                           
  7287                           ;RF_Control_B1.c: 350: setProductData(9, 0);
  7288  097F  0020               	movlb	0	; select bank0
  7289  0980  01E2               	clrf	setProductData@value
  7290  0981  3009               	movlw	9
  7291  0982  319D  2573  3189   	fcall	_setProductData
  7292                           
  7293                           ;RF_Control_B1.c: 351: setProductData(11, 0);
  7294  0985  0020               	movlb	0	; select bank0
  7295  0986  01E2               	clrf	setProductData@value
  7296  0987  300B               	movlw	11
  7297  0988  319D  2573  3189   	fcall	_setProductData
  7298                           
  7299                           ;RF_Control_B1.c: 352: setProductData(15, 0);
  7300  098B  0020               	movlb	0	; select bank0
  7301  098C  01E2               	clrf	setProductData@value
  7302  098D  300F               	movlw	15
  7303  098E  319D  2573  3189   	fcall	_setProductData
  7304                           
  7305                           ;RF_Control_B1.c: 353: setProductData(17, 0);
  7306  0991  0020               	movlb	0	; select bank0
  7307  0992  01E2               	clrf	setProductData@value
  7308  0993  3011               	movlw	17
  7309  0994  319D  2573  3189   	fcall	_setProductData
  7310                           
  7311                           ;RF_Control_B1.c: 354: setBuz(1, 100);
  7312  0997  3064               	movlw	100
  7313  0998  0020               	movlb	0	; select bank0
  7314  0999  00A9               	movwf	setBuz@time
  7315  099A  3000               	movlw	0
  7316  099B  00AA               	movwf	setBuz@time+1
  7317  099C  3001               	movlw	1
  7318  099D  3197  27A7         	fcall	_setBuz
  7319                           
  7320                           ;RF_Control_B1.c: 356: break;
  7321  099F  0008               	return
  7322  09A0                     l8754:	
  7323                           ;RF_Control_B1.c: 357: case 0x20:
  7324                           
  7325                           
  7326                           ;RF_Control_B1.c: 358: setProductData(9, 0);
  7327  09A0  0020               	movlb	0	; select bank0
  7328  09A1  01E2               	clrf	setProductData@value
  7329  09A2  3009               	movlw	9
  7330  09A3  319D  2573  3189   	fcall	_setProductData
  7331                           
  7332                           ;RF_Control_B1.c: 359: setProductData(11, 0);
  7333  09A6  0020               	movlb	0	; select bank0
  7334  09A7  01E2               	clrf	setProductData@value
  7335  09A8  300B               	movlw	11
  7336  09A9  319D  2573  3189   	fcall	_setProductData
  7337                           
  7338                           ;RF_Control_B1.c: 360: setProductData(17, 0);
  7339  09AC  0020               	movlb	0	; select bank0
  7340  09AD  01E2               	clrf	setProductData@value
  7341  09AE  3011               	movlw	17
  7342  09AF  319D  2573  3189   	fcall	_setProductData
  7343                           
  7344                           ;RF_Control_B1.c: 361: setTxData();
  7345  09B2  318D  255F         	fcall	_setTxData
  7346                           
  7347                           ;RF_Control_B1.c: 362: break;
  7348  09B4  0008               	return
  7349  09B5                     l8756:	
  7350                           ;RF_Control_B1.c: 363: case 0x01:
  7351                           
  7352                           
  7353                           ;RF_Control_B1.c: 365: setRFSW_Control(1);
  7354  09B5  3001               	movlw	1
  7355  09B6  3195  25B4         	fcall	_setRFSW_Control
  7356                           
  7357                           ;RF_Control_B1.c: 377: break;
  7358                           
  7359                           ;RF_Control_B1.c: 373: case 0x03:
  7360                           
  7361                           ;RF_Control_B1.c: 372: break;
  7362                           
  7363                           ;RF_Control_B1.c: 368: case 0x02:
  7364                           
  7365                           ;RF_Control_B1.c: 367: break;
  7366  09B8  0008               	return
  7367  09B9                     l8758:	
  7368                           ;RF_Control_B1.c: 378: case 0x11:
  7369                           
  7370                           
  7371                           ;RF_Control_B1.c: 381: setRFSW_AdjControl(1);
  7372  09B9  3001               	movlw	1
  7373  09BA  3194  241C         	fcall	_setRFSW_AdjControl
  7374                           
  7375                           ;RF_Control_B1.c: 399: }
  7376                           
  7377                           ;RF_Control_B1.c: 398: break;
  7378                           
  7379                           ;RF_Control_B1.c: 392: case 0x31:
  7380                           
  7381                           ;RF_Control_B1.c: 391: break;
  7382                           
  7383                           ;RF_Control_B1.c: 385: case 0x21:
  7384                           
  7385                           ;RF_Control_B1.c: 384: break;
  7386  09BC  0008               	return
  7387  09BD                     l8762:	
  7388  09BD  0023               	movlb	3	; select bank3
  7389  09BE  082F               	movf	(_RF_Data^(0+384)+15),w
  7390                           
  7391                           ; Switch size 1, requested type "space"
  7392                           ; Number of cases is 8, Range of values is 0 to 49
  7393                           ; switch strategies available:
  7394                           ; Name         Instructions Cycles
  7395                           ; simple_byte           25    13 (average)
  7396                           ; direct_byte          106     6 (fixed)
  7397                           ; jumptable            260     6 (fixed)
  7398                           ;	Chosen strategy is simple_byte
  7399  09BF  3A00               	xorlw	0	; case 0
  7400  09C0  1903               	skipnz
  7401  09C1  297B               	goto	l8750
  7402  09C2  3A01               	xorlw	1	; case 1
  7403  09C3  1903               	skipnz
  7404  09C4  29B5               	goto	l8756
  7405  09C5  3A03               	xorlw	3	; case 2
  7406  09C6  1903               	skipnz
  7407  09C7  29D8               	goto	l2103
  7408  09C8  3A01               	xorlw	1	; case 3
  7409  09C9  1903               	skipnz
  7410  09CA  29D8               	goto	l2103
  7411  09CB  3A12               	xorlw	18	; case 17
  7412  09CC  1903               	skipnz
  7413  09CD  29B9               	goto	l8758
  7414  09CE  3A31               	xorlw	49	; case 32
  7415  09CF  1903               	skipnz
  7416  09D0  29A0               	goto	l8754
  7417  09D1  3A01               	xorlw	1	; case 33
  7418  09D2  1903               	skipnz
  7419  09D3  29D8               	goto	l2103
  7420  09D4  3A10               	xorlw	16	; case 49
  7421  09D5  1903               	skipnz
  7422  09D6  29D8               	goto	l2103
  7423  09D7  29D8               	goto	l2103
  7424  09D8                     l2103:	
  7425  09D8  0008               	return
  7426  09D9                     __end_of_setControl_Lights_Table:	
  7427                           
  7428                           	psect	text27
  7429  15B4                     __ptext27:	
  7430 ;; *************** function _setRFSW_Control *****************
  7431 ;; Defined at:
  7432 ;;		line 426 in file "../src/RF_Control_B1.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;  sw              1    wreg     unsigned char 
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;  sw              1   78[BANK0 ] unsigned char 
  7437 ;;  status          1   77[BANK0 ] unsigned char 
  7438 ;; Return value:  Size  Location     Type
  7439 ;;		None               void
  7440 ;; Registers used:
  7441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;Total ram usage:        3 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    9
  7454 ;; This function calls:
  7455 ;;		_getDelayOff_GO
  7456 ;;		_getDimmerLights_Status
  7457 ;;		_setBuz
  7458 ;;		_setDelayOff_GO
  7459 ;;		_setDimmerLights_SwOff
  7460 ;;		_setDimmerLights_SwOn
  7461 ;;		_setRF_DimmerLights
  7462 ;;		_setTxData
  7463 ;; This function is called by:
  7464 ;;		_setControl_Lights_Table
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           
  7469                           ;psect for function _setRFSW_Control
  7470  15B4                     _setRFSW_Control:	
  7471                           
  7472                           ;incstack = 0
  7473                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7474                           ;setRFSW_Control@sw stored from wreg
  7475  15B4  0020               	movlb	0	; select bank0
  7476  15B5  00EE               	movwf	setRFSW_Control@sw
  7477                           
  7478                           ;RF_Control_B1.c: 427: char status = 0;
  7479  15B6  01ED               	clrf	setRFSW_Control@status
  7480                           
  7481                           ;RF_Control_B1.c: 430: if (RF_Data[16] == 0x80) {
  7482  15B7  0023               	movlb	3	; select bank3
  7483  15B8  0830               	movf	(_RF_Data^(0+384)+16),w
  7484  15B9  3A80               	xorlw	128
  7485  15BA  1D03               	skipz
  7486  15BB  2DE7               	goto	l8610
  7487                           
  7488                           ;RF_Control_B1.c: 431: setDelayOff_GO(sw, 1, RF_Data[17]);
  7489  15BC  0020               	movlb	0	; select bank0
  7490  15BD  01E6               	clrf	setDelayOff_GO@command
  7491  15BE  0AE6               	incf	setDelayOff_GO@command,f
  7492  15BF  0023               	movlb	3	; select bank3
  7493  15C0  0831               	movf	(_RF_Data^(0+384)+17),w
  7494  15C1  0020               	movlb	0	; select bank0
  7495  15C2  00EC               	movwf	??_setRFSW_Control
  7496  15C3  086C               	movf	??_setRFSW_Control,w
  7497  15C4  00E7               	movwf	setDelayOff_GO@value
  7498  15C5  086E               	movf	setRFSW_Control@sw,w
  7499  15C6  3196  26F7  3195   	fcall	_setDelayOff_GO
  7500                           
  7501                           ;RF_Control_B1.c: 432: if (getDimmerLights_Status(sw) == 1) {
  7502  15C9  0020               	movlb	0	; select bank0
  7503  15CA  086E               	movf	setRFSW_Control@sw,w
  7504  15CB  319D  25DC  3195   	fcall	_getDimmerLights_Status
  7505  15CE  3A01               	xorlw	1
  7506  15CF  1D03               	skipz
  7507  15D0  2DF6               	goto	l8614
  7508                           
  7509                           ;RF_Control_B1.c: 433: setBuz(1, 100);
  7510  15D1  3064               	movlw	100
  7511  15D2  0020               	movlb	0	; select bank0
  7512  15D3  00A9               	movwf	setBuz@time
  7513  15D4  3000               	movlw	0
  7514  15D5  00AA               	movwf	setBuz@time+1
  7515  15D6  3001               	movlw	1
  7516  15D7  3197  27A7  3195   	fcall	_setBuz
  7517                           
  7518                           ;RF_Control_B1.c: 434: status = 1;
  7519  15DA  0020               	movlb	0	; select bank0
  7520  15DB  01ED               	clrf	setRFSW_Control@status
  7521  15DC  0AED               	incf	setRFSW_Control@status,f
  7522                           
  7523                           ;RF_Control_B1.c: 435: setRF_DimmerLights(sw, 1);
  7524  15DD  01E6               	clrf	setRF_DimmerLights@on
  7525  15DE  0AE6               	incf	setRF_DimmerLights@on,f
  7526  15DF  086E               	movf	setRFSW_Control@sw,w
  7527  15E0  3188  2011  3195   	fcall	_setRF_DimmerLights
  7528                           
  7529                           ;RF_Control_B1.c: 436: setTxData();
  7530  15E3  318D  255F  3195   	fcall	_setTxData
  7531                           
  7532                           ;RF_Control_B1.c: 438: }
  7533                           ;RF_Control_B1.c: 439: } else {
  7534  15E6  2DF6               	goto	l8614
  7535  15E7                     l8610:	
  7536                           
  7537                           ;RF_Control_B1.c: 441: if (getDelayOff_GO(sw) == 1) {
  7538  15E7  0020               	movlb	0	; select bank0
  7539  15E8  086E               	movf	setRFSW_Control@sw,w
  7540  15E9  319D  25ED  3195   	fcall	_getDelayOff_GO
  7541  15EC  3A01               	xorlw	1
  7542  15ED  1D03               	skipz
  7543  15EE  2DF6               	goto	l8614
  7544                           
  7545                           ;RF_Control_B1.c: 442: setDelayOff_GO(sw, 0, 0);
  7546  15EF  0020               	movlb	0	; select bank0
  7547  15F0  01E6               	clrf	setDelayOff_GO@command
  7548  15F1  01E7               	clrf	setDelayOff_GO@value
  7549  15F2  086E               	movf	setRFSW_Control@sw,w
  7550  15F3  3196  26F7  3195   	fcall	_setDelayOff_GO
  7551  15F6                     l8614:	
  7552                           
  7553                           ;RF_Control_B1.c: 443: }
  7554                           ;RF_Control_B1.c: 445: }
  7555                           ;RF_Control_B1.c: 446: if (status == 0) {
  7556  15F6  0020               	movlb	0	; select bank0
  7557  15F7  08ED               	movf	setRFSW_Control@status,f
  7558  15F8  1D03               	skipz
  7559  15F9  0008               	return
  7560                           
  7561                           ;RF_Control_B1.c: 448: setDimmerLights_SwOn(sw);
  7562  15FA  086E               	movf	setRFSW_Control@sw,w
  7563  15FB  3194  2498  3195   	fcall	_setDimmerLights_SwOn
  7564                           
  7565                           ;RF_Control_B1.c: 449: setDimmerLights_SwOff(sw);
  7566  15FE  0020               	movlb	0	; select bank0
  7567  15FF  086E               	movf	setRFSW_Control@sw,w
  7568  1600  3197  274F         	fcall	_setDimmerLights_SwOff
  7569  1602  0008               	return
  7570  1603                     __end_of_setRFSW_Control:	
  7571                           
  7572                           	psect	text28
  7573  1498                     __ptext28:	
  7574 ;; *************** function _setDimmerLights_SwOn *****************
  7575 ;; Defined at:
  7576 ;;		line 405 in file "../src/Dimmer_B1.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  sw              1    wreg     unsigned char 
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;  sw              1   15[BANK0 ] unsigned char 
  7581 ;;  idle            1   14[BANK0 ] unsigned char 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;		None               void
  7584 ;; Registers used:
  7585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;Total ram usage:        3 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    7
  7598 ;; This function calls:
  7599 ;;		_DimmerLightsPointSelect
  7600 ;;		_getDimmerLights_Allow_Condition
  7601 ;;		_setBuz
  7602 ;; This function is called by:
  7603 ;;		_setRFSW_Control
  7604 ;;		_setSw_Main
  7605 ;; This function uses a non-reentrant model
  7606 ;;
  7607                           
  7608                           
  7609                           ;psect for function _setDimmerLights_SwOn
  7610  1498                     _setDimmerLights_SwOn:	
  7611                           
  7612                           ;incstack = 0
  7613                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7614                           ;setDimmerLights_SwOn@sw stored from wreg
  7615  1498  0020               	movlb	0	; select bank0
  7616  1499  00AF               	movwf	setDimmerLights_SwOn@sw
  7617                           
  7618                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7619  149A  082F               	movf	setDimmerLights_SwOn@sw,w
  7620  149B  319C  24DC  3194   	fcall	_DimmerLightsPointSelect
  7621                           
  7622                           ;Dimmer_B1.c: 407: char idle = getDimmerLights_Allow_Condition(sw);
  7623  149E  0020               	movlb	0	; select bank0
  7624  149F  082F               	movf	setDimmerLights_SwOn@sw,w
  7625  14A0  319C  2460  3194   	fcall	_getDimmerLights_Allow_Condition
  7626  14A3  0020               	movlb	0	; select bank0
  7627  14A4  00AD               	movwf	??_setDimmerLights_SwOn
  7628  14A5  082D               	movf	??_setDimmerLights_SwOn,w
  7629  14A6  00AE               	movwf	setDimmerLights_SwOn@idle
  7630                           
  7631                           ;Dimmer_B1.c: 412: if (idle == 0) {
  7632  14A7  08AE               	movf	setDimmerLights_SwOn@idle,f
  7633  14A8  1D03               	skipz
  7634  14A9  0008               	return
  7635                           
  7636                           ;Dimmer_B1.c: 413: DimmerLights->SwFlag = 1;
  7637  14AA  0875               	movf	_DimmerLights,w
  7638  14AB  3E0B               	addlw	11
  7639  14AC  0086               	movwf	6
  7640  14AD  3001               	movlw	1	; select bank2/3
  7641  14AE  0087               	movwf	7
  7642  14AF  1481               	bsf	1,1
  7643                           
  7644                           ;Dimmer_B1.c: 414: if (DimmerLights->Status == 0) {
  7645  14B0  0875               	movf	_DimmerLights,w
  7646  14B1  3E02               	addlw	2
  7647  14B2  0086               	movwf	6
  7648  14B3  3001               	movlw	1	; select bank2/3
  7649  14B4  0087               	movwf	7
  7650  14B5  1881               	btfsc	1,1
  7651  14B6  2CCA               	goto	l8412
  7652                           
  7653                           ;Dimmer_B1.c: 415: DimmerLights->Status = 1;
  7654  14B7  0875               	movf	_DimmerLights,w
  7655  14B8  3E02               	addlw	2
  7656  14B9  0086               	movwf	6
  7657  14BA  3001               	movlw	1	; select bank2/3
  7658  14BB  0087               	movwf	7
  7659  14BC  1481               	bsf	1,1
  7660                           
  7661                           ;Dimmer_B1.c: 416: DimmerLights->Trigger = 1;
  7662  14BD  0875               	movf	_DimmerLights,w
  7663  14BE  3E0A               	addlw	10
  7664  14BF  0086               	movwf	6
  7665  14C0  3001               	movlw	1	; select bank2/3
  7666  14C1  0087               	movwf	7
  7667  14C2  1481               	bsf	1,1
  7668                           
  7669                           ;Dimmer_B1.c: 417: DimmerLights->Switch = 1;
  7670  14C3  0875               	movf	_DimmerLights,w
  7671  14C4  3E0A               	addlw	10
  7672  14C5  0086               	movwf	6
  7673  14C6  3001               	movlw	1	; select bank2/3
  7674  14C7  0087               	movwf	7
  7675  14C8  1401               	bsf	1,0
  7676                           
  7677                           ;Dimmer_B1.c: 418: } else {
  7678  14C9  2CD0               	goto	l8414
  7679  14CA                     l8412:	
  7680                           
  7681                           ;Dimmer_B1.c: 419: DimmerLights->Status = 0;
  7682  14CA  0875               	movf	_DimmerLights,w
  7683  14CB  3E02               	addlw	2
  7684  14CC  0086               	movwf	6
  7685  14CD  3001               	movlw	1	; select bank2/3
  7686  14CE  0087               	movwf	7
  7687  14CF  1081               	bcf	1,1
  7688  14D0                     l8414:	
  7689                           
  7690                           ;Dimmer_B1.c: 420: }
  7691                           ;Dimmer_B1.c: 421: setBuz(1, 100);
  7692  14D0  3064               	movlw	100
  7693  14D1  00A9               	movwf	setBuz@time
  7694  14D2  3000               	movlw	0
  7695  14D3  00AA               	movwf	setBuz@time+1
  7696  14D4  3001               	movlw	1
  7697  14D5  3197  27A7         	fcall	_setBuz
  7698  14D7  0008               	return
  7699  14D8                     __end_of_setDimmerLights_SwOn:	
  7700                           
  7701                           	psect	text29
  7702  141C                     __ptext29:	
  7703 ;; *************** function _setRFSW_AdjControl *****************
  7704 ;; Defined at:
  7705 ;;		line 455 in file "../src/RF_Control_B1.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  sw              1    wreg     unsigned char 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  sw              1   75[BANK0 ] unsigned char 
  7710 ;;  status          1   74[BANK0 ] unsigned char 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;		None               void
  7713 ;; Registers used:
  7714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;Total ram usage:        4 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:   10
  7727 ;; This function calls:
  7728 ;;		_getDimmerLights_Status
  7729 ;;		_setMemory_Modify
  7730 ;;		_setProductData
  7731 ;;		_setRF_DimmerValue
  7732 ;;		_setTxData
  7733 ;; This function is called by:
  7734 ;;		_setControl_Lights_Table
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           
  7739                           ;psect for function _setRFSW_AdjControl
  7740  141C                     _setRFSW_AdjControl:	
  7741                           
  7742                           ;incstack = 0
  7743                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7744                           ;setRFSW_AdjControl@sw stored from wreg
  7745  141C  0020               	movlb	0	; select bank0
  7746  141D  00EB               	movwf	setRFSW_AdjControl@sw
  7747                           
  7748                           ;RF_Control_B1.c: 456: char status = 0;
  7749  141E  01EA               	clrf	setRFSW_AdjControl@status
  7750                           
  7751                           ;RF_Control_B1.c: 458: status = getDimmerLights_Status(sw);
  7752  141F  086B               	movf	setRFSW_AdjControl@sw,w
  7753  1420  319D  25DC  3194   	fcall	_getDimmerLights_Status
  7754  1423  0020               	movlb	0	; select bank0
  7755  1424  00E8               	movwf	??_setRFSW_AdjControl
  7756  1425  0868               	movf	??_setRFSW_AdjControl,w
  7757  1426  00EA               	movwf	setRFSW_AdjControl@status
  7758                           
  7759                           ;RF_Control_B1.c: 461: if (status == 1) {
  7760  1427  086A               	movf	setRFSW_AdjControl@status,w
  7761  1428  3A01               	xorlw	1
  7762  1429  1D03               	skipz
  7763  142A  2C35               	goto	l8628
  7764                           
  7765                           ;RF_Control_B1.c: 462: setMemory_Modify(1);
  7766  142B  3001               	movlw	1
  7767  142C  319E  2668  3194   	fcall	_setMemory_Modify
  7768                           
  7769                           ;RF_Control_B1.c: 463: setRF_DimmerValue(sw);
  7770  142F  0020               	movlb	0	; select bank0
  7771  1430  086B               	movf	setRFSW_AdjControl@sw,w
  7772  1431  3191  21D2  3194   	fcall	_setRF_DimmerValue
  7773                           
  7774                           ;RF_Control_B1.c: 464: } else {
  7775  1434  2C46               	goto	l2115
  7776  1435                     l8628:	
  7777                           
  7778                           ;RF_Control_B1.c: 465: setProductData(9, product->Data[20 + sw]);
  7779  1435  0020               	movlb	0	; select bank0
  7780  1436  086B               	movf	setRFSW_AdjControl@sw,w
  7781  1437  3E14               	addlw	20
  7782  1438  0779               	addwf	_product,w
  7783  1439  00E8               	movwf	??_setRFSW_AdjControl
  7784  143A  0868               	movf	??_setRFSW_AdjControl,w
  7785  143B  0086               	movwf	6
  7786  143C  3002               	movlw	2	; select bank4/5
  7787  143D  0087               	movwf	7
  7788  143E  0801               	movf	1,w
  7789  143F  00E9               	movwf	??_setRFSW_AdjControl+1
  7790  1440  0869               	movf	??_setRFSW_AdjControl+1,w
  7791  1441  00E2               	movwf	setProductData@value
  7792  1442  3009               	movlw	9
  7793  1443  319D  2573  3194   	fcall	_setProductData
  7794  1446                     l2115:	
  7795                           
  7796                           ;RF_Control_B1.c: 466: }
  7797                           ;RF_Control_B1.c: 467: setProductData(17, product->Data[26 + sw]);
  7798  1446  0020               	movlb	0	; select bank0
  7799  1447  086B               	movf	setRFSW_AdjControl@sw,w
  7800  1448  3E1A               	addlw	26
  7801  1449  0779               	addwf	_product,w
  7802  144A  00E8               	movwf	??_setRFSW_AdjControl
  7803  144B  0868               	movf	??_setRFSW_AdjControl,w
  7804  144C  0086               	movwf	6
  7805  144D  3002               	movlw	2	; select bank4/5
  7806  144E  0087               	movwf	7
  7807  144F  0801               	movf	1,w
  7808  1450  00E9               	movwf	??_setRFSW_AdjControl+1
  7809  1451  0869               	movf	??_setRFSW_AdjControl+1,w
  7810  1452  00E2               	movwf	setProductData@value
  7811  1453  3011               	movlw	17
  7812  1454  319D  2573  3194   	fcall	_setProductData
  7813                           
  7814                           ;RF_Control_B1.c: 468: setTxData();
  7815  1457  318D  255F         	fcall	_setTxData
  7816  1459  0008               	return
  7817  145A                     __end_of_setRFSW_AdjControl:	
  7818                           
  7819                           	psect	text30
  7820  11D2                     __ptext30:	
  7821 ;; *************** function _setRF_DimmerValue *****************
  7822 ;; Defined at:
  7823 ;;		line 473 in file "../src/RF_Control_B1.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  lights          1    wreg     unsigned char 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  lights          1   71[BANK0 ] unsigned char 
  7828 ;; Return value:  Size  Location     Type
  7829 ;;		None               void
  7830 ;; Registers used:
  7831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7832 ;; Tracked objects:
  7833 ;;		On entry : 0/0
  7834 ;;		On exit  : 0/0
  7835 ;;		Unchanged: 0/0
  7836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;Total ram usage:        2 bytes
  7842 ;; Hardware stack levels used:    1
  7843 ;; Hardware stack levels required when called:    9
  7844 ;; This function calls:
  7845 ;;		_setDimmerLights_AdjRF
  7846 ;;		_setProductData
  7847 ;; This function is called by:
  7848 ;;		_setRFSW_AdjControl
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           
  7853                           ;psect for function _setRF_DimmerValue
  7854  11D2                     _setRF_DimmerValue:	
  7855                           
  7856                           ;incstack = 0
  7857                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7858                           ;setRF_DimmerValue@lights stored from wreg
  7859  11D2  0020               	movlb	0	; select bank0
  7860  11D3  00E7               	movwf	setRF_DimmerValue@lights
  7861                           
  7862                           ;RF_Control_B1.c: 474: if (RF_Data[9] > 0x64) {
  7863  11D4  3065               	movlw	101
  7864  11D5  0023               	movlb	3	; select bank3
  7865  11D6  0229               	subwf	(_RF_Data^(0+384)+9),w
  7866  11D7  1C03               	skipc
  7867  11D8  29DF               	goto	l8510
  7868                           
  7869                           ;RF_Control_B1.c: 475: RF_Data[9] = 0x64;
  7870  11D9  3064               	movlw	100
  7871  11DA  0020               	movlb	0	; select bank0
  7872  11DB  00E6               	movwf	??_setRF_DimmerValue
  7873  11DC  0866               	movf	??_setRF_DimmerValue,w
  7874  11DD  0023               	movlb	3	; select bank3
  7875  11DE  00A9               	movwf	(_RF_Data^(0+384)+9)
  7876  11DF                     l8510:	
  7877                           
  7878                           ;RF_Control_B1.c: 476: }
  7879                           ;RF_Control_B1.c: 477: setProductData(9, RF_Data[9]);
  7880  11DF  0829               	movf	(_RF_Data^(0+384)+9),w
  7881  11E0  0020               	movlb	0	; select bank0
  7882  11E1  00E6               	movwf	??_setRF_DimmerValue
  7883  11E2  0866               	movf	??_setRF_DimmerValue,w
  7884  11E3  00E2               	movwf	setProductData@value
  7885  11E4  3009               	movlw	9
  7886  11E5  319D  2573  3191   	fcall	_setProductData
  7887                           
  7888                           ;RF_Control_B1.c: 478: setProductData(11, lights);
  7889  11E8  0020               	movlb	0	; select bank0
  7890  11E9  0867               	movf	setRF_DimmerValue@lights,w
  7891  11EA  00E6               	movwf	??_setRF_DimmerValue
  7892  11EB  0866               	movf	??_setRF_DimmerValue,w
  7893  11EC  00E2               	movwf	setProductData@value
  7894  11ED  300B               	movlw	11
  7895  11EE  319D  2573  3191   	fcall	_setProductData
  7896                           
  7897                           ;RF_Control_B1.c: 479: setProductData((20 + lights), RF_Data[9]);
  7898  11F1  0023               	movlb	3	; select bank3
  7899  11F2  0829               	movf	(_RF_Data^(0+384)+9),w
  7900  11F3  0020               	movlb	0	; select bank0
  7901  11F4  00E6               	movwf	??_setRF_DimmerValue
  7902  11F5  0866               	movf	??_setRF_DimmerValue,w
  7903  11F6  00E2               	movwf	setProductData@value
  7904  11F7  0867               	movf	setRF_DimmerValue@lights,w
  7905  11F8  3E14               	addlw	20
  7906  11F9  319D  2573  3191   	fcall	_setProductData
  7907                           
  7908                           ;RF_Control_B1.c: 480: setDimmerLights_AdjRF(lights);
  7909  11FC  0020               	movlb	0	; select bank0
  7910  11FD  0867               	movf	setRF_DimmerValue@lights,w
  7911  11FE  3190  2091         	fcall	_setDimmerLights_AdjRF
  7912  1200  0008               	return
  7913  1201                     __end_of_setRF_DimmerValue:	
  7914                           
  7915                           	psect	text31
  7916  1091                     __ptext31:	
  7917 ;; *************** function _setDimmerLights_AdjRF *****************
  7918 ;; Defined at:
  7919 ;;		line 836 in file "../src/Dimmer_B1.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  lights          1    wreg     unsigned char 
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;  lights          1   67[BANK0 ] unsigned char 
  7924 ;; Return value:  Size  Location     Type
  7925 ;;		None               void
  7926 ;; Registers used:
  7927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;Total ram usage:        2 bytes
  7938 ;; Hardware stack levels used:    1
  7939 ;; Hardware stack levels required when called:    8
  7940 ;; This function calls:
  7941 ;;		_DimmerLightsPointSelect
  7942 ;;		_getPercentValue
  7943 ;; This function is called by:
  7944 ;;		_setRF_DimmerValue
  7945 ;; This function uses a non-reentrant model
  7946 ;;
  7947                           
  7948                           
  7949                           ;psect for function _setDimmerLights_AdjRF
  7950  1091                     _setDimmerLights_AdjRF:	
  7951                           
  7952                           ;incstack = 0
  7953                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7954                           ;setDimmerLights_AdjRF@lights stored from wreg
  7955  1091  0020               	movlb	0	; select bank0
  7956  1092  00E3               	movwf	setDimmerLights_AdjRF@lights
  7957                           
  7958                           ;Dimmer_B1.c: 838: DimmerLightsPointSelect(lights);
  7959  1093  0863               	movf	setDimmerLights_AdjRF@lights,w
  7960  1094  319C  24DC  3190   	fcall	_DimmerLightsPointSelect
  7961                           
  7962                           ;Dimmer_B1.c: 839: DimmerLights->AdjRF = 1;
  7963  1097  0875               	movf	_DimmerLights,w
  7964  1098  3E02               	addlw	2
  7965  1099  0086               	movwf	6
  7966  109A  3001               	movlw	1	; select bank2/3
  7967  109B  0087               	movwf	7
  7968  109C  1401               	bsf	1,0
  7969                           
  7970                           ;Dimmer_B1.c: 840: DimmerLights->Signal = 1;
  7971  109D  0A75               	incf	_DimmerLights,w
  7972  109E  0086               	movwf	6
  7973  109F  3001               	movlw	1	; select bank2/3
  7974  10A0  0087               	movwf	7
  7975  10A1  1681               	bsf	1,5
  7976                           
  7977                           ;Dimmer_B1.c: 841: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7978  10A2  0879               	movf	_product,w
  7979  10A3  3E09               	addlw	9
  7980  10A4  0086               	movwf	6
  7981  10A5  3002               	movlw	2	; select bank4/5
  7982  10A6  0087               	movwf	7
  7983  10A7  0801               	movf	1,w
  7984  10A8  318B  2367         	fcall	_getPercentValue
  7985  10AA  0020               	movlb	0	; select bank0
  7986  10AB  00E2               	movwf	??_setDimmerLights_AdjRF
  7987  10AC  0875               	movf	_DimmerLights,w
  7988  10AD  3E06               	addlw	6
  7989  10AE  0086               	movwf	6
  7990  10AF  3001               	movlw	1	; select bank2/3
  7991  10B0  0087               	movwf	7
  7992  10B1  0862               	movf	??_setDimmerLights_AdjRF,w
  7993  10B2  0081               	movwf	1
  7994  10B3  0008               	return
  7995  10B4                     __end_of_setDimmerLights_AdjRF:	
  7996                           
  7997                           	psect	text32
  7998  0B67                     __ptext32:	
  7999 ;; *************** function _getPercentValue *****************
  8000 ;; Defined at:
  8001 ;;		line 951 in file "../src/Dimmer_B1.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  value           1    wreg     unsigned char 
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;  value           1   62[BANK0 ] unsigned char 
  8006 ;;  i               3   63[BANK0 ] float 
  8007 ;; Return value:  Size  Location     Type
  8008 ;;                  1    wreg      unsigned char 
  8009 ;; Registers used:
  8010 ;;		wreg, status,2, status,0, pclath, cstack
  8011 ;; Tracked objects:
  8012 ;;		On entry : 0/0
  8013 ;;		On exit  : 0/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;Total ram usage:        6 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; Hardware stack levels required when called:    7
  8023 ;; This function calls:
  8024 ;;		___awtoft
  8025 ;;		___ftadd
  8026 ;;		___ftdiv
  8027 ;;		___ftmul
  8028 ;;		___ftneg
  8029 ;;		___fttol
  8030 ;; This function is called by:
  8031 ;;		_setDimmerLights_AdjRF
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function _getPercentValue
  8037  0B67                     _getPercentValue:	
  8038                           
  8039                           ;incstack = 0
  8040                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8041                           ;getPercentValue@value stored from wreg
  8042  0B67  0020               	movlb	0	; select bank0
  8043  0B68  00DE               	movwf	getPercentValue@value
  8044                           
  8045                           ;Dimmer_B1.c: 959: float i = ((char)(45*0.8)) - ((char)(15*0.8));
  8046  0B69  3000               	movlw	0
  8047  0B6A  00DF               	movwf	getPercentValue@i
  8048  0B6B  30C0               	movlw	192
  8049  0B6C  00E0               	movwf	getPercentValue@i+1
  8050  0B6D  3041               	movlw	65
  8051  0B6E  00E1               	movwf	getPercentValue@i+2
  8052                           
  8053                           ;Dimmer_B1.c: 960: i /= 100;
  8054  0B6F  3000               	movlw	0
  8055  0B70  00AE               	movwf	___ftdiv@f2
  8056  0B71  30C8               	movlw	200
  8057  0B72  00AF               	movwf	___ftdiv@f2+1
  8058  0B73  3042               	movlw	66
  8059  0B74  00B0               	movwf	___ftdiv@f2+2
  8060  0B75  085F               	movf	getPercentValue@i,w
  8061  0B76  00B1               	movwf	___ftdiv@f1
  8062  0B77  0860               	movf	getPercentValue@i+1,w
  8063  0B78  00B2               	movwf	___ftdiv@f1+1
  8064  0B79  0861               	movf	getPercentValue@i+2,w
  8065  0B7A  00B3               	movwf	___ftdiv@f1+2
  8066  0B7B  318D  25FA  318B   	fcall	___ftdiv
  8067  0B7E  0020               	movlb	0	; select bank0
  8068  0B7F  082E               	movf	?___ftdiv,w
  8069  0B80  00DF               	movwf	getPercentValue@i
  8070  0B81  082F               	movf	?___ftdiv+1,w
  8071  0B82  00E0               	movwf	getPercentValue@i+1
  8072  0B83  0830               	movf	?___ftdiv+2,w
  8073  0B84  00E1               	movwf	getPercentValue@i+2
  8074                           
  8075                           ;Dimmer_B1.c: 962: return (char) (((char)(45*0.8)) - ((100 - value) * i));
  8076  0B85  085E               	movf	getPercentValue@value,w
  8077  0B86  00DC               	movwf	??_getPercentValue
  8078  0B87  01DD               	clrf	??_getPercentValue+1
  8079  0B88  09DC               	comf	??_getPercentValue,f
  8080  0B89  09DD               	comf	??_getPercentValue+1,f
  8081  0B8A  0ADC               	incf	??_getPercentValue,f
  8082  0B8B  1903               	skipnz
  8083  0B8C  0ADD               	incf	??_getPercentValue+1,f
  8084  0B8D  085C               	movf	??_getPercentValue,w
  8085  0B8E  3E64               	addlw	100
  8086  0B8F  00A8               	movwf	___awtoft@c
  8087  0B90  3000               	movlw	0
  8088  0B91  3D5D               	addwfc	??_getPercentValue+1,w
  8089  0B92  00A9               	movwf	___awtoft@c+1
  8090  0B93  319F  27DE  318B   	fcall	___awtoft
  8091  0B96  0020               	movlb	0	; select bank0
  8092  0B97  0828               	movf	?___awtoft,w
  8093  0B98  00B1               	movwf	___ftmul@f2
  8094  0B99  0829               	movf	?___awtoft+1,w
  8095  0B9A  00B2               	movwf	___ftmul@f2+1
  8096  0B9B  082A               	movf	?___awtoft+2,w
  8097  0B9C  00B3               	movwf	___ftmul@f2+2
  8098  0B9D  085F               	movf	getPercentValue@i,w
  8099  0B9E  00AE               	movwf	___ftmul@f1
  8100  0B9F  0860               	movf	getPercentValue@i+1,w
  8101  0BA0  00AF               	movwf	___ftmul@f1+1
  8102  0BA1  0861               	movf	getPercentValue@i+2,w
  8103  0BA2  00B0               	movwf	___ftmul@f1+2
  8104  0BA3  3186  26DB  318B   	fcall	___ftmul
  8105  0BA6  0020               	movlb	0	; select bank0
  8106  0BA7  082E               	movf	?___ftmul,w
  8107  0BA8  00BE               	movwf	___ftneg@f1
  8108  0BA9  082F               	movf	?___ftmul+1,w
  8109  0BAA  00BF               	movwf	___ftneg@f1+1
  8110  0BAB  0830               	movf	?___ftmul+2,w
  8111  0BAC  00C0               	movwf	___ftneg@f1+2
  8112  0BAD  319C  24A2  318B   	fcall	___ftneg
  8113  0BB0  0020               	movlb	0	; select bank0
  8114  0BB1  083E               	movf	?___ftneg,w
  8115  0BB2  00C4               	movwf	___ftadd@f2
  8116  0BB3  083F               	movf	?___ftneg+1,w
  8117  0BB4  00C5               	movwf	___ftadd@f2+1
  8118  0BB5  0840               	movf	?___ftneg+2,w
  8119  0BB6  00C6               	movwf	___ftadd@f2+2
  8120  0BB7  3000               	movlw	0
  8121  0BB8  00C1               	movwf	___ftadd@f1
  8122  0BB9  3010               	movlw	16
  8123  0BBA  00C2               	movwf	___ftadd@f1+1
  8124  0BBB  3042               	movlw	66
  8125  0BBC  00C3               	movwf	___ftadd@f1+2
  8126  0BBD  3184  242E  318B   	fcall	___ftadd
  8127  0BC0  0020               	movlb	0	; select bank0
  8128  0BC1  0841               	movf	?___ftadd,w
  8129  0BC2  00CE               	movwf	___fttol@f1
  8130  0BC3  0842               	movf	?___ftadd+1,w
  8131  0BC4  00CF               	movwf	___fttol@f1+1
  8132  0BC5  0843               	movf	?___ftadd+2,w
  8133  0BC6  00D0               	movwf	___fttol@f1+2
  8134  0BC7  318C  244D         	fcall	___fttol
  8135  0BC9  0020               	movlb	0	; select bank0
  8136  0BCA  084E               	movf	?___fttol,w
  8137  0BCB  0008               	return
  8138  0BCC                     __end_of_getPercentValue:	
  8139                           
  8140                           	psect	text33
  8141  06DB                     __ptext33:	
  8142 ;; *************** function ___ftmul *****************
  8143 ;; Defined at:
  8144 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;  f1              3   14[BANK0 ] float 
  8147 ;;  f2              3   17[BANK0 ] float 
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8150 ;;  sign            1   29[BANK0 ] unsigned char 
  8151 ;;  cntr            1   28[BANK0 ] unsigned char 
  8152 ;;  exp             1   24[BANK0 ] unsigned char 
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  3   14[BANK0 ] float 
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, status,0, pclath, cstack
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8162 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;Total ram usage:       16 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    6
  8169 ;; This function calls:
  8170 ;;		___ftpack
  8171 ;; This function is called by:
  8172 ;;		_getPercentValue
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           
  8177                           ;psect for function ___ftmul
  8178  06DB                     ___ftmul:	
  8179                           
  8180                           ;incstack = 0
  8181                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8182  06DB  0020               	movlb	0	; select bank0
  8183  06DC  082E               	movf	___ftmul@f1,w
  8184  06DD  00B4               	movwf	??___ftmul
  8185  06DE  082F               	movf	___ftmul@f1+1,w
  8186  06DF  00B5               	movwf	??___ftmul+1
  8187  06E0  0830               	movf	___ftmul@f1+2,w
  8188  06E1  00B6               	movwf	??___ftmul+2
  8189  06E2  1003               	clrc
  8190  06E3  0D35               	rlf	??___ftmul+1,w
  8191  06E4  0D36               	rlf	??___ftmul+2,w
  8192  06E5  00B7               	movwf	??___ftmul+3
  8193  06E6  0837               	movf	??___ftmul+3,w
  8194  06E7  00B8               	movwf	___ftmul@exp
  8195  06E8  08B8               	movf	___ftmul@exp,f
  8196  06E9  1D03               	skipz
  8197  06EA  2EF2               	goto	l8154
  8198  06EB  3000               	movlw	0
  8199  06EC  00AE               	movwf	?___ftmul
  8200  06ED  3000               	movlw	0
  8201  06EE  00AF               	movwf	?___ftmul+1
  8202  06EF  3000               	movlw	0
  8203  06F0  00B0               	movwf	?___ftmul+2
  8204  06F1  0008               	return
  8205  06F2                     l8154:	
  8206  06F2  0831               	movf	___ftmul@f2,w
  8207  06F3  00B4               	movwf	??___ftmul
  8208  06F4  0832               	movf	___ftmul@f2+1,w
  8209  06F5  00B5               	movwf	??___ftmul+1
  8210  06F6  0833               	movf	___ftmul@f2+2,w
  8211  06F7  00B6               	movwf	??___ftmul+2
  8212  06F8  1003               	clrc
  8213  06F9  0D35               	rlf	??___ftmul+1,w
  8214  06FA  0D36               	rlf	??___ftmul+2,w
  8215  06FB  00B7               	movwf	??___ftmul+3
  8216  06FC  0837               	movf	??___ftmul+3,w
  8217  06FD  00BD               	movwf	___ftmul@sign
  8218  06FE  08BD               	movf	___ftmul@sign,f
  8219  06FF  1D03               	skipz
  8220  0700  2F08               	goto	l8160
  8221  0701  3000               	movlw	0
  8222  0702  00AE               	movwf	?___ftmul
  8223  0703  3000               	movlw	0
  8224  0704  00AF               	movwf	?___ftmul+1
  8225  0705  3000               	movlw	0
  8226  0706  00B0               	movwf	?___ftmul+2
  8227  0707  0008               	return
  8228  0708                     l8160:	
  8229  0708  083D               	movf	___ftmul@sign,w
  8230  0709  3E7B               	addlw	123
  8231  070A  00B4               	movwf	??___ftmul
  8232  070B  0834               	movf	??___ftmul,w
  8233  070C  07B8               	addwf	___ftmul@exp,f
  8234  070D  082E               	movf	___ftmul@f1,w
  8235  070E  00B4               	movwf	??___ftmul
  8236  070F  082F               	movf	___ftmul@f1+1,w
  8237  0710  00B5               	movwf	??___ftmul+1
  8238  0711  0830               	movf	___ftmul@f1+2,w
  8239  0712  00B6               	movwf	??___ftmul+2
  8240  0713  3010               	movlw	16
  8241  0714                     u8425:	
  8242  0714  36B6               	lsrf	??___ftmul+2,f
  8243  0715  0CB5               	rrf	??___ftmul+1,f
  8244  0716  0CB4               	rrf	??___ftmul,f
  8245  0717  0B89               	decfsz	9,f
  8246  0718  2F14               	goto	u8425
  8247  0719  0834               	movf	??___ftmul,w
  8248  071A  00B7               	movwf	??___ftmul+3
  8249  071B  0837               	movf	??___ftmul+3,w
  8250  071C  00BD               	movwf	___ftmul@sign
  8251  071D  0831               	movf	___ftmul@f2,w
  8252  071E  00B4               	movwf	??___ftmul
  8253  071F  0832               	movf	___ftmul@f2+1,w
  8254  0720  00B5               	movwf	??___ftmul+1
  8255  0721  0833               	movf	___ftmul@f2+2,w
  8256  0722  00B6               	movwf	??___ftmul+2
  8257  0723  3010               	movlw	16
  8258  0724                     u8435:	
  8259  0724  36B6               	lsrf	??___ftmul+2,f
  8260  0725  0CB5               	rrf	??___ftmul+1,f
  8261  0726  0CB4               	rrf	??___ftmul,f
  8262  0727  0B89               	decfsz	9,f
  8263  0728  2F24               	goto	u8435
  8264  0729  0834               	movf	??___ftmul,w
  8265  072A  00B7               	movwf	??___ftmul+3
  8266  072B  0837               	movf	??___ftmul+3,w
  8267  072C  06BD               	xorwf	___ftmul@sign,f
  8268  072D  3080               	movlw	128
  8269  072E  00B4               	movwf	??___ftmul
  8270  072F  0834               	movf	??___ftmul,w
  8271  0730  05BD               	andwf	___ftmul@sign,f
  8272  0731  17AF               	bsf	___ftmul@f1+1,7
  8273  0732  17B2               	bsf	___ftmul@f2+1,7
  8274  0733  30FF               	movlw	255
  8275  0734  05B1               	andwf	___ftmul@f2,f
  8276  0735  30FF               	movlw	255
  8277  0736  05B2               	andwf	___ftmul@f2+1,f
  8278  0737  3000               	movlw	0
  8279  0738  05B3               	andwf	___ftmul@f2+2,f
  8280  0739  3000               	movlw	0
  8281  073A  00B9               	movwf	___ftmul@f3_as_product
  8282  073B  3000               	movlw	0
  8283  073C  00BA               	movwf	___ftmul@f3_as_product+1
  8284  073D  3000               	movlw	0
  8285  073E  00BB               	movwf	___ftmul@f3_as_product+2
  8286  073F  3007               	movlw	7
  8287  0740  00B4               	movwf	??___ftmul
  8288  0741  0834               	movf	??___ftmul,w
  8289  0742  00BC               	movwf	___ftmul@cntr
  8290  0743                     l8172:	
  8291  0743  1C2E               	btfss	___ftmul@f1,0
  8292  0744  2F4B               	goto	l8176
  8293  0745  0831               	movf	___ftmul@f2,w
  8294  0746  07B9               	addwf	___ftmul@f3_as_product,f
  8295  0747  0832               	movf	___ftmul@f2+1,w
  8296  0748  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8297  0749  0833               	movf	___ftmul@f2+2,w
  8298  074A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8299  074B                     l8176:	
  8300  074B  3001               	movlw	1
  8301  074C                     u8455:	
  8302  074C  36B0               	lsrf	___ftmul@f1+2,f
  8303  074D  0CAF               	rrf	___ftmul@f1+1,f
  8304  074E  0CAE               	rrf	___ftmul@f1,f
  8305  074F  0B89               	decfsz	9,f
  8306  0750  2F4C               	goto	u8455
  8307  0751  3001               	movlw	1
  8308  0752                     u8465:	
  8309  0752  35B1               	lslf	___ftmul@f2,f
  8310  0753  0DB2               	rlf	___ftmul@f2+1,f
  8311  0754  0DB3               	rlf	___ftmul@f2+2,f
  8312  0755  0B89               	decfsz	9,f
  8313  0756  2F52               	goto	u8465
  8314  0757  3001               	movlw	1
  8315  0758  02BC               	subwf	___ftmul@cntr,f
  8316  0759  1D03               	btfss	3,2
  8317  075A  2F43               	goto	l8172
  8318  075B  3009               	movlw	9
  8319  075C  00B4               	movwf	??___ftmul
  8320  075D  0834               	movf	??___ftmul,w
  8321  075E  00BC               	movwf	___ftmul@cntr
  8322  075F                     l8184:	
  8323  075F  1C2E               	btfss	___ftmul@f1,0
  8324  0760  2F67               	goto	l8188
  8325  0761  0831               	movf	___ftmul@f2,w
  8326  0762  07B9               	addwf	___ftmul@f3_as_product,f
  8327  0763  0832               	movf	___ftmul@f2+1,w
  8328  0764  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8329  0765  0833               	movf	___ftmul@f2+2,w
  8330  0766  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8331  0767                     l8188:	
  8332  0767  3001               	movlw	1
  8333  0768                     u8495:	
  8334  0768  36B0               	lsrf	___ftmul@f1+2,f
  8335  0769  0CAF               	rrf	___ftmul@f1+1,f
  8336  076A  0CAE               	rrf	___ftmul@f1,f
  8337  076B  0B89               	decfsz	9,f
  8338  076C  2F68               	goto	u8495
  8339  076D  3001               	movlw	1
  8340  076E                     u8505:	
  8341  076E  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8342  076F  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8343  0770  0CB9               	rrf	___ftmul@f3_as_product,f
  8344  0771  0B89               	decfsz	9,f
  8345  0772  2F6E               	goto	u8505
  8346  0773  3001               	movlw	1
  8347  0774  02BC               	subwf	___ftmul@cntr,f
  8348  0775  1D03               	btfss	3,2
  8349  0776  2F5F               	goto	l8184
  8350  0777  0839               	movf	___ftmul@f3_as_product,w
  8351  0778  00A0               	movwf	___ftpack@arg
  8352  0779  083A               	movf	___ftmul@f3_as_product+1,w
  8353  077A  00A1               	movwf	___ftpack@arg+1
  8354  077B  083B               	movf	___ftmul@f3_as_product+2,w
  8355  077C  00A2               	movwf	___ftpack@arg+2
  8356  077D  0838               	movf	___ftmul@exp,w
  8357  077E  00B4               	movwf	??___ftmul
  8358  077F  0834               	movf	??___ftmul,w
  8359  0780  00A3               	movwf	___ftpack@exp
  8360  0781  083D               	movf	___ftmul@sign,w
  8361  0782  00B5               	movwf	??___ftmul+1
  8362  0783  0835               	movf	??___ftmul+1,w
  8363  0784  00A4               	movwf	___ftpack@sign
  8364  0785  3189  21D9         	fcall	___ftpack
  8365  0787  0020               	movlb	0	; select bank0
  8366  0788  0820               	movf	?___ftpack,w
  8367  0789  00AE               	movwf	?___ftmul
  8368  078A  0821               	movf	?___ftpack+1,w
  8369  078B  00AF               	movwf	?___ftmul+1
  8370  078C  0822               	movf	?___ftpack+2,w
  8371  078D  00B0               	movwf	?___ftmul+2
  8372  078E  0008               	return
  8373  078F                     __end_of___ftmul:	
  8374                           
  8375                           	psect	text34
  8376  1E68                     __ptext34:	
  8377 ;; *************** function _setMemory_Modify *****************
  8378 ;; Defined at:
  8379 ;;		line 1064 in file "../src/MCU_B1.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;  command         1    wreg     unsigned char 
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;  command         1    1[BANK0 ] unsigned char 
  8384 ;; Return value:  Size  Location     Type
  8385 ;;		None               void
  8386 ;; Registers used:
  8387 ;;		wreg, status,2, status,0
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;Total ram usage:        2 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    5
  8400 ;; This function calls:
  8401 ;;		Nothing
  8402 ;; This function is called by:
  8403 ;;		_setLog_Code
  8404 ;;		_setRFSW_AdjControl
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function _setMemory_Modify
  8410  1E68                     _setMemory_Modify:	
  8411                           
  8412                           ;incstack = 0
  8413                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8414                           ;setMemory_Modify@command stored from wreg
  8415  1E68  0020               	movlb	0	; select bank0
  8416  1E69  00A1               	movwf	setMemory_Modify@command
  8417                           
  8418                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8419  1E6A  0821               	movf	setMemory_Modify@command,w
  8420  1E6B  3A01               	xorlw	1
  8421  1E6C  3000               	movlw	0
  8422  1E6D  1903               	skipnz
  8423  1E6E  3001               	movlw	1
  8424  1E6F  00A0               	movwf	??_setMemory_Modify
  8425  1E70  0023               	movlb	3	; select bank3
  8426  1E71  0862               	movf	(_Memory^(0+384)+36),w
  8427  1E72  0020               	movlb	0	; select bank0
  8428  1E73  0620               	xorwf	??_setMemory_Modify,w
  8429  1E74  39FE               	andlw	-2
  8430  1E75  0620               	xorwf	??_setMemory_Modify,w
  8431  1E76  0023               	movlb	3	; select bank3
  8432  1E77  00E2               	movwf	(_Memory^(0+384)+36)
  8433                           
  8434                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8435  1E78  01E0               	clrf	(_Memory^(0+384)+34)
  8436  1E79  01E1               	clrf	((_Memory+1)^(0+384)+34)
  8437  1E7A  0008               	return
  8438  1E7B                     __end_of_setMemory_Modify:	
  8439                           
  8440                           	psect	text35
  8441  1E0F                     __ptext35:	
  8442 ;; *************** function _getRF_KeyStatus *****************
  8443 ;; Defined at:
  8444 ;;		line 190 in file "../src/RF_Control_B1.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;  key             1    1[BANK0 ] unsigned char 
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      unsigned char 
  8451 ;; Registers used:
  8452 ;;		wreg, status,2
  8453 ;; Tracked objects:
  8454 ;;		On entry : 0/0
  8455 ;;		On exit  : 0/0
  8456 ;;		Unchanged: 0/0
  8457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;Total ram usage:        3 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:    5
  8465 ;; This function calls:
  8466 ;;		Nothing
  8467 ;; This function is called by:
  8468 ;;		_setRF_Main
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           
  8473                           ;psect for function _getRF_KeyStatus
  8474  1E0F                     _getRF_KeyStatus:	
  8475                           
  8476                           ;RF_Control_B1.c: 191: char key = 0;
  8477                           
  8478                           ;incstack = 0
  8479                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8480  1E0F  0020               	movlb	0	; select bank0
  8481  1E10  01A1               	clrf	getRF_KeyStatus@key
  8482                           
  8483                           ;RF_Control_B1.c: 201: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8484  1E11  01A2               	clrf	_getRF_KeyStatus$5042
  8485  1E12  0AA2               	incf	_getRF_KeyStatus$5042,f
  8486  1E13  1F0C               	btfss	12,6	;volatile
  8487  1E14  1A0C               	btfsc	12,4	;volatile
  8488  1E15  2E1A               	goto	l9044
  8489  1E16  1C0C               	btfss	12,0	;volatile
  8490  1E17  1B8C               	btfsc	12,7	;volatile
  8491  1E18  2E1A               	goto	l9044
  8492  1E19  01A2               	clrf	_getRF_KeyStatus$5042
  8493  1E1A                     l9044:	
  8494  1E1A  0822               	movf	_getRF_KeyStatus$5042,w
  8495  1E1B  00A0               	movwf	??_getRF_KeyStatus
  8496  1E1C  0820               	movf	??_getRF_KeyStatus,w
  8497  1E1D  00A1               	movwf	getRF_KeyStatus@key
  8498                           
  8499                           ;RF_Control_B1.c: 203: return key;
  8500  1E1E  0821               	movf	getRF_KeyStatus@key,w
  8501  1E1F  0008               	return
  8502  1E20                     __end_of_getRF_KeyStatus:	
  8503                           
  8504                           	psect	text36
  8505  1DFE                     __ptext36:	
  8506 ;; *************** function _getBuz_GO *****************
  8507 ;; Defined at:
  8508 ;;		line 82 in file "../src/Buzzer_B1.c"
  8509 ;; Parameters:    Size  Location     Type
  8510 ;;		None
  8511 ;; Auto vars:     Size  Location     Type
  8512 ;;  i               2    4[BANK0 ] int 
  8513 ;; Return value:  Size  Location     Type
  8514 ;;                  2    0[BANK0 ] int 
  8515 ;; Registers used:
  8516 ;;		wreg, status,2, status,0
  8517 ;; Tracked objects:
  8518 ;;		On entry : 0/0
  8519 ;;		On exit  : 0/0
  8520 ;;		Unchanged: 0/0
  8521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8522 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;Total ram usage:        6 bytes
  8527 ;; Hardware stack levels used:    1
  8528 ;; Hardware stack levels required when called:    5
  8529 ;; This function calls:
  8530 ;;		Nothing
  8531 ;; This function is called by:
  8532 ;;		_setRF_Main
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           
  8537                           ;psect for function _getBuz_GO
  8538  1DFE                     _getBuz_GO:	
  8539                           
  8540                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8541                           
  8542                           ;incstack = 0
  8543                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8544  1DFE  0021               	movlb	1	; select bank1
  8545  1DFF  0C2E               	rrf	_Buz1^(0+128),w
  8546  1E00  3901               	andlw	1
  8547  1E01  0020               	movlb	0	; select bank0
  8548  1E02  00A2               	movwf	??_getBuz_GO
  8549  1E03  01A3               	clrf	??_getBuz_GO+1
  8550  1E04  0822               	movf	??_getBuz_GO,w
  8551  1E05  00A4               	movwf	getBuz_GO@i
  8552  1E06  0823               	movf	??_getBuz_GO+1,w
  8553  1E07  00A5               	movwf	getBuz_GO@i+1
  8554                           
  8555                           ;Buzzer_B1.c: 84: return i;
  8556  1E08  0825               	movf	getBuz_GO@i+1,w
  8557  1E09  01A1               	clrf	?_getBuz_GO+1
  8558  1E0A  07A1               	addwf	?_getBuz_GO+1,f
  8559  1E0B  0824               	movf	getBuz_GO@i,w
  8560  1E0C  01A0               	clrf	?_getBuz_GO
  8561  1E0D  07A0               	addwf	?_getBuz_GO,f
  8562  1E0E  0008               	return
  8563  1E0F                     __end_of_getBuz_GO:	
  8564                           
  8565                           	psect	text37
  8566  1D9E                     __ptext37:	
  8567 ;; *************** function _RF_RxDisable *****************
  8568 ;; Defined at:
  8569 ;;		line 265 in file "../src/RF_Control_B1.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;		None
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;		None
  8574 ;; Return value:  Size  Location     Type
  8575 ;;		None               void
  8576 ;; Registers used:
  8577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;Total ram usage:        0 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    7
  8590 ;; This function calls:
  8591 ;;		_CC2500_WriteCommand
  8592 ;; This function is called by:
  8593 ;;		_setRF_Main
  8594 ;; This function uses a non-reentrant model
  8595 ;;
  8596                           
  8597                           
  8598                           ;psect for function _RF_RxDisable
  8599  1D9E                     _RF_RxDisable:	
  8600                           
  8601                           ;RF_Control_B1.c: 266: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8602                           
  8603                           ;incstack = 0
  8604                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8605  1D9E  0021               	movlb	1	; select bank1
  8606  1D9F  18BA               	btfsc	_RF1^(0+128),1
  8607  1DA0  2DA3               	goto	l2065
  8608  1DA1  1DBA               	btfss	_RF1^(0+128),3
  8609  1DA2  0008               	return
  8610  1DA3                     l2065:	
  8611                           
  8612                           ;RF_Control_B1.c: 267: RF1.RxStatus = 0;
  8613  1DA3  11BA               	bcf	_RF1^(0+128),3
  8614                           
  8615                           ;RF_Control_B1.c: 268: RF1.ReceiveGO = 0;
  8616  1DA4  10BA               	bcf	_RF1^(0+128),1
  8617                           
  8618                           ;RF_Control_B1.c: 269: CC2500_WriteCommand(0x36);
  8619  1DA5  3036               	movlw	54
  8620  1DA6  319F  2712  319D   	fcall	_CC2500_WriteCommand
  8621                           
  8622                           ;RF_Control_B1.c: 271: CC2500_WriteCommand(0x3A);
  8623  1DA9  303A               	movlw	58
  8624  1DAA  319F  2712         	fcall	_CC2500_WriteCommand
  8625  1DAC  0008               	return
  8626  1DAD                     __end_of_RF_RxDisable:	
  8627                           
  8628                           	psect	text38
  8629  0A9E                     __ptext38:	
  8630 ;; *************** function _CC2500_TxData *****************
  8631 ;; Defined at:
  8632 ;;		line 32 in file "../src/CC2500_B1.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;		None
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8637 ;; Return value:  Size  Location     Type
  8638 ;;		None               void
  8639 ;; Registers used:
  8640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;Total ram usage:        2 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    7
  8653 ;; This function calls:
  8654 ;;		_CC2500_WriteByte
  8655 ;;		_CC2500_WriteCommand
  8656 ;;		_Timeout_Counter
  8657 ;;		_set_TimeoutCleared
  8658 ;; This function is called by:
  8659 ;;		_setRF_Main
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           
  8664                           ;psect for function _CC2500_TxData
  8665  0A9E                     _CC2500_TxData:	
  8666                           
  8667                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8668                           ;CC2500_B1.c: 35: RC0 = 0;
  8669                           
  8670                           ;incstack = 0
  8671                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8672  0A9E  0020               	movlb	0	; select bank0
  8673  0A9F  100E               	bcf	14,0	;volatile
  8674                           
  8675                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8676  0AA0  307F               	movlw	127
  8677  0AA1  00A4               	movwf	??_CC2500_TxData
  8678  0AA2  0824               	movf	??_CC2500_TxData,w
  8679  0AA3  0021               	movlb	1	; select bank1
  8680  0AA4  00D1               	movwf	_SPI0Buffer^(0+128)
  8681                           
  8682                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  8683  0AA5  2AA9               	goto	l8774
  8684  0AA6                     l8772:	
  8685                           
  8686                           ;CC2500_B1.c: 38: Timeout_Counter();
  8687  0AA6  319E  26A2  318A   	fcall	_Timeout_Counter
  8688  0AA9                     l8774:	
  8689  0AA9  0020               	movlb	0	; select bank0
  8690  0AAA  1E8E               	btfss	14,5	;volatile
  8691  0AAB  2AAF               	goto	l8778
  8692  0AAC  0021               	movlb	1	; select bank1
  8693  0AAD  1D2B               	btfss	(_myMain^(0+128)+11),2
  8694  0AAE  2AA6               	goto	l8772
  8695  0AAF                     l8778:	
  8696                           
  8697                           ;CC2500_B1.c: 39: };
  8698                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8699  0AAF  319C  2478  318A   	fcall	_set_TimeoutCleared
  8700                           
  8701                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8702  0AB2  319E  26F9  318A   	fcall	_CC2500_WriteByte
  8703                           
  8704                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8705  0AB5  0021               	movlb	1	; select bank1
  8706  0AB6  0853               	movf	_Tx_Length^(0+128),w
  8707  0AB7  0020               	movlb	0	; select bank0
  8708  0AB8  00A4               	movwf	??_CC2500_TxData
  8709  0AB9  0824               	movf	??_CC2500_TxData,w
  8710  0ABA  0021               	movlb	1	; select bank1
  8711  0ABB  00D1               	movwf	_SPI0Buffer^(0+128)
  8712                           
  8713                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8714  0ABC  319E  26F9  318A   	fcall	_CC2500_WriteByte
  8715                           
  8716                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8717  0ABF  0020               	movlb	0	; select bank0
  8718  0AC0  01A5               	clrf	CC2500_TxData@loop_e
  8719  0AC1                     l8792:	
  8720  0AC1  0021               	movlb	1	; select bank1
  8721  0AC2  0853               	movf	_Tx_Length^(0+128),w
  8722  0AC3  0020               	movlb	0	; select bank0
  8723  0AC4  0225               	subwf	CC2500_TxData@loop_e,w
  8724  0AC5  1803               	btfsc	3,0
  8725  0AC6  2ADA               	goto	l231
  8726                           
  8727                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8728  0AC7  0825               	movf	CC2500_TxData@loop_e,w
  8729  0AC8  3EA0               	addlw	_RF_Data& (0+255)
  8730  0AC9  0086               	movwf	6
  8731  0ACA  3001               	movlw	1	; select bank3/4
  8732  0ACB  0087               	movwf	7
  8733  0ACC  0801               	movf	1,w
  8734  0ACD  00A4               	movwf	??_CC2500_TxData
  8735  0ACE  0824               	movf	??_CC2500_TxData,w
  8736  0ACF  0021               	movlb	1	; select bank1
  8737  0AD0  00D1               	movwf	_SPI0Buffer^(0+128)
  8738                           
  8739                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8740  0AD1  319E  26F9  318A   	fcall	_CC2500_WriteByte
  8741  0AD4  3001               	movlw	1
  8742  0AD5  0020               	movlb	0	; select bank0
  8743  0AD6  00A4               	movwf	??_CC2500_TxData
  8744  0AD7  0824               	movf	??_CC2500_TxData,w
  8745  0AD8  07A5               	addwf	CC2500_TxData@loop_e,f
  8746  0AD9  2AC1               	goto	l8792
  8747  0ADA                     l231:	
  8748                           
  8749                           ;CC2500_B1.c: 48: }
  8750                           ;CC2500_B1.c: 49: RC0 = 1;
  8751  0ADA  140E               	bsf	14,0	;volatile
  8752                           
  8753                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8754  0ADB  3035               	movlw	53
  8755  0ADC  319F  2712  318A   	fcall	_CC2500_WriteCommand
  8756                           
  8757                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  8758  0ADF  2AE3               	goto	l8798
  8759  0AE0                     l8796:	
  8760                           
  8761                           ;CC2500_B1.c: 52: Timeout_Counter();
  8762  0AE0  319E  26A2  318A   	fcall	_Timeout_Counter
  8763  0AE3                     l8798:	
  8764  0AE3  0020               	movlb	0	; select bank0
  8765  0AE4  188E               	btfsc	14,1	;volatile
  8766  0AE5  2AE9               	goto	l8802
  8767  0AE6  0021               	movlb	1	; select bank1
  8768  0AE7  1D2B               	btfss	(_myMain^(0+128)+11),2
  8769  0AE8  2AE0               	goto	l8796
  8770  0AE9                     l8802:	
  8771                           
  8772                           ;CC2500_B1.c: 53: };
  8773                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8774  0AE9  319C  2478  318A   	fcall	_set_TimeoutCleared
  8775                           
  8776                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  8777  0AEC  2AF0               	goto	l8806
  8778  0AED                     l8804:	
  8779                           
  8780                           ;CC2500_B1.c: 57: Timeout_Counter();
  8781  0AED  319E  26A2  318A   	fcall	_Timeout_Counter
  8782  0AF0                     l8806:	
  8783  0AF0  0020               	movlb	0	; select bank0
  8784  0AF1  1C8E               	btfss	14,1	;volatile
  8785  0AF2  2AF6               	goto	l8810
  8786  0AF3  0021               	movlb	1	; select bank1
  8787  0AF4  1D2B               	btfss	(_myMain^(0+128)+11),2
  8788  0AF5  2AED               	goto	l8804
  8789  0AF6                     l8810:	
  8790                           
  8791                           ;CC2500_B1.c: 58: };
  8792                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8793  0AF6  319C  2478  318A   	fcall	_set_TimeoutCleared
  8794                           
  8795                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8796  0AF9  3036               	movlw	54
  8797  0AFA  319F  2712  318A   	fcall	_CC2500_WriteCommand
  8798                           
  8799                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8800  0AFD  303B               	movlw	59
  8801  0AFE  319F  2712         	fcall	_CC2500_WriteCommand
  8802                           
  8803                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8804  0B00  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8805  0B01  0008               	return
  8806  0B02                     __end_of_CC2500_TxData:	
  8807                           
  8808                           	psect	text39
  8809  078F                     __ptext39:	
  8810 ;; *************** function _CC2500_RxData *****************
  8811 ;; Defined at:
  8812 ;;		line 70 in file "../src/CC2500_B1.c"
  8813 ;; Parameters:    Size  Location     Type
  8814 ;;		None
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8817 ;; Return value:  Size  Location     Type
  8818 ;;		None               void
  8819 ;; Registers used:
  8820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;Total ram usage:        2 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    7
  8833 ;; This function calls:
  8834 ;;		_CC2500_ReadByte
  8835 ;;		_CC2500_ReadStatus
  8836 ;;		_CC2500_WriteByte
  8837 ;;		_Timeout_Counter
  8838 ;;		_set_TimeoutCleared
  8839 ;; This function is called by:
  8840 ;;		_setRF_Main
  8841 ;; This function uses a non-reentrant model
  8842 ;;
  8843                           
  8844                           
  8845                           ;psect for function _CC2500_RxData
  8846  078F                     _CC2500_RxData:	
  8847                           
  8848                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8849                           ;CC2500_B1.c: 75: if (RC1 == 1)
  8850                           
  8851                           ;incstack = 0
  8852                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8853  078F  0020               	movlb	0	; select bank0
  8854  0790  188E               	btfsc	14,1	;volatile
  8855  0791  2F96               	goto	l8824
  8856  0792  2F9F               	goto	l8830
  8857  0793                     l8822:	
  8858                           ;CC2500_B1.c: 76: {
  8859                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  8860                           
  8861                           
  8862                           ;CC2500_B1.c: 78: Timeout_Counter();
  8863  0793  319E  26A2  3187   	fcall	_Timeout_Counter
  8864  0796                     l8824:	
  8865  0796  0020               	movlb	0	; select bank0
  8866  0797  1C8E               	btfss	14,1	;volatile
  8867  0798  2F9C               	goto	l8828
  8868  0799  0021               	movlb	1	; select bank1
  8869  079A  1D2B               	btfss	(_myMain^(0+128)+11),2
  8870  079B  2F93               	goto	l8822
  8871  079C                     l8828:	
  8872                           
  8873                           ;CC2500_B1.c: 79: };
  8874                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8875  079C  319C  2478  3187   	fcall	_set_TimeoutCleared
  8876  079F                     l8830:	
  8877                           
  8878                           ;CC2500_B1.c: 81: }
  8879                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8880  079F  303B               	movlw	59
  8881  07A0  3190  20D9  3187   	fcall	_CC2500_ReadStatus
  8882                           
  8883                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8884  07A3  0021               	movlb	1	; select bank1
  8885  07A4  0856               	movf	_s_data^(0+128),w
  8886  07A5  1903               	btfsc	3,2
  8887  07A6  0008               	return
  8888                           
  8889                           ;CC2500_B1.c: 86: RC0 = 0;
  8890  07A7  0020               	movlb	0	; select bank0
  8891  07A8  100E               	bcf	14,0	;volatile
  8892                           
  8893                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8894  07A9  30FF               	movlw	255
  8895  07AA  00A4               	movwf	??_CC2500_RxData
  8896  07AB  0824               	movf	??_CC2500_RxData,w
  8897  07AC  0021               	movlb	1	; select bank1
  8898  07AD  00D1               	movwf	_SPI0Buffer^(0+128)
  8899                           
  8900                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  8901  07AE  2FB2               	goto	l8840
  8902  07AF                     l8838:	
  8903                           
  8904                           ;CC2500_B1.c: 89: Timeout_Counter();
  8905  07AF  319E  26A2  3187   	fcall	_Timeout_Counter
  8906  07B2                     l8840:	
  8907  07B2  0020               	movlb	0	; select bank0
  8908  07B3  1E8E               	btfss	14,5	;volatile
  8909  07B4  2FB8               	goto	l8844
  8910  07B5  0021               	movlb	1	; select bank1
  8911  07B6  1D2B               	btfss	(_myMain^(0+128)+11),2
  8912  07B7  2FAF               	goto	l8838
  8913  07B8                     l8844:	
  8914                           
  8915                           ;CC2500_B1.c: 90: };
  8916                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8917  07B8  319C  2478  3187   	fcall	_set_TimeoutCleared
  8918                           
  8919                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8920  07BB  319E  26F9  3187   	fcall	_CC2500_WriteByte
  8921                           
  8922                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8923  07BE  319F  2762  3187   	fcall	_CC2500_ReadByte
  8924                           
  8925                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8926  07C1  0021               	movlb	1	; select bank1
  8927  07C2  0851               	movf	_SPI0Buffer^(0+128),w
  8928  07C3  0020               	movlb	0	; select bank0
  8929  07C4  00A4               	movwf	??_CC2500_RxData
  8930  07C5  0824               	movf	??_CC2500_RxData,w
  8931  07C6  0021               	movlb	1	; select bank1
  8932  07C7  00D0               	movwf	_Rx_Length^(0+128)
  8933                           
  8934                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8935  07C8  0020               	movlb	0	; select bank0
  8936  07C9  01A5               	clrf	CC2500_RxData@loop_f
  8937  07CA                     l8860:	
  8938  07CA  0021               	movlb	1	; select bank1
  8939  07CB  0850               	movf	_Rx_Length^(0+128),w
  8940  07CC  0020               	movlb	0	; select bank0
  8941  07CD  0225               	subwf	CC2500_RxData@loop_f,w
  8942  07CE  1803               	btfsc	3,0
  8943  07CF  2FE3               	goto	l8862
  8944                           
  8945                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8946  07D0  319F  2762  3187   	fcall	_CC2500_ReadByte
  8947                           
  8948                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8949  07D3  0021               	movlb	1	; select bank1
  8950  07D4  0851               	movf	_SPI0Buffer^(0+128),w
  8951  07D5  0020               	movlb	0	; select bank0
  8952  07D6  00A4               	movwf	??_CC2500_RxData
  8953  07D7  0825               	movf	CC2500_RxData@loop_f,w
  8954  07D8  3EA0               	addlw	_RF_Data& (0+255)
  8955  07D9  0086               	movwf	6
  8956  07DA  3001               	movlw	1	; select bank3/4
  8957  07DB  0087               	movwf	7
  8958  07DC  0824               	movf	??_CC2500_RxData,w
  8959  07DD  0081               	movwf	1
  8960  07DE  3001               	movlw	1
  8961  07DF  00A4               	movwf	??_CC2500_RxData
  8962  07E0  0824               	movf	??_CC2500_RxData,w
  8963  07E1  07A5               	addwf	CC2500_RxData@loop_f,f
  8964  07E2  2FCA               	goto	l8860
  8965  07E3                     l8862:	
  8966                           
  8967                           ;CC2500_B1.c: 99: }
  8968                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8969  07E3  319F  2762  3187   	fcall	_CC2500_ReadByte
  8970                           
  8971                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8972  07E6  0021               	movlb	1	; select bank1
  8973  07E7  0851               	movf	_SPI0Buffer^(0+128),w
  8974  07E8  0020               	movlb	0	; select bank0
  8975  07E9  00A4               	movwf	??_CC2500_RxData
  8976  07EA  0824               	movf	??_CC2500_RxData,w
  8977  07EB  0021               	movlb	1	; select bank1
  8978  07EC  00CF               	movwf	_RSSI^(0+128)
  8979                           
  8980                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8981  07ED  319F  2762         	fcall	_CC2500_ReadByte
  8982                           
  8983                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8984  07EF  0021               	movlb	1	; select bank1
  8985  07F0  0851               	movf	_SPI0Buffer^(0+128),w
  8986  07F1  0020               	movlb	0	; select bank0
  8987  07F2  00A4               	movwf	??_CC2500_RxData
  8988  07F3  0824               	movf	??_CC2500_RxData,w
  8989  07F4  0021               	movlb	1	; select bank1
  8990  07F5  00CA               	movwf	_CRC^(0+128)
  8991                           
  8992                           ;CC2500_B1.c: 104: RC0 = 1;
  8993  07F6  0020               	movlb	0	; select bank0
  8994  07F7  140E               	bsf	14,0	;volatile
  8995                           
  8996                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8997  07F8  0021               	movlb	1	; select bank1
  8998  07F9  1BCA               	btfsc	_CRC^(0+128),7
  8999                           
  9000                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9001  07FA  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9002                           
  9003                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9004  07FB  11BA               	bcf	_RF1^(0+128),3
  9005                           
  9006                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9007  07FC  14BA               	bsf	_RF1^(0+128),1
  9008  07FD  0008               	return
  9009  07FE                     __end_of_CC2500_RxData:	
  9010                           
  9011                           	psect	text40
  9012  10D9                     __ptext40:	
  9013 ;; *************** function _CC2500_ReadStatus *****************
  9014 ;; Defined at:
  9015 ;;		line 301 in file "../src/CC2500_B1.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;  status_addr     1    wreg     unsigned char 
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9020 ;; Return value:  Size  Location     Type
  9021 ;;		None               void
  9022 ;; Registers used:
  9023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;Total ram usage:        2 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    6
  9036 ;; This function calls:
  9037 ;;		_CC2500_ReadByte
  9038 ;;		_CC2500_WriteByte
  9039 ;;		_Timeout_Counter
  9040 ;;		_set_TimeoutCleared
  9041 ;; This function is called by:
  9042 ;;		_CC2500_RxData
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           
  9047                           ;psect for function _CC2500_ReadStatus
  9048  10D9                     _CC2500_ReadStatus:	
  9049                           
  9050                           ;incstack = 0
  9051                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9052                           ;CC2500_ReadStatus@status_addr stored from wreg
  9053  10D9  0020               	movlb	0	; select bank0
  9054  10DA  00A3               	movwf	CC2500_ReadStatus@status_addr
  9055                           
  9056                           ;CC2500_B1.c: 302: RC0 = 0;
  9057  10DB  100E               	bcf	14,0	;volatile
  9058                           
  9059                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9060  10DC  0823               	movf	CC2500_ReadStatus@status_addr,w
  9061  10DD  3EC0               	addlw	192
  9062  10DE  00A2               	movwf	??_CC2500_ReadStatus
  9063  10DF  0822               	movf	??_CC2500_ReadStatus,w
  9064  10E0  0021               	movlb	1	; select bank1
  9065  10E1  00D1               	movwf	_SPI0Buffer^(0+128)
  9066                           
  9067                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  9068  10E2  28E6               	goto	l8652
  9069  10E3                     l8650:	
  9070                           
  9071                           ;CC2500_B1.c: 306: Timeout_Counter();
  9072  10E3  319E  26A2  3190   	fcall	_Timeout_Counter
  9073  10E6                     l8652:	
  9074  10E6  0020               	movlb	0	; select bank0
  9075  10E7  1E8E               	btfss	14,5	;volatile
  9076  10E8  28EC               	goto	l8656
  9077  10E9  0021               	movlb	1	; select bank1
  9078  10EA  1D2B               	btfss	(_myMain^(0+128)+11),2
  9079  10EB  28E3               	goto	l8650
  9080  10EC                     l8656:	
  9081                           
  9082                           ;CC2500_B1.c: 307: };
  9083                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9084  10EC  319C  2478  3190   	fcall	_set_TimeoutCleared
  9085                           
  9086                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9087  10EF  319E  26F9  3190   	fcall	_CC2500_WriteByte
  9088                           
  9089                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9090  10F2  319F  2762         	fcall	_CC2500_ReadByte
  9091                           
  9092                           ;CC2500_B1.c: 312: RC0 = 1;
  9093  10F4  0020               	movlb	0	; select bank0
  9094  10F5  140E               	bsf	14,0	;volatile
  9095                           
  9096                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9097  10F6  0021               	movlb	1	; select bank1
  9098  10F7  0851               	movf	_SPI0Buffer^(0+128),w
  9099  10F8  0020               	movlb	0	; select bank0
  9100  10F9  00A2               	movwf	??_CC2500_ReadStatus
  9101  10FA  0822               	movf	??_CC2500_ReadStatus,w
  9102  10FB  0021               	movlb	1	; select bank1
  9103  10FC  00D6               	movwf	_s_data^(0+128)
  9104  10FD  0008               	return
  9105  10FE                     __end_of_CC2500_ReadStatus:	
  9106                           
  9107                           	psect	text41
  9108  1F62                     __ptext41:	
  9109 ;; *************** function _CC2500_ReadByte *****************
  9110 ;; Defined at:
  9111 ;;		line 235 in file "../src/CC2500_B1.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;		None
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9116 ;; Return value:  Size  Location     Type
  9117 ;;		None               void
  9118 ;; Registers used:
  9119 ;;		wreg, status,2, status,0
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;Total ram usage:        2 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    5
  9132 ;; This function calls:
  9133 ;;		Nothing
  9134 ;; This function is called by:
  9135 ;;		_CC2500_RxData
  9136 ;;		_CC2500_ReadStatus
  9137 ;;		_CC2500_ReadREG
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           
  9142                           ;psect for function _CC2500_ReadByte
  9143  1F62                     _CC2500_ReadByte:	
  9144                           
  9145                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9146                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9147                           
  9148                           ;incstack = 0
  9149                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9150  1F62  0020               	movlb	0	; select bank0
  9151  1F63  01A1               	clrf	CC2500_ReadByte@loop_b
  9152  1F64                     L2:	
  9153  1F64  3008               	movlw	8
  9154  1F65  0221               	subwf	CC2500_ReadByte@loop_b,w
  9155  1F66  1803               	btfsc	3,0
  9156  1F67  0008               	return
  9157                           
  9158                           ;CC2500_B1.c: 238: RC3 = 1;
  9159  1F68  158E               	bsf	14,3	;volatile
  9160                           
  9161                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9162  1F69  1003               	clrc
  9163  1F6A  0021               	movlb	1	; select bank1
  9164  1F6B  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9165                           
  9166                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9167  1F6C  0020               	movlb	0	; select bank0
  9168  1F6D  1E8E               	btfss	14,5	;volatile
  9169  1F6E  2F72               	goto	l8558
  9170                           
  9171                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9172  1F6F  0021               	movlb	1	; select bank1
  9173  1F70  1451               	bsf	_SPI0Buffer^(0+128),0
  9174  1F71  2F78               	goto	l8560
  9175  1F72                     l8558:	
  9176                           
  9177                           ;CC2500_B1.c: 242: else
  9178                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9179  1F72  30FE               	movlw	254
  9180  1F73  0020               	movlb	0	; select bank0
  9181  1F74  00A0               	movwf	??_CC2500_ReadByte
  9182  1F75  0820               	movf	??_CC2500_ReadByte,w
  9183  1F76  0021               	movlb	1	; select bank1
  9184  1F77  05D1               	andwf	_SPI0Buffer^(0+128),f
  9185  1F78                     l8560:	
  9186                           
  9187                           ;CC2500_B1.c: 244: RC3 = 0;
  9188  1F78  0020               	movlb	0	; select bank0
  9189  1F79  118E               	bcf	14,3	;volatile
  9190  1F7A  3001               	movlw	1
  9191  1F7B  00A0               	movwf	??_CC2500_ReadByte
  9192  1F7C  0820               	movf	??_CC2500_ReadByte,w
  9193  1F7D  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9194  1F7E  2F64               	goto	L2
  9195  1F7F                     __end_of_CC2500_ReadByte:	
  9196                           
  9197                           	psect	text42
  9198  1C3C                     __ptext42:	
  9199 ;; *************** function _RF_Initialization *****************
  9200 ;; Defined at:
  9201 ;;		line 9 in file "../src/RF_Control_B1.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;		None
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;		None
  9206 ;; Return value:  Size  Location     Type
  9207 ;;		None               void
  9208 ;; Registers used:
  9209 ;;		wreg, status,2, status,0, pclath, cstack
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;Total ram usage:        0 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    6
  9222 ;; This function calls:
  9223 ;;		_setRF_Initialization
  9224 ;; This function is called by:
  9225 ;;		_main
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           
  9230                           ;psect for function _RF_Initialization
  9231  1C3C                     _RF_Initialization:	
  9232                           
  9233                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9234                           
  9235                           ;incstack = 0
  9236                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9237  1C3C  319C  24FD         	fcall	_setRF_Initialization
  9238  1C3E  0008               	return
  9239  1C3F                     __end_of_RF_Initialization:	
  9240                           
  9241                           	psect	text43
  9242  1CFD                     __ptext43:	
  9243 ;; *************** function _setRF_Initialization *****************
  9244 ;; Defined at:
  9245 ;;		line 43 in file "../src/RF_Control_B1.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;		None
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;		None
  9250 ;; Return value:  Size  Location     Type
  9251 ;;		None               void
  9252 ;; Registers used:
  9253 ;;		wreg
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;Total ram usage:        1 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    5
  9266 ;; This function calls:
  9267 ;;		Nothing
  9268 ;; This function is called by:
  9269 ;;		_RF_Initialization
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273                           
  9274                           ;psect for function _setRF_Initialization
  9275  1CFD                     _setRF_Initialization:	
  9276                           
  9277                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9278                           
  9279                           ;incstack = 0
  9280                           ; Regs used in _setRF_Initialization: [wreg]
  9281  1CFD  3015               	movlw	21
  9282  1CFE  0020               	movlb	0	; select bank0
  9283  1CFF  00A0               	movwf	??_setRF_Initialization
  9284  1D00  0820               	movf	??_setRF_Initialization,w
  9285  1D01  0021               	movlb	1	; select bank1
  9286  1D02  00D3               	movwf	_Tx_Length^(0+128)
  9287                           
  9288                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9289  1D03  3005               	movlw	5
  9290  1D04  00C1               	movwf	(_RF1^(0+128)+7)
  9291  1D05  3000               	movlw	0
  9292  1D06  00C2               	movwf	(_RF1^(0+128)+8)
  9293  1D07  0008               	return
  9294  1D08                     __end_of_setRF_Initialization:	
  9295                           
  9296                           	psect	text44
  9297  1E44                     __ptext44:	
  9298 ;; *************** function _Mcu_Initialization *****************
  9299 ;; Defined at:
  9300 ;;		line 30 in file "../src/MCU_B1.c"
  9301 ;; Parameters:    Size  Location     Type
  9302 ;;		None
  9303 ;; Auto vars:     Size  Location     Type
  9304 ;;		None
  9305 ;; Return value:  Size  Location     Type
  9306 ;;		None               void
  9307 ;; Registers used:
  9308 ;;		wreg, status,2, status,0, pclath, cstack
  9309 ;; Tracked objects:
  9310 ;;		On entry : 0/0
  9311 ;;		On exit  : 0/0
  9312 ;;		Unchanged: 0/0
  9313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;Total ram usage:        0 bytes
  9319 ;; Hardware stack levels used:    1
  9320 ;; Hardware stack levels required when called:    6
  9321 ;; This function calls:
  9322 ;;		_ADC_Set
  9323 ;;		_Fosc_Set
  9324 ;;		_IOC_Set
  9325 ;;		_IO_Set
  9326 ;;		_TMR1_Set
  9327 ;;		_WDT_Set
  9328 ;; This function is called by:
  9329 ;;		_main
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           
  9334                           ;psect for function _Mcu_Initialization
  9335  1E44                     _Mcu_Initialization:	
  9336                           
  9337                           ;MCU_B1.c: 32: Fosc_Set();
  9338                           
  9339                           ;incstack = 0
  9340                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9341  1E44  319C  2474  319E   	fcall	_Fosc_Set
  9342                           
  9343                           ;MCU_B1.c: 34: IO_Set();
  9344  1E47  319E  26E1  319E   	fcall	_IO_Set
  9345                           
  9346                           ;MCU_B1.c: 36: ;;
  9347                           ;MCU_B1.c: 38: TMR1_Set();
  9348  1E4A  319D  2567  319E   	fcall	_TMR1_Set
  9349                           
  9350                           ;MCU_B1.c: 40: ADC_Set();
  9351  1E4D  319C  2494  319E   	fcall	_ADC_Set
  9352                           
  9353                           ;MCU_B1.c: 42: ;;
  9354                           ;MCU_B1.c: 44: ;;
  9355                           ;MCU_B1.c: 46: IOC_Set();
  9356  1E50  319D  255B  319E   	fcall	_IOC_Set
  9357                           
  9358                           ;MCU_B1.c: 48: ;;
  9359                           ;MCU_B1.c: 50: ;;
  9360                           ;MCU_B1.c: 52: WDT_Set();
  9361  1E53  319C  24F2         	fcall	_WDT_Set
  9362  1E55  0008               	return
  9363  1E56                     __end_of_Mcu_Initialization:	
  9364                           
  9365                           	psect	text45
  9366  1CF2                     __ptext45:	
  9367 ;; *************** function _WDT_Set *****************
  9368 ;; Defined at:
  9369 ;;		line 1083 in file "../src/MCU_B1.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;		None
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;		None
  9374 ;; Return value:  Size  Location     Type
  9375 ;;		None               void
  9376 ;; Registers used:
  9377 ;;		wreg
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;Total ram usage:        1 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    5
  9390 ;; This function calls:
  9391 ;;		Nothing
  9392 ;; This function is called by:
  9393 ;;		_Mcu_Initialization
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _WDT_Set
  9399  1CF2                     _WDT_Set:	
  9400                           
  9401                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9402                           
  9403                           ;incstack = 0
  9404                           ; Regs used in _WDT_Set: [wreg]
  9405  1CF2  3017               	movlw	23
  9406  1CF3  0021               	movlb	1	; select bank1
  9407  1CF4  0097               	movwf	23	;volatile
  9408                           
  9409                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9410  1CF5  1448               	bsf	_WDT^(0+128),0
  9411                           
  9412                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9413  1CF6  300A               	movlw	10
  9414  1CF7  0020               	movlb	0	; select bank0
  9415  1CF8  00A0               	movwf	??_WDT_Set
  9416  1CF9  0820               	movf	??_WDT_Set,w
  9417  1CFA  0021               	movlb	1	; select bank1
  9418  1CFB  00C9               	movwf	(_WDT^(0+128)+1)
  9419  1CFC  0008               	return
  9420  1CFD                     __end_of_WDT_Set:	
  9421                           
  9422                           	psect	text46
  9423  1D67                     __ptext46:	
  9424 ;; *************** function _TMR1_Set *****************
  9425 ;; Defined at:
  9426 ;;		line 199 in file "../src/MCU_B1.c"
  9427 ;; Parameters:    Size  Location     Type
  9428 ;;		None
  9429 ;; Auto vars:     Size  Location     Type
  9430 ;;		None
  9431 ;; Return value:  Size  Location     Type
  9432 ;;		None               void
  9433 ;; Registers used:
  9434 ;;		wreg
  9435 ;; Tracked objects:
  9436 ;;		On entry : 0/0
  9437 ;;		On exit  : 0/0
  9438 ;;		Unchanged: 0/0
  9439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;Total ram usage:        0 bytes
  9445 ;; Hardware stack levels used:    1
  9446 ;; Hardware stack levels required when called:    5
  9447 ;; This function calls:
  9448 ;;		Nothing
  9449 ;; This function is called by:
  9450 ;;		_Mcu_Initialization
  9451 ;; This function uses a non-reentrant model
  9452 ;;
  9453                           
  9454                           
  9455                           ;psect for function _TMR1_Set
  9456  1D67                     _TMR1_Set:	
  9457                           
  9458                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9459                           
  9460                           ;incstack = 0
  9461                           ; Regs used in _TMR1_Set: [wreg]
  9462  1D67  3041               	movlw	65
  9463  1D68  0020               	movlb	0	; select bank0
  9464  1D69  0098               	movwf	24	;volatile
  9465                           
  9466                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9467  1D6A  30FA               	movlw	250
  9468  1D6B  0097               	movwf	23	;volatile
  9469                           
  9470                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9471  1D6C  3038               	movlw	56
  9472  1D6D  0096               	movwf	22	;volatile
  9473                           
  9474                           ;MCU_B1.c: 203: TMR1IE = 1;
  9475  1D6E  0021               	movlb	1	; select bank1
  9476  1D6F  1411               	bsf	17,0	;volatile
  9477                           
  9478                           ;MCU_B1.c: 204: PEIE = 1;
  9479  1D70  170B               	bsf	11,6	;volatile
  9480                           
  9481                           ;MCU_B1.c: 205: GIE = 1;
  9482  1D71  178B               	bsf	11,7	;volatile
  9483  1D72  0008               	return
  9484  1D73                     __end_of_TMR1_Set:	
  9485                           
  9486                           	psect	text47
  9487  1EE1                     __ptext47:	
  9488 ;; *************** function _IO_Set *****************
  9489 ;; Defined at:
  9490 ;;		line 60 in file "../src/MCU_B1.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;		None
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;		None
  9495 ;; Return value:  Size  Location     Type
  9496 ;;		None               void
  9497 ;; Registers used:
  9498 ;;		wreg, status,2
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;Total ram usage:        0 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    5
  9511 ;; This function calls:
  9512 ;;		Nothing
  9513 ;; This function is called by:
  9514 ;;		_Mcu_Initialization
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _IO_Set
  9520  1EE1                     _IO_Set:	
  9521                           
  9522                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9523                           
  9524                           ;incstack = 0
  9525                           ; Regs used in _IO_Set: [wreg+status,2]
  9526  1EE1  30F7               	movlw	247
  9527  1EE2  0021               	movlb	1	; select bank1
  9528  1EE3  008C               	movwf	12	;volatile
  9529                           
  9530                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9531  1EE4  3004               	movlw	4
  9532  1EE5  008D               	movwf	13	;volatile
  9533                           
  9534                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9535  1EE6  3026               	movlw	38
  9536  1EE7  008E               	movwf	14	;volatile
  9537                           
  9538                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9539  1EE8  0022               	movlb	2	; select bank2
  9540  1EE9  018C               	clrf	12	;volatile
  9541                           
  9542                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9543  1EEA  018D               	clrf	13	;volatile
  9544                           
  9545                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9546  1EEB  018E               	clrf	14	;volatile
  9547                           
  9548                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9549  1EEC  300E               	movlw	14
  9550  1EED  0023               	movlb	3	; select bank3
  9551  1EEE  008C               	movwf	12	;volatile
  9552                           
  9553                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9554  1EEF  018D               	clrf	13	;volatile
  9555                           
  9556                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9557  1EF0  018E               	clrf	14	;volatile
  9558                           
  9559                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9560  1EF1  30F7               	movlw	247
  9561  1EF2  0020               	movlb	0	; select bank0
  9562  1EF3  008C               	movwf	12	;volatile
  9563                           
  9564                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9565  1EF4  3004               	movlw	4
  9566  1EF5  008D               	movwf	13	;volatile
  9567                           
  9568                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9569  1EF6  3026               	movlw	38
  9570  1EF7  008E               	movwf	14	;volatile
  9571  1EF8  0008               	return
  9572  1EF9                     __end_of_IO_Set:	
  9573                           
  9574                           	psect	text48
  9575  1D5B                     __ptext48:	
  9576 ;; *************** function _IOC_Set *****************
  9577 ;; Defined at:
  9578 ;;		line 365 in file "../src/MCU_B1.c"
  9579 ;; Parameters:    Size  Location     Type
  9580 ;;		None
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;		None
  9583 ;; Return value:  Size  Location     Type
  9584 ;;		None               void
  9585 ;; Registers used:
  9586 ;;		wreg, status,2
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;Total ram usage:        0 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    5
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_Mcu_Initialization
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           
  9607                           ;psect for function _IOC_Set
  9608  1D5B                     _IOC_Set:	
  9609                           
  9610                           ;MCU_B1.c: 366: WPUB2 = 0;
  9611                           
  9612                           ;incstack = 0
  9613                           ; Regs used in _IOC_Set: [wreg+status,2]
  9614  1D5B  0024               	movlb	4	; select bank4
  9615  1D5C  110D               	bcf	13,2	;volatile
  9616                           
  9617                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9618  1D5D  0027               	movlb	7	; select bank7
  9619  1D5E  0194               	clrf	20	;volatile
  9620                           
  9621                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9622  1D5F  3004               	movlw	4
  9623  1D60  0095               	movwf	21	;volatile
  9624                           
  9625                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9626  1D61  0196               	clrf	22	;volatile
  9627                           
  9628                           ;MCU_B1.c: 393: IOCIE = 1;
  9629  1D62  158B               	bsf	11,3	;volatile
  9630                           
  9631                           ;MCU_B1.c: 394: IOCIF = 0;
  9632  1D63  100B               	bcf	11,0	;volatile
  9633                           
  9634                           ;MCU_B1.c: 395: PEIE = 1;
  9635  1D64  170B               	bsf	11,6	;volatile
  9636                           
  9637                           ;MCU_B1.c: 396: GIE = 1;
  9638  1D65  178B               	bsf	11,7	;volatile
  9639  1D66  0008               	return
  9640  1D67                     __end_of_IOC_Set:	
  9641                           
  9642                           	psect	text49
  9643  1C74                     __ptext49:	
  9644 ;; *************** function _Fosc_Set *****************
  9645 ;; Defined at:
  9646 ;;		line 56 in file "../src/MCU_B1.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;		None
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;		None
  9651 ;; Return value:  Size  Location     Type
  9652 ;;		None               void
  9653 ;; Registers used:
  9654 ;;		wreg
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;Total ram usage:        0 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    5
  9667 ;; This function calls:
  9668 ;;		Nothing
  9669 ;; This function is called by:
  9670 ;;		_Mcu_Initialization
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function _Fosc_Set
  9676  1C74                     _Fosc_Set:	
  9677                           
  9678                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9679                           
  9680                           ;incstack = 0
  9681                           ; Regs used in _Fosc_Set: [wreg]
  9682  1C74  3078               	movlw	120
  9683  1C75  0021               	movlb	1	; select bank1
  9684  1C76  0099               	movwf	25	;volatile
  9685  1C77  0008               	return
  9686  1C78                     __end_of_Fosc_Set:	
  9687                           
  9688                           	psect	text50
  9689  1C94                     __ptext50:	
  9690 ;; *************** function _ADC_Set *****************
  9691 ;; Defined at:
  9692 ;;		line 419 in file "../src/MCU_B1.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;		None
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;		None
  9697 ;; Return value:  Size  Location     Type
  9698 ;;		None               void
  9699 ;; Registers used:
  9700 ;;		wreg
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;Total ram usage:        0 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    5
  9713 ;; This function calls:
  9714 ;;		Nothing
  9715 ;; This function is called by:
  9716 ;;		_Mcu_Initialization
  9717 ;; This function uses a non-reentrant model
  9718 ;;
  9719                           
  9720                           
  9721                           ;psect for function _ADC_Set
  9722  1C94                     _ADC_Set:	
  9723                           
  9724                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9725                           
  9726                           ;incstack = 0
  9727                           ; Regs used in _ADC_Set: [wreg]
  9728  1C94  30F3               	movlw	243
  9729  1C95  0021               	movlb	1	; select bank1
  9730  1C96  009E               	movwf	30	;volatile
  9731                           
  9732                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9733  1C97  30C1               	movlw	193
  9734  1C98  0022               	movlb	2	; select bank2
  9735  1C99  0097               	movwf	23	;volatile
  9736  1C9A  0008               	return
  9737  1C9B                     __end_of_ADC_Set:	
  9738                           
  9739                           	psect	text51
  9740  0040                     __ptext51:	
  9741 ;; *************** function _Load_Main *****************
  9742 ;; Defined at:
  9743 ;;		line 39 in file "../src/OverLoad_B1.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;		None
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;  sw              1   12[BANK0 ] unsigned char 
  9748 ;;  i               1   16[BANK0 ] unsigned char 
  9749 ;;  error           1   15[BANK0 ] unsigned char 
  9750 ;;  adjgo           1   13[BANK0 ] unsigned char 
  9751 ;;  j               1   11[BANK0 ] unsigned char 
  9752 ;; Return value:  Size  Location     Type
  9753 ;;		None               void
  9754 ;; Registers used:
  9755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9756 ;; Tracked objects:
  9757 ;;		On entry : 0/0
  9758 ;;		On exit  : 0/0
  9759 ;;		Unchanged: 0/0
  9760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;Total ram usage:        8 bytes
  9766 ;; Hardware stack levels used:    1
  9767 ;; Hardware stack levels required when called:    8
  9768 ;; This function calls:
  9769 ;;		___lwdiv
  9770 ;;		_getAll_DimmerLights_AdjGO
  9771 ;;		_getMain_All_Error_Status
  9772 ;;		_getMain_LightsStatus
  9773 ;;		_getMain_Lights_Count
  9774 ;;		_getMain_LoadOK
  9775 ;;		_setLoad_AH_AL_Restore
  9776 ;; This function is called by:
  9777 ;;		_main
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           
  9782                           ;psect for function _Load_Main
  9783  0040                     _Load_Main:	
  9784                           
  9785                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
  9786                           
  9787                           ;incstack = 0
  9788                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9789  0040  0020               	movlb	0	; select bank0
  9790  0041  01B0               	clrf	Load_Main@i
  9791  0042  01AB               	clrf	Load_Main@j
  9792  0043  3000               	movlw	0
  9793  0044  3192  2232  3180   	fcall	_getMain_All_Error_Status
  9794  0047  0020               	movlb	0	; select bank0
  9795  0048  00A9               	movwf	??_Load_Main
  9796  0049  0829               	movf	??_Load_Main,w
  9797  004A  00AF               	movwf	Load_Main@error
  9798  004B  01AD               	clrf	Load_Main@adjgo
  9799                           
  9800                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  9801  004C  0022               	movlb	2	; select bank2
  9802  004D  1C26               	btfss	_Load^(0+256),0
  9803  004E  29BB               	goto	l1554
  9804                           
  9805                           ;OverLoad_B1.c: 46: char sw = 1;
  9806  004F  0020               	movlb	0	; select bank0
  9807  0050  01AC               	clrf	Load_Main@sw
  9808  0051  0AAC               	incf	Load_Main@sw,f
  9809                           
  9810                           ;OverLoad_B1.c: 55: adjgo = getAll_DimmerLights_AdjGO(sw);
  9811  0052  082C               	movf	Load_Main@sw,w
  9812  0053  319C  2470  3180   	fcall	_getAll_DimmerLights_AdjGO
  9813  0056  0020               	movlb	0	; select bank0
  9814  0057  00A9               	movwf	??_Load_Main
  9815  0058  0829               	movf	??_Load_Main,w
  9816  0059  00AD               	movwf	Load_Main@adjgo
  9817                           
  9818                           ;OverLoad_B1.c: 57: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
  9819  005A  01AE               	clrf	_Load_Main$3755
  9820  005B  3191  2178  3180   	fcall	_getMain_LightsStatus
  9821  005E  3A01               	xorlw	1
  9822  005F  1D03               	skipz
  9823  0060  286A               	goto	l9998
  9824  0061  0020               	movlb	0	; select bank0
  9825  0062  08AF               	movf	Load_Main@error,f
  9826  0063  1D03               	skipz
  9827  0064  286A               	goto	l9998
  9828  0065  08AD               	movf	Load_Main@adjgo,f
  9829  0066  1D03               	skipz
  9830  0067  286A               	goto	l9998
  9831  0068  01AE               	clrf	_Load_Main$3755
  9832  0069  0AAE               	incf	_Load_Main$3755,f
  9833  006A                     l9998:	
  9834  006A  0020               	movlb	0	; select bank0
  9835  006B  082E               	movf	_Load_Main$3755,w
  9836  006C  0022               	movlb	2	; select bank2
  9837  006D  10A6               	bcf	_Load^(0+256),1
  9838  006E  1D03               	skipz
  9839  006F  14A6               	bsf	_Load^(0+256),1
  9840                           
  9841                           ;OverLoad_B1.c: 58: if (getMain_LoadOK() == 1 && Load.Run == 0) {
  9842  0070  319D  2581  3180   	fcall	_getMain_LoadOK
  9843  0073  3A01               	xorlw	1
  9844  0074  1D03               	skipz
  9845  0075  287B               	goto	l1557
  9846  0076  0022               	movlb	2	; select bank2
  9847  0077  19A6               	btfsc	_Load^(0+256),3
  9848  0078  287B               	goto	l1557
  9849                           
  9850                           ;OverLoad_B1.c: 59: Load.Run = 1;
  9851  0079  15A6               	bsf	_Load^(0+256),3
  9852                           
  9853                           ;OverLoad_B1.c: 60: Load.OK = 0;
  9854  007A  13A6               	bcf	_Load^(0+256),7
  9855  007B                     l1557:	
  9856                           
  9857                           ;OverLoad_B1.c: 61: }
  9858                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
  9859  007B  0022               	movlb	2	; select bank2
  9860  007C  1CA6               	btfss	_Load^(0+256),1
  9861  007D  298B               	goto	l1558
  9862                           
  9863                           ;OverLoad_B1.c: 65: Load.LightsON = 1;
  9864  007E  1526               	bsf	_Load^(0+256),2
  9865                           
  9866                           ;OverLoad_B1.c: 67: if (Load.ADtoGO == 1) {
  9867  007F  1E26               	btfss	_Load^(0+256),4
  9868  0080  2989               	goto	l1559
  9869                           
  9870                           ;OverLoad_B1.c: 68: Load.Time++;
  9871  0081  3001               	movlw	1
  9872  0082  07A7               	addwf	(_Load^(0+256)+1),f
  9873  0083  3000               	movlw	0
  9874  0084  3DA8               	addwfc	((_Load+1)^(0+256)+1),f
  9875                           
  9876                           ;OverLoad_B1.c: 69: if (Load.Time >= 5) {
  9877  0085  3000               	movlw	0
  9878  0086  0228               	subwf	((_Load+1)^(0+256)+1),w
  9879  0087  3005               	movlw	5
  9880  0088  1903               	skipnz
  9881  0089  0227               	subwf	(_Load^(0+256)+1),w
  9882  008A  1C03               	skipc
  9883  008B  0008               	return
  9884                           
  9885                           ;OverLoad_B1.c: 70: Load.Time = 0;
  9886  008C  01A7               	clrf	(_Load^(0+256)+1)
  9887  008D  01A8               	clrf	((_Load+1)^(0+256)+1)
  9888                           
  9889                           ;OverLoad_B1.c: 71: Load.ADtoGO = 0;
  9890  008E  1226               	bcf	_Load^(0+256),4
  9891                           
  9892                           ;OverLoad_B1.c: 73: for (i = 1; i < 4; i++) {
  9893  008F  0020               	movlb	0	; select bank0
  9894  0090  01B0               	clrf	Load_Main@i
  9895  0091  0AB0               	incf	Load_Main@i,f
  9896  0092  3004               	movlw	4
  9897  0093  0230               	subwf	Load_Main@i,w
  9898  0094  1803               	btfsc	3,0
  9899  0095  28C0               	goto	l10026
  9900  0096                     l10020:	
  9901                           
  9902                           ;OverLoad_B1.c: 74: Load.ADH += Load.AH[i];
  9903  0096  3530               	lslf	Load_Main@i,w
  9904  0097  3E31               	addlw	(_Load+11)& (0+255)
  9905  0098  0086               	movwf	6
  9906  0099  3001               	movlw	1	; select bank2/3
  9907  009A  0087               	movwf	7
  9908  009B  3F40               	moviw [0]fsr1
  9909  009C  00A9               	movwf	??_Load_Main
  9910  009D  3F41               	moviw [1]fsr1
  9911  009E  00AA               	movwf	??_Load_Main+1
  9912  009F  0829               	movf	??_Load_Main,w
  9913  00A0  0022               	movlb	2	; select bank2
  9914  00A1  07AB               	addwf	(_Load^(0+256)+5),f
  9915  00A2  0020               	movlb	0	; select bank0
  9916  00A3  082A               	movf	??_Load_Main+1,w
  9917  00A4  0022               	movlb	2	; select bank2
  9918  00A5  3DAC               	addwfc	((_Load+1)^(0+256)+5),f
  9919                           
  9920                           ;OverLoad_B1.c: 75: Load.ADL += Load.AL[i];
  9921  00A6  0020               	movlb	0	; select bank0
  9922  00A7  3530               	lslf	Load_Main@i,w
  9923  00A8  3E3B               	addlw	(_Load+21)& (0+255)
  9924  00A9  0086               	movwf	6
  9925  00AA  3001               	movlw	1	; select bank2/3
  9926  00AB  0087               	movwf	7
  9927  00AC  3F40               	moviw [0]fsr1
  9928  00AD  00A9               	movwf	??_Load_Main
  9929  00AE  3F41               	moviw [1]fsr1
  9930  00AF  00AA               	movwf	??_Load_Main+1
  9931  00B0  0829               	movf	??_Load_Main,w
  9932  00B1  0022               	movlb	2	; select bank2
  9933  00B2  07AD               	addwf	(_Load^(0+256)+7),f
  9934  00B3  0020               	movlb	0	; select bank0
  9935  00B4  082A               	movf	??_Load_Main+1,w
  9936  00B5  0022               	movlb	2	; select bank2
  9937  00B6  3DAE               	addwfc	((_Load+1)^(0+256)+7),f
  9938  00B7  3001               	movlw	1
  9939  00B8  0020               	movlb	0	; select bank0
  9940  00B9  00A9               	movwf	??_Load_Main
  9941  00BA  0829               	movf	??_Load_Main,w
  9942  00BB  07B0               	addwf	Load_Main@i,f
  9943  00BC  3004               	movlw	4
  9944  00BD  0230               	subwf	Load_Main@i,w
  9945  00BE  1C03               	skipc
  9946  00BF  2896               	goto	l10020
  9947  00C0                     l10026:	
  9948                           
  9949                           ;OverLoad_B1.c: 76: }
  9950                           ;OverLoad_B1.c: 77: Load.ADH /= 3;
  9951  00C0  3003               	movlw	3
  9952  00C1  00A0               	movwf	___lwdiv@divisor
  9953  00C2  3000               	movlw	0
  9954  00C3  00A1               	movwf	___lwdiv@divisor+1
  9955  00C4  0022               	movlb	2	; select bank2
  9956  00C5  082C               	movf	((_Load+1)^(0+256)+5),w
  9957  00C6  0020               	movlb	0	; select bank0
  9958  00C7  01A3               	clrf	___lwdiv@dividend+1
  9959  00C8  07A3               	addwf	___lwdiv@dividend+1,f
  9960  00C9  0022               	movlb	2	; select bank2
  9961  00CA  082B               	movf	(_Load^(0+256)+5),w
  9962  00CB  0020               	movlb	0	; select bank0
  9963  00CC  01A2               	clrf	___lwdiv@dividend
  9964  00CD  07A2               	addwf	___lwdiv@dividend,f
  9965  00CE  3193  2370  3180   	fcall	___lwdiv
  9966  00D1  0020               	movlb	0	; select bank0
  9967  00D2  0821               	movf	?___lwdiv+1,w
  9968  00D3  0022               	movlb	2	; select bank2
  9969  00D4  01AC               	clrf	((_Load+1)^(0+256)+5)
  9970  00D5  07AC               	addwf	((_Load+1)^(0+256)+5),f
  9971  00D6  0020               	movlb	0	; select bank0
  9972  00D7  0820               	movf	?___lwdiv,w
  9973  00D8  0022               	movlb	2	; select bank2
  9974  00D9  01AB               	clrf	(_Load^(0+256)+5)
  9975  00DA  07AB               	addwf	(_Load^(0+256)+5),f
  9976                           
  9977                           ;OverLoad_B1.c: 78: Load.ADL /= 3;
  9978  00DB  3003               	movlw	3
  9979  00DC  0020               	movlb	0	; select bank0
  9980  00DD  00A0               	movwf	___lwdiv@divisor
  9981  00DE  3000               	movlw	0
  9982  00DF  00A1               	movwf	___lwdiv@divisor+1
  9983  00E0  0022               	movlb	2	; select bank2
  9984  00E1  082E               	movf	((_Load+1)^(0+256)+7),w
  9985  00E2  0020               	movlb	0	; select bank0
  9986  00E3  01A3               	clrf	___lwdiv@dividend+1
  9987  00E4  07A3               	addwf	___lwdiv@dividend+1,f
  9988  00E5  0022               	movlb	2	; select bank2
  9989  00E6  082D               	movf	(_Load^(0+256)+7),w
  9990  00E7  0020               	movlb	0	; select bank0
  9991  00E8  01A2               	clrf	___lwdiv@dividend
  9992  00E9  07A2               	addwf	___lwdiv@dividend,f
  9993  00EA  3193  2370  3180   	fcall	___lwdiv
  9994  00ED  0020               	movlb	0	; select bank0
  9995  00EE  0821               	movf	?___lwdiv+1,w
  9996  00EF  0022               	movlb	2	; select bank2
  9997  00F0  01AE               	clrf	((_Load+1)^(0+256)+7)
  9998  00F1  07AE               	addwf	((_Load+1)^(0+256)+7),f
  9999  00F2  0020               	movlb	0	; select bank0
 10000  00F3  0820               	movf	?___lwdiv,w
 10001  00F4  0022               	movlb	2	; select bank2
 10002  00F5  01AD               	clrf	(_Load^(0+256)+7)
 10003  00F6  07AD               	addwf	(_Load^(0+256)+7),f
 10004                           
 10005                           ;OverLoad_B1.c: 79: setLoad_AH_AL_Restore();
 10006  00F7  319F  2746  3180   	fcall	_setLoad_AH_AL_Restore
 10007                           
 10008                           ;OverLoad_B1.c: 81: if (Load.ADH > Load.ADL) {
 10009  00FA  0022               	movlb	2	; select bank2
 10010  00FB  082C               	movf	((_Load+1)^(0+256)+5),w
 10011  00FC  022E               	subwf	((_Load+1)^(0+256)+7),w
 10012  00FD  1D03               	skipz
 10013  00FE  2901               	goto	u11305
 10014  00FF  082B               	movf	(_Load^(0+256)+5),w
 10015  0100  022D               	subwf	(_Load^(0+256)+7),w
 10016  0101                     u11305:	
 10017  0101  1803               	skipnc
 10018  0102  0008               	return
 10019                           
 10020                           ;OverLoad_B1.c: 82: Load.AD = Load.ADH - Load.ADL;
 10021  0103  3005               	movlw	5
 10022  0104  3E26               	addlw	_Load& (0+255)
 10023  0105  0086               	movwf	6
 10024  0106  3001               	movlw	1	; select bank2/3
 10025  0107  0087               	movwf	7
 10026  0108  092D               	comf	(_Load^(0+256)+7),w
 10027  0109  0020               	movlb	0	; select bank0
 10028  010A  00A9               	movwf	??_Load_Main
 10029  010B  0022               	movlb	2	; select bank2
 10030  010C  092E               	comf	((_Load+1)^(0+256)+7),w
 10031  010D  0020               	movlb	0	; select bank0
 10032  010E  00AA               	movwf	??_Load_Main+1
 10033  010F  0AA9               	incf	??_Load_Main,f
 10034  0110  1903               	skipnz
 10035  0111  0AAA               	incf	??_Load_Main+1,f
 10036  0112  3F40               	moviw [0]fsr1
 10037  0113  0729               	addwf	??_Load_Main,w
 10038  0114  0022               	movlb	2	; select bank2
 10039  0115  00C5               	movwf	(_Load^(0+256)+31)
 10040  0116  3F41               	moviw [1]fsr1
 10041  0117  0020               	movlb	0	; select bank0
 10042  0118  3D2A               	addwfc	??_Load_Main+1,w
 10043  0119  0022               	movlb	2	; select bank2
 10044  011A  00C6               	movwf	(_Load^(0+256)+32)
 10045                           
 10046                           ;OverLoad_B1.c: 83: Load.ADH = 0;
 10047  011B  01AB               	clrf	(_Load^(0+256)+5)
 10048  011C  01AC               	clrf	((_Load+1)^(0+256)+5)
 10049                           
 10050                           ;OverLoad_B1.c: 84: Load.ADL = 0;
 10051  011D  01AD               	clrf	(_Load^(0+256)+7)
 10052  011E  01AE               	clrf	((_Load+1)^(0+256)+7)
 10053                           
 10054                           ;OverLoad_B1.c: 85: Load.LightsCount = getMain_Lights_Count();
 10055  011F  319D  25BC  3180   	fcall	_getMain_Lights_Count
 10056  0122  0020               	movlb	0	; select bank0
 10057  0123  00A9               	movwf	??_Load_Main
 10058  0124  0829               	movf	??_Load_Main,w
 10059  0125  0022               	movlb	2	; select bank2
 10060  0126  00D2               	movwf	(_Load^(0+256)+44)
 10061                           
 10062                           ;OverLoad_B1.c: 87: if (Load.Run == 1) {
 10063  0127  1DA6               	btfss	_Load^(0+256),3
 10064  0128  2954               	goto	l10058
 10065                           
 10066                           ;OverLoad_B1.c: 88: if (Load.Count < 2) {
 10067  0129  3002               	movlw	2
 10068  012A  024F               	subwf	(_Load^(0+256)+41),w
 10069  012B  1803               	skipnc
 10070  012C  2954               	goto	l10058
 10071                           
 10072                           ;OverLoad_B1.c: 89: Load.Count++;
 10073  012D  3001               	movlw	1
 10074  012E  0020               	movlb	0	; select bank0
 10075  012F  00A9               	movwf	??_Load_Main
 10076  0130  0829               	movf	??_Load_Main,w
 10077  0131  0022               	movlb	2	; select bank2
 10078  0132  07CF               	addwf	(_Load^(0+256)+41),f
 10079                           
 10080                           ;OverLoad_B1.c: 90: if (Load.Count == 1) {
 10081  0133  084F               	movf	(_Load^(0+256)+41),w
 10082  0134  3A01               	xorlw	1
 10083  0135  1D03               	skipz
 10084  0136  2941               	goto	l10050
 10085                           
 10086                           ;OverLoad_B1.c: 91: Load.ErrorCountValue = 2;
 10087  0137  3002               	movlw	2
 10088  0138  0020               	movlb	0	; select bank0
 10089  0139  00A9               	movwf	??_Load_Main
 10090  013A  0829               	movf	??_Load_Main,w
 10091  013B  0022               	movlb	2	; select bank2
 10092  013C  00D1               	movwf	(_Load^(0+256)+43)
 10093                           
 10094                           ;OverLoad_B1.c: 92: Load.JudgeValue = (20*57);
 10095  013D  3074               	movlw	116
 10096  013E  00CB               	movwf	(_Load^(0+256)+37)
 10097  013F  3004               	movlw	4
 10098  0140  294C               	goto	L3
 10099  0141                     l10050:	
 10100                           ;OverLoad_B1.c: 93: } else if (Load.Count == 2) {
 10101                           
 10102  0141  084F               	movf	(_Load^(0+256)+41),w
 10103  0142  3A02               	xorlw	2
 10104  0143  1D03               	skipz
 10105  0144  2954               	goto	l10058
 10106                           
 10107                           ;OverLoad_B1.c: 94: if (Load.LightsCount == 1) {
 10108  0145  0852               	movf	(_Load^(0+256)+44),w
 10109  0146  3A01               	xorlw	1
 10110  0147  1D03               	skipz
 10111  0148  294E               	goto	l10056
 10112                           
 10113                           ;OverLoad_B1.c: 95: Load.JudgeValue = (int)(1.8*57);
 10114  0149  3066               	movlw	102
 10115  014A  00CB               	movwf	(_Load^(0+256)+37)
 10116  014B  3000               	movlw	0
 10117  014C                     L3:	
 10118  014C  00CC               	movwf	(_Load^(0+256)+38)
 10119                           
 10120                           ;OverLoad_B1.c: 96: } else {
 10121  014D  2954               	goto	l10058
 10122  014E                     l10056:	
 10123                           
 10124                           ;OverLoad_B1.c: 97: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10125  014E  082F               	movf	(_Load^(0+256)+9),w
 10126  014F  3E66               	addlw	102
 10127  0150  00CB               	movwf	(_Load^(0+256)+37)
 10128  0151  3000               	movlw	0
 10129  0152  3D30               	addwfc	((_Load+1)^(0+256)+9),w
 10130  0153  00CC               	movwf	((_Load+1)^(0+256)+37)
 10131  0154                     l10058:	
 10132                           
 10133                           ;OverLoad_B1.c: 98: }
 10134                           ;OverLoad_B1.c: 99: }
 10135                           ;OverLoad_B1.c: 100: }
 10136                           ;OverLoad_B1.c: 101: }
 10137                           ;OverLoad_B1.c: 103: if (Load.AD >= Load.JudgeValue) {
 10138  0154  084C               	movf	((_Load+1)^(0+256)+37),w
 10139  0155  0246               	subwf	((_Load+1)^(0+256)+31),w
 10140  0156  1D03               	skipz
 10141  0157  295A               	goto	u11365
 10142  0158  084B               	movf	(_Load^(0+256)+37),w
 10143  0159  0245               	subwf	(_Load^(0+256)+31),w
 10144  015A                     u11365:	
 10145  015A  1C03               	skipc
 10146  015B  2969               	goto	l10068
 10147                           
 10148                           ;OverLoad_B1.c: 104: Load.ErrorCount++;
 10149  015C  3001               	movlw	1
 10150  015D  0020               	movlb	0	; select bank0
 10151  015E  00A9               	movwf	??_Load_Main
 10152  015F  0829               	movf	??_Load_Main,w
 10153  0160  0022               	movlb	2	; select bank2
 10154  0161  07D0               	addwf	(_Load^(0+256)+42),f
 10155                           
 10156                           ;OverLoad_B1.c: 105: if (Load.ErrorCount > Load.ErrorCountValue) {
 10157  0162  0850               	movf	(_Load^(0+256)+42),w
 10158  0163  0251               	subwf	(_Load^(0+256)+43),w
 10159  0164  1803               	skipnc
 10160  0165  0008               	return
 10161                           
 10162                           ;OverLoad_B1.c: 106: Load.ErrorCount = 0;
 10163  0166  01D0               	clrf	(_Load^(0+256)+42)
 10164                           
 10165                           ;OverLoad_B1.c: 107: Load.ERROR = 1;
 10166  0167  16A6               	bsf	_Load^(0+256),5
 10167                           
 10168                           ;OverLoad_B1.c: 128: }
 10169                           ;OverLoad_B1.c: 129: } else {
 10170  0168  0008               	return
 10171  0169                     l10068:	
 10172                           
 10173                           ;OverLoad_B1.c: 130: Load.ErrorCount = 0;
 10174  0169  01D0               	clrf	(_Load^(0+256)+42)
 10175                           
 10176                           ;OverLoad_B1.c: 131: if (Load.Run == 1) {
 10177  016A  1DA6               	btfss	_Load^(0+256),3
 10178  016B  0008               	return
 10179                           
 10180                           ;OverLoad_B1.c: 132: if (Load.OK == 0) {
 10181  016C  1BA6               	btfsc	_Load^(0+256),7
 10182  016D  0008               	return
 10183                           
 10184                           ;OverLoad_B1.c: 133: Load.SafeCount++;
 10185  016E  3001               	movlw	1
 10186  016F  0020               	movlb	0	; select bank0
 10187  0170  00A9               	movwf	??_Load_Main
 10188  0171  0829               	movf	??_Load_Main,w
 10189  0172  0022               	movlb	2	; select bank2
 10190  0173  07D3               	addwf	(_Load^(0+256)+45),f
 10191                           
 10192                           ;OverLoad_B1.c: 134: if (Load.SafeCount >= 3) {
 10193  0174  3003               	movlw	3
 10194  0175  0253               	subwf	(_Load^(0+256)+45),w
 10195  0176  1C03               	skipc
 10196  0177  0008               	return
 10197                           
 10198                           ;OverLoad_B1.c: 135: Load.SafeCount = 0;
 10199  0178  01D3               	clrf	(_Load^(0+256)+45)
 10200                           
 10201                           ;OverLoad_B1.c: 136: Load.OK = 1;
 10202  0179  17A6               	bsf	_Load^(0+256),7
 10203                           
 10204                           ;OverLoad_B1.c: 137: Load.Run = 0;
 10205  017A  11A6               	bcf	_Load^(0+256),3
 10206                           
 10207                           ;OverLoad_B1.c: 138: Load.Count = 0;
 10208  017B  01CF               	clrf	(_Load^(0+256)+41)
 10209                           
 10210                           ;OverLoad_B1.c: 139: Load.TotalLoad = Load.AD;
 10211  017C  0846               	movf	((_Load+1)^(0+256)+31),w
 10212  017D  01B0               	clrf	((_Load+1)^(0+256)+9)
 10213  017E  07B0               	addwf	((_Load+1)^(0+256)+9),f
 10214  017F  0845               	movf	(_Load^(0+256)+31),w
 10215  0180  01AF               	clrf	(_Load^(0+256)+9)
 10216  0181  07AF               	addwf	(_Load^(0+256)+9),f
 10217                           
 10218                           ;OverLoad_B1.c: 140: Load.ErrorCountValue = 3;
 10219  0182  3003               	movlw	3
 10220  0183  0020               	movlb	0	; select bank0
 10221  0184  00A9               	movwf	??_Load_Main
 10222  0185  0829               	movf	??_Load_Main,w
 10223  0186  0022               	movlb	2	; select bank2
 10224  0187  00D1               	movwf	(_Load^(0+256)+43)
 10225                           
 10226                           ;OverLoad_B1.c: 164: }
 10227                           ;OverLoad_B1.c: 165: }
 10228                           ;OverLoad_B1.c: 166: }
 10229                           ;OverLoad_B1.c: 167: }
 10230                           ;OverLoad_B1.c: 168: }
 10231                           ;OverLoad_B1.c: 169: }
 10232                           ;OverLoad_B1.c: 170: } else {
 10233  0188  0008               	return
 10234  0189                     l1559:	
 10235                           
 10236                           ;OverLoad_B1.c: 171: Load.ADtoGO = 1;
 10237  0189  1626               	bsf	_Load^(0+256),4
 10238                           
 10239                           ;OverLoad_B1.c: 172: }
 10240                           ;OverLoad_B1.c: 173: } else {
 10241  018A  0008               	return
 10242  018B                     l1558:	
 10243                           
 10244                           ;OverLoad_B1.c: 174: if (Load.LightsON == 1 && error != 3) {
 10245  018B  1D26               	btfss	_Load^(0+256),2
 10246  018C  29A9               	goto	l10118
 10247  018D  0020               	movlb	0	; select bank0
 10248  018E  082F               	movf	Load_Main@error,w
 10249  018F  3A03               	xorlw	3
 10250  0190  1903               	skipnz
 10251  0191  29A9               	goto	l10118
 10252                           
 10253                           ;OverLoad_B1.c: 175: Load.LightsON = 0;
 10254  0192  0022               	movlb	2	; select bank2
 10255  0193  1126               	bcf	_Load^(0+256),2
 10256                           
 10257                           ;OverLoad_B1.c: 177: Load.Time = 0;
 10258  0194  01A7               	clrf	(_Load^(0+256)+1)
 10259  0195  01A8               	clrf	((_Load+1)^(0+256)+1)
 10260                           
 10261                           ;OverLoad_B1.c: 178: Load.ADtoGO = 0;
 10262  0196  1226               	bcf	_Load^(0+256),4
 10263                           
 10264                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 10265  0197  319F  2746  3180   	fcall	_setLoad_AH_AL_Restore
 10266                           
 10267                           ;OverLoad_B1.c: 180: Load.Count = 0;
 10268  019A  0022               	movlb	2	; select bank2
 10269  019B  01CF               	clrf	(_Load^(0+256)+41)
 10270                           
 10271                           ;OverLoad_B1.c: 181: Load.ErrorCount = 0;
 10272  019C  01D0               	clrf	(_Load^(0+256)+42)
 10273                           
 10274                           ;OverLoad_B1.c: 182: Load.SafeCount = 0;
 10275  019D  01D3               	clrf	(_Load^(0+256)+45)
 10276                           
 10277                           ;OverLoad_B1.c: 184: Load.ADH = 0;
 10278  019E  01AB               	clrf	(_Load^(0+256)+5)
 10279  019F  01AC               	clrf	((_Load+1)^(0+256)+5)
 10280                           
 10281                           ;OverLoad_B1.c: 185: Load.ADL = 0;
 10282  01A0  01AD               	clrf	(_Load^(0+256)+7)
 10283  01A1  01AE               	clrf	((_Load+1)^(0+256)+7)
 10284                           
 10285                           ;OverLoad_B1.c: 186: Load.AD = 0;
 10286  01A2  01C5               	clrf	(_Load^(0+256)+31)
 10287  01A3  01C6               	clrf	((_Load+1)^(0+256)+31)
 10288                           
 10289                           ;OverLoad_B1.c: 187: Load.JudgeValue = 0;
 10290  01A4  01CB               	clrf	(_Load^(0+256)+37)
 10291  01A5  01CC               	clrf	((_Load+1)^(0+256)+37)
 10292                           
 10293                           ;OverLoad_B1.c: 188: Load.LightsCount = 0;
 10294  01A6  01D2               	clrf	(_Load^(0+256)+44)
 10295                           
 10296                           ;OverLoad_B1.c: 189: Load.Run = 0;
 10297  01A7  11A6               	bcf	_Load^(0+256),3
 10298                           
 10299                           ;OverLoad_B1.c: 190: Load.OK = 1;
 10300  01A8  17A6               	bsf	_Load^(0+256),7
 10301  01A9                     l10118:	
 10302                           
 10303                           ;OverLoad_B1.c: 211: }
 10304                           ;OverLoad_B1.c: 212: if (Load.ERROR == 1) {
 10305  01A9  0022               	movlb	2	; select bank2
 10306  01AA  1EA6               	btfss	_Load^(0+256),5
 10307  01AB  0008               	return
 10308                           
 10309                           ;OverLoad_B1.c: 213: Load.ErrorTime++;
 10310  01AC  3001               	movlw	1
 10311  01AD  07A9               	addwf	(_Load^(0+256)+3),f
 10312  01AE  3000               	movlw	0
 10313  01AF  3DAA               	addwfc	((_Load+1)^(0+256)+3),f
 10314                           
 10315                           ;OverLoad_B1.c: 214: if (Load.ErrorTime >= 1000) {
 10316  01B0  3003               	movlw	3
 10317  01B1  022A               	subwf	((_Load+1)^(0+256)+3),w
 10318  01B2  30E8               	movlw	232
 10319  01B3  1903               	skipnz
 10320  01B4  0229               	subwf	(_Load^(0+256)+3),w
 10321  01B5  1C03               	skipc
 10322  01B6  0008               	return
 10323                           
 10324                           ;OverLoad_B1.c: 215: Load.ErrorTime = 0;
 10325  01B7  01A9               	clrf	(_Load^(0+256)+3)
 10326  01B8  01AA               	clrf	((_Load+1)^(0+256)+3)
 10327                           
 10328                           ;OverLoad_B1.c: 216: Load.ERROR = 0;
 10329  01B9  12A6               	bcf	_Load^(0+256),5
 10330                           
 10331                           ;OverLoad_B1.c: 217: }
 10332                           ;OverLoad_B1.c: 218: }
 10333                           ;OverLoad_B1.c: 219: }
 10334                           ;OverLoad_B1.c: 220: } else {
 10335  01BA  0008               	return
 10336  01BB                     l1554:	
 10337                           
 10338                           ;OverLoad_B1.c: 221: if (myMain.PowerON == 1) {
 10339  01BB  0021               	movlb	1	; select bank1
 10340  01BC  1C20               	btfss	_myMain^(0+128),0
 10341  01BD  0008               	return
 10342                           
 10343                           ;OverLoad_B1.c: 223: Load.Enable = 1;
 10344  01BE  0022               	movlb	2	; select bank2
 10345  01BF  1426               	bsf	_Load^(0+256),0
 10346  01C0  0008               	return
 10347  01C1                     __end_of_Load_Main:	
 10348                           
 10349                           	psect	text52
 10350  1D81                     __ptext52:	
 10351 ;; *************** function _getMain_LoadOK *****************
 10352 ;; Defined at:
 10353 ;;		line 475 in file "../src/Main_B1.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;		None
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;  ok              1    2[BANK0 ] unsigned char 
 10358 ;; Return value:  Size  Location     Type
 10359 ;;                  1    wreg      unsigned char 
 10360 ;; Registers used:
 10361 ;;		wreg, status,2, pclath, cstack
 10362 ;; Tracked objects:
 10363 ;;		On entry : 0/0
 10364 ;;		On exit  : 0/0
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;Total ram usage:        2 bytes
 10372 ;; Hardware stack levels used:    1
 10373 ;; Hardware stack levels required when called:    6
 10374 ;; This function calls:
 10375 ;;		_getDimmer_LoadOK
 10376 ;; This function is called by:
 10377 ;;		_Load_Main
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           
 10382                           ;psect for function _getMain_LoadOK
 10383  1D81                     _getMain_LoadOK:	
 10384                           
 10385                           ;Main_B1.c: 476: char ok = 0;
 10386                           
 10387                           ;incstack = 0
 10388                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10389  1D81  0020               	movlb	0	; select bank0
 10390  1D82  01A2               	clrf	getMain_LoadOK@ok
 10391                           
 10392                           ;Main_B1.c: 482: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10393  1D83  3190  2066         	fcall	_getDimmer_LoadOK
 10394  1D85  3A01               	xorlw	1
 10395  1D86  3000               	movlw	0
 10396  1D87  1903               	skipnz
 10397  1D88  3001               	movlw	1
 10398  1D89  0020               	movlb	0	; select bank0
 10399  1D8A  00A1               	movwf	??_getMain_LoadOK
 10400  1D8B  0821               	movf	??_getMain_LoadOK,w
 10401  1D8C  00A2               	movwf	getMain_LoadOK@ok
 10402                           
 10403                           ;Main_B1.c: 484: return ok;
 10404  1D8D  0822               	movf	getMain_LoadOK@ok,w
 10405  1D8E  0008               	return
 10406  1D8F                     __end_of_getMain_LoadOK:	
 10407                           
 10408                           	psect	text53
 10409  1066                     __ptext53:	
 10410 ;; *************** function _getDimmer_LoadOK *****************
 10411 ;; Defined at:
 10412 ;;		line 820 in file "../src/Dimmer_B1.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;  status          1    0[BANK0 ] unsigned char 
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  1    wreg      unsigned char 
 10419 ;; Registers used:
 10420 ;;		wreg, status,2
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;Total ram usage:        1 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    5
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_getMain_LoadOK
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function _getDimmer_LoadOK
 10442  1066                     _getDimmer_LoadOK:	
 10443                           
 10444                           ;Dimmer_B1.c: 821: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10445                           
 10446                           ;incstack = 0
 10447                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10448  1066  3000               	movlw	0
 10449  1067  0022               	movlb	2	; select bank2
 10450  1068  18A0               	btfsc	_Dimmer^(0+256),1	;volatile
 10451  1069  3001               	movlw	1
 10452  106A  0020               	movlb	0	; select bank0
 10453  106B  00A0               	movwf	getDimmer_LoadOK@status
 10454                           
 10455                           ;Dimmer_B1.c: 823: return status;
 10456  106C  0820               	movf	getDimmer_LoadOK@status,w
 10457  106D  0008               	return
 10458  106E                     __end_of_getDimmer_LoadOK:	
 10459                           
 10460                           	psect	text54
 10461  1DBC                     __ptext54:	
 10462 ;; *************** function _getMain_Lights_Count *****************
 10463 ;; Defined at:
 10464 ;;		line 445 in file "../src/Main_B1.c"
 10465 ;; Parameters:    Size  Location     Type
 10466 ;;		None
 10467 ;; Auto vars:     Size  Location     Type
 10468 ;;  status1         1    3[BANK0 ] unsigned char 
 10469 ;;  status3         1    2[BANK0 ] unsigned char 
 10470 ;;  status2         1    1[BANK0 ] unsigned char 
 10471 ;;  count           1    0[BANK0 ] unsigned char 
 10472 ;; Return value:  Size  Location     Type
 10473 ;;                  1    wreg      unsigned char 
 10474 ;; Registers used:
 10475 ;;		wreg, status,2, status,0
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:        4 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    5
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_Load_Main
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function _getMain_Lights_Count
 10497  1DBC                     _getMain_Lights_Count:	
 10498                           
 10499                           ;Main_B1.c: 446: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10500                           
 10501                           ;incstack = 0
 10502                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10503  1DBC  0020               	movlb	0	; select bank0
 10504  1DBD  01A3               	clrf	getMain_Lights_Count@status1
 10505  1DBE  01A1               	clrf	getMain_Lights_Count@status2
 10506  1DBF  01A2               	clrf	getMain_Lights_Count@status3
 10507  1DC0  01A0               	clrf	getMain_Lights_Count@count
 10508                           
 10509                           ;Main_B1.c: 450: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10510  1DC1  3000               	movlw	0
 10511  1DC2  0022               	movlb	2	; select bank2
 10512  1DC3  1BDE               	btfsc	(_DimmerLights1^(0+256)+10),7	;volatile
 10513  1DC4  3001               	movlw	1
 10514  1DC5  0020               	movlb	0	; select bank0
 10515  1DC6  00A3               	movwf	getMain_Lights_Count@status1
 10516                           
 10517                           ;Main_B1.c: 471: return count = (status1 + status2 + status3);
 10518  1DC7  0823               	movf	getMain_Lights_Count@status1,w
 10519  1DC8  0721               	addwf	getMain_Lights_Count@status2,w
 10520  1DC9  0722               	addwf	getMain_Lights_Count@status3,w
 10521  1DCA  00A0               	movwf	getMain_Lights_Count@count
 10522  1DCB  0008               	return
 10523  1DCC                     __end_of_getMain_Lights_Count:	
 10524                           
 10525                           	psect	text55
 10526  1C70                     __ptext55:	
 10527 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10528 ;; Defined at:
 10529 ;;		line 751 in file "../src/Dimmer_B1.c"
 10530 ;; Parameters:    Size  Location     Type
 10531 ;;  sw              1    wreg     unsigned char 
 10532 ;; Auto vars:     Size  Location     Type
 10533 ;;  sw              1    0[COMMON] unsigned char 
 10534 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10535 ;; Return value:  Size  Location     Type
 10536 ;;                  1    wreg      unsigned char 
 10537 ;; Registers used:
 10538 ;;		wreg, status,2
 10539 ;; Tracked objects:
 10540 ;;		On entry : 0/0
 10541 ;;		On exit  : 0/0
 10542 ;;		Unchanged: 0/0
 10543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;Total ram usage:        1 bytes
 10549 ;; Hardware stack levels used:    1
 10550 ;; Hardware stack levels required when called:    5
 10551 ;; This function calls:
 10552 ;;		Nothing
 10553 ;; This function is called by:
 10554 ;;		_Load_Main
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           
 10559                           ;psect for function _getAll_DimmerLights_AdjGO
 10560  1C70                     _getAll_DimmerLights_AdjGO:	
 10561                           
 10562                           ;Dimmer_B1.c: 752: char adjgo = 0;
 10563                           
 10564                           ;incstack = 0
 10565                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10566  1C70  0020               	movlb	0	; select bank0
 10567  1C71  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10568                           
 10569                           ;Dimmer_B1.c: 778: return adjgo;
 10570  1C72  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10571  1C73  0008               	return
 10572  1C74                     __end_of_getAll_DimmerLights_AdjGO:	
 10573                           
 10574                           	psect	text56
 10575  1370                     __ptext56:	
 10576 ;; *************** function ___lwdiv *****************
 10577 ;; Defined at:
 10578 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10579 ;; Parameters:    Size  Location     Type
 10580 ;;  divisor         2    0[BANK0 ] unsigned int 
 10581 ;;  dividend        2    2[BANK0 ] unsigned int 
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;  quotient        2    6[BANK0 ] unsigned int 
 10584 ;;  counter         1    5[BANK0 ] unsigned char 
 10585 ;; Return value:  Size  Location     Type
 10586 ;;                  2    0[BANK0 ] unsigned int 
 10587 ;; Registers used:
 10588 ;;		wreg, status,2, status,0
 10589 ;; Tracked objects:
 10590 ;;		On entry : 0/0
 10591 ;;		On exit  : 0/0
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10594 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;Total ram usage:        8 bytes
 10599 ;; Hardware stack levels used:    1
 10600 ;; Hardware stack levels required when called:    5
 10601 ;; This function calls:
 10602 ;;		Nothing
 10603 ;; This function is called by:
 10604 ;;		_Load_Main
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           
 10609                           ;psect for function ___lwdiv
 10610  1370                     ___lwdiv:	
 10611                           
 10612                           ;incstack = 0
 10613                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10614  1370  0020               	movlb	0	; select bank0
 10615  1371  01A6               	clrf	___lwdiv@quotient
 10616  1372  01A7               	clrf	___lwdiv@quotient+1
 10617  1373  0821               	movf	___lwdiv@divisor+1,w
 10618  1374  0420               	iorwf	___lwdiv@divisor,w
 10619  1375  1903               	skipnz
 10620  1376  2BA0               	goto	l9728
 10621  1377  01A5               	clrf	___lwdiv@counter
 10622  1378  0AA5               	incf	___lwdiv@counter,f
 10623  1379                     l9716:	
 10624  1379  1BA1               	btfsc	___lwdiv@divisor+1,7
 10625  137A  2B85               	goto	l9718
 10626  137B  3001               	movlw	1
 10627  137C                     u10775:	
 10628  137C  35A0               	lslf	___lwdiv@divisor,f
 10629  137D  0DA1               	rlf	___lwdiv@divisor+1,f
 10630  137E  0B89               	decfsz	9,f
 10631  137F  2B7C               	goto	u10775
 10632  1380  3001               	movlw	1
 10633  1381  00A4               	movwf	??___lwdiv
 10634  1382  0824               	movf	??___lwdiv,w
 10635  1383  07A5               	addwf	___lwdiv@counter,f
 10636  1384  2B79               	goto	l9716
 10637  1385                     l9718:	
 10638  1385  3001               	movlw	1
 10639  1386                     u10795:	
 10640  1386  35A6               	lslf	___lwdiv@quotient,f
 10641  1387  0DA7               	rlf	___lwdiv@quotient+1,f
 10642  1388  0B89               	decfsz	9,f
 10643  1389  2B86               	goto	u10795
 10644  138A  0821               	movf	___lwdiv@divisor+1,w
 10645  138B  0223               	subwf	___lwdiv@dividend+1,w
 10646  138C  1D03               	skipz
 10647  138D  2B90               	goto	u10805
 10648  138E  0820               	movf	___lwdiv@divisor,w
 10649  138F  0222               	subwf	___lwdiv@dividend,w
 10650  1390                     u10805:	
 10651  1390  1C03               	skipc
 10652  1391  2B97               	goto	l9724
 10653  1392  0820               	movf	___lwdiv@divisor,w
 10654  1393  02A2               	subwf	___lwdiv@dividend,f
 10655  1394  0821               	movf	___lwdiv@divisor+1,w
 10656  1395  3BA3               	subwfb	___lwdiv@dividend+1,f
 10657  1396  1426               	bsf	___lwdiv@quotient,0
 10658  1397                     l9724:	
 10659  1397  3001               	movlw	1
 10660  1398                     u10815:	
 10661  1398  36A1               	lsrf	___lwdiv@divisor+1,f
 10662  1399  0CA0               	rrf	___lwdiv@divisor,f
 10663  139A  0B89               	decfsz	9,f
 10664  139B  2B98               	goto	u10815
 10665  139C  3001               	movlw	1
 10666  139D  02A5               	subwf	___lwdiv@counter,f
 10667  139E  1D03               	btfss	3,2
 10668  139F  2B85               	goto	l9718
 10669  13A0                     l9728:	
 10670  13A0  0827               	movf	___lwdiv@quotient+1,w
 10671  13A1  01A1               	clrf	?___lwdiv+1
 10672  13A2  07A1               	addwf	?___lwdiv+1,f
 10673  13A3  0826               	movf	___lwdiv@quotient,w
 10674  13A4  01A0               	clrf	?___lwdiv
 10675  13A5  07A0               	addwf	?___lwdiv,f
 10676  13A6  0008               	return
 10677  13A7                     __end_of___lwdiv:	
 10678                           
 10679                           	psect	text57
 10680  1C7D                     __ptext57:	
 10681 ;; *************** function _Load_Initialization *****************
 10682 ;; Defined at:
 10683 ;;		line 9 in file "../src/OverLoad_B1.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    6
 10704 ;; This function calls:
 10705 ;;		_setLoad_AH_AL_Restore
 10706 ;; This function is called by:
 10707 ;;		_main
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           
 10712                           ;psect for function _Load_Initialization
 10713  1C7D                     _Load_Initialization:	
 10714                           
 10715                           ;OverLoad_B1.c: 10: Load.OK = 1;
 10716                           
 10717                           ;incstack = 0
 10718                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10719  1C7D  0022               	movlb	2	; select bank2
 10720  1C7E  17A6               	bsf	_Load^(0+256),7
 10721                           
 10722                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10723  1C7F  319F  2746         	fcall	_setLoad_AH_AL_Restore
 10724  1C81  0008               	return
 10725  1C82                     __end_of_Load_Initialization:	
 10726                           
 10727                           	psect	text58
 10728  1F46                     __ptext58:	
 10729 ;; *************** function _setLoad_AH_AL_Restore *****************
 10730 ;; Defined at:
 10731 ;;		line 251 in file "../src/OverLoad_B1.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;		None
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;  i               1    1[BANK0 ] unsigned char 
 10736 ;; Return value:  Size  Location     Type
 10737 ;;		None               void
 10738 ;; Registers used:
 10739 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10740 ;; Tracked objects:
 10741 ;;		On entry : 0/0
 10742 ;;		On exit  : 0/0
 10743 ;;		Unchanged: 0/0
 10744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;Total ram usage:        2 bytes
 10750 ;; Hardware stack levels used:    1
 10751 ;; Hardware stack levels required when called:    5
 10752 ;; This function calls:
 10753 ;;		Nothing
 10754 ;; This function is called by:
 10755 ;;		_Load_Initialization
 10756 ;;		_Load_Main
 10757 ;; This function uses a non-reentrant model
 10758 ;;
 10759                           
 10760                           
 10761                           ;psect for function _setLoad_AH_AL_Restore
 10762  1F46                     _setLoad_AH_AL_Restore:	
 10763                           
 10764                           ;OverLoad_B1.c: 252: char i;
 10765                           ;OverLoad_B1.c: 253: for (i = 0; i < 5; i++) {
 10766                           
 10767                           ;incstack = 0
 10768                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10769  1F46  0020               	movlb	0	; select bank0
 10770  1F47  01A1               	clrf	setLoad_AH_AL_Restore@i
 10771  1F48                     L4:	
 10772  1F48  3005               	movlw	5
 10773  1F49  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10774  1F4A  1803               	btfsc	3,0
 10775  1F4B  0008               	return
 10776                           
 10777                           ;OverLoad_B1.c: 254: Load.AH[i] = 0;
 10778  1F4C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10779  1F4D  3E31               	addlw	(_Load+11)& (0+255)
 10780  1F4E  0086               	movwf	6
 10781  1F4F  3001               	movlw	1	; select bank2/3
 10782  1F50  0087               	movwf	7
 10783  1F51  3000               	movlw	0
 10784  1F52  3FC0               	movwi [0]fsr1
 10785  1F53  3FC1               	movwi [1]fsr1
 10786                           
 10787                           ;OverLoad_B1.c: 255: Load.AL[i] = 0xffff;
 10788  1F54  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10789  1F55  3E3B               	addlw	(_Load+21)& (0+255)
 10790  1F56  0086               	movwf	6
 10791  1F57  3001               	movlw	1	; select bank2/3
 10792  1F58  0087               	movwf	7
 10793  1F59  30FF               	movlw	255
 10794  1F5A  3FC0               	movwi [0]fsr1
 10795  1F5B  30FF               	movlw	255
 10796  1F5C  3FC1               	movwi [1]fsr1
 10797  1F5D  3001               	movlw	1
 10798  1F5E  00A0               	movwf	??_setLoad_AH_AL_Restore
 10799  1F5F  0820               	movf	??_setLoad_AH_AL_Restore,w
 10800  1F60  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10801  1F61  2F48               	goto	L4
 10802  1F62                     __end_of_setLoad_AH_AL_Restore:	
 10803                           
 10804                           	psect	text59
 10805  1C6C                     __ptext59:	
 10806 ;; *************** function _LED_Main *****************
 10807 ;; Defined at:
 10808 ;;		line 47 in file "../src/LED_B1.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;		None
 10811 ;; Auto vars:     Size  Location     Type
 10812 ;;		None
 10813 ;; Return value:  Size  Location     Type
 10814 ;;		None               void
 10815 ;; Registers used:
 10816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10817 ;; Tracked objects:
 10818 ;;		On entry : 0/0
 10819 ;;		On exit  : 0/0
 10820 ;;		Unchanged: 0/0
 10821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;Total ram usage:        0 bytes
 10827 ;; Hardware stack levels used:    1
 10828 ;; Hardware stack levels required when called:    7
 10829 ;; This function calls:
 10830 ;;		_setLED_Main
 10831 ;; This function is called by:
 10832 ;;		_main
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           
 10837                           ;psect for function _LED_Main
 10838  1C6C                     _LED_Main:	
 10839                           
 10840                           ;LED_B1.c: 62: setLED_Main(99);
 10841                           
 10842                           ;incstack = 0
 10843                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10844  1C6C  3063               	movlw	99
 10845  1C6D  3193  233A         	fcall	_setLED_Main
 10846  1C6F  0008               	return
 10847  1C70                     __end_of_LED_Main:	
 10848                           
 10849                           	psect	text60
 10850  133A                     __ptext60:	
 10851 ;; *************** function _setLED_Main *****************
 10852 ;; Defined at:
 10853 ;;		line 221 in file "../src/LED_B1.c"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;  led             1    wreg     unsigned char 
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;  led             1    4[BANK0 ] unsigned char 
 10858 ;; Return value:  Size  Location     Type
 10859 ;;		None               void
 10860 ;; Registers used:
 10861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10862 ;; Tracked objects:
 10863 ;;		On entry : 0/0
 10864 ;;		On exit  : 0/0
 10865 ;;		Unchanged: 0/0
 10866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;Total ram usage:        3 bytes
 10872 ;; Hardware stack levels used:    1
 10873 ;; Hardware stack levels required when called:    6
 10874 ;; This function calls:
 10875 ;;		_LedPointSelect
 10876 ;; This function is called by:
 10877 ;;		_LED_Main
 10878 ;; This function uses a non-reentrant model
 10879 ;;
 10880                           
 10881                           
 10882                           ;psect for function _setLED_Main
 10883  133A                     _setLED_Main:	
 10884                           
 10885                           ;incstack = 0
 10886                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10887                           ;setLED_Main@led stored from wreg
 10888  133A  0020               	movlb	0	; select bank0
 10889  133B  00A4               	movwf	setLED_Main@led
 10890                           
 10891                           ;LED_B1.c: 222: LedPointSelect(led);
 10892  133C  0824               	movf	setLED_Main@led,w
 10893  133D  319D  2537  3193   	fcall	_LedPointSelect
 10894                           
 10895                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10896  1340  0021               	movlb	1	; select bank1
 10897  1341  084E               	movf	_LED^(0+128),w
 10898  1342  0086               	movwf	6
 10899  1343  3001               	movlw	1	; select bank2/3
 10900  1344  0087               	movwf	7
 10901  1345  1C81               	btfss	1,1
 10902  1346  0008               	return
 10903                           
 10904                           ;LED_B1.c: 224: LED->Time++;
 10905  1347  0A4E               	incf	_LED^(0+128),w
 10906  1348  0086               	movwf	6
 10907  1349  3001               	movlw	1	; select bank2/3
 10908  134A  0087               	movwf	7
 10909  134B  3001               	movlw	1
 10910  134C  0781               	addwf	1,f
 10911  134D  3141               	addfsr 1,1
 10912  134E  1803               	skipnc
 10913  134F  0A81               	incf	1,f
 10914                           
 10915                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10916  1350  0A4E               	incf	_LED^(0+128),w
 10917  1351  0086               	movwf	6
 10918  1352  3001               	movlw	1	; select bank2/3
 10919  1353  0087               	movwf	7
 10920  1354  3F40               	moviw [0]fsr1
 10921  1355  0020               	movlb	0	; select bank0
 10922  1356  00A2               	movwf	??_setLED_Main
 10923  1357  3F41               	moviw [1]fsr1
 10924  1358  00A3               	movwf	??_setLED_Main+1
 10925  1359  3000               	movlw	0
 10926  135A  0223               	subwf	??_setLED_Main+1,w
 10927  135B  3032               	movlw	50
 10928  135C  1903               	skipnz
 10929  135D  0222               	subwf	??_setLED_Main,w
 10930  135E  1C03               	skipc
 10931  135F  0008               	return
 10932                           
 10933                           ;LED_B1.c: 226: LED->Time = 0;
 10934  1360  0021               	movlb	1	; select bank1
 10935  1361  0A4E               	incf	_LED^(0+128),w
 10936  1362  0086               	movwf	6
 10937  1363  3001               	movlw	1	; select bank2/3
 10938  1364  0087               	movwf	7
 10939  1365  3000               	movlw	0
 10940  1366  3FC0               	movwi [0]fsr1
 10941  1367  3FC1               	movwi [1]fsr1
 10942                           
 10943                           ;LED_B1.c: 243: if (led == 99) {
 10944  1368  0020               	movlb	0	; select bank0
 10945  1369  0824               	movf	setLED_Main@led,w
 10946  136A  3A63               	xorlw	99
 10947  136B  1D03               	skipz
 10948  136C  0008               	return
 10949                           
 10950                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10951  136D  3020               	movlw	32
 10952  136E  068D               	xorwf	13,f
 10953  136F  0008               	return
 10954  1370                     __end_of_setLED_Main:	
 10955                           
 10956                           	psect	text61
 10957  1C68                     __ptext61:	
 10958 ;; *************** function _LED_Initialization *****************
 10959 ;; Defined at:
 10960 ;;		line 31 in file "../src/LED_B1.c"
 10961 ;; Parameters:    Size  Location     Type
 10962 ;;		None
 10963 ;; Auto vars:     Size  Location     Type
 10964 ;;		None
 10965 ;; Return value:  Size  Location     Type
 10966 ;;		None               void
 10967 ;; Registers used:
 10968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10969 ;; Tracked objects:
 10970 ;;		On entry : 0/0
 10971 ;;		On exit  : 0/0
 10972 ;;		Unchanged: 0/0
 10973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;Total ram usage:        0 bytes
 10979 ;; Hardware stack levels used:    1
 10980 ;; Hardware stack levels required when called:    8
 10981 ;; This function calls:
 10982 ;;		_setLED_Initialization
 10983 ;; This function is called by:
 10984 ;;		_main
 10985 ;; This function uses a non-reentrant model
 10986 ;;
 10987                           
 10988                           
 10989                           ;psect for function _LED_Initialization
 10990  1C68                     _LED_Initialization:	
 10991                           
 10992                           ;LED_B1.c: 42: setLED_Initialization(99);
 10993                           
 10994                           ;incstack = 0
 10995                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10996  1C68  3063               	movlw	99
 10997  1C69  319E  2632         	fcall	_setLED_Initialization
 10998  1C6B  0008               	return
 10999  1C6C                     __end_of_LED_Initialization:	
 11000                           
 11001                           	psect	text62
 11002  1E32                     __ptext62:	
 11003 ;; *************** function _setLED_Initialization *****************
 11004 ;; Defined at:
 11005 ;;		line 69 in file "../src/LED_B1.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;  led             1    wreg     unsigned char 
 11008 ;; Auto vars:     Size  Location     Type
 11009 ;;  led             1    4[BANK0 ] unsigned char 
 11010 ;; Return value:  Size  Location     Type
 11011 ;;		None               void
 11012 ;; Registers used:
 11013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11014 ;; Tracked objects:
 11015 ;;		On entry : 0/0
 11016 ;;		On exit  : 0/0
 11017 ;;		Unchanged: 0/0
 11018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11023 ;;Total ram usage:        1 bytes
 11024 ;; Hardware stack levels used:    1
 11025 ;; Hardware stack levels required when called:    7
 11026 ;; This function calls:
 11027 ;;		_LedPointSelect
 11028 ;;		_setLED
 11029 ;; This function is called by:
 11030 ;;		_LED_Initialization
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           
 11035                           ;psect for function _setLED_Initialization
 11036  1E32                     _setLED_Initialization:	
 11037                           
 11038                           ;incstack = 0
 11039                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11040                           ;setLED_Initialization@led stored from wreg
 11041  1E32  0020               	movlb	0	; select bank0
 11042  1E33  00A4               	movwf	setLED_Initialization@led
 11043                           
 11044                           ;LED_B1.c: 70: LedPointSelect(led);
 11045  1E34  0824               	movf	setLED_Initialization@led,w
 11046  1E35  319D  2537  319E   	fcall	_LedPointSelect
 11047                           
 11048                           ;LED_B1.c: 71: LED->Enable = 1;
 11049  1E38  0021               	movlb	1	; select bank1
 11050  1E39  084E               	movf	_LED^(0+128),w
 11051  1E3A  0086               	movwf	6
 11052  1E3B  3001               	movlw	1	; select bank2/3
 11053  1E3C  0087               	movwf	7
 11054  1E3D  1401               	bsf	1,0
 11055                           
 11056                           ;LED_B1.c: 72: setLED(led, 0);
 11057  1E3E  0020               	movlb	0	; select bank0
 11058  1E3F  01A2               	clrf	setLED@command
 11059  1E40  0824               	movf	setLED_Initialization@led,w
 11060  1E41  3193  23A7         	fcall	_setLED
 11061  1E43  0008               	return
 11062  1E44                     __end_of_setLED_Initialization:	
 11063                           
 11064                           	psect	text63
 11065  1304                     __ptext63:	
 11066 ;; *************** function _Flash_Memory_Main *****************
 11067 ;; Defined at:
 11068 ;;		line 965 in file "../src/MCU_B1.c"
 11069 ;; Parameters:    Size  Location     Type
 11070 ;;		None
 11071 ;; Auto vars:     Size  Location     Type
 11072 ;;		None
 11073 ;; Return value:  Size  Location     Type
 11074 ;;		None               void
 11075 ;; Registers used:
 11076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11077 ;; Tracked objects:
 11078 ;;		On entry : 0/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11085 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;Total ram usage:        1 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:    8
 11089 ;; This function calls:
 11090 ;;		_Flash_Memory_Modify
 11091 ;;		_getMain_LightsStatus
 11092 ;; This function is called by:
 11093 ;;		_main
 11094 ;; This function uses a non-reentrant model
 11095 ;;
 11096                           
 11097                           
 11098                           ;psect for function _Flash_Memory_Main
 11099  1304                     _Flash_Memory_Main:	
 11100                           
 11101                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
 11102                           
 11103                           ;incstack = 0
 11104                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11105  1304  0023               	movlb	3	; select bank3
 11106  1305  1C62               	btfss	(_Memory^(0+384)+36),0
 11107  1306  0008               	return
 11108                           
 11109                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11110  1307  3191  2178  3193   	fcall	_getMain_LightsStatus
 11111  130A  3A00               	xorlw	0
 11112  130B  3000               	movlw	0
 11113  130C  1903               	skipnz
 11114  130D  3001               	movlw	1
 11115  130E  0020               	movlb	0	; select bank0
 11116  130F  00A9               	movwf	??_Flash_Memory_Main
 11117  1310  0DA9               	rlf	??_Flash_Memory_Main,f
 11118  1311  0023               	movlb	3	; select bank3
 11119  1312  0862               	movf	(_Memory^(0+384)+36),w
 11120  1313  0020               	movlb	0	; select bank0
 11121  1314  0629               	xorwf	??_Flash_Memory_Main,w
 11122  1315  39FD               	andlw	-3
 11123  1316  0629               	xorwf	??_Flash_Memory_Main,w
 11124  1317  0023               	movlb	3	; select bank3
 11125  1318  00E2               	movwf	(_Memory^(0+384)+36)
 11126                           
 11127                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
 11128  1319  1CE2               	btfss	(_Memory^(0+384)+36),1
 11129  131A  2B34               	goto	l1170
 11130                           
 11131                           ;MCU_B1.c: 969: Memory.Runtime = 1;
 11132  131B  15E2               	bsf	(_Memory^(0+384)+36),3
 11133                           
 11134                           ;MCU_B1.c: 970: Memory.Time++;
 11135  131C  3001               	movlw	1
 11136  131D  07E0               	addwf	(_Memory^(0+384)+34),f
 11137  131E  3000               	movlw	0
 11138  131F  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11139                           
 11140                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
 11141  1320  3022               	movlw	34
 11142  1321  3EBE               	addlw	_Memory& (0+255)
 11143  1322  0086               	movwf	6
 11144  1323  3001               	movlw	1	; select bank3/4
 11145  1324  0087               	movwf	7
 11146  1325  3F40               	moviw [0]fsr1
 11147  1326  3A19               	xorlw	25
 11148  1327  1D03               	skipz
 11149  1328  2B2B               	goto	u10965
 11150  1329  3F41               	moviw [1]fsr1
 11151  132A  3A00               	xorlw	0
 11152  132B                     u10965:	
 11153  132B  1D03               	skipz
 11154  132C  0008               	return
 11155                           
 11156                           ;MCU_B1.c: 972: Memory.Time = 0;
 11157  132D  01E0               	clrf	(_Memory^(0+384)+34)
 11158  132E  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11159                           
 11160                           ;MCU_B1.c: 973: Memory.Modify = 0;
 11161  132F  1062               	bcf	(_Memory^(0+384)+36),0
 11162                           
 11163                           ;MCU_B1.c: 974: Memory.GO = 0;
 11164  1330  10E2               	bcf	(_Memory^(0+384)+36),1
 11165                           
 11166                           ;MCU_B1.c: 975: Flash_Memory_Modify();
 11167  1331  3195  2566         	fcall	_Flash_Memory_Modify
 11168                           
 11169                           ;MCU_B1.c: 976: }
 11170                           ;MCU_B1.c: 977: } else {
 11171  1333  0008               	return
 11172  1334                     l1170:	
 11173                           
 11174                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
 11175  1334  1DE2               	btfss	(_Memory^(0+384)+36),3
 11176  1335  0008               	return
 11177                           
 11178                           ;MCU_B1.c: 979: Memory.Runtime = 0;
 11179  1336  11E2               	bcf	(_Memory^(0+384)+36),3
 11180                           
 11181                           ;MCU_B1.c: 980: Memory.Time = 0;
 11182  1337  01E0               	clrf	(_Memory^(0+384)+34)
 11183  1338  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11184  1339  0008               	return
 11185  133A                     __end_of_Flash_Memory_Main:	
 11186                           
 11187                           	psect	text64
 11188  1566                     __ptext64:	
 11189 ;; *************** function _Flash_Memory_Modify *****************
 11190 ;; Defined at:
 11191 ;;		line 1038 in file "../src/MCU_B1.c"
 11192 ;; Parameters:    Size  Location     Type
 11193 ;;		None
 11194 ;; Auto vars:     Size  Location     Type
 11195 ;;  i               1    5[BANK0 ] unsigned char 
 11196 ;; Return value:  Size  Location     Type
 11197 ;;		None               void
 11198 ;; Registers used:
 11199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11200 ;; Tracked objects:
 11201 ;;		On entry : 0/0
 11202 ;;		On exit  : 0/0
 11203 ;;		Unchanged: 0/0
 11204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;Total ram usage:        2 bytes
 11210 ;; Hardware stack levels used:    1
 11211 ;; Hardware stack levels required when called:    7
 11212 ;; This function calls:
 11213 ;;		_Flash_Memory_Erasing
 11214 ;;		_Flash_Memory_Read
 11215 ;;		_Flash_Memory_Write
 11216 ;;		_setMemory_Data
 11217 ;; This function is called by:
 11218 ;;		_Flash_Memory_Main
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222                           
 11223                           ;psect for function _Flash_Memory_Modify
 11224  1566                     _Flash_Memory_Modify:	
 11225                           
 11226                           ;MCU_B1.c: 1039: char i = 0;
 11227                           
 11228                           ;incstack = 0
 11229                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11230  1566  0020               	movlb	0	; select bank0
 11231  1567  01A5               	clrf	Flash_Memory_Modify@i
 11232                           
 11233                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
 11234  1568  01A5               	clrf	Flash_Memory_Modify@i
 11235  1569  3020               	movlw	32
 11236  156A  0225               	subwf	Flash_Memory_Modify@i,w
 11237  156B  1803               	btfsc	3,0
 11238  156C  2D82               	goto	l9392
 11239  156D                     l9386:	
 11240                           
 11241                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
 11242  156D  0825               	movf	Flash_Memory_Modify@i,w
 11243  156E  319F  272C  3195   	fcall	_Flash_Memory_Read
 11244  1571  0020               	movlb	0	; select bank0
 11245  1572  00A4               	movwf	??_Flash_Memory_Modify
 11246  1573  0825               	movf	Flash_Memory_Modify@i,w
 11247  1574  3EBE               	addlw	_Memory& (0+255)
 11248  1575  0086               	movwf	6
 11249  1576  3001               	movlw	1	; select bank3/4
 11250  1577  0087               	movwf	7
 11251  1578  0824               	movf	??_Flash_Memory_Modify,w
 11252  1579  0081               	movwf	1
 11253  157A  3001               	movlw	1
 11254  157B  00A4               	movwf	??_Flash_Memory_Modify
 11255  157C  0824               	movf	??_Flash_Memory_Modify,w
 11256  157D  07A5               	addwf	Flash_Memory_Modify@i,f
 11257  157E  3020               	movlw	32
 11258  157F  0225               	subwf	Flash_Memory_Modify@i,w
 11259  1580  1C03               	skipc
 11260  1581  2D6D               	goto	l9386
 11261  1582                     l9392:	
 11262                           
 11263                           ;MCU_B1.c: 1042: }
 11264                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
 11265  1582  0879               	movf	_product,w
 11266  1583  0086               	movwf	6
 11267  1584  3002               	movlw	2	; select bank4/5
 11268  1585  0087               	movwf	7
 11269  1586  3002               	movlw	2	; select bank4/5
 11270  1587  3F4C               	moviw [12]fsr1
 11271  1588  00A0               	movwf	setMemory_Data@data
 11272  1589  3000               	movlw	0
 11273  158A  319D  2543  3195   	fcall	_setMemory_Data
 11274                           
 11275                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
 11276  158D  0879               	movf	_product,w
 11277  158E  0086               	movwf	6
 11278  158F  3002               	movlw	2	; select bank4/5
 11279  1590  0087               	movwf	7
 11280  1591  3002               	movlw	2	; select bank4/5
 11281  1592  3F4D               	moviw [13]fsr1
 11282  1593  0020               	movlb	0	; select bank0
 11283  1594  00A0               	movwf	setMemory_Data@data
 11284  1595  3001               	movlw	1
 11285  1596  319D  2543  3195   	fcall	_setMemory_Data
 11286                           
 11287                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
 11288  1599  0879               	movf	_product,w
 11289  159A  0086               	movwf	6
 11290  159B  3002               	movlw	2	; select bank4/5
 11291  159C  0087               	movwf	7
 11292  159D  3002               	movlw	2	; select bank4/5
 11293  159E  3F4E               	moviw [14]fsr1
 11294  159F  0020               	movlb	0	; select bank0
 11295  15A0  00A0               	movwf	setMemory_Data@data
 11296  15A1  3002               	movlw	2
 11297  15A2  319D  2543  3195   	fcall	_setMemory_Data
 11298                           
 11299                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
 11300  15A5  0023               	movlb	3	; select bank3
 11301  15A6  1D62               	btfss	(_Memory^(0+384)+36),2
 11302  15A7  2DAC               	goto	l1193
 11303                           
 11304                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
 11305  15A8  1162               	bcf	(_Memory^(0+384)+36),2
 11306                           
 11307                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 11308  15A9  0021               	movlb	1	; select bank1
 11309  15AA  11A0               	bcf	_myMain^(0+128),3
 11310                           
 11311                           ;MCU_B1.c: 1054: myMain.First = 0;
 11312  15AB  12A0               	bcf	_myMain^(0+128),5
 11313  15AC                     l1193:	
 11314                           
 11315                           ;MCU_B1.c: 1056: }
 11316                           ;MCU_B1.c: 1057: GIE = 0;
 11317  15AC  138B               	bcf	11,7	;volatile
 11318                           
 11319                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 11320  15AD  319D  254F  3195   	fcall	_Flash_Memory_Erasing
 11321                           
 11322                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 11323  15B0  3191  21A3         	fcall	_Flash_Memory_Write
 11324                           
 11325                           ;MCU_B1.c: 1060: GIE = 1;
 11326  15B2  178B               	bsf	11,7	;volatile
 11327  15B3  0008               	return
 11328  15B4                     __end_of_Flash_Memory_Modify:	
 11329                           
 11330                           	psect	text65
 11331  1D4F                     __ptext65:	
 11332 ;; *************** function _Flash_Memory_Erasing *****************
 11333 ;; Defined at:
 11334 ;;		line 1027 in file "../src/MCU_B1.c"
 11335 ;; Parameters:    Size  Location     Type
 11336 ;;		None
 11337 ;; Auto vars:     Size  Location     Type
 11338 ;;		None
 11339 ;; Return value:  Size  Location     Type
 11340 ;;		None               void
 11341 ;; Registers used:
 11342 ;;		wreg, status,2, status,0, pclath, cstack
 11343 ;; Tracked objects:
 11344 ;;		On entry : 0/0
 11345 ;;		On exit  : 0/0
 11346 ;;		Unchanged: 0/0
 11347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11352 ;;Total ram usage:        0 bytes
 11353 ;; Hardware stack levels used:    1
 11354 ;; Hardware stack levels required when called:    6
 11355 ;; This function calls:
 11356 ;;		_Flash_Memory_Unlock
 11357 ;; This function is called by:
 11358 ;;		_Flash_Memory_Modify
 11359 ;; This function uses a non-reentrant model
 11360 ;;
 11361                           
 11362                           
 11363                           ;psect for function _Flash_Memory_Erasing
 11364  1D4F                     _Flash_Memory_Erasing:	
 11365                           
 11366                           ;MCU_B1.c: 1028: CFGS = 0;
 11367                           
 11368                           ;incstack = 0
 11369                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11370  1D4F  0023               	movlb	3	; select bank3
 11371  1D50  1315               	bcf	21,6	;volatile
 11372                           
 11373                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 11374  1D51  3030               	movlw	48
 11375  1D52  0092               	movwf	18	;volatile
 11376                           
 11377                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 11378  1D53  0191               	clrf	17	;volatile
 11379                           
 11380                           ;MCU_B1.c: 1031: FREE = 1;
 11381  1D54  1615               	bsf	21,4	;volatile
 11382                           
 11383                           ;MCU_B1.c: 1032: WREN = 1;
 11384  1D55  1515               	bsf	21,2	;volatile
 11385                           
 11386                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 11387  1D56  319C  24AB         	fcall	_Flash_Memory_Unlock
 11388                           
 11389                           ;MCU_B1.c: 1034: WREN = 0;
 11390  1D58  0023               	movlb	3	; select bank3
 11391  1D59  1115               	bcf	21,2	;volatile
 11392  1D5A  0008               	return
 11393  1D5B                     __end_of_Flash_Memory_Erasing:	
 11394                           
 11395                           	psect	text66
 11396  0524                     __ptext66:	
 11397 ;; *************** function _Flash_Memory_Initialization *****************
 11398 ;; Defined at:
 11399 ;;		line 924 in file "../src/MCU_B1.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;		None
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;  i               1   67[BANK0 ] unsigned char 
 11404 ;; Return value:  Size  Location     Type
 11405 ;;		None               void
 11406 ;; Registers used:
 11407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;Total ram usage:        2 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:    8
 11420 ;; This function calls:
 11421 ;;		_Flash_Memory_Read
 11422 ;;		_Flash_Memory_Write
 11423 ;;		_setMemory_Data
 11424 ;;		_setPercentValue
 11425 ;; This function is called by:
 11426 ;;		_main
 11427 ;; This function uses a non-reentrant model
 11428 ;;
 11429                           
 11430                           
 11431                           ;psect for function _Flash_Memory_Initialization
 11432  0524                     _Flash_Memory_Initialization:	
 11433                           
 11434                           ;MCU_B1.c: 925: char i = 0;
 11435                           
 11436                           ;incstack = 0
 11437                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11438  0524  0020               	movlb	0	; select bank0
 11439  0525  01E3               	clrf	Flash_Memory_Initialization@i
 11440                           
 11441                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 11442  0526  301F               	movlw	31
 11443  0527  319F  272C  3185   	fcall	_Flash_Memory_Read
 11444  052A  3AAA               	xorlw	170
 11445  052B  1D03               	skipz
 11446  052C  2D96               	goto	l9806
 11447                           
 11448                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 11449  052D  3000               	movlw	0
 11450  052E  319F  272C  3185   	fcall	_Flash_Memory_Read
 11451  0531  0020               	movlb	0	; select bank0
 11452  0532  00E2               	movwf	??_Flash_Memory_Initialization
 11453  0533  0879               	movf	_product,w
 11454  0534  3E0C               	addlw	12
 11455  0535  0086               	movwf	6
 11456  0536  3002               	movlw	2	; select bank4/5
 11457  0537  0087               	movwf	7
 11458  0538  0862               	movf	??_Flash_Memory_Initialization,w
 11459  0539  0081               	movwf	1
 11460                           
 11461                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 11462  053A  3001               	movlw	1
 11463  053B  319F  272C  3185   	fcall	_Flash_Memory_Read
 11464  053E  0020               	movlb	0	; select bank0
 11465  053F  00E2               	movwf	??_Flash_Memory_Initialization
 11466  0540  0879               	movf	_product,w
 11467  0541  3E0D               	addlw	13
 11468  0542  0086               	movwf	6
 11469  0543  3002               	movlw	2	; select bank4/5
 11470  0544  0087               	movwf	7
 11471  0545  0862               	movf	??_Flash_Memory_Initialization,w
 11472  0546  0081               	movwf	1
 11473                           
 11474                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 11475  0547  3002               	movlw	2
 11476  0548  319F  272C  3185   	fcall	_Flash_Memory_Read
 11477  054B  0020               	movlb	0	; select bank0
 11478  054C  00E2               	movwf	??_Flash_Memory_Initialization
 11479  054D  0879               	movf	_product,w
 11480  054E  3E0E               	addlw	14
 11481  054F  0086               	movwf	6
 11482  0550  3002               	movlw	2	; select bank4/5
 11483  0551  0087               	movwf	7
 11484  0552  0862               	movf	??_Flash_Memory_Initialization,w
 11485  0553  0081               	movwf	1
 11486                           
 11487                           ;MCU_B1.c: 935: i = setPercentValue(((char)(45*0.8)));
 11488  0554  3024               	movlw	36
 11489  0555  318B  2302  3185   	fcall	_setPercentValue
 11490  0558  0020               	movlb	0	; select bank0
 11491  0559  00E2               	movwf	??_Flash_Memory_Initialization
 11492  055A  0862               	movf	??_Flash_Memory_Initialization,w
 11493  055B  00E3               	movwf	Flash_Memory_Initialization@i
 11494                           
 11495                           ;MCU_B1.c: 936: product->Data[21] = i;
 11496  055C  0863               	movf	Flash_Memory_Initialization@i,w
 11497  055D  00E2               	movwf	??_Flash_Memory_Initialization
 11498  055E  0879               	movf	_product,w
 11499  055F  3E15               	addlw	21
 11500  0560  0086               	movwf	6
 11501  0561  3002               	movlw	2	; select bank4/5
 11502  0562  0087               	movwf	7
 11503  0563  0862               	movf	??_Flash_Memory_Initialization,w
 11504  0564  0081               	movwf	1
 11505                           
 11506                           ;MCU_B1.c: 937: product->Data[22] = i;
 11507  0565  0863               	movf	Flash_Memory_Initialization@i,w
 11508  0566  00E2               	movwf	??_Flash_Memory_Initialization
 11509  0567  0879               	movf	_product,w
 11510  0568  3E16               	addlw	22
 11511  0569  0086               	movwf	6
 11512  056A  3002               	movlw	2	; select bank4/5
 11513  056B  0087               	movwf	7
 11514  056C  0862               	movf	??_Flash_Memory_Initialization,w
 11515  056D  0081               	movwf	1
 11516                           
 11517                           ;MCU_B1.c: 938: product->Data[23] = i;
 11518  056E  0863               	movf	Flash_Memory_Initialization@i,w
 11519  056F  00E2               	movwf	??_Flash_Memory_Initialization
 11520  0570  0879               	movf	_product,w
 11521  0571  3E17               	addlw	23
 11522  0572  0086               	movwf	6
 11523  0573  3002               	movlw	2	; select bank4/5
 11524  0574  0087               	movwf	7
 11525  0575  0862               	movf	??_Flash_Memory_Initialization,w
 11526  0576  0081               	movwf	1
 11527                           
 11528                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11529  0577  0879               	movf	_product,w
 11530  0578  3E0C               	addlw	12
 11531  0579  0086               	movwf	6
 11532  057A  3002               	movlw	2	; select bank4/5
 11533  057B  0087               	movwf	7
 11534  057C  0801               	movf	1,w
 11535  057D  3AFF               	xorlw	255
 11536  057E  1D03               	skipz
 11537  057F  0008               	return
 11538  0580  0879               	movf	_product,w
 11539  0581  3E0D               	addlw	13
 11540  0582  0086               	movwf	6
 11541  0583  3002               	movlw	2	; select bank4/5
 11542  0584  0087               	movwf	7
 11543  0585  0801               	movf	1,w
 11544  0586  3AFF               	xorlw	255
 11545  0587  1D03               	skipz
 11546  0588  0008               	return
 11547  0589  0879               	movf	_product,w
 11548  058A  3E0E               	addlw	14
 11549  058B  0086               	movwf	6
 11550  058C  3002               	movlw	2	; select bank4/5
 11551  058D  0087               	movwf	7
 11552  058E  0801               	movf	1,w
 11553  058F  3AFF               	xorlw	255
 11554  0590  1D03               	skipz
 11555  0591  0008               	return
 11556                           
 11557                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 11558  0592  0021               	movlb	1	; select bank1
 11559  0593  15A0               	bsf	_myMain^(0+128),3
 11560                           
 11561                           ;MCU_B1.c: 942: myMain.First = 1;
 11562  0594  16A0               	bsf	_myMain^(0+128),5
 11563                           
 11564                           ;MCU_B1.c: 943: }
 11565                           ;MCU_B1.c: 944: } else {
 11566  0595  0008               	return
 11567  0596                     l9806:	
 11568                           
 11569                           ;MCU_B1.c: 945: i = setPercentValue(((char)(45*0.8)));
 11570  0596  3024               	movlw	36
 11571  0597  318B  2302  3185   	fcall	_setPercentValue
 11572  059A  0020               	movlb	0	; select bank0
 11573  059B  00E2               	movwf	??_Flash_Memory_Initialization
 11574  059C  0862               	movf	??_Flash_Memory_Initialization,w
 11575  059D  00E3               	movwf	Flash_Memory_Initialization@i
 11576                           
 11577                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 11578  059E  30FF               	movlw	255
 11579  059F  00E2               	movwf	??_Flash_Memory_Initialization
 11580  05A0  0862               	movf	??_Flash_Memory_Initialization,w
 11581  05A1  00A0               	movwf	setMemory_Data@data
 11582  05A2  3000               	movlw	0
 11583  05A3  319D  2543  3185   	fcall	_setMemory_Data
 11584                           
 11585                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 11586  05A6  30FF               	movlw	255
 11587  05A7  0020               	movlb	0	; select bank0
 11588  05A8  00E2               	movwf	??_Flash_Memory_Initialization
 11589  05A9  0862               	movf	??_Flash_Memory_Initialization,w
 11590  05AA  00A0               	movwf	setMemory_Data@data
 11591  05AB  3001               	movlw	1
 11592  05AC  319D  2543  3185   	fcall	_setMemory_Data
 11593                           
 11594                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 11595  05AF  30FF               	movlw	255
 11596  05B0  0020               	movlb	0	; select bank0
 11597  05B1  00E2               	movwf	??_Flash_Memory_Initialization
 11598  05B2  0862               	movf	??_Flash_Memory_Initialization,w
 11599  05B3  00A0               	movwf	setMemory_Data@data
 11600  05B4  3002               	movlw	2
 11601  05B5  319D  2543  3185   	fcall	_setMemory_Data
 11602                           
 11603                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 11604  05B8  30FF               	movlw	255
 11605  05B9  0020               	movlb	0	; select bank0
 11606  05BA  00E2               	movwf	??_Flash_Memory_Initialization
 11607  05BB  0862               	movf	??_Flash_Memory_Initialization,w
 11608  05BC  00A0               	movwf	setMemory_Data@data
 11609  05BD  3003               	movlw	3
 11610  05BE  319D  2543  3185   	fcall	_setMemory_Data
 11611                           
 11612                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 11613  05C1  30FF               	movlw	255
 11614  05C2  0020               	movlb	0	; select bank0
 11615  05C3  00E2               	movwf	??_Flash_Memory_Initialization
 11616  05C4  0862               	movf	??_Flash_Memory_Initialization,w
 11617  05C5  00A0               	movwf	setMemory_Data@data
 11618  05C6  3004               	movlw	4
 11619  05C7  319D  2543  3185   	fcall	_setMemory_Data
 11620                           
 11621                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 11622  05CA  30FF               	movlw	255
 11623  05CB  0020               	movlb	0	; select bank0
 11624  05CC  00E2               	movwf	??_Flash_Memory_Initialization
 11625  05CD  0862               	movf	??_Flash_Memory_Initialization,w
 11626  05CE  00A0               	movwf	setMemory_Data@data
 11627  05CF  3005               	movlw	5
 11628  05D0  319D  2543  3185   	fcall	_setMemory_Data
 11629                           
 11630                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 11631  05D3  30AA               	movlw	170
 11632  05D4  0020               	movlb	0	; select bank0
 11633  05D5  00E2               	movwf	??_Flash_Memory_Initialization
 11634  05D6  0862               	movf	??_Flash_Memory_Initialization,w
 11635  05D7  00A0               	movwf	setMemory_Data@data
 11636  05D8  301F               	movlw	31
 11637  05D9  319D  2543  3185   	fcall	_setMemory_Data
 11638                           
 11639                           ;MCU_B1.c: 953: product->Data[21] = i;
 11640  05DC  0020               	movlb	0	; select bank0
 11641  05DD  0863               	movf	Flash_Memory_Initialization@i,w
 11642  05DE  00E2               	movwf	??_Flash_Memory_Initialization
 11643  05DF  0879               	movf	_product,w
 11644  05E0  3E15               	addlw	21
 11645  05E1  0086               	movwf	6
 11646  05E2  3002               	movlw	2	; select bank4/5
 11647  05E3  0087               	movwf	7
 11648  05E4  0862               	movf	??_Flash_Memory_Initialization,w
 11649  05E5  0081               	movwf	1
 11650                           
 11651                           ;MCU_B1.c: 954: product->Data[22] = i;
 11652  05E6  0863               	movf	Flash_Memory_Initialization@i,w
 11653  05E7  00E2               	movwf	??_Flash_Memory_Initialization
 11654  05E8  0879               	movf	_product,w
 11655  05E9  3E16               	addlw	22
 11656  05EA  0086               	movwf	6
 11657  05EB  3002               	movlw	2	; select bank4/5
 11658  05EC  0087               	movwf	7
 11659  05ED  0862               	movf	??_Flash_Memory_Initialization,w
 11660  05EE  0081               	movwf	1
 11661                           
 11662                           ;MCU_B1.c: 955: product->Data[23] = i;
 11663  05EF  0863               	movf	Flash_Memory_Initialization@i,w
 11664  05F0  00E2               	movwf	??_Flash_Memory_Initialization
 11665  05F1  0879               	movf	_product,w
 11666  05F2  3E17               	addlw	23
 11667  05F3  0086               	movwf	6
 11668  05F4  3002               	movlw	2	; select bank4/5
 11669  05F5  0087               	movwf	7
 11670  05F6  0862               	movf	??_Flash_Memory_Initialization,w
 11671  05F7  0081               	movwf	1
 11672                           
 11673                           ;MCU_B1.c: 956: GIE = 0;
 11674  05F8  138B               	bcf	11,7	;volatile
 11675                           
 11676                           ;MCU_B1.c: 957: Flash_Memory_Write();
 11677  05F9  3191  21A3         	fcall	_Flash_Memory_Write
 11678                           
 11679                           ;MCU_B1.c: 958: GIE = 1;
 11680  05FB  178B               	bsf	11,7	;volatile
 11681                           
 11682                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 11683  05FC  0021               	movlb	1	; select bank1
 11684  05FD  15A0               	bsf	_myMain^(0+128),3
 11685                           
 11686                           ;MCU_B1.c: 960: myMain.First = 1;
 11687  05FE  16A0               	bsf	_myMain^(0+128),5
 11688  05FF  0008               	return
 11689  0600                     __end_of_Flash_Memory_Initialization:	
 11690                           
 11691                           	psect	text67
 11692  1D43                     __ptext67:	
 11693 ;; *************** function _setMemory_Data *****************
 11694 ;; Defined at:
 11695 ;;		line 1075 in file "../src/MCU_B1.c"
 11696 ;; Parameters:    Size  Location     Type
 11697 ;;  address         1    wreg     unsigned char 
 11698 ;;  data            1    0[BANK0 ] unsigned char 
 11699 ;; Auto vars:     Size  Location     Type
 11700 ;;  address         1    2[BANK0 ] unsigned char 
 11701 ;; Return value:  Size  Location     Type
 11702 ;;		None               void
 11703 ;; Registers used:
 11704 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11705 ;; Tracked objects:
 11706 ;;		On entry : 0/0
 11707 ;;		On exit  : 0/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11710 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11713 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;Total ram usage:        3 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; Hardware stack levels required when called:    5
 11717 ;; This function calls:
 11718 ;;		Nothing
 11719 ;; This function is called by:
 11720 ;;		_Flash_Memory_Initialization
 11721 ;;		_Flash_Memory_Modify
 11722 ;; This function uses a non-reentrant model
 11723 ;;
 11724                           
 11725                           
 11726                           ;psect for function _setMemory_Data
 11727  1D43                     _setMemory_Data:	
 11728                           
 11729                           ;incstack = 0
 11730                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11731                           ;setMemory_Data@address stored from wreg
 11732  1D43  0020               	movlb	0	; select bank0
 11733  1D44  00A2               	movwf	setMemory_Data@address
 11734                           
 11735                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 11736  1D45  0820               	movf	setMemory_Data@data,w
 11737  1D46  00A1               	movwf	??_setMemory_Data
 11738  1D47  0822               	movf	setMemory_Data@address,w
 11739  1D48  3EBE               	addlw	_Memory& (0+255)
 11740  1D49  0086               	movwf	6
 11741  1D4A  3001               	movlw	1	; select bank3/4
 11742  1D4B  0087               	movwf	7
 11743  1D4C  0821               	movf	??_setMemory_Data,w
 11744  1D4D  0081               	movwf	1
 11745  1D4E  0008               	return
 11746  1D4F                     __end_of_setMemory_Data:	
 11747                           
 11748                           	psect	text68
 11749  11A3                     __ptext68:	
 11750 ;; *************** function _Flash_Memory_Write *****************
 11751 ;; Defined at:
 11752 ;;		line 1008 in file "../src/MCU_B1.c"
 11753 ;; Parameters:    Size  Location     Type
 11754 ;;		None
 11755 ;; Auto vars:     Size  Location     Type
 11756 ;;  i               1    1[BANK0 ] unsigned char 
 11757 ;; Return value:  Size  Location     Type
 11758 ;;		None               void
 11759 ;; Registers used:
 11760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : 0/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;Total ram usage:        2 bytes
 11771 ;; Hardware stack levels used:    1
 11772 ;; Hardware stack levels required when called:    6
 11773 ;; This function calls:
 11774 ;;		_Flash_Memory_Unlock
 11775 ;; This function is called by:
 11776 ;;		_Flash_Memory_Initialization
 11777 ;;		_Flash_Memory_Modify
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           
 11782                           ;psect for function _Flash_Memory_Write
 11783  11A3                     _Flash_Memory_Write:	
 11784                           
 11785                           ;MCU_B1.c: 1009: char i = 0;
 11786                           
 11787                           ;incstack = 0
 11788                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11789  11A3  0020               	movlb	0	; select bank0
 11790  11A4  01A1               	clrf	Flash_Memory_Write@i
 11791                           
 11792                           ;MCU_B1.c: 1010: CFGS = 0;
 11793  11A5  0023               	movlb	3	; select bank3
 11794  11A6  1315               	bcf	21,6	;volatile
 11795                           
 11796                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 11797  11A7  3030               	movlw	48
 11798  11A8  0092               	movwf	18	;volatile
 11799                           
 11800                           ;MCU_B1.c: 1012: PMDATH = 0;
 11801  11A9  0194               	clrf	20	;volatile
 11802                           
 11803                           ;MCU_B1.c: 1013: FREE = 0;
 11804  11AA  1215               	bcf	21,4	;volatile
 11805                           
 11806                           ;MCU_B1.c: 1014: LWLO = 1;
 11807  11AB  1695               	bsf	21,5	;volatile
 11808                           
 11809                           ;MCU_B1.c: 1015: WREN = 1;
 11810  11AC  1515               	bsf	21,2	;volatile
 11811                           
 11812                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 11813  11AD  0020               	movlb	0	; select bank0
 11814  11AE  01A1               	clrf	Flash_Memory_Write@i
 11815  11AF  3020               	movlw	32
 11816  11B0  0221               	subwf	Flash_Memory_Write@i,w
 11817  11B1  1803               	btfsc	3,0
 11818  11B2  29CB               	goto	l1184
 11819  11B3                     l9000:	
 11820                           
 11821                           ;MCU_B1.c: 1017: PMADRL = i;
 11822  11B3  0821               	movf	Flash_Memory_Write@i,w
 11823  11B4  0023               	movlb	3	; select bank3
 11824  11B5  0091               	movwf	17	;volatile
 11825                           
 11826                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 11827  11B6  0020               	movlb	0	; select bank0
 11828  11B7  0821               	movf	Flash_Memory_Write@i,w
 11829  11B8  3EBE               	addlw	_Memory& (0+255)
 11830  11B9  0086               	movwf	6
 11831  11BA  3001               	movlw	1	; select bank3/4
 11832  11BB  0087               	movwf	7
 11833  11BC  0801               	movf	1,w
 11834  11BD  0023               	movlb	3	; select bank3
 11835  11BE  0093               	movwf	19	;volatile
 11836                           
 11837                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 11838  11BF  319C  24AB  3191   	fcall	_Flash_Memory_Unlock
 11839  11C2  3001               	movlw	1
 11840  11C3  0020               	movlb	0	; select bank0
 11841  11C4  00A0               	movwf	??_Flash_Memory_Write
 11842  11C5  0820               	movf	??_Flash_Memory_Write,w
 11843  11C6  07A1               	addwf	Flash_Memory_Write@i,f
 11844  11C7  3020               	movlw	32
 11845  11C8  0221               	subwf	Flash_Memory_Write@i,w
 11846  11C9  1C03               	skipc
 11847  11CA  29B3               	goto	l9000
 11848  11CB                     l1184:	
 11849                           
 11850                           ;MCU_B1.c: 1020: }
 11851                           ;MCU_B1.c: 1021: LWLO = 0;
 11852  11CB  0023               	movlb	3	; select bank3
 11853  11CC  1295               	bcf	21,5	;volatile
 11854                           
 11855                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 11856  11CD  319C  24AB         	fcall	_Flash_Memory_Unlock
 11857                           
 11858                           ;MCU_B1.c: 1023: WREN = 0;
 11859  11CF  0023               	movlb	3	; select bank3
 11860  11D0  1115               	bcf	21,2	;volatile
 11861  11D1  0008               	return
 11862  11D2                     __end_of_Flash_Memory_Write:	
 11863                           
 11864                           	psect	text69
 11865  1CAB                     __ptext69:	
 11866 ;; *************** function _Flash_Memory_Unlock *****************
 11867 ;; Defined at:
 11868 ;;		line 987 in file "../src/MCU_B1.c"
 11869 ;; Parameters:    Size  Location     Type
 11870 ;;		None
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;		None
 11873 ;; Return value:  Size  Location     Type
 11874 ;;		None               void
 11875 ;; Registers used:
 11876 ;;		wreg
 11877 ;; Tracked objects:
 11878 ;;		On entry : 0/0
 11879 ;;		On exit  : 0/0
 11880 ;;		Unchanged: 0/0
 11881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11886 ;;Total ram usage:        0 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:    5
 11889 ;; This function calls:
 11890 ;;		Nothing
 11891 ;; This function is called by:
 11892 ;;		_Flash_Memory_Write
 11893 ;;		_Flash_Memory_Erasing
 11894 ;; This function uses a non-reentrant model
 11895 ;;
 11896                           
 11897                           
 11898                           ;psect for function _Flash_Memory_Unlock
 11899  1CAB                     _Flash_Memory_Unlock:	
 11900                           
 11901                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 11902                           
 11903                           ;incstack = 0
 11904                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11905  1CAB  3055               	movlw	85
 11906  1CAC  0023               	movlb	3	; select bank3
 11907  1CAD  0096               	movwf	22	;volatile
 11908                           
 11909                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 11910  1CAE  30AA               	movlw	170
 11911  1CAF  0096               	movwf	22	;volatile
 11912                           
 11913                           ;MCU_B1.c: 990: WR = 1;
 11914  1CB0  1495               	bsf	21,1	;volatile
 11915                           
 11916                           ;MCU_B1.c: 991: __nop();
 11917  1CB1  0000               	nop
 11918                           
 11919                           ;MCU_B1.c: 992: __nop();
 11920  1CB2  0000               	nop
 11921  1CB3  0008               	return
 11922  1CB4                     __end_of_Flash_Memory_Unlock:	
 11923                           
 11924                           	psect	text70
 11925  1F2C                     __ptext70:	
 11926 ;; *************** function _Flash_Memory_Read *****************
 11927 ;; Defined at:
 11928 ;;		line 996 in file "../src/MCU_B1.c"
 11929 ;; Parameters:    Size  Location     Type
 11930 ;;  address         1    wreg     unsigned char 
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;  address         1    2[BANK0 ] unsigned char 
 11933 ;;  ret             1    3[BANK0 ] unsigned char 
 11934 ;;  i               1    1[BANK0 ] unsigned char 
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  1    wreg      unsigned char 
 11937 ;; Registers used:
 11938 ;;		wreg, status,2
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;Total ram usage:        4 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    5
 11951 ;; This function calls:
 11952 ;;		Nothing
 11953 ;; This function is called by:
 11954 ;;		_Flash_Memory_Initialization
 11955 ;;		_Flash_Memory_Modify
 11956 ;; This function uses a non-reentrant model
 11957 ;;
 11958                           
 11959                           
 11960                           ;psect for function _Flash_Memory_Read
 11961  1F2C                     _Flash_Memory_Read:	
 11962                           
 11963                           ;incstack = 0
 11964                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11965                           ;Flash_Memory_Read@address stored from wreg
 11966  1F2C  0020               	movlb	0	; select bank0
 11967  1F2D  00A2               	movwf	Flash_Memory_Read@address
 11968                           
 11969                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 11970  1F2E  01A1               	clrf	Flash_Memory_Read@i
 11971  1F2F  01A3               	clrf	Flash_Memory_Read@ret
 11972                           
 11973                           ;MCU_B1.c: 998: PMADRH = 0x30;
 11974  1F30  3030               	movlw	48
 11975  1F31  0023               	movlb	3	; select bank3
 11976  1F32  0092               	movwf	18	;volatile
 11977                           
 11978                           ;MCU_B1.c: 999: PMADRL = address;
 11979  1F33  0020               	movlb	0	; select bank0
 11980  1F34  0822               	movf	Flash_Memory_Read@address,w
 11981  1F35  0023               	movlb	3	; select bank3
 11982  1F36  0091               	movwf	17	;volatile
 11983                           
 11984                           ;MCU_B1.c: 1000: CFGS = 0;
 11985  1F37  1315               	bcf	21,6	;volatile
 11986                           
 11987                           ;MCU_B1.c: 1001: RD = 1;
 11988  1F38  1415               	bsf	21,0	;volatile
 11989                           
 11990                           ;MCU_B1.c: 1002: i = PMDATH;
 11991  1F39  0814               	movf	20,w	;volatile
 11992  1F3A  0020               	movlb	0	; select bank0
 11993  1F3B  00A0               	movwf	??_Flash_Memory_Read
 11994  1F3C  0820               	movf	??_Flash_Memory_Read,w
 11995  1F3D  00A1               	movwf	Flash_Memory_Read@i
 11996                           
 11997                           ;MCU_B1.c: 1003: ret = PMDATL;
 11998  1F3E  0023               	movlb	3	; select bank3
 11999  1F3F  0813               	movf	19,w	;volatile
 12000  1F40  0020               	movlb	0	; select bank0
 12001  1F41  00A0               	movwf	??_Flash_Memory_Read
 12002  1F42  0820               	movf	??_Flash_Memory_Read,w
 12003  1F43  00A3               	movwf	Flash_Memory_Read@ret
 12004                           
 12005                           ;MCU_B1.c: 1004: return ret;
 12006  1F44  0823               	movf	Flash_Memory_Read@ret,w
 12007  1F45  0008               	return
 12008  1F46                     __end_of_Flash_Memory_Read:	
 12009                           
 12010                           	psect	text71
 12011  0EA3                     __ptext71:	
 12012 ;; *************** function _Exception_Main *****************
 12013 ;; Defined at:
 12014 ;;		line 488 in file "../src/Main_B1.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;		None
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;  i               2    3[BANK1 ] int 
 12019 ;;  lights          1    2[BANK1 ] unsigned char 
 12020 ;;  count           1    0[BANK1 ] unsigned char 
 12021 ;;  error           1    1[BANK1 ] unsigned char 
 12022 ;; Return value:  Size  Location     Type
 12023 ;;		None               void
 12024 ;; Registers used:
 12025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12026 ;; Tracked objects:
 12027 ;;		On entry : 0/0
 12028 ;;		On exit  : 0/0
 12029 ;;		Unchanged: 0/0
 12030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12032 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;Total ram usage:        6 bytes
 12036 ;; Hardware stack levels used:    1
 12037 ;; Hardware stack levels required when called:    9
 12038 ;; This function calls:
 12039 ;;		_DimmerLightsPointSelect
 12040 ;;		_getDimmerLights_Line
 12041 ;;		_getDimmerLights_Status
 12042 ;;		_getMain_All_Error_Status
 12043 ;;		_getMain_LightsStatus
 12044 ;;		_setBuz
 12045 ;;		_setDimmerLights_SwOff
 12046 ;;		_setLED
 12047 ;; This function is called by:
 12048 ;;		_main
 12049 ;; This function uses a non-reentrant model
 12050 ;;
 12051                           
 12052                           
 12053                           ;psect for function _Exception_Main
 12054  0EA3                     _Exception_Main:	
 12055                           
 12056                           ;Main_B1.c: 489: char error = getMain_All_Error_Status(0);
 12057                           
 12058                           ;incstack = 0
 12059                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12060  0EA3  3000               	movlw	0
 12061  0EA4  3192  2232  318E   	fcall	_getMain_All_Error_Status
 12062  0EA7  0020               	movlb	0	; select bank0
 12063  0EA8  00EC               	movwf	??_Exception_Main
 12064  0EA9  086C               	movf	??_Exception_Main,w
 12065  0EAA  0021               	movlb	1	; select bank1
 12066  0EAB  00EA               	movwf	Exception_Main@error^(0+128)
 12067                           
 12068                           ;Main_B1.c: 491: if (myMain.Error_Run == 1) {
 12069  0EAC  1DAB               	btfss	(_myMain^(0+128)+11),3
 12070  0EAD  2EBB               	goto	l10142
 12071                           
 12072                           ;Main_B1.c: 492: if (error == 0) {
 12073  0EAE  08EA               	movf	Exception_Main@error^(0+128),f
 12074  0EAF  1D03               	skipz
 12075  0EB0  0008               	return
 12076                           
 12077                           ;Main_B1.c: 493: myMain.Error_Run = 0;
 12078  0EB1  11AB               	bcf	(_myMain^(0+128)+11),3
 12079                           
 12080                           ;Main_B1.c: 498: setLED(99, 10);
 12081  0EB2  300A               	movlw	10
 12082  0EB3  0020               	movlb	0	; select bank0
 12083  0EB4  00EC               	movwf	??_Exception_Main
 12084  0EB5  086C               	movf	??_Exception_Main,w
 12085  0EB6  00A2               	movwf	setLED@command
 12086  0EB7  3063               	movlw	99
 12087  0EB8  3193  23A7         	fcall	_setLED
 12088                           
 12089                           ;Main_B1.c: 500: }
 12090                           ;Main_B1.c: 501: } else {
 12091  0EBA  0008               	return
 12092  0EBB                     l10142:	
 12093                           
 12094                           ;Main_B1.c: 502: if (error != 0) {
 12095  0EBB  0021               	movlb	1	; select bank1
 12096  0EBC  086A               	movf	Exception_Main@error^(0+128),w
 12097  0EBD  1903               	btfsc	3,2
 12098  0EBE  0008               	return
 12099                           
 12100                           ;Main_B1.c: 503: myMain.Error_Run = 1;
 12101  0EBF  15AB               	bsf	(_myMain^(0+128)+11),3
 12102                           
 12103                           ;Main_B1.c: 506: setLED(99, 11);
 12104  0EC0  300B               	movlw	11
 12105  0EC1  0020               	movlb	0	; select bank0
 12106  0EC2  00EC               	movwf	??_Exception_Main
 12107  0EC3  086C               	movf	??_Exception_Main,w
 12108  0EC4  00A2               	movwf	setLED@command
 12109  0EC5  3063               	movlw	99
 12110  0EC6  3193  23A7  318E   	fcall	_setLED
 12111                           
 12112                           ;Main_B1.c: 508: switch (error) {
 12113  0EC9  2F45               	goto	l10182
 12114  0ECA                     l10148:	
 12115                           ;Main_B1.c: 509: case 2:
 12116                           
 12117                           
 12118                           ;Main_B1.c: 510: if (getMain_LightsStatus() == 1) {
 12119  0ECA  3191  2178  318E   	fcall	_getMain_LightsStatus
 12120  0ECD  3A01               	xorlw	1
 12121  0ECE  1D03               	skipz
 12122  0ECF  2ED9               	goto	l10152
 12123                           
 12124                           ;Main_B1.c: 511: setBuz(10, 300);
 12125  0ED0  302C               	movlw	44
 12126  0ED1  0020               	movlb	0	; select bank0
 12127  0ED2  00A9               	movwf	setBuz@time
 12128  0ED3  3001               	movlw	1
 12129  0ED4  00AA               	movwf	setBuz@time+1
 12130  0ED5  300A               	movlw	10
 12131  0ED6  3197  27A7  318E   	fcall	_setBuz
 12132  0ED9                     l10152:	
 12133                           
 12134                           ;Main_B1.c: 512: }
 12135                           ;Main_B1.c: 515: char count = 1;
 12136  0ED9  0021               	movlb	1	; select bank1
 12137  0EDA  01E9               	clrf	Exception_Main@count^(0+128)
 12138  0EDB  0AE9               	incf	Exception_Main@count^(0+128),f
 12139                           
 12140                           ;Main_B1.c: 523: for (int i = 0; i < count; i++) {
 12141  0EDC  01EC               	clrf	Exception_Main@i^(0+128)
 12142  0EDD  01ED               	clrf	(Exception_Main@i+1)^(0+128)
 12143  0EDE                     l10166:	
 12144  0EDE  086D               	movf	(Exception_Main@i+1)^(0+128),w
 12145  0EDF  3A80               	xorlw	128
 12146  0EE0  0020               	movlb	0	; select bank0
 12147  0EE1  00EC               	movwf	??_Exception_Main
 12148  0EE2  3080               	movlw	128
 12149  0EE3  026C               	subwf	??_Exception_Main,w
 12150  0EE4  1D03               	skipz
 12151  0EE5  2EE9               	goto	u11515
 12152  0EE6  0021               	movlb	1	; select bank1
 12153  0EE7  0869               	movf	Exception_Main@count^(0+128),w
 12154  0EE8  026C               	subwf	Exception_Main@i^(0+128),w
 12155  0EE9                     u11515:	
 12156  0EE9  1803               	btfsc	3,0
 12157  0EEA  2F12               	goto	u11510
 12158                           
 12159                           ;Main_B1.c: 524: DimmerLightsPointSelect(i + 1);
 12160  0EEB  0021               	movlb	1	; select bank1
 12161  0EEC  086C               	movf	Exception_Main@i^(0+128),w
 12162  0EED  3E01               	addlw	1
 12163  0EEE  319C  24DC  318E   	fcall	_DimmerLightsPointSelect
 12164                           
 12165                           ;Main_B1.c: 525: if (getDimmerLights_Status(i + 1) == 1) {
 12166  0EF1  0021               	movlb	1	; select bank1
 12167  0EF2  086C               	movf	Exception_Main@i^(0+128),w
 12168  0EF3  3E01               	addlw	1
 12169  0EF4  319D  25DC  318E   	fcall	_getDimmerLights_Status
 12170  0EF7  3A01               	xorlw	1
 12171  0EF8  1D03               	skipz
 12172  0EF9  2F0C               	goto	l10164
 12173                           
 12174                           ;Main_B1.c: 526: DimmerLights->SwFlag = 1;
 12175  0EFA  0875               	movf	_DimmerLights,w
 12176  0EFB  3E0B               	addlw	11
 12177  0EFC  0086               	movwf	6
 12178  0EFD  3001               	movlw	1	; select bank2/3
 12179  0EFE  0087               	movwf	7
 12180  0EFF  1481               	bsf	1,1
 12181                           
 12182                           ;Main_B1.c: 527: DimmerLights->Status = 0;
 12183  0F00  0875               	movf	_DimmerLights,w
 12184  0F01  3E02               	addlw	2
 12185  0F02  0086               	movwf	6
 12186  0F03  3001               	movlw	1	; select bank2/3
 12187  0F04  0087               	movwf	7
 12188  0F05  1081               	bcf	1,1
 12189                           
 12190                           ;Main_B1.c: 528: setDimmerLights_SwOff(i + 1);
 12191  0F06  0021               	movlb	1	; select bank1
 12192  0F07  086C               	movf	Exception_Main@i^(0+128),w
 12193  0F08  3E01               	addlw	1
 12194  0F09  3197  274F  318E   	fcall	_setDimmerLights_SwOff
 12195  0F0C                     l10164:	
 12196  0F0C  3001               	movlw	1
 12197  0F0D  0021               	movlb	1	; select bank1
 12198  0F0E  07EC               	addwf	Exception_Main@i^(0+128),f
 12199  0F0F  3000               	movlw	0
 12200  0F10  3DED               	addwfc	(Exception_Main@i+1)^(0+128),f
 12201  0F11  2EDE               	goto	l10166
 12202  0F12                     u11510:	
 12203  0F12  0021               	movlb	1	; select bank1
 12204  0F13  0008               	return
 12205  0F14                     l10168:	
 12206                           ;Main_B1.c: 532: case 3:
 12207                           
 12208                           ;Main_B1.c: 529: }
 12209                           ;Main_B1.c: 530: }
 12210                           ;Main_B1.c: 531: break;
 12211                           
 12212                           
 12213                           ;Main_B1.c: 533: setBuz(5, 300);
 12214  0F14  302C               	movlw	44
 12215  0F15  0020               	movlb	0	; select bank0
 12216  0F16  00A9               	movwf	setBuz@time
 12217  0F17  3001               	movlw	1
 12218  0F18  00AA               	movwf	setBuz@time+1
 12219  0F19  3005               	movlw	5
 12220  0F1A  3197  27A7  318E   	fcall	_setBuz
 12221                           
 12222                           ;Main_B1.c: 534: char lights = getDimmerLights_Line();
 12223  0F1D  319C  24E7  318E   	fcall	_getDimmerLights_Line
 12224  0F20  0020               	movlb	0	; select bank0
 12225  0F21  00EC               	movwf	??_Exception_Main
 12226  0F22  086C               	movf	??_Exception_Main,w
 12227  0F23  0021               	movlb	1	; select bank1
 12228  0F24  00EB               	movwf	Exception_Main@lights^(0+128)
 12229                           
 12230                           ;Main_B1.c: 535: DimmerLightsPointSelect(lights);
 12231  0F25  086B               	movf	Exception_Main@lights^(0+128),w
 12232  0F26  319C  24DC  318E   	fcall	_DimmerLightsPointSelect
 12233                           
 12234                           ;Main_B1.c: 536: if (getDimmerLights_Status(lights) == 1) {
 12235  0F29  0021               	movlb	1	; select bank1
 12236  0F2A  086B               	movf	Exception_Main@lights^(0+128),w
 12237  0F2B  319D  25DC  318E   	fcall	_getDimmerLights_Status
 12238  0F2E  3A01               	xorlw	1
 12239  0F2F  1903               	btfsc	3,2
 12240  0F30  2F33               	goto	l10176
 12241  0F31  0021               	movlb	1	; select bank1
 12242  0F32  0008               	return
 12243  0F33                     l10176:	
 12244                           
 12245                           ;Main_B1.c: 537: DimmerLights->SwFlag = 1;
 12246  0F33  0875               	movf	_DimmerLights,w
 12247  0F34  3E0B               	addlw	11
 12248  0F35  0086               	movwf	6
 12249  0F36  3001               	movlw	1	; select bank2/3
 12250  0F37  0087               	movwf	7
 12251  0F38  1481               	bsf	1,1
 12252                           
 12253                           ;Main_B1.c: 538: DimmerLights->Status = 0;
 12254  0F39  0875               	movf	_DimmerLights,w
 12255  0F3A  3E02               	addlw	2
 12256  0F3B  0086               	movwf	6
 12257  0F3C  3001               	movlw	1	; select bank2/3
 12258  0F3D  0087               	movwf	7
 12259  0F3E  1081               	bcf	1,1
 12260                           
 12261                           ;Main_B1.c: 539: setDimmerLights_SwOff(lights);
 12262  0F3F  0021               	movlb	1	; select bank1
 12263  0F40  086B               	movf	Exception_Main@lights^(0+128),w
 12264  0F41  3197  274F         	fcall	_setDimmerLights_SwOff
 12265  0F43  0021               	movlb	1	; select bank1
 12266  0F44  0008               	return
 12267  0F45                     l10182:	
 12268                           ;Main_B1.c: 542: }
 12269                           
 12270                           ;Main_B1.c: 540: }
 12271                           ;Main_B1.c: 541: break;
 12272                           
 12273  0F45  0021               	movlb	1	; select bank1
 12274  0F46  086A               	movf	Exception_Main@error^(0+128),w
 12275                           
 12276                           ; Switch size 1, requested type "space"
 12277                           ; Number of cases is 2, Range of values is 2 to 3
 12278                           ; switch strategies available:
 12279                           ; Name         Instructions Cycles
 12280                           ; simple_byte            7     4 (average)
 12281                           ; direct_byte           13     9 (fixed)
 12282                           ; jumptable            263     9 (fixed)
 12283                           ;	Chosen strategy is simple_byte
 12284  0F47  3A02               	xorlw	2	; case 2
 12285  0F48  1903               	skipnz
 12286  0F49  2ECA               	goto	l10148
 12287  0F4A  3A01               	xorlw	1	; case 3
 12288  0F4B  1903               	skipnz
 12289  0F4C  2F14               	goto	l10168
 12290  0F4D  2F4F               	goto	l1448
 12291  0F4E  0008               	return
 12292  0F4F                     l1448:	
 12293  0F4F  0008               	return
 12294  0F50                     __end_of_Exception_Main:	
 12295                           
 12296                           	psect	text72
 12297  1178                     __ptext72:	
 12298 ;; *************** function _getMain_LightsStatus *****************
 12299 ;; Defined at:
 12300 ;;		line 375 in file "../src/Main_B1.c"
 12301 ;; Parameters:    Size  Location     Type
 12302 ;;		None
 12303 ;; Auto vars:     Size  Location     Type
 12304 ;;  i               2    6[BANK0 ] int 
 12305 ;;  status          1    8[BANK0 ] unsigned char 
 12306 ;;  count           1    5[BANK0 ] unsigned char 
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  1    wreg      unsigned char 
 12309 ;; Registers used:
 12310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/0
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12317 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;Total ram usage:        5 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; Hardware stack levels required when called:    7
 12323 ;; This function calls:
 12324 ;;		_getDimmerLights_Status
 12325 ;; This function is called by:
 12326 ;;		_Flash_Memory_Main
 12327 ;;		_Exception_Main
 12328 ;;		_Load_Main
 12329 ;;		_setMain_Exception
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           
 12334                           ;psect for function _getMain_LightsStatus
 12335  1178                     _getMain_LightsStatus:	
 12336                           
 12337                           ;Main_B1.c: 376: char status = 0, count = 0;
 12338                           
 12339                           ;incstack = 0
 12340                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12341  1178  0020               	movlb	0	; select bank0
 12342  1179  01A8               	clrf	getMain_LightsStatus@status
 12343  117A  01A5               	clrf	getMain_LightsStatus@count
 12344                           
 12345                           ;Main_B1.c: 379: count = 1;
 12346  117B  01A5               	clrf	getMain_LightsStatus@count
 12347  117C  0AA5               	incf	getMain_LightsStatus@count,f
 12348                           
 12349                           ;Main_B1.c: 390: for (int i = 0; i < count; i++) {
 12350  117D  01A6               	clrf	getMain_LightsStatus@i
 12351  117E  01A7               	clrf	getMain_LightsStatus@i+1
 12352  117F                     l9374:	
 12353  117F  0827               	movf	getMain_LightsStatus@i+1,w
 12354  1180  3A80               	xorlw	128
 12355  1181  00A4               	movwf	??_getMain_LightsStatus
 12356  1182  3080               	movlw	128
 12357  1183  0224               	subwf	??_getMain_LightsStatus,w
 12358  1184  1D03               	skipz
 12359  1185  2988               	goto	u10135
 12360  1186  0825               	movf	getMain_LightsStatus@count,w
 12361  1187  0226               	subwf	getMain_LightsStatus@i,w
 12362  1188                     u10135:	
 12363  1188  1803               	btfsc	3,0
 12364  1189  29A0               	goto	l9376
 12365                           
 12366                           ;Main_B1.c: 391: if (status == 0) {
 12367  118A  0020               	movlb	0	; select bank0
 12368  118B  08A8               	movf	getMain_LightsStatus@status,f
 12369  118C  1D03               	skipz
 12370  118D  299B               	goto	l9372
 12371                           
 12372                           ;Main_B1.c: 396: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 12373  118E  0826               	movf	getMain_LightsStatus@i,w
 12374  118F  3E01               	addlw	1
 12375  1190  319D  25DC  3191   	fcall	_getDimmerLights_Status
 12376  1193  3A01               	xorlw	1
 12377  1194  3000               	movlw	0
 12378  1195  1903               	skipnz
 12379  1196  3001               	movlw	1
 12380  1197  0020               	movlb	0	; select bank0
 12381  1198  00A4               	movwf	??_getMain_LightsStatus
 12382  1199  0824               	movf	??_getMain_LightsStatus,w
 12383  119A  00A8               	movwf	getMain_LightsStatus@status
 12384  119B                     l9372:	
 12385  119B  3001               	movlw	1
 12386  119C  07A6               	addwf	getMain_LightsStatus@i,f
 12387  119D  3000               	movlw	0
 12388  119E  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 12389  119F  297F               	goto	l9374
 12390  11A0                     l9376:	
 12391                           
 12392                           ;Main_B1.c: 398: }
 12393                           ;Main_B1.c: 399: }
 12394                           ;Main_B1.c: 400: return status;
 12395  11A0  0020               	movlb	0	; select bank0
 12396  11A1  0828               	movf	getMain_LightsStatus@status,w
 12397  11A2  0008               	return
 12398  11A3                     __end_of_getMain_LightsStatus:	
 12399                           
 12400                           	psect	text73
 12401  1232                     __ptext73:	
 12402 ;; *************** function _getMain_All_Error_Status *****************
 12403 ;; Defined at:
 12404 ;;		line 404 in file "../src/Main_B1.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;  command         1    wreg     unsigned char 
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;  command         1    5[BANK0 ] unsigned char 
 12409 ;;  status          1    6[BANK0 ] unsigned char 
 12410 ;; Return value:  Size  Location     Type
 12411 ;;                  1    wreg      unsigned char 
 12412 ;; Registers used:
 12413 ;;		wreg, status,2, status,0
 12414 ;; Tracked objects:
 12415 ;;		On entry : 0/0
 12416 ;;		On exit  : 0/0
 12417 ;;		Unchanged: 0/0
 12418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12420 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12422 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12423 ;;Total ram usage:        7 bytes
 12424 ;; Hardware stack levels used:    1
 12425 ;; Hardware stack levels required when called:    5
 12426 ;; This function calls:
 12427 ;;		Nothing
 12428 ;; This function is called by:
 12429 ;;		_Exception_Main
 12430 ;;		_Load_Main
 12431 ;;		_setTemp_Main
 12432 ;;		_setRF_Main
 12433 ;;		_getRxData
 12434 ;;		_setSw_Main
 12435 ;; This function uses a non-reentrant model
 12436 ;;
 12437                           
 12438                           
 12439                           ;psect for function _getMain_All_Error_Status
 12440  1232                     _getMain_All_Error_Status:	
 12441                           
 12442                           ;incstack = 0
 12443                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 12444                           ;getMain_All_Error_Status@command stored from wreg
 12445  1232  0020               	movlb	0	; select bank0
 12446  1233  00A5               	movwf	getMain_All_Error_Status@command
 12447                           
 12448                           ;Main_B1.c: 405: char status = 0;
 12449  1234  01A6               	clrf	getMain_All_Error_Status@status
 12450                           
 12451                           ;Main_B1.c: 416: if (status == 0 && command != 2) {
 12452  1235  08A6               	movf	getMain_All_Error_Status@status,f
 12453  1236  1D03               	skipz
 12454  1237  2A4C               	goto	l8726
 12455  1238  0825               	movf	getMain_All_Error_Status@command,w
 12456  1239  3A02               	xorlw	2
 12457  123A  1903               	skipnz
 12458  123B  2A4C               	goto	l8726
 12459                           
 12460                           ;Main_B1.c: 417: status = Temp.ERROR == 1 ? 2 : 0;
 12461  123C  0021               	movlb	1	; select bank1
 12462  123D  18D7               	btfsc	_Temp^(0+128),1
 12463  123E  2A43               	goto	l8724
 12464  123F  0020               	movlb	0	; select bank0
 12465  1240  01A1               	clrf	_getMain_All_Error_Status$3416
 12466  1241  01A2               	clrf	_getMain_All_Error_Status$3416+1
 12467  1242  2A48               	goto	l1419
 12468  1243                     l8724:	
 12469  1243  3002               	movlw	2
 12470  1244  0020               	movlb	0	; select bank0
 12471  1245  00A1               	movwf	_getMain_All_Error_Status$3416
 12472  1246  3000               	movlw	0
 12473  1247  00A2               	movwf	_getMain_All_Error_Status$3416+1
 12474  1248                     l1419:	
 12475  1248  0821               	movf	_getMain_All_Error_Status$3416,w
 12476  1249  00A0               	movwf	??_getMain_All_Error_Status
 12477  124A  0820               	movf	??_getMain_All_Error_Status,w
 12478  124B  00A6               	movwf	getMain_All_Error_Status@status
 12479  124C                     l8726:	
 12480                           
 12481                           ;Main_B1.c: 418: }
 12482                           ;Main_B1.c: 423: if (status == 0 && command != 3) {
 12483  124C  08A6               	movf	getMain_All_Error_Status@status,f
 12484  124D  1D03               	skipz
 12485  124E  2A63               	goto	l1420
 12486  124F  0825               	movf	getMain_All_Error_Status@command,w
 12487  1250  3A03               	xorlw	3
 12488  1251  1903               	skipnz
 12489  1252  2A63               	goto	l1420
 12490                           
 12491                           ;Main_B1.c: 424: status = Load.ERROR == 1 ? 3 : 0;
 12492  1253  0022               	movlb	2	; select bank2
 12493  1254  1AA6               	btfsc	_Load^(0+256),5
 12494  1255  2A5A               	goto	l8734
 12495  1256  0020               	movlb	0	; select bank0
 12496  1257  01A3               	clrf	_getMain_All_Error_Status$3417
 12497  1258  01A4               	clrf	_getMain_All_Error_Status$3417+1
 12498  1259  2A5F               	goto	l1424
 12499  125A                     l8734:	
 12500  125A  3003               	movlw	3
 12501  125B  0020               	movlb	0	; select bank0
 12502  125C  00A3               	movwf	_getMain_All_Error_Status$3417
 12503  125D  3000               	movlw	0
 12504  125E  00A4               	movwf	_getMain_All_Error_Status$3417+1
 12505  125F                     l1424:	
 12506  125F  0823               	movf	_getMain_All_Error_Status$3417,w
 12507  1260  00A0               	movwf	??_getMain_All_Error_Status
 12508  1261  0820               	movf	??_getMain_All_Error_Status,w
 12509  1262  00A6               	movwf	getMain_All_Error_Status@status
 12510  1263                     l1420:	
 12511                           
 12512                           ;Main_B1.c: 425: }
 12513                           ;Main_B1.c: 441: return status;
 12514  1263  0826               	movf	getMain_All_Error_Status@status,w
 12515  1264  0008               	return
 12516  1265                     __end_of_getMain_All_Error_Status:	
 12517                           
 12518                           	psect	text74
 12519  1CE7                     __ptext74:	
 12520 ;; *************** function _getDimmerLights_Line *****************
 12521 ;; Defined at:
 12522 ;;		line 684 in file "../src/Dimmer_B1.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;		None
 12525 ;; Auto vars:     Size  Location     Type
 12526 ;;  line            1    0[BANK0 ] unsigned char 
 12527 ;; Return value:  Size  Location     Type
 12528 ;;                  1    wreg      unsigned char 
 12529 ;; Registers used:
 12530 ;;		wreg, status,2
 12531 ;; Tracked objects:
 12532 ;;		On entry : 0/0
 12533 ;;		On exit  : 0/0
 12534 ;;		Unchanged: 0/0
 12535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;Total ram usage:        1 bytes
 12541 ;; Hardware stack levels used:    1
 12542 ;; Hardware stack levels required when called:    5
 12543 ;; This function calls:
 12544 ;;		Nothing
 12545 ;; This function is called by:
 12546 ;;		_Exception_Main
 12547 ;;		_setMain_Exception
 12548 ;; This function uses a non-reentrant model
 12549 ;;
 12550                           
 12551                           
 12552                           ;psect for function _getDimmerLights_Line
 12553  1CE7                     _getDimmerLights_Line:	
 12554                           
 12555                           ;Dimmer_B1.c: 685: char line = 0;
 12556                           
 12557                           ;incstack = 0
 12558                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12559  1CE7  0020               	movlb	0	; select bank0
 12560  1CE8  01A0               	clrf	getDimmerLights_Line@line
 12561                           
 12562                           ;Dimmer_B1.c: 687: if (DimmerLights1.Line == 1) {
 12563  1CE9  0022               	movlb	2	; select bank2
 12564  1CEA  1F5E               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12565  1CEB  2CEF               	goto	l9270
 12566                           
 12567                           ;Dimmer_B1.c: 688: line = 1;
 12568  1CEC  0020               	movlb	0	; select bank0
 12569  1CED  01A0               	clrf	getDimmerLights_Line@line
 12570  1CEE  0AA0               	incf	getDimmerLights_Line@line,f
 12571  1CEF                     l9270:	
 12572                           
 12573                           ;Dimmer_B1.c: 689: }
 12574                           ;Dimmer_B1.c: 701: return line;
 12575  1CEF  0020               	movlb	0	; select bank0
 12576  1CF0  0820               	movf	getDimmerLights_Line@line,w
 12577  1CF1  0008               	return
 12578  1CF2                     __end_of_getDimmerLights_Line:	
 12579                           
 12580                           	psect	text75
 12581  1C64                     __ptext75:	
 12582 ;; *************** function _DimmerLights_Main *****************
 12583 ;; Defined at:
 12584 ;;		line 478 in file "../src/Dimmer_B1.c"
 12585 ;; Parameters:    Size  Location     Type
 12586 ;;		None
 12587 ;; Auto vars:     Size  Location     Type
 12588 ;;		None
 12589 ;; Return value:  Size  Location     Type
 12590 ;;		None               void
 12591 ;; Registers used:
 12592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12593 ;; Tracked objects:
 12594 ;;		On entry : 0/0
 12595 ;;		On exit  : 0/0
 12596 ;;		Unchanged: 0/0
 12597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;Total ram usage:        0 bytes
 12603 ;; Hardware stack levels used:    1
 12604 ;; Hardware stack levels required when called:   10
 12605 ;; This function calls:
 12606 ;;		_setDimmerLights_Main
 12607 ;; This function is called by:
 12608 ;;		_main
 12609 ;; This function uses a non-reentrant model
 12610 ;;
 12611                           
 12612                           
 12613                           ;psect for function _DimmerLights_Main
 12614  1C64                     _DimmerLights_Main:	
 12615                           
 12616                           ;Dimmer_B1.c: 491: setDimmerLights_Main(1);
 12617                           
 12618                           ;incstack = 0
 12619                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12620  1C64  3001               	movlw	1
 12621  1C65  3196  2653         	fcall	_setDimmerLights_Main
 12622  1C67  0008               	return
 12623  1C68                     __end_of_DimmerLights_Main:	
 12624                           
 12625                           	psect	text76
 12626  1653                     __ptext76:	
 12627 ;; *************** function _setDimmerLights_Main *****************
 12628 ;; Defined at:
 12629 ;;		line 505 in file "../src/Dimmer_B1.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;  lights          1    wreg     unsigned char 
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  lights          1   78[BANK0 ] unsigned char 
 12634 ;; Return value:  Size  Location     Type
 12635 ;;		None               void
 12636 ;; Registers used:
 12637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;Total ram usage:        1 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; Hardware stack levels required when called:    9
 12650 ;; This function calls:
 12651 ;;		_DimmerLightsPointSelect
 12652 ;;		_getDimmerLights_Allow_Condition
 12653 ;;		_setDimmerLights
 12654 ;;		_setDimmerLights_Adj
 12655 ;; This function is called by:
 12656 ;;		_DimmerLights_Main
 12657 ;; This function uses a non-reentrant model
 12658 ;;
 12659                           
 12660                           
 12661                           ;psect for function _setDimmerLights_Main
 12662  1653                     _setDimmerLights_Main:	
 12663                           
 12664                           ;incstack = 0
 12665                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12666                           ;setDimmerLights_Main@lights stored from wreg
 12667  1653  0020               	movlb	0	; select bank0
 12668  1654  00EE               	movwf	setDimmerLights_Main@lights
 12669                           
 12670                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(lights);
 12671  1655  086E               	movf	setDimmerLights_Main@lights,w
 12672  1656  319C  24DC  3196   	fcall	_DimmerLightsPointSelect
 12673                           
 12674                           ;Dimmer_B1.c: 508: if (DimmerLights->Trigger == 1) {
 12675  1659  0875               	movf	_DimmerLights,w
 12676  165A  3E0A               	addlw	10
 12677  165B  0086               	movwf	6
 12678  165C  3001               	movlw	1	; select bank2/3
 12679  165D  0087               	movwf	7
 12680  165E  1C81               	btfss	1,1
 12681  165F  2E82               	goto	l9256
 12682                           
 12683                           ;Dimmer_B1.c: 509: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12684  1660  0020               	movlb	0	; select bank0
 12685  1661  086E               	movf	setDimmerLights_Main@lights,w
 12686  1662  319C  2460  3196   	fcall	_getDimmerLights_Allow_Condition
 12687  1665  3800               	iorlw	0
 12688  1666  1D03               	skipz
 12689  1667  0008               	return
 12690                           
 12691                           ;Dimmer_B1.c: 510: DimmerLights->Trigger = 0;
 12692  1668  0875               	movf	_DimmerLights,w
 12693  1669  3E0A               	addlw	10
 12694  166A  0086               	movwf	6
 12695  166B  3001               	movlw	1	; select bank2/3
 12696  166C  0087               	movwf	7
 12697  166D  1081               	bcf	1,1
 12698                           
 12699                           ;Dimmer_B1.c: 511: if (DimmerLights->Switch == 1) {
 12700  166E  0875               	movf	_DimmerLights,w
 12701  166F  3E0A               	addlw	10
 12702  1670  0086               	movwf	6
 12703  1671  3001               	movlw	1	; select bank2/3
 12704  1672  0087               	movwf	7
 12705  1673  1C01               	btfss	1,0
 12706  1674  2E7C               	goto	l9254
 12707                           
 12708                           ;Dimmer_B1.c: 512: setDimmerLights(lights, 1);
 12709  1675  0020               	movlb	0	; select bank0
 12710  1676  01EB               	clrf	setDimmerLights@status
 12711  1677  0AEB               	incf	setDimmerLights@status,f
 12712  1678  086E               	movf	setDimmerLights_Main@lights,w
 12713  1679  3188  206A         	fcall	_setDimmerLights
 12714                           
 12715                           ;Dimmer_B1.c: 513: } else {
 12716  167B  0008               	return
 12717  167C                     l9254:	
 12718                           
 12719                           ;Dimmer_B1.c: 514: setDimmerLights(lights, 0);
 12720  167C  0020               	movlb	0	; select bank0
 12721  167D  01EB               	clrf	setDimmerLights@status
 12722  167E  086E               	movf	setDimmerLights_Main@lights,w
 12723  167F  3188  206A         	fcall	_setDimmerLights
 12724                           
 12725                           ;Dimmer_B1.c: 515: }
 12726                           ;Dimmer_B1.c: 516: }
 12727                           ;Dimmer_B1.c: 517: } else {
 12728  1681  0008               	return
 12729  1682                     l9256:	
 12730                           
 12731                           ;Dimmer_B1.c: 518: if (DimmerLights->TriggerAdj == 1) {
 12732  1682  0875               	movf	_DimmerLights,w
 12733  1683  3E0A               	addlw	10
 12734  1684  0086               	movwf	6
 12735  1685  3001               	movlw	1	; select bank2/3
 12736  1686  0087               	movwf	7
 12737  1687  1D81               	btfss	1,3
 12738  1688  0008               	return
 12739                           
 12740                           ;Dimmer_B1.c: 519: DimmerLights->TriggerAdj = 0;
 12741  1689  0875               	movf	_DimmerLights,w
 12742  168A  3E0A               	addlw	10
 12743  168B  0086               	movwf	6
 12744  168C  3001               	movlw	1	; select bank2/3
 12745  168D  0087               	movwf	7
 12746  168E  1181               	bcf	1,3
 12747                           
 12748                           ;Dimmer_B1.c: 520: if (DimmerLights->SwitchAdj == 1) {
 12749  168F  0875               	movf	_DimmerLights,w
 12750  1690  3E0A               	addlw	10
 12751  1691  0086               	movwf	6
 12752  1692  3001               	movlw	1	; select bank2/3
 12753  1693  0087               	movwf	7
 12754  1694  1D01               	btfss	1,2
 12755  1695  2E9D               	goto	l9262
 12756                           
 12757                           ;Dimmer_B1.c: 521: setDimmerLights_Adj(lights, 1);
 12758  1696  0020               	movlb	0	; select bank0
 12759  1697  01EB               	clrf	setDimmerLights_Adj@status
 12760  1698  0AEB               	incf	setDimmerLights_Adj@status,f
 12761  1699  086E               	movf	setDimmerLights_Main@lights,w
 12762  169A  3196  2603         	fcall	_setDimmerLights_Adj
 12763                           
 12764                           ;Dimmer_B1.c: 522: } else {
 12765  169C  0008               	return
 12766  169D                     l9262:	
 12767                           
 12768                           ;Dimmer_B1.c: 523: setDimmerLights_Adj(lights, 0);
 12769  169D  0020               	movlb	0	; select bank0
 12770  169E  01EB               	clrf	setDimmerLights_Adj@status
 12771  169F  086E               	movf	setDimmerLights_Main@lights,w
 12772  16A0  3196  2603         	fcall	_setDimmerLights_Adj
 12773  16A2  0008               	return
 12774  16A3                     __end_of_setDimmerLights_Main:	
 12775                           
 12776                           	psect	text77
 12777  1603                     __ptext77:	
 12778 ;; *************** function _setDimmerLights_Adj *****************
 12779 ;; Defined at:
 12780 ;;		line 623 in file "../src/Dimmer_B1.c"
 12781 ;; Parameters:    Size  Location     Type
 12782 ;;  lights          1    wreg     unsigned char 
 12783 ;;  status          1   75[BANK0 ] unsigned char 
 12784 ;; Auto vars:     Size  Location     Type
 12785 ;;  lights          1   77[BANK0 ] unsigned char 
 12786 ;; Return value:  Size  Location     Type
 12787 ;;		None               void
 12788 ;; Registers used:
 12789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12790 ;; Tracked objects:
 12791 ;;		On entry : 0/0
 12792 ;;		On exit  : 0/0
 12793 ;;		Unchanged: 0/0
 12794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12795 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12796 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12798 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12799 ;;Total ram usage:        3 bytes
 12800 ;; Hardware stack levels used:    1
 12801 ;; Hardware stack levels required when called:    8
 12802 ;; This function calls:
 12803 ;;		_setBuz
 12804 ;;		_setPercentValue
 12805 ;;		_setProductData
 12806 ;;		_setRF_DimmerLights
 12807 ;;		_setTxData
 12808 ;; This function is called by:
 12809 ;;		_setDimmerLights_Main
 12810 ;; This function uses a non-reentrant model
 12811 ;;
 12812                           
 12813                           
 12814                           ;psect for function _setDimmerLights_Adj
 12815  1603                     _setDimmerLights_Adj:	
 12816                           
 12817                           ;incstack = 0
 12818                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12819                           ;setDimmerLights_Adj@lights stored from wreg
 12820  1603  0020               	movlb	0	; select bank0
 12821  1604  00ED               	movwf	setDimmerLights_Adj@lights
 12822                           
 12823                           ;Dimmer_B1.c: 625: if (status == 1) {
 12824  1605  086B               	movf	setDimmerLights_Adj@status,w
 12825  1606  3A01               	xorlw	1
 12826  1607  1D03               	skipz
 12827  1608  2E1B               	goto	l8944
 12828                           
 12829                           ;Dimmer_B1.c: 626: DimmerLights->AdjSw = 1;
 12830  1609  0A75               	incf	_DimmerLights,w
 12831  160A  0086               	movwf	6
 12832  160B  3001               	movlw	1	; select bank2/3
 12833  160C  0087               	movwf	7
 12834  160D  1701               	bsf	1,6
 12835                           
 12836                           ;Dimmer_B1.c: 627: DimmerLights->Signal = 1;
 12837  160E  0A75               	incf	_DimmerLights,w
 12838  160F  0086               	movwf	6
 12839  1610  3001               	movlw	1	; select bank2/3
 12840  1611  0087               	movwf	7
 12841  1612  1681               	bsf	1,5
 12842                           
 12843                           ;Dimmer_B1.c: 628: setBuz(1, 100);
 12844  1613  3064               	movlw	100
 12845  1614  00A9               	movwf	setBuz@time
 12846  1615  3000               	movlw	0
 12847  1616  00AA               	movwf	setBuz@time+1
 12848  1617  3001               	movlw	1
 12849  1618  3197  27A7         	fcall	_setBuz
 12850                           
 12851                           ;Dimmer_B1.c: 629: } else if (status == 0) {
 12852  161A  0008               	return
 12853  161B                     l8944:	
 12854  161B  0020               	movlb	0	; select bank0
 12855  161C  08EB               	movf	setDimmerLights_Adj@status,f
 12856  161D  1D03               	skipz
 12857  161E  0008               	return
 12858                           
 12859                           ;Dimmer_B1.c: 630: DimmerLights->AdjSw = 0;
 12860  161F  0A75               	incf	_DimmerLights,w
 12861  1620  0086               	movwf	6
 12862  1621  3001               	movlw	1	; select bank2/3
 12863  1622  0087               	movwf	7
 12864  1623  1301               	bcf	1,6
 12865                           
 12866                           ;Dimmer_B1.c: 631: DimmerLights->Signal = 0;
 12867  1624  0A75               	incf	_DimmerLights,w
 12868  1625  0086               	movwf	6
 12869  1626  3001               	movlw	1	; select bank2/3
 12870  1627  0087               	movwf	7
 12871  1628  1281               	bcf	1,5
 12872                           
 12873                           ;Dimmer_B1.c: 633: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12874  1629  0875               	movf	_DimmerLights,w
 12875  162A  3E04               	addlw	4
 12876  162B  0086               	movwf	6
 12877  162C  3001               	movlw	1	; select bank2/3
 12878  162D  0087               	movwf	7
 12879  162E  0801               	movf	1,w
 12880  162F  00EC               	movwf	??_setDimmerLights_Adj
 12881  1630  0875               	movf	_DimmerLights,w
 12882  1631  3E06               	addlw	6
 12883  1632  0086               	movwf	6
 12884  1633  3001               	movlw	1	; select bank2/3
 12885  1634  0087               	movwf	7
 12886  1635  086C               	movf	??_setDimmerLights_Adj,w
 12887  1636  0081               	movwf	1
 12888                           
 12889                           ;Dimmer_B1.c: 634: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 12890  1637  0875               	movf	_DimmerLights,w
 12891  1638  3E04               	addlw	4
 12892  1639  0086               	movwf	6
 12893  163A  3001               	movlw	1	; select bank2/3
 12894  163B  0087               	movwf	7
 12895  163C  0801               	movf	1,w
 12896  163D  318B  2302  3196   	fcall	_setPercentValue
 12897  1640  0020               	movlb	0	; select bank0
 12898  1641  00EC               	movwf	??_setDimmerLights_Adj
 12899  1642  086C               	movf	??_setDimmerLights_Adj,w
 12900  1643  00E2               	movwf	setProductData@value
 12901  1644  086D               	movf	setDimmerLights_Adj@lights,w
 12902  1645  3E14               	addlw	20
 12903  1646  319D  2573  3196   	fcall	_setProductData
 12904                           
 12905                           ;Dimmer_B1.c: 648: setRF_DimmerLights(lights, 1);
 12906  1649  0020               	movlb	0	; select bank0
 12907  164A  01E6               	clrf	setRF_DimmerLights@on
 12908  164B  0AE6               	incf	setRF_DimmerLights@on,f
 12909  164C  086D               	movf	setDimmerLights_Adj@lights,w
 12910  164D  3188  2011  3196   	fcall	_setRF_DimmerLights
 12911                           
 12912                           ;Dimmer_B1.c: 649: setTxData();
 12913  1650  318D  255F         	fcall	_setTxData
 12914  1652  0008               	return
 12915  1653                     __end_of_setDimmerLights_Adj:	
 12916                           
 12917                           	psect	text78
 12918  086A                     __ptext78:	
 12919 ;; *************** function _setDimmerLights *****************
 12920 ;; Defined at:
 12921 ;;		line 586 in file "../src/Dimmer_B1.c"
 12922 ;; Parameters:    Size  Location     Type
 12923 ;;  lights          1    wreg     unsigned char 
 12924 ;;  status          1   75[BANK0 ] unsigned char 
 12925 ;; Auto vars:     Size  Location     Type
 12926 ;;  lights          1   77[BANK0 ] unsigned char 
 12927 ;; Return value:  Size  Location     Type
 12928 ;;		None               void
 12929 ;; Registers used:
 12930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12931 ;; Tracked objects:
 12932 ;;		On entry : 0/0
 12933 ;;		On exit  : 0/0
 12934 ;;		Unchanged: 0/0
 12935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12936 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12938 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12939 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;Total ram usage:        3 bytes
 12941 ;; Hardware stack levels used:    1
 12942 ;; Hardware stack levels required when called:    8
 12943 ;; This function calls:
 12944 ;;		_setDimmerLights_Line
 12945 ;;		_setLED
 12946 ;;		_setPercentValue
 12947 ;;		_setProductData
 12948 ;;		_setRF_DimmerLights
 12949 ;;		_setTxData
 12950 ;; This function is called by:
 12951 ;;		_setDimmerLights_Main
 12952 ;; This function uses a non-reentrant model
 12953 ;;
 12954                           
 12955                           
 12956                           ;psect for function _setDimmerLights
 12957  086A                     _setDimmerLights:	
 12958                           
 12959                           ;incstack = 0
 12960                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12961                           ;setDimmerLights@lights stored from wreg
 12962  086A  0020               	movlb	0	; select bank0
 12963  086B  00ED               	movwf	setDimmerLights@lights
 12964                           
 12965                           ;Dimmer_B1.c: 594: if (status == 1) {
 12966  086C  086B               	movf	setDimmerLights@status,w
 12967  086D  3A01               	xorlw	1
 12968  086E  1D03               	skipz
 12969  086F  289D               	goto	l8926
 12970                           
 12971                           ;Dimmer_B1.c: 595: DimmerLights->StatusFlag = 1;
 12972  0870  0A75               	incf	_DimmerLights,w
 12973  0871  0086               	movwf	6
 12974  0872  3001               	movlw	1	; select bank2/3
 12975  0873  0087               	movwf	7
 12976  0874  1501               	bsf	1,2
 12977                           
 12978                           ;Dimmer_B1.c: 596: DimmerLights->Loop = 1;
 12979  0875  0875               	movf	_DimmerLights,w
 12980  0876  3E0A               	addlw	10
 12981  0877  0086               	movwf	6
 12982  0878  3001               	movlw	1	; select bank2/3
 12983  0879  0087               	movwf	7
 12984  087A  1781               	bsf	1,7
 12985                           
 12986                           ;Dimmer_B1.c: 597: setDimmerLights_Line(lights);
 12987  087B  086D               	movf	setDimmerLights@lights,w
 12988  087C  319D  252B  3188   	fcall	_setDimmerLights_Line
 12989                           
 12990                           ;Dimmer_B1.c: 599: setLED(lights, 0);
 12991  087F  0020               	movlb	0	; select bank0
 12992  0880  01A2               	clrf	setLED@command
 12993  0881  086D               	movf	setDimmerLights@lights,w
 12994  0882  3193  23A7  3188   	fcall	_setLED
 12995                           
 12996                           ;Dimmer_B1.c: 600: ;;
 12997                           ;Dimmer_B1.c: 605: DimmerLights->DimmingValue = 10;
 12998  0885  300A               	movlw	10
 12999  0886  0020               	movlb	0	; select bank0
 13000  0887  00EC               	movwf	??_setDimmerLights
 13001  0888  0875               	movf	_DimmerLights,w
 13002  0889  3E04               	addlw	4
 13003  088A  0086               	movwf	6
 13004  088B  3001               	movlw	1	; select bank2/3
 13005  088C  0087               	movwf	7
 13006  088D  086C               	movf	??_setDimmerLights,w
 13007  088E  0081               	movwf	1
 13008                           
 13009                           ;Dimmer_B1.c: 606: setProductData((20 + lights), setPercentValue(((char)(45*0.8))));
 13010  088F  3024               	movlw	36
 13011  0890  318B  2302  3188   	fcall	_setPercentValue
 13012  0893  0020               	movlb	0	; select bank0
 13013  0894  00EC               	movwf	??_setDimmerLights
 13014  0895  086C               	movf	??_setDimmerLights,w
 13015  0896  00E2               	movwf	setProductData@value
 13016  0897  086D               	movf	setDimmerLights@lights,w
 13017  0898  3E14               	addlw	20
 13018  0899  319D  2573  3188   	fcall	_setProductData
 13019                           
 13020                           ;Dimmer_B1.c: 608: } else if (status == 0) {
 13021  089C  28B7               	goto	l8934
 13022  089D                     l8926:	
 13023  089D  0020               	movlb	0	; select bank0
 13024  089E  08EB               	movf	setDimmerLights@status,f
 13025  089F  1D03               	skipz
 13026  08A0  28B7               	goto	l8934
 13027                           
 13028                           ;Dimmer_B1.c: 609: DimmerLights->StatusFlag = 0;
 13029  08A1  0A75               	incf	_DimmerLights,w
 13030  08A2  0086               	movwf	6
 13031  08A3  3001               	movlw	1	; select bank2/3
 13032  08A4  0087               	movwf	7
 13033  08A5  1101               	bcf	1,2
 13034                           
 13035                           ;Dimmer_B1.c: 610: DimmerLights->Loop = 0;
 13036  08A6  0875               	movf	_DimmerLights,w
 13037  08A7  3E0A               	addlw	10
 13038  08A8  0086               	movwf	6
 13039  08A9  3001               	movlw	1	; select bank2/3
 13040  08AA  0087               	movwf	7
 13041  08AB  1381               	bcf	1,7
 13042                           
 13043                           ;Dimmer_B1.c: 611: setDimmerLights_Line(0);
 13044  08AC  3000               	movlw	0
 13045  08AD  319D  252B  3188   	fcall	_setDimmerLights_Line
 13046                           
 13047                           ;Dimmer_B1.c: 613: setLED(lights, 1);
 13048  08B0  0020               	movlb	0	; select bank0
 13049  08B1  01A2               	clrf	setLED@command
 13050  08B2  0AA2               	incf	setLED@command,f
 13051  08B3  086D               	movf	setDimmerLights@lights,w
 13052  08B4  3193  23A7  3188   	fcall	_setLED
 13053  08B7                     l8934:	
 13054                           ;Dimmer_B1.c: 614: ;;
 13055                           
 13056                           
 13057                           ;Dimmer_B1.c: 615: }
 13058                           ;Dimmer_B1.c: 617: setRF_DimmerLights(lights, status);
 13059  08B7  0020               	movlb	0	; select bank0
 13060  08B8  086B               	movf	setDimmerLights@status,w
 13061  08B9  00EC               	movwf	??_setDimmerLights
 13062  08BA  086C               	movf	??_setDimmerLights,w
 13063  08BB  00E6               	movwf	setRF_DimmerLights@on
 13064  08BC  086D               	movf	setDimmerLights@lights,w
 13065  08BD  3188  2011  3188   	fcall	_setRF_DimmerLights
 13066                           
 13067                           ;Dimmer_B1.c: 618: setTxData();
 13068  08C0  318D  255F         	fcall	_setTxData
 13069  08C2  0008               	return
 13070  08C3                     __end_of_setDimmerLights:	
 13071                           
 13072                           	psect	text79
 13073  0D5F                     __ptext79:	
 13074 ;; *************** function _setTxData *****************
 13075 ;; Defined at:
 13076 ;;		line 207 in file "../src/RF_Control_B1.c"
 13077 ;; Parameters:    Size  Location     Type
 13078 ;;		None
 13079 ;; Auto vars:     Size  Location     Type
 13080 ;;  i               1    0        unsigned char 
 13081 ;; Return value:  Size  Location     Type
 13082 ;;		None               void
 13083 ;; Registers used:
 13084 ;;		wreg, fsr1l, fsr1h
 13085 ;; Tracked objects:
 13086 ;;		On entry : 0/0
 13087 ;;		On exit  : 0/0
 13088 ;;		Unchanged: 0/0
 13089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13094 ;;Total ram usage:        1 bytes
 13095 ;; Hardware stack levels used:    1
 13096 ;; Hardware stack levels required when called:    5
 13097 ;; This function calls:
 13098 ;;		Nothing
 13099 ;; This function is called by:
 13100 ;;		_setDimmerLights
 13101 ;;		_setDimmerLights_Adj
 13102 ;;		_getRxData
 13103 ;;		_setControl_Lights_Table
 13104 ;;		_setRFSW_Control
 13105 ;;		_setRFSW_AdjControl
 13106 ;; This function uses a non-reentrant model
 13107 ;;
 13108                           
 13109                           
 13110                           ;psect for function _setTxData
 13111  0D5F                     _setTxData:	
 13112                           
 13113                           ;RF_Control_B1.c: 208: char i;
 13114                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 13115                           
 13116                           ;incstack = 0
 13117                           ; Regs used in _setTxData: [wregfsr1]
 13118  0D5F  0021               	movlb	1	; select bank1
 13119  0D60  1C3A               	btfss	_RF1^(0+128),0
 13120  0D61  0008               	return
 13121                           
 13122                           ;RF_Control_B1.c: 211: if (RF1.TransceiveGO == 0) {
 13123  0D62  193A               	btfsc	_RF1^(0+128),2
 13124  0D63  0008               	return
 13125                           
 13126                           ;RF_Control_B1.c: 212: RF1.TransceiveGO = 1;
 13127  0D64  153A               	bsf	_RF1^(0+128),2
 13128                           
 13129                           ;RF_Control_B1.c: 213: RF1.RunTime = 20;
 13130  0D65  3014               	movlw	20
 13131  0D66  00C1               	movwf	(_RF1^(0+128)+7)
 13132  0D67  3000               	movlw	0
 13133  0D68  00C2               	movwf	(_RF1^(0+128)+8)
 13134                           
 13135                           ;RF_Control_B1.c: 225: RF_Data[0] = 0x63;
 13136  0D69  3063               	movlw	99
 13137  0D6A  0020               	movlb	0	; select bank0
 13138  0D6B  00A0               	movwf	??_setTxData
 13139  0D6C  0820               	movf	??_setTxData,w
 13140  0D6D  0023               	movlb	3	; select bank3
 13141  0D6E  00A0               	movwf	_RF_Data^(0+384)
 13142                           
 13143                           ;RF_Control_B1.c: 226: RF_Data[1] = 0x02;
 13144  0D6F  3002               	movlw	2
 13145  0D70  0020               	movlb	0	; select bank0
 13146  0D71  00A0               	movwf	??_setTxData
 13147  0D72  0820               	movf	??_setTxData,w
 13148  0D73  0023               	movlb	3	; select bank3
 13149  0D74  00A1               	movwf	(_RF_Data^(0+384)+1)
 13150                           
 13151                           ;RF_Control_B1.c: 228: RF_Data[2] = product->Data[2];
 13152  0D75  0879               	movf	_product,w
 13153  0D76  0086               	movwf	6
 13154  0D77  3002               	movlw	2	; select bank4/5
 13155  0D78  0087               	movwf	7
 13156  0D79  3002               	movlw	2	; select bank4/5
 13157  0D7A  3F42               	moviw [2]fsr1
 13158  0D7B  00A2               	movwf	(_RF_Data^(0+384)+2)
 13159                           
 13160                           ;RF_Control_B1.c: 229: RF_Data[3] = product->Data[3];
 13161  0D7C  0879               	movf	_product,w
 13162  0D7D  0086               	movwf	6
 13163  0D7E  3002               	movlw	2	; select bank4/5
 13164  0D7F  0087               	movwf	7
 13165  0D80  3002               	movlw	2	; select bank4/5
 13166  0D81  3F43               	moviw [3]fsr1
 13167  0D82  00A3               	movwf	(_RF_Data^(0+384)+3)
 13168                           
 13169                           ;RF_Control_B1.c: 230: RF_Data[4] = product->Data[4];
 13170  0D83  0879               	movf	_product,w
 13171  0D84  0086               	movwf	6
 13172  0D85  3002               	movlw	2	; select bank4/5
 13173  0D86  0087               	movwf	7
 13174  0D87  3002               	movlw	2	; select bank4/5
 13175  0D88  3F44               	moviw [4]fsr1
 13176  0D89  00A4               	movwf	(_RF_Data^(0+384)+4)
 13177                           
 13178                           ;RF_Control_B1.c: 231: RF_Data[5] = product->Data[5];
 13179  0D8A  0879               	movf	_product,w
 13180  0D8B  0086               	movwf	6
 13181  0D8C  3002               	movlw	2	; select bank4/5
 13182  0D8D  0087               	movwf	7
 13183  0D8E  3002               	movlw	2	; select bank4/5
 13184  0D8F  3F45               	moviw [5]fsr1
 13185  0D90  00A5               	movwf	(_RF_Data^(0+384)+5)
 13186                           
 13187                           ;RF_Control_B1.c: 232: RF_Data[6] = product->Data[6];
 13188  0D91  0879               	movf	_product,w
 13189  0D92  0086               	movwf	6
 13190  0D93  3002               	movlw	2	; select bank4/5
 13191  0D94  0087               	movwf	7
 13192  0D95  3002               	movlw	2	; select bank4/5
 13193  0D96  3F46               	moviw [6]fsr1
 13194  0D97  00A6               	movwf	(_RF_Data^(0+384)+6)
 13195                           
 13196                           ;RF_Control_B1.c: 233: RF_Data[7] = product->Data[7];
 13197  0D98  0879               	movf	_product,w
 13198  0D99  0086               	movwf	6
 13199  0D9A  3002               	movlw	2	; select bank4/5
 13200  0D9B  0087               	movwf	7
 13201  0D9C  3002               	movlw	2	; select bank4/5
 13202  0D9D  3F47               	moviw [7]fsr1
 13203  0D9E  00A7               	movwf	(_RF_Data^(0+384)+7)
 13204                           
 13205                           ;RF_Control_B1.c: 234: RF_Data[8] = product->Data[8];
 13206  0D9F  0879               	movf	_product,w
 13207  0DA0  0086               	movwf	6
 13208  0DA1  3002               	movlw	2	; select bank4/5
 13209  0DA2  0087               	movwf	7
 13210  0DA3  3002               	movlw	2	; select bank4/5
 13211  0DA4  3F48               	moviw [8]fsr1
 13212  0DA5  00A8               	movwf	(_RF_Data^(0+384)+8)
 13213                           
 13214                           ;RF_Control_B1.c: 235: RF_Data[9] = product->Data[9];
 13215  0DA6  0879               	movf	_product,w
 13216  0DA7  0086               	movwf	6
 13217  0DA8  3002               	movlw	2	; select bank4/5
 13218  0DA9  0087               	movwf	7
 13219  0DAA  3002               	movlw	2	; select bank4/5
 13220  0DAB  3F49               	moviw [9]fsr1
 13221  0DAC  00A9               	movwf	(_RF_Data^(0+384)+9)
 13222                           
 13223                           ;RF_Control_B1.c: 236: RF_Data[10] = product->Data[10];
 13224  0DAD  0879               	movf	_product,w
 13225  0DAE  0086               	movwf	6
 13226  0DAF  3002               	movlw	2	; select bank4/5
 13227  0DB0  0087               	movwf	7
 13228  0DB1  3002               	movlw	2	; select bank4/5
 13229  0DB2  3F4A               	moviw [10]fsr1
 13230  0DB3  00AA               	movwf	(_RF_Data^(0+384)+10)
 13231                           
 13232                           ;RF_Control_B1.c: 237: RF_Data[11] = product->Data[11];
 13233  0DB4  0879               	movf	_product,w
 13234  0DB5  0086               	movwf	6
 13235  0DB6  3002               	movlw	2	; select bank4/5
 13236  0DB7  0087               	movwf	7
 13237  0DB8  3002               	movlw	2	; select bank4/5
 13238  0DB9  3F4B               	moviw [11]fsr1
 13239  0DBA  00AB               	movwf	(_RF_Data^(0+384)+11)
 13240                           
 13241                           ;RF_Control_B1.c: 238: RF_Data[12] = product->Data[12];
 13242  0DBB  0879               	movf	_product,w
 13243  0DBC  0086               	movwf	6
 13244  0DBD  3002               	movlw	2	; select bank4/5
 13245  0DBE  0087               	movwf	7
 13246  0DBF  3002               	movlw	2	; select bank4/5
 13247  0DC0  3F4C               	moviw [12]fsr1
 13248  0DC1  00AC               	movwf	(_RF_Data^(0+384)+12)
 13249                           
 13250                           ;RF_Control_B1.c: 239: RF_Data[13] = product->Data[13];
 13251  0DC2  0879               	movf	_product,w
 13252  0DC3  0086               	movwf	6
 13253  0DC4  3002               	movlw	2	; select bank4/5
 13254  0DC5  0087               	movwf	7
 13255  0DC6  3002               	movlw	2	; select bank4/5
 13256  0DC7  3F4D               	moviw [13]fsr1
 13257  0DC8  00AD               	movwf	(_RF_Data^(0+384)+13)
 13258                           
 13259                           ;RF_Control_B1.c: 240: RF_Data[14] = product->Data[14];
 13260  0DC9  0879               	movf	_product,w
 13261  0DCA  0086               	movwf	6
 13262  0DCB  3002               	movlw	2	; select bank4/5
 13263  0DCC  0087               	movwf	7
 13264  0DCD  3002               	movlw	2	; select bank4/5
 13265  0DCE  3F4E               	moviw [14]fsr1
 13266  0DCF  00AE               	movwf	(_RF_Data^(0+384)+14)
 13267                           
 13268                           ;RF_Control_B1.c: 241: RF_Data[15] = product->Data[15];
 13269  0DD0  0879               	movf	_product,w
 13270  0DD1  0086               	movwf	6
 13271  0DD2  3002               	movlw	2	; select bank4/5
 13272  0DD3  0087               	movwf	7
 13273  0DD4  3002               	movlw	2	; select bank4/5
 13274  0DD5  3F4F               	moviw [15]fsr1
 13275  0DD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 13276                           
 13277                           ;RF_Control_B1.c: 242: RF_Data[16] = product->Data[16];
 13278  0DD7  0879               	movf	_product,w
 13279  0DD8  0086               	movwf	6
 13280  0DD9  3002               	movlw	2	; select bank4/5
 13281  0DDA  0087               	movwf	7
 13282  0DDB  3002               	movlw	2	; select bank4/5
 13283  0DDC  3F50               	moviw [16]fsr1
 13284  0DDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 13285                           
 13286                           ;RF_Control_B1.c: 243: RF_Data[17] = product->Data[17];
 13287  0DDE  0879               	movf	_product,w
 13288  0DDF  0086               	movwf	6
 13289  0DE0  3002               	movlw	2	; select bank4/5
 13290  0DE1  0087               	movwf	7
 13291  0DE2  3002               	movlw	2	; select bank4/5
 13292  0DE3  3F51               	moviw [17]fsr1
 13293  0DE4  00B1               	movwf	(_RF_Data^(0+384)+17)
 13294                           
 13295                           ;RF_Control_B1.c: 244: RF_Data[18] = product->Data[18];
 13296  0DE5  0879               	movf	_product,w
 13297  0DE6  0086               	movwf	6
 13298  0DE7  3002               	movlw	2	; select bank4/5
 13299  0DE8  0087               	movwf	7
 13300  0DE9  3002               	movlw	2	; select bank4/5
 13301  0DEA  3F52               	moviw [18]fsr1
 13302  0DEB  00B2               	movwf	(_RF_Data^(0+384)+18)
 13303                           
 13304                           ;RF_Control_B1.c: 245: RF_Data[19] = product->Data[19];
 13305  0DEC  0879               	movf	_product,w
 13306  0DED  0086               	movwf	6
 13307  0DEE  3002               	movlw	2	; select bank4/5
 13308  0DEF  0087               	movwf	7
 13309  0DF0  3002               	movlw	2	; select bank4/5
 13310  0DF1  3F53               	moviw [19]fsr1
 13311  0DF2  00B3               	movwf	(_RF_Data^(0+384)+19)
 13312                           
 13313                           ;RF_Control_B1.c: 246: RF_Data[20] = 209;
 13314  0DF3  30D1               	movlw	209
 13315  0DF4  0020               	movlb	0	; select bank0
 13316  0DF5  00A0               	movwf	??_setTxData
 13317  0DF6  0820               	movf	??_setTxData,w
 13318  0DF7  0023               	movlb	3	; select bank3
 13319  0DF8  00B4               	movwf	(_RF_Data^(0+384)+20)
 13320  0DF9  0008               	return
 13321  0DFA                     __end_of_setTxData:	
 13322                           
 13323                           	psect	text80
 13324  0811                     __ptext80:	
 13325 ;; *************** function _setRF_DimmerLights *****************
 13326 ;; Defined at:
 13327 ;;		line 484 in file "../src/RF_Control_B1.c"
 13328 ;; Parameters:    Size  Location     Type
 13329 ;;  lights          1    wreg     unsigned char 
 13330 ;;  on              1   70[BANK0 ] unsigned char 
 13331 ;; Auto vars:     Size  Location     Type
 13332 ;;  lights          1   74[BANK0 ] unsigned char 
 13333 ;;  status          1   73[BANK0 ] unsigned char 
 13334 ;; Return value:  Size  Location     Type
 13335 ;;		None               void
 13336 ;; Registers used:
 13337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13338 ;; Tracked objects:
 13339 ;;		On entry : 0/0
 13340 ;;		On exit  : 0/0
 13341 ;;		Unchanged: 0/0
 13342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13343 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13345 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;Total ram usage:        5 bytes
 13348 ;; Hardware stack levels used:    1
 13349 ;; Hardware stack levels required when called:    6
 13350 ;; This function calls:
 13351 ;;		_setProductData
 13352 ;; This function is called by:
 13353 ;;		_setDimmerLights
 13354 ;;		_setDimmerLights_Adj
 13355 ;;		_setRFSW_Control
 13356 ;; This function uses a non-reentrant model
 13357 ;;
 13358                           
 13359                           
 13360                           ;psect for function _setRF_DimmerLights
 13361  0811                     _setRF_DimmerLights:	
 13362                           
 13363                           ;incstack = 0
 13364                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13365                           ;setRF_DimmerLights@lights stored from wreg
 13366  0811  0020               	movlb	0	; select bank0
 13367  0812  00EA               	movwf	setRF_DimmerLights@lights
 13368                           
 13369                           ;RF_Control_B1.c: 485: char status = 1;
 13370  0813  01E9               	clrf	setRF_DimmerLights@status
 13371  0814  0AE9               	incf	setRF_DimmerLights@status,f
 13372                           
 13373                           ;RF_Control_B1.c: 486: status <<= (lights - 1);
 13374  0815  086A               	movf	setRF_DimmerLights@lights,w
 13375  0816  3EFF               	addlw	-1
 13376  0817  0A89               	incf	9,f
 13377  0818  281B               	goto	u8910
 13378  0819                     u8915:	
 13379  0819  1003               	clrc
 13380  081A  0DE9               	rlf	setRF_DimmerLights@status,f
 13381  081B                     u8910:	
 13382  081B  3EFF               	addlw	-1
 13383  081C  1D03               	skipz
 13384  081D  2819               	goto	u8915
 13385                           
 13386                           ;RF_Control_B1.c: 487: setProductData(11, lights);
 13387  081E  086A               	movf	setRF_DimmerLights@lights,w
 13388  081F  00E7               	movwf	??_setRF_DimmerLights
 13389  0820  0867               	movf	??_setRF_DimmerLights,w
 13390  0821  00E2               	movwf	setProductData@value
 13391  0822  300B               	movlw	11
 13392  0823  319D  2573  3188   	fcall	_setProductData
 13393                           
 13394                           ;RF_Control_B1.c: 495: setProductData(9, product->Data[20 + lights]);
 13395  0826  0020               	movlb	0	; select bank0
 13396  0827  086A               	movf	setRF_DimmerLights@lights,w
 13397  0828  3E14               	addlw	20
 13398  0829  0779               	addwf	_product,w
 13399  082A  00E7               	movwf	??_setRF_DimmerLights
 13400  082B  0867               	movf	??_setRF_DimmerLights,w
 13401  082C  0086               	movwf	6
 13402  082D  3002               	movlw	2	; select bank4/5
 13403  082E  0087               	movwf	7
 13404  082F  0801               	movf	1,w
 13405  0830  00E8               	movwf	??_setRF_DimmerLights+1
 13406  0831  0868               	movf	??_setRF_DimmerLights+1,w
 13407  0832  00E2               	movwf	setProductData@value
 13408  0833  3009               	movlw	9
 13409  0834  319D  2573  3188   	fcall	_setProductData
 13410                           
 13411                           ;RF_Control_B1.c: 496: setProductData(17, product->Data[26 + lights]);
 13412  0837  0020               	movlb	0	; select bank0
 13413  0838  086A               	movf	setRF_DimmerLights@lights,w
 13414  0839  3E1A               	addlw	26
 13415  083A  0779               	addwf	_product,w
 13416  083B  00E7               	movwf	??_setRF_DimmerLights
 13417  083C  0867               	movf	??_setRF_DimmerLights,w
 13418  083D  0086               	movwf	6
 13419  083E  3002               	movlw	2	; select bank4/5
 13420  083F  0087               	movwf	7
 13421  0840  0801               	movf	1,w
 13422  0841  00E8               	movwf	??_setRF_DimmerLights+1
 13423  0842  0868               	movf	??_setRF_DimmerLights+1,w
 13424  0843  00E2               	movwf	setProductData@value
 13425  0844  3011               	movlw	17
 13426  0845  319D  2573  3188   	fcall	_setProductData
 13427                           
 13428                           ;RF_Control_B1.c: 497: if (on == 1) {
 13429  0848  0020               	movlb	0	; select bank0
 13430  0849  0866               	movf	setRF_DimmerLights@on,w
 13431  084A  3A01               	xorlw	1
 13432  084B  1D03               	skipz
 13433  084C  285B               	goto	l8448
 13434                           
 13435                           ;RF_Control_B1.c: 498: setProductData(15, (product->Data[15] | status));
 13436  084D  0879               	movf	_product,w
 13437  084E  3E0F               	addlw	15
 13438  084F  0086               	movwf	6
 13439  0850  3002               	movlw	2	; select bank4/5
 13440  0851  0087               	movwf	7
 13441  0852  0801               	movf	1,w
 13442  0853  0469               	iorwf	setRF_DimmerLights@status,w
 13443  0854  00E7               	movwf	??_setRF_DimmerLights
 13444  0855  0867               	movf	??_setRF_DimmerLights,w
 13445  0856  00E2               	movwf	setProductData@value
 13446  0857  300F               	movlw	15
 13447  0858  319D  2573         	fcall	_setProductData
 13448                           
 13449                           ;RF_Control_B1.c: 499: } else {
 13450  085A  0008               	return
 13451  085B                     l8448:	
 13452                           
 13453                           ;RF_Control_B1.c: 500: setProductData(15, (product->Data[15]&(~status)));
 13454  085B  0879               	movf	_product,w
 13455  085C  3E0F               	addlw	15
 13456  085D  0086               	movwf	6
 13457  085E  3002               	movlw	2	; select bank4/5
 13458  085F  0087               	movwf	7
 13459  0860  0020               	movlb	0	; select bank0
 13460  0861  0969               	comf	setRF_DimmerLights@status,w
 13461  0862  0501               	andwf	1,w
 13462  0863  00E7               	movwf	??_setRF_DimmerLights
 13463  0864  0867               	movf	??_setRF_DimmerLights,w
 13464  0865  00E2               	movwf	setProductData@value
 13465  0866  300F               	movlw	15
 13466  0867  319D  2573         	fcall	_setProductData
 13467  0869  0008               	return
 13468  086A                     __end_of_setRF_DimmerLights:	
 13469                           
 13470                           	psect	text81
 13471  0B02                     __ptext81:	
 13472 ;; *************** function _setPercentValue *****************
 13473 ;; Defined at:
 13474 ;;		line 967 in file "../src/Dimmer_B1.c"
 13475 ;; Parameters:    Size  Location     Type
 13476 ;;  value           1    wreg     unsigned char 
 13477 ;; Auto vars:     Size  Location     Type
 13478 ;;  value           1   62[BANK0 ] unsigned char 
 13479 ;;  i               3   63[BANK0 ] float 
 13480 ;; Return value:  Size  Location     Type
 13481 ;;                  1    wreg      unsigned char 
 13482 ;; Registers used:
 13483 ;;		wreg, status,2, status,0, pclath, cstack
 13484 ;; Tracked objects:
 13485 ;;		On entry : 0/0
 13486 ;;		On exit  : 0/0
 13487 ;;		Unchanged: 0/0
 13488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13493 ;;Total ram usage:        6 bytes
 13494 ;; Hardware stack levels used:    1
 13495 ;; Hardware stack levels required when called:    7
 13496 ;; This function calls:
 13497 ;;		___awtoft
 13498 ;;		___ftadd
 13499 ;;		___ftdiv
 13500 ;;		___ftneg
 13501 ;;		___fttol
 13502 ;; This function is called by:
 13503 ;;		_setDimmerLights
 13504 ;;		_setDimmerLights_Adj
 13505 ;;		_Flash_Memory_Initialization
 13506 ;; This function uses a non-reentrant model
 13507 ;;
 13508                           
 13509                           
 13510                           ;psect for function _setPercentValue
 13511  0B02                     _setPercentValue:	
 13512                           
 13513                           ;incstack = 0
 13514                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13515                           ;setPercentValue@value stored from wreg
 13516  0B02  0020               	movlb	0	; select bank0
 13517  0B03  00DE               	movwf	setPercentValue@value
 13518                           
 13519                           ;Dimmer_B1.c: 975: float i = ((char)(45*0.8)) - ((char)(15*0.8));
 13520  0B04  3000               	movlw	0
 13521  0B05  00DF               	movwf	setPercentValue@i
 13522  0B06  30C0               	movlw	192
 13523  0B07  00E0               	movwf	setPercentValue@i+1
 13524  0B08  3041               	movlw	65
 13525  0B09  00E1               	movwf	setPercentValue@i+2
 13526                           
 13527                           ;Dimmer_B1.c: 976: i /= 100;
 13528  0B0A  3000               	movlw	0
 13529  0B0B  00AE               	movwf	___ftdiv@f2
 13530  0B0C  30C8               	movlw	200
 13531  0B0D  00AF               	movwf	___ftdiv@f2+1
 13532  0B0E  3042               	movlw	66
 13533  0B0F  00B0               	movwf	___ftdiv@f2+2
 13534  0B10  085F               	movf	setPercentValue@i,w
 13535  0B11  00B1               	movwf	___ftdiv@f1
 13536  0B12  0860               	movf	setPercentValue@i+1,w
 13537  0B13  00B2               	movwf	___ftdiv@f1+1
 13538  0B14  0861               	movf	setPercentValue@i+2,w
 13539  0B15  00B3               	movwf	___ftdiv@f1+2
 13540  0B16  318D  25FA  318B   	fcall	___ftdiv
 13541  0B19  0020               	movlb	0	; select bank0
 13542  0B1A  082E               	movf	?___ftdiv,w
 13543  0B1B  00DF               	movwf	setPercentValue@i
 13544  0B1C  082F               	movf	?___ftdiv+1,w
 13545  0B1D  00E0               	movwf	setPercentValue@i+1
 13546  0B1E  0830               	movf	?___ftdiv+2,w
 13547  0B1F  00E1               	movwf	setPercentValue@i+2
 13548                           
 13549                           ;Dimmer_B1.c: 978: return (char) (100 - ((((char)(45*0.8)) - value) / i));
 13550  0B20  085E               	movf	setPercentValue@value,w
 13551  0B21  00DC               	movwf	??_setPercentValue
 13552  0B22  01DD               	clrf	??_setPercentValue+1
 13553  0B23  09DC               	comf	??_setPercentValue,f
 13554  0B24  09DD               	comf	??_setPercentValue+1,f
 13555  0B25  0ADC               	incf	??_setPercentValue,f
 13556  0B26  1903               	skipnz
 13557  0B27  0ADD               	incf	??_setPercentValue+1,f
 13558  0B28  085C               	movf	??_setPercentValue,w
 13559  0B29  3E24               	addlw	36
 13560  0B2A  00A8               	movwf	___awtoft@c
 13561  0B2B  3000               	movlw	0
 13562  0B2C  3D5D               	addwfc	??_setPercentValue+1,w
 13563  0B2D  00A9               	movwf	___awtoft@c+1
 13564  0B2E  319F  27DE  318B   	fcall	___awtoft
 13565  0B31  0020               	movlb	0	; select bank0
 13566  0B32  0828               	movf	?___awtoft,w
 13567  0B33  00B1               	movwf	___ftdiv@f1
 13568  0B34  0829               	movf	?___awtoft+1,w
 13569  0B35  00B2               	movwf	___ftdiv@f1+1
 13570  0B36  082A               	movf	?___awtoft+2,w
 13571  0B37  00B3               	movwf	___ftdiv@f1+2
 13572  0B38  085F               	movf	setPercentValue@i,w
 13573  0B39  00AE               	movwf	___ftdiv@f2
 13574  0B3A  0860               	movf	setPercentValue@i+1,w
 13575  0B3B  00AF               	movwf	___ftdiv@f2+1
 13576  0B3C  0861               	movf	setPercentValue@i+2,w
 13577  0B3D  00B0               	movwf	___ftdiv@f2+2
 13578  0B3E  318D  25FA  318B   	fcall	___ftdiv
 13579  0B41  0020               	movlb	0	; select bank0
 13580  0B42  082E               	movf	?___ftdiv,w
 13581  0B43  00BE               	movwf	___ftneg@f1
 13582  0B44  082F               	movf	?___ftdiv+1,w
 13583  0B45  00BF               	movwf	___ftneg@f1+1
 13584  0B46  0830               	movf	?___ftdiv+2,w
 13585  0B47  00C0               	movwf	___ftneg@f1+2
 13586  0B48  319C  24A2  318B   	fcall	___ftneg
 13587  0B4B  0020               	movlb	0	; select bank0
 13588  0B4C  083E               	movf	?___ftneg,w
 13589  0B4D  00C4               	movwf	___ftadd@f2
 13590  0B4E  083F               	movf	?___ftneg+1,w
 13591  0B4F  00C5               	movwf	___ftadd@f2+1
 13592  0B50  0840               	movf	?___ftneg+2,w
 13593  0B51  00C6               	movwf	___ftadd@f2+2
 13594  0B52  3000               	movlw	0
 13595  0B53  00C1               	movwf	___ftadd@f1
 13596  0B54  30C8               	movlw	200
 13597  0B55  00C2               	movwf	___ftadd@f1+1
 13598  0B56  3042               	movlw	66
 13599  0B57  00C3               	movwf	___ftadd@f1+2
 13600  0B58  3184  242E  318B   	fcall	___ftadd
 13601  0B5B  0020               	movlb	0	; select bank0
 13602  0B5C  0841               	movf	?___ftadd,w
 13603  0B5D  00CE               	movwf	___fttol@f1
 13604  0B5E  0842               	movf	?___ftadd+1,w
 13605  0B5F  00CF               	movwf	___fttol@f1+1
 13606  0B60  0843               	movf	?___ftadd+2,w
 13607  0B61  00D0               	movwf	___fttol@f1+2
 13608  0B62  318C  244D         	fcall	___fttol
 13609  0B64  0020               	movlb	0	; select bank0
 13610  0B65  084E               	movf	?___fttol,w
 13611  0B66  0008               	return
 13612  0B67                     __end_of_setPercentValue:	
 13613                           
 13614                           	psect	text82
 13615  0C4D                     __ptext82:	
 13616 ;; *************** function ___fttol *****************
 13617 ;; Defined at:
 13618 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13619 ;; Parameters:    Size  Location     Type
 13620 ;;  f1              3   46[BANK0 ] float 
 13621 ;; Auto vars:     Size  Location     Type
 13622 ;;  lval            4   55[BANK0 ] unsigned long 
 13623 ;;  exp1            1   59[BANK0 ] unsigned char 
 13624 ;;  sign1           1   54[BANK0 ] unsigned char 
 13625 ;; Return value:  Size  Location     Type
 13626 ;;                  4   46[BANK0 ] long 
 13627 ;; Registers used:
 13628 ;;		wreg, status,2, status,0
 13629 ;; Tracked objects:
 13630 ;;		On entry : 0/0
 13631 ;;		On exit  : 0/0
 13632 ;;		Unchanged: 0/0
 13633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13634 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13635 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13636 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;Total ram usage:       14 bytes
 13639 ;; Hardware stack levels used:    1
 13640 ;; Hardware stack levels required when called:    5
 13641 ;; This function calls:
 13642 ;;		Nothing
 13643 ;; This function is called by:
 13644 ;;		_getPercentValue
 13645 ;;		_setPercentValue
 13646 ;; This function uses a non-reentrant model
 13647 ;;
 13648                           
 13649                           
 13650                           ;psect for function ___fttol
 13651  0C4D                     ___fttol:	
 13652                           
 13653                           ;incstack = 0
 13654                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13655  0C4D  0020               	movlb	0	; select bank0
 13656  0C4E  084E               	movf	___fttol@f1,w
 13657  0C4F  00D2               	movwf	??___fttol
 13658  0C50  084F               	movf	___fttol@f1+1,w
 13659  0C51  00D3               	movwf	??___fttol+1
 13660  0C52  0850               	movf	___fttol@f1+2,w
 13661  0C53  00D4               	movwf	??___fttol+2
 13662  0C54  1003               	clrc
 13663  0C55  0D53               	rlf	??___fttol+1,w
 13664  0C56  0D54               	rlf	??___fttol+2,w
 13665  0C57  00D5               	movwf	??___fttol+3
 13666  0C58  0855               	movf	??___fttol+3,w
 13667  0C59  00DB               	movwf	___fttol@exp1
 13668  0C5A  08DB               	movf	___fttol@exp1,f
 13669  0C5B  1D03               	skipz
 13670  0C5C  2C66               	goto	l8212
 13671  0C5D  3000               	movlw	0
 13672  0C5E  00D1               	movwf	?___fttol+3
 13673  0C5F  3000               	movlw	0
 13674  0C60  00D0               	movwf	?___fttol+2
 13675  0C61  3000               	movlw	0
 13676  0C62  00CF               	movwf	?___fttol+1
 13677  0C63  3000               	movlw	0
 13678  0C64  00CE               	movwf	?___fttol
 13679  0C65  0008               	return
 13680  0C66                     l8212:	
 13681  0C66  084E               	movf	___fttol@f1,w
 13682  0C67  00D2               	movwf	??___fttol
 13683  0C68  084F               	movf	___fttol@f1+1,w
 13684  0C69  00D3               	movwf	??___fttol+1
 13685  0C6A  0850               	movf	___fttol@f1+2,w
 13686  0C6B  00D4               	movwf	??___fttol+2
 13687  0C6C  3017               	movlw	23
 13688  0C6D                     u8545:	
 13689  0C6D  36D4               	lsrf	??___fttol+2,f
 13690  0C6E  0CD3               	rrf	??___fttol+1,f
 13691  0C6F  0CD2               	rrf	??___fttol,f
 13692  0C70  0B89               	decfsz	9,f
 13693  0C71  2C6D               	goto	u8545
 13694  0C72  0852               	movf	??___fttol,w
 13695  0C73  00D5               	movwf	??___fttol+3
 13696  0C74  0855               	movf	??___fttol+3,w
 13697  0C75  00D6               	movwf	___fttol@sign1
 13698  0C76  17CF               	bsf	___fttol@f1+1,7
 13699  0C77  30FF               	movlw	255
 13700  0C78  05CE               	andwf	___fttol@f1,f
 13701  0C79  30FF               	movlw	255
 13702  0C7A  05CF               	andwf	___fttol@f1+1,f
 13703  0C7B  3000               	movlw	0
 13704  0C7C  05D0               	andwf	___fttol@f1+2,f
 13705  0C7D  084E               	movf	___fttol@f1,w
 13706  0C7E  00D7               	movwf	___fttol@lval
 13707  0C7F  084F               	movf	___fttol@f1+1,w
 13708  0C80  00D8               	movwf	___fttol@lval+1
 13709  0C81  0850               	movf	___fttol@f1+2,w
 13710  0C82  00D9               	movwf	___fttol@lval+2
 13711  0C83  01DA               	clrf	___fttol@lval+3
 13712  0C84  308E               	movlw	142
 13713  0C85  02DB               	subwf	___fttol@exp1,f
 13714  0C86  1FDB               	btfss	___fttol@exp1,7
 13715  0C87  2CA4               	goto	l8232
 13716  0C88  085B               	movf	___fttol@exp1,w
 13717  0C89  3A80               	xorlw	128
 13718  0C8A  3E8F               	addlw	143
 13719  0C8B  1803               	skipnc
 13720  0C8C  2C96               	goto	l8230
 13721  0C8D  3000               	movlw	0
 13722  0C8E  00D1               	movwf	?___fttol+3
 13723  0C8F  3000               	movlw	0
 13724  0C90  00D0               	movwf	?___fttol+2
 13725  0C91  3000               	movlw	0
 13726  0C92  00CF               	movwf	?___fttol+1
 13727  0C93  3000               	movlw	0
 13728  0C94  00CE               	movwf	?___fttol
 13729  0C95  0008               	return
 13730  0C96                     l8230:	
 13731  0C96  3001               	movlw	1
 13732  0C97                     u8575:	
 13733  0C97  36DA               	lsrf	___fttol@lval+3,f
 13734  0C98  0CD9               	rrf	___fttol@lval+2,f
 13735  0C99  0CD8               	rrf	___fttol@lval+1,f
 13736  0C9A  0CD7               	rrf	___fttol@lval,f
 13737  0C9B  0B89               	decfsz	9,f
 13738  0C9C  2C97               	goto	u8575
 13739  0C9D  3001               	movlw	1
 13740  0C9E  00D2               	movwf	??___fttol
 13741  0C9F  0852               	movf	??___fttol,w
 13742  0CA0  07DB               	addwf	___fttol@exp1,f
 13743  0CA1  1903               	btfsc	3,2
 13744  0CA2  2CBD               	goto	l8242
 13745  0CA3  2C96               	goto	l8230
 13746  0CA4                     l8232:	
 13747  0CA4  3018               	movlw	24
 13748  0CA5  025B               	subwf	___fttol@exp1,w
 13749  0CA6  1C03               	skipc
 13750  0CA7  2CBA               	goto	l8240
 13751  0CA8  3000               	movlw	0
 13752  0CA9  00D1               	movwf	?___fttol+3
 13753  0CAA  3000               	movlw	0
 13754  0CAB  00D0               	movwf	?___fttol+2
 13755  0CAC  3000               	movlw	0
 13756  0CAD  00CF               	movwf	?___fttol+1
 13757  0CAE  3000               	movlw	0
 13758  0CAF  00CE               	movwf	?___fttol
 13759  0CB0  0008               	return
 13760  0CB1                     l8238:	
 13761  0CB1  3001               	movlw	1
 13762  0CB2                     u8605:	
 13763  0CB2  35D7               	lslf	___fttol@lval,f
 13764  0CB3  0DD8               	rlf	___fttol@lval+1,f
 13765  0CB4  0DD9               	rlf	___fttol@lval+2,f
 13766  0CB5  0DDA               	rlf	___fttol@lval+3,f
 13767  0CB6  0B89               	decfsz	9,f
 13768  0CB7  2CB2               	goto	u8605
 13769  0CB8  3001               	movlw	1
 13770  0CB9  02DB               	subwf	___fttol@exp1,f
 13771  0CBA                     l8240:	
 13772  0CBA  08DB               	movf	___fttol@exp1,f
 13773  0CBB  1D03               	skipz
 13774  0CBC  2CB1               	goto	l8238
 13775  0CBD                     l8242:	
 13776  0CBD  0856               	movf	___fttol@sign1,w
 13777  0CBE  1903               	btfsc	3,2
 13778  0CBF  2CCB               	goto	l8246
 13779  0CC0  09D7               	comf	___fttol@lval,f
 13780  0CC1  09D8               	comf	___fttol@lval+1,f
 13781  0CC2  09D9               	comf	___fttol@lval+2,f
 13782  0CC3  09DA               	comf	___fttol@lval+3,f
 13783  0CC4  0AD7               	incf	___fttol@lval,f
 13784  0CC5  1903               	skipnz
 13785  0CC6  0AD8               	incf	___fttol@lval+1,f
 13786  0CC7  1903               	skipnz
 13787  0CC8  0AD9               	incf	___fttol@lval+2,f
 13788  0CC9  1903               	skipnz
 13789  0CCA  0ADA               	incf	___fttol@lval+3,f
 13790  0CCB                     l8246:	
 13791  0CCB  085A               	movf	___fttol@lval+3,w
 13792  0CCC  00D1               	movwf	?___fttol+3
 13793  0CCD  0859               	movf	___fttol@lval+2,w
 13794  0CCE  00D0               	movwf	?___fttol+2
 13795  0CCF  0858               	movf	___fttol@lval+1,w
 13796  0CD0  00CF               	movwf	?___fttol+1
 13797  0CD1  0857               	movf	___fttol@lval,w
 13798  0CD2  00CE               	movwf	?___fttol
 13799  0CD3  0008               	return
 13800  0CD4                     __end_of___fttol:	
 13801                           
 13802                           	psect	text83
 13803  1CA2                     __ptext83:	
 13804 ;; *************** function ___ftneg *****************
 13805 ;; Defined at:
 13806 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13807 ;; Parameters:    Size  Location     Type
 13808 ;;  f1              3   30[BANK0 ] float 
 13809 ;; Auto vars:     Size  Location     Type
 13810 ;;		None
 13811 ;; Return value:  Size  Location     Type
 13812 ;;                  3   30[BANK0 ] float 
 13813 ;; Registers used:
 13814 ;;		wreg
 13815 ;; Tracked objects:
 13816 ;;		On entry : 0/0
 13817 ;;		On exit  : 0/0
 13818 ;;		Unchanged: 0/0
 13819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13820 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;Total ram usage:        3 bytes
 13825 ;; Hardware stack levels used:    1
 13826 ;; Hardware stack levels required when called:    5
 13827 ;; This function calls:
 13828 ;;		Nothing
 13829 ;; This function is called by:
 13830 ;;		_getPercentValue
 13831 ;;		_setPercentValue
 13832 ;; This function uses a non-reentrant model
 13833 ;;
 13834                           
 13835                           
 13836                           ;psect for function ___ftneg
 13837  1CA2                     ___ftneg:	
 13838                           
 13839                           ;incstack = 0
 13840                           ; Regs used in ___ftneg: [wreg]
 13841  1CA2  0020               	movlb	0	; select bank0
 13842  1CA3  0840               	movf	___ftneg@f1+2,w
 13843  1CA4  043F               	iorwf	___ftneg@f1+1,w
 13844  1CA5  043E               	iorwf	___ftneg@f1,w
 13845  1CA6  1903               	skipnz
 13846  1CA7  0008               	return
 13847  1CA8  3080               	movlw	128
 13848  1CA9  06C0               	xorwf	___ftneg@f1+2,f
 13849  1CAA  0008               	return
 13850  1CAB                     __end_of___ftneg:	
 13851                           
 13852                           	psect	text84
 13853  0DFA                     __ptext84:	
 13854 ;; *************** function ___ftdiv *****************
 13855 ;; Defined at:
 13856 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13857 ;; Parameters:    Size  Location     Type
 13858 ;;  f2              3   14[BANK0 ] float 
 13859 ;;  f1              3   17[BANK0 ] float 
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;  f3              3   25[BANK0 ] float 
 13862 ;;  sign            1   29[BANK0 ] unsigned char 
 13863 ;;  exp             1   28[BANK0 ] unsigned char 
 13864 ;;  cntr            1   24[BANK0 ] unsigned char 
 13865 ;; Return value:  Size  Location     Type
 13866 ;;                  3   14[BANK0 ] float 
 13867 ;; Registers used:
 13868 ;;		wreg, status,2, status,0, pclath, cstack
 13869 ;; Tracked objects:
 13870 ;;		On entry : 0/0
 13871 ;;		On exit  : 0/0
 13872 ;;		Unchanged: 0/0
 13873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13874 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13875 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;Total ram usage:       16 bytes
 13879 ;; Hardware stack levels used:    1
 13880 ;; Hardware stack levels required when called:    6
 13881 ;; This function calls:
 13882 ;;		___ftpack
 13883 ;; This function is called by:
 13884 ;;		_getPercentValue
 13885 ;;		_setPercentValue
 13886 ;; This function uses a non-reentrant model
 13887 ;;
 13888                           
 13889                           
 13890                           ;psect for function ___ftdiv
 13891  0DFA                     ___ftdiv:	
 13892                           
 13893                           ;incstack = 0
 13894                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13895  0DFA  0020               	movlb	0	; select bank0
 13896  0DFB  0831               	movf	___ftdiv@f1,w
 13897  0DFC  00B4               	movwf	??___ftdiv
 13898  0DFD  0832               	movf	___ftdiv@f1+1,w
 13899  0DFE  00B5               	movwf	??___ftdiv+1
 13900  0DFF  0833               	movf	___ftdiv@f1+2,w
 13901  0E00  00B6               	movwf	??___ftdiv+2
 13902  0E01  1003               	clrc
 13903  0E02  0D35               	rlf	??___ftdiv+1,w
 13904  0E03  0D36               	rlf	??___ftdiv+2,w
 13905  0E04  00B7               	movwf	??___ftdiv+3
 13906  0E05  0837               	movf	??___ftdiv+3,w
 13907  0E06  00BC               	movwf	___ftdiv@exp
 13908  0E07  08BC               	movf	___ftdiv@exp,f
 13909  0E08  1D03               	skipz
 13910  0E09  2E11               	goto	l8112
 13911  0E0A  3000               	movlw	0
 13912  0E0B  00AE               	movwf	?___ftdiv
 13913  0E0C  3000               	movlw	0
 13914  0E0D  00AF               	movwf	?___ftdiv+1
 13915  0E0E  3000               	movlw	0
 13916  0E0F  00B0               	movwf	?___ftdiv+2
 13917  0E10  0008               	return
 13918  0E11                     l8112:	
 13919  0E11  082E               	movf	___ftdiv@f2,w
 13920  0E12  00B4               	movwf	??___ftdiv
 13921  0E13  082F               	movf	___ftdiv@f2+1,w
 13922  0E14  00B5               	movwf	??___ftdiv+1
 13923  0E15  0830               	movf	___ftdiv@f2+2,w
 13924  0E16  00B6               	movwf	??___ftdiv+2
 13925  0E17  1003               	clrc
 13926  0E18  0D35               	rlf	??___ftdiv+1,w
 13927  0E19  0D36               	rlf	??___ftdiv+2,w
 13928  0E1A  00B7               	movwf	??___ftdiv+3
 13929  0E1B  0837               	movf	??___ftdiv+3,w
 13930  0E1C  00BD               	movwf	___ftdiv@sign
 13931  0E1D  08BD               	movf	___ftdiv@sign,f
 13932  0E1E  1D03               	skipz
 13933  0E1F  2E27               	goto	l8118
 13934  0E20  3000               	movlw	0
 13935  0E21  00AE               	movwf	?___ftdiv
 13936  0E22  3000               	movlw	0
 13937  0E23  00AF               	movwf	?___ftdiv+1
 13938  0E24  3000               	movlw	0
 13939  0E25  00B0               	movwf	?___ftdiv+2
 13940  0E26  0008               	return
 13941  0E27                     l8118:	
 13942  0E27  3000               	movlw	0
 13943  0E28  00B9               	movwf	___ftdiv@f3
 13944  0E29  3000               	movlw	0
 13945  0E2A  00BA               	movwf	___ftdiv@f3+1
 13946  0E2B  3000               	movlw	0
 13947  0E2C  00BB               	movwf	___ftdiv@f3+2
 13948  0E2D  3089               	movlw	137
 13949  0E2E  073D               	addwf	___ftdiv@sign,w
 13950  0E2F  00B4               	movwf	??___ftdiv
 13951  0E30  0834               	movf	??___ftdiv,w
 13952  0E31  02BC               	subwf	___ftdiv@exp,f
 13953  0E32  0831               	movf	___ftdiv@f1,w
 13954  0E33  00B4               	movwf	??___ftdiv
 13955  0E34  0832               	movf	___ftdiv@f1+1,w
 13956  0E35  00B5               	movwf	??___ftdiv+1
 13957  0E36  0833               	movf	___ftdiv@f1+2,w
 13958  0E37  00B6               	movwf	??___ftdiv+2
 13959  0E38  3010               	movlw	16
 13960  0E39                     u8345:	
 13961  0E39  36B6               	lsrf	??___ftdiv+2,f
 13962  0E3A  0CB5               	rrf	??___ftdiv+1,f
 13963  0E3B  0CB4               	rrf	??___ftdiv,f
 13964  0E3C  0B89               	decfsz	9,f
 13965  0E3D  2E39               	goto	u8345
 13966  0E3E  0834               	movf	??___ftdiv,w
 13967  0E3F  00B7               	movwf	??___ftdiv+3
 13968  0E40  0837               	movf	??___ftdiv+3,w
 13969  0E41  00BD               	movwf	___ftdiv@sign
 13970  0E42  082E               	movf	___ftdiv@f2,w
 13971  0E43  00B4               	movwf	??___ftdiv
 13972  0E44  082F               	movf	___ftdiv@f2+1,w
 13973  0E45  00B5               	movwf	??___ftdiv+1
 13974  0E46  0830               	movf	___ftdiv@f2+2,w
 13975  0E47  00B6               	movwf	??___ftdiv+2
 13976  0E48  3010               	movlw	16
 13977  0E49                     u8355:	
 13978  0E49  36B6               	lsrf	??___ftdiv+2,f
 13979  0E4A  0CB5               	rrf	??___ftdiv+1,f
 13980  0E4B  0CB4               	rrf	??___ftdiv,f
 13981  0E4C  0B89               	decfsz	9,f
 13982  0E4D  2E49               	goto	u8355
 13983  0E4E  0834               	movf	??___ftdiv,w
 13984  0E4F  00B7               	movwf	??___ftdiv+3
 13985  0E50  0837               	movf	??___ftdiv+3,w
 13986  0E51  06BD               	xorwf	___ftdiv@sign,f
 13987  0E52  3080               	movlw	128
 13988  0E53  00B4               	movwf	??___ftdiv
 13989  0E54  0834               	movf	??___ftdiv,w
 13990  0E55  05BD               	andwf	___ftdiv@sign,f
 13991  0E56  17B2               	bsf	___ftdiv@f1+1,7
 13992  0E57  30FF               	movlw	255
 13993  0E58  05B1               	andwf	___ftdiv@f1,f
 13994  0E59  30FF               	movlw	255
 13995  0E5A  05B2               	andwf	___ftdiv@f1+1,f
 13996  0E5B  3000               	movlw	0
 13997  0E5C  05B3               	andwf	___ftdiv@f1+2,f
 13998  0E5D  17AF               	bsf	___ftdiv@f2+1,7
 13999  0E5E  30FF               	movlw	255
 14000  0E5F  05AE               	andwf	___ftdiv@f2,f
 14001  0E60  30FF               	movlw	255
 14002  0E61  05AF               	andwf	___ftdiv@f2+1,f
 14003  0E62  3000               	movlw	0
 14004  0E63  05B0               	andwf	___ftdiv@f2+2,f
 14005  0E64  3018               	movlw	24
 14006  0E65  00B4               	movwf	??___ftdiv
 14007  0E66  0834               	movf	??___ftdiv,w
 14008  0E67  00B8               	movwf	___ftdiv@cntr
 14009  0E68                     l8132:	
 14010  0E68  3001               	movlw	1
 14011  0E69                     u8365:	
 14012  0E69  35B9               	lslf	___ftdiv@f3,f
 14013  0E6A  0DBA               	rlf	___ftdiv@f3+1,f
 14014  0E6B  0DBB               	rlf	___ftdiv@f3+2,f
 14015  0E6C  0B89               	decfsz	9,f
 14016  0E6D  2E69               	goto	u8365
 14017  0E6E  0830               	movf	___ftdiv@f2+2,w
 14018  0E6F  0233               	subwf	___ftdiv@f1+2,w
 14019  0E70  1D03               	skipz
 14020  0E71  2E78               	goto	u8375
 14021  0E72  082F               	movf	___ftdiv@f2+1,w
 14022  0E73  0232               	subwf	___ftdiv@f1+1,w
 14023  0E74  1D03               	skipz
 14024  0E75  2E78               	goto	u8375
 14025  0E76  082E               	movf	___ftdiv@f2,w
 14026  0E77  0231               	subwf	___ftdiv@f1,w
 14027  0E78                     u8375:	
 14028  0E78  1C03               	skipc
 14029  0E79  2E81               	goto	l8140
 14030  0E7A  082E               	movf	___ftdiv@f2,w
 14031  0E7B  02B1               	subwf	___ftdiv@f1,f
 14032  0E7C  082F               	movf	___ftdiv@f2+1,w
 14033  0E7D  3BB2               	subwfb	___ftdiv@f1+1,f
 14034  0E7E  0830               	movf	___ftdiv@f2+2,w
 14035  0E7F  3BB3               	subwfb	___ftdiv@f1+2,f
 14036  0E80  1439               	bsf	___ftdiv@f3,0
 14037  0E81                     l8140:	
 14038  0E81  3001               	movlw	1
 14039  0E82                     u8385:	
 14040  0E82  35B1               	lslf	___ftdiv@f1,f
 14041  0E83  0DB2               	rlf	___ftdiv@f1+1,f
 14042  0E84  0DB3               	rlf	___ftdiv@f1+2,f
 14043  0E85  0B89               	decfsz	9,f
 14044  0E86  2E82               	goto	u8385
 14045  0E87  3001               	movlw	1
 14046  0E88  02B8               	subwf	___ftdiv@cntr,f
 14047  0E89  1D03               	btfss	3,2
 14048  0E8A  2E68               	goto	l8132
 14049  0E8B  0839               	movf	___ftdiv@f3,w
 14050  0E8C  00A0               	movwf	___ftpack@arg
 14051  0E8D  083A               	movf	___ftdiv@f3+1,w
 14052  0E8E  00A1               	movwf	___ftpack@arg+1
 14053  0E8F  083B               	movf	___ftdiv@f3+2,w
 14054  0E90  00A2               	movwf	___ftpack@arg+2
 14055  0E91  083C               	movf	___ftdiv@exp,w
 14056  0E92  00B4               	movwf	??___ftdiv
 14057  0E93  0834               	movf	??___ftdiv,w
 14058  0E94  00A3               	movwf	___ftpack@exp
 14059  0E95  083D               	movf	___ftdiv@sign,w
 14060  0E96  00B5               	movwf	??___ftdiv+1
 14061  0E97  0835               	movf	??___ftdiv+1,w
 14062  0E98  00A4               	movwf	___ftpack@sign
 14063  0E99  3189  21D9         	fcall	___ftpack
 14064  0E9B  0020               	movlb	0	; select bank0
 14065  0E9C  0820               	movf	?___ftpack,w
 14066  0E9D  00AE               	movwf	?___ftdiv
 14067  0E9E  0821               	movf	?___ftpack+1,w
 14068  0E9F  00AF               	movwf	?___ftdiv+1
 14069  0EA0  0822               	movf	?___ftpack+2,w
 14070  0EA1  00B0               	movwf	?___ftdiv+2
 14071  0EA2  0008               	return
 14072  0EA3                     __end_of___ftdiv:	
 14073                           
 14074                           	psect	text85
 14075  042E                     __ptext85:	
 14076 ;; *************** function ___ftadd *****************
 14077 ;; Defined at:
 14078 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14079 ;; Parameters:    Size  Location     Type
 14080 ;;  f1              3   33[BANK0 ] float 
 14081 ;;  f2              3   36[BANK0 ] float 
 14082 ;; Auto vars:     Size  Location     Type
 14083 ;;  exp1            1   45[BANK0 ] unsigned char 
 14084 ;;  exp2            1   44[BANK0 ] unsigned char 
 14085 ;;  sign            1   43[BANK0 ] unsigned char 
 14086 ;; Return value:  Size  Location     Type
 14087 ;;                  3   33[BANK0 ] float 
 14088 ;; Registers used:
 14089 ;;		wreg, status,2, status,0, pclath, cstack
 14090 ;; Tracked objects:
 14091 ;;		On entry : 0/0
 14092 ;;		On exit  : 0/0
 14093 ;;		Unchanged: 0/0
 14094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14095 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14098 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14099 ;;Total ram usage:       13 bytes
 14100 ;; Hardware stack levels used:    1
 14101 ;; Hardware stack levels required when called:    6
 14102 ;; This function calls:
 14103 ;;		___ftpack
 14104 ;; This function is called by:
 14105 ;;		_getPercentValue
 14106 ;;		_setPercentValue
 14107 ;; This function uses a non-reentrant model
 14108 ;;
 14109                           
 14110                           
 14111                           ;psect for function ___ftadd
 14112  042E                     ___ftadd:	
 14113                           
 14114                           ;incstack = 0
 14115                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14116  042E  0020               	movlb	0	; select bank0
 14117  042F  0841               	movf	___ftadd@f1,w
 14118  0430  00C7               	movwf	??___ftadd
 14119  0431  0842               	movf	___ftadd@f1+1,w
 14120  0432  00C8               	movwf	??___ftadd+1
 14121  0433  0843               	movf	___ftadd@f1+2,w
 14122  0434  00C9               	movwf	??___ftadd+2
 14123  0435  1003               	clrc
 14124  0436  0D48               	rlf	??___ftadd+1,w
 14125  0437  0D49               	rlf	??___ftadd+2,w
 14126  0438  00CA               	movwf	??___ftadd+3
 14127  0439  084A               	movf	??___ftadd+3,w
 14128  043A  00CD               	movwf	___ftadd@exp1
 14129  043B  0844               	movf	___ftadd@f2,w
 14130  043C  00C7               	movwf	??___ftadd
 14131  043D  0845               	movf	___ftadd@f2+1,w
 14132  043E  00C8               	movwf	??___ftadd+1
 14133  043F  0846               	movf	___ftadd@f2+2,w
 14134  0440  00C9               	movwf	??___ftadd+2
 14135  0441  1003               	clrc
 14136  0442  0D48               	rlf	??___ftadd+1,w
 14137  0443  0D49               	rlf	??___ftadd+2,w
 14138  0444  00CA               	movwf	??___ftadd+3
 14139  0445  084A               	movf	??___ftadd+3,w
 14140  0446  00CC               	movwf	___ftadd@exp2
 14141  0447  084D               	movf	___ftadd@exp1,w
 14142  0448  1903               	btfsc	3,2
 14143  0449  2C56               	goto	l8042
 14144  044A  084C               	movf	___ftadd@exp2,w
 14145  044B  024D               	subwf	___ftadd@exp1,w
 14146  044C  1803               	skipnc
 14147  044D  2C5D               	goto	l8046
 14148  044E  034D               	decf	___ftadd@exp1,w
 14149  044F  3AFF               	xorlw	255
 14150  0450  074C               	addwf	___ftadd@exp2,w
 14151  0451  00C7               	movwf	??___ftadd
 14152  0452  3019               	movlw	25
 14153  0453  0247               	subwf	??___ftadd,w
 14154  0454  1C03               	skipc
 14155  0455  2C5D               	goto	l8046
 14156  0456                     l8042:	
 14157  0456  0844               	movf	___ftadd@f2,w
 14158  0457  00C1               	movwf	?___ftadd
 14159  0458  0845               	movf	___ftadd@f2+1,w
 14160  0459  00C2               	movwf	?___ftadd+1
 14161  045A  0846               	movf	___ftadd@f2+2,w
 14162  045B  00C3               	movwf	?___ftadd+2
 14163  045C  0008               	return
 14164  045D                     l8046:	
 14165  045D  084C               	movf	___ftadd@exp2,w
 14166  045E  1903               	btfsc	3,2
 14167  045F  0008               	return
 14168  0460  084D               	movf	___ftadd@exp1,w
 14169  0461  024C               	subwf	___ftadd@exp2,w
 14170  0462  1803               	skipnc
 14171  0463  2C6C               	goto	l8052
 14172  0464  034C               	decf	___ftadd@exp2,w
 14173  0465  3AFF               	xorlw	255
 14174  0466  074D               	addwf	___ftadd@exp1,w
 14175  0467  00C7               	movwf	??___ftadd
 14176  0468  3019               	movlw	25
 14177  0469  0247               	subwf	??___ftadd,w
 14178  046A  1803               	btfsc	3,0
 14179  046B  0008               	return
 14180  046C                     l8052:	
 14181  046C  3006               	movlw	6
 14182  046D  00C7               	movwf	??___ftadd
 14183  046E  0847               	movf	??___ftadd,w
 14184  046F  00CB               	movwf	___ftadd@sign
 14185  0470  1BC3               	btfsc	___ftadd@f1+2,7
 14186  0471  17CB               	bsf	___ftadd@sign,7
 14187  0472  1BC6               	btfsc	___ftadd@f2+2,7
 14188  0473  174B               	bsf	___ftadd@sign,6
 14189  0474  17C2               	bsf	___ftadd@f1+1,7
 14190  0475  30FF               	movlw	255
 14191  0476  05C1               	andwf	___ftadd@f1,f
 14192  0477  30FF               	movlw	255
 14193  0478  05C2               	andwf	___ftadd@f1+1,f
 14194  0479  3000               	movlw	0
 14195  047A  05C3               	andwf	___ftadd@f1+2,f
 14196  047B  17C5               	bsf	___ftadd@f2+1,7
 14197  047C  30FF               	movlw	255
 14198  047D  05C4               	andwf	___ftadd@f2,f
 14199  047E  30FF               	movlw	255
 14200  047F  05C5               	andwf	___ftadd@f2+1,f
 14201  0480  3000               	movlw	0
 14202  0481  05C6               	andwf	___ftadd@f2+2,f
 14203  0482  084C               	movf	___ftadd@exp2,w
 14204  0483  024D               	subwf	___ftadd@exp1,w
 14205  0484  1803               	skipnc
 14206  0485  2CA8               	goto	l8074
 14207  0486                     l8064:	
 14208  0486  3001               	movlw	1
 14209  0487                     u8185:	
 14210  0487  35C4               	lslf	___ftadd@f2,f
 14211  0488  0DC5               	rlf	___ftadd@f2+1,f
 14212  0489  0DC6               	rlf	___ftadd@f2+2,f
 14213  048A  0B89               	decfsz	9,f
 14214  048B  2C87               	goto	u8185
 14215  048C  3001               	movlw	1
 14216  048D  02CC               	subwf	___ftadd@exp2,f
 14217  048E  084C               	movf	___ftadd@exp2,w
 14218  048F  064D               	xorwf	___ftadd@exp1,w
 14219  0490  1903               	skipnz
 14220  0491  2CA3               	goto	l8072
 14221  0492  3001               	movlw	1
 14222  0493  02CB               	subwf	___ftadd@sign,f
 14223  0494  084B               	movf	___ftadd@sign,w
 14224  0495  3907               	andlw	7
 14225  0496  1903               	btfsc	3,2
 14226  0497  2CA3               	goto	l8072
 14227  0498  2C86               	goto	l8064
 14228  0499                     l8070:	
 14229  0499  3001               	movlw	1
 14230  049A                     u8215:	
 14231  049A  36C3               	lsrf	___ftadd@f1+2,f
 14232  049B  0CC2               	rrf	___ftadd@f1+1,f
 14233  049C  0CC1               	rrf	___ftadd@f1,f
 14234  049D  0B89               	decfsz	9,f
 14235  049E  2C9A               	goto	u8215
 14236  049F  3001               	movlw	1
 14237  04A0  00C7               	movwf	??___ftadd
 14238  04A1  0847               	movf	??___ftadd,w
 14239  04A2  07CD               	addwf	___ftadd@exp1,f
 14240  04A3                     l8072:	
 14241  04A3  084D               	movf	___ftadd@exp1,w
 14242  04A4  064C               	xorwf	___ftadd@exp2,w
 14243  04A5  1903               	btfsc	3,2
 14244  04A6  2CCD               	goto	l2769
 14245  04A7  2C99               	goto	l8070
 14246  04A8                     l8074:	
 14247  04A8  084D               	movf	___ftadd@exp1,w
 14248  04A9  024C               	subwf	___ftadd@exp2,w
 14249  04AA  1803               	skipnc
 14250  04AB  2CCD               	goto	l2769
 14251  04AC                     l8076:	
 14252  04AC  3001               	movlw	1
 14253  04AD                     u8245:	
 14254  04AD  35C1               	lslf	___ftadd@f1,f
 14255  04AE  0DC2               	rlf	___ftadd@f1+1,f
 14256  04AF  0DC3               	rlf	___ftadd@f1+2,f
 14257  04B0  0B89               	decfsz	9,f
 14258  04B1  2CAD               	goto	u8245
 14259  04B2  3001               	movlw	1
 14260  04B3  02CD               	subwf	___ftadd@exp1,f
 14261  04B4  084C               	movf	___ftadd@exp2,w
 14262  04B5  064D               	xorwf	___ftadd@exp1,w
 14263  04B6  1903               	skipnz
 14264  04B7  2CC9               	goto	l8084
 14265  04B8  3001               	movlw	1
 14266  04B9  02CB               	subwf	___ftadd@sign,f
 14267  04BA  084B               	movf	___ftadd@sign,w
 14268  04BB  3907               	andlw	7
 14269  04BC  1903               	btfsc	3,2
 14270  04BD  2CC9               	goto	l8084
 14271  04BE  2CAC               	goto	l8076
 14272  04BF                     l8082:	
 14273  04BF  3001               	movlw	1
 14274  04C0                     u8275:	
 14275  04C0  36C6               	lsrf	___ftadd@f2+2,f
 14276  04C1  0CC5               	rrf	___ftadd@f2+1,f
 14277  04C2  0CC4               	rrf	___ftadd@f2,f
 14278  04C3  0B89               	decfsz	9,f
 14279  04C4  2CC0               	goto	u8275
 14280  04C5  3001               	movlw	1
 14281  04C6  00C7               	movwf	??___ftadd
 14282  04C7  0847               	movf	??___ftadd,w
 14283  04C8  07CC               	addwf	___ftadd@exp2,f
 14284  04C9                     l8084:	
 14285  04C9  084D               	movf	___ftadd@exp1,w
 14286  04CA  064C               	xorwf	___ftadd@exp2,w
 14287  04CB  1D03               	skipz
 14288  04CC  2CBF               	goto	l8082
 14289  04CD                     l2769:	
 14290  04CD  1FCB               	btfss	___ftadd@sign,7
 14291  04CE  2CDF               	goto	l8088
 14292  04CF  30FF               	movlw	255
 14293  04D0  06C1               	xorwf	___ftadd@f1,f
 14294  04D1  30FF               	movlw	255
 14295  04D2  06C2               	xorwf	___ftadd@f1+1,f
 14296  04D3  30FF               	movlw	255
 14297  04D4  06C3               	xorwf	___ftadd@f1+2,f
 14298  04D5  3001               	movlw	1
 14299  04D6  07C1               	addwf	___ftadd@f1,f
 14300  04D7  3000               	movlw	0
 14301  04D8  1803               	skipnc
 14302  04D9  3001               	movlw	1
 14303  04DA  07C2               	addwf	___ftadd@f1+1,f
 14304  04DB  3000               	movlw	0
 14305  04DC  1803               	skipnc
 14306  04DD  3001               	movlw	1
 14307  04DE  07C3               	addwf	___ftadd@f1+2,f
 14308  04DF                     l8088:	
 14309  04DF  1F4B               	btfss	___ftadd@sign,6
 14310  04E0  2CF1               	goto	l8092
 14311  04E1  30FF               	movlw	255
 14312  04E2  06C4               	xorwf	___ftadd@f2,f
 14313  04E3  30FF               	movlw	255
 14314  04E4  06C5               	xorwf	___ftadd@f2+1,f
 14315  04E5  30FF               	movlw	255
 14316  04E6  06C6               	xorwf	___ftadd@f2+2,f
 14317  04E7  3001               	movlw	1
 14318  04E8  07C4               	addwf	___ftadd@f2,f
 14319  04E9  3000               	movlw	0
 14320  04EA  1803               	skipnc
 14321  04EB  3001               	movlw	1
 14322  04EC  07C5               	addwf	___ftadd@f2+1,f
 14323  04ED  3000               	movlw	0
 14324  04EE  1803               	skipnc
 14325  04EF  3001               	movlw	1
 14326  04F0  07C6               	addwf	___ftadd@f2+2,f
 14327  04F1                     l8092:	
 14328  04F1  01CB               	clrf	___ftadd@sign
 14329  04F2  0841               	movf	___ftadd@f1,w
 14330  04F3  07C4               	addwf	___ftadd@f2,f
 14331  04F4  0842               	movf	___ftadd@f1+1,w
 14332  04F5  3DC5               	addwfc	___ftadd@f2+1,f
 14333  04F6  0843               	movf	___ftadd@f1+2,w
 14334  04F7  3DC6               	addwfc	___ftadd@f2+2,f
 14335  04F8  1FC6               	btfss	___ftadd@f2+2,7
 14336  04F9  2D0C               	goto	l8102
 14337  04FA  30FF               	movlw	255
 14338  04FB  06C4               	xorwf	___ftadd@f2,f
 14339  04FC  30FF               	movlw	255
 14340  04FD  06C5               	xorwf	___ftadd@f2+1,f
 14341  04FE  30FF               	movlw	255
 14342  04FF  06C6               	xorwf	___ftadd@f2+2,f
 14343  0500  3001               	movlw	1
 14344  0501  07C4               	addwf	___ftadd@f2,f
 14345  0502  3000               	movlw	0
 14346  0503  1803               	skipnc
 14347  0504  3001               	movlw	1
 14348  0505  07C5               	addwf	___ftadd@f2+1,f
 14349  0506  3000               	movlw	0
 14350  0507  1803               	skipnc
 14351  0508  3001               	movlw	1
 14352  0509  07C6               	addwf	___ftadd@f2+2,f
 14353  050A  01CB               	clrf	___ftadd@sign
 14354  050B  0ACB               	incf	___ftadd@sign,f
 14355  050C                     l8102:	
 14356  050C  0844               	movf	___ftadd@f2,w
 14357  050D  00A0               	movwf	___ftpack@arg
 14358  050E  0845               	movf	___ftadd@f2+1,w
 14359  050F  00A1               	movwf	___ftpack@arg+1
 14360  0510  0846               	movf	___ftadd@f2+2,w
 14361  0511  00A2               	movwf	___ftpack@arg+2
 14362  0512  084D               	movf	___ftadd@exp1,w
 14363  0513  00C7               	movwf	??___ftadd
 14364  0514  0847               	movf	??___ftadd,w
 14365  0515  00A3               	movwf	___ftpack@exp
 14366  0516  084B               	movf	___ftadd@sign,w
 14367  0517  00C8               	movwf	??___ftadd+1
 14368  0518  0848               	movf	??___ftadd+1,w
 14369  0519  00A4               	movwf	___ftpack@sign
 14370  051A  3189  21D9         	fcall	___ftpack
 14371  051C  0020               	movlb	0	; select bank0
 14372  051D  0820               	movf	?___ftpack,w
 14373  051E  00C1               	movwf	?___ftadd
 14374  051F  0821               	movf	?___ftpack+1,w
 14375  0520  00C2               	movwf	?___ftadd+1
 14376  0521  0822               	movf	?___ftpack+2,w
 14377  0522  00C3               	movwf	?___ftadd+2
 14378  0523  0008               	return
 14379  0524                     __end_of___ftadd:	
 14380                           
 14381                           	psect	text86
 14382  1FDE                     __ptext86:	
 14383 ;; *************** function ___awtoft *****************
 14384 ;; Defined at:
 14385 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14386 ;; Parameters:    Size  Location     Type
 14387 ;;  c               2    8[BANK0 ] int 
 14388 ;; Auto vars:     Size  Location     Type
 14389 ;;  sign            1   13[BANK0 ] unsigned char 
 14390 ;; Return value:  Size  Location     Type
 14391 ;;                  3    8[BANK0 ] float 
 14392 ;; Registers used:
 14393 ;;		wreg, status,2, status,0, pclath, cstack
 14394 ;; Tracked objects:
 14395 ;;		On entry : 0/0
 14396 ;;		On exit  : 0/0
 14397 ;;		Unchanged: 0/0
 14398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14399 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14401 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14402 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14403 ;;Total ram usage:        6 bytes
 14404 ;; Hardware stack levels used:    1
 14405 ;; Hardware stack levels required when called:    6
 14406 ;; This function calls:
 14407 ;;		___ftpack
 14408 ;; This function is called by:
 14409 ;;		_getPercentValue
 14410 ;;		_setPercentValue
 14411 ;; This function uses a non-reentrant model
 14412 ;;
 14413                           
 14414                           
 14415                           ;psect for function ___awtoft
 14416  1FDE                     ___awtoft:	
 14417                           
 14418                           ;incstack = 0
 14419                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14420  1FDE  0020               	movlb	0	; select bank0
 14421  1FDF  01AD               	clrf	___awtoft@sign
 14422  1FE0  1FA9               	btfss	___awtoft@c+1,7
 14423  1FE1  2FE9               	goto	l8030
 14424  1FE2  09A8               	comf	___awtoft@c,f
 14425  1FE3  09A9               	comf	___awtoft@c+1,f
 14426  1FE4  0AA8               	incf	___awtoft@c,f
 14427  1FE5  1903               	skipnz
 14428  1FE6  0AA9               	incf	___awtoft@c+1,f
 14429  1FE7  01AD               	clrf	___awtoft@sign
 14430  1FE8  0AAD               	incf	___awtoft@sign,f
 14431  1FE9                     l8030:	
 14432  1FE9  0828               	movf	___awtoft@c,w
 14433  1FEA  00A0               	movwf	___ftpack@arg
 14434  1FEB  0829               	movf	___awtoft@c+1,w
 14435  1FEC  00A1               	movwf	___ftpack@arg+1
 14436  1FED  01A2               	clrf	___ftpack@arg+2
 14437  1FEE  308E               	movlw	142
 14438  1FEF  00AB               	movwf	??___awtoft
 14439  1FF0  082B               	movf	??___awtoft,w
 14440  1FF1  00A3               	movwf	___ftpack@exp
 14441  1FF2  082D               	movf	___awtoft@sign,w
 14442  1FF3  00AC               	movwf	??___awtoft+1
 14443  1FF4  082C               	movf	??___awtoft+1,w
 14444  1FF5  00A4               	movwf	___ftpack@sign
 14445  1FF6  3189  21D9         	fcall	___ftpack
 14446  1FF8  0020               	movlb	0	; select bank0
 14447  1FF9  0820               	movf	?___ftpack,w
 14448  1FFA  00A8               	movwf	?___awtoft
 14449  1FFB  0821               	movf	?___ftpack+1,w
 14450  1FFC  00A9               	movwf	?___awtoft+1
 14451  1FFD  0822               	movf	?___ftpack+2,w
 14452  1FFE  00AA               	movwf	?___awtoft+2
 14453  1FFF  0008               	return
 14454  2000                     __end_of___awtoft:	
 14455                           
 14456                           	psect	text87
 14457  09D9                     __ptext87:	
 14458 ;; *************** function ___ftpack *****************
 14459 ;; Defined at:
 14460 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14461 ;; Parameters:    Size  Location     Type
 14462 ;;  arg             3    0[BANK0 ] unsigned um
 14463 ;;  exp             1    3[BANK0 ] unsigned char 
 14464 ;;  sign            1    4[BANK0 ] unsigned char 
 14465 ;; Auto vars:     Size  Location     Type
 14466 ;;		None
 14467 ;; Return value:  Size  Location     Type
 14468 ;;                  3    0[BANK0 ] float 
 14469 ;; Registers used:
 14470 ;;		wreg, status,2, status,0
 14471 ;; Tracked objects:
 14472 ;;		On entry : 0/0
 14473 ;;		On exit  : 0/0
 14474 ;;		Unchanged: 0/0
 14475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14476 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14478 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14479 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14480 ;;Total ram usage:        8 bytes
 14481 ;; Hardware stack levels used:    1
 14482 ;; Hardware stack levels required when called:    5
 14483 ;; This function calls:
 14484 ;;		Nothing
 14485 ;; This function is called by:
 14486 ;;		___awtoft
 14487 ;;		___ftadd
 14488 ;;		___ftdiv
 14489 ;;		___ftmul
 14490 ;; This function uses a non-reentrant model
 14491 ;;
 14492                           
 14493                           
 14494                           ;psect for function ___ftpack
 14495  09D9                     ___ftpack:	
 14496                           
 14497                           ;incstack = 0
 14498                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14499  09D9  0020               	movlb	0	; select bank0
 14500  09DA  0823               	movf	___ftpack@exp,w
 14501  09DB  1903               	btfsc	3,2
 14502  09DC  29E2               	goto	l7980
 14503  09DD  0822               	movf	___ftpack@arg+2,w
 14504  09DE  0421               	iorwf	___ftpack@arg+1,w
 14505  09DF  0420               	iorwf	___ftpack@arg,w
 14506  09E0  1D03               	skipz
 14507  09E1  29F3               	goto	l7986
 14508  09E2                     l7980:	
 14509  09E2  3000               	movlw	0
 14510  09E3  00A0               	movwf	?___ftpack
 14511  09E4  3000               	movlw	0
 14512  09E5  00A1               	movwf	?___ftpack+1
 14513  09E6  3000               	movlw	0
 14514  09E7  00A2               	movwf	?___ftpack+2
 14515  09E8  0008               	return
 14516  09E9                     l7984:	
 14517  09E9  3001               	movlw	1
 14518  09EA  00A5               	movwf	??___ftpack
 14519  09EB  0825               	movf	??___ftpack,w
 14520  09EC  07A3               	addwf	___ftpack@exp,f
 14521  09ED  3001               	movlw	1
 14522  09EE                     u7975:	
 14523  09EE  36A2               	lsrf	___ftpack@arg+2,f
 14524  09EF  0CA1               	rrf	___ftpack@arg+1,f
 14525  09F0  0CA0               	rrf	___ftpack@arg,f
 14526  09F1  0B89               	decfsz	9,f
 14527  09F2  29EE               	goto	u7975
 14528  09F3                     l7986:	
 14529  09F3  30FE               	movlw	254
 14530  09F4  0522               	andwf	___ftpack@arg+2,w
 14531  09F5  1903               	btfsc	3,2
 14532  09F6  2A0C               	goto	l2740
 14533  09F7  29E9               	goto	l7984
 14534  09F8                     l7988:	
 14535  09F8  3001               	movlw	1
 14536  09F9  00A5               	movwf	??___ftpack
 14537  09FA  0825               	movf	??___ftpack,w
 14538  09FB  07A3               	addwf	___ftpack@exp,f
 14539  09FC  3001               	movlw	1
 14540  09FD  07A0               	addwf	___ftpack@arg,f
 14541  09FE  3000               	movlw	0
 14542  09FF  1803               	skipnc
 14543  0A00  3001               	movlw	1
 14544  0A01  07A1               	addwf	___ftpack@arg+1,f
 14545  0A02  3000               	movlw	0
 14546  0A03  1803               	skipnc
 14547  0A04  3001               	movlw	1
 14548  0A05  07A2               	addwf	___ftpack@arg+2,f
 14549  0A06  3001               	movlw	1
 14550  0A07                     u7995:	
 14551  0A07  36A2               	lsrf	___ftpack@arg+2,f
 14552  0A08  0CA1               	rrf	___ftpack@arg+1,f
 14553  0A09  0CA0               	rrf	___ftpack@arg,f
 14554  0A0A  0B89               	decfsz	9,f
 14555  0A0B  2A07               	goto	u7995
 14556  0A0C                     l2740:	
 14557  0A0C  30FF               	movlw	255
 14558  0A0D  0522               	andwf	___ftpack@arg+2,w
 14559  0A0E  1903               	btfsc	3,2
 14560  0A0F  2A19               	goto	l7996
 14561  0A10  29F8               	goto	l7988
 14562  0A11                     l7994:	
 14563  0A11  3001               	movlw	1
 14564  0A12  02A3               	subwf	___ftpack@exp,f
 14565  0A13  3001               	movlw	1
 14566  0A14                     u8015:	
 14567  0A14  35A0               	lslf	___ftpack@arg,f
 14568  0A15  0DA1               	rlf	___ftpack@arg+1,f
 14569  0A16  0DA2               	rlf	___ftpack@arg+2,f
 14570  0A17  0B89               	decfsz	9,f
 14571  0A18  2A14               	goto	u8015
 14572  0A19                     l7996:	
 14573  0A19  1FA1               	btfss	___ftpack@arg+1,7
 14574  0A1A  2A11               	goto	l7994
 14575  0A1B  1823               	btfsc	___ftpack@exp,0
 14576  0A1C  2A23               	goto	l2746
 14577  0A1D  30FF               	movlw	255
 14578  0A1E  05A0               	andwf	___ftpack@arg,f
 14579  0A1F  307F               	movlw	127
 14580  0A20  05A1               	andwf	___ftpack@arg+1,f
 14581  0A21  30FF               	movlw	255
 14582  0A22  05A2               	andwf	___ftpack@arg+2,f
 14583  0A23                     l2746:	
 14584  0A23  1003               	clrc
 14585  0A24  0CA3               	rrf	___ftpack@exp,f
 14586  0A25  0823               	movf	___ftpack@exp,w
 14587  0A26  00A5               	movwf	??___ftpack
 14588  0A27  01A6               	clrf	??___ftpack+1
 14589  0A28  01A7               	clrf	??___ftpack+2
 14590  0A29  3010               	movlw	16
 14591  0A2A                     u8045:	
 14592  0A2A  35A5               	lslf	??___ftpack,f
 14593  0A2B  0DA6               	rlf	??___ftpack+1,f
 14594  0A2C  0DA7               	rlf	??___ftpack+2,f
 14595  0A2D  0B89               	decfsz	9,f
 14596  0A2E  2A2A               	goto	u8045
 14597  0A2F  0825               	movf	??___ftpack,w
 14598  0A30  04A0               	iorwf	___ftpack@arg,f
 14599  0A31  0826               	movf	??___ftpack+1,w
 14600  0A32  04A1               	iorwf	___ftpack@arg+1,f
 14601  0A33  0827               	movf	??___ftpack+2,w
 14602  0A34  04A2               	iorwf	___ftpack@arg+2,f
 14603  0A35  0824               	movf	___ftpack@sign,w
 14604  0A36  1903               	btfsc	3,2
 14605  0A37  0008               	return
 14606  0A38  17A2               	bsf	___ftpack@arg+2,7
 14607  0A39  0008               	return
 14608  0A3A                     __end_of___ftpack:	
 14609                           
 14610                           	psect	text88
 14611  13A7                     __ptext88:	
 14612 ;; *************** function _setLED *****************
 14613 ;; Defined at:
 14614 ;;		line 76 in file "../src/LED_B1.c"
 14615 ;; Parameters:    Size  Location     Type
 14616 ;;  led             1    wreg     unsigned char 
 14617 ;;  command         1    2[BANK0 ] unsigned char 
 14618 ;; Auto vars:     Size  Location     Type
 14619 ;;  led             1    3[BANK0 ] unsigned char 
 14620 ;; Return value:  Size  Location     Type
 14621 ;;		None               void
 14622 ;; Registers used:
 14623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14624 ;; Tracked objects:
 14625 ;;		On entry : 0/0
 14626 ;;		On exit  : 0/0
 14627 ;;		Unchanged: 0/0
 14628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14629 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14633 ;;Total ram usage:        2 bytes
 14634 ;; Hardware stack levels used:    1
 14635 ;; Hardware stack levels required when called:    6
 14636 ;; This function calls:
 14637 ;;		_LedPointSelect
 14638 ;; This function is called by:
 14639 ;;		_setDimmerLights
 14640 ;;		_setLED_Initialization
 14641 ;;		_Exception_Main
 14642 ;;		_setSw_Initialization
 14643 ;;		_setMain_Exception
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           
 14648                           ;psect for function _setLED
 14649  13A7                     _setLED:	
 14650                           
 14651                           ;incstack = 0
 14652                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14653                           ;setLED@led stored from wreg
 14654  13A7  0020               	movlb	0	; select bank0
 14655  13A8  00A3               	movwf	setLED@led
 14656                           
 14657                           ;LED_B1.c: 77: LedPointSelect(led);
 14658  13A9  0823               	movf	setLED@led,w
 14659  13AA  319D  2537  3193   	fcall	_LedPointSelect
 14660                           
 14661                           ;LED_B1.c: 78: if (command == 0) {
 14662  13AD  0020               	movlb	0	; select bank0
 14663  13AE  08A2               	movf	setLED@command,f
 14664  13AF  1D03               	skipz
 14665  13B0  2BB6               	goto	l8680
 14666                           
 14667                           ;LED_B1.c: 107: if (led == 99) {
 14668  13B1  0823               	movf	setLED@led,w
 14669  13B2  3A63               	xorlw	99
 14670  13B3  1D03               	skipz
 14671  13B4  2BB6               	goto	l8680
 14672                           
 14673                           ;LED_B1.c: 111: RB5 = 1;
 14674  13B5  168D               	bsf	13,5	;volatile
 14675  13B6                     l8680:	
 14676                           
 14677                           ;LED_B1.c: 113: }
 14678                           ;LED_B1.c: 115: }
 14679                           ;LED_B1.c: 116: if (command == 1) {
 14680  13B6  0822               	movf	setLED@command,w
 14681  13B7  3A01               	xorlw	1
 14682  13B8  1D03               	skipz
 14683  13B9  2BBF               	goto	l8686
 14684                           
 14685                           ;LED_B1.c: 145: if (led == 99) {
 14686  13BA  0823               	movf	setLED@led,w
 14687  13BB  3A63               	xorlw	99
 14688  13BC  1D03               	skipz
 14689  13BD  2BBF               	goto	l8686
 14690                           
 14691                           ;LED_B1.c: 149: RB5 = 0;
 14692  13BE  128D               	bcf	13,5	;volatile
 14693  13BF                     l8686:	
 14694                           
 14695                           ;LED_B1.c: 151: }
 14696                           ;LED_B1.c: 153: }
 14697                           ;LED_B1.c: 154: if (command == 10) {
 14698  13BF  0822               	movf	setLED@command,w
 14699  13C0  3A0A               	xorlw	10
 14700  13C1  1D03               	skipz
 14701  13C2  2BD5               	goto	l8694
 14702                           
 14703                           ;LED_B1.c: 155: LED->GO = 0;
 14704  13C3  0021               	movlb	1	; select bank1
 14705  13C4  084E               	movf	_LED^(0+128),w
 14706  13C5  0086               	movwf	6
 14707  13C6  3001               	movlw	1	; select bank2/3
 14708  13C7  0087               	movwf	7
 14709  13C8  1081               	bcf	1,1
 14710                           
 14711                           ;LED_B1.c: 156: LED->Time = 0;
 14712  13C9  0A4E               	incf	_LED^(0+128),w
 14713  13CA  0086               	movwf	6
 14714  13CB  3001               	movlw	1	; select bank2/3
 14715  13CC  0087               	movwf	7
 14716  13CD  3000               	movlw	0
 14717  13CE  3FC0               	movwi [0]fsr1
 14718  13CF  3FC1               	movwi [1]fsr1
 14719                           
 14720                           ;LED_B1.c: 185: if (led == 99) {
 14721  13D0  0020               	movlb	0	; select bank0
 14722  13D1  0823               	movf	setLED@led,w
 14723  13D2  3A63               	xorlw	99
 14724  13D3  1903               	btfsc	3,2
 14725                           
 14726                           ;LED_B1.c: 189: RB5 = 1;
 14727  13D4  168D               	bsf	13,5	;volatile
 14728  13D5                     l8694:	
 14729                           
 14730                           ;LED_B1.c: 191: }
 14731                           ;LED_B1.c: 193: }
 14732                           ;LED_B1.c: 194: if (command == 11) {
 14733  13D5  0822               	movf	setLED@command,w
 14734  13D6  3A0B               	xorlw	11
 14735  13D7  1D03               	skipz
 14736  13D8  0008               	return
 14737                           
 14738                           ;LED_B1.c: 195: LED->GO = 1;
 14739  13D9  0021               	movlb	1	; select bank1
 14740  13DA  084E               	movf	_LED^(0+128),w
 14741  13DB  0086               	movwf	6
 14742  13DC  3001               	movlw	1	; select bank2/3
 14743  13DD  0087               	movwf	7
 14744  13DE  1481               	bsf	1,1
 14745  13DF  0008               	return
 14746  13E0                     __end_of_setLED:	
 14747                           
 14748                           	psect	text89
 14749  1D37                     __ptext89:	
 14750 ;; *************** function _LedPointSelect *****************
 14751 ;; Defined at:
 14752 ;;		line 7 in file "../src/LED_B1.c"
 14753 ;; Parameters:    Size  Location     Type
 14754 ;;  led             1    wreg     unsigned char 
 14755 ;; Auto vars:     Size  Location     Type
 14756 ;;  led             1    1[BANK0 ] unsigned char 
 14757 ;; Return value:  Size  Location     Type
 14758 ;;		None               void
 14759 ;; Registers used:
 14760 ;;		wreg
 14761 ;; Tracked objects:
 14762 ;;		On entry : 0/0
 14763 ;;		On exit  : 0/0
 14764 ;;		Unchanged: 0/0
 14765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14770 ;;Total ram usage:        2 bytes
 14771 ;; Hardware stack levels used:    1
 14772 ;; Hardware stack levels required when called:    5
 14773 ;; This function calls:
 14774 ;;		Nothing
 14775 ;; This function is called by:
 14776 ;;		_setLED_Initialization
 14777 ;;		_setLED
 14778 ;;		_setLED_Main
 14779 ;; This function uses a non-reentrant model
 14780 ;;
 14781                           
 14782                           
 14783                           ;psect for function _LedPointSelect
 14784  1D37                     _LedPointSelect:	
 14785                           
 14786                           ;incstack = 0
 14787                           ; Regs used in _LedPointSelect: [wreg]
 14788                           ;LedPointSelect@led stored from wreg
 14789  1D37  0020               	movlb	0	; select bank0
 14790  1D38  00A1               	movwf	LedPointSelect@led
 14791                           
 14792                           ;LED_B1.c: 24: if (led == 99) {
 14793  1D39  0821               	movf	LedPointSelect@led,w
 14794  1D3A  3A63               	xorlw	99
 14795  1D3B  1D03               	skipz
 14796  1D3C  0008               	return
 14797                           
 14798                           ;LED_B1.c: 25: LED = &VarErrLED;
 14799  1D3D  306A               	movlw	_VarErrLED& (0+255)
 14800  1D3E  00A0               	movwf	??_LedPointSelect
 14801  1D3F  0820               	movf	??_LedPointSelect,w
 14802  1D40  0021               	movlb	1	; select bank1
 14803  1D41  00CE               	movwf	_LED^(0+128)
 14804  1D42  0008               	return
 14805  1D43                     __end_of_LedPointSelect:	
 14806                           
 14807                           	psect	text90
 14808  1D2B                     __ptext90:	
 14809 ;; *************** function _setDimmerLights_Line *****************
 14810 ;; Defined at:
 14811 ;;		line 654 in file "../src/Dimmer_B1.c"
 14812 ;; Parameters:    Size  Location     Type
 14813 ;;  lights          1    wreg     unsigned char 
 14814 ;; Auto vars:     Size  Location     Type
 14815 ;;  lights          1    0[BANK0 ] unsigned char 
 14816 ;; Return value:  Size  Location     Type
 14817 ;;		None               void
 14818 ;; Registers used:
 14819 ;;		wreg
 14820 ;; Tracked objects:
 14821 ;;		On entry : 0/0
 14822 ;;		On exit  : 0/0
 14823 ;;		Unchanged: 0/0
 14824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14828 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14829 ;;Total ram usage:        1 bytes
 14830 ;; Hardware stack levels used:    1
 14831 ;; Hardware stack levels required when called:    5
 14832 ;; This function calls:
 14833 ;;		Nothing
 14834 ;; This function is called by:
 14835 ;;		_setDimmerLights
 14836 ;; This function uses a non-reentrant model
 14837 ;;
 14838                           
 14839                           
 14840                           ;psect for function _setDimmerLights_Line
 14841  1D2B                     _setDimmerLights_Line:	
 14842                           
 14843                           ;incstack = 0
 14844                           ; Regs used in _setDimmerLights_Line: [wreg]
 14845                           ;setDimmerLights_Line@lights stored from wreg
 14846  1D2B  0020               	movlb	0	; select bank0
 14847  1D2C  00A0               	movwf	setDimmerLights_Line@lights
 14848                           
 14849                           ;Dimmer_B1.c: 657: DimmerLights1.Line = 0;
 14850  1D2D  0022               	movlb	2	; select bank2
 14851  1D2E  135E               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 14852                           
 14853                           ;Dimmer_B1.c: 666: if (lights == 1) {
 14854  1D2F  0020               	movlb	0	; select bank0
 14855  1D30  0820               	movf	setDimmerLights_Line@lights,w
 14856  1D31  3A01               	xorlw	1
 14857  1D32  1D03               	skipz
 14858  1D33  0008               	return
 14859                           
 14860                           ;Dimmer_B1.c: 667: DimmerLights1.Line = 1;
 14861  1D34  0022               	movlb	2	; select bank2
 14862  1D35  175E               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 14863  1D36  0008               	return
 14864  1D37                     __end_of_setDimmerLights_Line:	
 14865                           
 14866                           	psect	text91
 14867  1C60                     __ptext91:	
 14868 ;; *************** function _getDimmerLights_Allow_Condition *****************
 14869 ;; Defined at:
 14870 ;;		line 554 in file "../src/Dimmer_B1.c"
 14871 ;; Parameters:    Size  Location     Type
 14872 ;;  lights          1    wreg     unsigned char 
 14873 ;; Auto vars:     Size  Location     Type
 14874 ;;  lights          1    0[COMMON] unsigned char 
 14875 ;;  allow           1    0[BANK0 ] unsigned char 
 14876 ;; Return value:  Size  Location     Type
 14877 ;;                  1    wreg      unsigned char 
 14878 ;; Registers used:
 14879 ;;		wreg, status,2
 14880 ;; Tracked objects:
 14881 ;;		On entry : 0/0
 14882 ;;		On exit  : 0/0
 14883 ;;		Unchanged: 0/0
 14884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;Total ram usage:        1 bytes
 14890 ;; Hardware stack levels used:    1
 14891 ;; Hardware stack levels required when called:    5
 14892 ;; This function calls:
 14893 ;;		Nothing
 14894 ;; This function is called by:
 14895 ;;		_setDimmerLights_SwOn
 14896 ;;		_setDimmerLights_AdjOn
 14897 ;;		_setDimmerLights_Main
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           
 14902                           ;psect for function _getDimmerLights_Allow_Condition
 14903  1C60                     _getDimmerLights_Allow_Condition:	
 14904                           
 14905                           ;Dimmer_B1.c: 555: char allow = 0;
 14906                           
 14907                           ;incstack = 0
 14908                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2]
 14909  1C60  0020               	movlb	0	; select bank0
 14910  1C61  01A0               	clrf	getDimmerLights_Allow_Condition@allow
 14911                           
 14912                           ;Dimmer_B1.c: 582: return allow;
 14913  1C62  0820               	movf	getDimmerLights_Allow_Condition@allow,w
 14914  1C63  0008               	return
 14915  1C64                     __end_of_getDimmerLights_Allow_Condition:	
 14916                           
 14917                           	psect	text92
 14918  1CC7                     __ptext92:	
 14919 ;; *************** function _DimmerLights_Initialization *****************
 14920 ;; Defined at:
 14921 ;;		line 341 in file "../src/Dimmer_B1.c"
 14922 ;; Parameters:    Size  Location     Type
 14923 ;;		None
 14924 ;; Auto vars:     Size  Location     Type
 14925 ;;		None
 14926 ;; Return value:  Size  Location     Type
 14927 ;;		None               void
 14928 ;; Registers used:
 14929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14930 ;; Tracked objects:
 14931 ;;		On entry : 0/0
 14932 ;;		On exit  : 0/0
 14933 ;;		Unchanged: 0/0
 14934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14938 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14939 ;;Total ram usage:        1 bytes
 14940 ;; Hardware stack levels used:    1
 14941 ;; Hardware stack levels required when called:    7
 14942 ;; This function calls:
 14943 ;;		_setDimmerLights_Initialization
 14944 ;; This function is called by:
 14945 ;;		_main
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           
 14950                           ;psect for function _DimmerLights_Initialization
 14951  1CC7                     _DimmerLights_Initialization:	
 14952                           
 14953                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 14954                           
 14955                           ;incstack = 0
 14956                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14957  1CC7  3054               	movlw	_DimmerLights1& (0+255)
 14958  1CC8  0020               	movlb	0	; select bank0
 14959  1CC9  00A4               	movwf	??_DimmerLights_Initialization
 14960  1CCA  0824               	movf	??_DimmerLights_Initialization,w
 14961  1CCB  0021               	movlb	1	; select bank1
 14962  1CCC  00CC               	movwf	_DimmerLights11^(0+128)
 14963                           
 14964                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 14965  1CCD  3001               	movlw	1
 14966  1CCE  3192  2201         	fcall	_setDimmerLights_Initialization
 14967  1CD0  0008               	return
 14968  1CD1                     __end_of_DimmerLights_Initialization:	
 14969                           
 14970                           	psect	text93
 14971  1201                     __ptext93:	
 14972 ;; *************** function _setDimmerLights_Initialization *****************
 14973 ;; Defined at:
 14974 ;;		line 365 in file "../src/Dimmer_B1.c"
 14975 ;; Parameters:    Size  Location     Type
 14976 ;;  lights          1    wreg     unsigned char 
 14977 ;; Auto vars:     Size  Location     Type
 14978 ;;  lights          1    3[BANK0 ] unsigned char 
 14979 ;; Return value:  Size  Location     Type
 14980 ;;		None               void
 14981 ;; Registers used:
 14982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14983 ;; Tracked objects:
 14984 ;;		On entry : 0/0
 14985 ;;		On exit  : 0/0
 14986 ;;		Unchanged: 0/0
 14987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14992 ;;Total ram usage:        2 bytes
 14993 ;; Hardware stack levels used:    1
 14994 ;; Hardware stack levels required when called:    6
 14995 ;; This function calls:
 14996 ;;		_DimmerLightsPointSelect
 14997 ;; This function is called by:
 14998 ;;		_DimmerLights_Initialization
 14999 ;; This function uses a non-reentrant model
 15000 ;;
 15001                           
 15002                           
 15003                           ;psect for function _setDimmerLights_Initialization
 15004  1201                     _setDimmerLights_Initialization:	
 15005                           
 15006                           ;incstack = 0
 15007                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15008                           ;setDimmerLights_Initialization@lights stored from wreg
 15009  1201  0020               	movlb	0	; select bank0
 15010  1202  00A3               	movwf	setDimmerLights_Initialization@lights
 15011                           
 15012                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15013  1203  0823               	movf	setDimmerLights_Initialization@lights,w
 15014  1204  319C  24DC  3192   	fcall	_DimmerLightsPointSelect
 15015                           
 15016                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15017  1207  3007               	movlw	7
 15018  1208  0020               	movlb	0	; select bank0
 15019  1209  00A2               	movwf	??_setDimmerLights_Initialization
 15020  120A  0875               	movf	_DimmerLights,w
 15021  120B  3E08               	addlw	8
 15022  120C  0086               	movwf	6
 15023  120D  3001               	movlw	1	; select bank2/3
 15024  120E  0087               	movwf	7
 15025  120F  0822               	movf	??_setDimmerLights_Initialization,w
 15026  1210  0081               	movwf	1
 15027                           
 15028                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(45*0.8));
 15029  1211  3024               	movlw	36
 15030  1212  00A2               	movwf	??_setDimmerLights_Initialization
 15031  1213  0875               	movf	_DimmerLights,w
 15032  1214  3E06               	addlw	6
 15033  1215  0086               	movwf	6
 15034  1216  3001               	movlw	1	; select bank2/3
 15035  1217  0087               	movwf	7
 15036  1218  0822               	movf	??_setDimmerLights_Initialization,w
 15037  1219  0081               	movwf	1
 15038                           
 15039                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15040  121A  300C               	movlw	12
 15041  121B  00A2               	movwf	??_setDimmerLights_Initialization
 15042  121C  0875               	movf	_DimmerLights,w
 15043  121D  3E09               	addlw	9
 15044  121E  0086               	movwf	6
 15045  121F  3001               	movlw	1	; select bank2/3
 15046  1220  0087               	movwf	7
 15047  1221  0822               	movf	??_setDimmerLights_Initialization,w
 15048  1222  0081               	movwf	1
 15049                           
 15050                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15051  1223  0875               	movf	_DimmerLights,w
 15052  1224  3E06               	addlw	6
 15053  1225  0086               	movwf	6
 15054  1226  3001               	movlw	1	; select bank2/3
 15055  1227  0087               	movwf	7
 15056  1228  0801               	movf	1,w
 15057  1229  00A2               	movwf	??_setDimmerLights_Initialization
 15058  122A  0875               	movf	_DimmerLights,w
 15059  122B  3E04               	addlw	4
 15060  122C  0086               	movwf	6
 15061  122D  3001               	movlw	1	; select bank2/3
 15062  122E  0087               	movwf	7
 15063  122F  0822               	movf	??_setDimmerLights_Initialization,w
 15064  1230  0081               	movwf	1
 15065  1231  0008               	return
 15066  1232                     __end_of_setDimmerLights_Initialization:	
 15067                           
 15068                           	psect	text94
 15069  1C5C                     __ptext94:	
 15070 ;; *************** function _DelayOff_Main *****************
 15071 ;; Defined at:
 15072 ;;		line 41 in file "../src/DelayOff_B1.c"
 15073 ;; Parameters:    Size  Location     Type
 15074 ;;		None
 15075 ;; Auto vars:     Size  Location     Type
 15076 ;;		None
 15077 ;; Return value:  Size  Location     Type
 15078 ;;		None               void
 15079 ;; Registers used:
 15080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15081 ;; Tracked objects:
 15082 ;;		On entry : 0/0
 15083 ;;		On exit  : 0/0
 15084 ;;		Unchanged: 0/0
 15085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;Total ram usage:        0 bytes
 15091 ;; Hardware stack levels used:    1
 15092 ;; Hardware stack levels required when called:   11
 15093 ;; This function calls:
 15094 ;;		_DlyOff_Main
 15095 ;; This function is called by:
 15096 ;;		_main
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           
 15101                           ;psect for function _DelayOff_Main
 15102  1C5C                     _DelayOff_Main:	
 15103                           
 15104                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15105                           
 15106                           ;incstack = 0
 15107                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15108  1C5C  3001               	movlw	1
 15109  1C5D  318A  223A         	fcall	_DlyOff_Main
 15110  1C5F  0008               	return
 15111  1C60                     __end_of_DelayOff_Main:	
 15112                           
 15113                           	psect	text95
 15114  0A3A                     __ptext95:	
 15115 ;; *************** function _DlyOff_Main *****************
 15116 ;; Defined at:
 15117 ;;		line 61 in file "../src/DelayOff_B1.c"
 15118 ;; Parameters:    Size  Location     Type
 15119 ;;  sw              1    wreg     unsigned char 
 15120 ;; Auto vars:     Size  Location     Type
 15121 ;;  sw              1   79[BANK0 ] unsigned char 
 15122 ;; Return value:  Size  Location     Type
 15123 ;;		None               void
 15124 ;; Registers used:
 15125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15126 ;; Tracked objects:
 15127 ;;		On entry : 0/0
 15128 ;;		On exit  : 0/0
 15129 ;;		Unchanged: 0/0
 15130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;Total ram usage:        3 bytes
 15136 ;; Hardware stack levels used:    1
 15137 ;; Hardware stack levels required when called:   10
 15138 ;; This function calls:
 15139 ;;		_DelayOffPointSelect
 15140 ;;		_setBuz
 15141 ;;		_setDimmerLights_ErrorClose
 15142 ;; This function is called by:
 15143 ;;		_DelayOff_Main
 15144 ;; This function uses a non-reentrant model
 15145 ;;
 15146                           
 15147                           
 15148                           ;psect for function _DlyOff_Main
 15149  0A3A                     _DlyOff_Main:	
 15150                           
 15151                           ;incstack = 0
 15152                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15153                           ;DlyOff_Main@sw stored from wreg
 15154  0A3A  0020               	movlb	0	; select bank0
 15155  0A3B  00EF               	movwf	DlyOff_Main@sw
 15156                           
 15157                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15158  0A3C  086F               	movf	DlyOff_Main@sw,w
 15159  0A3D  319D  251F  318A   	fcall	_DelayOffPointSelect
 15160                           
 15161                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15162  0A40  0021               	movlb	1	; select bank1
 15163  0A41  084B               	movf	_DelayOff^(0+128),w
 15164  0A42  0086               	movwf	6
 15165  0A43  3001               	movlw	1	; select bank2/3
 15166  0A44  0087               	movwf	7
 15167  0A45  1C81               	btfss	1,1
 15168  0A46  0008               	return
 15169                           
 15170                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15171  0A47  084B               	movf	_DelayOff^(0+128),w
 15172  0A48  3E02               	addlw	2
 15173  0A49  0086               	movwf	6
 15174  0A4A  3001               	movlw	1	; select bank2/3
 15175  0A4B  0087               	movwf	7
 15176  0A4C  3001               	movlw	1
 15177  0A4D  0781               	addwf	1,f
 15178  0A4E  3141               	addfsr 1,1
 15179  0A4F  1803               	skipnc
 15180  0A50  0A81               	incf	1,f
 15181                           
 15182                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15183  0A51  084B               	movf	_DelayOff^(0+128),w
 15184  0A52  3E02               	addlw	2
 15185  0A53  0086               	movwf	6
 15186  0A54  3001               	movlw	1	; select bank2/3
 15187  0A55  0087               	movwf	7
 15188  0A56  3F40               	moviw [0]fsr1
 15189  0A57  0020               	movlb	0	; select bank0
 15190  0A58  00ED               	movwf	??_DlyOff_Main
 15191  0A59  3F41               	moviw [1]fsr1
 15192  0A5A  00EE               	movwf	??_DlyOff_Main+1
 15193  0A5B  3017               	movlw	23
 15194  0A5C  026E               	subwf	??_DlyOff_Main+1,w
 15195  0A5D  3070               	movlw	112
 15196  0A5E  1903               	skipnz
 15197  0A5F  026D               	subwf	??_DlyOff_Main,w
 15198  0A60  1C03               	skipc
 15199  0A61  0008               	return
 15200                           
 15201                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15202  0A62  0021               	movlb	1	; select bank1
 15203  0A63  084B               	movf	_DelayOff^(0+128),w
 15204  0A64  3E02               	addlw	2
 15205  0A65  0086               	movwf	6
 15206  0A66  3001               	movlw	1	; select bank2/3
 15207  0A67  0087               	movwf	7
 15208  0A68  3000               	movlw	0
 15209  0A69  3FC0               	movwi [0]fsr1
 15210  0A6A  3FC1               	movwi [1]fsr1
 15211                           
 15212                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15213  0A6B  3001               	movlw	1
 15214  0A6C  0020               	movlb	0	; select bank0
 15215  0A6D  00ED               	movwf	??_DlyOff_Main
 15216  0A6E  0021               	movlb	1	; select bank1
 15217  0A6F  084B               	movf	_DelayOff^(0+128),w
 15218  0A70  3E04               	addlw	4
 15219  0A71  0086               	movwf	6
 15220  0A72  3001               	movlw	1	; select bank2/3
 15221  0A73  0087               	movwf	7
 15222  0A74  0020               	movlb	0	; select bank0
 15223  0A75  086D               	movf	??_DlyOff_Main,w
 15224  0A76  0781               	addwf	1,f
 15225                           
 15226                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15227  0A77  0021               	movlb	1	; select bank1
 15228  0A78  084B               	movf	_DelayOff^(0+128),w
 15229  0A79  3E04               	addlw	4
 15230  0A7A  0086               	movwf	6
 15231  0A7B  3001               	movlw	1	; select bank2/3
 15232  0A7C  0087               	movwf	7
 15233  0A7D  0A4B               	incf	_DelayOff^(0+128),w
 15234  0A7E  0084               	movwf	4
 15235  0A7F  3001               	movlw	1	; select bank2/3
 15236  0A80  0085               	movwf	5
 15237  0A81  0800               	movf	0,w
 15238  0A82  0201               	subwf	1,w
 15239  0A83  1C03               	skipc
 15240  0A84  0008               	return
 15241                           
 15242                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15243  0A85  084B               	movf	_DelayOff^(0+128),w
 15244  0A86  3E04               	addlw	4
 15245  0A87  0086               	movwf	6
 15246  0A88  3001               	movlw	1	; select bank2/3
 15247  0A89  0087               	movwf	7
 15248  0A8A  0181               	clrf	1
 15249                           
 15250                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15251  0A8B  084B               	movf	_DelayOff^(0+128),w
 15252  0A8C  0086               	movwf	6
 15253  0A8D  3001               	movlw	1	; select bank2/3
 15254  0A8E  0087               	movwf	7
 15255  0A8F  1081               	bcf	1,1
 15256                           
 15257                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15258  0A90  3064               	movlw	100
 15259  0A91  0020               	movlb	0	; select bank0
 15260  0A92  00A9               	movwf	setBuz@time
 15261  0A93  3000               	movlw	0
 15262  0A94  00AA               	movwf	setBuz@time+1
 15263  0A95  3001               	movlw	1
 15264  0A96  3197  27A7  318A   	fcall	_setBuz
 15265                           
 15266                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15267  0A99  0020               	movlb	0	; select bank0
 15268  0A9A  086F               	movf	DlyOff_Main@sw,w
 15269  0A9B  3189  211E         	fcall	_setDimmerLights_ErrorClose
 15270  0A9D  0008               	return
 15271  0A9E                     __end_of_DlyOff_Main:	
 15272                           
 15273                           	psect	text96
 15274  091E                     __ptext96:	
 15275 ;; *************** function _setDimmerLights_ErrorClose *****************
 15276 ;; Defined at:
 15277 ;;		line 783 in file "../src/Dimmer_B1.c"
 15278 ;; Parameters:    Size  Location     Type
 15279 ;;  lights          1    wreg     unsigned char 
 15280 ;; Auto vars:     Size  Location     Type
 15281 ;;  lights          1    1[BANK1 ] unsigned char 
 15282 ;;  i               2    2[BANK1 ] int 
 15283 ;;  count           1    0[BANK1 ] unsigned char 
 15284 ;; Return value:  Size  Location     Type
 15285 ;;		None               void
 15286 ;; Registers used:
 15287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15288 ;; Tracked objects:
 15289 ;;		On entry : 0/0
 15290 ;;		On exit  : 0/0
 15291 ;;		Unchanged: 0/0
 15292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;Total ram usage:        5 bytes
 15298 ;; Hardware stack levels used:    1
 15299 ;; Hardware stack levels required when called:    9
 15300 ;; This function calls:
 15301 ;;		_DimmerLightsPointSelect
 15302 ;;		_getDimmerLights_Status
 15303 ;;		_setDimmerLights_SwOff
 15304 ;; This function is called by:
 15305 ;;		_DlyOff_Main
 15306 ;;		_setControl_Lights_Table
 15307 ;;		_setMain_Exception
 15308 ;; This function uses a non-reentrant model
 15309 ;;
 15310                           
 15311                           
 15312                           ;psect for function _setDimmerLights_ErrorClose
 15313  091E                     _setDimmerLights_ErrorClose:	
 15314                           
 15315                           ;incstack = 0
 15316                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15317                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15318  091E  0021               	movlb	1	; select bank1
 15319  091F  00EA               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15320                           
 15321                           ;Dimmer_B1.c: 784: if (lights == 255) {
 15322  0920  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15323  0921  3AFF               	xorlw	255
 15324  0922  1D03               	skipz
 15325  0923  295C               	goto	l8582
 15326                           
 15327                           ;Dimmer_B1.c: 786: char count = 1;
 15328  0924  01E9               	clrf	setDimmerLights_ErrorClose@count^(0+128)
 15329  0925  0AE9               	incf	setDimmerLights_ErrorClose@count^(0+128),f
 15330                           
 15331                           ;Dimmer_B1.c: 794: for (int i = 0; i < count; i++) {
 15332  0926  01EB               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15333  0927  01EC               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15334  0928                     l8580:	
 15335  0928  086C               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15336  0929  3A80               	xorlw	128
 15337  092A  0020               	movlb	0	; select bank0
 15338  092B  00EC               	movwf	??_setDimmerLights_ErrorClose
 15339  092C  3080               	movlw	128
 15340  092D  026C               	subwf	??_setDimmerLights_ErrorClose,w
 15341  092E  1D03               	skipz
 15342  092F  2933               	goto	u9055
 15343  0930  0021               	movlb	1	; select bank1
 15344  0931  0869               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15345  0932  026B               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15346  0933                     u9055:	
 15347  0933  1803               	btfsc	3,0
 15348  0934  0008               	return
 15349                           
 15350                           ;Dimmer_B1.c: 795: DimmerLightsPointSelect(i + 1);
 15351  0935  0021               	movlb	1	; select bank1
 15352  0936  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15353  0937  3E01               	addlw	1
 15354  0938  319C  24DC  3189   	fcall	_DimmerLightsPointSelect
 15355                           
 15356                           ;Dimmer_B1.c: 796: if (getDimmerLights_Status(i + 1) == 1) {
 15357  093B  0021               	movlb	1	; select bank1
 15358  093C  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15359  093D  3E01               	addlw	1
 15360  093E  319D  25DC  3189   	fcall	_getDimmerLights_Status
 15361  0941  3A01               	xorlw	1
 15362  0942  1D03               	skipz
 15363  0943  2956               	goto	l8578
 15364                           
 15365                           ;Dimmer_B1.c: 797: DimmerLights->SwFlag = 1;
 15366  0944  0875               	movf	_DimmerLights,w
 15367  0945  3E0B               	addlw	11
 15368  0946  0086               	movwf	6
 15369  0947  3001               	movlw	1	; select bank2/3
 15370  0948  0087               	movwf	7
 15371  0949  1481               	bsf	1,1
 15372                           
 15373                           ;Dimmer_B1.c: 798: DimmerLights->Status = 0;
 15374  094A  0875               	movf	_DimmerLights,w
 15375  094B  3E02               	addlw	2
 15376  094C  0086               	movwf	6
 15377  094D  3001               	movlw	1	; select bank2/3
 15378  094E  0087               	movwf	7
 15379  094F  1081               	bcf	1,1
 15380                           
 15381                           ;Dimmer_B1.c: 799: setDimmerLights_SwOff(i + 1);
 15382  0950  0021               	movlb	1	; select bank1
 15383  0951  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15384  0952  3E01               	addlw	1
 15385  0953  3197  274F  3189   	fcall	_setDimmerLights_SwOff
 15386  0956                     l8578:	
 15387  0956  3001               	movlw	1
 15388  0957  0021               	movlb	1	; select bank1
 15389  0958  07EB               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15390  0959  3000               	movlw	0
 15391  095A  3DEC               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 15392  095B  2928               	goto	l8580
 15393  095C                     l8582:	
 15394                           ;Dimmer_B1.c: 800: }
 15395                           ;Dimmer_B1.c: 801: }
 15396                           ;Dimmer_B1.c: 802: } else {
 15397                           
 15398                           
 15399                           ;Dimmer_B1.c: 803: DimmerLightsPointSelect(lights);
 15400  095C  0021               	movlb	1	; select bank1
 15401  095D  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15402  095E  319C  24DC  3189   	fcall	_DimmerLightsPointSelect
 15403                           
 15404                           ;Dimmer_B1.c: 804: if (getDimmerLights_Status(lights) == 1) {
 15405  0961  0021               	movlb	1	; select bank1
 15406  0962  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15407  0963  319D  25DC  3189   	fcall	_getDimmerLights_Status
 15408  0966  3A01               	xorlw	1
 15409  0967  1D03               	skipz
 15410  0968  0008               	return
 15411                           
 15412                           ;Dimmer_B1.c: 805: DimmerLights->SwFlag = 1;
 15413  0969  0875               	movf	_DimmerLights,w
 15414  096A  3E0B               	addlw	11
 15415  096B  0086               	movwf	6
 15416  096C  3001               	movlw	1	; select bank2/3
 15417  096D  0087               	movwf	7
 15418  096E  1481               	bsf	1,1
 15419                           
 15420                           ;Dimmer_B1.c: 806: DimmerLights->Status = 0;
 15421  096F  0875               	movf	_DimmerLights,w
 15422  0970  3E02               	addlw	2
 15423  0971  0086               	movwf	6
 15424  0972  3001               	movlw	1	; select bank2/3
 15425  0973  0087               	movwf	7
 15426  0974  1081               	bcf	1,1
 15427                           
 15428                           ;Dimmer_B1.c: 807: setDimmerLights_SwOff(lights);
 15429  0975  0021               	movlb	1	; select bank1
 15430  0976  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15431  0977  3197  274F         	fcall	_setDimmerLights_SwOff
 15432  0979  0008               	return
 15433  097A                     __end_of_setDimmerLights_ErrorClose:	
 15434                           
 15435                           	psect	text97
 15436  174F                     __ptext97:	
 15437 ;; *************** function _setDimmerLights_SwOff *****************
 15438 ;; Defined at:
 15439 ;;		line 426 in file "../src/Dimmer_B1.c"
 15440 ;; Parameters:    Size  Location     Type
 15441 ;;  sw              1    wreg     unsigned char 
 15442 ;; Auto vars:     Size  Location     Type
 15443 ;;  sw              1   75[BANK0 ] unsigned char 
 15444 ;;  command         1   74[BANK0 ] unsigned char 
 15445 ;; Return value:  Size  Location     Type
 15446 ;;		None               void
 15447 ;; Registers used:
 15448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15449 ;; Tracked objects:
 15450 ;;		On entry : 0/0
 15451 ;;		On exit  : 0/0
 15452 ;;		Unchanged: 0/0
 15453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;Total ram usage:        2 bytes
 15459 ;; Hardware stack levels used:    1
 15460 ;; Hardware stack levels required when called:    8
 15461 ;; This function calls:
 15462 ;;		_DimmerLightsPointSelect
 15463 ;;		_getDelayOff_GO
 15464 ;;		_setDelayOff_GO
 15465 ;; This function is called by:
 15466 ;;		_setDimmerLights_ErrorClose
 15467 ;;		_Exception_Main
 15468 ;;		_setRFSW_Control
 15469 ;;		_setSw_Main
 15470 ;; This function uses a non-reentrant model
 15471 ;;
 15472                           
 15473                           
 15474                           ;psect for function _setDimmerLights_SwOff
 15475  174F                     _setDimmerLights_SwOff:	
 15476                           
 15477                           ;incstack = 0
 15478                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15479                           ;setDimmerLights_SwOff@sw stored from wreg
 15480  174F  0020               	movlb	0	; select bank0
 15481  1750  00EB               	movwf	setDimmerLights_SwOff@sw
 15482                           
 15483                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(sw);
 15484  1751  086B               	movf	setDimmerLights_SwOff@sw,w
 15485  1752  319C  24DC  3197   	fcall	_DimmerLightsPointSelect
 15486                           
 15487                           ;Dimmer_B1.c: 428: char command = DimmerLights->Status == 1 ? 1 : 0;
 15488  1755  0875               	movf	_DimmerLights,w
 15489  1756  3E02               	addlw	2
 15490  1757  0086               	movwf	6
 15491  1758  3001               	movlw	1	; select bank2/3
 15492  1759  0087               	movwf	7
 15493  175A  3000               	movlw	0
 15494  175B  1881               	btfsc	1,1
 15495  175C  3001               	movlw	1
 15496  175D  0020               	movlb	0	; select bank0
 15497  175E  00EA               	movwf	setDimmerLights_SwOff@command
 15498                           
 15499                           ;Dimmer_B1.c: 429: if (DimmerLights->SwFlag == 1) {
 15500  175F  0875               	movf	_DimmerLights,w
 15501  1760  3E0B               	addlw	11
 15502  1761  0086               	movwf	6
 15503  1762  3001               	movlw	1	; select bank2/3
 15504  1763  0087               	movwf	7
 15505  1764  1C81               	btfss	1,1
 15506  1765  0008               	return
 15507                           
 15508                           ;Dimmer_B1.c: 430: DimmerLights->SwFlag = 0;
 15509  1766  0875               	movf	_DimmerLights,w
 15510  1767  3E0B               	addlw	11
 15511  1768  0086               	movwf	6
 15512  1769  3001               	movlw	1	; select bank2/3
 15513  176A  0087               	movwf	7
 15514  176B  1081               	bcf	1,1
 15515                           
 15516                           ;Dimmer_B1.c: 431: if (DimmerLights->Status == 1) {
 15517  176C  0875               	movf	_DimmerLights,w
 15518  176D  3E02               	addlw	2
 15519  176E  0086               	movwf	6
 15520  176F  3001               	movlw	1	; select bank2/3
 15521  1770  0087               	movwf	7
 15522  1771  1C81               	btfss	1,1
 15523  1772  2F8D               	goto	l8428
 15524                           
 15525                           ;Dimmer_B1.c: 433: if (DimmerLights->SwAdj == 1) {
 15526  1773  0875               	movf	_DimmerLights,w
 15527  1774  3E0B               	addlw	11
 15528  1775  0086               	movwf	6
 15529  1776  3001               	movlw	1	; select bank2/3
 15530  1777  0087               	movwf	7
 15531  1778  1D01               	btfss	1,2
 15532  1779  0008               	return
 15533                           
 15534                           ;Dimmer_B1.c: 434: DimmerLights->SwAdj = 0;
 15535  177A  0875               	movf	_DimmerLights,w
 15536  177B  3E0B               	addlw	11
 15537  177C  0086               	movwf	6
 15538  177D  3001               	movlw	1	; select bank2/3
 15539  177E  0087               	movwf	7
 15540  177F  1101               	bcf	1,2
 15541                           
 15542                           ;Dimmer_B1.c: 436: DimmerLights->TriggerAdj = 1;
 15543  1780  0875               	movf	_DimmerLights,w
 15544  1781  3E0A               	addlw	10
 15545  1782  0086               	movwf	6
 15546  1783  3001               	movlw	1	; select bank2/3
 15547  1784  0087               	movwf	7
 15548  1785  1581               	bsf	1,3
 15549                           
 15550                           ;Dimmer_B1.c: 437: DimmerLights->SwitchAdj = 0;
 15551  1786  0875               	movf	_DimmerLights,w
 15552  1787  3E0A               	addlw	10
 15553  1788  0086               	movwf	6
 15554  1789  3001               	movlw	1	; select bank2/3
 15555  178A  0087               	movwf	7
 15556  178B  1101               	bcf	1,2
 15557                           
 15558                           ;Dimmer_B1.c: 438: }
 15559                           ;Dimmer_B1.c: 439: } else {
 15560  178C  0008               	return
 15561  178D                     l8428:	
 15562                           
 15563                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
 15564  178D  0875               	movf	_DimmerLights,w
 15565  178E  3E0A               	addlw	10
 15566  178F  0086               	movwf	6
 15567  1790  3001               	movlw	1	; select bank2/3
 15568  1791  0087               	movwf	7
 15569  1792  1481               	bsf	1,1
 15570                           
 15571                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 0;
 15572  1793  0875               	movf	_DimmerLights,w
 15573  1794  3E0A               	addlw	10
 15574  1795  0086               	movwf	6
 15575  1796  3001               	movlw	1	; select bank2/3
 15576  1797  0087               	movwf	7
 15577  1798  1001               	bcf	1,0
 15578                           
 15579                           ;Dimmer_B1.c: 444: if (getDelayOff_GO(sw) == 1) {
 15580  1799  086B               	movf	setDimmerLights_SwOff@sw,w
 15581  179A  319D  25ED  3197   	fcall	_getDelayOff_GO
 15582  179D  3A01               	xorlw	1
 15583  179E  1D03               	skipz
 15584  179F  0008               	return
 15585                           
 15586                           ;Dimmer_B1.c: 446: setDelayOff_GO(sw, 0, 0);
 15587  17A0  0020               	movlb	0	; select bank0
 15588  17A1  01E6               	clrf	setDelayOff_GO@command
 15589  17A2  01E7               	clrf	setDelayOff_GO@value
 15590  17A3  086B               	movf	setDimmerLights_SwOff@sw,w
 15591  17A4  3196  26F7         	fcall	_setDelayOff_GO
 15592  17A6  0008               	return
 15593  17A7                     __end_of_setDimmerLights_SwOff:	
 15594                           
 15595                           	psect	text98
 15596  16F7                     __ptext98:	
 15597 ;; *************** function _setDelayOff_GO *****************
 15598 ;; Defined at:
 15599 ;;		line 83 in file "../src/DelayOff_B1.c"
 15600 ;; Parameters:    Size  Location     Type
 15601 ;;  sw              1    wreg     unsigned char 
 15602 ;;  command         1   70[BANK0 ] unsigned char 
 15603 ;;  value           1   71[BANK0 ] unsigned char 
 15604 ;; Auto vars:     Size  Location     Type
 15605 ;;  sw              1   73[BANK0 ] unsigned char 
 15606 ;; Return value:  Size  Location     Type
 15607 ;;		None               void
 15608 ;; Registers used:
 15609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15610 ;; Tracked objects:
 15611 ;;		On entry : 0/0
 15612 ;;		On exit  : 0/0
 15613 ;;		Unchanged: 0/0
 15614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15615 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15619 ;;Total ram usage:        4 bytes
 15620 ;; Hardware stack levels used:    1
 15621 ;; Hardware stack levels required when called:    7
 15622 ;; This function calls:
 15623 ;;		_DelayOffPointSelect
 15624 ;;		_DelayTimejudge
 15625 ;;		_setProductData
 15626 ;; This function is called by:
 15627 ;;		_setDimmerLights_SwOff
 15628 ;;		_setRFSW_Control
 15629 ;; This function uses a non-reentrant model
 15630 ;;
 15631                           
 15632                           
 15633                           ;psect for function _setDelayOff_GO
 15634  16F7                     _setDelayOff_GO:	
 15635                           
 15636                           ;incstack = 0
 15637                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15638                           ;setDelayOff_GO@sw stored from wreg
 15639  16F7  0020               	movlb	0	; select bank0
 15640  16F8  00E9               	movwf	setDelayOff_GO@sw
 15641                           
 15642                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15643  16F9  0869               	movf	setDelayOff_GO@sw,w
 15644  16FA  319D  251F  3196   	fcall	_DelayOffPointSelect
 15645                           
 15646                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15647  16FD  0020               	movlb	0	; select bank0
 15648  16FE  0866               	movf	setDelayOff_GO@command,w
 15649  16FF  3A01               	xorlw	1
 15650  1700  3000               	movlw	0
 15651  1701  1903               	skipnz
 15652  1702  3001               	movlw	1
 15653  1703  00E8               	movwf	??_setDelayOff_GO
 15654  1704  0021               	movlb	1	; select bank1
 15655  1705  084B               	movf	_DelayOff^(0+128),w
 15656  1706  0086               	movwf	6
 15657  1707  3001               	movlw	1	; select bank2/3
 15658  1708  0087               	movwf	7
 15659  1709  0020               	movlb	0	; select bank0
 15660  170A  0DE8               	rlf	??_setDelayOff_GO,f
 15661  170B  0801               	movf	1,w
 15662  170C  0668               	xorwf	??_setDelayOff_GO,w
 15663  170D  39FD               	andlw	-3
 15664  170E  0668               	xorwf	??_setDelayOff_GO,w
 15665  170F  0081               	movwf	1
 15666                           
 15667                           ;DelayOff_B1.c: 89: if (command == 1) {
 15668  1710  0866               	movf	setDelayOff_GO@command,w
 15669  1711  3A01               	xorlw	1
 15670  1712  1D03               	skipz
 15671  1713  2F39               	goto	l8374
 15672                           
 15673                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15674  1714  0867               	movf	setDelayOff_GO@value,w
 15675  1715  3191  214E  3196   	fcall	_DelayTimejudge
 15676  1718  0020               	movlb	0	; select bank0
 15677  1719  00E8               	movwf	??_setDelayOff_GO
 15678  171A  0021               	movlb	1	; select bank1
 15679  171B  0A4B               	incf	_DelayOff^(0+128),w
 15680  171C  0086               	movwf	6
 15681  171D  3001               	movlw	1	; select bank2/3
 15682  171E  0087               	movwf	7
 15683  171F  0020               	movlb	0	; select bank0
 15684  1720  0868               	movf	??_setDelayOff_GO,w
 15685  1721  0081               	movwf	1
 15686                           
 15687                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15688  1722  300F               	movlw	15
 15689  1723  0567               	andwf	setDelayOff_GO@value,w
 15690  1724  00E8               	movwf	??_setDelayOff_GO
 15691  1725  0868               	movf	??_setDelayOff_GO,w
 15692  1726  3A05               	xorlw	5
 15693  1727  1903               	skipnz
 15694  1728  2F2D               	goto	l8368
 15695  1729  0867               	movf	setDelayOff_GO@value,w
 15696  172A  390F               	andlw	15
 15697  172B  1D03               	btfss	3,2
 15698  172C  2F33               	goto	l8372
 15699  172D                     l8368:	
 15700  172D  3026               	movlw	38
 15701  172E  0267               	subwf	setDelayOff_GO@value,w
 15702  172F  1803               	skipnc
 15703  1730  2F33               	goto	l8372
 15704                           
 15705                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 15706  1731  0867               	movf	setDelayOff_GO@value,w
 15707  1732  2F35               	goto	L6
 15708  1733                     l8372:	
 15709                           ;DelayOff_B1.c: 93: } else {
 15710                           
 15711                           
 15712                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 15713  1733  3005               	movlw	5
 15714  1734  0020               	movlb	0	; select bank0
 15715  1735                     L6:	
 15716  1735  00E8               	movwf	??_setDelayOff_GO
 15717  1736  0868               	movf	??_setDelayOff_GO,w
 15718  1737  00E2               	movwf	setProductData@value
 15719  1738  2F3B               	goto	L5
 15720  1739                     l8374:	
 15721                           ;DelayOff_B1.c: 95: }
 15722                           ;DelayOff_B1.c: 96: } else {
 15723                           
 15724                           
 15725                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 15726  1739  0020               	movlb	0	; select bank0
 15727  173A  01E2               	clrf	setProductData@value
 15728  173B                     L5:	
 15729  173B  0869               	movf	setDelayOff_GO@sw,w
 15730  173C  3E1A               	addlw	26
 15731  173D  319D  2573         	fcall	_setProductData
 15732                           
 15733                           ;DelayOff_B1.c: 98: }
 15734                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15735  173F  0021               	movlb	1	; select bank1
 15736  1740  084B               	movf	_DelayOff^(0+128),w
 15737  1741  3E02               	addlw	2
 15738  1742  0086               	movwf	6
 15739  1743  3001               	movlw	1	; select bank2/3
 15740  1744  0087               	movwf	7
 15741  1745  3000               	movlw	0
 15742  1746  3FC0               	movwi [0]fsr1
 15743  1747  3FC1               	movwi [1]fsr1
 15744                           
 15745                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15746  1748  084B               	movf	_DelayOff^(0+128),w
 15747  1749  3E04               	addlw	4
 15748  174A  0086               	movwf	6
 15749  174B  3001               	movlw	1	; select bank2/3
 15750  174C  0087               	movwf	7
 15751  174D  0181               	clrf	1
 15752  174E  0008               	return
 15753  174F                     __end_of_setDelayOff_GO:	
 15754                           
 15755                           	psect	text99
 15756  1D73                     __ptext99:	
 15757 ;; *************** function _setProductData *****************
 15758 ;; Defined at:
 15759 ;;		line 573 in file "../src/Main_B1.c"
 15760 ;; Parameters:    Size  Location     Type
 15761 ;;  address         1    wreg     unsigned char 
 15762 ;;  value           1   66[BANK0 ] unsigned char 
 15763 ;; Auto vars:     Size  Location     Type
 15764 ;;  address         1   69[BANK0 ] unsigned char 
 15765 ;; Return value:  Size  Location     Type
 15766 ;;		None               void
 15767 ;; Registers used:
 15768 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15769 ;; Tracked objects:
 15770 ;;		On entry : 0/0
 15771 ;;		On exit  : 0/0
 15772 ;;		Unchanged: 0/0
 15773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15774 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15775 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15776 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15777 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;Total ram usage:        4 bytes
 15779 ;; Hardware stack levels used:    1
 15780 ;; Hardware stack levels required when called:    5
 15781 ;; This function calls:
 15782 ;;		Nothing
 15783 ;; This function is called by:
 15784 ;;		_setDelayOff_GO
 15785 ;;		_setDimmerLights
 15786 ;;		_setDimmerLights_Adj
 15787 ;;		_setTemp_Main
 15788 ;;		_setLog_Code
 15789 ;;		_setControl_Lights_Table
 15790 ;;		_setRFSW_AdjControl
 15791 ;;		_setRF_DimmerValue
 15792 ;;		_setRF_DimmerLights
 15793 ;; This function uses a non-reentrant model
 15794 ;;
 15795                           
 15796                           
 15797                           ;psect for function _setProductData
 15798  1D73                     _setProductData:	
 15799                           
 15800                           ;incstack = 0
 15801                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15802                           ;setProductData@address stored from wreg
 15803  1D73  0020               	movlb	0	; select bank0
 15804  1D74  00E5               	movwf	setProductData@address
 15805                           
 15806                           ;Main_B1.c: 574: product->Data[address] = value;
 15807  1D75  0862               	movf	setProductData@value,w
 15808  1D76  00E3               	movwf	??_setProductData
 15809  1D77  0865               	movf	setProductData@address,w
 15810  1D78  0779               	addwf	_product,w
 15811  1D79  00E4               	movwf	??_setProductData+1
 15812  1D7A  0864               	movf	??_setProductData+1,w
 15813  1D7B  0086               	movwf	6
 15814  1D7C  3002               	movlw	2	; select bank4/5
 15815  1D7D  0087               	movwf	7
 15816  1D7E  0863               	movf	??_setProductData,w
 15817  1D7F  0081               	movwf	1
 15818  1D80  0008               	return
 15819  1D81                     __end_of_setProductData:	
 15820                           
 15821                           	psect	text100
 15822  114E                     __ptext100:	
 15823 ;; *************** function _DelayTimejudge *****************
 15824 ;; Defined at:
 15825 ;;		line 112 in file "../src/DelayOff_B1.c"
 15826 ;; Parameters:    Size  Location     Type
 15827 ;;  value           1    wreg     unsigned char 
 15828 ;; Auto vars:     Size  Location     Type
 15829 ;;  value           1    9[BANK0 ] unsigned char 
 15830 ;;  k               1    8[BANK0 ] unsigned char 
 15831 ;;  j               1    7[BANK0 ] unsigned char 
 15832 ;;  i               1    6[BANK0 ] unsigned char 
 15833 ;; Return value:  Size  Location     Type
 15834 ;;                  1    wreg      unsigned char 
 15835 ;; Registers used:
 15836 ;;		wreg, status,2, status,0, pclath, cstack
 15837 ;; Tracked objects:
 15838 ;;		On entry : 0/0
 15839 ;;		On exit  : 0/0
 15840 ;;		Unchanged: 0/0
 15841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;Total ram usage:        6 bytes
 15847 ;; Hardware stack levels used:    1
 15848 ;; Hardware stack levels required when called:    6
 15849 ;; This function calls:
 15850 ;;		___bmul
 15851 ;; This function is called by:
 15852 ;;		_setDelayOff_GO
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           
 15857                           ;psect for function _DelayTimejudge
 15858  114E                     _DelayTimejudge:	
 15859                           
 15860                           ;incstack = 0
 15861                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 15862                           ;DelayTimejudge@value stored from wreg
 15863  114E  0020               	movlb	0	; select bank0
 15864  114F  00A9               	movwf	DelayTimejudge@value
 15865                           
 15866                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 15867  1150  3005               	movlw	5
 15868  1151  00A4               	movwf	??_DelayTimejudge
 15869  1152  0824               	movf	??_DelayTimejudge,w
 15870  1153  00A6               	movwf	DelayTimejudge@i
 15871  1154  01A7               	clrf	DelayTimejudge@j
 15872  1155  01A8               	clrf	DelayTimejudge@k
 15873                           
 15874                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 15875  1156  3031               	movlw	49
 15876  1157  0229               	subwf	DelayTimejudge@value,w
 15877  1158  1803               	skipnc
 15878  1159  2976               	goto	l8266
 15879                           
 15880                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 15881  115A  0829               	movf	DelayTimejudge@value,w
 15882  115B  390F               	andlw	15
 15883  115C  00A4               	movwf	??_DelayTimejudge
 15884  115D  0824               	movf	??_DelayTimejudge,w
 15885  115E  00A7               	movwf	DelayTimejudge@j
 15886                           
 15887                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 15888  115F  0829               	movf	DelayTimejudge@value,w
 15889  1160  00A4               	movwf	??_DelayTimejudge
 15890  1161  3004               	movlw	4
 15891  1162                     u8655:	
 15892  1162  36A4               	lsrf	??_DelayTimejudge,f
 15893  1163  0B89               	decfsz	9,f
 15894  1164  2962               	goto	u8655
 15895  1165  0824               	movf	??_DelayTimejudge,w
 15896  1166  390F               	andlw	15
 15897  1167  00A5               	movwf	??_DelayTimejudge+1
 15898  1168  0825               	movf	??_DelayTimejudge+1,w
 15899  1169  00A8               	movwf	DelayTimejudge@k
 15900                           
 15901                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 15902  116A  300A               	movlw	10
 15903  116B  00A4               	movwf	??_DelayTimejudge
 15904  116C  0824               	movf	??_DelayTimejudge,w
 15905  116D  00A0               	movwf	___bmul@multiplicand
 15906  116E  0828               	movf	DelayTimejudge@k,w
 15907  116F  319E  2620         	fcall	___bmul
 15908  1171  0020               	movlb	0	; select bank0
 15909  1172  0727               	addwf	DelayTimejudge@j,w
 15910  1173  00A5               	movwf	??_DelayTimejudge+1
 15911  1174  0825               	movf	??_DelayTimejudge+1,w
 15912  1175  00A6               	movwf	DelayTimejudge@i
 15913  1176                     l8266:	
 15914                           
 15915                           ;DelayOff_B1.c: 118: }
 15916                           ;DelayOff_B1.c: 139: return i;
 15917  1176  0826               	movf	DelayTimejudge@i,w
 15918  1177  0008               	return
 15919  1178                     __end_of_DelayTimejudge:	
 15920                           
 15921                           	psect	text101
 15922  1E20                     __ptext101:	
 15923 ;; *************** function ___bmul *****************
 15924 ;; Defined at:
 15925 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15926 ;; Parameters:    Size  Location     Type
 15927 ;;  multiplier      1    wreg     unsigned char 
 15928 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15929 ;; Auto vars:     Size  Location     Type
 15930 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15931 ;;  product         1    2[BANK0 ] unsigned char 
 15932 ;; Return value:  Size  Location     Type
 15933 ;;                  1    wreg      unsigned char 
 15934 ;; Registers used:
 15935 ;;		wreg, status,2, status,0
 15936 ;; Tracked objects:
 15937 ;;		On entry : 0/0
 15938 ;;		On exit  : 0/0
 15939 ;;		Unchanged: 0/0
 15940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15941 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15945 ;;Total ram usage:        4 bytes
 15946 ;; Hardware stack levels used:    1
 15947 ;; Hardware stack levels required when called:    5
 15948 ;; This function calls:
 15949 ;;		Nothing
 15950 ;; This function is called by:
 15951 ;;		_DelayTimejudge
 15952 ;; This function uses a non-reentrant model
 15953 ;;
 15954                           
 15955                           
 15956                           ;psect for function ___bmul
 15957  1E20                     ___bmul:	
 15958                           
 15959                           ;incstack = 0
 15960                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15961                           ;___bmul@multiplier stored from wreg
 15962  1E20  0020               	movlb	0	; select bank0
 15963  1E21  00A3               	movwf	___bmul@multiplier
 15964  1E22  01A2               	clrf	___bmul@product
 15965  1E23                     l8008:	
 15966  1E23  1C23               	btfss	___bmul@multiplier,0
 15967  1E24  2E29               	goto	l8012
 15968  1E25  0820               	movf	___bmul@multiplicand,w
 15969  1E26  00A1               	movwf	??___bmul
 15970  1E27  0821               	movf	??___bmul,w
 15971  1E28  07A2               	addwf	___bmul@product,f
 15972  1E29                     l8012:	
 15973  1E29  1003               	clrc
 15974  1E2A  0DA0               	rlf	___bmul@multiplicand,f
 15975  1E2B  1003               	clrc
 15976  1E2C  0CA3               	rrf	___bmul@multiplier,f
 15977  1E2D  08A3               	movf	___bmul@multiplier,f
 15978  1E2E  1D03               	skipz
 15979  1E2F  2E23               	goto	l8008
 15980  1E30  0822               	movf	___bmul@product,w
 15981  1E31  0008               	return
 15982  1E32                     __end_of___bmul:	
 15983                           
 15984                           	psect	text102
 15985  1DED                     __ptext102:	
 15986 ;; *************** function _getDelayOff_GO *****************
 15987 ;; Defined at:
 15988 ;;		line 105 in file "../src/DelayOff_B1.c"
 15989 ;; Parameters:    Size  Location     Type
 15990 ;;  sw              1    wreg     unsigned char 
 15991 ;; Auto vars:     Size  Location     Type
 15992 ;;  sw              1    2[BANK0 ] unsigned char 
 15993 ;;  go              1    3[BANK0 ] unsigned char 
 15994 ;; Return value:  Size  Location     Type
 15995 ;;                  1    wreg      unsigned char 
 15996 ;; Registers used:
 15997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15998 ;; Tracked objects:
 15999 ;;		On entry : 0/0
 16000 ;;		On exit  : 0/0
 16001 ;;		Unchanged: 0/0
 16002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;Total ram usage:        2 bytes
 16008 ;; Hardware stack levels used:    1
 16009 ;; Hardware stack levels required when called:    6
 16010 ;; This function calls:
 16011 ;;		_DelayOffPointSelect
 16012 ;; This function is called by:
 16013 ;;		_setDimmerLights_SwOff
 16014 ;;		_setRFSW_Control
 16015 ;; This function uses a non-reentrant model
 16016 ;;
 16017                           
 16018                           
 16019                           ;psect for function _getDelayOff_GO
 16020  1DED                     _getDelayOff_GO:	
 16021                           
 16022                           ;incstack = 0
 16023                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16024                           ;getDelayOff_GO@sw stored from wreg
 16025  1DED  0020               	movlb	0	; select bank0
 16026  1DEE  00A2               	movwf	getDelayOff_GO@sw
 16027                           
 16028                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16029  1DEF  0822               	movf	getDelayOff_GO@sw,w
 16030  1DF0  319D  251F         	fcall	_DelayOffPointSelect
 16031                           
 16032                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16033  1DF2  0021               	movlb	1	; select bank1
 16034  1DF3  084B               	movf	_DelayOff^(0+128),w
 16035  1DF4  0086               	movwf	6
 16036  1DF5  3001               	movlw	1	; select bank2/3
 16037  1DF6  0087               	movwf	7
 16038  1DF7  3000               	movlw	0
 16039  1DF8  1881               	btfsc	1,1
 16040  1DF9  3001               	movlw	1
 16041  1DFA  0020               	movlb	0	; select bank0
 16042  1DFB  00A3               	movwf	getDelayOff_GO@go
 16043                           
 16044                           ;DelayOff_B1.c: 108: return go;
 16045  1DFC  0823               	movf	getDelayOff_GO@go,w
 16046  1DFD  0008               	return
 16047  1DFE                     __end_of_getDelayOff_GO:	
 16048                           
 16049                           	psect	text103
 16050  1DDC                     __ptext103:	
 16051 ;; *************** function _getDimmerLights_Status *****************
 16052 ;; Defined at:
 16053 ;;		line 705 in file "../src/Dimmer_B1.c"
 16054 ;; Parameters:    Size  Location     Type
 16055 ;;  lights          1    wreg     unsigned char 
 16056 ;; Auto vars:     Size  Location     Type
 16057 ;;  lights          1    2[BANK0 ] unsigned char 
 16058 ;;  status          1    3[BANK0 ] unsigned char 
 16059 ;; Return value:  Size  Location     Type
 16060 ;;                  1    wreg      unsigned char 
 16061 ;; Registers used:
 16062 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16063 ;; Tracked objects:
 16064 ;;		On entry : 0/0
 16065 ;;		On exit  : 0/0
 16066 ;;		Unchanged: 0/0
 16067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16071 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16072 ;;Total ram usage:        2 bytes
 16073 ;; Hardware stack levels used:    1
 16074 ;; Hardware stack levels required when called:    6
 16075 ;; This function calls:
 16076 ;;		_DimmerLightsPointSelect
 16077 ;; This function is called by:
 16078 ;;		_setDimmerLights_ErrorClose
 16079 ;;		_getMain_LightsStatus
 16080 ;;		_Exception_Main
 16081 ;;		_setRFSW_Control
 16082 ;;		_setRFSW_AdjControl
 16083 ;; This function uses a non-reentrant model
 16084 ;;
 16085                           
 16086                           
 16087                           ;psect for function _getDimmerLights_Status
 16088  1DDC                     _getDimmerLights_Status:	
 16089                           
 16090                           ;incstack = 0
 16091                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16092                           ;getDimmerLights_Status@lights stored from wreg
 16093  1DDC  0020               	movlb	0	; select bank0
 16094  1DDD  00A2               	movwf	getDimmerLights_Status@lights
 16095                           
 16096                           ;Dimmer_B1.c: 706: DimmerLightsPointSelect(lights);
 16097  1DDE  0822               	movf	getDimmerLights_Status@lights,w
 16098  1DDF  319C  24DC         	fcall	_DimmerLightsPointSelect
 16099                           
 16100                           ;Dimmer_B1.c: 707: char status = DimmerLights->Status == 1 ? 1 : 0;
 16101  1DE1  0875               	movf	_DimmerLights,w
 16102  1DE2  3E02               	addlw	2
 16103  1DE3  0086               	movwf	6
 16104  1DE4  3001               	movlw	1	; select bank2/3
 16105  1DE5  0087               	movwf	7
 16106  1DE6  3000               	movlw	0
 16107  1DE7  1881               	btfsc	1,1
 16108  1DE8  3001               	movlw	1
 16109  1DE9  0020               	movlb	0	; select bank0
 16110  1DEA  00A3               	movwf	getDimmerLights_Status@status
 16111                           
 16112                           ;Dimmer_B1.c: 709: return status;
 16113  1DEB  0823               	movf	getDimmerLights_Status@status,w
 16114  1DEC  0008               	return
 16115  1DED                     __end_of_getDimmerLights_Status:	
 16116                           
 16117                           	psect	text104
 16118  1CDC                     __ptext104:	
 16119 ;; *************** function _DimmerLightsPointSelect *****************
 16120 ;; Defined at:
 16121 ;;		line 321 in file "../src/Dimmer_B1.c"
 16122 ;; Parameters:    Size  Location     Type
 16123 ;;  lights          1    wreg     unsigned char 
 16124 ;; Auto vars:     Size  Location     Type
 16125 ;;  lights          1    1[BANK0 ] unsigned char 
 16126 ;; Return value:  Size  Location     Type
 16127 ;;		None               void
 16128 ;; Registers used:
 16129 ;;		wreg
 16130 ;; Tracked objects:
 16131 ;;		On entry : 0/0
 16132 ;;		On exit  : 0/0
 16133 ;;		Unchanged: 0/0
 16134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16139 ;;Total ram usage:        2 bytes
 16140 ;; Hardware stack levels used:    1
 16141 ;; Hardware stack levels required when called:    5
 16142 ;; This function calls:
 16143 ;;		Nothing
 16144 ;; This function is called by:
 16145 ;;		_setDimmerLights_Initialization
 16146 ;;		_setDimmerLights_SwOn
 16147 ;;		_setDimmerLights_SwOff
 16148 ;;		_setDimmerLights_AdjOn
 16149 ;;		_setDimmerLights_Main
 16150 ;;		_getDimmerLights_Status
 16151 ;;		_setDimmerLights_ErrorClose
 16152 ;;		_setDimmerLights_AdjRF
 16153 ;;		_Exception_Main
 16154 ;;		_setDimmerLights_Status
 16155 ;;		_setDimmerLights_GO
 16156 ;;		_setDimmerLights_MaxmumValue
 16157 ;;		_setDimmerLights_Trigger
 16158 ;;		_setDimmerLights_TriggerAdj
 16159 ;; This function uses a non-reentrant model
 16160 ;;
 16161                           
 16162                           
 16163                           ;psect for function _DimmerLightsPointSelect
 16164  1CDC                     _DimmerLightsPointSelect:	
 16165                           
 16166                           ;incstack = 0
 16167                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16168                           ;DimmerLightsPointSelect@lights stored from wreg
 16169  1CDC  0020               	movlb	0	; select bank0
 16170  1CDD  00A1               	movwf	DimmerLightsPointSelect@lights
 16171                           
 16172                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16173  1CDE  0821               	movf	DimmerLightsPointSelect@lights,w
 16174  1CDF  3A01               	xorlw	1
 16175  1CE0  1D03               	skipz
 16176  1CE1  0008               	return
 16177                           
 16178                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16179  1CE2  3054               	movlw	_DimmerLights1& (0+255)
 16180  1CE3  00A0               	movwf	??_DimmerLightsPointSelect
 16181  1CE4  0820               	movf	??_DimmerLightsPointSelect,w
 16182  1CE5  00F5               	movwf	_DimmerLights
 16183  1CE6  0008               	return
 16184  1CE7                     __end_of_DimmerLightsPointSelect:	
 16185                           
 16186                           	psect	text105
 16187  17A7                     __ptext105:	
 16188 ;; *************** function _setBuz *****************
 16189 ;; Defined at:
 16190 ;;		line 22 in file "../src/Buzzer_B1.c"
 16191 ;; Parameters:    Size  Location     Type
 16192 ;;  count           1    wreg     unsigned char 
 16193 ;;  time            2    9[BANK0 ] int 
 16194 ;; Auto vars:     Size  Location     Type
 16195 ;;  count           1   12[BANK0 ] unsigned char 
 16196 ;; Return value:  Size  Location     Type
 16197 ;;		None               void
 16198 ;; Registers used:
 16199 ;;		wreg, status,2, status,0, pclath, cstack
 16200 ;; Tracked objects:
 16201 ;;		On entry : 0/0
 16202 ;;		On exit  : 0/0
 16203 ;;		Unchanged: 0/0
 16204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;Total ram usage:        4 bytes
 16210 ;; Hardware stack levels used:    1
 16211 ;; Hardware stack levels required when called:    6
 16212 ;; This function calls:
 16213 ;;		___awdiv
 16214 ;; This function is called by:
 16215 ;;		_DlyOff_Main
 16216 ;;		_setDimmerLights_SwOn
 16217 ;;		_setDimmerLights_Adj
 16218 ;;		_my_MainTimer
 16219 ;;		_Exception_Main
 16220 ;;		_setTemp_Main
 16221 ;;		_setLog_Code
 16222 ;;		_setControl_Lights_Table
 16223 ;;		_setRFSW_Control
 16224 ;;		_setSw_Main
 16225 ;;		_setMain_Exception
 16226 ;; This function uses a non-reentrant model
 16227 ;;
 16228                           
 16229                           
 16230                           ;psect for function _setBuz
 16231  17A7                     _setBuz:	
 16232                           
 16233                           ;incstack = 0
 16234                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16235                           ;setBuz@count stored from wreg
 16236  17A7  0020               	movlb	0	; select bank0
 16237  17A8  00AC               	movwf	setBuz@count
 16238                           
 16239                           ;Buzzer_B1.c: 23: time /= 10;
 16240  17A9  300A               	movlw	10
 16241  17AA  00A0               	movwf	___awdiv@divisor
 16242  17AB  3000               	movlw	0
 16243  17AC  00A1               	movwf	___awdiv@divisor+1
 16244  17AD  082A               	movf	setBuz@time+1,w
 16245  17AE  01A3               	clrf	___awdiv@dividend+1
 16246  17AF  07A3               	addwf	___awdiv@dividend+1,f
 16247  17B0  0829               	movf	setBuz@time,w
 16248  17B1  01A2               	clrf	___awdiv@dividend
 16249  17B2  07A2               	addwf	___awdiv@dividend,f
 16250  17B3  3196  26A3  3197   	fcall	___awdiv
 16251  17B6  0020               	movlb	0	; select bank0
 16252  17B7  0821               	movf	?___awdiv+1,w
 16253  17B8  01AA               	clrf	setBuz@time+1
 16254  17B9  07AA               	addwf	setBuz@time+1,f
 16255  17BA  0820               	movf	?___awdiv,w
 16256  17BB  01A9               	clrf	setBuz@time
 16257  17BC  07A9               	addwf	setBuz@time,f
 16258                           
 16259                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16260  17BD  0021               	movlb	1	; select bank1
 16261  17BE  1C2E               	btfss	_Buz1^(0+128),0
 16262  17BF  0008               	return
 16263                           
 16264                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16265  17C0  18AE               	btfsc	_Buz1^(0+128),1
 16266  17C1  2FD8               	goto	l84
 16267                           
 16268                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16269  17C2  14AE               	bsf	_Buz1^(0+128),1
 16270                           
 16271                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16272  17C3  01AF               	clrf	(_Buz1^(0+128)+1)
 16273  17C4  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16274                           
 16275                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16276  17C5  0020               	movlb	0	; select bank0
 16277  17C6  082C               	movf	setBuz@count,w
 16278  17C7  00AB               	movwf	??_setBuz
 16279  17C8  082B               	movf	??_setBuz,w
 16280  17C9  0021               	movlb	1	; select bank1
 16281  17CA  00B1               	movwf	(_Buz1^(0+128)+3)
 16282                           
 16283                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16284  17CB  0020               	movlb	0	; select bank0
 16285  17CC  082A               	movf	setBuz@time+1,w
 16286  17CD  0021               	movlb	1	; select bank1
 16287  17CE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16288  17CF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16289  17D0  0020               	movlb	0	; select bank0
 16290  17D1  0829               	movf	setBuz@time,w
 16291  17D2  0021               	movlb	1	; select bank1
 16292  17D3  01B4               	clrf	(_Buz1^(0+128)+6)
 16293  17D4  07B4               	addwf	(_Buz1^(0+128)+6),f
 16294                           
 16295                           ;Buzzer_B1.c: 30: RB3 = 1;
 16296  17D5  0020               	movlb	0	; select bank0
 16297  17D6  158D               	bsf	13,3	;volatile
 16298                           
 16299                           ;Buzzer_B1.c: 31: } else {
 16300  17D7  0008               	return
 16301  17D8                     l84:	
 16302                           
 16303                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16304  17D8  19AE               	btfsc	_Buz1^(0+128),3
 16305  17D9  2FEC               	goto	l86
 16306                           
 16307                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16308  17DA  15AE               	bsf	_Buz1^(0+128),3
 16309                           
 16310                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16311  17DB  0020               	movlb	0	; select bank0
 16312  17DC  082C               	movf	setBuz@count,w
 16313  17DD  00AB               	movwf	??_setBuz
 16314  17DE  082B               	movf	??_setBuz,w
 16315  17DF  0021               	movlb	1	; select bank1
 16316  17E0  00B2               	movwf	(_Buz1^(0+128)+4)
 16317                           
 16318                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16319  17E1  0020               	movlb	0	; select bank0
 16320  17E2  082A               	movf	setBuz@time+1,w
 16321  17E3  0021               	movlb	1	; select bank1
 16322  17E4  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16323  17E5  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16324  17E6  0020               	movlb	0	; select bank0
 16325  17E7  0829               	movf	setBuz@time,w
 16326  17E8  0021               	movlb	1	; select bank1
 16327  17E9  01B6               	clrf	(_Buz1^(0+128)+8)
 16328  17EA  07B6               	addwf	(_Buz1^(0+128)+8),f
 16329                           
 16330                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16331  17EB  0008               	return
 16332  17EC                     l86:	
 16333  17EC  1A2E               	btfsc	_Buz1^(0+128),4
 16334  17ED  0008               	return
 16335                           
 16336                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16337  17EE  162E               	bsf	_Buz1^(0+128),4
 16338                           
 16339                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16340  17EF  0020               	movlb	0	; select bank0
 16341  17F0  082C               	movf	setBuz@count,w
 16342  17F1  00AB               	movwf	??_setBuz
 16343  17F2  082B               	movf	??_setBuz,w
 16344  17F3  0021               	movlb	1	; select bank1
 16345  17F4  00B3               	movwf	(_Buz1^(0+128)+5)
 16346                           
 16347                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16348  17F5  0020               	movlb	0	; select bank0
 16349  17F6  082A               	movf	setBuz@time+1,w
 16350  17F7  0021               	movlb	1	; select bank1
 16351  17F8  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16352  17F9  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16353  17FA  0020               	movlb	0	; select bank0
 16354  17FB  0829               	movf	setBuz@time,w
 16355  17FC  0021               	movlb	1	; select bank1
 16356  17FD  01B8               	clrf	(_Buz1^(0+128)+10)
 16357  17FE  07B8               	addwf	(_Buz1^(0+128)+10),f
 16358  17FF  0008               	return
 16359  1800                     __end_of_setBuz:	
 16360                           
 16361                           	psect	text106
 16362  16A3                     __ptext106:	
 16363 ;; *************** function ___awdiv *****************
 16364 ;; Defined at:
 16365 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16366 ;; Parameters:    Size  Location     Type
 16367 ;;  divisor         2    0[BANK0 ] int 
 16368 ;;  dividend        2    2[BANK0 ] int 
 16369 ;; Auto vars:     Size  Location     Type
 16370 ;;  quotient        2    7[BANK0 ] int 
 16371 ;;  sign            1    6[BANK0 ] unsigned char 
 16372 ;;  counter         1    5[BANK0 ] unsigned char 
 16373 ;; Return value:  Size  Location     Type
 16374 ;;                  2    0[BANK0 ] int 
 16375 ;; Registers used:
 16376 ;;		wreg, status,2, status,0
 16377 ;; Tracked objects:
 16378 ;;		On entry : 0/0
 16379 ;;		On exit  : 0/0
 16380 ;;		Unchanged: 0/0
 16381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16382 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16383 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;Total ram usage:        9 bytes
 16387 ;; Hardware stack levels used:    1
 16388 ;; Hardware stack levels required when called:    5
 16389 ;; This function calls:
 16390 ;;		Nothing
 16391 ;; This function is called by:
 16392 ;;		_setBuz
 16393 ;; This function uses a non-reentrant model
 16394 ;;
 16395                           
 16396                           
 16397                           ;psect for function ___awdiv
 16398  16A3                     ___awdiv:	
 16399                           
 16400                           ;incstack = 0
 16401                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16402  16A3  0020               	movlb	0	; select bank0
 16403  16A4  01A6               	clrf	___awdiv@sign
 16404  16A5  1FA1               	btfss	___awdiv@divisor+1,7
 16405  16A6  2EAE               	goto	l8292
 16406  16A7  09A0               	comf	___awdiv@divisor,f
 16407  16A8  09A1               	comf	___awdiv@divisor+1,f
 16408  16A9  0AA0               	incf	___awdiv@divisor,f
 16409  16AA  1903               	skipnz
 16410  16AB  0AA1               	incf	___awdiv@divisor+1,f
 16411  16AC  01A6               	clrf	___awdiv@sign
 16412  16AD  0AA6               	incf	___awdiv@sign,f
 16413  16AE                     l8292:	
 16414  16AE  1FA3               	btfss	___awdiv@dividend+1,7
 16415  16AF  2EB9               	goto	l8298
 16416  16B0  09A2               	comf	___awdiv@dividend,f
 16417  16B1  09A3               	comf	___awdiv@dividend+1,f
 16418  16B2  0AA2               	incf	___awdiv@dividend,f
 16419  16B3  1903               	skipnz
 16420  16B4  0AA3               	incf	___awdiv@dividend+1,f
 16421  16B5  3001               	movlw	1
 16422  16B6  00A4               	movwf	??___awdiv
 16423  16B7  0824               	movf	??___awdiv,w
 16424  16B8  06A6               	xorwf	___awdiv@sign,f
 16425  16B9                     l8298:	
 16426  16B9  01A7               	clrf	___awdiv@quotient
 16427  16BA  01A8               	clrf	___awdiv@quotient+1
 16428  16BB  0821               	movf	___awdiv@divisor+1,w
 16429  16BC  0420               	iorwf	___awdiv@divisor,w
 16430  16BD  1903               	skipnz
 16431  16BE  2EE8               	goto	l8320
 16432  16BF  01A5               	clrf	___awdiv@counter
 16433  16C0  0AA5               	incf	___awdiv@counter,f
 16434  16C1                     l8308:	
 16435  16C1  1BA1               	btfsc	___awdiv@divisor+1,7
 16436  16C2  2ECD               	goto	l8310
 16437  16C3  3001               	movlw	1
 16438  16C4                     u8705:	
 16439  16C4  35A0               	lslf	___awdiv@divisor,f
 16440  16C5  0DA1               	rlf	___awdiv@divisor+1,f
 16441  16C6  0B89               	decfsz	9,f
 16442  16C7  2EC4               	goto	u8705
 16443  16C8  3001               	movlw	1
 16444  16C9  00A4               	movwf	??___awdiv
 16445  16CA  0824               	movf	??___awdiv,w
 16446  16CB  07A5               	addwf	___awdiv@counter,f
 16447  16CC  2EC1               	goto	l8308
 16448  16CD                     l8310:	
 16449  16CD  3001               	movlw	1
 16450  16CE                     u8725:	
 16451  16CE  35A7               	lslf	___awdiv@quotient,f
 16452  16CF  0DA8               	rlf	___awdiv@quotient+1,f
 16453  16D0  0B89               	decfsz	9,f
 16454  16D1  2ECE               	goto	u8725
 16455  16D2  0821               	movf	___awdiv@divisor+1,w
 16456  16D3  0223               	subwf	___awdiv@dividend+1,w
 16457  16D4  1D03               	skipz
 16458  16D5  2ED8               	goto	u8735
 16459  16D6  0820               	movf	___awdiv@divisor,w
 16460  16D7  0222               	subwf	___awdiv@dividend,w
 16461  16D8                     u8735:	
 16462  16D8  1C03               	skipc
 16463  16D9  2EDF               	goto	l8316
 16464  16DA  0820               	movf	___awdiv@divisor,w
 16465  16DB  02A2               	subwf	___awdiv@dividend,f
 16466  16DC  0821               	movf	___awdiv@divisor+1,w
 16467  16DD  3BA3               	subwfb	___awdiv@dividend+1,f
 16468  16DE  1427               	bsf	___awdiv@quotient,0
 16469  16DF                     l8316:	
 16470  16DF  3001               	movlw	1
 16471  16E0                     u8745:	
 16472  16E0  36A1               	lsrf	___awdiv@divisor+1,f
 16473  16E1  0CA0               	rrf	___awdiv@divisor,f
 16474  16E2  0B89               	decfsz	9,f
 16475  16E3  2EE0               	goto	u8745
 16476  16E4  3001               	movlw	1
 16477  16E5  02A5               	subwf	___awdiv@counter,f
 16478  16E6  1D03               	btfss	3,2
 16479  16E7  2ECD               	goto	l8310
 16480  16E8                     l8320:	
 16481  16E8  0826               	movf	___awdiv@sign,w
 16482  16E9  1903               	btfsc	3,2
 16483  16EA  2EF0               	goto	l8324
 16484  16EB  09A7               	comf	___awdiv@quotient,f
 16485  16EC  09A8               	comf	___awdiv@quotient+1,f
 16486  16ED  0AA7               	incf	___awdiv@quotient,f
 16487  16EE  1903               	skipnz
 16488  16EF  0AA8               	incf	___awdiv@quotient+1,f
 16489  16F0                     l8324:	
 16490  16F0  0828               	movf	___awdiv@quotient+1,w
 16491  16F1  01A1               	clrf	?___awdiv+1
 16492  16F2  07A1               	addwf	?___awdiv+1,f
 16493  16F3  0827               	movf	___awdiv@quotient,w
 16494  16F4  01A0               	clrf	?___awdiv
 16495  16F5  07A0               	addwf	?___awdiv,f
 16496  16F6  0008               	return
 16497  16F7                     __end_of___awdiv:	
 16498                           
 16499                           	psect	text107
 16500  1C58                     __ptext107:	
 16501 ;; *************** function _DelayOff_Initialization *****************
 16502 ;; Defined at:
 16503 ;;		line 26 in file "../src/DelayOff_B1.c"
 16504 ;; Parameters:    Size  Location     Type
 16505 ;;		None
 16506 ;; Auto vars:     Size  Location     Type
 16507 ;;		None
 16508 ;; Return value:  Size  Location     Type
 16509 ;;		None               void
 16510 ;; Registers used:
 16511 ;;		wreg, status,2, status,0, pclath, cstack
 16512 ;; Tracked objects:
 16513 ;;		On entry : 0/0
 16514 ;;		On exit  : 0/0
 16515 ;;		Unchanged: 0/0
 16516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;Total ram usage:        0 bytes
 16522 ;; Hardware stack levels used:    1
 16523 ;; Hardware stack levels required when called:    7
 16524 ;; This function calls:
 16525 ;;		_DlyOff_Initialization
 16526 ;; This function is called by:
 16527 ;;		_main
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530                           
 16531                           
 16532                           ;psect for function _DelayOff_Initialization
 16533  1C58                     _DelayOff_Initialization:	
 16534                           
 16535                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16536                           
 16537                           ;incstack = 0
 16538                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16539  1C58  3001               	movlw	1
 16540  1C59  319C  2482         	fcall	_DlyOff_Initialization
 16541  1C5B  0008               	return
 16542  1C5C                     __end_of_DelayOff_Initialization:	
 16543                           
 16544                           	psect	text108
 16545  1C82                     __ptext108:	
 16546 ;; *************** function _DlyOff_Initialization *****************
 16547 ;; Defined at:
 16548 ;;		line 56 in file "../src/DelayOff_B1.c"
 16549 ;; Parameters:    Size  Location     Type
 16550 ;;  sw              1    wreg     unsigned char 
 16551 ;; Auto vars:     Size  Location     Type
 16552 ;;  sw              1    2[BANK0 ] unsigned char 
 16553 ;; Return value:  Size  Location     Type
 16554 ;;		None               void
 16555 ;; Registers used:
 16556 ;;		wreg, status,2, status,0, pclath, cstack
 16557 ;; Tracked objects:
 16558 ;;		On entry : 0/0
 16559 ;;		On exit  : 0/0
 16560 ;;		Unchanged: 0/0
 16561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16563 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16565 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;Total ram usage:        1 bytes
 16567 ;; Hardware stack levels used:    1
 16568 ;; Hardware stack levels required when called:    6
 16569 ;; This function calls:
 16570 ;;		_DelayOffPointSelect
 16571 ;; This function is called by:
 16572 ;;		_DelayOff_Initialization
 16573 ;; This function uses a non-reentrant model
 16574 ;;
 16575                           
 16576                           
 16577                           ;psect for function _DlyOff_Initialization
 16578  1C82                     _DlyOff_Initialization:	
 16579                           
 16580                           ;incstack = 0
 16581                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16582                           ;DlyOff_Initialization@sw stored from wreg
 16583  1C82  0020               	movlb	0	; select bank0
 16584  1C83  00A2               	movwf	DlyOff_Initialization@sw
 16585                           
 16586                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16587  1C84  0822               	movf	DlyOff_Initialization@sw,w
 16588  1C85  319D  251F         	fcall	_DelayOffPointSelect
 16589  1C87  0008               	return
 16590  1C88                     __end_of_DlyOff_Initialization:	
 16591                           
 16592                           	psect	text109
 16593  1D1F                     __ptext109:	
 16594 ;; *************** function _DelayOffPointSelect *****************
 16595 ;; Defined at:
 16596 ;;		line 7 in file "../src/DelayOff_B1.c"
 16597 ;; Parameters:    Size  Location     Type
 16598 ;;  sw              1    wreg     unsigned char 
 16599 ;; Auto vars:     Size  Location     Type
 16600 ;;  sw              1    1[BANK0 ] unsigned char 
 16601 ;; Return value:  Size  Location     Type
 16602 ;;		None               void
 16603 ;; Registers used:
 16604 ;;		wreg
 16605 ;; Tracked objects:
 16606 ;;		On entry : 0/0
 16607 ;;		On exit  : 0/0
 16608 ;;		Unchanged: 0/0
 16609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16614 ;;Total ram usage:        2 bytes
 16615 ;; Hardware stack levels used:    1
 16616 ;; Hardware stack levels required when called:    5
 16617 ;; This function calls:
 16618 ;;		Nothing
 16619 ;; This function is called by:
 16620 ;;		_DlyOff_Initialization
 16621 ;;		_DlyOff_Main
 16622 ;;		_setDelayOff_GO
 16623 ;;		_getDelayOff_GO
 16624 ;; This function uses a non-reentrant model
 16625 ;;
 16626                           
 16627                           
 16628                           ;psect for function _DelayOffPointSelect
 16629  1D1F                     _DelayOffPointSelect:	
 16630                           
 16631                           ;incstack = 0
 16632                           ; Regs used in _DelayOffPointSelect: [wreg]
 16633                           ;DelayOffPointSelect@sw stored from wreg
 16634  1D1F  0020               	movlb	0	; select bank0
 16635  1D20  00A1               	movwf	DelayOffPointSelect@sw
 16636                           
 16637                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16638  1D21  0821               	movf	DelayOffPointSelect@sw,w
 16639  1D22  3A01               	xorlw	1
 16640  1D23  1D03               	skipz
 16641  1D24  0008               	return
 16642                           
 16643                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16644  1D25  3065               	movlw	_DlySw1& (0+255)
 16645  1D26  00A0               	movwf	??_DelayOffPointSelect
 16646  1D27  0820               	movf	??_DelayOffPointSelect,w
 16647  1D28  0021               	movlb	1	; select bank1
 16648  1D29  00CB               	movwf	_DelayOff^(0+128)
 16649  1D2A  0008               	return
 16650  1D2B                     __end_of_DelayOffPointSelect:	
 16651                           
 16652                           	psect	text110
 16653  1EB7                     __ptext110:	
 16654 ;; *************** function _CC2500_PowerOnInitial *****************
 16655 ;; Defined at:
 16656 ;;		line 119 in file "../src/CC2500_B1.c"
 16657 ;; Parameters:    Size  Location     Type
 16658 ;;		None
 16659 ;; Auto vars:     Size  Location     Type
 16660 ;;		None
 16661 ;; Return value:  Size  Location     Type
 16662 ;;		None               void
 16663 ;; Registers used:
 16664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16665 ;; Tracked objects:
 16666 ;;		On entry : 0/0
 16667 ;;		On exit  : 0/0
 16668 ;;		Unchanged: 0/0
 16669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16674 ;;Total ram usage:        0 bytes
 16675 ;; Hardware stack levels used:    1
 16676 ;; Hardware stack levels required when called:    8
 16677 ;; This function calls:
 16678 ;;		_CC2500_ClearRXFIFO
 16679 ;;		_CC2500_ClearTXFIFO
 16680 ;;		_CC2500_FrequencyCabr
 16681 ;;		_CC2500_InitPATable
 16682 ;;		_CC2500_InitSetREG
 16683 ;;		_CC2500_PowerRST
 16684 ;;		_CC2500_SIDLEMode
 16685 ;; This function is called by:
 16686 ;;		_main
 16687 ;; This function uses a non-reentrant model
 16688 ;;
 16689                           
 16690                           
 16691                           ;psect for function _CC2500_PowerOnInitial
 16692  1EB7                     _CC2500_PowerOnInitial:	
 16693                           
 16694                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 16695                           
 16696                           ;incstack = 0
 16697                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16698  1EB7  3194  24D8  319E   	fcall	_CC2500_PowerRST
 16699                           
 16700                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 16701  1EBA  3191  2124  319E   	fcall	_CC2500_InitSetREG
 16702                           
 16703                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 16704  1EBD  319F  277F  319E   	fcall	_CC2500_InitPATable
 16705                           
 16706                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 16707  1EC0  319C  2450  319E   	fcall	_CC2500_ClearTXFIFO
 16708                           
 16709                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 16710  1EC3  319C  244C  319E   	fcall	_CC2500_ClearRXFIFO
 16711                           
 16712                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 16713  1EC6  319D  2513  319E   	fcall	_CC2500_FrequencyCabr
 16714                           
 16715                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 16716  1EC9  319C  2454         	fcall	_CC2500_SIDLEMode
 16717  1ECB  0008               	return
 16718  1ECC                     __end_of_CC2500_PowerOnInitial:	
 16719                           
 16720                           	psect	text111
 16721  1C54                     __ptext111:	
 16722 ;; *************** function _CC2500_SIDLEMode *****************
 16723 ;; Defined at:
 16724 ;;		line 209 in file "../src/CC2500_B1.c"
 16725 ;; Parameters:    Size  Location     Type
 16726 ;;		None
 16727 ;; Auto vars:     Size  Location     Type
 16728 ;;		None
 16729 ;; Return value:  Size  Location     Type
 16730 ;;		None               void
 16731 ;; Registers used:
 16732 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16733 ;; Tracked objects:
 16734 ;;		On entry : 0/0
 16735 ;;		On exit  : 0/0
 16736 ;;		Unchanged: 0/0
 16737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;Total ram usage:        0 bytes
 16743 ;; Hardware stack levels used:    1
 16744 ;; Hardware stack levels required when called:    7
 16745 ;; This function calls:
 16746 ;;		_CC2500_WriteCommand
 16747 ;; This function is called by:
 16748 ;;		_CC2500_PowerOnInitial
 16749 ;; This function uses a non-reentrant model
 16750 ;;
 16751                           
 16752                           
 16753                           ;psect for function _CC2500_SIDLEMode
 16754  1C54                     _CC2500_SIDLEMode:	
 16755                           
 16756                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 16757                           
 16758                           ;incstack = 0
 16759                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16760  1C54  3036               	movlw	54
 16761  1C55  319F  2712         	fcall	_CC2500_WriteCommand
 16762  1C57  0008               	return
 16763  1C58                     __end_of_CC2500_SIDLEMode:	
 16764                           
 16765                           	psect	text112
 16766  14D8                     __ptext112:	
 16767 ;; *************** function _CC2500_PowerRST *****************
 16768 ;; Defined at:
 16769 ;;		line 132 in file "../src/CC2500_B1.c"
 16770 ;; Parameters:    Size  Location     Type
 16771 ;;		None
 16772 ;; Auto vars:     Size  Location     Type
 16773 ;;		None
 16774 ;; Return value:  Size  Location     Type
 16775 ;;		None               void
 16776 ;; Registers used:
 16777 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16778 ;; Tracked objects:
 16779 ;;		On entry : 0/0
 16780 ;;		On exit  : 0/0
 16781 ;;		Unchanged: 0/0
 16782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16786 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;Total ram usage:        1 bytes
 16788 ;; Hardware stack levels used:    1
 16789 ;; Hardware stack levels required when called:    6
 16790 ;; This function calls:
 16791 ;;		_CC2500_WriteByte
 16792 ;;		_DelayTime_1us
 16793 ;;		_Timeout_Counter
 16794 ;;		_set_TimeoutCleared
 16795 ;; This function is called by:
 16796 ;;		_CC2500_PowerOnInitial
 16797 ;; This function uses a non-reentrant model
 16798 ;;
 16799                           
 16800                           
 16801                           ;psect for function _CC2500_PowerRST
 16802  14D8                     _CC2500_PowerRST:	
 16803                           
 16804                           ;CC2500_B1.c: 133: RC3 = 0;
 16805                           
 16806                           ;incstack = 0
 16807                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16808  14D8  0020               	movlb	0	; select bank0
 16809  14D9  118E               	bcf	14,3	;volatile
 16810                           
 16811                           ;CC2500_B1.c: 134: RC4 = 0;
 16812  14DA  120E               	bcf	14,4	;volatile
 16813                           
 16814                           ;CC2500_B1.c: 135: RC0 = 1;
 16815  14DB  140E               	bsf	14,0	;volatile
 16816                           
 16817                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 16818  14DC  300A               	movlw	10
 16819  14DD  00A0               	movwf	DelayTime_1us@count
 16820  14DE  3000               	movlw	0
 16821  14DF  00A1               	movwf	DelayTime_1us@count+1
 16822  14E0  3190  20FE  3194   	fcall	_DelayTime_1us
 16823                           
 16824                           ;CC2500_B1.c: 137: RC0 = 0;
 16825  14E3  0020               	movlb	0	; select bank0
 16826  14E4  100E               	bcf	14,0	;volatile
 16827                           
 16828                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 16829  14E5  300A               	movlw	10
 16830  14E6  00A0               	movwf	DelayTime_1us@count
 16831  14E7  3000               	movlw	0
 16832  14E8  00A1               	movwf	DelayTime_1us@count+1
 16833  14E9  3190  20FE  3194   	fcall	_DelayTime_1us
 16834                           
 16835                           ;CC2500_B1.c: 139: RC0 = 1;
 16836  14EC  0020               	movlb	0	; select bank0
 16837  14ED  140E               	bsf	14,0	;volatile
 16838                           
 16839                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 16840  14EE  3028               	movlw	40
 16841  14EF  00A0               	movwf	DelayTime_1us@count
 16842  14F0  3000               	movlw	0
 16843  14F1  00A1               	movwf	DelayTime_1us@count+1
 16844  14F2  3190  20FE  3194   	fcall	_DelayTime_1us
 16845                           
 16846                           ;CC2500_B1.c: 141: RC0 = 0;
 16847  14F5  0020               	movlb	0	; select bank0
 16848  14F6  100E               	bcf	14,0	;volatile
 16849                           
 16850                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 16851  14F7  3030               	movlw	48
 16852  14F8  00A6               	movwf	??_CC2500_PowerRST
 16853  14F9  0826               	movf	??_CC2500_PowerRST,w
 16854  14FA  0021               	movlb	1	; select bank1
 16855  14FB  00D1               	movwf	_SPI0Buffer^(0+128)
 16856                           
 16857                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 16858  14FC  2D00               	goto	l9152
 16859  14FD                     l9150:	
 16860                           
 16861                           ;CC2500_B1.c: 144: Timeout_Counter();
 16862  14FD  319E  26A2  3194   	fcall	_Timeout_Counter
 16863  1500                     l9152:	
 16864  1500  0020               	movlb	0	; select bank0
 16865  1501  1E8E               	btfss	14,5	;volatile
 16866  1502  2D06               	goto	l9156
 16867  1503  0021               	movlb	1	; select bank1
 16868  1504  1D2B               	btfss	(_myMain^(0+128)+11),2
 16869  1505  2CFD               	goto	l9150
 16870  1506                     l9156:	
 16871                           
 16872                           ;CC2500_B1.c: 145: };
 16873                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 16874  1506  319C  2478  3194   	fcall	_set_TimeoutCleared
 16875                           
 16876                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 16877  1509  319E  26F9  3194   	fcall	_CC2500_WriteByte
 16878                           
 16879                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 16880  150C  2D10               	goto	l9162
 16881  150D                     l9160:	
 16882                           
 16883                           ;CC2500_B1.c: 149: Timeout_Counter();
 16884  150D  319E  26A2  3194   	fcall	_Timeout_Counter
 16885  1510                     l9162:	
 16886  1510  0020               	movlb	0	; select bank0
 16887  1511  1E8E               	btfss	14,5	;volatile
 16888  1512  2D16               	goto	l9166
 16889  1513  0021               	movlb	1	; select bank1
 16890  1514  1D2B               	btfss	(_myMain^(0+128)+11),2
 16891  1515  2D0D               	goto	l9160
 16892  1516                     l9166:	
 16893                           
 16894                           ;CC2500_B1.c: 150: };
 16895                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 16896  1516  319C  2478         	fcall	_set_TimeoutCleared
 16897                           
 16898                           ;CC2500_B1.c: 152: RC4 = 0;
 16899  1518  0020               	movlb	0	; select bank0
 16900  1519  120E               	bcf	14,4	;volatile
 16901                           
 16902                           ;CC2500_B1.c: 153: RC0 = 1;
 16903  151A  140E               	bsf	14,0	;volatile
 16904  151B  0008               	return
 16905  151C                     __end_of_CC2500_PowerRST:	
 16906                           
 16907                           	psect	text113
 16908  1124                     __ptext113:	
 16909 ;; *************** function _CC2500_InitSetREG *****************
 16910 ;; Defined at:
 16911 ;;		line 159 in file "../src/CC2500_B1.c"
 16912 ;; Parameters:    Size  Location     Type
 16913 ;;		None
 16914 ;; Auto vars:     Size  Location     Type
 16915 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16916 ;;  temp2           1    7[BANK0 ] unsigned char 
 16917 ;;  temp1           1    6[BANK0 ] unsigned char 
 16918 ;; Return value:  Size  Location     Type
 16919 ;;		None               void
 16920 ;; Registers used:
 16921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16922 ;; Tracked objects:
 16923 ;;		On entry : 0/0
 16924 ;;		On exit  : 0/0
 16925 ;;		Unchanged: 0/0
 16926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16928 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;Total ram usage:        4 bytes
 16932 ;; Hardware stack levels used:    1
 16933 ;; Hardware stack levels required when called:    7
 16934 ;; This function calls:
 16935 ;;		_CC2500_WriteREG
 16936 ;; This function is called by:
 16937 ;;		_CC2500_PowerOnInitial
 16938 ;; This function uses a non-reentrant model
 16939 ;;
 16940                           
 16941                           
 16942                           ;psect for function _CC2500_InitSetREG
 16943  1124                     _CC2500_InitSetREG:	
 16944                           
 16945                           ;CC2500_B1.c: 160: unsigned char loop_c;
 16946                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 16947                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 16948                           
 16949                           ;incstack = 0
 16950                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16951  1124  0020               	movlb	0	; select bank0
 16952  1125  01A8               	clrf	CC2500_InitSetREG@loop_c
 16953  1126                     L7:	
 16954  1126  302F               	movlw	47
 16955  1127  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16956  1128  1803               	btfsc	3,0
 16957  1129  0008               	return
 16958                           
 16959                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 16960  112A  0828               	movf	CC2500_InitSetREG@loop_c,w
 16961  112B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16962  112C  0084               	movwf	4
 16963  112D  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16964  112E  1803               	skipnc
 16965  112F  3E01               	addlw	1
 16966  1130  0085               	movwf	5
 16967  1131  0800               	movf	0,w	;code access
 16968  1132  00A5               	movwf	??_CC2500_InitSetREG
 16969  1133  0825               	movf	??_CC2500_InitSetREG,w
 16970  1134  00A6               	movwf	CC2500_InitSetREG@temp1
 16971                           
 16972                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 16973  1135  0828               	movf	CC2500_InitSetREG@loop_c,w
 16974  1136  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16975  1137  0084               	movwf	4
 16976  1138  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16977  1139  1803               	skipnc
 16978  113A  3E01               	addlw	1
 16979  113B  0085               	movwf	5
 16980  113C  0800               	movf	0,w	;code access
 16981  113D  00A5               	movwf	??_CC2500_InitSetREG
 16982  113E  0825               	movf	??_CC2500_InitSetREG,w
 16983  113F  00A7               	movwf	CC2500_InitSetREG@temp2
 16984                           
 16985                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 16986  1140  0827               	movf	CC2500_InitSetREG@temp2,w
 16987  1141  00A5               	movwf	??_CC2500_InitSetREG
 16988  1142  0825               	movf	??_CC2500_InitSetREG,w
 16989  1143  00A2               	movwf	CC2500_WriteREG@value
 16990  1144  0826               	movf	CC2500_InitSetREG@temp1,w
 16991  1145  3190  206E  3191   	fcall	_CC2500_WriteREG
 16992  1148  3001               	movlw	1
 16993  1149  0020               	movlb	0	; select bank0
 16994  114A  00A5               	movwf	??_CC2500_InitSetREG
 16995  114B  0825               	movf	??_CC2500_InitSetREG,w
 16996  114C  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16997  114D  2926               	goto	L7
 16998  114E                     __end_of_CC2500_InitSetREG:	
 16999                           
 17000                           	psect	text114
 17001  1F7F                     __ptext114:	
 17002 ;; *************** function _CC2500_InitPATable *****************
 17003 ;; Defined at:
 17004 ;;		line 174 in file "../src/CC2500_B1.c"
 17005 ;; Parameters:    Size  Location     Type
 17006 ;;		None
 17007 ;; Auto vars:     Size  Location     Type
 17008 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17009 ;;  temp            1    6[BANK0 ] unsigned char 
 17010 ;; Return value:  Size  Location     Type
 17011 ;;		None               void
 17012 ;; Registers used:
 17013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17014 ;; Tracked objects:
 17015 ;;		On entry : 0/0
 17016 ;;		On exit  : 0/0
 17017 ;;		Unchanged: 0/0
 17018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17020 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17022 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17023 ;;Total ram usage:        3 bytes
 17024 ;; Hardware stack levels used:    1
 17025 ;; Hardware stack levels required when called:    7
 17026 ;; This function calls:
 17027 ;;		_CC2500_WriteREG
 17028 ;; This function is called by:
 17029 ;;		_CC2500_PowerOnInitial
 17030 ;; This function uses a non-reentrant model
 17031 ;;
 17032                           
 17033                           
 17034                           ;psect for function _CC2500_InitPATable
 17035  1F7F                     _CC2500_InitPATable:	
 17036                           
 17037                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17038                           ;CC2500_B1.c: 176: unsigned char temp;
 17039                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17040                           
 17041                           ;incstack = 0
 17042                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17043  1F7F  0020               	movlb	0	; select bank0
 17044  1F80  01A7               	clrf	CC2500_InitPATable@loop_d
 17045  1F81                     L8:	
 17046  1F81  3008               	movlw	8
 17047  1F82  0227               	subwf	CC2500_InitPATable@loop_d,w
 17048  1F83  1803               	btfsc	3,0
 17049  1F84  0008               	return
 17050                           
 17051                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17052  1F85  0827               	movf	CC2500_InitPATable@loop_d,w
 17053  1F86  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17054  1F87  0084               	movwf	4
 17055  1F88  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17056  1F89  1803               	skipnc
 17057  1F8A  3E01               	addlw	1
 17058  1F8B  0085               	movwf	5
 17059  1F8C  0800               	movf	0,w	;code access
 17060  1F8D  00A5               	movwf	??_CC2500_InitPATable
 17061  1F8E  0825               	movf	??_CC2500_InitPATable,w
 17062  1F8F  00A6               	movwf	CC2500_InitPATable@temp
 17063                           
 17064                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17065  1F90  0826               	movf	CC2500_InitPATable@temp,w
 17066  1F91  00A5               	movwf	??_CC2500_InitPATable
 17067  1F92  0825               	movf	??_CC2500_InitPATable,w
 17068  1F93  00A2               	movwf	CC2500_WriteREG@value
 17069  1F94  303E               	movlw	62
 17070  1F95  3190  206E  319F   	fcall	_CC2500_WriteREG
 17071  1F98  3001               	movlw	1
 17072  1F99  0020               	movlb	0	; select bank0
 17073  1F9A  00A5               	movwf	??_CC2500_InitPATable
 17074  1F9B  0825               	movf	??_CC2500_InitPATable,w
 17075  1F9C  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17076  1F9D  2F81               	goto	L8
 17077  1F9E                     __end_of_CC2500_InitPATable:	
 17078                           
 17079                           	psect	text115
 17080  106E                     __ptext115:	
 17081 ;; *************** function _CC2500_WriteREG *****************
 17082 ;; Defined at:
 17083 ;;		line 251 in file "../src/CC2500_B1.c"
 17084 ;; Parameters:    Size  Location     Type
 17085 ;;  w_addr          1    wreg     unsigned char 
 17086 ;;  value           1    2[BANK0 ] unsigned char 
 17087 ;; Auto vars:     Size  Location     Type
 17088 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17089 ;; Return value:  Size  Location     Type
 17090 ;;		None               void
 17091 ;; Registers used:
 17092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17093 ;; Tracked objects:
 17094 ;;		On entry : 0/0
 17095 ;;		On exit  : 0/0
 17096 ;;		Unchanged: 0/0
 17097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17098 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17101 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17102 ;;Total ram usage:        3 bytes
 17103 ;; Hardware stack levels used:    1
 17104 ;; Hardware stack levels required when called:    6
 17105 ;; This function calls:
 17106 ;;		_CC2500_WriteByte
 17107 ;;		_Timeout_Counter
 17108 ;;		_set_TimeoutCleared
 17109 ;; This function is called by:
 17110 ;;		_CC2500_InitSetREG
 17111 ;;		_CC2500_InitPATable
 17112 ;; This function uses a non-reentrant model
 17113 ;;
 17114                           
 17115                           
 17116                           ;psect for function _CC2500_WriteREG
 17117  106E                     _CC2500_WriteREG:	
 17118                           
 17119                           ;incstack = 0
 17120                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17121                           ;CC2500_WriteREG@w_addr stored from wreg
 17122  106E  0020               	movlb	0	; select bank0
 17123  106F  00A4               	movwf	CC2500_WriteREG@w_addr
 17124                           
 17125                           ;CC2500_B1.c: 252: RC0 = 0;
 17126  1070  100E               	bcf	14,0	;volatile
 17127                           
 17128                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17129  1071  0824               	movf	CC2500_WriteREG@w_addr,w
 17130  1072  00A3               	movwf	??_CC2500_WriteREG
 17131  1073  0823               	movf	??_CC2500_WriteREG,w
 17132  1074  0021               	movlb	1	; select bank1
 17133  1075  00D1               	movwf	_SPI0Buffer^(0+128)
 17134                           
 17135                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17136  1076  287A               	goto	l8892
 17137  1077                     l8890:	
 17138                           
 17139                           ;CC2500_B1.c: 255: Timeout_Counter();
 17140  1077  319E  26A2  3190   	fcall	_Timeout_Counter
 17141  107A                     l8892:	
 17142  107A  0020               	movlb	0	; select bank0
 17143  107B  1E8E               	btfss	14,5	;volatile
 17144  107C  2880               	goto	l8896
 17145  107D  0021               	movlb	1	; select bank1
 17146  107E  1D2B               	btfss	(_myMain^(0+128)+11),2
 17147  107F  2877               	goto	l8890
 17148  1080                     l8896:	
 17149                           
 17150                           ;CC2500_B1.c: 256: };
 17151                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17152  1080  319C  2478  3190   	fcall	_set_TimeoutCleared
 17153                           
 17154                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17155  1083  319E  26F9  3190   	fcall	_CC2500_WriteByte
 17156                           
 17157                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17158  1086  0020               	movlb	0	; select bank0
 17159  1087  0822               	movf	CC2500_WriteREG@value,w
 17160  1088  00A3               	movwf	??_CC2500_WriteREG
 17161  1089  0823               	movf	??_CC2500_WriteREG,w
 17162  108A  0021               	movlb	1	; select bank1
 17163  108B  00D1               	movwf	_SPI0Buffer^(0+128)
 17164                           
 17165                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17166  108C  319E  26F9         	fcall	_CC2500_WriteByte
 17167                           
 17168                           ;CC2500_B1.c: 262: RC0 = 1;
 17169  108E  0020               	movlb	0	; select bank0
 17170  108F  140E               	bsf	14,0	;volatile
 17171  1090  0008               	return
 17172  1091                     __end_of_CC2500_WriteREG:	
 17173                           
 17174                           	psect	text116
 17175  1D13                     __ptext116:	
 17176 ;; *************** function _CC2500_FrequencyCabr *****************
 17177 ;; Defined at:
 17178 ;;		line 201 in file "../src/CC2500_B1.c"
 17179 ;; Parameters:    Size  Location     Type
 17180 ;;		None
 17181 ;; Auto vars:     Size  Location     Type
 17182 ;;		None
 17183 ;; Return value:  Size  Location     Type
 17184 ;;		None               void
 17185 ;; Registers used:
 17186 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17187 ;; Tracked objects:
 17188 ;;		On entry : 0/0
 17189 ;;		On exit  : 0/0
 17190 ;;		Unchanged: 0/0
 17191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17196 ;;Total ram usage:        0 bytes
 17197 ;; Hardware stack levels used:    1
 17198 ;; Hardware stack levels required when called:    7
 17199 ;; This function calls:
 17200 ;;		_CC2500_WriteCommand
 17201 ;;		_DelayTime_1us
 17202 ;; This function is called by:
 17203 ;;		_CC2500_PowerOnInitial
 17204 ;; This function uses a non-reentrant model
 17205 ;;
 17206                           
 17207                           
 17208                           ;psect for function _CC2500_FrequencyCabr
 17209  1D13                     _CC2500_FrequencyCabr:	
 17210                           
 17211                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17212                           
 17213                           ;incstack = 0
 17214                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17215  1D13  3033               	movlw	51
 17216  1D14  319F  2712  319D   	fcall	_CC2500_WriteCommand
 17217                           
 17218                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17219  1D17  30E8               	movlw	232
 17220  1D18  0020               	movlb	0	; select bank0
 17221  1D19  00A0               	movwf	DelayTime_1us@count
 17222  1D1A  3003               	movlw	3
 17223  1D1B  00A1               	movwf	DelayTime_1us@count+1
 17224  1D1C  3190  20FE         	fcall	_DelayTime_1us
 17225  1D1E  0008               	return
 17226  1D1F                     __end_of_CC2500_FrequencyCabr:	
 17227                           
 17228                           	psect	text117
 17229  10FE                     __ptext117:	
 17230 ;; *************** function _DelayTime_1us *****************
 17231 ;; Defined at:
 17232 ;;		line 320 in file "../src/CC2500_B1.c"
 17233 ;; Parameters:    Size  Location     Type
 17234 ;;  count           2    0[BANK0 ] int 
 17235 ;; Auto vars:     Size  Location     Type
 17236 ;;  j               2    4[BANK0 ] unsigned int 
 17237 ;;  i               2    2[BANK0 ] unsigned int 
 17238 ;; Return value:  Size  Location     Type
 17239 ;;		None               void
 17240 ;; Registers used:
 17241 ;;		wreg, status,2
 17242 ;; Tracked objects:
 17243 ;;		On entry : 0/0
 17244 ;;		On exit  : 0/0
 17245 ;;		Unchanged: 0/0
 17246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17247 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17251 ;;Total ram usage:        6 bytes
 17252 ;; Hardware stack levels used:    1
 17253 ;; Hardware stack levels required when called:    5
 17254 ;; This function calls:
 17255 ;;		Nothing
 17256 ;; This function is called by:
 17257 ;;		_CC2500_PowerRST
 17258 ;;		_CC2500_FrequencyCabr
 17259 ;; This function uses a non-reentrant model
 17260 ;;
 17261                           
 17262                           
 17263                           ;psect for function _DelayTime_1us
 17264  10FE                     _DelayTime_1us:	
 17265                           
 17266                           ;CC2500_B1.c: 321: unsigned int i, j;
 17267                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17268                           
 17269                           ;incstack = 0
 17270                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17271  10FE  3001               	movlw	1
 17272  10FF  0020               	movlb	0	; select bank0
 17273  1100  00A2               	movwf	DelayTime_1us@i
 17274  1101  3000               	movlw	0
 17275  1102  00A3               	movwf	DelayTime_1us@i+1
 17276  1103                     l348:	
 17277  1103  0821               	movf	DelayTime_1us@count+1,w
 17278  1104  0223               	subwf	DelayTime_1us@i+1,w
 17279  1105  1D03               	skipz
 17280  1106  2909               	goto	u9495
 17281  1107  0820               	movf	DelayTime_1us@count,w
 17282  1108  0222               	subwf	DelayTime_1us@i,w
 17283  1109                     u9495:	
 17284  1109  1803               	btfsc	3,0
 17285  110A  0008               	return
 17286                           
 17287                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17288  110B  01A4               	clrf	DelayTime_1us@j
 17289  110C  01A5               	clrf	DelayTime_1us@j+1
 17290  110D  3000               	movlw	0
 17291  110E  0225               	subwf	DelayTime_1us@j+1,w
 17292  110F  3002               	movlw	2
 17293  1110  1903               	skipnz
 17294  1111  0224               	subwf	DelayTime_1us@j,w
 17295  1112  1803               	btfsc	3,0
 17296  1113  291F               	goto	l8884
 17297  1114                     l8882:	
 17298  1114  3001               	movlw	1
 17299  1115  07A4               	addwf	DelayTime_1us@j,f
 17300  1116  3000               	movlw	0
 17301  1117  3DA5               	addwfc	DelayTime_1us@j+1,f
 17302  1118  3000               	movlw	0
 17303  1119  0225               	subwf	DelayTime_1us@j+1,w
 17304  111A  3002               	movlw	2
 17305  111B  1903               	skipnz
 17306  111C  0224               	subwf	DelayTime_1us@j,w
 17307  111D  1C03               	skipc
 17308  111E  2914               	goto	l8882
 17309  111F                     l8884:	
 17310  111F  3001               	movlw	1
 17311  1120  07A2               	addwf	DelayTime_1us@i,f
 17312  1121  3000               	movlw	0
 17313  1122  3DA3               	addwfc	DelayTime_1us@i+1,f
 17314  1123  2903               	goto	l348
 17315  1124                     __end_of_DelayTime_1us:	
 17316                           
 17317                           	psect	text118
 17318  1C50                     __ptext118:	
 17319 ;; *************** function _CC2500_ClearTXFIFO *****************
 17320 ;; Defined at:
 17321 ;;		line 187 in file "../src/CC2500_B1.c"
 17322 ;; Parameters:    Size  Location     Type
 17323 ;;		None
 17324 ;; Auto vars:     Size  Location     Type
 17325 ;;		None
 17326 ;; Return value:  Size  Location     Type
 17327 ;;		None               void
 17328 ;; Registers used:
 17329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17330 ;; Tracked objects:
 17331 ;;		On entry : 0/0
 17332 ;;		On exit  : 0/0
 17333 ;;		Unchanged: 0/0
 17334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17339 ;;Total ram usage:        0 bytes
 17340 ;; Hardware stack levels used:    1
 17341 ;; Hardware stack levels required when called:    7
 17342 ;; This function calls:
 17343 ;;		_CC2500_WriteCommand
 17344 ;; This function is called by:
 17345 ;;		_CC2500_PowerOnInitial
 17346 ;; This function uses a non-reentrant model
 17347 ;;
 17348                           
 17349                           
 17350                           ;psect for function _CC2500_ClearTXFIFO
 17351  1C50                     _CC2500_ClearTXFIFO:	
 17352                           
 17353                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17354                           
 17355                           ;incstack = 0
 17356                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17357  1C50  303B               	movlw	59
 17358  1C51  319F  2712         	fcall	_CC2500_WriteCommand
 17359  1C53  0008               	return
 17360  1C54                     __end_of_CC2500_ClearTXFIFO:	
 17361                           
 17362                           	psect	text119
 17363  1C4C                     __ptext119:	
 17364 ;; *************** function _CC2500_ClearRXFIFO *****************
 17365 ;; Defined at:
 17366 ;;		line 194 in file "../src/CC2500_B1.c"
 17367 ;; Parameters:    Size  Location     Type
 17368 ;;		None
 17369 ;; Auto vars:     Size  Location     Type
 17370 ;;		None
 17371 ;; Return value:  Size  Location     Type
 17372 ;;		None               void
 17373 ;; Registers used:
 17374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17375 ;; Tracked objects:
 17376 ;;		On entry : 0/0
 17377 ;;		On exit  : 0/0
 17378 ;;		Unchanged: 0/0
 17379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17384 ;;Total ram usage:        0 bytes
 17385 ;; Hardware stack levels used:    1
 17386 ;; Hardware stack levels required when called:    7
 17387 ;; This function calls:
 17388 ;;		_CC2500_WriteCommand
 17389 ;; This function is called by:
 17390 ;;		_CC2500_PowerOnInitial
 17391 ;; This function uses a non-reentrant model
 17392 ;;
 17393                           
 17394                           
 17395                           ;psect for function _CC2500_ClearRXFIFO
 17396  1C4C                     _CC2500_ClearRXFIFO:	
 17397                           
 17398                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17399                           
 17400                           ;incstack = 0
 17401                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17402  1C4C  303A               	movlw	58
 17403  1C4D  319F  2712         	fcall	_CC2500_WriteCommand
 17404  1C4F  0008               	return
 17405  1C50                     __end_of_CC2500_ClearRXFIFO:	
 17406                           
 17407                           	psect	text120
 17408  1F12                     __ptext120:	
 17409 ;; *************** function _CC2500_WriteCommand *****************
 17410 ;; Defined at:
 17411 ;;		line 285 in file "../src/CC2500_B1.c"
 17412 ;; Parameters:    Size  Location     Type
 17413 ;;  command         1    wreg     unsigned char 
 17414 ;; Auto vars:     Size  Location     Type
 17415 ;;  command         1    3[BANK0 ] unsigned char 
 17416 ;; Return value:  Size  Location     Type
 17417 ;;		None               void
 17418 ;; Registers used:
 17419 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17420 ;; Tracked objects:
 17421 ;;		On entry : 0/0
 17422 ;;		On exit  : 0/0
 17423 ;;		Unchanged: 0/0
 17424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17427 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17428 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17429 ;;Total ram usage:        2 bytes
 17430 ;; Hardware stack levels used:    1
 17431 ;; Hardware stack levels required when called:    6
 17432 ;; This function calls:
 17433 ;;		_CC2500_WriteByte
 17434 ;;		_Timeout_Counter
 17435 ;;		_set_TimeoutCleared
 17436 ;; This function is called by:
 17437 ;;		_CC2500_TxData
 17438 ;;		_CC2500_ClearTXFIFO
 17439 ;;		_CC2500_ClearRXFIFO
 17440 ;;		_CC2500_FrequencyCabr
 17441 ;;		_CC2500_SIDLEMode
 17442 ;;		_setRF_Main
 17443 ;;		_RF_RxDisable
 17444 ;; This function uses a non-reentrant model
 17445 ;;
 17446                           
 17447                           
 17448                           ;psect for function _CC2500_WriteCommand
 17449  1F12                     _CC2500_WriteCommand:	
 17450                           
 17451                           ;incstack = 0
 17452                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17453                           ;CC2500_WriteCommand@command stored from wreg
 17454  1F12  0020               	movlb	0	; select bank0
 17455  1F13  00A3               	movwf	CC2500_WriteCommand@command
 17456                           
 17457                           ;CC2500_B1.c: 286: RC0 = 0;
 17458  1F14  100E               	bcf	14,0	;volatile
 17459                           
 17460                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17461  1F15  0823               	movf	CC2500_WriteCommand@command,w
 17462  1F16  00A2               	movwf	??_CC2500_WriteCommand
 17463  1F17  0822               	movf	??_CC2500_WriteCommand,w
 17464  1F18  0021               	movlb	1	; select bank1
 17465  1F19  00D1               	movwf	_SPI0Buffer^(0+128)
 17466                           
 17467                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17468  1F1A  2F1E               	goto	l8636
 17469  1F1B                     l8634:	
 17470                           
 17471                           ;CC2500_B1.c: 290: Timeout_Counter();
 17472  1F1B  319E  26A2  319F   	fcall	_Timeout_Counter
 17473  1F1E                     l8636:	
 17474  1F1E  0020               	movlb	0	; select bank0
 17475  1F1F  1E8E               	btfss	14,5	;volatile
 17476  1F20  2F24               	goto	l8640
 17477  1F21  0021               	movlb	1	; select bank1
 17478  1F22  1D2B               	btfss	(_myMain^(0+128)+11),2
 17479  1F23  2F1B               	goto	l8634
 17480  1F24                     l8640:	
 17481                           
 17482                           ;CC2500_B1.c: 291: };
 17483                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17484  1F24  319C  2478  319F   	fcall	_set_TimeoutCleared
 17485                           
 17486                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17487  1F27  319E  26F9         	fcall	_CC2500_WriteByte
 17488                           
 17489                           ;CC2500_B1.c: 295: RC0 = 1;
 17490  1F29  0020               	movlb	0	; select bank0
 17491  1F2A  140E               	bsf	14,0	;volatile
 17492  1F2B  0008               	return
 17493  1F2C                     __end_of_CC2500_WriteCommand:	
 17494                           
 17495                           	psect	text121
 17496  1C78                     __ptext121:	
 17497 ;; *************** function _set_TimeoutCleared *****************
 17498 ;; Defined at:
 17499 ;;		line 283 in file "../src/Main_B1.c"
 17500 ;; Parameters:    Size  Location     Type
 17501 ;;		None
 17502 ;; Auto vars:     Size  Location     Type
 17503 ;;		None
 17504 ;; Return value:  Size  Location     Type
 17505 ;;		None               void
 17506 ;; Registers used:
 17507 ;;		status,2
 17508 ;; Tracked objects:
 17509 ;;		On entry : 0/0
 17510 ;;		On exit  : 0/0
 17511 ;;		Unchanged: 0/0
 17512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17517 ;;Total ram usage:        0 bytes
 17518 ;; Hardware stack levels used:    1
 17519 ;; Hardware stack levels required when called:    5
 17520 ;; This function calls:
 17521 ;;		Nothing
 17522 ;; This function is called by:
 17523 ;;		_CC2500_TxData
 17524 ;;		_CC2500_RxData
 17525 ;;		_CC2500_PowerRST
 17526 ;;		_CC2500_WriteREG
 17527 ;;		_CC2500_WriteCommand
 17528 ;;		_CC2500_ReadStatus
 17529 ;;		_getAD
 17530 ;;		_TouchPower
 17531 ;;		_CC2500_ReadREG
 17532 ;; This function uses a non-reentrant model
 17533 ;;
 17534                           
 17535                           
 17536                           ;psect for function _set_TimeoutCleared
 17537  1C78                     _set_TimeoutCleared:	
 17538                           
 17539                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17540                           
 17541                           ;incstack = 0
 17542                           ; Regs used in _set_TimeoutCleared: [status,2]
 17543  1C78  0021               	movlb	1	; select bank1
 17544  1C79  112B               	bcf	(_myMain^(0+128)+11),2
 17545                           
 17546                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17547  1C7A  01AC               	clrf	(_myMain^(0+128)+12)
 17548  1C7B  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17549  1C7C  0008               	return
 17550  1C7D                     __end_of_set_TimeoutCleared:	
 17551                           
 17552                           	psect	text122
 17553  1EA2                     __ptext122:	
 17554 ;; *************** function _Timeout_Counter *****************
 17555 ;; Defined at:
 17556 ;;		line 274 in file "../src/Main_B1.c"
 17557 ;; Parameters:    Size  Location     Type
 17558 ;;		None
 17559 ;; Auto vars:     Size  Location     Type
 17560 ;;		None
 17561 ;; Return value:  Size  Location     Type
 17562 ;;		None               void
 17563 ;; Registers used:
 17564 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17565 ;; Tracked objects:
 17566 ;;		On entry : 0/0
 17567 ;;		On exit  : 0/0
 17568 ;;		Unchanged: 0/0
 17569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17574 ;;Total ram usage:        0 bytes
 17575 ;; Hardware stack levels used:    1
 17576 ;; Hardware stack levels required when called:    5
 17577 ;; This function calls:
 17578 ;;		Nothing
 17579 ;; This function is called by:
 17580 ;;		_CC2500_TxData
 17581 ;;		_CC2500_RxData
 17582 ;;		_CC2500_PowerRST
 17583 ;;		_CC2500_WriteREG
 17584 ;;		_CC2500_WriteCommand
 17585 ;;		_CC2500_ReadStatus
 17586 ;;		_getAD
 17587 ;;		_TouchPower
 17588 ;;		_CC2500_ReadREG
 17589 ;; This function uses a non-reentrant model
 17590 ;;
 17591                           
 17592                           
 17593                           ;psect for function _Timeout_Counter
 17594  1EA2                     _Timeout_Counter:	
 17595                           
 17596                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17597                           
 17598                           ;incstack = 0
 17599                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17600  1EA2  3001               	movlw	1
 17601  1EA3  0021               	movlb	1	; select bank1
 17602  1EA4  07AC               	addwf	(_myMain^(0+128)+12),f
 17603  1EA5  3000               	movlw	0
 17604  1EA6  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17605                           
 17606                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 17607  1EA7  300C               	movlw	12
 17608  1EA8  3EA0               	addlw	_myMain& (0+255)
 17609  1EA9  0086               	movwf	6
 17610  1EAA  0187               	clrf	7
 17611  1EAB  3F40               	moviw [0]fsr1
 17612  1EAC  3A10               	xorlw	16
 17613  1EAD  1D03               	skipz
 17614  1EAE  2EB1               	goto	u8965
 17615  1EAF  3F41               	moviw [1]fsr1
 17616  1EB0  3A27               	xorlw	39
 17617  1EB1                     u8965:	
 17618  1EB1  1D03               	skipz
 17619  1EB2  0008               	return
 17620                           
 17621                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17622  1EB3  01AC               	clrf	(_myMain^(0+128)+12)
 17623  1EB4  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17624                           
 17625                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17626  1EB5  152B               	bsf	(_myMain^(0+128)+11),2
 17627  1EB6  0008               	return
 17628  1EB7                     __end_of_Timeout_Counter:	
 17629                           
 17630                           	psect	text123
 17631  1EF9                     __ptext123:	
 17632 ;; *************** function _CC2500_WriteByte *****************
 17633 ;; Defined at:
 17634 ;;		line 219 in file "../src/CC2500_B1.c"
 17635 ;; Parameters:    Size  Location     Type
 17636 ;;		None
 17637 ;; Auto vars:     Size  Location     Type
 17638 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17639 ;; Return value:  Size  Location     Type
 17640 ;;		None               void
 17641 ;; Registers used:
 17642 ;;		wreg, status,2, status,0
 17643 ;; Tracked objects:
 17644 ;;		On entry : 0/0
 17645 ;;		On exit  : 0/0
 17646 ;;		Unchanged: 0/0
 17647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17651 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17652 ;;Total ram usage:        2 bytes
 17653 ;; Hardware stack levels used:    1
 17654 ;; Hardware stack levels required when called:    5
 17655 ;; This function calls:
 17656 ;;		Nothing
 17657 ;; This function is called by:
 17658 ;;		_CC2500_TxData
 17659 ;;		_CC2500_RxData
 17660 ;;		_CC2500_PowerRST
 17661 ;;		_CC2500_WriteREG
 17662 ;;		_CC2500_WriteCommand
 17663 ;;		_CC2500_ReadStatus
 17664 ;;		_CC2500_ReadREG
 17665 ;; This function uses a non-reentrant model
 17666 ;;
 17667                           
 17668                           
 17669                           ;psect for function _CC2500_WriteByte
 17670  1EF9                     _CC2500_WriteByte:	
 17671                           
 17672                           ;CC2500_B1.c: 220: unsigned char loop_a;
 17673                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 17674                           
 17675                           ;incstack = 0
 17676                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17677  1EF9  0020               	movlb	0	; select bank0
 17678  1EFA  01A1               	clrf	CC2500_WriteByte@loop_a
 17679  1EFB                     L9:	
 17680  1EFB  3008               	movlw	8
 17681  1EFC  0221               	subwf	CC2500_WriteByte@loop_a,w
 17682  1EFD  1803               	btfsc	3,0
 17683  1EFE  0008               	return
 17684                           
 17685                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 17686  1EFF  0021               	movlb	1	; select bank1
 17687  1F00  1FD1               	btfss	_SPI0Buffer^(0+128),7
 17688  1F01  2F05               	goto	l304
 17689                           
 17690                           ;CC2500_B1.c: 223: RC4 = 1;
 17691  1F02  0020               	movlb	0	; select bank0
 17692  1F03  160E               	bsf	14,4	;volatile
 17693  1F04  2F07               	goto	l305
 17694  1F05                     l304:	
 17695                           
 17696                           ;CC2500_B1.c: 224: else
 17697                           ;CC2500_B1.c: 225: RC4 = 0;
 17698  1F05  0020               	movlb	0	; select bank0
 17699  1F06  120E               	bcf	14,4	;volatile
 17700  1F07                     l305:	
 17701                           
 17702                           ;CC2500_B1.c: 226: RC3 = 1;
 17703  1F07  158E               	bsf	14,3	;volatile
 17704                           
 17705                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 17706  1F08  1003               	clrc
 17707  1F09  0021               	movlb	1	; select bank1
 17708  1F0A  0DD1               	rlf	_SPI0Buffer^(0+128),f
 17709                           
 17710                           ;CC2500_B1.c: 228: RC3 = 0;
 17711  1F0B  0020               	movlb	0	; select bank0
 17712  1F0C  118E               	bcf	14,3	;volatile
 17713  1F0D  3001               	movlw	1
 17714  1F0E  00A0               	movwf	??_CC2500_WriteByte
 17715  1F0F  0820               	movf	??_CC2500_WriteByte,w
 17716  1F10  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17717  1F11  2EFB               	goto	L9
 17718  1F12                     __end_of_CC2500_WriteByte:	
 17719                           
 17720                           	psect	text124
 17721  151C                     __ptext124:	
 17722 ;; *************** function _Buzzer_Main *****************
 17723 ;; Defined at:
 17724 ;;		line 46 in file "../src/Buzzer_B1.c"
 17725 ;; Parameters:    Size  Location     Type
 17726 ;;		None
 17727 ;; Auto vars:     Size  Location     Type
 17728 ;;		None
 17729 ;; Return value:  Size  Location     Type
 17730 ;;		None               void
 17731 ;; Registers used:
 17732 ;;		wreg, status,2, status,0
 17733 ;; Tracked objects:
 17734 ;;		On entry : 0/0
 17735 ;;		On exit  : 0/0
 17736 ;;		Unchanged: 0/0
 17737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17741 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17742 ;;Total ram usage:        1 bytes
 17743 ;; Hardware stack levels used:    1
 17744 ;; Hardware stack levels required when called:    5
 17745 ;; This function calls:
 17746 ;;		Nothing
 17747 ;; This function is called by:
 17748 ;;		_main
 17749 ;; This function uses a non-reentrant model
 17750 ;;
 17751                           
 17752                           
 17753                           ;psect for function _Buzzer_Main
 17754  151C                     _Buzzer_Main:	
 17755                           
 17756                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17757                           
 17758                           ;incstack = 0
 17759                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17760  151C  0021               	movlb	1	; select bank1
 17761  151D  1CAE               	btfss	_Buz1^(0+128),1
 17762  151E  0008               	return
 17763                           
 17764                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17765  151F  3001               	movlw	1
 17766  1520  07AF               	addwf	(_Buz1^(0+128)+1),f
 17767  1521  3000               	movlw	0
 17768  1522  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 17769                           
 17770                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17771  1523  0835               	movf	((_Buz1+1)^(0+128)+6),w
 17772  1524  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 17773  1525  1D03               	skipz
 17774  1526  2D29               	goto	u10845
 17775  1527  0834               	movf	(_Buz1^(0+128)+6),w
 17776  1528  022F               	subwf	(_Buz1^(0+128)+1),w
 17777  1529                     u10845:	
 17778  1529  1C03               	skipc
 17779  152A  0008               	return
 17780                           
 17781                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17782  152B  01AF               	clrf	(_Buz1^(0+128)+1)
 17783  152C  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17784                           
 17785                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17786  152D  12AE               	bcf	_Buz1^(0+128),5
 17787  152E  0020               	movlb	0	; select bank0
 17788  152F  1D8D               	btfss	13,3	;volatile
 17789  1530  2D33               	goto	l9742
 17790  1531  0021               	movlb	1	; select bank1
 17791  1532  16AE               	bsf	_Buz1^(0+128),5
 17792  1533                     l9742:	
 17793                           
 17794                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17795  1533  0021               	movlb	1	; select bank1
 17796  1534  1AAE               	btfsc	_Buz1^(0+128),5
 17797  1535  2D5F               	goto	l94
 17798                           
 17799                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17800  1536  08B1               	movf	(_Buz1^(0+128)+3),f
 17801  1537  1D03               	skipz
 17802  1538  2D5B               	goto	l95
 17803                           
 17804                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17805  1539  1DAE               	btfss	_Buz1^(0+128),3
 17806  153A  2D49               	goto	l96
 17807                           
 17808                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17809  153B  11AE               	bcf	_Buz1^(0+128),3
 17810                           
 17811                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17812  153C  0832               	movf	(_Buz1^(0+128)+4),w
 17813  153D  0020               	movlb	0	; select bank0
 17814  153E  00A0               	movwf	??_Buzzer_Main
 17815  153F  0820               	movf	??_Buzzer_Main,w
 17816  1540  0021               	movlb	1	; select bank1
 17817  1541  00B1               	movwf	(_Buz1^(0+128)+3)
 17818                           
 17819                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17820  1542  0837               	movf	((_Buz1+1)^(0+128)+8),w
 17821  1543  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17822  1544  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17823  1545  0836               	movf	(_Buz1^(0+128)+8),w
 17824  1546  01B4               	clrf	(_Buz1^(0+128)+6)
 17825  1547  07B4               	addwf	(_Buz1^(0+128)+6),f
 17826                           
 17827                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17828  1548  0008               	return
 17829  1549                     l96:	
 17830  1549  1E2E               	btfss	_Buz1^(0+128),4
 17831  154A  2D59               	goto	l98
 17832                           
 17833                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17834  154B  122E               	bcf	_Buz1^(0+128),4
 17835                           
 17836                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17837  154C  0833               	movf	(_Buz1^(0+128)+5),w
 17838  154D  0020               	movlb	0	; select bank0
 17839  154E  00A0               	movwf	??_Buzzer_Main
 17840  154F  0820               	movf	??_Buzzer_Main,w
 17841  1550  0021               	movlb	1	; select bank1
 17842  1551  00B1               	movwf	(_Buz1^(0+128)+3)
 17843                           
 17844                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17845  1552  0839               	movf	((_Buz1+1)^(0+128)+10),w
 17846  1553  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17847  1554  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17848  1555  0838               	movf	(_Buz1^(0+128)+10),w
 17849  1556  01B4               	clrf	(_Buz1^(0+128)+6)
 17850  1557  07B4               	addwf	(_Buz1^(0+128)+6),f
 17851                           
 17852                           ;Buzzer_B1.c: 62: } else {
 17853  1558  0008               	return
 17854  1559                     l98:	
 17855                           
 17856                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17857  1559  10AE               	bcf	_Buz1^(0+128),1
 17858                           
 17859                           ;Buzzer_B1.c: 64: }
 17860                           ;Buzzer_B1.c: 65: } else {
 17861  155A  0008               	return
 17862  155B                     l95:	
 17863                           
 17864                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17865  155B  16AE               	bsf	_Buz1^(0+128),5
 17866                           
 17867                           ;Buzzer_B1.c: 68: RB3 = 1;
 17868  155C  0020               	movlb	0	; select bank0
 17869  155D  158D               	bsf	13,3	;volatile
 17870                           
 17871                           ;Buzzer_B1.c: 69: }
 17872                           ;Buzzer_B1.c: 70: } else {
 17873  155E  0008               	return
 17874  155F                     l94:	
 17875                           
 17876                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17877  155F  12AE               	bcf	_Buz1^(0+128),5
 17878                           
 17879                           ;Buzzer_B1.c: 73: RB3 = 0;
 17880  1560  0020               	movlb	0	; select bank0
 17881  1561  118D               	bcf	13,3	;volatile
 17882                           
 17883                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17884  1562  3001               	movlw	1
 17885  1563  0021               	movlb	1	; select bank1
 17886  1564  02B1               	subwf	(_Buz1^(0+128)+3),f
 17887  1565  0008               	return
 17888  1566                     __end_of_Buzzer_Main:	
 17889                           
 17890                           	psect	text125
 17891  1C39                     __ptext125:	
 17892 ;; *************** function _Buzzer_Initialization *****************
 17893 ;; Defined at:
 17894 ;;		line 11 in file "../src/Buzzer_B1.c"
 17895 ;; Parameters:    Size  Location     Type
 17896 ;;		None
 17897 ;; Auto vars:     Size  Location     Type
 17898 ;;		None
 17899 ;; Return value:  Size  Location     Type
 17900 ;;		None               void
 17901 ;; Registers used:
 17902 ;;		None
 17903 ;; Tracked objects:
 17904 ;;		On entry : 0/0
 17905 ;;		On exit  : 0/0
 17906 ;;		Unchanged: 0/0
 17907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17912 ;;Total ram usage:        0 bytes
 17913 ;; Hardware stack levels used:    1
 17914 ;; Hardware stack levels required when called:    5
 17915 ;; This function calls:
 17916 ;;		Nothing
 17917 ;; This function is called by:
 17918 ;;		_main
 17919 ;; This function uses a non-reentrant model
 17920 ;;
 17921                           
 17922                           
 17923                           ;psect for function _Buzzer_Initialization
 17924  1C39                     _Buzzer_Initialization:	
 17925                           
 17926                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17927                           
 17928                           ;incstack = 0
 17929                           ; Regs used in _Buzzer_Initialization: []
 17930  1C39  0021               	movlb	1	; select bank1
 17931  1C3A  142E               	bsf	_Buz1^(0+128),0
 17932  1C3B  0008               	return
 17933  1C3C                     __end_of_Buzzer_Initialization:	
 17934                           
 17935                           	psect	intentry
 17936  0004                     __pintentry:	
 17937 ;; *************** function _ISR *****************
 17938 ;; Defined at:
 17939 ;;		line 107 in file "../src/MCU_B1.c"
 17940 ;; Parameters:    Size  Location     Type
 17941 ;;		None
 17942 ;; Auto vars:     Size  Location     Type
 17943 ;;		None
 17944 ;; Return value:  Size  Location     Type
 17945 ;;		None               void
 17946 ;; Registers used:
 17947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17948 ;; Tracked objects:
 17949 ;;		On entry : 0/0
 17950 ;;		On exit  : 0/0
 17951 ;;		Unchanged: 0/0
 17952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;Total ram usage:        1 bytes
 17958 ;; Hardware stack levels used:    1
 17959 ;; Hardware stack levels required when called:    4
 17960 ;; This function calls:
 17961 ;;		_IOC_ISR
 17962 ;;		_TMR1_ISR
 17963 ;; This function is called by:
 17964 ;;		Interrupt level 1
 17965 ;; This function uses a non-reentrant model
 17966 ;;
 17967                           
 17968  0004                     _ISR:	
 17969                           
 17970                           ;incstack = 0
 17971                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17972  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17973  0005  3180               	pagesel	$
 17974  0006  0020               	movlb	0	; select bank0
 17975  0007  087F               	movf	127,w
 17976  0008  00F4               	movwf	??_ISR
 17977                           
 17978                           ;MCU_B1.c: 109: IOC_ISR();
 17979  0009  319D  258F  3180   	fcall	_IOC_ISR
 17980                           
 17981                           ;MCU_B1.c: 111: ;;
 17982                           ;MCU_B1.c: 113: TMR1_ISR();
 17983  000C  3190  20B4         	fcall	_TMR1_ISR
 17984  000E  0874               	movf	??_ISR,w
 17985  000F  0020               	movlb	0	; select bank0
 17986  0010  00FF               	movwf	127
 17987  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 17988  0012  0009               	retfie
 17989  0013                     __end_of_ISR:	
 17990                           
 17991                           	psect	text127
 17992  10B4                     __ptext127:	
 17993 ;; *************** function _TMR1_ISR *****************
 17994 ;; Defined at:
 17995 ;;		line 209 in file "../src/MCU_B1.c"
 17996 ;; Parameters:    Size  Location     Type
 17997 ;;		None
 17998 ;; Auto vars:     Size  Location     Type
 17999 ;;		None
 18000 ;; Return value:  Size  Location     Type
 18001 ;;		None               void
 18002 ;; Registers used:
 18003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18004 ;; Tracked objects:
 18005 ;;		On entry : 0/0
 18006 ;;		On exit  : 0/0
 18007 ;;		Unchanged: 0/0
 18008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18013 ;;Total ram usage:        0 bytes
 18014 ;; Hardware stack levels used:    1
 18015 ;; Hardware stack levels required when called:    2
 18016 ;; This function calls:
 18017 ;;		_setDimmerLights_IntrControl
 18018 ;; This function is called by:
 18019 ;;		_ISR
 18020 ;; This function uses a non-reentrant model
 18021 ;;
 18022                           
 18023                           
 18024                           ;psect for function _TMR1_ISR
 18025  10B4                     _TMR1_ISR:	
 18026                           
 18027                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 18028                           
 18029                           ;incstack = 0
 18030                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18031  10B4  0021               	movlb	1	; select bank1
 18032  10B5  1C11               	btfss	17,0	;volatile
 18033  10B6  0008               	return
 18034  10B7  0020               	movlb	0	; select bank0
 18035  10B8  1C11               	btfss	17,0	;volatile
 18036  10B9  0008               	return
 18037                           
 18038                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18039  10BA  30FA               	movlw	250
 18040  10BB  0097               	movwf	23	;volatile
 18041                           
 18042                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18043  10BC  3038               	movlw	56
 18044  10BD  0096               	movwf	22	;volatile
 18045                           
 18046                           ;MCU_B1.c: 214: TMR1IF = 0;
 18047  10BE  1011               	bcf	17,0	;volatile
 18048                           
 18049                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18050  10BF  3001               	movlw	1
 18051  10C0  3183  2334  3190   	fcall	_setDimmerLights_IntrControl
 18052                           
 18053                           ;MCU_B1.c: 235: Timer1.Count++;
 18054  10C3  3001               	movlw	1
 18055  10C4  0022               	movlb	2	; select bank2
 18056  10C5  07A4               	addwf	(_Timer1^(0+256)+1),f
 18057  10C6  3000               	movlw	0
 18058  10C7  3DA5               	addwfc	((_Timer1+1)^(0+256)+1),f
 18059                           
 18060                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 18061  10C8  3001               	movlw	1
 18062  10C9  3E23               	addlw	_Timer1& (0+255)
 18063  10CA  0086               	movwf	6
 18064  10CB  3001               	movlw	1	; select bank2/3
 18065  10CC  0087               	movwf	7
 18066  10CD  3F40               	moviw [0]fsr1
 18067  10CE  3A64               	xorlw	100
 18068  10CF  1D03               	skipz
 18069  10D0  28D3               	goto	u720_25
 18070  10D1  3F41               	moviw [1]fsr1
 18071  10D2  3A00               	xorlw	0
 18072  10D3                     u720_25:	
 18073  10D3  1D03               	skipz
 18074  10D4  0008               	return
 18075                           
 18076                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18077  10D5  01A4               	clrf	(_Timer1^(0+256)+1)
 18078  10D6  01A5               	clrf	((_Timer1+1)^(0+256)+1)
 18079                           
 18080                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18081  10D7  1423               	bsf	_Timer1^(0+256),0
 18082  10D8  0008               	return
 18083  10D9                     __end_of_TMR1_ISR:	
 18084                           
 18085                           	psect	text128
 18086  0334                     __ptext128:	
 18087 ;; *************** function _setDimmerLights_IntrControl *****************
 18088 ;; Defined at:
 18089 ;;		line 96 in file "../src/Dimmer_B1.c"
 18090 ;; Parameters:    Size  Location     Type
 18091 ;;  lights          1    wreg     unsigned char 
 18092 ;; Auto vars:     Size  Location     Type
 18093 ;;  lights          1    3[COMMON] unsigned char 
 18094 ;; Return value:  Size  Location     Type
 18095 ;;		None               void
 18096 ;; Registers used:
 18097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18098 ;; Tracked objects:
 18099 ;;		On entry : 0/0
 18100 ;;		On exit  : 0/0
 18101 ;;		Unchanged: 0/0
 18102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18104 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;Total ram usage:        2 bytes
 18108 ;; Hardware stack levels used:    1
 18109 ;; Hardware stack levels required when called:    1
 18110 ;; This function calls:
 18111 ;;		_DimmerIntrPointSelect
 18112 ;; This function is called by:
 18113 ;;		_TMR1_ISR
 18114 ;; This function uses a non-reentrant model
 18115 ;;
 18116                           
 18117                           
 18118                           ;psect for function _setDimmerLights_IntrControl
 18119  0334                     _setDimmerLights_IntrControl:	
 18120                           
 18121                           ;incstack = 0
 18122                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18123                           ;setDimmerLights_IntrControl@lights stored from wreg
 18124  0334  00F3               	movwf	setDimmerLights_IntrControl@lights
 18125                           
 18126                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18127  0335  0873               	movf	setDimmerLights_IntrControl@lights,w
 18128  0336  319C  24BD  3183   	fcall	_DimmerIntrPointSelect
 18129                           
 18130                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18131  0339  0876               	movf	_DimmerLightsIntr,w
 18132  033A  3E02               	addlw	2
 18133  033B  0086               	movwf	6
 18134  033C  3001               	movlw	1	; select bank2/3
 18135  033D  0087               	movwf	7
 18136  033E  1D81               	btfss	1,3
 18137  033F  2B5E               	goto	i1l6764
 18138                           
 18139                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18140  0340  3001               	movlw	1
 18141  0341  00F2               	movwf	??_setDimmerLights_IntrControl
 18142  0342  0876               	movf	_DimmerLightsIntr,w
 18143  0343  3E03               	addlw	3
 18144  0344  0086               	movwf	6
 18145  0345  3001               	movlw	1	; select bank2/3
 18146  0346  0087               	movwf	7
 18147  0347  0872               	movf	??_setDimmerLights_IntrControl,w
 18148  0348  0781               	addwf	1,f
 18149                           
 18150                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(45*0.8)) + 1) {
 18151  0349  0876               	movf	_DimmerLightsIntr,w
 18152  034A  3E03               	addlw	3
 18153  034B  0086               	movwf	6
 18154  034C  3001               	movlw	1	; select bank2/3
 18155  034D  0087               	movwf	7
 18156  034E  3025               	movlw	37
 18157  034F  0201               	subwf	1,w
 18158  0350  1C03               	skipc
 18159  0351  2B5E               	goto	i1l6764
 18160                           
 18161                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18162  0352  0876               	movf	_DimmerLightsIntr,w
 18163  0353  3E03               	addlw	3
 18164  0354  0086               	movwf	6
 18165  0355  3001               	movlw	1	; select bank2/3
 18166  0356  0087               	movwf	7
 18167  0357  0181               	clrf	1
 18168                           
 18169                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18170  0358  0876               	movf	_DimmerLightsIntr,w
 18171  0359  3E02               	addlw	2
 18172  035A  0086               	movwf	6
 18173  035B  3001               	movlw	1	; select bank2/3
 18174  035C  0087               	movwf	7
 18175  035D  1181               	bcf	1,3
 18176  035E                     i1l6764:	
 18177                           
 18178                           ;Dimmer_B1.c: 241: }
 18179                           ;Dimmer_B1.c: 242: }
 18180                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18181  035E  0A76               	incf	_DimmerLightsIntr,w
 18182  035F  0086               	movwf	6
 18183  0360  3001               	movlw	1	; select bank2/3
 18184  0361  0087               	movwf	7
 18185  0362  1C01               	btfss	1,0
 18186  0363  2B8E               	goto	i1l6776
 18187                           
 18188                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18189  0364  0876               	movf	_DimmerLightsIntr,w
 18190  0365  3E03               	addlw	3
 18191  0366  0086               	movwf	6
 18192  0367  3001               	movlw	1	; select bank2/3
 18193  0368  0087               	movwf	7
 18194  0369  0876               	movf	_DimmerLightsIntr,w
 18195  036A  3E04               	addlw	4
 18196  036B  0084               	movwf	4
 18197  036C  3001               	movlw	1	; select bank2/3
 18198  036D  0085               	movwf	5
 18199  036E  0800               	movf	0,w
 18200  036F  0201               	subwf	1,w
 18201  0370  1C03               	skipc
 18202  0371  0008               	return
 18203                           
 18204                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18205  0372  0A76               	incf	_DimmerLightsIntr,w
 18206  0373  0086               	movwf	6
 18207  0374  3001               	movlw	1	; select bank2/3
 18208  0375  0087               	movwf	7
 18209  0376  1001               	bcf	1,0
 18210                           
 18211                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18212  0377  0A76               	incf	_DimmerLightsIntr,w
 18213  0378  0086               	movwf	6
 18214  0379  3001               	movlw	1	; select bank2/3
 18215  037A  0087               	movwf	7
 18216  037B  1581               	bsf	1,3
 18217                           
 18218                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18219  037C  0876               	movf	_DimmerLightsIntr,w
 18220  037D  0086               	movwf	6
 18221  037E  3001               	movlw	1	; select bank2/3
 18222  037F  0087               	movwf	7
 18223  0380  1C01               	btfss	1,0
 18224  0381  0008               	return
 18225                           
 18226                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18227  0382  0876               	movf	_DimmerLightsIntr,w
 18228  0383  0086               	movwf	6
 18229  0384  3001               	movlw	1	; select bank2/3
 18230  0385  0087               	movwf	7
 18231  0386  1001               	bcf	1,0
 18232                           
 18233                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18234  0387  0873               	movf	setDimmerLights_IntrControl@lights,w
 18235  0388  3A01               	xorlw	1
 18236  0389  1D03               	skipz
 18237  038A  0008               	return
 18238                           
 18239                           ;Dimmer_B1.c: 253: RB1 = 0;
 18240  038B  0020               	movlb	0	; select bank0
 18241  038C  108D               	bcf	13,1	;volatile
 18242                           
 18243                           ;Dimmer_B1.c: 255: }
 18244                           ;Dimmer_B1.c: 262: }
 18245                           ;Dimmer_B1.c: 263: }
 18246                           ;Dimmer_B1.c: 264: } else {
 18247  038D  0008               	return
 18248  038E                     i1l6776:	
 18249                           
 18250                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18251  038E  0A76               	incf	_DimmerLightsIntr,w
 18252  038F  0086               	movwf	6
 18253  0390  3001               	movlw	1	; select bank2/3
 18254  0391  0087               	movwf	7
 18255  0392  1D81               	btfss	1,3
 18256  0393  0008               	return
 18257                           
 18258                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18259  0394  0A76               	incf	_DimmerLightsIntr,w
 18260  0395  0086               	movwf	6
 18261  0396  3001               	movlw	1	; select bank2/3
 18262  0397  0087               	movwf	7
 18263  0398  1181               	bcf	1,3
 18264                           
 18265                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18266  0399  3001               	movlw	1
 18267  039A  00F2               	movwf	??_setDimmerLights_IntrControl
 18268  039B  0876               	movf	_DimmerLightsIntr,w
 18269  039C  3E05               	addlw	5
 18270  039D  0086               	movwf	6
 18271  039E  3001               	movlw	1	; select bank2/3
 18272  039F  0087               	movwf	7
 18273  03A0  0872               	movf	??_setDimmerLights_IntrControl,w
 18274  03A1  0781               	addwf	1,f
 18275                           
 18276                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18277  03A2  0876               	movf	_DimmerLightsIntr,w
 18278  03A3  3E05               	addlw	5
 18279  03A4  0086               	movwf	6
 18280  03A5  3001               	movlw	1	; select bank2/3
 18281  03A6  0087               	movwf	7
 18282  03A7  0876               	movf	_DimmerLightsIntr,w
 18283  03A8  3E08               	addlw	8
 18284  03A9  0084               	movwf	4
 18285  03AA  3001               	movlw	1	; select bank2/3
 18286  03AB  0085               	movwf	5
 18287  03AC  0800               	movf	0,w
 18288  03AD  0201               	subwf	1,w
 18289  03AE  1C03               	skipc
 18290  03AF  2BF2               	goto	i1l6802
 18291                           
 18292                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18293  03B0  0876               	movf	_DimmerLightsIntr,w
 18294  03B1  3E05               	addlw	5
 18295  03B2  0086               	movwf	6
 18296  03B3  3001               	movlw	1	; select bank2/3
 18297  03B4  0087               	movwf	7
 18298  03B5  0181               	clrf	1
 18299                           
 18300                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18301  03B6  0A76               	incf	_DimmerLightsIntr,w
 18302  03B7  0086               	movwf	6
 18303  03B8  3001               	movlw	1	; select bank2/3
 18304  03B9  0087               	movwf	7
 18305  03BA  1F01               	btfss	1,6
 18306  03BB  0008               	return
 18307                           
 18308                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18309  03BC  0A76               	incf	_DimmerLightsIntr,w
 18310  03BD  0086               	movwf	6
 18311  03BE  3001               	movlw	1	; select bank2/3
 18312  03BF  0087               	movwf	7
 18313  03C0  1B81               	btfsc	1,7
 18314  03C1  2BDB               	goto	i1l6796
 18315                           
 18316                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(45*0.8))) {
 18317  03C2  0876               	movf	_DimmerLightsIntr,w
 18318  03C3  3E04               	addlw	4
 18319  03C4  0086               	movwf	6
 18320  03C5  3001               	movlw	1	; select bank2/3
 18321  03C6  0087               	movwf	7
 18322  03C7  3024               	movlw	36
 18323  03C8  0201               	subwf	1,w
 18324  03C9  1803               	skipnc
 18325  03CA  2BD5               	goto	i1l6794
 18326                           
 18327                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18328  03CB  3001               	movlw	1
 18329  03CC  00F2               	movwf	??_setDimmerLights_IntrControl
 18330  03CD  0876               	movf	_DimmerLightsIntr,w
 18331  03CE  3E04               	addlw	4
 18332  03CF  0086               	movwf	6
 18333  03D0  3001               	movlw	1	; select bank2/3
 18334  03D1  0087               	movwf	7
 18335  03D2  0872               	movf	??_setDimmerLights_IntrControl,w
 18336  03D3  0781               	addwf	1,f
 18337                           
 18338                           ;Dimmer_B1.c: 274: } else {
 18339  03D4  0008               	return
 18340  03D5                     i1l6794:	
 18341                           
 18342                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18343  03D5  0A76               	incf	_DimmerLightsIntr,w
 18344  03D6  0086               	movwf	6
 18345  03D7  3001               	movlw	1	; select bank2/3
 18346  03D8  0087               	movwf	7
 18347  03D9  1781               	bsf	1,7
 18348                           
 18349                           ;Dimmer_B1.c: 276: }
 18350                           ;Dimmer_B1.c: 277: } else {
 18351  03DA  0008               	return
 18352  03DB                     i1l6796:	
 18353                           
 18354                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18355  03DB  0876               	movf	_DimmerLightsIntr,w
 18356  03DC  3E04               	addlw	4
 18357  03DD  0086               	movwf	6
 18358  03DE  3001               	movlw	1	; select bank2/3
 18359  03DF  0087               	movwf	7
 18360  03E0  300D               	movlw	13
 18361  03E1  0201               	subwf	1,w
 18362  03E2  1C03               	skipc
 18363  03E3  2BEC               	goto	i1l6800
 18364                           
 18365                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 18366  03E4  0876               	movf	_DimmerLightsIntr,w
 18367  03E5  3E04               	addlw	4
 18368  03E6  0086               	movwf	6
 18369  03E7  3001               	movlw	1	; select bank2/3
 18370  03E8  0087               	movwf	7
 18371  03E9  3001               	movlw	1
 18372  03EA  0281               	subwf	1,f
 18373                           
 18374                           ;Dimmer_B1.c: 280: } else
 18375  03EB  0008               	return
 18376  03EC                     i1l6800:	
 18377                           
 18378                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 18379  03EC  0A76               	incf	_DimmerLightsIntr,w
 18380  03ED  0086               	movwf	6
 18381  03EE  3001               	movlw	1	; select bank2/3
 18382  03EF  0087               	movwf	7
 18383  03F0  1381               	bcf	1,7
 18384                           
 18385                           ;Dimmer_B1.c: 282: }
 18386                           ;Dimmer_B1.c: 283: }
 18387                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 18388  03F1  0008               	return
 18389  03F2                     i1l6802:	
 18390  03F2  0876               	movf	_DimmerLightsIntr,w
 18391  03F3  3E02               	addlw	2
 18392  03F4  0086               	movwf	6
 18393  03F5  3001               	movlw	1	; select bank2/3
 18394  03F6  0087               	movwf	7
 18395  03F7  1C01               	btfss	1,0
 18396  03F8  0008               	return
 18397                           
 18398                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18399  03F9  0876               	movf	_DimmerLightsIntr,w
 18400  03FA  3E04               	addlw	4
 18401  03FB  0086               	movwf	6
 18402  03FC  3001               	movlw	1	; select bank2/3
 18403  03FD  0087               	movwf	7
 18404  03FE  0876               	movf	_DimmerLightsIntr,w
 18405  03FF  3E06               	addlw	6
 18406  0400  0084               	movwf	4
 18407  0401  3001               	movlw	1	; select bank2/3
 18408  0402  0085               	movwf	5
 18409  0403  0800               	movf	0,w
 18410  0404  0201               	subwf	1,w
 18411  0405  1803               	skipnc
 18412  0406  2C11               	goto	i1l6808
 18413                           
 18414                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 18415  0407  3001               	movlw	1
 18416  0408  00F2               	movwf	??_setDimmerLights_IntrControl
 18417  0409  0876               	movf	_DimmerLightsIntr,w
 18418  040A  3E04               	addlw	4
 18419  040B  0086               	movwf	6
 18420  040C  3001               	movlw	1	; select bank2/3
 18421  040D  0087               	movwf	7
 18422  040E  0872               	movf	??_setDimmerLights_IntrControl,w
 18423  040F  0781               	addwf	1,f
 18424                           
 18425                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18426  0410  0008               	return
 18427  0411                     i1l6808:	
 18428  0411  0876               	movf	_DimmerLightsIntr,w
 18429  0412  3E06               	addlw	6
 18430  0413  0086               	movwf	6
 18431  0414  3001               	movlw	1	; select bank2/3
 18432  0415  0087               	movwf	7
 18433  0416  0876               	movf	_DimmerLightsIntr,w
 18434  0417  3E04               	addlw	4
 18435  0418  0084               	movwf	4
 18436  0419  3001               	movlw	1	; select bank2/3
 18437  041A  0085               	movwf	5
 18438  041B  0800               	movf	0,w
 18439  041C  0201               	subwf	1,w
 18440  041D  1803               	skipnc
 18441  041E  2C27               	goto	i1l6812
 18442                           
 18443                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 18444  041F  0876               	movf	_DimmerLightsIntr,w
 18445  0420  3E04               	addlw	4
 18446  0421  0086               	movwf	6
 18447  0422  3001               	movlw	1	; select bank2/3
 18448  0423  0087               	movwf	7
 18449  0424  3001               	movlw	1
 18450  0425  0281               	subwf	1,f
 18451                           
 18452                           ;Dimmer_B1.c: 289: } else {
 18453  0426  0008               	return
 18454  0427                     i1l6812:	
 18455                           
 18456                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 18457  0427  0876               	movf	_DimmerLightsIntr,w
 18458  0428  3E02               	addlw	2
 18459  0429  0086               	movwf	6
 18460  042A  3001               	movlw	1	; select bank2/3
 18461  042B  0087               	movwf	7
 18462  042C  1001               	bcf	1,0
 18463  042D  0008               	return
 18464  042E                     __end_of_setDimmerLights_IntrControl:	
 18465                           
 18466                           	psect	text129
 18467  1CBD                     __ptext129:	
 18468 ;; *************** function _DimmerIntrPointSelect *****************
 18469 ;; Defined at:
 18470 ;;		line 74 in file "../src/Dimmer_B1.c"
 18471 ;; Parameters:    Size  Location     Type
 18472 ;;  lights          1    wreg     unsigned char 
 18473 ;; Auto vars:     Size  Location     Type
 18474 ;;  lights          1    1[COMMON] unsigned char 
 18475 ;; Return value:  Size  Location     Type
 18476 ;;		None               void
 18477 ;; Registers used:
 18478 ;;		wreg
 18479 ;; Tracked objects:
 18480 ;;		On entry : 0/0
 18481 ;;		On exit  : 0/0
 18482 ;;		Unchanged: 0/0
 18483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18487 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18488 ;;Total ram usage:        2 bytes
 18489 ;; Hardware stack levels used:    1
 18490 ;; This function calls:
 18491 ;;		Nothing
 18492 ;; This function is called by:
 18493 ;;		_setDimmerLights_IntrControl
 18494 ;; This function uses a non-reentrant model
 18495 ;;
 18496                           
 18497                           
 18498                           ;psect for function _DimmerIntrPointSelect
 18499  1CBD                     _DimmerIntrPointSelect:	
 18500                           
 18501                           ;incstack = 0
 18502                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18503                           ;DimmerIntrPointSelect@lights stored from wreg
 18504  1CBD  00F1               	movwf	DimmerIntrPointSelect@lights
 18505                           
 18506                           ;Dimmer_B1.c: 76: if (lights == 1) {
 18507  1CBE  0871               	movf	DimmerIntrPointSelect@lights,w
 18508  1CBF  3A01               	xorlw	1
 18509  1CC0  1D03               	skipz
 18510  1CC1  0008               	return
 18511                           
 18512                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 18513  1CC2  3054               	movlw	_DimmerLights1& (0+255)
 18514  1CC3  00F0               	movwf	??_DimmerIntrPointSelect
 18515  1CC4  0870               	movf	??_DimmerIntrPointSelect,w
 18516  1CC5  00F6               	movwf	_DimmerLightsIntr
 18517  1CC6  0008               	return
 18518  1CC7                     __end_of_DimmerIntrPointSelect:	
 18519                           
 18520                           	psect	text130
 18521  1D8F                     __ptext130:	
 18522 ;; *************** function _IOC_ISR *****************
 18523 ;; Defined at:
 18524 ;;		line 400 in file "../src/MCU_B1.c"
 18525 ;; Parameters:    Size  Location     Type
 18526 ;;		None
 18527 ;; Auto vars:     Size  Location     Type
 18528 ;;		None
 18529 ;; Return value:  Size  Location     Type
 18530 ;;		None               void
 18531 ;; Registers used:
 18532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18533 ;; Tracked objects:
 18534 ;;		On entry : 0/0
 18535 ;;		On exit  : 0/0
 18536 ;;		Unchanged: 0/0
 18537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18542 ;;Total ram usage:        0 bytes
 18543 ;; Hardware stack levels used:    1
 18544 ;; Hardware stack levels required when called:    3
 18545 ;; This function calls:
 18546 ;;		_setDimmerReClock
 18547 ;; This function is called by:
 18548 ;;		_ISR
 18549 ;; This function uses a non-reentrant model
 18550 ;;
 18551                           
 18552                           
 18553                           ;psect for function _IOC_ISR
 18554  1D8F                     _IOC_ISR:	
 18555                           
 18556                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18557                           
 18558                           ;incstack = 0
 18559                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18560  1D8F  1D8B               	btfss	11,3	;volatile
 18561  1D90  0008               	return
 18562  1D91  1C0B               	btfss	11,0	;volatile
 18563  1D92  0008               	return
 18564  1D93  0027               	movlb	7	; select bank7
 18565  1D94  1D16               	btfss	22,2	;volatile
 18566  1D95  0008               	return
 18567                           
 18568                           ;MCU_B1.c: 402: IOCBF2 = 0;
 18569  1D96  1116               	bcf	22,2	;volatile
 18570                           
 18571                           ;MCU_B1.c: 403: IOCIF = 0;
 18572  1D97  100B               	bcf	11,0	;volatile
 18573                           
 18574                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 18575  1D98  0021               	movlb	1	; select bank1
 18576  1D99  1C20               	btfss	_myMain^(0+128),0
 18577  1D9A  0008               	return
 18578                           
 18579                           ;MCU_B1.c: 407: setDimmerReClock();
 18580  1D9B  319C  2448         	fcall	_setDimmerReClock
 18581  1D9D  0008               	return
 18582  1D9E                     __end_of_IOC_ISR:	
 18583                           
 18584                           	psect	text131
 18585  1C48                     __ptext131:	
 18586 ;; *************** function _setDimmerReClock *****************
 18587 ;; Defined at:
 18588 ;;		line 243 in file "../src/MCU_B1.c"
 18589 ;; Parameters:    Size  Location     Type
 18590 ;;		None
 18591 ;; Auto vars:     Size  Location     Type
 18592 ;;		None
 18593 ;; Return value:  Size  Location     Type
 18594 ;;		None               void
 18595 ;; Registers used:
 18596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18597 ;; Tracked objects:
 18598 ;;		On entry : 0/0
 18599 ;;		On exit  : 0/0
 18600 ;;		Unchanged: 0/0
 18601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18606 ;;Total ram usage:        0 bytes
 18607 ;; Hardware stack levels used:    1
 18608 ;; Hardware stack levels required when called:    2
 18609 ;; This function calls:
 18610 ;;		_setDimmerLights_IntrIOC_GO
 18611 ;; This function is called by:
 18612 ;;		_IOC_ISR
 18613 ;; This function uses a non-reentrant model
 18614 ;;
 18615                           
 18616                           
 18617                           ;psect for function _setDimmerReClock
 18618  1C48                     _setDimmerReClock:	
 18619                           
 18620                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 18621                           
 18622                           ;incstack = 0
 18623                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18624  1C48  3001               	movlw	1
 18625  1C49  3192  22CE         	fcall	_setDimmerLights_IntrIOC_GO
 18626  1C4B  0008               	return
 18627  1C4C                     __end_of_setDimmerReClock:	
 18628                           
 18629                           	psect	text132
 18630  12CE                     __ptext132:	
 18631 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18632 ;; Defined at:
 18633 ;;		line 28 in file "../src/Dimmer_B1.c"
 18634 ;; Parameters:    Size  Location     Type
 18635 ;;  lights          1    wreg     unsigned char 
 18636 ;; Auto vars:     Size  Location     Type
 18637 ;;  lights          1    2[COMMON] unsigned char 
 18638 ;; Return value:  Size  Location     Type
 18639 ;;		None               void
 18640 ;; Registers used:
 18641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18642 ;; Tracked objects:
 18643 ;;		On entry : 0/0
 18644 ;;		On exit  : 0/0
 18645 ;;		Unchanged: 0/0
 18646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18650 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18651 ;;Total ram usage:        1 bytes
 18652 ;; Hardware stack levels used:    1
 18653 ;; Hardware stack levels required when called:    1
 18654 ;; This function calls:
 18655 ;;		_DimmerIntrIOCPointSelect
 18656 ;; This function is called by:
 18657 ;;		_setDimmerReClock
 18658 ;; This function uses a non-reentrant model
 18659 ;;
 18660                           
 18661                           
 18662                           ;psect for function _setDimmerLights_IntrIOC_GO
 18663  12CE                     _setDimmerLights_IntrIOC_GO:	
 18664                           
 18665                           ;incstack = 0
 18666                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18667                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18668  12CE  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18669                           
 18670                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18671  12CF  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18672  12D0  319C  24D1  3192   	fcall	_DimmerIntrIOCPointSelect
 18673                           
 18674                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 0) {
 18675  12D3  0021               	movlb	1	; select bank1
 18676  12D4  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18677  12D5  3E02               	addlw	2
 18678  12D6  0086               	movwf	6
 18679  12D7  3001               	movlw	1	; select bank2/3
 18680  12D8  0087               	movwf	7
 18681  12D9  1981               	btfsc	1,3
 18682  12DA  0008               	return
 18683  12DB  0020               	movlb	0	; select bank0
 18684  12DC  190D               	btfsc	13,2	;volatile
 18685  12DD  0008               	return
 18686                           
 18687                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 18688  12DE  0021               	movlb	1	; select bank1
 18689  12DF  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18690  12E0  3E02               	addlw	2
 18691  12E1  0086               	movwf	6
 18692  12E2  3001               	movlw	1	; select bank2/3
 18693  12E3  0087               	movwf	7
 18694  12E4  1581               	bsf	1,3
 18695                           
 18696                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 18697  12E5  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18698  12E6  0086               	movwf	6
 18699  12E7  3001               	movlw	1	; select bank2/3
 18700  12E8  0087               	movwf	7
 18701  12E9  1401               	bsf	1,0
 18702                           
 18703                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 18704  12EA  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18705  12EB  0086               	movwf	6
 18706  12EC  3001               	movlw	1	; select bank2/3
 18707  12ED  0087               	movwf	7
 18708  12EE  1481               	bsf	1,1
 18709                           
 18710                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 18711  12EF  0022               	movlb	2	; select bank2
 18712  12F0  01A2               	clrf	(_Dimmer^(0+256)+2)	;volatile
 18713                           
 18714                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18715  12F1  0021               	movlb	1	; select bank1
 18716  12F2  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18717  12F3  0086               	movwf	6
 18718  12F4  3001               	movlw	1	; select bank2/3
 18719  12F5  0087               	movwf	7
 18720  12F6  1D01               	btfss	1,2
 18721  12F7  0008               	return
 18722                           
 18723                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 18724  12F8  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18725  12F9  0086               	movwf	6
 18726  12FA  3001               	movlw	1	; select bank2/3
 18727  12FB  0087               	movwf	7
 18728  12FC  1401               	bsf	1,0
 18729                           
 18730                           ;Dimmer_B1.c: 55: if (lights == 1) {
 18731  12FD  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18732  12FE  3A01               	xorlw	1
 18733  12FF  1D03               	skipz
 18734  1300  0008               	return
 18735                           
 18736                           ;Dimmer_B1.c: 56: RB1 = 1;
 18737  1301  0020               	movlb	0	; select bank0
 18738  1302  148D               	bsf	13,1	;volatile
 18739  1303  0008               	return
 18740  1304                     __end_of_setDimmerLights_IntrIOC_GO:	
 18741                           
 18742                           	psect	text133
 18743  1CD1                     __ptext133:	
 18744 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18745 ;; Defined at:
 18746 ;;		line 8 in file "../src/Dimmer_B1.c"
 18747 ;; Parameters:    Size  Location     Type
 18748 ;;  lights          1    wreg     unsigned char 
 18749 ;; Auto vars:     Size  Location     Type
 18750 ;;  lights          1    1[COMMON] unsigned char 
 18751 ;; Return value:  Size  Location     Type
 18752 ;;		None               void
 18753 ;; Registers used:
 18754 ;;		wreg
 18755 ;; Tracked objects:
 18756 ;;		On entry : 0/0
 18757 ;;		On exit  : 0/0
 18758 ;;		Unchanged: 0/0
 18759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18761 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18763 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18764 ;;Total ram usage:        2 bytes
 18765 ;; Hardware stack levels used:    1
 18766 ;; This function calls:
 18767 ;;		Nothing
 18768 ;; This function is called by:
 18769 ;;		_setDimmerLights_IntrIOC_GO
 18770 ;; This function uses a non-reentrant model
 18771 ;;
 18772                           
 18773                           
 18774                           ;psect for function _DimmerIntrIOCPointSelect
 18775  1CD1                     _DimmerIntrIOCPointSelect:	
 18776                           
 18777                           ;incstack = 0
 18778                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18779                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18780  1CD1  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18781                           
 18782                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18783  1CD2  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18784  1CD3  3A01               	xorlw	1
 18785  1CD4  1D03               	skipz
 18786  1CD5  0008               	return
 18787                           
 18788                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18789  1CD6  3054               	movlw	_DimmerLights1& (0+255)
 18790  1CD7  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18791  1CD8  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18792  1CD9  0021               	movlb	1	; select bank1
 18793  1CDA  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18794  1CDB  0008               	return
 18795  1CDC                     __end_of_DimmerIntrIOCPointSelect:	
 18796  007E                     btemp	set	126	;btemp
 18797  007E                     pic14e$flags	set	126
 18798  007E                     wtemp	set	126
 18799  007E                     wtemp0	set	126
 18800  0080                     wtemp1	set	128
 18801  0082                     wtemp2	set	130
 18802  0084                     wtemp3	set	132
 18803  0086                     wtemp4	set	134
 18804  0088                     wtemp5	set	136
 18805  007F                     wtemp6	set	127
 18806  007E                     ttemp	set	126
 18807  007E                     ttemp0	set	126
 18808  0081                     ttemp1	set	129
 18809  0084                     ttemp2	set	132
 18810  0087                     ttemp3	set	135
 18811  007F                     ttemp4	set	127
 18812  007E                     ltemp	set	126
 18813  007E                     ltemp0	set	126
 18814  0082                     ltemp1	set	130
 18815  0086                     ltemp2	set	134
 18816  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80      6      79
    BANK2            80      0      78
    BANK3            80      3      79
    BANK4            80      4      36
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  129568
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1820
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4202
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4202
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8072
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8072
                                             76 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     127
                                              2 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1034
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1034
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   46052
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   46052
                                              5 BANK1      1     1      0
                                              0 BANK3      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44893
                                             79 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4023
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40598
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13849
                                             76 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1981
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18758
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16329
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14095
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            8     8      0    1711
                                              9 BANK0      8     8      0
                            ___lwdiv
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      71
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0     111
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjGO                            2     2      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1065
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1065
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1441
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       6     6      0    7434
                                             76 BANK0      1     1      0
                                              0 BANK1      5     5      0
            _DimmerLightsPointSelect
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 5     5      0     269
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35142
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35142
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17792
                                             75 BANK0      3     2      1
                             _setBuz
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17099
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     972
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      2     2      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5943
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5943
                                             77 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4030
                                             76 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    3615
                                             74 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3392
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1820
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0      66
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _DimmerLightsPointSelect
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getDimmerLights_Allow_Condition
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      6      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      3      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      24      13       45.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Dec 15 08:21:21 2014

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 07FE                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l84 17D8  
                                      l94 155F                                        l86 17EC  
                                      l95 155B                                        l96 1549  
                                      l98 1559                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1091                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                    _getDimmerLights_Line 1CE7                    __end_of_setDelayOff_GO 174F  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
               setDimmerLights_Adj@lights 006D                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 1653                      _setDimmerLights_Line 1D2B  
                            ___ftadd@sign 004B                                       l231 0ADA  
                                     l304 1F05                                       l305 1F07  
                    _setDimmerLights_SwOn 1498                                       l348 1103  
                                     _GIE 005F                                       _CRC 00CA  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000A                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CE  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 00C8              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E3                 setDimmerLights_Adj@status 006B  
                __end_of_CC2500_WriteByte 1F12                     _Buzzer_Initialization 1C39  
                         __end_of_ADC_Set 1C9B                           ?_DelayTimejudge 0070  
                                     wreg 0009      setDimmerLights_Initialization@lights 0023  
            getDimmerLights_Status@status 0023                           _setDimmerLights 086A  
                       ??_getSw_KeyStatus 0020                     _setDimmerLights_AdjRF 1091  
                   _setDimmerLights_AdjOn 1299                                      ?_ISR 0070  
         setDimmerLights_ErrorClose@count 00E9                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1D9E                                Load_Main@i 0030  
                              Load_Main@j 002B                              ___ftdiv@sign 003D  
                                    l2020 06D7                                      l2022 0627  
                                    l2103 09D8                                      l2031 0693  
                                    l2023 0629                                      l2024 0631  
                                    l1170 1334                                      l2115 1446  
                                    l1420 1263                                      l2029 065C  
                                    l1424 125F                                      l1184 11CB  
                                    l1193 15AC                                      l2065 1DA3  
                                    l2073 0D0B                  ?_DimmerLightsPointSelect 0070  
                                    l1419 1248                                      l2083 0D5C  
                                    l2403 032B                                      l2405 0204  
                                    l1702 0FFC                                      l1448 0F4F  
                                    l1376 141A                                      l2089 1295  
                                    l1554 01BB                                      l1707 0FF6  
                                    l1557 007B                           __end_of_IOC_Set 1D67  
                                    l1558 018B                                      l1559 0189  
                                    l2383 1ED3                                      l2740 0A0C  
                          _Load_Main$3755 002E                                      l2746 0A23  
                                    l2769 04CD                                      l8012 1E29  
                                    l8030 1FE9                                      l8102 050C  
                                    l8008 1E23                                      l8112 0E11  
                                    l9000 11B3                                      l8042 0456  
                                    l8052 046C                                      l8140 0E81  
                                    l8132 0E68                                      l8212 0C66  
                   _setDimmerLights_SwOff 174F                                      l8310 16CD  
                                    l8070 0499                                      l8046 045D  
                                    l8118 0E27                                      l8230 0C96  
                                    l9102 0D47                                      l8320 16E8  
                                    l8072 04A3                                      l8064 0486  
                                    l8240 0CBA                                      l8232 0CA4  
                                    l8160 0708                                      l8082 04BF  
                                    l8074 04A8                                      l8242 0CBD  
                                    l8154 06F2                                      l8324 16F0  
                                    l8316 16DF                                      l8308 16C1  
                                    l8092 04F1                                      l8084 04C9  
                                    l8076 04AC                                      l9044 1E1A  
                                    l8172 0743                                      l8412 14CA  
                                    l9108 0D52                                      l9132 080B  
                                    l9150 14FD                                      l8246 0CCB  
                                    l8238 0CB1                                      l8510 11DF  
                                    l8414 14D0                                      l9160 150D  
                                    l9152 1500                                      l8088 04DF  
                                    l8184 075F                                      l8176 074B  
                                    l9080 0D0E                                      l9162 1510  
                                    l8266 1176                                      l8610 15E7  
                                    l9156 1506                                      l8292 16AE  
                                    l8372 1733                                      l8428 178D  
                                    l8188 0767                                      l9092 0D26  
                                    l9068 0CF8                                      l9166 1516  
                                    l8374 1739                                      l9262 169D  
                                    l9254 167C                                      l9270 1CEF  
                                    l8614 15F6                                      l8640 1F24  
                                    l8368 172D                                      l8448 085B  
                                    l9256 1682                                      l8560 1F78  
                                    l9352 1FA9                                      l8634 1F1B  
                                    l8298 16B9                                      l8650 10E3  
                                    l8810 0AF6                                      l8802 0AE9  
                                    l9354 1FAC                                      l8636 1F1E  
                                    l8580 0928                                      l8724 1243  
                                    l9372 119B                                      l8652 10E6  
                                    l8804 0AED                                      l8628 1435  
                                    l9612 1EDE                     _myMain_Initialization 1DAD  
                                    l8582 095C                                      l8734 125A  
                                    l8726 124C                                      l9374 117F  
                                    l8558 1F72                                      l8822 0793  
                                    l8830 079F                                      l8806 0AF0  
                                    l8750 097B                                      l9526 0648  
                                    l9702 0327                                      l9446 0F6C  
                                    l9358 1FB1                                      l8680 13B6  
                                    l9376 11A0                                      l9392 1582  
                                    l8656 10EC                                      l8840 07B2  
                                    l8824 0796                                      l9560 067A  
                                    l9608 1ED8                                      l8578 0956  
                                    l9386 156D                                      l8754 09A0  
                                    l8762 09BD                                      l9562 067C  
                                    l9642 0232                                      l9626 01EF  
                                    l9490 0FE3                                      l7980 09E2  
                                    l9724 1397                                      l9716 1379  
                                    l8860 07CA                                      l8844 07B8  
                                    l8828 079C                                      l8772 0AA6  
                                    l8756 09B5                                      l9652 0264  
                                    l9476 0FCB                                      l9742 1533  
                                    l8694 13D5                                      l8686 13BF  
                                    l8934 08B7                                      l8926 089D  
                                    l9806 0596                                      l9718 1385  
                                    l8862 07E3                                      l8838 07AF  
                                    l8774 0AA9                                      l8758 09B9  
                                    l9590 06C5                                      l9478 0FCD  
                                    l9910 0C1A                                      l7984 09E9  
                                    l8944 161B                                      l9728 13A0  
                                    l8792 0AC1                                      l9488 0FE2  
                                    _CFGS 0CAE                                      l8882 1114  
                                    l8890 1077                                      l7994 0A11  
                                    l7986 09F3                                      l8778 0AAF  
                                    l9578 06A4                                      l9666 02A2  
                                    l9906 0C12                                      l8884 111F  
                                    l8892 107A                                      l7996 0A19  
                                    l7988 09F8                                      l8796 0AE0  
                                    l9676 02D4                                      l9940 1489  
                                    l8798 0AE3                                      l9926 0C47  
                                    l8896 1080                              __CFG_WDTE$ON 0000  
                                    l9958 13FA                                      l9898 0BED  
                                    l9998 006A                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u8015 0A14                                      u8045 0A2A  
                                    u8215 049A                                      u8245 04AD  
                                    u9055 0933                                      u8185 0487  
                                    u8345 0E39                                      u8505 076E  
                                    u8425 0714                                      u8275 04C0  
                                    u8355 0E49                                      u8435 0724  
                                    u8365 0E69                                      u8605 0CB2  
                                    u8375 0E78                                      u8455 074C  
                                    u8705 16C4                                      u8385 0E82  
                                    u8545 0C6D                                      u8465 0752  
                                    u8725 16CE                                      u8910 081B  
                                    u8735 16D8                                      u8655 1162  
                                    u8575 0C97                                      u8495 0768  
                                    u8745 16E0                                      u8915 0819  
                                    u9495 1109                                      u7975 09EE  
                                    u7995 0A07                                      _LWLO 0CAD  
                                    u8965 1EB1                                      _RSSI 00CF  
                                    _WREN 0CAA                                      _Buz1 00AE  
                                    _Load 0126                                      _Temp 00D7  
                                    _main 08C3                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 0A9E                           __end_of_RF_Main 1C42  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1CFD                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                          _setDimmerReClock 1C48  
                                    start 0013                                      ttemp 007E  
                                    wtemp 007E                       DelayTimejudge@value 0029  
              __end_of_setRFSW_AdjControl 145A                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
            __size_of_Temp_Initialization 0003                         ?_getDimmer_LoadOK 0070  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 1C64  
__size_of_getDimmerLights_Allow_Condition 0004         ??_getDimmerLights_Allow_Condition 0020  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1C60  
                  _getDimmerLights_Status 1DDC                        ??_getDimmer_LoadOK 0020  
          __size_of_DimmerIntrPointSelect 000A                          __end_of_LED_Main 1C70  
        setDimmerLights_ErrorClose@lights 00EA             __end_of_DimmerIntrPointSelect 1CC7  
                   ?_getDimmerLights_Line 0070                                     l10020 0096  
                                   l10050 0141                                     l10026 00C0  
                                   l10142 0EBB                                     l10118 01A9  
                             Load_Main@sw 002C                                     l10152 0ED9  
                                   l10056 014E                                     l10058 0154  
                                   l10164 0F0C                                     l10148 0ECA  
                                   l10068 0169                                     l10252 08F2  
                                   l10166 0EDE                                     l10182 0F45  
                                   l10176 0F33                                     l10168 0F14  
                                   l10248 08E7                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0240  
                         __end_of___awdiv 16F7                           __end_of___ftadd 0524  
                         __end_of___ftdiv 0EA3                           __end_of___ftneg 1CAB  
                                   u10135 1188                                     u11025 0C00  
                         __end_of___ftmul 078F                                     u11125 1480  
                                   u11135 148F                                     u11305 0101  
                                   u10505 06B5                                     u10265 0FB3  
                                   u11075 0C34                           ___awdiv@divisor 0020  
                                   u10285 0FD3                                     u11510 0F12  
                                   u11175 1412                                     _T1CON 0018  
                                   u10385 0642                                     u11515 0EE9  
                         __end_of___fttol 0CD4                                     u10805 1390  
                                   u11365 015A                                     u10815 1398  
                                   u10845 1529                                     u10775 137C  
                                   u10795 1386                                     u10965 132B  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 13A7  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1EB7                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 1304                _setDimmerLights_IntrIOC_GO 12CE  
                        __end_of_TMR1_ISR 10D9                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 097A  
              _setDimmerLights_ErrorClose 091E                          __end_of_TMR1_Set 1D73  
                                   _getAD 1F9E                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1E68               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1DCC  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 11A3  
           __end_of_setLED_Initialization 1E44                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 0811  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 0B67  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0011                         ??_setPercentValue 005C  
                            __end_of_main 091E                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1C78                        ??_setMemory_Modify 0020  
                          _Exception_Main 0EA3                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 08C3  
                    _setSw_Initialization 1DCC                                    ??_main 0070  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 097A                            _setMemory_Data 1D43  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 000B  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C0  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1CE7  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                   ??_Switch_Initialization 0025  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0A3A                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                               ??_WDT_Set 0020                          __end_of___awtoft 2000  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 0A3A  
                _getMain_All_Error_Status 1232                                    _IOCBF2 1CB2  
                                  i1l6800 03EC                                    i1l6802 03F2  
                                  i1l6812 0427                                    i1l6808 0411  
                                  i1l6764 035E                                    i1l6776 038E  
                                  i1l6794 03D5                                    i1l6796 03DB  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0020  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                                    u720_25 10D3  
                                  _OSCCON 0099                        __size_of_Load_Main 0181  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1EE1                                    _WDTCON 0097  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1ECC                                    _Dimmer 0120  
                                  _DlySw1 0165                __end_of_Mcu_Initialization 1E56  
                     __end_of_Buzzer_Main 1566                                    _Memory 01BE  
                                  _Timer1 0123                                    ___bmul 1E20  
                  __end_of_Exception_Main 0F50                      Exception_Main@lights 00EB  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D5                                    _s_data 00D6  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 13A7  
                                  _myMain 00A0                    __end_of_setMemory_Data 1D4F  
                        _DimmerLightsIntr 0076                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 006B                          ___awdiv@quotient 0027  
                                  _setBuz 17A7                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1C82          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0039  
     __end_of_setDimmerLights_IntrControl 042E               _setDimmerLights_IntrControl 0334  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1E8E               getMain_Lights_Count@status1 0023  
             getMain_Lights_Count@status2 0021               getMain_Lights_Count@status3 0022  
                   __end_of_SwPointSelect 1D13              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 000C  
                 __size_of_getMain_LoadOK 000E                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                getMain_LightsStatus@status 0028  
                              _TouchPower 1ECC                ?_getAll_DimmerLights_AdjGO 0070  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
                 __end_of_getPercentValue 0BCC          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 003C                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5042 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070            DimmerIntrIOCPointSelect@lights 0071  
                         ?_Exception_Main 0070                              __pidataBANK4 1FBE  
                           __end_of_getAD 1FBE                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021              __size_of_setDimmerLights_Adj 0050  
                      _LED_Initialization 1C68                           _getSw_KeyStatus 0800  
               ??_setControl_Lights_Table 006F                        getRF_KeyStatus@key 0021  
                        ??_DelayTimejudge 0024                           ?_setMemory_Data 0020  
           ??_Flash_Memory_Initialization 0062                          ?_setDimmerLights 006B  
                    _getMain_Lights_Count 1DBC                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 01C1                        __size_of_getBuz_GO 0011  
                    _getMain_LightsStatus 1178                __end_of_set_TimeoutCleared 1C7D  
                __end_of_setDimmerReClock 1C4C                        __size_of_getRxData 008B  
                     ?_LED_Initialization 0070                     getMain_LightsStatus@i 0026  
                       ?_CC2500_WriteByte 0070                            _setProductData 1D73  
                          _DimmerLights11 00CC                      __size_of_setLED_Main 0036  
                                 ??_getAD 0023                       _Temp_Initialization 1C42  
                      ??_CC2500_WriteByte 0020                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 151C  
                       ??_setRFSW_Control 006C                         __end_of_Temp_Main 1C48  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1C58                                __pnvCOMMON 0079  
               getMain_LightsStatus@count 0025                             ??_Switch_Main 006F  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 0075  
                       LedPointSelect@led 0021                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 08C3  
                          _getDelayOff_GO 1DED                       _CC2500_WriteCommand 1F12  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
        __size_of_DimmerLightsPointSelect 000B                          ??_setDelayOff_GO 0068  
           ??_DimmerLights_Initialization 0024                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0BCC  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                        __size_of_setTxData 009B  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1C94  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 145A  
                              ??_WDT_Main 0020                     ?_getMain_LightsStatus 0070  
            __end_of_setRF_Initialization 1D08                        _setRFSW_AdjControl 141C  
                  __end_of_setProductData 1D81                                   _IOC_ISR 1D8F  
                                 _IOC_Set 1D5B                      __size_of_setLog_Code 0034  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 1304                 __size_of_getDimmer_LoadOK 0008  
                       _Flash_Memory_Read 1F2C               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 006F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1C3F  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1CF2           __end_of_setControl_Lights_Table 09D9  
                         setRF_Main@error 01EE                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0B02  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1D1F                           __size_of_IO_Set 0018  
                       __end_of_getBuz_GO 1E0F                       ??_Flash_Memory_Main 0029  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1DFE  
          __end_of_getDimmerLights_Status 1DED                         __end_of_getRxData 0D5F  
                 __end_of_getSw_KeyStatus 0811                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1CDC                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16A3                                   ___ftadd 042E  
                                 ___ftdiv 0DFA                                   ___ftneg 1CA2  
                                 ___ftmul 06DB                                   ___fttol 0C4D  
                     __end_of_Switch_Main 1CA2                                   ___lwdiv 1370  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1E0F  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 006B  
                         __size_of_setBuz 0059                                   __ptext1 13E0  
                                 __ptext2 1DAD                                   __ptext3 145A  
                                 __ptext4 0BCC                                   __ptext5 1F9E  
                                 __ptext6 1E56                                   __ptext7 07FE  
                                 __ptext8 1C45                                   __ptext9 0F50  
                 ??_setDimmerLights_AdjRF 0062                   ??_setDimmerLights_AdjOn 0022  
               __size_of_CC2500_SIDLEMode 0004                     _DimmerIntrPointSelect 1CBD  
                            __size_of_ISR 000F                ??_getMain_All_Error_Status 0020  
                         ?_setProductData 0062                 __end_of_Flash_Memory_Main 133A  
               __end_of_Flash_Memory_Read 1F46                   ??_setDimmerLights_SwOff 006A  
                              _setRF_Main 0600                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1C5C                         _DimmerLights_Main 1C64  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1C88  
              __end_of_CC2500_ClearRXFIFO 1C50                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 1C54             DimmerLightsPointSelect@lights 0021  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 0079                            _LedPointSelect 1D37  
                     _DelayOffPointSelect 1D1F                            _getMain_LoadOK 1D81  
                                 clrloop0 1C8F            __size_of_Switch_Initialization 0009  
           __end_of_Switch_Initialization 1CBD                      end_of_initialization 003C  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1124  
                           _DelayTime_1us 10FE                         __end_of_setTxData 0DFA  
              __end_of_Flash_Memory_Write 11D2                                   init_ram 1C88  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1C89  
                              _setSw_Main 01C1                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002F                         _CC2500_ReadStatus 10D9  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1E32  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 078F                             _CC2500_TxData 0A9E  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1566  
                             ?_getLoad_AD 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1000                       _Flash_Memory_Unlock 1CAB  
                     ??_CC2500_ReadStatus 0022                    ??_getMain_LightsStatus 0024  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1C68  
                      _Mcu_Initialization 1E44                  __size_of_CC2500_PowerRST 0044  
                    __end_of_my_MainTimer 141C                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1D43  
                 __end_of_setPercentValue 0B67                    __end_of_getMain_LoadOK 1D8F  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 114E  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 1603                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 10FE                             ?_RF_RxDisable 0070  
             ??_getAll_DimmerLights_AdjGO 0020           getMain_All_Error_Status@command 0025  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006C  
                          __end_of_IO_Set 1EF9                      _setRF_Initialization 1CFD  
                      _setMemory_LoopSave 1E7B                               _Switch_Main 1C9B  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1CDC                   __end_of_getRF_KeyStatus 1E20  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1EB7                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1E32                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1CD1                         getSw_KeyStatus@sw 0070  
                       __size_of_TMR1_ISR 0025             __size_of_getDimmerLights_Line 000B  
                  ?_DimmerIntrPointSelect 0070                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0050                            __end_of_setLED 13E0  
           __size_of_setDimmerLights_Line 000C             __size_of_setDimmerLights_SwOn 0040  
                          __end_of_setBuz 1800                      _CC2500_FrequencyCabr 1D13  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 15B4  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 11D2  
                         ?_LedPointSelect 0070                                 _Load_Main 0040  
                             __end_of_ISR 0013                           ?_getMain_LoadOK 0070  
                        _getDimmer_LoadOK 1066                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0005                        ??_setDimmerReClock 0073  
                      ?_setRF_DimmerValue 0070                __end_of_CC2500_InitPATable 1F9E  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 1000  
                          ??_RF_RxDisable 0024                       __size_of_getLoad_AD 0081  
                            ?_Buzzer_Main 0070                        _set_TimeoutCleared 1C78  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 016A                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1C45                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D0  
                   setProductData@address 0065                       Exception_Main@count 00E9  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00EA  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                  __size_of_SwPointSelect 000B                                 _Tx_Length 00D3  
                             __pdataBANK4 0220                 _getAll_DimmerLights_AdjGO 1C70  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0070  
                       ??_CC2500_ReadByte 0020          __end_of_getMain_All_Error_Status 1265  
                        _CC2500_SIDLEMode 1C54                __size_of_DimmerLights_Main 0004  
               __end_of_setRF_DimmerValue 1201                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                               __pbssCOMMON 0075  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1E68                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E9  
                           __pcstackBANK3 01EC                             __pcstackBANK4 0240  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0059                             DlyOff_Main@sw 006F  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 0064                __size_of_CC2500_ReadStatus 0025  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0154                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0066                 ??_DimmerLightsPointSelect 0020  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1F62                  setRFSW_AdjControl@status 006A  
                         ??_CC2500_TxData 0024                            getRxData@error 00ED  
             __size_of_LED_Initialization 0004                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 00EC                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00DB                            Load_Main@adjgo 002D  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002F                    _setTemp_Initialization 0003  
                               _getBuz_GO 1DFE       __end_of_Flash_Memory_Initialization 0600  
             _Flash_Memory_Initialization 0524                                  ?___awdiv 0020  
                               __ptext100 114E                                 __ptext101 1E20  
                               __ptext110 1EB7                                 __ptext102 1DED  
                               __ptext111 1C54                                 __ptext103 1DDC  
                               __ptext120 1F12                                 __ptext112 14D8  
                               __ptext104 1CDC                                 __ptext121 1C78  
                               __ptext113 1124                                 __ptext105 17A7  
                               __ptext130 1D8F                                 __ptext122 1EA2  
                               __ptext114 1F7F                                 __ptext106 16A3  
                               __ptext131 1C48                                 __ptext123 1EF9  
                               __ptext115 106E                                 __ptext107 1C58  
                               __ptext132 12CE                                 __ptext124 151C  
                               __ptext116 1D13                                 __ptext108 1C82  
                               __ptext133 1CD1                                 __ptext125 1C39  
                               __ptext117 10FE                                 __ptext109 1D1F  
                                ?___ftadd 0041                                 __ptext118 1C50  
                               __ptext127 10B4                                 __ptext119 1C4C  
                               __ptext128 0334                                 __ptext129 1CBD  
                               _getRxData 0CD4                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 1603  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003                          getMain_LoadOK@ok 0022  
           __end_of_Buzzer_Initialization 1C3C                          getPercentValue@i 005F  
                        setPercentValue@i 005F                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 1EE1  
                         DelayTimejudge@i 0026                           DelayTimejudge@j 0027  
                         DelayTimejudge@k 0028                       __size_of_setSw_Main 0173  
            CC2500_ReadStatus@status_addr 0023            __size_of_setDimmerLights_AdjRF 0023  
          __size_of_setDimmerLights_AdjOn 0035             __end_of_setDimmerLights_AdjRF 10B4  
           __end_of_setDimmerLights_AdjOn 12CE                    CC2500_WriteByte@loop_a 0021  
                               _r_address 00D4            __size_of_setDimmerLights_SwOff 0058  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 17A7  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1DBC  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                 __size_of_DelayTimejudge 002A                             _SwPointSelect 1D08  
                     __end_of_setLED_Main 1370                          ??_getDelayOff_GO 0022  
                     _DimmerLightsIntrIOC 00CD                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1C45              setDimmerLights_SwOff@command 006A  
                       _CC2500_rfSettings 102F                                  _LED_Main 1C6C  
                         SwPointSelect@sw 0021                                 clear_ram0 1C8E  
                CC2500_InitPATable@loop_d 0027                              _my_MainTimer 13E0  
                               _setTxData 0D5F       __end_of_DimmerLights_Initialization 1CD1  
             _DimmerLights_Initialization 1CC7                        _CC2500_ClearRXFIFO 1C4C  
             getAll_DimmerLights_AdjGO@sw 0070                        _CC2500_ClearTXFIFO 1C50  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1EA2                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 11A3                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 10B4  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                                _TMR1_Set 1D67                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                                  _RF_Count 00C6  
                    __end_of_RF_RxDisable 1DAD                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1F2C                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1E56                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 01EC                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0058                                  _DelayOff 00CB  
                            setSw_Main@sw 006E          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0029                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1D5B  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0800                       __end_of_setLog_Code 1299  
                   _DlyOff_Initialization 1C82                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1C74  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006D  
                      __end_of_getLoad_AD 0C4D                     _Switch_Initialization 1CB4  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
                       ??_setDimmerLights 006C                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 1498  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
              ??_DimmerIntrIOCPointSelect 0070                          _CC2500_WriteByte 1EF9  
                       getLoad_AD@channel 0026              Flash_Memory_Initialization@i 0063  
                                _SwDetect 00D2                               ??_Temp_Main 0069  
                       setRFSW_Control@sw 006E             _getMain_All_Error_Status$3416 0021  
           _getMain_All_Error_Status$3417 0023                  __end_of_getDimmer_LoadOK 106E  
                     _Load_Initialization 1C7D                                 setLED@led 0023  
                 ??_DimmerIntrPointSelect 0070                              _setTemp_Main 0F50  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 1FDE  
                        ??_LedPointSelect 0020                                  ___ftpack 09D9  
           __size_of_getMain_Lights_Count 0010                          ??_getMain_LoadOK 0021  
           __size_of_getMain_LightsStatus 002B                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00EE                      CC2500_WriteREG@value 0022  
                             _setLED_Main 133A                __end_of_setRF_DimmerLights 086A  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022                          setDelayOff_GO@sw 0069  
                         ___lwdiv@divisor 0020        __size_of_getAll_DimmerLights_AdjGO 0004  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0025  
                                __ptext10 1C42                                  __ptext11 0003  
                                __ptext20 1ECC                                  __ptext12 1C9B  
                                __ptext21 1C3F                                  __ptext13 01C1  
                                __ptext30 11D2                                  __ptext22 0600  
                                __ptext14 1E8E                                  __ptext31 1091  
                                __ptext23 0CD4                                  __ptext15 1299  
                                __ptext40 10D9                                  __ptext32 0B67  
                                __ptext24 1265                                  __ptext16 0800  
                                __ptext41 1F62                                  __ptext33 06DB  
                                __ptext25 1E7B                                  __ptext17 1D08  
                                __ptext50 1C94                                  __ptext42 1C3C  
                                __ptext34 1E68                                  __ptext26 097A  
                                __ptext18 1CB4                                  __ptext51 0040  
                                __ptext43 1CFD                                  __ptext35 1E0F  
                                __ptext27 15B4                                  __ptext19 1DCC  
                                __ptext60 133A                                  __ptext52 1D81  
                                __ptext44 1E44                                  __ptext36 1DFE  
                                __ptext28 1498                                  __ptext61 1C68  
                                __ptext53 1066                                  __ptext45 1CF2  
                                __ptext37 1D9E                                  __ptext29 141C  
                                __ptext70 1F2C                                  __ptext62 1E32  
                                __ptext54 1DBC                                  __ptext46 1D67  
                                __ptext38 0A9E                                  __ptext71 0EA3  
                                __ptext63 1304                                  __ptext55 1C70  
                                __ptext47 1EE1                                  __ptext39 078F  
                                __ptext80 0811                                  __ptext72 1178  
                                __ptext64 1566                                  __ptext56 1370  
                                __ptext48 1D5B                                  __ptext81 0B02  
                                __ptext73 1232                                  __ptext65 1D4F  
                                __ptext57 1C7D                                  __ptext49 1C74  
                                __ptext90 1D2B                                  __ptext82 0C4D  
                                __ptext74 1CE7                                  __ptext66 0524  
                                __ptext58 1F46                                  __ptext91 1C60  
                                __ptext83 1CA2                                  __ptext75 1C64  
                                __ptext67 1D43                                  __ptext59 1C6C  
                                __ptext92 1CC7                                  __ptext84 0DFA  
                                __ptext76 1653                                  __ptext68 11A3  
                                __ptext93 1201                                  __ptext85 042E  
                                __ptext77 1603                                  __ptext69 1CAB  
                                __ptext94 1C5C                                  __ptext86 1FDE  
                                __ptext78 086A                                  __ptext95 0A3A  
                                __ptext87 09D9                                  __ptext79 0D5F  
                                __ptext96 091E                                  __ptext88 13A7  
                                __ptext97 174F                                  __ptext89 1D37  
                                __ptext98 16F7                                  __ptext99 1D73  
                                __product 0220             ??_setDimmerLights_IntrControl 0072  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1CF2              __end_of_setDimmerLights_Main 16A3  
            __end_of_setDimmerLights_Line 1D37              __end_of_setDimmerLights_SwOn 14D8  
                  getDimmer_LoadOK@status 0020                              ??_setSw_Main 006C  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1E8E                  __end_of_CC2500_SIDLEMode 1C58  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1D2B  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 01ED  
               __size_of_setDimmerReClock 0004                   setDimmerLights_AdjOn@sw 0022  
                         _CC2500_ReadByte 1F62                        _CC2500_InitPATable 1F7F  
                __end_of_setMemory_Modify 1E7B                        __end_of_setRF_Main 06DB  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EB                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006F                                  main@argc 0240  
                                main@argv 0242                      _getSw_KeyStatus$6010 0022  
                     ?_CC2500_InitPATable 0070                           _CC2500_PowerRST 14D8  
                __size_of_getSw_KeyStatus 0011               __end_of_Flash_Memory_Modify 15B4  
                       ??_getPercentValue 005C                               _setLog_Code 1265  
             __end_of_Flash_Memory_Unlock 1CB4                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 106E                        __end_of_setSw_Main 0334  
                   ??_Load_Initialization 0022                             _Transceive_OK 03C1  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 114E  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006C  
                 setDimmerLights_SwOff@sw 006B         __end_of_getAll_DimmerLights_AdjGO 1C74  
             __size_of_setMemory_LoopSave 0013                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 0029    __end_of_setDimmerLights_Initialization 1232  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 1201  
             __end_of_setDimmerLights_Adj 1653                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1C3C  
    __size_of_setDimmerLights_IntrControl 00FA                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1D4F                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D1                   __size_of_Exception_Main 00AD  
         __end_of_DelayOff_Initialization 1C5C       __size_of_setDimmerLights_IntrIOC_GO 0036  
     __size_of_setDimmerLights_ErrorClose 005C                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1C60                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 16F7  
        __size_of_setControl_Lights_Table 005F                    __end_of_DelayTimejudge 1178  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006D                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1124                   __end_of_CC2500_ReadByte 1F7F  
            __end_of_setSw_Initialization 1DDC                           _Timeout_Counter 1EA2  
         __size_of_getDimmerLights_Status 0011                      getPercentValue@value 005E  
                            _RF_RxDisable 1D9E                __end_of_LED_Initialization 1C6C  
          __end_of_setTemp_Initialization 0004                  __size_of_setPercentValue 0065  
                 setMemory_Modify@command 0021                      setPercentValue@value 005E  
               __end_of_RF_Initialization 1C3F                     __end_of_CC2500_RxData 07FE  
                   __end_of_CC2500_TxData 0B02                     _setLoad_AH_AL_Restore 1F46  
                 __end_of_CC2500_PowerRST 151C            getAll_DimmerLights_AdjGO@adjgo 0020  
