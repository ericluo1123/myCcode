

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Dec 23 16:00:21 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1FBE                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1FBE  3463               	retlw	99
  2163  1FBF  3402               	retlw	2
  2164  1FC0  3400               	retlw	0
  2165  1FC1  3400               	retlw	0
  2166  1FC2  3400               	retlw	0
  2167  1FC3  3400               	retlw	0
  2168  1FC4  3400               	retlw	0
  2169  1FC5  3400               	retlw	0
  2170  1FC6  3400               	retlw	0
  2171  1FC7  3400               	retlw	0
  2172  1FC8  3400               	retlw	0
  2173  1FC9  3400               	retlw	0
  2174  1FCA  34FF               	retlw	255
  2175  1FCB  34FF               	retlw	255
  2176  1FCC  34FF               	retlw	255
  2177  1FCD  3400               	retlw	0
  2178  1FCE  3400               	retlw	0
  2179  1FCF  3400               	retlw	0
  2180  1FD0  3400               	retlw	0
  2181  1FD1  3400               	retlw	0
  2182  1FD2  3400               	retlw	0
  2183  1FD3  3400               	retlw	0
  2184  1FD4  3400               	retlw	0
  2185  1FD5  3400               	retlw	0
  2186  1FD6  3400               	retlw	0
  2187  1FD7  3400               	retlw	0
  2188  1FD8  3400               	retlw	0
  2189  1FD9  3400               	retlw	0
  2190  1FDA  3400               	retlw	0
  2191  1FDB  3400               	retlw	0
  2192  1FDC  3400               	retlw	0
  2193  1FDD  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0064                     _RA4	set	100
  2322  0066                     _RA6	set	102
  2323  0067                     _RA7	set	103
  2324  0068                     _RB0	set	104
  2325  0069                     _RB1	set	105
  2326  006A                     _RB2	set	106
  2327  006B                     _RB3	set	107
  2328  006D                     _RB5	set	109
  2329  0070                     _RC0	set	112
  2330  0071                     _RC1	set	113
  2331  0073                     _RC3	set	115
  2332  0074                     _RC4	set	116
  2333  0075                     _RC5	set	117
  2334  0088                     _TMR1IF	set	136
  2335  009D                     _ADCON0	set	157
  2336  009E                     _ADCON1	set	158
  2337  009C                     _ADRESH	set	156
  2338  009B                     _ADRESL	set	155
  2339  0099                     _OSCCON	set	153
  2340  008C                     _TRISA	set	140
  2341  008D                     _TRISB	set	141
  2342  008E                     _TRISC	set	142
  2343  0097                     _WDTCON	set	151
  2344  04E9                     _GO_nDONE	set	1257
  2345  0488                     _TMR1IE	set	1160
  2346  0117                     _FVRCON	set	279
  2347  010C                     _LATA	set	268
  2348  010D                     _LATB	set	269
  2349  010E                     _LATC	set	270
  2350  018C                     _ANSELA	set	396
  2351  018D                     _ANSELB	set	397
  2352  018E                     _ANSELC	set	398
  2353  0192                     _PMADRH	set	402
  2354  0191                     _PMADRL	set	401
  2355  0196                     _PMCON2	set	406
  2356  0194                     _PMDATH	set	404
  2357  0193                     _PMDATL	set	403
  2358  0CAE                     _CFGS	set	3246
  2359  0CAC                     _FREE	set	3244
  2360  0CAD                     _LWLO	set	3245
  2361  0CA8                     _RD	set	3240
  2362  0CA9                     _WR	set	3241
  2363  0CAA                     _WREN	set	3242
  2364  020D                     _WPUB	set	525
  2365  1069                     _WPUB1	set	4201
  2366  106A                     _WPUB2	set	4202
  2367  0396                     _IOCBF	set	918
  2368  0395                     _IOCBN	set	917
  2369  0394                     _IOCBP	set	916
  2370  1CB2                     _IOCBF2	set	7346
  2371                           
  2372                           ; #config settings
  2373  0000                     
  2374                           	psect	cinit
  2375  0015                     start_initialization:	
  2376  0015                     __initialization:	
  2377                           
  2378                           ; Clear objects allocated to BITCOMMON
  2379  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2380                           
  2381                           ; Clear objects allocated to COMMON
  2382  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2383  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2384  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BANK0
  2387  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK1
  2390  001A  30A0               	movlw	low __pbssBANK1
  2391  001B  0084               	movwf	4
  2392  001C  3000               	movlw	high __pbssBANK1
  2393  001D  0085               	movwf	5
  2394  001E  3049               	movlw	73
  2395  001F  3190  2066  3180   	fcall	clear_ram0
  2396                           
  2397                           ; Clear objects allocated to BANK2
  2398  0022  3020               	movlw	low __pbssBANK2
  2399  0023  0084               	movwf	4
  2400  0024  3001               	movlw	high __pbssBANK2
  2401  0025  0085               	movwf	5
  2402  0026  304D               	movlw	77
  2403  0027  3190  2066  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK3
  2406  002A  30A0               	movlw	low __pbssBANK3
  2407  002B  0084               	movwf	4
  2408  002C  3001               	movlw	high __pbssBANK3
  2409  002D  0085               	movwf	5
  2410  002E  304C               	movlw	76
  2411  002F  3190  2066  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Initialize objects allocated to BANK4
  2414  0032  30BE               	movlw	low __pidataBANK4
  2415  0033  0084               	movwf	4
  2416  0034  309F               	movlw	(high __pidataBANK4)| (0+128)
  2417  0035  0085               	movwf	5
  2418  0036  3020               	movlw	low __pdataBANK4
  2419  0037  0086               	movwf	6
  2420  0038  3002               	movlw	high __pdataBANK4
  2421  0039  0087               	movwf	7
  2422  003A  3020               	movlw	32
  2423  003B  319C  2431         	fcall	init_ram
  2424  003D                     end_of_initialization:	
  2425                           ;End of C runtime variable initialization code
  2426                           
  2427  003D                     __end_of__initialization:	
  2428  003D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2429  003E  0020               	movlb	0
  2430  003F  3188  2817         	ljmp	_main	;jump to C main() function
  2431                           
  2432                           	psect	bitbssCOMMON
  2433  03C0                     __pbitbssCOMMON:	
  2434  03C0                     _Receive_OK:	
  2435  03C0                     	ds	1
  2436  03C1                     _Transceive_OK:	
  2437  03C1                     	ds	1
  2438                           
  2439                           	psect	bssCOMMON
  2440  0075                     __pbssCOMMON:	
  2441  0075                     _DelayOff:	
  2442  0075                     	ds	1
  2443  0076                     _DimmerLightsIntr:	
  2444  0076                     	ds	1
  2445  0077                     _Sw:	
  2446  0077                     	ds	1
  2447                           
  2448                           	psect	bssBANK0
  2449  006F                     __pbssBANK0:	
  2450  006F                     _DimmerLights:	
  2451  006F                     	ds	1
  2452                           
  2453                           	psect	bssBANK1
  2454  00A0                     __pbssBANK1:	
  2455  00A0                     _myMain:	
  2456  00A0                     	ds	14
  2457  00AE                     _Buz1:	
  2458  00AE                     	ds	12
  2459  00BA                     _RF1:	
  2460  00BA                     	ds	12
  2461  00C6                     _Dimmer:	
  2462  00C6                     	ds	3
  2463  00C9                     _WDT:	
  2464  00C9                     	ds	2
  2465  00CB                     _CRC:	
  2466  00CB                     	ds	1
  2467  00CC                     _DimmerLights11:	
  2468  00CC                     	ds	1
  2469  00CD                     _DimmerLightsIntrIOC:	
  2470  00CD                     	ds	1
  2471  00CE                     _LED:	
  2472  00CE                     	ds	1
  2473  00CF                     _RSSI:	
  2474  00CF                     	ds	1
  2475  00D0                     _Rx_Length:	
  2476  00D0                     	ds	1
  2477  00D1                     _SPI0Buffer:	
  2478  00D1                     	ds	1
  2479  00D2                     _SwDetect:	
  2480  00D2                     	ds	1
  2481  00D3                     _Tx_Length:	
  2482  00D3                     	ds	1
  2483  00D4                     _r_address:	
  2484  00D4                     	ds	1
  2485  00D5                     _r_data:	
  2486  00D5                     	ds	1
  2487  00D6                     _s_data:	
  2488  00D6                     	ds	1
  2489  00D7                     _Temp:	
  2490  00D7                     	ds	18
  2491                           
  2492                           	psect	bssBANK2
  2493  0120                     __pbssBANK2:	
  2494  0120                     _Timer1:	
  2495  0120                     	ds	3
  2496  0123                     _RF_Count:	
  2497  0123                     	ds	2
  2498  0125                     _Load:	
  2499  0125                     	ds	46
  2500  0153                     _DimmerLights1:	
  2501  0153                     	ds	17
  2502  0164                     _DlySw1:	
  2503  0164                     	ds	5
  2504  0169                     _VarErrLED:	
  2505  0169                     	ds	4
  2506                           
  2507                           	psect	bssBANK3
  2508  01A0                     __pbssBANK3:	
  2509  01A0                     _RF_Data:	
  2510  01A0                     	ds	30
  2511  01BE                     _Memory:	
  2512  01BE                     	ds	37
  2513  01E3                     _Sw1:	
  2514  01E3                     	ds	9
  2515                           
  2516                           	psect	dataBANK4
  2517  0220                     __pdataBANK4:	
  2518  0220                     __product:	
  2519  0220                     	ds	32
  2520                           
  2521                           	psect	clrtext
  2522  1066                     clear_ram0:	
  2523                           ;	Called with FSR0 containing the base address, and
  2524                           ;	WREG with the size to clear
  2525                           
  2526  1066  0064               	clrwdt	;clear the watchdog before getting into this loop
  2527  1067                     clrloop0:	
  2528  1067  0180               	clrf	0	;clear RAM location pointed to by FSR
  2529  1068  3101               	addfsr 0,1
  2530  1069  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2531  106A  2867               	goto	clrloop0	;have we reached the end yet?
  2532  106B  3400               	retlw	0	;all done for this memory range, return
  2533                           
  2534                           	psect	inittext
  2535  1C31                     init_ram:	
  2536  1C31  00FE               	movwf	126
  2537  1C32                     initloop:	
  2538  1C32  0012               	moviw fsr0++
  2539  1C33  001E               	movwi fsr1++
  2540  1C34  0BFE               	decfsz	126,f
  2541  1C35  2C32               	goto	initloop
  2542  1C36  3400               	retlw	0
  2543                           
  2544                           	psect	cstackBANK3
  2545  01EC                     __pcstackBANK3:	
  2546  01EC                     ?_main:	
  2547  01EC                     main@argc:	
  2548                           ; 2 bytes @ 0x0
  2549                           
  2550                           
  2551                           ; 2 bytes @ 0x0
  2552  01EC                     	ds	2
  2553  01EE                     main@argv:	
  2554                           
  2555                           ; 2 bytes @ 0x2
  2556  01EE                     	ds	2
  2557                           
  2558                           	psect	cstackBANK2
  2559  016D                     __pcstackBANK2:	
  2560  016D                     setRF_Main@loop_f:	
  2561                           
  2562                           ; 1 bytes @ 0x0
  2563  016D                     	ds	1
  2564  016E                     setRF_Main@Receive_OK:	
  2565                           
  2566                           ; 1 bytes @ 0x1
  2567  016E                     	ds	1
  2568  016F                     setRF_Main@error:	
  2569                           
  2570                           ; 1 bytes @ 0x2
  2571  016F                     	ds	1
  2572                           
  2573                           	psect	cstackBANK1
  2574  00E9                     __pcstackBANK1:	
  2575  00E9                     setDimmerLights_ErrorClose@count:	
  2576  00E9                     Exception_Main@count:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579                           
  2580                           ; 1 bytes @ 0x0
  2581  00E9                     	ds	1
  2582  00EA                     setDimmerLights_ErrorClose@lights:	
  2583  00EA                     Exception_Main@error:	
  2584                           ; 1 bytes @ 0x1
  2585                           
  2586                           
  2587                           ; 1 bytes @ 0x1
  2588  00EA                     	ds	1
  2589  00EB                     setDimmerLights_ErrorClose@i:	
  2590  00EB                     Exception_Main@i:	
  2591                           ; 2 bytes @ 0x2
  2592                           
  2593                           
  2594                           ; 2 bytes @ 0x2
  2595  00EB                     	ds	2
  2596  00ED                     getRxData@error:	
  2597  00ED                     Exception_Main@i_3436:	
  2598                           ; 1 bytes @ 0x4
  2599                           
  2600                           
  2601                           ; 2 bytes @ 0x4
  2602  00ED                     	ds	2
  2603  00EF                     Exception_Main@lights:	
  2604                           
  2605                           ; 1 bytes @ 0x6
  2606  00EF                     	ds	1
  2607                           
  2608                           	psect	cstackCOMMON
  2609  0070                     __pcstackCOMMON:	
  2610  0070                     ?_CC2500_WriteCommand:	
  2611  0070                     ?_Timeout_Counter:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_set_TimeoutCleared:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_WriteByte:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_ReadStatus:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ReadByte:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_PowerRST:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_InitSetREG:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_InitPATable:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_ClearTXFIFO:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_ClearRXFIFO:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_FrequencyCabr:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_SIDLEMode:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DlyOff_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DlyOff_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_ErrorClose:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerLights_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_Line:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setTxData:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setLED_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setLED_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Fosc_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IO_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_TMR1_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_ADC_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IOC_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_WDT_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_IOC_ISR:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_TMR1_ISR:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Flash_Memory_Write:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Flash_Memory_Modify:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_WDT_Clearing:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_myMain_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Temp_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Load_Initialization:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Switch_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_RF_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_getLoad_AD:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_getTemp_AD:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_my_MainTimer:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Temp_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Load_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Switch_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_RF_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Exception_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setLoad_AH_AL_Restore:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setTemp_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setTemp_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRF_Initialization:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_RF_RxDisable:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_getRxData:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setLog_Code:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setControl_Lights_Table:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRFSW_Control:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRFSW_AdjControl:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRF_DimmerValue:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setSw_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setSw_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_Buzzer_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_Buzzer_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_CC2500_TxData:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_CC2500_RxData:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_CC2500_PowerOnInitial:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DelayOffPointSelect:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DelayOff_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DelayOff_Main:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerIntrIOCPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ??_DimmerIntrIOCPointSelect:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerIntrPointSelect:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ??_DimmerIntrPointSelect:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerLights_IntrControl:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DimmerLightsPointSelect:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_Initialization:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_setDimmerLights_SwOn:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setDimmerLights_SwOff:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setDimmerLights_AdjOn:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_setDimmerLights_AdjRF:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_LedPointSelect:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_LED_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LED_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Mcu_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_ISR:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_setDimmerReClock:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Unlock:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Erasing:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setMemory_Modify:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_setMemory_LoopSave:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_WDT_Main:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_setRF_Learn:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_TouchPower:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_SwPointSelect:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_DelayTimejudge:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_getLoad_OK:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getMain_All_Error_Status:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_LightsStatus:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getDimmerLights_Allow_Condition:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_setPercentValue:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getPercentValue:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_Flash_Memory_Read:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getRF_KeyStatus:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getSw_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDelayOff_GO:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmer_LoadGO:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmerLights_Line:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmerLights_Status:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getAll_DimmerLights_AdjSw:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmer_Load_Status:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getMain_Lights_Count:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     getDimmerLights_Allow_Condition@lights:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     getSw_KeyStatus@sw:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956                           
  2957                           ; 1 bytes @ 0x0
  2958  0070                     	ds	1
  2959  0071                     DimmerIntrIOCPointSelect@lights:	
  2960  0071                     DimmerIntrPointSelect@lights:	
  2961                           ; 1 bytes @ 0x1
  2962                           
  2963                           
  2964                           ; 1 bytes @ 0x1
  2965  0071                     	ds	1
  2966  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2967  0072                     ??_setDimmerLights_IntrControl:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973                           
  2974                           ; 1 bytes @ 0x2
  2975  0072                     	ds	1
  2976  0073                     ??_IOC_ISR:	
  2977  0073                     ??_setDimmerReClock:	
  2978                           ; 0 bytes @ 0x3
  2979                           
  2980  0073                     setDimmerLights_IntrControl@lights:	
  2981                           ; 0 bytes @ 0x3
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x3
  2985  0073                     	ds	1
  2986  0074                     ??_TMR1_ISR:	
  2987  0074                     ??_ISR:	
  2988                           ; 0 bytes @ 0x4
  2989                           
  2990                           
  2991                           ; 0 bytes @ 0x4
  2992  0074                     	ds	1
  2993                           
  2994                           	psect	cstackBANK0
  2995  0020                     __pcstackBANK0:	
  2996  0020                     ??_Timeout_Counter:	
  2997  0020                     ??_set_TimeoutCleared:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_CC2500_WriteByte:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_CC2500_ReadByte:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ?_DelayTime_1us:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_getLoad_OK:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_getMain_All_Error_Status:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_getMain_LightsStatus:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_setDimmerLights_Line:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_setTxData:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_Fosc_Set:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_IO_Set:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_TMR1_Set:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_ADC_Set:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_IOC_Set:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_WDT_Set:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_Flash_Memory_Read:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ?_setMemory_Data:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_Flash_Memory_Write:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_WDT_Clearing:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_myMain_Initialization:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_Temp_Initialization:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_setLoad_AH_AL_Restore:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_setTemp_Initialization:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_setRF_Initialization:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_getRF_KeyStatus:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_getSw_KeyStatus:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_Buzzer_Initialization:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_Buzzer_Main:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_DelayOffPointSelect:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_DimmerLightsPointSelect:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_getDimmer_LoadGO:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_getDimmerLights_Line:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_getDimmer_Load_Status:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_LedPointSelect:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_Flash_Memory_Unlock:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_Flash_Memory_Erasing:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_setMemory_Modify:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_setMemory_LoopSave:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_WDT_Main:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_getMain_Lights_Count:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_setRF_Learn:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_TouchPower:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_SwPointSelect:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ?___bmul:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ?_getBuz_GO:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132  0020                     ?_getAD:	
  3133                           ; 2 bytes @ 0x0
  3134                           
  3135  0020                     ?___wmul:	
  3136                           ; 2 bytes @ 0x0
  3137                           
  3138  0020                     ?___awdiv:	
  3139                           ; 2 bytes @ 0x0
  3140                           
  3141  0020                     ?___lwdiv:	
  3142                           ; 2 bytes @ 0x0
  3143                           
  3144  0020                     ?___ftpack:	
  3145                           ; 2 bytes @ 0x0
  3146                           
  3147  0020                     getDimmer_LoadGO@loadgo:	
  3148                           ; 3 bytes @ 0x0
  3149                           
  3150  0020                     setDimmerLights_Line@lights:	
  3151                           ; 1 bytes @ 0x0
  3152                           
  3153  0020                     getDimmerLights_Line@line:	
  3154                           ; 1 bytes @ 0x0
  3155                           
  3156  0020                     getDimmer_Load_Status@status:	
  3157                           ; 1 bytes @ 0x0
  3158                           
  3159  0020                     getAD@adcon1:	
  3160                           ; 1 bytes @ 0x0
  3161                           
  3162  0020                     setMemory_Data@data:	
  3163                           ; 1 bytes @ 0x0
  3164                           
  3165  0020                     getMain_LightsStatus@status:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0020                     getMain_Lights_Count@count:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0020                     getLoad_OK@ok:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     ___bmul@multiplicand:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     DelayTime_1us@count:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0020                     ___wmul@multiplier:	
  3181                           ; 2 bytes @ 0x0
  3182                           
  3183  0020                     ___awdiv@divisor:	
  3184                           ; 2 bytes @ 0x0
  3185                           
  3186  0020                     ___lwdiv@divisor:	
  3187                           ; 2 bytes @ 0x0
  3188                           
  3189  0020                     ___ftpack@arg:	
  3190                           ; 2 bytes @ 0x0
  3191                           
  3192                           
  3193                           ; 3 bytes @ 0x0
  3194  0020                     	ds	1
  3195  0021                     ??_getDimmerLights_Allow_Condition:	
  3196  0021                     ??_setMemory_Data:	
  3197                           ; 0 bytes @ 0x1
  3198                           
  3199  0021                     ??_RF_Initialization:	
  3200                           ; 0 bytes @ 0x1
  3201                           
  3202  0021                     ??_Mcu_Initialization:	
  3203                           ; 0 bytes @ 0x1
  3204                           
  3205  0021                     ??___bmul:	
  3206                           ; 0 bytes @ 0x1
  3207                           
  3208  0021                     CC2500_WriteByte@loop_a:	
  3209                           ; 0 bytes @ 0x1
  3210                           
  3211  0021                     CC2500_ReadByte@loop_b:	
  3212                           ; 1 bytes @ 0x1
  3213                           
  3214  0021                     DelayOffPointSelect@sw:	
  3215                           ; 1 bytes @ 0x1
  3216                           
  3217  0021                     DimmerLightsPointSelect@lights:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220  0021                     LedPointSelect@led:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223  0021                     Flash_Memory_Read@i:	
  3224                           ; 1 bytes @ 0x1
  3225                           
  3226  0021                     Flash_Memory_Write@i:	
  3227                           ; 1 bytes @ 0x1
  3228                           
  3229  0021                     setMemory_Modify@command:	
  3230                           ; 1 bytes @ 0x1
  3231                           
  3232  0021                     setMemory_LoopSave@command:	
  3233                           ; 1 bytes @ 0x1
  3234                           
  3235  0021                     getMain_Lights_Count@status1:	
  3236                           ; 1 bytes @ 0x1
  3237                           
  3238  0021                     setLoad_AH_AL_Restore@i:	
  3239                           ; 1 bytes @ 0x1
  3240                           
  3241  0021                     setRF_Learn@command:	
  3242                           ; 1 bytes @ 0x1
  3243                           
  3244  0021                     getRF_KeyStatus@key:	
  3245                           ; 1 bytes @ 0x1
  3246                           
  3247  0021                     SwPointSelect@sw:	
  3248                           ; 1 bytes @ 0x1
  3249                           
  3250  0021                     getSw_KeyStatus@status:	
  3251                           ; 1 bytes @ 0x1
  3252                           
  3253  0021                     _getMain_All_Error_Status$3422:	
  3254                           ; 1 bytes @ 0x1
  3255                           
  3256                           
  3257                           ; 2 bytes @ 0x1
  3258  0021                     	ds	1
  3259  0022                     ??_CC2500_WriteCommand:	
  3260  0022                     ??_CC2500_ReadStatus:	
  3261                           ; 0 bytes @ 0x2
  3262                           
  3263  0022                     ??_DelayTime_1us:	
  3264                           ; 0 bytes @ 0x2
  3265                           
  3266  0022                     ?_CC2500_WriteREG:	
  3267                           ; 0 bytes @ 0x2
  3268                           
  3269  0022                     ??_DlyOff_Initialization:	
  3270                           ; 0 bytes @ 0x2
  3271                           
  3272  0022                     ??_setDimmerLights_Initialization:	
  3273                           ; 0 bytes @ 0x2
  3274                           
  3275  0022                     ?_setLED:	
  3276                           ; 0 bytes @ 0x2
  3277                           
  3278  0022                     ??_setLED_Main:	
  3279                           ; 0 bytes @ 0x2
  3280                           
  3281  0022                     ??_Load_Initialization:	
  3282                           ; 0 bytes @ 0x2
  3283                           
  3284  0022                     ??_getBuz_GO:	
  3285                           ; 0 bytes @ 0x2
  3286                           
  3287  0022                     ??_getDelayOff_GO:	
  3288                           ; 0 bytes @ 0x2
  3289                           
  3290  0022                     ??_setDimmerLights_AdjOn:	
  3291                           ; 0 bytes @ 0x2
  3292                           
  3293  0022                     ??_getDimmerLights_Status:	
  3294                           ; 0 bytes @ 0x2
  3295                           
  3296  0022                     ??_getAll_DimmerLights_AdjSw:	
  3297                           ; 0 bytes @ 0x2
  3298                           
  3299  0022                     CC2500_WriteREG@value:	
  3300                           ; 0 bytes @ 0x2
  3301                           
  3302  0022                     DlyOff_Initialization@sw:	
  3303                           ; 1 bytes @ 0x2
  3304                           
  3305  0022                     getDelayOff_GO@sw:	
  3306                           ; 1 bytes @ 0x2
  3307                           
  3308  0022                     setDimmerLights_AdjOn@sw:	
  3309                           ; 1 bytes @ 0x2
  3310                           
  3311  0022                     getDimmerLights_Allow_Condition@allow:	
  3312                           ; 1 bytes @ 0x2
  3313                           
  3314  0022                     getDimmerLights_Status@lights:	
  3315                           ; 1 bytes @ 0x2
  3316                           
  3317  0022                     setLED@command:	
  3318                           ; 1 bytes @ 0x2
  3319                           
  3320  0022                     Flash_Memory_Read@address:	
  3321                           ; 1 bytes @ 0x2
  3322                           
  3323  0022                     setMemory_Data@address:	
  3324                           ; 1 bytes @ 0x2
  3325                           
  3326  0022                     _getRF_KeyStatus$5046:	
  3327                           ; 1 bytes @ 0x2
  3328                           
  3329  0022                     _getSw_KeyStatus$6012:	
  3330                           ; 1 bytes @ 0x2
  3331                           
  3332  0022                     ___bmul@product:	
  3333                           ; 1 bytes @ 0x2
  3334                           
  3335  0022                     DelayTime_1us@i:	
  3336                           ; 1 bytes @ 0x2
  3337                           
  3338  0022                     ___wmul@multiplicand:	
  3339                           ; 2 bytes @ 0x2
  3340                           
  3341  0022                     ___awdiv@dividend:	
  3342                           ; 2 bytes @ 0x2
  3343                           
  3344  0022                     ___lwdiv@dividend:	
  3345                           ; 2 bytes @ 0x2
  3346                           
  3347                           
  3348                           ; 2 bytes @ 0x2
  3349  0022                     	ds	1
  3350  0023                     ??_CC2500_WriteREG:	
  3351  0023                     ??_setLED:	
  3352                           ; 0 bytes @ 0x3
  3353                           
  3354  0023                     ??_DelayOff_Initialization:	
  3355                           ; 0 bytes @ 0x3
  3356                           
  3357  0023                     ??_getAD:	
  3358                           ; 0 bytes @ 0x3
  3359                           
  3360  0023                     CC2500_WriteCommand@command:	
  3361                           ; 0 bytes @ 0x3
  3362                           
  3363  0023                     CC2500_ReadStatus@status_addr:	
  3364                           ; 1 bytes @ 0x3
  3365                           
  3366  0023                     getDelayOff_GO@go:	
  3367                           ; 1 bytes @ 0x3
  3368                           
  3369  0023                     setDimmerLights_Initialization@lights:	
  3370                           ; 1 bytes @ 0x3
  3371                           
  3372  0023                     _getDimmerLights_Allow_Condition$2172:	
  3373                           ; 1 bytes @ 0x3
  3374                           
  3375  0023                     getDimmerLights_Status@status:	
  3376                           ; 1 bytes @ 0x3
  3377                           
  3378  0023                     getAll_DimmerLights_AdjSw@count:	
  3379                           ; 1 bytes @ 0x3
  3380                           
  3381  0023                     setLED@led:	
  3382                           ; 1 bytes @ 0x3
  3383                           
  3384  0023                     getAD@adcon0:	
  3385                           ; 1 bytes @ 0x3
  3386                           
  3387  0023                     Flash_Memory_Read@ret:	
  3388                           ; 1 bytes @ 0x3
  3389                           
  3390  0023                     ___bmul@multiplier:	
  3391                           ; 1 bytes @ 0x3
  3392                           
  3393  0023                     ___ftpack@exp:	
  3394                           ; 1 bytes @ 0x3
  3395                           
  3396  0023                     _getMain_All_Error_Status$3423:	
  3397                           ; 1 bytes @ 0x3
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x3
  3401  0023                     	ds	1
  3402  0024                     ??_CC2500_ClearTXFIFO:	
  3403  0024                     ??_CC2500_ClearRXFIFO:	
  3404                           ; 0 bytes @ 0x4
  3405                           
  3406  0024                     ??_CC2500_SIDLEMode:	
  3407                           ; 0 bytes @ 0x4
  3408                           
  3409  0024                     ??_DelayTimejudge:	
  3410                           ; 0 bytes @ 0x4
  3411                           
  3412  0024                     ??_setLED_Initialization:	
  3413                           ; 0 bytes @ 0x4
  3414                           
  3415  0024                     ??_Flash_Memory_Modify:	
  3416                           ; 0 bytes @ 0x4
  3417                           
  3418  0024                     ??_getLoad_AD:	
  3419                           ; 0 bytes @ 0x4
  3420                           
  3421  0024                     ??_getTemp_AD:	
  3422                           ; 0 bytes @ 0x4
  3423                           
  3424  0024                     ??_RF_RxDisable:	
  3425                           ; 0 bytes @ 0x4
  3426                           
  3427  0024                     ??_setSw_Initialization:	
  3428                           ; 0 bytes @ 0x4
  3429                           
  3430  0024                     ??_CC2500_TxData:	
  3431                           ; 0 bytes @ 0x4
  3432                           
  3433  0024                     ??_CC2500_RxData:	
  3434                           ; 0 bytes @ 0x4
  3435                           
  3436  0024                     ??_DimmerLights_Initialization:	
  3437                           ; 0 bytes @ 0x4
  3438                           
  3439  0024                     ??___wmul:	
  3440                           ; 0 bytes @ 0x4
  3441                           
  3442  0024                     ??___awdiv:	
  3443                           ; 0 bytes @ 0x4
  3444                           
  3445  0024                     ??___lwdiv:	
  3446                           ; 0 bytes @ 0x4
  3447                           
  3448  0024                     CC2500_WriteREG@w_addr:	
  3449                           ; 0 bytes @ 0x4
  3450                           
  3451  0024                     setLED_Initialization@led:	
  3452                           ; 1 bytes @ 0x4
  3453                           
  3454  0024                     setLED_Main@led:	
  3455                           ; 1 bytes @ 0x4
  3456                           
  3457  0024                     setSw_Initialization@sw:	
  3458                           ; 1 bytes @ 0x4
  3459                           
  3460  0024                     ___ftpack@sign:	
  3461                           ; 1 bytes @ 0x4
  3462                           
  3463  0024                     getBuz_GO@i:	
  3464                           ; 1 bytes @ 0x4
  3465                           
  3466  0024                     DelayTime_1us@j:	
  3467                           ; 2 bytes @ 0x4
  3468                           
  3469  0024                     getAll_DimmerLights_AdjSw@i:	
  3470                           ; 2 bytes @ 0x4
  3471                           
  3472  0024                     ___wmul@product:	
  3473                           ; 2 bytes @ 0x4
  3474                           
  3475                           
  3476                           ; 2 bytes @ 0x4
  3477  0024                     	ds	1
  3478  0025                     ??_CC2500_InitSetREG:	
  3479  0025                     ??_CC2500_InitPATable:	
  3480                           ; 0 bytes @ 0x5
  3481                           
  3482  0025                     ??_Switch_Initialization:	
  3483                           ; 0 bytes @ 0x5
  3484                           
  3485  0025                     ??___ftpack:	
  3486                           ; 0 bytes @ 0x5
  3487                           
  3488  0025                     ??_LED_Initialization:	
  3489                           ; 0 bytes @ 0x5
  3490                           
  3491  0025                     ??_LED_Main:	
  3492                           ; 0 bytes @ 0x5
  3493                           
  3494  0025                     CC2500_TxData@loop_e:	
  3495                           ; 0 bytes @ 0x5
  3496                           
  3497  0025                     CC2500_RxData@loop_f:	
  3498                           ; 1 bytes @ 0x5
  3499                           
  3500  0025                     Flash_Memory_Modify@i:	
  3501                           ; 1 bytes @ 0x5
  3502                           
  3503  0025                     getMain_All_Error_Status@command:	
  3504                           ; 1 bytes @ 0x5
  3505                           
  3506  0025                     getTemp_AD@channel:	
  3507                           ; 1 bytes @ 0x5
  3508                           
  3509  0025                     ___awdiv@counter:	
  3510                           ; 1 bytes @ 0x5
  3511                           
  3512  0025                     ___lwdiv@counter:	
  3513                           ; 1 bytes @ 0x5
  3514                           
  3515                           
  3516                           ; 1 bytes @ 0x5
  3517  0025                     	ds	1
  3518  0026                     ??_CC2500_PowerRST:	
  3519  0026                     ??_CC2500_FrequencyCabr:	
  3520                           ; 0 bytes @ 0x6
  3521                           
  3522  0026                     ??_Flash_Memory_Main:	
  3523                           ; 0 bytes @ 0x6
  3524                           
  3525  0026                     CC2500_InitSetREG@temp1:	
  3526                           ; 0 bytes @ 0x6
  3527                           
  3528  0026                     CC2500_InitPATable@temp:	
  3529                           ; 1 bytes @ 0x6
  3530                           
  3531  0026                     DelayTimejudge@i:	
  3532                           ; 1 bytes @ 0x6
  3533                           
  3534  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3535                           ; 1 bytes @ 0x6
  3536                           
  3537  0026                     getMain_All_Error_Status@status:	
  3538                           ; 1 bytes @ 0x6
  3539                           
  3540  0026                     getLoad_AD@channel:	
  3541                           ; 1 bytes @ 0x6
  3542                           
  3543  0026                     ___awdiv@sign:	
  3544                           ; 1 bytes @ 0x6
  3545                           
  3546  0026                     ___lwdiv@quotient:	
  3547                           ; 1 bytes @ 0x6
  3548                           
  3549                           
  3550                           ; 2 bytes @ 0x6
  3551  0026                     	ds	1
  3552  0027                     CC2500_InitSetREG@temp2:	
  3553  0027                     CC2500_InitPATable@loop_d:	
  3554                           ; 1 bytes @ 0x7
  3555                           
  3556  0027                     DelayTimejudge@j:	
  3557                           ; 1 bytes @ 0x7
  3558                           
  3559  0027                     getLoad_AD@k:	
  3560                           ; 1 bytes @ 0x7
  3561                           
  3562  0027                     ___awdiv@quotient:	
  3563                           ; 1 bytes @ 0x7
  3564                           
  3565                           
  3566                           ; 2 bytes @ 0x7
  3567  0027                     	ds	1
  3568  0028                     ??_Load_Main:	
  3569  0028                     ?___awtoft:	
  3570                           ; 0 bytes @ 0x8
  3571                           
  3572  0028                     CC2500_InitSetREG@loop_c:	
  3573                           ; 3 bytes @ 0x8
  3574                           
  3575  0028                     DelayTimejudge@k:	
  3576                           ; 1 bytes @ 0x8
  3577                           
  3578  0028                     getLoad_AD@j:	
  3579                           ; 1 bytes @ 0x8
  3580                           
  3581  0028                     ___awtoft@c:	
  3582                           ; 1 bytes @ 0x8
  3583                           
  3584                           
  3585                           ; 2 bytes @ 0x8
  3586  0028                     	ds	1
  3587  0029                     ?_setBuz:	
  3588  0029                     ??_CC2500_PowerOnInitial:	
  3589                           ; 0 bytes @ 0x9
  3590                           
  3591  0029                     DelayTimejudge@value:	
  3592                           ; 0 bytes @ 0x9
  3593                           
  3594  0029                     getLoad_AD@i:	
  3595                           ; 1 bytes @ 0x9
  3596                           
  3597  0029                     setBuz@time:	
  3598                           ; 1 bytes @ 0x9
  3599                           
  3600                           
  3601                           ; 2 bytes @ 0x9
  3602  0029                     	ds	1
  3603  002A                     Load_Main@error:	
  3604                           
  3605                           ; 1 bytes @ 0xA
  3606  002A                     	ds	1
  3607  002B                     ??_setBuz:	
  3608  002B                     ??___awtoft:	
  3609                           ; 0 bytes @ 0xB
  3610                           
  3611  002B                     Load_Main@Load_Status:	
  3612                           ; 0 bytes @ 0xB
  3613                           
  3614                           
  3615                           ; 1 bytes @ 0xB
  3616  002B                     	ds	1
  3617  002C                     setBuz@count:	
  3618  002C                     Load_Main@i:	
  3619                           ; 1 bytes @ 0xC
  3620                           
  3621                           
  3622                           ; 2 bytes @ 0xC
  3623  002C                     	ds	1
  3624  002D                     ??_my_MainTimer:	
  3625  002D                     ??_setDimmerLights_SwOn:	
  3626                           ; 0 bytes @ 0xD
  3627                           
  3628  002D                     setDimmerLights_SwOn@sw:	
  3629                           ; 0 bytes @ 0xD
  3630                           
  3631  002D                     ___awtoft@sign:	
  3632                           ; 1 bytes @ 0xD
  3633                           
  3634                           
  3635                           ; 1 bytes @ 0xD
  3636  002D                     	ds	1
  3637  002E                     ?___ftdiv:	
  3638  002E                     ?___ftmul:	
  3639                           ; 3 bytes @ 0xE
  3640                           
  3641  002E                     setDimmerLights_SwOn@idle:	
  3642                           ; 3 bytes @ 0xE
  3643                           
  3644  002E                     ___ftdiv@f2:	
  3645                           ; 1 bytes @ 0xE
  3646                           
  3647  002E                     ___ftmul@f1:	
  3648                           ; 3 bytes @ 0xE
  3649                           
  3650                           
  3651                           ; 3 bytes @ 0xE
  3652  002E                     	ds	3
  3653  0031                     ___ftdiv@f1:	
  3654  0031                     ___ftmul@f2:	
  3655                           ; 3 bytes @ 0x11
  3656                           
  3657                           
  3658                           ; 3 bytes @ 0x11
  3659  0031                     	ds	3
  3660  0034                     ??___ftdiv:	
  3661  0034                     ??___ftmul:	
  3662                           ; 0 bytes @ 0x14
  3663                           
  3664                           
  3665                           ; 0 bytes @ 0x14
  3666  0034                     	ds	4
  3667  0038                     ___ftdiv@cntr:	
  3668  0038                     ___ftmul@exp:	
  3669                           ; 1 bytes @ 0x18
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x18
  3673  0038                     	ds	1
  3674  0039                     ___ftdiv@f3:	
  3675  0039                     ___ftmul@f3_as_product:	
  3676                           ; 3 bytes @ 0x19
  3677                           
  3678                           
  3679                           ; 3 bytes @ 0x19
  3680  0039                     	ds	3
  3681  003C                     ___ftdiv@exp:	
  3682  003C                     ___ftmul@cntr:	
  3683                           ; 1 bytes @ 0x1C
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x1C
  3687  003C                     	ds	1
  3688  003D                     ___ftdiv@sign:	
  3689  003D                     ___ftmul@sign:	
  3690                           ; 1 bytes @ 0x1D
  3691                           
  3692                           
  3693                           ; 1 bytes @ 0x1D
  3694  003D                     	ds	1
  3695  003E                     ?___ftneg:	
  3696  003E                     ___ftneg@f1:	
  3697                           ; 3 bytes @ 0x1E
  3698                           
  3699                           
  3700                           ; 3 bytes @ 0x1E
  3701  003E                     	ds	3
  3702  0041                     ??___ftneg:	
  3703  0041                     ?___ftadd:	
  3704                           ; 0 bytes @ 0x21
  3705                           
  3706  0041                     ___ftadd@f1:	
  3707                           ; 3 bytes @ 0x21
  3708                           
  3709                           
  3710                           ; 3 bytes @ 0x21
  3711  0041                     	ds	3
  3712  0044                     ___ftadd@f2:	
  3713                           
  3714                           ; 3 bytes @ 0x24
  3715  0044                     	ds	3
  3716  0047                     ??___ftadd:	
  3717                           
  3718                           ; 0 bytes @ 0x27
  3719  0047                     	ds	4
  3720  004B                     ___ftadd@sign:	
  3721                           
  3722                           ; 1 bytes @ 0x2B
  3723  004B                     	ds	1
  3724  004C                     ___ftadd@exp2:	
  3725                           
  3726                           ; 1 bytes @ 0x2C
  3727  004C                     	ds	1
  3728  004D                     ___ftadd@exp1:	
  3729                           
  3730                           ; 1 bytes @ 0x2D
  3731  004D                     	ds	1
  3732  004E                     ?___fttol:	
  3733  004E                     ___fttol@f1:	
  3734                           ; 4 bytes @ 0x2E
  3735                           
  3736                           
  3737                           ; 3 bytes @ 0x2E
  3738  004E                     	ds	4
  3739  0052                     ??___fttol:	
  3740                           
  3741                           ; 0 bytes @ 0x32
  3742  0052                     	ds	4
  3743  0056                     ___fttol@sign1:	
  3744                           
  3745                           ; 1 bytes @ 0x36
  3746  0056                     	ds	1
  3747  0057                     ___fttol@lval:	
  3748                           
  3749                           ; 4 bytes @ 0x37
  3750  0057                     	ds	4
  3751  005B                     ___fttol@exp1:	
  3752                           
  3753                           ; 1 bytes @ 0x3B
  3754  005B                     	ds	1
  3755  005C                     ??_setPercentValue:	
  3756  005C                     ??_getPercentValue:	
  3757                           ; 0 bytes @ 0x3C
  3758                           
  3759                           
  3760                           ; 0 bytes @ 0x3C
  3761  005C                     	ds	2
  3762  005E                     getPercentValue@value:	
  3763  005E                     setPercentValue@value:	
  3764                           ; 1 bytes @ 0x3E
  3765                           
  3766                           
  3767                           ; 1 bytes @ 0x3E
  3768  005E                     	ds	1
  3769  005F                     getPercentValue@i:	
  3770  005F                     setPercentValue@i:	
  3771                           ; 3 bytes @ 0x3F
  3772                           
  3773                           
  3774                           ; 3 bytes @ 0x3F
  3775  005F                     	ds	3
  3776  0062                     ?_setProductData:	
  3777  0062                     ??_setDimmerLights_AdjRF:	
  3778                           ; 0 bytes @ 0x42
  3779                           
  3780  0062                     ??_Flash_Memory_Initialization:	
  3781                           ; 0 bytes @ 0x42
  3782                           
  3783  0062                     setProductData@value:	
  3784                           ; 0 bytes @ 0x42
  3785                           
  3786                           
  3787                           ; 1 bytes @ 0x42
  3788  0062                     	ds	1
  3789  0063                     ??_setProductData:	
  3790  0063                     setDimmerLights_AdjRF@lights:	
  3791                           ; 0 bytes @ 0x43
  3792                           
  3793  0063                     Flash_Memory_Initialization@i:	
  3794                           ; 1 bytes @ 0x43
  3795                           
  3796                           
  3797                           ; 1 bytes @ 0x43
  3798  0063                     	ds	2
  3799  0065                     setProductData@address:	
  3800                           
  3801                           ; 1 bytes @ 0x45
  3802  0065                     	ds	1
  3803  0066                     ?_setRF_DimmerLights:	
  3804  0066                     ??_setTemp_Main:	
  3805                           ; 0 bytes @ 0x46
  3806                           
  3807  0066                     ??_setLog_Code:	
  3808                           ; 0 bytes @ 0x46
  3809                           
  3810  0066                     ??_setRF_DimmerValue:	
  3811                           ; 0 bytes @ 0x46
  3812                           
  3813  0066                     ?_setDelayOff_GO:	
  3814                           ; 0 bytes @ 0x46
  3815                           
  3816  0066                     setDelayOff_GO@command:	
  3817                           ; 0 bytes @ 0x46
  3818                           
  3819  0066                     setRF_DimmerLights@on:	
  3820                           ; 1 bytes @ 0x46
  3821                           
  3822                           
  3823                           ; 1 bytes @ 0x46
  3824  0066                     	ds	1
  3825  0067                     ??_setRF_DimmerLights:	
  3826  0067                     setDelayOff_GO@value:	
  3827                           ; 0 bytes @ 0x47
  3828                           
  3829  0067                     setRF_DimmerValue@lights:	
  3830                           ; 1 bytes @ 0x47
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0x47
  3834  0067                     	ds	1
  3835  0068                     ??_setRFSW_AdjControl:	
  3836  0068                     ??_setDelayOff_GO:	
  3837                           ; 0 bytes @ 0x48
  3838                           
  3839  0068                     setTemp_Main@error:	
  3840                           ; 0 bytes @ 0x48
  3841                           
  3842                           
  3843                           ; 1 bytes @ 0x48
  3844  0068                     	ds	1
  3845  0069                     ??_Temp_Main:	
  3846  0069                     setDelayOff_GO@sw:	
  3847                           ; 0 bytes @ 0x49
  3848                           
  3849  0069                     setRF_DimmerLights@status:	
  3850                           ; 1 bytes @ 0x49
  3851                           
  3852                           
  3853                           ; 1 bytes @ 0x49
  3854  0069                     	ds	1
  3855  006A                     ??_setDimmerLights_SwOff:	
  3856  006A                     setDimmerLights_SwOff@sw:	
  3857                           ; 0 bytes @ 0x4A
  3858                           
  3859  006A                     setRFSW_AdjControl@status:	
  3860                           ; 1 bytes @ 0x4A
  3861                           
  3862  006A                     setRF_DimmerLights@lights:	
  3863                           ; 1 bytes @ 0x4A
  3864                           
  3865                           
  3866                           ; 1 bytes @ 0x4A
  3867  006A                     	ds	1
  3868  006B                     ??_setDimmerLights_ErrorClose:	
  3869  006B                     ?_setDimmerLights:	
  3870                           ; 0 bytes @ 0x4B
  3871                           
  3872  006B                     ?_setDimmerLights_Adj:	
  3873                           ; 0 bytes @ 0x4B
  3874                           
  3875  006B                     ??_Exception_Main:	
  3876                           ; 0 bytes @ 0x4B
  3877                           
  3878  006B                     ??_setRFSW_Control:	
  3879                           ; 0 bytes @ 0x4B
  3880                           
  3881  006B                     ??_setSw_Main:	
  3882                           ; 0 bytes @ 0x4B
  3883                           
  3884  006B                     setDimmerLights@status:	
  3885                           ; 0 bytes @ 0x4B
  3886                           
  3887  006B                     setDimmerLights_Adj@status:	
  3888                           ; 1 bytes @ 0x4B
  3889                           
  3890  006B                     setRFSW_AdjControl@sw:	
  3891                           ; 1 bytes @ 0x4B
  3892                           
  3893                           
  3894                           ; 1 bytes @ 0x4B
  3895  006B                     	ds	1
  3896  006C                     ??_DlyOff_Main:	
  3897  006C                     ??_setDimmerLights:	
  3898                           ; 0 bytes @ 0x4C
  3899                           
  3900  006C                     ??_setDimmerLights_Adj:	
  3901                           ; 0 bytes @ 0x4C
  3902                           
  3903  006C                     setRFSW_Control@status:	
  3904                           ; 0 bytes @ 0x4C
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x4C
  3908  006C                     	ds	1
  3909  006D                     setDimmerLights@lights:	
  3910  006D                     setDimmerLights_Adj@lights:	
  3911                           ; 1 bytes @ 0x4D
  3912                           
  3913  006D                     setRFSW_Control@sw:	
  3914                           ; 1 bytes @ 0x4D
  3915                           
  3916  006D                     setSw_Main@sw:	
  3917                           ; 1 bytes @ 0x4D
  3918                           
  3919                           
  3920                           ; 1 bytes @ 0x4D
  3921  006D                     	ds	1
  3922  006E                     ??_setDimmerLights_Main:	
  3923  006E                     ??_Switch_Main:	
  3924                           ; 0 bytes @ 0x4E
  3925                           
  3926  006E                     ??_getRxData:	
  3927                           ; 0 bytes @ 0x4E
  3928                           
  3929  006E                     ??_setControl_Lights_Table:	
  3930                           ; 0 bytes @ 0x4E
  3931                           
  3932  006E                     DlyOff_Main@sw:	
  3933                           ; 0 bytes @ 0x4E
  3934                           
  3935  006E                     setDimmerLights_Main@lights:	
  3936                           ; 1 bytes @ 0x4E
  3937                           
  3938                           
  3939                           ; 1 bytes @ 0x4E
  3940  006E                     	ds	1
  3941  006F                     ??_RF_Main:	
  3942  006F                     ??_setRF_Main:	
  3943                           ; 0 bytes @ 0x4F
  3944                           
  3945  006F                     ??_DelayOff_Main:	
  3946                           ; 0 bytes @ 0x4F
  3947                           
  3948  006F                     ??_DimmerLights_Main:	
  3949                           ; 0 bytes @ 0x4F
  3950                           
  3951  006F                     ??_main:	
  3952                           ; 0 bytes @ 0x4F
  3953                           
  3954                           
  3955                           	psect	maintext
  3956  0817                     __pmaintext:	
  3957                           ; 0 bytes @ 0x4F
  3958 ;;
  3959 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3960 ;;
  3961 ;; *************** function _main *****************
  3962 ;; Defined at:
  3963 ;;		line 7 in file "../src/Main_B1.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  argc            2    0[BANK3 ] int 
  3966 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;		None
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  2    0[BANK3 ] int 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 17F/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3978 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3981 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3982 ;;Total ram usage:        4 bytes
  3983 ;; Hardware stack levels required when called:   15
  3984 ;; This function calls:
  3985 ;;		_Buzzer_Initialization
  3986 ;;		_Buzzer_Main
  3987 ;;		_CC2500_PowerOnInitial
  3988 ;;		_DelayOff_Initialization
  3989 ;;		_DelayOff_Main
  3990 ;;		_DimmerLights_Initialization
  3991 ;;		_DimmerLights_Main
  3992 ;;		_Exception_Main
  3993 ;;		_Flash_Memory_Initialization
  3994 ;;		_Flash_Memory_Main
  3995 ;;		_LED_Initialization
  3996 ;;		_LED_Main
  3997 ;;		_Load_Initialization
  3998 ;;		_Load_Main
  3999 ;;		_Mcu_Initialization
  4000 ;;		_RF_Initialization
  4001 ;;		_RF_Main
  4002 ;;		_Switch_Initialization
  4003 ;;		_Switch_Main
  4004 ;;		_Temp_Initialization
  4005 ;;		_Temp_Main
  4006 ;;		_WDT_Main
  4007 ;;		_getLoad_AD
  4008 ;;		_getTemp_AD
  4009 ;;		_myMain_Initialization
  4010 ;;		_my_MainTimer
  4011 ;; This function is called by:
  4012 ;;		Startup code after reset
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           
  4017                           ;psect for function _main
  4018  0817                     _main:	
  4019                           
  4020                           ;Main_B1.c: 8: myMain_Initialization();
  4021                           
  4022                           ;incstack = 0
  4023                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4024  0817  319D  2571  3188   	fcall	_myMain_Initialization
  4025                           
  4026                           ;Main_B1.c: 9: Mcu_Initialization();
  4027  081A  319E  2608  3188   	fcall	_Mcu_Initialization
  4028                           
  4029                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4030  081D  3185  254C  3188   	fcall	_Flash_Memory_Initialization
  4031                           
  4032                           ;Main_B1.c: 11: LED_Initialization();
  4033  0820  319C  241E  3188   	fcall	_LED_Initialization
  4034                           
  4035                           ;Main_B1.c: 12: Buzzer_Initialization();
  4036  0823  319B  23F4  3188   	fcall	_Buzzer_Initialization
  4037                           
  4038                           ;Main_B1.c: 14: ;;
  4039                           ;Main_B1.c: 15: Temp_Initialization();
  4040  0826  319C  2400  3188   	fcall	_Temp_Initialization
  4041                           
  4042                           ;Main_B1.c: 16: Load_Initialization();
  4043  0829  319B  23F7  3188   	fcall	_Load_Initialization
  4044                           
  4045                           ;Main_B1.c: 17: ;;
  4046                           ;Main_B1.c: 18: DelayOff_Initialization();
  4047  082C  319C  2416  3188   	fcall	_DelayOff_Initialization
  4048                           
  4049                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4050  082F  319C  2482  3188   	fcall	_DimmerLights_Initialization
  4051                           
  4052                           ;Main_B1.c: 21: ;;
  4053                           ;Main_B1.c: 22: ;;
  4054                           ;Main_B1.c: 23: ;;
  4055                           ;Main_B1.c: 24: Switch_Initialization();
  4056  0832  319C  246F  3188   	fcall	_Switch_Initialization
  4057                           
  4058                           ;Main_B1.c: 25: RF_Initialization();
  4059  0835  319B  23FA  3188   	fcall	_RF_Initialization
  4060                           
  4061                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4062  0838  319E  267B  3188   	fcall	_CC2500_PowerOnInitial
  4063  083B                     l10262:	
  4064                           ;Main_B1.c: 27: ;;
  4065                           ;Main_B1.c: 28: ;;
  4066                           ;Main_B1.c: 30: while (1) {
  4067                           
  4068                           
  4069                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4070  083B  0021               	movlb	1	; select bank1
  4071  083C  1C20               	btfss	_myMain^(0+128),0
  4072  083D  2846               	goto	l10266
  4073                           
  4074                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4075  083E  3005               	movlw	5
  4076  083F  318C  2482  3188   	fcall	_getLoad_AD
  4077                           
  4078                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4079  0842  3009               	movlw	9
  4080  0843  3194  2489  3188   	fcall	_getTemp_AD
  4081  0846                     l10266:	
  4082                           
  4083                           ;Main_B1.c: 57: }
  4084                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4085  0846  0022               	movlb	2	; select bank2
  4086  0847  1C20               	btfss	_Timer1^(0+256),0
  4087  0848  283B               	goto	l10262
  4088                           
  4089                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4090  0849  1020               	bcf	_Timer1^(0+256),0
  4091                           
  4092                           ;Main_B1.c: 96: my_MainTimer();
  4093  084A  3194  240F  3188   	fcall	_my_MainTimer
  4094                           
  4095                           ;Main_B1.c: 97: WDT_Main();
  4096  084D  319E  261A  3188   	fcall	_WDT_Main
  4097                           
  4098                           ;Main_B1.c: 98: ;;
  4099                           ;Main_B1.c: 99: ;;
  4100                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4101  0850  0021               	movlb	1	; select bank1
  4102  0851  1C20               	btfss	_myMain^(0+128),0
  4103  0852  283B               	goto	l10262
  4104                           
  4105                           ;Main_B1.c: 101: Flash_Memory_Main();
  4106  0853  3192  22FA  3188   	fcall	_Flash_Memory_Main
  4107                           
  4108                           ;Main_B1.c: 103: LED_Main();
  4109  0856  319C  2422  3188   	fcall	_LED_Main
  4110                           
  4111                           ;Main_B1.c: 104: Buzzer_Main();
  4112  0859  3194  24C7  3188   	fcall	_Buzzer_Main
  4113                           
  4114                           ;Main_B1.c: 106: ;;
  4115                           ;Main_B1.c: 107: Temp_Main();
  4116  085C  319C  2403  3188   	fcall	_Temp_Main
  4117                           
  4118                           ;Main_B1.c: 108: Load_Main();
  4119  085F  3180  2041  3188   	fcall	_Load_Main
  4120                           
  4121                           ;Main_B1.c: 109: ;;
  4122                           ;Main_B1.c: 111: ;;
  4123                           ;Main_B1.c: 112: DimmerLights_Main();
  4124  0862  319F  270C  3188   	fcall	_DimmerLights_Main
  4125                           
  4126                           ;Main_B1.c: 113: Switch_Main();
  4127  0865  319C  243E  3188   	fcall	_Switch_Main
  4128                           
  4129                           ;Main_B1.c: 114: ;;
  4130                           ;Main_B1.c: 115: ;;
  4131                           ;Main_B1.c: 117: RF_Main();
  4132  0868  319B  23FD  3188   	fcall	_RF_Main
  4133                           
  4134                           ;Main_B1.c: 118: DelayOff_Main();
  4135  086B  319C  241A  3188   	fcall	_DelayOff_Main
  4136                           
  4137                           ;Main_B1.c: 119: ;;
  4138                           ;Main_B1.c: 120: ;;
  4139                           ;Main_B1.c: 121: Exception_Main();
  4140  086E  3186  2628  3188   	fcall	_Exception_Main
  4141  0871  283B               	goto	l10262
  4142  0872                     __end_of_main:	
  4143                           ;Main_B1.c: 128: }
  4144                           ;Main_B1.c: 129: }
  4145                           ;Main_B1.c: 163: }
  4146                           ;Main_B1.c: 164: return (0);
  4147                           ;	Return value of _main is never used
  4148                           
  4149                           
  4150                           	psect	text1
  4151  140F                     __ptext1:	
  4152 ;; *************** function _my_MainTimer *****************
  4153 ;; Defined at:
  4154 ;;		line 185 in file "../src/Main_B1.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;		None               void
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;Total ram usage:        1 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    7
  4175 ;; This function calls:
  4176 ;;		_setBuz
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _my_MainTimer
  4184  140F                     _my_MainTimer:	
  4185                           
  4186                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4190  140F  0021               	movlb	1	; select bank1
  4191  1410  1820               	btfsc	_myMain^(0+128),0
  4192  1411  2C29               	goto	l9970
  4193                           
  4194                           ;Main_B1.c: 189: myMain.PowerCount++;
  4195  1412  3001               	movlw	1
  4196  1413  0020               	movlb	0	; select bank0
  4197  1414  00AD               	movwf	??_my_MainTimer
  4198  1415  082D               	movf	??_my_MainTimer,w
  4199  1416  0021               	movlb	1	; select bank1
  4200  1417  07A1               	addwf	(_myMain^(0+128)+1),f
  4201                           
  4202                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4203  1418  0821               	movf	(_myMain^(0+128)+1),w
  4204  1419  3A96               	xorlw	150
  4205  141A  1D03               	skipz
  4206  141B  0008               	return
  4207                           
  4208                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4209  141C  01A1               	clrf	(_myMain^(0+128)+1)
  4210                           
  4211                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4212  141D  1420               	bsf	_myMain^(0+128),0
  4213                           
  4214                           ;Main_B1.c: 197: setBuz(3, 50);
  4215  141E  3032               	movlw	50
  4216  141F  0020               	movlb	0	; select bank0
  4217  1420  00A9               	movwf	setBuz@time
  4218  1421  3000               	movlw	0
  4219  1422  00AA               	movwf	setBuz@time+1
  4220  1423  3003               	movlw	3
  4221  1424  3197  274E         	fcall	_setBuz
  4222                           
  4223                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4224  1426  0021               	movlb	1	; select bank1
  4225  1427  1620               	bsf	_myMain^(0+128),4
  4226                           
  4227                           ;Main_B1.c: 207: }
  4228                           ;Main_B1.c: 208: } else {
  4229  1428  0008               	return
  4230  1429                     l9970:	
  4231                           
  4232                           ;Main_B1.c: 209: myMain.PowerCount++;
  4233  1429  3001               	movlw	1
  4234  142A  0020               	movlb	0	; select bank0
  4235  142B  00AD               	movwf	??_my_MainTimer
  4236  142C  082D               	movf	??_my_MainTimer,w
  4237  142D  0021               	movlb	1	; select bank1
  4238  142E  07A1               	addwf	(_myMain^(0+128)+1),f
  4239                           
  4240                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4241  142F  0821               	movf	(_myMain^(0+128)+1),w
  4242  1430  3A64               	xorlw	100
  4243  1431  1903               	btfsc	3,2
  4244                           
  4245                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4246  1432  01A1               	clrf	(_myMain^(0+128)+1)
  4247                           
  4248                           ;Main_B1.c: 226: }
  4249                           ;Main_B1.c: 228: myMain.Count1++;
  4250  1433  3001               	movlw	1
  4251  1434  07A4               	addwf	(_myMain^(0+128)+4),f
  4252  1435  3000               	movlw	0
  4253  1436  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4254                           
  4255                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4256  1437  3004               	movlw	4
  4257  1438  3EA0               	addlw	_myMain& (0+255)
  4258  1439  0086               	movwf	6
  4259  143A  0187               	clrf	7
  4260  143B  3F40               	moviw [0]fsr1
  4261  143C  3A64               	xorlw	100
  4262  143D  1D03               	skipz
  4263  143E  2C41               	goto	u11315
  4264  143F  3F41               	moviw [1]fsr1
  4265  1440  3A00               	xorlw	0
  4266  1441                     u11315:	
  4267  1441  1D03               	skipz
  4268  1442  0008               	return
  4269                           
  4270                           ;Main_B1.c: 230: {
  4271                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4272  1443  01A4               	clrf	(_myMain^(0+128)+4)
  4273  1444  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4274                           
  4275                           ;Main_B1.c: 243: if (myMain.Flag) {
  4276  1445  1CA0               	btfss	_myMain^(0+128),1
  4277  1446  2C49               	goto	l1398
  4278                           
  4279                           ;Main_B1.c: 244: myMain.Flag = 0;
  4280  1447  10A0               	bcf	_myMain^(0+128),1
  4281                           
  4282                           ;Main_B1.c: 253: } else {
  4283  1448  0008               	return
  4284  1449                     l1398:	
  4285                           
  4286                           ;Main_B1.c: 254: myMain.Flag = 1;
  4287  1449  14A0               	bsf	_myMain^(0+128),1
  4288  144A  0008               	return
  4289  144B                     __end_of_my_MainTimer:	
  4290                           
  4291                           	psect	text2
  4292  1D71                     __ptext2:	
  4293 ;; *************** function _myMain_Initialization *****************
  4294 ;; Defined at:
  4295 ;;		line 170 in file "../src/Main_B1.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;		None               void
  4302 ;; Registers used:
  4303 ;;		wreg, fsr1l, fsr1h
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;Total ram usage:        1 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    5
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _myMain_Initialization
  4325  1D71                     _myMain_Initialization:	
  4326                           
  4327                           ;Main_B1.c: 173: product = &_product;
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4331  1D71  3020               	movlw	__product& (0+255)
  4332  1D72  0020               	movlb	0	; select bank0
  4333  1D73  00A0               	movwf	??_myMain_Initialization
  4334  1D74  0820               	movf	??_myMain_Initialization,w
  4335  1D75  00F9               	movwf	_product
  4336                           
  4337                           ;Main_B1.c: 174: product->Data[20] = 209;
  4338  1D76  30D1               	movlw	209
  4339  1D77  00A0               	movwf	??_myMain_Initialization
  4340  1D78  0879               	movf	_product,w
  4341  1D79  3E14               	addlw	20
  4342  1D7A  0086               	movwf	6
  4343  1D7B  3002               	movlw	2	; select bank4/5
  4344  1D7C  0087               	movwf	7
  4345  1D7D  0820               	movf	??_myMain_Initialization,w
  4346  1D7E  0081               	movwf	1
  4347  1D7F  0008               	return
  4348  1D80                     __end_of_myMain_Initialization:	
  4349                           
  4350                           	psect	text3
  4351  1489                     __ptext3:	
  4352 ;; *************** function _getTemp_AD *****************
  4353 ;; Defined at:
  4354 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  channel         1    wreg     unsigned char 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  channel         1    5[BANK0 ] unsigned char 
  4359 ;; Return value:  Size  Location     Type
  4360 ;;		None               void
  4361 ;; Registers used:
  4362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;Total ram usage:        2 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    7
  4375 ;; This function calls:
  4376 ;;		_getAD
  4377 ;; This function is called by:
  4378 ;;		_main
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function _getTemp_AD
  4384  1489                     _getTemp_AD:	
  4385                           
  4386                           ;incstack = 0
  4387                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4388                           ;getTemp_AD@channel stored from wreg
  4389  1489  0020               	movlb	0	; select bank0
  4390  148A  00A5               	movwf	getTemp_AD@channel
  4391                           
  4392                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4393  148B  0021               	movlb	1	; select bank1
  4394  148C  1D57               	btfss	_Temp^(0+128),2
  4395  148D  0008               	return
  4396                           
  4397                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4398  148E  30F0               	movlw	240
  4399  148F  0020               	movlb	0	; select bank0
  4400  1490  00A4               	movwf	??_getTemp_AD
  4401  1491  0824               	movf	??_getTemp_AD,w
  4402  1492  00A0               	movwf	getAD@adcon1
  4403  1493  0825               	movf	getTemp_AD@channel,w
  4404  1494  319F  279E  3194   	fcall	_getAD
  4405  1497  0020               	movlb	0	; select bank0
  4406  1498  0821               	movf	?_getAD+1,w
  4407  1499  0021               	movlb	1	; select bank1
  4408  149A  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4409  149B  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4410  149C  0020               	movlb	0	; select bank0
  4411  149D  0820               	movf	?_getAD,w
  4412  149E  0021               	movlb	1	; select bank1
  4413  149F  01E3               	clrf	(_Temp^(0+128)+12)
  4414  14A0  07E3               	addwf	(_Temp^(0+128)+12),f
  4415                           
  4416                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4417  14A1  300C               	movlw	12
  4418  14A2  3ED7               	addlw	_Temp& (0+255)
  4419  14A3  0086               	movwf	6
  4420  14A4  0187               	clrf	7
  4421  14A5  0016               	moviw fsr1++
  4422  14A6  0401               	iorwf	1,w
  4423  14A7  1903               	skipnz
  4424  14A8  0008               	return
  4425                           
  4426                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4427  14A9  0864               	movf	((_Temp+1)^(0+128)+12),w
  4428  14AA  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4429  14AB  1D03               	skipz
  4430  14AC  2CAF               	goto	u11265
  4431  14AD  0863               	movf	(_Temp^(0+128)+12),w
  4432  14AE  025F               	subwf	(_Temp^(0+128)+8),w
  4433  14AF                     u11265:	
  4434  14AF  1803               	skipnc
  4435  14B0  2CB8               	goto	l9952
  4436                           
  4437                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4438  14B1  0864               	movf	((_Temp+1)^(0+128)+12),w
  4439  14B2  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4440  14B3  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4441  14B4  0863               	movf	(_Temp^(0+128)+12),w
  4442  14B5  01DF               	clrf	(_Temp^(0+128)+8)
  4443  14B6  07DF               	addwf	(_Temp^(0+128)+8),f
  4444                           
  4445                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4446  14B7  0008               	return
  4447  14B8                     l9952:	
  4448  14B8  0864               	movf	((_Temp+1)^(0+128)+12),w
  4449  14B9  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4450  14BA  1D03               	skipz
  4451  14BB  2CBE               	goto	u11275
  4452  14BC  0863               	movf	(_Temp^(0+128)+12),w
  4453  14BD  0261               	subwf	(_Temp^(0+128)+10),w
  4454  14BE                     u11275:	
  4455  14BE  1803               	skipnc
  4456  14BF  0008               	return
  4457                           
  4458                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4459  14C0  0864               	movf	((_Temp+1)^(0+128)+12),w
  4460  14C1  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4461  14C2  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4462  14C3  0863               	movf	(_Temp^(0+128)+12),w
  4463  14C4  01E1               	clrf	(_Temp^(0+128)+10)
  4464  14C5  07E1               	addwf	(_Temp^(0+128)+10),f
  4465  14C6  0008               	return
  4466  14C7                     __end_of_getTemp_AD:	
  4467                           
  4468                           	psect	text4
  4469  0C82                     __ptext4:	
  4470 ;; *************** function _getLoad_AD *****************
  4471 ;; Defined at:
  4472 ;;		line 15 in file "../src/OverLoad_B1.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;  channel         1    wreg     unsigned char 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  channel         1    6[BANK0 ] unsigned char 
  4477 ;;  i               1    9[BANK0 ] unsigned char 
  4478 ;;  j               1    8[BANK0 ] unsigned char 
  4479 ;;  k               1    7[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;Total ram usage:        6 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    7
  4496 ;; This function calls:
  4497 ;;		_getAD
  4498 ;; This function is called by:
  4499 ;;		_main
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _getLoad_AD
  4505  0C82                     _getLoad_AD:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4509                           ;getLoad_AD@channel stored from wreg
  4510  0C82  0020               	movlb	0	; select bank0
  4511  0C83  00A6               	movwf	getLoad_AD@channel
  4512                           
  4513                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4514  0C84  01A9               	clrf	getLoad_AD@i
  4515  0C85  01A8               	clrf	getLoad_AD@j
  4516  0C86  01A7               	clrf	getLoad_AD@k
  4517                           
  4518                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4519  0C87  0022               	movlb	2	; select bank2
  4520  0C88  1E25               	btfss	_Load^(0+256),4
  4521  0C89  0008               	return
  4522                           
  4523                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4524  0C8A  30F3               	movlw	243
  4525  0C8B  0020               	movlb	0	; select bank0
  4526  0C8C  00A4               	movwf	??_getLoad_AD
  4527  0C8D  0824               	movf	??_getLoad_AD,w
  4528  0C8E  00A0               	movwf	getAD@adcon1
  4529  0C8F  0826               	movf	getLoad_AD@channel,w
  4530  0C90  319F  279E  318C   	fcall	_getAD
  4531  0C93  0020               	movlb	0	; select bank0
  4532  0C94  0821               	movf	?_getAD+1,w
  4533  0C95  0022               	movlb	2	; select bank2
  4534  0C96  01C7               	clrf	((_Load+1)^(0+256)+33)
  4535  0C97  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4536  0C98  0020               	movlb	0	; select bank0
  4537  0C99  0820               	movf	?_getAD,w
  4538  0C9A  0022               	movlb	2	; select bank2
  4539  0C9B  01C6               	clrf	(_Load^(0+256)+33)
  4540  0C9C  07C6               	addwf	(_Load^(0+256)+33),f
  4541                           
  4542                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4543  0C9D  0020               	movlb	0	; select bank0
  4544  0C9E  01A9               	clrf	getLoad_AD@i
  4545  0C9F  3004               	movlw	4
  4546  0CA0  0229               	subwf	getLoad_AD@i,w
  4547  0CA1  1803               	btfsc	3,0
  4548  0CA2  2CD0               	goto	l9922
  4549  0CA3                     l9910:	
  4550                           
  4551                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4552  0CA3  3529               	lslf	getLoad_AD@i,w
  4553  0CA4  3E30               	addlw	(_Load+11)& (0+255)
  4554  0CA5  0086               	movwf	6
  4555  0CA6  3001               	movlw	1	; select bank2/3
  4556  0CA7  0087               	movwf	7
  4557  0CA8  3F40               	moviw [0]fsr1
  4558  0CA9  00A4               	movwf	??_getLoad_AD
  4559  0CAA  3F41               	moviw [1]fsr1
  4560  0CAB  00A5               	movwf	??_getLoad_AD+1
  4561  0CAC  0022               	movlb	2	; select bank2
  4562  0CAD  0847               	movf	((_Load+1)^(0+256)+33),w
  4563  0CAE  0020               	movlb	0	; select bank0
  4564  0CAF  0225               	subwf	??_getLoad_AD+1,w
  4565  0CB0  1D03               	skipz
  4566  0CB1  2CB6               	goto	u11165
  4567  0CB2  0022               	movlb	2	; select bank2
  4568  0CB3  0846               	movf	(_Load^(0+256)+33),w
  4569  0CB4  0020               	movlb	0	; select bank0
  4570  0CB5  0224               	subwf	??_getLoad_AD,w
  4571  0CB6                     u11165:	
  4572  0CB6  1803               	skipnc
  4573  0CB7  2CC8               	goto	l9918
  4574  0CB8  08A8               	movf	getLoad_AD@j,f
  4575  0CB9  1D03               	skipz
  4576  0CBA  2CC8               	goto	l9918
  4577                           
  4578                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4579  0CBB  3529               	lslf	getLoad_AD@i,w
  4580  0CBC  3E30               	addlw	(_Load+11)& (0+255)
  4581  0CBD  0086               	movwf	6
  4582  0CBE  3001               	movlw	1	; select bank2/3
  4583  0CBF  0087               	movwf	7
  4584  0CC0  0022               	movlb	2	; select bank2
  4585  0CC1  0846               	movf	(_Load^(0+256)+33),w
  4586  0CC2  3FC0               	movwi [0]fsr1
  4587  0CC3  0847               	movf	((_Load+1)^(0+256)+33),w
  4588  0CC4  3FC1               	movwi [1]fsr1
  4589                           
  4590                           ;OverLoad_B1.c: 24: j = 1;
  4591  0CC5  0020               	movlb	0	; select bank0
  4592  0CC6  01A8               	clrf	getLoad_AD@j
  4593  0CC7  0AA8               	incf	getLoad_AD@j,f
  4594  0CC8                     l9918:	
  4595  0CC8  3001               	movlw	1
  4596  0CC9  00A4               	movwf	??_getLoad_AD
  4597  0CCA  0824               	movf	??_getLoad_AD,w
  4598  0CCB  07A9               	addwf	getLoad_AD@i,f
  4599  0CCC  3004               	movlw	4
  4600  0CCD  0229               	subwf	getLoad_AD@i,w
  4601  0CCE  1C03               	skipc
  4602  0CCF  2CA3               	goto	l9910
  4603  0CD0                     l9922:	
  4604                           
  4605                           ;OverLoad_B1.c: 25: }
  4606                           ;OverLoad_B1.c: 26: }
  4607                           ;OverLoad_B1.c: 27: if (j == 0) {
  4608  0CD0  08A8               	movf	getLoad_AD@j,f
  4609  0CD1  1D03               	skipz
  4610  0CD2  0008               	return
  4611                           
  4612                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4613  0CD3  01A9               	clrf	getLoad_AD@i
  4614  0CD4                     L1:	
  4615  0CD4  3004               	movlw	4
  4616  0CD5  0229               	subwf	getLoad_AD@i,w
  4617  0CD6  1803               	btfsc	3,0
  4618  0CD7  0008               	return
  4619                           
  4620                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4621  0CD8  3529               	lslf	getLoad_AD@i,w
  4622  0CD9  3E3A               	addlw	(_Load+21)& (0+255)
  4623  0CDA  0086               	movwf	6
  4624  0CDB  3001               	movlw	1	; select bank2/3
  4625  0CDC  0087               	movwf	7
  4626  0CDD  3F40               	moviw [0]fsr1
  4627  0CDE  00A4               	movwf	??_getLoad_AD
  4628  0CDF  3F41               	moviw [1]fsr1
  4629  0CE0  00A5               	movwf	??_getLoad_AD+1
  4630  0CE1  0825               	movf	??_getLoad_AD+1,w
  4631  0CE2  0022               	movlb	2	; select bank2
  4632  0CE3  0247               	subwf	((_Load+1)^(0+256)+33),w
  4633  0CE4  1D03               	skipz
  4634  0CE5  2CEA               	goto	u11215
  4635  0CE6  0020               	movlb	0	; select bank0
  4636  0CE7  0824               	movf	??_getLoad_AD,w
  4637  0CE8  0022               	movlb	2	; select bank2
  4638  0CE9  0246               	subwf	(_Load^(0+256)+33),w
  4639  0CEA                     u11215:	
  4640  0CEA  1803               	skipnc
  4641  0CEB  2CFD               	goto	l9938
  4642  0CEC  0020               	movlb	0	; select bank0
  4643  0CED  08A7               	movf	getLoad_AD@k,f
  4644  0CEE  1D03               	skipz
  4645  0CEF  2CFD               	goto	l9938
  4646                           
  4647                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4648  0CF0  3529               	lslf	getLoad_AD@i,w
  4649  0CF1  3E3A               	addlw	(_Load+21)& (0+255)
  4650  0CF2  0086               	movwf	6
  4651  0CF3  3001               	movlw	1	; select bank2/3
  4652  0CF4  0087               	movwf	7
  4653  0CF5  0022               	movlb	2	; select bank2
  4654  0CF6  0846               	movf	(_Load^(0+256)+33),w
  4655  0CF7  3FC0               	movwi [0]fsr1
  4656  0CF8  0847               	movf	((_Load+1)^(0+256)+33),w
  4657  0CF9  3FC1               	movwi [1]fsr1
  4658                           
  4659                           ;OverLoad_B1.c: 31: k = 1;
  4660  0CFA  0020               	movlb	0	; select bank0
  4661  0CFB  01A7               	clrf	getLoad_AD@k
  4662  0CFC  0AA7               	incf	getLoad_AD@k,f
  4663  0CFD                     l9938:	
  4664  0CFD  3001               	movlw	1
  4665  0CFE  0020               	movlb	0	; select bank0
  4666  0CFF  00A4               	movwf	??_getLoad_AD
  4667  0D00  0824               	movf	??_getLoad_AD,w
  4668  0D01  07A9               	addwf	getLoad_AD@i,f
  4669  0D02  2CD4               	goto	L1
  4670  0D03                     __end_of_getLoad_AD:	
  4671                           
  4672                           	psect	text5
  4673  1F9E                     __ptext5:	
  4674 ;; *************** function _getAD *****************
  4675 ;; Defined at:
  4676 ;;		line 456 in file "../src/MCU_B1.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  adcon0          1    wreg     unsigned char 
  4679 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  2    0[BANK0 ] int 
  4684 ;; Registers used:
  4685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4691 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;Total ram usage:        4 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    6
  4698 ;; This function calls:
  4699 ;;		_Timeout_Counter
  4700 ;;		_set_TimeoutCleared
  4701 ;; This function is called by:
  4702 ;;		_getLoad_AD
  4703 ;;		_getTemp_AD
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _getAD
  4709  1F9E                     _getAD:	
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4713                           ;getAD@adcon0 stored from wreg
  4714  1F9E  0020               	movlb	0	; select bank0
  4715  1F9F  00A3               	movwf	getAD@adcon0
  4716                           
  4717                           ;MCU_B1.c: 457: ADCON0 = adcon0;
  4718  1FA0  0823               	movf	getAD@adcon0,w
  4719  1FA1  0021               	movlb	1	; select bank1
  4720  1FA2  009D               	movwf	29	;volatile
  4721                           
  4722                           ;MCU_B1.c: 458: ADCON1 = adcon1;
  4723  1FA3  0020               	movlb	0	; select bank0
  4724  1FA4  0820               	movf	getAD@adcon1,w
  4725  1FA5  0021               	movlb	1	; select bank1
  4726  1FA6  009E               	movwf	30	;volatile
  4727                           
  4728                           ;MCU_B1.c: 459: GO_nDONE = 1;
  4729  1FA7  149D               	bsf	29,1	;volatile
  4730                           
  4731                           ;MCU_B1.c: 460: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4732  1FA8  2FAC               	goto	l9408
  4733  1FA9                     l9406:	
  4734                           
  4735                           ;MCU_B1.c: 461: Timeout_Counter();
  4736  1FA9  319E  2666  319F   	fcall	_Timeout_Counter
  4737  1FAC                     l9408:	
  4738  1FAC  0021               	movlb	1	; select bank1
  4739  1FAD  1C9D               	btfss	29,1	;volatile
  4740  1FAE  2FB1               	goto	l9412
  4741  1FAF  1D2B               	btfss	(_myMain^(0+128)+11),2
  4742  1FB0  2FA9               	goto	l9406
  4743  1FB1                     l9412:	
  4744                           
  4745                           ;MCU_B1.c: 462: };
  4746                           ;MCU_B1.c: 463: set_TimeoutCleared();
  4747  1FB1  319C  2426         	fcall	_set_TimeoutCleared
  4748                           
  4749                           ;MCU_B1.c: 464: return ((ADRESH*256)+ADRESL);
  4750  1FB3  0021               	movlb	1	; select bank1
  4751  1FB4  081C               	movf	28,w	;volatile
  4752  1FB5  0020               	movlb	0	; select bank0
  4753  1FB6  01A1               	clrf	?_getAD+1
  4754  1FB7  07A1               	addwf	?_getAD+1,f
  4755  1FB8  0021               	movlb	1	; select bank1
  4756  1FB9  081B               	movf	27,w	;volatile
  4757  1FBA  0020               	movlb	0	; select bank0
  4758  1FBB  01A0               	clrf	?_getAD
  4759  1FBC  07A0               	addwf	?_getAD,f
  4760  1FBD  0008               	return
  4761  1FBE                     __end_of_getAD:	
  4762                           
  4763                           	psect	text6
  4764  1E1A                     __ptext6:	
  4765 ;; *************** function _WDT_Main *****************
  4766 ;; Defined at:
  4767 ;;		line 1100 in file "../src/MCU_B1.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;		None
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;		None
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, status,2, status,0, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;Total ram usage:        1 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    6
  4788 ;; This function calls:
  4789 ;;		_WDT_Clearing
  4790 ;; This function is called by:
  4791 ;;		_main
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _WDT_Main
  4797  1E1A                     _WDT_Main:	
  4798                           
  4799                           ;MCU_B1.c: 1101: if (WDT.Enable == 1) {
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4803  1E1A  0021               	movlb	1	; select bank1
  4804  1E1B  1C49               	btfss	_WDT^(0+128),0
  4805  1E1C  0008               	return
  4806                           
  4807                           ;MCU_B1.c: 1102: if (WDT.Timer-- > 0) {
  4808  1E1D  3001               	movlw	1
  4809  1E1E  02CA               	subwf	(_WDT^(0+128)+1),f
  4810  1E1F  084A               	movf	(_WDT^(0+128)+1),w
  4811  1E20  3AFF               	xorlw	255
  4812  1E21  1903               	skipnz
  4813  1E22  0008               	return
  4814                           
  4815                           ;MCU_B1.c: 1103: WDT.Timer = 100;
  4816  1E23  3064               	movlw	100
  4817  1E24  0020               	movlb	0	; select bank0
  4818  1E25  00A0               	movwf	??_WDT_Main
  4819  1E26  0820               	movf	??_WDT_Main,w
  4820  1E27  0021               	movlb	1	; select bank1
  4821  1E28  00CA               	movwf	(_WDT^(0+128)+1)
  4822                           
  4823                           ;MCU_B1.c: 1104: WDT_Clearing();
  4824  1E29  3180  2002         	fcall	_WDT_Clearing
  4825  1E2B  0008               	return
  4826  1E2C                     __end_of_WDT_Main:	
  4827                           
  4828                           	psect	text7
  4829  0002                     __ptext7:	
  4830 ;; *************** function _WDT_Clearing *****************
  4831 ;; Defined at:
  4832 ;;		line 1110 in file "../src/MCU_B1.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;		None
  4837 ;; Return value:  Size  Location     Type
  4838 ;;		None               void
  4839 ;; Registers used:
  4840 ;;		None
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;Total ram usage:        0 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    5
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_WDT_Main
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           
  4861                           ;psect for function _WDT_Clearing
  4862  0002                     _WDT_Clearing:	
  4863                           
  4864                           ;incstack = 0
  4865                           ; Regs used in _WDT_Clearing: []
  4866  0002  0064               	clrwdt	;# 
  4867  0003  0008               	return
  4868  0004                     __end_of_WDT_Clearing:	
  4869                           
  4870                           	psect	text8
  4871  1C03                     __ptext8:	
  4872 ;; *************** function _Temp_Main *****************
  4873 ;; Defined at:
  4874 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;Total ram usage:        0 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    8
  4895 ;; This function calls:
  4896 ;;		_setTemp_Main
  4897 ;; This function is called by:
  4898 ;;		_main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _Temp_Main
  4904  1C03                     _Temp_Main:	
  4905                           
  4906                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4910  1C03  318F  2750         	fcall	_setTemp_Main
  4911  1C05  0008               	return
  4912  1C06                     __end_of_Temp_Main:	
  4913                           
  4914                           	psect	text9
  4915  0F50                     __ptext9:	
  4916 ;; *************** function _setTemp_Main *****************
  4917 ;; Defined at:
  4918 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  error           1   72[BANK0 ] unsigned char 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;		None               void
  4925 ;; Registers used:
  4926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;Total ram usage:        3 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    7
  4939 ;; This function calls:
  4940 ;;		_getMain_All_Error_Status
  4941 ;;		_setBuz
  4942 ;;		_setProductData
  4943 ;; This function is called by:
  4944 ;;		_Temp_Main
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _setTemp_Main
  4950  0F50                     _setTemp_Main:	
  4951                           
  4952                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4956  0F50  3000               	movlw	0
  4957  0F51  3192  225F  318F   	fcall	_getMain_All_Error_Status
  4958  0F54  0020               	movlb	0	; select bank0
  4959  0F55  00E6               	movwf	??_setTemp_Main
  4960  0F56  0866               	movf	??_setTemp_Main,w
  4961  0F57  00E8               	movwf	setTemp_Main@error
  4962                           
  4963                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4964  0F58  0021               	movlb	1	; select bank1
  4965  0F59  1C57               	btfss	_Temp^(0+128),0
  4966  0F5A  2FFC               	goto	l1723
  4967                           
  4968                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4969  0F5B  1957               	btfsc	_Temp^(0+128),2
  4970  0F5C  2F6C               	goto	l9474
  4971                           
  4972                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4973  0F5D  3001               	movlw	1
  4974  0F5E  07D8               	addwf	(_Temp^(0+128)+1),f
  4975  0F5F  3000               	movlw	0
  4976  0F60  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4977                           
  4978                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4979  0F61  3001               	movlw	1
  4980  0F62  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4981  0F63  30F4               	movlw	244
  4982  0F64  1903               	skipnz
  4983  0F65  0258               	subwf	(_Temp^(0+128)+1),w
  4984  0F66  1C03               	skipc
  4985  0F67  0008               	return
  4986                           
  4987                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4988  0F68  01D8               	clrf	(_Temp^(0+128)+1)
  4989  0F69  01D9               	clrf	((_Temp+1)^(0+128)+1)
  4990                           
  4991                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4992  0F6A  1557               	bsf	_Temp^(0+128),2
  4993                           
  4994                           ;OverTemperature_B1.c: 70: }
  4995                           ;OverTemperature_B1.c: 71: } else {
  4996  0F6B  0008               	return
  4997  0F6C                     l9474:	
  4998                           
  4999                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5000  0F6C  3001               	movlw	1
  5001  0F6D  07D8               	addwf	(_Temp^(0+128)+1),f
  5002  0F6E  3000               	movlw	0
  5003  0F6F  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5004                           
  5005                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5006  0F70  3000               	movlw	0
  5007  0F71  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5008  0F72  3005               	movlw	5
  5009  0F73  1903               	skipnz
  5010  0F74  0258               	subwf	(_Temp^(0+128)+1),w
  5011  0F75  1C03               	skipc
  5012  0F76  0008               	return
  5013                           
  5014                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5015  0F77  01D8               	clrf	(_Temp^(0+128)+1)
  5016  0F78  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5017                           
  5018                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5019  0F79  3008               	movlw	8
  5020  0F7A  3ED7               	addlw	_Temp& (0+255)
  5021  0F7B  0086               	movwf	6
  5022  0F7C  0187               	clrf	7
  5023  0F7D  0016               	moviw fsr1++
  5024  0F7E  0401               	iorwf	1,w
  5025  0F7F  1903               	skipnz
  5026  0F80  2FF6               	goto	l1728
  5027  0F81  300A               	movlw	10
  5028  0F82  3ED7               	addlw	_Temp& (0+255)
  5029  0F83  0086               	movwf	6
  5030  0F84  0187               	clrf	7
  5031  0F85  0016               	moviw fsr1++
  5032  0F86  0401               	iorwf	1,w
  5033  0F87  1903               	skipnz
  5034  0F88  2FF6               	goto	l1728
  5035                           
  5036                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5037  0F89  1157               	bcf	_Temp^(0+128),2
  5038                           
  5039                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5040  0F8A  300A               	movlw	10
  5041  0F8B  3ED7               	addlw	_Temp& (0+255)
  5042  0F8C  0086               	movwf	6
  5043  0F8D  0187               	clrf	7
  5044  0F8E  3008               	movlw	8
  5045  0F8F  3ED7               	addlw	_Temp& (0+255)
  5046  0F90  0084               	movwf	4
  5047  0F91  0185               	clrf	5
  5048  0F92  3F40               	moviw [0]fsr1
  5049  0F93  0700               	addwf	0,w
  5050  0F94  0020               	movlb	0	; select bank0
  5051  0F95  00E6               	movwf	??_setTemp_Main
  5052  0F96  3101               	addfsr 0,1
  5053  0F97  3F41               	moviw [1]fsr1
  5054  0F98  3D00               	addwfc	0,w
  5055  0F99  00E7               	movwf	??_setTemp_Main+1
  5056  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5057  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5058  0F9C  0866               	movf	??_setTemp_Main,w
  5059  0F9D  0021               	movlb	1	; select bank1
  5060  0F9E  00DD               	movwf	(_Temp^(0+128)+6)
  5061  0F9F  0020               	movlb	0	; select bank0
  5062  0FA0  0867               	movf	??_setTemp_Main+1,w
  5063  0FA1  0021               	movlb	1	; select bank1
  5064  0FA2  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5065                           
  5066                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5067  0FA3  3090               	movlw	144
  5068  0FA4  00E5               	movwf	(_Temp^(0+128)+14)
  5069  0FA5  3001               	movlw	1
  5070  0FA6  00E6               	movwf	(_Temp^(0+128)+15)
  5071                           
  5072                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5073  0FA7  3059               	movlw	89
  5074  0FA8  00E7               	movwf	(_Temp^(0+128)+16)
  5075  0FA9  3001               	movlw	1
  5076  0FAA  00E8               	movwf	(_Temp^(0+128)+17)
  5077                           
  5078                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5079  0FAB  1CD7               	btfss	_Temp^(0+128),1
  5080  0FAC  2FCD               	goto	l9506
  5081                           
  5082                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5083  0FAD  0866               	movf	((_Temp+1)^(0+128)+14),w
  5084  0FAE  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5085  0FAF  1D03               	skipz
  5086  0FB0  2FB3               	goto	u10405
  5087  0FB1  0865               	movf	(_Temp^(0+128)+14),w
  5088  0FB2  025D               	subwf	(_Temp^(0+128)+6),w
  5089  0FB3                     u10405:	
  5090  0FB3  1C03               	skipc
  5091  0FB4  2FCB               	goto	l9504
  5092                           
  5093                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5094  0FB5  3001               	movlw	1
  5095  0FB6  0020               	movlb	0	; select bank0
  5096  0FB7  00E6               	movwf	??_setTemp_Main
  5097  0FB8  0866               	movf	??_setTemp_Main,w
  5098  0FB9  0021               	movlb	1	; select bank1
  5099  0FBA  07DA               	addwf	(_Temp^(0+128)+3),f
  5100                           
  5101                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5102  0FBB  3003               	movlw	3
  5103  0FBC  025A               	subwf	(_Temp^(0+128)+3),w
  5104  0FBD  1C03               	skipc
  5105  0FBE  2FE3               	goto	l9518
  5106                           
  5107                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5108  0FBF  01DA               	clrf	(_Temp^(0+128)+3)
  5109                           
  5110                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5111  0FC0  10D7               	bcf	_Temp^(0+128),1
  5112                           
  5113                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5114  0FC1  3064               	movlw	100
  5115  0FC2  0020               	movlb	0	; select bank0
  5116  0FC3  00A9               	movwf	setBuz@time
  5117  0FC4  3000               	movlw	0
  5118  0FC5  00AA               	movwf	setBuz@time+1
  5119  0FC6  3002               	movlw	2
  5120  0FC7  3197  274E  318F   	fcall	_setBuz
  5121                           
  5122                           ;OverTemperature_B1.c: 103: }
  5123                           ;OverTemperature_B1.c: 104: } else {
  5124  0FCA  2FE3               	goto	l9518
  5125  0FCB                     l9504:	
  5126                           
  5127                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5128  0FCB  0021               	movlb	1	; select bank1
  5129  0FCC  2FE2               	goto	l9516
  5130  0FCD                     l9506:	
  5131                           ;OverTemperature_B1.c: 106: }
  5132                           ;OverTemperature_B1.c: 107: } else {
  5133                           
  5134                           
  5135                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5136  0FCD  085E               	movf	((_Temp+1)^(0+128)+6),w
  5137  0FCE  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5138  0FCF  1D03               	skipz
  5139  0FD0  2FD3               	goto	u10425
  5140  0FD1  085D               	movf	(_Temp^(0+128)+6),w
  5141  0FD2  0267               	subwf	(_Temp^(0+128)+16),w
  5142  0FD3                     u10425:	
  5143  0FD3  1C03               	skipc
  5144  0FD4  2FE2               	goto	l9516
  5145                           
  5146                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5147  0FD5  3001               	movlw	1
  5148  0FD6  0020               	movlb	0	; select bank0
  5149  0FD7  00E6               	movwf	??_setTemp_Main
  5150  0FD8  0866               	movf	??_setTemp_Main,w
  5151  0FD9  0021               	movlb	1	; select bank1
  5152  0FDA  07DA               	addwf	(_Temp^(0+128)+3),f
  5153                           
  5154                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5155  0FDB  3003               	movlw	3
  5156  0FDC  025A               	subwf	(_Temp^(0+128)+3),w
  5157  0FDD  1C03               	skipc
  5158  0FDE  2FE3               	goto	l9518
  5159                           
  5160                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5161  0FDF  01DA               	clrf	(_Temp^(0+128)+3)
  5162                           
  5163                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5164  0FE0  14D7               	bsf	_Temp^(0+128),1
  5165                           
  5166                           ;OverTemperature_B1.c: 113: }
  5167                           ;OverTemperature_B1.c: 114: } else {
  5168  0FE1  2FE3               	goto	l9518
  5169  0FE2                     l9516:	
  5170                           
  5171                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5172  0FE2  01DA               	clrf	(_Temp^(0+128)+3)
  5173  0FE3                     l9518:	
  5174                           
  5175                           ;OverTemperature_B1.c: 116: }
  5176                           ;OverTemperature_B1.c: 117: }
  5177                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5178  0FE3  0021               	movlb	1	; select bank1
  5179  0FE4  085E               	movf	((_Temp+1)^(0+128)+6),w
  5180  0FE5  0020               	movlb	0	; select bank0
  5181  0FE6  00E6               	movwf	??_setTemp_Main
  5182  0FE7  0866               	movf	??_setTemp_Main,w
  5183  0FE8  00E2               	movwf	setProductData@value
  5184  0FE9  3018               	movlw	24
  5185  0FEA  319D  2537  318F   	fcall	_setProductData
  5186                           
  5187                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5188  0FED  0021               	movlb	1	; select bank1
  5189  0FEE  085D               	movf	(_Temp^(0+128)+6),w
  5190  0FEF  0020               	movlb	0	; select bank0
  5191  0FF0  00E6               	movwf	??_setTemp_Main
  5192  0FF1  0866               	movf	??_setTemp_Main,w
  5193  0FF2  00E2               	movwf	setProductData@value
  5194  0FF3  3019               	movlw	25
  5195  0FF4  319D  2537         	fcall	_setProductData
  5196  0FF6                     l1728:	
  5197                           
  5198                           ;OverTemperature_B1.c: 135: }
  5199                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5200  0FF6  0021               	movlb	1	; select bank1
  5201  0FF7  01DF               	clrf	(_Temp^(0+128)+8)
  5202  0FF8  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5203                           
  5204                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5205  0FF9  01E1               	clrf	(_Temp^(0+128)+10)
  5206  0FFA  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5207                           
  5208                           ;OverTemperature_B1.c: 138: }
  5209                           ;OverTemperature_B1.c: 139: }
  5210                           ;OverTemperature_B1.c: 141: } else {
  5211  0FFB  0008               	return
  5212  0FFC                     l1723:	
  5213                           
  5214                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5215  0FFC  1C20               	btfss	_myMain^(0+128),0
  5216  0FFD  0008               	return
  5217                           
  5218                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5219  0FFE  1457               	bsf	_Temp^(0+128),0
  5220  0FFF  0008               	return
  5221  1000                     __end_of_setTemp_Main:	
  5222                           
  5223                           	psect	text10
  5224  1C00                     __ptext10:	
  5225 ;; *************** function _Temp_Initialization *****************
  5226 ;; Defined at:
  5227 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;		None
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;		None
  5232 ;; Return value:  Size  Location     Type
  5233 ;;		None               void
  5234 ;; Registers used:
  5235 ;;		status,2, status,0, pclath, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;Total ram usage:        0 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    6
  5248 ;; This function calls:
  5249 ;;		_setTemp_Initialization
  5250 ;; This function is called by:
  5251 ;;		_main
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           
  5256                           ;psect for function _Temp_Initialization
  5257  1C00                     _Temp_Initialization:	
  5258                           
  5259                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5260                           
  5261                           ;incstack = 0
  5262                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5263  1C00  3188  2000         	fcall	_setTemp_Initialization
  5264  1C02  0008               	return
  5265  1C03                     __end_of_Temp_Initialization:	
  5266                           
  5267                           	psect	text11
  5268  0800                     __ptext11:	
  5269 ;; *************** function _setTemp_Initialization *****************
  5270 ;; Defined at:
  5271 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;		None
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;		None
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		None
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:        0 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    5
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_Temp_Initialization
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _setTemp_Initialization
  5301  0800                     _setTemp_Initialization:	
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _setTemp_Initialization: []
  5305  0800  0008               	return
  5306  0801                     __end_of_setTemp_Initialization:	
  5307                           
  5308                           	psect	text12
  5309  1C3E                     __ptext12:	
  5310 ;; *************** function _Switch_Main *****************
  5311 ;; Defined at:
  5312 ;;		line 72 in file "../src/Switch_B1.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:   10
  5333 ;; This function calls:
  5334 ;;		_TouchPower
  5335 ;;		_setSw_Main
  5336 ;; This function is called by:
  5337 ;;		_main
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _Switch_Main
  5343  1C3E                     _Switch_Main:	
  5344                           
  5345                           ;Switch_B1.c: 75: setSw_Main(1);
  5346                           
  5347                           ;incstack = 0
  5348                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5349  1C3E  3001               	movlw	1
  5350  1C3F  3181  21ED  319C   	fcall	_setSw_Main
  5351                           
  5352                           ;Switch_B1.c: 87: TouchPower();
  5353  1C42  319E  2690         	fcall	_TouchPower
  5354  1C44  0008               	return
  5355  1C45                     __end_of_Switch_Main:	
  5356                           
  5357                           	psect	text13
  5358  01ED                     __ptext13:	
  5359 ;; *************** function _setSw_Main *****************
  5360 ;; Defined at:
  5361 ;;		line 121 in file "../src/Switch_B1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  sw              1    wreg     unsigned char 
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  sw              1   77[BANK0 ] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;		None               void
  5368 ;; Registers used:
  5369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : 0/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;Total ram usage:        3 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:    9
  5382 ;; This function calls:
  5383 ;;		_SwPointSelect
  5384 ;;		_getMain_All_Error_Status
  5385 ;;		_getSw_KeyStatus
  5386 ;;		_setBuz
  5387 ;;		_setDimmerLights_AdjOn
  5388 ;;		_setDimmerLights_SwOff
  5389 ;;		_setDimmerLights_SwOn
  5390 ;;		_setRF_Learn
  5391 ;; This function is called by:
  5392 ;;		_Switch_Main
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           
  5397                           ;psect for function _setSw_Main
  5398  01ED                     _setSw_Main:	
  5399                           
  5400                           ;incstack = 0
  5401                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5402                           ;setSw_Main@sw stored from wreg
  5403  01ED  0020               	movlb	0	; select bank0
  5404  01EE  00ED               	movwf	setSw_Main@sw
  5405                           
  5406                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5407  01EF  086D               	movf	setSw_Main@sw,w
  5408  01F0  319C  24D8  3181   	fcall	_SwPointSelect
  5409                           
  5410                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5411  01F3  0877               	movf	_Sw,w
  5412  01F4  0086               	movwf	6
  5413  01F5  3001               	movlw	1	; select bank2/3
  5414  01F6  0087               	movwf	7
  5415  01F7  1C01               	btfss	1,0
  5416  01F8  2B53               	goto	l2416
  5417                           
  5418                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5419  01F9  3000               	movlw	0
  5420  01FA  3192  225F  3181   	fcall	_getMain_All_Error_Status
  5421  01FD  3800               	iorlw	0
  5422  01FE  1D03               	skipz
  5423  01FF  2A1B               	goto	l9622
  5424                           
  5425                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5426  0200  0A77               	incf	_Sw,w
  5427  0201  0086               	movwf	6
  5428  0202  3001               	movlw	1	; select bank2/3
  5429  0203  0087               	movwf	7
  5430  0204  1081               	bcf	1,1
  5431                           
  5432                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5433  0205  0020               	movlb	0	; select bank0
  5434  0206  086D               	movf	setSw_Main@sw,w
  5435  0207  319D  25D3  3181   	fcall	_getSw_KeyStatus
  5436  020A  3A01               	xorlw	1
  5437  020B  3000               	movlw	0
  5438  020C  1903               	skipnz
  5439  020D  3001               	movlw	1
  5440  020E  0020               	movlb	0	; select bank0
  5441  020F  00EB               	movwf	??_setSw_Main
  5442  0210  0877               	movf	_Sw,w
  5443  0211  0086               	movwf	6
  5444  0212  3001               	movlw	1	; select bank2/3
  5445  0213  0087               	movwf	7
  5446  0214  0DEB               	rlf	??_setSw_Main,f
  5447  0215  0801               	movf	1,w
  5448  0216  066B               	xorwf	??_setSw_Main,w
  5449  0217  39FD               	andlw	-3
  5450  0218  066B               	xorwf	??_setSw_Main,w
  5451  0219  0081               	movwf	1
  5452                           
  5453                           ;Switch_B1.c: 128: } else {
  5454  021A  2A30               	goto	l2418
  5455  021B                     l9622:	
  5456                           
  5457                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5458  021B  0A77               	incf	_Sw,w
  5459  021C  0086               	movwf	6
  5460  021D  3001               	movlw	1	; select bank2/3
  5461  021E  0087               	movwf	7
  5462  021F  1881               	btfsc	1,1
  5463  0220  2A30               	goto	l2418
  5464                           
  5465                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5466  0221  0A77               	incf	_Sw,w
  5467  0222  0086               	movwf	6
  5468  0223  3001               	movlw	1	; select bank2/3
  5469  0224  0087               	movwf	7
  5470  0225  1481               	bsf	1,1
  5471                           
  5472                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5473  0226  0877               	movf	_Sw,w
  5474  0227  0086               	movwf	6
  5475  0228  3001               	movlw	1	; select bank2/3
  5476  0229  0087               	movwf	7
  5477  022A  1081               	bcf	1,1
  5478                           
  5479                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5480  022B  0877               	movf	_Sw,w
  5481  022C  0086               	movwf	6
  5482  022D  3001               	movlw	1	; select bank2/3
  5483  022E  0087               	movwf	7
  5484  022F  1501               	bsf	1,2
  5485  0230                     l2418:	
  5486                           
  5487                           ;Switch_B1.c: 134: }
  5488                           ;Switch_B1.c: 135: }
  5489                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5490  0230  0877               	movf	_Sw,w
  5491  0231  0086               	movwf	6
  5492  0232  3001               	movlw	1	; select bank2/3
  5493  0233  0087               	movwf	7
  5494  0234  1C81               	btfss	1,1
  5495  0235  2B00               	goto	l9672
  5496                           
  5497                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5498  0236  0877               	movf	_Sw,w
  5499  0237  0086               	movwf	6
  5500  0238  3001               	movlw	1	; select bank2/3
  5501  0239  0087               	movwf	7
  5502  023A  1901               	btfsc	1,2
  5503  023B  2A5E               	goto	l9638
  5504                           
  5505                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5506  023C  3001               	movlw	1
  5507  023D  0020               	movlb	0	; select bank0
  5508  023E  00EB               	movwf	??_setSw_Main
  5509  023F  0877               	movf	_Sw,w
  5510  0240  3E02               	addlw	2
  5511  0241  0086               	movwf	6
  5512  0242  3001               	movlw	1	; select bank2/3
  5513  0243  0087               	movwf	7
  5514  0244  086B               	movf	??_setSw_Main,w
  5515  0245  0781               	addwf	1,f
  5516                           
  5517                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5518  0246  0877               	movf	_Sw,w
  5519  0247  3E02               	addlw	2
  5520  0248  0086               	movwf	6
  5521  0249  3001               	movlw	1	; select bank2/3
  5522  024A  0087               	movwf	7
  5523  024B  3005               	movlw	5
  5524  024C  0201               	subwf	1,w
  5525  024D  1C03               	skipc
  5526  024E  0008               	return
  5527                           
  5528                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5529  024F  0877               	movf	_Sw,w
  5530  0250  3E02               	addlw	2
  5531  0251  0086               	movwf	6
  5532  0252  3001               	movlw	1	; select bank2/3
  5533  0253  0087               	movwf	7
  5534  0254  0181               	clrf	1
  5535                           
  5536                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5537  0255  0877               	movf	_Sw,w
  5538  0256  0086               	movwf	6
  5539  0257  3001               	movlw	1	; select bank2/3
  5540  0258  0087               	movwf	7
  5541  0259  1501               	bsf	1,2
  5542                           
  5543                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5544  025A  086D               	movf	setSw_Main@sw,w
  5545  025B  3193  23D6         	fcall	_setDimmerLights_SwOn
  5546                           
  5547                           ;Switch_B1.c: 148: }
  5548                           ;Switch_B1.c: 149: } else {
  5549  025D  0008               	return
  5550  025E                     l9638:	
  5551                           
  5552                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5553  025E  0877               	movf	_Sw,w
  5554  025F  0086               	movwf	6
  5555  0260  3001               	movlw	1	; select bank2/3
  5556  0261  0087               	movwf	7
  5557  0262  1981               	btfsc	1,3
  5558  0263  2A90               	goto	l9648
  5559                           
  5560                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5561  0264  0877               	movf	_Sw,w
  5562  0265  3E03               	addlw	3
  5563  0266  0086               	movwf	6
  5564  0267  3001               	movlw	1	; select bank2/3
  5565  0268  0087               	movwf	7
  5566  0269  3001               	movlw	1
  5567  026A  0781               	addwf	1,f
  5568  026B  3141               	addfsr 1,1
  5569  026C  1803               	skipnc
  5570  026D  0A81               	incf	1,f
  5571                           
  5572                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5573  026E  0877               	movf	_Sw,w
  5574  026F  3E03               	addlw	3
  5575  0270  0086               	movwf	6
  5576  0271  3001               	movlw	1	; select bank2/3
  5577  0272  0087               	movwf	7
  5578  0273  3F40               	moviw [0]fsr1
  5579  0274  0020               	movlb	0	; select bank0
  5580  0275  00EB               	movwf	??_setSw_Main
  5581  0276  3F41               	moviw [1]fsr1
  5582  0277  00EC               	movwf	??_setSw_Main+1
  5583  0278  3000               	movlw	0
  5584  0279  026C               	subwf	??_setSw_Main+1,w
  5585  027A  3096               	movlw	150
  5586  027B  1903               	skipnz
  5587  027C  026B               	subwf	??_setSw_Main,w
  5588  027D  1C03               	skipc
  5589  027E  0008               	return
  5590                           
  5591                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5592  027F  0877               	movf	_Sw,w
  5593  0280  3E03               	addlw	3
  5594  0281  0086               	movwf	6
  5595  0282  3001               	movlw	1	; select bank2/3
  5596  0283  0087               	movwf	7
  5597  0284  3000               	movlw	0
  5598  0285  3FC0               	movwi [0]fsr1
  5599  0286  3FC1               	movwi [1]fsr1
  5600                           
  5601                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5602  0287  0877               	movf	_Sw,w
  5603  0288  0086               	movwf	6
  5604  0289  3001               	movlw	1	; select bank2/3
  5605  028A  0087               	movwf	7
  5606  028B  1581               	bsf	1,3
  5607                           
  5608                           ;Switch_B1.c: 157: setDimmerLights_AdjOn(sw);
  5609  028C  086D               	movf	setSw_Main@sw,w
  5610  028D  3191  21A2         	fcall	_setDimmerLights_AdjOn
  5611                           
  5612                           ;Switch_B1.c: 160: }
  5613                           ;Switch_B1.c: 161: } else {
  5614  028F  0008               	return
  5615  0290                     l9648:	
  5616                           
  5617                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5618  0290  0877               	movf	_Sw,w
  5619  0291  0086               	movwf	6
  5620  0292  3001               	movlw	1	; select bank2/3
  5621  0293  0087               	movwf	7
  5622  0294  1A01               	btfsc	1,4
  5623  0295  2ACE               	goto	l9662
  5624                           
  5625                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5626  0296  0877               	movf	_Sw,w
  5627  0297  3E05               	addlw	5
  5628  0298  0086               	movwf	6
  5629  0299  3001               	movlw	1	; select bank2/3
  5630  029A  0087               	movwf	7
  5631  029B  3001               	movlw	1
  5632  029C  0781               	addwf	1,f
  5633  029D  3141               	addfsr 1,1
  5634  029E  1803               	skipnc
  5635  029F  0A81               	incf	1,f
  5636                           
  5637                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5638  02A0  0877               	movf	_Sw,w
  5639  02A1  3E05               	addlw	5
  5640  02A2  0086               	movwf	6
  5641  02A3  3001               	movlw	1	; select bank2/3
  5642  02A4  0087               	movwf	7
  5643  02A5  3F40               	moviw [0]fsr1
  5644  02A6  0020               	movlb	0	; select bank0
  5645  02A7  00EB               	movwf	??_setSw_Main
  5646  02A8  3F41               	moviw [1]fsr1
  5647  02A9  00EC               	movwf	??_setSw_Main+1
  5648  02AA  3000               	movlw	0
  5649  02AB  026C               	subwf	??_setSw_Main+1,w
  5650  02AC  3096               	movlw	150
  5651  02AD  1903               	skipnz
  5652  02AE  026B               	subwf	??_setSw_Main,w
  5653  02AF  1C03               	skipc
  5654  02B0  0008               	return
  5655                           
  5656                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5657  02B1  0877               	movf	_Sw,w
  5658  02B2  3E05               	addlw	5
  5659  02B3  0086               	movwf	6
  5660  02B4  3001               	movlw	1	; select bank2/3
  5661  02B5  0087               	movwf	7
  5662  02B6  3000               	movlw	0
  5663  02B7  3FC0               	movwi [0]fsr1
  5664  02B8  3FC1               	movwi [1]fsr1
  5665                           
  5666                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5667  02B9  0877               	movf	_Sw,w
  5668  02BA  0086               	movwf	6
  5669  02BB  3001               	movlw	1	; select bank2/3
  5670  02BC  0087               	movwf	7
  5671  02BD  1601               	bsf	1,4
  5672                           
  5673                           ;Switch_B1.c: 169: setRF_Learn(1);
  5674  02BE  3001               	movlw	1
  5675  02BF  319E  2652  3181   	fcall	_setRF_Learn
  5676                           
  5677                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5678  02C2  0021               	movlb	1	; select bank1
  5679  02C3  1EA0               	btfss	_myMain^(0+128),5
  5680  02C4  0008               	return
  5681                           
  5682                           ;Switch_B1.c: 172: setBuz(2, 100);
  5683  02C5  3064               	movlw	100
  5684  02C6  0020               	movlb	0	; select bank0
  5685  02C7  00A9               	movwf	setBuz@time
  5686  02C8  3000               	movlw	0
  5687  02C9  00AA               	movwf	setBuz@time+1
  5688  02CA  3002               	movlw	2
  5689  02CB  3197  274E         	fcall	_setBuz
  5690                           
  5691                           ;Switch_B1.c: 173: }
  5692                           ;Switch_B1.c: 175: }
  5693                           ;Switch_B1.c: 176: } else {
  5694  02CD  0008               	return
  5695  02CE                     l9662:	
  5696                           
  5697                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5698  02CE  0877               	movf	_Sw,w
  5699  02CF  0086               	movwf	6
  5700  02D0  3001               	movlw	1	; select bank2/3
  5701  02D1  0087               	movwf	7
  5702  02D2  1A81               	btfsc	1,5
  5703  02D3  0008               	return
  5704                           
  5705                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5706  02D4  0877               	movf	_Sw,w
  5707  02D5  3E07               	addlw	7
  5708  02D6  0086               	movwf	6
  5709  02D7  3001               	movlw	1	; select bank2/3
  5710  02D8  0087               	movwf	7
  5711  02D9  3001               	movlw	1
  5712  02DA  0781               	addwf	1,f
  5713  02DB  3141               	addfsr 1,1
  5714  02DC  1803               	skipnc
  5715  02DD  0A81               	incf	1,f
  5716                           
  5717                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5718  02DE  0877               	movf	_Sw,w
  5719  02DF  3E07               	addlw	7
  5720  02E0  0086               	movwf	6
  5721  02E1  3001               	movlw	1	; select bank2/3
  5722  02E2  0087               	movwf	7
  5723  02E3  3F40               	moviw [0]fsr1
  5724  02E4  0020               	movlb	0	; select bank0
  5725  02E5  00EB               	movwf	??_setSw_Main
  5726  02E6  3F41               	moviw [1]fsr1
  5727  02E7  00EC               	movwf	??_setSw_Main+1
  5728  02E8  3001               	movlw	1
  5729  02E9  026C               	subwf	??_setSw_Main+1,w
  5730  02EA  302C               	movlw	44
  5731  02EB  1903               	skipnz
  5732  02EC  026B               	subwf	??_setSw_Main,w
  5733  02ED  1C03               	skipc
  5734  02EE  0008               	return
  5735                           
  5736                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5737  02EF  0877               	movf	_Sw,w
  5738  02F0  3E07               	addlw	7
  5739  02F1  0086               	movwf	6
  5740  02F2  3001               	movlw	1	; select bank2/3
  5741  02F3  0087               	movwf	7
  5742  02F4  3000               	movlw	0
  5743  02F5  3FC0               	movwi [0]fsr1
  5744  02F6  3FC1               	movwi [1]fsr1
  5745                           
  5746                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5747  02F7  0877               	movf	_Sw,w
  5748  02F8  0086               	movwf	6
  5749  02F9  3001               	movlw	1	; select bank2/3
  5750  02FA  0087               	movwf	7
  5751  02FB  1681               	bsf	1,5
  5752                           
  5753                           ;Switch_B1.c: 184: setRF_Learn(0);
  5754  02FC  3000               	movlw	0
  5755  02FD  319E  2652         	fcall	_setRF_Learn
  5756                           
  5757                           ;Switch_B1.c: 187: }
  5758                           ;Switch_B1.c: 188: }
  5759                           ;Switch_B1.c: 189: }
  5760                           ;Switch_B1.c: 190: }
  5761                           ;Switch_B1.c: 191: }
  5762                           ;Switch_B1.c: 192: } else {
  5763  02FF  0008               	return
  5764  0300                     l9672:	
  5765                           
  5766                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5767  0300  0877               	movf	_Sw,w
  5768  0301  0086               	movwf	6
  5769  0302  3001               	movlw	1	; select bank2/3
  5770  0303  0087               	movwf	7
  5771  0304  1D01               	btfss	1,2
  5772  0305  0008               	return
  5773                           
  5774                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5775  0306  3001               	movlw	1
  5776  0307  0020               	movlb	0	; select bank0
  5777  0308  00EB               	movwf	??_setSw_Main
  5778  0309  0877               	movf	_Sw,w
  5779  030A  3E02               	addlw	2
  5780  030B  0086               	movwf	6
  5781  030C  3001               	movlw	1	; select bank2/3
  5782  030D  0087               	movwf	7
  5783  030E  086B               	movf	??_setSw_Main,w
  5784  030F  0781               	addwf	1,f
  5785                           
  5786                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5787  0310  0877               	movf	_Sw,w
  5788  0311  3E02               	addlw	2
  5789  0312  0086               	movwf	6
  5790  0313  3001               	movlw	1	; select bank2/3
  5791  0314  0087               	movwf	7
  5792  0315  3005               	movlw	5
  5793  0316  0201               	subwf	1,w
  5794  0317  1C03               	skipc
  5795  0318  0008               	return
  5796                           
  5797                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5798  0319  0877               	movf	_Sw,w
  5799  031A  3E02               	addlw	2
  5800  031B  0086               	movwf	6
  5801  031C  3001               	movlw	1	; select bank2/3
  5802  031D  0087               	movwf	7
  5803  031E  0181               	clrf	1
  5804                           
  5805                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5806  031F  0877               	movf	_Sw,w
  5807  0320  0086               	movwf	6
  5808  0321  3001               	movlw	1	; select bank2/3
  5809  0322  0087               	movwf	7
  5810  0323  1101               	bcf	1,2
  5811                           
  5812                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5813  0324  0877               	movf	_Sw,w
  5814  0325  3E03               	addlw	3
  5815  0326  0086               	movwf	6
  5816  0327  3001               	movlw	1	; select bank2/3
  5817  0328  0087               	movwf	7
  5818  0329  3000               	movlw	0
  5819  032A  3FC0               	movwi [0]fsr1
  5820  032B  3FC1               	movwi [1]fsr1
  5821                           
  5822                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5823  032C  0877               	movf	_Sw,w
  5824  032D  0086               	movwf	6
  5825  032E  3001               	movlw	1	; select bank2/3
  5826  032F  0087               	movwf	7
  5827  0330  1181               	bcf	1,3
  5828                           
  5829                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5830  0331  0877               	movf	_Sw,w
  5831  0332  3E05               	addlw	5
  5832  0333  0086               	movwf	6
  5833  0334  3001               	movlw	1	; select bank2/3
  5834  0335  0087               	movwf	7
  5835  0336  3000               	movlw	0
  5836  0337  3FC0               	movwi [0]fsr1
  5837  0338  3FC1               	movwi [1]fsr1
  5838                           
  5839                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5840  0339  0877               	movf	_Sw,w
  5841  033A  0086               	movwf	6
  5842  033B  3001               	movlw	1	; select bank2/3
  5843  033C  0087               	movwf	7
  5844  033D  1201               	bcf	1,4
  5845                           
  5846                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5847  033E  0877               	movf	_Sw,w
  5848  033F  3E07               	addlw	7
  5849  0340  0086               	movwf	6
  5850  0341  3001               	movlw	1	; select bank2/3
  5851  0342  0087               	movwf	7
  5852  0343  3000               	movlw	0
  5853  0344  3FC0               	movwi [0]fsr1
  5854  0345  3FC1               	movwi [1]fsr1
  5855                           
  5856                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5857  0346  0877               	movf	_Sw,w
  5858  0347  0086               	movwf	6
  5859  0348  3001               	movlw	1	; select bank2/3
  5860  0349  0087               	movwf	7
  5861  034A  1281               	bcf	1,5
  5862                           
  5863                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5864  034B  086D               	movf	setSw_Main@sw,w
  5865  034C  3195  255F  3181   	fcall	_setDimmerLights_SwOff
  5866                           
  5867                           ;Switch_B1.c: 209: setRF_Learn(0);
  5868  034F  3000               	movlw	0
  5869  0350  319E  2652         	fcall	_setRF_Learn
  5870                           
  5871                           ;Switch_B1.c: 211: }
  5872                           ;Switch_B1.c: 212: }
  5873                           ;Switch_B1.c: 213: }
  5874                           ;Switch_B1.c: 214: } else {
  5875  0352  0008               	return
  5876  0353                     l2416:	
  5877                           
  5878                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5879  0353  0021               	movlb	1	; select bank1
  5880  0354  1C20               	btfss	_myMain^(0+128),0
  5881  0355  0008               	return
  5882                           
  5883                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5884  0356  0877               	movf	_Sw,w
  5885  0357  0086               	movwf	6
  5886  0358  3001               	movlw	1	; select bank2/3
  5887  0359  0087               	movwf	7
  5888  035A  1401               	bsf	1,0
  5889  035B  0008               	return
  5890  035C                     __end_of_setSw_Main:	
  5891                           
  5892                           	psect	text14
  5893  1E52                     __ptext14:	
  5894 ;; *************** function _setRF_Learn *****************
  5895 ;; Defined at:
  5896 ;;		line 23 in file "../src/RF_Control_B1.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  command         1    wreg     unsigned char 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  command         1    1[BANK0 ] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;		None               void
  5903 ;; Registers used:
  5904 ;;		wreg, status,2, status,0
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;Total ram usage:        2 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    5
  5917 ;; This function calls:
  5918 ;;		Nothing
  5919 ;; This function is called by:
  5920 ;;		_setSw_Main
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function _setRF_Learn
  5926  1E52                     _setRF_Learn:	
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5930                           ;setRF_Learn@command stored from wreg
  5931  1E52  0020               	movlb	0	; select bank0
  5932  1E53  00A1               	movwf	setRF_Learn@command
  5933                           
  5934                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5935  1E54  0821               	movf	setRF_Learn@command,w
  5936  1E55  3A01               	xorlw	1
  5937  1E56  3000               	movlw	0
  5938  1E57  1903               	skipnz
  5939  1E58  3001               	movlw	1
  5940  1E59  00A0               	movwf	??_setRF_Learn
  5941  1E5A  0EA0               	swapf	??_setRF_Learn,f
  5942  1E5B  0DA0               	rlf	??_setRF_Learn,f
  5943  1E5C  0DA0               	rlf	??_setRF_Learn,f
  5944  1E5D  0021               	movlb	1	; select bank1
  5945  1E5E  083A               	movf	_RF1^(0+128),w
  5946  1E5F  0020               	movlb	0	; select bank0
  5947  1E60  0620               	xorwf	??_setRF_Learn,w
  5948  1E61  39BF               	andlw	-65
  5949  1E62  0620               	xorwf	??_setRF_Learn,w
  5950  1E63  0021               	movlb	1	; select bank1
  5951  1E64  00BA               	movwf	_RF1^(0+128)
  5952  1E65  0008               	return
  5953  1E66                     __end_of_setRF_Learn:	
  5954                           
  5955                           	psect	text15
  5956  11A2                     __ptext15:	
  5957 ;; *************** function _setDimmerLights_AdjOn *****************
  5958 ;; Defined at:
  5959 ;;		line 477 in file "../src/Dimmer_B1.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;  sw              1    wreg     unsigned char 
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;  sw              1    2[BANK0 ] unsigned char 
  5964 ;; Return value:  Size  Location     Type
  5965 ;;		None               void
  5966 ;; Registers used:
  5967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5968 ;; Tracked objects:
  5969 ;;		On entry : 0/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5977 ;;Total ram usage:        1 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    6
  5980 ;; This function calls:
  5981 ;;		_DimmerLightsPointSelect
  5982 ;; This function is called by:
  5983 ;;		_setSw_Main
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           
  5988                           ;psect for function _setDimmerLights_AdjOn
  5989  11A2                     _setDimmerLights_AdjOn:	
  5990                           
  5991                           ;incstack = 0
  5992                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5993                           ;setDimmerLights_AdjOn@sw stored from wreg
  5994  11A2  0020               	movlb	0	; select bank0
  5995  11A3  00A2               	movwf	setDimmerLights_AdjOn@sw
  5996                           
  5997                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  5998  11A4  0822               	movf	setDimmerLights_AdjOn@sw,w
  5999  11A5  319C  24AC  3191   	fcall	_DimmerLightsPointSelect
  6000                           
  6001                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0) {
  6002  11A8  0020               	movlb	0	; select bank0
  6003  11A9  086F               	movf	_DimmerLights,w
  6004  11AA  3E0A               	addlw	10
  6005  11AB  0086               	movwf	6
  6006  11AC  3001               	movlw	1	; select bank2/3
  6007  11AD  0087               	movwf	7
  6008  11AE  1881               	btfsc	1,1
  6009  11AF  0008               	return
  6010                           
  6011                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6012  11B0  086F               	movf	_DimmerLights,w
  6013  11B1  3E0B               	addlw	11
  6014  11B2  0086               	movwf	6
  6015  11B3  3001               	movlw	1	; select bank2/3
  6016  11B4  0087               	movwf	7
  6017  11B5  1C81               	btfss	1,1
  6018  11B6  0008               	return
  6019                           
  6020                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6021  11B7  086F               	movf	_DimmerLights,w
  6022  11B8  3E0B               	addlw	11
  6023  11B9  0086               	movwf	6
  6024  11BA  3001               	movlw	1	; select bank2/3
  6025  11BB  0087               	movwf	7
  6026  11BC  1501               	bsf	1,2
  6027                           
  6028                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6029  11BD  086F               	movf	_DimmerLights,w
  6030  11BE  3E02               	addlw	2
  6031  11BF  0086               	movwf	6
  6032  11C0  3001               	movlw	1	; select bank2/3
  6033  11C1  0087               	movwf	7
  6034  11C2  1481               	bsf	1,1
  6035                           
  6036                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6037  11C3  086F               	movf	_DimmerLights,w
  6038  11C4  3E0A               	addlw	10
  6039  11C5  0086               	movwf	6
  6040  11C6  3001               	movlw	1	; select bank2/3
  6041  11C7  0087               	movwf	7
  6042  11C8  1581               	bsf	1,3
  6043                           
  6044                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6045  11C9  086F               	movf	_DimmerLights,w
  6046  11CA  3E0A               	addlw	10
  6047  11CB  0086               	movwf	6
  6048  11CC  3001               	movlw	1	; select bank2/3
  6049  11CD  0087               	movwf	7
  6050  11CE  1501               	bsf	1,2
  6051  11CF  0008               	return
  6052  11D0                     __end_of_setDimmerLights_AdjOn:	
  6053                           
  6054                           	psect	text16
  6055  1DD3                     __ptext16:	
  6056 ;; *************** function _getSw_KeyStatus *****************
  6057 ;; Defined at:
  6058 ;;		line 222 in file "../src/Switch_B1.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  sw              1    wreg     unsigned char 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  sw              1    0[COMMON] unsigned char 
  6063 ;;  status          1    1[BANK0 ] unsigned char 
  6064 ;; Return value:  Size  Location     Type
  6065 ;;                  1    wreg      unsigned char 
  6066 ;; Registers used:
  6067 ;;		wreg, status,2
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/0
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;Total ram usage:        3 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:    5
  6080 ;; This function calls:
  6081 ;;		Nothing
  6082 ;; This function is called by:
  6083 ;;		_setSw_Main
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           
  6088                           ;psect for function _getSw_KeyStatus
  6089  1DD3                     _getSw_KeyStatus:	
  6090                           
  6091                           ;Switch_B1.c: 223: char status = 0;
  6092                           
  6093                           ;incstack = 0
  6094                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6095  1DD3  0020               	movlb	0	; select bank0
  6096  1DD4  01A1               	clrf	getSw_KeyStatus@status
  6097                           
  6098                           ;Switch_B1.c: 243: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6099  1DD5  01A2               	clrf	_getSw_KeyStatus$6012
  6100  1DD6  0AA2               	incf	_getSw_KeyStatus$6012,f
  6101  1DD7  1F0C               	btfss	12,6	;volatile
  6102  1DD8  1A0C               	btfsc	12,4	;volatile
  6103  1DD9  2DDE               	goto	l9152
  6104  1DDA  1C0C               	btfss	12,0	;volatile
  6105  1DDB  1B8C               	btfsc	12,7	;volatile
  6106  1DDC  2DDE               	goto	l9152
  6107  1DDD  01A2               	clrf	_getSw_KeyStatus$6012
  6108  1DDE                     l9152:	
  6109  1DDE  0822               	movf	_getSw_KeyStatus$6012,w
  6110  1DDF  00A0               	movwf	??_getSw_KeyStatus
  6111  1DE0  0820               	movf	??_getSw_KeyStatus,w
  6112  1DE1  00A1               	movwf	getSw_KeyStatus@status
  6113                           
  6114                           ;Switch_B1.c: 246: return status;
  6115  1DE2  0821               	movf	getSw_KeyStatus@status,w
  6116  1DE3  0008               	return
  6117  1DE4                     __end_of_getSw_KeyStatus:	
  6118                           
  6119                           	psect	text17
  6120  1CD8                     __ptext17:	
  6121 ;; *************** function _SwPointSelect *****************
  6122 ;; Defined at:
  6123 ;;		line 25 in file "../src/Switch_B1.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  sw              1    wreg     unsigned char 
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;  sw              1    1[BANK0 ] unsigned char 
  6128 ;; Return value:  Size  Location     Type
  6129 ;;		None               void
  6130 ;; Registers used:
  6131 ;;		wreg
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;Total ram usage:        2 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    5
  6144 ;; This function calls:
  6145 ;;		Nothing
  6146 ;; This function is called by:
  6147 ;;		_setSw_Main
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _SwPointSelect
  6153  1CD8                     _SwPointSelect:	
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _SwPointSelect: [wreg]
  6157                           ;SwPointSelect@sw stored from wreg
  6158  1CD8  0020               	movlb	0	; select bank0
  6159  1CD9  00A1               	movwf	SwPointSelect@sw
  6160                           
  6161                           ;Switch_B1.c: 28: if (sw == 1) {
  6162  1CDA  0821               	movf	SwPointSelect@sw,w
  6163  1CDB  3A01               	xorlw	1
  6164  1CDC  1D03               	skipz
  6165  1CDD  0008               	return
  6166                           
  6167                           ;Switch_B1.c: 29: Sw = &Sw1;
  6168  1CDE  30E3               	movlw	_Sw1& (0+255)
  6169  1CDF  00A0               	movwf	??_SwPointSelect
  6170  1CE0  0820               	movf	??_SwPointSelect,w
  6171  1CE1  00F7               	movwf	_Sw
  6172  1CE2  0008               	return
  6173  1CE3                     __end_of_SwPointSelect:	
  6174                           
  6175                           	psect	text18
  6176  1C6F                     __ptext18:	
  6177 ;; *************** function _Switch_Initialization *****************
  6178 ;; Defined at:
  6179 ;;		line 46 in file "../src/Switch_B1.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;		None
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;		None               void
  6186 ;; Registers used:
  6187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:        0 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    8
  6200 ;; This function calls:
  6201 ;;		_TouchPower
  6202 ;;		_setSw_Initialization
  6203 ;; This function is called by:
  6204 ;;		_main
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208                           
  6209                           ;psect for function _Switch_Initialization
  6210  1C6F                     _Switch_Initialization:	
  6211                           
  6212                           ;Switch_B1.c: 47: TouchPower();
  6213                           
  6214                           ;incstack = 0
  6215                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6216  1C6F  319E  2690  319C   	fcall	_TouchPower
  6217                           
  6218                           ;Switch_B1.c: 49: WPUB1 = 0;
  6219  1C72  0024               	movlb	4	; select bank4
  6220  1C73  108D               	bcf	13,1	;volatile
  6221                           
  6222                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6223  1C74  3001               	movlw	1
  6224  1C75  319D  2590         	fcall	_setSw_Initialization
  6225  1C77  0008               	return
  6226  1C78                     __end_of_Switch_Initialization:	
  6227                           
  6228                           	psect	text19
  6229  1D90                     __ptext19:	
  6230 ;; *************** function _setSw_Initialization *****************
  6231 ;; Defined at:
  6232 ;;		line 93 in file "../src/Switch_B1.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;  sw              1    wreg     unsigned char 
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  sw              1    4[BANK0 ] unsigned char 
  6237 ;; Return value:  Size  Location     Type
  6238 ;;		None               void
  6239 ;; Registers used:
  6240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;Total ram usage:        1 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    7
  6253 ;; This function calls:
  6254 ;;		_setLED
  6255 ;; This function is called by:
  6256 ;;		_Switch_Initialization
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           
  6261                           ;psect for function _setSw_Initialization
  6262  1D90                     _setSw_Initialization:	
  6263                           
  6264                           ;incstack = 0
  6265                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6266                           ;setSw_Initialization@sw stored from wreg
  6267  1D90  0020               	movlb	0	; select bank0
  6268  1D91  00A4               	movwf	setSw_Initialization@sw
  6269                           
  6270                           ;Switch_B1.c: 94: setLED(sw, 1);
  6271  1D92  01A2               	clrf	setLED@command
  6272  1D93  0AA2               	incf	setLED@command,f
  6273  1D94  0824               	movf	setSw_Initialization@sw,w
  6274  1D95  3193  239D  319D   	fcall	_setLED
  6275                           
  6276                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6277  1D98  0020               	movlb	0	; select bank0
  6278  1D99  01A2               	clrf	setLED@command
  6279  1D9A  0AA2               	incf	setLED@command,f
  6280  1D9B  0824               	movf	setSw_Initialization@sw,w
  6281  1D9C  3E01               	addlw	1
  6282  1D9D  3193  239D         	fcall	_setLED
  6283  1D9F  0008               	return
  6284  1DA0                     __end_of_setSw_Initialization:	
  6285                           
  6286                           	psect	text20
  6287  1E90                     __ptext20:	
  6288 ;; *************** function _TouchPower *****************
  6289 ;; Defined at:
  6290 ;;		line 10 in file "../src/Switch_B1.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;		None
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;		None
  6295 ;; Return value:  Size  Location     Type
  6296 ;;		None               void
  6297 ;; Registers used:
  6298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;Total ram usage:        0 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    6
  6311 ;; This function calls:
  6312 ;;		_Timeout_Counter
  6313 ;;		_set_TimeoutCleared
  6314 ;; This function is called by:
  6315 ;;		_Switch_Initialization
  6316 ;;		_Switch_Main
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           
  6321                           ;psect for function _TouchPower
  6322  1E90                     _TouchPower:	
  6323                           
  6324                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6325                           
  6326                           ;incstack = 0
  6327                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6328  1E90  0021               	movlb	1	; select bank1
  6329  1E91  1C20               	btfss	_myMain^(0+128),0
  6330  1E92  0008               	return
  6331                           
  6332                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6333  1E93  0020               	movlb	0	; select bank0
  6334  1E94  180D               	btfsc	13,0	;volatile
  6335  1E95  0008               	return
  6336  1E96  2E9C               	goto	l9604
  6337  1E97                     l2396:	
  6338                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6339                           
  6340                           
  6341                           ;Switch_B1.c: 14: RB0 = 1;
  6342  1E97  0020               	movlb	0	; select bank0
  6343  1E98  140D               	bsf	13,0	;volatile
  6344                           
  6345                           ;Switch_B1.c: 15: Timeout_Counter();
  6346  1E99  319E  2666  319E   	fcall	_Timeout_Counter
  6347  1E9C                     l9604:	
  6348  1E9C  0020               	movlb	0	; select bank0
  6349  1E9D  180D               	btfsc	13,0	;volatile
  6350  1E9E  2EA2               	goto	l9608
  6351  1E9F  0021               	movlb	1	; select bank1
  6352  1EA0  1D2B               	btfss	(_myMain^(0+128)+11),2
  6353  1EA1  2E97               	goto	l2396
  6354  1EA2                     l9608:	
  6355                           
  6356                           ;Switch_B1.c: 16: }
  6357                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6358  1EA2  319C  2426         	fcall	_set_TimeoutCleared
  6359  1EA4  0008               	return
  6360  1EA5                     __end_of_TouchPower:	
  6361                           
  6362                           	psect	text21
  6363  1BFD                     __ptext21:	
  6364 ;; *************** function _RF_Main *****************
  6365 ;; Defined at:
  6366 ;;		line 16 in file "../src/RF_Control_B1.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;		None               void
  6373 ;; Registers used:
  6374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;Total ram usage:        0 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:   14
  6387 ;; This function calls:
  6388 ;;		_setRF_Main
  6389 ;; This function is called by:
  6390 ;;		_main
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           
  6395                           ;psect for function _RF_Main
  6396  1BFD                     _RF_Main:	
  6397                           
  6398                           ;RF_Control_B1.c: 18: setRF_Main();
  6399                           
  6400                           ;incstack = 0
  6401                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6402  1BFD  318D  2503         	fcall	_setRF_Main
  6403  1BFF  0008               	return
  6404  1C00                     __end_of_RF_Main:	
  6405                           
  6406                           	psect	text22
  6407  0D03                     __ptext22:	
  6408 ;; *************** function _setRF_Main *****************
  6409 ;; Defined at:
  6410 ;;		line 53 in file "../src/RF_Control_B1.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  error           1    2[BANK2 ] unsigned char 
  6415 ;;  Receive_OK      1    1[BANK2 ] unsigned char 
  6416 ;;  loop_f          1    0[BANK2 ] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;		None               void
  6419 ;; Registers used:
  6420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;Total ram usage:        3 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:   13
  6433 ;; This function calls:
  6434 ;;		_CC2500_RxData
  6435 ;;		_CC2500_TxData
  6436 ;;		_CC2500_WriteCommand
  6437 ;;		_RF_RxDisable
  6438 ;;		_getBuz_GO
  6439 ;;		_getMain_All_Error_Status
  6440 ;;		_getRF_KeyStatus
  6441 ;;		_getRxData
  6442 ;; This function is called by:
  6443 ;;		_RF_Main
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           
  6448                           ;psect for function _setRF_Main
  6449  0D03                     _setRF_Main:	
  6450                           
  6451                           ;RF_Control_B1.c: 54: char loop_f = 0, Receive_OK = 0, error = 0;
  6452                           
  6453                           ;incstack = 0
  6454                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6455  0D03  0022               	movlb	2	; select bank2
  6456  0D04  01ED               	clrf	setRF_Main@loop_f^(0+256)
  6457  0D05  01EE               	clrf	setRF_Main@Receive_OK^(0+256)
  6458  0D06  01EF               	clrf	setRF_Main@error^(0+256)
  6459                           
  6460                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6461  0D07  0021               	movlb	1	; select bank1
  6462  0D08  1C3A               	btfss	_RF1^(0+128),0
  6463  0D09  2D85               	goto	l2041
  6464                           
  6465                           ;RF_Control_B1.c: 68: if (getBuz_GO() == 0) {
  6466  0D0A  319D  25B1  318D   	fcall	_getBuz_GO
  6467  0D0D  0020               	movlb	0	; select bank0
  6468  0D0E  0821               	movf	?_getBuz_GO+1,w
  6469  0D0F  0420               	iorwf	?_getBuz_GO,w
  6470  0D10  1D03               	skipz
  6471  0D11  0008               	return
  6472                           
  6473                           ;RF_Control_B1.c: 69: if (getMain_All_Error_Status(0) == 0) {
  6474  0D12  3000               	movlw	0
  6475  0D13  3192  225F  318D   	fcall	_getMain_All_Error_Status
  6476  0D16  3800               	iorlw	0
  6477  0D17  1D03               	skipz
  6478  0D18  2D29               	goto	l9544
  6479                           
  6480                           ;RF_Control_B1.c: 71: if (getRF_KeyStatus() == 1 && RF1.Learn == 0) {
  6481  0D19  319D  25C2  318D   	fcall	_getRF_KeyStatus
  6482  0D1C  3A01               	xorlw	1
  6483  0D1D  1D03               	skipz
  6484  0D1E  2D29               	goto	l9544
  6485  0D1F  0021               	movlb	1	; select bank1
  6486  0D20  1B3A               	btfsc	_RF1^(0+128),6
  6487  0D21  2D29               	goto	l9544
  6488                           
  6489                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  6490  0D22  01BC               	clrf	(_RF1^(0+128)+2)
  6491  0D23  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6492                           
  6493                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  6494  0D24  14BB               	bsf	(_RF1^(0+128)+1),1
  6495                           
  6496                           ;RF_Control_B1.c: 74: RF1.RunTime = 5;
  6497  0D25  3005               	movlw	5
  6498  0D26  00C1               	movwf	(_RF1^(0+128)+7)
  6499  0D27  3000               	movlw	0
  6500  0D28  00C2               	movwf	(_RF1^(0+128)+8)
  6501  0D29                     l9544:	
  6502                           
  6503                           ;RF_Control_B1.c: 75: }
  6504                           ;RF_Control_B1.c: 85: }
  6505                           ;RF_Control_B1.c: 87: if (RF1.Learn == 0) {
  6506  0D29  0021               	movlb	1	; select bank1
  6507  0D2A  1B3A               	btfsc	_RF1^(0+128),6
  6508  0D2B  2D42               	goto	l2045
  6509                           
  6510                           ;RF_Control_B1.c: 88: if (RF1.Run == 1) {
  6511  0D2C  1CBB               	btfss	(_RF1^(0+128)+1),1
  6512  0D2D  2D53               	goto	l9566
  6513                           
  6514                           ;RF_Control_B1.c: 89: RF1.Count++;
  6515  0D2E  3001               	movlw	1
  6516  0D2F  07BC               	addwf	(_RF1^(0+128)+2),f
  6517  0D30  3000               	movlw	0
  6518  0D31  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6519                           
  6520                           ;RF_Control_B1.c: 90: if (RF1.Count == RF1.RunTime) {
  6521  0D32  3002               	movlw	2
  6522  0D33  3EBA               	addlw	_RF1& (0+255)
  6523  0D34  0086               	movwf	6
  6524  0D35  0187               	clrf	7
  6525  0D36  3F40               	moviw [0]fsr1
  6526  0D37  0641               	xorwf	(_RF1^(0+128)+7),w
  6527  0D38  1D03               	skipz
  6528  0D39  2D3C               	goto	u10525
  6529  0D3A  3F41               	moviw [1]fsr1
  6530  0D3B  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6531  0D3C                     u10525:	
  6532  0D3C  1D03               	skipz
  6533  0D3D  2D53               	goto	l9566
  6534                           
  6535                           ;RF_Control_B1.c: 91: RF1.Count = 0;
  6536  0D3E  01BC               	clrf	(_RF1^(0+128)+2)
  6537  0D3F  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6538                           
  6539                           ;RF_Control_B1.c: 92: RF1.Run = 0;
  6540  0D40  10BB               	bcf	(_RF1^(0+128)+1),1
  6541                           
  6542                           ;RF_Control_B1.c: 93: }
  6543                           ;RF_Control_B1.c: 94: }
  6544                           ;RF_Control_B1.c: 95: } else {
  6545  0D41  2D53               	goto	l9566
  6546  0D42                     l2045:	
  6547                           
  6548                           ;RF_Control_B1.c: 96: if (RF1.TransceiveGO == 1) {
  6549  0D42  1D3A               	btfss	_RF1^(0+128),2
  6550  0D43  2D4D               	goto	l9560
  6551                           
  6552                           ;RF_Control_B1.c: 97: RF1.TransceiveGO = 0;
  6553  0D44  113A               	bcf	_RF1^(0+128),2
  6554                           
  6555                           ;RF_Control_B1.c: 98: CC2500_WriteCommand(0x36);
  6556  0D45  3036               	movlw	54
  6557  0D46  319E  26BE  318D   	fcall	_CC2500_WriteCommand
  6558                           
  6559                           ;RF_Control_B1.c: 99: CC2500_WriteCommand(0x3B);
  6560  0D49  303B               	movlw	59
  6561  0D4A  319E  26BE  318D   	fcall	_CC2500_WriteCommand
  6562  0D4D                     l9560:	
  6563                           
  6564                           ;RF_Control_B1.c: 100: }
  6565                           ;RF_Control_B1.c: 101: if (RF1.Run == 1) {
  6566  0D4D  0021               	movlb	1	; select bank1
  6567  0D4E  1CBB               	btfss	(_RF1^(0+128)+1),1
  6568  0D4F  2D53               	goto	l9566
  6569                           
  6570                           ;RF_Control_B1.c: 102: RF1.Run = 0;
  6571  0D50  10BB               	bcf	(_RF1^(0+128)+1),1
  6572                           
  6573                           ;RF_Control_B1.c: 103: RF1.Count = 0;
  6574  0D51  01BC               	clrf	(_RF1^(0+128)+2)
  6575  0D52  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6576  0D53                     l9566:	
  6577                           
  6578                           ;RF_Control_B1.c: 104: }
  6579                           ;RF_Control_B1.c: 105: }
  6580                           ;RF_Control_B1.c: 107: if (RF1.Run == 0) {
  6581  0D53  18BB               	btfsc	(_RF1^(0+128)+1),1
  6582  0D54  0008               	return
  6583                           
  6584                           ;RF_Control_B1.c: 108: if (RF1.TransceiveGO == 1) {
  6585  0D55  1D3A               	btfss	_RF1^(0+128),2
  6586  0D56  2D63               	goto	l2052
  6587                           
  6588                           ;RF_Control_B1.c: 109: RF1.TransceiveGO = 0;
  6589  0D57  113A               	bcf	_RF1^(0+128),2
  6590                           
  6591                           ;RF_Control_B1.c: 110: RF1.Run = 1;
  6592  0D58  14BB               	bsf	(_RF1^(0+128)+1),1
  6593                           
  6594                           ;RF_Control_B1.c: 111: RF1.RunTime = 5;
  6595  0D59  3005               	movlw	5
  6596  0D5A  00C1               	movwf	(_RF1^(0+128)+7)
  6597  0D5B  3000               	movlw	0
  6598  0D5C  00C2               	movwf	(_RF1^(0+128)+8)
  6599                           
  6600                           ;RF_Control_B1.c: 112: RF_RxDisable();
  6601  0D5D  319D  2562  318D   	fcall	_RF_RxDisable
  6602                           
  6603                           ;RF_Control_B1.c: 113: CC2500_TxData();
  6604  0D60  318A  22B7         	fcall	_CC2500_TxData
  6605                           
  6606                           ;RF_Control_B1.c: 115: } else {
  6607  0D62  0008               	return
  6608  0D63                     l2052:	
  6609                           
  6610                           ;RF_Control_B1.c: 116: if (RF1.RxStatus == 1) {
  6611  0D63  1DBA               	btfss	_RF1^(0+128),3
  6612  0D64  2D78               	goto	l2054
  6613                           
  6614                           ;RF_Control_B1.c: 117: if (RF1.Key == 0 || RF1.Learn == 1) {
  6615  0D65  1FBA               	btfss	_RF1^(0+128),7
  6616  0D66  2D69               	goto	l9582
  6617  0D67  1F3A               	btfss	_RF1^(0+128),6
  6618  0D68  0008               	return
  6619  0D69                     l9582:	
  6620                           
  6621                           ;RF_Control_B1.c: 119: CC2500_RxData();
  6622  0D69  318B  2390  318D   	fcall	_CC2500_RxData
  6623                           
  6624                           ;RF_Control_B1.c: 122: if (RF1.ReceiveGO == 1) {
  6625  0D6C  0021               	movlb	1	; select bank1
  6626  0D6D  1CBA               	btfss	_RF1^(0+128),1
  6627  0D6E  0008               	return
  6628                           
  6629                           ;RF_Control_B1.c: 123: RF1.ReceiveGO = 0;
  6630  0D6F  10BA               	bcf	_RF1^(0+128),1
  6631                           
  6632                           ;RF_Control_B1.c: 124: RF1.Run = 1;
  6633  0D70  14BB               	bsf	(_RF1^(0+128)+1),1
  6634                           
  6635                           ;RF_Control_B1.c: 125: RF1.RunTime = 5;
  6636  0D71  3005               	movlw	5
  6637  0D72  00C1               	movwf	(_RF1^(0+128)+7)
  6638  0D73  3000               	movlw	0
  6639  0D74  00C2               	movwf	(_RF1^(0+128)+8)
  6640                           
  6641                           ;RF_Control_B1.c: 133: getRxData();
  6642  0D75  318C  2408         	fcall	_getRxData
  6643                           
  6644                           ;RF_Control_B1.c: 136: }
  6645                           ;RF_Control_B1.c: 137: }
  6646                           ;RF_Control_B1.c: 138: } else {
  6647  0D77  0008               	return
  6648  0D78                     l2054:	
  6649                           
  6650                           ;RF_Control_B1.c: 140: RF1.RxStatus = 1;
  6651  0D78  15BA               	bsf	_RF1^(0+128),3
  6652                           
  6653                           ;RF_Control_B1.c: 141: CC2500_WriteCommand(0x36);
  6654  0D79  3036               	movlw	54
  6655  0D7A  319E  26BE  318D   	fcall	_CC2500_WriteCommand
  6656                           
  6657                           ;RF_Control_B1.c: 142: CC2500_WriteCommand(0x3A);
  6658  0D7D  303A               	movlw	58
  6659  0D7E  319E  26BE  318D   	fcall	_CC2500_WriteCommand
  6660                           
  6661                           ;RF_Control_B1.c: 143: CC2500_WriteCommand(0x34);
  6662  0D81  3034               	movlw	52
  6663  0D82  319E  26BE         	fcall	_CC2500_WriteCommand
  6664                           
  6665                           ;RF_Control_B1.c: 145: }
  6666                           ;RF_Control_B1.c: 146: }
  6667                           ;RF_Control_B1.c: 147: }
  6668                           ;RF_Control_B1.c: 148: }
  6669                           ;RF_Control_B1.c: 149: } else {
  6670  0D84  0008               	return
  6671  0D85                     l2041:	
  6672                           
  6673                           ;RF_Control_B1.c: 150: if (myMain.PowerON == 1) {
  6674  0D85  1C20               	btfss	_myMain^(0+128),0
  6675  0D86  0008               	return
  6676                           
  6677                           ;RF_Control_B1.c: 151: RF1.Enable = 1;
  6678  0D87  143A               	bsf	_RF1^(0+128),0
  6679  0D88  0008               	return
  6680  0D89                     __end_of_setRF_Main:	
  6681                           
  6682                           	psect	text23
  6683  0C08                     __ptext23:	
  6684 ;; *************** function _getRxData *****************
  6685 ;; Defined at:
  6686 ;;		line 242 in file "../src/RF_Control_B1.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  error           1    4[BANK1 ] unsigned char 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;		None               void
  6693 ;; Registers used:
  6694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;Total ram usage:        2 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:   12
  6707 ;; This function calls:
  6708 ;;		_getMain_All_Error_Status
  6709 ;;		_setControl_Lights_Table
  6710 ;;		_setLog_Code
  6711 ;;		_setTxData
  6712 ;; This function is called by:
  6713 ;;		_setRF_Main
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           
  6718                           ;psect for function _getRxData
  6719  0C08                     _getRxData:	
  6720                           
  6721                           ;RF_Control_B1.c: 243: char error = getMain_All_Error_Status(0);
  6722                           
  6723                           ;incstack = 0
  6724                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6725  0C08  3000               	movlw	0
  6726  0C09  3192  225F  318C   	fcall	_getMain_All_Error_Status
  6727  0C0C  0020               	movlb	0	; select bank0
  6728  0C0D  00EE               	movwf	??_getRxData
  6729  0C0E  086E               	movf	??_getRxData,w
  6730  0C0F  0021               	movlb	1	; select bank1
  6731  0C10  00ED               	movwf	getRxData@error^(0+128)
  6732                           
  6733                           ;RF_Control_B1.c: 244: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6734  0C11  0023               	movlb	3	; select bank3
  6735  0C12  0820               	movf	_RF_Data^(0+384),w
  6736  0C13  3AAA               	xorlw	170
  6737  0C14  1D03               	skipz
  6738  0C15  2C27               	goto	l9092
  6739  0C16  0821               	movf	(_RF_Data^(0+384)+1),w
  6740  0C17  3A01               	xorlw	1
  6741  0C18  1D03               	skipz
  6742  0C19  2C27               	goto	l9092
  6743                           
  6744                           ;RF_Control_B1.c: 246: product->Data[2] = 0x55;
  6745  0C1A  3055               	movlw	85
  6746  0C1B  0020               	movlb	0	; select bank0
  6747  0C1C  00EE               	movwf	??_getRxData
  6748  0C1D  0879               	movf	_product,w
  6749  0C1E  3E02               	addlw	2
  6750  0C1F  0086               	movwf	6
  6751  0C20  3002               	movlw	2	; select bank4/5
  6752  0C21  0087               	movwf	7
  6753  0C22  086E               	movf	??_getRxData,w
  6754  0C23  0081               	movwf	1
  6755                           
  6756                           ;RF_Control_B1.c: 247: setTxData();
  6757  0C24  318E  2610         	fcall	_setTxData
  6758                           
  6759                           ;RF_Control_B1.c: 253: } else {
  6760  0C26  0008               	return
  6761  0C27                     l9092:	
  6762                           
  6763                           ;RF_Control_B1.c: 255: if (error == 0) {
  6764  0C27  0021               	movlb	1	; select bank1
  6765  0C28  08ED               	movf	getRxData@error^(0+128),f
  6766  0C29  1D03               	skipz
  6767  0C2A  0008               	return
  6768                           
  6769                           ;RF_Control_B1.c: 256: if (RF1.Learn == 1) {
  6770  0C2B  1F3A               	btfss	_RF1^(0+128),6
  6771  0C2C  2C38               	goto	l9102
  6772                           
  6773                           ;RF_Control_B1.c: 257: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6774  0C2D  0023               	movlb	3	; select bank3
  6775  0C2E  08A0               	movf	_RF_Data^(0+384),f
  6776  0C2F  1D03               	skipz
  6777  0C30  0008               	return
  6778  0C31  0821               	movf	(_RF_Data^(0+384)+1),w
  6779  0C32  3A64               	xorlw	100
  6780  0C33  1D03               	skipz
  6781  0C34  0008               	return
  6782                           
  6783                           ;RF_Control_B1.c: 258: setLog_Code();
  6784  0C35  3192  22C6         	fcall	_setLog_Code
  6785                           
  6786                           ;RF_Control_B1.c: 259: }
  6787                           ;RF_Control_B1.c: 260: } else {
  6788  0C37  0008               	return
  6789  0C38                     l9102:	
  6790                           
  6791                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6792  0C38  0023               	movlb	3	; select bank3
  6793  0C39  08A0               	movf	_RF_Data^(0+384),f
  6794  0C3A  1D03               	skipz
  6795  0C3B  2C6D               	goto	l9122
  6796  0C3C  0821               	movf	(_RF_Data^(0+384)+1),w
  6797  0C3D  3A02               	xorlw	2
  6798  0C3E  1D03               	skipz
  6799  0C3F  2C6D               	goto	l9122
  6800                           
  6801                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6802  0C40  082C               	movf	(_RF_Data^(0+384)+12),w
  6803  0C41  3AFF               	xorlw	255
  6804  0C42  1D03               	skipz
  6805  0C43  2C4E               	goto	l9114
  6806  0C44  082D               	movf	(_RF_Data^(0+384)+13),w
  6807  0C45  3AFF               	xorlw	255
  6808  0C46  1D03               	skipz
  6809  0C47  2C4E               	goto	l9114
  6810  0C48  082E               	movf	(_RF_Data^(0+384)+14),w
  6811  0C49  3AFF               	xorlw	255
  6812  0C4A  1D03               	skipz
  6813  0C4B  2C4E               	goto	l9114
  6814                           
  6815                           ;RF_Control_B1.c: 264: __nop();
  6816  0C4C  0000               	nop
  6817                           
  6818                           ;RF_Control_B1.c: 265: } else {
  6819  0C4D  0008               	return
  6820  0C4E                     l9114:	
  6821                           
  6822                           ;RF_Control_B1.c: 266: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6823  0C4E  0879               	movf	_product,w
  6824  0C4F  3E0C               	addlw	12
  6825  0C50  0086               	movwf	6
  6826  0C51  3002               	movlw	2	; select bank4/5
  6827  0C52  0087               	movwf	7
  6828  0C53  0023               	movlb	3	; select bank3
  6829  0C54  082C               	movf	(_RF_Data^(0+384)+12),w
  6830  0C55  0601               	xorwf	1,w
  6831  0C56  1D03               	skipz
  6832  0C57  0008               	return
  6833  0C58  0879               	movf	_product,w
  6834  0C59  3E0D               	addlw	13
  6835  0C5A  0086               	movwf	6
  6836  0C5B  3002               	movlw	2	; select bank4/5
  6837  0C5C  0087               	movwf	7
  6838  0C5D  082D               	movf	(_RF_Data^(0+384)+13),w
  6839  0C5E  0601               	xorwf	1,w
  6840  0C5F  1D03               	skipz
  6841  0C60  0008               	return
  6842  0C61  0879               	movf	_product,w
  6843  0C62  3E0E               	addlw	14
  6844  0C63  0086               	movwf	6
  6845  0C64  3002               	movlw	2	; select bank4/5
  6846  0C65  0087               	movwf	7
  6847  0C66  082E               	movf	(_RF_Data^(0+384)+14),w
  6848  0C67  0601               	xorwf	1,w
  6849  0C68  1D03               	skipz
  6850  0C69  0008               	return
  6851                           
  6852                           ;RF_Control_B1.c: 267: setControl_Lights_Table();
  6853  0C6A  3189  212D         	fcall	_setControl_Lights_Table
  6854                           
  6855                           ;RF_Control_B1.c: 268: }
  6856                           ;RF_Control_B1.c: 269: }
  6857                           ;RF_Control_B1.c: 270: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6858  0C6C  0008               	return
  6859  0C6D                     l9122:	
  6860  0C6D  0023               	movlb	3	; select bank3
  6861  0C6E  0820               	movf	_RF_Data^(0+384),w
  6862  0C6F  3AFF               	xorlw	255
  6863  0C70  1D03               	skipz
  6864  0C71  2C78               	goto	l9128
  6865  0C72  0821               	movf	(_RF_Data^(0+384)+1),w
  6866  0C73  3A02               	xorlw	2
  6867  0C74  1D03               	skipz
  6868  0C75  2C78               	goto	l9128
  6869                           
  6870                           ;RF_Control_B1.c: 271: __nop();
  6871  0C76  0000               	nop
  6872                           
  6873                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6874  0C77  0008               	return
  6875  0C78                     l9128:	
  6876  0C78  0023               	movlb	3	; select bank3
  6877  0C79  08A0               	movf	_RF_Data^(0+384),f
  6878  0C7A  1D03               	skipz
  6879  0C7B  0008               	return
  6880  0C7C  0821               	movf	(_RF_Data^(0+384)+1),w
  6881  0C7D  3A65               	xorlw	101
  6882  0C7E  1D03               	skipz
  6883  0C7F  0008               	return
  6884                           
  6885                           ;RF_Control_B1.c: 273: __nop();
  6886  0C80  0000               	nop
  6887                           
  6888                           ;RF_Control_B1.c: 280: ;
  6889                           
  6890                           ;RF_Control_B1.c: 274: }
  6891                           ;RF_Control_B1.c: 278: }
  6892                           ;RF_Control_B1.c: 279: } else {
  6893  0C81  0008               	return
  6894  0C82                     __end_of_getRxData:	
  6895                           
  6896                           	psect	text24
  6897  12C6                     __ptext24:	
  6898 ;; *************** function _setLog_Code *****************
  6899 ;; Defined at:
  6900 ;;		line 286 in file "../src/RF_Control_B1.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;		None
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;		None
  6905 ;; Return value:  Size  Location     Type
  6906 ;;		None               void
  6907 ;; Registers used:
  6908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6909 ;; Tracked objects:
  6910 ;;		On entry : 0/0
  6911 ;;		On exit  : 0/0
  6912 ;;		Unchanged: 0/0
  6913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6916 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6918 ;;Total ram usage:        1 bytes
  6919 ;; Hardware stack levels used:    1
  6920 ;; Hardware stack levels required when called:    7
  6921 ;; This function calls:
  6922 ;;		_setBuz
  6923 ;;		_setMemory_LoopSave
  6924 ;;		_setMemory_Modify
  6925 ;;		_setProductData
  6926 ;; This function is called by:
  6927 ;;		_getRxData
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           
  6932                           ;psect for function _setLog_Code
  6933  12C6                     _setLog_Code:	
  6934                           
  6935                           ;RF_Control_B1.c: 287: RF1.Learn = 0;
  6936                           
  6937                           ;incstack = 0
  6938                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6939  12C6  0021               	movlb	1	; select bank1
  6940  12C7  133A               	bcf	_RF1^(0+128),6
  6941                           
  6942                           ;RF_Control_B1.c: 288: setProductData(12, RF_Data[12]);
  6943  12C8  0023               	movlb	3	; select bank3
  6944  12C9  082C               	movf	(_RF_Data^(0+384)+12),w
  6945  12CA  0020               	movlb	0	; select bank0
  6946  12CB  00E6               	movwf	??_setLog_Code
  6947  12CC  0866               	movf	??_setLog_Code,w
  6948  12CD  00E2               	movwf	setProductData@value
  6949  12CE  300C               	movlw	12
  6950  12CF  319D  2537  3192   	fcall	_setProductData
  6951                           
  6952                           ;RF_Control_B1.c: 289: setProductData(13, RF_Data[13]);
  6953  12D2  0023               	movlb	3	; select bank3
  6954  12D3  082D               	movf	(_RF_Data^(0+384)+13),w
  6955  12D4  0020               	movlb	0	; select bank0
  6956  12D5  00E6               	movwf	??_setLog_Code
  6957  12D6  0866               	movf	??_setLog_Code,w
  6958  12D7  00E2               	movwf	setProductData@value
  6959  12D8  300D               	movlw	13
  6960  12D9  319D  2537  3192   	fcall	_setProductData
  6961                           
  6962                           ;RF_Control_B1.c: 290: setProductData(14, RF_Data[14]);
  6963  12DC  0023               	movlb	3	; select bank3
  6964  12DD  082E               	movf	(_RF_Data^(0+384)+14),w
  6965  12DE  0020               	movlb	0	; select bank0
  6966  12DF  00E6               	movwf	??_setLog_Code
  6967  12E0  0866               	movf	??_setLog_Code,w
  6968  12E1  00E2               	movwf	setProductData@value
  6969  12E2  300E               	movlw	14
  6970  12E3  319D  2537  3192   	fcall	_setProductData
  6971                           
  6972                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  6973  12E6  3064               	movlw	100
  6974  12E7  0020               	movlb	0	; select bank0
  6975  12E8  00A9               	movwf	setBuz@time
  6976  12E9  3000               	movlw	0
  6977  12EA  00AA               	movwf	setBuz@time+1
  6978  12EB  3001               	movlw	1
  6979  12EC  3197  274E  3192   	fcall	_setBuz
  6980                           
  6981                           ;RF_Control_B1.c: 292: if (myMain.First == 1) {
  6982  12EF  0021               	movlb	1	; select bank1
  6983  12F0  1EA0               	btfss	_myMain^(0+128),5
  6984  12F1  2AF6               	goto	l2102
  6985                           
  6986                           ;RF_Control_B1.c: 293: setMemory_LoopSave(1);
  6987  12F2  3001               	movlw	1
  6988  12F3  319E  263F  3192   	fcall	_setMemory_LoopSave
  6989  12F6                     l2102:	
  6990                           
  6991                           ;RF_Control_B1.c: 294: }
  6992                           ;RF_Control_B1.c: 295: setMemory_Modify(1);
  6993  12F6  3001               	movlw	1
  6994  12F7  319E  262C         	fcall	_setMemory_Modify
  6995  12F9  0008               	return
  6996  12FA                     __end_of_setLog_Code:	
  6997                           
  6998                           	psect	text25
  6999  1E3F                     __ptext25:	
  7000 ;; *************** function _setMemory_LoopSave *****************
  7001 ;; Defined at:
  7002 ;;		line 1073 in file "../src/MCU_B1.c"
  7003 ;; Parameters:    Size  Location     Type
  7004 ;;  command         1    wreg     unsigned char 
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;  command         1    1[BANK0 ] unsigned char 
  7007 ;; Return value:  Size  Location     Type
  7008 ;;		None               void
  7009 ;; Registers used:
  7010 ;;		wreg, status,2, status,0
  7011 ;; Tracked objects:
  7012 ;;		On entry : 0/0
  7013 ;;		On exit  : 0/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7020 ;;Total ram usage:        2 bytes
  7021 ;; Hardware stack levels used:    1
  7022 ;; Hardware stack levels required when called:    5
  7023 ;; This function calls:
  7024 ;;		Nothing
  7025 ;; This function is called by:
  7026 ;;		_setLog_Code
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           
  7031                           ;psect for function _setMemory_LoopSave
  7032  1E3F                     _setMemory_LoopSave:	
  7033                           
  7034                           ;incstack = 0
  7035                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7036                           ;setMemory_LoopSave@command stored from wreg
  7037  1E3F  0020               	movlb	0	; select bank0
  7038  1E40  00A1               	movwf	setMemory_LoopSave@command
  7039                           
  7040                           ;MCU_B1.c: 1074: Memory.LoopSave = command == 1 ? 1 : 0;
  7041  1E41  0821               	movf	setMemory_LoopSave@command,w
  7042  1E42  3A01               	xorlw	1
  7043  1E43  3000               	movlw	0
  7044  1E44  1903               	skipnz
  7045  1E45  3001               	movlw	1
  7046  1E46  00A0               	movwf	??_setMemory_LoopSave
  7047  1E47  0DA0               	rlf	??_setMemory_LoopSave,f
  7048  1E48  0DA0               	rlf	??_setMemory_LoopSave,f
  7049  1E49  0023               	movlb	3	; select bank3
  7050  1E4A  0862               	movf	(_Memory^(0+384)+36),w
  7051  1E4B  0020               	movlb	0	; select bank0
  7052  1E4C  0620               	xorwf	??_setMemory_LoopSave,w
  7053  1E4D  39FB               	andlw	-5
  7054  1E4E  0620               	xorwf	??_setMemory_LoopSave,w
  7055  1E4F  0023               	movlb	3	; select bank3
  7056  1E50  00E2               	movwf	(_Memory^(0+384)+36)
  7057  1E51  0008               	return
  7058  1E52                     __end_of_setMemory_LoopSave:	
  7059                           
  7060                           	psect	text26
  7061  092D                     __ptext26:	
  7062 ;; *************** function _setControl_Lights_Table *****************
  7063 ;; Defined at:
  7064 ;;		line 299 in file "../src/RF_Control_B1.c"
  7065 ;; Parameters:    Size  Location     Type
  7066 ;;		None
  7067 ;; Auto vars:     Size  Location     Type
  7068 ;;		None
  7069 ;; Return value:  Size  Location     Type
  7070 ;;		None               void
  7071 ;; Registers used:
  7072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7073 ;; Tracked objects:
  7074 ;;		On entry : 0/0
  7075 ;;		On exit  : 0/0
  7076 ;;		Unchanged: 0/0
  7077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;Total ram usage:        0 bytes
  7083 ;; Hardware stack levels used:    1
  7084 ;; Hardware stack levels required when called:   11
  7085 ;; This function calls:
  7086 ;;		_setBuz
  7087 ;;		_setDimmerLights_ErrorClose
  7088 ;;		_setProductData
  7089 ;;		_setRFSW_AdjControl
  7090 ;;		_setRFSW_Control
  7091 ;;		_setTxData
  7092 ;; This function is called by:
  7093 ;;		_getRxData
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           
  7098                           ;psect for function _setControl_Lights_Table
  7099  092D                     _setControl_Lights_Table:	
  7100                           
  7101                           ;RF_Control_B1.c: 300: switch (RF_Data[15]) {
  7102                           
  7103                           ;incstack = 0
  7104                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7105  092D  2970               	goto	l8758
  7106  092E                     l8746:	
  7107                           ;RF_Control_B1.c: 301: case 0x00:
  7108                           
  7109                           
  7110                           ;RF_Control_B1.c: 303: setDimmerLights_ErrorClose(255);
  7111  092E  30FF               	movlw	255
  7112  092F  3188  20CF  3189   	fcall	_setDimmerLights_ErrorClose
  7113                           
  7114                           ;RF_Control_B1.c: 305: setProductData(9, 0);
  7115  0932  0020               	movlb	0	; select bank0
  7116  0933  01E2               	clrf	setProductData@value
  7117  0934  3009               	movlw	9
  7118  0935  319D  2537  3189   	fcall	_setProductData
  7119                           
  7120                           ;RF_Control_B1.c: 306: setProductData(11, 0);
  7121  0938  0020               	movlb	0	; select bank0
  7122  0939  01E2               	clrf	setProductData@value
  7123  093A  300B               	movlw	11
  7124  093B  319D  2537  3189   	fcall	_setProductData
  7125                           
  7126                           ;RF_Control_B1.c: 307: setProductData(15, 0);
  7127  093E  0020               	movlb	0	; select bank0
  7128  093F  01E2               	clrf	setProductData@value
  7129  0940  300F               	movlw	15
  7130  0941  319D  2537  3189   	fcall	_setProductData
  7131                           
  7132                           ;RF_Control_B1.c: 308: setProductData(17, 0);
  7133  0944  0020               	movlb	0	; select bank0
  7134  0945  01E2               	clrf	setProductData@value
  7135  0946  3011               	movlw	17
  7136  0947  319D  2537  3189   	fcall	_setProductData
  7137                           
  7138                           ;RF_Control_B1.c: 309: setBuz(1, 100);
  7139  094A  3064               	movlw	100
  7140  094B  0020               	movlb	0	; select bank0
  7141  094C  00A9               	movwf	setBuz@time
  7142  094D  3000               	movlw	0
  7143  094E  00AA               	movwf	setBuz@time+1
  7144  094F  3001               	movlw	1
  7145  0950  3197  274E         	fcall	_setBuz
  7146                           
  7147                           ;RF_Control_B1.c: 311: break;
  7148  0952  0008               	return
  7149  0953                     l8750:	
  7150                           ;RF_Control_B1.c: 312: case 0x20:
  7151                           
  7152                           
  7153                           ;RF_Control_B1.c: 313: setProductData(9, 0);
  7154  0953  0020               	movlb	0	; select bank0
  7155  0954  01E2               	clrf	setProductData@value
  7156  0955  3009               	movlw	9
  7157  0956  319D  2537  3189   	fcall	_setProductData
  7158                           
  7159                           ;RF_Control_B1.c: 314: setProductData(11, 0);
  7160  0959  0020               	movlb	0	; select bank0
  7161  095A  01E2               	clrf	setProductData@value
  7162  095B  300B               	movlw	11
  7163  095C  319D  2537  3189   	fcall	_setProductData
  7164                           
  7165                           ;RF_Control_B1.c: 315: setProductData(17, 0);
  7166  095F  0020               	movlb	0	; select bank0
  7167  0960  01E2               	clrf	setProductData@value
  7168  0961  3011               	movlw	17
  7169  0962  319D  2537  3189   	fcall	_setProductData
  7170                           
  7171                           ;RF_Control_B1.c: 316: setTxData();
  7172  0965  318E  2610         	fcall	_setTxData
  7173                           
  7174                           ;RF_Control_B1.c: 317: break;
  7175  0967  0008               	return
  7176  0968                     l8752:	
  7177                           ;RF_Control_B1.c: 318: case 0x01:
  7178                           
  7179                           
  7180                           ;RF_Control_B1.c: 320: setRFSW_Control(1);
  7181  0968  3001               	movlw	1
  7182  0969  3195  25AE         	fcall	_setRFSW_Control
  7183                           
  7184                           ;RF_Control_B1.c: 332: break;
  7185                           
  7186                           ;RF_Control_B1.c: 328: case 0x03:
  7187                           
  7188                           ;RF_Control_B1.c: 327: break;
  7189                           
  7190                           ;RF_Control_B1.c: 323: case 0x02:
  7191                           
  7192                           ;RF_Control_B1.c: 322: break;
  7193  096B  0008               	return
  7194  096C                     l8754:	
  7195                           ;RF_Control_B1.c: 333: case 0x11:
  7196                           
  7197                           
  7198                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  7199  096C  3001               	movlw	1
  7200  096D  3194  244B         	fcall	_setRFSW_AdjControl
  7201                           
  7202                           ;RF_Control_B1.c: 354: }
  7203                           
  7204                           ;RF_Control_B1.c: 353: break;
  7205                           
  7206                           ;RF_Control_B1.c: 347: case 0x31:
  7207                           
  7208                           ;RF_Control_B1.c: 346: break;
  7209                           
  7210                           ;RF_Control_B1.c: 340: case 0x21:
  7211                           
  7212                           ;RF_Control_B1.c: 339: break;
  7213  096F  0008               	return
  7214  0970                     l8758:	
  7215  0970  0023               	movlb	3	; select bank3
  7216  0971  082F               	movf	(_RF_Data^(0+384)+15),w
  7217                           
  7218                           ; Switch size 1, requested type "space"
  7219                           ; Number of cases is 8, Range of values is 0 to 49
  7220                           ; switch strategies available:
  7221                           ; Name         Instructions Cycles
  7222                           ; simple_byte           25    13 (average)
  7223                           ; direct_byte          106     6 (fixed)
  7224                           ; jumptable            260     6 (fixed)
  7225                           ;	Chosen strategy is simple_byte
  7226  0972  3A00               	xorlw	0	; case 0
  7227  0973  1903               	skipnz
  7228  0974  292E               	goto	l8746
  7229  0975  3A01               	xorlw	1	; case 1
  7230  0976  1903               	skipnz
  7231  0977  2968               	goto	l8752
  7232  0978  3A03               	xorlw	3	; case 2
  7233  0979  1903               	skipnz
  7234  097A  298B               	goto	l2116
  7235  097B  3A01               	xorlw	1	; case 3
  7236  097C  1903               	skipnz
  7237  097D  298B               	goto	l2116
  7238  097E  3A12               	xorlw	18	; case 17
  7239  097F  1903               	skipnz
  7240  0980  296C               	goto	l8754
  7241  0981  3A31               	xorlw	49	; case 32
  7242  0982  1903               	skipnz
  7243  0983  2953               	goto	l8750
  7244  0984  3A01               	xorlw	1	; case 33
  7245  0985  1903               	skipnz
  7246  0986  298B               	goto	l2116
  7247  0987  3A10               	xorlw	16	; case 49
  7248  0988  1903               	skipnz
  7249  0989  298B               	goto	l2116
  7250  098A  298B               	goto	l2116
  7251  098B                     l2116:	
  7252  098B  0008               	return
  7253  098C                     __end_of_setControl_Lights_Table:	
  7254                           
  7255                           	psect	text27
  7256  15AE                     __ptext27:	
  7257 ;; *************** function _setRFSW_Control *****************
  7258 ;; Defined at:
  7259 ;;		line 381 in file "../src/RF_Control_B1.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  sw              1    wreg     unsigned char 
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;  sw              1   77[BANK0 ] unsigned char 
  7264 ;;  status          1   76[BANK0 ] unsigned char 
  7265 ;; Return value:  Size  Location     Type
  7266 ;;		None               void
  7267 ;; Registers used:
  7268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;Total ram usage:        3 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:    9
  7281 ;; This function calls:
  7282 ;;		_getDelayOff_GO
  7283 ;;		_getDimmerLights_Status
  7284 ;;		_setBuz
  7285 ;;		_setDelayOff_GO
  7286 ;;		_setDimmerLights_SwOff
  7287 ;;		_setDimmerLights_SwOn
  7288 ;;		_setRF_DimmerLights
  7289 ;;		_setTxData
  7290 ;; This function is called by:
  7291 ;;		_setControl_Lights_Table
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           
  7296                           ;psect for function _setRFSW_Control
  7297  15AE                     _setRFSW_Control:	
  7298                           
  7299                           ;incstack = 0
  7300                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7301                           ;setRFSW_Control@sw stored from wreg
  7302  15AE  0020               	movlb	0	; select bank0
  7303  15AF  00ED               	movwf	setRFSW_Control@sw
  7304                           
  7305                           ;RF_Control_B1.c: 382: char status = 0;
  7306  15B0  01EC               	clrf	setRFSW_Control@status
  7307                           
  7308                           ;RF_Control_B1.c: 385: if (RF_Data[16] == 0x80) {
  7309  15B1  0023               	movlb	3	; select bank3
  7310  15B2  0830               	movf	(_RF_Data^(0+384)+16),w
  7311  15B3  3A80               	xorlw	128
  7312  15B4  1D03               	skipz
  7313  15B5  2DE1               	goto	l8600
  7314                           
  7315                           ;RF_Control_B1.c: 386: setDelayOff_GO(sw, 1, RF_Data[17]);
  7316  15B6  0020               	movlb	0	; select bank0
  7317  15B7  01E6               	clrf	setDelayOff_GO@command
  7318  15B8  0AE6               	incf	setDelayOff_GO@command,f
  7319  15B9  0023               	movlb	3	; select bank3
  7320  15BA  0831               	movf	(_RF_Data^(0+384)+17),w
  7321  15BB  0020               	movlb	0	; select bank0
  7322  15BC  00EB               	movwf	??_setRFSW_Control
  7323  15BD  086B               	movf	??_setRFSW_Control,w
  7324  15BE  00E7               	movwf	setDelayOff_GO@value
  7325  15BF  086D               	movf	setRFSW_Control@sw,w
  7326  15C0  3196  264F  3195   	fcall	_setDelayOff_GO
  7327                           
  7328                           ;RF_Control_B1.c: 387: if (getDimmerLights_Status(sw) == 1) {
  7329  15C3  0020               	movlb	0	; select bank0
  7330  15C4  086D               	movf	setRFSW_Control@sw,w
  7331  15C5  319D  25A0  3195   	fcall	_getDimmerLights_Status
  7332  15C8  3A01               	xorlw	1
  7333  15C9  1D03               	skipz
  7334  15CA  2DF0               	goto	l8604
  7335                           
  7336                           ;RF_Control_B1.c: 388: setBuz(1, 100);
  7337  15CB  3064               	movlw	100
  7338  15CC  0020               	movlb	0	; select bank0
  7339  15CD  00A9               	movwf	setBuz@time
  7340  15CE  3000               	movlw	0
  7341  15CF  00AA               	movwf	setBuz@time+1
  7342  15D0  3001               	movlw	1
  7343  15D1  3197  274E  3195   	fcall	_setBuz
  7344                           
  7345                           ;RF_Control_B1.c: 389: status = 1;
  7346  15D4  0020               	movlb	0	; select bank0
  7347  15D5  01EC               	clrf	setRFSW_Control@status
  7348  15D6  0AEC               	incf	setRFSW_Control@status,f
  7349                           
  7350                           ;RF_Control_B1.c: 390: setRF_DimmerLights(sw, 1);
  7351  15D7  01E6               	clrf	setRF_DimmerLights@on
  7352  15D8  0AE6               	incf	setRF_DimmerLights@on,f
  7353  15D9  086D               	movf	setRFSW_Control@sw,w
  7354  15DA  3197  27A7  3195   	fcall	_setRF_DimmerLights
  7355                           
  7356                           ;RF_Control_B1.c: 391: setTxData();
  7357  15DD  318E  2610  3195   	fcall	_setTxData
  7358                           
  7359                           ;RF_Control_B1.c: 392: }
  7360                           ;RF_Control_B1.c: 393: } else {
  7361  15E0  2DF0               	goto	l8604
  7362  15E1                     l8600:	
  7363                           
  7364                           ;RF_Control_B1.c: 395: if (getDelayOff_GO(sw) == 1) {
  7365  15E1  0020               	movlb	0	; select bank0
  7366  15E2  086D               	movf	setRFSW_Control@sw,w
  7367  15E3  319D  2580  3195   	fcall	_getDelayOff_GO
  7368  15E6  3A01               	xorlw	1
  7369  15E7  1D03               	skipz
  7370  15E8  2DF0               	goto	l8604
  7371                           
  7372                           ;RF_Control_B1.c: 396: setDelayOff_GO(sw, 0, 0);
  7373  15E9  0020               	movlb	0	; select bank0
  7374  15EA  01E6               	clrf	setDelayOff_GO@command
  7375  15EB  01E7               	clrf	setDelayOff_GO@value
  7376  15EC  086D               	movf	setRFSW_Control@sw,w
  7377  15ED  3196  264F  3195   	fcall	_setDelayOff_GO
  7378  15F0                     l8604:	
  7379                           
  7380                           ;RF_Control_B1.c: 397: }
  7381                           ;RF_Control_B1.c: 399: }
  7382                           ;RF_Control_B1.c: 400: if (status == 0) {
  7383  15F0  0020               	movlb	0	; select bank0
  7384  15F1  08EC               	movf	setRFSW_Control@status,f
  7385  15F2  1D03               	skipz
  7386  15F3  0008               	return
  7387                           
  7388                           ;RF_Control_B1.c: 402: setDimmerLights_SwOn(sw);
  7389  15F4  086D               	movf	setRFSW_Control@sw,w
  7390  15F5  3193  23D6  3195   	fcall	_setDimmerLights_SwOn
  7391                           
  7392                           ;RF_Control_B1.c: 403: setDimmerLights_SwOff(sw);
  7393  15F8  0020               	movlb	0	; select bank0
  7394  15F9  086D               	movf	setRFSW_Control@sw,w
  7395  15FA  3195  255F         	fcall	_setDimmerLights_SwOff
  7396  15FC  0008               	return
  7397  15FD                     __end_of_setRFSW_Control:	
  7398                           
  7399                           	psect	text28
  7400  13D6                     __ptext28:	
  7401 ;; *************** function _setDimmerLights_SwOn *****************
  7402 ;; Defined at:
  7403 ;;		line 405 in file "../src/Dimmer_B1.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  sw              1    wreg     unsigned char 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  sw              1   13[BANK0 ] unsigned char 
  7408 ;;  idle            1   14[BANK0 ] unsigned char 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;		None               void
  7411 ;; Registers used:
  7412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;Total ram usage:        2 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    7
  7425 ;; This function calls:
  7426 ;;		_DimmerLightsPointSelect
  7427 ;;		_setBuz
  7428 ;; This function is called by:
  7429 ;;		_setRFSW_Control
  7430 ;;		_setSw_Main
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           
  7435                           ;psect for function _setDimmerLights_SwOn
  7436  13D6                     _setDimmerLights_SwOn:	
  7437                           
  7438                           ;incstack = 0
  7439                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7440                           ;setDimmerLights_SwOn@sw stored from wreg
  7441  13D6  0020               	movlb	0	; select bank0
  7442  13D7  00AD               	movwf	setDimmerLights_SwOn@sw
  7443                           
  7444                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7445  13D8  082D               	movf	setDimmerLights_SwOn@sw,w
  7446  13D9  319C  24AC  3193   	fcall	_DimmerLightsPointSelect
  7447                           
  7448                           ;Dimmer_B1.c: 407: char idle = 0;
  7449  13DC  0020               	movlb	0	; select bank0
  7450  13DD  01AE               	clrf	setDimmerLights_SwOn@idle
  7451                           
  7452                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7453  13DE  08AE               	movf	setDimmerLights_SwOn@idle,f
  7454  13DF  1D03               	skipz
  7455  13E0  0008               	return
  7456                           
  7457                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7458  13E1  086F               	movf	_DimmerLights,w
  7459  13E2  3E0B               	addlw	11
  7460  13E3  0086               	movwf	6
  7461  13E4  3001               	movlw	1	; select bank2/3
  7462  13E5  0087               	movwf	7
  7463  13E6  1481               	bsf	1,1
  7464                           
  7465                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7466  13E7  086F               	movf	_DimmerLights,w
  7467  13E8  3E02               	addlw	2
  7468  13E9  0086               	movwf	6
  7469  13EA  3001               	movlw	1	; select bank2/3
  7470  13EB  0087               	movwf	7
  7471  13EC  1881               	btfsc	1,1
  7472  13ED  2C01               	goto	l8404
  7473                           
  7474                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7475  13EE  086F               	movf	_DimmerLights,w
  7476  13EF  3E02               	addlw	2
  7477  13F0  0086               	movwf	6
  7478  13F1  3001               	movlw	1	; select bank2/3
  7479  13F2  0087               	movwf	7
  7480  13F3  1481               	bsf	1,1
  7481                           
  7482                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7483  13F4  086F               	movf	_DimmerLights,w
  7484  13F5  3E0A               	addlw	10
  7485  13F6  0086               	movwf	6
  7486  13F7  3001               	movlw	1	; select bank2/3
  7487  13F8  0087               	movwf	7
  7488  13F9  1481               	bsf	1,1
  7489                           
  7490                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7491  13FA  086F               	movf	_DimmerLights,w
  7492  13FB  3E0A               	addlw	10
  7493  13FC  0086               	movwf	6
  7494  13FD  3001               	movlw	1	; select bank2/3
  7495  13FE  0087               	movwf	7
  7496  13FF  1401               	bsf	1,0
  7497                           
  7498                           ;Dimmer_B1.c: 442: } else {
  7499  1400  2C07               	goto	l8406
  7500  1401                     l8404:	
  7501                           
  7502                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7503  1401  086F               	movf	_DimmerLights,w
  7504  1402  3E02               	addlw	2
  7505  1403  0086               	movwf	6
  7506  1404  3001               	movlw	1	; select bank2/3
  7507  1405  0087               	movwf	7
  7508  1406  1081               	bcf	1,1
  7509  1407                     l8406:	
  7510                           
  7511                           ;Dimmer_B1.c: 444: }
  7512                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7513  1407  3064               	movlw	100
  7514  1408  00A9               	movwf	setBuz@time
  7515  1409  3000               	movlw	0
  7516  140A  00AA               	movwf	setBuz@time+1
  7517  140B  3001               	movlw	1
  7518  140C  3197  274E         	fcall	_setBuz
  7519  140E  0008               	return
  7520  140F                     __end_of_setDimmerLights_SwOn:	
  7521                           
  7522                           	psect	text29
  7523  144B                     __ptext29:	
  7524 ;; *************** function _setRFSW_AdjControl *****************
  7525 ;; Defined at:
  7526 ;;		line 409 in file "../src/RF_Control_B1.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  sw              1    wreg     unsigned char 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  sw              1   75[BANK0 ] unsigned char 
  7531 ;;  status          1   74[BANK0 ] unsigned char 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;		None               void
  7534 ;; Registers used:
  7535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;Total ram usage:        4 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:   10
  7548 ;; This function calls:
  7549 ;;		_getDimmerLights_Status
  7550 ;;		_setMemory_Modify
  7551 ;;		_setProductData
  7552 ;;		_setRF_DimmerValue
  7553 ;;		_setTxData
  7554 ;; This function is called by:
  7555 ;;		_setControl_Lights_Table
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           
  7560                           ;psect for function _setRFSW_AdjControl
  7561  144B                     _setRFSW_AdjControl:	
  7562                           
  7563                           ;incstack = 0
  7564                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7565                           ;setRFSW_AdjControl@sw stored from wreg
  7566  144B  0020               	movlb	0	; select bank0
  7567  144C  00EB               	movwf	setRFSW_AdjControl@sw
  7568                           
  7569                           ;RF_Control_B1.c: 410: char status = 0;
  7570  144D  01EA               	clrf	setRFSW_AdjControl@status
  7571                           
  7572                           ;RF_Control_B1.c: 412: status = getDimmerLights_Status(sw);
  7573  144E  086B               	movf	setRFSW_AdjControl@sw,w
  7574  144F  319D  25A0  3194   	fcall	_getDimmerLights_Status
  7575  1452  0020               	movlb	0	; select bank0
  7576  1453  00E8               	movwf	??_setRFSW_AdjControl
  7577  1454  0868               	movf	??_setRFSW_AdjControl,w
  7578  1455  00EA               	movwf	setRFSW_AdjControl@status
  7579                           
  7580                           ;RF_Control_B1.c: 415: if (status == 1) {
  7581  1456  086A               	movf	setRFSW_AdjControl@status,w
  7582  1457  3A01               	xorlw	1
  7583  1458  1D03               	skipz
  7584  1459  2C64               	goto	l8618
  7585                           
  7586                           ;RF_Control_B1.c: 416: setMemory_Modify(1);
  7587  145A  3001               	movlw	1
  7588  145B  319E  262C  3194   	fcall	_setMemory_Modify
  7589                           
  7590                           ;RF_Control_B1.c: 417: setRF_DimmerValue(sw);
  7591  145E  0020               	movlb	0	; select bank0
  7592  145F  086B               	movf	setRFSW_AdjControl@sw,w
  7593  1460  3191  21FF  3194   	fcall	_setRF_DimmerValue
  7594                           
  7595                           ;RF_Control_B1.c: 418: } else {
  7596  1463  2C75               	goto	l2128
  7597  1464                     l8618:	
  7598                           
  7599                           ;RF_Control_B1.c: 419: setProductData(9, product->Data[20 + sw]);
  7600  1464  0020               	movlb	0	; select bank0
  7601  1465  086B               	movf	setRFSW_AdjControl@sw,w
  7602  1466  3E14               	addlw	20
  7603  1467  0779               	addwf	_product,w
  7604  1468  00E8               	movwf	??_setRFSW_AdjControl
  7605  1469  0868               	movf	??_setRFSW_AdjControl,w
  7606  146A  0086               	movwf	6
  7607  146B  3002               	movlw	2	; select bank4/5
  7608  146C  0087               	movwf	7
  7609  146D  0801               	movf	1,w
  7610  146E  00E9               	movwf	??_setRFSW_AdjControl+1
  7611  146F  0869               	movf	??_setRFSW_AdjControl+1,w
  7612  1470  00E2               	movwf	setProductData@value
  7613  1471  3009               	movlw	9
  7614  1472  319D  2537  3194   	fcall	_setProductData
  7615  1475                     l2128:	
  7616                           
  7617                           ;RF_Control_B1.c: 420: }
  7618                           ;RF_Control_B1.c: 421: setProductData(17, product->Data[26 + sw]);
  7619  1475  0020               	movlb	0	; select bank0
  7620  1476  086B               	movf	setRFSW_AdjControl@sw,w
  7621  1477  3E1A               	addlw	26
  7622  1478  0779               	addwf	_product,w
  7623  1479  00E8               	movwf	??_setRFSW_AdjControl
  7624  147A  0868               	movf	??_setRFSW_AdjControl,w
  7625  147B  0086               	movwf	6
  7626  147C  3002               	movlw	2	; select bank4/5
  7627  147D  0087               	movwf	7
  7628  147E  0801               	movf	1,w
  7629  147F  00E9               	movwf	??_setRFSW_AdjControl+1
  7630  1480  0869               	movf	??_setRFSW_AdjControl+1,w
  7631  1481  00E2               	movwf	setProductData@value
  7632  1482  3011               	movlw	17
  7633  1483  319D  2537  3194   	fcall	_setProductData
  7634                           
  7635                           ;RF_Control_B1.c: 422: setTxData();
  7636  1486  318E  2610         	fcall	_setTxData
  7637  1488  0008               	return
  7638  1489                     __end_of_setRFSW_AdjControl:	
  7639                           
  7640                           	psect	text30
  7641  11FF                     __ptext30:	
  7642 ;; *************** function _setRF_DimmerValue *****************
  7643 ;; Defined at:
  7644 ;;		line 427 in file "../src/RF_Control_B1.c"
  7645 ;; Parameters:    Size  Location     Type
  7646 ;;  lights          1    wreg     unsigned char 
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;  lights          1   71[BANK0 ] unsigned char 
  7649 ;; Return value:  Size  Location     Type
  7650 ;;		None               void
  7651 ;; Registers used:
  7652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;Total ram usage:        2 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    9
  7665 ;; This function calls:
  7666 ;;		_setDimmerLights_AdjRF
  7667 ;;		_setProductData
  7668 ;; This function is called by:
  7669 ;;		_setRFSW_AdjControl
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           
  7674                           ;psect for function _setRF_DimmerValue
  7675  11FF                     _setRF_DimmerValue:	
  7676                           
  7677                           ;incstack = 0
  7678                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7679                           ;setRF_DimmerValue@lights stored from wreg
  7680  11FF  0020               	movlb	0	; select bank0
  7681  1200  00E7               	movwf	setRF_DimmerValue@lights
  7682                           
  7683                           ;RF_Control_B1.c: 428: if (RF_Data[9] > 0x64) {
  7684  1201  3065               	movlw	101
  7685  1202  0023               	movlb	3	; select bank3
  7686  1203  0229               	subwf	(_RF_Data^(0+384)+9),w
  7687  1204  1C03               	skipc
  7688  1205  2A0C               	goto	l8500
  7689                           
  7690                           ;RF_Control_B1.c: 429: RF_Data[9] = 0x64;
  7691  1206  3064               	movlw	100
  7692  1207  0020               	movlb	0	; select bank0
  7693  1208  00E6               	movwf	??_setRF_DimmerValue
  7694  1209  0866               	movf	??_setRF_DimmerValue,w
  7695  120A  0023               	movlb	3	; select bank3
  7696  120B  00A9               	movwf	(_RF_Data^(0+384)+9)
  7697  120C                     l8500:	
  7698                           
  7699                           ;RF_Control_B1.c: 430: }
  7700                           ;RF_Control_B1.c: 431: setProductData(9, RF_Data[9]);
  7701  120C  0829               	movf	(_RF_Data^(0+384)+9),w
  7702  120D  0020               	movlb	0	; select bank0
  7703  120E  00E6               	movwf	??_setRF_DimmerValue
  7704  120F  0866               	movf	??_setRF_DimmerValue,w
  7705  1210  00E2               	movwf	setProductData@value
  7706  1211  3009               	movlw	9
  7707  1212  319D  2537  3191   	fcall	_setProductData
  7708                           
  7709                           ;RF_Control_B1.c: 432: setProductData(11, lights);
  7710  1215  0020               	movlb	0	; select bank0
  7711  1216  0867               	movf	setRF_DimmerValue@lights,w
  7712  1217  00E6               	movwf	??_setRF_DimmerValue
  7713  1218  0866               	movf	??_setRF_DimmerValue,w
  7714  1219  00E2               	movwf	setProductData@value
  7715  121A  300B               	movlw	11
  7716  121B  319D  2537  3191   	fcall	_setProductData
  7717                           
  7718                           ;RF_Control_B1.c: 433: setProductData((20 + lights), RF_Data[9]);
  7719  121E  0023               	movlb	3	; select bank3
  7720  121F  0829               	movf	(_RF_Data^(0+384)+9),w
  7721  1220  0020               	movlb	0	; select bank0
  7722  1221  00E6               	movwf	??_setRF_DimmerValue
  7723  1222  0866               	movf	??_setRF_DimmerValue,w
  7724  1223  00E2               	movwf	setProductData@value
  7725  1224  0867               	movf	setRF_DimmerValue@lights,w
  7726  1225  3E14               	addlw	20
  7727  1226  319D  2537  3191   	fcall	_setProductData
  7728                           
  7729                           ;RF_Control_B1.c: 434: setDimmerLights_AdjRF(lights);
  7730  1229  0020               	movlb	0	; select bank0
  7731  122A  0867               	movf	setRF_DimmerValue@lights,w
  7732  122B  3190  208F         	fcall	_setDimmerLights_AdjRF
  7733  122D  0008               	return
  7734  122E                     __end_of_setRF_DimmerValue:	
  7735                           
  7736                           	psect	text31
  7737  108F                     __ptext31:	
  7738 ;; *************** function _setDimmerLights_AdjRF *****************
  7739 ;; Defined at:
  7740 ;;		line 911 in file "../src/Dimmer_B1.c"
  7741 ;; Parameters:    Size  Location     Type
  7742 ;;  lights          1    wreg     unsigned char 
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;  lights          1   67[BANK0 ] unsigned char 
  7745 ;; Return value:  Size  Location     Type
  7746 ;;		None               void
  7747 ;; Registers used:
  7748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7749 ;; Tracked objects:
  7750 ;;		On entry : 0/0
  7751 ;;		On exit  : 0/0
  7752 ;;		Unchanged: 0/0
  7753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;Total ram usage:        2 bytes
  7759 ;; Hardware stack levels used:    1
  7760 ;; Hardware stack levels required when called:    8
  7761 ;; This function calls:
  7762 ;;		_DimmerLightsPointSelect
  7763 ;;		_getPercentValue
  7764 ;; This function is called by:
  7765 ;;		_setRF_DimmerValue
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           
  7770                           ;psect for function _setDimmerLights_AdjRF
  7771  108F                     _setDimmerLights_AdjRF:	
  7772                           
  7773                           ;incstack = 0
  7774                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7775                           ;setDimmerLights_AdjRF@lights stored from wreg
  7776  108F  0020               	movlb	0	; select bank0
  7777  1090  00E3               	movwf	setDimmerLights_AdjRF@lights
  7778                           
  7779                           ;Dimmer_B1.c: 913: DimmerLightsPointSelect(lights);
  7780  1091  0863               	movf	setDimmerLights_AdjRF@lights,w
  7781  1092  319C  24AC  3190   	fcall	_DimmerLightsPointSelect
  7782                           
  7783                           ;Dimmer_B1.c: 914: DimmerLights->AdjRF = 1;
  7784  1095  0020               	movlb	0	; select bank0
  7785  1096  086F               	movf	_DimmerLights,w
  7786  1097  3E02               	addlw	2
  7787  1098  0086               	movwf	6
  7788  1099  3001               	movlw	1	; select bank2/3
  7789  109A  0087               	movwf	7
  7790  109B  1401               	bsf	1,0
  7791                           
  7792                           ;Dimmer_B1.c: 915: DimmerLights->Signal = 1;
  7793  109C  0A6F               	incf	_DimmerLights,w
  7794  109D  0086               	movwf	6
  7795  109E  3001               	movlw	1	; select bank2/3
  7796  109F  0087               	movwf	7
  7797  10A0  1681               	bsf	1,5
  7798                           
  7799                           ;Dimmer_B1.c: 916: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7800  10A1  0879               	movf	_product,w
  7801  10A2  3E09               	addlw	9
  7802  10A3  0086               	movwf	6
  7803  10A4  3002               	movlw	2	; select bank4/5
  7804  10A5  0087               	movwf	7
  7805  10A6  0801               	movf	1,w
  7806  10A7  318A  2252         	fcall	_getPercentValue
  7807  10A9  0020               	movlb	0	; select bank0
  7808  10AA  00E2               	movwf	??_setDimmerLights_AdjRF
  7809  10AB  086F               	movf	_DimmerLights,w
  7810  10AC  3E06               	addlw	6
  7811  10AD  0086               	movwf	6
  7812  10AE  3001               	movlw	1	; select bank2/3
  7813  10AF  0087               	movwf	7
  7814  10B0  0862               	movf	??_setDimmerLights_AdjRF,w
  7815  10B1  0081               	movwf	1
  7816  10B2  0008               	return
  7817  10B3                     __end_of_setDimmerLights_AdjRF:	
  7818                           
  7819                           	psect	text32
  7820  0A52                     __ptext32:	
  7821 ;; *************** function _getPercentValue *****************
  7822 ;; Defined at:
  7823 ;;		line 1026 in file "../src/Dimmer_B1.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  value           1    wreg     unsigned char 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  value           1   62[BANK0 ] unsigned char 
  7828 ;;  i               3   63[BANK0 ] float 
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  1    wreg      unsigned char 
  7831 ;; Registers used:
  7832 ;;		wreg, status,2, status,0, pclath, cstack
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;Total ram usage:        6 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    7
  7845 ;; This function calls:
  7846 ;;		___awtoft
  7847 ;;		___ftadd
  7848 ;;		___ftdiv
  7849 ;;		___ftmul
  7850 ;;		___ftneg
  7851 ;;		___fttol
  7852 ;; This function is called by:
  7853 ;;		_setDimmerLights_AdjRF
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           
  7858                           ;psect for function _getPercentValue
  7859  0A52                     _getPercentValue:	
  7860                           
  7861                           ;incstack = 0
  7862                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7863                           ;getPercentValue@value stored from wreg
  7864  0A52  0020               	movlb	0	; select bank0
  7865  0A53  00DE               	movwf	getPercentValue@value
  7866                           
  7867                           ;Dimmer_B1.c: 1034: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  7868  0A54  3000               	movlw	0
  7869  0A55  00DF               	movwf	getPercentValue@i
  7870  0A56  3030               	movlw	48
  7871  0A57  00E0               	movwf	getPercentValue@i+1
  7872  0A58  3042               	movlw	66
  7873  0A59  00E1               	movwf	getPercentValue@i+2
  7874                           
  7875                           ;Dimmer_B1.c: 1035: i /= 100;
  7876  0A5A  3000               	movlw	0
  7877  0A5B  00AE               	movwf	___ftdiv@f2
  7878  0A5C  30C8               	movlw	200
  7879  0A5D  00AF               	movwf	___ftdiv@f2+1
  7880  0A5E  3042               	movlw	66
  7881  0A5F  00B0               	movwf	___ftdiv@f2+2
  7882  0A60  085F               	movf	getPercentValue@i,w
  7883  0A61  00B1               	movwf	___ftdiv@f1
  7884  0A62  0860               	movf	getPercentValue@i+1,w
  7885  0A63  00B2               	movwf	___ftdiv@f1+1
  7886  0A64  0861               	movf	getPercentValue@i+2,w
  7887  0A65  00B3               	movwf	___ftdiv@f1+2
  7888  0A66  318E  26A7  318A   	fcall	___ftdiv
  7889  0A69  0020               	movlb	0	; select bank0
  7890  0A6A  082E               	movf	?___ftdiv,w
  7891  0A6B  00DF               	movwf	getPercentValue@i
  7892  0A6C  082F               	movf	?___ftdiv+1,w
  7893  0A6D  00E0               	movwf	getPercentValue@i+1
  7894  0A6E  0830               	movf	?___ftdiv+2,w
  7895  0A6F  00E1               	movwf	getPercentValue@i+2
  7896                           
  7897                           ;Dimmer_B1.c: 1037: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  7898  0A70  085E               	movf	getPercentValue@value,w
  7899  0A71  00DC               	movwf	??_getPercentValue
  7900  0A72  01DD               	clrf	??_getPercentValue+1
  7901  0A73  09DC               	comf	??_getPercentValue,f
  7902  0A74  09DD               	comf	??_getPercentValue+1,f
  7903  0A75  0ADC               	incf	??_getPercentValue,f
  7904  0A76  1903               	skipnz
  7905  0A77  0ADD               	incf	??_getPercentValue+1,f
  7906  0A78  085C               	movf	??_getPercentValue,w
  7907  0A79  3E64               	addlw	100
  7908  0A7A  00A8               	movwf	___awtoft@c
  7909  0A7B  3000               	movlw	0
  7910  0A7C  3D5D               	addwfc	??_getPercentValue+1,w
  7911  0A7D  00A9               	movwf	___awtoft@c+1
  7912  0A7E  319F  27DE  318A   	fcall	___awtoft
  7913  0A81  0020               	movlb	0	; select bank0
  7914  0A82  0828               	movf	?___awtoft,w
  7915  0A83  00B1               	movwf	___ftmul@f2
  7916  0A84  0829               	movf	?___awtoft+1,w
  7917  0A85  00B2               	movwf	___ftmul@f2+1
  7918  0A86  082A               	movf	?___awtoft+2,w
  7919  0A87  00B3               	movwf	___ftmul@f2+2
  7920  0A88  085F               	movf	getPercentValue@i,w
  7921  0A89  00AE               	movwf	___ftmul@f1
  7922  0A8A  0860               	movf	getPercentValue@i+1,w
  7923  0A8B  00AF               	movwf	___ftmul@f1+1
  7924  0A8C  0861               	movf	getPercentValue@i+2,w
  7925  0A8D  00B0               	movwf	___ftmul@f1+2
  7926  0A8E  3187  2704  318A   	fcall	___ftmul
  7927  0A91  0020               	movlb	0	; select bank0
  7928  0A92  082E               	movf	?___ftmul,w
  7929  0A93  00BE               	movwf	___ftneg@f1
  7930  0A94  082F               	movf	?___ftmul+1,w
  7931  0A95  00BF               	movwf	___ftneg@f1+1
  7932  0A96  0830               	movf	?___ftmul+2,w
  7933  0A97  00C0               	movwf	___ftneg@f1+2
  7934  0A98  319C  245D  318A   	fcall	___ftneg
  7935  0A9B  0020               	movlb	0	; select bank0
  7936  0A9C  083E               	movf	?___ftneg,w
  7937  0A9D  00C4               	movwf	___ftadd@f2
  7938  0A9E  083F               	movf	?___ftneg+1,w
  7939  0A9F  00C5               	movwf	___ftadd@f2+1
  7940  0AA0  0840               	movf	?___ftneg+2,w
  7941  0AA1  00C6               	movwf	___ftadd@f2+2
  7942  0AA2  3000               	movlw	0
  7943  0AA3  00C1               	movwf	___ftadd@f1
  7944  0AA4  3060               	movlw	96
  7945  0AA5  00C2               	movwf	___ftadd@f1+1
  7946  0AA6  3042               	movlw	66
  7947  0AA7  00C3               	movwf	___ftadd@f1+2
  7948  0AA8  3184  2456  318A   	fcall	___ftadd
  7949  0AAB  0020               	movlb	0	; select bank0
  7950  0AAC  0841               	movf	?___ftadd,w
  7951  0AAD  00CE               	movwf	___fttol@f1
  7952  0AAE  0842               	movf	?___ftadd+1,w
  7953  0AAF  00CF               	movwf	___fttol@f1+1
  7954  0AB0  0843               	movf	?___ftadd+2,w
  7955  0AB1  00D0               	movwf	___fttol@f1+2
  7956  0AB2  318D  2589         	fcall	___fttol
  7957  0AB4  0020               	movlb	0	; select bank0
  7958  0AB5  084E               	movf	?___fttol,w
  7959  0AB6  0008               	return
  7960  0AB7                     __end_of_getPercentValue:	
  7961                           
  7962                           	psect	text33
  7963  0704                     __ptext33:	
  7964 ;; *************** function ___ftmul *****************
  7965 ;; Defined at:
  7966 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7967 ;; Parameters:    Size  Location     Type
  7968 ;;  f1              3   14[BANK0 ] float 
  7969 ;;  f2              3   17[BANK0 ] float 
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7972 ;;  sign            1   29[BANK0 ] unsigned char 
  7973 ;;  cntr            1   28[BANK0 ] unsigned char 
  7974 ;;  exp             1   24[BANK0 ] unsigned char 
  7975 ;; Return value:  Size  Location     Type
  7976 ;;                  3   14[BANK0 ] float 
  7977 ;; Registers used:
  7978 ;;		wreg, status,2, status,0, pclath, cstack
  7979 ;; Tracked objects:
  7980 ;;		On entry : 0/0
  7981 ;;		On exit  : 0/0
  7982 ;;		Unchanged: 0/0
  7983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7984 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7987 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;Total ram usage:       16 bytes
  7989 ;; Hardware stack levels used:    1
  7990 ;; Hardware stack levels required when called:    6
  7991 ;; This function calls:
  7992 ;;		___ftpack
  7993 ;; This function is called by:
  7994 ;;		_getPercentValue
  7995 ;; This function uses a non-reentrant model
  7996 ;;
  7997                           
  7998                           
  7999                           ;psect for function ___ftmul
  8000  0704                     ___ftmul:	
  8001                           
  8002                           ;incstack = 0
  8003                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8004  0704  0020               	movlb	0	; select bank0
  8005  0705  082E               	movf	___ftmul@f1,w
  8006  0706  00B4               	movwf	??___ftmul
  8007  0707  082F               	movf	___ftmul@f1+1,w
  8008  0708  00B5               	movwf	??___ftmul+1
  8009  0709  0830               	movf	___ftmul@f1+2,w
  8010  070A  00B6               	movwf	??___ftmul+2
  8011  070B  1003               	clrc
  8012  070C  0D35               	rlf	??___ftmul+1,w
  8013  070D  0D36               	rlf	??___ftmul+2,w
  8014  070E  00B7               	movwf	??___ftmul+3
  8015  070F  0837               	movf	??___ftmul+3,w
  8016  0710  00B8               	movwf	___ftmul@exp
  8017  0711  08B8               	movf	___ftmul@exp,f
  8018  0712  1D03               	skipz
  8019  0713  2F1B               	goto	l8152
  8020  0714  3000               	movlw	0
  8021  0715  00AE               	movwf	?___ftmul
  8022  0716  3000               	movlw	0
  8023  0717  00AF               	movwf	?___ftmul+1
  8024  0718  3000               	movlw	0
  8025  0719  00B0               	movwf	?___ftmul+2
  8026  071A  0008               	return
  8027  071B                     l8152:	
  8028  071B  0831               	movf	___ftmul@f2,w
  8029  071C  00B4               	movwf	??___ftmul
  8030  071D  0832               	movf	___ftmul@f2+1,w
  8031  071E  00B5               	movwf	??___ftmul+1
  8032  071F  0833               	movf	___ftmul@f2+2,w
  8033  0720  00B6               	movwf	??___ftmul+2
  8034  0721  1003               	clrc
  8035  0722  0D35               	rlf	??___ftmul+1,w
  8036  0723  0D36               	rlf	??___ftmul+2,w
  8037  0724  00B7               	movwf	??___ftmul+3
  8038  0725  0837               	movf	??___ftmul+3,w
  8039  0726  00BD               	movwf	___ftmul@sign
  8040  0727  08BD               	movf	___ftmul@sign,f
  8041  0728  1D03               	skipz
  8042  0729  2F31               	goto	l8158
  8043  072A  3000               	movlw	0
  8044  072B  00AE               	movwf	?___ftmul
  8045  072C  3000               	movlw	0
  8046  072D  00AF               	movwf	?___ftmul+1
  8047  072E  3000               	movlw	0
  8048  072F  00B0               	movwf	?___ftmul+2
  8049  0730  0008               	return
  8050  0731                     l8158:	
  8051  0731  083D               	movf	___ftmul@sign,w
  8052  0732  3E7B               	addlw	123
  8053  0733  00B4               	movwf	??___ftmul
  8054  0734  0834               	movf	??___ftmul,w
  8055  0735  07B8               	addwf	___ftmul@exp,f
  8056  0736  082E               	movf	___ftmul@f1,w
  8057  0737  00B4               	movwf	??___ftmul
  8058  0738  082F               	movf	___ftmul@f1+1,w
  8059  0739  00B5               	movwf	??___ftmul+1
  8060  073A  0830               	movf	___ftmul@f1+2,w
  8061  073B  00B6               	movwf	??___ftmul+2
  8062  073C  3010               	movlw	16
  8063  073D                     u8525:	
  8064  073D  36B6               	lsrf	??___ftmul+2,f
  8065  073E  0CB5               	rrf	??___ftmul+1,f
  8066  073F  0CB4               	rrf	??___ftmul,f
  8067  0740  0B89               	decfsz	9,f
  8068  0741  2F3D               	goto	u8525
  8069  0742  0834               	movf	??___ftmul,w
  8070  0743  00B7               	movwf	??___ftmul+3
  8071  0744  0837               	movf	??___ftmul+3,w
  8072  0745  00BD               	movwf	___ftmul@sign
  8073  0746  0831               	movf	___ftmul@f2,w
  8074  0747  00B4               	movwf	??___ftmul
  8075  0748  0832               	movf	___ftmul@f2+1,w
  8076  0749  00B5               	movwf	??___ftmul+1
  8077  074A  0833               	movf	___ftmul@f2+2,w
  8078  074B  00B6               	movwf	??___ftmul+2
  8079  074C  3010               	movlw	16
  8080  074D                     u8535:	
  8081  074D  36B6               	lsrf	??___ftmul+2,f
  8082  074E  0CB5               	rrf	??___ftmul+1,f
  8083  074F  0CB4               	rrf	??___ftmul,f
  8084  0750  0B89               	decfsz	9,f
  8085  0751  2F4D               	goto	u8535
  8086  0752  0834               	movf	??___ftmul,w
  8087  0753  00B7               	movwf	??___ftmul+3
  8088  0754  0837               	movf	??___ftmul+3,w
  8089  0755  06BD               	xorwf	___ftmul@sign,f
  8090  0756  3080               	movlw	128
  8091  0757  00B4               	movwf	??___ftmul
  8092  0758  0834               	movf	??___ftmul,w
  8093  0759  05BD               	andwf	___ftmul@sign,f
  8094  075A  17AF               	bsf	___ftmul@f1+1,7
  8095  075B  17B2               	bsf	___ftmul@f2+1,7
  8096  075C  30FF               	movlw	255
  8097  075D  05B1               	andwf	___ftmul@f2,f
  8098  075E  30FF               	movlw	255
  8099  075F  05B2               	andwf	___ftmul@f2+1,f
  8100  0760  3000               	movlw	0
  8101  0761  05B3               	andwf	___ftmul@f2+2,f
  8102  0762  3000               	movlw	0
  8103  0763  00B9               	movwf	___ftmul@f3_as_product
  8104  0764  3000               	movlw	0
  8105  0765  00BA               	movwf	___ftmul@f3_as_product+1
  8106  0766  3000               	movlw	0
  8107  0767  00BB               	movwf	___ftmul@f3_as_product+2
  8108  0768  3007               	movlw	7
  8109  0769  00B4               	movwf	??___ftmul
  8110  076A  0834               	movf	??___ftmul,w
  8111  076B  00BC               	movwf	___ftmul@cntr
  8112  076C                     l8170:	
  8113  076C  1C2E               	btfss	___ftmul@f1,0
  8114  076D  2F74               	goto	l8174
  8115  076E  0831               	movf	___ftmul@f2,w
  8116  076F  07B9               	addwf	___ftmul@f3_as_product,f
  8117  0770  0832               	movf	___ftmul@f2+1,w
  8118  0771  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8119  0772  0833               	movf	___ftmul@f2+2,w
  8120  0773  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8121  0774                     l8174:	
  8122  0774  3001               	movlw	1
  8123  0775                     u8555:	
  8124  0775  36B0               	lsrf	___ftmul@f1+2,f
  8125  0776  0CAF               	rrf	___ftmul@f1+1,f
  8126  0777  0CAE               	rrf	___ftmul@f1,f
  8127  0778  0B89               	decfsz	9,f
  8128  0779  2F75               	goto	u8555
  8129  077A  3001               	movlw	1
  8130  077B                     u8565:	
  8131  077B  35B1               	lslf	___ftmul@f2,f
  8132  077C  0DB2               	rlf	___ftmul@f2+1,f
  8133  077D  0DB3               	rlf	___ftmul@f2+2,f
  8134  077E  0B89               	decfsz	9,f
  8135  077F  2F7B               	goto	u8565
  8136  0780  3001               	movlw	1
  8137  0781  02BC               	subwf	___ftmul@cntr,f
  8138  0782  1D03               	btfss	3,2
  8139  0783  2F6C               	goto	l8170
  8140  0784  3009               	movlw	9
  8141  0785  00B4               	movwf	??___ftmul
  8142  0786  0834               	movf	??___ftmul,w
  8143  0787  00BC               	movwf	___ftmul@cntr
  8144  0788                     l8182:	
  8145  0788  1C2E               	btfss	___ftmul@f1,0
  8146  0789  2F90               	goto	l8186
  8147  078A  0831               	movf	___ftmul@f2,w
  8148  078B  07B9               	addwf	___ftmul@f3_as_product,f
  8149  078C  0832               	movf	___ftmul@f2+1,w
  8150  078D  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8151  078E  0833               	movf	___ftmul@f2+2,w
  8152  078F  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8153  0790                     l8186:	
  8154  0790  3001               	movlw	1
  8155  0791                     u8595:	
  8156  0791  36B0               	lsrf	___ftmul@f1+2,f
  8157  0792  0CAF               	rrf	___ftmul@f1+1,f
  8158  0793  0CAE               	rrf	___ftmul@f1,f
  8159  0794  0B89               	decfsz	9,f
  8160  0795  2F91               	goto	u8595
  8161  0796  3001               	movlw	1
  8162  0797                     u8605:	
  8163  0797  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8164  0798  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8165  0799  0CB9               	rrf	___ftmul@f3_as_product,f
  8166  079A  0B89               	decfsz	9,f
  8167  079B  2F97               	goto	u8605
  8168  079C  3001               	movlw	1
  8169  079D  02BC               	subwf	___ftmul@cntr,f
  8170  079E  1D03               	btfss	3,2
  8171  079F  2F88               	goto	l8182
  8172  07A0  0839               	movf	___ftmul@f3_as_product,w
  8173  07A1  00A0               	movwf	___ftpack@arg
  8174  07A2  083A               	movf	___ftmul@f3_as_product+1,w
  8175  07A3  00A1               	movwf	___ftpack@arg+1
  8176  07A4  083B               	movf	___ftmul@f3_as_product+2,w
  8177  07A5  00A2               	movwf	___ftpack@arg+2
  8178  07A6  0838               	movf	___ftmul@exp,w
  8179  07A7  00B4               	movwf	??___ftmul
  8180  07A8  0834               	movf	??___ftmul,w
  8181  07A9  00A3               	movwf	___ftpack@exp
  8182  07AA  083D               	movf	___ftmul@sign,w
  8183  07AB  00B5               	movwf	??___ftmul+1
  8184  07AC  0835               	movf	??___ftmul+1,w
  8185  07AD  00A4               	movwf	___ftpack@sign
  8186  07AE  3189  218C         	fcall	___ftpack
  8187  07B0  0020               	movlb	0	; select bank0
  8188  07B1  0820               	movf	?___ftpack,w
  8189  07B2  00AE               	movwf	?___ftmul
  8190  07B3  0821               	movf	?___ftpack+1,w
  8191  07B4  00AF               	movwf	?___ftmul+1
  8192  07B5  0822               	movf	?___ftpack+2,w
  8193  07B6  00B0               	movwf	?___ftmul+2
  8194  07B7  0008               	return
  8195  07B8                     __end_of___ftmul:	
  8196                           
  8197                           	psect	text34
  8198  1E2C                     __ptext34:	
  8199 ;; *************** function _setMemory_Modify *****************
  8200 ;; Defined at:
  8201 ;;		line 1067 in file "../src/MCU_B1.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;  command         1    wreg     unsigned char 
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;  command         1    1[BANK0 ] unsigned char 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;		None               void
  8208 ;; Registers used:
  8209 ;;		wreg, status,2, status,0
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;Total ram usage:        2 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    5
  8222 ;; This function calls:
  8223 ;;		Nothing
  8224 ;; This function is called by:
  8225 ;;		_setLog_Code
  8226 ;;		_setRFSW_AdjControl
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           
  8231                           ;psect for function _setMemory_Modify
  8232  1E2C                     _setMemory_Modify:	
  8233                           
  8234                           ;incstack = 0
  8235                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8236                           ;setMemory_Modify@command stored from wreg
  8237  1E2C  0020               	movlb	0	; select bank0
  8238  1E2D  00A1               	movwf	setMemory_Modify@command
  8239                           
  8240                           ;MCU_B1.c: 1068: Memory.Modify = command == 1 ? 1 : 0;
  8241  1E2E  0821               	movf	setMemory_Modify@command,w
  8242  1E2F  3A01               	xorlw	1
  8243  1E30  3000               	movlw	0
  8244  1E31  1903               	skipnz
  8245  1E32  3001               	movlw	1
  8246  1E33  00A0               	movwf	??_setMemory_Modify
  8247  1E34  0023               	movlb	3	; select bank3
  8248  1E35  0862               	movf	(_Memory^(0+384)+36),w
  8249  1E36  0020               	movlb	0	; select bank0
  8250  1E37  0620               	xorwf	??_setMemory_Modify,w
  8251  1E38  39FE               	andlw	-2
  8252  1E39  0620               	xorwf	??_setMemory_Modify,w
  8253  1E3A  0023               	movlb	3	; select bank3
  8254  1E3B  00E2               	movwf	(_Memory^(0+384)+36)
  8255                           
  8256                           ;MCU_B1.c: 1069: Memory.Time = 0;
  8257  1E3C  01E0               	clrf	(_Memory^(0+384)+34)
  8258  1E3D  01E1               	clrf	((_Memory+1)^(0+384)+34)
  8259  1E3E  0008               	return
  8260  1E3F                     __end_of_setMemory_Modify:	
  8261                           
  8262                           	psect	text35
  8263  1DC2                     __ptext35:	
  8264 ;; *************** function _getRF_KeyStatus *****************
  8265 ;; Defined at:
  8266 ;;		line 157 in file "../src/RF_Control_B1.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;		None
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;  key             1    1[BANK0 ] unsigned char 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  1    wreg      unsigned char 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;Total ram usage:        3 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    5
  8287 ;; This function calls:
  8288 ;;		Nothing
  8289 ;; This function is called by:
  8290 ;;		_setRF_Main
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           
  8295                           ;psect for function _getRF_KeyStatus
  8296  1DC2                     _getRF_KeyStatus:	
  8297                           
  8298                           ;RF_Control_B1.c: 158: char key = 0;
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8302  1DC2  0020               	movlb	0	; select bank0
  8303  1DC3  01A1               	clrf	getRF_KeyStatus@key
  8304                           
  8305                           ;RF_Control_B1.c: 168: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8306  1DC4  01A2               	clrf	_getRF_KeyStatus$5046
  8307  1DC5  0AA2               	incf	_getRF_KeyStatus$5046,f
  8308  1DC6  1F0C               	btfss	12,6	;volatile
  8309  1DC7  1A0C               	btfsc	12,4	;volatile
  8310  1DC8  2DCD               	goto	l9070
  8311  1DC9  1C0C               	btfss	12,0	;volatile
  8312  1DCA  1B8C               	btfsc	12,7	;volatile
  8313  1DCB  2DCD               	goto	l9070
  8314  1DCC  01A2               	clrf	_getRF_KeyStatus$5046
  8315  1DCD                     l9070:	
  8316  1DCD  0822               	movf	_getRF_KeyStatus$5046,w
  8317  1DCE  00A0               	movwf	??_getRF_KeyStatus
  8318  1DCF  0820               	movf	??_getRF_KeyStatus,w
  8319  1DD0  00A1               	movwf	getRF_KeyStatus@key
  8320                           
  8321                           ;RF_Control_B1.c: 170: return key;
  8322  1DD1  0821               	movf	getRF_KeyStatus@key,w
  8323  1DD2  0008               	return
  8324  1DD3                     __end_of_getRF_KeyStatus:	
  8325                           
  8326                           	psect	text36
  8327  1DB1                     __ptext36:	
  8328 ;; *************** function _getBuz_GO *****************
  8329 ;; Defined at:
  8330 ;;		line 82 in file "../src/Buzzer_B1.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;		None
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;  i               2    4[BANK0 ] int 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  2    0[BANK0 ] int 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8344 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;Total ram usage:        6 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    5
  8351 ;; This function calls:
  8352 ;;		Nothing
  8353 ;; This function is called by:
  8354 ;;		_setRF_Main
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           
  8359                           ;psect for function _getBuz_GO
  8360  1DB1                     _getBuz_GO:	
  8361                           
  8362                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8363                           
  8364                           ;incstack = 0
  8365                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8366  1DB1  0021               	movlb	1	; select bank1
  8367  1DB2  0C2E               	rrf	_Buz1^(0+128),w
  8368  1DB3  3901               	andlw	1
  8369  1DB4  0020               	movlb	0	; select bank0
  8370  1DB5  00A2               	movwf	??_getBuz_GO
  8371  1DB6  01A3               	clrf	??_getBuz_GO+1
  8372  1DB7  0822               	movf	??_getBuz_GO,w
  8373  1DB8  00A4               	movwf	getBuz_GO@i
  8374  1DB9  0823               	movf	??_getBuz_GO+1,w
  8375  1DBA  00A5               	movwf	getBuz_GO@i+1
  8376                           
  8377                           ;Buzzer_B1.c: 84: return i;
  8378  1DBB  0825               	movf	getBuz_GO@i+1,w
  8379  1DBC  01A1               	clrf	?_getBuz_GO+1
  8380  1DBD  07A1               	addwf	?_getBuz_GO+1,f
  8381  1DBE  0824               	movf	getBuz_GO@i,w
  8382  1DBF  01A0               	clrf	?_getBuz_GO
  8383  1DC0  07A0               	addwf	?_getBuz_GO,f
  8384  1DC1  0008               	return
  8385  1DC2                     __end_of_getBuz_GO:	
  8386                           
  8387                           	psect	text37
  8388  1D62                     __ptext37:	
  8389 ;; *************** function _RF_RxDisable *****************
  8390 ;; Defined at:
  8391 ;;		line 230 in file "../src/RF_Control_B1.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;		None
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;		None
  8396 ;; Return value:  Size  Location     Type
  8397 ;;		None               void
  8398 ;; Registers used:
  8399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8400 ;; Tracked objects:
  8401 ;;		On entry : 0/0
  8402 ;;		On exit  : 0/0
  8403 ;;		Unchanged: 0/0
  8404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;Total ram usage:        0 bytes
  8410 ;; Hardware stack levels used:    1
  8411 ;; Hardware stack levels required when called:    7
  8412 ;; This function calls:
  8413 ;;		_CC2500_WriteCommand
  8414 ;; This function is called by:
  8415 ;;		_setRF_Main
  8416 ;; This function uses a non-reentrant model
  8417 ;;
  8418                           
  8419                           
  8420                           ;psect for function _RF_RxDisable
  8421  1D62                     _RF_RxDisable:	
  8422                           
  8423                           ;RF_Control_B1.c: 231: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8424                           
  8425                           ;incstack = 0
  8426                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8427  1D62  0021               	movlb	1	; select bank1
  8428  1D63  18BA               	btfsc	_RF1^(0+128),1
  8429  1D64  2D67               	goto	l2080
  8430  1D65  1DBA               	btfss	_RF1^(0+128),3
  8431  1D66  0008               	return
  8432  1D67                     l2080:	
  8433                           
  8434                           ;RF_Control_B1.c: 232: RF1.RxStatus = 0;
  8435  1D67  11BA               	bcf	_RF1^(0+128),3
  8436                           
  8437                           ;RF_Control_B1.c: 233: RF1.ReceiveGO = 0;
  8438  1D68  10BA               	bcf	_RF1^(0+128),1
  8439                           
  8440                           ;RF_Control_B1.c: 234: CC2500_WriteCommand(0x36);
  8441  1D69  3036               	movlw	54
  8442  1D6A  319E  26BE  319D   	fcall	_CC2500_WriteCommand
  8443                           
  8444                           ;RF_Control_B1.c: 235: CC2500_WriteCommand(0x3A);
  8445  1D6D  303A               	movlw	58
  8446  1D6E  319E  26BE         	fcall	_CC2500_WriteCommand
  8447  1D70  0008               	return
  8448  1D71                     __end_of_RF_RxDisable:	
  8449                           
  8450                           	psect	text38
  8451  0AB7                     __ptext38:	
  8452 ;; *************** function _CC2500_TxData *****************
  8453 ;; Defined at:
  8454 ;;		line 32 in file "../src/CC2500_B1.c"
  8455 ;; Parameters:    Size  Location     Type
  8456 ;;		None
  8457 ;; Auto vars:     Size  Location     Type
  8458 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8459 ;; Return value:  Size  Location     Type
  8460 ;;		None               void
  8461 ;; Registers used:
  8462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8463 ;; Tracked objects:
  8464 ;;		On entry : 0/0
  8465 ;;		On exit  : 0/0
  8466 ;;		Unchanged: 0/0
  8467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;Total ram usage:        2 bytes
  8473 ;; Hardware stack levels used:    1
  8474 ;; Hardware stack levels required when called:    7
  8475 ;; This function calls:
  8476 ;;		_CC2500_WriteByte
  8477 ;;		_CC2500_WriteCommand
  8478 ;;		_Timeout_Counter
  8479 ;;		_set_TimeoutCleared
  8480 ;; This function is called by:
  8481 ;;		_setRF_Main
  8482 ;; This function uses a non-reentrant model
  8483 ;;
  8484                           
  8485                           
  8486                           ;psect for function _CC2500_TxData
  8487  0AB7                     _CC2500_TxData:	
  8488                           
  8489                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8490                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8491                           
  8492                           ;incstack = 0
  8493                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8494  0AB7  3036               	movlw	54
  8495  0AB8  319E  26BE  318A   	fcall	_CC2500_WriteCommand
  8496                           
  8497                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8498  0ABB  303B               	movlw	59
  8499  0ABC  319E  26BE  318A   	fcall	_CC2500_WriteCommand
  8500                           
  8501                           ;CC2500_B1.c: 38: RC0 = 0;
  8502  0ABF  0020               	movlb	0	; select bank0
  8503  0AC0  100E               	bcf	14,0	;volatile
  8504                           
  8505                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8506  0AC1  307F               	movlw	127
  8507  0AC2  00A4               	movwf	??_CC2500_TxData
  8508  0AC3  0824               	movf	??_CC2500_TxData,w
  8509  0AC4  0021               	movlb	1	; select bank1
  8510  0AC5  00D1               	movwf	_SPI0Buffer^(0+128)
  8511                           
  8512                           ;CC2500_B1.c: 40: while (RC5 == 1 && myMain.Timeout == 0) {
  8513  0AC6  2ACA               	goto	l8772
  8514  0AC7                     l8770:	
  8515                           
  8516                           ;CC2500_B1.c: 41: Timeout_Counter();
  8517  0AC7  319E  2666  318A   	fcall	_Timeout_Counter
  8518  0ACA                     l8772:	
  8519  0ACA  0020               	movlb	0	; select bank0
  8520  0ACB  1E8E               	btfss	14,5	;volatile
  8521  0ACC  2AD0               	goto	l8776
  8522  0ACD  0021               	movlb	1	; select bank1
  8523  0ACE  1D2B               	btfss	(_myMain^(0+128)+11),2
  8524  0ACF  2AC7               	goto	l8770
  8525  0AD0                     l8776:	
  8526                           
  8527                           ;CC2500_B1.c: 42: };
  8528                           ;CC2500_B1.c: 43: set_TimeoutCleared();
  8529  0AD0  319C  2426  318A   	fcall	_set_TimeoutCleared
  8530                           
  8531                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8532  0AD3  319E  26A5  318A   	fcall	_CC2500_WriteByte
  8533                           
  8534                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8535  0AD6  0021               	movlb	1	; select bank1
  8536  0AD7  0853               	movf	_Tx_Length^(0+128),w
  8537  0AD8  0020               	movlb	0	; select bank0
  8538  0AD9  00A4               	movwf	??_CC2500_TxData
  8539  0ADA  0824               	movf	??_CC2500_TxData,w
  8540  0ADB  0021               	movlb	1	; select bank1
  8541  0ADC  00D1               	movwf	_SPI0Buffer^(0+128)
  8542                           
  8543                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8544  0ADD  319E  26A5  318A   	fcall	_CC2500_WriteByte
  8545                           
  8546                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8547  0AE0  0020               	movlb	0	; select bank0
  8548  0AE1  01A5               	clrf	CC2500_TxData@loop_e
  8549  0AE2                     l8790:	
  8550  0AE2  0021               	movlb	1	; select bank1
  8551  0AE3  0853               	movf	_Tx_Length^(0+128),w
  8552  0AE4  0020               	movlb	0	; select bank0
  8553  0AE5  0225               	subwf	CC2500_TxData@loop_e,w
  8554  0AE6  1803               	btfsc	3,0
  8555  0AE7  2AFB               	goto	l231
  8556                           
  8557                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8558  0AE8  0825               	movf	CC2500_TxData@loop_e,w
  8559  0AE9  3EA0               	addlw	_RF_Data& (0+255)
  8560  0AEA  0086               	movwf	6
  8561  0AEB  3001               	movlw	1	; select bank3/4
  8562  0AEC  0087               	movwf	7
  8563  0AED  0801               	movf	1,w
  8564  0AEE  00A4               	movwf	??_CC2500_TxData
  8565  0AEF  0824               	movf	??_CC2500_TxData,w
  8566  0AF0  0021               	movlb	1	; select bank1
  8567  0AF1  00D1               	movwf	_SPI0Buffer^(0+128)
  8568                           
  8569                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8570  0AF2  319E  26A5  318A   	fcall	_CC2500_WriteByte
  8571  0AF5  3001               	movlw	1
  8572  0AF6  0020               	movlb	0	; select bank0
  8573  0AF7  00A4               	movwf	??_CC2500_TxData
  8574  0AF8  0824               	movf	??_CC2500_TxData,w
  8575  0AF9  07A5               	addwf	CC2500_TxData@loop_e,f
  8576  0AFA  2AE2               	goto	l8790
  8577  0AFB                     l231:	
  8578                           
  8579                           ;CC2500_B1.c: 51: }
  8580                           ;CC2500_B1.c: 52: RC0 = 1;
  8581  0AFB  140E               	bsf	14,0	;volatile
  8582                           
  8583                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8584  0AFC  3035               	movlw	53
  8585  0AFD  319E  26BE  318A   	fcall	_CC2500_WriteCommand
  8586                           
  8587                           ;CC2500_B1.c: 54: while (RC1 == 0 && myMain.Timeout == 0) {
  8588  0B00  2B04               	goto	l8796
  8589  0B01                     l8794:	
  8590                           
  8591                           ;CC2500_B1.c: 55: Timeout_Counter();
  8592  0B01  319E  2666  318A   	fcall	_Timeout_Counter
  8593  0B04                     l8796:	
  8594  0B04  0020               	movlb	0	; select bank0
  8595  0B05  188E               	btfsc	14,1	;volatile
  8596  0B06  2B0A               	goto	l8800
  8597  0B07  0021               	movlb	1	; select bank1
  8598  0B08  1D2B               	btfss	(_myMain^(0+128)+11),2
  8599  0B09  2B01               	goto	l8794
  8600  0B0A                     l8800:	
  8601                           
  8602                           ;CC2500_B1.c: 56: };
  8603                           ;CC2500_B1.c: 57: set_TimeoutCleared();
  8604  0B0A  319C  2426  318A   	fcall	_set_TimeoutCleared
  8605                           
  8606                           ;CC2500_B1.c: 59: while (RC1 == 1 && myMain.Timeout == 0) {
  8607  0B0D  2B11               	goto	l8804
  8608  0B0E                     l8802:	
  8609                           
  8610                           ;CC2500_B1.c: 60: Timeout_Counter();
  8611  0B0E  319E  2666  318A   	fcall	_Timeout_Counter
  8612  0B11                     l8804:	
  8613  0B11  0020               	movlb	0	; select bank0
  8614  0B12  1C8E               	btfss	14,1	;volatile
  8615  0B13  2B17               	goto	l8808
  8616  0B14  0021               	movlb	1	; select bank1
  8617  0B15  1D2B               	btfss	(_myMain^(0+128)+11),2
  8618  0B16  2B0E               	goto	l8802
  8619  0B17                     l8808:	
  8620                           
  8621                           ;CC2500_B1.c: 61: };
  8622                           ;CC2500_B1.c: 62: set_TimeoutCleared();
  8623  0B17  319C  2426  318A   	fcall	_set_TimeoutCleared
  8624                           
  8625                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8626  0B1A  3036               	movlw	54
  8627  0B1B  319E  26BE  318A   	fcall	_CC2500_WriteCommand
  8628                           
  8629                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8630  0B1E  303B               	movlw	59
  8631  0B1F  319E  26BE         	fcall	_CC2500_WriteCommand
  8632                           
  8633                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8634  0B21  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8635  0B22  0008               	return
  8636  0B23                     __end_of_CC2500_TxData:	
  8637                           
  8638                           	psect	text39
  8639  0B90                     __ptext39:	
  8640 ;; *************** function _CC2500_RxData *****************
  8641 ;; Defined at:
  8642 ;;		line 73 in file "../src/CC2500_B1.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;		None
  8645 ;; Auto vars:     Size  Location     Type
  8646 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8647 ;; Return value:  Size  Location     Type
  8648 ;;		None               void
  8649 ;; Registers used:
  8650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;Total ram usage:        2 bytes
  8661 ;; Hardware stack levels used:    1
  8662 ;; Hardware stack levels required when called:    7
  8663 ;; This function calls:
  8664 ;;		_CC2500_ReadByte
  8665 ;;		_CC2500_ReadStatus
  8666 ;;		_CC2500_WriteByte
  8667 ;;		_CC2500_WriteCommand
  8668 ;;		_Timeout_Counter
  8669 ;;		_set_TimeoutCleared
  8670 ;; This function is called by:
  8671 ;;		_setRF_Main
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           
  8676                           ;psect for function _CC2500_RxData
  8677  0B90                     _CC2500_RxData:	
  8678                           
  8679                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8680                           ;CC2500_B1.c: 78: if (RC1 == 1)
  8681                           
  8682                           ;incstack = 0
  8683                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8684  0B90  0020               	movlb	0	; select bank0
  8685  0B91  188E               	btfsc	14,1	;volatile
  8686  0B92  2B97               	goto	l8822
  8687  0B93  2BA0               	goto	l8828
  8688  0B94                     l8820:	
  8689                           ;CC2500_B1.c: 79: {
  8690                           ;CC2500_B1.c: 80: while (RC1 == 1 && myMain.Timeout == 0) {
  8691                           
  8692                           
  8693                           ;CC2500_B1.c: 81: Timeout_Counter();
  8694  0B94  319E  2666  318B   	fcall	_Timeout_Counter
  8695  0B97                     l8822:	
  8696  0B97  0020               	movlb	0	; select bank0
  8697  0B98  1C8E               	btfss	14,1	;volatile
  8698  0B99  2B9D               	goto	l8826
  8699  0B9A  0021               	movlb	1	; select bank1
  8700  0B9B  1D2B               	btfss	(_myMain^(0+128)+11),2
  8701  0B9C  2B94               	goto	l8820
  8702  0B9D                     l8826:	
  8703                           
  8704                           ;CC2500_B1.c: 82: };
  8705                           ;CC2500_B1.c: 83: set_TimeoutCleared();
  8706  0B9D  319C  2426  318B   	fcall	_set_TimeoutCleared
  8707  0BA0                     l8828:	
  8708                           
  8709                           ;CC2500_B1.c: 84: }
  8710                           ;CC2500_B1.c: 86: CC2500_ReadStatus(0x3B);
  8711  0BA0  303B               	movlw	59
  8712  0BA1  3190  20D8  318B   	fcall	_CC2500_ReadStatus
  8713                           
  8714                           ;CC2500_B1.c: 88: if (s_data != 0) {
  8715  0BA4  0021               	movlb	1	; select bank1
  8716  0BA5  0856               	movf	_s_data^(0+128),w
  8717  0BA6  1903               	btfsc	3,2
  8718  0BA7  0008               	return
  8719                           
  8720                           ;CC2500_B1.c: 89: RC0 = 0;
  8721  0BA8  0020               	movlb	0	; select bank0
  8722  0BA9  100E               	bcf	14,0	;volatile
  8723                           
  8724                           ;CC2500_B1.c: 90: SPI0Buffer = 0x3F + 0xC0;
  8725  0BAA  30FF               	movlw	255
  8726  0BAB  00A4               	movwf	??_CC2500_RxData
  8727  0BAC  0824               	movf	??_CC2500_RxData,w
  8728  0BAD  0021               	movlb	1	; select bank1
  8729  0BAE  00D1               	movwf	_SPI0Buffer^(0+128)
  8730                           
  8731                           ;CC2500_B1.c: 91: while (RC5 == 1 && myMain.Timeout == 0) {
  8732  0BAF  2BB3               	goto	l8838
  8733  0BB0                     l8836:	
  8734                           
  8735                           ;CC2500_B1.c: 92: Timeout_Counter();
  8736  0BB0  319E  2666  318B   	fcall	_Timeout_Counter
  8737  0BB3                     l8838:	
  8738  0BB3  0020               	movlb	0	; select bank0
  8739  0BB4  1E8E               	btfss	14,5	;volatile
  8740  0BB5  2BB9               	goto	l8842
  8741  0BB6  0021               	movlb	1	; select bank1
  8742  0BB7  1D2B               	btfss	(_myMain^(0+128)+11),2
  8743  0BB8  2BB0               	goto	l8836
  8744  0BB9                     l8842:	
  8745                           
  8746                           ;CC2500_B1.c: 93: };
  8747                           ;CC2500_B1.c: 94: set_TimeoutCleared();
  8748  0BB9  319C  2426  318B   	fcall	_set_TimeoutCleared
  8749                           
  8750                           ;CC2500_B1.c: 95: CC2500_WriteByte();
  8751  0BBC  319E  26A5  318B   	fcall	_CC2500_WriteByte
  8752                           
  8753                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8754  0BBF  319F  2744  318B   	fcall	_CC2500_ReadByte
  8755                           
  8756                           ;CC2500_B1.c: 98: Rx_Length = SPI0Buffer;
  8757  0BC2  0021               	movlb	1	; select bank1
  8758  0BC3  0851               	movf	_SPI0Buffer^(0+128),w
  8759  0BC4  0020               	movlb	0	; select bank0
  8760  0BC5  00A4               	movwf	??_CC2500_RxData
  8761  0BC6  0824               	movf	??_CC2500_RxData,w
  8762  0BC7  0021               	movlb	1	; select bank1
  8763  0BC8  00D0               	movwf	_Rx_Length^(0+128)
  8764                           
  8765                           ;CC2500_B1.c: 99: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8766  0BC9  0020               	movlb	0	; select bank0
  8767  0BCA  01A5               	clrf	CC2500_RxData@loop_f
  8768  0BCB                     l8858:	
  8769  0BCB  0021               	movlb	1	; select bank1
  8770  0BCC  0850               	movf	_Rx_Length^(0+128),w
  8771  0BCD  0020               	movlb	0	; select bank0
  8772  0BCE  0225               	subwf	CC2500_RxData@loop_f,w
  8773  0BCF  1803               	btfsc	3,0
  8774  0BD0  2BE4               	goto	l8860
  8775                           
  8776                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8777  0BD1  319F  2744  318B   	fcall	_CC2500_ReadByte
  8778                           
  8779                           ;CC2500_B1.c: 101: RF_Data[loop_f] = SPI0Buffer;
  8780  0BD4  0021               	movlb	1	; select bank1
  8781  0BD5  0851               	movf	_SPI0Buffer^(0+128),w
  8782  0BD6  0020               	movlb	0	; select bank0
  8783  0BD7  00A4               	movwf	??_CC2500_RxData
  8784  0BD8  0825               	movf	CC2500_RxData@loop_f,w
  8785  0BD9  3EA0               	addlw	_RF_Data& (0+255)
  8786  0BDA  0086               	movwf	6
  8787  0BDB  3001               	movlw	1	; select bank3/4
  8788  0BDC  0087               	movwf	7
  8789  0BDD  0824               	movf	??_CC2500_RxData,w
  8790  0BDE  0081               	movwf	1
  8791  0BDF  3001               	movlw	1
  8792  0BE0  00A4               	movwf	??_CC2500_RxData
  8793  0BE1  0824               	movf	??_CC2500_RxData,w
  8794  0BE2  07A5               	addwf	CC2500_RxData@loop_f,f
  8795  0BE3  2BCB               	goto	l8858
  8796  0BE4                     l8860:	
  8797                           
  8798                           ;CC2500_B1.c: 102: }
  8799                           ;CC2500_B1.c: 103: CC2500_ReadByte();
  8800  0BE4  319F  2744  318B   	fcall	_CC2500_ReadByte
  8801                           
  8802                           ;CC2500_B1.c: 104: RSSI = SPI0Buffer;
  8803  0BE7  0021               	movlb	1	; select bank1
  8804  0BE8  0851               	movf	_SPI0Buffer^(0+128),w
  8805  0BE9  0020               	movlb	0	; select bank0
  8806  0BEA  00A4               	movwf	??_CC2500_RxData
  8807  0BEB  0824               	movf	??_CC2500_RxData,w
  8808  0BEC  0021               	movlb	1	; select bank1
  8809  0BED  00CF               	movwf	_RSSI^(0+128)
  8810                           
  8811                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8812  0BEE  319F  2744  318B   	fcall	_CC2500_ReadByte
  8813                           
  8814                           ;CC2500_B1.c: 106: CRC = SPI0Buffer;
  8815  0BF1  0021               	movlb	1	; select bank1
  8816  0BF2  0851               	movf	_SPI0Buffer^(0+128),w
  8817  0BF3  0020               	movlb	0	; select bank0
  8818  0BF4  00A4               	movwf	??_CC2500_RxData
  8819  0BF5  0824               	movf	??_CC2500_RxData,w
  8820  0BF6  0021               	movlb	1	; select bank1
  8821  0BF7  00CB               	movwf	_CRC^(0+128)
  8822                           
  8823                           ;CC2500_B1.c: 107: RC0 = 1;
  8824  0BF8  0020               	movlb	0	; select bank0
  8825  0BF9  140E               	bsf	14,0	;volatile
  8826                           
  8827                           ;CC2500_B1.c: 108: if (CRC & 0x80)
  8828  0BFA  0021               	movlb	1	; select bank1
  8829  0BFB  1BCB               	btfsc	_CRC^(0+128),7
  8830                           
  8831                           ;CC2500_B1.c: 109: Receive_OK = 1;
  8832  0BFC  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8833                           
  8834                           ;CC2500_B1.c: 112: RF1.RxStatus = 0;
  8835  0BFD  11BA               	bcf	_RF1^(0+128),3
  8836                           
  8837                           ;CC2500_B1.c: 113: RF1.ReceiveGO = 1;
  8838  0BFE  14BA               	bsf	_RF1^(0+128),1
  8839                           
  8840                           ;CC2500_B1.c: 114: CC2500_WriteCommand(0x36);
  8841  0BFF  3036               	movlw	54
  8842  0C00  319E  26BE  318B   	fcall	_CC2500_WriteCommand
  8843                           
  8844                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x3A);
  8845  0C03  303A               	movlw	58
  8846  0C04  319E  26BE         	fcall	_CC2500_WriteCommand
  8847  0C06  0021               	movlb	1	; select bank1
  8848  0C07  0008               	return
  8849  0C08                     __end_of_CC2500_RxData:	
  8850                           
  8851                           	psect	text40
  8852  10D8                     __ptext40:	
  8853 ;; *************** function _CC2500_ReadStatus *****************
  8854 ;; Defined at:
  8855 ;;		line 306 in file "../src/CC2500_B1.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;  status_addr     1    wreg     unsigned char 
  8858 ;; Auto vars:     Size  Location     Type
  8859 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8860 ;; Return value:  Size  Location     Type
  8861 ;;		None               void
  8862 ;; Registers used:
  8863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8864 ;; Tracked objects:
  8865 ;;		On entry : 0/0
  8866 ;;		On exit  : 0/0
  8867 ;;		Unchanged: 0/0
  8868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;Total ram usage:        2 bytes
  8874 ;; Hardware stack levels used:    1
  8875 ;; Hardware stack levels required when called:    6
  8876 ;; This function calls:
  8877 ;;		_CC2500_ReadByte
  8878 ;;		_CC2500_WriteByte
  8879 ;;		_Timeout_Counter
  8880 ;;		_set_TimeoutCleared
  8881 ;; This function is called by:
  8882 ;;		_CC2500_RxData
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           
  8887                           ;psect for function _CC2500_ReadStatus
  8888  10D8                     _CC2500_ReadStatus:	
  8889                           
  8890                           ;incstack = 0
  8891                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8892                           ;CC2500_ReadStatus@status_addr stored from wreg
  8893  10D8  0020               	movlb	0	; select bank0
  8894  10D9  00A3               	movwf	CC2500_ReadStatus@status_addr
  8895                           
  8896                           ;CC2500_B1.c: 307: RC0 = 0;
  8897  10DA  100E               	bcf	14,0	;volatile
  8898                           
  8899                           ;CC2500_B1.c: 308: SPI0Buffer = status_addr + 0xC0;
  8900  10DB  0823               	movf	CC2500_ReadStatus@status_addr,w
  8901  10DC  3EC0               	addlw	192
  8902  10DD  00A2               	movwf	??_CC2500_ReadStatus
  8903  10DE  0822               	movf	??_CC2500_ReadStatus,w
  8904  10DF  0021               	movlb	1	; select bank1
  8905  10E0  00D1               	movwf	_SPI0Buffer^(0+128)
  8906                           
  8907                           ;CC2500_B1.c: 310: while (RC5 == 1 && myMain.Timeout == 0) {
  8908  10E1  28E5               	goto	l8642
  8909  10E2                     l8640:	
  8910                           
  8911                           ;CC2500_B1.c: 311: Timeout_Counter();
  8912  10E2  319E  2666  3190   	fcall	_Timeout_Counter
  8913  10E5                     l8642:	
  8914  10E5  0020               	movlb	0	; select bank0
  8915  10E6  1E8E               	btfss	14,5	;volatile
  8916  10E7  28EB               	goto	l8646
  8917  10E8  0021               	movlb	1	; select bank1
  8918  10E9  1D2B               	btfss	(_myMain^(0+128)+11),2
  8919  10EA  28E2               	goto	l8640
  8920  10EB                     l8646:	
  8921                           
  8922                           ;CC2500_B1.c: 312: };
  8923                           ;CC2500_B1.c: 313: set_TimeoutCleared();
  8924  10EB  319C  2426  3190   	fcall	_set_TimeoutCleared
  8925                           
  8926                           ;CC2500_B1.c: 315: CC2500_WriteByte();
  8927  10EE  319E  26A5  3190   	fcall	_CC2500_WriteByte
  8928                           
  8929                           ;CC2500_B1.c: 316: CC2500_ReadByte();
  8930  10F1  319F  2744         	fcall	_CC2500_ReadByte
  8931                           
  8932                           ;CC2500_B1.c: 317: RC0 = 1;
  8933  10F3  0020               	movlb	0	; select bank0
  8934  10F4  140E               	bsf	14,0	;volatile
  8935                           
  8936                           ;CC2500_B1.c: 319: s_data = SPI0Buffer;
  8937  10F5  0021               	movlb	1	; select bank1
  8938  10F6  0851               	movf	_SPI0Buffer^(0+128),w
  8939  10F7  0020               	movlb	0	; select bank0
  8940  10F8  00A2               	movwf	??_CC2500_ReadStatus
  8941  10F9  0822               	movf	??_CC2500_ReadStatus,w
  8942  10FA  0021               	movlb	1	; select bank1
  8943  10FB  00D6               	movwf	_s_data^(0+128)
  8944  10FC  0008               	return
  8945  10FD                     __end_of_CC2500_ReadStatus:	
  8946                           
  8947                           	psect	text41
  8948  1F44                     __ptext41:	
  8949 ;; *************** function _CC2500_ReadByte *****************
  8950 ;; Defined at:
  8951 ;;		line 240 in file "../src/CC2500_B1.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;		None
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;		None               void
  8958 ;; Registers used:
  8959 ;;		wreg, status,2, status,0
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;Total ram usage:        2 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    5
  8972 ;; This function calls:
  8973 ;;		Nothing
  8974 ;; This function is called by:
  8975 ;;		_CC2500_RxData
  8976 ;;		_CC2500_ReadStatus
  8977 ;;		_CC2500_ReadREG
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           
  8982                           ;psect for function _CC2500_ReadByte
  8983  1F44                     _CC2500_ReadByte:	
  8984                           
  8985                           ;CC2500_B1.c: 241: unsigned char loop_b;
  8986                           ;CC2500_B1.c: 242: for (loop_b = 0; loop_b < 8; loop_b++) {
  8987                           
  8988                           ;incstack = 0
  8989                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8990  1F44  0020               	movlb	0	; select bank0
  8991  1F45  01A1               	clrf	CC2500_ReadByte@loop_b
  8992  1F46                     L2:	
  8993  1F46  3008               	movlw	8
  8994  1F47  0221               	subwf	CC2500_ReadByte@loop_b,w
  8995  1F48  1803               	btfsc	3,0
  8996  1F49  0008               	return
  8997                           
  8998                           ;CC2500_B1.c: 243: RC3 = 1;
  8999  1F4A  158E               	bsf	14,3	;volatile
  9000                           
  9001                           ;CC2500_B1.c: 244: SPI0Buffer <<= 1;
  9002  1F4B  1003               	clrc
  9003  1F4C  0021               	movlb	1	; select bank1
  9004  1F4D  0DD1               	rlf	_SPI0Buffer^(0+128),f
  9005                           
  9006                           ;CC2500_B1.c: 245: if (RC5 == 1)
  9007  1F4E  0020               	movlb	0	; select bank0
  9008  1F4F  1E8E               	btfss	14,5	;volatile
  9009  1F50  2F54               	goto	l8548
  9010                           
  9011                           ;CC2500_B1.c: 246: SPI0Buffer |= 0x01;
  9012  1F51  0021               	movlb	1	; select bank1
  9013  1F52  1451               	bsf	_SPI0Buffer^(0+128),0
  9014  1F53  2F5A               	goto	l8550
  9015  1F54                     l8548:	
  9016                           
  9017                           ;CC2500_B1.c: 247: else
  9018                           ;CC2500_B1.c: 248: SPI0Buffer &= 0xFE;
  9019  1F54  30FE               	movlw	254
  9020  1F55  0020               	movlb	0	; select bank0
  9021  1F56  00A0               	movwf	??_CC2500_ReadByte
  9022  1F57  0820               	movf	??_CC2500_ReadByte,w
  9023  1F58  0021               	movlb	1	; select bank1
  9024  1F59  05D1               	andwf	_SPI0Buffer^(0+128),f
  9025  1F5A                     l8550:	
  9026                           
  9027                           ;CC2500_B1.c: 249: RC3 = 0;
  9028  1F5A  0020               	movlb	0	; select bank0
  9029  1F5B  118E               	bcf	14,3	;volatile
  9030  1F5C  3001               	movlw	1
  9031  1F5D  00A0               	movwf	??_CC2500_ReadByte
  9032  1F5E  0820               	movf	??_CC2500_ReadByte,w
  9033  1F5F  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9034  1F60  2F46               	goto	L2
  9035  1F61                     __end_of_CC2500_ReadByte:	
  9036                           
  9037                           	psect	text42
  9038  1BFA                     __ptext42:	
  9039 ;; *************** function _RF_Initialization *****************
  9040 ;; Defined at:
  9041 ;;		line 9 in file "../src/RF_Control_B1.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;		None
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;		None
  9046 ;; Return value:  Size  Location     Type
  9047 ;;		None               void
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0, pclath, cstack
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;Total ram usage:        0 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    6
  9062 ;; This function calls:
  9063 ;;		_setRF_Initialization
  9064 ;; This function is called by:
  9065 ;;		_main
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function _RF_Initialization
  9071  1BFA                     _RF_Initialization:	
  9072                           
  9073                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9074                           
  9075                           ;incstack = 0
  9076                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9077  1BFA  319C  24CD         	fcall	_setRF_Initialization
  9078  1BFC  0008               	return
  9079  1BFD                     __end_of_RF_Initialization:	
  9080                           
  9081                           	psect	text43
  9082  1CCD                     __ptext43:	
  9083 ;; *************** function _setRF_Initialization *****************
  9084 ;; Defined at:
  9085 ;;		line 43 in file "../src/RF_Control_B1.c"
  9086 ;; Parameters:    Size  Location     Type
  9087 ;;		None
  9088 ;; Auto vars:     Size  Location     Type
  9089 ;;		None
  9090 ;; Return value:  Size  Location     Type
  9091 ;;		None               void
  9092 ;; Registers used:
  9093 ;;		wreg
  9094 ;; Tracked objects:
  9095 ;;		On entry : 0/0
  9096 ;;		On exit  : 0/0
  9097 ;;		Unchanged: 0/0
  9098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;Total ram usage:        1 bytes
  9104 ;; Hardware stack levels used:    1
  9105 ;; Hardware stack levels required when called:    5
  9106 ;; This function calls:
  9107 ;;		Nothing
  9108 ;; This function is called by:
  9109 ;;		_RF_Initialization
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           
  9114                           ;psect for function _setRF_Initialization
  9115  1CCD                     _setRF_Initialization:	
  9116                           
  9117                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9118                           
  9119                           ;incstack = 0
  9120                           ; Regs used in _setRF_Initialization: [wreg]
  9121  1CCD  3015               	movlw	21
  9122  1CCE  0020               	movlb	0	; select bank0
  9123  1CCF  00A0               	movwf	??_setRF_Initialization
  9124  1CD0  0820               	movf	??_setRF_Initialization,w
  9125  1CD1  0021               	movlb	1	; select bank1
  9126  1CD2  00D3               	movwf	_Tx_Length^(0+128)
  9127                           
  9128                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9129  1CD3  3005               	movlw	5
  9130  1CD4  00C1               	movwf	(_RF1^(0+128)+7)
  9131  1CD5  3000               	movlw	0
  9132  1CD6  00C2               	movwf	(_RF1^(0+128)+8)
  9133  1CD7  0008               	return
  9134  1CD8                     __end_of_setRF_Initialization:	
  9135                           
  9136                           	psect	text44
  9137  1E08                     __ptext44:	
  9138 ;; *************** function _Mcu_Initialization *****************
  9139 ;; Defined at:
  9140 ;;		line 30 in file "../src/MCU_B1.c"
  9141 ;; Parameters:    Size  Location     Type
  9142 ;;		None
  9143 ;; Auto vars:     Size  Location     Type
  9144 ;;		None
  9145 ;; Return value:  Size  Location     Type
  9146 ;;		None               void
  9147 ;; Registers used:
  9148 ;;		wreg, status,2, status,0, pclath, cstack
  9149 ;; Tracked objects:
  9150 ;;		On entry : 0/0
  9151 ;;		On exit  : 0/0
  9152 ;;		Unchanged: 0/0
  9153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;Total ram usage:        0 bytes
  9159 ;; Hardware stack levels used:    1
  9160 ;; Hardware stack levels required when called:    6
  9161 ;; This function calls:
  9162 ;;		_ADC_Set
  9163 ;;		_Fosc_Set
  9164 ;;		_IOC_Set
  9165 ;;		_IO_Set
  9166 ;;		_TMR1_Set
  9167 ;;		_WDT_Set
  9168 ;; This function is called by:
  9169 ;;		_main
  9170 ;; This function uses a non-reentrant model
  9171 ;;
  9172                           
  9173                           
  9174                           ;psect for function _Mcu_Initialization
  9175  1E08                     _Mcu_Initialization:	
  9176                           
  9177                           ;MCU_B1.c: 32: Fosc_Set();
  9178                           
  9179                           ;incstack = 0
  9180                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9181  1E08  3187  27FC  319E   	fcall	_Fosc_Set
  9182                           
  9183                           ;MCU_B1.c: 34: IO_Set();
  9184  1E0B  319E  26F2  319E   	fcall	_IO_Set
  9185                           
  9186                           ;MCU_B1.c: 36: ;;
  9187                           ;MCU_B1.c: 38: TMR1_Set();
  9188  1E0E  319D  252B  319E   	fcall	_TMR1_Set
  9189                           
  9190                           ;MCU_B1.c: 40: ADC_Set();
  9191  1E11  319C  2437  319E   	fcall	_ADC_Set
  9192                           
  9193                           ;MCU_B1.c: 42: ;;
  9194                           ;MCU_B1.c: 44: ;;
  9195                           ;MCU_B1.c: 46: IOC_Set();
  9196  1E14  319D  251F  319E   	fcall	_IOC_Set
  9197                           
  9198                           ;MCU_B1.c: 48: ;;
  9199                           ;MCU_B1.c: 50: ;;
  9200                           ;MCU_B1.c: 52: WDT_Set();
  9201  1E17  319C  24C2         	fcall	_WDT_Set
  9202  1E19  0008               	return
  9203  1E1A                     __end_of_Mcu_Initialization:	
  9204                           
  9205                           	psect	text45
  9206  1CC2                     __ptext45:	
  9207 ;; *************** function _WDT_Set *****************
  9208 ;; Defined at:
  9209 ;;		line 1086 in file "../src/MCU_B1.c"
  9210 ;; Parameters:    Size  Location     Type
  9211 ;;		None
  9212 ;; Auto vars:     Size  Location     Type
  9213 ;;		None
  9214 ;; Return value:  Size  Location     Type
  9215 ;;		None               void
  9216 ;; Registers used:
  9217 ;;		wreg
  9218 ;; Tracked objects:
  9219 ;;		On entry : 0/0
  9220 ;;		On exit  : 0/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;Total ram usage:        1 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:    5
  9230 ;; This function calls:
  9231 ;;		Nothing
  9232 ;; This function is called by:
  9233 ;;		_Mcu_Initialization
  9234 ;; This function uses a non-reentrant model
  9235 ;;
  9236                           
  9237                           
  9238                           ;psect for function _WDT_Set
  9239  1CC2                     _WDT_Set:	
  9240                           
  9241                           ;MCU_B1.c: 1093: WDTCON = 0b00010111;;
  9242                           
  9243                           ;incstack = 0
  9244                           ; Regs used in _WDT_Set: [wreg]
  9245  1CC2  3017               	movlw	23
  9246  1CC3  0021               	movlb	1	; select bank1
  9247  1CC4  0097               	movwf	23	;volatile
  9248                           
  9249                           ;MCU_B1.c: 1095: WDT.Enable = 1;
  9250  1CC5  1449               	bsf	_WDT^(0+128),0
  9251                           
  9252                           ;MCU_B1.c: 1096: WDT.Timer = 10;
  9253  1CC6  300A               	movlw	10
  9254  1CC7  0020               	movlb	0	; select bank0
  9255  1CC8  00A0               	movwf	??_WDT_Set
  9256  1CC9  0820               	movf	??_WDT_Set,w
  9257  1CCA  0021               	movlb	1	; select bank1
  9258  1CCB  00CA               	movwf	(_WDT^(0+128)+1)
  9259  1CCC  0008               	return
  9260  1CCD                     __end_of_WDT_Set:	
  9261                           
  9262                           	psect	text46
  9263  1D2B                     __ptext46:	
  9264 ;; *************** function _TMR1_Set *****************
  9265 ;; Defined at:
  9266 ;;		line 200 in file "../src/MCU_B1.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;		None
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;Total ram usage:        0 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    5
  9287 ;; This function calls:
  9288 ;;		Nothing
  9289 ;; This function is called by:
  9290 ;;		_Mcu_Initialization
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           
  9295                           ;psect for function _TMR1_Set
  9296  1D2B                     _TMR1_Set:	
  9297                           
  9298                           ;MCU_B1.c: 201: T1CON = (0x40 | 0x00 | 0x01);
  9299                           
  9300                           ;incstack = 0
  9301                           ; Regs used in _TMR1_Set: [wreg]
  9302  1D2B  3041               	movlw	65
  9303  1D2C  0020               	movlb	0	; select bank0
  9304  1D2D  0098               	movwf	24	;volatile
  9305                           
  9306                           ;MCU_B1.c: 202: TMR1H = (int)((65536-1480)/256);
  9307  1D2E  30FA               	movlw	250
  9308  1D2F  0097               	movwf	23	;volatile
  9309                           
  9310                           ;MCU_B1.c: 203: TMR1L = (int)((65536-1480)%256);
  9311  1D30  3038               	movlw	56
  9312  1D31  0096               	movwf	22	;volatile
  9313                           
  9314                           ;MCU_B1.c: 204: TMR1IE = 1;
  9315  1D32  0021               	movlb	1	; select bank1
  9316  1D33  1411               	bsf	17,0	;volatile
  9317                           
  9318                           ;MCU_B1.c: 205: PEIE = 1;
  9319  1D34  170B               	bsf	11,6	;volatile
  9320                           
  9321                           ;MCU_B1.c: 206: GIE = 1;
  9322  1D35  178B               	bsf	11,7	;volatile
  9323  1D36  0008               	return
  9324  1D37                     __end_of_TMR1_Set:	
  9325                           
  9326                           	psect	text47
  9327  1EF2                     __ptext47:	
  9328 ;; *************** function _IO_Set *****************
  9329 ;; Defined at:
  9330 ;;		line 60 in file "../src/MCU_B1.c"
  9331 ;; Parameters:    Size  Location     Type
  9332 ;;		None
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;		None
  9335 ;; Return value:  Size  Location     Type
  9336 ;;		None               void
  9337 ;; Registers used:
  9338 ;;		wreg, status,2
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;Total ram usage:        0 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    5
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		_Mcu_Initialization
  9355 ;; This function uses a non-reentrant model
  9356 ;;
  9357                           
  9358                           
  9359                           ;psect for function _IO_Set
  9360  1EF2                     _IO_Set:	
  9361                           
  9362                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9363                           
  9364                           ;incstack = 0
  9365                           ; Regs used in _IO_Set: [wreg+status,2]
  9366  1EF2  30F7               	movlw	247
  9367  1EF3  0021               	movlb	1	; select bank1
  9368  1EF4  008C               	movwf	12	;volatile
  9369                           
  9370                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9371  1EF5  3004               	movlw	4
  9372  1EF6  008D               	movwf	13	;volatile
  9373                           
  9374                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9375  1EF7  3026               	movlw	38
  9376  1EF8  008E               	movwf	14	;volatile
  9377                           
  9378                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9379  1EF9  0022               	movlb	2	; select bank2
  9380  1EFA  018C               	clrf	12	;volatile
  9381                           
  9382                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9383  1EFB  018D               	clrf	13	;volatile
  9384                           
  9385                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9386  1EFC  018E               	clrf	14	;volatile
  9387                           
  9388                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9389  1EFD  300E               	movlw	14
  9390  1EFE  0023               	movlb	3	; select bank3
  9391  1EFF  008C               	movwf	12	;volatile
  9392                           
  9393                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9394  1F00  018D               	clrf	13	;volatile
  9395                           
  9396                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9397  1F01  018E               	clrf	14	;volatile
  9398                           
  9399                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9400  1F02  30F7               	movlw	247
  9401  1F03  0020               	movlb	0	; select bank0
  9402  1F04  008C               	movwf	12	;volatile
  9403                           
  9404                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9405  1F05  3004               	movlw	4
  9406  1F06  008D               	movwf	13	;volatile
  9407                           
  9408                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9409  1F07  3026               	movlw	38
  9410  1F08  008E               	movwf	14	;volatile
  9411                           
  9412                           ;MCU_B1.c: 100: WPUB = 0b00000000;;
  9413  1F09  0024               	movlb	4	; select bank4
  9414  1F0A  018D               	clrf	13	;volatile
  9415  1F0B  0008               	return
  9416  1F0C                     __end_of_IO_Set:	
  9417                           
  9418                           	psect	text48
  9419  1D1F                     __ptext48:	
  9420 ;; *************** function _IOC_Set *****************
  9421 ;; Defined at:
  9422 ;;		line 367 in file "../src/MCU_B1.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;		None
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;		None
  9427 ;; Return value:  Size  Location     Type
  9428 ;;		None               void
  9429 ;; Registers used:
  9430 ;;		wreg, status,2
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;Total ram usage:        0 bytes
  9441 ;; Hardware stack levels used:    1
  9442 ;; Hardware stack levels required when called:    5
  9443 ;; This function calls:
  9444 ;;		Nothing
  9445 ;; This function is called by:
  9446 ;;		_Mcu_Initialization
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           
  9451                           ;psect for function _IOC_Set
  9452  1D1F                     _IOC_Set:	
  9453                           
  9454                           ;MCU_B1.c: 368: WPUB2 = 0;
  9455                           
  9456                           ;incstack = 0
  9457                           ; Regs used in _IOC_Set: [wreg+status,2]
  9458  1D1F  0024               	movlb	4	; select bank4
  9459  1D20  110D               	bcf	13,2	;volatile
  9460                           
  9461                           ;MCU_B1.c: 388: IOCBP = 0b00000100;
  9462  1D21  3004               	movlw	4
  9463  1D22  0027               	movlb	7	; select bank7
  9464  1D23  0094               	movwf	20	;volatile
  9465                           
  9466                           ;MCU_B1.c: 389: IOCBN = 0b00000000;
  9467  1D24  0195               	clrf	21	;volatile
  9468                           
  9469                           ;MCU_B1.c: 393: IOCBF = 0b00000000;
  9470  1D25  0196               	clrf	22	;volatile
  9471                           
  9472                           ;MCU_B1.c: 395: IOCIE = 1;
  9473  1D26  158B               	bsf	11,3	;volatile
  9474                           
  9475                           ;MCU_B1.c: 396: IOCIF = 0;
  9476  1D27  100B               	bcf	11,0	;volatile
  9477                           
  9478                           ;MCU_B1.c: 397: PEIE = 1;
  9479  1D28  170B               	bsf	11,6	;volatile
  9480                           
  9481                           ;MCU_B1.c: 398: GIE = 1;
  9482  1D29  178B               	bsf	11,7	;volatile
  9483  1D2A  0008               	return
  9484  1D2B                     __end_of_IOC_Set:	
  9485                           
  9486                           	psect	text49
  9487  07FC                     __ptext49:	
  9488 ;; *************** function _Fosc_Set *****************
  9489 ;; Defined at:
  9490 ;;		line 56 in file "../src/MCU_B1.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;		None
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;		None
  9495 ;; Return value:  Size  Location     Type
  9496 ;;		None               void
  9497 ;; Registers used:
  9498 ;;		wreg
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;Total ram usage:        0 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    5
  9511 ;; This function calls:
  9512 ;;		Nothing
  9513 ;; This function is called by:
  9514 ;;		_Mcu_Initialization
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _Fosc_Set
  9520  07FC                     _Fosc_Set:	
  9521                           
  9522                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9523                           
  9524                           ;incstack = 0
  9525                           ; Regs used in _Fosc_Set: [wreg]
  9526  07FC  3078               	movlw	120
  9527  07FD  0021               	movlb	1	; select bank1
  9528  07FE  0099               	movwf	25	;volatile
  9529  07FF  0008               	return
  9530  0800                     __end_of_Fosc_Set:	
  9531                           
  9532                           	psect	text50
  9533  1C37                     __ptext50:	
  9534 ;; *************** function _ADC_Set *****************
  9535 ;; Defined at:
  9536 ;;		line 422 in file "../src/MCU_B1.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;		None
  9539 ;; Auto vars:     Size  Location     Type
  9540 ;;		None
  9541 ;; Return value:  Size  Location     Type
  9542 ;;		None               void
  9543 ;; Registers used:
  9544 ;;		wreg
  9545 ;; Tracked objects:
  9546 ;;		On entry : 0/0
  9547 ;;		On exit  : 0/0
  9548 ;;		Unchanged: 0/0
  9549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;Total ram usage:        0 bytes
  9555 ;; Hardware stack levels used:    1
  9556 ;; Hardware stack levels required when called:    5
  9557 ;; This function calls:
  9558 ;;		Nothing
  9559 ;; This function is called by:
  9560 ;;		_Mcu_Initialization
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           
  9565                           ;psect for function _ADC_Set
  9566  1C37                     _ADC_Set:	
  9567                           
  9568                           ;MCU_B1.c: 423: ADCON1 = 0xf3;
  9569                           
  9570                           ;incstack = 0
  9571                           ; Regs used in _ADC_Set: [wreg]
  9572  1C37  30F3               	movlw	243
  9573  1C38  0021               	movlb	1	; select bank1
  9574  1C39  009E               	movwf	30	;volatile
  9575                           
  9576                           ;MCU_B1.c: 424: FVRCON = 0xc1;
  9577  1C3A  30C1               	movlw	193
  9578  1C3B  0022               	movlb	2	; select bank2
  9579  1C3C  0097               	movwf	23	;volatile
  9580  1C3D  0008               	return
  9581  1C3E                     __end_of_ADC_Set:	
  9582                           
  9583                           	psect	text51
  9584  0041                     __ptext51:	
  9585 ;; *************** function _Load_Main *****************
  9586 ;; Defined at:
  9587 ;;		line 39 in file "../src/OverLoad_B1.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  i               2   12[BANK0 ] int 
  9592 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9593 ;;  error           1   10[BANK0 ] unsigned char 
  9594 ;; Return value:  Size  Location     Type
  9595 ;;		None               void
  9596 ;; Registers used:
  9597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9598 ;; Tracked objects:
  9599 ;;		On entry : 0/0
  9600 ;;		On exit  : 0/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;Total ram usage:        6 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:    7
  9610 ;; This function calls:
  9611 ;;		___lwdiv
  9612 ;;		___wmul
  9613 ;;		_getAll_DimmerLights_AdjSw
  9614 ;;		_getDimmer_LoadGO
  9615 ;;		_getDimmer_Load_Status
  9616 ;;		_getMain_All_Error_Status
  9617 ;;		_getMain_LightsStatus
  9618 ;;		_getMain_Lights_Count
  9619 ;;		_setLoad_AH_AL_Restore
  9620 ;; This function is called by:
  9621 ;;		_main
  9622 ;; This function uses a non-reentrant model
  9623 ;;
  9624                           
  9625                           
  9626                           ;psect for function _Load_Main
  9627  0041                     _Load_Main:	
  9628                           
  9629                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9630                           
  9631                           ;incstack = 0
  9632                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9633  0041  3000               	movlw	0
  9634  0042  3192  225F  3180   	fcall	_getMain_All_Error_Status
  9635  0045  0020               	movlb	0	; select bank0
  9636  0046  00A8               	movwf	??_Load_Main
  9637  0047  0828               	movf	??_Load_Main,w
  9638  0048  00AA               	movwf	Load_Main@error
  9639                           
  9640                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9641  0049  01AB               	clrf	Load_Main@Load_Status
  9642                           
  9643                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9644  004A  0022               	movlb	2	; select bank2
  9645  004B  1C25               	btfss	_Load^(0+256),0
  9646  004C  29E7               	goto	l1567
  9647                           
  9648                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9649  004D  319C  248C  3180   	fcall	_getMain_LightsStatus
  9650  0050  3800               	iorlw	0
  9651  0051  1D03               	skipz
  9652  0052  2855               	goto	l9998
  9653                           
  9654                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9655  0053  0022               	movlb	2	; select bank2
  9656  0054  2876               	goto	l10016
  9657  0055                     l9998:	
  9658                           ;OverLoad_B1.c: 66: } else {
  9659                           
  9660                           
  9661                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9662  0055  0020               	movlb	0	; select bank0
  9663  0056  08AA               	movf	Load_Main@error,f
  9664  0057  1D03               	skipz
  9665  0058  2873               	goto	l1570
  9666  0059  3191  2177  3180   	fcall	_getAll_DimmerLights_AdjSw
  9667  005C  3800               	iorlw	0
  9668  005D  1D03               	skipz
  9669  005E  2873               	goto	l1570
  9670                           
  9671                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9672  005F  0022               	movlb	2	; select bank2
  9673  0060  14A5               	bsf	_Load^(0+256),1
  9674                           
  9675                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9676  0061  319C  244D  3180   	fcall	_getDimmer_LoadGO
  9677  0064  3A01               	xorlw	1
  9678  0065  1D03               	skipz
  9679  0066  286E               	goto	l1571
  9680                           
  9681                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9682  0067  0022               	movlb	2	; select bank2
  9683  0068  1DA5               	btfss	_Load^(0+256),3
  9684  0069  1BA5               	btfsc	_Load^(0+256),7
  9685  006A  2877               	goto	l1569
  9686                           
  9687                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9688  006B  15A5               	bsf	_Load^(0+256),3
  9689                           
  9690                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9691  006C  01CE               	clrf	(_Load^(0+256)+41)
  9692                           
  9693                           ;OverLoad_B1.c: 76: }
  9694                           ;OverLoad_B1.c: 77: } else {
  9695  006D  2877               	goto	l1569
  9696  006E                     l1571:	
  9697                           
  9698                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9699  006E  0022               	movlb	2	; select bank2
  9700  006F  1FA5               	btfss	_Load^(0+256),7
  9701  0070  2877               	goto	l1569
  9702                           
  9703                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9704  0071  13A5               	bcf	_Load^(0+256),7
  9705                           
  9706                           ;OverLoad_B1.c: 80: }
  9707                           ;OverLoad_B1.c: 81: }
  9708                           ;OverLoad_B1.c: 82: } else {
  9709  0072  2877               	goto	l1569
  9710  0073                     l1570:	
  9711                           
  9712                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9713  0073  0022               	movlb	2	; select bank2
  9714  0074  1CA5               	btfss	_Load^(0+256),1
  9715  0075  2877               	goto	l1569
  9716  0076                     l10016:	
  9717                           
  9718                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9719  0076  10A5               	bcf	_Load^(0+256),1
  9720  0077                     l1569:	
  9721                           
  9722                           ;OverLoad_B1.c: 85: }
  9723                           ;OverLoad_B1.c: 86: }
  9724                           ;OverLoad_B1.c: 88: }
  9725                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9726  0077  1CA5               	btfss	_Load^(0+256),1
  9727  0078  29C3               	goto	l1577
  9728                           
  9729                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9730  0079  1525               	bsf	_Load^(0+256),2
  9731                           
  9732                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9733  007A  1E25               	btfss	_Load^(0+256),4
  9734  007B  29C1               	goto	l1578
  9735                           
  9736                           ;OverLoad_B1.c: 95: Load.Time++;
  9737  007C  3001               	movlw	1
  9738  007D  07A6               	addwf	(_Load^(0+256)+1),f
  9739  007E  3000               	movlw	0
  9740  007F  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
  9741                           
  9742                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9743  0080  3000               	movlw	0
  9744  0081  0227               	subwf	((_Load+1)^(0+256)+1),w
  9745  0082  3005               	movlw	5
  9746  0083  1903               	skipnz
  9747  0084  0226               	subwf	(_Load^(0+256)+1),w
  9748  0085  1C03               	skipc
  9749  0086  0008               	return
  9750                           
  9751                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9752  0087  01A6               	clrf	(_Load^(0+256)+1)
  9753  0088  01A7               	clrf	((_Load+1)^(0+256)+1)
  9754                           
  9755                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9756  0089  1225               	bcf	_Load^(0+256),4
  9757                           
  9758                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9759  008A  3001               	movlw	1
  9760  008B  0020               	movlb	0	; select bank0
  9761  008C  00AC               	movwf	Load_Main@i
  9762  008D  3000               	movlw	0
  9763  008E  00AD               	movwf	Load_Main@i+1
  9764  008F  082D               	movf	Load_Main@i+1,w
  9765  0090  3A80               	xorlw	128
  9766  0091  00A8               	movwf	??_Load_Main
  9767  0092  3080               	movlw	128
  9768  0093  0228               	subwf	??_Load_Main,w
  9769  0094  1D03               	skipz
  9770  0095  2898               	goto	u11455
  9771  0096  3004               	movlw	4
  9772  0097  022C               	subwf	Load_Main@i,w
  9773  0098                     u11455:	
  9774  0098  1803               	btfsc	3,0
  9775  0099  28CC               	goto	l10038
  9776  009A                     l10032:	
  9777                           
  9778                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9779  009A  0020               	movlb	0	; select bank0
  9780  009B  352C               	lslf	Load_Main@i,w
  9781  009C  3E30               	addlw	(_Load+11)& (0+255)
  9782  009D  0086               	movwf	6
  9783  009E  3001               	movlw	1	; select bank2/3
  9784  009F  0087               	movwf	7
  9785  00A0  3F40               	moviw [0]fsr1
  9786  00A1  00A8               	movwf	??_Load_Main
  9787  00A2  3F41               	moviw [1]fsr1
  9788  00A3  00A9               	movwf	??_Load_Main+1
  9789  00A4  0828               	movf	??_Load_Main,w
  9790  00A5  0022               	movlb	2	; select bank2
  9791  00A6  07AA               	addwf	(_Load^(0+256)+5),f
  9792  00A7  0020               	movlb	0	; select bank0
  9793  00A8  0829               	movf	??_Load_Main+1,w
  9794  00A9  0022               	movlb	2	; select bank2
  9795  00AA  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
  9796                           
  9797                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9798  00AB  0020               	movlb	0	; select bank0
  9799  00AC  352C               	lslf	Load_Main@i,w
  9800  00AD  3E3A               	addlw	(_Load+21)& (0+255)
  9801  00AE  0086               	movwf	6
  9802  00AF  3001               	movlw	1	; select bank2/3
  9803  00B0  0087               	movwf	7
  9804  00B1  3F40               	moviw [0]fsr1
  9805  00B2  00A8               	movwf	??_Load_Main
  9806  00B3  3F41               	moviw [1]fsr1
  9807  00B4  00A9               	movwf	??_Load_Main+1
  9808  00B5  0828               	movf	??_Load_Main,w
  9809  00B6  0022               	movlb	2	; select bank2
  9810  00B7  07AC               	addwf	(_Load^(0+256)+7),f
  9811  00B8  0020               	movlb	0	; select bank0
  9812  00B9  0829               	movf	??_Load_Main+1,w
  9813  00BA  0022               	movlb	2	; select bank2
  9814  00BB  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
  9815  00BC  3001               	movlw	1
  9816  00BD  0020               	movlb	0	; select bank0
  9817  00BE  07AC               	addwf	Load_Main@i,f
  9818  00BF  3000               	movlw	0
  9819  00C0  3DAD               	addwfc	Load_Main@i+1,f
  9820  00C1  082D               	movf	Load_Main@i+1,w
  9821  00C2  3A80               	xorlw	128
  9822  00C3  00A8               	movwf	??_Load_Main
  9823  00C4  3080               	movlw	128
  9824  00C5  0228               	subwf	??_Load_Main,w
  9825  00C6  1D03               	skipz
  9826  00C7  28CA               	goto	u11465
  9827  00C8  3004               	movlw	4
  9828  00C9  022C               	subwf	Load_Main@i,w
  9829  00CA                     u11465:	
  9830  00CA  1C03               	skipc
  9831  00CB  289A               	goto	l10032
  9832  00CC                     l10038:	
  9833                           
  9834                           ;OverLoad_B1.c: 103: }
  9835                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  9836  00CC  3003               	movlw	3
  9837  00CD  0020               	movlb	0	; select bank0
  9838  00CE  00A0               	movwf	___lwdiv@divisor
  9839  00CF  3000               	movlw	0
  9840  00D0  00A1               	movwf	___lwdiv@divisor+1
  9841  00D1  0022               	movlb	2	; select bank2
  9842  00D2  082B               	movf	((_Load+1)^(0+256)+5),w
  9843  00D3  0020               	movlb	0	; select bank0
  9844  00D4  01A3               	clrf	___lwdiv@dividend+1
  9845  00D5  07A3               	addwf	___lwdiv@dividend+1,f
  9846  00D6  0022               	movlb	2	; select bank2
  9847  00D7  082A               	movf	(_Load^(0+256)+5),w
  9848  00D8  0020               	movlb	0	; select bank0
  9849  00D9  01A2               	clrf	___lwdiv@dividend
  9850  00DA  07A2               	addwf	___lwdiv@dividend,f
  9851  00DB  3193  2366  3180   	fcall	___lwdiv
  9852  00DE  0020               	movlb	0	; select bank0
  9853  00DF  0821               	movf	?___lwdiv+1,w
  9854  00E0  0022               	movlb	2	; select bank2
  9855  00E1  01AB               	clrf	((_Load+1)^(0+256)+5)
  9856  00E2  07AB               	addwf	((_Load+1)^(0+256)+5),f
  9857  00E3  0020               	movlb	0	; select bank0
  9858  00E4  0820               	movf	?___lwdiv,w
  9859  00E5  0022               	movlb	2	; select bank2
  9860  00E6  01AA               	clrf	(_Load^(0+256)+5)
  9861  00E7  07AA               	addwf	(_Load^(0+256)+5),f
  9862                           
  9863                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  9864  00E8  3003               	movlw	3
  9865  00E9  0020               	movlb	0	; select bank0
  9866  00EA  00A0               	movwf	___lwdiv@divisor
  9867  00EB  3000               	movlw	0
  9868  00EC  00A1               	movwf	___lwdiv@divisor+1
  9869  00ED  0022               	movlb	2	; select bank2
  9870  00EE  082D               	movf	((_Load+1)^(0+256)+7),w
  9871  00EF  0020               	movlb	0	; select bank0
  9872  00F0  01A3               	clrf	___lwdiv@dividend+1
  9873  00F1  07A3               	addwf	___lwdiv@dividend+1,f
  9874  00F2  0022               	movlb	2	; select bank2
  9875  00F3  082C               	movf	(_Load^(0+256)+7),w
  9876  00F4  0020               	movlb	0	; select bank0
  9877  00F5  01A2               	clrf	___lwdiv@dividend
  9878  00F6  07A2               	addwf	___lwdiv@dividend,f
  9879  00F7  3193  2366  3180   	fcall	___lwdiv
  9880  00FA  0020               	movlb	0	; select bank0
  9881  00FB  0821               	movf	?___lwdiv+1,w
  9882  00FC  0022               	movlb	2	; select bank2
  9883  00FD  01AD               	clrf	((_Load+1)^(0+256)+7)
  9884  00FE  07AD               	addwf	((_Load+1)^(0+256)+7),f
  9885  00FF  0020               	movlb	0	; select bank0
  9886  0100  0820               	movf	?___lwdiv,w
  9887  0101  0022               	movlb	2	; select bank2
  9888  0102  01AC               	clrf	(_Load^(0+256)+7)
  9889  0103  07AC               	addwf	(_Load^(0+256)+7),f
  9890                           
  9891                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  9892  0104  319F  2728  3180   	fcall	_setLoad_AH_AL_Restore
  9893                           
  9894                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  9895  0107  0022               	movlb	2	; select bank2
  9896  0108  082D               	movf	((_Load+1)^(0+256)+7),w
  9897  0109  022B               	subwf	((_Load+1)^(0+256)+5),w
  9898  010A  1D03               	skipz
  9899  010B  290E               	goto	u11475
  9900  010C  082C               	movf	(_Load^(0+256)+7),w
  9901  010D  022A               	subwf	(_Load^(0+256)+5),w
  9902  010E                     u11475:	
  9903  010E  1C03               	skipc
  9904  010F  0008               	return
  9905                           
  9906                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  9907  0110  3005               	movlw	5
  9908  0111  3E25               	addlw	_Load& (0+255)
  9909  0112  0086               	movwf	6
  9910  0113  3001               	movlw	1	; select bank2/3
  9911  0114  0087               	movwf	7
  9912  0115  092C               	comf	(_Load^(0+256)+7),w
  9913  0116  0020               	movlb	0	; select bank0
  9914  0117  00A8               	movwf	??_Load_Main
  9915  0118  0022               	movlb	2	; select bank2
  9916  0119  092D               	comf	((_Load+1)^(0+256)+7),w
  9917  011A  0020               	movlb	0	; select bank0
  9918  011B  00A9               	movwf	??_Load_Main+1
  9919  011C  0AA8               	incf	??_Load_Main,f
  9920  011D  1903               	skipnz
  9921  011E  0AA9               	incf	??_Load_Main+1,f
  9922  011F  3F40               	moviw [0]fsr1
  9923  0120  0728               	addwf	??_Load_Main,w
  9924  0121  0022               	movlb	2	; select bank2
  9925  0122  00C4               	movwf	(_Load^(0+256)+31)
  9926  0123  3F41               	moviw [1]fsr1
  9927  0124  0020               	movlb	0	; select bank0
  9928  0125  3D29               	addwfc	??_Load_Main+1,w
  9929  0126  0022               	movlb	2	; select bank2
  9930  0127  00C5               	movwf	(_Load^(0+256)+32)
  9931                           
  9932                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  9933  0128  01AA               	clrf	(_Load^(0+256)+5)
  9934  0129  01AB               	clrf	((_Load+1)^(0+256)+5)
  9935                           
  9936                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  9937  012A  01AC               	clrf	(_Load^(0+256)+7)
  9938  012B  01AD               	clrf	((_Load+1)^(0+256)+7)
  9939                           
  9940                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  9941  012C  1DA5               	btfss	_Load^(0+256),3
  9942  012D  298D               	goto	l10078
  9943                           
  9944                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  9945  012E  3002               	movlw	2
  9946  012F  024E               	subwf	(_Load^(0+256)+41),w
  9947  0130  1803               	skipnc
  9948  0131  298D               	goto	l10078
  9949                           
  9950                           ;OverLoad_B1.c: 115: Load.Count++;
  9951  0132  3001               	movlw	1
  9952  0133  0020               	movlb	0	; select bank0
  9953  0134  00A8               	movwf	??_Load_Main
  9954  0135  0828               	movf	??_Load_Main,w
  9955  0136  0022               	movlb	2	; select bank2
  9956  0137  07CE               	addwf	(_Load^(0+256)+41),f
  9957                           
  9958                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
  9959  0138  319C  2455  3180   	fcall	_getDimmer_Load_Status
  9960  013B  0020               	movlb	0	; select bank0
  9961  013C  00A8               	movwf	??_Load_Main
  9962  013D  0828               	movf	??_Load_Main,w
  9963  013E  00AB               	movwf	Load_Main@Load_Status
  9964                           
  9965                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
  9966  013F  319D  2513  3180   	fcall	_getMain_Lights_Count
  9967  0142  0020               	movlb	0	; select bank0
  9968  0143  00A8               	movwf	??_Load_Main
  9969  0144  0828               	movf	??_Load_Main,w
  9970  0145  0022               	movlb	2	; select bank2
  9971  0146  00D1               	movwf	(_Load^(0+256)+44)
  9972                           
  9973                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
  9974  0147  084E               	movf	(_Load^(0+256)+41),w
  9975  0148  3A01               	xorlw	1
  9976  0149  1D03               	skipz
  9977  014A  2955               	goto	l10064
  9978                           
  9979                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
  9980  014B  3002               	movlw	2
  9981  014C  0020               	movlb	0	; select bank0
  9982  014D  00A8               	movwf	??_Load_Main
  9983  014E  0828               	movf	??_Load_Main,w
  9984  014F  0022               	movlb	2	; select bank2
  9985  0150  00D0               	movwf	(_Load^(0+256)+43)
  9986                           
  9987                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*57);
  9988  0151  3074               	movlw	116
  9989  0152  00CA               	movwf	(_Load^(0+256)+37)
  9990  0153  3004               	movlw	4
  9991  0154  2960               	goto	L3
  9992  0155                     l10064:	
  9993                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
  9994                           
  9995  0155  084E               	movf	(_Load^(0+256)+41),w
  9996  0156  3A02               	xorlw	2
  9997  0157  1D03               	skipz
  9998  0158  298D               	goto	l10078
  9999                           
 10000                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 10001  0159  0851               	movf	(_Load^(0+256)+44),w
 10002  015A  3A01               	xorlw	1
 10003  015B  1D03               	skipz
 10004  015C  2962               	goto	l10070
 10005                           
 10006                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.6*57);
 10007  015D  305B               	movlw	91
 10008  015E  00CA               	movwf	(_Load^(0+256)+37)
 10009  015F  3000               	movlw	0
 10010  0160                     L3:	
 10011  0160  00CB               	movwf	(_Load^(0+256)+38)
 10012                           
 10013                           ;OverLoad_B1.c: 124: } else {
 10014  0161  298D               	goto	l10078
 10015  0162                     l10070:	
 10016                           
 10017                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10018  0162  0020               	movlb	0	; select bank0
 10019  0163  08AB               	movf	Load_Main@Load_Status,f
 10020  0164  1D03               	skipz
 10021  0165  2981               	goto	l10074
 10022                           
 10023                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.6*57) * Load.LightsCount;
 10024  0166  0022               	movlb	2	; select bank2
 10025  0167  0851               	movf	(_Load^(0+256)+44),w
 10026  0168  0020               	movlb	0	; select bank0
 10027  0169  00A8               	movwf	??_Load_Main
 10028  016A  01A9               	clrf	??_Load_Main+1
 10029  016B  0828               	movf	??_Load_Main,w
 10030  016C  00A0               	movwf	___wmul@multiplier
 10031  016D  0829               	movf	??_Load_Main+1,w
 10032  016E  00A1               	movwf	___wmul@multiplier+1
 10033  016F  305B               	movlw	91
 10034  0170  00A2               	movwf	___wmul@multiplicand
 10035  0171  3000               	movlw	0
 10036  0172  00A3               	movwf	___wmul@multiplicand+1
 10037  0173  319F  2761  3180   	fcall	___wmul
 10038  0176  0020               	movlb	0	; select bank0
 10039  0177  0821               	movf	?___wmul+1,w
 10040  0178  0022               	movlb	2	; select bank2
 10041  0179  01CB               	clrf	((_Load+1)^(0+256)+37)
 10042  017A  07CB               	addwf	((_Load+1)^(0+256)+37),f
 10043  017B  0020               	movlb	0	; select bank0
 10044  017C  0820               	movf	?___wmul,w
 10045  017D  0022               	movlb	2	; select bank2
 10046  017E  01CA               	clrf	(_Load^(0+256)+37)
 10047  017F  07CA               	addwf	(_Load^(0+256)+37),f
 10048                           
 10049                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10050  0180  298D               	goto	l10078
 10051  0181                     l10074:	
 10052  0181  0020               	movlb	0	; select bank0
 10053  0182  082B               	movf	Load_Main@Load_Status,w
 10054  0183  3A01               	xorlw	1
 10055  0184  1D03               	skipz
 10056  0185  298D               	goto	l10078
 10057                           
 10058                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.6*57) + Load.TotalLoad;
 10059  0186  0022               	movlb	2	; select bank2
 10060  0187  082E               	movf	(_Load^(0+256)+9),w
 10061  0188  3E5B               	addlw	91
 10062  0189  00CA               	movwf	(_Load^(0+256)+37)
 10063  018A  3000               	movlw	0
 10064  018B  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10065  018C  00CB               	movwf	((_Load+1)^(0+256)+37)
 10066  018D                     l10078:	
 10067                           
 10068                           ;OverLoad_B1.c: 129: }
 10069                           ;OverLoad_B1.c: 130: }
 10070                           ;OverLoad_B1.c: 131: }
 10071                           ;OverLoad_B1.c: 132: }
 10072                           ;OverLoad_B1.c: 133: }
 10073                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10074  018D  0022               	movlb	2	; select bank2
 10075  018E  084B               	movf	((_Load+1)^(0+256)+37),w
 10076  018F  0245               	subwf	((_Load+1)^(0+256)+31),w
 10077  0190  1D03               	skipz
 10078  0191  2994               	goto	u11555
 10079  0192  084A               	movf	(_Load^(0+256)+37),w
 10080  0193  0244               	subwf	(_Load^(0+256)+31),w
 10081  0194                     u11555:	
 10082  0194  1C03               	skipc
 10083  0195  29A3               	goto	l10088
 10084                           
 10085                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10086  0196  3001               	movlw	1
 10087  0197  0020               	movlb	0	; select bank0
 10088  0198  00A8               	movwf	??_Load_Main
 10089  0199  0828               	movf	??_Load_Main,w
 10090  019A  0022               	movlb	2	; select bank2
 10091  019B  07CF               	addwf	(_Load^(0+256)+42),f
 10092                           
 10093                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10094  019C  084F               	movf	(_Load^(0+256)+42),w
 10095  019D  0250               	subwf	(_Load^(0+256)+43),w
 10096  019E  1803               	skipnc
 10097  019F  0008               	return
 10098                           
 10099                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10100  01A0  01CF               	clrf	(_Load^(0+256)+42)
 10101                           
 10102                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10103  01A1  16A5               	bsf	_Load^(0+256),5
 10104                           
 10105                           ;OverLoad_B1.c: 161: }
 10106                           ;OverLoad_B1.c: 162: } else {
 10107  01A2  0008               	return
 10108  01A3                     l10088:	
 10109                           
 10110                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10111  01A3  01CF               	clrf	(_Load^(0+256)+42)
 10112                           
 10113                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10114  01A4  1DA5               	btfss	_Load^(0+256),3
 10115  01A5  0008               	return
 10116                           
 10117                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10118  01A6  3001               	movlw	1
 10119  01A7  0020               	movlb	0	; select bank0
 10120  01A8  00A8               	movwf	??_Load_Main
 10121  01A9  0828               	movf	??_Load_Main,w
 10122  01AA  0022               	movlb	2	; select bank2
 10123  01AB  07D2               	addwf	(_Load^(0+256)+45),f
 10124                           
 10125                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10126  01AC  3003               	movlw	3
 10127  01AD  0252               	subwf	(_Load^(0+256)+45),w
 10128  01AE  1C03               	skipc
 10129  01AF  0008               	return
 10130                           
 10131                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10132  01B0  01D2               	clrf	(_Load^(0+256)+45)
 10133                           
 10134                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10135  01B1  17A5               	bsf	_Load^(0+256),7
 10136                           
 10137                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10138  01B2  11A5               	bcf	_Load^(0+256),3
 10139                           
 10140                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10141  01B3  01CE               	clrf	(_Load^(0+256)+41)
 10142                           
 10143                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10144  01B4  0845               	movf	((_Load+1)^(0+256)+31),w
 10145  01B5  01AF               	clrf	((_Load+1)^(0+256)+9)
 10146  01B6  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10147  01B7  0844               	movf	(_Load^(0+256)+31),w
 10148  01B8  01AE               	clrf	(_Load^(0+256)+9)
 10149  01B9  07AE               	addwf	(_Load^(0+256)+9),f
 10150                           
 10151                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10152  01BA  3003               	movlw	3
 10153  01BB  0020               	movlb	0	; select bank0
 10154  01BC  00A8               	movwf	??_Load_Main
 10155  01BD  0828               	movf	??_Load_Main,w
 10156  01BE  0022               	movlb	2	; select bank2
 10157  01BF  00D0               	movwf	(_Load^(0+256)+43)
 10158                           
 10159                           ;OverLoad_B1.c: 175: }
 10160                           ;OverLoad_B1.c: 176: }
 10161                           ;OverLoad_B1.c: 199: }
 10162                           ;OverLoad_B1.c: 200: }
 10163                           ;OverLoad_B1.c: 201: }
 10164                           ;OverLoad_B1.c: 202: } else {
 10165  01C0  0008               	return
 10166  01C1                     l1578:	
 10167                           
 10168                           ;OverLoad_B1.c: 203: Load.ADtoGO = 1;
 10169  01C1  1625               	bsf	_Load^(0+256),4
 10170                           
 10171                           ;OverLoad_B1.c: 204: }
 10172                           ;OverLoad_B1.c: 205: } else {
 10173  01C2  0008               	return
 10174  01C3                     l1577:	
 10175                           
 10176                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 10177  01C3  1D25               	btfss	_Load^(0+256),2
 10178  01C4  29D6               	goto	l10126
 10179                           
 10180                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 10181  01C5  1125               	bcf	_Load^(0+256),2
 10182                           
 10183                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 10184  01C6  1225               	bcf	_Load^(0+256),4
 10185                           
 10186                           ;OverLoad_B1.c: 211: Load.Time = 0;
 10187  01C7  01A6               	clrf	(_Load^(0+256)+1)
 10188  01C8  01A7               	clrf	((_Load+1)^(0+256)+1)
 10189                           
 10190                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 10191  01C9  319F  2728  3180   	fcall	_setLoad_AH_AL_Restore
 10192                           
 10193                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 10194  01CC  0022               	movlb	2	; select bank2
 10195  01CD  01CF               	clrf	(_Load^(0+256)+42)
 10196                           
 10197                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 10198  01CE  01D2               	clrf	(_Load^(0+256)+45)
 10199                           
 10200                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 10201  01CF  01AA               	clrf	(_Load^(0+256)+5)
 10202  01D0  01AB               	clrf	((_Load+1)^(0+256)+5)
 10203                           
 10204                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 10205  01D1  01AC               	clrf	(_Load^(0+256)+7)
 10206  01D2  01AD               	clrf	((_Load+1)^(0+256)+7)
 10207                           
 10208                           ;OverLoad_B1.c: 224: Load.Run = 0;
 10209  01D3  11A5               	bcf	_Load^(0+256),3
 10210                           
 10211                           ;OverLoad_B1.c: 225: Load.Count = 0;
 10212  01D4  01CE               	clrf	(_Load^(0+256)+41)
 10213                           
 10214                           ;OverLoad_B1.c: 226: Load.OK = 0;
 10215  01D5  13A5               	bcf	_Load^(0+256),7
 10216  01D6                     l10126:	
 10217                           
 10218                           ;OverLoad_B1.c: 248: }
 10219                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 10220  01D6  1EA5               	btfss	_Load^(0+256),5
 10221  01D7  0008               	return
 10222                           
 10223                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 10224  01D8  3001               	movlw	1
 10225  01D9  07A8               	addwf	(_Load^(0+256)+3),f
 10226  01DA  3000               	movlw	0
 10227  01DB  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10228                           
 10229                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 10230  01DC  3003               	movlw	3
 10231  01DD  0229               	subwf	((_Load+1)^(0+256)+3),w
 10232  01DE  30E8               	movlw	232
 10233  01DF  1903               	skipnz
 10234  01E0  0228               	subwf	(_Load^(0+256)+3),w
 10235  01E1  1C03               	skipc
 10236  01E2  0008               	return
 10237                           
 10238                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 10239  01E3  01A8               	clrf	(_Load^(0+256)+3)
 10240  01E4  01A9               	clrf	((_Load+1)^(0+256)+3)
 10241                           
 10242                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 10243  01E5  12A5               	bcf	_Load^(0+256),5
 10244                           
 10245                           ;OverLoad_B1.c: 254: }
 10246                           ;OverLoad_B1.c: 255: }
 10247                           ;OverLoad_B1.c: 256: }
 10248                           ;OverLoad_B1.c: 257: } else {
 10249  01E6  0008               	return
 10250  01E7                     l1567:	
 10251                           
 10252                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 10253  01E7  0021               	movlb	1	; select bank1
 10254  01E8  1C20               	btfss	_myMain^(0+128),0
 10255  01E9  0008               	return
 10256                           
 10257                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 10258  01EA  0022               	movlb	2	; select bank2
 10259  01EB  1425               	bsf	_Load^(0+256),0
 10260  01EC  0008               	return
 10261  01ED                     __end_of_Load_Main:	
 10262                           
 10263                           	psect	text52
 10264  1D13                     __ptext52:	
 10265 ;; *************** function _getMain_Lights_Count *****************
 10266 ;; Defined at:
 10267 ;;		line 467 in file "../src/Main_B1.c"
 10268 ;; Parameters:    Size  Location     Type
 10269 ;;		None
 10270 ;; Auto vars:     Size  Location     Type
 10271 ;;  status1         1    1[BANK0 ] unsigned char 
 10272 ;;  count           1    0[BANK0 ] unsigned char 
 10273 ;; Return value:  Size  Location     Type
 10274 ;;                  1    wreg      unsigned char 
 10275 ;; Registers used:
 10276 ;;		wreg, status,2
 10277 ;; Tracked objects:
 10278 ;;		On entry : 0/0
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;Total ram usage:        2 bytes
 10287 ;; Hardware stack levels used:    1
 10288 ;; Hardware stack levels required when called:    5
 10289 ;; This function calls:
 10290 ;;		Nothing
 10291 ;; This function is called by:
 10292 ;;		_Load_Main
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           
 10297                           ;psect for function _getMain_Lights_Count
 10298  1D13                     _getMain_Lights_Count:	
 10299                           
 10300                           ;Main_B1.c: 468: char count = 0;
 10301                           
 10302                           ;incstack = 0
 10303                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 10304  1D13  0020               	movlb	0	; select bank0
 10305  1D14  01A0               	clrf	getMain_Lights_Count@count
 10306                           
 10307                           ;Main_B1.c: 472: char status1 = 0;
 10308  1D15  01A1               	clrf	getMain_Lights_Count@status1
 10309                           
 10310                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10311  1D16  3000               	movlw	0
 10312  1D17  0022               	movlb	2	; select bank2
 10313  1D18  1954               	btfsc	(_DimmerLights1^(0+256)+1),2
 10314  1D19  3001               	movlw	1
 10315  1D1A  0020               	movlb	0	; select bank0
 10316  1D1B  00A1               	movwf	getMain_Lights_Count@status1
 10317                           
 10318                           ;Main_B1.c: 498: return count = status1;
 10319  1D1C  0821               	movf	getMain_Lights_Count@status1,w
 10320  1D1D  00A0               	movwf	getMain_Lights_Count@count
 10321  1D1E  0008               	return
 10322  1D1F                     __end_of_getMain_Lights_Count:	
 10323                           
 10324                           	psect	text53
 10325  1C55                     __ptext53:	
 10326 ;; *************** function _getDimmer_Load_Status *****************
 10327 ;; Defined at:
 10328 ;;		line 896 in file "../src/Dimmer_B1.c"
 10329 ;; Parameters:    Size  Location     Type
 10330 ;;		None
 10331 ;; Auto vars:     Size  Location     Type
 10332 ;;  status          1    0[BANK0 ] unsigned char 
 10333 ;; Return value:  Size  Location     Type
 10334 ;;                  1    wreg      unsigned char 
 10335 ;; Registers used:
 10336 ;;		wreg, status,2
 10337 ;; Tracked objects:
 10338 ;;		On entry : 0/0
 10339 ;;		On exit  : 0/0
 10340 ;;		Unchanged: 0/0
 10341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;Total ram usage:        1 bytes
 10347 ;; Hardware stack levels used:    1
 10348 ;; Hardware stack levels required when called:    5
 10349 ;; This function calls:
 10350 ;;		Nothing
 10351 ;; This function is called by:
 10352 ;;		_Load_Main
 10353 ;; This function uses a non-reentrant model
 10354 ;;
 10355                           
 10356                           
 10357                           ;psect for function _getDimmer_Load_Status
 10358  1C55                     _getDimmer_Load_Status:	
 10359                           
 10360                           ;Dimmer_B1.c: 897: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10361                           
 10362                           ;incstack = 0
 10363                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10364  1C55  3000               	movlw	0
 10365  1C56  0021               	movlb	1	; select bank1
 10366  1C57  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10367  1C58  3001               	movlw	1
 10368  1C59  0020               	movlb	0	; select bank0
 10369  1C5A  00A0               	movwf	getDimmer_Load_Status@status
 10370                           
 10371                           ;Dimmer_B1.c: 898: return status;
 10372  1C5B  0820               	movf	getDimmer_Load_Status@status,w
 10373  1C5C  0008               	return
 10374  1C5D                     __end_of_getDimmer_Load_Status:	
 10375                           
 10376                           	psect	text54
 10377  1C4D                     __ptext54:	
 10378 ;; *************** function _getDimmer_LoadGO *****************
 10379 ;; Defined at:
 10380 ;;		line 631 in file "../src/Dimmer_B1.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;		None
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      unsigned char 
 10387 ;; Registers used:
 10388 ;;		wreg, status,2
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10398 ;;Total ram usage:        1 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    5
 10401 ;; This function calls:
 10402 ;;		Nothing
 10403 ;; This function is called by:
 10404 ;;		_Load_Main
 10405 ;; This function uses a non-reentrant model
 10406 ;;
 10407                           
 10408                           
 10409                           ;psect for function _getDimmer_LoadGO
 10410  1C4D                     _getDimmer_LoadGO:	
 10411                           
 10412                           ;Dimmer_B1.c: 632: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10413                           
 10414                           ;incstack = 0
 10415                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10416  1C4D  3000               	movlw	0
 10417  1C4E  0021               	movlb	1	; select bank1
 10418  1C4F  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10419  1C50  3001               	movlw	1
 10420  1C51  0020               	movlb	0	; select bank0
 10421  1C52  00A0               	movwf	getDimmer_LoadGO@loadgo
 10422                           
 10423                           ;Dimmer_B1.c: 633: return loadgo;
 10424  1C53  0820               	movf	getDimmer_LoadGO@loadgo,w
 10425  1C54  0008               	return
 10426  1C55                     __end_of_getDimmer_LoadGO:	
 10427                           
 10428                           	psect	text55
 10429  1177                     __ptext55:	
 10430 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10431 ;; Defined at:
 10432 ;;		line 840 in file "../src/Dimmer_B1.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;		None
 10435 ;; Auto vars:     Size  Location     Type
 10436 ;;  i               2    4[BANK0 ] int 
 10437 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10438 ;;  count           1    3[BANK0 ] unsigned char 
 10439 ;; Return value:  Size  Location     Type
 10440 ;;                  1    wreg      unsigned char 
 10441 ;; Registers used:
 10442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;Total ram usage:        5 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:    6
 10455 ;; This function calls:
 10456 ;;		_DimmerLightsPointSelect
 10457 ;; This function is called by:
 10458 ;;		_Load_Main
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           
 10463                           ;psect for function _getAll_DimmerLights_AdjSw
 10464  1177                     _getAll_DimmerLights_AdjSw:	
 10465                           
 10466                           ;Dimmer_B1.c: 841: char count = 1;
 10467                           
 10468                           ;incstack = 0
 10469                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10470  1177  0020               	movlb	0	; select bank0
 10471  1178  01A3               	clrf	getAll_DimmerLights_AdjSw@count
 10472  1179  0AA3               	incf	getAll_DimmerLights_AdjSw@count,f
 10473                           
 10474                           ;Dimmer_B1.c: 842: char adjsw = 0;
 10475  117A  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10476                           
 10477                           ;Dimmer_B1.c: 844: for (int i = 0; i < count; i++) {
 10478  117B  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10479  117C  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10480  117D                     l9320:	
 10481  117D  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10482  117E  3A80               	xorlw	128
 10483  117F  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10484  1180  3080               	movlw	128
 10485  1181  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10486  1182  1D03               	skipz
 10487  1183  2986               	goto	u10225
 10488  1184  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10489  1185  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10490  1186                     u10225:	
 10491  1186  1803               	btfsc	3,0
 10492  1187  299F               	goto	l9322
 10493                           
 10494                           ;Dimmer_B1.c: 845: DimmerLightsPointSelect(i + 1);
 10495  1188  0020               	movlb	0	; select bank0
 10496  1189  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10497  118A  3E01               	addlw	1
 10498  118B  319C  24AC  3191   	fcall	_DimmerLightsPointSelect
 10499                           
 10500                           ;Dimmer_B1.c: 846: if (adjsw == 0) {
 10501  118E  0020               	movlb	0	; select bank0
 10502  118F  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10503  1190  1D03               	skipz
 10504  1191  299A               	goto	l9318
 10505                           
 10506                           ;Dimmer_B1.c: 847: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10507  1192  0A6F               	incf	_DimmerLights,w
 10508  1193  0086               	movwf	6
 10509  1194  3001               	movlw	1	; select bank2/3
 10510  1195  0087               	movwf	7
 10511  1196  3000               	movlw	0
 10512  1197  1B01               	btfsc	1,6
 10513  1198  3001               	movlw	1
 10514  1199  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10515  119A                     l9318:	
 10516  119A  3001               	movlw	1
 10517  119B  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10518  119C  3000               	movlw	0
 10519  119D  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10520  119E  297D               	goto	l9320
 10521  119F                     l9322:	
 10522                           
 10523                           ;Dimmer_B1.c: 848: }
 10524                           ;Dimmer_B1.c: 849: }
 10525                           ;Dimmer_B1.c: 850: return adjsw;
 10526  119F  0020               	movlb	0	; select bank0
 10527  11A0  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10528  11A1  0008               	return
 10529  11A2                     __end_of_getAll_DimmerLights_AdjSw:	
 10530                           
 10531                           	psect	text56
 10532  1F61                     __ptext56:	
 10533 ;; *************** function ___wmul *****************
 10534 ;; Defined at:
 10535 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10538 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10539 ;; Auto vars:     Size  Location     Type
 10540 ;;  product         2    4[BANK0 ] unsigned int 
 10541 ;; Return value:  Size  Location     Type
 10542 ;;                  2    0[BANK0 ] unsigned int 
 10543 ;; Registers used:
 10544 ;;		wreg, status,2, status,0
 10545 ;; Tracked objects:
 10546 ;;		On entry : 0/0
 10547 ;;		On exit  : 0/0
 10548 ;;		Unchanged: 0/0
 10549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10550 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;Total ram usage:        6 bytes
 10555 ;; Hardware stack levels used:    1
 10556 ;; Hardware stack levels required when called:    5
 10557 ;; This function calls:
 10558 ;;		Nothing
 10559 ;; This function is called by:
 10560 ;;		_Load_Main
 10561 ;; This function uses a non-reentrant model
 10562 ;;
 10563                           
 10564                           
 10565                           ;psect for function ___wmul
 10566  1F61                     ___wmul:	
 10567                           
 10568                           ;incstack = 0
 10569                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10570  1F61  0020               	movlb	0	; select bank0
 10571  1F62  01A4               	clrf	___wmul@product
 10572  1F63  01A5               	clrf	___wmul@product+1
 10573  1F64                     l9702:	
 10574  1F64  1C20               	btfss	___wmul@multiplier,0
 10575  1F65  2F6A               	goto	l2591
 10576  1F66  0822               	movf	___wmul@multiplicand,w
 10577  1F67  07A4               	addwf	___wmul@product,f
 10578  1F68  0823               	movf	___wmul@multiplicand+1,w
 10579  1F69  3DA5               	addwfc	___wmul@product+1,f
 10580  1F6A                     l2591:	
 10581  1F6A  3001               	movlw	1
 10582  1F6B                     u10835:	
 10583  1F6B  35A2               	lslf	___wmul@multiplicand,f
 10584  1F6C  0DA3               	rlf	___wmul@multiplicand+1,f
 10585  1F6D  0B89               	decfsz	9,f
 10586  1F6E  2F6B               	goto	u10835
 10587  1F6F  3001               	movlw	1
 10588  1F70                     u10845:	
 10589  1F70  36A1               	lsrf	___wmul@multiplier+1,f
 10590  1F71  0CA0               	rrf	___wmul@multiplier,f
 10591  1F72  0B89               	decfsz	9,f
 10592  1F73  2F70               	goto	u10845
 10593  1F74  0821               	movf	___wmul@multiplier+1,w
 10594  1F75  0420               	iorwf	___wmul@multiplier,w
 10595  1F76  1D03               	skipz
 10596  1F77  2F64               	goto	l9702
 10597  1F78  0825               	movf	___wmul@product+1,w
 10598  1F79  01A1               	clrf	?___wmul+1
 10599  1F7A  07A1               	addwf	?___wmul+1,f
 10600  1F7B  0824               	movf	___wmul@product,w
 10601  1F7C  01A0               	clrf	?___wmul
 10602  1F7D  07A0               	addwf	?___wmul,f
 10603  1F7E  0008               	return
 10604  1F7F                     __end_of___wmul:	
 10605                           
 10606                           	psect	text57
 10607  1366                     __ptext57:	
 10608 ;; *************** function ___lwdiv *****************
 10609 ;; Defined at:
 10610 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;  divisor         2    0[BANK0 ] unsigned int 
 10613 ;;  dividend        2    2[BANK0 ] unsigned int 
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;  quotient        2    6[BANK0 ] unsigned int 
 10616 ;;  counter         1    5[BANK0 ] unsigned char 
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  2    0[BANK0 ] unsigned int 
 10619 ;; Registers used:
 10620 ;;		wreg, status,2, status,0
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10626 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;Total ram usage:        8 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    5
 10633 ;; This function calls:
 10634 ;;		Nothing
 10635 ;; This function is called by:
 10636 ;;		_Load_Main
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           
 10641                           ;psect for function ___lwdiv
 10642  1366                     ___lwdiv:	
 10643                           
 10644                           ;incstack = 0
 10645                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10646  1366  0020               	movlb	0	; select bank0
 10647  1367  01A6               	clrf	___lwdiv@quotient
 10648  1368  01A7               	clrf	___lwdiv@quotient+1
 10649  1369  0821               	movf	___lwdiv@divisor+1,w
 10650  136A  0420               	iorwf	___lwdiv@divisor,w
 10651  136B  1903               	skipnz
 10652  136C  2B96               	goto	l9734
 10653  136D  01A5               	clrf	___lwdiv@counter
 10654  136E  0AA5               	incf	___lwdiv@counter,f
 10655  136F                     l9722:	
 10656  136F  1BA1               	btfsc	___lwdiv@divisor+1,7
 10657  1370  2B7B               	goto	l9724
 10658  1371  3001               	movlw	1
 10659  1372                     u10875:	
 10660  1372  35A0               	lslf	___lwdiv@divisor,f
 10661  1373  0DA1               	rlf	___lwdiv@divisor+1,f
 10662  1374  0B89               	decfsz	9,f
 10663  1375  2B72               	goto	u10875
 10664  1376  3001               	movlw	1
 10665  1377  00A4               	movwf	??___lwdiv
 10666  1378  0824               	movf	??___lwdiv,w
 10667  1379  07A5               	addwf	___lwdiv@counter,f
 10668  137A  2B6F               	goto	l9722
 10669  137B                     l9724:	
 10670  137B  3001               	movlw	1
 10671  137C                     u10895:	
 10672  137C  35A6               	lslf	___lwdiv@quotient,f
 10673  137D  0DA7               	rlf	___lwdiv@quotient+1,f
 10674  137E  0B89               	decfsz	9,f
 10675  137F  2B7C               	goto	u10895
 10676  1380  0821               	movf	___lwdiv@divisor+1,w
 10677  1381  0223               	subwf	___lwdiv@dividend+1,w
 10678  1382  1D03               	skipz
 10679  1383  2B86               	goto	u10905
 10680  1384  0820               	movf	___lwdiv@divisor,w
 10681  1385  0222               	subwf	___lwdiv@dividend,w
 10682  1386                     u10905:	
 10683  1386  1C03               	skipc
 10684  1387  2B8D               	goto	l9730
 10685  1388  0820               	movf	___lwdiv@divisor,w
 10686  1389  02A2               	subwf	___lwdiv@dividend,f
 10687  138A  0821               	movf	___lwdiv@divisor+1,w
 10688  138B  3BA3               	subwfb	___lwdiv@dividend+1,f
 10689  138C  1426               	bsf	___lwdiv@quotient,0
 10690  138D                     l9730:	
 10691  138D  3001               	movlw	1
 10692  138E                     u10915:	
 10693  138E  36A1               	lsrf	___lwdiv@divisor+1,f
 10694  138F  0CA0               	rrf	___lwdiv@divisor,f
 10695  1390  0B89               	decfsz	9,f
 10696  1391  2B8E               	goto	u10915
 10697  1392  3001               	movlw	1
 10698  1393  02A5               	subwf	___lwdiv@counter,f
 10699  1394  1D03               	btfss	3,2
 10700  1395  2B7B               	goto	l9724
 10701  1396                     l9734:	
 10702  1396  0827               	movf	___lwdiv@quotient+1,w
 10703  1397  01A1               	clrf	?___lwdiv+1
 10704  1398  07A1               	addwf	?___lwdiv+1,f
 10705  1399  0826               	movf	___lwdiv@quotient,w
 10706  139A  01A0               	clrf	?___lwdiv
 10707  139B  07A0               	addwf	?___lwdiv,f
 10708  139C  0008               	return
 10709  139D                     __end_of___lwdiv:	
 10710                           
 10711                           	psect	text58
 10712  1BF7                     __ptext58:	
 10713 ;; *************** function _Load_Initialization *****************
 10714 ;; Defined at:
 10715 ;;		line 9 in file "../src/OverLoad_B1.c"
 10716 ;; Parameters:    Size  Location     Type
 10717 ;;		None
 10718 ;; Auto vars:     Size  Location     Type
 10719 ;;		None
 10720 ;; Return value:  Size  Location     Type
 10721 ;;		None               void
 10722 ;; Registers used:
 10723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10724 ;; Tracked objects:
 10725 ;;		On entry : 0/0
 10726 ;;		On exit  : 0/0
 10727 ;;		Unchanged: 0/0
 10728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10733 ;;Total ram usage:        0 bytes
 10734 ;; Hardware stack levels used:    1
 10735 ;; Hardware stack levels required when called:    6
 10736 ;; This function calls:
 10737 ;;		_setLoad_AH_AL_Restore
 10738 ;; This function is called by:
 10739 ;;		_main
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743                           
 10744                           ;psect for function _Load_Initialization
 10745  1BF7                     _Load_Initialization:	
 10746                           
 10747                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10748                           
 10749                           ;incstack = 0
 10750                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10751  1BF7  319F  2728         	fcall	_setLoad_AH_AL_Restore
 10752  1BF9  0008               	return
 10753  1BFA                     __end_of_Load_Initialization:	
 10754                           
 10755                           	psect	text59
 10756  1F28                     __ptext59:	
 10757 ;; *************** function _setLoad_AH_AL_Restore *****************
 10758 ;; Defined at:
 10759 ;;		line 285 in file "../src/OverLoad_B1.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;		None
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;  i               1    1[BANK0 ] unsigned char 
 10764 ;; Return value:  Size  Location     Type
 10765 ;;		None               void
 10766 ;; Registers used:
 10767 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10774 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;Total ram usage:        2 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; Hardware stack levels required when called:    5
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_Load_Initialization
 10784 ;;		_Load_Main
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           
 10789                           ;psect for function _setLoad_AH_AL_Restore
 10790  1F28                     _setLoad_AH_AL_Restore:	
 10791                           
 10792                           ;OverLoad_B1.c: 286: char i;
 10793                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 10794                           
 10795                           ;incstack = 0
 10796                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10797  1F28  0020               	movlb	0	; select bank0
 10798  1F29  01A1               	clrf	setLoad_AH_AL_Restore@i
 10799  1F2A                     L4:	
 10800  1F2A  3005               	movlw	5
 10801  1F2B  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10802  1F2C  1803               	btfsc	3,0
 10803  1F2D  0008               	return
 10804                           
 10805                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 10806  1F2E  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10807  1F2F  3E30               	addlw	(_Load+11)& (0+255)
 10808  1F30  0086               	movwf	6
 10809  1F31  3001               	movlw	1	; select bank2/3
 10810  1F32  0087               	movwf	7
 10811  1F33  3000               	movlw	0
 10812  1F34  3FC0               	movwi [0]fsr1
 10813  1F35  3FC1               	movwi [1]fsr1
 10814                           
 10815                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 10816  1F36  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10817  1F37  3E3A               	addlw	(_Load+21)& (0+255)
 10818  1F38  0086               	movwf	6
 10819  1F39  3001               	movlw	1	; select bank2/3
 10820  1F3A  0087               	movwf	7
 10821  1F3B  30FF               	movlw	255
 10822  1F3C  3FC0               	movwi [0]fsr1
 10823  1F3D  30FF               	movlw	255
 10824  1F3E  3FC1               	movwi [1]fsr1
 10825  1F3F  3001               	movlw	1
 10826  1F40  00A0               	movwf	??_setLoad_AH_AL_Restore
 10827  1F41  0820               	movf	??_setLoad_AH_AL_Restore,w
 10828  1F42  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10829  1F43  2F2A               	goto	L4
 10830  1F44                     __end_of_setLoad_AH_AL_Restore:	
 10831                           
 10832                           	psect	text60
 10833  1C22                     __ptext60:	
 10834 ;; *************** function _LED_Main *****************
 10835 ;; Defined at:
 10836 ;;		line 47 in file "../src/LED_B1.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;		None
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;		None
 10841 ;; Return value:  Size  Location     Type
 10842 ;;		None               void
 10843 ;; Registers used:
 10844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10845 ;; Tracked objects:
 10846 ;;		On entry : 0/0
 10847 ;;		On exit  : 0/0
 10848 ;;		Unchanged: 0/0
 10849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;Total ram usage:        0 bytes
 10855 ;; Hardware stack levels used:    1
 10856 ;; Hardware stack levels required when called:    7
 10857 ;; This function calls:
 10858 ;;		_setLED_Main
 10859 ;; This function is called by:
 10860 ;;		_main
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864                           
 10865                           ;psect for function _LED_Main
 10866  1C22                     _LED_Main:	
 10867                           
 10868                           ;LED_B1.c: 62: setLED_Main(99);
 10869                           
 10870                           ;incstack = 0
 10871                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10872  1C22  3063               	movlw	99
 10873  1C23  3193  2330         	fcall	_setLED_Main
 10874  1C25  0008               	return
 10875  1C26                     __end_of_LED_Main:	
 10876                           
 10877                           	psect	text61
 10878  1330                     __ptext61:	
 10879 ;; *************** function _setLED_Main *****************
 10880 ;; Defined at:
 10881 ;;		line 221 in file "../src/LED_B1.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  led             1    wreg     unsigned char 
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;  led             1    4[BANK0 ] unsigned char 
 10886 ;; Return value:  Size  Location     Type
 10887 ;;		None               void
 10888 ;; Registers used:
 10889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;Total ram usage:        3 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    6
 10902 ;; This function calls:
 10903 ;;		_LedPointSelect
 10904 ;; This function is called by:
 10905 ;;		_LED_Main
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           
 10910                           ;psect for function _setLED_Main
 10911  1330                     _setLED_Main:	
 10912                           
 10913                           ;incstack = 0
 10914                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10915                           ;setLED_Main@led stored from wreg
 10916  1330  0020               	movlb	0	; select bank0
 10917  1331  00A4               	movwf	setLED_Main@led
 10918                           
 10919                           ;LED_B1.c: 222: LedPointSelect(led);
 10920  1332  0824               	movf	setLED_Main@led,w
 10921  1333  319C  24EF  3193   	fcall	_LedPointSelect
 10922                           
 10923                           ;LED_B1.c: 223: if (LED->GO == 1) {
 10924  1336  0021               	movlb	1	; select bank1
 10925  1337  084E               	movf	_LED^(0+128),w
 10926  1338  0086               	movwf	6
 10927  1339  3001               	movlw	1	; select bank2/3
 10928  133A  0087               	movwf	7
 10929  133B  1C81               	btfss	1,1
 10930  133C  0008               	return
 10931                           
 10932                           ;LED_B1.c: 224: LED->Time++;
 10933  133D  0A4E               	incf	_LED^(0+128),w
 10934  133E  0086               	movwf	6
 10935  133F  3001               	movlw	1	; select bank2/3
 10936  1340  0087               	movwf	7
 10937  1341  3001               	movlw	1
 10938  1342  0781               	addwf	1,f
 10939  1343  3141               	addfsr 1,1
 10940  1344  1803               	skipnc
 10941  1345  0A81               	incf	1,f
 10942                           
 10943                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 10944  1346  0A4E               	incf	_LED^(0+128),w
 10945  1347  0086               	movwf	6
 10946  1348  3001               	movlw	1	; select bank2/3
 10947  1349  0087               	movwf	7
 10948  134A  3F40               	moviw [0]fsr1
 10949  134B  0020               	movlb	0	; select bank0
 10950  134C  00A2               	movwf	??_setLED_Main
 10951  134D  3F41               	moviw [1]fsr1
 10952  134E  00A3               	movwf	??_setLED_Main+1
 10953  134F  3000               	movlw	0
 10954  1350  0223               	subwf	??_setLED_Main+1,w
 10955  1351  3032               	movlw	50
 10956  1352  1903               	skipnz
 10957  1353  0222               	subwf	??_setLED_Main,w
 10958  1354  1C03               	skipc
 10959  1355  0008               	return
 10960                           
 10961                           ;LED_B1.c: 226: LED->Time = 0;
 10962  1356  0021               	movlb	1	; select bank1
 10963  1357  0A4E               	incf	_LED^(0+128),w
 10964  1358  0086               	movwf	6
 10965  1359  3001               	movlw	1	; select bank2/3
 10966  135A  0087               	movwf	7
 10967  135B  3000               	movlw	0
 10968  135C  3FC0               	movwi [0]fsr1
 10969  135D  3FC1               	movwi [1]fsr1
 10970                           
 10971                           ;LED_B1.c: 243: if (led == 99) {
 10972  135E  0020               	movlb	0	; select bank0
 10973  135F  0824               	movf	setLED_Main@led,w
 10974  1360  3A63               	xorlw	99
 10975  1361  1D03               	skipz
 10976  1362  0008               	return
 10977                           
 10978                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 10979  1363  3020               	movlw	32
 10980  1364  068D               	xorwf	13,f
 10981  1365  0008               	return
 10982  1366                     __end_of_setLED_Main:	
 10983                           
 10984                           	psect	text62
 10985  1C1E                     __ptext62:	
 10986 ;; *************** function _LED_Initialization *****************
 10987 ;; Defined at:
 10988 ;;		line 31 in file "../src/LED_B1.c"
 10989 ;; Parameters:    Size  Location     Type
 10990 ;;		None
 10991 ;; Auto vars:     Size  Location     Type
 10992 ;;		None
 10993 ;; Return value:  Size  Location     Type
 10994 ;;		None               void
 10995 ;; Registers used:
 10996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10997 ;; Tracked objects:
 10998 ;;		On entry : 0/0
 10999 ;;		On exit  : 0/0
 11000 ;;		Unchanged: 0/0
 11001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;Total ram usage:        0 bytes
 11007 ;; Hardware stack levels used:    1
 11008 ;; Hardware stack levels required when called:    8
 11009 ;; This function calls:
 11010 ;;		_setLED_Initialization
 11011 ;; This function is called by:
 11012 ;;		_main
 11013 ;; This function uses a non-reentrant model
 11014 ;;
 11015                           
 11016                           
 11017                           ;psect for function _LED_Initialization
 11018  1C1E                     _LED_Initialization:	
 11019                           
 11020                           ;LED_B1.c: 42: setLED_Initialization(99);
 11021                           
 11022                           ;incstack = 0
 11023                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11024  1C1E  3063               	movlw	99
 11025  1C1F  319D  25F6         	fcall	_setLED_Initialization
 11026  1C21  0008               	return
 11027  1C22                     __end_of_LED_Initialization:	
 11028                           
 11029                           	psect	text63
 11030  1DF6                     __ptext63:	
 11031 ;; *************** function _setLED_Initialization *****************
 11032 ;; Defined at:
 11033 ;;		line 69 in file "../src/LED_B1.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;  led             1    wreg     unsigned char 
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;  led             1    4[BANK0 ] unsigned char 
 11038 ;; Return value:  Size  Location     Type
 11039 ;;		None               void
 11040 ;; Registers used:
 11041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        1 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    7
 11054 ;; This function calls:
 11055 ;;		_LedPointSelect
 11056 ;;		_setLED
 11057 ;; This function is called by:
 11058 ;;		_LED_Initialization
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           
 11063                           ;psect for function _setLED_Initialization
 11064  1DF6                     _setLED_Initialization:	
 11065                           
 11066                           ;incstack = 0
 11067                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11068                           ;setLED_Initialization@led stored from wreg
 11069  1DF6  0020               	movlb	0	; select bank0
 11070  1DF7  00A4               	movwf	setLED_Initialization@led
 11071                           
 11072                           ;LED_B1.c: 70: LedPointSelect(led);
 11073  1DF8  0824               	movf	setLED_Initialization@led,w
 11074  1DF9  319C  24EF  319D   	fcall	_LedPointSelect
 11075                           
 11076                           ;LED_B1.c: 71: LED->Enable = 1;
 11077  1DFC  0021               	movlb	1	; select bank1
 11078  1DFD  084E               	movf	_LED^(0+128),w
 11079  1DFE  0086               	movwf	6
 11080  1DFF  3001               	movlw	1	; select bank2/3
 11081  1E00  0087               	movwf	7
 11082  1E01  1401               	bsf	1,0
 11083                           
 11084                           ;LED_B1.c: 72: setLED(led, 0);
 11085  1E02  0020               	movlb	0	; select bank0
 11086  1E03  01A2               	clrf	setLED@command
 11087  1E04  0824               	movf	setLED_Initialization@led,w
 11088  1E05  3193  239D         	fcall	_setLED
 11089  1E07  0008               	return
 11090  1E08                     __end_of_setLED_Initialization:	
 11091                           
 11092                           	psect	text64
 11093  12FA                     __ptext64:	
 11094 ;; *************** function _Flash_Memory_Main *****************
 11095 ;; Defined at:
 11096 ;;		line 968 in file "../src/MCU_B1.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;		None
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;		None
 11101 ;; Return value:  Size  Location     Type
 11102 ;;		None               void
 11103 ;; Registers used:
 11104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;Total ram usage:        1 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    8
 11117 ;; This function calls:
 11118 ;;		_Flash_Memory_Modify
 11119 ;;		_getMain_LightsStatus
 11120 ;; This function is called by:
 11121 ;;		_main
 11122 ;; This function uses a non-reentrant model
 11123 ;;
 11124                           
 11125                           
 11126                           ;psect for function _Flash_Memory_Main
 11127  12FA                     _Flash_Memory_Main:	
 11128                           
 11129                           ;MCU_B1.c: 969: if (Memory.Modify == 1) {
 11130                           
 11131                           ;incstack = 0
 11132                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11133  12FA  0023               	movlb	3	; select bank3
 11134  12FB  1C62               	btfss	(_Memory^(0+384)+36),0
 11135  12FC  0008               	return
 11136                           
 11137                           ;MCU_B1.c: 970: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11138  12FD  319C  248C  3192   	fcall	_getMain_LightsStatus
 11139  1300  3A00               	xorlw	0
 11140  1301  3000               	movlw	0
 11141  1302  1903               	skipnz
 11142  1303  3001               	movlw	1
 11143  1304  0020               	movlb	0	; select bank0
 11144  1305  00A6               	movwf	??_Flash_Memory_Main
 11145  1306  0DA6               	rlf	??_Flash_Memory_Main,f
 11146  1307  0023               	movlb	3	; select bank3
 11147  1308  0862               	movf	(_Memory^(0+384)+36),w
 11148  1309  0020               	movlb	0	; select bank0
 11149  130A  0626               	xorwf	??_Flash_Memory_Main,w
 11150  130B  39FD               	andlw	-3
 11151  130C  0626               	xorwf	??_Flash_Memory_Main,w
 11152  130D  0023               	movlb	3	; select bank3
 11153  130E  00E2               	movwf	(_Memory^(0+384)+36)
 11154                           
 11155                           ;MCU_B1.c: 971: if (Memory.GO == 1) {
 11156  130F  1CE2               	btfss	(_Memory^(0+384)+36),1
 11157  1310  2B2A               	goto	l1198
 11158                           
 11159                           ;MCU_B1.c: 972: Memory.Runtime = 1;
 11160  1311  15E2               	bsf	(_Memory^(0+384)+36),3
 11161                           
 11162                           ;MCU_B1.c: 973: Memory.Time++;
 11163  1312  3001               	movlw	1
 11164  1313  07E0               	addwf	(_Memory^(0+384)+34),f
 11165  1314  3000               	movlw	0
 11166  1315  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11167                           
 11168                           ;MCU_B1.c: 974: if (Memory.Time == 25) {
 11169  1316  3022               	movlw	34
 11170  1317  3EBE               	addlw	_Memory& (0+255)
 11171  1318  0086               	movwf	6
 11172  1319  3001               	movlw	1	; select bank3/4
 11173  131A  0087               	movwf	7
 11174  131B  3F40               	moviw [0]fsr1
 11175  131C  3A19               	xorlw	25
 11176  131D  1D03               	skipz
 11177  131E  2B21               	goto	u11105
 11178  131F  3F41               	moviw [1]fsr1
 11179  1320  3A00               	xorlw	0
 11180  1321                     u11105:	
 11181  1321  1D03               	skipz
 11182  1322  0008               	return
 11183                           
 11184                           ;MCU_B1.c: 975: Memory.Time = 0;
 11185  1323  01E0               	clrf	(_Memory^(0+384)+34)
 11186  1324  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11187                           
 11188                           ;MCU_B1.c: 976: Memory.Modify = 0;
 11189  1325  1062               	bcf	(_Memory^(0+384)+36),0
 11190                           
 11191                           ;MCU_B1.c: 977: Memory.GO = 0;
 11192  1326  10E2               	bcf	(_Memory^(0+384)+36),1
 11193                           
 11194                           ;MCU_B1.c: 978: Flash_Memory_Modify();
 11195  1327  3195  2511         	fcall	_Flash_Memory_Modify
 11196                           
 11197                           ;MCU_B1.c: 979: }
 11198                           ;MCU_B1.c: 980: } else {
 11199  1329  0008               	return
 11200  132A                     l1198:	
 11201                           
 11202                           ;MCU_B1.c: 981: if (Memory.Runtime == 1) {
 11203  132A  1DE2               	btfss	(_Memory^(0+384)+36),3
 11204  132B  0008               	return
 11205                           
 11206                           ;MCU_B1.c: 982: Memory.Runtime = 0;
 11207  132C  11E2               	bcf	(_Memory^(0+384)+36),3
 11208                           
 11209                           ;MCU_B1.c: 983: Memory.Time = 0;
 11210  132D  01E0               	clrf	(_Memory^(0+384)+34)
 11211  132E  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11212  132F  0008               	return
 11213  1330                     __end_of_Flash_Memory_Main:	
 11214                           
 11215                           	psect	text65
 11216  1511                     __ptext65:	
 11217 ;; *************** function _Flash_Memory_Modify *****************
 11218 ;; Defined at:
 11219 ;;		line 1041 in file "../src/MCU_B1.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;		None
 11222 ;; Auto vars:     Size  Location     Type
 11223 ;;  i               1    5[BANK0 ] unsigned char 
 11224 ;; Return value:  Size  Location     Type
 11225 ;;		None               void
 11226 ;; Registers used:
 11227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11228 ;; Tracked objects:
 11229 ;;		On entry : 0/0
 11230 ;;		On exit  : 0/0
 11231 ;;		Unchanged: 0/0
 11232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;Total ram usage:        2 bytes
 11238 ;; Hardware stack levels used:    1
 11239 ;; Hardware stack levels required when called:    7
 11240 ;; This function calls:
 11241 ;;		_Flash_Memory_Erasing
 11242 ;;		_Flash_Memory_Read
 11243 ;;		_Flash_Memory_Write
 11244 ;;		_setMemory_Data
 11245 ;; This function is called by:
 11246 ;;		_Flash_Memory_Main
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           
 11251                           ;psect for function _Flash_Memory_Modify
 11252  1511                     _Flash_Memory_Modify:	
 11253                           
 11254                           ;MCU_B1.c: 1042: char i = 0;
 11255                           
 11256                           ;incstack = 0
 11257                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11258  1511  0020               	movlb	0	; select bank0
 11259  1512  01A5               	clrf	Flash_Memory_Modify@i
 11260                           
 11261                           ;MCU_B1.c: 1043: for (i = 0; i < 32; i++) {
 11262  1513  01A5               	clrf	Flash_Memory_Modify@i
 11263  1514  3020               	movlw	32
 11264  1515  0225               	subwf	Flash_Memory_Modify@i,w
 11265  1516  1803               	btfsc	3,0
 11266  1517  2D2D               	goto	l9430
 11267  1518                     l9424:	
 11268                           
 11269                           ;MCU_B1.c: 1044: Memory.Data[i] = Flash_Memory_Read(i);
 11270  1518  0825               	movf	Flash_Memory_Modify@i,w
 11271  1519  319E  26D8  3195   	fcall	_Flash_Memory_Read
 11272  151C  0020               	movlb	0	; select bank0
 11273  151D  00A4               	movwf	??_Flash_Memory_Modify
 11274  151E  0825               	movf	Flash_Memory_Modify@i,w
 11275  151F  3EBE               	addlw	_Memory& (0+255)
 11276  1520  0086               	movwf	6
 11277  1521  3001               	movlw	1	; select bank3/4
 11278  1522  0087               	movwf	7
 11279  1523  0824               	movf	??_Flash_Memory_Modify,w
 11280  1524  0081               	movwf	1
 11281  1525  3001               	movlw	1
 11282  1526  00A4               	movwf	??_Flash_Memory_Modify
 11283  1527  0824               	movf	??_Flash_Memory_Modify,w
 11284  1528  07A5               	addwf	Flash_Memory_Modify@i,f
 11285  1529  3020               	movlw	32
 11286  152A  0225               	subwf	Flash_Memory_Modify@i,w
 11287  152B  1C03               	skipc
 11288  152C  2D18               	goto	l9424
 11289  152D                     l9430:	
 11290                           
 11291                           ;MCU_B1.c: 1045: }
 11292                           ;MCU_B1.c: 1046: setMemory_Data(0, product->Data[12]);
 11293  152D  0879               	movf	_product,w
 11294  152E  0086               	movwf	6
 11295  152F  3002               	movlw	2	; select bank4/5
 11296  1530  0087               	movwf	7
 11297  1531  3002               	movlw	2	; select bank4/5
 11298  1532  3F4C               	moviw [12]fsr1
 11299  1533  00A0               	movwf	setMemory_Data@data
 11300  1534  3000               	movlw	0
 11301  1535  319C  24FB  3195   	fcall	_setMemory_Data
 11302                           
 11303                           ;MCU_B1.c: 1047: setMemory_Data(1, product->Data[13]);
 11304  1538  0879               	movf	_product,w
 11305  1539  0086               	movwf	6
 11306  153A  3002               	movlw	2	; select bank4/5
 11307  153B  0087               	movwf	7
 11308  153C  3002               	movlw	2	; select bank4/5
 11309  153D  3F4D               	moviw [13]fsr1
 11310  153E  0020               	movlb	0	; select bank0
 11311  153F  00A0               	movwf	setMemory_Data@data
 11312  1540  3001               	movlw	1
 11313  1541  319C  24FB  3195   	fcall	_setMemory_Data
 11314                           
 11315                           ;MCU_B1.c: 1048: setMemory_Data(2, product->Data[14]);
 11316  1544  0879               	movf	_product,w
 11317  1545  0086               	movwf	6
 11318  1546  3002               	movlw	2	; select bank4/5
 11319  1547  0087               	movwf	7
 11320  1548  3002               	movlw	2	; select bank4/5
 11321  1549  3F4E               	moviw [14]fsr1
 11322  154A  0020               	movlb	0	; select bank0
 11323  154B  00A0               	movwf	setMemory_Data@data
 11324  154C  3002               	movlw	2
 11325  154D  319C  24FB  3195   	fcall	_setMemory_Data
 11326                           
 11327                           ;MCU_B1.c: 1054: if (Memory.LoopSave == 1) {
 11328  1550  0023               	movlb	3	; select bank3
 11329  1551  1D62               	btfss	(_Memory^(0+384)+36),2
 11330  1552  2D57               	goto	l1221
 11331                           
 11332                           ;MCU_B1.c: 1055: Memory.LoopSave = 0;
 11333  1553  1162               	bcf	(_Memory^(0+384)+36),2
 11334                           
 11335                           ;MCU_B1.c: 1056: myMain.FirstOpen = 0;
 11336  1554  0021               	movlb	1	; select bank1
 11337  1555  11A0               	bcf	_myMain^(0+128),3
 11338                           
 11339                           ;MCU_B1.c: 1057: myMain.First = 0;
 11340  1556  12A0               	bcf	_myMain^(0+128),5
 11341  1557                     l1221:	
 11342                           
 11343                           ;MCU_B1.c: 1059: }
 11344                           ;MCU_B1.c: 1060: GIE = 0;
 11345  1557  138B               	bcf	11,7	;volatile
 11346                           
 11347                           ;MCU_B1.c: 1061: Flash_Memory_Erasing();
 11348  1558  319D  2507  3195   	fcall	_Flash_Memory_Erasing
 11349                           
 11350                           ;MCU_B1.c: 1062: Flash_Memory_Write();
 11351  155B  3191  21D0         	fcall	_Flash_Memory_Write
 11352                           
 11353                           ;MCU_B1.c: 1063: GIE = 1;
 11354  155D  178B               	bsf	11,7	;volatile
 11355  155E  0008               	return
 11356  155F                     __end_of_Flash_Memory_Modify:	
 11357                           
 11358                           	psect	text66
 11359  1D07                     __ptext66:	
 11360 ;; *************** function _Flash_Memory_Erasing *****************
 11361 ;; Defined at:
 11362 ;;		line 1030 in file "../src/MCU_B1.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;		None
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;		None
 11367 ;; Return value:  Size  Location     Type
 11368 ;;		None               void
 11369 ;; Registers used:
 11370 ;;		wreg, status,2, status,0, pclath, cstack
 11371 ;; Tracked objects:
 11372 ;;		On entry : 0/0
 11373 ;;		On exit  : 0/0
 11374 ;;		Unchanged: 0/0
 11375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;Total ram usage:        0 bytes
 11381 ;; Hardware stack levels used:    1
 11382 ;; Hardware stack levels required when called:    6
 11383 ;; This function calls:
 11384 ;;		_Flash_Memory_Unlock
 11385 ;; This function is called by:
 11386 ;;		_Flash_Memory_Modify
 11387 ;; This function uses a non-reentrant model
 11388 ;;
 11389                           
 11390                           
 11391                           ;psect for function _Flash_Memory_Erasing
 11392  1D07                     _Flash_Memory_Erasing:	
 11393                           
 11394                           ;MCU_B1.c: 1031: CFGS = 0;
 11395                           
 11396                           ;incstack = 0
 11397                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11398  1D07  0023               	movlb	3	; select bank3
 11399  1D08  1315               	bcf	21,6	;volatile
 11400                           
 11401                           ;MCU_B1.c: 1032: PMADRH = 0x30;
 11402  1D09  3030               	movlw	48
 11403  1D0A  0092               	movwf	18	;volatile
 11404                           
 11405                           ;MCU_B1.c: 1033: PMADRL = 0x00;
 11406  1D0B  0191               	clrf	17	;volatile
 11407                           
 11408                           ;MCU_B1.c: 1034: FREE = 1;
 11409  1D0C  1615               	bsf	21,4	;volatile
 11410                           
 11411                           ;MCU_B1.c: 1035: WREN = 1;
 11412  1D0D  1515               	bsf	21,2	;volatile
 11413                           
 11414                           ;MCU_B1.c: 1036: Flash_Memory_Unlock();
 11415  1D0E  319C  2466         	fcall	_Flash_Memory_Unlock
 11416                           
 11417                           ;MCU_B1.c: 1037: WREN = 0;
 11418  1D10  0023               	movlb	3	; select bank3
 11419  1D11  1115               	bcf	21,2	;volatile
 11420  1D12  0008               	return
 11421  1D13                     __end_of_Flash_Memory_Erasing:	
 11422                           
 11423                           	psect	text67
 11424  054C                     __ptext67:	
 11425 ;; *************** function _Flash_Memory_Initialization *****************
 11426 ;; Defined at:
 11427 ;;		line 927 in file "../src/MCU_B1.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;		None
 11430 ;; Auto vars:     Size  Location     Type
 11431 ;;  i               1   67[BANK0 ] unsigned char 
 11432 ;; Return value:  Size  Location     Type
 11433 ;;		None               void
 11434 ;; Registers used:
 11435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11436 ;; Tracked objects:
 11437 ;;		On entry : 0/0
 11438 ;;		On exit  : 0/0
 11439 ;;		Unchanged: 0/0
 11440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;Total ram usage:        2 bytes
 11446 ;; Hardware stack levels used:    1
 11447 ;; Hardware stack levels required when called:    8
 11448 ;; This function calls:
 11449 ;;		_Flash_Memory_Read
 11450 ;;		_Flash_Memory_Write
 11451 ;;		_setMemory_Data
 11452 ;;		_setPercentValue
 11453 ;; This function is called by:
 11454 ;;		_main
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           
 11459                           ;psect for function _Flash_Memory_Initialization
 11460  054C                     _Flash_Memory_Initialization:	
 11461                           
 11462                           ;MCU_B1.c: 928: char i = 0;
 11463                           
 11464                           ;incstack = 0
 11465                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11466  054C  0020               	movlb	0	; select bank0
 11467  054D  01E3               	clrf	Flash_Memory_Initialization@i
 11468                           
 11469                           ;MCU_B1.c: 929: if (Flash_Memory_Read(31) == 0xaa) {
 11470  054E  301F               	movlw	31
 11471  054F  319E  26D8  3185   	fcall	_Flash_Memory_Read
 11472  0552  3AAA               	xorlw	170
 11473  0553  1D03               	skipz
 11474  0554  2DBE               	goto	l9820
 11475                           
 11476                           ;MCU_B1.c: 930: product->Data[12] = Flash_Memory_Read(0);
 11477  0555  3000               	movlw	0
 11478  0556  319E  26D8  3185   	fcall	_Flash_Memory_Read
 11479  0559  0020               	movlb	0	; select bank0
 11480  055A  00E2               	movwf	??_Flash_Memory_Initialization
 11481  055B  0879               	movf	_product,w
 11482  055C  3E0C               	addlw	12
 11483  055D  0086               	movwf	6
 11484  055E  3002               	movlw	2	; select bank4/5
 11485  055F  0087               	movwf	7
 11486  0560  0862               	movf	??_Flash_Memory_Initialization,w
 11487  0561  0081               	movwf	1
 11488                           
 11489                           ;MCU_B1.c: 931: product->Data[13] = Flash_Memory_Read(1);
 11490  0562  3001               	movlw	1
 11491  0563  319E  26D8  3185   	fcall	_Flash_Memory_Read
 11492  0566  0020               	movlb	0	; select bank0
 11493  0567  00E2               	movwf	??_Flash_Memory_Initialization
 11494  0568  0879               	movf	_product,w
 11495  0569  3E0D               	addlw	13
 11496  056A  0086               	movwf	6
 11497  056B  3002               	movlw	2	; select bank4/5
 11498  056C  0087               	movwf	7
 11499  056D  0862               	movf	??_Flash_Memory_Initialization,w
 11500  056E  0081               	movwf	1
 11501                           
 11502                           ;MCU_B1.c: 932: product->Data[14] = Flash_Memory_Read(2);
 11503  056F  3002               	movlw	2
 11504  0570  319E  26D8  3185   	fcall	_Flash_Memory_Read
 11505  0573  0020               	movlb	0	; select bank0
 11506  0574  00E2               	movwf	??_Flash_Memory_Initialization
 11507  0575  0879               	movf	_product,w
 11508  0576  3E0E               	addlw	14
 11509  0577  0086               	movwf	6
 11510  0578  3002               	movlw	2	; select bank4/5
 11511  0579  0087               	movwf	7
 11512  057A  0862               	movf	??_Flash_Memory_Initialization,w
 11513  057B  0081               	movwf	1
 11514                           
 11515                           ;MCU_B1.c: 938: i = setPercentValue(((char)(70*0.8)));
 11516  057C  3038               	movlw	56
 11517  057D  3189  21ED  3185   	fcall	_setPercentValue
 11518  0580  0020               	movlb	0	; select bank0
 11519  0581  00E2               	movwf	??_Flash_Memory_Initialization
 11520  0582  0862               	movf	??_Flash_Memory_Initialization,w
 11521  0583  00E3               	movwf	Flash_Memory_Initialization@i
 11522                           
 11523                           ;MCU_B1.c: 939: product->Data[21] = i;
 11524  0584  0863               	movf	Flash_Memory_Initialization@i,w
 11525  0585  00E2               	movwf	??_Flash_Memory_Initialization
 11526  0586  0879               	movf	_product,w
 11527  0587  3E15               	addlw	21
 11528  0588  0086               	movwf	6
 11529  0589  3002               	movlw	2	; select bank4/5
 11530  058A  0087               	movwf	7
 11531  058B  0862               	movf	??_Flash_Memory_Initialization,w
 11532  058C  0081               	movwf	1
 11533                           
 11534                           ;MCU_B1.c: 940: product->Data[22] = i;
 11535  058D  0863               	movf	Flash_Memory_Initialization@i,w
 11536  058E  00E2               	movwf	??_Flash_Memory_Initialization
 11537  058F  0879               	movf	_product,w
 11538  0590  3E16               	addlw	22
 11539  0591  0086               	movwf	6
 11540  0592  3002               	movlw	2	; select bank4/5
 11541  0593  0087               	movwf	7
 11542  0594  0862               	movf	??_Flash_Memory_Initialization,w
 11543  0595  0081               	movwf	1
 11544                           
 11545                           ;MCU_B1.c: 941: product->Data[23] = i;
 11546  0596  0863               	movf	Flash_Memory_Initialization@i,w
 11547  0597  00E2               	movwf	??_Flash_Memory_Initialization
 11548  0598  0879               	movf	_product,w
 11549  0599  3E17               	addlw	23
 11550  059A  0086               	movwf	6
 11551  059B  3002               	movlw	2	; select bank4/5
 11552  059C  0087               	movwf	7
 11553  059D  0862               	movf	??_Flash_Memory_Initialization,w
 11554  059E  0081               	movwf	1
 11555                           
 11556                           ;MCU_B1.c: 943: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11557  059F  0879               	movf	_product,w
 11558  05A0  3E0C               	addlw	12
 11559  05A1  0086               	movwf	6
 11560  05A2  3002               	movlw	2	; select bank4/5
 11561  05A3  0087               	movwf	7
 11562  05A4  0801               	movf	1,w
 11563  05A5  3AFF               	xorlw	255
 11564  05A6  1D03               	skipz
 11565  05A7  0008               	return
 11566  05A8  0879               	movf	_product,w
 11567  05A9  3E0D               	addlw	13
 11568  05AA  0086               	movwf	6
 11569  05AB  3002               	movlw	2	; select bank4/5
 11570  05AC  0087               	movwf	7
 11571  05AD  0801               	movf	1,w
 11572  05AE  3AFF               	xorlw	255
 11573  05AF  1D03               	skipz
 11574  05B0  0008               	return
 11575  05B1  0879               	movf	_product,w
 11576  05B2  3E0E               	addlw	14
 11577  05B3  0086               	movwf	6
 11578  05B4  3002               	movlw	2	; select bank4/5
 11579  05B5  0087               	movwf	7
 11580  05B6  0801               	movf	1,w
 11581  05B7  3AFF               	xorlw	255
 11582  05B8  1D03               	skipz
 11583  05B9  0008               	return
 11584                           
 11585                           ;MCU_B1.c: 944: myMain.FirstOpen = 1;
 11586  05BA  0021               	movlb	1	; select bank1
 11587  05BB  15A0               	bsf	_myMain^(0+128),3
 11588                           
 11589                           ;MCU_B1.c: 945: myMain.First = 1;
 11590  05BC  16A0               	bsf	_myMain^(0+128),5
 11591                           
 11592                           ;MCU_B1.c: 946: }
 11593                           ;MCU_B1.c: 947: } else {
 11594  05BD  0008               	return
 11595  05BE                     l9820:	
 11596                           
 11597                           ;MCU_B1.c: 948: i = setPercentValue(((char)(70*0.8)));
 11598  05BE  3038               	movlw	56
 11599  05BF  3189  21ED  3185   	fcall	_setPercentValue
 11600  05C2  0020               	movlb	0	; select bank0
 11601  05C3  00E2               	movwf	??_Flash_Memory_Initialization
 11602  05C4  0862               	movf	??_Flash_Memory_Initialization,w
 11603  05C5  00E3               	movwf	Flash_Memory_Initialization@i
 11604                           
 11605                           ;MCU_B1.c: 949: setMemory_Data(0, 0xff);
 11606  05C6  30FF               	movlw	255
 11607  05C7  00E2               	movwf	??_Flash_Memory_Initialization
 11608  05C8  0862               	movf	??_Flash_Memory_Initialization,w
 11609  05C9  00A0               	movwf	setMemory_Data@data
 11610  05CA  3000               	movlw	0
 11611  05CB  319C  24FB  3185   	fcall	_setMemory_Data
 11612                           
 11613                           ;MCU_B1.c: 950: setMemory_Data(1, 0xff);
 11614  05CE  30FF               	movlw	255
 11615  05CF  0020               	movlb	0	; select bank0
 11616  05D0  00E2               	movwf	??_Flash_Memory_Initialization
 11617  05D1  0862               	movf	??_Flash_Memory_Initialization,w
 11618  05D2  00A0               	movwf	setMemory_Data@data
 11619  05D3  3001               	movlw	1
 11620  05D4  319C  24FB  3185   	fcall	_setMemory_Data
 11621                           
 11622                           ;MCU_B1.c: 951: setMemory_Data(2, 0xff);
 11623  05D7  30FF               	movlw	255
 11624  05D8  0020               	movlb	0	; select bank0
 11625  05D9  00E2               	movwf	??_Flash_Memory_Initialization
 11626  05DA  0862               	movf	??_Flash_Memory_Initialization,w
 11627  05DB  00A0               	movwf	setMemory_Data@data
 11628  05DC  3002               	movlw	2
 11629  05DD  319C  24FB  3185   	fcall	_setMemory_Data
 11630                           
 11631                           ;MCU_B1.c: 952: setMemory_Data(3, 0xff);
 11632  05E0  30FF               	movlw	255
 11633  05E1  0020               	movlb	0	; select bank0
 11634  05E2  00E2               	movwf	??_Flash_Memory_Initialization
 11635  05E3  0862               	movf	??_Flash_Memory_Initialization,w
 11636  05E4  00A0               	movwf	setMemory_Data@data
 11637  05E5  3003               	movlw	3
 11638  05E6  319C  24FB  3185   	fcall	_setMemory_Data
 11639                           
 11640                           ;MCU_B1.c: 953: setMemory_Data(4, 0xff);
 11641  05E9  30FF               	movlw	255
 11642  05EA  0020               	movlb	0	; select bank0
 11643  05EB  00E2               	movwf	??_Flash_Memory_Initialization
 11644  05EC  0862               	movf	??_Flash_Memory_Initialization,w
 11645  05ED  00A0               	movwf	setMemory_Data@data
 11646  05EE  3004               	movlw	4
 11647  05EF  319C  24FB  3185   	fcall	_setMemory_Data
 11648                           
 11649                           ;MCU_B1.c: 954: setMemory_Data(5, 0xff);
 11650  05F2  30FF               	movlw	255
 11651  05F3  0020               	movlb	0	; select bank0
 11652  05F4  00E2               	movwf	??_Flash_Memory_Initialization
 11653  05F5  0862               	movf	??_Flash_Memory_Initialization,w
 11654  05F6  00A0               	movwf	setMemory_Data@data
 11655  05F7  3005               	movlw	5
 11656  05F8  319C  24FB  3185   	fcall	_setMemory_Data
 11657                           
 11658                           ;MCU_B1.c: 955: setMemory_Data(31, 0xaa);
 11659  05FB  30AA               	movlw	170
 11660  05FC  0020               	movlb	0	; select bank0
 11661  05FD  00E2               	movwf	??_Flash_Memory_Initialization
 11662  05FE  0862               	movf	??_Flash_Memory_Initialization,w
 11663  05FF  00A0               	movwf	setMemory_Data@data
 11664  0600  301F               	movlw	31
 11665  0601  319C  24FB  3185   	fcall	_setMemory_Data
 11666                           
 11667                           ;MCU_B1.c: 956: product->Data[21] = i;
 11668  0604  0020               	movlb	0	; select bank0
 11669  0605  0863               	movf	Flash_Memory_Initialization@i,w
 11670  0606  00E2               	movwf	??_Flash_Memory_Initialization
 11671  0607  0879               	movf	_product,w
 11672  0608  3E15               	addlw	21
 11673  0609  0086               	movwf	6
 11674  060A  3002               	movlw	2	; select bank4/5
 11675  060B  0087               	movwf	7
 11676  060C  0862               	movf	??_Flash_Memory_Initialization,w
 11677  060D  0081               	movwf	1
 11678                           
 11679                           ;MCU_B1.c: 957: product->Data[22] = i;
 11680  060E  0863               	movf	Flash_Memory_Initialization@i,w
 11681  060F  00E2               	movwf	??_Flash_Memory_Initialization
 11682  0610  0879               	movf	_product,w
 11683  0611  3E16               	addlw	22
 11684  0612  0086               	movwf	6
 11685  0613  3002               	movlw	2	; select bank4/5
 11686  0614  0087               	movwf	7
 11687  0615  0862               	movf	??_Flash_Memory_Initialization,w
 11688  0616  0081               	movwf	1
 11689                           
 11690                           ;MCU_B1.c: 958: product->Data[23] = i;
 11691  0617  0863               	movf	Flash_Memory_Initialization@i,w
 11692  0618  00E2               	movwf	??_Flash_Memory_Initialization
 11693  0619  0879               	movf	_product,w
 11694  061A  3E17               	addlw	23
 11695  061B  0086               	movwf	6
 11696  061C  3002               	movlw	2	; select bank4/5
 11697  061D  0087               	movwf	7
 11698  061E  0862               	movf	??_Flash_Memory_Initialization,w
 11699  061F  0081               	movwf	1
 11700                           
 11701                           ;MCU_B1.c: 959: GIE = 0;
 11702  0620  138B               	bcf	11,7	;volatile
 11703                           
 11704                           ;MCU_B1.c: 960: Flash_Memory_Write();
 11705  0621  3191  21D0         	fcall	_Flash_Memory_Write
 11706                           
 11707                           ;MCU_B1.c: 961: GIE = 1;
 11708  0623  178B               	bsf	11,7	;volatile
 11709                           
 11710                           ;MCU_B1.c: 962: myMain.FirstOpen = 1;
 11711  0624  0021               	movlb	1	; select bank1
 11712  0625  15A0               	bsf	_myMain^(0+128),3
 11713                           
 11714                           ;MCU_B1.c: 963: myMain.First = 1;
 11715  0626  16A0               	bsf	_myMain^(0+128),5
 11716  0627  0008               	return
 11717  0628                     __end_of_Flash_Memory_Initialization:	
 11718                           
 11719                           	psect	text68
 11720  1CFB                     __ptext68:	
 11721 ;; *************** function _setMemory_Data *****************
 11722 ;; Defined at:
 11723 ;;		line 1078 in file "../src/MCU_B1.c"
 11724 ;; Parameters:    Size  Location     Type
 11725 ;;  address         1    wreg     unsigned char 
 11726 ;;  data            1    0[BANK0 ] unsigned char 
 11727 ;; Auto vars:     Size  Location     Type
 11728 ;;  address         1    2[BANK0 ] unsigned char 
 11729 ;; Return value:  Size  Location     Type
 11730 ;;		None               void
 11731 ;; Registers used:
 11732 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11733 ;; Tracked objects:
 11734 ;;		On entry : 0/0
 11735 ;;		On exit  : 0/0
 11736 ;;		Unchanged: 0/0
 11737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11738 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;Total ram usage:        3 bytes
 11743 ;; Hardware stack levels used:    1
 11744 ;; Hardware stack levels required when called:    5
 11745 ;; This function calls:
 11746 ;;		Nothing
 11747 ;; This function is called by:
 11748 ;;		_Flash_Memory_Initialization
 11749 ;;		_Flash_Memory_Modify
 11750 ;; This function uses a non-reentrant model
 11751 ;;
 11752                           
 11753                           
 11754                           ;psect for function _setMemory_Data
 11755  1CFB                     _setMemory_Data:	
 11756                           
 11757                           ;incstack = 0
 11758                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11759                           ;setMemory_Data@address stored from wreg
 11760  1CFB  0020               	movlb	0	; select bank0
 11761  1CFC  00A2               	movwf	setMemory_Data@address
 11762                           
 11763                           ;MCU_B1.c: 1079: Memory.Data[address] = data;
 11764  1CFD  0820               	movf	setMemory_Data@data,w
 11765  1CFE  00A1               	movwf	??_setMemory_Data
 11766  1CFF  0822               	movf	setMemory_Data@address,w
 11767  1D00  3EBE               	addlw	_Memory& (0+255)
 11768  1D01  0086               	movwf	6
 11769  1D02  3001               	movlw	1	; select bank3/4
 11770  1D03  0087               	movwf	7
 11771  1D04  0821               	movf	??_setMemory_Data,w
 11772  1D05  0081               	movwf	1
 11773  1D06  0008               	return
 11774  1D07                     __end_of_setMemory_Data:	
 11775                           
 11776                           	psect	text69
 11777  11D0                     __ptext69:	
 11778 ;; *************** function _Flash_Memory_Write *****************
 11779 ;; Defined at:
 11780 ;;		line 1011 in file "../src/MCU_B1.c"
 11781 ;; Parameters:    Size  Location     Type
 11782 ;;		None
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;  i               1    1[BANK0 ] unsigned char 
 11785 ;; Return value:  Size  Location     Type
 11786 ;;		None               void
 11787 ;; Registers used:
 11788 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11789 ;; Tracked objects:
 11790 ;;		On entry : 0/0
 11791 ;;		On exit  : 0/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;Total ram usage:        2 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    6
 11801 ;; This function calls:
 11802 ;;		_Flash_Memory_Unlock
 11803 ;; This function is called by:
 11804 ;;		_Flash_Memory_Initialization
 11805 ;;		_Flash_Memory_Modify
 11806 ;; This function uses a non-reentrant model
 11807 ;;
 11808                           
 11809                           
 11810                           ;psect for function _Flash_Memory_Write
 11811  11D0                     _Flash_Memory_Write:	
 11812                           
 11813                           ;MCU_B1.c: 1012: char i = 0;
 11814                           
 11815                           ;incstack = 0
 11816                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11817  11D0  0020               	movlb	0	; select bank0
 11818  11D1  01A1               	clrf	Flash_Memory_Write@i
 11819                           
 11820                           ;MCU_B1.c: 1013: CFGS = 0;
 11821  11D2  0023               	movlb	3	; select bank3
 11822  11D3  1315               	bcf	21,6	;volatile
 11823                           
 11824                           ;MCU_B1.c: 1014: PMADRH = 0x30;
 11825  11D4  3030               	movlw	48
 11826  11D5  0092               	movwf	18	;volatile
 11827                           
 11828                           ;MCU_B1.c: 1015: PMDATH = 0;
 11829  11D6  0194               	clrf	20	;volatile
 11830                           
 11831                           ;MCU_B1.c: 1016: FREE = 0;
 11832  11D7  1215               	bcf	21,4	;volatile
 11833                           
 11834                           ;MCU_B1.c: 1017: LWLO = 1;
 11835  11D8  1695               	bsf	21,5	;volatile
 11836                           
 11837                           ;MCU_B1.c: 1018: WREN = 1;
 11838  11D9  1515               	bsf	21,2	;volatile
 11839                           
 11840                           ;MCU_B1.c: 1019: for (i = 0; i < 32; i++) {
 11841  11DA  0020               	movlb	0	; select bank0
 11842  11DB  01A1               	clrf	Flash_Memory_Write@i
 11843  11DC  3020               	movlw	32
 11844  11DD  0221               	subwf	Flash_Memory_Write@i,w
 11845  11DE  1803               	btfsc	3,0
 11846  11DF  29F8               	goto	l1212
 11847  11E0                     l9026:	
 11848                           
 11849                           ;MCU_B1.c: 1020: PMADRL = i;
 11850  11E0  0821               	movf	Flash_Memory_Write@i,w
 11851  11E1  0023               	movlb	3	; select bank3
 11852  11E2  0091               	movwf	17	;volatile
 11853                           
 11854                           ;MCU_B1.c: 1021: PMDATL = Memory.Data[i];
 11855  11E3  0020               	movlb	0	; select bank0
 11856  11E4  0821               	movf	Flash_Memory_Write@i,w
 11857  11E5  3EBE               	addlw	_Memory& (0+255)
 11858  11E6  0086               	movwf	6
 11859  11E7  3001               	movlw	1	; select bank3/4
 11860  11E8  0087               	movwf	7
 11861  11E9  0801               	movf	1,w
 11862  11EA  0023               	movlb	3	; select bank3
 11863  11EB  0093               	movwf	19	;volatile
 11864                           
 11865                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 11866  11EC  319C  2466  3191   	fcall	_Flash_Memory_Unlock
 11867  11EF  3001               	movlw	1
 11868  11F0  0020               	movlb	0	; select bank0
 11869  11F1  00A0               	movwf	??_Flash_Memory_Write
 11870  11F2  0820               	movf	??_Flash_Memory_Write,w
 11871  11F3  07A1               	addwf	Flash_Memory_Write@i,f
 11872  11F4  3020               	movlw	32
 11873  11F5  0221               	subwf	Flash_Memory_Write@i,w
 11874  11F6  1C03               	skipc
 11875  11F7  29E0               	goto	l9026
 11876  11F8                     l1212:	
 11877                           
 11878                           ;MCU_B1.c: 1023: }
 11879                           ;MCU_B1.c: 1024: LWLO = 0;
 11880  11F8  0023               	movlb	3	; select bank3
 11881  11F9  1295               	bcf	21,5	;volatile
 11882                           
 11883                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 11884  11FA  319C  2466         	fcall	_Flash_Memory_Unlock
 11885                           
 11886                           ;MCU_B1.c: 1026: WREN = 0;
 11887  11FC  0023               	movlb	3	; select bank3
 11888  11FD  1115               	bcf	21,2	;volatile
 11889  11FE  0008               	return
 11890  11FF                     __end_of_Flash_Memory_Write:	
 11891                           
 11892                           	psect	text70
 11893  1C66                     __ptext70:	
 11894 ;; *************** function _Flash_Memory_Unlock *****************
 11895 ;; Defined at:
 11896 ;;		line 990 in file "../src/MCU_B1.c"
 11897 ;; Parameters:    Size  Location     Type
 11898 ;;		None
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;		None
 11901 ;; Return value:  Size  Location     Type
 11902 ;;		None               void
 11903 ;; Registers used:
 11904 ;;		wreg
 11905 ;; Tracked objects:
 11906 ;;		On entry : 0/0
 11907 ;;		On exit  : 0/0
 11908 ;;		Unchanged: 0/0
 11909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;Total ram usage:        0 bytes
 11915 ;; Hardware stack levels used:    1
 11916 ;; Hardware stack levels required when called:    5
 11917 ;; This function calls:
 11918 ;;		Nothing
 11919 ;; This function is called by:
 11920 ;;		_Flash_Memory_Write
 11921 ;;		_Flash_Memory_Erasing
 11922 ;; This function uses a non-reentrant model
 11923 ;;
 11924                           
 11925                           
 11926                           ;psect for function _Flash_Memory_Unlock
 11927  1C66                     _Flash_Memory_Unlock:	
 11928                           
 11929                           ;MCU_B1.c: 991: PMCON2 = 0x55;
 11930                           
 11931                           ;incstack = 0
 11932                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11933  1C66  3055               	movlw	85
 11934  1C67  0023               	movlb	3	; select bank3
 11935  1C68  0096               	movwf	22	;volatile
 11936                           
 11937                           ;MCU_B1.c: 992: PMCON2 = 0xaa;
 11938  1C69  30AA               	movlw	170
 11939  1C6A  0096               	movwf	22	;volatile
 11940                           
 11941                           ;MCU_B1.c: 993: WR = 1;
 11942  1C6B  1495               	bsf	21,1	;volatile
 11943                           
 11944                           ;MCU_B1.c: 994: __nop();
 11945  1C6C  0000               	nop
 11946                           
 11947                           ;MCU_B1.c: 995: __nop();
 11948  1C6D  0000               	nop
 11949  1C6E  0008               	return
 11950  1C6F                     __end_of_Flash_Memory_Unlock:	
 11951                           
 11952                           	psect	text71
 11953  1ED8                     __ptext71:	
 11954 ;; *************** function _Flash_Memory_Read *****************
 11955 ;; Defined at:
 11956 ;;		line 999 in file "../src/MCU_B1.c"
 11957 ;; Parameters:    Size  Location     Type
 11958 ;;  address         1    wreg     unsigned char 
 11959 ;; Auto vars:     Size  Location     Type
 11960 ;;  address         1    2[BANK0 ] unsigned char 
 11961 ;;  ret             1    3[BANK0 ] unsigned char 
 11962 ;;  i               1    1[BANK0 ] unsigned char 
 11963 ;; Return value:  Size  Location     Type
 11964 ;;                  1    wreg      unsigned char 
 11965 ;; Registers used:
 11966 ;;		wreg, status,2
 11967 ;; Tracked objects:
 11968 ;;		On entry : 0/0
 11969 ;;		On exit  : 0/0
 11970 ;;		Unchanged: 0/0
 11971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11973 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11975 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11976 ;;Total ram usage:        4 bytes
 11977 ;; Hardware stack levels used:    1
 11978 ;; Hardware stack levels required when called:    5
 11979 ;; This function calls:
 11980 ;;		Nothing
 11981 ;; This function is called by:
 11982 ;;		_Flash_Memory_Initialization
 11983 ;;		_Flash_Memory_Modify
 11984 ;; This function uses a non-reentrant model
 11985 ;;
 11986                           
 11987                           
 11988                           ;psect for function _Flash_Memory_Read
 11989  1ED8                     _Flash_Memory_Read:	
 11990                           
 11991                           ;incstack = 0
 11992                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11993                           ;Flash_Memory_Read@address stored from wreg
 11994  1ED8  0020               	movlb	0	; select bank0
 11995  1ED9  00A2               	movwf	Flash_Memory_Read@address
 11996                           
 11997                           ;MCU_B1.c: 1000: char i = 0, ret = 0;
 11998  1EDA  01A1               	clrf	Flash_Memory_Read@i
 11999  1EDB  01A3               	clrf	Flash_Memory_Read@ret
 12000                           
 12001                           ;MCU_B1.c: 1001: PMADRH = 0x30;
 12002  1EDC  3030               	movlw	48
 12003  1EDD  0023               	movlb	3	; select bank3
 12004  1EDE  0092               	movwf	18	;volatile
 12005                           
 12006                           ;MCU_B1.c: 1002: PMADRL = address;
 12007  1EDF  0020               	movlb	0	; select bank0
 12008  1EE0  0822               	movf	Flash_Memory_Read@address,w
 12009  1EE1  0023               	movlb	3	; select bank3
 12010  1EE2  0091               	movwf	17	;volatile
 12011                           
 12012                           ;MCU_B1.c: 1003: CFGS = 0;
 12013  1EE3  1315               	bcf	21,6	;volatile
 12014                           
 12015                           ;MCU_B1.c: 1004: RD = 1;
 12016  1EE4  1415               	bsf	21,0	;volatile
 12017                           
 12018                           ;MCU_B1.c: 1005: i = PMDATH;
 12019  1EE5  0814               	movf	20,w	;volatile
 12020  1EE6  0020               	movlb	0	; select bank0
 12021  1EE7  00A0               	movwf	??_Flash_Memory_Read
 12022  1EE8  0820               	movf	??_Flash_Memory_Read,w
 12023  1EE9  00A1               	movwf	Flash_Memory_Read@i
 12024                           
 12025                           ;MCU_B1.c: 1006: ret = PMDATL;
 12026  1EEA  0023               	movlb	3	; select bank3
 12027  1EEB  0813               	movf	19,w	;volatile
 12028  1EEC  0020               	movlb	0	; select bank0
 12029  1EED  00A0               	movwf	??_Flash_Memory_Read
 12030  1EEE  0820               	movf	??_Flash_Memory_Read,w
 12031  1EEF  00A3               	movwf	Flash_Memory_Read@ret
 12032                           
 12033                           ;MCU_B1.c: 1007: return ret;
 12034  1EF0  0823               	movf	Flash_Memory_Read@ret,w
 12035  1EF1  0008               	return
 12036  1EF2                     __end_of_Flash_Memory_Read:	
 12037                           
 12038                           	psect	text72
 12039  0628                     __ptext72:	
 12040 ;; *************** function _Exception_Main *****************
 12041 ;; Defined at:
 12042 ;;		line 523 in file "../src/Main_B1.c"
 12043 ;; Parameters:    Size  Location     Type
 12044 ;;		None
 12045 ;; Auto vars:     Size  Location     Type
 12046 ;;  i               2    4[BANK1 ] int 
 12047 ;;  i               2    2[BANK1 ] int 
 12048 ;;  lights          1    6[BANK1 ] unsigned char 
 12049 ;;  error           1    1[BANK1 ] unsigned char 
 12050 ;;  count           1    0[BANK1 ] unsigned char 
 12051 ;; Return value:  Size  Location     Type
 12052 ;;		None               void
 12053 ;; Registers used:
 12054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12055 ;; Tracked objects:
 12056 ;;		On entry : 0/0
 12057 ;;		On exit  : 0/0
 12058 ;;		Unchanged: 0/0
 12059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12063 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12064 ;;Total ram usage:        8 bytes
 12065 ;; Hardware stack levels used:    1
 12066 ;; Hardware stack levels required when called:    9
 12067 ;; This function calls:
 12068 ;;		_getDimmerLights_Line
 12069 ;;		_getDimmerLights_Status
 12070 ;;		_getMain_All_Error_Status
 12071 ;;		_getMain_LightsStatus
 12072 ;;		_setBuz
 12073 ;;		_setDimmerLights_SwOff
 12074 ;;		_setLED
 12075 ;; This function is called by:
 12076 ;;		_main
 12077 ;; This function uses a non-reentrant model
 12078 ;;
 12079                           
 12080                           
 12081                           ;psect for function _Exception_Main
 12082  0628                     _Exception_Main:	
 12083                           
 12084                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12085                           
 12086                           ;incstack = 0
 12087                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12088  0628  3000               	movlw	0
 12089  0629  3192  225F  3186   	fcall	_getMain_All_Error_Status
 12090  062C  0020               	movlb	0	; select bank0
 12091  062D  00EB               	movwf	??_Exception_Main
 12092  062E  086B               	movf	??_Exception_Main,w
 12093  062F  0021               	movlb	1	; select bank1
 12094  0630  00EA               	movwf	Exception_Main@error^(0+128)
 12095                           
 12096                           ;Main_B1.c: 525: char lights = 0, count = 1;
 12097  0631  01EF               	clrf	Exception_Main@lights^(0+128)
 12098  0632  01E9               	clrf	Exception_Main@count^(0+128)
 12099  0633  0AE9               	incf	Exception_Main@count^(0+128),f
 12100                           
 12101                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12102  0634  1DAB               	btfss	(_myMain^(0+128)+11),3
 12103  0635  2E43               	goto	l10154
 12104                           
 12105                           ;Main_B1.c: 527: if (error == 0) {
 12106  0636  08EA               	movf	Exception_Main@error^(0+128),f
 12107  0637  1D03               	skipz
 12108  0638  0008               	return
 12109                           
 12110                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12111  0639  11AB               	bcf	(_myMain^(0+128)+11),3
 12112                           
 12113                           ;Main_B1.c: 533: setLED(99, 10);
 12114  063A  300A               	movlw	10
 12115  063B  0020               	movlb	0	; select bank0
 12116  063C  00EB               	movwf	??_Exception_Main
 12117  063D  086B               	movf	??_Exception_Main,w
 12118  063E  00A2               	movwf	setLED@command
 12119  063F  3063               	movlw	99
 12120  0640  3193  239D         	fcall	_setLED
 12121                           
 12122                           ;Main_B1.c: 535: }
 12123                           ;Main_B1.c: 536: } else {
 12124  0642  0008               	return
 12125  0643                     l10154:	
 12126                           
 12127                           ;Main_B1.c: 537: if (error != 0) {
 12128  0643  0021               	movlb	1	; select bank1
 12129  0644  086A               	movf	Exception_Main@error^(0+128),w
 12130  0645  1903               	btfsc	3,2
 12131  0646  0008               	return
 12132                           
 12133                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12134  0647  15AB               	bsf	(_myMain^(0+128)+11),3
 12135                           
 12136                           ;Main_B1.c: 541: setLED(99, 11);
 12137  0648  300B               	movlw	11
 12138  0649  0020               	movlb	0	; select bank0
 12139  064A  00EB               	movwf	??_Exception_Main
 12140  064B  086B               	movf	??_Exception_Main,w
 12141  064C  00A2               	movwf	setLED@command
 12142  064D  3063               	movlw	99
 12143  064E  3193  239D  3186   	fcall	_setLED
 12144                           
 12145                           ;Main_B1.c: 543: switch (error) {
 12146  0651  2EF9               	goto	l10202
 12147  0652                     l10160:	
 12148                           ;Main_B1.c: 544: case 2:
 12149                           
 12150                           
 12151                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12152  0652  319C  248C  3186   	fcall	_getMain_LightsStatus
 12153  0655  3A01               	xorlw	1
 12154  0656  1D03               	skipz
 12155  0657  2E61               	goto	l10164
 12156                           
 12157                           ;Main_B1.c: 546: setBuz(10, 300);
 12158  0658  302C               	movlw	44
 12159  0659  0020               	movlb	0	; select bank0
 12160  065A  00A9               	movwf	setBuz@time
 12161  065B  3001               	movlw	1
 12162  065C  00AA               	movwf	setBuz@time+1
 12163  065D  300A               	movlw	10
 12164  065E  3197  274E  3186   	fcall	_setBuz
 12165  0661                     l10164:	
 12166                           
 12167                           ;Main_B1.c: 547: }
 12168                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12169  0661  0021               	movlb	1	; select bank1
 12170  0662  01EB               	clrf	Exception_Main@i^(0+128)
 12171  0663  01EC               	clrf	(Exception_Main@i+1)^(0+128)
 12172  0664                     l10174:	
 12173  0664  086C               	movf	(Exception_Main@i+1)^(0+128),w
 12174  0665  3A80               	xorlw	128
 12175  0666  0020               	movlb	0	; select bank0
 12176  0667  00EB               	movwf	??_Exception_Main
 12177  0668  3080               	movlw	128
 12178  0669  026B               	subwf	??_Exception_Main,w
 12179  066A  1D03               	skipz
 12180  066B  2E6F               	goto	u11685
 12181  066C  0021               	movlb	1	; select bank1
 12182  066D  0869               	movf	Exception_Main@count^(0+128),w
 12183  066E  026B               	subwf	Exception_Main@i^(0+128),w
 12184  066F                     u11685:	
 12185  066F  1803               	btfsc	3,0
 12186  0670  2E93               	goto	u11680
 12187                           
 12188                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12189  0671  0021               	movlb	1	; select bank1
 12190  0672  086B               	movf	Exception_Main@i^(0+128),w
 12191  0673  3E01               	addlw	1
 12192  0674  319D  25A0  3186   	fcall	_getDimmerLights_Status
 12193  0677  3A01               	xorlw	1
 12194  0678  1D03               	skipz
 12195  0679  2E8D               	goto	l10172
 12196                           
 12197                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12198  067A  0020               	movlb	0	; select bank0
 12199  067B  086F               	movf	_DimmerLights,w
 12200  067C  3E0B               	addlw	11
 12201  067D  0086               	movwf	6
 12202  067E  3001               	movlw	1	; select bank2/3
 12203  067F  0087               	movwf	7
 12204  0680  1481               	bsf	1,1
 12205                           
 12206                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12207  0681  086F               	movf	_DimmerLights,w
 12208  0682  3E02               	addlw	2
 12209  0683  0086               	movwf	6
 12210  0684  3001               	movlw	1	; select bank2/3
 12211  0685  0087               	movwf	7
 12212  0686  1081               	bcf	1,1
 12213                           
 12214                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12215  0687  0021               	movlb	1	; select bank1
 12216  0688  086B               	movf	Exception_Main@i^(0+128),w
 12217  0689  3E01               	addlw	1
 12218  068A  3195  255F  3186   	fcall	_setDimmerLights_SwOff
 12219  068D                     l10172:	
 12220  068D  3001               	movlw	1
 12221  068E  0021               	movlb	1	; select bank1
 12222  068F  07EB               	addwf	Exception_Main@i^(0+128),f
 12223  0690  3000               	movlw	0
 12224  0691  3DEC               	addwfc	(Exception_Main@i+1)^(0+128),f
 12225  0692  2E64               	goto	l10174
 12226  0693                     u11680:	
 12227  0693  0021               	movlb	1	; select bank1
 12228  0694  0008               	return
 12229  0695                     l10176:	
 12230                           ;Main_B1.c: 558: case 3:
 12231                           
 12232                           ;Main_B1.c: 555: }
 12233                           ;Main_B1.c: 556: }
 12234                           ;Main_B1.c: 557: break;
 12235                           
 12236                           
 12237                           ;Main_B1.c: 560: setBuz(5, 300);
 12238  0695  302C               	movlw	44
 12239  0696  0020               	movlb	0	; select bank0
 12240  0697  00A9               	movwf	setBuz@time
 12241  0698  3001               	movlw	1
 12242  0699  00AA               	movwf	setBuz@time+1
 12243  069A  3005               	movlw	5
 12244  069B  3197  274E  3186   	fcall	_setBuz
 12245                           
 12246                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12247  069E  319C  24B7  3186   	fcall	_getDimmerLights_Line
 12248  06A1  0020               	movlb	0	; select bank0
 12249  06A2  00EB               	movwf	??_Exception_Main
 12250  06A3  086B               	movf	??_Exception_Main,w
 12251  06A4  0021               	movlb	1	; select bank1
 12252  06A5  00EF               	movwf	Exception_Main@lights^(0+128)
 12253                           
 12254                           ;Main_B1.c: 562: if (lights == 0) {
 12255  06A6  08EF               	movf	Exception_Main@lights^(0+128),f
 12256  06A7  1D03               	skipz
 12257  06A8  2EDC               	goto	l10194
 12258                           
 12259                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12260  06A9  01ED               	clrf	Exception_Main@i_3436^(0+128)
 12261  06AA  01EE               	clrf	(Exception_Main@i_3436+1)^(0+128)
 12262  06AB                     l10192:	
 12263  06AB  086E               	movf	(Exception_Main@i_3436+1)^(0+128),w
 12264  06AC  3A80               	xorlw	128
 12265  06AD  0020               	movlb	0	; select bank0
 12266  06AE  00EB               	movwf	??_Exception_Main
 12267  06AF  3080               	movlw	128
 12268  06B0  026B               	subwf	??_Exception_Main,w
 12269  06B1  1D03               	skipz
 12270  06B2  2EB6               	goto	u11715
 12271  06B3  0021               	movlb	1	; select bank1
 12272  06B4  0869               	movf	Exception_Main@count^(0+128),w
 12273  06B5  026D               	subwf	Exception_Main@i_3436^(0+128),w
 12274  06B6                     u11715:	
 12275  06B6  1803               	btfsc	3,0
 12276  06B7  2EDA               	goto	u11710
 12277                           
 12278                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12279  06B8  0021               	movlb	1	; select bank1
 12280  06B9  086D               	movf	Exception_Main@i_3436^(0+128),w
 12281  06BA  3E01               	addlw	1
 12282  06BB  319D  25A0  3186   	fcall	_getDimmerLights_Status
 12283  06BE  3A01               	xorlw	1
 12284  06BF  1D03               	skipz
 12285  06C0  2ED4               	goto	l10190
 12286                           
 12287                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12288  06C1  0020               	movlb	0	; select bank0
 12289  06C2  086F               	movf	_DimmerLights,w
 12290  06C3  3E0B               	addlw	11
 12291  06C4  0086               	movwf	6
 12292  06C5  3001               	movlw	1	; select bank2/3
 12293  06C6  0087               	movwf	7
 12294  06C7  1481               	bsf	1,1
 12295                           
 12296                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12297  06C8  086F               	movf	_DimmerLights,w
 12298  06C9  3E02               	addlw	2
 12299  06CA  0086               	movwf	6
 12300  06CB  3001               	movlw	1	; select bank2/3
 12301  06CC  0087               	movwf	7
 12302  06CD  1081               	bcf	1,1
 12303                           
 12304                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12305  06CE  0021               	movlb	1	; select bank1
 12306  06CF  086D               	movf	Exception_Main@i_3436^(0+128),w
 12307  06D0  3E01               	addlw	1
 12308  06D1  3195  255F  3186   	fcall	_setDimmerLights_SwOff
 12309  06D4                     l10190:	
 12310  06D4  3001               	movlw	1
 12311  06D5  0021               	movlb	1	; select bank1
 12312  06D6  07ED               	addwf	Exception_Main@i_3436^(0+128),f
 12313  06D7  3000               	movlw	0
 12314  06D8  3DEE               	addwfc	(Exception_Main@i_3436+1)^(0+128),f
 12315  06D9  2EAB               	goto	l10192
 12316  06DA                     u11710:	
 12317  06DA  0021               	movlb	1	; select bank1
 12318  06DB  0008               	return
 12319  06DC                     l10194:	
 12320                           ;Main_B1.c: 570: }
 12321                           ;Main_B1.c: 571: }
 12322                           ;Main_B1.c: 572: } else {
 12323                           
 12324                           
 12325                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12326  06DC  0021               	movlb	1	; select bank1
 12327  06DD  086F               	movf	Exception_Main@lights^(0+128),w
 12328  06DE  319D  25A0  3186   	fcall	_getDimmerLights_Status
 12329  06E1  3A01               	xorlw	1
 12330  06E2  1903               	btfsc	3,2
 12331  06E3  2EE6               	goto	l10196
 12332  06E4  0021               	movlb	1	; select bank1
 12333  06E5  0008               	return
 12334  06E6                     l10196:	
 12335                           
 12336                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12337  06E6  0020               	movlb	0	; select bank0
 12338  06E7  086F               	movf	_DimmerLights,w
 12339  06E8  3E0B               	addlw	11
 12340  06E9  0086               	movwf	6
 12341  06EA  3001               	movlw	1	; select bank2/3
 12342  06EB  0087               	movwf	7
 12343  06EC  1481               	bsf	1,1
 12344                           
 12345                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12346  06ED  086F               	movf	_DimmerLights,w
 12347  06EE  3E02               	addlw	2
 12348  06EF  0086               	movwf	6
 12349  06F0  3001               	movlw	1	; select bank2/3
 12350  06F1  0087               	movwf	7
 12351  06F2  1081               	bcf	1,1
 12352                           
 12353                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12354  06F3  0021               	movlb	1	; select bank1
 12355  06F4  086F               	movf	Exception_Main@lights^(0+128),w
 12356  06F5  3195  255F         	fcall	_setDimmerLights_SwOff
 12357  06F7  0021               	movlb	1	; select bank1
 12358  06F8  0008               	return
 12359  06F9                     l10202:	
 12360                           ;Main_B1.c: 582: }
 12361                           
 12362                           ;Main_B1.c: 579: }
 12363                           ;Main_B1.c: 580: }
 12364                           ;Main_B1.c: 581: break;
 12365                           
 12366  06F9  0021               	movlb	1	; select bank1
 12367  06FA  086A               	movf	Exception_Main@error^(0+128),w
 12368                           
 12369                           ; Switch size 1, requested type "space"
 12370                           ; Number of cases is 2, Range of values is 2 to 3
 12371                           ; switch strategies available:
 12372                           ; Name         Instructions Cycles
 12373                           ; simple_byte            7     4 (average)
 12374                           ; direct_byte           13     9 (fixed)
 12375                           ; jumptable            263     9 (fixed)
 12376                           ;	Chosen strategy is simple_byte
 12377  06FB  3A02               	xorlw	2	; case 2
 12378  06FC  1903               	skipnz
 12379  06FD  2E52               	goto	l10160
 12380  06FE  3A01               	xorlw	1	; case 3
 12381  06FF  1903               	skipnz
 12382  0700  2E95               	goto	l10176
 12383  0701  2F03               	goto	l1459
 12384  0702  0008               	return
 12385  0703                     l1459:	
 12386  0703  0008               	return
 12387  0704                     __end_of_Exception_Main:	
 12388                           
 12389                           	psect	text73
 12390  1CB7                     __ptext73:	
 12391 ;; *************** function _getDimmerLights_Line *****************
 12392 ;; Defined at:
 12393 ;;		line 744 in file "../src/Dimmer_B1.c"
 12394 ;; Parameters:    Size  Location     Type
 12395 ;;		None
 12396 ;; Auto vars:     Size  Location     Type
 12397 ;;  line            1    0[BANK0 ] unsigned char 
 12398 ;; Return value:  Size  Location     Type
 12399 ;;                  1    wreg      unsigned char 
 12400 ;; Registers used:
 12401 ;;		wreg, status,2
 12402 ;; Tracked objects:
 12403 ;;		On entry : 0/0
 12404 ;;		On exit  : 0/0
 12405 ;;		Unchanged: 0/0
 12406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12410 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12411 ;;Total ram usage:        1 bytes
 12412 ;; Hardware stack levels used:    1
 12413 ;; Hardware stack levels required when called:    5
 12414 ;; This function calls:
 12415 ;;		Nothing
 12416 ;; This function is called by:
 12417 ;;		_Exception_Main
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           
 12422                           ;psect for function _getDimmerLights_Line
 12423  1CB7                     _getDimmerLights_Line:	
 12424                           
 12425                           ;Dimmer_B1.c: 745: char line = 0;
 12426                           
 12427                           ;incstack = 0
 12428                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12429  1CB7  0020               	movlb	0	; select bank0
 12430  1CB8  01A0               	clrf	getDimmerLights_Line@line
 12431                           
 12432                           ;Dimmer_B1.c: 747: if (DimmerLights1.Line == 1) {
 12433  1CB9  0022               	movlb	2	; select bank2
 12434  1CBA  1F5D               	btfss	(_DimmerLights1^(0+256)+10),6
 12435  1CBB  2CBF               	goto	l9304
 12436                           
 12437                           ;Dimmer_B1.c: 748: line = 1;
 12438  1CBC  0020               	movlb	0	; select bank0
 12439  1CBD  01A0               	clrf	getDimmerLights_Line@line
 12440  1CBE  0AA0               	incf	getDimmerLights_Line@line,f
 12441  1CBF                     l9304:	
 12442                           
 12443                           ;Dimmer_B1.c: 749: }
 12444                           ;Dimmer_B1.c: 761: return line;
 12445  1CBF  0020               	movlb	0	; select bank0
 12446  1CC0  0820               	movf	getDimmerLights_Line@line,w
 12447  1CC1  0008               	return
 12448  1CC2                     __end_of_getDimmerLights_Line:	
 12449                           
 12450                           	psect	text74
 12451  1F0C                     __ptext74:	
 12452 ;; *************** function _DimmerLights_Main *****************
 12453 ;; Defined at:
 12454 ;;		line 502 in file "../src/Dimmer_B1.c"
 12455 ;; Parameters:    Size  Location     Type
 12456 ;;		None
 12457 ;; Auto vars:     Size  Location     Type
 12458 ;;		None
 12459 ;; Return value:  Size  Location     Type
 12460 ;;		None               void
 12461 ;; Registers used:
 12462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12463 ;; Tracked objects:
 12464 ;;		On entry : 0/0
 12465 ;;		On exit  : 0/0
 12466 ;;		Unchanged: 0/0
 12467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;Total ram usage:        0 bytes
 12473 ;; Hardware stack levels used:    1
 12474 ;; Hardware stack levels required when called:   10
 12475 ;; This function calls:
 12476 ;;		_getLoad_OK
 12477 ;;		_getMain_All_Error_Status
 12478 ;;		_getMain_LightsStatus
 12479 ;;		_setDimmerLights_Main
 12480 ;; This function is called by:
 12481 ;;		_main
 12482 ;; This function uses a non-reentrant model
 12483 ;;
 12484                           
 12485                           
 12486                           ;psect for function _DimmerLights_Main
 12487  1F0C                     _DimmerLights_Main:	
 12488                           
 12489                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12490                           
 12491                           ;incstack = 0
 12492                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12493  1F0C  0021               	movlb	1	; select bank1
 12494  1F0D  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12495  1F0E  2F24               	goto	l9790
 12496                           
 12497                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12498  1F0F  319C  2445  319F   	fcall	_getLoad_OK
 12499  1F12  3A01               	xorlw	1
 12500  1F13  1903               	skipnz
 12501  1F14  2F22               	goto	l730
 12502  1F15  3000               	movlw	0
 12503  1F16  3192  225F  319F   	fcall	_getMain_All_Error_Status
 12504  1F19  3800               	iorlw	0
 12505  1F1A  1D03               	skipz
 12506  1F1B  2F22               	goto	l730
 12507  1F1C  319C  248C  319F   	fcall	_getMain_LightsStatus
 12508  1F1F  3800               	iorlw	0
 12509  1F20  1D03               	skipz
 12510  1F21  2F24               	goto	l9790
 12511  1F22                     l730:	
 12512                           
 12513                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12514  1F22  0021               	movlb	1	; select bank1
 12515  1F23  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12516  1F24                     l9790:	
 12517                           
 12518                           ;Dimmer_B1.c: 517: }
 12519                           ;Dimmer_B1.c: 518: }
 12520                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12521  1F24  3001               	movlw	1
 12522  1F25  318B  2323         	fcall	_setDimmerLights_Main
 12523  1F27  0008               	return
 12524  1F28                     __end_of_DimmerLights_Main:	
 12525                           
 12526                           	psect	text75
 12527  0B23                     __ptext75:	
 12528 ;; *************** function _setDimmerLights_Main *****************
 12529 ;; Defined at:
 12530 ;;		line 536 in file "../src/Dimmer_B1.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;  lights          1    wreg     unsigned char 
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;  lights          1   78[BANK0 ] unsigned char 
 12535 ;; Return value:  Size  Location     Type
 12536 ;;		None               void
 12537 ;; Registers used:
 12538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12539 ;; Tracked objects:
 12540 ;;		On entry : 0/0
 12541 ;;		On exit  : 0/0
 12542 ;;		Unchanged: 0/0
 12543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;Total ram usage:        1 bytes
 12549 ;; Hardware stack levels used:    1
 12550 ;; Hardware stack levels required when called:    9
 12551 ;; This function calls:
 12552 ;;		_DimmerLightsPointSelect
 12553 ;;		_getDimmerLights_Allow_Condition
 12554 ;;		_getMain_LightsStatus
 12555 ;;		_setDimmerLights
 12556 ;;		_setDimmerLights_Adj
 12557 ;; This function is called by:
 12558 ;;		_DimmerLights_Main
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           
 12563                           ;psect for function _setDimmerLights_Main
 12564  0B23                     _setDimmerLights_Main:	
 12565                           
 12566                           ;incstack = 0
 12567                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12568                           ;setDimmerLights_Main@lights stored from wreg
 12569  0B23  0020               	movlb	0	; select bank0
 12570  0B24  00EE               	movwf	setDimmerLights_Main@lights
 12571                           
 12572                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12573  0B25  086E               	movf	setDimmerLights_Main@lights,w
 12574  0B26  319C  24AC  318B   	fcall	_DimmerLightsPointSelect
 12575                           
 12576                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12577  0B29  0020               	movlb	0	; select bank0
 12578  0B2A  086F               	movf	_DimmerLights,w
 12579  0B2B  3E0A               	addlw	10
 12580  0B2C  0086               	movwf	6
 12581  0B2D  3001               	movlw	1	; select bank2/3
 12582  0B2E  0087               	movwf	7
 12583  0B2F  1C81               	btfss	1,1
 12584  0B30  2B52               	goto	l9276
 12585                           
 12586                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12587  0B31  086E               	movf	setDimmerLights_Main@lights,w
 12588  0B32  3188  2001  318B   	fcall	_getDimmerLights_Allow_Condition
 12589  0B35  3800               	iorlw	0
 12590  0B36  1D03               	skipz
 12591  0B37  0008               	return
 12592                           
 12593                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12594  0B38  0020               	movlb	0	; select bank0
 12595  0B39  086F               	movf	_DimmerLights,w
 12596  0B3A  3E0A               	addlw	10
 12597  0B3B  0086               	movwf	6
 12598  0B3C  3001               	movlw	1	; select bank2/3
 12599  0B3D  0087               	movwf	7
 12600  0B3E  1081               	bcf	1,1
 12601                           
 12602                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12603  0B3F  086F               	movf	_DimmerLights,w
 12604  0B40  3E0A               	addlw	10
 12605  0B41  0086               	movwf	6
 12606  0B42  3001               	movlw	1	; select bank2/3
 12607  0B43  0087               	movwf	7
 12608  0B44  1C01               	btfss	1,0
 12609  0B45  2B4C               	goto	l9274
 12610                           
 12611                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12612  0B46  01EB               	clrf	setDimmerLights@status
 12613  0B47  0AEB               	incf	setDimmerLights@status,f
 12614  0B48  086E               	movf	setDimmerLights_Main@lights,w
 12615  0B49  3195  25FD         	fcall	_setDimmerLights
 12616                           
 12617                           ;Dimmer_B1.c: 544: } else {
 12618  0B4B  0008               	return
 12619  0B4C                     l9274:	
 12620                           
 12621                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12622  0B4C  0020               	movlb	0	; select bank0
 12623  0B4D  01EB               	clrf	setDimmerLights@status
 12624  0B4E  086E               	movf	setDimmerLights_Main@lights,w
 12625  0B4F  3195  25FD         	fcall	_setDimmerLights
 12626                           
 12627                           ;Dimmer_B1.c: 546: }
 12628                           ;Dimmer_B1.c: 547: }
 12629                           ;Dimmer_B1.c: 548: } else {
 12630  0B51  0008               	return
 12631  0B52                     l9276:	
 12632                           
 12633                           ;Dimmer_B1.c: 549: if (getMain_LightsStatus() == 1) {
 12634  0B52  319C  248C  318B   	fcall	_getMain_LightsStatus
 12635  0B55  3A01               	xorlw	1
 12636  0B56  1D03               	skipz
 12637  0B57  2B81               	goto	l9288
 12638                           
 12639                           ;Dimmer_B1.c: 550: if (DimmerLights->TriggerAdj == 1) {
 12640  0B58  0020               	movlb	0	; select bank0
 12641  0B59  086F               	movf	_DimmerLights,w
 12642  0B5A  3E0A               	addlw	10
 12643  0B5B  0086               	movwf	6
 12644  0B5C  3001               	movlw	1	; select bank2/3
 12645  0B5D  0087               	movwf	7
 12646  0B5E  1D81               	btfss	1,3
 12647  0B5F  0008               	return
 12648                           
 12649                           ;Dimmer_B1.c: 551: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12650  0B60  086E               	movf	setDimmerLights_Main@lights,w
 12651  0B61  3188  2001  318B   	fcall	_getDimmerLights_Allow_Condition
 12652  0B64  3800               	iorlw	0
 12653  0B65  1D03               	skipz
 12654  0B66  0008               	return
 12655                           
 12656                           ;Dimmer_B1.c: 552: DimmerLights->TriggerAdj = 0;
 12657  0B67  0020               	movlb	0	; select bank0
 12658  0B68  086F               	movf	_DimmerLights,w
 12659  0B69  3E0A               	addlw	10
 12660  0B6A  0086               	movwf	6
 12661  0B6B  3001               	movlw	1	; select bank2/3
 12662  0B6C  0087               	movwf	7
 12663  0B6D  1181               	bcf	1,3
 12664                           
 12665                           ;Dimmer_B1.c: 553: if (DimmerLights->SwitchAdj == 1) {
 12666  0B6E  086F               	movf	_DimmerLights,w
 12667  0B6F  3E0A               	addlw	10
 12668  0B70  0086               	movwf	6
 12669  0B71  3001               	movlw	1	; select bank2/3
 12670  0B72  0087               	movwf	7
 12671  0B73  1D01               	btfss	1,2
 12672  0B74  2B7B               	goto	l9286
 12673                           
 12674                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 1);
 12675  0B75  01EB               	clrf	setDimmerLights_Adj@status
 12676  0B76  0AEB               	incf	setDimmerLights_Adj@status,f
 12677  0B77  086E               	movf	setDimmerLights_Main@lights,w
 12678  0B78  3196  26F6         	fcall	_setDimmerLights_Adj
 12679                           
 12680                           ;Dimmer_B1.c: 555: } else {
 12681  0B7A  0008               	return
 12682  0B7B                     l9286:	
 12683                           
 12684                           ;Dimmer_B1.c: 556: setDimmerLights_Adj(lights, 0);
 12685  0B7B  0020               	movlb	0	; select bank0
 12686  0B7C  01EB               	clrf	setDimmerLights_Adj@status
 12687  0B7D  086E               	movf	setDimmerLights_Main@lights,w
 12688  0B7E  3196  26F6         	fcall	_setDimmerLights_Adj
 12689                           
 12690                           ;Dimmer_B1.c: 557: }
 12691                           ;Dimmer_B1.c: 558: }
 12692                           ;Dimmer_B1.c: 559: }
 12693                           ;Dimmer_B1.c: 560: } else {
 12694  0B80  0008               	return
 12695  0B81                     l9288:	
 12696                           
 12697                           ;Dimmer_B1.c: 561: if (DimmerLights->TriggerAdj == 1) {
 12698  0B81  0020               	movlb	0	; select bank0
 12699  0B82  086F               	movf	_DimmerLights,w
 12700  0B83  3E0A               	addlw	10
 12701  0B84  0086               	movwf	6
 12702  0B85  3001               	movlw	1	; select bank2/3
 12703  0B86  0087               	movwf	7
 12704  0B87  1D81               	btfss	1,3
 12705  0B88  0008               	return
 12706                           
 12707                           ;Dimmer_B1.c: 562: DimmerLights->TriggerAdj = 0;
 12708  0B89  086F               	movf	_DimmerLights,w
 12709  0B8A  3E0A               	addlw	10
 12710  0B8B  0086               	movwf	6
 12711  0B8C  3001               	movlw	1	; select bank2/3
 12712  0B8D  0087               	movwf	7
 12713  0B8E  1181               	bcf	1,3
 12714  0B8F  0008               	return
 12715  0B90                     __end_of_setDimmerLights_Main:	
 12716                           
 12717                           	psect	text76
 12718  16F6                     __ptext76:	
 12719 ;; *************** function _setDimmerLights_Adj *****************
 12720 ;; Defined at:
 12721 ;;		line 680 in file "../src/Dimmer_B1.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  lights          1    wreg     unsigned char 
 12724 ;;  status          1   75[BANK0 ] unsigned char 
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;  lights          1   77[BANK0 ] unsigned char 
 12727 ;; Return value:  Size  Location     Type
 12728 ;;		None               void
 12729 ;; Registers used:
 12730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12736 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;Total ram usage:        3 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    8
 12743 ;; This function calls:
 12744 ;;		_setBuz
 12745 ;;		_setDimmerLights_Line
 12746 ;;		_setPercentValue
 12747 ;;		_setProductData
 12748 ;;		_setRF_DimmerLights
 12749 ;;		_setTxData
 12750 ;; This function is called by:
 12751 ;;		_setDimmerLights_Main
 12752 ;; This function uses a non-reentrant model
 12753 ;;
 12754                           
 12755                           
 12756                           ;psect for function _setDimmerLights_Adj
 12757  16F6                     _setDimmerLights_Adj:	
 12758                           
 12759                           ;incstack = 0
 12760                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12761                           ;setDimmerLights_Adj@lights stored from wreg
 12762  16F6  0020               	movlb	0	; select bank0
 12763  16F7  00ED               	movwf	setDimmerLights_Adj@lights
 12764                           
 12765                           ;Dimmer_B1.c: 682: if (status == 1) {
 12766  16F8  086B               	movf	setDimmerLights_Adj@status,w
 12767  16F9  3A01               	xorlw	1
 12768  16FA  1D03               	skipz
 12769  16FB  2F0E               	goto	l8968
 12770                           
 12771                           ;Dimmer_B1.c: 683: DimmerLights->AdjSw = 1;
 12772  16FC  0A6F               	incf	_DimmerLights,w
 12773  16FD  0086               	movwf	6
 12774  16FE  3001               	movlw	1	; select bank2/3
 12775  16FF  0087               	movwf	7
 12776  1700  1701               	bsf	1,6
 12777                           
 12778                           ;Dimmer_B1.c: 684: DimmerLights->Signal = 1;
 12779  1701  0A6F               	incf	_DimmerLights,w
 12780  1702  0086               	movwf	6
 12781  1703  3001               	movlw	1	; select bank2/3
 12782  1704  0087               	movwf	7
 12783  1705  1681               	bsf	1,5
 12784                           
 12785                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 12786  1706  3064               	movlw	100
 12787  1707  00A9               	movwf	setBuz@time
 12788  1708  3000               	movlw	0
 12789  1709  00AA               	movwf	setBuz@time+1
 12790  170A  3001               	movlw	1
 12791  170B  3197  274E         	fcall	_setBuz
 12792                           
 12793                           ;Dimmer_B1.c: 686: } else if (status == 0) {
 12794  170D  0008               	return
 12795  170E                     l8968:	
 12796  170E  0020               	movlb	0	; select bank0
 12797  170F  08EB               	movf	setDimmerLights_Adj@status,f
 12798  1710  1D03               	skipz
 12799  1711  0008               	return
 12800                           
 12801                           ;Dimmer_B1.c: 687: Dimmer.Load_Status = 0;
 12802  1712  0021               	movlb	1	; select bank1
 12803  1713  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12804                           
 12805                           ;Dimmer_B1.c: 688: setDimmerLights_Line(lights);
 12806  1714  0020               	movlb	0	; select bank0
 12807  1715  086D               	movf	setDimmerLights_Adj@lights,w
 12808  1716  319D  2545  3196   	fcall	_setDimmerLights_Line
 12809                           
 12810                           ;Dimmer_B1.c: 689: DimmerLights->AdjSw = 0;
 12811  1719  0020               	movlb	0	; select bank0
 12812  171A  0A6F               	incf	_DimmerLights,w
 12813  171B  0086               	movwf	6
 12814  171C  3001               	movlw	1	; select bank2/3
 12815  171D  0087               	movwf	7
 12816  171E  1301               	bcf	1,6
 12817                           
 12818                           ;Dimmer_B1.c: 690: DimmerLights->Signal = 0;
 12819  171F  0A6F               	incf	_DimmerLights,w
 12820  1720  0086               	movwf	6
 12821  1721  3001               	movlw	1	; select bank2/3
 12822  1722  0087               	movwf	7
 12823  1723  1281               	bcf	1,5
 12824                           
 12825                           ;Dimmer_B1.c: 692: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12826  1724  086F               	movf	_DimmerLights,w
 12827  1725  3E04               	addlw	4
 12828  1726  0086               	movwf	6
 12829  1727  3001               	movlw	1	; select bank2/3
 12830  1728  0087               	movwf	7
 12831  1729  0801               	movf	1,w
 12832  172A  00EC               	movwf	??_setDimmerLights_Adj
 12833  172B  086F               	movf	_DimmerLights,w
 12834  172C  3E06               	addlw	6
 12835  172D  0086               	movwf	6
 12836  172E  3001               	movlw	1	; select bank2/3
 12837  172F  0087               	movwf	7
 12838  1730  086C               	movf	??_setDimmerLights_Adj,w
 12839  1731  0081               	movwf	1
 12840                           
 12841                           ;Dimmer_B1.c: 693: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 12842  1732  086F               	movf	_DimmerLights,w
 12843  1733  3E04               	addlw	4
 12844  1734  0086               	movwf	6
 12845  1735  3001               	movlw	1	; select bank2/3
 12846  1736  0087               	movwf	7
 12847  1737  0801               	movf	1,w
 12848  1738  3189  21ED  3196   	fcall	_setPercentValue
 12849  173B  0020               	movlb	0	; select bank0
 12850  173C  00EC               	movwf	??_setDimmerLights_Adj
 12851  173D  086C               	movf	??_setDimmerLights_Adj,w
 12852  173E  00E2               	movwf	setProductData@value
 12853  173F  086D               	movf	setDimmerLights_Adj@lights,w
 12854  1740  3E14               	addlw	20
 12855  1741  319D  2537  3196   	fcall	_setProductData
 12856                           
 12857                           ;Dimmer_B1.c: 708: setRF_DimmerLights(lights, 1);
 12858  1744  0020               	movlb	0	; select bank0
 12859  1745  01E6               	clrf	setRF_DimmerLights@on
 12860  1746  0AE6               	incf	setRF_DimmerLights@on,f
 12861  1747  086D               	movf	setDimmerLights_Adj@lights,w
 12862  1748  3197  27A7  3196   	fcall	_setRF_DimmerLights
 12863                           
 12864                           ;Dimmer_B1.c: 709: setTxData();
 12865  174B  318E  2610         	fcall	_setTxData
 12866  174D  0008               	return
 12867  174E                     __end_of_setDimmerLights_Adj:	
 12868                           
 12869                           	psect	text77
 12870  15FD                     __ptext77:	
 12871 ;; *************** function _setDimmerLights *****************
 12872 ;; Defined at:
 12873 ;;		line 638 in file "../src/Dimmer_B1.c"
 12874 ;; Parameters:    Size  Location     Type
 12875 ;;  lights          1    wreg     unsigned char 
 12876 ;;  status          1   75[BANK0 ] unsigned char 
 12877 ;; Auto vars:     Size  Location     Type
 12878 ;;  lights          1   77[BANK0 ] unsigned char 
 12879 ;; Return value:  Size  Location     Type
 12880 ;;		None               void
 12881 ;; Registers used:
 12882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12883 ;; Tracked objects:
 12884 ;;		On entry : 0/0
 12885 ;;		On exit  : 0/0
 12886 ;;		Unchanged: 0/0
 12887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12888 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;Total ram usage:        3 bytes
 12893 ;; Hardware stack levels used:    1
 12894 ;; Hardware stack levels required when called:    8
 12895 ;; This function calls:
 12896 ;;		_setDimmerLights_Line
 12897 ;;		_setLED
 12898 ;;		_setPercentValue
 12899 ;;		_setProductData
 12900 ;;		_setRF_DimmerLights
 12901 ;;		_setTxData
 12902 ;; This function is called by:
 12903 ;;		_setDimmerLights_Main
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           
 12908                           ;psect for function _setDimmerLights
 12909  15FD                     _setDimmerLights:	
 12910                           
 12911                           ;incstack = 0
 12912                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12913                           ;setDimmerLights@lights stored from wreg
 12914  15FD  0020               	movlb	0	; select bank0
 12915  15FE  00ED               	movwf	setDimmerLights@lights
 12916                           
 12917                           ;Dimmer_B1.c: 646: if (status == 1) {
 12918  15FF  086B               	movf	setDimmerLights@status,w
 12919  1600  3A01               	xorlw	1
 12920  1601  1D03               	skipz
 12921  1602  2E2D               	goto	l8948
 12922                           
 12923                           ;Dimmer_B1.c: 647: DimmerLights->StatusFlag = 1;
 12924  1603  0A6F               	incf	_DimmerLights,w
 12925  1604  0086               	movwf	6
 12926  1605  3001               	movlw	1	; select bank2/3
 12927  1606  0087               	movwf	7
 12928  1607  1501               	bsf	1,2
 12929                           
 12930                           ;Dimmer_B1.c: 650: Dimmer.Load_Status = 1;
 12931  1608  0021               	movlb	1	; select bank1
 12932  1609  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 12933                           
 12934                           ;Dimmer_B1.c: 651: setDimmerLights_Line(lights);
 12935  160A  0020               	movlb	0	; select bank0
 12936  160B  086D               	movf	setDimmerLights@lights,w
 12937  160C  319D  2545  3195   	fcall	_setDimmerLights_Line
 12938                           
 12939                           ;Dimmer_B1.c: 653: setLED(lights, 0);
 12940  160F  0020               	movlb	0	; select bank0
 12941  1610  01A2               	clrf	setLED@command
 12942  1611  086D               	movf	setDimmerLights@lights,w
 12943  1612  3193  239D  3195   	fcall	_setLED
 12944                           
 12945                           ;Dimmer_B1.c: 654: ;;
 12946                           ;Dimmer_B1.c: 658: DimmerLights->DimmingValue = ((char)(70*0.8));
 12947  1615  3038               	movlw	56
 12948  1616  0020               	movlb	0	; select bank0
 12949  1617  00EC               	movwf	??_setDimmerLights
 12950  1618  086F               	movf	_DimmerLights,w
 12951  1619  3E04               	addlw	4
 12952  161A  0086               	movwf	6
 12953  161B  3001               	movlw	1	; select bank2/3
 12954  161C  0087               	movwf	7
 12955  161D  086C               	movf	??_setDimmerLights,w
 12956  161E  0081               	movwf	1
 12957                           
 12958                           ;Dimmer_B1.c: 660: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 12959  161F  3038               	movlw	56
 12960  1620  3189  21ED  3195   	fcall	_setPercentValue
 12961  1623  0020               	movlb	0	; select bank0
 12962  1624  00EC               	movwf	??_setDimmerLights
 12963  1625  086C               	movf	??_setDimmerLights,w
 12964  1626  00E2               	movwf	setProductData@value
 12965  1627  086D               	movf	setDimmerLights@lights,w
 12966  1628  3E14               	addlw	20
 12967  1629  319D  2537  3195   	fcall	_setProductData
 12968                           
 12969                           ;Dimmer_B1.c: 662: } else if (status == 0) {
 12970  162C  2E43               	goto	l8958
 12971  162D                     l8948:	
 12972  162D  0020               	movlb	0	; select bank0
 12973  162E  08EB               	movf	setDimmerLights@status,f
 12974  162F  1D03               	skipz
 12975  1630  2E43               	goto	l8958
 12976                           
 12977                           ;Dimmer_B1.c: 663: DimmerLights->StatusFlag = 0;
 12978  1631  0A6F               	incf	_DimmerLights,w
 12979  1632  0086               	movwf	6
 12980  1633  3001               	movlw	1	; select bank2/3
 12981  1634  0087               	movwf	7
 12982  1635  1101               	bcf	1,2
 12983                           
 12984                           ;Dimmer_B1.c: 666: Dimmer.Load_Status = 0;
 12985  1636  0021               	movlb	1	; select bank1
 12986  1637  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12987                           
 12988                           ;Dimmer_B1.c: 667: setDimmerLights_Line(0);
 12989  1638  3000               	movlw	0
 12990  1639  319D  2545  3195   	fcall	_setDimmerLights_Line
 12991                           
 12992                           ;Dimmer_B1.c: 669: setLED(lights, 1);
 12993  163C  0020               	movlb	0	; select bank0
 12994  163D  01A2               	clrf	setLED@command
 12995  163E  0AA2               	incf	setLED@command,f
 12996  163F  086D               	movf	setDimmerLights@lights,w
 12997  1640  3193  239D  3195   	fcall	_setLED
 12998  1643                     l8958:	
 12999                           ;Dimmer_B1.c: 670: ;;
 13000                           
 13001                           
 13002                           ;Dimmer_B1.c: 671: }
 13003                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, status);
 13004  1643  0020               	movlb	0	; select bank0
 13005  1644  086B               	movf	setDimmerLights@status,w
 13006  1645  00EC               	movwf	??_setDimmerLights
 13007  1646  086C               	movf	??_setDimmerLights,w
 13008  1647  00E6               	movwf	setRF_DimmerLights@on
 13009  1648  086D               	movf	setDimmerLights@lights,w
 13010  1649  3197  27A7  3195   	fcall	_setRF_DimmerLights
 13011                           
 13012                           ;Dimmer_B1.c: 675: setTxData();
 13013  164C  318E  2610         	fcall	_setTxData
 13014  164E  0008               	return
 13015  164F                     __end_of_setDimmerLights:	
 13016                           
 13017                           	psect	text78
 13018  0E10                     __ptext78:	
 13019 ;; *************** function _setTxData *****************
 13020 ;; Defined at:
 13021 ;;		line 174 in file "../src/RF_Control_B1.c"
 13022 ;; Parameters:    Size  Location     Type
 13023 ;;		None
 13024 ;; Auto vars:     Size  Location     Type
 13025 ;;  i               1    0        unsigned char 
 13026 ;; Return value:  Size  Location     Type
 13027 ;;		None               void
 13028 ;; Registers used:
 13029 ;;		wreg, fsr1l, fsr1h
 13030 ;; Tracked objects:
 13031 ;;		On entry : 0/0
 13032 ;;		On exit  : 0/0
 13033 ;;		Unchanged: 0/0
 13034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13038 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13039 ;;Total ram usage:        1 bytes
 13040 ;; Hardware stack levels used:    1
 13041 ;; Hardware stack levels required when called:    5
 13042 ;; This function calls:
 13043 ;;		Nothing
 13044 ;; This function is called by:
 13045 ;;		_setDimmerLights
 13046 ;;		_setDimmerLights_Adj
 13047 ;;		_getRxData
 13048 ;;		_setControl_Lights_Table
 13049 ;;		_setRFSW_Control
 13050 ;;		_setRFSW_AdjControl
 13051 ;; This function uses a non-reentrant model
 13052 ;;
 13053                           
 13054                           
 13055                           ;psect for function _setTxData
 13056  0E10                     _setTxData:	
 13057                           
 13058                           ;RF_Control_B1.c: 175: char i;
 13059                           ;RF_Control_B1.c: 176: if (RF1.Enable == 1) {
 13060                           
 13061                           ;incstack = 0
 13062                           ; Regs used in _setTxData: [wregfsr1]
 13063  0E10  0021               	movlb	1	; select bank1
 13064  0E11  1C3A               	btfss	_RF1^(0+128),0
 13065  0E12  0008               	return
 13066                           
 13067                           ;RF_Control_B1.c: 178: if (RF1.TransceiveGO == 0) {
 13068  0E13  193A               	btfsc	_RF1^(0+128),2
 13069  0E14  0008               	return
 13070                           
 13071                           ;RF_Control_B1.c: 179: RF1.TransceiveGO = 1;
 13072  0E15  153A               	bsf	_RF1^(0+128),2
 13073                           
 13074                           ;RF_Control_B1.c: 191: RF_Data[0] = 0x63;
 13075  0E16  3063               	movlw	99
 13076  0E17  0020               	movlb	0	; select bank0
 13077  0E18  00A0               	movwf	??_setTxData
 13078  0E19  0820               	movf	??_setTxData,w
 13079  0E1A  0023               	movlb	3	; select bank3
 13080  0E1B  00A0               	movwf	_RF_Data^(0+384)
 13081                           
 13082                           ;RF_Control_B1.c: 192: RF_Data[1] = 0x02;
 13083  0E1C  3002               	movlw	2
 13084  0E1D  0020               	movlb	0	; select bank0
 13085  0E1E  00A0               	movwf	??_setTxData
 13086  0E1F  0820               	movf	??_setTxData,w
 13087  0E20  0023               	movlb	3	; select bank3
 13088  0E21  00A1               	movwf	(_RF_Data^(0+384)+1)
 13089                           
 13090                           ;RF_Control_B1.c: 194: RF_Data[2] = product->Data[2];
 13091  0E22  0879               	movf	_product,w
 13092  0E23  0086               	movwf	6
 13093  0E24  3002               	movlw	2	; select bank4/5
 13094  0E25  0087               	movwf	7
 13095  0E26  3002               	movlw	2	; select bank4/5
 13096  0E27  3F42               	moviw [2]fsr1
 13097  0E28  00A2               	movwf	(_RF_Data^(0+384)+2)
 13098                           
 13099                           ;RF_Control_B1.c: 195: RF_Data[3] = product->Data[3];
 13100  0E29  0879               	movf	_product,w
 13101  0E2A  0086               	movwf	6
 13102  0E2B  3002               	movlw	2	; select bank4/5
 13103  0E2C  0087               	movwf	7
 13104  0E2D  3002               	movlw	2	; select bank4/5
 13105  0E2E  3F43               	moviw [3]fsr1
 13106  0E2F  00A3               	movwf	(_RF_Data^(0+384)+3)
 13107                           
 13108                           ;RF_Control_B1.c: 196: RF_Data[4] = product->Data[4];
 13109  0E30  0879               	movf	_product,w
 13110  0E31  0086               	movwf	6
 13111  0E32  3002               	movlw	2	; select bank4/5
 13112  0E33  0087               	movwf	7
 13113  0E34  3002               	movlw	2	; select bank4/5
 13114  0E35  3F44               	moviw [4]fsr1
 13115  0E36  00A4               	movwf	(_RF_Data^(0+384)+4)
 13116                           
 13117                           ;RF_Control_B1.c: 197: RF_Data[5] = product->Data[5];
 13118  0E37  0879               	movf	_product,w
 13119  0E38  0086               	movwf	6
 13120  0E39  3002               	movlw	2	; select bank4/5
 13121  0E3A  0087               	movwf	7
 13122  0E3B  3002               	movlw	2	; select bank4/5
 13123  0E3C  3F45               	moviw [5]fsr1
 13124  0E3D  00A5               	movwf	(_RF_Data^(0+384)+5)
 13125                           
 13126                           ;RF_Control_B1.c: 198: RF_Data[6] = product->Data[6];
 13127  0E3E  0879               	movf	_product,w
 13128  0E3F  0086               	movwf	6
 13129  0E40  3002               	movlw	2	; select bank4/5
 13130  0E41  0087               	movwf	7
 13131  0E42  3002               	movlw	2	; select bank4/5
 13132  0E43  3F46               	moviw [6]fsr1
 13133  0E44  00A6               	movwf	(_RF_Data^(0+384)+6)
 13134                           
 13135                           ;RF_Control_B1.c: 199: RF_Data[7] = product->Data[7];
 13136  0E45  0879               	movf	_product,w
 13137  0E46  0086               	movwf	6
 13138  0E47  3002               	movlw	2	; select bank4/5
 13139  0E48  0087               	movwf	7
 13140  0E49  3002               	movlw	2	; select bank4/5
 13141  0E4A  3F47               	moviw [7]fsr1
 13142  0E4B  00A7               	movwf	(_RF_Data^(0+384)+7)
 13143                           
 13144                           ;RF_Control_B1.c: 200: RF_Data[8] = product->Data[8];
 13145  0E4C  0879               	movf	_product,w
 13146  0E4D  0086               	movwf	6
 13147  0E4E  3002               	movlw	2	; select bank4/5
 13148  0E4F  0087               	movwf	7
 13149  0E50  3002               	movlw	2	; select bank4/5
 13150  0E51  3F48               	moviw [8]fsr1
 13151  0E52  00A8               	movwf	(_RF_Data^(0+384)+8)
 13152                           
 13153                           ;RF_Control_B1.c: 201: RF_Data[9] = product->Data[9];
 13154  0E53  0879               	movf	_product,w
 13155  0E54  0086               	movwf	6
 13156  0E55  3002               	movlw	2	; select bank4/5
 13157  0E56  0087               	movwf	7
 13158  0E57  3002               	movlw	2	; select bank4/5
 13159  0E58  3F49               	moviw [9]fsr1
 13160  0E59  00A9               	movwf	(_RF_Data^(0+384)+9)
 13161                           
 13162                           ;RF_Control_B1.c: 202: RF_Data[10] = product->Data[10];
 13163  0E5A  0879               	movf	_product,w
 13164  0E5B  0086               	movwf	6
 13165  0E5C  3002               	movlw	2	; select bank4/5
 13166  0E5D  0087               	movwf	7
 13167  0E5E  3002               	movlw	2	; select bank4/5
 13168  0E5F  3F4A               	moviw [10]fsr1
 13169  0E60  00AA               	movwf	(_RF_Data^(0+384)+10)
 13170                           
 13171                           ;RF_Control_B1.c: 203: RF_Data[11] = product->Data[11];
 13172  0E61  0879               	movf	_product,w
 13173  0E62  0086               	movwf	6
 13174  0E63  3002               	movlw	2	; select bank4/5
 13175  0E64  0087               	movwf	7
 13176  0E65  3002               	movlw	2	; select bank4/5
 13177  0E66  3F4B               	moviw [11]fsr1
 13178  0E67  00AB               	movwf	(_RF_Data^(0+384)+11)
 13179                           
 13180                           ;RF_Control_B1.c: 204: RF_Data[12] = product->Data[12];
 13181  0E68  0879               	movf	_product,w
 13182  0E69  0086               	movwf	6
 13183  0E6A  3002               	movlw	2	; select bank4/5
 13184  0E6B  0087               	movwf	7
 13185  0E6C  3002               	movlw	2	; select bank4/5
 13186  0E6D  3F4C               	moviw [12]fsr1
 13187  0E6E  00AC               	movwf	(_RF_Data^(0+384)+12)
 13188                           
 13189                           ;RF_Control_B1.c: 205: RF_Data[13] = product->Data[13];
 13190  0E6F  0879               	movf	_product,w
 13191  0E70  0086               	movwf	6
 13192  0E71  3002               	movlw	2	; select bank4/5
 13193  0E72  0087               	movwf	7
 13194  0E73  3002               	movlw	2	; select bank4/5
 13195  0E74  3F4D               	moviw [13]fsr1
 13196  0E75  00AD               	movwf	(_RF_Data^(0+384)+13)
 13197                           
 13198                           ;RF_Control_B1.c: 206: RF_Data[14] = product->Data[14];
 13199  0E76  0879               	movf	_product,w
 13200  0E77  0086               	movwf	6
 13201  0E78  3002               	movlw	2	; select bank4/5
 13202  0E79  0087               	movwf	7
 13203  0E7A  3002               	movlw	2	; select bank4/5
 13204  0E7B  3F4E               	moviw [14]fsr1
 13205  0E7C  00AE               	movwf	(_RF_Data^(0+384)+14)
 13206                           
 13207                           ;RF_Control_B1.c: 207: RF_Data[15] = product->Data[15];
 13208  0E7D  0879               	movf	_product,w
 13209  0E7E  0086               	movwf	6
 13210  0E7F  3002               	movlw	2	; select bank4/5
 13211  0E80  0087               	movwf	7
 13212  0E81  3002               	movlw	2	; select bank4/5
 13213  0E82  3F4F               	moviw [15]fsr1
 13214  0E83  00AF               	movwf	(_RF_Data^(0+384)+15)
 13215                           
 13216                           ;RF_Control_B1.c: 208: RF_Data[16] = product->Data[16];
 13217  0E84  0879               	movf	_product,w
 13218  0E85  0086               	movwf	6
 13219  0E86  3002               	movlw	2	; select bank4/5
 13220  0E87  0087               	movwf	7
 13221  0E88  3002               	movlw	2	; select bank4/5
 13222  0E89  3F50               	moviw [16]fsr1
 13223  0E8A  00B0               	movwf	(_RF_Data^(0+384)+16)
 13224                           
 13225                           ;RF_Control_B1.c: 209: RF_Data[17] = product->Data[17];
 13226  0E8B  0879               	movf	_product,w
 13227  0E8C  0086               	movwf	6
 13228  0E8D  3002               	movlw	2	; select bank4/5
 13229  0E8E  0087               	movwf	7
 13230  0E8F  3002               	movlw	2	; select bank4/5
 13231  0E90  3F51               	moviw [17]fsr1
 13232  0E91  00B1               	movwf	(_RF_Data^(0+384)+17)
 13233                           
 13234                           ;RF_Control_B1.c: 210: RF_Data[18] = product->Data[18];
 13235  0E92  0879               	movf	_product,w
 13236  0E93  0086               	movwf	6
 13237  0E94  3002               	movlw	2	; select bank4/5
 13238  0E95  0087               	movwf	7
 13239  0E96  3002               	movlw	2	; select bank4/5
 13240  0E97  3F52               	moviw [18]fsr1
 13241  0E98  00B2               	movwf	(_RF_Data^(0+384)+18)
 13242                           
 13243                           ;RF_Control_B1.c: 211: RF_Data[19] = product->Data[19];
 13244  0E99  0879               	movf	_product,w
 13245  0E9A  0086               	movwf	6
 13246  0E9B  3002               	movlw	2	; select bank4/5
 13247  0E9C  0087               	movwf	7
 13248  0E9D  3002               	movlw	2	; select bank4/5
 13249  0E9E  3F53               	moviw [19]fsr1
 13250  0E9F  00B3               	movwf	(_RF_Data^(0+384)+19)
 13251                           
 13252                           ;RF_Control_B1.c: 212: RF_Data[20] = 209;
 13253  0EA0  30D1               	movlw	209
 13254  0EA1  0020               	movlb	0	; select bank0
 13255  0EA2  00A0               	movwf	??_setTxData
 13256  0EA3  0820               	movf	??_setTxData,w
 13257  0EA4  0023               	movlb	3	; select bank3
 13258  0EA5  00B4               	movwf	(_RF_Data^(0+384)+20)
 13259  0EA6  0008               	return
 13260  0EA7                     __end_of_setTxData:	
 13261                           
 13262                           	psect	text79
 13263  17A7                     __ptext79:	
 13264 ;; *************** function _setRF_DimmerLights *****************
 13265 ;; Defined at:
 13266 ;;		line 438 in file "../src/RF_Control_B1.c"
 13267 ;; Parameters:    Size  Location     Type
 13268 ;;  lights          1    wreg     unsigned char 
 13269 ;;  on              1   70[BANK0 ] unsigned char 
 13270 ;; Auto vars:     Size  Location     Type
 13271 ;;  lights          1   74[BANK0 ] unsigned char 
 13272 ;;  status          1   73[BANK0 ] unsigned char 
 13273 ;; Return value:  Size  Location     Type
 13274 ;;		None               void
 13275 ;; Registers used:
 13276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13277 ;; Tracked objects:
 13278 ;;		On entry : 0/0
 13279 ;;		On exit  : 0/0
 13280 ;;		Unchanged: 0/0
 13281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13282 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13284 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13285 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13286 ;;Total ram usage:        5 bytes
 13287 ;; Hardware stack levels used:    1
 13288 ;; Hardware stack levels required when called:    6
 13289 ;; This function calls:
 13290 ;;		_setProductData
 13291 ;; This function is called by:
 13292 ;;		_setDimmerLights
 13293 ;;		_setDimmerLights_Adj
 13294 ;;		_setRFSW_Control
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           
 13299                           ;psect for function _setRF_DimmerLights
 13300  17A7                     _setRF_DimmerLights:	
 13301                           
 13302                           ;incstack = 0
 13303                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13304                           ;setRF_DimmerLights@lights stored from wreg
 13305  17A7  0020               	movlb	0	; select bank0
 13306  17A8  00EA               	movwf	setRF_DimmerLights@lights
 13307                           
 13308                           ;RF_Control_B1.c: 439: char status = 1;
 13309  17A9  01E9               	clrf	setRF_DimmerLights@status
 13310  17AA  0AE9               	incf	setRF_DimmerLights@status,f
 13311                           
 13312                           ;RF_Control_B1.c: 440: status <<= (lights - 1);
 13313  17AB  086A               	movf	setRF_DimmerLights@lights,w
 13314  17AC  3EFF               	addlw	-1
 13315  17AD  0A89               	incf	9,f
 13316  17AE  2FB1               	goto	u9010
 13317  17AF                     u9015:	
 13318  17AF  1003               	clrc
 13319  17B0  0DE9               	rlf	setRF_DimmerLights@status,f
 13320  17B1                     u9010:	
 13321  17B1  3EFF               	addlw	-1
 13322  17B2  1D03               	skipz
 13323  17B3  2FAF               	goto	u9015
 13324                           
 13325                           ;RF_Control_B1.c: 441: setProductData(11, lights);
 13326  17B4  086A               	movf	setRF_DimmerLights@lights,w
 13327  17B5  00E7               	movwf	??_setRF_DimmerLights
 13328  17B6  0867               	movf	??_setRF_DimmerLights,w
 13329  17B7  00E2               	movwf	setProductData@value
 13330  17B8  300B               	movlw	11
 13331  17B9  319D  2537  3197   	fcall	_setProductData
 13332                           
 13333                           ;RF_Control_B1.c: 449: setProductData(9, product->Data[20 + lights]);
 13334  17BC  0020               	movlb	0	; select bank0
 13335  17BD  086A               	movf	setRF_DimmerLights@lights,w
 13336  17BE  3E14               	addlw	20
 13337  17BF  0779               	addwf	_product,w
 13338  17C0  00E7               	movwf	??_setRF_DimmerLights
 13339  17C1  0867               	movf	??_setRF_DimmerLights,w
 13340  17C2  0086               	movwf	6
 13341  17C3  3002               	movlw	2	; select bank4/5
 13342  17C4  0087               	movwf	7
 13343  17C5  0801               	movf	1,w
 13344  17C6  00E8               	movwf	??_setRF_DimmerLights+1
 13345  17C7  0868               	movf	??_setRF_DimmerLights+1,w
 13346  17C8  00E2               	movwf	setProductData@value
 13347  17C9  3009               	movlw	9
 13348  17CA  319D  2537  3197   	fcall	_setProductData
 13349                           
 13350                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 13351  17CD  0020               	movlb	0	; select bank0
 13352  17CE  086A               	movf	setRF_DimmerLights@lights,w
 13353  17CF  3E1A               	addlw	26
 13354  17D0  0779               	addwf	_product,w
 13355  17D1  00E7               	movwf	??_setRF_DimmerLights
 13356  17D2  0867               	movf	??_setRF_DimmerLights,w
 13357  17D3  0086               	movwf	6
 13358  17D4  3002               	movlw	2	; select bank4/5
 13359  17D5  0087               	movwf	7
 13360  17D6  0801               	movf	1,w
 13361  17D7  00E8               	movwf	??_setRF_DimmerLights+1
 13362  17D8  0868               	movf	??_setRF_DimmerLights+1,w
 13363  17D9  00E2               	movwf	setProductData@value
 13364  17DA  3011               	movlw	17
 13365  17DB  319D  2537  3197   	fcall	_setProductData
 13366                           
 13367                           ;RF_Control_B1.c: 451: if (on == 1) {
 13368  17DE  0020               	movlb	0	; select bank0
 13369  17DF  0866               	movf	setRF_DimmerLights@on,w
 13370  17E0  3A01               	xorlw	1
 13371  17E1  1D03               	skipz
 13372  17E2  2FF1               	goto	l8438
 13373                           
 13374                           ;RF_Control_B1.c: 452: setProductData(15, (product->Data[15] | status));
 13375  17E3  0879               	movf	_product,w
 13376  17E4  3E0F               	addlw	15
 13377  17E5  0086               	movwf	6
 13378  17E6  3002               	movlw	2	; select bank4/5
 13379  17E7  0087               	movwf	7
 13380  17E8  0801               	movf	1,w
 13381  17E9  0469               	iorwf	setRF_DimmerLights@status,w
 13382  17EA  00E7               	movwf	??_setRF_DimmerLights
 13383  17EB  0867               	movf	??_setRF_DimmerLights,w
 13384  17EC  00E2               	movwf	setProductData@value
 13385  17ED  300F               	movlw	15
 13386  17EE  319D  2537         	fcall	_setProductData
 13387                           
 13388                           ;RF_Control_B1.c: 453: } else {
 13389  17F0  0008               	return
 13390  17F1                     l8438:	
 13391                           
 13392                           ;RF_Control_B1.c: 454: setProductData(15, (product->Data[15]&(~status)));
 13393  17F1  0879               	movf	_product,w
 13394  17F2  3E0F               	addlw	15
 13395  17F3  0086               	movwf	6
 13396  17F4  3002               	movlw	2	; select bank4/5
 13397  17F5  0087               	movwf	7
 13398  17F6  0020               	movlb	0	; select bank0
 13399  17F7  0969               	comf	setRF_DimmerLights@status,w
 13400  17F8  0501               	andwf	1,w
 13401  17F9  00E7               	movwf	??_setRF_DimmerLights
 13402  17FA  0867               	movf	??_setRF_DimmerLights,w
 13403  17FB  00E2               	movwf	setProductData@value
 13404  17FC  300F               	movlw	15
 13405  17FD  319D  2537         	fcall	_setProductData
 13406  17FF  0008               	return
 13407  1800                     __end_of_setRF_DimmerLights:	
 13408                           
 13409                           	psect	text80
 13410  09ED                     __ptext80:	
 13411 ;; *************** function _setPercentValue *****************
 13412 ;; Defined at:
 13413 ;;		line 1042 in file "../src/Dimmer_B1.c"
 13414 ;; Parameters:    Size  Location     Type
 13415 ;;  value           1    wreg     unsigned char 
 13416 ;; Auto vars:     Size  Location     Type
 13417 ;;  value           1   62[BANK0 ] unsigned char 
 13418 ;;  i               3   63[BANK0 ] float 
 13419 ;; Return value:  Size  Location     Type
 13420 ;;                  1    wreg      unsigned char 
 13421 ;; Registers used:
 13422 ;;		wreg, status,2, status,0, pclath, cstack
 13423 ;; Tracked objects:
 13424 ;;		On entry : 0/0
 13425 ;;		On exit  : 0/0
 13426 ;;		Unchanged: 0/0
 13427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13429 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13430 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13431 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13432 ;;Total ram usage:        6 bytes
 13433 ;; Hardware stack levels used:    1
 13434 ;; Hardware stack levels required when called:    7
 13435 ;; This function calls:
 13436 ;;		___awtoft
 13437 ;;		___ftadd
 13438 ;;		___ftdiv
 13439 ;;		___ftneg
 13440 ;;		___fttol
 13441 ;; This function is called by:
 13442 ;;		_setDimmerLights
 13443 ;;		_setDimmerLights_Adj
 13444 ;;		_Flash_Memory_Initialization
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           
 13449                           ;psect for function _setPercentValue
 13450  09ED                     _setPercentValue:	
 13451                           
 13452                           ;incstack = 0
 13453                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13454                           ;setPercentValue@value stored from wreg
 13455  09ED  0020               	movlb	0	; select bank0
 13456  09EE  00DE               	movwf	setPercentValue@value
 13457                           
 13458                           ;Dimmer_B1.c: 1050: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 13459  09EF  3000               	movlw	0
 13460  09F0  00DF               	movwf	setPercentValue@i
 13461  09F1  3030               	movlw	48
 13462  09F2  00E0               	movwf	setPercentValue@i+1
 13463  09F3  3042               	movlw	66
 13464  09F4  00E1               	movwf	setPercentValue@i+2
 13465                           
 13466                           ;Dimmer_B1.c: 1051: i /= 100;
 13467  09F5  3000               	movlw	0
 13468  09F6  00AE               	movwf	___ftdiv@f2
 13469  09F7  30C8               	movlw	200
 13470  09F8  00AF               	movwf	___ftdiv@f2+1
 13471  09F9  3042               	movlw	66
 13472  09FA  00B0               	movwf	___ftdiv@f2+2
 13473  09FB  085F               	movf	setPercentValue@i,w
 13474  09FC  00B1               	movwf	___ftdiv@f1
 13475  09FD  0860               	movf	setPercentValue@i+1,w
 13476  09FE  00B2               	movwf	___ftdiv@f1+1
 13477  09FF  0861               	movf	setPercentValue@i+2,w
 13478  0A00  00B3               	movwf	___ftdiv@f1+2
 13479  0A01  318E  26A7  3189   	fcall	___ftdiv
 13480  0A04  0020               	movlb	0	; select bank0
 13481  0A05  082E               	movf	?___ftdiv,w
 13482  0A06  00DF               	movwf	setPercentValue@i
 13483  0A07  082F               	movf	?___ftdiv+1,w
 13484  0A08  00E0               	movwf	setPercentValue@i+1
 13485  0A09  0830               	movf	?___ftdiv+2,w
 13486  0A0A  00E1               	movwf	setPercentValue@i+2
 13487                           
 13488                           ;Dimmer_B1.c: 1053: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 13489  0A0B  085E               	movf	setPercentValue@value,w
 13490  0A0C  00DC               	movwf	??_setPercentValue
 13491  0A0D  01DD               	clrf	??_setPercentValue+1
 13492  0A0E  09DC               	comf	??_setPercentValue,f
 13493  0A0F  09DD               	comf	??_setPercentValue+1,f
 13494  0A10  0ADC               	incf	??_setPercentValue,f
 13495  0A11  1903               	skipnz
 13496  0A12  0ADD               	incf	??_setPercentValue+1,f
 13497  0A13  085C               	movf	??_setPercentValue,w
 13498  0A14  3E38               	addlw	56
 13499  0A15  00A8               	movwf	___awtoft@c
 13500  0A16  3000               	movlw	0
 13501  0A17  3D5D               	addwfc	??_setPercentValue+1,w
 13502  0A18  00A9               	movwf	___awtoft@c+1
 13503  0A19  319F  27DE  3189   	fcall	___awtoft
 13504  0A1C  0020               	movlb	0	; select bank0
 13505  0A1D  0828               	movf	?___awtoft,w
 13506  0A1E  00B1               	movwf	___ftdiv@f1
 13507  0A1F  0829               	movf	?___awtoft+1,w
 13508  0A20  00B2               	movwf	___ftdiv@f1+1
 13509  0A21  082A               	movf	?___awtoft+2,w
 13510  0A22  00B3               	movwf	___ftdiv@f1+2
 13511  0A23  085F               	movf	setPercentValue@i,w
 13512  0A24  00AE               	movwf	___ftdiv@f2
 13513  0A25  0860               	movf	setPercentValue@i+1,w
 13514  0A26  00AF               	movwf	___ftdiv@f2+1
 13515  0A27  0861               	movf	setPercentValue@i+2,w
 13516  0A28  00B0               	movwf	___ftdiv@f2+2
 13517  0A29  318E  26A7  3189   	fcall	___ftdiv
 13518  0A2C  0020               	movlb	0	; select bank0
 13519  0A2D  082E               	movf	?___ftdiv,w
 13520  0A2E  00BE               	movwf	___ftneg@f1
 13521  0A2F  082F               	movf	?___ftdiv+1,w
 13522  0A30  00BF               	movwf	___ftneg@f1+1
 13523  0A31  0830               	movf	?___ftdiv+2,w
 13524  0A32  00C0               	movwf	___ftneg@f1+2
 13525  0A33  319C  245D  3189   	fcall	___ftneg
 13526  0A36  0020               	movlb	0	; select bank0
 13527  0A37  083E               	movf	?___ftneg,w
 13528  0A38  00C4               	movwf	___ftadd@f2
 13529  0A39  083F               	movf	?___ftneg+1,w
 13530  0A3A  00C5               	movwf	___ftadd@f2+1
 13531  0A3B  0840               	movf	?___ftneg+2,w
 13532  0A3C  00C6               	movwf	___ftadd@f2+2
 13533  0A3D  3000               	movlw	0
 13534  0A3E  00C1               	movwf	___ftadd@f1
 13535  0A3F  30C8               	movlw	200
 13536  0A40  00C2               	movwf	___ftadd@f1+1
 13537  0A41  3042               	movlw	66
 13538  0A42  00C3               	movwf	___ftadd@f1+2
 13539  0A43  3184  2456  3189   	fcall	___ftadd
 13540  0A46  0020               	movlb	0	; select bank0
 13541  0A47  0841               	movf	?___ftadd,w
 13542  0A48  00CE               	movwf	___fttol@f1
 13543  0A49  0842               	movf	?___ftadd+1,w
 13544  0A4A  00CF               	movwf	___fttol@f1+1
 13545  0A4B  0843               	movf	?___ftadd+2,w
 13546  0A4C  00D0               	movwf	___fttol@f1+2
 13547  0A4D  318D  2589         	fcall	___fttol
 13548  0A4F  0020               	movlb	0	; select bank0
 13549  0A50  084E               	movf	?___fttol,w
 13550  0A51  0008               	return
 13551  0A52                     __end_of_setPercentValue:	
 13552                           
 13553                           	psect	text81
 13554  0D89                     __ptext81:	
 13555 ;; *************** function ___fttol *****************
 13556 ;; Defined at:
 13557 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;  f1              3   46[BANK0 ] float 
 13560 ;; Auto vars:     Size  Location     Type
 13561 ;;  lval            4   55[BANK0 ] unsigned long 
 13562 ;;  exp1            1   59[BANK0 ] unsigned char 
 13563 ;;  sign1           1   54[BANK0 ] unsigned char 
 13564 ;; Return value:  Size  Location     Type
 13565 ;;                  4   46[BANK0 ] long 
 13566 ;; Registers used:
 13567 ;;		wreg, status,2, status,0
 13568 ;; Tracked objects:
 13569 ;;		On entry : 0/0
 13570 ;;		On exit  : 0/0
 13571 ;;		Unchanged: 0/0
 13572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13573 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13574 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13575 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;Total ram usage:       14 bytes
 13578 ;; Hardware stack levels used:    1
 13579 ;; Hardware stack levels required when called:    5
 13580 ;; This function calls:
 13581 ;;		Nothing
 13582 ;; This function is called by:
 13583 ;;		_getPercentValue
 13584 ;;		_setPercentValue
 13585 ;; This function uses a non-reentrant model
 13586 ;;
 13587                           
 13588                           
 13589                           ;psect for function ___fttol
 13590  0D89                     ___fttol:	
 13591                           
 13592                           ;incstack = 0
 13593                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13594  0D89  0020               	movlb	0	; select bank0
 13595  0D8A  084E               	movf	___fttol@f1,w
 13596  0D8B  00D2               	movwf	??___fttol
 13597  0D8C  084F               	movf	___fttol@f1+1,w
 13598  0D8D  00D3               	movwf	??___fttol+1
 13599  0D8E  0850               	movf	___fttol@f1+2,w
 13600  0D8F  00D4               	movwf	??___fttol+2
 13601  0D90  1003               	clrc
 13602  0D91  0D53               	rlf	??___fttol+1,w
 13603  0D92  0D54               	rlf	??___fttol+2,w
 13604  0D93  00D5               	movwf	??___fttol+3
 13605  0D94  0855               	movf	??___fttol+3,w
 13606  0D95  00DB               	movwf	___fttol@exp1
 13607  0D96  08DB               	movf	___fttol@exp1,f
 13608  0D97  1D03               	skipz
 13609  0D98  2DA2               	goto	l8210
 13610  0D99  3000               	movlw	0
 13611  0D9A  00D1               	movwf	?___fttol+3
 13612  0D9B  3000               	movlw	0
 13613  0D9C  00D0               	movwf	?___fttol+2
 13614  0D9D  3000               	movlw	0
 13615  0D9E  00CF               	movwf	?___fttol+1
 13616  0D9F  3000               	movlw	0
 13617  0DA0  00CE               	movwf	?___fttol
 13618  0DA1  0008               	return
 13619  0DA2                     l8210:	
 13620  0DA2  084E               	movf	___fttol@f1,w
 13621  0DA3  00D2               	movwf	??___fttol
 13622  0DA4  084F               	movf	___fttol@f1+1,w
 13623  0DA5  00D3               	movwf	??___fttol+1
 13624  0DA6  0850               	movf	___fttol@f1+2,w
 13625  0DA7  00D4               	movwf	??___fttol+2
 13626  0DA8  3017               	movlw	23
 13627  0DA9                     u8645:	
 13628  0DA9  36D4               	lsrf	??___fttol+2,f
 13629  0DAA  0CD3               	rrf	??___fttol+1,f
 13630  0DAB  0CD2               	rrf	??___fttol,f
 13631  0DAC  0B89               	decfsz	9,f
 13632  0DAD  2DA9               	goto	u8645
 13633  0DAE  0852               	movf	??___fttol,w
 13634  0DAF  00D5               	movwf	??___fttol+3
 13635  0DB0  0855               	movf	??___fttol+3,w
 13636  0DB1  00D6               	movwf	___fttol@sign1
 13637  0DB2  17CF               	bsf	___fttol@f1+1,7
 13638  0DB3  30FF               	movlw	255
 13639  0DB4  05CE               	andwf	___fttol@f1,f
 13640  0DB5  30FF               	movlw	255
 13641  0DB6  05CF               	andwf	___fttol@f1+1,f
 13642  0DB7  3000               	movlw	0
 13643  0DB8  05D0               	andwf	___fttol@f1+2,f
 13644  0DB9  084E               	movf	___fttol@f1,w
 13645  0DBA  00D7               	movwf	___fttol@lval
 13646  0DBB  084F               	movf	___fttol@f1+1,w
 13647  0DBC  00D8               	movwf	___fttol@lval+1
 13648  0DBD  0850               	movf	___fttol@f1+2,w
 13649  0DBE  00D9               	movwf	___fttol@lval+2
 13650  0DBF  01DA               	clrf	___fttol@lval+3
 13651  0DC0  308E               	movlw	142
 13652  0DC1  02DB               	subwf	___fttol@exp1,f
 13653  0DC2  1FDB               	btfss	___fttol@exp1,7
 13654  0DC3  2DE0               	goto	l8230
 13655  0DC4  085B               	movf	___fttol@exp1,w
 13656  0DC5  3A80               	xorlw	128
 13657  0DC6  3E8F               	addlw	143
 13658  0DC7  1803               	skipnc
 13659  0DC8  2DD2               	goto	l8228
 13660  0DC9  3000               	movlw	0
 13661  0DCA  00D1               	movwf	?___fttol+3
 13662  0DCB  3000               	movlw	0
 13663  0DCC  00D0               	movwf	?___fttol+2
 13664  0DCD  3000               	movlw	0
 13665  0DCE  00CF               	movwf	?___fttol+1
 13666  0DCF  3000               	movlw	0
 13667  0DD0  00CE               	movwf	?___fttol
 13668  0DD1  0008               	return
 13669  0DD2                     l8228:	
 13670  0DD2  3001               	movlw	1
 13671  0DD3                     u8675:	
 13672  0DD3  36DA               	lsrf	___fttol@lval+3,f
 13673  0DD4  0CD9               	rrf	___fttol@lval+2,f
 13674  0DD5  0CD8               	rrf	___fttol@lval+1,f
 13675  0DD6  0CD7               	rrf	___fttol@lval,f
 13676  0DD7  0B89               	decfsz	9,f
 13677  0DD8  2DD3               	goto	u8675
 13678  0DD9  3001               	movlw	1
 13679  0DDA  00D2               	movwf	??___fttol
 13680  0DDB  0852               	movf	??___fttol,w
 13681  0DDC  07DB               	addwf	___fttol@exp1,f
 13682  0DDD  1903               	btfsc	3,2
 13683  0DDE  2DF9               	goto	l8240
 13684  0DDF  2DD2               	goto	l8228
 13685  0DE0                     l8230:	
 13686  0DE0  3018               	movlw	24
 13687  0DE1  025B               	subwf	___fttol@exp1,w
 13688  0DE2  1C03               	skipc
 13689  0DE3  2DF6               	goto	l8238
 13690  0DE4  3000               	movlw	0
 13691  0DE5  00D1               	movwf	?___fttol+3
 13692  0DE6  3000               	movlw	0
 13693  0DE7  00D0               	movwf	?___fttol+2
 13694  0DE8  3000               	movlw	0
 13695  0DE9  00CF               	movwf	?___fttol+1
 13696  0DEA  3000               	movlw	0
 13697  0DEB  00CE               	movwf	?___fttol
 13698  0DEC  0008               	return
 13699  0DED                     l8236:	
 13700  0DED  3001               	movlw	1
 13701  0DEE                     u8705:	
 13702  0DEE  35D7               	lslf	___fttol@lval,f
 13703  0DEF  0DD8               	rlf	___fttol@lval+1,f
 13704  0DF0  0DD9               	rlf	___fttol@lval+2,f
 13705  0DF1  0DDA               	rlf	___fttol@lval+3,f
 13706  0DF2  0B89               	decfsz	9,f
 13707  0DF3  2DEE               	goto	u8705
 13708  0DF4  3001               	movlw	1
 13709  0DF5  02DB               	subwf	___fttol@exp1,f
 13710  0DF6                     l8238:	
 13711  0DF6  08DB               	movf	___fttol@exp1,f
 13712  0DF7  1D03               	skipz
 13713  0DF8  2DED               	goto	l8236
 13714  0DF9                     l8240:	
 13715  0DF9  0856               	movf	___fttol@sign1,w
 13716  0DFA  1903               	btfsc	3,2
 13717  0DFB  2E07               	goto	l8244
 13718  0DFC  09D7               	comf	___fttol@lval,f
 13719  0DFD  09D8               	comf	___fttol@lval+1,f
 13720  0DFE  09D9               	comf	___fttol@lval+2,f
 13721  0DFF  09DA               	comf	___fttol@lval+3,f
 13722  0E00  0AD7               	incf	___fttol@lval,f
 13723  0E01  1903               	skipnz
 13724  0E02  0AD8               	incf	___fttol@lval+1,f
 13725  0E03  1903               	skipnz
 13726  0E04  0AD9               	incf	___fttol@lval+2,f
 13727  0E05  1903               	skipnz
 13728  0E06  0ADA               	incf	___fttol@lval+3,f
 13729  0E07                     l8244:	
 13730  0E07  085A               	movf	___fttol@lval+3,w
 13731  0E08  00D1               	movwf	?___fttol+3
 13732  0E09  0859               	movf	___fttol@lval+2,w
 13733  0E0A  00D0               	movwf	?___fttol+2
 13734  0E0B  0858               	movf	___fttol@lval+1,w
 13735  0E0C  00CF               	movwf	?___fttol+1
 13736  0E0D  0857               	movf	___fttol@lval,w
 13737  0E0E  00CE               	movwf	?___fttol
 13738  0E0F  0008               	return
 13739  0E10                     __end_of___fttol:	
 13740                           
 13741                           	psect	text82
 13742  1C5D                     __ptext82:	
 13743 ;; *************** function ___ftneg *****************
 13744 ;; Defined at:
 13745 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13746 ;; Parameters:    Size  Location     Type
 13747 ;;  f1              3   30[BANK0 ] float 
 13748 ;; Auto vars:     Size  Location     Type
 13749 ;;		None
 13750 ;; Return value:  Size  Location     Type
 13751 ;;                  3   30[BANK0 ] float 
 13752 ;; Registers used:
 13753 ;;		wreg
 13754 ;; Tracked objects:
 13755 ;;		On entry : 0/0
 13756 ;;		On exit  : 0/0
 13757 ;;		Unchanged: 0/0
 13758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13759 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13762 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13763 ;;Total ram usage:        3 bytes
 13764 ;; Hardware stack levels used:    1
 13765 ;; Hardware stack levels required when called:    5
 13766 ;; This function calls:
 13767 ;;		Nothing
 13768 ;; This function is called by:
 13769 ;;		_getPercentValue
 13770 ;;		_setPercentValue
 13771 ;; This function uses a non-reentrant model
 13772 ;;
 13773                           
 13774                           
 13775                           ;psect for function ___ftneg
 13776  1C5D                     ___ftneg:	
 13777                           
 13778                           ;incstack = 0
 13779                           ; Regs used in ___ftneg: [wreg]
 13780  1C5D  0020               	movlb	0	; select bank0
 13781  1C5E  0840               	movf	___ftneg@f1+2,w
 13782  1C5F  043F               	iorwf	___ftneg@f1+1,w
 13783  1C60  043E               	iorwf	___ftneg@f1,w
 13784  1C61  1903               	skipnz
 13785  1C62  0008               	return
 13786  1C63  3080               	movlw	128
 13787  1C64  06C0               	xorwf	___ftneg@f1+2,f
 13788  1C65  0008               	return
 13789  1C66                     __end_of___ftneg:	
 13790                           
 13791                           	psect	text83
 13792  0EA7                     __ptext83:	
 13793 ;; *************** function ___ftdiv *****************
 13794 ;; Defined at:
 13795 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13796 ;; Parameters:    Size  Location     Type
 13797 ;;  f2              3   14[BANK0 ] float 
 13798 ;;  f1              3   17[BANK0 ] float 
 13799 ;; Auto vars:     Size  Location     Type
 13800 ;;  f3              3   25[BANK0 ] float 
 13801 ;;  sign            1   29[BANK0 ] unsigned char 
 13802 ;;  exp             1   28[BANK0 ] unsigned char 
 13803 ;;  cntr            1   24[BANK0 ] unsigned char 
 13804 ;; Return value:  Size  Location     Type
 13805 ;;                  3   14[BANK0 ] float 
 13806 ;; Registers used:
 13807 ;;		wreg, status,2, status,0, pclath, cstack
 13808 ;; Tracked objects:
 13809 ;;		On entry : 0/0
 13810 ;;		On exit  : 0/0
 13811 ;;		Unchanged: 0/0
 13812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13813 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;Total ram usage:       16 bytes
 13818 ;; Hardware stack levels used:    1
 13819 ;; Hardware stack levels required when called:    6
 13820 ;; This function calls:
 13821 ;;		___ftpack
 13822 ;; This function is called by:
 13823 ;;		_getPercentValue
 13824 ;;		_setPercentValue
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           
 13829                           ;psect for function ___ftdiv
 13830  0EA7                     ___ftdiv:	
 13831                           
 13832                           ;incstack = 0
 13833                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13834  0EA7  0020               	movlb	0	; select bank0
 13835  0EA8  0831               	movf	___ftdiv@f1,w
 13836  0EA9  00B4               	movwf	??___ftdiv
 13837  0EAA  0832               	movf	___ftdiv@f1+1,w
 13838  0EAB  00B5               	movwf	??___ftdiv+1
 13839  0EAC  0833               	movf	___ftdiv@f1+2,w
 13840  0EAD  00B6               	movwf	??___ftdiv+2
 13841  0EAE  1003               	clrc
 13842  0EAF  0D35               	rlf	??___ftdiv+1,w
 13843  0EB0  0D36               	rlf	??___ftdiv+2,w
 13844  0EB1  00B7               	movwf	??___ftdiv+3
 13845  0EB2  0837               	movf	??___ftdiv+3,w
 13846  0EB3  00BC               	movwf	___ftdiv@exp
 13847  0EB4  08BC               	movf	___ftdiv@exp,f
 13848  0EB5  1D03               	skipz
 13849  0EB6  2EBE               	goto	l8110
 13850  0EB7  3000               	movlw	0
 13851  0EB8  00AE               	movwf	?___ftdiv
 13852  0EB9  3000               	movlw	0
 13853  0EBA  00AF               	movwf	?___ftdiv+1
 13854  0EBB  3000               	movlw	0
 13855  0EBC  00B0               	movwf	?___ftdiv+2
 13856  0EBD  0008               	return
 13857  0EBE                     l8110:	
 13858  0EBE  082E               	movf	___ftdiv@f2,w
 13859  0EBF  00B4               	movwf	??___ftdiv
 13860  0EC0  082F               	movf	___ftdiv@f2+1,w
 13861  0EC1  00B5               	movwf	??___ftdiv+1
 13862  0EC2  0830               	movf	___ftdiv@f2+2,w
 13863  0EC3  00B6               	movwf	??___ftdiv+2
 13864  0EC4  1003               	clrc
 13865  0EC5  0D35               	rlf	??___ftdiv+1,w
 13866  0EC6  0D36               	rlf	??___ftdiv+2,w
 13867  0EC7  00B7               	movwf	??___ftdiv+3
 13868  0EC8  0837               	movf	??___ftdiv+3,w
 13869  0EC9  00BD               	movwf	___ftdiv@sign
 13870  0ECA  08BD               	movf	___ftdiv@sign,f
 13871  0ECB  1D03               	skipz
 13872  0ECC  2ED4               	goto	l8116
 13873  0ECD  3000               	movlw	0
 13874  0ECE  00AE               	movwf	?___ftdiv
 13875  0ECF  3000               	movlw	0
 13876  0ED0  00AF               	movwf	?___ftdiv+1
 13877  0ED1  3000               	movlw	0
 13878  0ED2  00B0               	movwf	?___ftdiv+2
 13879  0ED3  0008               	return
 13880  0ED4                     l8116:	
 13881  0ED4  3000               	movlw	0
 13882  0ED5  00B9               	movwf	___ftdiv@f3
 13883  0ED6  3000               	movlw	0
 13884  0ED7  00BA               	movwf	___ftdiv@f3+1
 13885  0ED8  3000               	movlw	0
 13886  0ED9  00BB               	movwf	___ftdiv@f3+2
 13887  0EDA  3089               	movlw	137
 13888  0EDB  073D               	addwf	___ftdiv@sign,w
 13889  0EDC  00B4               	movwf	??___ftdiv
 13890  0EDD  0834               	movf	??___ftdiv,w
 13891  0EDE  02BC               	subwf	___ftdiv@exp,f
 13892  0EDF  0831               	movf	___ftdiv@f1,w
 13893  0EE0  00B4               	movwf	??___ftdiv
 13894  0EE1  0832               	movf	___ftdiv@f1+1,w
 13895  0EE2  00B5               	movwf	??___ftdiv+1
 13896  0EE3  0833               	movf	___ftdiv@f1+2,w
 13897  0EE4  00B6               	movwf	??___ftdiv+2
 13898  0EE5  3010               	movlw	16
 13899  0EE6                     u8445:	
 13900  0EE6  36B6               	lsrf	??___ftdiv+2,f
 13901  0EE7  0CB5               	rrf	??___ftdiv+1,f
 13902  0EE8  0CB4               	rrf	??___ftdiv,f
 13903  0EE9  0B89               	decfsz	9,f
 13904  0EEA  2EE6               	goto	u8445
 13905  0EEB  0834               	movf	??___ftdiv,w
 13906  0EEC  00B7               	movwf	??___ftdiv+3
 13907  0EED  0837               	movf	??___ftdiv+3,w
 13908  0EEE  00BD               	movwf	___ftdiv@sign
 13909  0EEF  082E               	movf	___ftdiv@f2,w
 13910  0EF0  00B4               	movwf	??___ftdiv
 13911  0EF1  082F               	movf	___ftdiv@f2+1,w
 13912  0EF2  00B5               	movwf	??___ftdiv+1
 13913  0EF3  0830               	movf	___ftdiv@f2+2,w
 13914  0EF4  00B6               	movwf	??___ftdiv+2
 13915  0EF5  3010               	movlw	16
 13916  0EF6                     u8455:	
 13917  0EF6  36B6               	lsrf	??___ftdiv+2,f
 13918  0EF7  0CB5               	rrf	??___ftdiv+1,f
 13919  0EF8  0CB4               	rrf	??___ftdiv,f
 13920  0EF9  0B89               	decfsz	9,f
 13921  0EFA  2EF6               	goto	u8455
 13922  0EFB  0834               	movf	??___ftdiv,w
 13923  0EFC  00B7               	movwf	??___ftdiv+3
 13924  0EFD  0837               	movf	??___ftdiv+3,w
 13925  0EFE  06BD               	xorwf	___ftdiv@sign,f
 13926  0EFF  3080               	movlw	128
 13927  0F00  00B4               	movwf	??___ftdiv
 13928  0F01  0834               	movf	??___ftdiv,w
 13929  0F02  05BD               	andwf	___ftdiv@sign,f
 13930  0F03  17B2               	bsf	___ftdiv@f1+1,7
 13931  0F04  30FF               	movlw	255
 13932  0F05  05B1               	andwf	___ftdiv@f1,f
 13933  0F06  30FF               	movlw	255
 13934  0F07  05B2               	andwf	___ftdiv@f1+1,f
 13935  0F08  3000               	movlw	0
 13936  0F09  05B3               	andwf	___ftdiv@f1+2,f
 13937  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 13938  0F0B  30FF               	movlw	255
 13939  0F0C  05AE               	andwf	___ftdiv@f2,f
 13940  0F0D  30FF               	movlw	255
 13941  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 13942  0F0F  3000               	movlw	0
 13943  0F10  05B0               	andwf	___ftdiv@f2+2,f
 13944  0F11  3018               	movlw	24
 13945  0F12  00B4               	movwf	??___ftdiv
 13946  0F13  0834               	movf	??___ftdiv,w
 13947  0F14  00B8               	movwf	___ftdiv@cntr
 13948  0F15                     l8130:	
 13949  0F15  3001               	movlw	1
 13950  0F16                     u8465:	
 13951  0F16  35B9               	lslf	___ftdiv@f3,f
 13952  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 13953  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 13954  0F19  0B89               	decfsz	9,f
 13955  0F1A  2F16               	goto	u8465
 13956  0F1B  0830               	movf	___ftdiv@f2+2,w
 13957  0F1C  0233               	subwf	___ftdiv@f1+2,w
 13958  0F1D  1D03               	skipz
 13959  0F1E  2F25               	goto	u8475
 13960  0F1F  082F               	movf	___ftdiv@f2+1,w
 13961  0F20  0232               	subwf	___ftdiv@f1+1,w
 13962  0F21  1D03               	skipz
 13963  0F22  2F25               	goto	u8475
 13964  0F23  082E               	movf	___ftdiv@f2,w
 13965  0F24  0231               	subwf	___ftdiv@f1,w
 13966  0F25                     u8475:	
 13967  0F25  1C03               	skipc
 13968  0F26  2F2E               	goto	l8138
 13969  0F27  082E               	movf	___ftdiv@f2,w
 13970  0F28  02B1               	subwf	___ftdiv@f1,f
 13971  0F29  082F               	movf	___ftdiv@f2+1,w
 13972  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 13973  0F2B  0830               	movf	___ftdiv@f2+2,w
 13974  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 13975  0F2D  1439               	bsf	___ftdiv@f3,0
 13976  0F2E                     l8138:	
 13977  0F2E  3001               	movlw	1
 13978  0F2F                     u8485:	
 13979  0F2F  35B1               	lslf	___ftdiv@f1,f
 13980  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 13981  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 13982  0F32  0B89               	decfsz	9,f
 13983  0F33  2F2F               	goto	u8485
 13984  0F34  3001               	movlw	1
 13985  0F35  02B8               	subwf	___ftdiv@cntr,f
 13986  0F36  1D03               	btfss	3,2
 13987  0F37  2F15               	goto	l8130
 13988  0F38  0839               	movf	___ftdiv@f3,w
 13989  0F39  00A0               	movwf	___ftpack@arg
 13990  0F3A  083A               	movf	___ftdiv@f3+1,w
 13991  0F3B  00A1               	movwf	___ftpack@arg+1
 13992  0F3C  083B               	movf	___ftdiv@f3+2,w
 13993  0F3D  00A2               	movwf	___ftpack@arg+2
 13994  0F3E  083C               	movf	___ftdiv@exp,w
 13995  0F3F  00B4               	movwf	??___ftdiv
 13996  0F40  0834               	movf	??___ftdiv,w
 13997  0F41  00A3               	movwf	___ftpack@exp
 13998  0F42  083D               	movf	___ftdiv@sign,w
 13999  0F43  00B5               	movwf	??___ftdiv+1
 14000  0F44  0835               	movf	??___ftdiv+1,w
 14001  0F45  00A4               	movwf	___ftpack@sign
 14002  0F46  3189  218C         	fcall	___ftpack
 14003  0F48  0020               	movlb	0	; select bank0
 14004  0F49  0820               	movf	?___ftpack,w
 14005  0F4A  00AE               	movwf	?___ftdiv
 14006  0F4B  0821               	movf	?___ftpack+1,w
 14007  0F4C  00AF               	movwf	?___ftdiv+1
 14008  0F4D  0822               	movf	?___ftpack+2,w
 14009  0F4E  00B0               	movwf	?___ftdiv+2
 14010  0F4F  0008               	return
 14011  0F50                     __end_of___ftdiv:	
 14012                           
 14013                           	psect	text84
 14014  0456                     __ptext84:	
 14015 ;; *************** function ___ftadd *****************
 14016 ;; Defined at:
 14017 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14018 ;; Parameters:    Size  Location     Type
 14019 ;;  f1              3   33[BANK0 ] float 
 14020 ;;  f2              3   36[BANK0 ] float 
 14021 ;; Auto vars:     Size  Location     Type
 14022 ;;  exp1            1   45[BANK0 ] unsigned char 
 14023 ;;  exp2            1   44[BANK0 ] unsigned char 
 14024 ;;  sign            1   43[BANK0 ] unsigned char 
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  3   33[BANK0 ] float 
 14027 ;; Registers used:
 14028 ;;		wreg, status,2, status,0, pclath, cstack
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14034 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14035 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14036 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14037 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;Total ram usage:       13 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; Hardware stack levels required when called:    6
 14041 ;; This function calls:
 14042 ;;		___ftpack
 14043 ;; This function is called by:
 14044 ;;		_getPercentValue
 14045 ;;		_setPercentValue
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           
 14050                           ;psect for function ___ftadd
 14051  0456                     ___ftadd:	
 14052                           
 14053                           ;incstack = 0
 14054                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14055  0456  0020               	movlb	0	; select bank0
 14056  0457  0841               	movf	___ftadd@f1,w
 14057  0458  00C7               	movwf	??___ftadd
 14058  0459  0842               	movf	___ftadd@f1+1,w
 14059  045A  00C8               	movwf	??___ftadd+1
 14060  045B  0843               	movf	___ftadd@f1+2,w
 14061  045C  00C9               	movwf	??___ftadd+2
 14062  045D  1003               	clrc
 14063  045E  0D48               	rlf	??___ftadd+1,w
 14064  045F  0D49               	rlf	??___ftadd+2,w
 14065  0460  00CA               	movwf	??___ftadd+3
 14066  0461  084A               	movf	??___ftadd+3,w
 14067  0462  00CD               	movwf	___ftadd@exp1
 14068  0463  0844               	movf	___ftadd@f2,w
 14069  0464  00C7               	movwf	??___ftadd
 14070  0465  0845               	movf	___ftadd@f2+1,w
 14071  0466  00C8               	movwf	??___ftadd+1
 14072  0467  0846               	movf	___ftadd@f2+2,w
 14073  0468  00C9               	movwf	??___ftadd+2
 14074  0469  1003               	clrc
 14075  046A  0D48               	rlf	??___ftadd+1,w
 14076  046B  0D49               	rlf	??___ftadd+2,w
 14077  046C  00CA               	movwf	??___ftadd+3
 14078  046D  084A               	movf	??___ftadd+3,w
 14079  046E  00CC               	movwf	___ftadd@exp2
 14080  046F  084D               	movf	___ftadd@exp1,w
 14081  0470  1903               	btfsc	3,2
 14082  0471  2C7E               	goto	l8040
 14083  0472  084C               	movf	___ftadd@exp2,w
 14084  0473  024D               	subwf	___ftadd@exp1,w
 14085  0474  1803               	skipnc
 14086  0475  2C85               	goto	l8044
 14087  0476  034D               	decf	___ftadd@exp1,w
 14088  0477  3AFF               	xorlw	255
 14089  0478  074C               	addwf	___ftadd@exp2,w
 14090  0479  00C7               	movwf	??___ftadd
 14091  047A  3019               	movlw	25
 14092  047B  0247               	subwf	??___ftadd,w
 14093  047C  1C03               	skipc
 14094  047D  2C85               	goto	l8044
 14095  047E                     l8040:	
 14096  047E  0844               	movf	___ftadd@f2,w
 14097  047F  00C1               	movwf	?___ftadd
 14098  0480  0845               	movf	___ftadd@f2+1,w
 14099  0481  00C2               	movwf	?___ftadd+1
 14100  0482  0846               	movf	___ftadd@f2+2,w
 14101  0483  00C3               	movwf	?___ftadd+2
 14102  0484  0008               	return
 14103  0485                     l8044:	
 14104  0485  084C               	movf	___ftadd@exp2,w
 14105  0486  1903               	btfsc	3,2
 14106  0487  0008               	return
 14107  0488  084D               	movf	___ftadd@exp1,w
 14108  0489  024C               	subwf	___ftadd@exp2,w
 14109  048A  1803               	skipnc
 14110  048B  2C94               	goto	l8050
 14111  048C  034C               	decf	___ftadd@exp2,w
 14112  048D  3AFF               	xorlw	255
 14113  048E  074D               	addwf	___ftadd@exp1,w
 14114  048F  00C7               	movwf	??___ftadd
 14115  0490  3019               	movlw	25
 14116  0491  0247               	subwf	??___ftadd,w
 14117  0492  1803               	btfsc	3,0
 14118  0493  0008               	return
 14119  0494                     l8050:	
 14120  0494  3006               	movlw	6
 14121  0495  00C7               	movwf	??___ftadd
 14122  0496  0847               	movf	??___ftadd,w
 14123  0497  00CB               	movwf	___ftadd@sign
 14124  0498  1BC3               	btfsc	___ftadd@f1+2,7
 14125  0499  17CB               	bsf	___ftadd@sign,7
 14126  049A  1BC6               	btfsc	___ftadd@f2+2,7
 14127  049B  174B               	bsf	___ftadd@sign,6
 14128  049C  17C2               	bsf	___ftadd@f1+1,7
 14129  049D  30FF               	movlw	255
 14130  049E  05C1               	andwf	___ftadd@f1,f
 14131  049F  30FF               	movlw	255
 14132  04A0  05C2               	andwf	___ftadd@f1+1,f
 14133  04A1  3000               	movlw	0
 14134  04A2  05C3               	andwf	___ftadd@f1+2,f
 14135  04A3  17C5               	bsf	___ftadd@f2+1,7
 14136  04A4  30FF               	movlw	255
 14137  04A5  05C4               	andwf	___ftadd@f2,f
 14138  04A6  30FF               	movlw	255
 14139  04A7  05C5               	andwf	___ftadd@f2+1,f
 14140  04A8  3000               	movlw	0
 14141  04A9  05C6               	andwf	___ftadd@f2+2,f
 14142  04AA  084C               	movf	___ftadd@exp2,w
 14143  04AB  024D               	subwf	___ftadd@exp1,w
 14144  04AC  1803               	skipnc
 14145  04AD  2CD0               	goto	l8072
 14146  04AE                     l8062:	
 14147  04AE  3001               	movlw	1
 14148  04AF                     u8285:	
 14149  04AF  35C4               	lslf	___ftadd@f2,f
 14150  04B0  0DC5               	rlf	___ftadd@f2+1,f
 14151  04B1  0DC6               	rlf	___ftadd@f2+2,f
 14152  04B2  0B89               	decfsz	9,f
 14153  04B3  2CAF               	goto	u8285
 14154  04B4  3001               	movlw	1
 14155  04B5  02CC               	subwf	___ftadd@exp2,f
 14156  04B6  084C               	movf	___ftadd@exp2,w
 14157  04B7  064D               	xorwf	___ftadd@exp1,w
 14158  04B8  1903               	skipnz
 14159  04B9  2CCB               	goto	l8070
 14160  04BA  3001               	movlw	1
 14161  04BB  02CB               	subwf	___ftadd@sign,f
 14162  04BC  084B               	movf	___ftadd@sign,w
 14163  04BD  3907               	andlw	7
 14164  04BE  1903               	btfsc	3,2
 14165  04BF  2CCB               	goto	l8070
 14166  04C0  2CAE               	goto	l8062
 14167  04C1                     l8068:	
 14168  04C1  3001               	movlw	1
 14169  04C2                     u8315:	
 14170  04C2  36C3               	lsrf	___ftadd@f1+2,f
 14171  04C3  0CC2               	rrf	___ftadd@f1+1,f
 14172  04C4  0CC1               	rrf	___ftadd@f1,f
 14173  04C5  0B89               	decfsz	9,f
 14174  04C6  2CC2               	goto	u8315
 14175  04C7  3001               	movlw	1
 14176  04C8  00C7               	movwf	??___ftadd
 14177  04C9  0847               	movf	??___ftadd,w
 14178  04CA  07CD               	addwf	___ftadd@exp1,f
 14179  04CB                     l8070:	
 14180  04CB  084D               	movf	___ftadd@exp1,w
 14181  04CC  064C               	xorwf	___ftadd@exp2,w
 14182  04CD  1903               	btfsc	3,2
 14183  04CE  2CF5               	goto	l2781
 14184  04CF  2CC1               	goto	l8068
 14185  04D0                     l8072:	
 14186  04D0  084D               	movf	___ftadd@exp1,w
 14187  04D1  024C               	subwf	___ftadd@exp2,w
 14188  04D2  1803               	skipnc
 14189  04D3  2CF5               	goto	l2781
 14190  04D4                     l8074:	
 14191  04D4  3001               	movlw	1
 14192  04D5                     u8345:	
 14193  04D5  35C1               	lslf	___ftadd@f1,f
 14194  04D6  0DC2               	rlf	___ftadd@f1+1,f
 14195  04D7  0DC3               	rlf	___ftadd@f1+2,f
 14196  04D8  0B89               	decfsz	9,f
 14197  04D9  2CD5               	goto	u8345
 14198  04DA  3001               	movlw	1
 14199  04DB  02CD               	subwf	___ftadd@exp1,f
 14200  04DC  084C               	movf	___ftadd@exp2,w
 14201  04DD  064D               	xorwf	___ftadd@exp1,w
 14202  04DE  1903               	skipnz
 14203  04DF  2CF1               	goto	l8082
 14204  04E0  3001               	movlw	1
 14205  04E1  02CB               	subwf	___ftadd@sign,f
 14206  04E2  084B               	movf	___ftadd@sign,w
 14207  04E3  3907               	andlw	7
 14208  04E4  1903               	btfsc	3,2
 14209  04E5  2CF1               	goto	l8082
 14210  04E6  2CD4               	goto	l8074
 14211  04E7                     l8080:	
 14212  04E7  3001               	movlw	1
 14213  04E8                     u8375:	
 14214  04E8  36C6               	lsrf	___ftadd@f2+2,f
 14215  04E9  0CC5               	rrf	___ftadd@f2+1,f
 14216  04EA  0CC4               	rrf	___ftadd@f2,f
 14217  04EB  0B89               	decfsz	9,f
 14218  04EC  2CE8               	goto	u8375
 14219  04ED  3001               	movlw	1
 14220  04EE  00C7               	movwf	??___ftadd
 14221  04EF  0847               	movf	??___ftadd,w
 14222  04F0  07CC               	addwf	___ftadd@exp2,f
 14223  04F1                     l8082:	
 14224  04F1  084D               	movf	___ftadd@exp1,w
 14225  04F2  064C               	xorwf	___ftadd@exp2,w
 14226  04F3  1D03               	skipz
 14227  04F4  2CE7               	goto	l8080
 14228  04F5                     l2781:	
 14229  04F5  1FCB               	btfss	___ftadd@sign,7
 14230  04F6  2D07               	goto	l8086
 14231  04F7  30FF               	movlw	255
 14232  04F8  06C1               	xorwf	___ftadd@f1,f
 14233  04F9  30FF               	movlw	255
 14234  04FA  06C2               	xorwf	___ftadd@f1+1,f
 14235  04FB  30FF               	movlw	255
 14236  04FC  06C3               	xorwf	___ftadd@f1+2,f
 14237  04FD  3001               	movlw	1
 14238  04FE  07C1               	addwf	___ftadd@f1,f
 14239  04FF  3000               	movlw	0
 14240  0500  1803               	skipnc
 14241  0501  3001               	movlw	1
 14242  0502  07C2               	addwf	___ftadd@f1+1,f
 14243  0503  3000               	movlw	0
 14244  0504  1803               	skipnc
 14245  0505  3001               	movlw	1
 14246  0506  07C3               	addwf	___ftadd@f1+2,f
 14247  0507                     l8086:	
 14248  0507  1F4B               	btfss	___ftadd@sign,6
 14249  0508  2D19               	goto	l8090
 14250  0509  30FF               	movlw	255
 14251  050A  06C4               	xorwf	___ftadd@f2,f
 14252  050B  30FF               	movlw	255
 14253  050C  06C5               	xorwf	___ftadd@f2+1,f
 14254  050D  30FF               	movlw	255
 14255  050E  06C6               	xorwf	___ftadd@f2+2,f
 14256  050F  3001               	movlw	1
 14257  0510  07C4               	addwf	___ftadd@f2,f
 14258  0511  3000               	movlw	0
 14259  0512  1803               	skipnc
 14260  0513  3001               	movlw	1
 14261  0514  07C5               	addwf	___ftadd@f2+1,f
 14262  0515  3000               	movlw	0
 14263  0516  1803               	skipnc
 14264  0517  3001               	movlw	1
 14265  0518  07C6               	addwf	___ftadd@f2+2,f
 14266  0519                     l8090:	
 14267  0519  01CB               	clrf	___ftadd@sign
 14268  051A  0841               	movf	___ftadd@f1,w
 14269  051B  07C4               	addwf	___ftadd@f2,f
 14270  051C  0842               	movf	___ftadd@f1+1,w
 14271  051D  3DC5               	addwfc	___ftadd@f2+1,f
 14272  051E  0843               	movf	___ftadd@f1+2,w
 14273  051F  3DC6               	addwfc	___ftadd@f2+2,f
 14274  0520  1FC6               	btfss	___ftadd@f2+2,7
 14275  0521  2D34               	goto	l8100
 14276  0522  30FF               	movlw	255
 14277  0523  06C4               	xorwf	___ftadd@f2,f
 14278  0524  30FF               	movlw	255
 14279  0525  06C5               	xorwf	___ftadd@f2+1,f
 14280  0526  30FF               	movlw	255
 14281  0527  06C6               	xorwf	___ftadd@f2+2,f
 14282  0528  3001               	movlw	1
 14283  0529  07C4               	addwf	___ftadd@f2,f
 14284  052A  3000               	movlw	0
 14285  052B  1803               	skipnc
 14286  052C  3001               	movlw	1
 14287  052D  07C5               	addwf	___ftadd@f2+1,f
 14288  052E  3000               	movlw	0
 14289  052F  1803               	skipnc
 14290  0530  3001               	movlw	1
 14291  0531  07C6               	addwf	___ftadd@f2+2,f
 14292  0532  01CB               	clrf	___ftadd@sign
 14293  0533  0ACB               	incf	___ftadd@sign,f
 14294  0534                     l8100:	
 14295  0534  0844               	movf	___ftadd@f2,w
 14296  0535  00A0               	movwf	___ftpack@arg
 14297  0536  0845               	movf	___ftadd@f2+1,w
 14298  0537  00A1               	movwf	___ftpack@arg+1
 14299  0538  0846               	movf	___ftadd@f2+2,w
 14300  0539  00A2               	movwf	___ftpack@arg+2
 14301  053A  084D               	movf	___ftadd@exp1,w
 14302  053B  00C7               	movwf	??___ftadd
 14303  053C  0847               	movf	??___ftadd,w
 14304  053D  00A3               	movwf	___ftpack@exp
 14305  053E  084B               	movf	___ftadd@sign,w
 14306  053F  00C8               	movwf	??___ftadd+1
 14307  0540  0848               	movf	??___ftadd+1,w
 14308  0541  00A4               	movwf	___ftpack@sign
 14309  0542  3189  218C         	fcall	___ftpack
 14310  0544  0020               	movlb	0	; select bank0
 14311  0545  0820               	movf	?___ftpack,w
 14312  0546  00C1               	movwf	?___ftadd
 14313  0547  0821               	movf	?___ftpack+1,w
 14314  0548  00C2               	movwf	?___ftadd+1
 14315  0549  0822               	movf	?___ftpack+2,w
 14316  054A  00C3               	movwf	?___ftadd+2
 14317  054B  0008               	return
 14318  054C                     __end_of___ftadd:	
 14319                           
 14320                           	psect	text85
 14321  1FDE                     __ptext85:	
 14322 ;; *************** function ___awtoft *****************
 14323 ;; Defined at:
 14324 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14325 ;; Parameters:    Size  Location     Type
 14326 ;;  c               2    8[BANK0 ] int 
 14327 ;; Auto vars:     Size  Location     Type
 14328 ;;  sign            1   13[BANK0 ] unsigned char 
 14329 ;; Return value:  Size  Location     Type
 14330 ;;                  3    8[BANK0 ] float 
 14331 ;; Registers used:
 14332 ;;		wreg, status,2, status,0, pclath, cstack
 14333 ;; Tracked objects:
 14334 ;;		On entry : 0/0
 14335 ;;		On exit  : 0/0
 14336 ;;		Unchanged: 0/0
 14337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14338 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14340 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14341 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;Total ram usage:        6 bytes
 14343 ;; Hardware stack levels used:    1
 14344 ;; Hardware stack levels required when called:    6
 14345 ;; This function calls:
 14346 ;;		___ftpack
 14347 ;; This function is called by:
 14348 ;;		_getPercentValue
 14349 ;;		_setPercentValue
 14350 ;; This function uses a non-reentrant model
 14351 ;;
 14352                           
 14353                           
 14354                           ;psect for function ___awtoft
 14355  1FDE                     ___awtoft:	
 14356                           
 14357                           ;incstack = 0
 14358                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14359  1FDE  0020               	movlb	0	; select bank0
 14360  1FDF  01AD               	clrf	___awtoft@sign
 14361  1FE0  1FA9               	btfss	___awtoft@c+1,7
 14362  1FE1  2FE9               	goto	l8028
 14363  1FE2  09A8               	comf	___awtoft@c,f
 14364  1FE3  09A9               	comf	___awtoft@c+1,f
 14365  1FE4  0AA8               	incf	___awtoft@c,f
 14366  1FE5  1903               	skipnz
 14367  1FE6  0AA9               	incf	___awtoft@c+1,f
 14368  1FE7  01AD               	clrf	___awtoft@sign
 14369  1FE8  0AAD               	incf	___awtoft@sign,f
 14370  1FE9                     l8028:	
 14371  1FE9  0828               	movf	___awtoft@c,w
 14372  1FEA  00A0               	movwf	___ftpack@arg
 14373  1FEB  0829               	movf	___awtoft@c+1,w
 14374  1FEC  00A1               	movwf	___ftpack@arg+1
 14375  1FED  01A2               	clrf	___ftpack@arg+2
 14376  1FEE  308E               	movlw	142
 14377  1FEF  00AB               	movwf	??___awtoft
 14378  1FF0  082B               	movf	??___awtoft,w
 14379  1FF1  00A3               	movwf	___ftpack@exp
 14380  1FF2  082D               	movf	___awtoft@sign,w
 14381  1FF3  00AC               	movwf	??___awtoft+1
 14382  1FF4  082C               	movf	??___awtoft+1,w
 14383  1FF5  00A4               	movwf	___ftpack@sign
 14384  1FF6  3189  218C         	fcall	___ftpack
 14385  1FF8  0020               	movlb	0	; select bank0
 14386  1FF9  0820               	movf	?___ftpack,w
 14387  1FFA  00A8               	movwf	?___awtoft
 14388  1FFB  0821               	movf	?___ftpack+1,w
 14389  1FFC  00A9               	movwf	?___awtoft+1
 14390  1FFD  0822               	movf	?___ftpack+2,w
 14391  1FFE  00AA               	movwf	?___awtoft+2
 14392  1FFF  0008               	return
 14393  2000                     __end_of___awtoft:	
 14394                           
 14395                           	psect	text86
 14396  098C                     __ptext86:	
 14397 ;; *************** function ___ftpack *****************
 14398 ;; Defined at:
 14399 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14400 ;; Parameters:    Size  Location     Type
 14401 ;;  arg             3    0[BANK0 ] unsigned um
 14402 ;;  exp             1    3[BANK0 ] unsigned char 
 14403 ;;  sign            1    4[BANK0 ] unsigned char 
 14404 ;; Auto vars:     Size  Location     Type
 14405 ;;		None
 14406 ;; Return value:  Size  Location     Type
 14407 ;;                  3    0[BANK0 ] float 
 14408 ;; Registers used:
 14409 ;;		wreg, status,2, status,0
 14410 ;; Tracked objects:
 14411 ;;		On entry : 0/0
 14412 ;;		On exit  : 0/0
 14413 ;;		Unchanged: 0/0
 14414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14415 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14419 ;;Total ram usage:        8 bytes
 14420 ;; Hardware stack levels used:    1
 14421 ;; Hardware stack levels required when called:    5
 14422 ;; This function calls:
 14423 ;;		Nothing
 14424 ;; This function is called by:
 14425 ;;		___awtoft
 14426 ;;		___ftadd
 14427 ;;		___ftdiv
 14428 ;;		___ftmul
 14429 ;; This function uses a non-reentrant model
 14430 ;;
 14431                           
 14432                           
 14433                           ;psect for function ___ftpack
 14434  098C                     ___ftpack:	
 14435                           
 14436                           ;incstack = 0
 14437                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14438  098C  0020               	movlb	0	; select bank0
 14439  098D  0823               	movf	___ftpack@exp,w
 14440  098E  1903               	btfsc	3,2
 14441  098F  2995               	goto	l7978
 14442  0990  0822               	movf	___ftpack@arg+2,w
 14443  0991  0421               	iorwf	___ftpack@arg+1,w
 14444  0992  0420               	iorwf	___ftpack@arg,w
 14445  0993  1D03               	skipz
 14446  0994  29A6               	goto	l7984
 14447  0995                     l7978:	
 14448  0995  3000               	movlw	0
 14449  0996  00A0               	movwf	?___ftpack
 14450  0997  3000               	movlw	0
 14451  0998  00A1               	movwf	?___ftpack+1
 14452  0999  3000               	movlw	0
 14453  099A  00A2               	movwf	?___ftpack+2
 14454  099B  0008               	return
 14455  099C                     l7982:	
 14456  099C  3001               	movlw	1
 14457  099D  00A5               	movwf	??___ftpack
 14458  099E  0825               	movf	??___ftpack,w
 14459  099F  07A3               	addwf	___ftpack@exp,f
 14460  09A0  3001               	movlw	1
 14461  09A1                     u8075:	
 14462  09A1  36A2               	lsrf	___ftpack@arg+2,f
 14463  09A2  0CA1               	rrf	___ftpack@arg+1,f
 14464  09A3  0CA0               	rrf	___ftpack@arg,f
 14465  09A4  0B89               	decfsz	9,f
 14466  09A5  29A1               	goto	u8075
 14467  09A6                     l7984:	
 14468  09A6  30FE               	movlw	254
 14469  09A7  0522               	andwf	___ftpack@arg+2,w
 14470  09A8  1903               	btfsc	3,2
 14471  09A9  29BF               	goto	l2752
 14472  09AA  299C               	goto	l7982
 14473  09AB                     l7986:	
 14474  09AB  3001               	movlw	1
 14475  09AC  00A5               	movwf	??___ftpack
 14476  09AD  0825               	movf	??___ftpack,w
 14477  09AE  07A3               	addwf	___ftpack@exp,f
 14478  09AF  3001               	movlw	1
 14479  09B0  07A0               	addwf	___ftpack@arg,f
 14480  09B1  3000               	movlw	0
 14481  09B2  1803               	skipnc
 14482  09B3  3001               	movlw	1
 14483  09B4  07A1               	addwf	___ftpack@arg+1,f
 14484  09B5  3000               	movlw	0
 14485  09B6  1803               	skipnc
 14486  09B7  3001               	movlw	1
 14487  09B8  07A2               	addwf	___ftpack@arg+2,f
 14488  09B9  3001               	movlw	1
 14489  09BA                     u8095:	
 14490  09BA  36A2               	lsrf	___ftpack@arg+2,f
 14491  09BB  0CA1               	rrf	___ftpack@arg+1,f
 14492  09BC  0CA0               	rrf	___ftpack@arg,f
 14493  09BD  0B89               	decfsz	9,f
 14494  09BE  29BA               	goto	u8095
 14495  09BF                     l2752:	
 14496  09BF  30FF               	movlw	255
 14497  09C0  0522               	andwf	___ftpack@arg+2,w
 14498  09C1  1903               	btfsc	3,2
 14499  09C2  29CC               	goto	l7994
 14500  09C3  29AB               	goto	l7986
 14501  09C4                     l7992:	
 14502  09C4  3001               	movlw	1
 14503  09C5  02A3               	subwf	___ftpack@exp,f
 14504  09C6  3001               	movlw	1
 14505  09C7                     u8115:	
 14506  09C7  35A0               	lslf	___ftpack@arg,f
 14507  09C8  0DA1               	rlf	___ftpack@arg+1,f
 14508  09C9  0DA2               	rlf	___ftpack@arg+2,f
 14509  09CA  0B89               	decfsz	9,f
 14510  09CB  29C7               	goto	u8115
 14511  09CC                     l7994:	
 14512  09CC  1FA1               	btfss	___ftpack@arg+1,7
 14513  09CD  29C4               	goto	l7992
 14514  09CE  1823               	btfsc	___ftpack@exp,0
 14515  09CF  29D6               	goto	l2758
 14516  09D0  30FF               	movlw	255
 14517  09D1  05A0               	andwf	___ftpack@arg,f
 14518  09D2  307F               	movlw	127
 14519  09D3  05A1               	andwf	___ftpack@arg+1,f
 14520  09D4  30FF               	movlw	255
 14521  09D5  05A2               	andwf	___ftpack@arg+2,f
 14522  09D6                     l2758:	
 14523  09D6  1003               	clrc
 14524  09D7  0CA3               	rrf	___ftpack@exp,f
 14525  09D8  0823               	movf	___ftpack@exp,w
 14526  09D9  00A5               	movwf	??___ftpack
 14527  09DA  01A6               	clrf	??___ftpack+1
 14528  09DB  01A7               	clrf	??___ftpack+2
 14529  09DC  3010               	movlw	16
 14530  09DD                     u8145:	
 14531  09DD  35A5               	lslf	??___ftpack,f
 14532  09DE  0DA6               	rlf	??___ftpack+1,f
 14533  09DF  0DA7               	rlf	??___ftpack+2,f
 14534  09E0  0B89               	decfsz	9,f
 14535  09E1  29DD               	goto	u8145
 14536  09E2  0825               	movf	??___ftpack,w
 14537  09E3  04A0               	iorwf	___ftpack@arg,f
 14538  09E4  0826               	movf	??___ftpack+1,w
 14539  09E5  04A1               	iorwf	___ftpack@arg+1,f
 14540  09E6  0827               	movf	??___ftpack+2,w
 14541  09E7  04A2               	iorwf	___ftpack@arg+2,f
 14542  09E8  0824               	movf	___ftpack@sign,w
 14543  09E9  1903               	btfsc	3,2
 14544  09EA  0008               	return
 14545  09EB  17A2               	bsf	___ftpack@arg+2,7
 14546  09EC  0008               	return
 14547  09ED                     __end_of___ftpack:	
 14548                           
 14549                           	psect	text87
 14550  139D                     __ptext87:	
 14551 ;; *************** function _setLED *****************
 14552 ;; Defined at:
 14553 ;;		line 76 in file "../src/LED_B1.c"
 14554 ;; Parameters:    Size  Location     Type
 14555 ;;  led             1    wreg     unsigned char 
 14556 ;;  command         1    2[BANK0 ] unsigned char 
 14557 ;; Auto vars:     Size  Location     Type
 14558 ;;  led             1    3[BANK0 ] unsigned char 
 14559 ;; Return value:  Size  Location     Type
 14560 ;;		None               void
 14561 ;; Registers used:
 14562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14563 ;; Tracked objects:
 14564 ;;		On entry : 0/0
 14565 ;;		On exit  : 0/0
 14566 ;;		Unchanged: 0/0
 14567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14568 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14571 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14572 ;;Total ram usage:        2 bytes
 14573 ;; Hardware stack levels used:    1
 14574 ;; Hardware stack levels required when called:    6
 14575 ;; This function calls:
 14576 ;;		_LedPointSelect
 14577 ;; This function is called by:
 14578 ;;		_setDimmerLights
 14579 ;;		_setLED_Initialization
 14580 ;;		_Exception_Main
 14581 ;;		_setSw_Initialization
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585                           
 14586                           ;psect for function _setLED
 14587  139D                     _setLED:	
 14588                           
 14589                           ;incstack = 0
 14590                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14591                           ;setLED@led stored from wreg
 14592  139D  0020               	movlb	0	; select bank0
 14593  139E  00A3               	movwf	setLED@led
 14594                           
 14595                           ;LED_B1.c: 77: LedPointSelect(led);
 14596  139F  0823               	movf	setLED@led,w
 14597  13A0  319C  24EF  3193   	fcall	_LedPointSelect
 14598                           
 14599                           ;LED_B1.c: 78: if (command == 0) {
 14600  13A3  0020               	movlb	0	; select bank0
 14601  13A4  08A2               	movf	setLED@command,f
 14602  13A5  1D03               	skipz
 14603  13A6  2BAC               	goto	l8700
 14604                           
 14605                           ;LED_B1.c: 107: if (led == 99) {
 14606  13A7  0823               	movf	setLED@led,w
 14607  13A8  3A63               	xorlw	99
 14608  13A9  1D03               	skipz
 14609  13AA  2BAC               	goto	l8700
 14610                           
 14611                           ;LED_B1.c: 111: RB5 = 1;
 14612  13AB  168D               	bsf	13,5	;volatile
 14613  13AC                     l8700:	
 14614                           
 14615                           ;LED_B1.c: 113: }
 14616                           ;LED_B1.c: 115: }
 14617                           ;LED_B1.c: 116: if (command == 1) {
 14618  13AC  0822               	movf	setLED@command,w
 14619  13AD  3A01               	xorlw	1
 14620  13AE  1D03               	skipz
 14621  13AF  2BB5               	goto	l8706
 14622                           
 14623                           ;LED_B1.c: 145: if (led == 99) {
 14624  13B0  0823               	movf	setLED@led,w
 14625  13B1  3A63               	xorlw	99
 14626  13B2  1D03               	skipz
 14627  13B3  2BB5               	goto	l8706
 14628                           
 14629                           ;LED_B1.c: 149: RB5 = 0;
 14630  13B4  128D               	bcf	13,5	;volatile
 14631  13B5                     l8706:	
 14632                           
 14633                           ;LED_B1.c: 151: }
 14634                           ;LED_B1.c: 153: }
 14635                           ;LED_B1.c: 154: if (command == 10) {
 14636  13B5  0822               	movf	setLED@command,w
 14637  13B6  3A0A               	xorlw	10
 14638  13B7  1D03               	skipz
 14639  13B8  2BCB               	goto	l8714
 14640                           
 14641                           ;LED_B1.c: 155: LED->GO = 0;
 14642  13B9  0021               	movlb	1	; select bank1
 14643  13BA  084E               	movf	_LED^(0+128),w
 14644  13BB  0086               	movwf	6
 14645  13BC  3001               	movlw	1	; select bank2/3
 14646  13BD  0087               	movwf	7
 14647  13BE  1081               	bcf	1,1
 14648                           
 14649                           ;LED_B1.c: 156: LED->Time = 0;
 14650  13BF  0A4E               	incf	_LED^(0+128),w
 14651  13C0  0086               	movwf	6
 14652  13C1  3001               	movlw	1	; select bank2/3
 14653  13C2  0087               	movwf	7
 14654  13C3  3000               	movlw	0
 14655  13C4  3FC0               	movwi [0]fsr1
 14656  13C5  3FC1               	movwi [1]fsr1
 14657                           
 14658                           ;LED_B1.c: 185: if (led == 99) {
 14659  13C6  0020               	movlb	0	; select bank0
 14660  13C7  0823               	movf	setLED@led,w
 14661  13C8  3A63               	xorlw	99
 14662  13C9  1903               	btfsc	3,2
 14663                           
 14664                           ;LED_B1.c: 189: RB5 = 1;
 14665  13CA  168D               	bsf	13,5	;volatile
 14666  13CB                     l8714:	
 14667                           
 14668                           ;LED_B1.c: 191: }
 14669                           ;LED_B1.c: 193: }
 14670                           ;LED_B1.c: 194: if (command == 11) {
 14671  13CB  0822               	movf	setLED@command,w
 14672  13CC  3A0B               	xorlw	11
 14673  13CD  1D03               	skipz
 14674  13CE  0008               	return
 14675                           
 14676                           ;LED_B1.c: 195: LED->GO = 1;
 14677  13CF  0021               	movlb	1	; select bank1
 14678  13D0  084E               	movf	_LED^(0+128),w
 14679  13D1  0086               	movwf	6
 14680  13D2  3001               	movlw	1	; select bank2/3
 14681  13D3  0087               	movwf	7
 14682  13D4  1481               	bsf	1,1
 14683  13D5  0008               	return
 14684  13D6                     __end_of_setLED:	
 14685                           
 14686                           	psect	text88
 14687  1CEF                     __ptext88:	
 14688 ;; *************** function _LedPointSelect *****************
 14689 ;; Defined at:
 14690 ;;		line 7 in file "../src/LED_B1.c"
 14691 ;; Parameters:    Size  Location     Type
 14692 ;;  led             1    wreg     unsigned char 
 14693 ;; Auto vars:     Size  Location     Type
 14694 ;;  led             1    1[BANK0 ] unsigned char 
 14695 ;; Return value:  Size  Location     Type
 14696 ;;		None               void
 14697 ;; Registers used:
 14698 ;;		wreg
 14699 ;; Tracked objects:
 14700 ;;		On entry : 0/0
 14701 ;;		On exit  : 0/0
 14702 ;;		Unchanged: 0/0
 14703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;Total ram usage:        2 bytes
 14709 ;; Hardware stack levels used:    1
 14710 ;; Hardware stack levels required when called:    5
 14711 ;; This function calls:
 14712 ;;		Nothing
 14713 ;; This function is called by:
 14714 ;;		_setLED_Initialization
 14715 ;;		_setLED
 14716 ;;		_setLED_Main
 14717 ;; This function uses a non-reentrant model
 14718 ;;
 14719                           
 14720                           
 14721                           ;psect for function _LedPointSelect
 14722  1CEF                     _LedPointSelect:	
 14723                           
 14724                           ;incstack = 0
 14725                           ; Regs used in _LedPointSelect: [wreg]
 14726                           ;LedPointSelect@led stored from wreg
 14727  1CEF  0020               	movlb	0	; select bank0
 14728  1CF0  00A1               	movwf	LedPointSelect@led
 14729                           
 14730                           ;LED_B1.c: 24: if (led == 99) {
 14731  1CF1  0821               	movf	LedPointSelect@led,w
 14732  1CF2  3A63               	xorlw	99
 14733  1CF3  1D03               	skipz
 14734  1CF4  0008               	return
 14735                           
 14736                           ;LED_B1.c: 25: LED = &VarErrLED;
 14737  1CF5  3069               	movlw	_VarErrLED& (0+255)
 14738  1CF6  00A0               	movwf	??_LedPointSelect
 14739  1CF7  0820               	movf	??_LedPointSelect,w
 14740  1CF8  0021               	movlb	1	; select bank1
 14741  1CF9  00CE               	movwf	_LED^(0+128)
 14742  1CFA  0008               	return
 14743  1CFB                     __end_of_LedPointSelect:	
 14744                           
 14745                           	psect	text89
 14746  1D45                     __ptext89:	
 14747 ;; *************** function _setDimmerLights_Line *****************
 14748 ;; Defined at:
 14749 ;;		line 714 in file "../src/Dimmer_B1.c"
 14750 ;; Parameters:    Size  Location     Type
 14751 ;;  lights          1    wreg     unsigned char 
 14752 ;; Auto vars:     Size  Location     Type
 14753 ;;  lights          1    0[BANK0 ] unsigned char 
 14754 ;; Return value:  Size  Location     Type
 14755 ;;		None               void
 14756 ;; Registers used:
 14757 ;;		wreg
 14758 ;; Tracked objects:
 14759 ;;		On entry : 0/0
 14760 ;;		On exit  : 0/0
 14761 ;;		Unchanged: 0/0
 14762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;Total ram usage:        1 bytes
 14768 ;; Hardware stack levels used:    1
 14769 ;; Hardware stack levels required when called:    5
 14770 ;; This function calls:
 14771 ;;		Nothing
 14772 ;; This function is called by:
 14773 ;;		_setDimmerLights
 14774 ;;		_setDimmerLights_Adj
 14775 ;; This function uses a non-reentrant model
 14776 ;;
 14777                           
 14778                           
 14779                           ;psect for function _setDimmerLights_Line
 14780  1D45                     _setDimmerLights_Line:	
 14781                           
 14782                           ;incstack = 0
 14783                           ; Regs used in _setDimmerLights_Line: [wreg]
 14784                           ;setDimmerLights_Line@lights stored from wreg
 14785  1D45  0020               	movlb	0	; select bank0
 14786  1D46  00A0               	movwf	setDimmerLights_Line@lights
 14787                           
 14788                           ;Dimmer_B1.c: 715: Dimmer.LoadGO = 1;
 14789  1D47  0021               	movlb	1	; select bank1
 14790  1D48  1546               	bsf	_Dimmer^(0+128),2	;volatile
 14791                           
 14792                           ;Dimmer_B1.c: 717: DimmerLights1.Line = 0;
 14793  1D49  0022               	movlb	2	; select bank2
 14794  1D4A  135D               	bcf	(_DimmerLights1^(0+256)+10),6
 14795                           
 14796                           ;Dimmer_B1.c: 726: if (lights == 1) {
 14797  1D4B  0020               	movlb	0	; select bank0
 14798  1D4C  0820               	movf	setDimmerLights_Line@lights,w
 14799  1D4D  3A01               	xorlw	1
 14800  1D4E  1D03               	skipz
 14801  1D4F  0008               	return
 14802                           
 14803                           ;Dimmer_B1.c: 727: DimmerLights1.Line = 1;
 14804  1D50  0022               	movlb	2	; select bank2
 14805  1D51  175D               	bsf	(_DimmerLights1^(0+256)+10),6
 14806  1D52  0008               	return
 14807  1D53                     __end_of_setDimmerLights_Line:	
 14808                           
 14809                           	psect	text90
 14810  1C8C                     __ptext90:	
 14811 ;; *************** function _getMain_LightsStatus *****************
 14812 ;; Defined at:
 14813 ;;		line 375 in file "../src/Main_B1.c"
 14814 ;; Parameters:    Size  Location     Type
 14815 ;;		None
 14816 ;; Auto vars:     Size  Location     Type
 14817 ;;  status          1    0[BANK0 ] unsigned char 
 14818 ;; Return value:  Size  Location     Type
 14819 ;;                  1    wreg      unsigned char 
 14820 ;; Registers used:
 14821 ;;		wreg, status,2
 14822 ;; Tracked objects:
 14823 ;;		On entry : 0/0
 14824 ;;		On exit  : 0/0
 14825 ;;		Unchanged: 0/0
 14826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;Total ram usage:        1 bytes
 14832 ;; Hardware stack levels used:    1
 14833 ;; Hardware stack levels required when called:    5
 14834 ;; This function calls:
 14835 ;;		Nothing
 14836 ;; This function is called by:
 14837 ;;		_DimmerLights_Main
 14838 ;;		_setDimmerLights_Main
 14839 ;;		_Flash_Memory_Main
 14840 ;;		_Exception_Main
 14841 ;;		_Load_Main
 14842 ;; This function uses a non-reentrant model
 14843 ;;
 14844                           
 14845                           
 14846                           ;psect for function _getMain_LightsStatus
 14847  1C8C                     _getMain_LightsStatus:	
 14848                           
 14849                           ;Main_B1.c: 376: char status = 0;
 14850                           
 14851                           ;incstack = 0
 14852                           ; Regs used in _getMain_LightsStatus: [wreg+status,2]
 14853  1C8C  0020               	movlb	0	; select bank0
 14854  1C8D  01A0               	clrf	getMain_LightsStatus@status
 14855                           
 14856                           ;Main_B1.c: 383: status = DimmerLights1.Status == 1 ? 1 : 0;
 14857  1C8E  3000               	movlw	0
 14858  1C8F  0022               	movlb	2	; select bank2
 14859  1C90  18D5               	btfsc	(_DimmerLights1^(0+256)+2),1
 14860  1C91  3001               	movlw	1
 14861  1C92  0020               	movlb	0	; select bank0
 14862  1C93  00A0               	movwf	getMain_LightsStatus@status
 14863                           
 14864                           ;Main_B1.c: 422: return status;
 14865  1C94  0820               	movf	getMain_LightsStatus@status,w
 14866  1C95  0008               	return
 14867  1C96                     __end_of_getMain_LightsStatus:	
 14868                           
 14869                           	psect	text91
 14870  0801                     __ptext91:	
 14871 ;; *************** function _getDimmerLights_Allow_Condition *****************
 14872 ;; Defined at:
 14873 ;;		line 594 in file "../src/Dimmer_B1.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;  lights          1    wreg     unsigned char 
 14876 ;; Auto vars:     Size  Location     Type
 14877 ;;  lights          1    0[COMMON] unsigned char 
 14878 ;;  allow           1    2[BANK0 ] unsigned char 
 14879 ;; Return value:  Size  Location     Type
 14880 ;;                  1    wreg      unsigned char 
 14881 ;; Registers used:
 14882 ;;		wreg, status,2, pclath, cstack
 14883 ;; Tracked objects:
 14884 ;;		On entry : 0/0
 14885 ;;		On exit  : 0/0
 14886 ;;		Unchanged: 0/0
 14887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14892 ;;Total ram usage:        3 bytes
 14893 ;; Hardware stack levels used:    1
 14894 ;; Hardware stack levels required when called:    6
 14895 ;; This function calls:
 14896 ;;		_getLoad_OK
 14897 ;; This function is called by:
 14898 ;;		_setDimmerLights_Main
 14899 ;; This function uses a non-reentrant model
 14900 ;;
 14901                           
 14902                           
 14903                           ;psect for function _getDimmerLights_Allow_Condition
 14904  0801                     _getDimmerLights_Allow_Condition:	
 14905                           
 14906                           ;Dimmer_B1.c: 595: char allow = 0;
 14907                           
 14908                           ;incstack = 0
 14909                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 14910  0801  0020               	movlb	0	; select bank0
 14911  0802  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 14912                           
 14913                           ;Dimmer_B1.c: 602: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 14914  0803  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14915  0804  0AA3               	incf	_getDimmerLights_Allow_Condition$2172,f
 14916  0805  319C  2445  3188   	fcall	_getLoad_OK
 14917  0808  3800               	iorlw	0
 14918  0809  1D03               	skipz
 14919  080A  2810               	goto	l8928
 14920  080B  0021               	movlb	1	; select bank1
 14921  080C  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 14922  080D  2810               	goto	l8928
 14923  080E  0020               	movlb	0	; select bank0
 14924  080F  01A3               	clrf	_getDimmerLights_Allow_Condition$2172
 14925  0810                     l8928:	
 14926  0810  0020               	movlb	0	; select bank0
 14927  0811  0823               	movf	_getDimmerLights_Allow_Condition$2172,w
 14928  0812  00A1               	movwf	??_getDimmerLights_Allow_Condition
 14929  0813  0821               	movf	??_getDimmerLights_Allow_Condition,w
 14930  0814  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 14931                           
 14932                           ;Dimmer_B1.c: 627: return allow;
 14933  0815  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 14934  0816  0008               	return
 14935  0817                     __end_of_getDimmerLights_Allow_Condition:	
 14936                           
 14937                           	psect	text92
 14938  1C45                     __ptext92:	
 14939 ;; *************** function _getLoad_OK *****************
 14940 ;; Defined at:
 14941 ;;		line 265 in file "../src/OverLoad_B1.c"
 14942 ;; Parameters:    Size  Location     Type
 14943 ;;		None
 14944 ;; Auto vars:     Size  Location     Type
 14945 ;;  ok              1    0[BANK0 ] unsigned char 
 14946 ;; Return value:  Size  Location     Type
 14947 ;;                  1    wreg      unsigned char 
 14948 ;; Registers used:
 14949 ;;		wreg, status,2
 14950 ;; Tracked objects:
 14951 ;;		On entry : 0/0
 14952 ;;		On exit  : 0/0
 14953 ;;		Unchanged: 0/0
 14954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14958 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14959 ;;Total ram usage:        1 bytes
 14960 ;; Hardware stack levels used:    1
 14961 ;; Hardware stack levels required when called:    5
 14962 ;; This function calls:
 14963 ;;		Nothing
 14964 ;; This function is called by:
 14965 ;;		_DimmerLights_Main
 14966 ;;		_getDimmerLights_Allow_Condition
 14967 ;; This function uses a non-reentrant model
 14968 ;;
 14969                           
 14970                           
 14971                           ;psect for function _getLoad_OK
 14972  1C45                     _getLoad_OK:	
 14973                           
 14974                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 14975                           
 14976                           ;incstack = 0
 14977                           ; Regs used in _getLoad_OK: [wreg+status,2]
 14978  1C45  3000               	movlw	0
 14979  1C46  0022               	movlb	2	; select bank2
 14980  1C47  1BA5               	btfsc	_Load^(0+256),7
 14981  1C48  3001               	movlw	1
 14982  1C49  0020               	movlb	0	; select bank0
 14983  1C4A  00A0               	movwf	getLoad_OK@ok
 14984                           
 14985                           ;OverLoad_B1.c: 267: return ok;
 14986  1C4B  0820               	movf	getLoad_OK@ok,w
 14987  1C4C  0008               	return
 14988  1C4D                     __end_of_getLoad_OK:	
 14989                           
 14990                           	psect	text93
 14991  125F                     __ptext93:	
 14992 ;; *************** function _getMain_All_Error_Status *****************
 14993 ;; Defined at:
 14994 ;;		line 426 in file "../src/Main_B1.c"
 14995 ;; Parameters:    Size  Location     Type
 14996 ;;  command         1    wreg     unsigned char 
 14997 ;; Auto vars:     Size  Location     Type
 14998 ;;  command         1    5[BANK0 ] unsigned char 
 14999 ;;  status          1    6[BANK0 ] unsigned char 
 15000 ;; Return value:  Size  Location     Type
 15001 ;;                  1    wreg      unsigned char 
 15002 ;; Registers used:
 15003 ;;		wreg, status,2, status,0
 15004 ;; Tracked objects:
 15005 ;;		On entry : 0/0
 15006 ;;		On exit  : 0/0
 15007 ;;		Unchanged: 0/0
 15008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;Total ram usage:        7 bytes
 15014 ;; Hardware stack levels used:    1
 15015 ;; Hardware stack levels required when called:    5
 15016 ;; This function calls:
 15017 ;;		Nothing
 15018 ;; This function is called by:
 15019 ;;		_DimmerLights_Main
 15020 ;;		_Exception_Main
 15021 ;;		_Load_Main
 15022 ;;		_setTemp_Main
 15023 ;;		_setRF_Main
 15024 ;;		_getRxData
 15025 ;;		_setSw_Main
 15026 ;; This function uses a non-reentrant model
 15027 ;;
 15028                           
 15029                           
 15030                           ;psect for function _getMain_All_Error_Status
 15031  125F                     _getMain_All_Error_Status:	
 15032                           
 15033                           ;incstack = 0
 15034                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15035                           ;getMain_All_Error_Status@command stored from wreg
 15036  125F  0020               	movlb	0	; select bank0
 15037  1260  00A5               	movwf	getMain_All_Error_Status@command
 15038                           
 15039                           ;Main_B1.c: 427: char status = 0;
 15040  1261  01A6               	clrf	getMain_All_Error_Status@status
 15041                           
 15042                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15043  1262  08A6               	movf	getMain_All_Error_Status@status,f
 15044  1263  1D03               	skipz
 15045  1264  2A79               	goto	l8674
 15046  1265  0825               	movf	getMain_All_Error_Status@command,w
 15047  1266  3A02               	xorlw	2
 15048  1267  1903               	skipnz
 15049  1268  2A79               	goto	l8674
 15050                           
 15051                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15052  1269  0021               	movlb	1	; select bank1
 15053  126A  18D7               	btfsc	_Temp^(0+128),1
 15054  126B  2A70               	goto	l8672
 15055  126C  0020               	movlb	0	; select bank0
 15056  126D  01A1               	clrf	_getMain_All_Error_Status$3422
 15057  126E  01A2               	clrf	_getMain_All_Error_Status$3422+1
 15058  126F  2A75               	goto	l1424
 15059  1270                     l8672:	
 15060  1270  3002               	movlw	2
 15061  1271  0020               	movlb	0	; select bank0
 15062  1272  00A1               	movwf	_getMain_All_Error_Status$3422
 15063  1273  3000               	movlw	0
 15064  1274  00A2               	movwf	_getMain_All_Error_Status$3422+1
 15065  1275                     l1424:	
 15066  1275  0821               	movf	_getMain_All_Error_Status$3422,w
 15067  1276  00A0               	movwf	??_getMain_All_Error_Status
 15068  1277  0820               	movf	??_getMain_All_Error_Status,w
 15069  1278  00A6               	movwf	getMain_All_Error_Status@status
 15070  1279                     l8674:	
 15071                           
 15072                           ;Main_B1.c: 440: }
 15073                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15074  1279  08A6               	movf	getMain_All_Error_Status@status,f
 15075  127A  1D03               	skipz
 15076  127B  2A90               	goto	l1425
 15077  127C  0825               	movf	getMain_All_Error_Status@command,w
 15078  127D  3A03               	xorlw	3
 15079  127E  1903               	skipnz
 15080  127F  2A90               	goto	l1425
 15081                           
 15082                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15083  1280  0022               	movlb	2	; select bank2
 15084  1281  1AA5               	btfsc	_Load^(0+256),5
 15085  1282  2A87               	goto	l8682
 15086  1283  0020               	movlb	0	; select bank0
 15087  1284  01A3               	clrf	_getMain_All_Error_Status$3423
 15088  1285  01A4               	clrf	_getMain_All_Error_Status$3423+1
 15089  1286  2A8C               	goto	l1429
 15090  1287                     l8682:	
 15091  1287  3003               	movlw	3
 15092  1288  0020               	movlb	0	; select bank0
 15093  1289  00A3               	movwf	_getMain_All_Error_Status$3423
 15094  128A  3000               	movlw	0
 15095  128B  00A4               	movwf	_getMain_All_Error_Status$3423+1
 15096  128C                     l1429:	
 15097  128C  0823               	movf	_getMain_All_Error_Status$3423,w
 15098  128D  00A0               	movwf	??_getMain_All_Error_Status
 15099  128E  0820               	movf	??_getMain_All_Error_Status,w
 15100  128F  00A6               	movwf	getMain_All_Error_Status@status
 15101  1290                     l1425:	
 15102                           
 15103                           ;Main_B1.c: 447: }
 15104                           ;Main_B1.c: 463: return status;
 15105  1290  0826               	movf	getMain_All_Error_Status@status,w
 15106  1291  0008               	return
 15107  1292                     __end_of_getMain_All_Error_Status:	
 15108                           
 15109                           	psect	text94
 15110  1C82                     __ptext94:	
 15111 ;; *************** function _DimmerLights_Initialization *****************
 15112 ;; Defined at:
 15113 ;;		line 341 in file "../src/Dimmer_B1.c"
 15114 ;; Parameters:    Size  Location     Type
 15115 ;;		None
 15116 ;; Auto vars:     Size  Location     Type
 15117 ;;		None
 15118 ;; Return value:  Size  Location     Type
 15119 ;;		None               void
 15120 ;; Registers used:
 15121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15122 ;; Tracked objects:
 15123 ;;		On entry : 0/0
 15124 ;;		On exit  : 0/0
 15125 ;;		Unchanged: 0/0
 15126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;Total ram usage:        1 bytes
 15132 ;; Hardware stack levels used:    1
 15133 ;; Hardware stack levels required when called:    7
 15134 ;; This function calls:
 15135 ;;		_setDimmerLights_Initialization
 15136 ;; This function is called by:
 15137 ;;		_main
 15138 ;; This function uses a non-reentrant model
 15139 ;;
 15140                           
 15141                           
 15142                           ;psect for function _DimmerLights_Initialization
 15143  1C82                     _DimmerLights_Initialization:	
 15144                           
 15145                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15146                           
 15147                           ;incstack = 0
 15148                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15149  1C82  3053               	movlw	_DimmerLights1& (0+255)
 15150  1C83  0020               	movlb	0	; select bank0
 15151  1C84  00A4               	movwf	??_DimmerLights_Initialization
 15152  1C85  0824               	movf	??_DimmerLights_Initialization,w
 15153  1C86  0021               	movlb	1	; select bank1
 15154  1C87  00CC               	movwf	_DimmerLights11^(0+128)
 15155                           
 15156                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15157  1C88  3001               	movlw	1
 15158  1C89  3192  222E         	fcall	_setDimmerLights_Initialization
 15159  1C8B  0008               	return
 15160  1C8C                     __end_of_DimmerLights_Initialization:	
 15161                           
 15162                           	psect	text95
 15163  122E                     __ptext95:	
 15164 ;; *************** function _setDimmerLights_Initialization *****************
 15165 ;; Defined at:
 15166 ;;		line 365 in file "../src/Dimmer_B1.c"
 15167 ;; Parameters:    Size  Location     Type
 15168 ;;  lights          1    wreg     unsigned char 
 15169 ;; Auto vars:     Size  Location     Type
 15170 ;;  lights          1    3[BANK0 ] unsigned char 
 15171 ;; Return value:  Size  Location     Type
 15172 ;;		None               void
 15173 ;; Registers used:
 15174 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15175 ;; Tracked objects:
 15176 ;;		On entry : 0/0
 15177 ;;		On exit  : 0/0
 15178 ;;		Unchanged: 0/0
 15179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;Total ram usage:        2 bytes
 15185 ;; Hardware stack levels used:    1
 15186 ;; Hardware stack levels required when called:    6
 15187 ;; This function calls:
 15188 ;;		_DimmerLightsPointSelect
 15189 ;; This function is called by:
 15190 ;;		_DimmerLights_Initialization
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           
 15195                           ;psect for function _setDimmerLights_Initialization
 15196  122E                     _setDimmerLights_Initialization:	
 15197                           
 15198                           ;incstack = 0
 15199                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15200                           ;setDimmerLights_Initialization@lights stored from wreg
 15201  122E  0020               	movlb	0	; select bank0
 15202  122F  00A3               	movwf	setDimmerLights_Initialization@lights
 15203                           
 15204                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15205  1230  0823               	movf	setDimmerLights_Initialization@lights,w
 15206  1231  319C  24AC  3192   	fcall	_DimmerLightsPointSelect
 15207                           
 15208                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15209  1234  3007               	movlw	7
 15210  1235  0020               	movlb	0	; select bank0
 15211  1236  00A2               	movwf	??_setDimmerLights_Initialization
 15212  1237  086F               	movf	_DimmerLights,w
 15213  1238  3E08               	addlw	8
 15214  1239  0086               	movwf	6
 15215  123A  3001               	movlw	1	; select bank2/3
 15216  123B  0087               	movwf	7
 15217  123C  0822               	movf	??_setDimmerLights_Initialization,w
 15218  123D  0081               	movwf	1
 15219                           
 15220                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(70*0.8));
 15221  123E  3038               	movlw	56
 15222  123F  00A2               	movwf	??_setDimmerLights_Initialization
 15223  1240  086F               	movf	_DimmerLights,w
 15224  1241  3E06               	addlw	6
 15225  1242  0086               	movwf	6
 15226  1243  3001               	movlw	1	; select bank2/3
 15227  1244  0087               	movwf	7
 15228  1245  0822               	movf	??_setDimmerLights_Initialization,w
 15229  1246  0081               	movwf	1
 15230                           
 15231                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15232  1247  300C               	movlw	12
 15233  1248  00A2               	movwf	??_setDimmerLights_Initialization
 15234  1249  086F               	movf	_DimmerLights,w
 15235  124A  3E09               	addlw	9
 15236  124B  0086               	movwf	6
 15237  124C  3001               	movlw	1	; select bank2/3
 15238  124D  0087               	movwf	7
 15239  124E  0822               	movf	??_setDimmerLights_Initialization,w
 15240  124F  0081               	movwf	1
 15241                           
 15242                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15243  1250  086F               	movf	_DimmerLights,w
 15244  1251  3E06               	addlw	6
 15245  1252  0086               	movwf	6
 15246  1253  3001               	movlw	1	; select bank2/3
 15247  1254  0087               	movwf	7
 15248  1255  0801               	movf	1,w
 15249  1256  00A2               	movwf	??_setDimmerLights_Initialization
 15250  1257  086F               	movf	_DimmerLights,w
 15251  1258  3E04               	addlw	4
 15252  1259  0086               	movwf	6
 15253  125A  3001               	movlw	1	; select bank2/3
 15254  125B  0087               	movwf	7
 15255  125C  0822               	movf	??_setDimmerLights_Initialization,w
 15256  125D  0081               	movwf	1
 15257  125E  0008               	return
 15258  125F                     __end_of_setDimmerLights_Initialization:	
 15259                           
 15260                           	psect	text96
 15261  1C1A                     __ptext96:	
 15262 ;; *************** function _DelayOff_Main *****************
 15263 ;; Defined at:
 15264 ;;		line 41 in file "../src/DelayOff_B1.c"
 15265 ;; Parameters:    Size  Location     Type
 15266 ;;		None
 15267 ;; Auto vars:     Size  Location     Type
 15268 ;;		None
 15269 ;; Return value:  Size  Location     Type
 15270 ;;		None               void
 15271 ;; Registers used:
 15272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15273 ;; Tracked objects:
 15274 ;;		On entry : 0/0
 15275 ;;		On exit  : 0/0
 15276 ;;		Unchanged: 0/0
 15277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;Total ram usage:        0 bytes
 15283 ;; Hardware stack levels used:    1
 15284 ;; Hardware stack levels required when called:   11
 15285 ;; This function calls:
 15286 ;;		_DlyOff_Main
 15287 ;; This function is called by:
 15288 ;;		_main
 15289 ;; This function uses a non-reentrant model
 15290 ;;
 15291                           
 15292                           
 15293                           ;psect for function _DelayOff_Main
 15294  1C1A                     _DelayOff_Main:	
 15295                           
 15296                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15297                           
 15298                           ;incstack = 0
 15299                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15300  1C1A  3001               	movlw	1
 15301  1C1B  3188  2072         	fcall	_DlyOff_Main
 15302  1C1D  0008               	return
 15303  1C1E                     __end_of_DelayOff_Main:	
 15304                           
 15305                           	psect	text97
 15306  0872                     __ptext97:	
 15307 ;; *************** function _DlyOff_Main *****************
 15308 ;; Defined at:
 15309 ;;		line 61 in file "../src/DelayOff_B1.c"
 15310 ;; Parameters:    Size  Location     Type
 15311 ;;  sw              1    wreg     unsigned char 
 15312 ;; Auto vars:     Size  Location     Type
 15313 ;;  sw              1   78[BANK0 ] unsigned char 
 15314 ;; Return value:  Size  Location     Type
 15315 ;;		None               void
 15316 ;; Registers used:
 15317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15318 ;; Tracked objects:
 15319 ;;		On entry : 0/0
 15320 ;;		On exit  : 0/0
 15321 ;;		Unchanged: 0/0
 15322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15326 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15327 ;;Total ram usage:        3 bytes
 15328 ;; Hardware stack levels used:    1
 15329 ;; Hardware stack levels required when called:   10
 15330 ;; This function calls:
 15331 ;;		_DelayOffPointSelect
 15332 ;;		_setBuz
 15333 ;;		_setDimmerLights_ErrorClose
 15334 ;; This function is called by:
 15335 ;;		_DelayOff_Main
 15336 ;; This function uses a non-reentrant model
 15337 ;;
 15338                           
 15339                           
 15340                           ;psect for function _DlyOff_Main
 15341  0872                     _DlyOff_Main:	
 15342                           
 15343                           ;incstack = 0
 15344                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15345                           ;DlyOff_Main@sw stored from wreg
 15346  0872  0020               	movlb	0	; select bank0
 15347  0873  00EE               	movwf	DlyOff_Main@sw
 15348                           
 15349                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15350  0874  086E               	movf	DlyOff_Main@sw,w
 15351  0875  319C  24A1  3188   	fcall	_DelayOffPointSelect
 15352                           
 15353                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15354  0878  0875               	movf	_DelayOff,w
 15355  0879  0086               	movwf	6
 15356  087A  3001               	movlw	1	; select bank2/3
 15357  087B  0087               	movwf	7
 15358  087C  1C81               	btfss	1,1
 15359  087D  0008               	return
 15360                           
 15361                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15362  087E  0875               	movf	_DelayOff,w
 15363  087F  3E02               	addlw	2
 15364  0880  0086               	movwf	6
 15365  0881  3001               	movlw	1	; select bank2/3
 15366  0882  0087               	movwf	7
 15367  0883  3001               	movlw	1
 15368  0884  0781               	addwf	1,f
 15369  0885  3141               	addfsr 1,1
 15370  0886  1803               	skipnc
 15371  0887  0A81               	incf	1,f
 15372                           
 15373                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15374  0888  0875               	movf	_DelayOff,w
 15375  0889  3E02               	addlw	2
 15376  088A  0086               	movwf	6
 15377  088B  3001               	movlw	1	; select bank2/3
 15378  088C  0087               	movwf	7
 15379  088D  3F40               	moviw [0]fsr1
 15380  088E  0020               	movlb	0	; select bank0
 15381  088F  00EC               	movwf	??_DlyOff_Main
 15382  0890  3F41               	moviw [1]fsr1
 15383  0891  00ED               	movwf	??_DlyOff_Main+1
 15384  0892  3017               	movlw	23
 15385  0893  026D               	subwf	??_DlyOff_Main+1,w
 15386  0894  3070               	movlw	112
 15387  0895  1903               	skipnz
 15388  0896  026C               	subwf	??_DlyOff_Main,w
 15389  0897  1C03               	skipc
 15390  0898  0008               	return
 15391                           
 15392                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15393  0899  0875               	movf	_DelayOff,w
 15394  089A  3E02               	addlw	2
 15395  089B  0086               	movwf	6
 15396  089C  3001               	movlw	1	; select bank2/3
 15397  089D  0087               	movwf	7
 15398  089E  3000               	movlw	0
 15399  089F  3FC0               	movwi [0]fsr1
 15400  08A0  3FC1               	movwi [1]fsr1
 15401                           
 15402                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15403  08A1  3001               	movlw	1
 15404  08A2  00EC               	movwf	??_DlyOff_Main
 15405  08A3  0875               	movf	_DelayOff,w
 15406  08A4  3E04               	addlw	4
 15407  08A5  0086               	movwf	6
 15408  08A6  3001               	movlw	1	; select bank2/3
 15409  08A7  0087               	movwf	7
 15410  08A8  086C               	movf	??_DlyOff_Main,w
 15411  08A9  0781               	addwf	1,f
 15412                           
 15413                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15414  08AA  0875               	movf	_DelayOff,w
 15415  08AB  3E04               	addlw	4
 15416  08AC  0086               	movwf	6
 15417  08AD  3001               	movlw	1	; select bank2/3
 15418  08AE  0087               	movwf	7
 15419  08AF  0A75               	incf	_DelayOff,w
 15420  08B0  0084               	movwf	4
 15421  08B1  3001               	movlw	1	; select bank2/3
 15422  08B2  0085               	movwf	5
 15423  08B3  0800               	movf	0,w
 15424  08B4  0201               	subwf	1,w
 15425  08B5  1C03               	skipc
 15426  08B6  0008               	return
 15427                           
 15428                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15429  08B7  0875               	movf	_DelayOff,w
 15430  08B8  3E04               	addlw	4
 15431  08B9  0086               	movwf	6
 15432  08BA  3001               	movlw	1	; select bank2/3
 15433  08BB  0087               	movwf	7
 15434  08BC  0181               	clrf	1
 15435                           
 15436                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15437  08BD  0875               	movf	_DelayOff,w
 15438  08BE  0086               	movwf	6
 15439  08BF  3001               	movlw	1	; select bank2/3
 15440  08C0  0087               	movwf	7
 15441  08C1  1081               	bcf	1,1
 15442                           
 15443                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15444  08C2  3064               	movlw	100
 15445  08C3  00A9               	movwf	setBuz@time
 15446  08C4  3000               	movlw	0
 15447  08C5  00AA               	movwf	setBuz@time+1
 15448  08C6  3001               	movlw	1
 15449  08C7  3197  274E  3188   	fcall	_setBuz
 15450                           
 15451                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15452  08CA  0020               	movlb	0	; select bank0
 15453  08CB  086E               	movf	DlyOff_Main@sw,w
 15454  08CC  3188  20CF         	fcall	_setDimmerLights_ErrorClose
 15455  08CE  0008               	return
 15456  08CF                     __end_of_DlyOff_Main:	
 15457                           
 15458                           	psect	text98
 15459  08CF                     __ptext98:	
 15460 ;; *************** function _setDimmerLights_ErrorClose *****************
 15461 ;; Defined at:
 15462 ;;		line 854 in file "../src/Dimmer_B1.c"
 15463 ;; Parameters:    Size  Location     Type
 15464 ;;  lights          1    wreg     unsigned char 
 15465 ;; Auto vars:     Size  Location     Type
 15466 ;;  lights          1    1[BANK1 ] unsigned char 
 15467 ;;  i               2    2[BANK1 ] int 
 15468 ;;  count           1    0[BANK1 ] unsigned char 
 15469 ;; Return value:  Size  Location     Type
 15470 ;;		None               void
 15471 ;; Registers used:
 15472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15473 ;; Tracked objects:
 15474 ;;		On entry : 0/0
 15475 ;;		On exit  : 0/0
 15476 ;;		Unchanged: 0/0
 15477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15479 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15480 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15481 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15482 ;;Total ram usage:        5 bytes
 15483 ;; Hardware stack levels used:    1
 15484 ;; Hardware stack levels required when called:    9
 15485 ;; This function calls:
 15486 ;;		_DimmerLightsPointSelect
 15487 ;;		_getDimmerLights_Status
 15488 ;;		_setDimmerLights_SwOff
 15489 ;; This function is called by:
 15490 ;;		_DlyOff_Main
 15491 ;;		_setControl_Lights_Table
 15492 ;; This function uses a non-reentrant model
 15493 ;;
 15494                           
 15495                           
 15496                           ;psect for function _setDimmerLights_ErrorClose
 15497  08CF                     _setDimmerLights_ErrorClose:	
 15498                           
 15499                           ;incstack = 0
 15500                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15501                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15502  08CF  0021               	movlb	1	; select bank1
 15503  08D0  00EA               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15504                           
 15505                           ;Dimmer_B1.c: 855: if (lights == 255) {
 15506  08D1  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15507  08D2  3AFF               	xorlw	255
 15508  08D3  1D03               	skipz
 15509  08D4  290E               	goto	l8572
 15510                           
 15511                           ;Dimmer_B1.c: 857: char count = 1;
 15512  08D5  01E9               	clrf	setDimmerLights_ErrorClose@count^(0+128)
 15513  08D6  0AE9               	incf	setDimmerLights_ErrorClose@count^(0+128),f
 15514                           
 15515                           ;Dimmer_B1.c: 865: for (int i = 0; i < count; i++) {
 15516  08D7  01EB               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15517  08D8  01EC               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15518  08D9                     l8570:	
 15519  08D9  086C               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15520  08DA  3A80               	xorlw	128
 15521  08DB  0020               	movlb	0	; select bank0
 15522  08DC  00EB               	movwf	??_setDimmerLights_ErrorClose
 15523  08DD  3080               	movlw	128
 15524  08DE  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15525  08DF  1D03               	skipz
 15526  08E0  28E4               	goto	u9155
 15527  08E1  0021               	movlb	1	; select bank1
 15528  08E2  0869               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15529  08E3  026B               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15530  08E4                     u9155:	
 15531  08E4  1803               	btfsc	3,0
 15532  08E5  0008               	return
 15533                           
 15534                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(i + 1);
 15535  08E6  0021               	movlb	1	; select bank1
 15536  08E7  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15537  08E8  3E01               	addlw	1
 15538  08E9  319C  24AC  3188   	fcall	_DimmerLightsPointSelect
 15539                           
 15540                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(i + 1) == 1) {
 15541  08EC  0021               	movlb	1	; select bank1
 15542  08ED  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15543  08EE  3E01               	addlw	1
 15544  08EF  319D  25A0  3188   	fcall	_getDimmerLights_Status
 15545  08F2  3A01               	xorlw	1
 15546  08F3  1D03               	skipz
 15547  08F4  2908               	goto	l8568
 15548                           
 15549                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 15550  08F5  0020               	movlb	0	; select bank0
 15551  08F6  086F               	movf	_DimmerLights,w
 15552  08F7  3E0B               	addlw	11
 15553  08F8  0086               	movwf	6
 15554  08F9  3001               	movlw	1	; select bank2/3
 15555  08FA  0087               	movwf	7
 15556  08FB  1481               	bsf	1,1
 15557                           
 15558                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 15559  08FC  086F               	movf	_DimmerLights,w
 15560  08FD  3E02               	addlw	2
 15561  08FE  0086               	movwf	6
 15562  08FF  3001               	movlw	1	; select bank2/3
 15563  0900  0087               	movwf	7
 15564  0901  1081               	bcf	1,1
 15565                           
 15566                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(i + 1);
 15567  0902  0021               	movlb	1	; select bank1
 15568  0903  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15569  0904  3E01               	addlw	1
 15570  0905  3195  255F  3188   	fcall	_setDimmerLights_SwOff
 15571  0908                     l8568:	
 15572  0908  3001               	movlw	1
 15573  0909  0021               	movlb	1	; select bank1
 15574  090A  07EB               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15575  090B  3000               	movlw	0
 15576  090C  3DEC               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 15577  090D  28D9               	goto	l8570
 15578  090E                     l8572:	
 15579                           ;Dimmer_B1.c: 871: }
 15580                           ;Dimmer_B1.c: 872: }
 15581                           ;Dimmer_B1.c: 873: } else {
 15582                           
 15583                           
 15584                           ;Dimmer_B1.c: 874: DimmerLightsPointSelect(lights);
 15585  090E  0021               	movlb	1	; select bank1
 15586  090F  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15587  0910  319C  24AC  3188   	fcall	_DimmerLightsPointSelect
 15588                           
 15589                           ;Dimmer_B1.c: 875: if (getDimmerLights_Status(lights) == 1) {
 15590  0913  0021               	movlb	1	; select bank1
 15591  0914  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15592  0915  319D  25A0  3188   	fcall	_getDimmerLights_Status
 15593  0918  3A01               	xorlw	1
 15594  0919  1D03               	skipz
 15595  091A  0008               	return
 15596                           
 15597                           ;Dimmer_B1.c: 876: DimmerLights->SwFlag = 1;
 15598  091B  0020               	movlb	0	; select bank0
 15599  091C  086F               	movf	_DimmerLights,w
 15600  091D  3E0B               	addlw	11
 15601  091E  0086               	movwf	6
 15602  091F  3001               	movlw	1	; select bank2/3
 15603  0920  0087               	movwf	7
 15604  0921  1481               	bsf	1,1
 15605                           
 15606                           ;Dimmer_B1.c: 877: DimmerLights->Status = 0;
 15607  0922  086F               	movf	_DimmerLights,w
 15608  0923  3E02               	addlw	2
 15609  0924  0086               	movwf	6
 15610  0925  3001               	movlw	1	; select bank2/3
 15611  0926  0087               	movwf	7
 15612  0927  1081               	bcf	1,1
 15613                           
 15614                           ;Dimmer_B1.c: 878: setDimmerLights_SwOff(lights);
 15615  0928  0021               	movlb	1	; select bank1
 15616  0929  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15617  092A  3195  255F         	fcall	_setDimmerLights_SwOff
 15618  092C  0008               	return
 15619  092D                     __end_of_setDimmerLights_ErrorClose:	
 15620                           
 15621                           	psect	text99
 15622  155F                     __ptext99:	
 15623 ;; *************** function _setDimmerLights_SwOff *****************
 15624 ;; Defined at:
 15625 ;;		line 450 in file "../src/Dimmer_B1.c"
 15626 ;; Parameters:    Size  Location     Type
 15627 ;;  sw              1    wreg     unsigned char 
 15628 ;; Auto vars:     Size  Location     Type
 15629 ;;  sw              1   74[BANK0 ] unsigned char 
 15630 ;; Return value:  Size  Location     Type
 15631 ;;		None               void
 15632 ;; Registers used:
 15633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15634 ;; Tracked objects:
 15635 ;;		On entry : 0/0
 15636 ;;		On exit  : 0/0
 15637 ;;		Unchanged: 0/0
 15638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15642 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15643 ;;Total ram usage:        1 bytes
 15644 ;; Hardware stack levels used:    1
 15645 ;; Hardware stack levels required when called:    8
 15646 ;; This function calls:
 15647 ;;		_DimmerLightsPointSelect
 15648 ;;		_getDelayOff_GO
 15649 ;;		_setDelayOff_GO
 15650 ;; This function is called by:
 15651 ;;		_setDimmerLights_ErrorClose
 15652 ;;		_Exception_Main
 15653 ;;		_setRFSW_Control
 15654 ;;		_setSw_Main
 15655 ;; This function uses a non-reentrant model
 15656 ;;
 15657                           
 15658                           
 15659                           ;psect for function _setDimmerLights_SwOff
 15660  155F                     _setDimmerLights_SwOff:	
 15661                           
 15662                           ;incstack = 0
 15663                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15664                           ;setDimmerLights_SwOff@sw stored from wreg
 15665  155F  0020               	movlb	0	; select bank0
 15666  1560  00EA               	movwf	setDimmerLights_SwOff@sw
 15667                           
 15668                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 15669  1561  086A               	movf	setDimmerLights_SwOff@sw,w
 15670  1562  319C  24AC  3195   	fcall	_DimmerLightsPointSelect
 15671                           
 15672                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 15673  1565  0020               	movlb	0	; select bank0
 15674  1566  086F               	movf	_DimmerLights,w
 15675  1567  3E0B               	addlw	11
 15676  1568  0086               	movwf	6
 15677  1569  3001               	movlw	1	; select bank2/3
 15678  156A  0087               	movwf	7
 15679  156B  1C81               	btfss	1,1
 15680  156C  0008               	return
 15681                           
 15682                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 15683  156D  086F               	movf	_DimmerLights,w
 15684  156E  3E0B               	addlw	11
 15685  156F  0086               	movwf	6
 15686  1570  3001               	movlw	1	; select bank2/3
 15687  1571  0087               	movwf	7
 15688  1572  1081               	bcf	1,1
 15689                           
 15690                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 15691  1573  086F               	movf	_DimmerLights,w
 15692  1574  3E02               	addlw	2
 15693  1575  0086               	movwf	6
 15694  1576  3001               	movlw	1	; select bank2/3
 15695  1577  0087               	movwf	7
 15696  1578  1C81               	btfss	1,1
 15697  1579  2D94               	goto	l8418
 15698                           
 15699                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 15700  157A  086F               	movf	_DimmerLights,w
 15701  157B  3E0B               	addlw	11
 15702  157C  0086               	movwf	6
 15703  157D  3001               	movlw	1	; select bank2/3
 15704  157E  0087               	movwf	7
 15705  157F  1D01               	btfss	1,2
 15706  1580  0008               	return
 15707                           
 15708                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 15709  1581  086F               	movf	_DimmerLights,w
 15710  1582  3E0B               	addlw	11
 15711  1583  0086               	movwf	6
 15712  1584  3001               	movlw	1	; select bank2/3
 15713  1585  0087               	movwf	7
 15714  1586  1101               	bcf	1,2
 15715                           
 15716                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 15717  1587  086F               	movf	_DimmerLights,w
 15718  1588  3E0A               	addlw	10
 15719  1589  0086               	movwf	6
 15720  158A  3001               	movlw	1	; select bank2/3
 15721  158B  0087               	movwf	7
 15722  158C  1581               	bsf	1,3
 15723                           
 15724                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 15725  158D  086F               	movf	_DimmerLights,w
 15726  158E  3E0A               	addlw	10
 15727  158F  0086               	movwf	6
 15728  1590  3001               	movlw	1	; select bank2/3
 15729  1591  0087               	movwf	7
 15730  1592  1101               	bcf	1,2
 15731                           
 15732                           ;Dimmer_B1.c: 462: }
 15733                           ;Dimmer_B1.c: 463: } else {
 15734  1593  0008               	return
 15735  1594                     l8418:	
 15736                           
 15737                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 15738  1594  086F               	movf	_DimmerLights,w
 15739  1595  3E0A               	addlw	10
 15740  1596  0086               	movwf	6
 15741  1597  3001               	movlw	1	; select bank2/3
 15742  1598  0087               	movwf	7
 15743  1599  1481               	bsf	1,1
 15744                           
 15745                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 15746  159A  086F               	movf	_DimmerLights,w
 15747  159B  3E0A               	addlw	10
 15748  159C  0086               	movwf	6
 15749  159D  3001               	movlw	1	; select bank2/3
 15750  159E  0087               	movwf	7
 15751  159F  1001               	bcf	1,0
 15752                           
 15753                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 15754  15A0  086A               	movf	setDimmerLights_SwOff@sw,w
 15755  15A1  319D  2580  3195   	fcall	_getDelayOff_GO
 15756  15A4  3A01               	xorlw	1
 15757  15A5  1D03               	skipz
 15758  15A6  0008               	return
 15759                           
 15760                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 15761  15A7  0020               	movlb	0	; select bank0
 15762  15A8  01E6               	clrf	setDelayOff_GO@command
 15763  15A9  01E7               	clrf	setDelayOff_GO@value
 15764  15AA  086A               	movf	setDimmerLights_SwOff@sw,w
 15765  15AB  3196  264F         	fcall	_setDelayOff_GO
 15766  15AD  0008               	return
 15767  15AE                     __end_of_setDimmerLights_SwOff:	
 15768                           
 15769                           	psect	text100
 15770  164F                     __ptext100:	
 15771 ;; *************** function _setDelayOff_GO *****************
 15772 ;; Defined at:
 15773 ;;		line 83 in file "../src/DelayOff_B1.c"
 15774 ;; Parameters:    Size  Location     Type
 15775 ;;  sw              1    wreg     unsigned char 
 15776 ;;  command         1   70[BANK0 ] unsigned char 
 15777 ;;  value           1   71[BANK0 ] unsigned char 
 15778 ;; Auto vars:     Size  Location     Type
 15779 ;;  sw              1   73[BANK0 ] unsigned char 
 15780 ;; Return value:  Size  Location     Type
 15781 ;;		None               void
 15782 ;; Registers used:
 15783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15784 ;; Tracked objects:
 15785 ;;		On entry : 0/0
 15786 ;;		On exit  : 0/0
 15787 ;;		Unchanged: 0/0
 15788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15789 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15792 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15793 ;;Total ram usage:        4 bytes
 15794 ;; Hardware stack levels used:    1
 15795 ;; Hardware stack levels required when called:    7
 15796 ;; This function calls:
 15797 ;;		_DelayOffPointSelect
 15798 ;;		_DelayTimejudge
 15799 ;;		_setProductData
 15800 ;; This function is called by:
 15801 ;;		_setDimmerLights_SwOff
 15802 ;;		_setRFSW_Control
 15803 ;; This function uses a non-reentrant model
 15804 ;;
 15805                           
 15806                           
 15807                           ;psect for function _setDelayOff_GO
 15808  164F                     _setDelayOff_GO:	
 15809                           
 15810                           ;incstack = 0
 15811                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15812                           ;setDelayOff_GO@sw stored from wreg
 15813  164F  0020               	movlb	0	; select bank0
 15814  1650  00E9               	movwf	setDelayOff_GO@sw
 15815                           
 15816                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 15817  1651  0869               	movf	setDelayOff_GO@sw,w
 15818  1652  319C  24A1  3196   	fcall	_DelayOffPointSelect
 15819                           
 15820                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 15821  1655  0020               	movlb	0	; select bank0
 15822  1656  0866               	movf	setDelayOff_GO@command,w
 15823  1657  3A01               	xorlw	1
 15824  1658  3000               	movlw	0
 15825  1659  1903               	skipnz
 15826  165A  3001               	movlw	1
 15827  165B  00E8               	movwf	??_setDelayOff_GO
 15828  165C  0875               	movf	_DelayOff,w
 15829  165D  0086               	movwf	6
 15830  165E  3001               	movlw	1	; select bank2/3
 15831  165F  0087               	movwf	7
 15832  1660  0DE8               	rlf	??_setDelayOff_GO,f
 15833  1661  0801               	movf	1,w
 15834  1662  0668               	xorwf	??_setDelayOff_GO,w
 15835  1663  39FD               	andlw	-3
 15836  1664  0668               	xorwf	??_setDelayOff_GO,w
 15837  1665  0081               	movwf	1
 15838                           
 15839                           ;DelayOff_B1.c: 89: if (command == 1) {
 15840  1666  0866               	movf	setDelayOff_GO@command,w
 15841  1667  3A01               	xorlw	1
 15842  1668  1D03               	skipz
 15843  1669  2E8D               	goto	l8372
 15844                           
 15845                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 15846  166A  0867               	movf	setDelayOff_GO@value,w
 15847  166B  3191  214D  3196   	fcall	_DelayTimejudge
 15848  166E  0020               	movlb	0	; select bank0
 15849  166F  00E8               	movwf	??_setDelayOff_GO
 15850  1670  0A75               	incf	_DelayOff,w
 15851  1671  0086               	movwf	6
 15852  1672  3001               	movlw	1	; select bank2/3
 15853  1673  0087               	movwf	7
 15854  1674  0868               	movf	??_setDelayOff_GO,w
 15855  1675  0081               	movwf	1
 15856                           
 15857                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 15858  1676  300F               	movlw	15
 15859  1677  0567               	andwf	setDelayOff_GO@value,w
 15860  1678  00E8               	movwf	??_setDelayOff_GO
 15861  1679  0868               	movf	??_setDelayOff_GO,w
 15862  167A  3A05               	xorlw	5
 15863  167B  1903               	skipnz
 15864  167C  2E81               	goto	l8366
 15865  167D  0867               	movf	setDelayOff_GO@value,w
 15866  167E  390F               	andlw	15
 15867  167F  1D03               	btfss	3,2
 15868  1680  2E87               	goto	l8370
 15869  1681                     l8366:	
 15870  1681  3026               	movlw	38
 15871  1682  0267               	subwf	setDelayOff_GO@value,w
 15872  1683  1803               	skipnc
 15873  1684  2E87               	goto	l8370
 15874                           
 15875                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 15876  1685  0867               	movf	setDelayOff_GO@value,w
 15877  1686  2E89               	goto	L6
 15878  1687                     l8370:	
 15879                           ;DelayOff_B1.c: 93: } else {
 15880                           
 15881                           
 15882                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 15883  1687  3005               	movlw	5
 15884  1688  0020               	movlb	0	; select bank0
 15885  1689                     L6:	
 15886  1689  00E8               	movwf	??_setDelayOff_GO
 15887  168A  0868               	movf	??_setDelayOff_GO,w
 15888  168B  00E2               	movwf	setProductData@value
 15889  168C  2E8F               	goto	L5
 15890  168D                     l8372:	
 15891                           ;DelayOff_B1.c: 95: }
 15892                           ;DelayOff_B1.c: 96: } else {
 15893                           
 15894                           
 15895                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 15896  168D  0020               	movlb	0	; select bank0
 15897  168E  01E2               	clrf	setProductData@value
 15898  168F                     L5:	
 15899  168F  0869               	movf	setDelayOff_GO@sw,w
 15900  1690  3E1A               	addlw	26
 15901  1691  319D  2537         	fcall	_setProductData
 15902                           
 15903                           ;DelayOff_B1.c: 98: }
 15904                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 15905  1693  0875               	movf	_DelayOff,w
 15906  1694  3E02               	addlw	2
 15907  1695  0086               	movwf	6
 15908  1696  3001               	movlw	1	; select bank2/3
 15909  1697  0087               	movwf	7
 15910  1698  3000               	movlw	0
 15911  1699  3FC0               	movwi [0]fsr1
 15912  169A  3FC1               	movwi [1]fsr1
 15913                           
 15914                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 15915  169B  0875               	movf	_DelayOff,w
 15916  169C  3E04               	addlw	4
 15917  169D  0086               	movwf	6
 15918  169E  3001               	movlw	1	; select bank2/3
 15919  169F  0087               	movwf	7
 15920  16A0  0181               	clrf	1
 15921  16A1  0008               	return
 15922  16A2                     __end_of_setDelayOff_GO:	
 15923                           
 15924                           	psect	text101
 15925  1D37                     __ptext101:	
 15926 ;; *************** function _setProductData *****************
 15927 ;; Defined at:
 15928 ;;		line 605 in file "../src/Main_B1.c"
 15929 ;; Parameters:    Size  Location     Type
 15930 ;;  address         1    wreg     unsigned char 
 15931 ;;  value           1   66[BANK0 ] unsigned char 
 15932 ;; Auto vars:     Size  Location     Type
 15933 ;;  address         1   69[BANK0 ] unsigned char 
 15934 ;; Return value:  Size  Location     Type
 15935 ;;		None               void
 15936 ;; Registers used:
 15937 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15938 ;; Tracked objects:
 15939 ;;		On entry : 0/0
 15940 ;;		On exit  : 0/0
 15941 ;;		Unchanged: 0/0
 15942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15943 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15945 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15946 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15947 ;;Total ram usage:        4 bytes
 15948 ;; Hardware stack levels used:    1
 15949 ;; Hardware stack levels required when called:    5
 15950 ;; This function calls:
 15951 ;;		Nothing
 15952 ;; This function is called by:
 15953 ;;		_setDelayOff_GO
 15954 ;;		_setDimmerLights
 15955 ;;		_setDimmerLights_Adj
 15956 ;;		_setTemp_Main
 15957 ;;		_setLog_Code
 15958 ;;		_setControl_Lights_Table
 15959 ;;		_setRFSW_AdjControl
 15960 ;;		_setRF_DimmerValue
 15961 ;;		_setRF_DimmerLights
 15962 ;; This function uses a non-reentrant model
 15963 ;;
 15964                           
 15965                           
 15966                           ;psect for function _setProductData
 15967  1D37                     _setProductData:	
 15968                           
 15969                           ;incstack = 0
 15970                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15971                           ;setProductData@address stored from wreg
 15972  1D37  0020               	movlb	0	; select bank0
 15973  1D38  00E5               	movwf	setProductData@address
 15974                           
 15975                           ;Main_B1.c: 606: product->Data[address] = value;
 15976  1D39  0862               	movf	setProductData@value,w
 15977  1D3A  00E3               	movwf	??_setProductData
 15978  1D3B  0865               	movf	setProductData@address,w
 15979  1D3C  0779               	addwf	_product,w
 15980  1D3D  00E4               	movwf	??_setProductData+1
 15981  1D3E  0864               	movf	??_setProductData+1,w
 15982  1D3F  0086               	movwf	6
 15983  1D40  3002               	movlw	2	; select bank4/5
 15984  1D41  0087               	movwf	7
 15985  1D42  0863               	movf	??_setProductData,w
 15986  1D43  0081               	movwf	1
 15987  1D44  0008               	return
 15988  1D45                     __end_of_setProductData:	
 15989                           
 15990                           	psect	text102
 15991  114D                     __ptext102:	
 15992 ;; *************** function _DelayTimejudge *****************
 15993 ;; Defined at:
 15994 ;;		line 112 in file "../src/DelayOff_B1.c"
 15995 ;; Parameters:    Size  Location     Type
 15996 ;;  value           1    wreg     unsigned char 
 15997 ;; Auto vars:     Size  Location     Type
 15998 ;;  value           1    9[BANK0 ] unsigned char 
 15999 ;;  k               1    8[BANK0 ] unsigned char 
 16000 ;;  j               1    7[BANK0 ] unsigned char 
 16001 ;;  i               1    6[BANK0 ] unsigned char 
 16002 ;; Return value:  Size  Location     Type
 16003 ;;                  1    wreg      unsigned char 
 16004 ;; Registers used:
 16005 ;;		wreg, status,2, status,0, pclath, cstack
 16006 ;; Tracked objects:
 16007 ;;		On entry : 0/0
 16008 ;;		On exit  : 0/0
 16009 ;;		Unchanged: 0/0
 16010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16012 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;Total ram usage:        6 bytes
 16016 ;; Hardware stack levels used:    1
 16017 ;; Hardware stack levels required when called:    6
 16018 ;; This function calls:
 16019 ;;		___bmul
 16020 ;; This function is called by:
 16021 ;;		_setDelayOff_GO
 16022 ;; This function uses a non-reentrant model
 16023 ;;
 16024                           
 16025                           
 16026                           ;psect for function _DelayTimejudge
 16027  114D                     _DelayTimejudge:	
 16028                           
 16029                           ;incstack = 0
 16030                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16031                           ;DelayTimejudge@value stored from wreg
 16032  114D  0020               	movlb	0	; select bank0
 16033  114E  00A9               	movwf	DelayTimejudge@value
 16034                           
 16035                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16036  114F  3005               	movlw	5
 16037  1150  00A4               	movwf	??_DelayTimejudge
 16038  1151  0824               	movf	??_DelayTimejudge,w
 16039  1152  00A6               	movwf	DelayTimejudge@i
 16040  1153  01A7               	clrf	DelayTimejudge@j
 16041  1154  01A8               	clrf	DelayTimejudge@k
 16042                           
 16043                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16044  1155  3031               	movlw	49
 16045  1156  0229               	subwf	DelayTimejudge@value,w
 16046  1157  1803               	skipnc
 16047  1158  2975               	goto	l8264
 16048                           
 16049                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16050  1159  0829               	movf	DelayTimejudge@value,w
 16051  115A  390F               	andlw	15
 16052  115B  00A4               	movwf	??_DelayTimejudge
 16053  115C  0824               	movf	??_DelayTimejudge,w
 16054  115D  00A7               	movwf	DelayTimejudge@j
 16055                           
 16056                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16057  115E  0829               	movf	DelayTimejudge@value,w
 16058  115F  00A4               	movwf	??_DelayTimejudge
 16059  1160  3004               	movlw	4
 16060  1161                     u8755:	
 16061  1161  36A4               	lsrf	??_DelayTimejudge,f
 16062  1162  0B89               	decfsz	9,f
 16063  1163  2961               	goto	u8755
 16064  1164  0824               	movf	??_DelayTimejudge,w
 16065  1165  390F               	andlw	15
 16066  1166  00A5               	movwf	??_DelayTimejudge+1
 16067  1167  0825               	movf	??_DelayTimejudge+1,w
 16068  1168  00A8               	movwf	DelayTimejudge@k
 16069                           
 16070                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16071  1169  300A               	movlw	10
 16072  116A  00A4               	movwf	??_DelayTimejudge
 16073  116B  0824               	movf	??_DelayTimejudge,w
 16074  116C  00A0               	movwf	___bmul@multiplicand
 16075  116D  0828               	movf	DelayTimejudge@k,w
 16076  116E  319D  25E4         	fcall	___bmul
 16077  1170  0020               	movlb	0	; select bank0
 16078  1171  0727               	addwf	DelayTimejudge@j,w
 16079  1172  00A5               	movwf	??_DelayTimejudge+1
 16080  1173  0825               	movf	??_DelayTimejudge+1,w
 16081  1174  00A6               	movwf	DelayTimejudge@i
 16082  1175                     l8264:	
 16083                           
 16084                           ;DelayOff_B1.c: 118: }
 16085                           ;DelayOff_B1.c: 139: return i;
 16086  1175  0826               	movf	DelayTimejudge@i,w
 16087  1176  0008               	return
 16088  1177                     __end_of_DelayTimejudge:	
 16089                           
 16090                           	psect	text103
 16091  1DE4                     __ptext103:	
 16092 ;; *************** function ___bmul *****************
 16093 ;; Defined at:
 16094 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16095 ;; Parameters:    Size  Location     Type
 16096 ;;  multiplier      1    wreg     unsigned char 
 16097 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16098 ;; Auto vars:     Size  Location     Type
 16099 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16100 ;;  product         1    2[BANK0 ] unsigned char 
 16101 ;; Return value:  Size  Location     Type
 16102 ;;                  1    wreg      unsigned char 
 16103 ;; Registers used:
 16104 ;;		wreg, status,2, status,0
 16105 ;; Tracked objects:
 16106 ;;		On entry : 0/0
 16107 ;;		On exit  : 0/0
 16108 ;;		Unchanged: 0/0
 16109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16110 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16113 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16114 ;;Total ram usage:        4 bytes
 16115 ;; Hardware stack levels used:    1
 16116 ;; Hardware stack levels required when called:    5
 16117 ;; This function calls:
 16118 ;;		Nothing
 16119 ;; This function is called by:
 16120 ;;		_DelayTimejudge
 16121 ;; This function uses a non-reentrant model
 16122 ;;
 16123                           
 16124                           
 16125                           ;psect for function ___bmul
 16126  1DE4                     ___bmul:	
 16127                           
 16128                           ;incstack = 0
 16129                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16130                           ;___bmul@multiplier stored from wreg
 16131  1DE4  0020               	movlb	0	; select bank0
 16132  1DE5  00A3               	movwf	___bmul@multiplier
 16133  1DE6  01A2               	clrf	___bmul@product
 16134  1DE7                     l8006:	
 16135  1DE7  1C23               	btfss	___bmul@multiplier,0
 16136  1DE8  2DED               	goto	l8010
 16137  1DE9  0820               	movf	___bmul@multiplicand,w
 16138  1DEA  00A1               	movwf	??___bmul
 16139  1DEB  0821               	movf	??___bmul,w
 16140  1DEC  07A2               	addwf	___bmul@product,f
 16141  1DED                     l8010:	
 16142  1DED  1003               	clrc
 16143  1DEE  0DA0               	rlf	___bmul@multiplicand,f
 16144  1DEF  1003               	clrc
 16145  1DF0  0CA3               	rrf	___bmul@multiplier,f
 16146  1DF1  08A3               	movf	___bmul@multiplier,f
 16147  1DF2  1D03               	skipz
 16148  1DF3  2DE7               	goto	l8006
 16149  1DF4  0822               	movf	___bmul@product,w
 16150  1DF5  0008               	return
 16151  1DF6                     __end_of___bmul:	
 16152                           
 16153                           	psect	text104
 16154  1D80                     __ptext104:	
 16155 ;; *************** function _getDelayOff_GO *****************
 16156 ;; Defined at:
 16157 ;;		line 105 in file "../src/DelayOff_B1.c"
 16158 ;; Parameters:    Size  Location     Type
 16159 ;;  sw              1    wreg     unsigned char 
 16160 ;; Auto vars:     Size  Location     Type
 16161 ;;  sw              1    2[BANK0 ] unsigned char 
 16162 ;;  go              1    3[BANK0 ] unsigned char 
 16163 ;; Return value:  Size  Location     Type
 16164 ;;                  1    wreg      unsigned char 
 16165 ;; Registers used:
 16166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16167 ;; Tracked objects:
 16168 ;;		On entry : 0/0
 16169 ;;		On exit  : 0/0
 16170 ;;		Unchanged: 0/0
 16171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16173 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16176 ;;Total ram usage:        2 bytes
 16177 ;; Hardware stack levels used:    1
 16178 ;; Hardware stack levels required when called:    6
 16179 ;; This function calls:
 16180 ;;		_DelayOffPointSelect
 16181 ;; This function is called by:
 16182 ;;		_setDimmerLights_SwOff
 16183 ;;		_setRFSW_Control
 16184 ;; This function uses a non-reentrant model
 16185 ;;
 16186                           
 16187                           
 16188                           ;psect for function _getDelayOff_GO
 16189  1D80                     _getDelayOff_GO:	
 16190                           
 16191                           ;incstack = 0
 16192                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16193                           ;getDelayOff_GO@sw stored from wreg
 16194  1D80  0020               	movlb	0	; select bank0
 16195  1D81  00A2               	movwf	getDelayOff_GO@sw
 16196                           
 16197                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16198  1D82  0822               	movf	getDelayOff_GO@sw,w
 16199  1D83  319C  24A1         	fcall	_DelayOffPointSelect
 16200                           
 16201                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16202  1D85  0875               	movf	_DelayOff,w
 16203  1D86  0086               	movwf	6
 16204  1D87  3001               	movlw	1	; select bank2/3
 16205  1D88  0087               	movwf	7
 16206  1D89  3000               	movlw	0
 16207  1D8A  1881               	btfsc	1,1
 16208  1D8B  3001               	movlw	1
 16209  1D8C  0020               	movlb	0	; select bank0
 16210  1D8D  00A3               	movwf	getDelayOff_GO@go
 16211                           
 16212                           ;DelayOff_B1.c: 108: return go;
 16213  1D8E  0823               	movf	getDelayOff_GO@go,w
 16214  1D8F  0008               	return
 16215  1D90                     __end_of_getDelayOff_GO:	
 16216                           
 16217                           	psect	text105
 16218  1DA0                     __ptext105:	
 16219 ;; *************** function _getDimmerLights_Status *****************
 16220 ;; Defined at:
 16221 ;;		line 765 in file "../src/Dimmer_B1.c"
 16222 ;; Parameters:    Size  Location     Type
 16223 ;;  lights          1    wreg     unsigned char 
 16224 ;; Auto vars:     Size  Location     Type
 16225 ;;  lights          1    2[BANK0 ] unsigned char 
 16226 ;;  status          1    3[BANK0 ] unsigned char 
 16227 ;; Return value:  Size  Location     Type
 16228 ;;                  1    wreg      unsigned char 
 16229 ;; Registers used:
 16230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16231 ;; Tracked objects:
 16232 ;;		On entry : 0/0
 16233 ;;		On exit  : 0/0
 16234 ;;		Unchanged: 0/0
 16235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16237 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16239 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16240 ;;Total ram usage:        2 bytes
 16241 ;; Hardware stack levels used:    1
 16242 ;; Hardware stack levels required when called:    6
 16243 ;; This function calls:
 16244 ;;		_DimmerLightsPointSelect
 16245 ;; This function is called by:
 16246 ;;		_setDimmerLights_ErrorClose
 16247 ;;		_Exception_Main
 16248 ;;		_setRFSW_Control
 16249 ;;		_setRFSW_AdjControl
 16250 ;; This function uses a non-reentrant model
 16251 ;;
 16252                           
 16253                           
 16254                           ;psect for function _getDimmerLights_Status
 16255  1DA0                     _getDimmerLights_Status:	
 16256                           
 16257                           ;incstack = 0
 16258                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16259                           ;getDimmerLights_Status@lights stored from wreg
 16260  1DA0  0020               	movlb	0	; select bank0
 16261  1DA1  00A2               	movwf	getDimmerLights_Status@lights
 16262                           
 16263                           ;Dimmer_B1.c: 766: DimmerLightsPointSelect(lights);
 16264  1DA2  0822               	movf	getDimmerLights_Status@lights,w
 16265  1DA3  319C  24AC         	fcall	_DimmerLightsPointSelect
 16266                           
 16267                           ;Dimmer_B1.c: 767: char status = DimmerLights->Status == 1 ? 1 : 0;
 16268  1DA5  0020               	movlb	0	; select bank0
 16269  1DA6  086F               	movf	_DimmerLights,w
 16270  1DA7  3E02               	addlw	2
 16271  1DA8  0086               	movwf	6
 16272  1DA9  3001               	movlw	1	; select bank2/3
 16273  1DAA  0087               	movwf	7
 16274  1DAB  3000               	movlw	0
 16275  1DAC  1881               	btfsc	1,1
 16276  1DAD  3001               	movlw	1
 16277  1DAE  00A3               	movwf	getDimmerLights_Status@status
 16278                           
 16279                           ;Dimmer_B1.c: 768: return status;
 16280  1DAF  0823               	movf	getDimmerLights_Status@status,w
 16281  1DB0  0008               	return
 16282  1DB1                     __end_of_getDimmerLights_Status:	
 16283                           
 16284                           	psect	text106
 16285  1CAC                     __ptext106:	
 16286 ;; *************** function _DimmerLightsPointSelect *****************
 16287 ;; Defined at:
 16288 ;;		line 321 in file "../src/Dimmer_B1.c"
 16289 ;; Parameters:    Size  Location     Type
 16290 ;;  lights          1    wreg     unsigned char 
 16291 ;; Auto vars:     Size  Location     Type
 16292 ;;  lights          1    1[BANK0 ] unsigned char 
 16293 ;; Return value:  Size  Location     Type
 16294 ;;		None               void
 16295 ;; Registers used:
 16296 ;;		wreg
 16297 ;; Tracked objects:
 16298 ;;		On entry : 0/0
 16299 ;;		On exit  : 0/0
 16300 ;;		Unchanged: 0/0
 16301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16306 ;;Total ram usage:        2 bytes
 16307 ;; Hardware stack levels used:    1
 16308 ;; Hardware stack levels required when called:    5
 16309 ;; This function calls:
 16310 ;;		Nothing
 16311 ;; This function is called by:
 16312 ;;		_setDimmerLights_Initialization
 16313 ;;		_setDimmerLights_SwOn
 16314 ;;		_setDimmerLights_SwOff
 16315 ;;		_setDimmerLights_AdjOn
 16316 ;;		_setDimmerLights_Main
 16317 ;;		_getDimmerLights_Status
 16318 ;;		_getAll_DimmerLights_AdjSw
 16319 ;;		_setDimmerLights_ErrorClose
 16320 ;;		_setDimmerLights_AdjRF
 16321 ;;		_setDimmerLights_Status
 16322 ;;		_setDimmerLights_GO
 16323 ;;		_setDimmerLights_MaxmumValue
 16324 ;;		_setDimmerLights_Trigger
 16325 ;; This function uses a non-reentrant model
 16326 ;;
 16327                           
 16328                           
 16329                           ;psect for function _DimmerLightsPointSelect
 16330  1CAC                     _DimmerLightsPointSelect:	
 16331                           
 16332                           ;incstack = 0
 16333                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16334                           ;DimmerLightsPointSelect@lights stored from wreg
 16335  1CAC  0020               	movlb	0	; select bank0
 16336  1CAD  00A1               	movwf	DimmerLightsPointSelect@lights
 16337                           
 16338                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16339  1CAE  0821               	movf	DimmerLightsPointSelect@lights,w
 16340  1CAF  3A01               	xorlw	1
 16341  1CB0  1D03               	skipz
 16342  1CB1  0008               	return
 16343                           
 16344                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16345  1CB2  3053               	movlw	_DimmerLights1& (0+255)
 16346  1CB3  00A0               	movwf	??_DimmerLightsPointSelect
 16347  1CB4  0820               	movf	??_DimmerLightsPointSelect,w
 16348  1CB5  00EF               	movwf	_DimmerLights
 16349  1CB6  0008               	return
 16350  1CB7                     __end_of_DimmerLightsPointSelect:	
 16351                           
 16352                           	psect	text107
 16353  174E                     __ptext107:	
 16354 ;; *************** function _setBuz *****************
 16355 ;; Defined at:
 16356 ;;		line 22 in file "../src/Buzzer_B1.c"
 16357 ;; Parameters:    Size  Location     Type
 16358 ;;  count           1    wreg     unsigned char 
 16359 ;;  time            2    9[BANK0 ] int 
 16360 ;; Auto vars:     Size  Location     Type
 16361 ;;  count           1   12[BANK0 ] unsigned char 
 16362 ;; Return value:  Size  Location     Type
 16363 ;;		None               void
 16364 ;; Registers used:
 16365 ;;		wreg, status,2, status,0, pclath, cstack
 16366 ;; Tracked objects:
 16367 ;;		On entry : 0/0
 16368 ;;		On exit  : 0/0
 16369 ;;		Unchanged: 0/0
 16370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16371 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16374 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16375 ;;Total ram usage:        4 bytes
 16376 ;; Hardware stack levels used:    1
 16377 ;; Hardware stack levels required when called:    6
 16378 ;; This function calls:
 16379 ;;		___awdiv
 16380 ;; This function is called by:
 16381 ;;		_DlyOff_Main
 16382 ;;		_setDimmerLights_SwOn
 16383 ;;		_setDimmerLights_Adj
 16384 ;;		_my_MainTimer
 16385 ;;		_Exception_Main
 16386 ;;		_setTemp_Main
 16387 ;;		_setLog_Code
 16388 ;;		_setControl_Lights_Table
 16389 ;;		_setRFSW_Control
 16390 ;;		_setSw_Main
 16391 ;; This function uses a non-reentrant model
 16392 ;;
 16393                           
 16394                           
 16395                           ;psect for function _setBuz
 16396  174E                     _setBuz:	
 16397                           
 16398                           ;incstack = 0
 16399                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16400                           ;setBuz@count stored from wreg
 16401  174E  0020               	movlb	0	; select bank0
 16402  174F  00AC               	movwf	setBuz@count
 16403                           
 16404                           ;Buzzer_B1.c: 23: time /= 10;
 16405  1750  300A               	movlw	10
 16406  1751  00A0               	movwf	___awdiv@divisor
 16407  1752  3000               	movlw	0
 16408  1753  00A1               	movwf	___awdiv@divisor+1
 16409  1754  082A               	movf	setBuz@time+1,w
 16410  1755  01A3               	clrf	___awdiv@dividend+1
 16411  1756  07A3               	addwf	___awdiv@dividend+1,f
 16412  1757  0829               	movf	setBuz@time,w
 16413  1758  01A2               	clrf	___awdiv@dividend
 16414  1759  07A2               	addwf	___awdiv@dividend,f
 16415  175A  3196  26A2  3197   	fcall	___awdiv
 16416  175D  0020               	movlb	0	; select bank0
 16417  175E  0821               	movf	?___awdiv+1,w
 16418  175F  01AA               	clrf	setBuz@time+1
 16419  1760  07AA               	addwf	setBuz@time+1,f
 16420  1761  0820               	movf	?___awdiv,w
 16421  1762  01A9               	clrf	setBuz@time
 16422  1763  07A9               	addwf	setBuz@time,f
 16423                           
 16424                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16425  1764  0021               	movlb	1	; select bank1
 16426  1765  1C2E               	btfss	_Buz1^(0+128),0
 16427  1766  0008               	return
 16428                           
 16429                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16430  1767  18AE               	btfsc	_Buz1^(0+128),1
 16431  1768  2F7F               	goto	l84
 16432                           
 16433                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16434  1769  14AE               	bsf	_Buz1^(0+128),1
 16435                           
 16436                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16437  176A  01AF               	clrf	(_Buz1^(0+128)+1)
 16438  176B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16439                           
 16440                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16441  176C  0020               	movlb	0	; select bank0
 16442  176D  082C               	movf	setBuz@count,w
 16443  176E  00AB               	movwf	??_setBuz
 16444  176F  082B               	movf	??_setBuz,w
 16445  1770  0021               	movlb	1	; select bank1
 16446  1771  00B1               	movwf	(_Buz1^(0+128)+3)
 16447                           
 16448                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16449  1772  0020               	movlb	0	; select bank0
 16450  1773  082A               	movf	setBuz@time+1,w
 16451  1774  0021               	movlb	1	; select bank1
 16452  1775  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16453  1776  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16454  1777  0020               	movlb	0	; select bank0
 16455  1778  0829               	movf	setBuz@time,w
 16456  1779  0021               	movlb	1	; select bank1
 16457  177A  01B4               	clrf	(_Buz1^(0+128)+6)
 16458  177B  07B4               	addwf	(_Buz1^(0+128)+6),f
 16459                           
 16460                           ;Buzzer_B1.c: 30: RB3 = 1;
 16461  177C  0020               	movlb	0	; select bank0
 16462  177D  158D               	bsf	13,3	;volatile
 16463                           
 16464                           ;Buzzer_B1.c: 31: } else {
 16465  177E  0008               	return
 16466  177F                     l84:	
 16467                           
 16468                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16469  177F  19AE               	btfsc	_Buz1^(0+128),3
 16470  1780  2F93               	goto	l86
 16471                           
 16472                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16473  1781  15AE               	bsf	_Buz1^(0+128),3
 16474                           
 16475                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16476  1782  0020               	movlb	0	; select bank0
 16477  1783  082C               	movf	setBuz@count,w
 16478  1784  00AB               	movwf	??_setBuz
 16479  1785  082B               	movf	??_setBuz,w
 16480  1786  0021               	movlb	1	; select bank1
 16481  1787  00B2               	movwf	(_Buz1^(0+128)+4)
 16482                           
 16483                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16484  1788  0020               	movlb	0	; select bank0
 16485  1789  082A               	movf	setBuz@time+1,w
 16486  178A  0021               	movlb	1	; select bank1
 16487  178B  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16488  178C  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16489  178D  0020               	movlb	0	; select bank0
 16490  178E  0829               	movf	setBuz@time,w
 16491  178F  0021               	movlb	1	; select bank1
 16492  1790  01B6               	clrf	(_Buz1^(0+128)+8)
 16493  1791  07B6               	addwf	(_Buz1^(0+128)+8),f
 16494                           
 16495                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16496  1792  0008               	return
 16497  1793                     l86:	
 16498  1793  1A2E               	btfsc	_Buz1^(0+128),4
 16499  1794  0008               	return
 16500                           
 16501                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16502  1795  162E               	bsf	_Buz1^(0+128),4
 16503                           
 16504                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16505  1796  0020               	movlb	0	; select bank0
 16506  1797  082C               	movf	setBuz@count,w
 16507  1798  00AB               	movwf	??_setBuz
 16508  1799  082B               	movf	??_setBuz,w
 16509  179A  0021               	movlb	1	; select bank1
 16510  179B  00B3               	movwf	(_Buz1^(0+128)+5)
 16511                           
 16512                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16513  179C  0020               	movlb	0	; select bank0
 16514  179D  082A               	movf	setBuz@time+1,w
 16515  179E  0021               	movlb	1	; select bank1
 16516  179F  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16517  17A0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16518  17A1  0020               	movlb	0	; select bank0
 16519  17A2  0829               	movf	setBuz@time,w
 16520  17A3  0021               	movlb	1	; select bank1
 16521  17A4  01B8               	clrf	(_Buz1^(0+128)+10)
 16522  17A5  07B8               	addwf	(_Buz1^(0+128)+10),f
 16523  17A6  0008               	return
 16524  17A7                     __end_of_setBuz:	
 16525                           
 16526                           	psect	text108
 16527  16A2                     __ptext108:	
 16528 ;; *************** function ___awdiv *****************
 16529 ;; Defined at:
 16530 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16531 ;; Parameters:    Size  Location     Type
 16532 ;;  divisor         2    0[BANK0 ] int 
 16533 ;;  dividend        2    2[BANK0 ] int 
 16534 ;; Auto vars:     Size  Location     Type
 16535 ;;  quotient        2    7[BANK0 ] int 
 16536 ;;  sign            1    6[BANK0 ] unsigned char 
 16537 ;;  counter         1    5[BANK0 ] unsigned char 
 16538 ;; Return value:  Size  Location     Type
 16539 ;;                  2    0[BANK0 ] int 
 16540 ;; Registers used:
 16541 ;;		wreg, status,2, status,0
 16542 ;; Tracked objects:
 16543 ;;		On entry : 0/0
 16544 ;;		On exit  : 0/0
 16545 ;;		Unchanged: 0/0
 16546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16547 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16548 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16550 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16551 ;;Total ram usage:        9 bytes
 16552 ;; Hardware stack levels used:    1
 16553 ;; Hardware stack levels required when called:    5
 16554 ;; This function calls:
 16555 ;;		Nothing
 16556 ;; This function is called by:
 16557 ;;		_setBuz
 16558 ;; This function uses a non-reentrant model
 16559 ;;
 16560                           
 16561                           
 16562                           ;psect for function ___awdiv
 16563  16A2                     ___awdiv:	
 16564                           
 16565                           ;incstack = 0
 16566                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16567  16A2  0020               	movlb	0	; select bank0
 16568  16A3  01A6               	clrf	___awdiv@sign
 16569  16A4  1FA1               	btfss	___awdiv@divisor+1,7
 16570  16A5  2EAD               	goto	l8290
 16571  16A6  09A0               	comf	___awdiv@divisor,f
 16572  16A7  09A1               	comf	___awdiv@divisor+1,f
 16573  16A8  0AA0               	incf	___awdiv@divisor,f
 16574  16A9  1903               	skipnz
 16575  16AA  0AA1               	incf	___awdiv@divisor+1,f
 16576  16AB  01A6               	clrf	___awdiv@sign
 16577  16AC  0AA6               	incf	___awdiv@sign,f
 16578  16AD                     l8290:	
 16579  16AD  1FA3               	btfss	___awdiv@dividend+1,7
 16580  16AE  2EB8               	goto	l8296
 16581  16AF  09A2               	comf	___awdiv@dividend,f
 16582  16B0  09A3               	comf	___awdiv@dividend+1,f
 16583  16B1  0AA2               	incf	___awdiv@dividend,f
 16584  16B2  1903               	skipnz
 16585  16B3  0AA3               	incf	___awdiv@dividend+1,f
 16586  16B4  3001               	movlw	1
 16587  16B5  00A4               	movwf	??___awdiv
 16588  16B6  0824               	movf	??___awdiv,w
 16589  16B7  06A6               	xorwf	___awdiv@sign,f
 16590  16B8                     l8296:	
 16591  16B8  01A7               	clrf	___awdiv@quotient
 16592  16B9  01A8               	clrf	___awdiv@quotient+1
 16593  16BA  0821               	movf	___awdiv@divisor+1,w
 16594  16BB  0420               	iorwf	___awdiv@divisor,w
 16595  16BC  1903               	skipnz
 16596  16BD  2EE7               	goto	l8318
 16597  16BE  01A5               	clrf	___awdiv@counter
 16598  16BF  0AA5               	incf	___awdiv@counter,f
 16599  16C0                     l8306:	
 16600  16C0  1BA1               	btfsc	___awdiv@divisor+1,7
 16601  16C1  2ECC               	goto	l8308
 16602  16C2  3001               	movlw	1
 16603  16C3                     u8805:	
 16604  16C3  35A0               	lslf	___awdiv@divisor,f
 16605  16C4  0DA1               	rlf	___awdiv@divisor+1,f
 16606  16C5  0B89               	decfsz	9,f
 16607  16C6  2EC3               	goto	u8805
 16608  16C7  3001               	movlw	1
 16609  16C8  00A4               	movwf	??___awdiv
 16610  16C9  0824               	movf	??___awdiv,w
 16611  16CA  07A5               	addwf	___awdiv@counter,f
 16612  16CB  2EC0               	goto	l8306
 16613  16CC                     l8308:	
 16614  16CC  3001               	movlw	1
 16615  16CD                     u8825:	
 16616  16CD  35A7               	lslf	___awdiv@quotient,f
 16617  16CE  0DA8               	rlf	___awdiv@quotient+1,f
 16618  16CF  0B89               	decfsz	9,f
 16619  16D0  2ECD               	goto	u8825
 16620  16D1  0821               	movf	___awdiv@divisor+1,w
 16621  16D2  0223               	subwf	___awdiv@dividend+1,w
 16622  16D3  1D03               	skipz
 16623  16D4  2ED7               	goto	u8835
 16624  16D5  0820               	movf	___awdiv@divisor,w
 16625  16D6  0222               	subwf	___awdiv@dividend,w
 16626  16D7                     u8835:	
 16627  16D7  1C03               	skipc
 16628  16D8  2EDE               	goto	l8314
 16629  16D9  0820               	movf	___awdiv@divisor,w
 16630  16DA  02A2               	subwf	___awdiv@dividend,f
 16631  16DB  0821               	movf	___awdiv@divisor+1,w
 16632  16DC  3BA3               	subwfb	___awdiv@dividend+1,f
 16633  16DD  1427               	bsf	___awdiv@quotient,0
 16634  16DE                     l8314:	
 16635  16DE  3001               	movlw	1
 16636  16DF                     u8845:	
 16637  16DF  36A1               	lsrf	___awdiv@divisor+1,f
 16638  16E0  0CA0               	rrf	___awdiv@divisor,f
 16639  16E1  0B89               	decfsz	9,f
 16640  16E2  2EDF               	goto	u8845
 16641  16E3  3001               	movlw	1
 16642  16E4  02A5               	subwf	___awdiv@counter,f
 16643  16E5  1D03               	btfss	3,2
 16644  16E6  2ECC               	goto	l8308
 16645  16E7                     l8318:	
 16646  16E7  0826               	movf	___awdiv@sign,w
 16647  16E8  1903               	btfsc	3,2
 16648  16E9  2EEF               	goto	l8322
 16649  16EA  09A7               	comf	___awdiv@quotient,f
 16650  16EB  09A8               	comf	___awdiv@quotient+1,f
 16651  16EC  0AA7               	incf	___awdiv@quotient,f
 16652  16ED  1903               	skipnz
 16653  16EE  0AA8               	incf	___awdiv@quotient+1,f
 16654  16EF                     l8322:	
 16655  16EF  0828               	movf	___awdiv@quotient+1,w
 16656  16F0  01A1               	clrf	?___awdiv+1
 16657  16F1  07A1               	addwf	?___awdiv+1,f
 16658  16F2  0827               	movf	___awdiv@quotient,w
 16659  16F3  01A0               	clrf	?___awdiv
 16660  16F4  07A0               	addwf	?___awdiv,f
 16661  16F5  0008               	return
 16662  16F6                     __end_of___awdiv:	
 16663                           
 16664                           	psect	text109
 16665  1C16                     __ptext109:	
 16666 ;; *************** function _DelayOff_Initialization *****************
 16667 ;; Defined at:
 16668 ;;		line 26 in file "../src/DelayOff_B1.c"
 16669 ;; Parameters:    Size  Location     Type
 16670 ;;		None
 16671 ;; Auto vars:     Size  Location     Type
 16672 ;;		None
 16673 ;; Return value:  Size  Location     Type
 16674 ;;		None               void
 16675 ;; Registers used:
 16676 ;;		wreg, status,2, status,0, pclath, cstack
 16677 ;; Tracked objects:
 16678 ;;		On entry : 0/0
 16679 ;;		On exit  : 0/0
 16680 ;;		Unchanged: 0/0
 16681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;Total ram usage:        0 bytes
 16687 ;; Hardware stack levels used:    1
 16688 ;; Hardware stack levels required when called:    7
 16689 ;; This function calls:
 16690 ;;		_DlyOff_Initialization
 16691 ;; This function is called by:
 16692 ;;		_main
 16693 ;; This function uses a non-reentrant model
 16694 ;;
 16695                           
 16696                           
 16697                           ;psect for function _DelayOff_Initialization
 16698  1C16                     _DelayOff_Initialization:	
 16699                           
 16700                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16701                           
 16702                           ;incstack = 0
 16703                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16704  1C16  3001               	movlw	1
 16705  1C17  319C  242B         	fcall	_DlyOff_Initialization
 16706  1C19  0008               	return
 16707  1C1A                     __end_of_DelayOff_Initialization:	
 16708                           
 16709                           	psect	text110
 16710  1C2B                     __ptext110:	
 16711 ;; *************** function _DlyOff_Initialization *****************
 16712 ;; Defined at:
 16713 ;;		line 56 in file "../src/DelayOff_B1.c"
 16714 ;; Parameters:    Size  Location     Type
 16715 ;;  sw              1    wreg     unsigned char 
 16716 ;; Auto vars:     Size  Location     Type
 16717 ;;  sw              1    2[BANK0 ] unsigned char 
 16718 ;; Return value:  Size  Location     Type
 16719 ;;		None               void
 16720 ;; Registers used:
 16721 ;;		wreg, status,2, status,0, pclath, cstack
 16722 ;; Tracked objects:
 16723 ;;		On entry : 0/0
 16724 ;;		On exit  : 0/0
 16725 ;;		Unchanged: 0/0
 16726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16730 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16731 ;;Total ram usage:        1 bytes
 16732 ;; Hardware stack levels used:    1
 16733 ;; Hardware stack levels required when called:    6
 16734 ;; This function calls:
 16735 ;;		_DelayOffPointSelect
 16736 ;; This function is called by:
 16737 ;;		_DelayOff_Initialization
 16738 ;; This function uses a non-reentrant model
 16739 ;;
 16740                           
 16741                           
 16742                           ;psect for function _DlyOff_Initialization
 16743  1C2B                     _DlyOff_Initialization:	
 16744                           
 16745                           ;incstack = 0
 16746                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16747                           ;DlyOff_Initialization@sw stored from wreg
 16748  1C2B  0020               	movlb	0	; select bank0
 16749  1C2C  00A2               	movwf	DlyOff_Initialization@sw
 16750                           
 16751                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16752  1C2D  0822               	movf	DlyOff_Initialization@sw,w
 16753  1C2E  319C  24A1         	fcall	_DelayOffPointSelect
 16754  1C30  0008               	return
 16755  1C31                     __end_of_DlyOff_Initialization:	
 16756                           
 16757                           	psect	text111
 16758  1CA1                     __ptext111:	
 16759 ;; *************** function _DelayOffPointSelect *****************
 16760 ;; Defined at:
 16761 ;;		line 7 in file "../src/DelayOff_B1.c"
 16762 ;; Parameters:    Size  Location     Type
 16763 ;;  sw              1    wreg     unsigned char 
 16764 ;; Auto vars:     Size  Location     Type
 16765 ;;  sw              1    1[BANK0 ] unsigned char 
 16766 ;; Return value:  Size  Location     Type
 16767 ;;		None               void
 16768 ;; Registers used:
 16769 ;;		wreg
 16770 ;; Tracked objects:
 16771 ;;		On entry : 0/0
 16772 ;;		On exit  : 0/0
 16773 ;;		Unchanged: 0/0
 16774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16778 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16779 ;;Total ram usage:        2 bytes
 16780 ;; Hardware stack levels used:    1
 16781 ;; Hardware stack levels required when called:    5
 16782 ;; This function calls:
 16783 ;;		Nothing
 16784 ;; This function is called by:
 16785 ;;		_DlyOff_Initialization
 16786 ;;		_DlyOff_Main
 16787 ;;		_setDelayOff_GO
 16788 ;;		_getDelayOff_GO
 16789 ;; This function uses a non-reentrant model
 16790 ;;
 16791                           
 16792                           
 16793                           ;psect for function _DelayOffPointSelect
 16794  1CA1                     _DelayOffPointSelect:	
 16795                           
 16796                           ;incstack = 0
 16797                           ; Regs used in _DelayOffPointSelect: [wreg]
 16798                           ;DelayOffPointSelect@sw stored from wreg
 16799  1CA1  0020               	movlb	0	; select bank0
 16800  1CA2  00A1               	movwf	DelayOffPointSelect@sw
 16801                           
 16802                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16803  1CA3  0821               	movf	DelayOffPointSelect@sw,w
 16804  1CA4  3A01               	xorlw	1
 16805  1CA5  1D03               	skipz
 16806  1CA6  0008               	return
 16807                           
 16808                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16809  1CA7  3064               	movlw	_DlySw1& (0+255)
 16810  1CA8  00A0               	movwf	??_DelayOffPointSelect
 16811  1CA9  0820               	movf	??_DelayOffPointSelect,w
 16812  1CAA  00F5               	movwf	_DelayOff
 16813  1CAB  0008               	return
 16814  1CAC                     __end_of_DelayOffPointSelect:	
 16815                           
 16816                           	psect	text112
 16817  1E7B                     __ptext112:	
 16818 ;; *************** function _CC2500_PowerOnInitial *****************
 16819 ;; Defined at:
 16820 ;;		line 124 in file "../src/CC2500_B1.c"
 16821 ;; Parameters:    Size  Location     Type
 16822 ;;		None
 16823 ;; Auto vars:     Size  Location     Type
 16824 ;;		None
 16825 ;; Return value:  Size  Location     Type
 16826 ;;		None               void
 16827 ;; Registers used:
 16828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16829 ;; Tracked objects:
 16830 ;;		On entry : 0/0
 16831 ;;		On exit  : 0/0
 16832 ;;		Unchanged: 0/0
 16833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16838 ;;Total ram usage:        0 bytes
 16839 ;; Hardware stack levels used:    1
 16840 ;; Hardware stack levels required when called:    8
 16841 ;; This function calls:
 16842 ;;		_CC2500_ClearRXFIFO
 16843 ;;		_CC2500_ClearTXFIFO
 16844 ;;		_CC2500_FrequencyCabr
 16845 ;;		_CC2500_InitPATable
 16846 ;;		_CC2500_InitSetREG
 16847 ;;		_CC2500_PowerRST
 16848 ;;		_CC2500_SIDLEMode
 16849 ;; This function is called by:
 16850 ;;		_main
 16851 ;; This function uses a non-reentrant model
 16852 ;;
 16853                           
 16854                           
 16855                           ;psect for function _CC2500_PowerOnInitial
 16856  1E7B                     _CC2500_PowerOnInitial:	
 16857                           
 16858                           ;CC2500_B1.c: 125: CC2500_PowerRST();
 16859                           
 16860                           ;incstack = 0
 16861                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16862  1E7B  3187  27B8  319E   	fcall	_CC2500_PowerRST
 16863                           
 16864                           ;CC2500_B1.c: 126: CC2500_InitSetREG();
 16865  1E7E  3191  2123  319E   	fcall	_CC2500_InitSetREG
 16866                           
 16867                           ;CC2500_B1.c: 127: CC2500_InitPATable();
 16868  1E81  319F  277F  319E   	fcall	_CC2500_InitPATable
 16869                           
 16870                           ;CC2500_B1.c: 128: CC2500_ClearTXFIFO();
 16871  1E84  319C  240E  319E   	fcall	_CC2500_ClearTXFIFO
 16872                           
 16873                           ;CC2500_B1.c: 129: CC2500_ClearRXFIFO();
 16874  1E87  319C  240A  319E   	fcall	_CC2500_ClearRXFIFO
 16875                           
 16876                           ;CC2500_B1.c: 130: CC2500_FrequencyCabr();
 16877  1E8A  319C  24E3  319E   	fcall	_CC2500_FrequencyCabr
 16878                           
 16879                           ;CC2500_B1.c: 131: CC2500_SIDLEMode();
 16880  1E8D  319C  2412         	fcall	_CC2500_SIDLEMode
 16881  1E8F  0008               	return
 16882  1E90                     __end_of_CC2500_PowerOnInitial:	
 16883                           
 16884                           	psect	text113
 16885  1C12                     __ptext113:	
 16886 ;; *************** function _CC2500_SIDLEMode *****************
 16887 ;; Defined at:
 16888 ;;		line 214 in file "../src/CC2500_B1.c"
 16889 ;; Parameters:    Size  Location     Type
 16890 ;;		None
 16891 ;; Auto vars:     Size  Location     Type
 16892 ;;		None
 16893 ;; Return value:  Size  Location     Type
 16894 ;;		None               void
 16895 ;; Registers used:
 16896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16897 ;; Tracked objects:
 16898 ;;		On entry : 0/0
 16899 ;;		On exit  : 0/0
 16900 ;;		Unchanged: 0/0
 16901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16906 ;;Total ram usage:        0 bytes
 16907 ;; Hardware stack levels used:    1
 16908 ;; Hardware stack levels required when called:    7
 16909 ;; This function calls:
 16910 ;;		_CC2500_WriteCommand
 16911 ;; This function is called by:
 16912 ;;		_CC2500_PowerOnInitial
 16913 ;; This function uses a non-reentrant model
 16914 ;;
 16915                           
 16916                           
 16917                           ;psect for function _CC2500_SIDLEMode
 16918  1C12                     _CC2500_SIDLEMode:	
 16919                           
 16920                           ;CC2500_B1.c: 215: CC2500_WriteCommand(0x36);
 16921                           
 16922                           ;incstack = 0
 16923                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16924  1C12  3036               	movlw	54
 16925  1C13  319E  26BE         	fcall	_CC2500_WriteCommand
 16926  1C15  0008               	return
 16927  1C16                     __end_of_CC2500_SIDLEMode:	
 16928                           
 16929                           	psect	text114
 16930  07B8                     __ptext114:	
 16931 ;; *************** function _CC2500_PowerRST *****************
 16932 ;; Defined at:
 16933 ;;		line 137 in file "../src/CC2500_B1.c"
 16934 ;; Parameters:    Size  Location     Type
 16935 ;;		None
 16936 ;; Auto vars:     Size  Location     Type
 16937 ;;		None
 16938 ;; Return value:  Size  Location     Type
 16939 ;;		None               void
 16940 ;; Registers used:
 16941 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16942 ;; Tracked objects:
 16943 ;;		On entry : 0/0
 16944 ;;		On exit  : 0/0
 16945 ;;		Unchanged: 0/0
 16946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16951 ;;Total ram usage:        1 bytes
 16952 ;; Hardware stack levels used:    1
 16953 ;; Hardware stack levels required when called:    6
 16954 ;; This function calls:
 16955 ;;		_CC2500_WriteByte
 16956 ;;		_DelayTime_1us
 16957 ;;		_Timeout_Counter
 16958 ;;		_set_TimeoutCleared
 16959 ;; This function is called by:
 16960 ;;		_CC2500_PowerOnInitial
 16961 ;; This function uses a non-reentrant model
 16962 ;;
 16963                           
 16964                           
 16965                           ;psect for function _CC2500_PowerRST
 16966  07B8                     _CC2500_PowerRST:	
 16967                           
 16968                           ;CC2500_B1.c: 138: RC3 = 0;
 16969                           
 16970                           ;incstack = 0
 16971                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16972  07B8  0020               	movlb	0	; select bank0
 16973  07B9  118E               	bcf	14,3	;volatile
 16974                           
 16975                           ;CC2500_B1.c: 139: RC4 = 0;
 16976  07BA  120E               	bcf	14,4	;volatile
 16977                           
 16978                           ;CC2500_B1.c: 140: RC0 = 1;
 16979  07BB  140E               	bsf	14,0	;volatile
 16980                           
 16981                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16982  07BC  300A               	movlw	10
 16983  07BD  00A0               	movwf	DelayTime_1us@count
 16984  07BE  3000               	movlw	0
 16985  07BF  00A1               	movwf	DelayTime_1us@count+1
 16986  07C0  3190  20FD  3187   	fcall	_DelayTime_1us
 16987                           
 16988                           ;CC2500_B1.c: 142: RC0 = 0;
 16989  07C3  0020               	movlb	0	; select bank0
 16990  07C4  100E               	bcf	14,0	;volatile
 16991                           
 16992                           ;CC2500_B1.c: 143: DelayTime_1us(10);
 16993  07C5  300A               	movlw	10
 16994  07C6  00A0               	movwf	DelayTime_1us@count
 16995  07C7  3000               	movlw	0
 16996  07C8  00A1               	movwf	DelayTime_1us@count+1
 16997  07C9  3190  20FD  3187   	fcall	_DelayTime_1us
 16998                           
 16999                           ;CC2500_B1.c: 144: RC0 = 1;
 17000  07CC  0020               	movlb	0	; select bank0
 17001  07CD  140E               	bsf	14,0	;volatile
 17002                           
 17003                           ;CC2500_B1.c: 145: DelayTime_1us(40);
 17004  07CE  3028               	movlw	40
 17005  07CF  00A0               	movwf	DelayTime_1us@count
 17006  07D0  3000               	movlw	0
 17007  07D1  00A1               	movwf	DelayTime_1us@count+1
 17008  07D2  3190  20FD  3187   	fcall	_DelayTime_1us
 17009                           
 17010                           ;CC2500_B1.c: 146: RC0 = 0;
 17011  07D5  0020               	movlb	0	; select bank0
 17012  07D6  100E               	bcf	14,0	;volatile
 17013                           
 17014                           ;CC2500_B1.c: 147: SPI0Buffer = 0x30;
 17015  07D7  3030               	movlw	48
 17016  07D8  00A6               	movwf	??_CC2500_PowerRST
 17017  07D9  0826               	movf	??_CC2500_PowerRST,w
 17018  07DA  0021               	movlb	1	; select bank1
 17019  07DB  00D1               	movwf	_SPI0Buffer^(0+128)
 17020                           
 17021                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17022  07DC  2FE0               	goto	l9172
 17023  07DD                     l9170:	
 17024                           
 17025                           ;CC2500_B1.c: 149: Timeout_Counter();
 17026  07DD  319E  2666  3187   	fcall	_Timeout_Counter
 17027  07E0                     l9172:	
 17028  07E0  0020               	movlb	0	; select bank0
 17029  07E1  1E8E               	btfss	14,5	;volatile
 17030  07E2  2FE6               	goto	l9176
 17031  07E3  0021               	movlb	1	; select bank1
 17032  07E4  1D2B               	btfss	(_myMain^(0+128)+11),2
 17033  07E5  2FDD               	goto	l9170
 17034  07E6                     l9176:	
 17035                           
 17036                           ;CC2500_B1.c: 150: };
 17037                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17038  07E6  319C  2426  3187   	fcall	_set_TimeoutCleared
 17039                           
 17040                           ;CC2500_B1.c: 152: CC2500_WriteByte();
 17041  07E9  319E  26A5  3187   	fcall	_CC2500_WriteByte
 17042                           
 17043                           ;CC2500_B1.c: 153: while (RC5 == 1 && myMain.Timeout == 0) {
 17044  07EC  2FF0               	goto	l9182
 17045  07ED                     l9180:	
 17046                           
 17047                           ;CC2500_B1.c: 154: Timeout_Counter();
 17048  07ED  319E  2666  3187   	fcall	_Timeout_Counter
 17049  07F0                     l9182:	
 17050  07F0  0020               	movlb	0	; select bank0
 17051  07F1  1E8E               	btfss	14,5	;volatile
 17052  07F2  2FF6               	goto	l9186
 17053  07F3  0021               	movlb	1	; select bank1
 17054  07F4  1D2B               	btfss	(_myMain^(0+128)+11),2
 17055  07F5  2FED               	goto	l9180
 17056  07F6                     l9186:	
 17057                           
 17058                           ;CC2500_B1.c: 155: };
 17059                           ;CC2500_B1.c: 156: set_TimeoutCleared();
 17060  07F6  319C  2426         	fcall	_set_TimeoutCleared
 17061                           
 17062                           ;CC2500_B1.c: 157: RC4 = 0;
 17063  07F8  0020               	movlb	0	; select bank0
 17064  07F9  120E               	bcf	14,4	;volatile
 17065                           
 17066                           ;CC2500_B1.c: 158: RC0 = 1;
 17067  07FA  140E               	bsf	14,0	;volatile
 17068  07FB  0008               	return
 17069  07FC                     __end_of_CC2500_PowerRST:	
 17070                           
 17071                           	psect	text115
 17072  1123                     __ptext115:	
 17073 ;; *************** function _CC2500_InitSetREG *****************
 17074 ;; Defined at:
 17075 ;;		line 164 in file "../src/CC2500_B1.c"
 17076 ;; Parameters:    Size  Location     Type
 17077 ;;		None
 17078 ;; Auto vars:     Size  Location     Type
 17079 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17080 ;;  temp2           1    7[BANK0 ] unsigned char 
 17081 ;;  temp1           1    6[BANK0 ] unsigned char 
 17082 ;; Return value:  Size  Location     Type
 17083 ;;		None               void
 17084 ;; Registers used:
 17085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17086 ;; Tracked objects:
 17087 ;;		On entry : 0/0
 17088 ;;		On exit  : 0/0
 17089 ;;		Unchanged: 0/0
 17090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17092 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17094 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17095 ;;Total ram usage:        4 bytes
 17096 ;; Hardware stack levels used:    1
 17097 ;; Hardware stack levels required when called:    7
 17098 ;; This function calls:
 17099 ;;		_CC2500_WriteREG
 17100 ;; This function is called by:
 17101 ;;		_CC2500_PowerOnInitial
 17102 ;; This function uses a non-reentrant model
 17103 ;;
 17104                           
 17105                           
 17106                           ;psect for function _CC2500_InitSetREG
 17107  1123                     _CC2500_InitSetREG:	
 17108                           
 17109                           ;CC2500_B1.c: 165: unsigned char loop_c;
 17110                           ;CC2500_B1.c: 166: unsigned char temp1, temp2;
 17111                           ;CC2500_B1.c: 168: for (loop_c = 0; loop_c < 47; loop_c++) {
 17112                           
 17113                           ;incstack = 0
 17114                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17115  1123  0020               	movlb	0	; select bank0
 17116  1124  01A8               	clrf	CC2500_InitSetREG@loop_c
 17117  1125                     L7:	
 17118  1125  302F               	movlw	47
 17119  1126  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17120  1127  1803               	btfsc	3,0
 17121  1128  0008               	return
 17122                           
 17123                           ;CC2500_B1.c: 169: temp1 = CC2500_registers_address[loop_c];
 17124  1129  0828               	movf	CC2500_InitSetREG@loop_c,w
 17125  112A  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17126  112B  0084               	movwf	4
 17127  112C  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17128  112D  1803               	skipnc
 17129  112E  3E01               	addlw	1
 17130  112F  0085               	movwf	5
 17131  1130  0800               	movf	0,w	;code access
 17132  1131  00A5               	movwf	??_CC2500_InitSetREG
 17133  1132  0825               	movf	??_CC2500_InitSetREG,w
 17134  1133  00A6               	movwf	CC2500_InitSetREG@temp1
 17135                           
 17136                           ;CC2500_B1.c: 170: temp2 = CC2500_rfSettings[loop_c];
 17137  1134  0828               	movf	CC2500_InitSetREG@loop_c,w
 17138  1135  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17139  1136  0084               	movwf	4
 17140  1137  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17141  1138  1803               	skipnc
 17142  1139  3E01               	addlw	1
 17143  113A  0085               	movwf	5
 17144  113B  0800               	movf	0,w	;code access
 17145  113C  00A5               	movwf	??_CC2500_InitSetREG
 17146  113D  0825               	movf	??_CC2500_InitSetREG,w
 17147  113E  00A7               	movwf	CC2500_InitSetREG@temp2
 17148                           
 17149                           ;CC2500_B1.c: 172: CC2500_WriteREG(temp1, temp2);
 17150  113F  0827               	movf	CC2500_InitSetREG@temp2,w
 17151  1140  00A5               	movwf	??_CC2500_InitSetREG
 17152  1141  0825               	movf	??_CC2500_InitSetREG,w
 17153  1142  00A2               	movwf	CC2500_WriteREG@value
 17154  1143  0826               	movf	CC2500_InitSetREG@temp1,w
 17155  1144  3190  206C  3191   	fcall	_CC2500_WriteREG
 17156  1147  3001               	movlw	1
 17157  1148  0020               	movlb	0	; select bank0
 17158  1149  00A5               	movwf	??_CC2500_InitSetREG
 17159  114A  0825               	movf	??_CC2500_InitSetREG,w
 17160  114B  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17161  114C  2925               	goto	L7
 17162  114D                     __end_of_CC2500_InitSetREG:	
 17163                           
 17164                           	psect	text116
 17165  1F7F                     __ptext116:	
 17166 ;; *************** function _CC2500_InitPATable *****************
 17167 ;; Defined at:
 17168 ;;		line 179 in file "../src/CC2500_B1.c"
 17169 ;; Parameters:    Size  Location     Type
 17170 ;;		None
 17171 ;; Auto vars:     Size  Location     Type
 17172 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17173 ;;  temp            1    6[BANK0 ] unsigned char 
 17174 ;; Return value:  Size  Location     Type
 17175 ;;		None               void
 17176 ;; Registers used:
 17177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17178 ;; Tracked objects:
 17179 ;;		On entry : 0/0
 17180 ;;		On exit  : 0/0
 17181 ;;		Unchanged: 0/0
 17182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17184 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;Total ram usage:        3 bytes
 17188 ;; Hardware stack levels used:    1
 17189 ;; Hardware stack levels required when called:    7
 17190 ;; This function calls:
 17191 ;;		_CC2500_WriteREG
 17192 ;; This function is called by:
 17193 ;;		_CC2500_PowerOnInitial
 17194 ;; This function uses a non-reentrant model
 17195 ;;
 17196                           
 17197                           
 17198                           ;psect for function _CC2500_InitPATable
 17199  1F7F                     _CC2500_InitPATable:	
 17200                           
 17201                           ;CC2500_B1.c: 180: unsigned char loop_d;
 17202                           ;CC2500_B1.c: 181: unsigned char temp;
 17203                           ;CC2500_B1.c: 183: for (loop_d = 0; loop_d < 8; loop_d++) {
 17204                           
 17205                           ;incstack = 0
 17206                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17207  1F7F  0020               	movlb	0	; select bank0
 17208  1F80  01A7               	clrf	CC2500_InitPATable@loop_d
 17209  1F81                     L8:	
 17210  1F81  3008               	movlw	8
 17211  1F82  0227               	subwf	CC2500_InitPATable@loop_d,w
 17212  1F83  1803               	btfsc	3,0
 17213  1F84  0008               	return
 17214                           
 17215                           ;CC2500_B1.c: 184: temp = CC2500_patable_vaule[loop_d];
 17216  1F85  0827               	movf	CC2500_InitPATable@loop_d,w
 17217  1F86  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17218  1F87  0084               	movwf	4
 17219  1F88  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17220  1F89  1803               	skipnc
 17221  1F8A  3E01               	addlw	1
 17222  1F8B  0085               	movwf	5
 17223  1F8C  0800               	movf	0,w	;code access
 17224  1F8D  00A5               	movwf	??_CC2500_InitPATable
 17225  1F8E  0825               	movf	??_CC2500_InitPATable,w
 17226  1F8F  00A6               	movwf	CC2500_InitPATable@temp
 17227                           
 17228                           ;CC2500_B1.c: 185: CC2500_WriteREG(0x3E, temp);
 17229  1F90  0826               	movf	CC2500_InitPATable@temp,w
 17230  1F91  00A5               	movwf	??_CC2500_InitPATable
 17231  1F92  0825               	movf	??_CC2500_InitPATable,w
 17232  1F93  00A2               	movwf	CC2500_WriteREG@value
 17233  1F94  303E               	movlw	62
 17234  1F95  3190  206C  319F   	fcall	_CC2500_WriteREG
 17235  1F98  3001               	movlw	1
 17236  1F99  0020               	movlb	0	; select bank0
 17237  1F9A  00A5               	movwf	??_CC2500_InitPATable
 17238  1F9B  0825               	movf	??_CC2500_InitPATable,w
 17239  1F9C  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17240  1F9D  2F81               	goto	L8
 17241  1F9E                     __end_of_CC2500_InitPATable:	
 17242                           
 17243                           	psect	text117
 17244  106C                     __ptext117:	
 17245 ;; *************** function _CC2500_WriteREG *****************
 17246 ;; Defined at:
 17247 ;;		line 256 in file "../src/CC2500_B1.c"
 17248 ;; Parameters:    Size  Location     Type
 17249 ;;  w_addr          1    wreg     unsigned char 
 17250 ;;  value           1    2[BANK0 ] unsigned char 
 17251 ;; Auto vars:     Size  Location     Type
 17252 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17253 ;; Return value:  Size  Location     Type
 17254 ;;		None               void
 17255 ;; Registers used:
 17256 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17257 ;; Tracked objects:
 17258 ;;		On entry : 0/0
 17259 ;;		On exit  : 0/0
 17260 ;;		Unchanged: 0/0
 17261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17262 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17264 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17265 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17266 ;;Total ram usage:        3 bytes
 17267 ;; Hardware stack levels used:    1
 17268 ;; Hardware stack levels required when called:    6
 17269 ;; This function calls:
 17270 ;;		_CC2500_WriteByte
 17271 ;;		_Timeout_Counter
 17272 ;;		_set_TimeoutCleared
 17273 ;; This function is called by:
 17274 ;;		_CC2500_InitSetREG
 17275 ;;		_CC2500_InitPATable
 17276 ;; This function uses a non-reentrant model
 17277 ;;
 17278                           
 17279                           
 17280                           ;psect for function _CC2500_WriteREG
 17281  106C                     _CC2500_WriteREG:	
 17282                           
 17283                           ;incstack = 0
 17284                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17285                           ;CC2500_WriteREG@w_addr stored from wreg
 17286  106C  0020               	movlb	0	; select bank0
 17287  106D  00A4               	movwf	CC2500_WriteREG@w_addr
 17288                           
 17289                           ;CC2500_B1.c: 257: RC0 = 0;
 17290  106E  100E               	bcf	14,0	;volatile
 17291                           
 17292                           ;CC2500_B1.c: 258: SPI0Buffer = w_addr;
 17293  106F  0824               	movf	CC2500_WriteREG@w_addr,w
 17294  1070  00A3               	movwf	??_CC2500_WriteREG
 17295  1071  0823               	movf	??_CC2500_WriteREG,w
 17296  1072  0021               	movlb	1	; select bank1
 17297  1073  00D1               	movwf	_SPI0Buffer^(0+128)
 17298                           
 17299                           ;CC2500_B1.c: 259: while (RC5 == 1 && myMain.Timeout == 0) {
 17300  1074  2878               	goto	l8892
 17301  1075                     l8890:	
 17302                           
 17303                           ;CC2500_B1.c: 260: Timeout_Counter();
 17304  1075  319E  2666  3190   	fcall	_Timeout_Counter
 17305  1078                     l8892:	
 17306  1078  0020               	movlb	0	; select bank0
 17307  1079  1E8E               	btfss	14,5	;volatile
 17308  107A  287E               	goto	l8896
 17309  107B  0021               	movlb	1	; select bank1
 17310  107C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17311  107D  2875               	goto	l8890
 17312  107E                     l8896:	
 17313                           
 17314                           ;CC2500_B1.c: 261: };
 17315                           ;CC2500_B1.c: 262: set_TimeoutCleared();
 17316  107E  319C  2426  3190   	fcall	_set_TimeoutCleared
 17317                           
 17318                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 17319  1081  319E  26A5  3190   	fcall	_CC2500_WriteByte
 17320                           
 17321                           ;CC2500_B1.c: 265: SPI0Buffer = value;
 17322  1084  0020               	movlb	0	; select bank0
 17323  1085  0822               	movf	CC2500_WriteREG@value,w
 17324  1086  00A3               	movwf	??_CC2500_WriteREG
 17325  1087  0823               	movf	??_CC2500_WriteREG,w
 17326  1088  0021               	movlb	1	; select bank1
 17327  1089  00D1               	movwf	_SPI0Buffer^(0+128)
 17328                           
 17329                           ;CC2500_B1.c: 266: CC2500_WriteByte();
 17330  108A  319E  26A5         	fcall	_CC2500_WriteByte
 17331                           
 17332                           ;CC2500_B1.c: 267: RC0 = 1;
 17333  108C  0020               	movlb	0	; select bank0
 17334  108D  140E               	bsf	14,0	;volatile
 17335  108E  0008               	return
 17336  108F                     __end_of_CC2500_WriteREG:	
 17337                           
 17338                           	psect	text118
 17339  1CE3                     __ptext118:	
 17340 ;; *************** function _CC2500_FrequencyCabr *****************
 17341 ;; Defined at:
 17342 ;;		line 206 in file "../src/CC2500_B1.c"
 17343 ;; Parameters:    Size  Location     Type
 17344 ;;		None
 17345 ;; Auto vars:     Size  Location     Type
 17346 ;;		None
 17347 ;; Return value:  Size  Location     Type
 17348 ;;		None               void
 17349 ;; Registers used:
 17350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17351 ;; Tracked objects:
 17352 ;;		On entry : 0/0
 17353 ;;		On exit  : 0/0
 17354 ;;		Unchanged: 0/0
 17355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17360 ;;Total ram usage:        0 bytes
 17361 ;; Hardware stack levels used:    1
 17362 ;; Hardware stack levels required when called:    7
 17363 ;; This function calls:
 17364 ;;		_CC2500_WriteCommand
 17365 ;;		_DelayTime_1us
 17366 ;; This function is called by:
 17367 ;;		_CC2500_PowerOnInitial
 17368 ;; This function uses a non-reentrant model
 17369 ;;
 17370                           
 17371                           
 17372                           ;psect for function _CC2500_FrequencyCabr
 17373  1CE3                     _CC2500_FrequencyCabr:	
 17374                           
 17375                           ;CC2500_B1.c: 207: CC2500_WriteCommand(0x33);
 17376                           
 17377                           ;incstack = 0
 17378                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17379  1CE3  3033               	movlw	51
 17380  1CE4  319E  26BE  319C   	fcall	_CC2500_WriteCommand
 17381                           
 17382                           ;CC2500_B1.c: 208: DelayTime_1us(1000);
 17383  1CE7  30E8               	movlw	232
 17384  1CE8  0020               	movlb	0	; select bank0
 17385  1CE9  00A0               	movwf	DelayTime_1us@count
 17386  1CEA  3003               	movlw	3
 17387  1CEB  00A1               	movwf	DelayTime_1us@count+1
 17388  1CEC  3190  20FD         	fcall	_DelayTime_1us
 17389  1CEE  0008               	return
 17390  1CEF                     __end_of_CC2500_FrequencyCabr:	
 17391                           
 17392                           	psect	text119
 17393  10FD                     __ptext119:	
 17394 ;; *************** function _DelayTime_1us *****************
 17395 ;; Defined at:
 17396 ;;		line 325 in file "../src/CC2500_B1.c"
 17397 ;; Parameters:    Size  Location     Type
 17398 ;;  count           2    0[BANK0 ] int 
 17399 ;; Auto vars:     Size  Location     Type
 17400 ;;  j               2    4[BANK0 ] unsigned int 
 17401 ;;  i               2    2[BANK0 ] unsigned int 
 17402 ;; Return value:  Size  Location     Type
 17403 ;;		None               void
 17404 ;; Registers used:
 17405 ;;		wreg, status,2
 17406 ;; Tracked objects:
 17407 ;;		On entry : 0/0
 17408 ;;		On exit  : 0/0
 17409 ;;		Unchanged: 0/0
 17410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17411 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17412 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17414 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;Total ram usage:        6 bytes
 17416 ;; Hardware stack levels used:    1
 17417 ;; Hardware stack levels required when called:    5
 17418 ;; This function calls:
 17419 ;;		Nothing
 17420 ;; This function is called by:
 17421 ;;		_CC2500_PowerRST
 17422 ;;		_CC2500_FrequencyCabr
 17423 ;; This function uses a non-reentrant model
 17424 ;;
 17425                           
 17426                           
 17427                           ;psect for function _DelayTime_1us
 17428  10FD                     _DelayTime_1us:	
 17429                           
 17430                           ;CC2500_B1.c: 326: unsigned int i, j;
 17431                           ;CC2500_B1.c: 327: for (i = 1; i < count; i++)
 17432                           
 17433                           ;incstack = 0
 17434                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17435  10FD  3001               	movlw	1
 17436  10FE  0020               	movlb	0	; select bank0
 17437  10FF  00A2               	movwf	DelayTime_1us@i
 17438  1100  3000               	movlw	0
 17439  1101  00A3               	movwf	DelayTime_1us@i+1
 17440  1102                     l348:	
 17441  1102  0821               	movf	DelayTime_1us@count+1,w
 17442  1103  0223               	subwf	DelayTime_1us@i+1,w
 17443  1104  1D03               	skipz
 17444  1105  2908               	goto	u9595
 17445  1106  0820               	movf	DelayTime_1us@count,w
 17446  1107  0222               	subwf	DelayTime_1us@i,w
 17447  1108                     u9595:	
 17448  1108  1803               	btfsc	3,0
 17449  1109  0008               	return
 17450                           
 17451                           ;CC2500_B1.c: 328: for (j = 0; j <= 1; j++);
 17452  110A  01A4               	clrf	DelayTime_1us@j
 17453  110B  01A5               	clrf	DelayTime_1us@j+1
 17454  110C  3000               	movlw	0
 17455  110D  0225               	subwf	DelayTime_1us@j+1,w
 17456  110E  3002               	movlw	2
 17457  110F  1903               	skipnz
 17458  1110  0224               	subwf	DelayTime_1us@j,w
 17459  1111  1803               	btfsc	3,0
 17460  1112  291E               	goto	l8884
 17461  1113                     l8882:	
 17462  1113  3001               	movlw	1
 17463  1114  07A4               	addwf	DelayTime_1us@j,f
 17464  1115  3000               	movlw	0
 17465  1116  3DA5               	addwfc	DelayTime_1us@j+1,f
 17466  1117  3000               	movlw	0
 17467  1118  0225               	subwf	DelayTime_1us@j+1,w
 17468  1119  3002               	movlw	2
 17469  111A  1903               	skipnz
 17470  111B  0224               	subwf	DelayTime_1us@j,w
 17471  111C  1C03               	skipc
 17472  111D  2913               	goto	l8882
 17473  111E                     l8884:	
 17474  111E  3001               	movlw	1
 17475  111F  07A2               	addwf	DelayTime_1us@i,f
 17476  1120  3000               	movlw	0
 17477  1121  3DA3               	addwfc	DelayTime_1us@i+1,f
 17478  1122  2902               	goto	l348
 17479  1123                     __end_of_DelayTime_1us:	
 17480                           
 17481                           	psect	text120
 17482  1C0E                     __ptext120:	
 17483 ;; *************** function _CC2500_ClearTXFIFO *****************
 17484 ;; Defined at:
 17485 ;;		line 192 in file "../src/CC2500_B1.c"
 17486 ;; Parameters:    Size  Location     Type
 17487 ;;		None
 17488 ;; Auto vars:     Size  Location     Type
 17489 ;;		None
 17490 ;; Return value:  Size  Location     Type
 17491 ;;		None               void
 17492 ;; Registers used:
 17493 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17494 ;; Tracked objects:
 17495 ;;		On entry : 0/0
 17496 ;;		On exit  : 0/0
 17497 ;;		Unchanged: 0/0
 17498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17503 ;;Total ram usage:        0 bytes
 17504 ;; Hardware stack levels used:    1
 17505 ;; Hardware stack levels required when called:    7
 17506 ;; This function calls:
 17507 ;;		_CC2500_WriteCommand
 17508 ;; This function is called by:
 17509 ;;		_CC2500_PowerOnInitial
 17510 ;; This function uses a non-reentrant model
 17511 ;;
 17512                           
 17513                           
 17514                           ;psect for function _CC2500_ClearTXFIFO
 17515  1C0E                     _CC2500_ClearTXFIFO:	
 17516                           
 17517                           ;CC2500_B1.c: 193: CC2500_WriteCommand(0x3B);
 17518                           
 17519                           ;incstack = 0
 17520                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17521  1C0E  303B               	movlw	59
 17522  1C0F  319E  26BE         	fcall	_CC2500_WriteCommand
 17523  1C11  0008               	return
 17524  1C12                     __end_of_CC2500_ClearTXFIFO:	
 17525                           
 17526                           	psect	text121
 17527  1C0A                     __ptext121:	
 17528 ;; *************** function _CC2500_ClearRXFIFO *****************
 17529 ;; Defined at:
 17530 ;;		line 199 in file "../src/CC2500_B1.c"
 17531 ;; Parameters:    Size  Location     Type
 17532 ;;		None
 17533 ;; Auto vars:     Size  Location     Type
 17534 ;;		None
 17535 ;; Return value:  Size  Location     Type
 17536 ;;		None               void
 17537 ;; Registers used:
 17538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17539 ;; Tracked objects:
 17540 ;;		On entry : 0/0
 17541 ;;		On exit  : 0/0
 17542 ;;		Unchanged: 0/0
 17543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17548 ;;Total ram usage:        0 bytes
 17549 ;; Hardware stack levels used:    1
 17550 ;; Hardware stack levels required when called:    7
 17551 ;; This function calls:
 17552 ;;		_CC2500_WriteCommand
 17553 ;; This function is called by:
 17554 ;;		_CC2500_PowerOnInitial
 17555 ;; This function uses a non-reentrant model
 17556 ;;
 17557                           
 17558                           
 17559                           ;psect for function _CC2500_ClearRXFIFO
 17560  1C0A                     _CC2500_ClearRXFIFO:	
 17561                           
 17562                           ;CC2500_B1.c: 200: CC2500_WriteCommand(0x3A);
 17563                           
 17564                           ;incstack = 0
 17565                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17566  1C0A  303A               	movlw	58
 17567  1C0B  319E  26BE         	fcall	_CC2500_WriteCommand
 17568  1C0D  0008               	return
 17569  1C0E                     __end_of_CC2500_ClearRXFIFO:	
 17570                           
 17571                           	psect	text122
 17572  1EBE                     __ptext122:	
 17573 ;; *************** function _CC2500_WriteCommand *****************
 17574 ;; Defined at:
 17575 ;;		line 290 in file "../src/CC2500_B1.c"
 17576 ;; Parameters:    Size  Location     Type
 17577 ;;  command         1    wreg     unsigned char 
 17578 ;; Auto vars:     Size  Location     Type
 17579 ;;  command         1    3[BANK0 ] unsigned char 
 17580 ;; Return value:  Size  Location     Type
 17581 ;;		None               void
 17582 ;; Registers used:
 17583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17584 ;; Tracked objects:
 17585 ;;		On entry : 0/0
 17586 ;;		On exit  : 0/0
 17587 ;;		Unchanged: 0/0
 17588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17592 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17593 ;;Total ram usage:        2 bytes
 17594 ;; Hardware stack levels used:    1
 17595 ;; Hardware stack levels required when called:    6
 17596 ;; This function calls:
 17597 ;;		_CC2500_WriteByte
 17598 ;;		_Timeout_Counter
 17599 ;;		_set_TimeoutCleared
 17600 ;; This function is called by:
 17601 ;;		_CC2500_TxData
 17602 ;;		_CC2500_RxData
 17603 ;;		_CC2500_ClearTXFIFO
 17604 ;;		_CC2500_ClearRXFIFO
 17605 ;;		_CC2500_FrequencyCabr
 17606 ;;		_CC2500_SIDLEMode
 17607 ;;		_setRF_Main
 17608 ;;		_RF_RxDisable
 17609 ;; This function uses a non-reentrant model
 17610 ;;
 17611                           
 17612                           
 17613                           ;psect for function _CC2500_WriteCommand
 17614  1EBE                     _CC2500_WriteCommand:	
 17615                           
 17616                           ;incstack = 0
 17617                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17618                           ;CC2500_WriteCommand@command stored from wreg
 17619  1EBE  0020               	movlb	0	; select bank0
 17620  1EBF  00A3               	movwf	CC2500_WriteCommand@command
 17621                           
 17622                           ;CC2500_B1.c: 291: RC0 = 0;
 17623  1EC0  100E               	bcf	14,0	;volatile
 17624                           
 17625                           ;CC2500_B1.c: 292: SPI0Buffer = command;
 17626  1EC1  0823               	movf	CC2500_WriteCommand@command,w
 17627  1EC2  00A2               	movwf	??_CC2500_WriteCommand
 17628  1EC3  0822               	movf	??_CC2500_WriteCommand,w
 17629  1EC4  0021               	movlb	1	; select bank1
 17630  1EC5  00D1               	movwf	_SPI0Buffer^(0+128)
 17631                           
 17632                           ;CC2500_B1.c: 294: while (RC5 == 1 && myMain.Timeout == 0) {
 17633  1EC6  2ECA               	goto	l8626
 17634  1EC7                     l8624:	
 17635                           
 17636                           ;CC2500_B1.c: 295: Timeout_Counter();
 17637  1EC7  319E  2666  319E   	fcall	_Timeout_Counter
 17638  1ECA                     l8626:	
 17639  1ECA  0020               	movlb	0	; select bank0
 17640  1ECB  1E8E               	btfss	14,5	;volatile
 17641  1ECC  2ED0               	goto	l8630
 17642  1ECD  0021               	movlb	1	; select bank1
 17643  1ECE  1D2B               	btfss	(_myMain^(0+128)+11),2
 17644  1ECF  2EC7               	goto	l8624
 17645  1ED0                     l8630:	
 17646                           
 17647                           ;CC2500_B1.c: 296: };
 17648                           ;CC2500_B1.c: 297: set_TimeoutCleared();
 17649  1ED0  319C  2426  319E   	fcall	_set_TimeoutCleared
 17650                           
 17651                           ;CC2500_B1.c: 299: CC2500_WriteByte();
 17652  1ED3  319E  26A5         	fcall	_CC2500_WriteByte
 17653                           
 17654                           ;CC2500_B1.c: 300: RC0 = 1;
 17655  1ED5  0020               	movlb	0	; select bank0
 17656  1ED6  140E               	bsf	14,0	;volatile
 17657  1ED7  0008               	return
 17658  1ED8                     __end_of_CC2500_WriteCommand:	
 17659                           
 17660                           	psect	text123
 17661  1C26                     __ptext123:	
 17662 ;; *************** function _set_TimeoutCleared *****************
 17663 ;; Defined at:
 17664 ;;		line 283 in file "../src/Main_B1.c"
 17665 ;; Parameters:    Size  Location     Type
 17666 ;;		None
 17667 ;; Auto vars:     Size  Location     Type
 17668 ;;		None
 17669 ;; Return value:  Size  Location     Type
 17670 ;;		None               void
 17671 ;; Registers used:
 17672 ;;		status,2
 17673 ;; Tracked objects:
 17674 ;;		On entry : 0/0
 17675 ;;		On exit  : 0/0
 17676 ;;		Unchanged: 0/0
 17677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;Total ram usage:        0 bytes
 17683 ;; Hardware stack levels used:    1
 17684 ;; Hardware stack levels required when called:    5
 17685 ;; This function calls:
 17686 ;;		Nothing
 17687 ;; This function is called by:
 17688 ;;		_CC2500_TxData
 17689 ;;		_CC2500_RxData
 17690 ;;		_CC2500_PowerRST
 17691 ;;		_CC2500_WriteREG
 17692 ;;		_CC2500_WriteCommand
 17693 ;;		_CC2500_ReadStatus
 17694 ;;		_getAD
 17695 ;;		_TouchPower
 17696 ;;		_CC2500_ReadREG
 17697 ;; This function uses a non-reentrant model
 17698 ;;
 17699                           
 17700                           
 17701                           ;psect for function _set_TimeoutCleared
 17702  1C26                     _set_TimeoutCleared:	
 17703                           
 17704                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17705                           
 17706                           ;incstack = 0
 17707                           ; Regs used in _set_TimeoutCleared: [status,2]
 17708  1C26  0021               	movlb	1	; select bank1
 17709  1C27  112B               	bcf	(_myMain^(0+128)+11),2
 17710                           
 17711                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17712  1C28  01AC               	clrf	(_myMain^(0+128)+12)
 17713  1C29  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17714  1C2A  0008               	return
 17715  1C2B                     __end_of_set_TimeoutCleared:	
 17716                           
 17717                           	psect	text124
 17718  1E66                     __ptext124:	
 17719 ;; *************** function _Timeout_Counter *****************
 17720 ;; Defined at:
 17721 ;;		line 274 in file "../src/Main_B1.c"
 17722 ;; Parameters:    Size  Location     Type
 17723 ;;		None
 17724 ;; Auto vars:     Size  Location     Type
 17725 ;;		None
 17726 ;; Return value:  Size  Location     Type
 17727 ;;		None               void
 17728 ;; Registers used:
 17729 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17730 ;; Tracked objects:
 17731 ;;		On entry : 0/0
 17732 ;;		On exit  : 0/0
 17733 ;;		Unchanged: 0/0
 17734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17739 ;;Total ram usage:        0 bytes
 17740 ;; Hardware stack levels used:    1
 17741 ;; Hardware stack levels required when called:    5
 17742 ;; This function calls:
 17743 ;;		Nothing
 17744 ;; This function is called by:
 17745 ;;		_CC2500_TxData
 17746 ;;		_CC2500_RxData
 17747 ;;		_CC2500_PowerRST
 17748 ;;		_CC2500_WriteREG
 17749 ;;		_CC2500_WriteCommand
 17750 ;;		_CC2500_ReadStatus
 17751 ;;		_getAD
 17752 ;;		_TouchPower
 17753 ;;		_CC2500_ReadREG
 17754 ;; This function uses a non-reentrant model
 17755 ;;
 17756                           
 17757                           
 17758                           ;psect for function _Timeout_Counter
 17759  1E66                     _Timeout_Counter:	
 17760                           
 17761                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17762                           
 17763                           ;incstack = 0
 17764                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17765  1E66  3001               	movlw	1
 17766  1E67  0021               	movlb	1	; select bank1
 17767  1E68  07AC               	addwf	(_myMain^(0+128)+12),f
 17768  1E69  3000               	movlw	0
 17769  1E6A  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17770                           
 17771                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 25000) {
 17772  1E6B  300C               	movlw	12
 17773  1E6C  3EA0               	addlw	_myMain& (0+255)
 17774  1E6D  0086               	movwf	6
 17775  1E6E  0187               	clrf	7
 17776  1E6F  3F40               	moviw [0]fsr1
 17777  1E70  3AA8               	xorlw	168
 17778  1E71  1D03               	skipz
 17779  1E72  2E75               	goto	u9065
 17780  1E73  3F41               	moviw [1]fsr1
 17781  1E74  3A61               	xorlw	97
 17782  1E75                     u9065:	
 17783  1E75  1D03               	skipz
 17784  1E76  0008               	return
 17785                           
 17786                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17787  1E77  01AC               	clrf	(_myMain^(0+128)+12)
 17788  1E78  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17789                           
 17790                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17791  1E79  152B               	bsf	(_myMain^(0+128)+11),2
 17792  1E7A  0008               	return
 17793  1E7B                     __end_of_Timeout_Counter:	
 17794                           
 17795                           	psect	text125
 17796  1EA5                     __ptext125:	
 17797 ;; *************** function _CC2500_WriteByte *****************
 17798 ;; Defined at:
 17799 ;;		line 224 in file "../src/CC2500_B1.c"
 17800 ;; Parameters:    Size  Location     Type
 17801 ;;		None
 17802 ;; Auto vars:     Size  Location     Type
 17803 ;;  loop_a          1    1[BANK0 ] unsigned char 
 17804 ;; Return value:  Size  Location     Type
 17805 ;;		None               void
 17806 ;; Registers used:
 17807 ;;		wreg, status,2, status,0
 17808 ;; Tracked objects:
 17809 ;;		On entry : 0/0
 17810 ;;		On exit  : 0/0
 17811 ;;		Unchanged: 0/0
 17812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17817 ;;Total ram usage:        2 bytes
 17818 ;; Hardware stack levels used:    1
 17819 ;; Hardware stack levels required when called:    5
 17820 ;; This function calls:
 17821 ;;		Nothing
 17822 ;; This function is called by:
 17823 ;;		_CC2500_TxData
 17824 ;;		_CC2500_RxData
 17825 ;;		_CC2500_PowerRST
 17826 ;;		_CC2500_WriteREG
 17827 ;;		_CC2500_WriteCommand
 17828 ;;		_CC2500_ReadStatus
 17829 ;;		_CC2500_ReadREG
 17830 ;; This function uses a non-reentrant model
 17831 ;;
 17832                           
 17833                           
 17834                           ;psect for function _CC2500_WriteByte
 17835  1EA5                     _CC2500_WriteByte:	
 17836                           
 17837                           ;CC2500_B1.c: 225: unsigned char loop_a;
 17838                           ;CC2500_B1.c: 226: for (loop_a = 0; loop_a < 8; loop_a++) {
 17839                           
 17840                           ;incstack = 0
 17841                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17842  1EA5  0020               	movlb	0	; select bank0
 17843  1EA6  01A1               	clrf	CC2500_WriteByte@loop_a
 17844  1EA7                     L9:	
 17845  1EA7  3008               	movlw	8
 17846  1EA8  0221               	subwf	CC2500_WriteByte@loop_a,w
 17847  1EA9  1803               	btfsc	3,0
 17848  1EAA  0008               	return
 17849                           
 17850                           ;CC2500_B1.c: 227: if (SPI0Buffer & 0x80)
 17851  1EAB  0021               	movlb	1	; select bank1
 17852  1EAC  1FD1               	btfss	_SPI0Buffer^(0+128),7
 17853  1EAD  2EB1               	goto	l304
 17854                           
 17855                           ;CC2500_B1.c: 228: RC4 = 1;
 17856  1EAE  0020               	movlb	0	; select bank0
 17857  1EAF  160E               	bsf	14,4	;volatile
 17858  1EB0  2EB3               	goto	l305
 17859  1EB1                     l304:	
 17860                           
 17861                           ;CC2500_B1.c: 229: else
 17862                           ;CC2500_B1.c: 230: RC4 = 0;
 17863  1EB1  0020               	movlb	0	; select bank0
 17864  1EB2  120E               	bcf	14,4	;volatile
 17865  1EB3                     l305:	
 17866                           
 17867                           ;CC2500_B1.c: 231: RC3 = 1;
 17868  1EB3  158E               	bsf	14,3	;volatile
 17869                           
 17870                           ;CC2500_B1.c: 232: SPI0Buffer <<= 1;
 17871  1EB4  1003               	clrc
 17872  1EB5  0021               	movlb	1	; select bank1
 17873  1EB6  0DD1               	rlf	_SPI0Buffer^(0+128),f
 17874                           
 17875                           ;CC2500_B1.c: 233: RC3 = 0;
 17876  1EB7  0020               	movlb	0	; select bank0
 17877  1EB8  118E               	bcf	14,3	;volatile
 17878  1EB9  3001               	movlw	1
 17879  1EBA  00A0               	movwf	??_CC2500_WriteByte
 17880  1EBB  0820               	movf	??_CC2500_WriteByte,w
 17881  1EBC  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17882  1EBD  2EA7               	goto	L9
 17883  1EBE                     __end_of_CC2500_WriteByte:	
 17884                           
 17885                           	psect	text126
 17886  14C7                     __ptext126:	
 17887 ;; *************** function _Buzzer_Main *****************
 17888 ;; Defined at:
 17889 ;;		line 46 in file "../src/Buzzer_B1.c"
 17890 ;; Parameters:    Size  Location     Type
 17891 ;;		None
 17892 ;; Auto vars:     Size  Location     Type
 17893 ;;		None
 17894 ;; Return value:  Size  Location     Type
 17895 ;;		None               void
 17896 ;; Registers used:
 17897 ;;		wreg, status,2, status,0
 17898 ;; Tracked objects:
 17899 ;;		On entry : 0/0
 17900 ;;		On exit  : 0/0
 17901 ;;		Unchanged: 0/0
 17902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17906 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17907 ;;Total ram usage:        1 bytes
 17908 ;; Hardware stack levels used:    1
 17909 ;; Hardware stack levels required when called:    5
 17910 ;; This function calls:
 17911 ;;		Nothing
 17912 ;; This function is called by:
 17913 ;;		_main
 17914 ;; This function uses a non-reentrant model
 17915 ;;
 17916                           
 17917                           
 17918                           ;psect for function _Buzzer_Main
 17919  14C7                     _Buzzer_Main:	
 17920                           
 17921                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17922                           
 17923                           ;incstack = 0
 17924                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17925  14C7  0021               	movlb	1	; select bank1
 17926  14C8  1CAE               	btfss	_Buz1^(0+128),1
 17927  14C9  0008               	return
 17928                           
 17929                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17930  14CA  3001               	movlw	1
 17931  14CB  07AF               	addwf	(_Buz1^(0+128)+1),f
 17932  14CC  3000               	movlw	0
 17933  14CD  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 17934                           
 17935                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17936  14CE  0835               	movf	((_Buz1+1)^(0+128)+6),w
 17937  14CF  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 17938  14D0  1D03               	skipz
 17939  14D1  2CD4               	goto	u10945
 17940  14D2  0834               	movf	(_Buz1^(0+128)+6),w
 17941  14D3  022F               	subwf	(_Buz1^(0+128)+1),w
 17942  14D4                     u10945:	
 17943  14D4  1C03               	skipc
 17944  14D5  0008               	return
 17945                           
 17946                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17947  14D6  01AF               	clrf	(_Buz1^(0+128)+1)
 17948  14D7  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17949                           
 17950                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17951  14D8  12AE               	bcf	_Buz1^(0+128),5
 17952  14D9  0020               	movlb	0	; select bank0
 17953  14DA  1D8D               	btfss	13,3	;volatile
 17954  14DB  2CDE               	goto	l9748
 17955  14DC  0021               	movlb	1	; select bank1
 17956  14DD  16AE               	bsf	_Buz1^(0+128),5
 17957  14DE                     l9748:	
 17958                           
 17959                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17960  14DE  0021               	movlb	1	; select bank1
 17961  14DF  1AAE               	btfsc	_Buz1^(0+128),5
 17962  14E0  2D0A               	goto	l94
 17963                           
 17964                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17965  14E1  08B1               	movf	(_Buz1^(0+128)+3),f
 17966  14E2  1D03               	skipz
 17967  14E3  2D06               	goto	l95
 17968                           
 17969                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17970  14E4  1DAE               	btfss	_Buz1^(0+128),3
 17971  14E5  2CF4               	goto	l96
 17972                           
 17973                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17974  14E6  11AE               	bcf	_Buz1^(0+128),3
 17975                           
 17976                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17977  14E7  0832               	movf	(_Buz1^(0+128)+4),w
 17978  14E8  0020               	movlb	0	; select bank0
 17979  14E9  00A0               	movwf	??_Buzzer_Main
 17980  14EA  0820               	movf	??_Buzzer_Main,w
 17981  14EB  0021               	movlb	1	; select bank1
 17982  14EC  00B1               	movwf	(_Buz1^(0+128)+3)
 17983                           
 17984                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17985  14ED  0837               	movf	((_Buz1+1)^(0+128)+8),w
 17986  14EE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17987  14EF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17988  14F0  0836               	movf	(_Buz1^(0+128)+8),w
 17989  14F1  01B4               	clrf	(_Buz1^(0+128)+6)
 17990  14F2  07B4               	addwf	(_Buz1^(0+128)+6),f
 17991                           
 17992                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17993  14F3  0008               	return
 17994  14F4                     l96:	
 17995  14F4  1E2E               	btfss	_Buz1^(0+128),4
 17996  14F5  2D04               	goto	l98
 17997                           
 17998                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17999  14F6  122E               	bcf	_Buz1^(0+128),4
 18000                           
 18001                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18002  14F7  0833               	movf	(_Buz1^(0+128)+5),w
 18003  14F8  0020               	movlb	0	; select bank0
 18004  14F9  00A0               	movwf	??_Buzzer_Main
 18005  14FA  0820               	movf	??_Buzzer_Main,w
 18006  14FB  0021               	movlb	1	; select bank1
 18007  14FC  00B1               	movwf	(_Buz1^(0+128)+3)
 18008                           
 18009                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18010  14FD  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18011  14FE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18012  14FF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18013  1500  0838               	movf	(_Buz1^(0+128)+10),w
 18014  1501  01B4               	clrf	(_Buz1^(0+128)+6)
 18015  1502  07B4               	addwf	(_Buz1^(0+128)+6),f
 18016                           
 18017                           ;Buzzer_B1.c: 62: } else {
 18018  1503  0008               	return
 18019  1504                     l98:	
 18020                           
 18021                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18022  1504  10AE               	bcf	_Buz1^(0+128),1
 18023                           
 18024                           ;Buzzer_B1.c: 64: }
 18025                           ;Buzzer_B1.c: 65: } else {
 18026  1505  0008               	return
 18027  1506                     l95:	
 18028                           
 18029                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18030  1506  16AE               	bsf	_Buz1^(0+128),5
 18031                           
 18032                           ;Buzzer_B1.c: 68: RB3 = 1;
 18033  1507  0020               	movlb	0	; select bank0
 18034  1508  158D               	bsf	13,3	;volatile
 18035                           
 18036                           ;Buzzer_B1.c: 69: }
 18037                           ;Buzzer_B1.c: 70: } else {
 18038  1509  0008               	return
 18039  150A                     l94:	
 18040                           
 18041                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18042  150A  12AE               	bcf	_Buz1^(0+128),5
 18043                           
 18044                           ;Buzzer_B1.c: 73: RB3 = 0;
 18045  150B  0020               	movlb	0	; select bank0
 18046  150C  118D               	bcf	13,3	;volatile
 18047                           
 18048                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18049  150D  3001               	movlw	1
 18050  150E  0021               	movlb	1	; select bank1
 18051  150F  02B1               	subwf	(_Buz1^(0+128)+3),f
 18052  1510  0008               	return
 18053  1511                     __end_of_Buzzer_Main:	
 18054                           
 18055                           	psect	text127
 18056  1BF4                     __ptext127:	
 18057 ;; *************** function _Buzzer_Initialization *****************
 18058 ;; Defined at:
 18059 ;;		line 11 in file "../src/Buzzer_B1.c"
 18060 ;; Parameters:    Size  Location     Type
 18061 ;;		None
 18062 ;; Auto vars:     Size  Location     Type
 18063 ;;		None
 18064 ;; Return value:  Size  Location     Type
 18065 ;;		None               void
 18066 ;; Registers used:
 18067 ;;		None
 18068 ;; Tracked objects:
 18069 ;;		On entry : 0/0
 18070 ;;		On exit  : 0/0
 18071 ;;		Unchanged: 0/0
 18072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;Total ram usage:        0 bytes
 18078 ;; Hardware stack levels used:    1
 18079 ;; Hardware stack levels required when called:    5
 18080 ;; This function calls:
 18081 ;;		Nothing
 18082 ;; This function is called by:
 18083 ;;		_main
 18084 ;; This function uses a non-reentrant model
 18085 ;;
 18086                           
 18087                           
 18088                           ;psect for function _Buzzer_Initialization
 18089  1BF4                     _Buzzer_Initialization:	
 18090                           
 18091                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18092                           
 18093                           ;incstack = 0
 18094                           ; Regs used in _Buzzer_Initialization: []
 18095  1BF4  0021               	movlb	1	; select bank1
 18096  1BF5  142E               	bsf	_Buz1^(0+128),0
 18097  1BF6  0008               	return
 18098  1BF7                     __end_of_Buzzer_Initialization:	
 18099                           
 18100                           	psect	intentry
 18101  0004                     __pintentry:	
 18102 ;; *************** function _ISR *****************
 18103 ;; Defined at:
 18104 ;;		line 108 in file "../src/MCU_B1.c"
 18105 ;; Parameters:    Size  Location     Type
 18106 ;;		None
 18107 ;; Auto vars:     Size  Location     Type
 18108 ;;		None
 18109 ;; Return value:  Size  Location     Type
 18110 ;;		None               void
 18111 ;; Registers used:
 18112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18113 ;; Tracked objects:
 18114 ;;		On entry : 0/0
 18115 ;;		On exit  : 0/0
 18116 ;;		Unchanged: 0/0
 18117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18122 ;;Total ram usage:        1 bytes
 18123 ;; Hardware stack levels used:    1
 18124 ;; Hardware stack levels required when called:    4
 18125 ;; This function calls:
 18126 ;;		_IOC_ISR
 18127 ;;		_TMR1_ISR
 18128 ;; This function is called by:
 18129 ;;		Interrupt level 1
 18130 ;; This function uses a non-reentrant model
 18131 ;;
 18132                           
 18133  0004                     _ISR:	
 18134                           
 18135                           ;incstack = 0
 18136                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18137  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18138  0005  3180               	pagesel	$
 18139  0006  0020               	movlb	0	; select bank0
 18140  0007  087F               	movf	127,w
 18141  0008  00F4               	movwf	??_ISR
 18142                           
 18143                           ;MCU_B1.c: 110: IOC_ISR();
 18144  0009  319D  2553  3180   	fcall	_IOC_ISR
 18145                           
 18146                           ;MCU_B1.c: 112: ;;
 18147                           ;MCU_B1.c: 114: TMR1_ISR();
 18148  000C  3190  20B3         	fcall	_TMR1_ISR
 18149  000E  0874               	movf	??_ISR,w
 18150  000F  0020               	movlb	0	; select bank0
 18151  0010  00FF               	movwf	127
 18152  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18153  0012  0009               	retfie
 18154  0013                     __end_of_ISR:	
 18155                           
 18156                           	psect	text129
 18157  10B3                     __ptext129:	
 18158 ;; *************** function _TMR1_ISR *****************
 18159 ;; Defined at:
 18160 ;;		line 210 in file "../src/MCU_B1.c"
 18161 ;; Parameters:    Size  Location     Type
 18162 ;;		None
 18163 ;; Auto vars:     Size  Location     Type
 18164 ;;		None
 18165 ;; Return value:  Size  Location     Type
 18166 ;;		None               void
 18167 ;; Registers used:
 18168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18169 ;; Tracked objects:
 18170 ;;		On entry : 0/0
 18171 ;;		On exit  : 0/0
 18172 ;;		Unchanged: 0/0
 18173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18178 ;;Total ram usage:        0 bytes
 18179 ;; Hardware stack levels used:    1
 18180 ;; Hardware stack levels required when called:    2
 18181 ;; This function calls:
 18182 ;;		_setDimmerLights_IntrControl
 18183 ;; This function is called by:
 18184 ;;		_ISR
 18185 ;; This function uses a non-reentrant model
 18186 ;;
 18187                           
 18188                           
 18189                           ;psect for function _TMR1_ISR
 18190  10B3                     _TMR1_ISR:	
 18191                           
 18192                           ;MCU_B1.c: 212: if (TMR1IE == 1 && TMR1IF == 1) {
 18193                           
 18194                           ;incstack = 0
 18195                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18196  10B3  0021               	movlb	1	; select bank1
 18197  10B4  1C11               	btfss	17,0	;volatile
 18198  10B5  0008               	return
 18199  10B6  0020               	movlb	0	; select bank0
 18200  10B7  1C11               	btfss	17,0	;volatile
 18201  10B8  0008               	return
 18202                           
 18203                           ;MCU_B1.c: 213: TMR1H = (int)((65536-1480)/256);
 18204  10B9  30FA               	movlw	250
 18205  10BA  0097               	movwf	23	;volatile
 18206                           
 18207                           ;MCU_B1.c: 214: TMR1L = (int)((65536-1480)%256);
 18208  10BB  3038               	movlw	56
 18209  10BC  0096               	movwf	22	;volatile
 18210                           
 18211                           ;MCU_B1.c: 215: TMR1IF = 0;
 18212  10BD  1011               	bcf	17,0	;volatile
 18213                           
 18214                           ;MCU_B1.c: 220: setDimmerLights_IntrControl(1);
 18215  10BE  3001               	movlw	1
 18216  10BF  3183  235C  3190   	fcall	_setDimmerLights_IntrControl
 18217                           
 18218                           ;MCU_B1.c: 236: Timer1.Count++;
 18219  10C2  3001               	movlw	1
 18220  10C3  0022               	movlb	2	; select bank2
 18221  10C4  07A1               	addwf	(_Timer1^(0+256)+1),f
 18222  10C5  3000               	movlw	0
 18223  10C6  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18224                           
 18225                           ;MCU_B1.c: 237: if (Timer1.Count == 100) {
 18226  10C7  3001               	movlw	1
 18227  10C8  3E20               	addlw	_Timer1& (0+255)
 18228  10C9  0086               	movwf	6
 18229  10CA  3001               	movlw	1	; select bank2/3
 18230  10CB  0087               	movwf	7
 18231  10CC  3F40               	moviw [0]fsr1
 18232  10CD  3A64               	xorlw	100
 18233  10CE  1D03               	skipz
 18234  10CF  28D2               	goto	u729_25
 18235  10D0  3F41               	moviw [1]fsr1
 18236  10D1  3A00               	xorlw	0
 18237  10D2                     u729_25:	
 18238  10D2  1D03               	skipz
 18239  10D3  0008               	return
 18240                           
 18241                           ;MCU_B1.c: 238: Timer1.Count = 0;
 18242  10D4  01A1               	clrf	(_Timer1^(0+256)+1)
 18243  10D5  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18244                           
 18245                           ;MCU_B1.c: 239: Timer1.Timeout = 1;
 18246  10D6  1420               	bsf	_Timer1^(0+256),0
 18247                           
 18248                           ;MCU_B1.c: 240: }
 18249                           ;MCU_B1.c: 241: return;
 18250  10D7  0008               	return
 18251  10D8                     __end_of_TMR1_ISR:	
 18252                           
 18253                           	psect	text130
 18254  035C                     __ptext130:	
 18255 ;; *************** function _setDimmerLights_IntrControl *****************
 18256 ;; Defined at:
 18257 ;;		line 96 in file "../src/Dimmer_B1.c"
 18258 ;; Parameters:    Size  Location     Type
 18259 ;;  lights          1    wreg     unsigned char 
 18260 ;; Auto vars:     Size  Location     Type
 18261 ;;  lights          1    3[COMMON] unsigned char 
 18262 ;; Return value:  Size  Location     Type
 18263 ;;		None               void
 18264 ;; Registers used:
 18265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18266 ;; Tracked objects:
 18267 ;;		On entry : 0/0
 18268 ;;		On exit  : 0/0
 18269 ;;		Unchanged: 0/0
 18270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18273 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18274 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18275 ;;Total ram usage:        2 bytes
 18276 ;; Hardware stack levels used:    1
 18277 ;; Hardware stack levels required when called:    1
 18278 ;; This function calls:
 18279 ;;		_DimmerIntrPointSelect
 18280 ;; This function is called by:
 18281 ;;		_TMR1_ISR
 18282 ;; This function uses a non-reentrant model
 18283 ;;
 18284                           
 18285                           
 18286                           ;psect for function _setDimmerLights_IntrControl
 18287  035C                     _setDimmerLights_IntrControl:	
 18288                           
 18289                           ;incstack = 0
 18290                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18291                           ;setDimmerLights_IntrControl@lights stored from wreg
 18292  035C  00F3               	movwf	setDimmerLights_IntrControl@lights
 18293                           
 18294                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18295  035D  0873               	movf	setDimmerLights_IntrControl@lights,w
 18296  035E  319C  2478  3183   	fcall	_DimmerIntrPointSelect
 18297                           
 18298                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18299  0361  0876               	movf	_DimmerLightsIntr,w
 18300  0362  3E02               	addlw	2
 18301  0363  0086               	movwf	6
 18302  0364  3001               	movlw	1	; select bank2/3
 18303  0365  0087               	movwf	7
 18304  0366  1D01               	btfss	1,2
 18305  0367  2B86               	goto	i1l6794
 18306                           
 18307                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18308  0368  3001               	movlw	1
 18309  0369  00F2               	movwf	??_setDimmerLights_IntrControl
 18310  036A  0876               	movf	_DimmerLightsIntr,w
 18311  036B  3E03               	addlw	3
 18312  036C  0086               	movwf	6
 18313  036D  3001               	movlw	1	; select bank2/3
 18314  036E  0087               	movwf	7
 18315  036F  0872               	movf	??_setDimmerLights_IntrControl,w
 18316  0370  0781               	addwf	1,f
 18317                           
 18318                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18319  0371  0876               	movf	_DimmerLightsIntr,w
 18320  0372  3E03               	addlw	3
 18321  0373  0086               	movwf	6
 18322  0374  3001               	movlw	1	; select bank2/3
 18323  0375  0087               	movwf	7
 18324  0376  3039               	movlw	57
 18325  0377  0201               	subwf	1,w
 18326  0378  1C03               	skipc
 18327  0379  2B86               	goto	i1l6794
 18328                           
 18329                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18330  037A  0876               	movf	_DimmerLightsIntr,w
 18331  037B  3E03               	addlw	3
 18332  037C  0086               	movwf	6
 18333  037D  3001               	movlw	1	; select bank2/3
 18334  037E  0087               	movwf	7
 18335  037F  0181               	clrf	1
 18336                           
 18337                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18338  0380  0876               	movf	_DimmerLightsIntr,w
 18339  0381  3E02               	addlw	2
 18340  0382  0086               	movwf	6
 18341  0383  3001               	movlw	1	; select bank2/3
 18342  0384  0087               	movwf	7
 18343  0385  1101               	bcf	1,2
 18344  0386                     i1l6794:	
 18345                           
 18346                           ;Dimmer_B1.c: 241: }
 18347                           ;Dimmer_B1.c: 242: }
 18348                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18349  0386  0A76               	incf	_DimmerLightsIntr,w
 18350  0387  0086               	movwf	6
 18351  0388  3001               	movlw	1	; select bank2/3
 18352  0389  0087               	movwf	7
 18353  038A  1C01               	btfss	1,0
 18354  038B  2BB6               	goto	i1l6806
 18355                           
 18356                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18357  038C  0876               	movf	_DimmerLightsIntr,w
 18358  038D  3E03               	addlw	3
 18359  038E  0086               	movwf	6
 18360  038F  3001               	movlw	1	; select bank2/3
 18361  0390  0087               	movwf	7
 18362  0391  0876               	movf	_DimmerLightsIntr,w
 18363  0392  3E04               	addlw	4
 18364  0393  0084               	movwf	4
 18365  0394  3001               	movlw	1	; select bank2/3
 18366  0395  0085               	movwf	5
 18367  0396  0800               	movf	0,w
 18368  0397  0201               	subwf	1,w
 18369  0398  1C03               	skipc
 18370  0399  0008               	return
 18371                           
 18372                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18373  039A  0A76               	incf	_DimmerLightsIntr,w
 18374  039B  0086               	movwf	6
 18375  039C  3001               	movlw	1	; select bank2/3
 18376  039D  0087               	movwf	7
 18377  039E  1001               	bcf	1,0
 18378                           
 18379                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18380  039F  0A76               	incf	_DimmerLightsIntr,w
 18381  03A0  0086               	movwf	6
 18382  03A1  3001               	movlw	1	; select bank2/3
 18383  03A2  0087               	movwf	7
 18384  03A3  1581               	bsf	1,3
 18385                           
 18386                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18387  03A4  0876               	movf	_DimmerLightsIntr,w
 18388  03A5  0086               	movwf	6
 18389  03A6  3001               	movlw	1	; select bank2/3
 18390  03A7  0087               	movwf	7
 18391  03A8  1C01               	btfss	1,0
 18392  03A9  0008               	return
 18393                           
 18394                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18395  03AA  0876               	movf	_DimmerLightsIntr,w
 18396  03AB  0086               	movwf	6
 18397  03AC  3001               	movlw	1	; select bank2/3
 18398  03AD  0087               	movwf	7
 18399  03AE  1001               	bcf	1,0
 18400                           
 18401                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18402  03AF  0873               	movf	setDimmerLights_IntrControl@lights,w
 18403  03B0  3A01               	xorlw	1
 18404  03B1  1D03               	skipz
 18405  03B2  0008               	return
 18406                           
 18407                           ;Dimmer_B1.c: 253: RB1 = 0;
 18408  03B3  0020               	movlb	0	; select bank0
 18409  03B4  108D               	bcf	13,1	;volatile
 18410                           
 18411                           ;Dimmer_B1.c: 255: }
 18412                           ;Dimmer_B1.c: 262: }
 18413                           ;Dimmer_B1.c: 263: }
 18414                           ;Dimmer_B1.c: 264: } else {
 18415  03B5  0008               	return
 18416  03B6                     i1l6806:	
 18417                           
 18418                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18419  03B6  0A76               	incf	_DimmerLightsIntr,w
 18420  03B7  0086               	movwf	6
 18421  03B8  3001               	movlw	1	; select bank2/3
 18422  03B9  0087               	movwf	7
 18423  03BA  1D81               	btfss	1,3
 18424  03BB  0008               	return
 18425                           
 18426                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18427  03BC  0A76               	incf	_DimmerLightsIntr,w
 18428  03BD  0086               	movwf	6
 18429  03BE  3001               	movlw	1	; select bank2/3
 18430  03BF  0087               	movwf	7
 18431  03C0  1181               	bcf	1,3
 18432                           
 18433                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18434  03C1  3001               	movlw	1
 18435  03C2  00F2               	movwf	??_setDimmerLights_IntrControl
 18436  03C3  0876               	movf	_DimmerLightsIntr,w
 18437  03C4  3E05               	addlw	5
 18438  03C5  0086               	movwf	6
 18439  03C6  3001               	movlw	1	; select bank2/3
 18440  03C7  0087               	movwf	7
 18441  03C8  0872               	movf	??_setDimmerLights_IntrControl,w
 18442  03C9  0781               	addwf	1,f
 18443                           
 18444                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18445  03CA  0876               	movf	_DimmerLightsIntr,w
 18446  03CB  3E05               	addlw	5
 18447  03CC  0086               	movwf	6
 18448  03CD  3001               	movlw	1	; select bank2/3
 18449  03CE  0087               	movwf	7
 18450  03CF  0876               	movf	_DimmerLightsIntr,w
 18451  03D0  3E08               	addlw	8
 18452  03D1  0084               	movwf	4
 18453  03D2  3001               	movlw	1	; select bank2/3
 18454  03D3  0085               	movwf	5
 18455  03D4  0800               	movf	0,w
 18456  03D5  0201               	subwf	1,w
 18457  03D6  1C03               	skipc
 18458  03D7  2C1A               	goto	i1l6832
 18459                           
 18460                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18461  03D8  0876               	movf	_DimmerLightsIntr,w
 18462  03D9  3E05               	addlw	5
 18463  03DA  0086               	movwf	6
 18464  03DB  3001               	movlw	1	; select bank2/3
 18465  03DC  0087               	movwf	7
 18466  03DD  0181               	clrf	1
 18467                           
 18468                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18469  03DE  0A76               	incf	_DimmerLightsIntr,w
 18470  03DF  0086               	movwf	6
 18471  03E0  3001               	movlw	1	; select bank2/3
 18472  03E1  0087               	movwf	7
 18473  03E2  1F01               	btfss	1,6
 18474  03E3  0008               	return
 18475                           
 18476                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18477  03E4  0A76               	incf	_DimmerLightsIntr,w
 18478  03E5  0086               	movwf	6
 18479  03E6  3001               	movlw	1	; select bank2/3
 18480  03E7  0087               	movwf	7
 18481  03E8  1B81               	btfsc	1,7
 18482  03E9  2C03               	goto	i1l6826
 18483                           
 18484                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 18485  03EA  0876               	movf	_DimmerLightsIntr,w
 18486  03EB  3E04               	addlw	4
 18487  03EC  0086               	movwf	6
 18488  03ED  3001               	movlw	1	; select bank2/3
 18489  03EE  0087               	movwf	7
 18490  03EF  3038               	movlw	56
 18491  03F0  0201               	subwf	1,w
 18492  03F1  1803               	skipnc
 18493  03F2  2BFD               	goto	i1l6824
 18494                           
 18495                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18496  03F3  3001               	movlw	1
 18497  03F4  00F2               	movwf	??_setDimmerLights_IntrControl
 18498  03F5  0876               	movf	_DimmerLightsIntr,w
 18499  03F6  3E04               	addlw	4
 18500  03F7  0086               	movwf	6
 18501  03F8  3001               	movlw	1	; select bank2/3
 18502  03F9  0087               	movwf	7
 18503  03FA  0872               	movf	??_setDimmerLights_IntrControl,w
 18504  03FB  0781               	addwf	1,f
 18505                           
 18506                           ;Dimmer_B1.c: 274: } else {
 18507  03FC  0008               	return
 18508  03FD                     i1l6824:	
 18509                           
 18510                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18511  03FD  0A76               	incf	_DimmerLightsIntr,w
 18512  03FE  0086               	movwf	6
 18513  03FF  3001               	movlw	1	; select bank2/3
 18514  0400  0087               	movwf	7
 18515  0401  1781               	bsf	1,7
 18516                           
 18517                           ;Dimmer_B1.c: 276: }
 18518                           ;Dimmer_B1.c: 277: } else {
 18519  0402  0008               	return
 18520  0403                     i1l6826:	
 18521                           
 18522                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18523  0403  0876               	movf	_DimmerLightsIntr,w
 18524  0404  3E04               	addlw	4
 18525  0405  0086               	movwf	6
 18526  0406  3001               	movlw	1	; select bank2/3
 18527  0407  0087               	movwf	7
 18528  0408  300D               	movlw	13
 18529  0409  0201               	subwf	1,w
 18530  040A  1C03               	skipc
 18531  040B  2C14               	goto	i1l6830
 18532                           
 18533                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 18534  040C  0876               	movf	_DimmerLightsIntr,w
 18535  040D  3E04               	addlw	4
 18536  040E  0086               	movwf	6
 18537  040F  3001               	movlw	1	; select bank2/3
 18538  0410  0087               	movwf	7
 18539  0411  3001               	movlw	1
 18540  0412  0281               	subwf	1,f
 18541                           
 18542                           ;Dimmer_B1.c: 280: } else
 18543  0413  0008               	return
 18544  0414                     i1l6830:	
 18545                           
 18546                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 18547  0414  0A76               	incf	_DimmerLightsIntr,w
 18548  0415  0086               	movwf	6
 18549  0416  3001               	movlw	1	; select bank2/3
 18550  0417  0087               	movwf	7
 18551  0418  1381               	bcf	1,7
 18552                           
 18553                           ;Dimmer_B1.c: 282: }
 18554                           ;Dimmer_B1.c: 283: }
 18555                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 18556  0419  0008               	return
 18557  041A                     i1l6832:	
 18558  041A  0876               	movf	_DimmerLightsIntr,w
 18559  041B  3E02               	addlw	2
 18560  041C  0086               	movwf	6
 18561  041D  3001               	movlw	1	; select bank2/3
 18562  041E  0087               	movwf	7
 18563  041F  1C01               	btfss	1,0
 18564  0420  0008               	return
 18565                           
 18566                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18567  0421  0876               	movf	_DimmerLightsIntr,w
 18568  0422  3E04               	addlw	4
 18569  0423  0086               	movwf	6
 18570  0424  3001               	movlw	1	; select bank2/3
 18571  0425  0087               	movwf	7
 18572  0426  0876               	movf	_DimmerLightsIntr,w
 18573  0427  3E06               	addlw	6
 18574  0428  0084               	movwf	4
 18575  0429  3001               	movlw	1	; select bank2/3
 18576  042A  0085               	movwf	5
 18577  042B  0800               	movf	0,w
 18578  042C  0201               	subwf	1,w
 18579  042D  1803               	skipnc
 18580  042E  2C39               	goto	i1l6838
 18581                           
 18582                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 18583  042F  3001               	movlw	1
 18584  0430  00F2               	movwf	??_setDimmerLights_IntrControl
 18585  0431  0876               	movf	_DimmerLightsIntr,w
 18586  0432  3E04               	addlw	4
 18587  0433  0086               	movwf	6
 18588  0434  3001               	movlw	1	; select bank2/3
 18589  0435  0087               	movwf	7
 18590  0436  0872               	movf	??_setDimmerLights_IntrControl,w
 18591  0437  0781               	addwf	1,f
 18592                           
 18593                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18594  0438  0008               	return
 18595  0439                     i1l6838:	
 18596  0439  0876               	movf	_DimmerLightsIntr,w
 18597  043A  3E06               	addlw	6
 18598  043B  0086               	movwf	6
 18599  043C  3001               	movlw	1	; select bank2/3
 18600  043D  0087               	movwf	7
 18601  043E  0876               	movf	_DimmerLightsIntr,w
 18602  043F  3E04               	addlw	4
 18603  0440  0084               	movwf	4
 18604  0441  3001               	movlw	1	; select bank2/3
 18605  0442  0085               	movwf	5
 18606  0443  0800               	movf	0,w
 18607  0444  0201               	subwf	1,w
 18608  0445  1803               	skipnc
 18609  0446  2C4F               	goto	i1l6842
 18610                           
 18611                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 18612  0447  0876               	movf	_DimmerLightsIntr,w
 18613  0448  3E04               	addlw	4
 18614  0449  0086               	movwf	6
 18615  044A  3001               	movlw	1	; select bank2/3
 18616  044B  0087               	movwf	7
 18617  044C  3001               	movlw	1
 18618  044D  0281               	subwf	1,f
 18619                           
 18620                           ;Dimmer_B1.c: 289: } else {
 18621  044E  0008               	return
 18622  044F                     i1l6842:	
 18623                           
 18624                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 18625  044F  0876               	movf	_DimmerLightsIntr,w
 18626  0450  3E02               	addlw	2
 18627  0451  0086               	movwf	6
 18628  0452  3001               	movlw	1	; select bank2/3
 18629  0453  0087               	movwf	7
 18630  0454  1001               	bcf	1,0
 18631  0455  0008               	return
 18632  0456                     __end_of_setDimmerLights_IntrControl:	
 18633                           
 18634                           	psect	text131
 18635  1C78                     __ptext131:	
 18636 ;; *************** function _DimmerIntrPointSelect *****************
 18637 ;; Defined at:
 18638 ;;		line 74 in file "../src/Dimmer_B1.c"
 18639 ;; Parameters:    Size  Location     Type
 18640 ;;  lights          1    wreg     unsigned char 
 18641 ;; Auto vars:     Size  Location     Type
 18642 ;;  lights          1    1[COMMON] unsigned char 
 18643 ;; Return value:  Size  Location     Type
 18644 ;;		None               void
 18645 ;; Registers used:
 18646 ;;		wreg
 18647 ;; Tracked objects:
 18648 ;;		On entry : 0/0
 18649 ;;		On exit  : 0/0
 18650 ;;		Unchanged: 0/0
 18651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18655 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18656 ;;Total ram usage:        2 bytes
 18657 ;; Hardware stack levels used:    1
 18658 ;; This function calls:
 18659 ;;		Nothing
 18660 ;; This function is called by:
 18661 ;;		_setDimmerLights_IntrControl
 18662 ;; This function uses a non-reentrant model
 18663 ;;
 18664                           
 18665                           
 18666                           ;psect for function _DimmerIntrPointSelect
 18667  1C78                     _DimmerIntrPointSelect:	
 18668                           
 18669                           ;incstack = 0
 18670                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18671                           ;DimmerIntrPointSelect@lights stored from wreg
 18672  1C78  00F1               	movwf	DimmerIntrPointSelect@lights
 18673                           
 18674                           ;Dimmer_B1.c: 76: if (lights == 1) {
 18675  1C79  0871               	movf	DimmerIntrPointSelect@lights,w
 18676  1C7A  3A01               	xorlw	1
 18677  1C7B  1D03               	skipz
 18678  1C7C  0008               	return
 18679                           
 18680                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 18681  1C7D  3053               	movlw	_DimmerLights1& (0+255)
 18682  1C7E  00F0               	movwf	??_DimmerIntrPointSelect
 18683  1C7F  0870               	movf	??_DimmerIntrPointSelect,w
 18684  1C80  00F6               	movwf	_DimmerLightsIntr
 18685  1C81  0008               	return
 18686  1C82                     __end_of_DimmerIntrPointSelect:	
 18687                           
 18688                           	psect	text132
 18689  1D53                     __ptext132:	
 18690 ;; *************** function _IOC_ISR *****************
 18691 ;; Defined at:
 18692 ;;		line 402 in file "../src/MCU_B1.c"
 18693 ;; Parameters:    Size  Location     Type
 18694 ;;		None
 18695 ;; Auto vars:     Size  Location     Type
 18696 ;;		None
 18697 ;; Return value:  Size  Location     Type
 18698 ;;		None               void
 18699 ;; Registers used:
 18700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18701 ;; Tracked objects:
 18702 ;;		On entry : 0/0
 18703 ;;		On exit  : 0/0
 18704 ;;		Unchanged: 0/0
 18705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18710 ;;Total ram usage:        0 bytes
 18711 ;; Hardware stack levels used:    1
 18712 ;; Hardware stack levels required when called:    3
 18713 ;; This function calls:
 18714 ;;		_setDimmerReClock
 18715 ;; This function is called by:
 18716 ;;		_ISR
 18717 ;; This function uses a non-reentrant model
 18718 ;;
 18719                           
 18720                           
 18721                           ;psect for function _IOC_ISR
 18722  1D53                     _IOC_ISR:	
 18723                           
 18724                           ;MCU_B1.c: 403: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18725                           
 18726                           ;incstack = 0
 18727                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18728  1D53  1D8B               	btfss	11,3	;volatile
 18729  1D54  0008               	return
 18730  1D55  1C0B               	btfss	11,0	;volatile
 18731  1D56  0008               	return
 18732  1D57  0027               	movlb	7	; select bank7
 18733  1D58  1D16               	btfss	22,2	;volatile
 18734  1D59  0008               	return
 18735                           
 18736                           ;MCU_B1.c: 404: IOCBF2 = 0;
 18737  1D5A  1116               	bcf	22,2	;volatile
 18738                           
 18739                           ;MCU_B1.c: 405: IOCIF = 0;
 18740  1D5B  100B               	bcf	11,0	;volatile
 18741                           
 18742                           ;MCU_B1.c: 406: if (myMain.PowerON == 1) {
 18743  1D5C  0021               	movlb	1	; select bank1
 18744  1D5D  1C20               	btfss	_myMain^(0+128),0
 18745  1D5E  0008               	return
 18746                           
 18747                           ;MCU_B1.c: 409: setDimmerReClock();
 18748  1D5F  319C  2406         	fcall	_setDimmerReClock
 18749                           
 18750                           ;MCU_B1.c: 411: }
 18751                           ;MCU_B1.c: 412: return;
 18752  1D61  0008               	return
 18753  1D62                     __end_of_IOC_ISR:	
 18754                           
 18755                           	psect	text133
 18756  1C06                     __ptext133:	
 18757 ;; *************** function _setDimmerReClock *****************
 18758 ;; Defined at:
 18759 ;;		line 245 in file "../src/MCU_B1.c"
 18760 ;; Parameters:    Size  Location     Type
 18761 ;;		None
 18762 ;; Auto vars:     Size  Location     Type
 18763 ;;		None
 18764 ;; Return value:  Size  Location     Type
 18765 ;;		None               void
 18766 ;; Registers used:
 18767 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18768 ;; Tracked objects:
 18769 ;;		On entry : 0/0
 18770 ;;		On exit  : 0/0
 18771 ;;		Unchanged: 0/0
 18772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18777 ;;Total ram usage:        0 bytes
 18778 ;; Hardware stack levels used:    1
 18779 ;; Hardware stack levels required when called:    2
 18780 ;; This function calls:
 18781 ;;		_setDimmerLights_IntrIOC_GO
 18782 ;; This function is called by:
 18783 ;;		_IOC_ISR
 18784 ;; This function uses a non-reentrant model
 18785 ;;
 18786                           
 18787                           
 18788                           ;psect for function _setDimmerReClock
 18789  1C06                     _setDimmerReClock:	
 18790                           
 18791                           ;MCU_B1.c: 250: setDimmerLights_IntrIOC_GO(1);
 18792                           
 18793                           ;incstack = 0
 18794                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18795  1C06  3001               	movlw	1
 18796  1C07  3192  2292         	fcall	_setDimmerLights_IntrIOC_GO
 18797  1C09  0008               	return
 18798  1C0A                     __end_of_setDimmerReClock:	
 18799                           
 18800                           	psect	text134
 18801  1292                     __ptext134:	
 18802 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18803 ;; Defined at:
 18804 ;;		line 28 in file "../src/Dimmer_B1.c"
 18805 ;; Parameters:    Size  Location     Type
 18806 ;;  lights          1    wreg     unsigned char 
 18807 ;; Auto vars:     Size  Location     Type
 18808 ;;  lights          1    2[COMMON] unsigned char 
 18809 ;; Return value:  Size  Location     Type
 18810 ;;		None               void
 18811 ;; Registers used:
 18812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18813 ;; Tracked objects:
 18814 ;;		On entry : 0/0
 18815 ;;		On exit  : 0/0
 18816 ;;		Unchanged: 0/0
 18817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18821 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18822 ;;Total ram usage:        1 bytes
 18823 ;; Hardware stack levels used:    1
 18824 ;; Hardware stack levels required when called:    1
 18825 ;; This function calls:
 18826 ;;		_DimmerIntrIOCPointSelect
 18827 ;; This function is called by:
 18828 ;;		_setDimmerReClock
 18829 ;; This function uses a non-reentrant model
 18830 ;;
 18831                           
 18832                           
 18833                           ;psect for function _setDimmerLights_IntrIOC_GO
 18834  1292                     _setDimmerLights_IntrIOC_GO:	
 18835                           
 18836                           ;incstack = 0
 18837                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18838                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18839  1292  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18840                           
 18841                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 18842  1293  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18843  1294  319C  2496  3192   	fcall	_DimmerIntrIOCPointSelect
 18844                           
 18845                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 18846  1297  0021               	movlb	1	; select bank1
 18847  1298  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18848  1299  3E02               	addlw	2
 18849  129A  0086               	movwf	6
 18850  129B  3001               	movlw	1	; select bank2/3
 18851  129C  0087               	movwf	7
 18852  129D  1901               	btfsc	1,2
 18853  129E  0008               	return
 18854  129F  0020               	movlb	0	; select bank0
 18855  12A0  1D0D               	btfss	13,2	;volatile
 18856  12A1  0008               	return
 18857                           
 18858                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 18859  12A2  0021               	movlb	1	; select bank1
 18860  12A3  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18861  12A4  3E02               	addlw	2
 18862  12A5  0086               	movwf	6
 18863  12A6  3001               	movlw	1	; select bank2/3
 18864  12A7  0087               	movwf	7
 18865  12A8  1501               	bsf	1,2
 18866                           
 18867                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 18868  12A9  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18869  12AA  0086               	movwf	6
 18870  12AB  3001               	movlw	1	; select bank2/3
 18871  12AC  0087               	movwf	7
 18872  12AD  1401               	bsf	1,0
 18873                           
 18874                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 18875  12AE  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18876  12AF  0086               	movwf	6
 18877  12B0  3001               	movlw	1	; select bank2/3
 18878  12B1  0087               	movwf	7
 18879  12B2  1481               	bsf	1,1
 18880                           
 18881                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 18882  12B3  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 18883                           
 18884                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 18885  12B4  0A4D               	incf	_DimmerLightsIntrIOC^(0+128),w
 18886  12B5  0086               	movwf	6
 18887  12B6  3001               	movlw	1	; select bank2/3
 18888  12B7  0087               	movwf	7
 18889  12B8  1D01               	btfss	1,2
 18890  12B9  0008               	return
 18891                           
 18892                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 18893  12BA  084D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18894  12BB  0086               	movwf	6
 18895  12BC  3001               	movlw	1	; select bank2/3
 18896  12BD  0087               	movwf	7
 18897  12BE  1401               	bsf	1,0
 18898                           
 18899                           ;Dimmer_B1.c: 55: if (lights == 1) {
 18900  12BF  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18901  12C0  3A01               	xorlw	1
 18902  12C1  1D03               	skipz
 18903  12C2  0008               	return
 18904                           
 18905                           ;Dimmer_B1.c: 56: RB1 = 1;
 18906  12C3  0020               	movlb	0	; select bank0
 18907  12C4  148D               	bsf	13,1	;volatile
 18908  12C5  0008               	return
 18909  12C6                     __end_of_setDimmerLights_IntrIOC_GO:	
 18910                           
 18911                           	psect	text135
 18912  1C96                     __ptext135:	
 18913 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18914 ;; Defined at:
 18915 ;;		line 8 in file "../src/Dimmer_B1.c"
 18916 ;; Parameters:    Size  Location     Type
 18917 ;;  lights          1    wreg     unsigned char 
 18918 ;; Auto vars:     Size  Location     Type
 18919 ;;  lights          1    1[COMMON] unsigned char 
 18920 ;; Return value:  Size  Location     Type
 18921 ;;		None               void
 18922 ;; Registers used:
 18923 ;;		wreg
 18924 ;; Tracked objects:
 18925 ;;		On entry : 0/0
 18926 ;;		On exit  : 0/0
 18927 ;;		Unchanged: 0/0
 18928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18931 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18932 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18933 ;;Total ram usage:        2 bytes
 18934 ;; Hardware stack levels used:    1
 18935 ;; This function calls:
 18936 ;;		Nothing
 18937 ;; This function is called by:
 18938 ;;		_setDimmerLights_IntrIOC_GO
 18939 ;; This function uses a non-reentrant model
 18940 ;;
 18941                           
 18942                           
 18943                           ;psect for function _DimmerIntrIOCPointSelect
 18944  1C96                     _DimmerIntrIOCPointSelect:	
 18945                           
 18946                           ;incstack = 0
 18947                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18948                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18949  1C96  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18950                           
 18951                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18952  1C97  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18953  1C98  3A01               	xorlw	1
 18954  1C99  1D03               	skipz
 18955  1C9A  0008               	return
 18956                           
 18957                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18958  1C9B  3053               	movlw	_DimmerLights1& (0+255)
 18959  1C9C  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18960  1C9D  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18961  1C9E  0021               	movlb	1	; select bank1
 18962  1C9F  00CD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18963  1CA0  0008               	return
 18964  1CA1                     __end_of_DimmerIntrIOCPointSelect:	
 18965  007E                     btemp	set	126	;btemp
 18966  007E                     pic14e$flags	set	126
 18967  007E                     wtemp	set	126
 18968  007E                     wtemp0	set	126
 18969  0080                     wtemp1	set	128
 18970  0082                     wtemp2	set	130
 18971  0084                     wtemp3	set	132
 18972  0086                     wtemp4	set	134
 18973  0088                     wtemp5	set	136
 18974  007F                     wtemp6	set	127
 18975  007E                     ttemp	set	126
 18976  007E                     ttemp0	set	126
 18977  0081                     ttemp1	set	129
 18978  0084                     ttemp2	set	132
 18979  0087                     ttemp3	set	135
 18980  007F                     ttemp4	set	127
 18981  007E                     ltemp	set	126
 18982  007E                     ltemp0	set	126
 18983  0082                     ltemp1	set	130
 18984  0086                     ltemp2	set	134
 18985  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         230
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      80
    BANK2            80      3      80
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  127344
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7631
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7631
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0      62
                                              2 BANK0      1     1      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     880
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     880
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45464
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   45464
                                              0 BANK2      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44206
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40065
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13473
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1762
                                             13 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18758
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16329
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14095
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1788
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      43
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     201
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     911
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     911
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1209
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    6962
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35347
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35038
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17700
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   16945
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     818
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5786
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5786
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4027
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3612
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3392
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0      66
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_LightsStatus
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      3      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Dec 23 16:00:21 2014

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l84 177F  
                                      l94 150A                                        l86 1793  
                                      l95 1506                                        l96 14F4  
                                      l98 1504                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 108F                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1CB7  
                  __end_of_setDelayOff_GO 16A2                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0B23  
                    _setDimmerLights_Line 1D45                              ___ftadd@sign 004B  
                                     l231 0AFB                                       l304 1EB1  
                                     l305 1EB3                      _setDimmerLights_SwOn 13D6  
                                     l348 1102                                       l730 1F22  
                                     _GIE 005F                                       _CRC 00CB  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000A                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CE  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E3                 setDimmerLights_Adj@status 006B  
                __end_of_CC2500_WriteByte 1EBE                     _Buzzer_Initialization 1BF4  
                         __end_of_ADC_Set 1C3E                           ?_DelayTimejudge 0070  
                                     wreg 0009      setDimmerLights_Initialization@lights 0023  
            getDimmerLights_Status@status 0023                           _setDimmerLights 15FD  
                       ??_getSw_KeyStatus 0020                     _setDimmerLights_AdjRF 108F  
                   _setDimmerLights_AdjOn 11A2                                      ?_ISR 0070  
         setDimmerLights_ErrorClose@count 00E9                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1D62                                Load_Main@i 002C  
                            ___ftdiv@sign 003D                                      l1212 11F8  
                                    l1221 1557                                      l2102 12F6  
                                    l2041 0D85                                      l2116 098B  
                                    l2052 0D63                                      l2045 0D42  
                                    l2054 0D78                                      l1424 1275  
                                    l2080 1D67                                      l2128 1475  
                                    l1425 1290                  ?_DimmerLightsPointSelect 0070  
                                    l1429 128C                                      l1198 132A  
                                    l2416 0353                                      l1570 0073  
                                    l2418 0230                                      l1459 0703  
                                    l1571 006E                                      l1723 0FFC  
                         __end_of_IOC_Set 1D2B                                      l1398 1449  
                                    l1567 01E7                                      l1728 0FF6  
                                    l1577 01C3                                      l1569 0077  
                                    l1578 01C1                                      l2396 1E97  
                                    l2591 1F6A                                      l2752 09BF  
                                    l2781 04F5                                      l2758 09D6  
                                    l8010 1DED                                      l8100 0534  
                                    l8006 1DE7                                      l8110 0EBE  
                                    l8040 047E                                      l8050 0494  
                                    l8130 0F15                                      l8210 0DA2  
                                    l8028 1FE9                                      l8044 0485  
                                    l8116 0ED4                     _setDimmerLights_SwOff 155F  
                                    l8070 04CB                                      l8062 04AE  
                                    l8230 0DE0                                      l9102 0C38  
                                    l8080 04E7                                      l8072 04D0  
                                    l8240 0DF9                                      l8152 071B  
                                    l8322 16EF                                      l8314 16DE  
                                    l8306 16C0                                      l8090 0519  
                                    l8082 04F1                                      l8074 04D4  
                                    l8138 0F2E                                      l9026 11E0  
                                    l8170 076C                                      l9114 0C4E  
                                    l9122 0C6D                                      l8308 16CC  
                                    l8068 04C1                                      l8244 0E07  
                                    l8236 0DED                                      l8228 0DD2  
                                    l8500 120C                                      l8404 1401  
                                    l8318 16E7                                      l8086 0507  
                                    l8238 0DF6                                      l9070 1DCD  
                                    l8182 0788                                      l8174 0774  
                                    l8158 0731                                      l8406 1407  
                                    l8264 1175                                      l9304 1CBF  
                                    l9320 117D                                      l8600 15E1  
                                    l9128 0C78                                      l9152 1DDE  
                                    l9170 07DD                                      l8290 16AD  
                                    l8370 1687                                      l8418 1594  
                                    l9322 119F                                      l8186 0790  
                                    l9180 07ED                                      l9172 07E0  
                                    l8372 168D                                      l8700 13AC  
                                    l8604 15F0                                      l9092 0C27  
                                    l9412 1FB1                                      l8630 1ED0  
                                    l9182 07F0                                      l8366 1681  
                                    l8438 17F1                                      l9430 152D  
                                    l9318 119A                                      l8550 1F5A  
                                    l9406 1FA9                                      l8624 1EC7  
                                    l9176 07E6                                      l8296 16B8  
                                    l9424 1518                                      l8640 10E2  
                                    l8800 0B0A                                      l9504 0FCB  
                                    l9408 1FAC                                      l8626 1ECA  
                                    l9186 07F6                                      l8570 08D9  
                                    l8714 13CB                                      l8706 13B5  
                                    l9274 0B4C                                      l8642 10E5  
                                    l8802 0B0E                                      l8618 1464  
                                    l9506 0FCD                                      l8572 090E  
                                    l9276 0B52                                      l8548 1F54  
                                    l8820 0B94                                      l8804 0B11  
                                    l9604 1E9C                                      l9516 0FE2  
                   _myMain_Initialization 1D71                                      l9286 0B7B  
                                    l9702 1F64                                      l8646 10EB  
                                    l8822 0B97                                      l8750 0953  
                                    l9622 021B                                      l9518 0FE3  
                                    l8568 0908                                      l8672 1270  
                                    l9288 0B81                                      l8808 0B17  
                                    l8752 0968                                      l9560 0D4D  
                                    l9544 0D29                                      l9608 1EA2  
                                    l8682 1287                                      l8674 1279  
                                    l9730 138D                                      l9722 136F  
                                    l8842 0BB9                                      l8826 0B9D  
                                    l8770 0AC7                                      l8754 096C  
                                    l8746 092E                                      l9474 0F6C  
                                    l9820 05BE                                      l9724 137B  
                                    l8860 0BE4                                      l8836 0BB0  
                                    l8828 0BA0                                      l8772 0ACA  
                                    l7982 099C                                      l9734 1396  
                                    l8838 0BB3                                      l8790 0AE2  
                                    l8758 0970                                      l9582 0D69  
                                    l9566 0D53                                      l9662 02CE  
                                    l9638 025E                                      l9910 0CA3  
                                    l8928 0810                                      l7992 09C4  
                                    l7984 09A6                                      l8776 0AD0  
                                    l9648 0290                                      l9672 0300  
                                    _CFGS 0CAE                                      l8882 1113  
                                    l8890 1075                                      l7994 09CC  
                                    l7986 09AB                                      l7978 0995  
                                    l8858 0BCB                                      l8794 0B01  
                                    l9922 0CD0                                      l9748 14DE  
                                    l8884 111E                                      l8892 1078  
                                    l8948 162D                                      l8796 0B04  
                                    l8958 1643                                      l9790 1F24  
                                    l9918 0CC8                                      l8896 107E  
                                    l8968 170E                                      l9952 14B8  
                            __CFG_WDTE$ON 0000                                      l9938 0CFD  
                                    l9970 1429                                      l9998 0055  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u9010 17B1  
                                    u8115 09C7                                      u9015 17AF  
                                    u8145 09DD                                      u8075 09A1  
                                    u8315 04C2                                      u8095 09BA  
                                    u9065 1E75                                      u8345 04D5  
                                    u9155 08E4                                      u8285 04AF  
                                    u8445 0EE6                                      u8605 0797  
                                    u8525 073D                                      u8375 04E8  
                                    u8455 0EF6                                      u8535 074D  
                                    u8465 0F16                                      u8705 0DEE  
                                    u8475 0F25                                      u8555 0775  
                                    u8805 16C3                                      u8485 0F2F  
                                    u8645 0DA9                                      u8565 077B  
                                    u8825 16CD                                      u8835 16D7  
                                    u8755 1161                                      u8675 0DD3  
                                    u8595 0791                                      u8845 16DF  
                                    u9595 1108                                      _LWLO 0CAD  
                                    _RSSI 00CF                                      _WREN 0CAA  
                                    _WPUB 020D                                      _Buz1 00AE  
                                    _Load 0125                                      _Temp 00D7  
                                    _main 0817                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 08CF                           __end_of_RF_Main 1C00  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1CCD                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                          _setDimmerReClock 1C06  
                                    start 0013                                      ttemp 007E  
                                    wtemp 007E                       DelayTimejudge@value 0029  
              __end_of_setRFSW_AdjControl 1489                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
          getAll_DimmerLights_AdjSw@adjsw 0026              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2172 0023                         ?_getDimmer_LoadGO 0070  
          getAll_DimmerLights_AdjSw@count 0023                                     ??_ISR 0074  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
 __end_of_getDimmerLights_Allow_Condition 0817  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 0801                    _getDimmerLights_Status 1DA0  
                      ??_getDimmer_LoadGO 0020            __size_of_DimmerIntrPointSelect 000A  
                        __end_of_LED_Main 1C26          setDimmerLights_ErrorClose@lights 00EA  
           __end_of_DimmerIntrPointSelect 1C82                     ?_getDimmerLights_Line 0070  
                                   l10032 009A                                     l10016 0076  
                                   l10202 06F9                                     l10126 01D6  
                                   l10070 0162                                     l10038 00CC  
                                   l10160 0652                                     l10064 0155  
                                   l10154 0643                                     l10074 0181  
                                   l10172 068D                                     l10164 0661  
                                   l10190 06D4                                     l10174 0664  
                                   l10078 018D                                     l10262 083B  
                                   l10192 06AB                                     l10176 0695  
                                   l10088 01A3                                     l10194 06DC  
                                   l10266 0846                                     l10196 06E6  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01EC                           __end_of___awdiv 16F6  
                         __end_of___ftadd 054C                           __end_of___ftdiv 0F50  
                         __end_of___ftneg 1C66                                     u11105 1321  
                                   u10225 1186                           __end_of___ftmul 07B8  
                                   u10405 0FB3                                     u11215 0CEA  
                                   u10425 0FD3                                     u11315 1441  
                         ___awdiv@divisor 0020                                     u10525 0D3C  
                                   u11165 0CB6                                     _T1CON 0018  
                                   u11265 14AF                                     u11275 14BE  
                         __end_of___fttol 0E10                                     u11710 06DA  
                                   u11455 0098                                     u10905 1386  
                                   u11465 00CA                                     u11715 06B6  
                                   u10915 138E                                     u10835 1F6B  
                                   u11555 0194                                     u11475 010E  
                                   u10845 1F70                                     u11680 0693  
                                   u10945 14D4                                     u10875 1372  
                                   u11685 066F                                     u10895 137C  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 139D  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1E7B                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 12C6                _setDimmerLights_IntrIOC_GO 1292  
                        __end_of_TMR1_ISR 10D8                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 092D  
              _setDimmerLights_ErrorClose 08CF                          __end_of_TMR1_Set 1D37  
                                   _getAD 1F9E                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1E2C               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1D1F  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 1C96  
           __end_of_setLED_Initialization 1E08                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 17A7  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 0A52  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 005C  
                            __end_of_main 0872                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 0800                        ??_setMemory_Modify 0020  
                          _Exception_Main 0628                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 164F  
                    _setSw_Initialization 1D90                                    ??_main 006F  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 092D                            _setMemory_Data 1CFB  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 000B  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C0  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1CB7  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                   ??_Switch_Initialization 0025  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0872                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006F                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1C55                                 ??_WDT_Set 0020  
                        __end_of___awtoft 2000                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 09ED                  _getMain_All_Error_Status 125F  
                                  _IOCBF2 1CB2                                    i1l6830 0414  
                                  i1l6806 03B6                                    i1l6824 03FD  
                                  i1l6832 041A                                    i1l6842 044F  
                                  i1l6826 0403                                    i1l6838 0439  
                                  i1l6794 0386                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01AC  
                                  u729_25 10D2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1EF2  
                                  _WDTCON 0097                      Exception_Main@i_3436 00ED  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1E90                                    _Dimmer 00C6  
                                  _DlySw1 0164                __end_of_Mcu_Initialization 1E1A  
                     __end_of_Buzzer_Main 1511                                    _Memory 01BE  
                                  _Timer1 0120                                    ___bmul 1DE4  
                  __end_of_Exception_Main 0704                      Load_Main@Load_Status 002B  
                    Exception_Main@lights 00EF                                    ___wmul 1F61  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000B                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D5                                    _s_data 00D6  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 139D  
                                  _myMain 00A0                    __end_of_setMemory_Data 1D07  
                        _DimmerLightsIntr 0076                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 006B                          ___awdiv@quotient 0027  
                                  _setBuz 174E                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1BFA          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0039  
     __end_of_setDimmerLights_IntrControl 0456               _setDimmerLights_IntrControl 035C  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1E52               getMain_Lights_Count@status1 0021  
                   __end_of_SwPointSelect 1CE3              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 000C  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1E90  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0AB7  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 003D  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5046 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1FBE                             __end_of_getAD 1FBE  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1C1E  
                         _getSw_KeyStatus 1DD3                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D13  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01ED  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1C8C  
              __end_of_set_TimeoutCleared 1C2B                  __end_of_setDimmerReClock 1C0A  
                      __size_of_getRxData 007A                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1D37  
                          _DimmerLights11 00CC                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1C00                        ??_CC2500_WriteByte 0020  
                              __pbssBANK0 006F                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 14C7  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1C06  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1C16                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 0817                            _getDelayOff_GO 1D80  
                     _CC2500_WriteCommand 1EBE                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 000B  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0C82  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1C45  
                      __size_of_setTxData 0097                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1C37                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1489                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1CD8  
                      _setRFSW_AdjControl 144B                    __end_of_setProductData 1D45  
                                 _IOC_ISR 1D53                                   _IOC_Set 1D1F  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 12FA  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1ED8  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 0078                    __size_of_CC2500_TxData 006C  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1BFD  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1CC2           __end_of_setControl_Lights_Table 098C  
                         setRF_Main@error 016F                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 09ED  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1CEF                           __size_of_IO_Set 001A  
                       __end_of_getBuz_GO 1DC2                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1D90  
          __end_of_getDimmerLights_Status 1DB1                         __end_of_getRxData 0C82  
                 __end_of_getSw_KeyStatus 1DE4                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1CA1                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16A2                                   ___ftadd 0456  
                                 ___ftdiv 0EA7                                   ___ftneg 1C5D  
                         __size_of___wmul 001E                                   ___ftmul 0704  
                                 ___fttol 0D89                       __end_of_Switch_Main 1C45  
                                 ___lwdiv 1366                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1DC2                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 140F                                   __ptext2 1D71  
                                 __ptext3 1489                                   __ptext4 0C82  
                                 __ptext5 1F9E                                   __ptext6 1E1A  
                                 __ptext7 0002                                   __ptext8 1C03  
                                 __ptext9 0F50                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0022                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1C78                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1330                 __end_of_Flash_Memory_Read 1EF2  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0D03  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1C1A  
                       _DimmerLights_Main 1F0C            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1C31                __end_of_CC2500_ClearRXFIFO 1C0E  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1C12  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1CEF                       _DelayOffPointSelect 1CA1  
                                 clrloop0 1067            __size_of_Switch_Initialization 0009  
           __end_of_Switch_Initialization 1C78                      end_of_initialization 003D  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1123  
                           _DelayTime_1us 10FD                         __end_of_setTxData 0EA7  
              __end_of_Flash_Memory_Write 11FF                                   init_ram 1C31  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1C32  
                              _setSw_Main 01ED                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002D                         _CC2500_ReadStatus 10D8  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1DF6  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0B90                             _CC2500_TxData 0AB7  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1511  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1C66                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F28                        _Mcu_Initialization 1E08  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 144B  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1CFB                   __end_of_setPercentValue 0A52  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 114D  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 16F6                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 10FD                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1F0C                      _setRF_Initialization 1CCD  
                      _setMemory_LoopSave 1E3F                               _Switch_Main 1C3E  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1CAC                   __end_of_getRF_KeyStatus 1DD3  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1E7B                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1DF6                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1C96                            __end_of___wmul 1F7F  
                       getSw_KeyStatus@sw 0070                         __size_of_TMR1_ISR 0025  
           __size_of_getDimmerLights_Line 000B                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006D  
                          __end_of_setLED 13D6             __size_of_setDimmerLights_Line 000E  
           __size_of_setDimmerLights_SwOn 0039                            __end_of_setBuz 17A7  
                    _CC2500_FrequencyCabr 1CE3                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 15AE  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 11FF  
                         ?_LedPointSelect 0070                                 _Load_Main 0041  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1C4D  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1F9E           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1C26  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0169                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1C03                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D0  
                   setProductData@address 0065                       Exception_Main@count 00E9  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00EA  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 000B  
                               _Tx_Length 00D3                               __pdataBANK4 0220  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 1177  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 1292                          _CC2500_SIDLEMode 1C12  
              __size_of_DimmerLights_Main 001C                 __end_of_setRF_DimmerValue 122E  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1E2C  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E9                             __pcstackBANK2 016D  
                           __pcstackBANK3 01EC                      ??_set_TimeoutCleared 0020  
                        ?_setPercentValue 0070                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                  __size_of_setDimmerLights 0052  
                           DlyOff_Main@sw 006E                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 005D  
              __size_of_CC2500_ReadStatus 0025                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0153  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1F44  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00ED               __size_of_LED_Initialization 0004  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EB  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 0086  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 0800  
                               _getBuz_GO 1DB1       __end_of_Flash_Memory_Initialization 0628  
             _Flash_Memory_Initialization 054C                                  ?___awdiv 0020  
                               __ptext100 164F                                 __ptext101 1D37  
                               __ptext110 1C2B                                 __ptext102 114D  
                               __ptext111 1CA1                                 __ptext103 1DE4  
                               __ptext120 1C0E                                 __ptext112 1E7B  
                               __ptext104 1D80                                 __ptext121 1C0A  
                               __ptext113 1C12                                 __ptext105 1DA0  
                               __ptext130 035C                                 __ptext122 1EBE  
                               __ptext114 07B8                                 __ptext106 1CAC  
                               __ptext131 1C78                                 __ptext123 1C26  
                               __ptext115 1123                                 __ptext107 174E  
                               __ptext132 1D53                                 __ptext124 1E66  
                               __ptext116 1F7F                                 __ptext108 16A2  
                               __ptext133 1C06                                 __ptext125 1EA5  
                               __ptext117 106C                                 __ptext109 1C16  
                                ?___ftadd 0041                                 __ptext134 1292  
                               __ptext126 14C7                                 __ptext118 1CE3  
                               __ptext135 1C96                                 __ptext127 1BF4  
                               __ptext119 10FD                                 __ptext129 10B3  
                               _getRxData 0C08                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 15FD  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1BF7  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1EA5                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 016F              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 002E  
           __end_of_setDimmerLights_AdjRF 10B3             __end_of_setDimmerLights_AdjOn 11D0  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D4  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 15AE              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1D80                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1CD8                       __end_of_setLED_Main 1366  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CD  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1C03  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1C22                           SwPointSelect@sw 0021  
                               clear_ram0 1066                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 140F                                 _setTxData 0E10  
     __end_of_DimmerLights_Initialization 1C8C               _DimmerLights_Initialization 1C82  
                      _CC2500_ClearRXFIFO 1C0A                        _CC2500_ClearTXFIFO 1C0E  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1E66                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 11D0                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 10B3  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1D2B  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1D71  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1ED8  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1E1A  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0021  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 016D                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1D13  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 12FA  
                   _DlyOff_Initialization 1C2B                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 07FC  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0D03                        __end_of_getLoad_OK 1C4D  
                   _Switch_Initialization 1C6F         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 14C7                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1EA5                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D2  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3422 0021             _getMain_All_Error_Status$3423 0023  
                __end_of_getDimmer_LoadGO 1C55                       _Load_Initialization 1BF7  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1FDE                          ??_LedPointSelect 0020  
                                ___ftpack 098C             __size_of_getMain_Lights_Count 000C  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 000A  
                       getTemp_AD@channel 0025                              ??_setRF_Main 006F  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1330  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1C5D  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002B  
                         ___lwdiv@counter 0025                                  __ptext10 1C00  
                                __ptext11 0800                                  __ptext20 1E90  
                                __ptext12 1C3E                                  __ptext21 1BFD  
                                __ptext13 01ED                                  __ptext30 11FF  
                                __ptext22 0D03                                  __ptext14 1E52  
                                __ptext31 108F                                  __ptext23 0C08  
                                __ptext15 11A2                                  __ptext40 10D8  
                                __ptext32 0A52                                  __ptext24 12C6  
                                __ptext16 1DD3                                  __ptext41 1F44  
                                __ptext33 0704                                  __ptext25 1E3F  
                                __ptext17 1CD8                                  __ptext50 1C37  
                                __ptext42 1BFA                                  __ptext34 1E2C  
                                __ptext26 092D                                  __ptext18 1C6F  
                                __ptext51 0041                                  __ptext43 1CCD  
                                __ptext35 1DC2                                  __ptext27 15AE  
                                __ptext19 1D90                                  __ptext60 1C22  
                                __ptext52 1D13                                  __ptext44 1E08  
                                __ptext36 1DB1                                  __ptext28 13D6  
                                __ptext61 1330                                  __ptext53 1C55  
                                __ptext45 1CC2                                  __ptext37 1D62  
                                __ptext29 144B                                  __ptext70 1C66  
                                __ptext62 1C1E                                  __ptext54 1C4D  
                                __ptext46 1D2B                                  __ptext38 0AB7  
                                __ptext71 1ED8                                  __ptext63 1DF6  
                                __ptext55 1177                                  __ptext47 1EF2  
                                __ptext39 0B90                                  __ptext80 09ED  
                                __ptext72 0628                                  __ptext64 12FA  
                                __ptext56 1F61                                  __ptext48 1D1F  
                                __ptext81 0D89                                  __ptext73 1CB7  
                                __ptext65 1511                                  __ptext57 1366  
                                __ptext49 07FC                                  __ptext90 1C8C  
                                __ptext82 1C5D                                  __ptext74 1F0C  
                                __ptext66 1D07                                  __ptext58 1BF7  
                                __ptext91 0801                                  __ptext83 0EA7  
                                __ptext75 0B23                                  __ptext67 054C  
                                __ptext59 1F28                                  __ptext92 1C45  
                                __ptext84 0456                                  __ptext76 16F6  
                                __ptext68 1CFB                                  __ptext93 125F  
                                __ptext85 1FDE                                  __ptext77 15FD  
                                __ptext69 11D0                                  __ptext94 1C82  
                                __ptext86 098C                                  __ptext78 0E10  
                                __ptext95 122E                                  __ptext87 139D  
                                __ptext79 17A7                                  __ptext96 1C1A  
                                __ptext88 1CEF                                  __ptext97 0872  
                                __ptext89 1D45                                  __ptext98 08CF  
                                __ptext99 155F                                  __product 0220  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1CC2  
            __end_of_setDimmerLights_Main 0B90              __end_of_setDimmerLights_Line 1D53  
            __end_of_setDimmerLights_SwOn 140F                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1E52                  __end_of_CC2500_SIDLEMode 1C16  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1CAC  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 016E  
               __size_of_setDimmerReClock 0004                   setDimmerLights_AdjOn@sw 0022  
                         _CC2500_ReadByte 1F44                        _CC2500_InitPATable 1F7F  
                __end_of_setMemory_Modify 1E3F                        __end_of_setRF_Main 0D89  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EB                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 01EC                                  main@argv 01EE  
                    _getSw_KeyStatus$6012 0022                       ?_CC2500_InitPATable 0070  
                         _CC2500_PowerRST 07B8                  __size_of_getSw_KeyStatus 0011  
             __end_of_Flash_Memory_Modify 155F                         ??_getPercentValue 005C  
                             _setLog_Code 12C6               __end_of_Flash_Memory_Unlock 1C6F  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 106C  
                      __end_of_setSw_Main 035C                     ??_Load_Initialization 0022  
                           _Transceive_OK 03C1                    ?_DlyOff_Initialization 0070  
                          _DelayTimejudge 114D                               pic14e$flags 007E  
            ??_setDimmerLights_IntrIOC_GO 0072                setDimmerLights_Line@lights 0020  
            ??_setDimmerLights_ErrorClose 006B                   setDimmerLights_SwOff@sw 006A  
             __size_of_setMemory_LoopSave 0013         __end_of_getAll_DimmerLights_AdjSw 11A2  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0029  
  __end_of_setDimmerLights_Initialization 125F   __size_of_setDimmerLights_Initialization 0031  
          _setDimmerLights_Initialization 122E               __end_of_setDimmerLights_Adj 174E  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1BFA      __size_of_setDimmerLights_IntrControl 00FA  
                             getLoad_AD@i 0029                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1D07  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D1  
                 __size_of_Exception_Main 00DC           __end_of_DelayOff_Initialization 1C1A  
     __size_of_setDimmerLights_IntrIOC_GO 0034       __size_of_setDimmerLights_ErrorClose 005E  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1C1E  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 164F          __size_of_setControl_Lights_Table 005F  
                  __end_of_DelayTimejudge 1177               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006C                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1123                   __end_of_CC2500_ReadByte 1F61  
            __end_of_setSw_Initialization 1DA0                           _Timeout_Counter 1E66  
         __size_of_getDimmerLights_Status 0011                      getPercentValue@value 005E  
                            _RF_RxDisable 1D62                __end_of_LED_Initialization 1C22  
          __end_of_setTemp_Initialization 0801                  __size_of_setPercentValue 0065  
                 setMemory_Modify@command 0021                      setPercentValue@value 005E  
               __end_of_RF_Initialization 1BFD                     __end_of_CC2500_RxData 0C08  
                   __end_of_CC2500_TxData 0B23                     _setLoad_AH_AL_Restore 1F28  
                 __end_of_CC2500_PowerRST 07FC  
