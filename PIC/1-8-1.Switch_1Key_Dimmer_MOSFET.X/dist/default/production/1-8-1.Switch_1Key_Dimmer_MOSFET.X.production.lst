

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Dec 10 16:24:18 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	intentry,global,class=CODE,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	dabs	1,0x7E,2
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  0116                     	;# 
   205  0117                     	;# 
   206  011D                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  018E                     	;# 
   210  0191                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0197                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019C                     	;# 
   226  019C                     	;# 
   227  019D                     	;# 
   228  019E                     	;# 
   229  019F                     	;# 
   230  020D                     	;# 
   231  0210                     	;# 
   232  0211                     	;# 
   233  0211                     	;# 
   234  0212                     	;# 
   235  0212                     	;# 
   236  0213                     	;# 
   237  0213                     	;# 
   238  0214                     	;# 
   239  0214                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0216                     	;# 
   244  0216                     	;# 
   245  0217                     	;# 
   246  0217                     	;# 
   247  0291                     	;# 
   248  0291                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0298                     	;# 
   252  0298                     	;# 
   253  0299                     	;# 
   254  029A                     	;# 
   255  0394                     	;# 
   256  0395                     	;# 
   257  0396                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0016                     	;# 
   290  0017                     	;# 
   291  0018                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0095                     	;# 
   303  0096                     	;# 
   304  0097                     	;# 
   305  0099                     	;# 
   306  009A                     	;# 
   307  009B                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  010C                     	;# 
   313  010D                     	;# 
   314  010E                     	;# 
   315  0116                     	;# 
   316  0117                     	;# 
   317  011D                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  018E                     	;# 
   321  0191                     	;# 
   322  0191                     	;# 
   323  0192                     	;# 
   324  0193                     	;# 
   325  0193                     	;# 
   326  0194                     	;# 
   327  0195                     	;# 
   328  0196                     	;# 
   329  0197                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019C                     	;# 
   338  019D                     	;# 
   339  019E                     	;# 
   340  019F                     	;# 
   341  020D                     	;# 
   342  0210                     	;# 
   343  0211                     	;# 
   344  0211                     	;# 
   345  0212                     	;# 
   346  0212                     	;# 
   347  0213                     	;# 
   348  0213                     	;# 
   349  0214                     	;# 
   350  0214                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0216                     	;# 
   355  0216                     	;# 
   356  0217                     	;# 
   357  0217                     	;# 
   358  0291                     	;# 
   359  0291                     	;# 
   360  0292                     	;# 
   361  0293                     	;# 
   362  0298                     	;# 
   363  0298                     	;# 
   364  0299                     	;# 
   365  029A                     	;# 
   366  0394                     	;# 
   367  0395                     	;# 
   368  0396                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  0010                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0015                     	;# 
   399  0016                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001C                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0095                     	;# 
   414  0096                     	;# 
   415  0097                     	;# 
   416  0099                     	;# 
   417  009A                     	;# 
   418  009B                     	;# 
   419  009B                     	;# 
   420  009C                     	;# 
   421  009D                     	;# 
   422  009E                     	;# 
   423  010C                     	;# 
   424  010D                     	;# 
   425  010E                     	;# 
   426  0116                     	;# 
   427  0117                     	;# 
   428  011D                     	;# 
   429  018C                     	;# 
   430  018D                     	;# 
   431  018E                     	;# 
   432  0191                     	;# 
   433  0191                     	;# 
   434  0192                     	;# 
   435  0193                     	;# 
   436  0193                     	;# 
   437  0194                     	;# 
   438  0195                     	;# 
   439  0196                     	;# 
   440  0197                     	;# 
   441  0199                     	;# 
   442  019A                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019C                     	;# 
   448  019C                     	;# 
   449  019D                     	;# 
   450  019E                     	;# 
   451  019F                     	;# 
   452  020D                     	;# 
   453  0210                     	;# 
   454  0211                     	;# 
   455  0211                     	;# 
   456  0212                     	;# 
   457  0212                     	;# 
   458  0213                     	;# 
   459  0213                     	;# 
   460  0214                     	;# 
   461  0214                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0216                     	;# 
   466  0216                     	;# 
   467  0217                     	;# 
   468  0217                     	;# 
   469  0291                     	;# 
   470  0291                     	;# 
   471  0292                     	;# 
   472  0293                     	;# 
   473  0298                     	;# 
   474  0298                     	;# 
   475  0299                     	;# 
   476  029A                     	;# 
   477  0394                     	;# 
   478  0395                     	;# 
   479  0396                     	;# 
   480  0FE4                     	;# 
   481  0FE5                     	;# 
   482  0FE6                     	;# 
   483  0FE7                     	;# 
   484  0FE8                     	;# 
   485  0FE9                     	;# 
   486  0FEA                     	;# 
   487  0FEB                     	;# 
   488  0FED                     	;# 
   489  0FEE                     	;# 
   490  0FEF                     	;# 
   491  0000                     	;# 
   492  0001                     	;# 
   493  0002                     	;# 
   494  0003                     	;# 
   495  0004                     	;# 
   496  0005                     	;# 
   497  0006                     	;# 
   498  0007                     	;# 
   499  0008                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000D                     	;# 
   505  000E                     	;# 
   506  0010                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0015                     	;# 
   510  0016                     	;# 
   511  0016                     	;# 
   512  0017                     	;# 
   513  0018                     	;# 
   514  0019                     	;# 
   515  001A                     	;# 
   516  001B                     	;# 
   517  001C                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  0090                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0095                     	;# 
   525  0096                     	;# 
   526  0097                     	;# 
   527  0099                     	;# 
   528  009A                     	;# 
   529  009B                     	;# 
   530  009B                     	;# 
   531  009C                     	;# 
   532  009D                     	;# 
   533  009E                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  0116                     	;# 
   538  0117                     	;# 
   539  011D                     	;# 
   540  018C                     	;# 
   541  018D                     	;# 
   542  018E                     	;# 
   543  0191                     	;# 
   544  0191                     	;# 
   545  0192                     	;# 
   546  0193                     	;# 
   547  0193                     	;# 
   548  0194                     	;# 
   549  0195                     	;# 
   550  0196                     	;# 
   551  0197                     	;# 
   552  0199                     	;# 
   553  019A                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019C                     	;# 
   559  019C                     	;# 
   560  019D                     	;# 
   561  019E                     	;# 
   562  019F                     	;# 
   563  020D                     	;# 
   564  0210                     	;# 
   565  0211                     	;# 
   566  0211                     	;# 
   567  0212                     	;# 
   568  0212                     	;# 
   569  0213                     	;# 
   570  0213                     	;# 
   571  0214                     	;# 
   572  0214                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0216                     	;# 
   577  0216                     	;# 
   578  0217                     	;# 
   579  0217                     	;# 
   580  0291                     	;# 
   581  0291                     	;# 
   582  0292                     	;# 
   583  0293                     	;# 
   584  0298                     	;# 
   585  0298                     	;# 
   586  0299                     	;# 
   587  029A                     	;# 
   588  0394                     	;# 
   589  0395                     	;# 
   590  0396                     	;# 
   591  0FE4                     	;# 
   592  0FE5                     	;# 
   593  0FE6                     	;# 
   594  0FE7                     	;# 
   595  0FE8                     	;# 
   596  0FE9                     	;# 
   597  0FEA                     	;# 
   598  0FEB                     	;# 
   599  0FED                     	;# 
   600  0FEE                     	;# 
   601  0FEF                     	;# 
   602  0000                     	;# 
   603  0001                     	;# 
   604  0002                     	;# 
   605  0003                     	;# 
   606  0004                     	;# 
   607  0005                     	;# 
   608  0006                     	;# 
   609  0007                     	;# 
   610  0008                     	;# 
   611  0009                     	;# 
   612  000A                     	;# 
   613  000B                     	;# 
   614  000C                     	;# 
   615  000D                     	;# 
   616  000E                     	;# 
   617  0010                     	;# 
   618  0011                     	;# 
   619  0012                     	;# 
   620  0015                     	;# 
   621  0016                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001C                     	;# 
   629  008C                     	;# 
   630  008D                     	;# 
   631  008E                     	;# 
   632  0090                     	;# 
   633  0091                     	;# 
   634  0092                     	;# 
   635  0095                     	;# 
   636  0096                     	;# 
   637  0097                     	;# 
   638  0099                     	;# 
   639  009A                     	;# 
   640  009B                     	;# 
   641  009B                     	;# 
   642  009C                     	;# 
   643  009D                     	;# 
   644  009E                     	;# 
   645  010C                     	;# 
   646  010D                     	;# 
   647  010E                     	;# 
   648  0116                     	;# 
   649  0117                     	;# 
   650  011D                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  018E                     	;# 
   654  0191                     	;# 
   655  0191                     	;# 
   656  0192                     	;# 
   657  0193                     	;# 
   658  0193                     	;# 
   659  0194                     	;# 
   660  0195                     	;# 
   661  0196                     	;# 
   662  0197                     	;# 
   663  0199                     	;# 
   664  019A                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019C                     	;# 
   670  019C                     	;# 
   671  019D                     	;# 
   672  019E                     	;# 
   673  019F                     	;# 
   674  020D                     	;# 
   675  0210                     	;# 
   676  0211                     	;# 
   677  0211                     	;# 
   678  0212                     	;# 
   679  0212                     	;# 
   680  0213                     	;# 
   681  0213                     	;# 
   682  0214                     	;# 
   683  0214                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0216                     	;# 
   689  0217                     	;# 
   690  0217                     	;# 
   691  0291                     	;# 
   692  0291                     	;# 
   693  0292                     	;# 
   694  0293                     	;# 
   695  0298                     	;# 
   696  0298                     	;# 
   697  0299                     	;# 
   698  029A                     	;# 
   699  0394                     	;# 
   700  0395                     	;# 
   701  0396                     	;# 
   702  0FE4                     	;# 
   703  0FE5                     	;# 
   704  0FE6                     	;# 
   705  0FE7                     	;# 
   706  0FE8                     	;# 
   707  0FE9                     	;# 
   708  0FEA                     	;# 
   709  0FEB                     	;# 
   710  0FED                     	;# 
   711  0FEE                     	;# 
   712  0FEF                     	;# 
   713  0000                     	;# 
   714  0001                     	;# 
   715  0002                     	;# 
   716  0003                     	;# 
   717  0004                     	;# 
   718  0005                     	;# 
   719  0006                     	;# 
   720  0007                     	;# 
   721  0008                     	;# 
   722  0009                     	;# 
   723  000A                     	;# 
   724  000B                     	;# 
   725  000C                     	;# 
   726  000D                     	;# 
   727  000E                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0015                     	;# 
   732  0016                     	;# 
   733  0016                     	;# 
   734  0017                     	;# 
   735  0018                     	;# 
   736  0019                     	;# 
   737  001A                     	;# 
   738  001B                     	;# 
   739  001C                     	;# 
   740  008C                     	;# 
   741  008D                     	;# 
   742  008E                     	;# 
   743  0090                     	;# 
   744  0091                     	;# 
   745  0092                     	;# 
   746  0095                     	;# 
   747  0096                     	;# 
   748  0097                     	;# 
   749  0099                     	;# 
   750  009A                     	;# 
   751  009B                     	;# 
   752  009B                     	;# 
   753  009C                     	;# 
   754  009D                     	;# 
   755  009E                     	;# 
   756  010C                     	;# 
   757  010D                     	;# 
   758  010E                     	;# 
   759  0116                     	;# 
   760  0117                     	;# 
   761  011D                     	;# 
   762  018C                     	;# 
   763  018D                     	;# 
   764  018E                     	;# 
   765  0191                     	;# 
   766  0191                     	;# 
   767  0192                     	;# 
   768  0193                     	;# 
   769  0193                     	;# 
   770  0194                     	;# 
   771  0195                     	;# 
   772  0196                     	;# 
   773  0197                     	;# 
   774  0199                     	;# 
   775  019A                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019C                     	;# 
   781  019C                     	;# 
   782  019D                     	;# 
   783  019E                     	;# 
   784  019F                     	;# 
   785  020D                     	;# 
   786  0210                     	;# 
   787  0211                     	;# 
   788  0211                     	;# 
   789  0212                     	;# 
   790  0212                     	;# 
   791  0213                     	;# 
   792  0213                     	;# 
   793  0214                     	;# 
   794  0214                     	;# 
   795  0215                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0216                     	;# 
   799  0216                     	;# 
   800  0217                     	;# 
   801  0217                     	;# 
   802  0291                     	;# 
   803  0291                     	;# 
   804  0292                     	;# 
   805  0293                     	;# 
   806  0298                     	;# 
   807  0298                     	;# 
   808  0299                     	;# 
   809  029A                     	;# 
   810  0394                     	;# 
   811  0395                     	;# 
   812  0396                     	;# 
   813  0FE4                     	;# 
   814  0FE5                     	;# 
   815  0FE6                     	;# 
   816  0FE7                     	;# 
   817  0FE8                     	;# 
   818  0FE9                     	;# 
   819  0FEA                     	;# 
   820  0FEB                     	;# 
   821  0FED                     	;# 
   822  0FEE                     	;# 
   823  0FEF                     	;# 
   824  0000                     	;# 
   825  0001                     	;# 
   826  0002                     	;# 
   827  0003                     	;# 
   828  0004                     	;# 
   829  0005                     	;# 
   830  0006                     	;# 
   831  0007                     	;# 
   832  0008                     	;# 
   833  0009                     	;# 
   834  000A                     	;# 
   835  000B                     	;# 
   836  000C                     	;# 
   837  000D                     	;# 
   838  000E                     	;# 
   839  0010                     	;# 
   840  0011                     	;# 
   841  0012                     	;# 
   842  0015                     	;# 
   843  0016                     	;# 
   844  0016                     	;# 
   845  0017                     	;# 
   846  0018                     	;# 
   847  0019                     	;# 
   848  001A                     	;# 
   849  001B                     	;# 
   850  001C                     	;# 
   851  008C                     	;# 
   852  008D                     	;# 
   853  008E                     	;# 
   854  0090                     	;# 
   855  0091                     	;# 
   856  0092                     	;# 
   857  0095                     	;# 
   858  0096                     	;# 
   859  0097                     	;# 
   860  0099                     	;# 
   861  009A                     	;# 
   862  009B                     	;# 
   863  009B                     	;# 
   864  009C                     	;# 
   865  009D                     	;# 
   866  009E                     	;# 
   867  010C                     	;# 
   868  010D                     	;# 
   869  010E                     	;# 
   870  0116                     	;# 
   871  0117                     	;# 
   872  011D                     	;# 
   873  018C                     	;# 
   874  018D                     	;# 
   875  018E                     	;# 
   876  0191                     	;# 
   877  0191                     	;# 
   878  0192                     	;# 
   879  0193                     	;# 
   880  0193                     	;# 
   881  0194                     	;# 
   882  0195                     	;# 
   883  0196                     	;# 
   884  0197                     	;# 
   885  0199                     	;# 
   886  019A                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019C                     	;# 
   892  019C                     	;# 
   893  019D                     	;# 
   894  019E                     	;# 
   895  019F                     	;# 
   896  020D                     	;# 
   897  0210                     	;# 
   898  0211                     	;# 
   899  0211                     	;# 
   900  0212                     	;# 
   901  0212                     	;# 
   902  0213                     	;# 
   903  0213                     	;# 
   904  0214                     	;# 
   905  0214                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  0291                     	;# 
   914  0291                     	;# 
   915  0292                     	;# 
   916  0293                     	;# 
   917  0298                     	;# 
   918  0298                     	;# 
   919  0299                     	;# 
   920  029A                     	;# 
   921  0394                     	;# 
   922  0395                     	;# 
   923  0396                     	;# 
   924  0FE4                     	;# 
   925  0FE5                     	;# 
   926  0FE6                     	;# 
   927  0FE7                     	;# 
   928  0FE8                     	;# 
   929  0FE9                     	;# 
   930  0FEA                     	;# 
   931  0FEB                     	;# 
   932  0FED                     	;# 
   933  0FEE                     	;# 
   934  0FEF                     	;# 
   935  0000                     	;# 
   936  0001                     	;# 
   937  0002                     	;# 
   938  0003                     	;# 
   939  0004                     	;# 
   940  0005                     	;# 
   941  0006                     	;# 
   942  0007                     	;# 
   943  0008                     	;# 
   944  0009                     	;# 
   945  000A                     	;# 
   946  000B                     	;# 
   947  000C                     	;# 
   948  000D                     	;# 
   949  000E                     	;# 
   950  0010                     	;# 
   951  0011                     	;# 
   952  0012                     	;# 
   953  0015                     	;# 
   954  0016                     	;# 
   955  0016                     	;# 
   956  0017                     	;# 
   957  0018                     	;# 
   958  0019                     	;# 
   959  001A                     	;# 
   960  001B                     	;# 
   961  001C                     	;# 
   962  008C                     	;# 
   963  008D                     	;# 
   964  008E                     	;# 
   965  0090                     	;# 
   966  0091                     	;# 
   967  0092                     	;# 
   968  0095                     	;# 
   969  0096                     	;# 
   970  0097                     	;# 
   971  0099                     	;# 
   972  009A                     	;# 
   973  009B                     	;# 
   974  009B                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009E                     	;# 
   978  010C                     	;# 
   979  010D                     	;# 
   980  010E                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  011D                     	;# 
   984  018C                     	;# 
   985  018D                     	;# 
   986  018E                     	;# 
   987  0191                     	;# 
   988  0191                     	;# 
   989  0192                     	;# 
   990  0193                     	;# 
   991  0193                     	;# 
   992  0194                     	;# 
   993  0195                     	;# 
   994  0196                     	;# 
   995  0197                     	;# 
   996  0199                     	;# 
   997  019A                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019C                     	;# 
  1003  019C                     	;# 
  1004  019D                     	;# 
  1005  019E                     	;# 
  1006  019F                     	;# 
  1007  020D                     	;# 
  1008  0210                     	;# 
  1009  0211                     	;# 
  1010  0211                     	;# 
  1011  0212                     	;# 
  1012  0212                     	;# 
  1013  0213                     	;# 
  1014  0213                     	;# 
  1015  0214                     	;# 
  1016  0214                     	;# 
  1017  0215                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0216                     	;# 
  1021  0216                     	;# 
  1022  0217                     	;# 
  1023  0217                     	;# 
  1024  0291                     	;# 
  1025  0291                     	;# 
  1026  0292                     	;# 
  1027  0293                     	;# 
  1028  0298                     	;# 
  1029  0298                     	;# 
  1030  0299                     	;# 
  1031  029A                     	;# 
  1032  0394                     	;# 
  1033  0395                     	;# 
  1034  0396                     	;# 
  1035  0FE4                     	;# 
  1036  0FE5                     	;# 
  1037  0FE6                     	;# 
  1038  0FE7                     	;# 
  1039  0FE8                     	;# 
  1040  0FE9                     	;# 
  1041  0FEA                     	;# 
  1042  0FEB                     	;# 
  1043  0FED                     	;# 
  1044  0FEE                     	;# 
  1045  0FEF                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0008                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  0010                     	;# 
  1062  0011                     	;# 
  1063  0012                     	;# 
  1064  0015                     	;# 
  1065  0016                     	;# 
  1066  0016                     	;# 
  1067  0017                     	;# 
  1068  0018                     	;# 
  1069  0019                     	;# 
  1070  001A                     	;# 
  1071  001B                     	;# 
  1072  001C                     	;# 
  1073  008C                     	;# 
  1074  008D                     	;# 
  1075  008E                     	;# 
  1076  0090                     	;# 
  1077  0091                     	;# 
  1078  0092                     	;# 
  1079  0095                     	;# 
  1080  0096                     	;# 
  1081  0097                     	;# 
  1082  0099                     	;# 
  1083  009A                     	;# 
  1084  009B                     	;# 
  1085  009B                     	;# 
  1086  009C                     	;# 
  1087  009D                     	;# 
  1088  009E                     	;# 
  1089  010C                     	;# 
  1090  010D                     	;# 
  1091  010E                     	;# 
  1092  0116                     	;# 
  1093  0117                     	;# 
  1094  011D                     	;# 
  1095  018C                     	;# 
  1096  018D                     	;# 
  1097  018E                     	;# 
  1098  0191                     	;# 
  1099  0191                     	;# 
  1100  0192                     	;# 
  1101  0193                     	;# 
  1102  0193                     	;# 
  1103  0194                     	;# 
  1104  0195                     	;# 
  1105  0196                     	;# 
  1106  0197                     	;# 
  1107  0199                     	;# 
  1108  019A                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019C                     	;# 
  1114  019C                     	;# 
  1115  019D                     	;# 
  1116  019E                     	;# 
  1117  019F                     	;# 
  1118  020D                     	;# 
  1119  0210                     	;# 
  1120  0211                     	;# 
  1121  0211                     	;# 
  1122  0212                     	;# 
  1123  0212                     	;# 
  1124  0213                     	;# 
  1125  0213                     	;# 
  1126  0214                     	;# 
  1127  0214                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0216                     	;# 
  1132  0216                     	;# 
  1133  0217                     	;# 
  1134  0217                     	;# 
  1135  0291                     	;# 
  1136  0291                     	;# 
  1137  0292                     	;# 
  1138  0293                     	;# 
  1139  0298                     	;# 
  1140  0298                     	;# 
  1141  0299                     	;# 
  1142  029A                     	;# 
  1143  0394                     	;# 
  1144  0395                     	;# 
  1145  0396                     	;# 
  1146  0FE4                     	;# 
  1147  0FE5                     	;# 
  1148  0FE6                     	;# 
  1149  0FE7                     	;# 
  1150  0FE8                     	;# 
  1151  0FE9                     	;# 
  1152  0FEA                     	;# 
  1153  0FEB                     	;# 
  1154  0FED                     	;# 
  1155  0FEE                     	;# 
  1156  0FEF                     	;# 
  1157  0000                     	;# 
  1158  0001                     	;# 
  1159  0002                     	;# 
  1160  0003                     	;# 
  1161  0004                     	;# 
  1162  0005                     	;# 
  1163  0006                     	;# 
  1164  0007                     	;# 
  1165  0008                     	;# 
  1166  0009                     	;# 
  1167  000A                     	;# 
  1168  000B                     	;# 
  1169  000C                     	;# 
  1170  000D                     	;# 
  1171  000E                     	;# 
  1172  0010                     	;# 
  1173  0011                     	;# 
  1174  0012                     	;# 
  1175  0015                     	;# 
  1176  0016                     	;# 
  1177  0016                     	;# 
  1178  0017                     	;# 
  1179  0018                     	;# 
  1180  0019                     	;# 
  1181  001A                     	;# 
  1182  001B                     	;# 
  1183  001C                     	;# 
  1184  008C                     	;# 
  1185  008D                     	;# 
  1186  008E                     	;# 
  1187  0090                     	;# 
  1188  0091                     	;# 
  1189  0092                     	;# 
  1190  0095                     	;# 
  1191  0096                     	;# 
  1192  0097                     	;# 
  1193  0099                     	;# 
  1194  009A                     	;# 
  1195  009B                     	;# 
  1196  009B                     	;# 
  1197  009C                     	;# 
  1198  009D                     	;# 
  1199  009E                     	;# 
  1200  010C                     	;# 
  1201  010D                     	;# 
  1202  010E                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  011D                     	;# 
  1206  018C                     	;# 
  1207  018D                     	;# 
  1208  018E                     	;# 
  1209  0191                     	;# 
  1210  0191                     	;# 
  1211  0192                     	;# 
  1212  0193                     	;# 
  1213  0193                     	;# 
  1214  0194                     	;# 
  1215  0195                     	;# 
  1216  0196                     	;# 
  1217  0197                     	;# 
  1218  0199                     	;# 
  1219  019A                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019C                     	;# 
  1225  019C                     	;# 
  1226  019D                     	;# 
  1227  019E                     	;# 
  1228  019F                     	;# 
  1229  020D                     	;# 
  1230  0210                     	;# 
  1231  0211                     	;# 
  1232  0211                     	;# 
  1233  0212                     	;# 
  1234  0212                     	;# 
  1235  0213                     	;# 
  1236  0213                     	;# 
  1237  0214                     	;# 
  1238  0214                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0216                     	;# 
  1243  0216                     	;# 
  1244  0217                     	;# 
  1245  0217                     	;# 
  1246  0291                     	;# 
  1247  0291                     	;# 
  1248  0292                     	;# 
  1249  0293                     	;# 
  1250  0298                     	;# 
  1251  0298                     	;# 
  1252  0299                     	;# 
  1253  029A                     	;# 
  1254  0394                     	;# 
  1255  0395                     	;# 
  1256  0396                     	;# 
  1257  0FE4                     	;# 
  1258  0FE5                     	;# 
  1259  0FE6                     	;# 
  1260  0FE7                     	;# 
  1261  0FE8                     	;# 
  1262  0FE9                     	;# 
  1263  0FEA                     	;# 
  1264  0FEB                     	;# 
  1265  0FED                     	;# 
  1266  0FEE                     	;# 
  1267  0FEF                     	;# 
  1268  0000                     	;# 
  1269  0001                     	;# 
  1270  0002                     	;# 
  1271  0003                     	;# 
  1272  0004                     	;# 
  1273  0005                     	;# 
  1274  0006                     	;# 
  1275  0007                     	;# 
  1276  0008                     	;# 
  1277  0009                     	;# 
  1278  000A                     	;# 
  1279  000B                     	;# 
  1280  000C                     	;# 
  1281  000D                     	;# 
  1282  000E                     	;# 
  1283  0010                     	;# 
  1284  0011                     	;# 
  1285  0012                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0016                     	;# 
  1289  0017                     	;# 
  1290  0018                     	;# 
  1291  0019                     	;# 
  1292  001A                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  008C                     	;# 
  1296  008D                     	;# 
  1297  008E                     	;# 
  1298  0090                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0095                     	;# 
  1302  0096                     	;# 
  1303  0097                     	;# 
  1304  0099                     	;# 
  1305  009A                     	;# 
  1306  009B                     	;# 
  1307  009B                     	;# 
  1308  009C                     	;# 
  1309  009D                     	;# 
  1310  009E                     	;# 
  1311  010C                     	;# 
  1312  010D                     	;# 
  1313  010E                     	;# 
  1314  0116                     	;# 
  1315  0117                     	;# 
  1316  011D                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  0191                     	;# 
  1321  0191                     	;# 
  1322  0192                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0194                     	;# 
  1326  0195                     	;# 
  1327  0196                     	;# 
  1328  0197                     	;# 
  1329  0199                     	;# 
  1330  019A                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019C                     	;# 
  1336  019C                     	;# 
  1337  019D                     	;# 
  1338  019E                     	;# 
  1339  019F                     	;# 
  1340  020D                     	;# 
  1341  0210                     	;# 
  1342  0211                     	;# 
  1343  0211                     	;# 
  1344  0212                     	;# 
  1345  0212                     	;# 
  1346  0213                     	;# 
  1347  0213                     	;# 
  1348  0214                     	;# 
  1349  0214                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0216                     	;# 
  1354  0216                     	;# 
  1355  0217                     	;# 
  1356  0217                     	;# 
  1357  0291                     	;# 
  1358  0291                     	;# 
  1359  0292                     	;# 
  1360  0293                     	;# 
  1361  0298                     	;# 
  1362  0298                     	;# 
  1363  0299                     	;# 
  1364  029A                     	;# 
  1365  0394                     	;# 
  1366  0395                     	;# 
  1367  0396                     	;# 
  1368  0FE4                     	;# 
  1369  0FE5                     	;# 
  1370  0FE6                     	;# 
  1371  0FE7                     	;# 
  1372  0FE8                     	;# 
  1373  0FE9                     	;# 
  1374  0FEA                     	;# 
  1375  0FEB                     	;# 
  1376  0FED                     	;# 
  1377  0FEE                     	;# 
  1378  0FEF                     	;# 
  1379  0000                     	;# 
  1380  0001                     	;# 
  1381  0002                     	;# 
  1382  0003                     	;# 
  1383  0004                     	;# 
  1384  0005                     	;# 
  1385  0006                     	;# 
  1386  0007                     	;# 
  1387  0008                     	;# 
  1388  0009                     	;# 
  1389  000A                     	;# 
  1390  000B                     	;# 
  1391  000C                     	;# 
  1392  000D                     	;# 
  1393  000E                     	;# 
  1394  0010                     	;# 
  1395  0011                     	;# 
  1396  0012                     	;# 
  1397  0015                     	;# 
  1398  0016                     	;# 
  1399  0016                     	;# 
  1400  0017                     	;# 
  1401  0018                     	;# 
  1402  0019                     	;# 
  1403  001A                     	;# 
  1404  001B                     	;# 
  1405  001C                     	;# 
  1406  008C                     	;# 
  1407  008D                     	;# 
  1408  008E                     	;# 
  1409  0090                     	;# 
  1410  0091                     	;# 
  1411  0092                     	;# 
  1412  0095                     	;# 
  1413  0096                     	;# 
  1414  0097                     	;# 
  1415  0099                     	;# 
  1416  009A                     	;# 
  1417  009B                     	;# 
  1418  009B                     	;# 
  1419  009C                     	;# 
  1420  009D                     	;# 
  1421  009E                     	;# 
  1422  010C                     	;# 
  1423  010D                     	;# 
  1424  010E                     	;# 
  1425  0116                     	;# 
  1426  0117                     	;# 
  1427  011D                     	;# 
  1428  018C                     	;# 
  1429  018D                     	;# 
  1430  018E                     	;# 
  1431  0191                     	;# 
  1432  0191                     	;# 
  1433  0192                     	;# 
  1434  0193                     	;# 
  1435  0193                     	;# 
  1436  0194                     	;# 
  1437  0195                     	;# 
  1438  0196                     	;# 
  1439  0197                     	;# 
  1440  0199                     	;# 
  1441  019A                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019C                     	;# 
  1447  019C                     	;# 
  1448  019D                     	;# 
  1449  019E                     	;# 
  1450  019F                     	;# 
  1451  020D                     	;# 
  1452  0210                     	;# 
  1453  0211                     	;# 
  1454  0211                     	;# 
  1455  0212                     	;# 
  1456  0212                     	;# 
  1457  0213                     	;# 
  1458  0213                     	;# 
  1459  0214                     	;# 
  1460  0214                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0216                     	;# 
  1465  0216                     	;# 
  1466  0217                     	;# 
  1467  0217                     	;# 
  1468  0291                     	;# 
  1469  0291                     	;# 
  1470  0292                     	;# 
  1471  0293                     	;# 
  1472  0298                     	;# 
  1473  0298                     	;# 
  1474  0299                     	;# 
  1475  029A                     	;# 
  1476  0394                     	;# 
  1477  0395                     	;# 
  1478  0396                     	;# 
  1479  0FE4                     	;# 
  1480  0FE5                     	;# 
  1481  0FE6                     	;# 
  1482  0FE7                     	;# 
  1483  0FE8                     	;# 
  1484  0FE9                     	;# 
  1485  0FEA                     	;# 
  1486  0FEB                     	;# 
  1487  0FED                     	;# 
  1488  0FEE                     	;# 
  1489  0FEF                     	;# 
  1490  0000                     	;# 
  1491  0001                     	;# 
  1492  0002                     	;# 
  1493  0003                     	;# 
  1494  0004                     	;# 
  1495  0005                     	;# 
  1496  0006                     	;# 
  1497  0007                     	;# 
  1498  0008                     	;# 
  1499  0009                     	;# 
  1500  000A                     	;# 
  1501  000B                     	;# 
  1502  000C                     	;# 
  1503  000D                     	;# 
  1504  000E                     	;# 
  1505  0010                     	;# 
  1506  0011                     	;# 
  1507  0012                     	;# 
  1508  0015                     	;# 
  1509  0016                     	;# 
  1510  0016                     	;# 
  1511  0017                     	;# 
  1512  0018                     	;# 
  1513  0019                     	;# 
  1514  001A                     	;# 
  1515  001B                     	;# 
  1516  001C                     	;# 
  1517  008C                     	;# 
  1518  008D                     	;# 
  1519  008E                     	;# 
  1520  0090                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0095                     	;# 
  1524  0096                     	;# 
  1525  0097                     	;# 
  1526  0099                     	;# 
  1527  009A                     	;# 
  1528  009B                     	;# 
  1529  009B                     	;# 
  1530  009C                     	;# 
  1531  009D                     	;# 
  1532  009E                     	;# 
  1533  010C                     	;# 
  1534  010D                     	;# 
  1535  010E                     	;# 
  1536  0116                     	;# 
  1537  0117                     	;# 
  1538  011D                     	;# 
  1539  018C                     	;# 
  1540  018D                     	;# 
  1541  018E                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0197                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019C                     	;# 
  1558  019C                     	;# 
  1559  019D                     	;# 
  1560  019E                     	;# 
  1561  019F                     	;# 
  1562  020D                     	;# 
  1563  0210                     	;# 
  1564  0211                     	;# 
  1565  0211                     	;# 
  1566  0212                     	;# 
  1567  0212                     	;# 
  1568  0213                     	;# 
  1569  0213                     	;# 
  1570  0214                     	;# 
  1571  0214                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0216                     	;# 
  1576  0216                     	;# 
  1577  0217                     	;# 
  1578  0217                     	;# 
  1579  0291                     	;# 
  1580  0291                     	;# 
  1581  0292                     	;# 
  1582  0293                     	;# 
  1583  0298                     	;# 
  1584  0298                     	;# 
  1585  0299                     	;# 
  1586  029A                     	;# 
  1587  0394                     	;# 
  1588  0395                     	;# 
  1589  0396                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601  0000                     	;# 
  1602  0001                     	;# 
  1603  0002                     	;# 
  1604  0003                     	;# 
  1605  0004                     	;# 
  1606  0005                     	;# 
  1607  0006                     	;# 
  1608  0007                     	;# 
  1609  0008                     	;# 
  1610  0009                     	;# 
  1611  000A                     	;# 
  1612  000B                     	;# 
  1613  000C                     	;# 
  1614  000D                     	;# 
  1615  000E                     	;# 
  1616  0010                     	;# 
  1617  0011                     	;# 
  1618  0012                     	;# 
  1619  0015                     	;# 
  1620  0016                     	;# 
  1621  0016                     	;# 
  1622  0017                     	;# 
  1623  0018                     	;# 
  1624  0019                     	;# 
  1625  001A                     	;# 
  1626  001B                     	;# 
  1627  001C                     	;# 
  1628  008C                     	;# 
  1629  008D                     	;# 
  1630  008E                     	;# 
  1631  0090                     	;# 
  1632  0091                     	;# 
  1633  0092                     	;# 
  1634  0095                     	;# 
  1635  0096                     	;# 
  1636  0097                     	;# 
  1637  0099                     	;# 
  1638  009A                     	;# 
  1639  009B                     	;# 
  1640  009B                     	;# 
  1641  009C                     	;# 
  1642  009D                     	;# 
  1643  009E                     	;# 
  1644  010C                     	;# 
  1645  010D                     	;# 
  1646  010E                     	;# 
  1647  0116                     	;# 
  1648  0117                     	;# 
  1649  011D                     	;# 
  1650  018C                     	;# 
  1651  018D                     	;# 
  1652  018E                     	;# 
  1653  0191                     	;# 
  1654  0191                     	;# 
  1655  0192                     	;# 
  1656  0193                     	;# 
  1657  0193                     	;# 
  1658  0194                     	;# 
  1659  0195                     	;# 
  1660  0196                     	;# 
  1661  0197                     	;# 
  1662  0199                     	;# 
  1663  019A                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019C                     	;# 
  1669  019C                     	;# 
  1670  019D                     	;# 
  1671  019E                     	;# 
  1672  019F                     	;# 
  1673  020D                     	;# 
  1674  0210                     	;# 
  1675  0211                     	;# 
  1676  0211                     	;# 
  1677  0212                     	;# 
  1678  0212                     	;# 
  1679  0213                     	;# 
  1680  0213                     	;# 
  1681  0214                     	;# 
  1682  0214                     	;# 
  1683  0215                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0216                     	;# 
  1687  0216                     	;# 
  1688  0217                     	;# 
  1689  0217                     	;# 
  1690  0291                     	;# 
  1691  0291                     	;# 
  1692  0292                     	;# 
  1693  0293                     	;# 
  1694  0298                     	;# 
  1695  0298                     	;# 
  1696  0299                     	;# 
  1697  029A                     	;# 
  1698  0394                     	;# 
  1699  0395                     	;# 
  1700  0396                     	;# 
  1701  0FE4                     	;# 
  1702  0FE5                     	;# 
  1703  0FE6                     	;# 
  1704  0FE7                     	;# 
  1705  0FE8                     	;# 
  1706  0FE9                     	;# 
  1707  0FEA                     	;# 
  1708  0FEB                     	;# 
  1709  0FED                     	;# 
  1710  0FEE                     	;# 
  1711  0FEF                     	;# 
  1712  0000                     	;# 
  1713  0001                     	;# 
  1714  0002                     	;# 
  1715  0003                     	;# 
  1716  0004                     	;# 
  1717  0005                     	;# 
  1718  0006                     	;# 
  1719  0007                     	;# 
  1720  0008                     	;# 
  1721  0009                     	;# 
  1722  000A                     	;# 
  1723  000B                     	;# 
  1724  000C                     	;# 
  1725  000D                     	;# 
  1726  000E                     	;# 
  1727  0010                     	;# 
  1728  0011                     	;# 
  1729  0012                     	;# 
  1730  0015                     	;# 
  1731  0016                     	;# 
  1732  0016                     	;# 
  1733  0017                     	;# 
  1734  0018                     	;# 
  1735  0019                     	;# 
  1736  001A                     	;# 
  1737  001B                     	;# 
  1738  001C                     	;# 
  1739  008C                     	;# 
  1740  008D                     	;# 
  1741  008E                     	;# 
  1742  0090                     	;# 
  1743  0091                     	;# 
  1744  0092                     	;# 
  1745  0095                     	;# 
  1746  0096                     	;# 
  1747  0097                     	;# 
  1748  0099                     	;# 
  1749  009A                     	;# 
  1750  009B                     	;# 
  1751  009B                     	;# 
  1752  009C                     	;# 
  1753  009D                     	;# 
  1754  009E                     	;# 
  1755  010C                     	;# 
  1756  010D                     	;# 
  1757  010E                     	;# 
  1758  0116                     	;# 
  1759  0117                     	;# 
  1760  011D                     	;# 
  1761  018C                     	;# 
  1762  018D                     	;# 
  1763  018E                     	;# 
  1764  0191                     	;# 
  1765  0191                     	;# 
  1766  0192                     	;# 
  1767  0193                     	;# 
  1768  0193                     	;# 
  1769  0194                     	;# 
  1770  0195                     	;# 
  1771  0196                     	;# 
  1772  0197                     	;# 
  1773  0199                     	;# 
  1774  019A                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019C                     	;# 
  1780  019C                     	;# 
  1781  019D                     	;# 
  1782  019E                     	;# 
  1783  019F                     	;# 
  1784  020D                     	;# 
  1785  0210                     	;# 
  1786  0211                     	;# 
  1787  0211                     	;# 
  1788  0212                     	;# 
  1789  0212                     	;# 
  1790  0213                     	;# 
  1791  0213                     	;# 
  1792  0214                     	;# 
  1793  0214                     	;# 
  1794  0215                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0216                     	;# 
  1798  0216                     	;# 
  1799  0217                     	;# 
  1800  0217                     	;# 
  1801  0291                     	;# 
  1802  0291                     	;# 
  1803  0292                     	;# 
  1804  0293                     	;# 
  1805  0298                     	;# 
  1806  0298                     	;# 
  1807  0299                     	;# 
  1808  029A                     	;# 
  1809  0394                     	;# 
  1810  0395                     	;# 
  1811  0396                     	;# 
  1812  0FE4                     	;# 
  1813  0FE5                     	;# 
  1814  0FE6                     	;# 
  1815  0FE7                     	;# 
  1816  0FE8                     	;# 
  1817  0FE9                     	;# 
  1818  0FEA                     	;# 
  1819  0FEB                     	;# 
  1820  0FED                     	;# 
  1821  0FEE                     	;# 
  1822  0FEF                     	;# 
  1823  0000                     	;# 
  1824  0001                     	;# 
  1825  0002                     	;# 
  1826  0003                     	;# 
  1827  0004                     	;# 
  1828  0005                     	;# 
  1829  0006                     	;# 
  1830  0007                     	;# 
  1831  0008                     	;# 
  1832  0009                     	;# 
  1833  000A                     	;# 
  1834  000B                     	;# 
  1835  000C                     	;# 
  1836  000D                     	;# 
  1837  000E                     	;# 
  1838  0010                     	;# 
  1839  0011                     	;# 
  1840  0012                     	;# 
  1841  0015                     	;# 
  1842  0016                     	;# 
  1843  0016                     	;# 
  1844  0017                     	;# 
  1845  0018                     	;# 
  1846  0019                     	;# 
  1847  001A                     	;# 
  1848  001B                     	;# 
  1849  001C                     	;# 
  1850  008C                     	;# 
  1851  008D                     	;# 
  1852  008E                     	;# 
  1853  0090                     	;# 
  1854  0091                     	;# 
  1855  0092                     	;# 
  1856  0095                     	;# 
  1857  0096                     	;# 
  1858  0097                     	;# 
  1859  0099                     	;# 
  1860  009A                     	;# 
  1861  009B                     	;# 
  1862  009B                     	;# 
  1863  009C                     	;# 
  1864  009D                     	;# 
  1865  009E                     	;# 
  1866  010C                     	;# 
  1867  010D                     	;# 
  1868  010E                     	;# 
  1869  0116                     	;# 
  1870  0117                     	;# 
  1871  011D                     	;# 
  1872  018C                     	;# 
  1873  018D                     	;# 
  1874  018E                     	;# 
  1875  0191                     	;# 
  1876  0191                     	;# 
  1877  0192                     	;# 
  1878  0193                     	;# 
  1879  0193                     	;# 
  1880  0194                     	;# 
  1881  0195                     	;# 
  1882  0196                     	;# 
  1883  0197                     	;# 
  1884  0199                     	;# 
  1885  019A                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019C                     	;# 
  1891  019C                     	;# 
  1892  019D                     	;# 
  1893  019E                     	;# 
  1894  019F                     	;# 
  1895  020D                     	;# 
  1896  0210                     	;# 
  1897  0211                     	;# 
  1898  0211                     	;# 
  1899  0212                     	;# 
  1900  0212                     	;# 
  1901  0213                     	;# 
  1902  0213                     	;# 
  1903  0214                     	;# 
  1904  0214                     	;# 
  1905  0215                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0216                     	;# 
  1909  0216                     	;# 
  1910  0217                     	;# 
  1911  0217                     	;# 
  1912  0291                     	;# 
  1913  0291                     	;# 
  1914  0292                     	;# 
  1915  0293                     	;# 
  1916  0298                     	;# 
  1917  0298                     	;# 
  1918  0299                     	;# 
  1919  029A                     	;# 
  1920  0394                     	;# 
  1921  0395                     	;# 
  1922  0396                     	;# 
  1923  0FE4                     	;# 
  1924  0FE5                     	;# 
  1925  0FE6                     	;# 
  1926  0FE7                     	;# 
  1927  0FE8                     	;# 
  1928  0FE9                     	;# 
  1929  0FEA                     	;# 
  1930  0FEB                     	;# 
  1931  0FED                     	;# 
  1932  0FEE                     	;# 
  1933  0FEF                     	;# 
  1934  0000                     	;# 
  1935  0001                     	;# 
  1936  0002                     	;# 
  1937  0003                     	;# 
  1938  0004                     	;# 
  1939  0005                     	;# 
  1940  0006                     	;# 
  1941  0007                     	;# 
  1942  0008                     	;# 
  1943  0009                     	;# 
  1944  000A                     	;# 
  1945  000B                     	;# 
  1946  000C                     	;# 
  1947  000D                     	;# 
  1948  000E                     	;# 
  1949  0010                     	;# 
  1950  0011                     	;# 
  1951  0012                     	;# 
  1952  0015                     	;# 
  1953  0016                     	;# 
  1954  0016                     	;# 
  1955  0017                     	;# 
  1956  0018                     	;# 
  1957  0019                     	;# 
  1958  001A                     	;# 
  1959  001B                     	;# 
  1960  001C                     	;# 
  1961  008C                     	;# 
  1962  008D                     	;# 
  1963  008E                     	;# 
  1964  0090                     	;# 
  1965  0091                     	;# 
  1966  0092                     	;# 
  1967  0095                     	;# 
  1968  0096                     	;# 
  1969  0097                     	;# 
  1970  0099                     	;# 
  1971  009A                     	;# 
  1972  009B                     	;# 
  1973  009B                     	;# 
  1974  009C                     	;# 
  1975  009D                     	;# 
  1976  009E                     	;# 
  1977  010C                     	;# 
  1978  010D                     	;# 
  1979  010E                     	;# 
  1980  0116                     	;# 
  1981  0117                     	;# 
  1982  011D                     	;# 
  1983  018C                     	;# 
  1984  018D                     	;# 
  1985  018E                     	;# 
  1986  0191                     	;# 
  1987  0191                     	;# 
  1988  0192                     	;# 
  1989  0193                     	;# 
  1990  0193                     	;# 
  1991  0194                     	;# 
  1992  0195                     	;# 
  1993  0196                     	;# 
  1994  0197                     	;# 
  1995  0199                     	;# 
  1996  019A                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019C                     	;# 
  2002  019C                     	;# 
  2003  019D                     	;# 
  2004  019E                     	;# 
  2005  019F                     	;# 
  2006  020D                     	;# 
  2007  0210                     	;# 
  2008  0211                     	;# 
  2009  0211                     	;# 
  2010  0212                     	;# 
  2011  0212                     	;# 
  2012  0213                     	;# 
  2013  0213                     	;# 
  2014  0214                     	;# 
  2015  0214                     	;# 
  2016  0215                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0216                     	;# 
  2020  0216                     	;# 
  2021  0217                     	;# 
  2022  0217                     	;# 
  2023  0291                     	;# 
  2024  0291                     	;# 
  2025  0292                     	;# 
  2026  0293                     	;# 
  2027  0298                     	;# 
  2028  0298                     	;# 
  2029  0299                     	;# 
  2030  029A                     	;# 
  2031  0394                     	;# 
  2032  0395                     	;# 
  2033  0396                     	;# 
  2034  0FE4                     	;# 
  2035  0FE5                     	;# 
  2036  0FE6                     	;# 
  2037  0FE7                     	;# 
  2038  0FE8                     	;# 
  2039  0FE9                     	;# 
  2040  0FEA                     	;# 
  2041  0FEB                     	;# 
  2042  0FED                     	;# 
  2043  0FEE                     	;# 
  2044  0FEF                     	;# 
  2045  0000                     	;# 
  2046  0001                     	;# 
  2047  0002                     	;# 
  2048  0003                     	;# 
  2049  0004                     	;# 
  2050  0005                     	;# 
  2051  0006                     	;# 
  2052  0007                     	;# 
  2053  0008                     	;# 
  2054  0009                     	;# 
  2055  000A                     	;# 
  2056  000B                     	;# 
  2057  000C                     	;# 
  2058  000D                     	;# 
  2059  000E                     	;# 
  2060  0010                     	;# 
  2061  0011                     	;# 
  2062  0012                     	;# 
  2063  0015                     	;# 
  2064  0016                     	;# 
  2065  0016                     	;# 
  2066  0017                     	;# 
  2067  0018                     	;# 
  2068  0019                     	;# 
  2069  001A                     	;# 
  2070  001B                     	;# 
  2071  001C                     	;# 
  2072  008C                     	;# 
  2073  008D                     	;# 
  2074  008E                     	;# 
  2075  0090                     	;# 
  2076  0091                     	;# 
  2077  0092                     	;# 
  2078  0095                     	;# 
  2079  0096                     	;# 
  2080  0097                     	;# 
  2081  0099                     	;# 
  2082  009A                     	;# 
  2083  009B                     	;# 
  2084  009B                     	;# 
  2085  009C                     	;# 
  2086  009D                     	;# 
  2087  009E                     	;# 
  2088  010C                     	;# 
  2089  010D                     	;# 
  2090  010E                     	;# 
  2091  0116                     	;# 
  2092  0117                     	;# 
  2093  011D                     	;# 
  2094  018C                     	;# 
  2095  018D                     	;# 
  2096  018E                     	;# 
  2097  0191                     	;# 
  2098  0191                     	;# 
  2099  0192                     	;# 
  2100  0193                     	;# 
  2101  0193                     	;# 
  2102  0194                     	;# 
  2103  0195                     	;# 
  2104  0196                     	;# 
  2105  0197                     	;# 
  2106  0199                     	;# 
  2107  019A                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019C                     	;# 
  2113  019C                     	;# 
  2114  019D                     	;# 
  2115  019E                     	;# 
  2116  019F                     	;# 
  2117  020D                     	;# 
  2118  0210                     	;# 
  2119  0211                     	;# 
  2120  0211                     	;# 
  2121  0212                     	;# 
  2122  0212                     	;# 
  2123  0213                     	;# 
  2124  0213                     	;# 
  2125  0214                     	;# 
  2126  0214                     	;# 
  2127  0215                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0216                     	;# 
  2131  0216                     	;# 
  2132  0217                     	;# 
  2133  0217                     	;# 
  2134  0291                     	;# 
  2135  0291                     	;# 
  2136  0292                     	;# 
  2137  0293                     	;# 
  2138  0298                     	;# 
  2139  0298                     	;# 
  2140  0299                     	;# 
  2141  029A                     	;# 
  2142  0394                     	;# 
  2143  0395                     	;# 
  2144  0396                     	;# 
  2145  0FE4                     	;# 
  2146  0FE5                     	;# 
  2147  0FE6                     	;# 
  2148  0FE7                     	;# 
  2149  0FE8                     	;# 
  2150  0FE9                     	;# 
  2151  0FEA                     	;# 
  2152  0FEB                     	;# 
  2153  0FED                     	;# 
  2154  0FEE                     	;# 
  2155  0FEF                     	;# 
  2156                           
  2157                           	psect	idataBANK4
  2158  1F34                     __pidataBANK4:	
  2159                           
  2160                           ;initializer for __product
  2161  1F34  3463               	retlw	99
  2162  1F35  3402               	retlw	2
  2163  1F36  3400               	retlw	0
  2164  1F37  3400               	retlw	0
  2165  1F38  3400               	retlw	0
  2166  1F39  3400               	retlw	0
  2167  1F3A  3400               	retlw	0
  2168  1F3B  3400               	retlw	0
  2169  1F3C  3400               	retlw	0
  2170  1F3D  3400               	retlw	0
  2171  1F3E  3400               	retlw	0
  2172  1F3F  3400               	retlw	0
  2173  1F40  34FF               	retlw	255
  2174  1F41  34FF               	retlw	255
  2175  1F42  34FF               	retlw	255
  2176  1F43  3400               	retlw	0
  2177  1F44  3400               	retlw	0
  2178  1F45  3400               	retlw	0
  2179  1F46  3400               	retlw	0
  2180  1F47  3400               	retlw	0
  2181  1F48  3400               	retlw	0
  2182  1F49  3400               	retlw	0
  2183  1F4A  3400               	retlw	0
  2184  1F4B  3400               	retlw	0
  2185  1F4C  3400               	retlw	0
  2186  1F4D  3400               	retlw	0
  2187  1F4E  3400               	retlw	0
  2188  1F4F  3400               	retlw	0
  2189  1F50  3400               	retlw	0
  2190  1F51  3400               	retlw	0
  2191  1F52  3400               	retlw	0
  2192  1F53  3400               	retlw	0
  2193                           
  2194                           	psect	stringtext
  2195  1000                     __pstringtext:	
  2196  1000                     _CC2500_registers_address:	
  2197  1000  3403               	retlw	3
  2198  1001  3416               	retlw	22
  2199  1002  3417               	retlw	23
  2200  1003  341E               	retlw	30
  2201  1004  341F               	retlw	31
  2202  1005  3420               	retlw	32
  2203  1006  342A               	retlw	42
  2204  1007  342B               	retlw	43
  2205  1008  340B               	retlw	11
  2206  1009  340C               	retlw	12
  2207  100A  340D               	retlw	13
  2208  100B  340E               	retlw	14
  2209  100C  340F               	retlw	15
  2210  100D  3410               	retlw	16
  2211  100E  3411               	retlw	17
  2212  100F  3412               	retlw	18
  2213  1010  3413               	retlw	19
  2214  1011  3414               	retlw	20
  2215  1012  340A               	retlw	10
  2216  1013  3415               	retlw	21
  2217  1014  3421               	retlw	33
  2218  1015  3422               	retlw	34
  2219  1016  3418               	retlw	24
  2220  1017  3419               	retlw	25
  2221  1018  341A               	retlw	26
  2222  1019  341B               	retlw	27
  2223  101A  341C               	retlw	28
  2224  101B  341D               	retlw	29
  2225  101C  3423               	retlw	35
  2226  101D  3424               	retlw	36
  2227  101E  3425               	retlw	37
  2228  101F  3426               	retlw	38
  2229  1020  3429               	retlw	41
  2230  1021  342C               	retlw	44
  2231  1022  342D               	retlw	45
  2232  1023  342E               	retlw	46
  2233  1024  3400               	retlw	0
  2234  1025  3401               	retlw	1
  2235  1026  3402               	retlw	2
  2236  1027  3407               	retlw	7
  2237  1028  3408               	retlw	8
  2238  1029  3409               	retlw	9
  2239  102A  3406               	retlw	6
  2240  102B  3404               	retlw	4
  2241  102C  3405               	retlw	5
  2242  102D  3427               	retlw	39
  2243  102E  3428               	retlw	40
  2244  102F                     __end_of_CC2500_registers_address:	
  2245  102F                     _CC2500_rfSettings:	
  2246  102F  3407               	retlw	7
  2247  1030  3407               	retlw	7
  2248  1031  3430               	retlw	48
  2249  1032  3487               	retlw	135
  2250  1033  346B               	retlw	107
  2251  1034  34F8               	retlw	248
  2252  1035  347F               	retlw	127
  2253  1036  343F               	retlw	63
  2254  1037  3409               	retlw	9
  2255  1038  3400               	retlw	0
  2256  1039  345C               	retlw	92
  2257  103A  34A7               	retlw	167
  2258  103B  3462               	retlw	98
  2259  103C  3486               	retlw	134
  2260  103D  3483               	retlw	131
  2261  103E  3403               	retlw	3
  2262  103F  3422               	retlw	34
  2263  1040  34F8               	retlw	248
  2264  1041  3400               	retlw	0
  2265  1042  3444               	retlw	68
  2266  1043  34B6               	retlw	182
  2267  1044  3410               	retlw	16
  2268  1045  3418               	retlw	24
  2269  1046  341D               	retlw	29
  2270  1047  341C               	retlw	28
  2271  1048  34C7               	retlw	199
  2272  1049  3400               	retlw	0
  2273  104A  34B2               	retlw	178
  2274  104B  34EA               	retlw	234
  2275  104C  340A               	retlw	10
  2276  104D  3400               	retlw	0
  2277  104E  3411               	retlw	17
  2278  104F  3459               	retlw	89
  2279  1050  3488               	retlw	136
  2280  1051  3431               	retlw	49
  2281  1052  340B               	retlw	11
  2282  1053  342F               	retlw	47
  2283  1054  342E               	retlw	46
  2284  1055  3406               	retlw	6
  2285  1056  3404               	retlw	4
  2286  1057  3405               	retlw	5
  2287  1058  3400               	retlw	0
  2288  1059  3430               	retlw	48
  2289  105A  34D3               	retlw	211
  2290  105B  3491               	retlw	145
  2291  105C  3441               	retlw	65
  2292  105D  3400               	retlw	0
  2293  105E                     __end_of_CC2500_rfSettings:	
  2294  105E                     _CC2500_patable_vaule:	
  2295  105E  34FE               	retlw	254
  2296  105F  34FE               	retlw	254
  2297  1060  34FE               	retlw	254
  2298  1061  34FE               	retlw	254
  2299  1062  34FE               	retlw	254
  2300  1063  34FE               	retlw	254
  2301  1064  34FE               	retlw	254
  2302  1065  34FE               	retlw	254
  2303  1066                     __end_of_CC2500_patable_vaule:	
  2304                           
  2305                           	psect	nvBANK0
  2306  006E                     __pnvBANK0:	
  2307  006E                     _product:	
  2308  006E                     	ds	1
  2309  000C                     _PORTA	set	12
  2310  000D                     _PORTB	set	13
  2311  000E                     _PORTC	set	14
  2312  0018                     _T1CON	set	24
  2313  0017                     _TMR1H	set	23
  2314  0016                     _TMR1L	set	22
  2315  005F                     _GIE	set	95
  2316  005B                     _IOCIE	set	91
  2317  0058                     _IOCIF	set	88
  2318  005E                     _PEIE	set	94
  2319  0060                     _RA0	set	96
  2320  0064                     _RA4	set	100
  2321  0066                     _RA6	set	102
  2322  0067                     _RA7	set	103
  2323  0068                     _RB0	set	104
  2324  0069                     _RB1	set	105
  2325  006A                     _RB2	set	106
  2326  006B                     _RB3	set	107
  2327  006D                     _RB5	set	109
  2328  0070                     _RC0	set	112
  2329  0071                     _RC1	set	113
  2330  0073                     _RC3	set	115
  2331  0074                     _RC4	set	116
  2332  0075                     _RC5	set	117
  2333  0088                     _TMR1IF	set	136
  2334  009D                     _ADCON0	set	157
  2335  009E                     _ADCON1	set	158
  2336  009C                     _ADRESH	set	156
  2337  009B                     _ADRESL	set	155
  2338  0099                     _OSCCON	set	153
  2339  008C                     _TRISA	set	140
  2340  008D                     _TRISB	set	141
  2341  008E                     _TRISC	set	142
  2342  0097                     _WDTCON	set	151
  2343  04E9                     _GO_nDONE	set	1257
  2344  0488                     _TMR1IE	set	1160
  2345  0117                     _FVRCON	set	279
  2346  010C                     _LATA	set	268
  2347  010D                     _LATB	set	269
  2348  010E                     _LATC	set	270
  2349  018C                     _ANSELA	set	396
  2350  018D                     _ANSELB	set	397
  2351  018E                     _ANSELC	set	398
  2352  0192                     _PMADRH	set	402
  2353  0191                     _PMADRL	set	401
  2354  0196                     _PMCON2	set	406
  2355  0194                     _PMDATH	set	404
  2356  0193                     _PMDATL	set	403
  2357  0CAE                     _CFGS	set	3246
  2358  0CAC                     _FREE	set	3244
  2359  0CAD                     _LWLO	set	3245
  2360  0CA8                     _RD	set	3240
  2361  0CA9                     _WR	set	3241
  2362  0CAA                     _WREN	set	3242
  2363  1069                     _WPUB1	set	4201
  2364  106A                     _WPUB2	set	4202
  2365  0396                     _IOCBF	set	918
  2366  0395                     _IOCBN	set	917
  2367  0394                     _IOCBP	set	916
  2368  1CB2                     _IOCBF2	set	7346
  2369                           
  2370                           ; #config settings
  2371  0000                     
  2372                           	psect	cinit
  2373  0015                     start_initialization:	
  2374  0015                     __initialization:	
  2375                           
  2376                           ; Clear objects allocated to BITCOMMON
  2377  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2378                           
  2379                           ; Clear objects allocated to COMMON
  2380  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2381  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2382  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2383  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2384  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BANK0
  2387  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK1
  2390  001C  30A0               	movlw	low __pbssBANK1
  2391  001D  0084               	movwf	4
  2392  001E  3000               	movlw	high __pbssBANK1
  2393  001F  0085               	movwf	5
  2394  0020  3049               	movlw	73
  2395  0021  319B  23AD  3180   	fcall	clear_ram0
  2396                           
  2397                           ; Clear objects allocated to BANK2
  2398  0024  3020               	movlw	low __pbssBANK2
  2399  0025  0084               	movwf	4
  2400  0026  3001               	movlw	high __pbssBANK2
  2401  0027  0085               	movwf	5
  2402  0028  304F               	movlw	79
  2403  0029  319B  23AD  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK3
  2406  002C  30A0               	movlw	low __pbssBANK3
  2407  002D  0084               	movwf	4
  2408  002E  3001               	movlw	high __pbssBANK3
  2409  002F  0085               	movwf	5
  2410  0030  3046               	movlw	70
  2411  0031  319B  23AD  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Initialize objects allocated to BANK4
  2414  0034  3034               	movlw	low __pidataBANK4
  2415  0035  0084               	movwf	4
  2416  0036  309F               	movlw	(high __pidataBANK4)| (0+128)
  2417  0037  0085               	movwf	5
  2418  0038  3020               	movlw	low __pdataBANK4
  2419  0039  0086               	movwf	6
  2420  003A  3002               	movlw	high __pdataBANK4
  2421  003B  0087               	movwf	7
  2422  003C  3020               	movlw	32
  2423  003D  319B  23A7         	fcall	init_ram
  2424  003F                     end_of_initialization:	
  2425                           ;End of C runtime variable initialization code
  2426                           
  2427  003F                     __end_of__initialization:	
  2428  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2429  0040  0020               	movlb	0
  2430  0041  3196  2EED         	ljmp	_main	;jump to C main() function
  2431                           
  2432                           	psect	bitbssCOMMON
  2433  03E8                     __pbitbssCOMMON:	
  2434  03E8                     _Receive_OK:	
  2435  03E8                     	ds	1
  2436  03E9                     _Transceive_OK:	
  2437  03E9                     	ds	1
  2438                           
  2439                           	psect	bssCOMMON
  2440  0078                     __pbssCOMMON:	
  2441  0078                     _DelayOff:	
  2442  0078                     	ds	1
  2443  0079                     _DimmerLightsIntr:	
  2444  0079                     	ds	1
  2445  007A                     _LED:	
  2446  007A                     	ds	1
  2447  007B                     _SPI0Buffer:	
  2448  007B                     	ds	1
  2449  007C                     _Sw:	
  2450  007C                     	ds	1
  2451                           
  2452                           	psect	bssBANK0
  2453  006F                     __pbssBANK0:	
  2454  006F                     _DimmerLights:	
  2455  006F                     	ds	1
  2456                           
  2457                           	psect	bssBANK1
  2458  00A0                     __pbssBANK1:	
  2459  00A0                     _myMain:	
  2460  00A0                     	ds	14
  2461  00AE                     _Buz1:	
  2462  00AE                     	ds	12
  2463  00BA                     _RF1:	
  2464  00BA                     	ds	12
  2465  00C6                     _Timer1:	
  2466  00C6                     	ds	3
  2467  00C9                     _RF_Count:	
  2468  00C9                     	ds	2
  2469  00CB                     _WDT:	
  2470  00CB                     	ds	2
  2471  00CD                     _CRC:	
  2472  00CD                     	ds	1
  2473  00CE                     _DimmerLights11:	
  2474  00CE                     	ds	1
  2475  00CF                     _DimmerLightsIntrIOC:	
  2476  00CF                     	ds	1
  2477  00D0                     _RSSI:	
  2478  00D0                     	ds	1
  2479  00D1                     _Rx_Length:	
  2480  00D1                     	ds	1
  2481  00D2                     _SwDetect:	
  2482  00D2                     	ds	1
  2483  00D3                     _Tx_Length:	
  2484  00D3                     	ds	1
  2485  00D4                     _r_address:	
  2486  00D4                     	ds	1
  2487  00D5                     _r_data:	
  2488  00D5                     	ds	1
  2489  00D6                     _s_data:	
  2490  00D6                     	ds	1
  2491  00D7                     _Temp:	
  2492  00D7                     	ds	18
  2493                           
  2494                           	psect	bssBANK2
  2495  0120                     __pbssBANK2:	
  2496  0120                     _RF_Data:	
  2497  0120                     	ds	30
  2498  013E                     _Dimmer:	
  2499  013E                     	ds	3
  2500  0141                     _Load:	
  2501  0141                     	ds	46
  2502                           
  2503                           	psect	bssBANK3
  2504  01A0                     __pbssBANK3:	
  2505  01A0                     _Memory:	
  2506  01A0                     	ds	37
  2507  01C5                     _DimmerLights1:	
  2508  01C5                     	ds	15
  2509  01D4                     _Sw1:	
  2510  01D4                     	ds	9
  2511  01DD                     _DlySw1:	
  2512  01DD                     	ds	5
  2513  01E2                     _VarErrLED:	
  2514  01E2                     	ds	4
  2515                           
  2516                           	psect	dataBANK4
  2517  0220                     __pdataBANK4:	
  2518  0220                     __product:	
  2519  0220                     	ds	32
  2520                           
  2521                           	psect	clrtext
  2522  1BAD                     clear_ram0:	
  2523                           ;	Called with FSR0 containing the base address, and
  2524                           ;	WREG with the size to clear
  2525                           
  2526  1BAD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2527  1BAE                     clrloop0:	
  2528  1BAE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2529  1BAF  3101               	addfsr 0,1
  2530  1BB0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2531  1BB1  2BAE               	goto	clrloop0	;have we reached the end yet?
  2532  1BB2  3400               	retlw	0	;all done for this memory range, return
  2533                           
  2534                           	psect	inittext
  2535  1BA7                     init_ram:	
  2536  1BA7  00FE               	movwf	126
  2537  1BA8                     initloop:	
  2538  1BA8  0012               	moviw fsr0++
  2539  1BA9  001E               	movwi fsr1++
  2540  1BAA  0BFE               	decfsz	126,f
  2541  1BAB  2BA8               	goto	initloop
  2542  1BAC  3400               	retlw	0
  2543                           
  2544                           	psect	cstackBANK1
  2545  00E9                     __pcstackBANK1:	
  2546  00E9                     setRF_Main@loop_f:	
  2547                           
  2548                           ; 1 bytes @ 0x0
  2549  00E9                     	ds	1
  2550  00EA                     setRF_Main@Receive_OK:	
  2551                           
  2552                           ; 1 bytes @ 0x1
  2553  00EA                     	ds	1
  2554  00EB                     setRF_Main@error:	
  2555                           
  2556                           ; 1 bytes @ 0x2
  2557  00EB                     	ds	1
  2558  00EC                     ?_main:	
  2559  00EC                     main@argc:	
  2560                           ; 2 bytes @ 0x3
  2561                           
  2562                           
  2563                           ; 2 bytes @ 0x3
  2564  00EC                     	ds	2
  2565  00EE                     main@argv:	
  2566                           
  2567                           ; 2 bytes @ 0x5
  2568  00EE                     	ds	2
  2569                           
  2570                           	psect	cstackCOMMON
  2571  0070                     __pcstackCOMMON:	
  2572  0070                     ?_Timeout_Counter:	
  2573  0070                     ?_set_TimeoutCleared:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_CC2500_WriteByte:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_CC2500_WriteCommand:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_CC2500_ReadStatus:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_CC2500_ReadByte:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_CC2500_PowerRST:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_CC2500_InitSetREG:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_InitPATable:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_ClearTXFIFO:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_ClearRXFIFO:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_FrequencyCabr:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_SIDLEMode:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_DlyOff_Initialization:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_DlyOff_Main:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_setDimmerLights_ErrorClose:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_setDimmerLights_Initialization:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_Dimmer_Initialization:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_setDimmerLights_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setDimmerLights_Line:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setTxData:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setLED_Initialization:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setLED_Main:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_Fosc_Set:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_IO_Set:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_TMR1_Set:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_ADC_Set:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_IOC_Set:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_WDT_Set:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_IOC_ISR:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_TMR1_ISR:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_Flash_Memory_Write:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_Flash_Memory_Modify:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_WDT_Clearing:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_myMain_Initialization:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_Temp_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Load_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Switch_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_RF_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_getLoad_AD:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_getTemp_AD:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_my_MainTimer:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Temp_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Load_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Switch_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_RF_Main:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Exception_Main:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_setLoad_AH_AL_Restore:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_setTemp_Initialization:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_setTemp_Main:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_setRF_Initialization:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_setRF_Main:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_RF_RxDisable:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_getRxData:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_setLog_Code:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setControl_Lights_Table:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setRFSW_Control:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setRFSW_AdjControl:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setRF_DimmerValue:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setSw_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_setSw_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_Buzzer_Initialization:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_Buzzer_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_CC2500_TxData:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_CC2500_RxData:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_CC2500_PowerOnInitial:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_DelayOffPointSelect:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_DelayOff_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_DelayOff_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_DimmerIntrIOCPointSelect:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ??_DimmerIntrIOCPointSelect:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_DimmerIntrPointSelect:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ??_DimmerIntrPointSelect:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_setDimmerLights_IntrControl:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_DimmerLightsPointSelect:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DimmerLights_Initialization:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DimmerLights_Main:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_setDimmerLights_SwOn:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_setDimmerLights_SwOff:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_setDimmerLights_AdjControl:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_setDimmerLights_AdjRF:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_LedPointSelect:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_LED_Initialization:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_LED_Main:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_Mcu_Initialization:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_ISR:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_setDimmerReClock:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Flash_Memory_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_Flash_Memory_Main:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_Flash_Memory_Unlock:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_Flash_Memory_Erasing:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_setMemory_Modify:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_setMemory_LoopSave:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_WDT_Main:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_setMain_Exception:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_setRF_Learn:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_TouchPower:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_SwPointSelect:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_DelayTimejudge:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_getMain_All_Error_Status:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_getLoad_OK:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_getMain_LightsStatus:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_setPercentValue:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_getPercentValue:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_Flash_Memory_Read:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getRF_KeyStatus:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_getSw_KeyStatus:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getDelayOff_GO:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getDimmerLights_Status:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getAll_DimmerLights_AdjGO:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getDimmer_LoadOK:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getDimmerLights_Line:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getMain_Lights_Count:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getMain_LoadOK:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     getSw_KeyStatus@sw:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918                           
  2919                           ; 1 bytes @ 0x0
  2920  0070                     	ds	1
  2921  0071                     DimmerIntrIOCPointSelect@lights:	
  2922  0071                     DimmerIntrPointSelect@lights:	
  2923                           ; 1 bytes @ 0x1
  2924                           
  2925                           
  2926                           ; 1 bytes @ 0x1
  2927  0071                     	ds	1
  2928  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2929  0072                     ??_setDimmerLights_IntrControl:	
  2930                           ; 0 bytes @ 0x2
  2931                           
  2932  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2933                           ; 0 bytes @ 0x2
  2934                           
  2935                           
  2936                           ; 1 bytes @ 0x2
  2937  0072                     	ds	1
  2938  0073                     ??_IOC_ISR:	
  2939  0073                     ??_setDimmerReClock:	
  2940                           ; 0 bytes @ 0x3
  2941                           
  2942                           
  2943                           ; 0 bytes @ 0x3
  2944  0073                     	ds	3
  2945  0076                     setDimmerLights_IntrControl@lights:	
  2946                           
  2947                           ; 1 bytes @ 0x6
  2948  0076                     	ds	1
  2949  0077                     ??_TMR1_ISR:	
  2950  0077                     ??_ISR:	
  2951                           ; 0 bytes @ 0x7
  2952                           
  2953                           
  2954                           ; 0 bytes @ 0x7
  2955  0077                     	ds	1
  2956                           
  2957                           	psect	cstackBANK0
  2958  0020                     __pcstackBANK0:	
  2959  0020                     ??_Timeout_Counter:	
  2960  0020                     ??_set_TimeoutCleared:	
  2961                           ; 0 bytes @ 0x0
  2962                           
  2963  0020                     ??_CC2500_WriteByte:	
  2964                           ; 0 bytes @ 0x0
  2965                           
  2966  0020                     ??_CC2500_ReadByte:	
  2967                           ; 0 bytes @ 0x0
  2968                           
  2969  0020                     ?_DelayTime_1us:	
  2970                           ; 0 bytes @ 0x0
  2971                           
  2972  0020                     ??_Dimmer_Initialization:	
  2973                           ; 0 bytes @ 0x0
  2974                           
  2975  0020                     ??_getMain_All_Error_Status:	
  2976                           ; 0 bytes @ 0x0
  2977                           
  2978  0020                     ??_getLoad_OK:	
  2979                           ; 0 bytes @ 0x0
  2980                           
  2981  0020                     ??_setDimmerLights_Line:	
  2982                           ; 0 bytes @ 0x0
  2983                           
  2984  0020                     ?_setRF_DimmerLights:	
  2985                           ; 0 bytes @ 0x0
  2986                           
  2987  0020                     ??_setTxData:	
  2988                           ; 0 bytes @ 0x0
  2989                           
  2990  0020                     ??_Fosc_Set:	
  2991                           ; 0 bytes @ 0x0
  2992                           
  2993  0020                     ??_IO_Set:	
  2994                           ; 0 bytes @ 0x0
  2995                           
  2996  0020                     ??_TMR1_Set:	
  2997                           ; 0 bytes @ 0x0
  2998                           
  2999  0020                     ??_ADC_Set:	
  3000                           ; 0 bytes @ 0x0
  3001                           
  3002  0020                     ??_IOC_Set:	
  3003                           ; 0 bytes @ 0x0
  3004                           
  3005  0020                     ??_WDT_Set:	
  3006                           ; 0 bytes @ 0x0
  3007                           
  3008  0020                     ??_Flash_Memory_Read:	
  3009                           ; 0 bytes @ 0x0
  3010                           
  3011  0020                     ?_setMemory_Data:	
  3012                           ; 0 bytes @ 0x0
  3013                           
  3014  0020                     ??_Flash_Memory_Write:	
  3015                           ; 0 bytes @ 0x0
  3016                           
  3017  0020                     ??_WDT_Clearing:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_myMain_Initialization:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_Temp_Initialization:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ??_setLoad_AH_AL_Restore:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_setTemp_Initialization:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_setRF_Initialization:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_getRF_KeyStatus:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_getSw_KeyStatus:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_Buzzer_Initialization:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ??_Buzzer_Main:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_DelayOffPointSelect:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_DimmerLightsPointSelect:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_getAll_DimmerLights_AdjGO:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_getDimmer_LoadOK:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_getDimmerLights_Line:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_LedPointSelect:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_Flash_Memory_Unlock:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_Flash_Memory_Erasing:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_setMemory_Modify:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_setMemory_LoopSave:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_WDT_Main:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_getMain_Lights_Count:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_setRF_Learn:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_TouchPower:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_SwPointSelect:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ?___bmul:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ?_getBuz_GO:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098  0020                     ?_getAD:	
  3099                           ; 2 bytes @ 0x0
  3100                           
  3101  0020                     ?___awdiv:	
  3102                           ; 2 bytes @ 0x0
  3103                           
  3104  0020                     ?___lwdiv:	
  3105                           ; 2 bytes @ 0x0
  3106                           
  3107  0020                     ?___ftpack:	
  3108                           ; 2 bytes @ 0x0
  3109                           
  3110  0020                     getAll_DimmerLights_AdjGO@adjgo:	
  3111                           ; 3 bytes @ 0x0
  3112                           
  3113  0020                     getDimmer_LoadOK@status:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116  0020                     setDimmerLights_Line@lights:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119  0020                     getDimmerLights_Line@line:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0020                     getAD@adcon1:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0020                     setMemory_Data@data:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0020                     getMain_Lights_Count@count:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0020                     getLoad_OK@ok:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0020                     setRF_DimmerLights@on:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137  0020                     ___bmul@multiplicand:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140  0020                     DelayTime_1us@count:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143  0020                     ___awdiv@divisor:	
  3144                           ; 2 bytes @ 0x0
  3145                           
  3146  0020                     ___lwdiv@divisor:	
  3147                           ; 2 bytes @ 0x0
  3148                           
  3149  0020                     ___ftpack@arg:	
  3150                           ; 2 bytes @ 0x0
  3151                           
  3152                           
  3153                           ; 3 bytes @ 0x0
  3154  0020                     	ds	1
  3155  0021                     ??_setRF_DimmerLights:	
  3156  0021                     ??_setMemory_Data:	
  3157                           ; 0 bytes @ 0x1
  3158                           
  3159  0021                     ??_RF_Initialization:	
  3160                           ; 0 bytes @ 0x1
  3161                           
  3162  0021                     ??_Mcu_Initialization:	
  3163                           ; 0 bytes @ 0x1
  3164                           
  3165  0021                     ??_getMain_LoadOK:	
  3166                           ; 0 bytes @ 0x1
  3167                           
  3168  0021                     ??___bmul:	
  3169                           ; 0 bytes @ 0x1
  3170                           
  3171  0021                     CC2500_WriteByte@loop_a:	
  3172                           ; 0 bytes @ 0x1
  3173                           
  3174  0021                     CC2500_ReadByte@loop_b:	
  3175                           ; 1 bytes @ 0x1
  3176                           
  3177  0021                     DelayOffPointSelect@sw:	
  3178                           ; 1 bytes @ 0x1
  3179                           
  3180  0021                     DimmerLightsPointSelect@lights:	
  3181                           ; 1 bytes @ 0x1
  3182                           
  3183  0021                     LedPointSelect@led:	
  3184                           ; 1 bytes @ 0x1
  3185                           
  3186  0021                     Flash_Memory_Read@i:	
  3187                           ; 1 bytes @ 0x1
  3188                           
  3189  0021                     Flash_Memory_Write@i:	
  3190                           ; 1 bytes @ 0x1
  3191                           
  3192  0021                     setMemory_Modify@command:	
  3193                           ; 1 bytes @ 0x1
  3194                           
  3195  0021                     setMemory_LoopSave@command:	
  3196                           ; 1 bytes @ 0x1
  3197                           
  3198  0021                     getMain_Lights_Count@status2:	
  3199                           ; 1 bytes @ 0x1
  3200                           
  3201  0021                     setLoad_AH_AL_Restore@i:	
  3202                           ; 1 bytes @ 0x1
  3203                           
  3204  0021                     setRF_Learn@command:	
  3205                           ; 1 bytes @ 0x1
  3206                           
  3207  0021                     getRF_KeyStatus@key:	
  3208                           ; 1 bytes @ 0x1
  3209                           
  3210  0021                     SwPointSelect@sw:	
  3211                           ; 1 bytes @ 0x1
  3212                           
  3213  0021                     getSw_KeyStatus@status:	
  3214                           ; 1 bytes @ 0x1
  3215                           
  3216  0021                     _getMain_All_Error_Status$3332:	
  3217                           ; 1 bytes @ 0x1
  3218                           
  3219                           
  3220                           ; 2 bytes @ 0x1
  3221  0021                     	ds	1
  3222  0022                     ??_CC2500_WriteCommand:	
  3223  0022                     ??_CC2500_ReadStatus:	
  3224                           ; 0 bytes @ 0x2
  3225                           
  3226  0022                     ??_DelayTime_1us:	
  3227                           ; 0 bytes @ 0x2
  3228                           
  3229  0022                     ?_CC2500_WriteREG:	
  3230                           ; 0 bytes @ 0x2
  3231                           
  3232  0022                     ??_DlyOff_Initialization:	
  3233                           ; 0 bytes @ 0x2
  3234                           
  3235  0022                     ??_setDimmerLights_Initialization:	
  3236                           ; 0 bytes @ 0x2
  3237                           
  3238  0022                     ?_setDimmerLights_Trigger:	
  3239                           ; 0 bytes @ 0x2
  3240                           
  3241  0022                     ?_setDimmerLights_TriggerAdj:	
  3242                           ; 0 bytes @ 0x2
  3243                           
  3244  0022                     ?_setLED:	
  3245                           ; 0 bytes @ 0x2
  3246                           
  3247  0022                     ??_setLED_Main:	
  3248                           ; 0 bytes @ 0x2
  3249                           
  3250  0022                     ??_Load_Initialization:	
  3251                           ; 0 bytes @ 0x2
  3252                           
  3253  0022                     ??_getBuz_GO:	
  3254                           ; 0 bytes @ 0x2
  3255                           
  3256  0022                     ??_getDelayOff_GO:	
  3257                           ; 0 bytes @ 0x2
  3258                           
  3259  0022                     ??_getDimmerLights_Status:	
  3260                           ; 0 bytes @ 0x2
  3261                           
  3262  0022                     CC2500_WriteREG@value:	
  3263                           ; 0 bytes @ 0x2
  3264                           
  3265  0022                     DlyOff_Initialization@sw:	
  3266                           ; 1 bytes @ 0x2
  3267                           
  3268  0022                     getDelayOff_GO@sw:	
  3269                           ; 1 bytes @ 0x2
  3270                           
  3271  0022                     getDimmerLights_Status@lights:	
  3272                           ; 1 bytes @ 0x2
  3273                           
  3274  0022                     setDimmerLights_Trigger@command:	
  3275                           ; 1 bytes @ 0x2
  3276                           
  3277  0022                     setDimmerLights_TriggerAdj@command:	
  3278                           ; 1 bytes @ 0x2
  3279                           
  3280  0022                     setLED@command:	
  3281                           ; 1 bytes @ 0x2
  3282                           
  3283  0022                     Flash_Memory_Read@address:	
  3284                           ; 1 bytes @ 0x2
  3285                           
  3286  0022                     setMemory_Data@address:	
  3287                           ; 1 bytes @ 0x2
  3288                           
  3289  0022                     getMain_Lights_Count@status3:	
  3290                           ; 1 bytes @ 0x2
  3291                           
  3292  0022                     getMain_LoadOK@ok:	
  3293                           ; 1 bytes @ 0x2
  3294                           
  3295  0022                     _getRF_KeyStatus$4904:	
  3296                           ; 1 bytes @ 0x2
  3297                           
  3298  0022                     _getSw_KeyStatus$5851:	
  3299                           ; 1 bytes @ 0x2
  3300                           
  3301  0022                     ___bmul@product:	
  3302                           ; 1 bytes @ 0x2
  3303                           
  3304  0022                     DelayTime_1us@i:	
  3305                           ; 1 bytes @ 0x2
  3306                           
  3307  0022                     ___awdiv@dividend:	
  3308                           ; 2 bytes @ 0x2
  3309                           
  3310  0022                     ___lwdiv@dividend:	
  3311                           ; 2 bytes @ 0x2
  3312                           
  3313                           
  3314                           ; 2 bytes @ 0x2
  3315  0022                     	ds	1
  3316  0023                     ??_CC2500_WriteREG:	
  3317  0023                     ??_setDimmerLights_Trigger:	
  3318                           ; 0 bytes @ 0x3
  3319                           
  3320  0023                     ??_setDimmerLights_TriggerAdj:	
  3321                           ; 0 bytes @ 0x3
  3322                           
  3323  0023                     ??_setLED:	
  3324                           ; 0 bytes @ 0x3
  3325                           
  3326  0023                     ??_DelayOff_Initialization:	
  3327                           ; 0 bytes @ 0x3
  3328                           
  3329  0023                     ??_getAD:	
  3330                           ; 0 bytes @ 0x3
  3331                           
  3332  0023                     CC2500_WriteCommand@command:	
  3333                           ; 0 bytes @ 0x3
  3334                           
  3335  0023                     CC2500_ReadStatus@status_addr:	
  3336                           ; 1 bytes @ 0x3
  3337                           
  3338  0023                     getDelayOff_GO@go:	
  3339                           ; 1 bytes @ 0x3
  3340                           
  3341  0023                     setDimmerLights_Initialization@lights:	
  3342                           ; 1 bytes @ 0x3
  3343                           
  3344  0023                     getDimmerLights_Status@status:	
  3345                           ; 1 bytes @ 0x3
  3346                           
  3347  0023                     setLED@led:	
  3348                           ; 1 bytes @ 0x3
  3349                           
  3350  0023                     getAD@adcon0:	
  3351                           ; 1 bytes @ 0x3
  3352                           
  3353  0023                     Flash_Memory_Read@ret:	
  3354                           ; 1 bytes @ 0x3
  3355                           
  3356  0023                     getMain_Lights_Count@status1:	
  3357                           ; 1 bytes @ 0x3
  3358                           
  3359  0023                     setRF_DimmerLights@status:	
  3360                           ; 1 bytes @ 0x3
  3361                           
  3362  0023                     ___bmul@multiplier:	
  3363                           ; 1 bytes @ 0x3
  3364                           
  3365  0023                     ___ftpack@exp:	
  3366                           ; 1 bytes @ 0x3
  3367                           
  3368  0023                     _getMain_All_Error_Status$3333:	
  3369                           ; 1 bytes @ 0x3
  3370                           
  3371                           
  3372                           ; 2 bytes @ 0x3
  3373  0023                     	ds	1
  3374  0024                     ??_CC2500_ClearTXFIFO:	
  3375  0024                     ??_CC2500_ClearRXFIFO:	
  3376                           ; 0 bytes @ 0x4
  3377                           
  3378  0024                     ??_CC2500_SIDLEMode:	
  3379                           ; 0 bytes @ 0x4
  3380                           
  3381  0024                     ??_DelayTimejudge:	
  3382                           ; 0 bytes @ 0x4
  3383                           
  3384  0024                     ??_getMain_LightsStatus:	
  3385                           ; 0 bytes @ 0x4
  3386                           
  3387  0024                     ??_setLED_Initialization:	
  3388                           ; 0 bytes @ 0x4
  3389                           
  3390  0024                     ??_Flash_Memory_Modify:	
  3391                           ; 0 bytes @ 0x4
  3392                           
  3393  0024                     ??_getLoad_AD:	
  3394                           ; 0 bytes @ 0x4
  3395                           
  3396  0024                     ??_getTemp_AD:	
  3397                           ; 0 bytes @ 0x4
  3398                           
  3399  0024                     ??_RF_RxDisable:	
  3400                           ; 0 bytes @ 0x4
  3401                           
  3402  0024                     ??_setSw_Initialization:	
  3403                           ; 0 bytes @ 0x4
  3404                           
  3405  0024                     ??_CC2500_TxData:	
  3406                           ; 0 bytes @ 0x4
  3407                           
  3408  0024                     ??_CC2500_RxData:	
  3409                           ; 0 bytes @ 0x4
  3410                           
  3411  0024                     ??_DimmerLights_Initialization:	
  3412                           ; 0 bytes @ 0x4
  3413                           
  3414  0024                     ??___awdiv:	
  3415                           ; 0 bytes @ 0x4
  3416                           
  3417  0024                     ??___lwdiv:	
  3418                           ; 0 bytes @ 0x4
  3419                           
  3420  0024                     CC2500_WriteREG@w_addr:	
  3421                           ; 0 bytes @ 0x4
  3422                           
  3423  0024                     setDimmerLights_Trigger@lights:	
  3424                           ; 1 bytes @ 0x4
  3425                           
  3426  0024                     setDimmerLights_TriggerAdj@lights:	
  3427                           ; 1 bytes @ 0x4
  3428                           
  3429  0024                     setLED_Initialization@led:	
  3430                           ; 1 bytes @ 0x4
  3431                           
  3432  0024                     setLED_Main@led:	
  3433                           ; 1 bytes @ 0x4
  3434                           
  3435  0024                     setRF_DimmerLights@lights:	
  3436                           ; 1 bytes @ 0x4
  3437                           
  3438  0024                     setSw_Initialization@sw:	
  3439                           ; 1 bytes @ 0x4
  3440                           
  3441  0024                     ___ftpack@sign:	
  3442                           ; 1 bytes @ 0x4
  3443                           
  3444  0024                     getBuz_GO@i:	
  3445                           ; 1 bytes @ 0x4
  3446                           
  3447  0024                     DelayTime_1us@j:	
  3448                           ; 2 bytes @ 0x4
  3449                           
  3450                           
  3451                           ; 2 bytes @ 0x4
  3452  0024                     	ds	1
  3453  0025                     ??_CC2500_InitSetREG:	
  3454  0025                     ??_CC2500_InitPATable:	
  3455                           ; 0 bytes @ 0x5
  3456                           
  3457  0025                     ??_Switch_Initialization:	
  3458                           ; 0 bytes @ 0x5
  3459                           
  3460  0025                     ??___ftpack:	
  3461                           ; 0 bytes @ 0x5
  3462                           
  3463  0025                     ??_setDimmerLights_AdjControl:	
  3464                           ; 0 bytes @ 0x5
  3465                           
  3466  0025                     ??_LED_Initialization:	
  3467                           ; 0 bytes @ 0x5
  3468                           
  3469  0025                     ??_LED_Main:	
  3470                           ; 0 bytes @ 0x5
  3471                           
  3472  0025                     CC2500_TxData@loop_e:	
  3473                           ; 0 bytes @ 0x5
  3474                           
  3475  0025                     CC2500_RxData@loop_f:	
  3476                           ; 1 bytes @ 0x5
  3477                           
  3478  0025                     Flash_Memory_Modify@i:	
  3479                           ; 1 bytes @ 0x5
  3480                           
  3481  0025                     getMain_LightsStatus@count:	
  3482                           ; 1 bytes @ 0x5
  3483                           
  3484  0025                     getMain_All_Error_Status@command:	
  3485                           ; 1 bytes @ 0x5
  3486                           
  3487  0025                     getTemp_AD@channel:	
  3488                           ; 1 bytes @ 0x5
  3489                           
  3490  0025                     ___awdiv@counter:	
  3491                           ; 1 bytes @ 0x5
  3492                           
  3493  0025                     ___lwdiv@quotient:	
  3494                           ; 1 bytes @ 0x5
  3495                           
  3496                           
  3497                           ; 2 bytes @ 0x5
  3498  0025                     	ds	1
  3499  0026                     ??_CC2500_PowerRST:	
  3500  0026                     ??_CC2500_FrequencyCabr:	
  3501                           ; 0 bytes @ 0x6
  3502                           
  3503  0026                     CC2500_InitSetREG@temp1:	
  3504                           ; 0 bytes @ 0x6
  3505                           
  3506  0026                     CC2500_InitPATable@temp:	
  3507                           ; 1 bytes @ 0x6
  3508                           
  3509  0026                     DelayTimejudge@i:	
  3510                           ; 1 bytes @ 0x6
  3511                           
  3512  0026                     setDimmerLights_AdjControl@idle:	
  3513                           ; 1 bytes @ 0x6
  3514                           
  3515  0026                     getMain_All_Error_Status@status:	
  3516                           ; 1 bytes @ 0x6
  3517                           
  3518  0026                     getLoad_AD@channel:	
  3519                           ; 1 bytes @ 0x6
  3520                           
  3521  0026                     ___awdiv@sign:	
  3522                           ; 1 bytes @ 0x6
  3523                           
  3524  0026                     getMain_LightsStatus@i:	
  3525                           ; 1 bytes @ 0x6
  3526                           
  3527                           
  3528                           ; 2 bytes @ 0x6
  3529  0026                     	ds	1
  3530  0027                     ??_Exception_Main:	
  3531  0027                     CC2500_InitSetREG@temp2:	
  3532                           ; 0 bytes @ 0x7
  3533                           
  3534  0027                     CC2500_InitPATable@loop_d:	
  3535                           ; 1 bytes @ 0x7
  3536                           
  3537  0027                     DelayTimejudge@j:	
  3538                           ; 1 bytes @ 0x7
  3539                           
  3540  0027                     _setDimmerLights_AdjControl$2119:	
  3541                           ; 1 bytes @ 0x7
  3542                           
  3543  0027                     getLoad_AD@k:	
  3544                           ; 1 bytes @ 0x7
  3545                           
  3546  0027                     ___lwdiv@counter:	
  3547                           ; 1 bytes @ 0x7
  3548                           
  3549  0027                     ___awdiv@quotient:	
  3550                           ; 1 bytes @ 0x7
  3551                           
  3552                           
  3553                           ; 2 bytes @ 0x7
  3554  0027                     	ds	1
  3555  0028                     ?___awtoft:	
  3556  0028                     CC2500_InitSetREG@loop_c:	
  3557                           ; 3 bytes @ 0x8
  3558                           
  3559  0028                     DelayTimejudge@k:	
  3560                           ; 1 bytes @ 0x8
  3561                           
  3562  0028                     setDimmerLights_AdjControl@sw:	
  3563                           ; 1 bytes @ 0x8
  3564                           
  3565  0028                     getMain_LightsStatus@status:	
  3566                           ; 1 bytes @ 0x8
  3567                           
  3568  0028                     Exception_Main@error:	
  3569                           ; 1 bytes @ 0x8
  3570                           
  3571  0028                     getLoad_AD@j:	
  3572                           ; 1 bytes @ 0x8
  3573                           
  3574  0028                     ___awtoft@c:	
  3575                           ; 1 bytes @ 0x8
  3576                           
  3577                           
  3578                           ; 2 bytes @ 0x8
  3579  0028                     	ds	1
  3580  0029                     ??_Load_Main:	
  3581  0029                     ?_setBuz:	
  3582                           ; 0 bytes @ 0x9
  3583                           
  3584  0029                     ??_CC2500_PowerOnInitial:	
  3585                           ; 0 bytes @ 0x9
  3586                           
  3587  0029                     ??_Flash_Memory_Main:	
  3588                           ; 0 bytes @ 0x9
  3589                           
  3590  0029                     DelayTimejudge@value:	
  3591                           ; 0 bytes @ 0x9
  3592                           
  3593  0029                     getLoad_AD@i:	
  3594                           ; 1 bytes @ 0x9
  3595                           
  3596  0029                     setBuz@time:	
  3597                           ; 1 bytes @ 0x9
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x9
  3601  0029                     	ds	1
  3602  002A                     ?_setDelayOff_GO:	
  3603  002A                     setDelayOff_GO@command:	
  3604                           ; 0 bytes @ 0xA
  3605                           
  3606                           
  3607                           ; 1 bytes @ 0xA
  3608  002A                     	ds	1
  3609  002B                     ??_setBuz:	
  3610  002B                     ??___awtoft:	
  3611                           ; 0 bytes @ 0xB
  3612                           
  3613  002B                     setDelayOff_GO@value:	
  3614                           ; 0 bytes @ 0xB
  3615                           
  3616  002B                     Load_Main@j:	
  3617                           ; 1 bytes @ 0xB
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0xB
  3621  002B                     	ds	1
  3622  002C                     ??_setDelayOff_GO:	
  3623  002C                     setBuz@count:	
  3624                           ; 0 bytes @ 0xC
  3625                           
  3626  002C                     Load_Main@adjgo:	
  3627                           ; 1 bytes @ 0xC
  3628                           
  3629                           
  3630                           ; 1 bytes @ 0xC
  3631  002C                     	ds	1
  3632  002D                     ??_my_MainTimer:	
  3633  002D                     ??_setTemp_Main:	
  3634                           ; 0 bytes @ 0xD
  3635                           
  3636  002D                     ??_setLog_Code:	
  3637                           ; 0 bytes @ 0xD
  3638                           
  3639  002D                     ??_setDimmerLights_SwOn:	
  3640                           ; 0 bytes @ 0xD
  3641                           
  3642  002D                     _Load_Main$3653:	
  3643                           ; 0 bytes @ 0xD
  3644                           
  3645  002D                     ___awtoft@sign:	
  3646                           ; 1 bytes @ 0xD
  3647                           
  3648                           
  3649                           ; 1 bytes @ 0xD
  3650  002D                     	ds	1
  3651  002E                     ?___ftdiv:	
  3652  002E                     ?___ftmul:	
  3653                           ; 3 bytes @ 0xE
  3654                           
  3655  002E                     setDelayOff_GO@sw:	
  3656                           ; 3 bytes @ 0xE
  3657                           
  3658  002E                     setDimmerLights_SwOn@idle:	
  3659                           ; 1 bytes @ 0xE
  3660                           
  3661  002E                     Load_Main@error:	
  3662                           ; 1 bytes @ 0xE
  3663                           
  3664  002E                     ___ftdiv@f2:	
  3665                           ; 1 bytes @ 0xE
  3666                           
  3667  002E                     ___ftmul@f1:	
  3668                           ; 3 bytes @ 0xE
  3669                           
  3670                           
  3671                           ; 3 bytes @ 0xE
  3672  002E                     	ds	1
  3673  002F                     ??_setDimmerLights_SwOff:	
  3674  002F                     setDimmerLights_SwOn@sw:	
  3675                           ; 0 bytes @ 0xF
  3676                           
  3677  002F                     setDimmerLights_SwOff@command:	
  3678                           ; 1 bytes @ 0xF
  3679                           
  3680  002F                     Load_Main@i:	
  3681                           ; 1 bytes @ 0xF
  3682                           
  3683  002F                     setTemp_Main@error:	
  3684                           ; 1 bytes @ 0xF
  3685                           
  3686                           
  3687                           ; 1 bytes @ 0xF
  3688  002F                     	ds	1
  3689  0030                     ??_Temp_Main:	
  3690  0030                     setDimmerLights_SwOff@sw:	
  3691                           ; 0 bytes @ 0x10
  3692                           
  3693                           
  3694                           ; 1 bytes @ 0x10
  3695  0030                     	ds	1
  3696  0031                     ??_setDimmerLights_ErrorClose:	
  3697  0031                     ??_setRFSW_Control:	
  3698                           ; 0 bytes @ 0x11
  3699                           
  3700  0031                     ??_setSw_Main:	
  3701                           ; 0 bytes @ 0x11
  3702                           
  3703  0031                     ___ftdiv@f1:	
  3704                           ; 0 bytes @ 0x11
  3705                           
  3706  0031                     ___ftmul@f2:	
  3707                           ; 3 bytes @ 0x11
  3708                           
  3709                           
  3710                           ; 3 bytes @ 0x11
  3711  0031                     	ds	1
  3712  0032                     setDimmerLights_ErrorClose@count:	
  3713  0032                     setRFSW_Control@status:	
  3714                           ; 1 bytes @ 0x12
  3715                           
  3716                           
  3717                           ; 1 bytes @ 0x12
  3718  0032                     	ds	1
  3719  0033                     setDimmerLights_ErrorClose@lights:	
  3720  0033                     setRFSW_Control@sw:	
  3721                           ; 1 bytes @ 0x13
  3722                           
  3723  0033                     setSw_Main@sw:	
  3724                           ; 1 bytes @ 0x13
  3725                           
  3726                           
  3727                           ; 1 bytes @ 0x13
  3728  0033                     	ds	1
  3729  0034                     ??___ftdiv:	
  3730  0034                     ??___ftmul:	
  3731                           ; 0 bytes @ 0x14
  3732                           
  3733  0034                     setDimmerLights_ErrorClose@i:	
  3734                           ; 0 bytes @ 0x14
  3735                           
  3736                           
  3737                           ; 2 bytes @ 0x14
  3738  0034                     	ds	2
  3739  0036                     ??_DlyOff_Main:	
  3740  0036                     ??_setMain_Exception:	
  3741                           ; 0 bytes @ 0x16
  3742                           
  3743                           
  3744                           ; 0 bytes @ 0x16
  3745  0036                     	ds	2
  3746  0038                     DlyOff_Main@sw:	
  3747  0038                     setMain_Exception@buz:	
  3748                           ; 1 bytes @ 0x18
  3749                           
  3750  0038                     ___ftdiv@cntr:	
  3751                           ; 1 bytes @ 0x18
  3752                           
  3753  0038                     ___ftmul@exp:	
  3754                           ; 1 bytes @ 0x18
  3755                           
  3756                           
  3757                           ; 1 bytes @ 0x18
  3758  0038                     	ds	1
  3759  0039                     ??_DelayOff_Main:	
  3760  0039                     _setMain_Exception$3322:	
  3761                           ; 0 bytes @ 0x19
  3762                           
  3763  0039                     ___ftdiv@f3:	
  3764                           ; 2 bytes @ 0x19
  3765                           
  3766  0039                     ___ftmul@f3_as_product:	
  3767                           ; 3 bytes @ 0x19
  3768                           
  3769                           
  3770                           ; 3 bytes @ 0x19
  3771  0039                     	ds	2
  3772  003B                     setMain_Exception@status:	
  3773                           
  3774                           ; 1 bytes @ 0x1B
  3775  003B                     	ds	1
  3776  003C                     setMain_Exception@command:	
  3777  003C                     ___ftdiv@exp:	
  3778                           ; 1 bytes @ 0x1C
  3779                           
  3780  003C                     ___ftmul@cntr:	
  3781                           ; 1 bytes @ 0x1C
  3782                           
  3783                           
  3784                           ; 1 bytes @ 0x1C
  3785  003C                     	ds	1
  3786  003D                     ??_Switch_Main:	
  3787  003D                     ___ftdiv@sign:	
  3788                           ; 0 bytes @ 0x1D
  3789                           
  3790  003D                     ___ftmul@sign:	
  3791                           ; 1 bytes @ 0x1D
  3792                           
  3793                           
  3794                           ; 1 bytes @ 0x1D
  3795  003D                     	ds	1
  3796  003E                     ?___ftneg:	
  3797  003E                     Switch_Main@error:	
  3798                           ; 3 bytes @ 0x1E
  3799                           
  3800  003E                     ___ftneg@f1:	
  3801                           ; 1 bytes @ 0x1E
  3802                           
  3803                           
  3804                           ; 3 bytes @ 0x1E
  3805  003E                     	ds	3
  3806  0041                     ??___ftneg:	
  3807  0041                     ?___ftadd:	
  3808                           ; 0 bytes @ 0x21
  3809                           
  3810  0041                     ___ftadd@f1:	
  3811                           ; 3 bytes @ 0x21
  3812                           
  3813                           
  3814                           ; 3 bytes @ 0x21
  3815  0041                     	ds	3
  3816  0044                     ___ftadd@f2:	
  3817                           
  3818                           ; 3 bytes @ 0x24
  3819  0044                     	ds	3
  3820  0047                     ??___ftadd:	
  3821                           
  3822                           ; 0 bytes @ 0x27
  3823  0047                     	ds	4
  3824  004B                     ___ftadd@sign:	
  3825                           
  3826                           ; 1 bytes @ 0x2B
  3827  004B                     	ds	1
  3828  004C                     ___ftadd@exp2:	
  3829                           
  3830                           ; 1 bytes @ 0x2C
  3831  004C                     	ds	1
  3832  004D                     ___ftadd@exp1:	
  3833                           
  3834                           ; 1 bytes @ 0x2D
  3835  004D                     	ds	1
  3836  004E                     ?___fttol:	
  3837  004E                     ___fttol@f1:	
  3838                           ; 4 bytes @ 0x2E
  3839                           
  3840                           
  3841                           ; 3 bytes @ 0x2E
  3842  004E                     	ds	4
  3843  0052                     ??___fttol:	
  3844                           
  3845                           ; 0 bytes @ 0x32
  3846  0052                     	ds	4
  3847  0056                     ___fttol@sign1:	
  3848                           
  3849                           ; 1 bytes @ 0x36
  3850  0056                     	ds	1
  3851  0057                     ___fttol@lval:	
  3852                           
  3853                           ; 4 bytes @ 0x37
  3854  0057                     	ds	4
  3855  005B                     ___fttol@exp1:	
  3856                           
  3857                           ; 1 bytes @ 0x3B
  3858  005B                     	ds	1
  3859  005C                     ??_setPercentValue:	
  3860  005C                     ??_getPercentValue:	
  3861                           ; 0 bytes @ 0x3C
  3862                           
  3863                           
  3864                           ; 0 bytes @ 0x3C
  3865  005C                     	ds	2
  3866  005E                     getPercentValue@value:	
  3867  005E                     setPercentValue@value:	
  3868                           ; 1 bytes @ 0x3E
  3869                           
  3870                           
  3871                           ; 1 bytes @ 0x3E
  3872  005E                     	ds	1
  3873  005F                     getPercentValue@i:	
  3874  005F                     setPercentValue@i:	
  3875                           ; 3 bytes @ 0x3F
  3876                           
  3877                           
  3878                           ; 3 bytes @ 0x3F
  3879  005F                     	ds	3
  3880  0062                     ?_setDimmerLights:	
  3881  0062                     ?_setDimmerLights_Adj:	
  3882                           ; 0 bytes @ 0x42
  3883                           
  3884  0062                     ??_setDimmerLights_AdjRF:	
  3885                           ; 0 bytes @ 0x42
  3886                           
  3887  0062                     ??_Flash_Memory_Initialization:	
  3888                           ; 0 bytes @ 0x42
  3889                           
  3890  0062                     setDimmerLights@status:	
  3891                           ; 0 bytes @ 0x42
  3892                           
  3893  0062                     setDimmerLights_Adj@status:	
  3894                           ; 1 bytes @ 0x42
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x42
  3898  0062                     	ds	1
  3899  0063                     ??_setDimmerLights:	
  3900  0063                     ??_setDimmerLights_Adj:	
  3901                           ; 0 bytes @ 0x43
  3902                           
  3903  0063                     setDimmerLights_AdjRF@lights:	
  3904                           ; 0 bytes @ 0x43
  3905                           
  3906  0063                     Flash_Memory_Initialization@i:	
  3907                           ; 1 bytes @ 0x43
  3908                           
  3909                           
  3910                           ; 1 bytes @ 0x43
  3911  0063                     	ds	1
  3912  0064                     ??_setRF_DimmerValue:	
  3913                           
  3914                           ; 0 bytes @ 0x44
  3915  0064                     	ds	1
  3916  0065                     setDimmerLights@lights:	
  3917  0065                     setDimmerLights_Adj@lights:	
  3918                           ; 1 bytes @ 0x45
  3919                           
  3920                           
  3921                           ; 1 bytes @ 0x45
  3922  0065                     	ds	1
  3923  0066                     ??_setDimmerLights_Main:	
  3924  0066                     setDimmerLights_Main@lights:	
  3925                           ; 0 bytes @ 0x46
  3926                           
  3927  0066                     setRF_DimmerValue@lights:	
  3928                           ; 1 bytes @ 0x46
  3929                           
  3930                           
  3931                           ; 1 bytes @ 0x46
  3932  0066                     	ds	1
  3933  0067                     ??_setRFSW_AdjControl:	
  3934  0067                     ??_DimmerLights_Main:	
  3935                           ; 0 bytes @ 0x47
  3936                           
  3937                           
  3938                           ; 0 bytes @ 0x47
  3939  0067                     	ds	2
  3940  0069                     setRFSW_AdjControl@status:	
  3941  0069                     _DimmerLights_Main$2095:	
  3942                           ; 1 bytes @ 0x49
  3943                           
  3944                           
  3945                           ; 2 bytes @ 0x49
  3946  0069                     	ds	1
  3947  006A                     setRFSW_AdjControl@sw:	
  3948                           
  3949                           ; 1 bytes @ 0x4A
  3950  006A                     	ds	1
  3951  006B                     ??_getRxData:	
  3952  006B                     ??_setControl_Lights_Table:	
  3953                           ; 0 bytes @ 0x4B
  3954                           
  3955                           
  3956                           ; 0 bytes @ 0x4B
  3957  006B                     	ds	1
  3958  006C                     getRxData@error:	
  3959                           
  3960                           ; 1 bytes @ 0x4C
  3961  006C                     	ds	1
  3962  006D                     ??_setRF_Main:	
  3963                           
  3964                           ; 0 bytes @ 0x4D
  3965  006D                     	ds	1
  3966  006E                     ??_RF_Main:	
  3967  006E                     ??_main:	
  3968                           ; 0 bytes @ 0x4E
  3969                           
  3970                           
  3971                           	psect	maintext
  3972  16ED                     __pmaintext:	
  3973                           ; 0 bytes @ 0x4E
  3974 ;;
  3975 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3976 ;;
  3977 ;; *************** function _main *****************
  3978 ;; Defined at:
  3979 ;;		line 7 in file "../src/Main_B1.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  argc            2    3[BANK1 ] int 
  3982 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  2    3[BANK1 ] int 
  3987 ;; Registers used:
  3988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 17F/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3994 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;Total ram usage:        4 bytes
  3999 ;; Hardware stack levels required when called:   15
  4000 ;; This function calls:
  4001 ;;		_Buzzer_Initialization
  4002 ;;		_Buzzer_Main
  4003 ;;		_CC2500_PowerOnInitial
  4004 ;;		_DelayOff_Initialization
  4005 ;;		_DelayOff_Main
  4006 ;;		_DimmerLights_Initialization
  4007 ;;		_DimmerLights_Main
  4008 ;;		_Exception_Main
  4009 ;;		_Flash_Memory_Initialization
  4010 ;;		_Flash_Memory_Main
  4011 ;;		_LED_Initialization
  4012 ;;		_LED_Main
  4013 ;;		_Load_Initialization
  4014 ;;		_Load_Main
  4015 ;;		_Mcu_Initialization
  4016 ;;		_RF_Initialization
  4017 ;;		_RF_Main
  4018 ;;		_Switch_Initialization
  4019 ;;		_Switch_Main
  4020 ;;		_Temp_Initialization
  4021 ;;		_Temp_Main
  4022 ;;		_WDT_Main
  4023 ;;		_getLoad_AD
  4024 ;;		_getTemp_AD
  4025 ;;		_myMain_Initialization
  4026 ;;		_my_MainTimer
  4027 ;; This function is called by:
  4028 ;;		Startup code after reset
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           
  4033                           ;psect for function _main
  4034  16ED                     _main:	
  4035                           
  4036                           ;Main_B1.c: 8: myMain_Initialization();
  4037                           
  4038                           ;incstack = 0
  4039                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4040  16ED  3190  2066  3196   	fcall	_myMain_Initialization
  4041                           
  4042                           ;Main_B1.c: 9: Mcu_Initialization();
  4043  16F0  319D  2568  3196   	fcall	_Mcu_Initialization
  4044                           
  4045                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4046  16F3  3186  264A  3196   	fcall	_Flash_Memory_Initialization
  4047                           
  4048                           ;Main_B1.c: 11: LED_Initialization();
  4049  16F6  319B  238B  3196   	fcall	_LED_Initialization
  4050                           
  4051                           ;Main_B1.c: 12: Buzzer_Initialization();
  4052  16F9  319B  2364  3196   	fcall	_Buzzer_Initialization
  4053                           
  4054                           ;Main_B1.c: 14: ;;
  4055                           ;Main_B1.c: 15: Temp_Initialization();
  4056  16FC  319B  236D  3196   	fcall	_Temp_Initialization
  4057                           
  4058                           ;Main_B1.c: 16: Load_Initialization();
  4059  16FF  319B  239C  3196   	fcall	_Load_Initialization
  4060                           
  4061                           ;Main_B1.c: 17: ;;
  4062                           ;Main_B1.c: 18: DelayOff_Initialization();
  4063  1702  319B  2383  3196   	fcall	_DelayOff_Initialization
  4064                           
  4065                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4066  1705  319C  2499  3196   	fcall	_DimmerLights_Initialization
  4067                           
  4068                           ;Main_B1.c: 21: ;;
  4069                           ;Main_B1.c: 22: ;;
  4070                           ;Main_B1.c: 23: ;;
  4071                           ;Main_B1.c: 24: Switch_Initialization();
  4072  1708  319B  23DC  3196   	fcall	_Switch_Initialization
  4073                           
  4074                           ;Main_B1.c: 25: RF_Initialization();
  4075  170B  319B  2367  3196   	fcall	_RF_Initialization
  4076                           
  4077                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4078  170E  319D  25EF  3196   	fcall	_CC2500_PowerOnInitial
  4079  1711                     l7988:	
  4080                           ;Main_B1.c: 27: ;;
  4081                           ;Main_B1.c: 28: ;;
  4082                           ;Main_B1.c: 30: while (1) {
  4083                           
  4084                           
  4085                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4086  1711  0021               	movlb	1	; select bank1
  4087  1712  1C20               	btfss	_myMain^(0+128),0
  4088  1713  2F1C               	goto	l7992
  4089                           
  4090                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4091  1714  3005               	movlw	5
  4092  1715  318B  23CF  3196   	fcall	_getLoad_AD
  4093                           
  4094                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4095  1718  3009               	movlw	9
  4096  1719  3193  23F7  3196   	fcall	_getTemp_AD
  4097  171C                     l7992:	
  4098                           
  4099                           ;Main_B1.c: 57: }
  4100                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4101  171C  0021               	movlb	1	; select bank1
  4102  171D  1C46               	btfss	_Timer1^(0+128),0
  4103  171E  2F11               	goto	l7988
  4104                           
  4105                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4106  171F  1046               	bcf	_Timer1^(0+128),0
  4107                           
  4108                           ;Main_B1.c: 96: my_MainTimer();
  4109  1720  3193  237E  3196   	fcall	_my_MainTimer
  4110                           
  4111                           ;Main_B1.c: 97: WDT_Main();
  4112  1723  319D  257A  3196   	fcall	_WDT_Main
  4113                           
  4114                           ;Main_B1.c: 98: ;;
  4115                           ;Main_B1.c: 99: ;;
  4116                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4117  1726  0021               	movlb	1	; select bank1
  4118  1727  1C20               	btfss	_myMain^(0+128),0
  4119  1728  2F11               	goto	l7988
  4120                           
  4121                           ;Main_B1.c: 101: Flash_Memory_Main();
  4122  1729  3192  22A3  3196   	fcall	_Flash_Memory_Main
  4123                           
  4124                           ;Main_B1.c: 103: LED_Main();
  4125  172C  319B  238F  3196   	fcall	_LED_Main
  4126                           
  4127                           ;Main_B1.c: 104: Buzzer_Main();
  4128  172F  3195  2501  3196   	fcall	_Buzzer_Main
  4129                           
  4130                           ;Main_B1.c: 106: ;;
  4131                           ;Main_B1.c: 107: Temp_Main();
  4132  1732  319B  2370  3196   	fcall	_Temp_Main
  4133                           
  4134                           ;Main_B1.c: 108: Load_Main();
  4135  1735  3180  2043  3196   	fcall	_Load_Main
  4136                           
  4137                           ;Main_B1.c: 109: ;;
  4138                           ;Main_B1.c: 111: ;;
  4139                           ;Main_B1.c: 112: DimmerLights_Main();
  4140  1738  3191  2170  3196   	fcall	_DimmerLights_Main
  4141                           
  4142                           ;Main_B1.c: 113: Switch_Main();
  4143  173B  319E  26F4  3196   	fcall	_Switch_Main
  4144                           
  4145                           ;Main_B1.c: 114: ;;
  4146                           ;Main_B1.c: 115: ;;
  4147                           ;Main_B1.c: 117: RF_Main();
  4148  173E  319B  236A  3196   	fcall	_RF_Main
  4149                           
  4150                           ;Main_B1.c: 118: DelayOff_Main();
  4151  1741  319B  2387  3196   	fcall	_DelayOff_Main
  4152                           
  4153                           ;Main_B1.c: 119: ;;
  4154                           ;Main_B1.c: 120: ;;
  4155                           ;Main_B1.c: 121: Exception_Main();
  4156  1744  319E  2661  3196   	fcall	_Exception_Main
  4157  1747  2F11               	goto	l7988
  4158  1748                     __end_of_main:	
  4159                           ;Main_B1.c: 128: }
  4160                           ;Main_B1.c: 129: }
  4161                           ;Main_B1.c: 163: }
  4162                           ;Main_B1.c: 164: return (0);
  4163                           ;	Return value of _main is never used
  4164                           
  4165                           
  4166                           	psect	text1
  4167  137E                     __ptext1:	
  4168 ;; *************** function _my_MainTimer *****************
  4169 ;; Defined at:
  4170 ;;		line 185 in file "../src/Main_B1.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;		None               void
  4177 ;; Registers used:
  4178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;Total ram usage:        1 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    7
  4191 ;; This function calls:
  4192 ;;		_setBuz
  4193 ;; This function is called by:
  4194 ;;		_main
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           
  4199                           ;psect for function _my_MainTimer
  4200  137E                     _my_MainTimer:	
  4201                           
  4202                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4206  137E  0021               	movlb	1	; select bank1
  4207  137F  1820               	btfsc	_myMain^(0+128),0
  4208  1380  2B98               	goto	l7718
  4209                           
  4210                           ;Main_B1.c: 189: myMain.PowerCount++;
  4211  1381  3001               	movlw	1
  4212  1382  0020               	movlb	0	; select bank0
  4213  1383  00AD               	movwf	??_my_MainTimer
  4214  1384  082D               	movf	??_my_MainTimer,w
  4215  1385  0021               	movlb	1	; select bank1
  4216  1386  07A1               	addwf	(_myMain^(0+128)+1),f
  4217                           
  4218                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4219  1387  0821               	movf	(_myMain^(0+128)+1),w
  4220  1388  3A96               	xorlw	150
  4221  1389  1D03               	skipz
  4222  138A  0008               	return
  4223                           
  4224                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4225  138B  01A1               	clrf	(_myMain^(0+128)+1)
  4226                           
  4227                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4228  138C  1420               	bsf	_myMain^(0+128),0
  4229                           
  4230                           ;Main_B1.c: 197: setBuz(3, 50);
  4231  138D  3032               	movlw	50
  4232  138E  0020               	movlb	0	; select bank0
  4233  138F  00A9               	movwf	setBuz@time
  4234  1390  3000               	movlw	0
  4235  1391  00AA               	movwf	setBuz@time+1
  4236  1392  3003               	movlw	3
  4237  1393  3196  2694         	fcall	_setBuz
  4238                           
  4239                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4240  1395  0021               	movlb	1	; select bank1
  4241  1396  1620               	bsf	_myMain^(0+128),4
  4242                           
  4243                           ;Main_B1.c: 207: }
  4244                           ;Main_B1.c: 208: } else {
  4245  1397  0008               	return
  4246  1398                     l7718:	
  4247                           
  4248                           ;Main_B1.c: 209: myMain.PowerCount++;
  4249  1398  3001               	movlw	1
  4250  1399  0020               	movlb	0	; select bank0
  4251  139A  00AD               	movwf	??_my_MainTimer
  4252  139B  082D               	movf	??_my_MainTimer,w
  4253  139C  0021               	movlb	1	; select bank1
  4254  139D  07A1               	addwf	(_myMain^(0+128)+1),f
  4255                           
  4256                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4257  139E  0821               	movf	(_myMain^(0+128)+1),w
  4258  139F  3A64               	xorlw	100
  4259  13A0  1903               	btfsc	3,2
  4260                           
  4261                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4262  13A1  01A1               	clrf	(_myMain^(0+128)+1)
  4263                           
  4264                           ;Main_B1.c: 226: }
  4265                           ;Main_B1.c: 228: myMain.Count1++;
  4266  13A2  3001               	movlw	1
  4267  13A3  07A4               	addwf	(_myMain^(0+128)+4),f
  4268  13A4  3000               	movlw	0
  4269  13A5  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4270                           
  4271                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4272  13A6  3004               	movlw	4
  4273  13A7  3EA0               	addlw	_myMain& (0+255)
  4274  13A8  0086               	movwf	6
  4275  13A9  0187               	clrf	7
  4276  13AA  3F40               	moviw [0]fsr1
  4277  13AB  3A64               	xorlw	100
  4278  13AC  1D03               	skipz
  4279  13AD  2BB0               	goto	u7725
  4280  13AE  3F41               	moviw [1]fsr1
  4281  13AF  3A00               	xorlw	0
  4282  13B0                     u7725:	
  4283  13B0  1D03               	skipz
  4284  13B1  0008               	return
  4285                           
  4286                           ;Main_B1.c: 230: {
  4287                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4288  13B2  01A4               	clrf	(_myMain^(0+128)+4)
  4289  13B3  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4290                           
  4291                           ;Main_B1.c: 243: if (myMain.Flag) {
  4292  13B4  1CA0               	btfss	_myMain^(0+128),1
  4293  13B5  2BB8               	goto	l1385
  4294                           
  4295                           ;Main_B1.c: 244: myMain.Flag = 0;
  4296  13B6  10A0               	bcf	_myMain^(0+128),1
  4297                           
  4298                           ;Main_B1.c: 253: } else {
  4299  13B7  0008               	return
  4300  13B8                     l1385:	
  4301                           
  4302                           ;Main_B1.c: 254: myMain.Flag = 1;
  4303  13B8  14A0               	bsf	_myMain^(0+128),1
  4304  13B9  0008               	return
  4305  13BA                     __end_of_my_MainTimer:	
  4306                           
  4307                           	psect	text2
  4308  1066                     __ptext2:	
  4309 ;; *************** function _myMain_Initialization *****************
  4310 ;; Defined at:
  4311 ;;		line 170 in file "../src/Main_B1.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;		None
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;		None
  4316 ;; Return value:  Size  Location     Type
  4317 ;;		None               void
  4318 ;; Registers used:
  4319 ;;		wreg, fsr1l, fsr1h
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4328 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;Total ram usage:        1 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    5
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_main
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           
  4340                           ;psect for function _myMain_Initialization
  4341  1066                     _myMain_Initialization:	
  4342                           
  4343                           ;Main_B1.c: 173: product = &_product;
  4344                           
  4345                           ;incstack = 0
  4346                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4347  1066  3020               	movlw	__product& (0+255)
  4348  1067  0020               	movlb	0	; select bank0
  4349  1068  00A0               	movwf	??_myMain_Initialization
  4350  1069  0820               	movf	??_myMain_Initialization,w
  4351  106A  00EE               	movwf	_product
  4352                           
  4353                           ;Main_B1.c: 174: product->Data[20] = 209;
  4354  106B  30D1               	movlw	209
  4355  106C  00A0               	movwf	??_myMain_Initialization
  4356  106D  086E               	movf	_product,w
  4357  106E  3E14               	addlw	20
  4358  106F  0086               	movwf	6
  4359  1070  3002               	movlw	2	; select bank4/5
  4360  1071  0087               	movwf	7
  4361  1072  0820               	movf	??_myMain_Initialization,w
  4362  1073  0081               	movwf	1
  4363  1074  0008               	return
  4364  1075                     __end_of_myMain_Initialization:	
  4365                           
  4366                           	psect	text3
  4367  13F7                     __ptext3:	
  4368 ;; *************** function _getTemp_AD *****************
  4369 ;; Defined at:
  4370 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  channel         1    wreg     unsigned char 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  channel         1    5[BANK0 ] unsigned char 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;		None               void
  4377 ;; Registers used:
  4378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;Total ram usage:        2 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    7
  4391 ;; This function calls:
  4392 ;;		_getAD
  4393 ;; This function is called by:
  4394 ;;		_main
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function _getTemp_AD
  4400  13F7                     _getTemp_AD:	
  4401                           
  4402                           ;incstack = 0
  4403                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4404                           ;getTemp_AD@channel stored from wreg
  4405  13F7  0020               	movlb	0	; select bank0
  4406  13F8  00A5               	movwf	getTemp_AD@channel
  4407                           
  4408                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4409  13F9  0021               	movlb	1	; select bank1
  4410  13FA  1D57               	btfss	_Temp^(0+128),2
  4411  13FB  0008               	return
  4412                           
  4413                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4414  13FC  30F0               	movlw	240
  4415  13FD  0020               	movlb	0	; select bank0
  4416  13FE  00A4               	movwf	??_getTemp_AD
  4417  13FF  0824               	movf	??_getTemp_AD,w
  4418  1400  00A0               	movwf	getAD@adcon1
  4419  1401  0825               	movf	getTemp_AD@channel,w
  4420  1402  319F  2714  3193   	fcall	_getAD
  4421  1405  0020               	movlb	0	; select bank0
  4422  1406  0821               	movf	?_getAD+1,w
  4423  1407  0021               	movlb	1	; select bank1
  4424  1408  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4425  1409  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4426  140A  0020               	movlb	0	; select bank0
  4427  140B  0820               	movf	?_getAD,w
  4428  140C  0021               	movlb	1	; select bank1
  4429  140D  01E3               	clrf	(_Temp^(0+128)+12)
  4430  140E  07E3               	addwf	(_Temp^(0+128)+12),f
  4431                           
  4432                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4433  140F  300C               	movlw	12
  4434  1410  3ED7               	addlw	_Temp& (0+255)
  4435  1411  0086               	movwf	6
  4436  1412  0187               	clrf	7
  4437  1413  0016               	moviw fsr1++
  4438  1414  0401               	iorwf	1,w
  4439  1415  1903               	skipnz
  4440  1416  0008               	return
  4441                           
  4442                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4443  1417  0864               	movf	((_Temp+1)^(0+128)+12),w
  4444  1418  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4445  1419  1D03               	skipz
  4446  141A  2C1D               	goto	u7675
  4447  141B  0863               	movf	(_Temp^(0+128)+12),w
  4448  141C  025F               	subwf	(_Temp^(0+128)+8),w
  4449  141D                     u7675:	
  4450  141D  1803               	skipnc
  4451  141E  2C26               	goto	l7700
  4452                           
  4453                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4454  141F  0864               	movf	((_Temp+1)^(0+128)+12),w
  4455  1420  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4456  1421  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4457  1422  0863               	movf	(_Temp^(0+128)+12),w
  4458  1423  01DF               	clrf	(_Temp^(0+128)+8)
  4459  1424  07DF               	addwf	(_Temp^(0+128)+8),f
  4460                           
  4461                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4462  1425  0008               	return
  4463  1426                     l7700:	
  4464  1426  0864               	movf	((_Temp+1)^(0+128)+12),w
  4465  1427  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4466  1428  1D03               	skipz
  4467  1429  2C2C               	goto	u7685
  4468  142A  0863               	movf	(_Temp^(0+128)+12),w
  4469  142B  0261               	subwf	(_Temp^(0+128)+10),w
  4470  142C                     u7685:	
  4471  142C  1803               	skipnc
  4472  142D  0008               	return
  4473                           
  4474                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4475  142E  0864               	movf	((_Temp+1)^(0+128)+12),w
  4476  142F  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4477  1430  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4478  1431  0863               	movf	(_Temp^(0+128)+12),w
  4479  1432  01E1               	clrf	(_Temp^(0+128)+10)
  4480  1433  07E1               	addwf	(_Temp^(0+128)+10),f
  4481  1434  0008               	return
  4482  1435                     __end_of_getTemp_AD:	
  4483                           
  4484                           	psect	text4
  4485  0BCF                     __ptext4:	
  4486 ;; *************** function _getLoad_AD *****************
  4487 ;; Defined at:
  4488 ;;		line 15 in file "../src/OverLoad_B1.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  channel         1    wreg     unsigned char 
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  channel         1    6[BANK0 ] unsigned char 
  4493 ;;  i               1    9[BANK0 ] unsigned char 
  4494 ;;  j               1    8[BANK0 ] unsigned char 
  4495 ;;  k               1    7[BANK0 ] unsigned char 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;		None               void
  4498 ;; Registers used:
  4499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;Total ram usage:        6 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    7
  4512 ;; This function calls:
  4513 ;;		_getAD
  4514 ;; This function is called by:
  4515 ;;		_main
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           
  4520                           ;psect for function _getLoad_AD
  4521  0BCF                     _getLoad_AD:	
  4522                           
  4523                           ;incstack = 0
  4524                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4525                           ;getLoad_AD@channel stored from wreg
  4526  0BCF  0020               	movlb	0	; select bank0
  4527  0BD0  00A6               	movwf	getLoad_AD@channel
  4528                           
  4529                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4530  0BD1  01A9               	clrf	getLoad_AD@i
  4531  0BD2  01A8               	clrf	getLoad_AD@j
  4532  0BD3  01A7               	clrf	getLoad_AD@k
  4533                           
  4534                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4535  0BD4  0022               	movlb	2	; select bank2
  4536  0BD5  1E41               	btfss	_Load^(0+256),4
  4537  0BD6  0008               	return
  4538                           
  4539                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4540  0BD7  30F3               	movlw	243
  4541  0BD8  0020               	movlb	0	; select bank0
  4542  0BD9  00A4               	movwf	??_getLoad_AD
  4543  0BDA  0824               	movf	??_getLoad_AD,w
  4544  0BDB  00A0               	movwf	getAD@adcon1
  4545  0BDC  0826               	movf	getLoad_AD@channel,w
  4546  0BDD  319F  2714  318B   	fcall	_getAD
  4547  0BE0  0020               	movlb	0	; select bank0
  4548  0BE1  0821               	movf	?_getAD+1,w
  4549  0BE2  0022               	movlb	2	; select bank2
  4550  0BE3  01E3               	clrf	((_Load+1)^(0+256)+33)
  4551  0BE4  07E3               	addwf	((_Load+1)^(0+256)+33),f
  4552  0BE5  0020               	movlb	0	; select bank0
  4553  0BE6  0820               	movf	?_getAD,w
  4554  0BE7  0022               	movlb	2	; select bank2
  4555  0BE8  01E2               	clrf	(_Load^(0+256)+33)
  4556  0BE9  07E2               	addwf	(_Load^(0+256)+33),f
  4557                           
  4558                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4559  0BEA  0020               	movlb	0	; select bank0
  4560  0BEB  01A9               	clrf	getLoad_AD@i
  4561  0BEC  3004               	movlw	4
  4562  0BED  0229               	subwf	getLoad_AD@i,w
  4563  0BEE  1803               	btfsc	3,0
  4564  0BEF  2C1D               	goto	l7670
  4565  0BF0                     l7658:	
  4566                           
  4567                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4568  0BF0  3529               	lslf	getLoad_AD@i,w
  4569  0BF1  3E4C               	addlw	(_Load+11)& (0+255)
  4570  0BF2  0086               	movwf	6
  4571  0BF3  3001               	movlw	1	; select bank2/3
  4572  0BF4  0087               	movwf	7
  4573  0BF5  3F40               	moviw [0]fsr1
  4574  0BF6  00A4               	movwf	??_getLoad_AD
  4575  0BF7  3F41               	moviw [1]fsr1
  4576  0BF8  00A5               	movwf	??_getLoad_AD+1
  4577  0BF9  0022               	movlb	2	; select bank2
  4578  0BFA  0863               	movf	((_Load+1)^(0+256)+33),w
  4579  0BFB  0020               	movlb	0	; select bank0
  4580  0BFC  0225               	subwf	??_getLoad_AD+1,w
  4581  0BFD  1D03               	skipz
  4582  0BFE  2C03               	goto	u7575
  4583  0BFF  0022               	movlb	2	; select bank2
  4584  0C00  0862               	movf	(_Load^(0+256)+33),w
  4585  0C01  0020               	movlb	0	; select bank0
  4586  0C02  0224               	subwf	??_getLoad_AD,w
  4587  0C03                     u7575:	
  4588  0C03  1803               	skipnc
  4589  0C04  2C15               	goto	l7666
  4590  0C05  08A8               	movf	getLoad_AD@j,f
  4591  0C06  1D03               	skipz
  4592  0C07  2C15               	goto	l7666
  4593                           
  4594                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4595  0C08  3529               	lslf	getLoad_AD@i,w
  4596  0C09  3E4C               	addlw	(_Load+11)& (0+255)
  4597  0C0A  0086               	movwf	6
  4598  0C0B  3001               	movlw	1	; select bank2/3
  4599  0C0C  0087               	movwf	7
  4600  0C0D  0022               	movlb	2	; select bank2
  4601  0C0E  0862               	movf	(_Load^(0+256)+33),w
  4602  0C0F  3FC0               	movwi [0]fsr1
  4603  0C10  0863               	movf	((_Load+1)^(0+256)+33),w
  4604  0C11  3FC1               	movwi [1]fsr1
  4605                           
  4606                           ;OverLoad_B1.c: 24: j = 1;
  4607  0C12  0020               	movlb	0	; select bank0
  4608  0C13  01A8               	clrf	getLoad_AD@j
  4609  0C14  0AA8               	incf	getLoad_AD@j,f
  4610  0C15                     l7666:	
  4611  0C15  3001               	movlw	1
  4612  0C16  00A4               	movwf	??_getLoad_AD
  4613  0C17  0824               	movf	??_getLoad_AD,w
  4614  0C18  07A9               	addwf	getLoad_AD@i,f
  4615  0C19  3004               	movlw	4
  4616  0C1A  0229               	subwf	getLoad_AD@i,w
  4617  0C1B  1C03               	skipc
  4618  0C1C  2BF0               	goto	l7658
  4619  0C1D                     l7670:	
  4620                           
  4621                           ;OverLoad_B1.c: 25: }
  4622                           ;OverLoad_B1.c: 26: }
  4623                           ;OverLoad_B1.c: 27: if (j == 0) {
  4624  0C1D  08A8               	movf	getLoad_AD@j,f
  4625  0C1E  1D03               	skipz
  4626  0C1F  0008               	return
  4627                           
  4628                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4629  0C20  01A9               	clrf	getLoad_AD@i
  4630  0C21                     L1:	
  4631  0C21  3004               	movlw	4
  4632  0C22  0229               	subwf	getLoad_AD@i,w
  4633  0C23  1803               	btfsc	3,0
  4634  0C24  0008               	return
  4635                           
  4636                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4637  0C25  3529               	lslf	getLoad_AD@i,w
  4638  0C26  3E56               	addlw	(_Load+21)& (0+255)
  4639  0C27  0086               	movwf	6
  4640  0C28  3001               	movlw	1	; select bank2/3
  4641  0C29  0087               	movwf	7
  4642  0C2A  3F40               	moviw [0]fsr1
  4643  0C2B  00A4               	movwf	??_getLoad_AD
  4644  0C2C  3F41               	moviw [1]fsr1
  4645  0C2D  00A5               	movwf	??_getLoad_AD+1
  4646  0C2E  0825               	movf	??_getLoad_AD+1,w
  4647  0C2F  0022               	movlb	2	; select bank2
  4648  0C30  0263               	subwf	((_Load+1)^(0+256)+33),w
  4649  0C31  1D03               	skipz
  4650  0C32  2C37               	goto	u7625
  4651  0C33  0020               	movlb	0	; select bank0
  4652  0C34  0824               	movf	??_getLoad_AD,w
  4653  0C35  0022               	movlb	2	; select bank2
  4654  0C36  0262               	subwf	(_Load^(0+256)+33),w
  4655  0C37                     u7625:	
  4656  0C37  1803               	skipnc
  4657  0C38  2C4A               	goto	l7686
  4658  0C39  0020               	movlb	0	; select bank0
  4659  0C3A  08A7               	movf	getLoad_AD@k,f
  4660  0C3B  1D03               	skipz
  4661  0C3C  2C4A               	goto	l7686
  4662                           
  4663                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4664  0C3D  3529               	lslf	getLoad_AD@i,w
  4665  0C3E  3E56               	addlw	(_Load+21)& (0+255)
  4666  0C3F  0086               	movwf	6
  4667  0C40  3001               	movlw	1	; select bank2/3
  4668  0C41  0087               	movwf	7
  4669  0C42  0022               	movlb	2	; select bank2
  4670  0C43  0862               	movf	(_Load^(0+256)+33),w
  4671  0C44  3FC0               	movwi [0]fsr1
  4672  0C45  0863               	movf	((_Load+1)^(0+256)+33),w
  4673  0C46  3FC1               	movwi [1]fsr1
  4674                           
  4675                           ;OverLoad_B1.c: 31: k = 1;
  4676  0C47  0020               	movlb	0	; select bank0
  4677  0C48  01A7               	clrf	getLoad_AD@k
  4678  0C49  0AA7               	incf	getLoad_AD@k,f
  4679  0C4A                     l7686:	
  4680  0C4A  3001               	movlw	1
  4681  0C4B  0020               	movlb	0	; select bank0
  4682  0C4C  00A4               	movwf	??_getLoad_AD
  4683  0C4D  0824               	movf	??_getLoad_AD,w
  4684  0C4E  07A9               	addwf	getLoad_AD@i,f
  4685  0C4F  2C21               	goto	L1
  4686  0C50                     __end_of_getLoad_AD:	
  4687                           
  4688                           	psect	text5
  4689  1F14                     __ptext5:	
  4690 ;; *************** function _getAD *****************
  4691 ;; Defined at:
  4692 ;;		line 454 in file "../src/MCU_B1.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  adcon0          1    wreg     unsigned char 
  4695 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  2    0[BANK0 ] int 
  4700 ;; Registers used:
  4701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4707 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4710 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4711 ;;Total ram usage:        4 bytes
  4712 ;; Hardware stack levels used:    1
  4713 ;; Hardware stack levels required when called:    6
  4714 ;; This function calls:
  4715 ;;		_Timeout_Counter
  4716 ;;		_set_TimeoutCleared
  4717 ;; This function is called by:
  4718 ;;		_getLoad_AD
  4719 ;;		_getTemp_AD
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           
  4724                           ;psect for function _getAD
  4725  1F14                     _getAD:	
  4726                           
  4727                           ;incstack = 0
  4728                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4729                           ;getAD@adcon0 stored from wreg
  4730  1F14  0020               	movlb	0	; select bank0
  4731  1F15  00A3               	movwf	getAD@adcon0
  4732                           
  4733                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4734  1F16  0823               	movf	getAD@adcon0,w
  4735  1F17  0021               	movlb	1	; select bank1
  4736  1F18  009D               	movwf	29	;volatile
  4737                           
  4738                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4739  1F19  0020               	movlb	0	; select bank0
  4740  1F1A  0820               	movf	getAD@adcon1,w
  4741  1F1B  0021               	movlb	1	; select bank1
  4742  1F1C  009E               	movwf	30	;volatile
  4743                           
  4744                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4745  1F1D  149D               	bsf	29,1	;volatile
  4746                           
  4747                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4748  1F1E  2F22               	goto	l7050
  4749  1F1F                     l7048:	
  4750                           
  4751                           ;MCU_B1.c: 459: Timeout_Counter();
  4752  1F1F  319D  25DA  319F   	fcall	_Timeout_Counter
  4753  1F22                     l7050:	
  4754  1F22  0021               	movlb	1	; select bank1
  4755  1F23  1C9D               	btfss	29,1	;volatile
  4756  1F24  2F27               	goto	l7054
  4757  1F25  1D2B               	btfss	(_myMain^(0+128)+11),2
  4758  1F26  2F1F               	goto	l7048
  4759  1F27                     l7054:	
  4760                           
  4761                           ;MCU_B1.c: 460: };
  4762                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4763  1F27  319B  2397         	fcall	_set_TimeoutCleared
  4764                           
  4765                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4766  1F29  0021               	movlb	1	; select bank1
  4767  1F2A  081C               	movf	28,w	;volatile
  4768  1F2B  0020               	movlb	0	; select bank0
  4769  1F2C  01A1               	clrf	?_getAD+1
  4770  1F2D  07A1               	addwf	?_getAD+1,f
  4771  1F2E  0021               	movlb	1	; select bank1
  4772  1F2F  081B               	movf	27,w	;volatile
  4773  1F30  0020               	movlb	0	; select bank0
  4774  1F31  01A0               	clrf	?_getAD
  4775  1F32  07A0               	addwf	?_getAD,f
  4776  1F33  0008               	return
  4777  1F34                     __end_of_getAD:	
  4778                           
  4779                           	psect	text6
  4780  1D7A                     __ptext6:	
  4781 ;; *************** function _WDT_Main *****************
  4782 ;; Defined at:
  4783 ;;		line 1098 in file "../src/MCU_B1.c"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;		None
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;		None
  4788 ;; Return value:  Size  Location     Type
  4789 ;;		None               void
  4790 ;; Registers used:
  4791 ;;		wreg, status,2, status,0, pclath, cstack
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/0
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4801 ;;Total ram usage:        1 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    6
  4804 ;; This function calls:
  4805 ;;		_WDT_Clearing
  4806 ;; This function is called by:
  4807 ;;		_main
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           
  4812                           ;psect for function _WDT_Main
  4813  1D7A                     _WDT_Main:	
  4814                           
  4815                           ;MCU_B1.c: 1099: if (WDT.Enable == 1) {
  4816                           
  4817                           ;incstack = 0
  4818                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4819  1D7A  0021               	movlb	1	; select bank1
  4820  1D7B  1C4B               	btfss	_WDT^(0+128),0
  4821  1D7C  0008               	return
  4822                           
  4823                           ;MCU_B1.c: 1100: if (WDT.Timer-- > 0) {
  4824  1D7D  3001               	movlw	1
  4825  1D7E  02CC               	subwf	(_WDT^(0+128)+1),f
  4826  1D7F  084C               	movf	(_WDT^(0+128)+1),w
  4827  1D80  3AFF               	xorlw	255
  4828  1D81  1903               	skipnz
  4829  1D82  0008               	return
  4830                           
  4831                           ;MCU_B1.c: 1101: WDT.Timer = 100;
  4832  1D83  3064               	movlw	100
  4833  1D84  0020               	movlb	0	; select bank0
  4834  1D85  00A0               	movwf	??_WDT_Main
  4835  1D86  0820               	movf	??_WDT_Main,w
  4836  1D87  0021               	movlb	1	; select bank1
  4837  1D88  00CC               	movwf	(_WDT^(0+128)+1)
  4838                           
  4839                           ;MCU_B1.c: 1102: WDT_Clearing();
  4840  1D89  3180  2002         	fcall	_WDT_Clearing
  4841  1D8B  0008               	return
  4842  1D8C                     __end_of_WDT_Main:	
  4843                           
  4844                           	psect	text7
  4845  0002                     __ptext7:	
  4846 ;; *************** function _WDT_Clearing *****************
  4847 ;; Defined at:
  4848 ;;		line 1108 in file "../src/MCU_B1.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;		None
  4853 ;; Return value:  Size  Location     Type
  4854 ;;		None               void
  4855 ;; Registers used:
  4856 ;;		None
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;Total ram usage:        0 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    5
  4869 ;; This function calls:
  4870 ;;		Nothing
  4871 ;; This function is called by:
  4872 ;;		_WDT_Main
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           
  4877                           ;psect for function _WDT_Clearing
  4878  0002                     _WDT_Clearing:	
  4879                           
  4880                           ;incstack = 0
  4881                           ; Regs used in _WDT_Clearing: []
  4882  0002  0064               	clrwdt	;# 
  4883  0003  0008               	return
  4884  0004                     __end_of_WDT_Clearing:	
  4885                           
  4886                           	psect	text8
  4887  1B70                     __ptext8:	
  4888 ;; *************** function _Temp_Main *****************
  4889 ;; Defined at:
  4890 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;		None
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;		None
  4895 ;; Return value:  Size  Location     Type
  4896 ;;		None               void
  4897 ;; Registers used:
  4898 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;Total ram usage:        0 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    8
  4911 ;; This function calls:
  4912 ;;		_setTemp_Main
  4913 ;; This function is called by:
  4914 ;;		_main
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           
  4919                           ;psect for function _Temp_Main
  4920  1B70                     _Temp_Main:	
  4921                           
  4922                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4923                           
  4924                           ;incstack = 0
  4925                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4926  1B70  318E  2699         	fcall	_setTemp_Main
  4927  1B72  0008               	return
  4928  1B73                     __end_of_Temp_Main:	
  4929                           
  4930                           	psect	text9
  4931  0E99                     __ptext9:	
  4932 ;; *************** function _setTemp_Main *****************
  4933 ;; Defined at:
  4934 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  error           1   15[BANK0 ] unsigned char 
  4939 ;; Return value:  Size  Location     Type
  4940 ;;		None               void
  4941 ;; Registers used:
  4942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;Total ram usage:        3 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    7
  4955 ;; This function calls:
  4956 ;;		_getMain_All_Error_Status
  4957 ;;		_setBuz
  4958 ;; This function is called by:
  4959 ;;		_Temp_Main
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _setTemp_Main
  4965  0E99                     _setTemp_Main:	
  4966                           
  4967                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4971  0E99  3000               	movlw	0
  4972  0E9A  3191  21D2  318E   	fcall	_getMain_All_Error_Status
  4973  0E9D  0020               	movlb	0	; select bank0
  4974  0E9E  00AD               	movwf	??_setTemp_Main
  4975  0E9F  082D               	movf	??_setTemp_Main,w
  4976  0EA0  00AF               	movwf	setTemp_Main@error
  4977                           
  4978                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4979  0EA1  0021               	movlb	1	; select bank1
  4980  0EA2  1C57               	btfss	_Temp^(0+128),0
  4981  0EA3  2F48               	goto	l1696
  4982                           
  4983                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4984  0EA4  1957               	btfsc	_Temp^(0+128),2
  4985  0EA5  2EB5               	goto	l7160
  4986                           
  4987                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4988  0EA6  3001               	movlw	1
  4989  0EA7  07D8               	addwf	(_Temp^(0+128)+1),f
  4990  0EA8  3000               	movlw	0
  4991  0EA9  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  4992                           
  4993                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4994  0EAA  3001               	movlw	1
  4995  0EAB  0259               	subwf	((_Temp+1)^(0+128)+1),w
  4996  0EAC  30F4               	movlw	244
  4997  0EAD  1903               	skipnz
  4998  0EAE  0258               	subwf	(_Temp^(0+128)+1),w
  4999  0EAF  1C03               	skipc
  5000  0EB0  0008               	return
  5001                           
  5002                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5003  0EB1  01D8               	clrf	(_Temp^(0+128)+1)
  5004  0EB2  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5005                           
  5006                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5007  0EB3  1557               	bsf	_Temp^(0+128),2
  5008                           
  5009                           ;OverTemperature_B1.c: 70: }
  5010                           ;OverTemperature_B1.c: 71: } else {
  5011  0EB4  0008               	return
  5012  0EB5                     l7160:	
  5013                           
  5014                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5015  0EB5  3001               	movlw	1
  5016  0EB6  07D8               	addwf	(_Temp^(0+128)+1),f
  5017  0EB7  3000               	movlw	0
  5018  0EB8  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5019                           
  5020                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5021  0EB9  3000               	movlw	0
  5022  0EBA  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5023  0EBB  3005               	movlw	5
  5024  0EBC  1903               	skipnz
  5025  0EBD  0258               	subwf	(_Temp^(0+128)+1),w
  5026  0EBE  1C03               	skipc
  5027  0EBF  0008               	return
  5028                           
  5029                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5030  0EC0  01D8               	clrf	(_Temp^(0+128)+1)
  5031  0EC1  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5032                           
  5033                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5034  0EC2  3008               	movlw	8
  5035  0EC3  3ED7               	addlw	_Temp& (0+255)
  5036  0EC4  0086               	movwf	6
  5037  0EC5  0187               	clrf	7
  5038  0EC6  0016               	moviw fsr1++
  5039  0EC7  0401               	iorwf	1,w
  5040  0EC8  1903               	skipnz
  5041  0EC9  2F42               	goto	l7206
  5042  0ECA  300A               	movlw	10
  5043  0ECB  3ED7               	addlw	_Temp& (0+255)
  5044  0ECC  0086               	movwf	6
  5045  0ECD  0187               	clrf	7
  5046  0ECE  0016               	moviw fsr1++
  5047  0ECF  0401               	iorwf	1,w
  5048  0ED0  1903               	skipnz
  5049  0ED1  2F42               	goto	l7206
  5050                           
  5051                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5052  0ED2  1157               	bcf	_Temp^(0+128),2
  5053                           
  5054                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5055  0ED3  300A               	movlw	10
  5056  0ED4  3ED7               	addlw	_Temp& (0+255)
  5057  0ED5  0086               	movwf	6
  5058  0ED6  0187               	clrf	7
  5059  0ED7  3008               	movlw	8
  5060  0ED8  3ED7               	addlw	_Temp& (0+255)
  5061  0ED9  0084               	movwf	4
  5062  0EDA  0185               	clrf	5
  5063  0EDB  3F40               	moviw [0]fsr1
  5064  0EDC  0700               	addwf	0,w
  5065  0EDD  0020               	movlb	0	; select bank0
  5066  0EDE  00AD               	movwf	??_setTemp_Main
  5067  0EDF  3101               	addfsr 0,1
  5068  0EE0  3F41               	moviw [1]fsr1
  5069  0EE1  3D00               	addwfc	0,w
  5070  0EE2  00AE               	movwf	??_setTemp_Main+1
  5071  0EE3  36AE               	lsrf	??_setTemp_Main+1,f
  5072  0EE4  0CAD               	rrf	??_setTemp_Main,f
  5073  0EE5  082D               	movf	??_setTemp_Main,w
  5074  0EE6  0021               	movlb	1	; select bank1
  5075  0EE7  00DD               	movwf	(_Temp^(0+128)+6)
  5076  0EE8  0020               	movlb	0	; select bank0
  5077  0EE9  082E               	movf	??_setTemp_Main+1,w
  5078  0EEA  0021               	movlb	1	; select bank1
  5079  0EEB  00DE               	movwf	((_Temp+1)^(0+128)+6)
  5080                           
  5081                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5082  0EEC  3090               	movlw	144
  5083  0EED  00E5               	movwf	(_Temp^(0+128)+14)
  5084  0EEE  3001               	movlw	1
  5085  0EEF  00E6               	movwf	(_Temp^(0+128)+15)
  5086                           
  5087                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5088  0EF0  3059               	movlw	89
  5089  0EF1  00E7               	movwf	(_Temp^(0+128)+16)
  5090  0EF2  3001               	movlw	1
  5091  0EF3  00E8               	movwf	(_Temp^(0+128)+17)
  5092                           
  5093                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5094  0EF4  1CD7               	btfss	_Temp^(0+128),1
  5095  0EF5  2F16               	goto	l7192
  5096                           
  5097                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5098  0EF6  0866               	movf	((_Temp+1)^(0+128)+14),w
  5099  0EF7  025E               	subwf	((_Temp+1)^(0+128)+6),w
  5100  0EF8  1D03               	skipz
  5101  0EF9  2EFC               	goto	u6705
  5102  0EFA  0865               	movf	(_Temp^(0+128)+14),w
  5103  0EFB  025D               	subwf	(_Temp^(0+128)+6),w
  5104  0EFC                     u6705:	
  5105  0EFC  1C03               	skipc
  5106  0EFD  2F14               	goto	l7190
  5107                           
  5108                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5109  0EFE  3001               	movlw	1
  5110  0EFF  0020               	movlb	0	; select bank0
  5111  0F00  00AD               	movwf	??_setTemp_Main
  5112  0F01  082D               	movf	??_setTemp_Main,w
  5113  0F02  0021               	movlb	1	; select bank1
  5114  0F03  07DA               	addwf	(_Temp^(0+128)+3),f
  5115                           
  5116                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5117  0F04  3003               	movlw	3
  5118  0F05  025A               	subwf	(_Temp^(0+128)+3),w
  5119  0F06  1C03               	skipc
  5120  0F07  2F2C               	goto	l7204
  5121                           
  5122                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5123  0F08  01DA               	clrf	(_Temp^(0+128)+3)
  5124                           
  5125                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5126  0F09  10D7               	bcf	_Temp^(0+128),1
  5127                           
  5128                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5129  0F0A  3064               	movlw	100
  5130  0F0B  0020               	movlb	0	; select bank0
  5131  0F0C  00A9               	movwf	setBuz@time
  5132  0F0D  3000               	movlw	0
  5133  0F0E  00AA               	movwf	setBuz@time+1
  5134  0F0F  3002               	movlw	2
  5135  0F10  3196  2694  318E   	fcall	_setBuz
  5136                           
  5137                           ;OverTemperature_B1.c: 103: }
  5138                           ;OverTemperature_B1.c: 104: } else {
  5139  0F13  2F2C               	goto	l7204
  5140  0F14                     l7190:	
  5141                           
  5142                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5143  0F14  0021               	movlb	1	; select bank1
  5144  0F15  2F2B               	goto	l7202
  5145  0F16                     l7192:	
  5146                           ;OverTemperature_B1.c: 106: }
  5147                           ;OverTemperature_B1.c: 107: } else {
  5148                           
  5149                           
  5150                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5151  0F16  085E               	movf	((_Temp+1)^(0+128)+6),w
  5152  0F17  0268               	subwf	((_Temp+1)^(0+128)+16),w
  5153  0F18  1D03               	skipz
  5154  0F19  2F1C               	goto	u6725
  5155  0F1A  085D               	movf	(_Temp^(0+128)+6),w
  5156  0F1B  0267               	subwf	(_Temp^(0+128)+16),w
  5157  0F1C                     u6725:	
  5158  0F1C  1C03               	skipc
  5159  0F1D  2F2B               	goto	l7202
  5160                           
  5161                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5162  0F1E  3001               	movlw	1
  5163  0F1F  0020               	movlb	0	; select bank0
  5164  0F20  00AD               	movwf	??_setTemp_Main
  5165  0F21  082D               	movf	??_setTemp_Main,w
  5166  0F22  0021               	movlb	1	; select bank1
  5167  0F23  07DA               	addwf	(_Temp^(0+128)+3),f
  5168                           
  5169                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5170  0F24  3003               	movlw	3
  5171  0F25  025A               	subwf	(_Temp^(0+128)+3),w
  5172  0F26  1C03               	skipc
  5173  0F27  2F2C               	goto	l7204
  5174                           
  5175                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5176  0F28  01DA               	clrf	(_Temp^(0+128)+3)
  5177                           
  5178                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5179  0F29  14D7               	bsf	_Temp^(0+128),1
  5180                           
  5181                           ;OverTemperature_B1.c: 113: }
  5182                           ;OverTemperature_B1.c: 114: } else {
  5183  0F2A  2F2C               	goto	l7204
  5184  0F2B                     l7202:	
  5185                           
  5186                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5187  0F2B  01DA               	clrf	(_Temp^(0+128)+3)
  5188  0F2C                     l7204:	
  5189                           
  5190                           ;OverTemperature_B1.c: 116: }
  5191                           ;OverTemperature_B1.c: 117: }
  5192                           ;OverTemperature_B1.c: 118: product->Data[24]=Temp.AD >> 8;
  5193  0F2C  0021               	movlb	1	; select bank1
  5194  0F2D  085E               	movf	((_Temp+1)^(0+128)+6),w
  5195  0F2E  0020               	movlb	0	; select bank0
  5196  0F2F  00AD               	movwf	??_setTemp_Main
  5197  0F30  086E               	movf	_product,w
  5198  0F31  3E18               	addlw	24
  5199  0F32  0086               	movwf	6
  5200  0F33  3002               	movlw	2	; select bank4/5
  5201  0F34  0087               	movwf	7
  5202  0F35  082D               	movf	??_setTemp_Main,w
  5203  0F36  0081               	movwf	1
  5204                           
  5205                           ;OverTemperature_B1.c: 119: product->Data[25]=Temp.AD;
  5206  0F37  0021               	movlb	1	; select bank1
  5207  0F38  085D               	movf	(_Temp^(0+128)+6),w
  5208  0F39  0020               	movlb	0	; select bank0
  5209  0F3A  00AD               	movwf	??_setTemp_Main
  5210  0F3B  086E               	movf	_product,w
  5211  0F3C  3E19               	addlw	25
  5212  0F3D  0086               	movwf	6
  5213  0F3E  3002               	movlw	2	; select bank4/5
  5214  0F3F  0087               	movwf	7
  5215  0F40  082D               	movf	??_setTemp_Main,w
  5216  0F41  0081               	movwf	1
  5217  0F42                     l7206:	
  5218                           
  5219                           ;OverTemperature_B1.c: 135: }
  5220                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5221  0F42  0021               	movlb	1	; select bank1
  5222  0F43  01DF               	clrf	(_Temp^(0+128)+8)
  5223  0F44  01E0               	clrf	((_Temp+1)^(0+128)+8)
  5224                           
  5225                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5226  0F45  01E1               	clrf	(_Temp^(0+128)+10)
  5227  0F46  01E2               	clrf	((_Temp+1)^(0+128)+10)
  5228                           
  5229                           ;OverTemperature_B1.c: 138: }
  5230                           ;OverTemperature_B1.c: 139: }
  5231                           ;OverTemperature_B1.c: 141: } else {
  5232  0F47  0008               	return
  5233  0F48                     l1696:	
  5234                           
  5235                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5236  0F48  1C20               	btfss	_myMain^(0+128),0
  5237  0F49  0008               	return
  5238                           
  5239                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5240  0F4A  1457               	bsf	_Temp^(0+128),0
  5241  0F4B  0008               	return
  5242  0F4C                     __end_of_setTemp_Main:	
  5243                           
  5244                           	psect	text10
  5245  1B6D                     __ptext10:	
  5246 ;; *************** function _Temp_Initialization *****************
  5247 ;; Defined at:
  5248 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;		None
  5251 ;; Auto vars:     Size  Location     Type
  5252 ;;		None
  5253 ;; Return value:  Size  Location     Type
  5254 ;;		None               void
  5255 ;; Registers used:
  5256 ;;		status,2, status,0, pclath, cstack
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;Total ram usage:        0 bytes
  5267 ;; Hardware stack levels used:    1
  5268 ;; Hardware stack levels required when called:    6
  5269 ;; This function calls:
  5270 ;;		_setTemp_Initialization
  5271 ;; This function is called by:
  5272 ;;		_main
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           
  5277                           ;psect for function _Temp_Initialization
  5278  1B6D                     _Temp_Initialization:	
  5279                           
  5280                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5284  1B6D  3187  27FF         	fcall	_setTemp_Initialization
  5285  1B6F  0008               	return
  5286  1B70                     __end_of_Temp_Initialization:	
  5287                           
  5288                           	psect	text11
  5289  07FF                     __ptext11:	
  5290 ;; *************** function _setTemp_Initialization *****************
  5291 ;; Defined at:
  5292 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;		None
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;		None
  5297 ;; Return value:  Size  Location     Type
  5298 ;;		None               void
  5299 ;; Registers used:
  5300 ;;		None
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5310 ;;Total ram usage:        0 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    5
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		_Temp_Initialization
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           
  5321                           ;psect for function _setTemp_Initialization
  5322  07FF                     _setTemp_Initialization:	
  5323                           
  5324                           ;incstack = 0
  5325                           ; Regs used in _setTemp_Initialization: []
  5326  07FF  0008               	return
  5327  0800                     __end_of_setTemp_Initialization:	
  5328                           
  5329                           	psect	text12
  5330  1EF4                     __ptext12:	
  5331 ;; *************** function _Switch_Main *****************
  5332 ;; Defined at:
  5333 ;;		line 72 in file "../src/Switch_B1.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;		None
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;  error           1   30[BANK0 ] unsigned char 
  5338 ;; Return value:  Size  Location     Type
  5339 ;;		None               void
  5340 ;; Registers used:
  5341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;Total ram usage:        2 bytes
  5352 ;; Hardware stack levels used:    1
  5353 ;; Hardware stack levels required when called:   11
  5354 ;; This function calls:
  5355 ;;		_TouchPower
  5356 ;;		_getMain_All_Error_Status
  5357 ;;		_setMain_Exception
  5358 ;;		_setSw_Main
  5359 ;; This function is called by:
  5360 ;;		_main
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           
  5365                           ;psect for function _Switch_Main
  5366  1EF4                     _Switch_Main:	
  5367                           
  5368                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5369                           
  5370                           ;incstack = 0
  5371                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5372  1EF4  3000               	movlw	0
  5373  1EF5  3191  21D2  319E   	fcall	_getMain_All_Error_Status
  5374  1EF8  0020               	movlb	0	; select bank0
  5375  1EF9  00BD               	movwf	??_Switch_Main
  5376  1EFA  083D               	movf	??_Switch_Main,w
  5377  1EFB  00BE               	movwf	Switch_Main@error
  5378                           
  5379                           ;Switch_B1.c: 74: if (error != 0) {
  5380  1EFC  083E               	movf	Switch_Main@error,w
  5381  1EFD  1903               	btfsc	3,2
  5382  1EFE  2F04               	goto	l2391
  5383                           
  5384                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5385  1EFF  0021               	movlb	1	; select bank1
  5386  1F00  1852               	btfsc	_SwDetect^(0+128),0
  5387  1F01  2F0D               	goto	l7900
  5388                           
  5389                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5390  1F02  1452               	bsf	_SwDetect^(0+128),0
  5391  1F03  2F08               	goto	L2
  5392  1F04                     l2391:	
  5393                           ;Switch_B1.c: 80: }
  5394                           ;Switch_B1.c: 81: } else {
  5395                           
  5396                           ;Switch_B1.c: 78: setMain_Exception(error);
  5397                           
  5398                           
  5399                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5400  1F04  0021               	movlb	1	; select bank1
  5401  1F05  1C52               	btfss	_SwDetect^(0+128),0
  5402  1F06  2F0D               	goto	l7900
  5403                           
  5404                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5405  1F07  1052               	bcf	_SwDetect^(0+128),0
  5406  1F08                     L2:	
  5407                           
  5408                           ;Switch_B1.c: 85: setMain_Exception(error);
  5409  1F08  0020               	movlb	0	; select bank0
  5410  1F09  083E               	movf	Switch_Main@error,w
  5411  1F0A  3197  27A4  319E   	fcall	_setMain_Exception
  5412  1F0D                     l7900:	
  5413                           
  5414                           ;Switch_B1.c: 87: }
  5415                           ;Switch_B1.c: 88: }
  5416                           ;Switch_B1.c: 91: setSw_Main(1);
  5417  1F0D  3001               	movlw	1
  5418  1F0E  3181  21C0  319E   	fcall	_setSw_Main
  5419                           
  5420                           ;Switch_B1.c: 103: TouchPower();
  5421  1F11  319E  2604         	fcall	_TouchPower
  5422  1F13  0008               	return
  5423  1F14                     __end_of_Switch_Main:	
  5424                           
  5425                           	psect	text13
  5426  01C0                     __ptext13:	
  5427 ;; *************** function _setSw_Main *****************
  5428 ;; Defined at:
  5429 ;;		line 137 in file "../src/Switch_B1.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;  sw              1    wreg     unsigned char 
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;  sw              1   19[BANK0 ] unsigned char 
  5434 ;; Return value:  Size  Location     Type
  5435 ;;		None               void
  5436 ;; Registers used:
  5437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;Total ram usage:        3 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    9
  5450 ;; This function calls:
  5451 ;;		_SwPointSelect
  5452 ;;		_getSw_KeyStatus
  5453 ;;		_setBuz
  5454 ;;		_setDimmerLights_AdjControl
  5455 ;;		_setDimmerLights_SwOff
  5456 ;;		_setDimmerLights_SwOn
  5457 ;;		_setRF_Learn
  5458 ;; This function is called by:
  5459 ;;		_Switch_Main
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           
  5464                           ;psect for function _setSw_Main
  5465  01C0                     _setSw_Main:	
  5466                           
  5467                           ;incstack = 0
  5468                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5469                           ;setSw_Main@sw stored from wreg
  5470  01C0  0020               	movlb	0	; select bank0
  5471  01C1  00B3               	movwf	setSw_Main@sw
  5472                           
  5473                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5474  01C2  0833               	movf	setSw_Main@sw,w
  5475  01C3  319C  2446  3181   	fcall	_SwPointSelect
  5476                           
  5477                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5478  01C6  087C               	movf	_Sw,w
  5479  01C7  0086               	movwf	6
  5480  01C8  3001               	movlw	1	; select bank2/3
  5481  01C9  0087               	movwf	7
  5482  01CA  1C01               	btfss	1,0
  5483  01CB  2B26               	goto	l2401
  5484                           
  5485                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5486  01CC  0021               	movlb	1	; select bank1
  5487  01CD  1852               	btfsc	_SwDetect^(0+128),0
  5488  01CE  29EA               	goto	l7342
  5489                           
  5490                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5491  01CF  0A7C               	incf	_Sw,w
  5492  01D0  0086               	movwf	6
  5493  01D1  3001               	movlw	1	; select bank2/3
  5494  01D2  0087               	movwf	7
  5495  01D3  1081               	bcf	1,1
  5496                           
  5497                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5498  01D4  0020               	movlb	0	; select bank0
  5499  01D5  0833               	movf	setSw_Main@sw,w
  5500  01D6  319D  2545  3181   	fcall	_getSw_KeyStatus
  5501  01D9  3A01               	xorlw	1
  5502  01DA  3000               	movlw	0
  5503  01DB  1903               	skipnz
  5504  01DC  3001               	movlw	1
  5505  01DD  0020               	movlb	0	; select bank0
  5506  01DE  00B1               	movwf	??_setSw_Main
  5507  01DF  087C               	movf	_Sw,w
  5508  01E0  0086               	movwf	6
  5509  01E1  3001               	movlw	1	; select bank2/3
  5510  01E2  0087               	movwf	7
  5511  01E3  0DB1               	rlf	??_setSw_Main,f
  5512  01E4  0801               	movf	1,w
  5513  01E5  0631               	xorwf	??_setSw_Main,w
  5514  01E6  39FD               	andlw	-3
  5515  01E7  0631               	xorwf	??_setSw_Main,w
  5516  01E8  0081               	movwf	1
  5517                           
  5518                           ;Switch_B1.c: 143: } else {
  5519  01E9  29FF               	goto	l2403
  5520  01EA                     l7342:	
  5521                           
  5522                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5523  01EA  0A7C               	incf	_Sw,w
  5524  01EB  0086               	movwf	6
  5525  01EC  3001               	movlw	1	; select bank2/3
  5526  01ED  0087               	movwf	7
  5527  01EE  1881               	btfsc	1,1
  5528  01EF  29FF               	goto	l2403
  5529                           
  5530                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5531  01F0  0A7C               	incf	_Sw,w
  5532  01F1  0086               	movwf	6
  5533  01F2  3001               	movlw	1	; select bank2/3
  5534  01F3  0087               	movwf	7
  5535  01F4  1481               	bsf	1,1
  5536                           
  5537                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5538  01F5  087C               	movf	_Sw,w
  5539  01F6  0086               	movwf	6
  5540  01F7  3001               	movlw	1	; select bank2/3
  5541  01F8  0087               	movwf	7
  5542  01F9  1081               	bcf	1,1
  5543                           
  5544                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5545  01FA  087C               	movf	_Sw,w
  5546  01FB  0086               	movwf	6
  5547  01FC  3001               	movlw	1	; select bank2/3
  5548  01FD  0087               	movwf	7
  5549  01FE  1501               	bsf	1,2
  5550  01FF                     l2403:	
  5551                           
  5552                           ;Switch_B1.c: 148: }
  5553                           ;Switch_B1.c: 149: }
  5554                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5555  01FF  087C               	movf	_Sw,w
  5556  0200  0086               	movwf	6
  5557  0201  3001               	movlw	1	; select bank2/3
  5558  0202  0087               	movwf	7
  5559  0203  1C81               	btfss	1,1
  5560  0204  2ACF               	goto	l7392
  5561                           
  5562                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5563  0205  087C               	movf	_Sw,w
  5564  0206  0086               	movwf	6
  5565  0207  3001               	movlw	1	; select bank2/3
  5566  0208  0087               	movwf	7
  5567  0209  1901               	btfsc	1,2
  5568  020A  2A2D               	goto	l7358
  5569                           
  5570                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5571  020B  3001               	movlw	1
  5572  020C  0020               	movlb	0	; select bank0
  5573  020D  00B1               	movwf	??_setSw_Main
  5574  020E  087C               	movf	_Sw,w
  5575  020F  3E02               	addlw	2
  5576  0210  0086               	movwf	6
  5577  0211  3001               	movlw	1	; select bank2/3
  5578  0212  0087               	movwf	7
  5579  0213  0831               	movf	??_setSw_Main,w
  5580  0214  0781               	addwf	1,f
  5581                           
  5582                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5583  0215  087C               	movf	_Sw,w
  5584  0216  3E02               	addlw	2
  5585  0217  0086               	movwf	6
  5586  0218  3001               	movlw	1	; select bank2/3
  5587  0219  0087               	movwf	7
  5588  021A  3005               	movlw	5
  5589  021B  0201               	subwf	1,w
  5590  021C  1C03               	skipc
  5591  021D  0008               	return
  5592                           
  5593                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5594  021E  087C               	movf	_Sw,w
  5595  021F  3E02               	addlw	2
  5596  0220  0086               	movwf	6
  5597  0221  3001               	movlw	1	; select bank2/3
  5598  0222  0087               	movwf	7
  5599  0223  0181               	clrf	1
  5600                           
  5601                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5602  0224  087C               	movf	_Sw,w
  5603  0225  0086               	movwf	6
  5604  0226  3001               	movlw	1	; select bank2/3
  5605  0227  0087               	movwf	7
  5606  0228  1501               	bsf	1,2
  5607                           
  5608                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5609  0229  0833               	movf	setSw_Main@sw,w
  5610  022A  3193  23BA         	fcall	_setDimmerLights_SwOn
  5611                           
  5612                           ;Switch_B1.c: 162: }
  5613                           ;Switch_B1.c: 163: } else {
  5614  022C  0008               	return
  5615  022D                     l7358:	
  5616                           
  5617                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5618  022D  087C               	movf	_Sw,w
  5619  022E  0086               	movwf	6
  5620  022F  3001               	movlw	1	; select bank2/3
  5621  0230  0087               	movwf	7
  5622  0231  1981               	btfsc	1,3
  5623  0232  2A5F               	goto	l7368
  5624                           
  5625                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5626  0233  087C               	movf	_Sw,w
  5627  0234  3E03               	addlw	3
  5628  0235  0086               	movwf	6
  5629  0236  3001               	movlw	1	; select bank2/3
  5630  0237  0087               	movwf	7
  5631  0238  3001               	movlw	1
  5632  0239  0781               	addwf	1,f
  5633  023A  3141               	addfsr 1,1
  5634  023B  1803               	skipnc
  5635  023C  0A81               	incf	1,f
  5636                           
  5637                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5638  023D  087C               	movf	_Sw,w
  5639  023E  3E03               	addlw	3
  5640  023F  0086               	movwf	6
  5641  0240  3001               	movlw	1	; select bank2/3
  5642  0241  0087               	movwf	7
  5643  0242  3F40               	moviw [0]fsr1
  5644  0243  0020               	movlb	0	; select bank0
  5645  0244  00B1               	movwf	??_setSw_Main
  5646  0245  3F41               	moviw [1]fsr1
  5647  0246  00B2               	movwf	??_setSw_Main+1
  5648  0247  3000               	movlw	0
  5649  0248  0232               	subwf	??_setSw_Main+1,w
  5650  0249  3096               	movlw	150
  5651  024A  1903               	skipnz
  5652  024B  0231               	subwf	??_setSw_Main,w
  5653  024C  1C03               	skipc
  5654  024D  0008               	return
  5655                           
  5656                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5657  024E  087C               	movf	_Sw,w
  5658  024F  3E03               	addlw	3
  5659  0250  0086               	movwf	6
  5660  0251  3001               	movlw	1	; select bank2/3
  5661  0252  0087               	movwf	7
  5662  0253  3000               	movlw	0
  5663  0254  3FC0               	movwi [0]fsr1
  5664  0255  3FC1               	movwi [1]fsr1
  5665                           
  5666                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5667  0256  087C               	movf	_Sw,w
  5668  0257  0086               	movwf	6
  5669  0258  3001               	movlw	1	; select bank2/3
  5670  0259  0087               	movwf	7
  5671  025A  1581               	bsf	1,3
  5672                           
  5673                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5674  025B  0833               	movf	setSw_Main@sw,w
  5675  025C  3192  2238         	fcall	_setDimmerLights_AdjControl
  5676                           
  5677                           ;Switch_B1.c: 174: }
  5678                           ;Switch_B1.c: 175: } else {
  5679  025E  0008               	return
  5680  025F                     l7368:	
  5681                           
  5682                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5683  025F  087C               	movf	_Sw,w
  5684  0260  0086               	movwf	6
  5685  0261  3001               	movlw	1	; select bank2/3
  5686  0262  0087               	movwf	7
  5687  0263  1A01               	btfsc	1,4
  5688  0264  2A9D               	goto	l7382
  5689                           
  5690                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5691  0265  087C               	movf	_Sw,w
  5692  0266  3E05               	addlw	5
  5693  0267  0086               	movwf	6
  5694  0268  3001               	movlw	1	; select bank2/3
  5695  0269  0087               	movwf	7
  5696  026A  3001               	movlw	1
  5697  026B  0781               	addwf	1,f
  5698  026C  3141               	addfsr 1,1
  5699  026D  1803               	skipnc
  5700  026E  0A81               	incf	1,f
  5701                           
  5702                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5703  026F  087C               	movf	_Sw,w
  5704  0270  3E05               	addlw	5
  5705  0271  0086               	movwf	6
  5706  0272  3001               	movlw	1	; select bank2/3
  5707  0273  0087               	movwf	7
  5708  0274  3F40               	moviw [0]fsr1
  5709  0275  0020               	movlb	0	; select bank0
  5710  0276  00B1               	movwf	??_setSw_Main
  5711  0277  3F41               	moviw [1]fsr1
  5712  0278  00B2               	movwf	??_setSw_Main+1
  5713  0279  3000               	movlw	0
  5714  027A  0232               	subwf	??_setSw_Main+1,w
  5715  027B  3096               	movlw	150
  5716  027C  1903               	skipnz
  5717  027D  0231               	subwf	??_setSw_Main,w
  5718  027E  1C03               	skipc
  5719  027F  0008               	return
  5720                           
  5721                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5722  0280  087C               	movf	_Sw,w
  5723  0281  3E05               	addlw	5
  5724  0282  0086               	movwf	6
  5725  0283  3001               	movlw	1	; select bank2/3
  5726  0284  0087               	movwf	7
  5727  0285  3000               	movlw	0
  5728  0286  3FC0               	movwi [0]fsr1
  5729  0287  3FC1               	movwi [1]fsr1
  5730                           
  5731                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5732  0288  087C               	movf	_Sw,w
  5733  0289  0086               	movwf	6
  5734  028A  3001               	movlw	1	; select bank2/3
  5735  028B  0087               	movwf	7
  5736  028C  1601               	bsf	1,4
  5737                           
  5738                           ;Switch_B1.c: 183: setRF_Learn(1);
  5739  028D  3001               	movlw	1
  5740  028E  319D  25C6  3181   	fcall	_setRF_Learn
  5741                           
  5742                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5743  0291  0021               	movlb	1	; select bank1
  5744  0292  1EA0               	btfss	_myMain^(0+128),5
  5745  0293  0008               	return
  5746                           
  5747                           ;Switch_B1.c: 186: setBuz(2, 100);
  5748  0294  3064               	movlw	100
  5749  0295  0020               	movlb	0	; select bank0
  5750  0296  00A9               	movwf	setBuz@time
  5751  0297  3000               	movlw	0
  5752  0298  00AA               	movwf	setBuz@time+1
  5753  0299  3002               	movlw	2
  5754  029A  3196  2694         	fcall	_setBuz
  5755                           
  5756                           ;Switch_B1.c: 187: }
  5757                           ;Switch_B1.c: 189: }
  5758                           ;Switch_B1.c: 190: } else {
  5759  029C  0008               	return
  5760  029D                     l7382:	
  5761                           
  5762                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5763  029D  087C               	movf	_Sw,w
  5764  029E  0086               	movwf	6
  5765  029F  3001               	movlw	1	; select bank2/3
  5766  02A0  0087               	movwf	7
  5767  02A1  1A81               	btfsc	1,5
  5768  02A2  0008               	return
  5769                           
  5770                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5771  02A3  087C               	movf	_Sw,w
  5772  02A4  3E07               	addlw	7
  5773  02A5  0086               	movwf	6
  5774  02A6  3001               	movlw	1	; select bank2/3
  5775  02A7  0087               	movwf	7
  5776  02A8  3001               	movlw	1
  5777  02A9  0781               	addwf	1,f
  5778  02AA  3141               	addfsr 1,1
  5779  02AB  1803               	skipnc
  5780  02AC  0A81               	incf	1,f
  5781                           
  5782                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5783  02AD  087C               	movf	_Sw,w
  5784  02AE  3E07               	addlw	7
  5785  02AF  0086               	movwf	6
  5786  02B0  3001               	movlw	1	; select bank2/3
  5787  02B1  0087               	movwf	7
  5788  02B2  3F40               	moviw [0]fsr1
  5789  02B3  0020               	movlb	0	; select bank0
  5790  02B4  00B1               	movwf	??_setSw_Main
  5791  02B5  3F41               	moviw [1]fsr1
  5792  02B6  00B2               	movwf	??_setSw_Main+1
  5793  02B7  3001               	movlw	1
  5794  02B8  0232               	subwf	??_setSw_Main+1,w
  5795  02B9  302C               	movlw	44
  5796  02BA  1903               	skipnz
  5797  02BB  0231               	subwf	??_setSw_Main,w
  5798  02BC  1C03               	skipc
  5799  02BD  0008               	return
  5800                           
  5801                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5802  02BE  087C               	movf	_Sw,w
  5803  02BF  3E07               	addlw	7
  5804  02C0  0086               	movwf	6
  5805  02C1  3001               	movlw	1	; select bank2/3
  5806  02C2  0087               	movwf	7
  5807  02C3  3000               	movlw	0
  5808  02C4  3FC0               	movwi [0]fsr1
  5809  02C5  3FC1               	movwi [1]fsr1
  5810                           
  5811                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5812  02C6  087C               	movf	_Sw,w
  5813  02C7  0086               	movwf	6
  5814  02C8  3001               	movlw	1	; select bank2/3
  5815  02C9  0087               	movwf	7
  5816  02CA  1681               	bsf	1,5
  5817                           
  5818                           ;Switch_B1.c: 198: setRF_Learn(0);
  5819  02CB  3000               	movlw	0
  5820  02CC  319D  25C6         	fcall	_setRF_Learn
  5821                           
  5822                           ;Switch_B1.c: 201: }
  5823                           ;Switch_B1.c: 202: }
  5824                           ;Switch_B1.c: 203: }
  5825                           ;Switch_B1.c: 204: }
  5826                           ;Switch_B1.c: 205: }
  5827                           ;Switch_B1.c: 206: } else {
  5828  02CE  0008               	return
  5829  02CF                     l7392:	
  5830                           
  5831                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5832  02CF  087C               	movf	_Sw,w
  5833  02D0  0086               	movwf	6
  5834  02D1  3001               	movlw	1	; select bank2/3
  5835  02D2  0087               	movwf	7
  5836  02D3  1D01               	btfss	1,2
  5837  02D4  0008               	return
  5838                           
  5839                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5840  02D5  3001               	movlw	1
  5841  02D6  0020               	movlb	0	; select bank0
  5842  02D7  00B1               	movwf	??_setSw_Main
  5843  02D8  087C               	movf	_Sw,w
  5844  02D9  3E02               	addlw	2
  5845  02DA  0086               	movwf	6
  5846  02DB  3001               	movlw	1	; select bank2/3
  5847  02DC  0087               	movwf	7
  5848  02DD  0831               	movf	??_setSw_Main,w
  5849  02DE  0781               	addwf	1,f
  5850                           
  5851                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5852  02DF  087C               	movf	_Sw,w
  5853  02E0  3E02               	addlw	2
  5854  02E1  0086               	movwf	6
  5855  02E2  3001               	movlw	1	; select bank2/3
  5856  02E3  0087               	movwf	7
  5857  02E4  3005               	movlw	5
  5858  02E5  0201               	subwf	1,w
  5859  02E6  1C03               	skipc
  5860  02E7  0008               	return
  5861                           
  5862                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5863  02E8  087C               	movf	_Sw,w
  5864  02E9  3E02               	addlw	2
  5865  02EA  0086               	movwf	6
  5866  02EB  3001               	movlw	1	; select bank2/3
  5867  02EC  0087               	movwf	7
  5868  02ED  0181               	clrf	1
  5869                           
  5870                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5871  02EE  087C               	movf	_Sw,w
  5872  02EF  0086               	movwf	6
  5873  02F0  3001               	movlw	1	; select bank2/3
  5874  02F1  0087               	movwf	7
  5875  02F2  1101               	bcf	1,2
  5876                           
  5877                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5878  02F3  087C               	movf	_Sw,w
  5879  02F4  3E03               	addlw	3
  5880  02F5  0086               	movwf	6
  5881  02F6  3001               	movlw	1	; select bank2/3
  5882  02F7  0087               	movwf	7
  5883  02F8  3000               	movlw	0
  5884  02F9  3FC0               	movwi [0]fsr1
  5885  02FA  3FC1               	movwi [1]fsr1
  5886                           
  5887                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5888  02FB  087C               	movf	_Sw,w
  5889  02FC  0086               	movwf	6
  5890  02FD  3001               	movlw	1	; select bank2/3
  5891  02FE  0087               	movwf	7
  5892  02FF  1181               	bcf	1,3
  5893                           
  5894                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5895  0300  087C               	movf	_Sw,w
  5896  0301  3E05               	addlw	5
  5897  0302  0086               	movwf	6
  5898  0303  3001               	movlw	1	; select bank2/3
  5899  0304  0087               	movwf	7
  5900  0305  3000               	movlw	0
  5901  0306  3FC0               	movwi [0]fsr1
  5902  0307  3FC1               	movwi [1]fsr1
  5903                           
  5904                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5905  0308  087C               	movf	_Sw,w
  5906  0309  0086               	movwf	6
  5907  030A  3001               	movlw	1	; select bank2/3
  5908  030B  0087               	movwf	7
  5909  030C  1201               	bcf	1,4
  5910                           
  5911                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5912  030D  087C               	movf	_Sw,w
  5913  030E  3E07               	addlw	7
  5914  030F  0086               	movwf	6
  5915  0310  3001               	movlw	1	; select bank2/3
  5916  0311  0087               	movwf	7
  5917  0312  3000               	movlw	0
  5918  0313  3FC0               	movwi [0]fsr1
  5919  0314  3FC1               	movwi [1]fsr1
  5920                           
  5921                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5922  0315  087C               	movf	_Sw,w
  5923  0316  0086               	movwf	6
  5924  0317  3001               	movlw	1	; select bank2/3
  5925  0318  0087               	movwf	7
  5926  0319  1281               	bcf	1,5
  5927                           
  5928                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5929  031A  0021               	movlb	1	; select bank1
  5930  031B  1852               	btfsc	_SwDetect^(0+128),0
  5931  031C  2B22               	goto	l7418
  5932                           
  5933                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5934  031D  0020               	movlb	0	; select bank0
  5935  031E  0833               	movf	setSw_Main@sw,w
  5936  031F  3194  24B8  3181   	fcall	_setDimmerLights_SwOff
  5937  0322                     l7418:	
  5938                           
  5939                           ;Switch_B1.c: 221: }
  5940                           ;Switch_B1.c: 224: setRF_Learn(0);
  5941  0322  3000               	movlw	0
  5942  0323  319D  25C6         	fcall	_setRF_Learn
  5943                           
  5944                           ;Switch_B1.c: 226: }
  5945                           ;Switch_B1.c: 227: }
  5946                           ;Switch_B1.c: 228: }
  5947                           ;Switch_B1.c: 229: } else {
  5948  0325  0008               	return
  5949  0326                     l2401:	
  5950                           
  5951                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5952  0326  0021               	movlb	1	; select bank1
  5953  0327  1C20               	btfss	_myMain^(0+128),0
  5954  0328  0008               	return
  5955                           
  5956                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5957  0329  087C               	movf	_Sw,w
  5958  032A  0086               	movwf	6
  5959  032B  3001               	movlw	1	; select bank2/3
  5960  032C  0087               	movwf	7
  5961  032D  1401               	bsf	1,0
  5962  032E  0008               	return
  5963  032F                     __end_of_setSw_Main:	
  5964                           
  5965                           	psect	text14
  5966  1DC6                     __ptext14:	
  5967 ;; *************** function _setRF_Learn *****************
  5968 ;; Defined at:
  5969 ;;		line 23 in file "../src/RF_Control_B1.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;  command         1    wreg     unsigned char 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  command         1    1[BANK0 ] unsigned char 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;		None               void
  5976 ;; Registers used:
  5977 ;;		wreg, status,2, status,0
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;Total ram usage:        2 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    5
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_setSw_Main
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           
  5998                           ;psect for function _setRF_Learn
  5999  1DC6                     _setRF_Learn:	
  6000                           
  6001                           ;incstack = 0
  6002                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6003                           ;setRF_Learn@command stored from wreg
  6004  1DC6  0020               	movlb	0	; select bank0
  6005  1DC7  00A1               	movwf	setRF_Learn@command
  6006                           
  6007                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  6008  1DC8  0821               	movf	setRF_Learn@command,w
  6009  1DC9  3A01               	xorlw	1
  6010  1DCA  3000               	movlw	0
  6011  1DCB  1903               	skipnz
  6012  1DCC  3001               	movlw	1
  6013  1DCD  00A0               	movwf	??_setRF_Learn
  6014  1DCE  0EA0               	swapf	??_setRF_Learn,f
  6015  1DCF  0DA0               	rlf	??_setRF_Learn,f
  6016  1DD0  0DA0               	rlf	??_setRF_Learn,f
  6017  1DD1  0021               	movlb	1	; select bank1
  6018  1DD2  083A               	movf	_RF1^(0+128),w
  6019  1DD3  0020               	movlb	0	; select bank0
  6020  1DD4  0620               	xorwf	??_setRF_Learn,w
  6021  1DD5  39BF               	andlw	-65
  6022  1DD6  0620               	xorwf	??_setRF_Learn,w
  6023  1DD7  0021               	movlb	1	; select bank1
  6024  1DD8  00BA               	movwf	_RF1^(0+128)
  6025  1DD9  0008               	return
  6026  1DDA                     __end_of_setRF_Learn:	
  6027                           
  6028                           	psect	text15
  6029  1238                     __ptext15:	
  6030 ;; *************** function _setDimmerLights_AdjControl *****************
  6031 ;; Defined at:
  6032 ;;		line 546 in file "../src/Dimmer_B1.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  sw              1    wreg     unsigned char 
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  sw              1    8[BANK0 ] unsigned char 
  6037 ;;  idle            1    6[BANK0 ] unsigned char 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;		None               void
  6040 ;; Registers used:
  6041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6048 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;Total ram usage:        4 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    7
  6054 ;; This function calls:
  6055 ;;		_DimmerLightsPointSelect
  6056 ;;		_getAll_DimmerLights_AdjGO
  6057 ;;		_setDimmerLights_TriggerAdj
  6058 ;; This function is called by:
  6059 ;;		_setSw_Main
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           
  6064                           ;psect for function _setDimmerLights_AdjControl
  6065  1238                     _setDimmerLights_AdjControl:	
  6066                           
  6067                           ;incstack = 0
  6068                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6069                           ;setDimmerLights_AdjControl@sw stored from wreg
  6070  1238  0020               	movlb	0	; select bank0
  6071  1239  00A8               	movwf	setDimmerLights_AdjControl@sw
  6072                           
  6073                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(sw);
  6074  123A  0828               	movf	setDimmerLights_AdjControl@sw,w
  6075  123B  319C  240F  3192   	fcall	_DimmerLightsPointSelect
  6076                           
  6077                           ;Dimmer_B1.c: 548: char idle = 0;
  6078  123E  0020               	movlb	0	; select bank0
  6079  123F  01A6               	clrf	setDimmerLights_AdjControl@idle
  6080                           
  6081                           ;Dimmer_B1.c: 550: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6082  1240  01A7               	clrf	_setDimmerLights_AdjControl$2119
  6083  1241  319B  23EF  3192   	fcall	_getAll_DimmerLights_AdjGO
  6084  1244  3A01               	xorlw	1
  6085  1245  1D03               	skipz
  6086  1246  2A4D               	goto	l6564
  6087  1247  0022               	movlb	2	; select bank2
  6088  1248  1CBE               	btfss	_Dimmer^(0+256),1
  6089  1249  2A4D               	goto	l6564
  6090  124A  0020               	movlb	0	; select bank0
  6091  124B  01A7               	clrf	_setDimmerLights_AdjControl$2119
  6092  124C  0AA7               	incf	_setDimmerLights_AdjControl$2119,f
  6093  124D                     l6564:	
  6094  124D  0020               	movlb	0	; select bank0
  6095  124E  0827               	movf	_setDimmerLights_AdjControl$2119,w
  6096  124F  00A5               	movwf	??_setDimmerLights_AdjControl
  6097  1250  0825               	movf	??_setDimmerLights_AdjControl,w
  6098  1251  00A6               	movwf	setDimmerLights_AdjControl@idle
  6099                           
  6100                           ;Dimmer_B1.c: 552: if (idle == 0) {
  6101  1252  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6102  1253  1D03               	skipz
  6103  1254  0008               	return
  6104                           
  6105                           ;Dimmer_B1.c: 553: if (DimmerLights->SwFlag == 1) {
  6106  1255  086F               	movf	_DimmerLights,w
  6107  1256  3E09               	addlw	9
  6108  1257  0086               	movwf	6
  6109  1258  3001               	movlw	1	; select bank2/3
  6110  1259  0087               	movwf	7
  6111  125A  1F01               	btfss	1,6
  6112  125B  0008               	return
  6113                           
  6114                           ;Dimmer_B1.c: 554: DimmerLights->SwAdj = 1;
  6115  125C  086F               	movf	_DimmerLights,w
  6116  125D  3E09               	addlw	9
  6117  125E  0086               	movwf	6
  6118  125F  3001               	movlw	1	; select bank2/3
  6119  1260  0087               	movwf	7
  6120  1261  1781               	bsf	1,7
  6121                           
  6122                           ;Dimmer_B1.c: 555: DimmerLights->Status = 1;
  6123  1262  086F               	movf	_DimmerLights,w
  6124  1263  0086               	movwf	6
  6125  1264  3001               	movlw	1	; select bank2/3
  6126  1265  0087               	movwf	7
  6127  1266  1681               	bsf	1,5
  6128                           
  6129                           ;Dimmer_B1.c: 556: setDimmerLights_TriggerAdj(sw, 1);
  6130  1267  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6131  1268  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6132  1269  0828               	movf	setDimmerLights_AdjControl@sw,w
  6133  126A  319E  26D4         	fcall	_setDimmerLights_TriggerAdj
  6134  126C  0008               	return
  6135  126D                     __end_of_setDimmerLights_AdjControl:	
  6136                           
  6137                           	psect	text16
  6138  1D45                     __ptext16:	
  6139 ;; *************** function _getSw_KeyStatus *****************
  6140 ;; Defined at:
  6141 ;;		line 237 in file "../src/Switch_B1.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  sw              1    wreg     unsigned char 
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;  sw              1    0[COMMON] unsigned char 
  6146 ;;  status          1    1[BANK0 ] unsigned char 
  6147 ;; Return value:  Size  Location     Type
  6148 ;;                  1    wreg      unsigned char 
  6149 ;; Registers used:
  6150 ;;		wreg, status,2
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;Total ram usage:        3 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    5
  6163 ;; This function calls:
  6164 ;;		Nothing
  6165 ;; This function is called by:
  6166 ;;		_setSw_Main
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           
  6171                           ;psect for function _getSw_KeyStatus
  6172  1D45                     _getSw_KeyStatus:	
  6173                           
  6174                           ;Switch_B1.c: 238: char status = 0;
  6175                           
  6176                           ;incstack = 0
  6177                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6178  1D45  0020               	movlb	0	; select bank0
  6179  1D46  01A1               	clrf	getSw_KeyStatus@status
  6180                           
  6181                           ;Switch_B1.c: 258: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6182  1D47  01A2               	clrf	_getSw_KeyStatus$5851
  6183  1D48  0AA2               	incf	_getSw_KeyStatus$5851,f
  6184  1D49  1F0C               	btfss	12,6	;volatile
  6185  1D4A  1A0C               	btfsc	12,4	;volatile
  6186  1D4B  2D50               	goto	l6762
  6187  1D4C  1C0C               	btfss	12,0	;volatile
  6188  1D4D  1B8C               	btfsc	12,7	;volatile
  6189  1D4E  2D50               	goto	l6762
  6190  1D4F  01A2               	clrf	_getSw_KeyStatus$5851
  6191  1D50                     l6762:	
  6192  1D50  0822               	movf	_getSw_KeyStatus$5851,w
  6193  1D51  00A0               	movwf	??_getSw_KeyStatus
  6194  1D52  0820               	movf	??_getSw_KeyStatus,w
  6195  1D53  00A1               	movwf	getSw_KeyStatus@status
  6196                           
  6197                           ;Switch_B1.c: 261: return status;
  6198  1D54  0821               	movf	getSw_KeyStatus@status,w
  6199  1D55  0008               	return
  6200  1D56                     __end_of_getSw_KeyStatus:	
  6201                           
  6202                           	psect	text17
  6203  1C46                     __ptext17:	
  6204 ;; *************** function _SwPointSelect *****************
  6205 ;; Defined at:
  6206 ;;		line 25 in file "../src/Switch_B1.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;  sw              1    wreg     unsigned char 
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;  sw              1    1[BANK0 ] unsigned char 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;		None               void
  6213 ;; Registers used:
  6214 ;;		wreg
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;Total ram usage:        2 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    5
  6227 ;; This function calls:
  6228 ;;		Nothing
  6229 ;; This function is called by:
  6230 ;;		_setSw_Main
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234                           
  6235                           ;psect for function _SwPointSelect
  6236  1C46                     _SwPointSelect:	
  6237                           
  6238                           ;incstack = 0
  6239                           ; Regs used in _SwPointSelect: [wreg]
  6240                           ;SwPointSelect@sw stored from wreg
  6241  1C46  0020               	movlb	0	; select bank0
  6242  1C47  00A1               	movwf	SwPointSelect@sw
  6243                           
  6244                           ;Switch_B1.c: 28: if (sw == 1) {
  6245  1C48  0821               	movf	SwPointSelect@sw,w
  6246  1C49  3A01               	xorlw	1
  6247  1C4A  1D03               	skipz
  6248  1C4B  0008               	return
  6249                           
  6250                           ;Switch_B1.c: 29: Sw = &Sw1;
  6251  1C4C  30D4               	movlw	_Sw1& (0+255)
  6252  1C4D  00A0               	movwf	??_SwPointSelect
  6253  1C4E  0820               	movf	??_SwPointSelect,w
  6254  1C4F  00FC               	movwf	_Sw
  6255  1C50  0008               	return
  6256  1C51                     __end_of_SwPointSelect:	
  6257                           
  6258                           	psect	text18
  6259  17A4                     __ptext18:	
  6260 ;; *************** function _setMain_Exception *****************
  6261 ;; Defined at:
  6262 ;;		line 289 in file "../src/Main_B1.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;  command         1    wreg     unsigned char 
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;  command         1   28[BANK0 ] unsigned char 
  6267 ;;  status          1   27[BANK0 ] unsigned char 
  6268 ;;  buz             1   24[BANK0 ] unsigned char 
  6269 ;; Return value:  Size  Location     Type
  6270 ;;		None               void
  6271 ;; Registers used:
  6272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6279 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6280 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6281 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;Total ram usage:        7 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:   10
  6285 ;; This function calls:
  6286 ;;		_getDimmerLights_Line
  6287 ;;		_getMain_LightsStatus
  6288 ;;		_setBuz
  6289 ;;		_setDimmerLights_ErrorClose
  6290 ;;		_setLED
  6291 ;; This function is called by:
  6292 ;;		_Switch_Main
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function _setMain_Exception
  6298  17A4                     _setMain_Exception:	
  6299                           
  6300                           ;incstack = 0
  6301                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6302                           ;setMain_Exception@command stored from wreg
  6303  17A4  0020               	movlb	0	; select bank0
  6304  17A5  00BC               	movwf	setMain_Exception@command
  6305                           
  6306                           ;Main_B1.c: 290: char status = 0, buz = 0;
  6307  17A6  01BB               	clrf	setMain_Exception@status
  6308  17A7  01B8               	clrf	setMain_Exception@buz
  6309                           
  6310                           ;Main_B1.c: 333: status = command == 3 ? getDimmerLights_Line() : 255;
  6311  17A8  083C               	movf	setMain_Exception@command,w
  6312  17A9  3A03               	xorlw	3
  6313  17AA  1903               	skipnz
  6314  17AB  2FB0               	goto	l7092
  6315  17AC  30FF               	movlw	255
  6316  17AD  00B9               	movwf	_setMain_Exception$3322
  6317  17AE  3000               	movlw	0
  6318  17AF  2FB9               	goto	L3
  6319  17B0                     l7092:	
  6320  17B0  319C  243B  3197   	fcall	_getDimmerLights_Line
  6321  17B3  0020               	movlb	0	; select bank0
  6322  17B4  00B6               	movwf	??_setMain_Exception
  6323  17B5  01B7               	clrf	??_setMain_Exception+1
  6324  17B6  0836               	movf	??_setMain_Exception,w
  6325  17B7  00B9               	movwf	_setMain_Exception$3322
  6326  17B8  0837               	movf	??_setMain_Exception+1,w
  6327  17B9                     L3:	
  6328  17B9  00BA               	movwf	_setMain_Exception$3322+1
  6329  17BA  0839               	movf	_setMain_Exception$3322,w
  6330  17BB  00B6               	movwf	??_setMain_Exception
  6331  17BC  0836               	movf	??_setMain_Exception,w
  6332  17BD  00BB               	movwf	setMain_Exception@status
  6333                           
  6334                           ;Main_B1.c: 335: if (command == 0) {
  6335  17BE  08BC               	movf	setMain_Exception@command,f
  6336  17BF  1D03               	skipz
  6337  17C0  2FC3               	goto	l7100
  6338                           
  6339                           ;Main_B1.c: 336: setLED(99, 10);
  6340  17C1  300A               	movlw	10
  6341  17C2  2FC5               	goto	L4
  6342  17C3                     l7100:	
  6343                           ;Main_B1.c: 337: } else {
  6344                           
  6345                           
  6346                           ;Main_B1.c: 338: setLED(99, 11);
  6347  17C3  300B               	movlw	11
  6348  17C4  0020               	movlb	0	; select bank0
  6349  17C5                     L4:	
  6350  17C5  00B6               	movwf	??_setMain_Exception
  6351  17C6  0836               	movf	??_setMain_Exception,w
  6352  17C7  00A2               	movwf	setLED@command
  6353  17C8  3063               	movlw	99
  6354  17C9  3192  226D  3197   	fcall	_setLED
  6355                           
  6356                           ;Main_B1.c: 339: }
  6357                           ;Main_B1.c: 341: if (command != 0) {
  6358  17CC  0020               	movlb	0	; select bank0
  6359  17CD  083C               	movf	setMain_Exception@command,w
  6360  17CE  1903               	btfsc	3,2
  6361  17CF  0008               	return
  6362                           
  6363                           ;Main_B1.c: 342: switch (command) {
  6364  17D0  2FF1               	goto	l7116
  6365  17D1                     l7106:	
  6366                           ;Main_B1.c: 343: case 2:
  6367                           
  6368                           
  6369                           ;Main_B1.c: 344: if (getMain_LightsStatus() == 1) {
  6370  17D1  3191  2116  3197   	fcall	_getMain_LightsStatus
  6371  17D4  3A01               	xorlw	1
  6372  17D5  1D03               	skipz
  6373  17D6  2FFA               	goto	l7118
  6374                           
  6375                           ;Main_B1.c: 345: setBuz(10, 300);
  6376  17D7  302C               	movlw	44
  6377  17D8  0020               	movlb	0	; select bank0
  6378  17D9  00A9               	movwf	setBuz@time
  6379  17DA  3001               	movlw	1
  6380  17DB  00AA               	movwf	setBuz@time+1
  6381  17DC  300A               	movlw	10
  6382  17DD  3196  2694  3197   	fcall	_setBuz
  6383                           
  6384                           ;Main_B1.c: 346: }
  6385                           ;Main_B1.c: 347: break;
  6386  17E0  2FFA               	goto	l7118
  6387  17E1                     l7110:	
  6388                           ;Main_B1.c: 348: case 3:
  6389                           
  6390                           
  6391                           ;Main_B1.c: 349: if (getMain_LightsStatus() == 1) {
  6392  17E1  3191  2116  3197   	fcall	_getMain_LightsStatus
  6393  17E4  3A01               	xorlw	1
  6394  17E5  1D03               	skipz
  6395  17E6  2FFA               	goto	l7118
  6396                           
  6397                           ;Main_B1.c: 350: setBuz(5, 300);
  6398  17E7  302C               	movlw	44
  6399  17E8  0020               	movlb	0	; select bank0
  6400  17E9  00A9               	movwf	setBuz@time
  6401  17EA  3001               	movlw	1
  6402  17EB  00AA               	movwf	setBuz@time+1
  6403  17EC  3005               	movlw	5
  6404  17ED  3196  2694  3197   	fcall	_setBuz
  6405                           
  6406                           ;Main_B1.c: 353: }
  6407                           
  6408                           ;Main_B1.c: 351: }
  6409                           ;Main_B1.c: 352: break;
  6410  17F0  2FFA               	goto	l7118
  6411  17F1                     l7116:	
  6412  17F1  0020               	movlb	0	; select bank0
  6413  17F2  083C               	movf	setMain_Exception@command,w
  6414                           
  6415                           ; Switch size 1, requested type "space"
  6416                           ; Number of cases is 2, Range of values is 2 to 3
  6417                           ; switch strategies available:
  6418                           ; Name         Instructions Cycles
  6419                           ; simple_byte            7     4 (average)
  6420                           ; direct_byte           13     9 (fixed)
  6421                           ; jumptable            263     9 (fixed)
  6422                           ;	Chosen strategy is simple_byte
  6423  17F3  3A02               	xorlw	2	; case 2
  6424  17F4  1903               	skipnz
  6425  17F5  2FD1               	goto	l7106
  6426  17F6  3A01               	xorlw	1	; case 3
  6427  17F7  1903               	skipnz
  6428  17F8  2FE1               	goto	l7110
  6429  17F9  2FFA               	goto	l7118
  6430  17FA                     l7118:	
  6431                           
  6432                           ;Main_B1.c: 354: setDimmerLights_ErrorClose(status);
  6433  17FA  0020               	movlb	0	; select bank0
  6434  17FB  083B               	movf	setMain_Exception@status,w
  6435  17FC  3196  263C         	fcall	_setDimmerLights_ErrorClose
  6436  17FE  0020               	movlb	0	; select bank0
  6437  17FF  0008               	return
  6438  1800                     __end_of_setMain_Exception:	
  6439                           
  6440                           	psect	text19
  6441  1C3B                     __ptext19:	
  6442 ;; *************** function _getDimmerLights_Line *****************
  6443 ;; Defined at:
  6444 ;;		line 695 in file "../src/Dimmer_B1.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;		None
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  line            1    0[BANK0 ] unsigned char 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  1    wreg      unsigned char 
  6451 ;; Registers used:
  6452 ;;		wreg, status,2
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;Total ram usage:        1 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    5
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_setMain_Exception
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           
  6473                           ;psect for function _getDimmerLights_Line
  6474  1C3B                     _getDimmerLights_Line:	
  6475                           
  6476                           ;Dimmer_B1.c: 696: char line = 0;
  6477                           
  6478                           ;incstack = 0
  6479                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6480  1C3B  0020               	movlb	0	; select bank0
  6481  1C3C  01A0               	clrf	getDimmerLights_Line@line
  6482                           
  6483                           ;Dimmer_B1.c: 698: if (DimmerLights1.Line == 1) {
  6484  1C3D  0023               	movlb	3	; select bank3
  6485  1C3E  1C4E               	btfss	(_DimmerLights1^(0+384)+9),0
  6486  1C3F  2C43               	goto	l6586
  6487                           
  6488                           ;Dimmer_B1.c: 699: line = 1;
  6489  1C40  0020               	movlb	0	; select bank0
  6490  1C41  01A0               	clrf	getDimmerLights_Line@line
  6491  1C42  0AA0               	incf	getDimmerLights_Line@line,f
  6492  1C43                     l6586:	
  6493                           
  6494                           ;Dimmer_B1.c: 700: }
  6495                           ;Dimmer_B1.c: 712: return line;
  6496  1C43  0020               	movlb	0	; select bank0
  6497  1C44  0820               	movf	getDimmerLights_Line@line,w
  6498  1C45  0008               	return
  6499  1C46                     __end_of_getDimmerLights_Line:	
  6500                           
  6501                           	psect	text20
  6502  1BDC                     __ptext20:	
  6503 ;; *************** function _Switch_Initialization *****************
  6504 ;; Defined at:
  6505 ;;		line 46 in file "../src/Switch_B1.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;		None
  6510 ;; Return value:  Size  Location     Type
  6511 ;;		None               void
  6512 ;; Registers used:
  6513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;Total ram usage:        0 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    8
  6526 ;; This function calls:
  6527 ;;		_TouchPower
  6528 ;;		_setSw_Initialization
  6529 ;; This function is called by:
  6530 ;;		_main
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function _Switch_Initialization
  6536  1BDC                     _Switch_Initialization:	
  6537                           
  6538                           ;Switch_B1.c: 47: TouchPower();
  6539                           
  6540                           ;incstack = 0
  6541                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6542  1BDC  319E  2604  319B   	fcall	_TouchPower
  6543                           
  6544                           ;Switch_B1.c: 49: WPUB1 = 0;
  6545  1BDF  0024               	movlb	4	; select bank4
  6546  1BE0  108D               	bcf	13,1	;volatile
  6547                           
  6548                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6549  1BE1  3001               	movlw	1
  6550  1BE2  319D  2502         	fcall	_setSw_Initialization
  6551  1BE4  0008               	return
  6552  1BE5                     __end_of_Switch_Initialization:	
  6553                           
  6554                           	psect	text21
  6555  1D02                     __ptext21:	
  6556 ;; *************** function _setSw_Initialization *****************
  6557 ;; Defined at:
  6558 ;;		line 109 in file "../src/Switch_B1.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  sw              1    wreg     unsigned char 
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;  sw              1    4[BANK0 ] unsigned char 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;		None               void
  6565 ;; Registers used:
  6566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;Total ram usage:        1 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    7
  6579 ;; This function calls:
  6580 ;;		_setLED
  6581 ;; This function is called by:
  6582 ;;		_Switch_Initialization
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           
  6587                           ;psect for function _setSw_Initialization
  6588  1D02                     _setSw_Initialization:	
  6589                           
  6590                           ;incstack = 0
  6591                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6592                           ;setSw_Initialization@sw stored from wreg
  6593  1D02  0020               	movlb	0	; select bank0
  6594  1D03  00A4               	movwf	setSw_Initialization@sw
  6595                           
  6596                           ;Switch_B1.c: 110: setLED(sw, 1);
  6597  1D04  01A2               	clrf	setLED@command
  6598  1D05  0AA2               	incf	setLED@command,f
  6599  1D06  0824               	movf	setSw_Initialization@sw,w
  6600  1D07  3192  226D  319D   	fcall	_setLED
  6601                           
  6602                           ;Switch_B1.c: 112: setLED(sw + 1, 1);
  6603  1D0A  0020               	movlb	0	; select bank0
  6604  1D0B  01A2               	clrf	setLED@command
  6605  1D0C  0AA2               	incf	setLED@command,f
  6606  1D0D  0824               	movf	setSw_Initialization@sw,w
  6607  1D0E  3E01               	addlw	1
  6608  1D0F  3192  226D         	fcall	_setLED
  6609  1D11  0008               	return
  6610  1D12                     __end_of_setSw_Initialization:	
  6611                           
  6612                           	psect	text22
  6613  1E04                     __ptext22:	
  6614 ;; *************** function _TouchPower *****************
  6615 ;; Defined at:
  6616 ;;		line 10 in file "../src/Switch_B1.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;		None               void
  6623 ;; Registers used:
  6624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    6
  6637 ;; This function calls:
  6638 ;;		_Timeout_Counter
  6639 ;;		_set_TimeoutCleared
  6640 ;; This function is called by:
  6641 ;;		_Switch_Initialization
  6642 ;;		_Switch_Main
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _TouchPower
  6648  1E04                     _TouchPower:	
  6649                           
  6650                           ;Switch_B1.c: 11: if (RB0 == 0) {
  6651                           
  6652                           ;incstack = 0
  6653                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6654  1E04  0020               	movlb	0	; select bank0
  6655  1E05  180D               	btfsc	13,0	;volatile
  6656  1E06  0008               	return
  6657                           
  6658                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6659  1E07  0021               	movlb	1	; select bank1
  6660  1E08  1C20               	btfss	_myMain^(0+128),0
  6661  1E09  0008               	return
  6662  1E0A  2E10               	goto	l7324
  6663  1E0B                     l2377:	
  6664                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6665                           
  6666                           
  6667                           ;Switch_B1.c: 14: RB0 = 1;
  6668  1E0B  0020               	movlb	0	; select bank0
  6669  1E0C  140D               	bsf	13,0	;volatile
  6670                           
  6671                           ;Switch_B1.c: 15: Timeout_Counter();
  6672  1E0D  319D  25DA  319E   	fcall	_Timeout_Counter
  6673  1E10                     l7324:	
  6674  1E10  0020               	movlb	0	; select bank0
  6675  1E11  180D               	btfsc	13,0	;volatile
  6676  1E12  2E16               	goto	l7328
  6677  1E13  0021               	movlb	1	; select bank1
  6678  1E14  1D2B               	btfss	(_myMain^(0+128)+11),2
  6679  1E15  2E0B               	goto	l2377
  6680  1E16                     l7328:	
  6681                           
  6682                           ;Switch_B1.c: 16: }
  6683                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6684  1E16  319B  2397         	fcall	_set_TimeoutCleared
  6685  1E18  0008               	return
  6686  1E19                     __end_of_TouchPower:	
  6687                           
  6688                           	psect	text23
  6689  1B6A                     __ptext23:	
  6690 ;; *************** function _RF_Main *****************
  6691 ;; Defined at:
  6692 ;;		line 16 in file "../src/RF_Control_B1.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;		None               void
  6699 ;; Registers used:
  6700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:   14
  6713 ;; This function calls:
  6714 ;;		_setRF_Main
  6715 ;; This function is called by:
  6716 ;;		_main
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           
  6721                           ;psect for function _RF_Main
  6722  1B6A                     _RF_Main:	
  6723                           
  6724                           ;RF_Control_B1.c: 18: setRF_Main();
  6725                           
  6726                           ;incstack = 0
  6727                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6728  1B6A  3185  256B         	fcall	_setRF_Main
  6729  1B6C  0008               	return
  6730  1B6D                     __end_of_RF_Main:	
  6731                           
  6732                           	psect	text24
  6733  056B                     __ptext24:	
  6734 ;; *************** function _setRF_Main *****************
  6735 ;; Defined at:
  6736 ;;		line 52 in file "../src/RF_Control_B1.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;		None
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  error           1    2[BANK1 ] unsigned char 
  6741 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6742 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6743 ;; Return value:  Size  Location     Type
  6744 ;;		None               void
  6745 ;; Registers used:
  6746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6747 ;; Tracked objects:
  6748 ;;		On entry : 0/0
  6749 ;;		On exit  : 0/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6755 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6756 ;;Total ram usage:        4 bytes
  6757 ;; Hardware stack levels used:    1
  6758 ;; Hardware stack levels required when called:   13
  6759 ;; This function calls:
  6760 ;;		_CC2500_RxData
  6761 ;;		_CC2500_TxData
  6762 ;;		_CC2500_WriteCommand
  6763 ;;		_RF_RxDisable
  6764 ;;		_getBuz_GO
  6765 ;;		_getMain_All_Error_Status
  6766 ;;		_getRF_KeyStatus
  6767 ;;		_getRxData
  6768 ;; This function is called by:
  6769 ;;		_RF_Main
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           
  6774                           ;psect for function _setRF_Main
  6775  056B                     _setRF_Main:	
  6776                           
  6777                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6778                           
  6779                           ;incstack = 0
  6780                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6781  056B  0021               	movlb	1	; select bank1
  6782  056C  01E9               	clrf	setRF_Main@loop_f^(0+128)
  6783  056D  01EA               	clrf	setRF_Main@Receive_OK^(0+128)
  6784  056E  01EB               	clrf	setRF_Main@error^(0+128)
  6785                           
  6786                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6787  056F  1C3A               	btfss	_RF1^(0+128),0
  6788  0570  2E46               	goto	l2012
  6789                           
  6790                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6791  0571  319D  2523  3185   	fcall	_getBuz_GO
  6792  0574  0020               	movlb	0	; select bank0
  6793  0575  0821               	movf	?_getBuz_GO+1,w
  6794  0576  0420               	iorwf	?_getBuz_GO,w
  6795  0577  1D03               	skipz
  6796  0578  0008               	return
  6797                           
  6798                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6799  0579  3000               	movlw	0
  6800  057A  3191  21D2  3185   	fcall	_getMain_All_Error_Status
  6801  057D  3800               	iorlw	0
  6802  057E  1D03               	skipz
  6803  057F  2D94               	goto	l2014
  6804                           
  6805                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6806  0580  319D  2534  3185   	fcall	_getRF_KeyStatus
  6807  0583  3A01               	xorlw	1
  6808  0584  3000               	movlw	0
  6809  0585  1903               	skipnz
  6810  0586  3001               	movlw	1
  6811  0587  0020               	movlb	0	; select bank0
  6812  0588  00ED               	movwf	??_setRF_Main
  6813  0589  0CED               	rrf	??_setRF_Main,f
  6814  058A  0CED               	rrf	??_setRF_Main,f
  6815  058B  0021               	movlb	1	; select bank1
  6816  058C  083A               	movf	_RF1^(0+128),w
  6817  058D  0020               	movlb	0	; select bank0
  6818  058E  066D               	xorwf	??_setRF_Main,w
  6819  058F  397F               	andlw	-129
  6820  0590  066D               	xorwf	??_setRF_Main,w
  6821  0591  0021               	movlb	1	; select bank1
  6822  0592  00BA               	movwf	_RF1^(0+128)
  6823                           
  6824                           ;RF_Control_B1.c: 65: } else {
  6825  0593  2D96               	goto	l2015
  6826  0594                     l2014:	
  6827                           
  6828                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6829  0594  0021               	movlb	1	; select bank1
  6830  0595  13BA               	bcf	_RF1^(0+128),7
  6831  0596                     l2015:	
  6832                           
  6833                           ;RF_Control_B1.c: 70: }
  6834                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6835  0596  1BBA               	btfsc	_RF1^(0+128),7
  6836  0597  1B3A               	btfsc	_RF1^(0+128),6
  6837  0598  2D9E               	goto	l2016
  6838                           
  6839                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6840  0599  01BC               	clrf	(_RF1^(0+128)+2)
  6841  059A  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6842                           
  6843                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6844  059B  14BB               	bsf	(_RF1^(0+128)+1),1
  6845                           
  6846                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6847  059C  11BA               	bcf	_RF1^(0+128),3
  6848                           
  6849                           ;RF_Control_B1.c: 76: } else {
  6850  059D  0008               	return
  6851  059E                     l2016:	
  6852                           
  6853                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6854  059E  18BB               	btfsc	(_RF1^(0+128)+1),1
  6855  059F  1B3A               	btfsc	_RF1^(0+128),6
  6856  05A0  2DB5               	goto	l7242
  6857                           
  6858                           ;RF_Control_B1.c: 78: RF1.Count++;
  6859  05A1  3001               	movlw	1
  6860  05A2  07BC               	addwf	(_RF1^(0+128)+2),f
  6861  05A3  3000               	movlw	0
  6862  05A4  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6863                           
  6864                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6865  05A5  3002               	movlw	2
  6866  05A6  3EBA               	addlw	_RF1& (0+255)
  6867  05A7  0086               	movwf	6
  6868  05A8  0187               	clrf	7
  6869  05A9  3F40               	moviw [0]fsr1
  6870  05AA  0641               	xorwf	(_RF1^(0+128)+7),w
  6871  05AB  1D03               	skipz
  6872  05AC  2DAF               	goto	u6825
  6873  05AD  3F41               	moviw [1]fsr1
  6874  05AE  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6875  05AF                     u6825:	
  6876  05AF  1D03               	skipz
  6877  05B0  2E13               	goto	l7294
  6878                           
  6879                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6880  05B1  01BC               	clrf	(_RF1^(0+128)+2)
  6881  05B2  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6882                           
  6883                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6884  05B3  10BB               	bcf	(_RF1^(0+128)+1),1
  6885                           
  6886                           ;RF_Control_B1.c: 82: }
  6887                           ;RF_Control_B1.c: 83: } else {
  6888  05B4  2E13               	goto	l7294
  6889  05B5                     l7242:	
  6890                           
  6891                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6892  05B5  01BC               	clrf	(_RF1^(0+128)+2)
  6893  05B6  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6894                           
  6895                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6896  05B7  10BB               	bcf	(_RF1^(0+128)+1),1
  6897                           
  6898                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6899  05B8  193A               	btfsc	_RF1^(0+128),2
  6900  05B9  1B3A               	btfsc	_RF1^(0+128),6
  6901  05BA  2DC9               	goto	l2021
  6902                           
  6903                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6904  05BB  113A               	bcf	_RF1^(0+128),2
  6905                           
  6906                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6907  05BC  11BA               	bcf	_RF1^(0+128),3
  6908                           
  6909                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6910  05BD  10BA               	bcf	_RF1^(0+128),1
  6911                           
  6912                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6913  05BE  300A               	movlw	10
  6914  05BF  00C1               	movwf	(_RF1^(0+128)+7)
  6915  05C0  3000               	movlw	0
  6916  05C1  00C2               	movwf	(_RF1^(0+128)+8)
  6917                           
  6918                           ;RF_Control_B1.c: 95: RF_RxDisable();
  6919  05C2  319C  24C3  3185   	fcall	_RF_RxDisable
  6920                           
  6921                           ;RF_Control_B1.c: 102: CC2500_TxData();
  6922  05C5  3189  21D4  3185   	fcall	_CC2500_TxData
  6923                           
  6924                           ;RF_Control_B1.c: 104: } else {
  6925  05C8  2E13               	goto	l7294
  6926  05C9                     l2021:	
  6927                           
  6928                           ;RF_Control_B1.c: 106: if (RF1.RxStatus == 1) {
  6929  05C9  1DBA               	btfss	_RF1^(0+128),3
  6930  05CA  2E02               	goto	l2023
  6931                           
  6932                           ;RF_Control_B1.c: 108: CC2500_RxData();
  6933  05CB  318B  2365  3185   	fcall	_CC2500_RxData
  6934                           
  6935                           ;RF_Control_B1.c: 110: if (RF1.ReceiveGO == 1) {
  6936  05CE  0021               	movlb	1	; select bank1
  6937  05CF  1CBA               	btfss	_RF1^(0+128),1
  6938  05D0  2E13               	goto	l7294
  6939                           
  6940                           ;RF_Control_B1.c: 111: RF1.ReceiveGO = 0;
  6941  05D1  10BA               	bcf	_RF1^(0+128),1
  6942                           
  6943                           ;RF_Control_B1.c: 112: RF1.Correction = 0;
  6944  05D2  12BB               	bcf	(_RF1^(0+128)+1),5
  6945                           
  6946                           ;RF_Control_B1.c: 113: RF1.CorrectionCounter = 0;
  6947  05D3  01C4               	clrf	(_RF1^(0+128)+10)
  6948  05D4  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6949                           
  6950                           ;RF_Control_B1.c: 124: getRxData();
  6951  05D5  318D  2560  3185   	fcall	_getRxData
  6952                           
  6953                           ;RF_Control_B1.c: 125: RF1.Run = 1;
  6954  05D8  0021               	movlb	1	; select bank1
  6955  05D9  14BB               	bsf	(_RF1^(0+128)+1),1
  6956                           
  6957                           ;RF_Control_B1.c: 127: if (RF1.Checked == 1) {
  6958  05DA  1DBB               	btfss	(_RF1^(0+128)+1),3
  6959  05DB  2DE9               	goto	l7278
  6960                           
  6961                           ;RF_Control_B1.c: 128: if (RF1.RunTime > 10) {
  6962  05DC  3000               	movlw	0
  6963  05DD  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6964  05DE  300B               	movlw	11
  6965  05DF  1903               	skipnz
  6966  05E0  0241               	subwf	(_RF1^(0+128)+7),w
  6967  05E1  1C03               	skipc
  6968  05E2  2DE7               	goto	l7276
  6969                           
  6970                           ;RF_Control_B1.c: 129: RF1.RunTime = 10;
  6971  05E3  300A               	movlw	10
  6972  05E4  00C1               	movwf	(_RF1^(0+128)+7)
  6973  05E5  3000               	movlw	0
  6974  05E6  00C2               	movwf	(_RF1^(0+128)+8)
  6975  05E7                     l7276:	
  6976                           
  6977                           ;RF_Control_B1.c: 130: }
  6978                           ;RF_Control_B1.c: 131: RF1.CheckCount = 0;
  6979  05E7  01BE               	clrf	(_RF1^(0+128)+4)
  6980                           
  6981                           ;RF_Control_B1.c: 132: } else {
  6982  05E8  2E13               	goto	l7294
  6983  05E9                     l7278:	
  6984                           
  6985                           ;RF_Control_B1.c: 133: RF1.CheckCount++;
  6986  05E9  3001               	movlw	1
  6987  05EA  0020               	movlb	0	; select bank0
  6988  05EB  00ED               	movwf	??_setRF_Main
  6989  05EC  086D               	movf	??_setRF_Main,w
  6990  05ED  0021               	movlb	1	; select bank1
  6991  05EE  07BE               	addwf	(_RF1^(0+128)+4),f
  6992                           
  6993                           ;RF_Control_B1.c: 134: if (RF1.CheckCount == 2) {
  6994  05EF  083E               	movf	(_RF1^(0+128)+4),w
  6995  05F0  3A02               	xorlw	2
  6996  05F1  1D03               	skipz
  6997  05F2  2E13               	goto	l7294
  6998                           
  6999                           ;RF_Control_B1.c: 135: RF1.CheckCount = 0;
  7000  05F3  01BE               	clrf	(_RF1^(0+128)+4)
  7001                           
  7002                           ;RF_Control_B1.c: 136: RF1.CheckedCounter = 0;
  7003  05F4  01BF               	clrf	(_RF1^(0+128)+5)
  7004  05F5  01C0               	clrf	((_RF1+1)^(0+128)+5)
  7005                           
  7006                           ;RF_Control_B1.c: 137: if (RF1.RunTime < 200) {
  7007  05F6  3000               	movlw	0
  7008  05F7  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7009  05F8  30C8               	movlw	200
  7010  05F9  1903               	skipnz
  7011  05FA  0241               	subwf	(_RF1^(0+128)+7),w
  7012  05FB  1803               	skipnc
  7013  05FC  2E13               	goto	l7294
  7014                           
  7015                           ;RF_Control_B1.c: 138: RF1.RunTime += 10;
  7016  05FD  300A               	movlw	10
  7017  05FE  07C1               	addwf	(_RF1^(0+128)+7),f
  7018  05FF  3000               	movlw	0
  7019  0600  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  7020                           
  7021                           ;RF_Control_B1.c: 139: }
  7022                           ;RF_Control_B1.c: 140: }
  7023                           ;RF_Control_B1.c: 141: }
  7024                           ;RF_Control_B1.c: 142: }
  7025                           ;RF_Control_B1.c: 143: } else {
  7026  0601  2E13               	goto	l7294
  7027  0602                     l2023:	
  7028                           
  7029                           ;RF_Control_B1.c: 145: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7030  0602  1DBA               	btfss	_RF1^(0+128),3
  7031  0603  18BA               	btfsc	_RF1^(0+128),1
  7032  0604  2E13               	goto	l7294
  7033                           
  7034                           ;RF_Control_B1.c: 146: RF1.RxStatus = 1;
  7035  0605  15BA               	bsf	_RF1^(0+128),3
  7036                           
  7037                           ;RF_Control_B1.c: 147: RF1.Correction = 1;
  7038  0606  16BB               	bsf	(_RF1^(0+128)+1),5
  7039                           
  7040                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x36);
  7041  0607  3036               	movlw	54
  7042  0608  319E  2648  3185   	fcall	_CC2500_WriteCommand
  7043                           
  7044                           ;RF_Control_B1.c: 151: CC2500_WriteCommand(0x3A);
  7045  060B  303A               	movlw	58
  7046  060C  319E  2648  3185   	fcall	_CC2500_WriteCommand
  7047                           
  7048                           ;RF_Control_B1.c: 152: CC2500_WriteCommand(0x34);
  7049  060F  3034               	movlw	52
  7050  0610  319E  2648  3185   	fcall	_CC2500_WriteCommand
  7051  0613                     l7294:	
  7052                           
  7053                           ;RF_Control_B1.c: 153: }
  7054                           ;RF_Control_B1.c: 155: }
  7055                           ;RF_Control_B1.c: 156: }
  7056                           ;RF_Control_B1.c: 157: }
  7057                           ;RF_Control_B1.c: 158: if (RF1.RxStatus == 1) {
  7058  0613  0021               	movlb	1	; select bank1
  7059  0614  1DBA               	btfss	_RF1^(0+128),3
  7060  0615  2E34               	goto	l7306
  7061                           
  7062                           ;RF_Control_B1.c: 159: RF1.CheckedCounter++;
  7063  0616  3001               	movlw	1
  7064  0617  07BF               	addwf	(_RF1^(0+128)+5),f
  7065  0618  3000               	movlw	0
  7066  0619  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  7067                           
  7068                           ;RF_Control_B1.c: 160: if (RF1.CheckedCounter == 100) {
  7069  061A  3005               	movlw	5
  7070  061B  3EBA               	addlw	_RF1& (0+255)
  7071  061C  0086               	movwf	6
  7072  061D  0187               	clrf	7
  7073  061E  3F40               	moviw [0]fsr1
  7074  061F  3A64               	xorlw	100
  7075  0620  1D03               	skipz
  7076  0621  2E24               	goto	u6945
  7077  0622  3F41               	moviw [1]fsr1
  7078  0623  3A00               	xorlw	0
  7079  0624                     u6945:	
  7080  0624  1D03               	skipz
  7081  0625  2E34               	goto	l7306
  7082                           
  7083                           ;RF_Control_B1.c: 161: RF1.CheckedCounter = 0;
  7084  0626  01BF               	clrf	(_RF1^(0+128)+5)
  7085  0627  01C0               	clrf	((_RF1+1)^(0+128)+5)
  7086                           
  7087                           ;RF_Control_B1.c: 162: RF1.CheckCount = 0;
  7088  0628  01BE               	clrf	(_RF1^(0+128)+4)
  7089                           
  7090                           ;RF_Control_B1.c: 163: if (RF1.RunTime > 10) {
  7091  0629  3000               	movlw	0
  7092  062A  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7093  062B  300B               	movlw	11
  7094  062C  1903               	skipnz
  7095  062D  0241               	subwf	(_RF1^(0+128)+7),w
  7096  062E  1C03               	skipc
  7097  062F  2E34               	goto	l7306
  7098                           
  7099                           ;RF_Control_B1.c: 164: RF1.RunTime -= 10;
  7100  0630  300A               	movlw	10
  7101  0631  02C1               	subwf	(_RF1^(0+128)+7),f
  7102  0632  3000               	movlw	0
  7103  0633  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  7104  0634                     l7306:	
  7105                           
  7106                           ;RF_Control_B1.c: 165: }
  7107                           ;RF_Control_B1.c: 166: }
  7108                           ;RF_Control_B1.c: 167: }
  7109                           ;RF_Control_B1.c: 168: if (RF1.Correction == 1) {
  7110  0634  1EBB               	btfss	(_RF1^(0+128)+1),5
  7111  0635  0008               	return
  7112                           
  7113                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter++;
  7114  0636  3001               	movlw	1
  7115  0637  07C4               	addwf	(_RF1^(0+128)+10),f
  7116  0638  3000               	movlw	0
  7117  0639  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  7118                           
  7119                           ;RF_Control_B1.c: 170: if (RF1.CorrectionCounter >= 6000) {
  7120  063A  3017               	movlw	23
  7121  063B  0245               	subwf	((_RF1+1)^(0+128)+10),w
  7122  063C  3070               	movlw	112
  7123  063D  1903               	skipnz
  7124  063E  0244               	subwf	(_RF1^(0+128)+10),w
  7125  063F  1C03               	skipc
  7126  0640  0008               	return
  7127                           
  7128                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter = 0;
  7129  0641  01C4               	clrf	(_RF1^(0+128)+10)
  7130  0642  01C5               	clrf	((_RF1+1)^(0+128)+10)
  7131                           
  7132                           ;RF_Control_B1.c: 172: RF_RxDisable();
  7133  0643  319C  24C3         	fcall	_RF_RxDisable
  7134                           
  7135                           ;RF_Control_B1.c: 173: }
  7136                           ;RF_Control_B1.c: 174: }
  7137                           ;RF_Control_B1.c: 175: }
  7138                           ;RF_Control_B1.c: 176: }
  7139                           ;RF_Control_B1.c: 183: } else {
  7140  0645  0008               	return
  7141  0646                     l2012:	
  7142                           
  7143                           ;RF_Control_B1.c: 184: if (myMain.PowerON == 1) {
  7144  0646  1C20               	btfss	_myMain^(0+128),0
  7145  0647  0008               	return
  7146                           
  7147                           ;RF_Control_B1.c: 185: RF1.Enable = 1;
  7148  0648  143A               	bsf	_RF1^(0+128),0
  7149  0649  0008               	return
  7150  064A                     __end_of_setRF_Main:	
  7151                           
  7152                           	psect	text25
  7153  0D60                     __ptext25:	
  7154 ;; *************** function _getRxData *****************
  7155 ;; Defined at:
  7156 ;;		line 279 in file "../src/RF_Control_B1.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;		None
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  error           1   76[BANK0 ] unsigned char 
  7161 ;; Return value:  Size  Location     Type
  7162 ;;		None               void
  7163 ;; Registers used:
  7164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7174 ;;Total ram usage:        2 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:   12
  7177 ;; This function calls:
  7178 ;;		_getMain_All_Error_Status
  7179 ;;		_setControl_Lights_Table
  7180 ;;		_setLog_Code
  7181 ;;		_setTxData
  7182 ;; This function is called by:
  7183 ;;		_setRF_Main
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           
  7188                           ;psect for function _getRxData
  7189  0D60                     _getRxData:	
  7190                           
  7191                           ;RF_Control_B1.c: 280: char error = getMain_All_Error_Status(0);
  7192                           
  7193                           ;incstack = 0
  7194                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7195  0D60  3000               	movlw	0
  7196  0D61  3191  21D2  318D   	fcall	_getMain_All_Error_Status
  7197  0D64  0020               	movlb	0	; select bank0
  7198  0D65  00EB               	movwf	??_getRxData
  7199  0D66  086B               	movf	??_getRxData,w
  7200  0D67  00EC               	movwf	getRxData@error
  7201                           
  7202                           ;RF_Control_B1.c: 281: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7203  0D68  0022               	movlb	2	; select bank2
  7204  0D69  0820               	movf	_RF_Data^(0+256),w
  7205  0D6A  3AAA               	xorlw	170
  7206  0D6B  1D03               	skipz
  7207  0D6C  2D83               	goto	l6698
  7208  0D6D  0821               	movf	(_RF_Data^(0+256)+1),w
  7209  0D6E  3A01               	xorlw	1
  7210  0D6F  1D03               	skipz
  7211  0D70  2D83               	goto	l6698
  7212                           
  7213                           ;RF_Control_B1.c: 283: product->Data[2] = 0x55;
  7214  0D71  3055               	movlw	85
  7215  0D72  0020               	movlb	0	; select bank0
  7216  0D73  00EB               	movwf	??_getRxData
  7217  0D74  086E               	movf	_product,w
  7218  0D75  3E02               	addlw	2
  7219  0D76  0086               	movwf	6
  7220  0D77  3002               	movlw	2	; select bank4/5
  7221  0D78  0087               	movwf	7
  7222  0D79  086B               	movf	??_getRxData,w
  7223  0D7A  0081               	movwf	1
  7224                           
  7225                           ;RF_Control_B1.c: 284: setTxData();
  7226  0D7B  3187  2726         	fcall	_setTxData
  7227                           
  7228                           ;RF_Control_B1.c: 285: RF1.RunTime = 10;
  7229  0D7D  300A               	movlw	10
  7230  0D7E  0021               	movlb	1	; select bank1
  7231  0D7F  00C1               	movwf	(_RF1^(0+128)+7)
  7232  0D80  3000               	movlw	0
  7233  0D81  00C2               	movwf	(_RF1^(0+128)+8)
  7234                           
  7235                           ;RF_Control_B1.c: 291: } else {
  7236  0D82  0008               	return
  7237  0D83                     l6698:	
  7238                           
  7239                           ;RF_Control_B1.c: 293: if (error == 0) {
  7240  0D83  0020               	movlb	0	; select bank0
  7241  0D84  08EC               	movf	getRxData@error,f
  7242  0D85  1D03               	skipz
  7243  0D86  0008               	return
  7244                           
  7245                           ;RF_Control_B1.c: 294: if (RF1.Learn == 1) {
  7246  0D87  0021               	movlb	1	; select bank1
  7247  0D88  1F3A               	btfss	_RF1^(0+128),6
  7248  0D89  2D9A               	goto	l6710
  7249                           
  7250                           ;RF_Control_B1.c: 295: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7251  0D8A  0022               	movlb	2	; select bank2
  7252  0D8B  08A0               	movf	_RF_Data^(0+256),f
  7253  0D8C  1D03               	skipz
  7254  0D8D  2D97               	goto	l2065
  7255  0D8E  0821               	movf	(_RF_Data^(0+256)+1),w
  7256  0D8F  3A64               	xorlw	100
  7257  0D90  1D03               	skipz
  7258  0D91  2D97               	goto	l2065
  7259                           
  7260                           ;RF_Control_B1.c: 296: setLog_Code();
  7261  0D92  3192  22D9         	fcall	_setLog_Code
  7262                           
  7263                           ;RF_Control_B1.c: 297: RF1.Checked = 1;
  7264  0D94  0021               	movlb	1	; select bank1
  7265  0D95  15BB               	bsf	(_RF1^(0+128)+1),3
  7266                           
  7267                           ;RF_Control_B1.c: 298: } else {
  7268  0D96  0008               	return
  7269  0D97                     l2065:	
  7270                           
  7271                           ;RF_Control_B1.c: 299: RF1.Checked = 0;
  7272  0D97  0021               	movlb	1	; select bank1
  7273  0D98  11BB               	bcf	(_RF1^(0+128)+1),3
  7274                           
  7275                           ;RF_Control_B1.c: 300: }
  7276                           ;RF_Control_B1.c: 301: } else {
  7277  0D99  0008               	return
  7278  0D9A                     l6710:	
  7279                           
  7280                           ;RF_Control_B1.c: 302: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7281  0D9A  0022               	movlb	2	; select bank2
  7282  0D9B  08A0               	movf	_RF_Data^(0+256),f
  7283  0D9C  1D03               	skipz
  7284  0D9D  2DD8               	goto	l6732
  7285  0D9E  0821               	movf	(_RF_Data^(0+256)+1),w
  7286  0D9F  3A02               	xorlw	2
  7287  0DA0  1D03               	skipz
  7288  0DA1  2DD8               	goto	l6732
  7289                           
  7290                           ;RF_Control_B1.c: 304: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7291  0DA2  082C               	movf	(_RF_Data^(0+256)+12),w
  7292  0DA3  3AFF               	xorlw	255
  7293  0DA4  1D03               	skipz
  7294  0DA5  2DB2               	goto	l6722
  7295  0DA6  082D               	movf	(_RF_Data^(0+256)+13),w
  7296  0DA7  3AFF               	xorlw	255
  7297  0DA8  1D03               	skipz
  7298  0DA9  2DB2               	goto	l6722
  7299  0DAA  082E               	movf	(_RF_Data^(0+256)+14),w
  7300  0DAB  3AFF               	xorlw	255
  7301  0DAC  1D03               	skipz
  7302  0DAD  2DB2               	goto	l6722
  7303                           
  7304                           ;RF_Control_B1.c: 305: __nop();
  7305  0DAE  0000               	nop
  7306                           
  7307                           ;RF_Control_B1.c: 306: RF1.Checked = 0;
  7308  0DAF  0021               	movlb	1	; select bank1
  7309  0DB0  11BB               	bcf	(_RF1^(0+128)+1),3
  7310                           
  7311                           ;RF_Control_B1.c: 307: } else {
  7312  0DB1  0008               	return
  7313  0DB2                     l6722:	
  7314                           
  7315                           ;RF_Control_B1.c: 308: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7316  0DB2  0020               	movlb	0	; select bank0
  7317  0DB3  086E               	movf	_product,w
  7318  0DB4  3E0C               	addlw	12
  7319  0DB5  0086               	movwf	6
  7320  0DB6  3002               	movlw	2	; select bank4/5
  7321  0DB7  0087               	movwf	7
  7322  0DB8  0022               	movlb	2	; select bank2
  7323  0DB9  082C               	movf	(_RF_Data^(0+256)+12),w
  7324  0DBA  0601               	xorwf	1,w
  7325  0DBB  1D03               	skipz
  7326  0DBC  0008               	return
  7327  0DBD  0020               	movlb	0	; select bank0
  7328  0DBE  086E               	movf	_product,w
  7329  0DBF  3E0D               	addlw	13
  7330  0DC0  0086               	movwf	6
  7331  0DC1  3002               	movlw	2	; select bank4/5
  7332  0DC2  0087               	movwf	7
  7333  0DC3  0022               	movlb	2	; select bank2
  7334  0DC4  082D               	movf	(_RF_Data^(0+256)+13),w
  7335  0DC5  0601               	xorwf	1,w
  7336  0DC6  1D03               	skipz
  7337  0DC7  0008               	return
  7338  0DC8  0020               	movlb	0	; select bank0
  7339  0DC9  086E               	movf	_product,w
  7340  0DCA  3E0E               	addlw	14
  7341  0DCB  0086               	movwf	6
  7342  0DCC  3002               	movlw	2	; select bank4/5
  7343  0DCD  0087               	movwf	7
  7344  0DCE  0022               	movlb	2	; select bank2
  7345  0DCF  082E               	movf	(_RF_Data^(0+256)+14),w
  7346  0DD0  0601               	xorwf	1,w
  7347  0DD1  1D03               	skipz
  7348  0DD2  0008               	return
  7349                           
  7350                           ;RF_Control_B1.c: 309: setControl_Lights_Table();
  7351  0DD3  3189  2113         	fcall	_setControl_Lights_Table
  7352                           
  7353                           ;RF_Control_B1.c: 310: RF1.Checked = 1;
  7354  0DD5  0021               	movlb	1	; select bank1
  7355  0DD6  15BB               	bsf	(_RF1^(0+128)+1),3
  7356                           
  7357                           ;RF_Control_B1.c: 311: }
  7358                           ;RF_Control_B1.c: 312: }
  7359                           ;RF_Control_B1.c: 313: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7360  0DD7  0008               	return
  7361  0DD8                     l6732:	
  7362  0DD8  0022               	movlb	2	; select bank2
  7363  0DD9  0820               	movf	_RF_Data^(0+256),w
  7364  0DDA  3AFF               	xorlw	255
  7365  0DDB  1D03               	skipz
  7366  0DDC  2DE3               	goto	l6738
  7367  0DDD  0821               	movf	(_RF_Data^(0+256)+1),w
  7368  0DDE  3A02               	xorlw	2
  7369  0DDF  1D03               	skipz
  7370  0DE0  2DE3               	goto	l6738
  7371                           
  7372                           ;RF_Control_B1.c: 314: __nop();
  7373  0DE1  0000               	nop
  7374                           
  7375                           ;RF_Control_B1.c: 315: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7376  0DE2  0008               	return
  7377  0DE3                     l6738:	
  7378  0DE3  0022               	movlb	2	; select bank2
  7379  0DE4  08A0               	movf	_RF_Data^(0+256),f
  7380  0DE5  1D03               	skipz
  7381  0DE6  2DED               	goto	l2075
  7382  0DE7  0821               	movf	(_RF_Data^(0+256)+1),w
  7383  0DE8  3A65               	xorlw	101
  7384  0DE9  1D03               	skipz
  7385  0DEA  2DED               	goto	l2075
  7386                           
  7387                           ;RF_Control_B1.c: 316: __nop();
  7388  0DEB  0000               	nop
  7389                           
  7390                           ;RF_Control_B1.c: 317: } else {
  7391  0DEC  0008               	return
  7392  0DED                     l2075:	
  7393                           
  7394                           ;RF_Control_B1.c: 318: RF1.Checked = 0;
  7395  0DED  0021               	movlb	1	; select bank1
  7396  0DEE  11BB               	bcf	(_RF1^(0+128)+1),3
  7397                           
  7398                           ;RF_Control_B1.c: 326: ;
  7399                           
  7400                           ;RF_Control_B1.c: 319: }
  7401                           ;RF_Control_B1.c: 324: }
  7402                           ;RF_Control_B1.c: 325: } else {
  7403  0DEF  0008               	return
  7404  0DF0                     __end_of_getRxData:	
  7405                           
  7406                           	psect	text26
  7407  12D9                     __ptext26:	
  7408 ;; *************** function _setLog_Code *****************
  7409 ;; Defined at:
  7410 ;;		line 332 in file "../src/RF_Control_B1.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;		None
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;		None
  7415 ;; Return value:  Size  Location     Type
  7416 ;;		None               void
  7417 ;; Registers used:
  7418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;Total ram usage:        1 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    7
  7431 ;; This function calls:
  7432 ;;		_setBuz
  7433 ;;		_setMemory_LoopSave
  7434 ;;		_setMemory_Modify
  7435 ;; This function is called by:
  7436 ;;		_getRxData
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           
  7441                           ;psect for function _setLog_Code
  7442  12D9                     _setLog_Code:	
  7443                           
  7444                           ;RF_Control_B1.c: 333: RF1.Learn = 0;
  7445                           
  7446                           ;incstack = 0
  7447                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7448  12D9  0021               	movlb	1	; select bank1
  7449  12DA  133A               	bcf	_RF1^(0+128),6
  7450                           
  7451                           ;RF_Control_B1.c: 334: product->Data[12]=RF_Data[12];
  7452  12DB  0022               	movlb	2	; select bank2
  7453  12DC  082C               	movf	(_RF_Data^(0+256)+12),w
  7454  12DD  0020               	movlb	0	; select bank0
  7455  12DE  00AD               	movwf	??_setLog_Code
  7456  12DF  086E               	movf	_product,w
  7457  12E0  3E0C               	addlw	12
  7458  12E1  0086               	movwf	6
  7459  12E2  3002               	movlw	2	; select bank4/5
  7460  12E3  0087               	movwf	7
  7461  12E4  082D               	movf	??_setLog_Code,w
  7462  12E5  0081               	movwf	1
  7463                           
  7464                           ;RF_Control_B1.c: 335: product->Data[13]=RF_Data[13];
  7465  12E6  0022               	movlb	2	; select bank2
  7466  12E7  082D               	movf	(_RF_Data^(0+256)+13),w
  7467  12E8  0020               	movlb	0	; select bank0
  7468  12E9  00AD               	movwf	??_setLog_Code
  7469  12EA  086E               	movf	_product,w
  7470  12EB  3E0D               	addlw	13
  7471  12EC  0086               	movwf	6
  7472  12ED  3002               	movlw	2	; select bank4/5
  7473  12EE  0087               	movwf	7
  7474  12EF  082D               	movf	??_setLog_Code,w
  7475  12F0  0081               	movwf	1
  7476                           
  7477                           ;RF_Control_B1.c: 336: product->Data[14]=RF_Data[14];
  7478  12F1  0022               	movlb	2	; select bank2
  7479  12F2  082E               	movf	(_RF_Data^(0+256)+14),w
  7480  12F3  0020               	movlb	0	; select bank0
  7481  12F4  00AD               	movwf	??_setLog_Code
  7482  12F5  086E               	movf	_product,w
  7483  12F6  3E0E               	addlw	14
  7484  12F7  0086               	movwf	6
  7485  12F8  3002               	movlw	2	; select bank4/5
  7486  12F9  0087               	movwf	7
  7487  12FA  082D               	movf	??_setLog_Code,w
  7488  12FB  0081               	movwf	1
  7489                           
  7490                           ;RF_Control_B1.c: 337: setBuz(1, 100);
  7491  12FC  3064               	movlw	100
  7492  12FD  00A9               	movwf	setBuz@time
  7493  12FE  3000               	movlw	0
  7494  12FF  00AA               	movwf	setBuz@time+1
  7495  1300  3001               	movlw	1
  7496  1301  3196  2694  3192   	fcall	_setBuz
  7497                           
  7498                           ;RF_Control_B1.c: 338: if (myMain.First == 1) {
  7499  1304  0021               	movlb	1	; select bank1
  7500  1305  1EA0               	btfss	_myMain^(0+128),5
  7501  1306  2B0B               	goto	l2081
  7502                           
  7503                           ;RF_Control_B1.c: 339: setMemory_LoopSave(1);
  7504  1307  3001               	movlw	1
  7505  1308  319D  259F  3192   	fcall	_setMemory_LoopSave
  7506  130B                     l2081:	
  7507                           
  7508                           ;RF_Control_B1.c: 340: }
  7509                           ;RF_Control_B1.c: 341: setMemory_Modify(1);
  7510  130B  3001               	movlw	1
  7511  130C  319D  258C         	fcall	_setMemory_Modify
  7512  130E  0008               	return
  7513  130F                     __end_of_setLog_Code:	
  7514                           
  7515                           	psect	text27
  7516  1D9F                     __ptext27:	
  7517 ;; *************** function _setMemory_LoopSave *****************
  7518 ;; Defined at:
  7519 ;;		line 1071 in file "../src/MCU_B1.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;  command         1    wreg     unsigned char 
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;  command         1    1[BANK0 ] unsigned char 
  7524 ;; Return value:  Size  Location     Type
  7525 ;;		None               void
  7526 ;; Registers used:
  7527 ;;		wreg, status,2, status,0
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7536 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7537 ;;Total ram usage:        2 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:    5
  7540 ;; This function calls:
  7541 ;;		Nothing
  7542 ;; This function is called by:
  7543 ;;		_setLog_Code
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           
  7548                           ;psect for function _setMemory_LoopSave
  7549  1D9F                     _setMemory_LoopSave:	
  7550                           
  7551                           ;incstack = 0
  7552                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7553                           ;setMemory_LoopSave@command stored from wreg
  7554  1D9F  0020               	movlb	0	; select bank0
  7555  1DA0  00A1               	movwf	setMemory_LoopSave@command
  7556                           
  7557                           ;MCU_B1.c: 1072: Memory.LoopSave = command == 1 ? 1 : 0;
  7558  1DA1  0821               	movf	setMemory_LoopSave@command,w
  7559  1DA2  3A01               	xorlw	1
  7560  1DA3  3000               	movlw	0
  7561  1DA4  1903               	skipnz
  7562  1DA5  3001               	movlw	1
  7563  1DA6  00A0               	movwf	??_setMemory_LoopSave
  7564  1DA7  0DA0               	rlf	??_setMemory_LoopSave,f
  7565  1DA8  0DA0               	rlf	??_setMemory_LoopSave,f
  7566  1DA9  0023               	movlb	3	; select bank3
  7567  1DAA  0844               	movf	(_Memory^(0+384)+36),w
  7568  1DAB  0020               	movlb	0	; select bank0
  7569  1DAC  0620               	xorwf	??_setMemory_LoopSave,w
  7570  1DAD  39FB               	andlw	-5
  7571  1DAE  0620               	xorwf	??_setMemory_LoopSave,w
  7572  1DAF  0023               	movlb	3	; select bank3
  7573  1DB0  00C4               	movwf	(_Memory^(0+384)+36)
  7574  1DB1  0008               	return
  7575  1DB2                     __end_of_setMemory_LoopSave:	
  7576                           
  7577                           	psect	text28
  7578  0913                     __ptext28:	
  7579 ;; *************** function _setControl_Lights_Table *****************
  7580 ;; Defined at:
  7581 ;;		line 345 in file "../src/RF_Control_B1.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;		None
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;		None
  7586 ;; Return value:  Size  Location     Type
  7587 ;;		None               void
  7588 ;; Registers used:
  7589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;Total ram usage:        0 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:   11
  7602 ;; This function calls:
  7603 ;;		_setBuz
  7604 ;;		_setDimmerLights_ErrorClose
  7605 ;;		_setRFSW_AdjControl
  7606 ;;		_setRFSW_Control
  7607 ;;		_setTxData
  7608 ;; This function is called by:
  7609 ;;		_getRxData
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           
  7614                           ;psect for function _setControl_Lights_Table
  7615  0913                     _setControl_Lights_Table:	
  7616                           
  7617                           ;RF_Control_B1.c: 346: switch (RF_Data[15]) {
  7618                           
  7619                           ;incstack = 0
  7620                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7621  0913  2957               	goto	l6320
  7622  0914                     l6298:	
  7623                           ;RF_Control_B1.c: 347: case 0x00:
  7624                           
  7625                           
  7626                           ;RF_Control_B1.c: 349: setDimmerLights_ErrorClose(255);
  7627  0914  30FF               	movlw	255
  7628  0915  3196  263C  3189   	fcall	_setDimmerLights_ErrorClose
  7629                           
  7630                           ;RF_Control_B1.c: 351: product->Data[9]=0;
  7631  0918  0020               	movlb	0	; select bank0
  7632  0919  086E               	movf	_product,w
  7633  091A  3E09               	addlw	9
  7634  091B  0086               	movwf	6
  7635  091C  3002               	movlw	2	; select bank4/5
  7636  091D  0087               	movwf	7
  7637  091E  0181               	clrf	1
  7638                           
  7639                           ;RF_Control_B1.c: 352: product->Data[11]=0;
  7640  091F  086E               	movf	_product,w
  7641  0920  3E0B               	addlw	11
  7642  0921  0086               	movwf	6
  7643  0922  3002               	movlw	2	; select bank4/5
  7644  0923  0087               	movwf	7
  7645  0924  0181               	clrf	1
  7646                           
  7647                           ;RF_Control_B1.c: 353: product->Data[15]=0;
  7648  0925  086E               	movf	_product,w
  7649  0926  3E0F               	addlw	15
  7650  0927  0086               	movwf	6
  7651  0928  3002               	movlw	2	; select bank4/5
  7652  0929  0087               	movwf	7
  7653  092A  0181               	clrf	1
  7654                           
  7655                           ;RF_Control_B1.c: 354: product->Data[17]=0;
  7656  092B  086E               	movf	_product,w
  7657  092C  3E11               	addlw	17
  7658  092D  0086               	movwf	6
  7659  092E  3002               	movlw	2	; select bank4/5
  7660  092F  0087               	movwf	7
  7661  0930  0181               	clrf	1
  7662                           
  7663                           ;RF_Control_B1.c: 355: setBuz(1, 100);
  7664  0931  3064               	movlw	100
  7665  0932  00A9               	movwf	setBuz@time
  7666  0933  3000               	movlw	0
  7667  0934  00AA               	movwf	setBuz@time+1
  7668  0935  3001               	movlw	1
  7669  0936  3196  2694         	fcall	_setBuz
  7670                           
  7671                           ;RF_Control_B1.c: 357: break;
  7672  0938  0008               	return
  7673  0939                     l6310:	
  7674                           ;RF_Control_B1.c: 358: case 0x20:
  7675                           
  7676                           
  7677                           ;RF_Control_B1.c: 359: product->Data[9]=0;
  7678  0939  0020               	movlb	0	; select bank0
  7679  093A  086E               	movf	_product,w
  7680  093B  3E09               	addlw	9
  7681  093C  0086               	movwf	6
  7682  093D  3002               	movlw	2	; select bank4/5
  7683  093E  0087               	movwf	7
  7684  093F  0181               	clrf	1
  7685                           
  7686                           ;RF_Control_B1.c: 360: product->Data[11]=0;
  7687  0940  086E               	movf	_product,w
  7688  0941  3E0B               	addlw	11
  7689  0942  0086               	movwf	6
  7690  0943  3002               	movlw	2	; select bank4/5
  7691  0944  0087               	movwf	7
  7692  0945  0181               	clrf	1
  7693                           
  7694                           ;RF_Control_B1.c: 361: product->Data[17]=0;
  7695  0946  086E               	movf	_product,w
  7696  0947  3E11               	addlw	17
  7697  0948  0086               	movwf	6
  7698  0949  3002               	movlw	2	; select bank4/5
  7699  094A  0087               	movwf	7
  7700  094B  0181               	clrf	1
  7701                           
  7702                           ;RF_Control_B1.c: 362: setTxData();
  7703  094C  3187  2726         	fcall	_setTxData
  7704                           
  7705                           ;RF_Control_B1.c: 363: break;
  7706  094E  0008               	return
  7707  094F                     l6314:	
  7708                           ;RF_Control_B1.c: 364: case 0x01:
  7709                           
  7710                           
  7711                           ;RF_Control_B1.c: 366: setRFSW_Control(1);
  7712  094F  3001               	movlw	1
  7713  0950  3195  2599         	fcall	_setRFSW_Control
  7714                           
  7715                           ;RF_Control_B1.c: 378: break;
  7716                           
  7717                           ;RF_Control_B1.c: 374: case 0x03:
  7718                           
  7719                           ;RF_Control_B1.c: 373: break;
  7720                           
  7721                           ;RF_Control_B1.c: 369: case 0x02:
  7722                           
  7723                           ;RF_Control_B1.c: 368: break;
  7724  0952  0008               	return
  7725  0953                     l6316:	
  7726                           ;RF_Control_B1.c: 379: case 0x11:
  7727                           
  7728                           
  7729                           ;RF_Control_B1.c: 382: setRFSW_AdjControl(1);
  7730  0953  3001               	movlw	1
  7731  0954  3194  2435         	fcall	_setRFSW_AdjControl
  7732                           
  7733                           ;RF_Control_B1.c: 400: }
  7734                           
  7735                           ;RF_Control_B1.c: 399: break;
  7736                           
  7737                           ;RF_Control_B1.c: 393: case 0x31:
  7738                           
  7739                           ;RF_Control_B1.c: 392: break;
  7740                           
  7741                           ;RF_Control_B1.c: 386: case 0x21:
  7742                           
  7743                           ;RF_Control_B1.c: 385: break;
  7744  0956  0008               	return
  7745  0957                     l6320:	
  7746  0957  0022               	movlb	2	; select bank2
  7747  0958  082F               	movf	(_RF_Data^(0+256)+15),w
  7748                           
  7749                           ; Switch size 1, requested type "space"
  7750                           ; Number of cases is 8, Range of values is 0 to 49
  7751                           ; switch strategies available:
  7752                           ; Name         Instructions Cycles
  7753                           ; simple_byte           25    13 (average)
  7754                           ; direct_byte          106     6 (fixed)
  7755                           ; jumptable            260     6 (fixed)
  7756                           ;	Chosen strategy is simple_byte
  7757  0959  3A00               	xorlw	0	; case 0
  7758  095A  1903               	skipnz
  7759  095B  2914               	goto	l6298
  7760  095C  3A01               	xorlw	1	; case 1
  7761  095D  1903               	skipnz
  7762  095E  294F               	goto	l6314
  7763  095F  3A03               	xorlw	3	; case 2
  7764  0960  1903               	skipnz
  7765  0961  2972               	goto	l2095
  7766  0962  3A01               	xorlw	1	; case 3
  7767  0963  1903               	skipnz
  7768  0964  2972               	goto	l2095
  7769  0965  3A12               	xorlw	18	; case 17
  7770  0966  1903               	skipnz
  7771  0967  2953               	goto	l6316
  7772  0968  3A31               	xorlw	49	; case 32
  7773  0969  1903               	skipnz
  7774  096A  2939               	goto	l6310
  7775  096B  3A01               	xorlw	1	; case 33
  7776  096C  1903               	skipnz
  7777  096D  2972               	goto	l2095
  7778  096E  3A10               	xorlw	16	; case 49
  7779  096F  1903               	skipnz
  7780  0970  2972               	goto	l2095
  7781  0971  2972               	goto	l2095
  7782  0972                     l2095:	
  7783  0972  0008               	return
  7784  0973                     __end_of_setControl_Lights_Table:	
  7785                           
  7786                           	psect	text29
  7787  1599                     __ptext29:	
  7788 ;; *************** function _setRFSW_Control *****************
  7789 ;; Defined at:
  7790 ;;		line 427 in file "../src/RF_Control_B1.c"
  7791 ;; Parameters:    Size  Location     Type
  7792 ;;  sw              1    wreg     unsigned char 
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;  sw              1   19[BANK0 ] unsigned char 
  7795 ;;  status          1   18[BANK0 ] unsigned char 
  7796 ;; Return value:  Size  Location     Type
  7797 ;;		None               void
  7798 ;; Registers used:
  7799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/0
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7808 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7809 ;;Total ram usage:        3 bytes
  7810 ;; Hardware stack levels used:    1
  7811 ;; Hardware stack levels required when called:    9
  7812 ;; This function calls:
  7813 ;;		_getDelayOff_GO
  7814 ;;		_getDimmerLights_Status
  7815 ;;		_setBuz
  7816 ;;		_setDelayOff_GO
  7817 ;;		_setDimmerLights_SwOff
  7818 ;;		_setDimmerLights_SwOn
  7819 ;;		_setRF_DimmerLights
  7820 ;;		_setTxData
  7821 ;; This function is called by:
  7822 ;;		_setControl_Lights_Table
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           
  7827                           ;psect for function _setRFSW_Control
  7828  1599                     _setRFSW_Control:	
  7829                           
  7830                           ;incstack = 0
  7831                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7832                           ;setRFSW_Control@sw stored from wreg
  7833  1599  0020               	movlb	0	; select bank0
  7834  159A  00B3               	movwf	setRFSW_Control@sw
  7835                           
  7836                           ;RF_Control_B1.c: 428: char status = 0;
  7837  159B  01B2               	clrf	setRFSW_Control@status
  7838                           
  7839                           ;RF_Control_B1.c: 431: if (RF_Data[16] == 0x80) {
  7840  159C  0022               	movlb	2	; select bank2
  7841  159D  0830               	movf	(_RF_Data^(0+256)+16),w
  7842  159E  3A80               	xorlw	128
  7843  159F  1D03               	skipz
  7844  15A0  2DCC               	goto	l6152
  7845                           
  7846                           ;RF_Control_B1.c: 432: setDelayOff_GO(sw, 1, RF_Data[17]);
  7847  15A1  0020               	movlb	0	; select bank0
  7848  15A2  01AA               	clrf	setDelayOff_GO@command
  7849  15A3  0AAA               	incf	setDelayOff_GO@command,f
  7850  15A4  0022               	movlb	2	; select bank2
  7851  15A5  0831               	movf	(_RF_Data^(0+256)+17),w
  7852  15A6  0020               	movlb	0	; select bank0
  7853  15A7  00B1               	movwf	??_setRFSW_Control
  7854  15A8  0831               	movf	??_setRFSW_Control,w
  7855  15A9  00AB               	movwf	setDelayOff_GO@value
  7856  15AA  0833               	movf	setRFSW_Control@sw,w
  7857  15AB  3188  2059  3195   	fcall	_setDelayOff_GO
  7858                           
  7859                           ;RF_Control_B1.c: 433: if (getDimmerLights_Status(sw) == 1) {
  7860  15AE  0020               	movlb	0	; select bank0
  7861  15AF  0833               	movf	setRFSW_Control@sw,w
  7862  15B0  319C  24D2  3195   	fcall	_getDimmerLights_Status
  7863  15B3  3A01               	xorlw	1
  7864  15B4  1D03               	skipz
  7865  15B5  2DDB               	goto	l6156
  7866                           
  7867                           ;RF_Control_B1.c: 434: setBuz(1, 100);
  7868  15B6  3064               	movlw	100
  7869  15B7  0020               	movlb	0	; select bank0
  7870  15B8  00A9               	movwf	setBuz@time
  7871  15B9  3000               	movlw	0
  7872  15BA  00AA               	movwf	setBuz@time+1
  7873  15BB  3001               	movlw	1
  7874  15BC  3196  2694  3195   	fcall	_setBuz
  7875                           
  7876                           ;RF_Control_B1.c: 435: status = 1;
  7877  15BF  0020               	movlb	0	; select bank0
  7878  15C0  01B2               	clrf	setRFSW_Control@status
  7879  15C1  0AB2               	incf	setRFSW_Control@status,f
  7880                           
  7881                           ;RF_Control_B1.c: 436: setRF_DimmerLights(sw, 1);
  7882  15C2  01A0               	clrf	setRF_DimmerLights@on
  7883  15C3  0AA0               	incf	setRF_DimmerLights@on,f
  7884  15C4  0833               	movf	setRFSW_Control@sw,w
  7885  15C5  3197  2748  3195   	fcall	_setRF_DimmerLights
  7886                           
  7887                           ;RF_Control_B1.c: 437: setTxData();
  7888  15C8  3187  2726  3195   	fcall	_setTxData
  7889                           
  7890                           ;RF_Control_B1.c: 439: }
  7891                           ;RF_Control_B1.c: 440: } else {
  7892  15CB  2DDB               	goto	l6156
  7893  15CC                     l6152:	
  7894                           
  7895                           ;RF_Control_B1.c: 442: if (getDelayOff_GO(sw) == 1) {
  7896  15CC  0020               	movlb	0	; select bank0
  7897  15CD  0833               	movf	setRFSW_Control@sw,w
  7898  15CE  319C  24E2  3195   	fcall	_getDelayOff_GO
  7899  15D1  3A01               	xorlw	1
  7900  15D2  1D03               	skipz
  7901  15D3  2DDB               	goto	l6156
  7902                           
  7903                           ;RF_Control_B1.c: 443: setDelayOff_GO(sw, 0, 0);
  7904  15D4  0020               	movlb	0	; select bank0
  7905  15D5  01AA               	clrf	setDelayOff_GO@command
  7906  15D6  01AB               	clrf	setDelayOff_GO@value
  7907  15D7  0833               	movf	setRFSW_Control@sw,w
  7908  15D8  3188  2059  3195   	fcall	_setDelayOff_GO
  7909  15DB                     l6156:	
  7910                           
  7911                           ;RF_Control_B1.c: 444: }
  7912                           ;RF_Control_B1.c: 446: }
  7913                           ;RF_Control_B1.c: 447: if (status == 0) {
  7914  15DB  0020               	movlb	0	; select bank0
  7915  15DC  08B2               	movf	setRFSW_Control@status,f
  7916  15DD  1D03               	skipz
  7917  15DE  0008               	return
  7918                           
  7919                           ;RF_Control_B1.c: 449: setDimmerLights_SwOn(sw);
  7920  15DF  0833               	movf	setRFSW_Control@sw,w
  7921  15E0  3193  23BA  3195   	fcall	_setDimmerLights_SwOn
  7922                           
  7923                           ;RF_Control_B1.c: 450: setDimmerLights_SwOff(sw);
  7924  15E3  0020               	movlb	0	; select bank0
  7925  15E4  0833               	movf	setRFSW_Control@sw,w
  7926  15E5  3194  24B8         	fcall	_setDimmerLights_SwOff
  7927  15E7  0008               	return
  7928  15E8                     __end_of_setRFSW_Control:	
  7929                           
  7930                           	psect	text30
  7931  13BA                     __ptext30:	
  7932 ;; *************** function _setDimmerLights_SwOn *****************
  7933 ;; Defined at:
  7934 ;;		line 505 in file "../src/Dimmer_B1.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;  sw              1    wreg     unsigned char 
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;  sw              1   15[BANK0 ] unsigned char 
  7939 ;;  idle            1   14[BANK0 ] unsigned char 
  7940 ;; Return value:  Size  Location     Type
  7941 ;;		None               void
  7942 ;; Registers used:
  7943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7944 ;; Tracked objects:
  7945 ;;		On entry : 0/0
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;Total ram usage:        3 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; Hardware stack levels required when called:    7
  7956 ;; This function calls:
  7957 ;;		_DimmerLightsPointSelect
  7958 ;;		_getAll_DimmerLights_AdjGO
  7959 ;;		_setBuz
  7960 ;;		_setDimmerLights_Trigger
  7961 ;; This function is called by:
  7962 ;;		_setRFSW_Control
  7963 ;;		_setSw_Main
  7964 ;; This function uses a non-reentrant model
  7965 ;;
  7966                           
  7967                           
  7968                           ;psect for function _setDimmerLights_SwOn
  7969  13BA                     _setDimmerLights_SwOn:	
  7970                           
  7971                           ;incstack = 0
  7972                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7973                           ;setDimmerLights_SwOn@sw stored from wreg
  7974  13BA  0020               	movlb	0	; select bank0
  7975  13BB  00AF               	movwf	setDimmerLights_SwOn@sw
  7976                           
  7977                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(sw);
  7978  13BC  082F               	movf	setDimmerLights_SwOn@sw,w
  7979  13BD  319C  240F  3193   	fcall	_DimmerLightsPointSelect
  7980                           
  7981                           ;Dimmer_B1.c: 507: char idle = 0;
  7982  13C0  0020               	movlb	0	; select bank0
  7983  13C1  01AE               	clrf	setDimmerLights_SwOn@idle
  7984                           
  7985                           ;Dimmer_B1.c: 509: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  7986  13C2  319B  23EF  3193   	fcall	_getAll_DimmerLights_AdjGO
  7987  13C5  3A01               	xorlw	1
  7988  13C6  3000               	movlw	0
  7989  13C7  1903               	skipnz
  7990  13C8  3001               	movlw	1
  7991  13C9  0020               	movlb	0	; select bank0
  7992  13CA  00AD               	movwf	??_setDimmerLights_SwOn
  7993  13CB  082D               	movf	??_setDimmerLights_SwOn,w
  7994  13CC  00AE               	movwf	setDimmerLights_SwOn@idle
  7995                           
  7996                           ;Dimmer_B1.c: 511: if (idle == 0) {
  7997  13CD  08AE               	movf	setDimmerLights_SwOn@idle,f
  7998  13CE  1D03               	skipz
  7999  13CF  0008               	return
  8000                           
  8001                           ;Dimmer_B1.c: 512: DimmerLights->SwFlag = 1;
  8002  13D0  086F               	movf	_DimmerLights,w
  8003  13D1  3E09               	addlw	9
  8004  13D2  0086               	movwf	6
  8005  13D3  3001               	movlw	1	; select bank2/3
  8006  13D4  0087               	movwf	7
  8007  13D5  1701               	bsf	1,6
  8008                           
  8009                           ;Dimmer_B1.c: 513: setBuz(1, 100);
  8010  13D6  3064               	movlw	100
  8011  13D7  00A9               	movwf	setBuz@time
  8012  13D8  3000               	movlw	0
  8013  13D9  00AA               	movwf	setBuz@time+1
  8014  13DA  3001               	movlw	1
  8015  13DB  3196  2694  3193   	fcall	_setBuz
  8016                           
  8017                           ;Dimmer_B1.c: 514: if (DimmerLights->Status == 0) {
  8018  13DE  0020               	movlb	0	; select bank0
  8019  13DF  086F               	movf	_DimmerLights,w
  8020  13E0  0086               	movwf	6
  8021  13E1  3001               	movlw	1	; select bank2/3
  8022  13E2  0087               	movwf	7
  8023  13E3  1A81               	btfsc	1,5
  8024  13E4  2BF0               	goto	l5964
  8025                           
  8026                           ;Dimmer_B1.c: 515: DimmerLights->Status = 1;
  8027  13E5  086F               	movf	_DimmerLights,w
  8028  13E6  0086               	movwf	6
  8029  13E7  3001               	movlw	1	; select bank2/3
  8030  13E8  0087               	movwf	7
  8031  13E9  1681               	bsf	1,5
  8032                           
  8033                           ;Dimmer_B1.c: 516: setDimmerLights_Trigger(sw, 1);
  8034  13EA  01A2               	clrf	setDimmerLights_Trigger@command
  8035  13EB  0AA2               	incf	setDimmerLights_Trigger@command,f
  8036  13EC  082F               	movf	setDimmerLights_SwOn@sw,w
  8037  13ED  319E  2697         	fcall	_setDimmerLights_Trigger
  8038                           
  8039                           ;Dimmer_B1.c: 517: } else {
  8040  13EF  0008               	return
  8041  13F0                     l5964:	
  8042                           
  8043                           ;Dimmer_B1.c: 518: DimmerLights->Status = 0;
  8044  13F0  0020               	movlb	0	; select bank0
  8045  13F1  086F               	movf	_DimmerLights,w
  8046  13F2  0086               	movwf	6
  8047  13F3  3001               	movlw	1	; select bank2/3
  8048  13F4  0087               	movwf	7
  8049  13F5  1281               	bcf	1,5
  8050  13F6  0008               	return
  8051  13F7                     __end_of_setDimmerLights_SwOn:	
  8052                           
  8053                           	psect	text31
  8054  1435                     __ptext31:	
  8055 ;; *************** function _setRFSW_AdjControl *****************
  8056 ;; Defined at:
  8057 ;;		line 456 in file "../src/RF_Control_B1.c"
  8058 ;; Parameters:    Size  Location     Type
  8059 ;;  sw              1    wreg     unsigned char 
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;  sw              1   74[BANK0 ] unsigned char 
  8062 ;;  status          1   73[BANK0 ] unsigned char 
  8063 ;; Return value:  Size  Location     Type
  8064 ;;		None               void
  8065 ;; Registers used:
  8066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8075 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8076 ;;Total ram usage:        4 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; Hardware stack levels required when called:   10
  8079 ;; This function calls:
  8080 ;;		_getDimmerLights_Status
  8081 ;;		_setMemory_Modify
  8082 ;;		_setRF_DimmerValue
  8083 ;;		_setTxData
  8084 ;; This function is called by:
  8085 ;;		_setControl_Lights_Table
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           
  8090                           ;psect for function _setRFSW_AdjControl
  8091  1435                     _setRFSW_AdjControl:	
  8092                           
  8093                           ;incstack = 0
  8094                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8095                           ;setRFSW_AdjControl@sw stored from wreg
  8096  1435  0020               	movlb	0	; select bank0
  8097  1436  00EA               	movwf	setRFSW_AdjControl@sw
  8098                           
  8099                           ;RF_Control_B1.c: 457: char status = 0;
  8100  1437  01E9               	clrf	setRFSW_AdjControl@status
  8101                           
  8102                           ;RF_Control_B1.c: 459: status = getDimmerLights_Status(sw);
  8103  1438  086A               	movf	setRFSW_AdjControl@sw,w
  8104  1439  319C  24D2  3194   	fcall	_getDimmerLights_Status
  8105  143C  0020               	movlb	0	; select bank0
  8106  143D  00E7               	movwf	??_setRFSW_AdjControl
  8107  143E  0867               	movf	??_setRFSW_AdjControl,w
  8108  143F  00E9               	movwf	setRFSW_AdjControl@status
  8109                           
  8110                           ;RF_Control_B1.c: 462: if (status == 1) {
  8111  1440  0869               	movf	setRFSW_AdjControl@status,w
  8112  1441  3A01               	xorlw	1
  8113  1442  1D03               	skipz
  8114  1443  2C4E               	goto	l6170
  8115                           
  8116                           ;RF_Control_B1.c: 463: setMemory_Modify(1);
  8117  1444  3001               	movlw	1
  8118  1445  319D  258C  3194   	fcall	_setMemory_Modify
  8119                           
  8120                           ;RF_Control_B1.c: 464: setRF_DimmerValue(sw);
  8121  1448  0020               	movlb	0	; select bank0
  8122  1449  086A               	movf	setRFSW_AdjControl@sw,w
  8123  144A  3191  21A0  3194   	fcall	_setRF_DimmerValue
  8124                           
  8125                           ;RF_Control_B1.c: 465: } else {
  8126  144D  2C60               	goto	l2107
  8127  144E                     l6170:	
  8128                           
  8129                           ;RF_Control_B1.c: 466: product->Data[9]=product->Data[20 + sw];
  8130  144E  0020               	movlb	0	; select bank0
  8131  144F  086A               	movf	setRFSW_AdjControl@sw,w
  8132  1450  3E14               	addlw	20
  8133  1451  076E               	addwf	_product,w
  8134  1452  00E7               	movwf	??_setRFSW_AdjControl
  8135  1453  0867               	movf	??_setRFSW_AdjControl,w
  8136  1454  0086               	movwf	6
  8137  1455  3002               	movlw	2	; select bank4/5
  8138  1456  0087               	movwf	7
  8139  1457  0801               	movf	1,w
  8140  1458  00E8               	movwf	??_setRFSW_AdjControl+1
  8141  1459  086E               	movf	_product,w
  8142  145A  3E09               	addlw	9
  8143  145B  0086               	movwf	6
  8144  145C  3002               	movlw	2	; select bank4/5
  8145  145D  0087               	movwf	7
  8146  145E  0868               	movf	??_setRFSW_AdjControl+1,w
  8147  145F  0081               	movwf	1
  8148  1460                     l2107:	
  8149                           
  8150                           ;RF_Control_B1.c: 467: }
  8151                           ;RF_Control_B1.c: 468: product->Data[17]=product->Data[26 + sw];
  8152  1460  0020               	movlb	0	; select bank0
  8153  1461  086A               	movf	setRFSW_AdjControl@sw,w
  8154  1462  3E1A               	addlw	26
  8155  1463  076E               	addwf	_product,w
  8156  1464  00E7               	movwf	??_setRFSW_AdjControl
  8157  1465  0867               	movf	??_setRFSW_AdjControl,w
  8158  1466  0086               	movwf	6
  8159  1467  3002               	movlw	2	; select bank4/5
  8160  1468  0087               	movwf	7
  8161  1469  0801               	movf	1,w
  8162  146A  00E8               	movwf	??_setRFSW_AdjControl+1
  8163  146B  086E               	movf	_product,w
  8164  146C  3E11               	addlw	17
  8165  146D  0086               	movwf	6
  8166  146E  3002               	movlw	2	; select bank4/5
  8167  146F  0087               	movwf	7
  8168  1470  0868               	movf	??_setRFSW_AdjControl+1,w
  8169  1471  0081               	movwf	1
  8170                           
  8171                           ;RF_Control_B1.c: 469: setTxData();
  8172  1472  3187  2726         	fcall	_setTxData
  8173  1474  0008               	return
  8174  1475                     __end_of_setRFSW_AdjControl:	
  8175                           
  8176                           	psect	text32
  8177  11A0                     __ptext32:	
  8178 ;; *************** function _setRF_DimmerValue *****************
  8179 ;; Defined at:
  8180 ;;		line 474 in file "../src/RF_Control_B1.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  lights          1    wreg     unsigned char 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  lights          1   70[BANK0 ] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;		None               void
  8187 ;; Registers used:
  8188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;Total ram usage:        3 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    9
  8201 ;; This function calls:
  8202 ;;		_setDimmerLights_AdjRF
  8203 ;; This function is called by:
  8204 ;;		_setRFSW_AdjControl
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           
  8209                           ;psect for function _setRF_DimmerValue
  8210  11A0                     _setRF_DimmerValue:	
  8211                           
  8212                           ;incstack = 0
  8213                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8214                           ;setRF_DimmerValue@lights stored from wreg
  8215  11A0  0020               	movlb	0	; select bank0
  8216  11A1  00E6               	movwf	setRF_DimmerValue@lights
  8217                           
  8218                           ;RF_Control_B1.c: 475: if (RF_Data[9] > 0x64) {
  8219  11A2  3065               	movlw	101
  8220  11A3  0022               	movlb	2	; select bank2
  8221  11A4  0229               	subwf	(_RF_Data^(0+256)+9),w
  8222  11A5  1C03               	skipc
  8223  11A6  29AD               	goto	l6052
  8224                           
  8225                           ;RF_Control_B1.c: 476: RF_Data[9] = 0x64;
  8226  11A7  3064               	movlw	100
  8227  11A8  0020               	movlb	0	; select bank0
  8228  11A9  00E4               	movwf	??_setRF_DimmerValue
  8229  11AA  0864               	movf	??_setRF_DimmerValue,w
  8230  11AB  0022               	movlb	2	; select bank2
  8231  11AC  00A9               	movwf	(_RF_Data^(0+256)+9)
  8232  11AD                     l6052:	
  8233                           
  8234                           ;RF_Control_B1.c: 477: }
  8235                           ;RF_Control_B1.c: 478: product->Data[9]=RF_Data[9];
  8236  11AD  0829               	movf	(_RF_Data^(0+256)+9),w
  8237  11AE  0020               	movlb	0	; select bank0
  8238  11AF  00E4               	movwf	??_setRF_DimmerValue
  8239  11B0  086E               	movf	_product,w
  8240  11B1  3E09               	addlw	9
  8241  11B2  0086               	movwf	6
  8242  11B3  3002               	movlw	2	; select bank4/5
  8243  11B4  0087               	movwf	7
  8244  11B5  0864               	movf	??_setRF_DimmerValue,w
  8245  11B6  0081               	movwf	1
  8246                           
  8247                           ;RF_Control_B1.c: 479: product->Data[11]=lights;
  8248  11B7  0866               	movf	setRF_DimmerValue@lights,w
  8249  11B8  00E4               	movwf	??_setRF_DimmerValue
  8250  11B9  086E               	movf	_product,w
  8251  11BA  3E0B               	addlw	11
  8252  11BB  0086               	movwf	6
  8253  11BC  3002               	movlw	2	; select bank4/5
  8254  11BD  0087               	movwf	7
  8255  11BE  0864               	movf	??_setRF_DimmerValue,w
  8256  11BF  0081               	movwf	1
  8257                           
  8258                           ;RF_Control_B1.c: 480: product->Data[(20 + lights)]=RF_Data[9];
  8259  11C0  0022               	movlb	2	; select bank2
  8260  11C1  0829               	movf	(_RF_Data^(0+256)+9),w
  8261  11C2  0020               	movlb	0	; select bank0
  8262  11C3  00E4               	movwf	??_setRF_DimmerValue
  8263  11C4  0866               	movf	setRF_DimmerValue@lights,w
  8264  11C5  3E14               	addlw	20
  8265  11C6  076E               	addwf	_product,w
  8266  11C7  00E5               	movwf	??_setRF_DimmerValue+1
  8267  11C8  0865               	movf	??_setRF_DimmerValue+1,w
  8268  11C9  0086               	movwf	6
  8269  11CA  3002               	movlw	2	; select bank4/5
  8270  11CB  0087               	movwf	7
  8271  11CC  0864               	movf	??_setRF_DimmerValue,w
  8272  11CD  0081               	movwf	1
  8273                           
  8274                           ;RF_Control_B1.c: 481: setDimmerLights_AdjRF(lights);
  8275  11CE  0866               	movf	setRF_DimmerValue@lights,w
  8276  11CF  319F  27B9         	fcall	_setDimmerLights_AdjRF
  8277  11D1  0008               	return
  8278  11D2                     __end_of_setRF_DimmerValue:	
  8279                           
  8280                           	psect	text33
  8281  1FB9                     __ptext33:	
  8282 ;; *************** function _setDimmerLights_AdjRF *****************
  8283 ;; Defined at:
  8284 ;;		line 746 in file "../src/Dimmer_B1.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;  lights          1    wreg     unsigned char 
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;  lights          1   67[BANK0 ] unsigned char 
  8289 ;; Return value:  Size  Location     Type
  8290 ;;		None               void
  8291 ;; Registers used:
  8292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8293 ;; Tracked objects:
  8294 ;;		On entry : 0/0
  8295 ;;		On exit  : 0/0
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;Total ram usage:        2 bytes
  8303 ;; Hardware stack levels used:    1
  8304 ;; Hardware stack levels required when called:    8
  8305 ;; This function calls:
  8306 ;;		_DimmerLightsPointSelect
  8307 ;;		_getPercentValue
  8308 ;; This function is called by:
  8309 ;;		_setRF_DimmerValue
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _setDimmerLights_AdjRF
  8315  1FB9                     _setDimmerLights_AdjRF:	
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8319                           ;setDimmerLights_AdjRF@lights stored from wreg
  8320  1FB9  0020               	movlb	0	; select bank0
  8321  1FBA  00E3               	movwf	setDimmerLights_AdjRF@lights
  8322                           
  8323                           ;Dimmer_B1.c: 747: DimmerLightsPointSelect(lights);
  8324  1FBB  0863               	movf	setDimmerLights_AdjRF@lights,w
  8325  1FBC  319C  240F  319F   	fcall	_DimmerLightsPointSelect
  8326                           
  8327                           ;Dimmer_B1.c: 748: DimmerLights->AdjRF = 1;
  8328  1FBF  0020               	movlb	0	; select bank0
  8329  1FC0  086F               	movf	_DimmerLights,w
  8330  1FC1  0086               	movwf	6
  8331  1FC2  3001               	movlw	1	; select bank2/3
  8332  1FC3  0087               	movwf	7
  8333  1FC4  1501               	bsf	1,2
  8334                           
  8335                           ;Dimmer_B1.c: 749: DimmerLights->Signal = 1;
  8336  1FC5  086F               	movf	_DimmerLights,w
  8337  1FC6  0086               	movwf	6
  8338  1FC7  3001               	movlw	1	; select bank2/3
  8339  1FC8  0087               	movwf	7
  8340  1FC9  1481               	bsf	1,1
  8341                           
  8342                           ;Dimmer_B1.c: 750: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8343  1FCA  086E               	movf	_product,w
  8344  1FCB  3E09               	addlw	9
  8345  1FCC  0086               	movwf	6
  8346  1FCD  3002               	movlw	2	; select bank4/5
  8347  1FCE  0087               	movwf	7
  8348  1FCF  0801               	movf	1,w
  8349  1FD0  318A  229A         	fcall	_getPercentValue
  8350  1FD2  0020               	movlb	0	; select bank0
  8351  1FD3  00E2               	movwf	??_setDimmerLights_AdjRF
  8352  1FD4  086F               	movf	_DimmerLights,w
  8353  1FD5  3E05               	addlw	5
  8354  1FD6  0086               	movwf	6
  8355  1FD7  3001               	movlw	1	; select bank2/3
  8356  1FD8  0087               	movwf	7
  8357  1FD9  0862               	movf	??_setDimmerLights_AdjRF,w
  8358  1FDA  0081               	movwf	1
  8359  1FDB  0008               	return
  8360  1FDC                     __end_of_setDimmerLights_AdjRF:	
  8361                           
  8362                           	psect	text34
  8363  0A9A                     __ptext34:	
  8364 ;; *************** function _getPercentValue *****************
  8365 ;; Defined at:
  8366 ;;		line 858 in file "../src/Dimmer_B1.c"
  8367 ;; Parameters:    Size  Location     Type
  8368 ;;  value           1    wreg     unsigned char 
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;  value           1   62[BANK0 ] unsigned char 
  8371 ;;  i               3   63[BANK0 ] float 
  8372 ;; Return value:  Size  Location     Type
  8373 ;;                  1    wreg      unsigned char 
  8374 ;; Registers used:
  8375 ;;		wreg, status,2, status,0, pclath, cstack
  8376 ;; Tracked objects:
  8377 ;;		On entry : 0/0
  8378 ;;		On exit  : 0/0
  8379 ;;		Unchanged: 0/0
  8380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8383 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;Total ram usage:        6 bytes
  8386 ;; Hardware stack levels used:    1
  8387 ;; Hardware stack levels required when called:    7
  8388 ;; This function calls:
  8389 ;;		___awtoft
  8390 ;;		___ftadd
  8391 ;;		___ftdiv
  8392 ;;		___ftmul
  8393 ;;		___ftneg
  8394 ;;		___fttol
  8395 ;; This function is called by:
  8396 ;;		_setDimmerLights_AdjRF
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           
  8401                           ;psect for function _getPercentValue
  8402  0A9A                     _getPercentValue:	
  8403                           
  8404                           ;incstack = 0
  8405                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8406                           ;getPercentValue@value stored from wreg
  8407  0A9A  0020               	movlb	0	; select bank0
  8408  0A9B  00DE               	movwf	getPercentValue@value
  8409                           
  8410                           ;Dimmer_B1.c: 866: float i = ((char)(65*0.8)) - ((char)(15*0.8));
  8411  0A9C  3000               	movlw	0
  8412  0A9D  00DF               	movwf	getPercentValue@i
  8413  0A9E  3020               	movlw	32
  8414  0A9F  00E0               	movwf	getPercentValue@i+1
  8415  0AA0  3042               	movlw	66
  8416  0AA1  00E1               	movwf	getPercentValue@i+2
  8417                           
  8418                           ;Dimmer_B1.c: 867: i /= 100;
  8419  0AA2  3000               	movlw	0
  8420  0AA3  00AE               	movwf	___ftdiv@f2
  8421  0AA4  30C8               	movlw	200
  8422  0AA5  00AF               	movwf	___ftdiv@f2+1
  8423  0AA6  3042               	movlw	66
  8424  0AA7  00B0               	movwf	___ftdiv@f2+2
  8425  0AA8  085F               	movf	getPercentValue@i,w
  8426  0AA9  00B1               	movwf	___ftdiv@f1
  8427  0AAA  0860               	movf	getPercentValue@i+1,w
  8428  0AAB  00B2               	movwf	___ftdiv@f1+1
  8429  0AAC  0861               	movf	getPercentValue@i+2,w
  8430  0AAD  00B3               	movwf	___ftdiv@f1+2
  8431  0AAE  318D  25F0  318A   	fcall	___ftdiv
  8432  0AB1  0020               	movlb	0	; select bank0
  8433  0AB2  082E               	movf	?___ftdiv,w
  8434  0AB3  00DF               	movwf	getPercentValue@i
  8435  0AB4  082F               	movf	?___ftdiv+1,w
  8436  0AB5  00E0               	movwf	getPercentValue@i+1
  8437  0AB6  0830               	movf	?___ftdiv+2,w
  8438  0AB7  00E1               	movwf	getPercentValue@i+2
  8439                           
  8440                           ;Dimmer_B1.c: 869: return (char) (((char)(65*0.8)) - ((100 - value) * i));
  8441  0AB8  085E               	movf	getPercentValue@value,w
  8442  0AB9  00DC               	movwf	??_getPercentValue
  8443  0ABA  01DD               	clrf	??_getPercentValue+1
  8444  0ABB  09DC               	comf	??_getPercentValue,f
  8445  0ABC  09DD               	comf	??_getPercentValue+1,f
  8446  0ABD  0ADC               	incf	??_getPercentValue,f
  8447  0ABE  1903               	skipnz
  8448  0ABF  0ADD               	incf	??_getPercentValue+1,f
  8449  0AC0  085C               	movf	??_getPercentValue,w
  8450  0AC1  3E64               	addlw	100
  8451  0AC2  00A8               	movwf	___awtoft@c
  8452  0AC3  3000               	movlw	0
  8453  0AC4  3D5D               	addwfc	??_getPercentValue+1,w
  8454  0AC5  00A9               	movwf	___awtoft@c+1
  8455  0AC6  319F  2775  318A   	fcall	___awtoft
  8456  0AC9  0020               	movlb	0	; select bank0
  8457  0ACA  0828               	movf	?___awtoft,w
  8458  0ACB  00B1               	movwf	___ftmul@f2
  8459  0ACC  0829               	movf	?___awtoft+1,w
  8460  0ACD  00B2               	movwf	___ftmul@f2+1
  8461  0ACE  082A               	movf	?___awtoft+2,w
  8462  0ACF  00B3               	movwf	___ftmul@f2+2
  8463  0AD0  085F               	movf	getPercentValue@i,w
  8464  0AD1  00AE               	movwf	___ftmul@f1
  8465  0AD2  0860               	movf	getPercentValue@i+1,w
  8466  0AD3  00AF               	movwf	___ftmul@f1+1
  8467  0AD4  0861               	movf	getPercentValue@i+2,w
  8468  0AD5  00B0               	movwf	___ftmul@f1+2
  8469  0AD6  318F  274C  318A   	fcall	___ftmul
  8470  0AD9  0020               	movlb	0	; select bank0
  8471  0ADA  082E               	movf	?___ftmul,w
  8472  0ADB  00BE               	movwf	___ftneg@f1
  8473  0ADC  082F               	movf	?___ftmul+1,w
  8474  0ADD  00BF               	movwf	___ftneg@f1+1
  8475  0ADE  0830               	movf	?___ftmul+2,w
  8476  0ADF  00C0               	movwf	___ftneg@f1+2
  8477  0AE0  319B  23CA  318A   	fcall	___ftneg
  8478  0AE3  0020               	movlb	0	; select bank0
  8479  0AE4  083E               	movf	?___ftneg,w
  8480  0AE5  00C4               	movwf	___ftadd@f2
  8481  0AE6  083F               	movf	?___ftneg+1,w
  8482  0AE7  00C5               	movwf	___ftadd@f2+1
  8483  0AE8  0840               	movf	?___ftneg+2,w
  8484  0AE9  00C6               	movwf	___ftadd@f2+2
  8485  0AEA  3000               	movlw	0
  8486  0AEB  00C1               	movwf	___ftadd@f1
  8487  0AEC  3050               	movlw	80
  8488  0AED  00C2               	movwf	___ftadd@f1+1
  8489  0AEE  3042               	movlw	66
  8490  0AEF  00C3               	movwf	___ftadd@f1+2
  8491  0AF0  3184  2475  318A   	fcall	___ftadd
  8492  0AF3  0020               	movlb	0	; select bank0
  8493  0AF4  0841               	movf	?___ftadd,w
  8494  0AF5  00CE               	movwf	___fttol@f1
  8495  0AF6  0842               	movf	?___ftadd+1,w
  8496  0AF7  00CF               	movwf	___fttol@f1+1
  8497  0AF8  0843               	movf	?___ftadd+2,w
  8498  0AF9  00D0               	movwf	___fttol@f1+2
  8499  0AFA  318C  2450         	fcall	___fttol
  8500  0AFC  0020               	movlb	0	; select bank0
  8501  0AFD  084E               	movf	?___fttol,w
  8502  0AFE  0008               	return
  8503  0AFF                     __end_of_getPercentValue:	
  8504                           
  8505                           	psect	text35
  8506  0F4C                     __ptext35:	
  8507 ;; *************** function ___ftmul *****************
  8508 ;; Defined at:
  8509 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  f1              3   14[BANK0 ] float 
  8512 ;;  f2              3   17[BANK0 ] float 
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8515 ;;  sign            1   29[BANK0 ] unsigned char 
  8516 ;;  cntr            1   28[BANK0 ] unsigned char 
  8517 ;;  exp             1   24[BANK0 ] unsigned char 
  8518 ;; Return value:  Size  Location     Type
  8519 ;;                  3   14[BANK0 ] float 
  8520 ;; Registers used:
  8521 ;;		wreg, status,2, status,0, pclath, cstack
  8522 ;; Tracked objects:
  8523 ;;		On entry : 0/0
  8524 ;;		On exit  : 0/0
  8525 ;;		Unchanged: 0/0
  8526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8527 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;Total ram usage:       16 bytes
  8532 ;; Hardware stack levels used:    1
  8533 ;; Hardware stack levels required when called:    6
  8534 ;; This function calls:
  8535 ;;		___ftpack
  8536 ;; This function is called by:
  8537 ;;		_getPercentValue
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           
  8542                           ;psect for function ___ftmul
  8543  0F4C                     ___ftmul:	
  8544                           
  8545                           ;incstack = 0
  8546                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8547  0F4C  0020               	movlb	0	; select bank0
  8548  0F4D  082E               	movf	___ftmul@f1,w
  8549  0F4E  00B4               	movwf	??___ftmul
  8550  0F4F  082F               	movf	___ftmul@f1+1,w
  8551  0F50  00B5               	movwf	??___ftmul+1
  8552  0F51  0830               	movf	___ftmul@f1+2,w
  8553  0F52  00B6               	movwf	??___ftmul+2
  8554  0F53  1003               	clrc
  8555  0F54  0D35               	rlf	??___ftmul+1,w
  8556  0F55  0D36               	rlf	??___ftmul+2,w
  8557  0F56  00B7               	movwf	??___ftmul+3
  8558  0F57  0837               	movf	??___ftmul+3,w
  8559  0F58  00B8               	movwf	___ftmul@exp
  8560  0F59  08B8               	movf	___ftmul@exp,f
  8561  0F5A  1D03               	skipz
  8562  0F5B  2F63               	goto	l5682
  8563  0F5C  3000               	movlw	0
  8564  0F5D  00AE               	movwf	?___ftmul
  8565  0F5E  3000               	movlw	0
  8566  0F5F  00AF               	movwf	?___ftmul+1
  8567  0F60  3000               	movlw	0
  8568  0F61  00B0               	movwf	?___ftmul+2
  8569  0F62  0008               	return
  8570  0F63                     l5682:	
  8571  0F63  0831               	movf	___ftmul@f2,w
  8572  0F64  00B4               	movwf	??___ftmul
  8573  0F65  0832               	movf	___ftmul@f2+1,w
  8574  0F66  00B5               	movwf	??___ftmul+1
  8575  0F67  0833               	movf	___ftmul@f2+2,w
  8576  0F68  00B6               	movwf	??___ftmul+2
  8577  0F69  1003               	clrc
  8578  0F6A  0D35               	rlf	??___ftmul+1,w
  8579  0F6B  0D36               	rlf	??___ftmul+2,w
  8580  0F6C  00B7               	movwf	??___ftmul+3
  8581  0F6D  0837               	movf	??___ftmul+3,w
  8582  0F6E  00BD               	movwf	___ftmul@sign
  8583  0F6F  08BD               	movf	___ftmul@sign,f
  8584  0F70  1D03               	skipz
  8585  0F71  2F79               	goto	l5688
  8586  0F72  3000               	movlw	0
  8587  0F73  00AE               	movwf	?___ftmul
  8588  0F74  3000               	movlw	0
  8589  0F75  00AF               	movwf	?___ftmul+1
  8590  0F76  3000               	movlw	0
  8591  0F77  00B0               	movwf	?___ftmul+2
  8592  0F78  0008               	return
  8593  0F79                     l5688:	
  8594  0F79  083D               	movf	___ftmul@sign,w
  8595  0F7A  3E7B               	addlw	123
  8596  0F7B  00B4               	movwf	??___ftmul
  8597  0F7C  0834               	movf	??___ftmul,w
  8598  0F7D  07B8               	addwf	___ftmul@exp,f
  8599  0F7E  082E               	movf	___ftmul@f1,w
  8600  0F7F  00B4               	movwf	??___ftmul
  8601  0F80  082F               	movf	___ftmul@f1+1,w
  8602  0F81  00B5               	movwf	??___ftmul+1
  8603  0F82  0830               	movf	___ftmul@f1+2,w
  8604  0F83  00B6               	movwf	??___ftmul+2
  8605  0F84  3010               	movlw	16
  8606  0F85                     u4545:	
  8607  0F85  36B6               	lsrf	??___ftmul+2,f
  8608  0F86  0CB5               	rrf	??___ftmul+1,f
  8609  0F87  0CB4               	rrf	??___ftmul,f
  8610  0F88  0B89               	decfsz	9,f
  8611  0F89  2F85               	goto	u4545
  8612  0F8A  0834               	movf	??___ftmul,w
  8613  0F8B  00B7               	movwf	??___ftmul+3
  8614  0F8C  0837               	movf	??___ftmul+3,w
  8615  0F8D  00BD               	movwf	___ftmul@sign
  8616  0F8E  0831               	movf	___ftmul@f2,w
  8617  0F8F  00B4               	movwf	??___ftmul
  8618  0F90  0832               	movf	___ftmul@f2+1,w
  8619  0F91  00B5               	movwf	??___ftmul+1
  8620  0F92  0833               	movf	___ftmul@f2+2,w
  8621  0F93  00B6               	movwf	??___ftmul+2
  8622  0F94  3010               	movlw	16
  8623  0F95                     u4555:	
  8624  0F95  36B6               	lsrf	??___ftmul+2,f
  8625  0F96  0CB5               	rrf	??___ftmul+1,f
  8626  0F97  0CB4               	rrf	??___ftmul,f
  8627  0F98  0B89               	decfsz	9,f
  8628  0F99  2F95               	goto	u4555
  8629  0F9A  0834               	movf	??___ftmul,w
  8630  0F9B  00B7               	movwf	??___ftmul+3
  8631  0F9C  0837               	movf	??___ftmul+3,w
  8632  0F9D  06BD               	xorwf	___ftmul@sign,f
  8633  0F9E  3080               	movlw	128
  8634  0F9F  00B4               	movwf	??___ftmul
  8635  0FA0  0834               	movf	??___ftmul,w
  8636  0FA1  05BD               	andwf	___ftmul@sign,f
  8637  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8638  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8639  0FA4  30FF               	movlw	255
  8640  0FA5  05B1               	andwf	___ftmul@f2,f
  8641  0FA6  30FF               	movlw	255
  8642  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8643  0FA8  3000               	movlw	0
  8644  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8645  0FAA  3000               	movlw	0
  8646  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8647  0FAC  3000               	movlw	0
  8648  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8649  0FAE  3000               	movlw	0
  8650  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8651  0FB0  3007               	movlw	7
  8652  0FB1  00B4               	movwf	??___ftmul
  8653  0FB2  0834               	movf	??___ftmul,w
  8654  0FB3  00BC               	movwf	___ftmul@cntr
  8655  0FB4                     l5700:	
  8656  0FB4  1C2E               	btfss	___ftmul@f1,0
  8657  0FB5  2FBC               	goto	l5704
  8658  0FB6  0831               	movf	___ftmul@f2,w
  8659  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8660  0FB8  0832               	movf	___ftmul@f2+1,w
  8661  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8662  0FBA  0833               	movf	___ftmul@f2+2,w
  8663  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8664  0FBC                     l5704:	
  8665  0FBC  3001               	movlw	1
  8666  0FBD                     u4575:	
  8667  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8668  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8669  0FBF  0CAE               	rrf	___ftmul@f1,f
  8670  0FC0  0B89               	decfsz	9,f
  8671  0FC1  2FBD               	goto	u4575
  8672  0FC2  3001               	movlw	1
  8673  0FC3                     u4585:	
  8674  0FC3  35B1               	lslf	___ftmul@f2,f
  8675  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8676  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8677  0FC6  0B89               	decfsz	9,f
  8678  0FC7  2FC3               	goto	u4585
  8679  0FC8  3001               	movlw	1
  8680  0FC9  02BC               	subwf	___ftmul@cntr,f
  8681  0FCA  1D03               	btfss	3,2
  8682  0FCB  2FB4               	goto	l5700
  8683  0FCC  3009               	movlw	9
  8684  0FCD  00B4               	movwf	??___ftmul
  8685  0FCE  0834               	movf	??___ftmul,w
  8686  0FCF  00BC               	movwf	___ftmul@cntr
  8687  0FD0                     l5712:	
  8688  0FD0  1C2E               	btfss	___ftmul@f1,0
  8689  0FD1  2FD8               	goto	l5716
  8690  0FD2  0831               	movf	___ftmul@f2,w
  8691  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8692  0FD4  0832               	movf	___ftmul@f2+1,w
  8693  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8694  0FD6  0833               	movf	___ftmul@f2+2,w
  8695  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8696  0FD8                     l5716:	
  8697  0FD8  3001               	movlw	1
  8698  0FD9                     u4615:	
  8699  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8700  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8701  0FDB  0CAE               	rrf	___ftmul@f1,f
  8702  0FDC  0B89               	decfsz	9,f
  8703  0FDD  2FD9               	goto	u4615
  8704  0FDE  3001               	movlw	1
  8705  0FDF                     u4625:	
  8706  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8707  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8708  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8709  0FE2  0B89               	decfsz	9,f
  8710  0FE3  2FDF               	goto	u4625
  8711  0FE4  3001               	movlw	1
  8712  0FE5  02BC               	subwf	___ftmul@cntr,f
  8713  0FE6  1D03               	btfss	3,2
  8714  0FE7  2FD0               	goto	l5712
  8715  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8716  0FE9  00A0               	movwf	___ftpack@arg
  8717  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8718  0FEB  00A1               	movwf	___ftpack@arg+1
  8719  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8720  0FED  00A2               	movwf	___ftpack@arg+2
  8721  0FEE  0838               	movf	___ftmul@exp,w
  8722  0FEF  00B4               	movwf	??___ftmul
  8723  0FF0  0834               	movf	??___ftmul,w
  8724  0FF1  00A3               	movwf	___ftpack@exp
  8725  0FF2  083D               	movf	___ftmul@sign,w
  8726  0FF3  00B5               	movwf	??___ftmul+1
  8727  0FF4  0835               	movf	??___ftmul+1,w
  8728  0FF5  00A4               	movwf	___ftpack@sign
  8729  0FF6  3189  2173         	fcall	___ftpack
  8730  0FF8  0020               	movlb	0	; select bank0
  8731  0FF9  0820               	movf	?___ftpack,w
  8732  0FFA  00AE               	movwf	?___ftmul
  8733  0FFB  0821               	movf	?___ftpack+1,w
  8734  0FFC  00AF               	movwf	?___ftmul+1
  8735  0FFD  0822               	movf	?___ftpack+2,w
  8736  0FFE  00B0               	movwf	?___ftmul+2
  8737  0FFF  0008               	return
  8738  1000                     __end_of___ftmul:	
  8739                           
  8740                           	psect	text36
  8741  1D8C                     __ptext36:	
  8742 ;; *************** function _setMemory_Modify *****************
  8743 ;; Defined at:
  8744 ;;		line 1065 in file "../src/MCU_B1.c"
  8745 ;; Parameters:    Size  Location     Type
  8746 ;;  command         1    wreg     unsigned char 
  8747 ;; Auto vars:     Size  Location     Type
  8748 ;;  command         1    1[BANK0 ] unsigned char 
  8749 ;; Return value:  Size  Location     Type
  8750 ;;		None               void
  8751 ;; Registers used:
  8752 ;;		wreg, status,2, status,0
  8753 ;; Tracked objects:
  8754 ;;		On entry : 0/0
  8755 ;;		On exit  : 0/0
  8756 ;;		Unchanged: 0/0
  8757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8762 ;;Total ram usage:        2 bytes
  8763 ;; Hardware stack levels used:    1
  8764 ;; Hardware stack levels required when called:    5
  8765 ;; This function calls:
  8766 ;;		Nothing
  8767 ;; This function is called by:
  8768 ;;		_setLog_Code
  8769 ;;		_setRFSW_AdjControl
  8770 ;; This function uses a non-reentrant model
  8771 ;;
  8772                           
  8773                           
  8774                           ;psect for function _setMemory_Modify
  8775  1D8C                     _setMemory_Modify:	
  8776                           
  8777                           ;incstack = 0
  8778                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8779                           ;setMemory_Modify@command stored from wreg
  8780  1D8C  0020               	movlb	0	; select bank0
  8781  1D8D  00A1               	movwf	setMemory_Modify@command
  8782                           
  8783                           ;MCU_B1.c: 1066: Memory.Modify = command == 1 ? 1 : 0;
  8784  1D8E  0821               	movf	setMemory_Modify@command,w
  8785  1D8F  3A01               	xorlw	1
  8786  1D90  3000               	movlw	0
  8787  1D91  1903               	skipnz
  8788  1D92  3001               	movlw	1
  8789  1D93  00A0               	movwf	??_setMemory_Modify
  8790  1D94  0023               	movlb	3	; select bank3
  8791  1D95  0844               	movf	(_Memory^(0+384)+36),w
  8792  1D96  0020               	movlb	0	; select bank0
  8793  1D97  0620               	xorwf	??_setMemory_Modify,w
  8794  1D98  39FE               	andlw	-2
  8795  1D99  0620               	xorwf	??_setMemory_Modify,w
  8796  1D9A  0023               	movlb	3	; select bank3
  8797  1D9B  00C4               	movwf	(_Memory^(0+384)+36)
  8798                           
  8799                           ;MCU_B1.c: 1067: Memory.Time = 0;
  8800  1D9C  01C2               	clrf	(_Memory^(0+384)+34)
  8801  1D9D  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8802  1D9E  0008               	return
  8803  1D9F                     __end_of_setMemory_Modify:	
  8804                           
  8805                           	psect	text37
  8806  1D34                     __ptext37:	
  8807 ;; *************** function _getRF_KeyStatus *****************
  8808 ;; Defined at:
  8809 ;;		line 191 in file "../src/RF_Control_B1.c"
  8810 ;; Parameters:    Size  Location     Type
  8811 ;;		None
  8812 ;; Auto vars:     Size  Location     Type
  8813 ;;  key             1    1[BANK0 ] unsigned char 
  8814 ;; Return value:  Size  Location     Type
  8815 ;;                  1    wreg      unsigned char 
  8816 ;; Registers used:
  8817 ;;		wreg, status,2
  8818 ;; Tracked objects:
  8819 ;;		On entry : 0/0
  8820 ;;		On exit  : 0/0
  8821 ;;		Unchanged: 0/0
  8822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;Total ram usage:        3 bytes
  8828 ;; Hardware stack levels used:    1
  8829 ;; Hardware stack levels required when called:    5
  8830 ;; This function calls:
  8831 ;;		Nothing
  8832 ;; This function is called by:
  8833 ;;		_setRF_Main
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function _getRF_KeyStatus
  8839  1D34                     _getRF_KeyStatus:	
  8840                           
  8841                           ;RF_Control_B1.c: 192: char key = 0;
  8842                           
  8843                           ;incstack = 0
  8844                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8845  1D34  0020               	movlb	0	; select bank0
  8846  1D35  01A1               	clrf	getRF_KeyStatus@key
  8847                           
  8848                           ;RF_Control_B1.c: 202: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8849  1D36  01A2               	clrf	_getRF_KeyStatus$4904
  8850  1D37  0AA2               	incf	_getRF_KeyStatus$4904,f
  8851  1D38  1F0C               	btfss	12,6	;volatile
  8852  1D39  1A0C               	btfsc	12,4	;volatile
  8853  1D3A  2D3F               	goto	l6674
  8854  1D3B  1C0C               	btfss	12,0	;volatile
  8855  1D3C  1B8C               	btfsc	12,7	;volatile
  8856  1D3D  2D3F               	goto	l6674
  8857  1D3E  01A2               	clrf	_getRF_KeyStatus$4904
  8858  1D3F                     l6674:	
  8859  1D3F  0822               	movf	_getRF_KeyStatus$4904,w
  8860  1D40  00A0               	movwf	??_getRF_KeyStatus
  8861  1D41  0820               	movf	??_getRF_KeyStatus,w
  8862  1D42  00A1               	movwf	getRF_KeyStatus@key
  8863                           
  8864                           ;RF_Control_B1.c: 204: return key;
  8865  1D43  0821               	movf	getRF_KeyStatus@key,w
  8866  1D44  0008               	return
  8867  1D45                     __end_of_getRF_KeyStatus:	
  8868                           
  8869                           	psect	text38
  8870  1D23                     __ptext38:	
  8871 ;; *************** function _getBuz_GO *****************
  8872 ;; Defined at:
  8873 ;;		line 82 in file "../src/Buzzer_B1.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;  i               2    4[BANK0 ] int 
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  2    0[BANK0 ] int 
  8880 ;; Registers used:
  8881 ;;		wreg, status,2, status,0
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8887 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;Total ram usage:        6 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    5
  8894 ;; This function calls:
  8895 ;;		Nothing
  8896 ;; This function is called by:
  8897 ;;		_setRF_Main
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           
  8902                           ;psect for function _getBuz_GO
  8903  1D23                     _getBuz_GO:	
  8904                           
  8905                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8906                           
  8907                           ;incstack = 0
  8908                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8909  1D23  0021               	movlb	1	; select bank1
  8910  1D24  0C2E               	rrf	_Buz1^(0+128),w
  8911  1D25  3901               	andlw	1
  8912  1D26  0020               	movlb	0	; select bank0
  8913  1D27  00A2               	movwf	??_getBuz_GO
  8914  1D28  01A3               	clrf	??_getBuz_GO+1
  8915  1D29  0822               	movf	??_getBuz_GO,w
  8916  1D2A  00A4               	movwf	getBuz_GO@i
  8917  1D2B  0823               	movf	??_getBuz_GO+1,w
  8918  1D2C  00A5               	movwf	getBuz_GO@i+1
  8919                           
  8920                           ;Buzzer_B1.c: 84: return i;
  8921  1D2D  0825               	movf	getBuz_GO@i+1,w
  8922  1D2E  01A1               	clrf	?_getBuz_GO+1
  8923  1D2F  07A1               	addwf	?_getBuz_GO+1,f
  8924  1D30  0824               	movf	getBuz_GO@i,w
  8925  1D31  01A0               	clrf	?_getBuz_GO
  8926  1D32  07A0               	addwf	?_getBuz_GO,f
  8927  1D33  0008               	return
  8928  1D34                     __end_of_getBuz_GO:	
  8929                           
  8930                           	psect	text39
  8931  1CC3                     __ptext39:	
  8932 ;; *************** function _RF_RxDisable *****************
  8933 ;; Defined at:
  8934 ;;		line 266 in file "../src/RF_Control_B1.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;		None
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;		None
  8939 ;; Return value:  Size  Location     Type
  8940 ;;		None               void
  8941 ;; Registers used:
  8942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;Total ram usage:        0 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:    7
  8955 ;; This function calls:
  8956 ;;		_CC2500_WriteCommand
  8957 ;; This function is called by:
  8958 ;;		_setRF_Main
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           
  8963                           ;psect for function _RF_RxDisable
  8964  1CC3                     _RF_RxDisable:	
  8965                           
  8966                           ;RF_Control_B1.c: 267: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8967                           
  8968                           ;incstack = 0
  8969                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8970  1CC3  0021               	movlb	1	; select bank1
  8971  1CC4  18BA               	btfsc	_RF1^(0+128),1
  8972  1CC5  2CC8               	goto	l2057
  8973  1CC6  1DBA               	btfss	_RF1^(0+128),3
  8974  1CC7  0008               	return
  8975  1CC8                     l2057:	
  8976                           
  8977                           ;RF_Control_B1.c: 268: RF1.RxStatus = 0;
  8978  1CC8  11BA               	bcf	_RF1^(0+128),3
  8979                           
  8980                           ;RF_Control_B1.c: 269: RF1.ReceiveGO = 0;
  8981  1CC9  10BA               	bcf	_RF1^(0+128),1
  8982                           
  8983                           ;RF_Control_B1.c: 270: CC2500_WriteCommand(0x36);
  8984  1CCA  3036               	movlw	54
  8985  1CCB  319E  2648  319C   	fcall	_CC2500_WriteCommand
  8986                           
  8987                           ;RF_Control_B1.c: 272: CC2500_WriteCommand(0x3A);
  8988  1CCE  303A               	movlw	58
  8989  1CCF  319E  2648         	fcall	_CC2500_WriteCommand
  8990  1CD1  0008               	return
  8991  1CD2                     __end_of_RF_RxDisable:	
  8992                           
  8993                           	psect	text40
  8994  09D4                     __ptext40:	
  8995 ;; *************** function _CC2500_TxData *****************
  8996 ;; Defined at:
  8997 ;;		line 32 in file "../src/CC2500_B1.c"
  8998 ;; Parameters:    Size  Location     Type
  8999 ;;		None
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9002 ;; Return value:  Size  Location     Type
  9003 ;;		None               void
  9004 ;; Registers used:
  9005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9006 ;; Tracked objects:
  9007 ;;		On entry : 0/0
  9008 ;;		On exit  : 0/0
  9009 ;;		Unchanged: 0/0
  9010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;Total ram usage:        2 bytes
  9016 ;; Hardware stack levels used:    1
  9017 ;; Hardware stack levels required when called:    7
  9018 ;; This function calls:
  9019 ;;		_CC2500_WriteByte
  9020 ;;		_CC2500_WriteCommand
  9021 ;;		_Timeout_Counter
  9022 ;;		_set_TimeoutCleared
  9023 ;; This function is called by:
  9024 ;;		_setRF_Main
  9025 ;; This function uses a non-reentrant model
  9026 ;;
  9027                           
  9028                           
  9029                           ;psect for function _CC2500_TxData
  9030  09D4                     _CC2500_TxData:	
  9031                           
  9032                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9033                           ;CC2500_B1.c: 35: RC0 = 0;
  9034                           
  9035                           ;incstack = 0
  9036                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9037  09D4  0020               	movlb	0	; select bank0
  9038  09D5  100E               	bcf	14,0	;volatile
  9039                           
  9040                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9041  09D6  307F               	movlw	127
  9042  09D7  00A4               	movwf	??_CC2500_TxData
  9043  09D8  0824               	movf	??_CC2500_TxData,w
  9044  09D9  00FB               	movwf	_SPI0Buffer
  9045                           
  9046                           ;CC2500_B1.c: 37: while (RC5 == 1 && myMain.Timeout == 0) {
  9047  09DA  29DE               	goto	l6332
  9048  09DB                     l6330:	
  9049                           
  9050                           ;CC2500_B1.c: 38: Timeout_Counter();
  9051  09DB  319D  25DA  3189   	fcall	_Timeout_Counter
  9052  09DE                     l6332:	
  9053  09DE  0020               	movlb	0	; select bank0
  9054  09DF  1E8E               	btfss	14,5	;volatile
  9055  09E0  29E4               	goto	l6336
  9056  09E1  0021               	movlb	1	; select bank1
  9057  09E2  1D2B               	btfss	(_myMain^(0+128)+11),2
  9058  09E3  29DB               	goto	l6330
  9059  09E4                     l6336:	
  9060                           
  9061                           ;CC2500_B1.c: 39: };
  9062                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9063  09E4  319B  2397  3189   	fcall	_set_TimeoutCleared
  9064                           
  9065                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9066  09E7  319D  25B2  3189   	fcall	_CC2500_WriteByte
  9067                           
  9068                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9069  09EA  0021               	movlb	1	; select bank1
  9070  09EB  0853               	movf	_Tx_Length^(0+128),w
  9071  09EC  0020               	movlb	0	; select bank0
  9072  09ED  00A4               	movwf	??_CC2500_TxData
  9073  09EE  0824               	movf	??_CC2500_TxData,w
  9074  09EF  00FB               	movwf	_SPI0Buffer
  9075                           
  9076                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9077  09F0  319D  25B2  3189   	fcall	_CC2500_WriteByte
  9078                           
  9079                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9080  09F3  0020               	movlb	0	; select bank0
  9081  09F4  01A5               	clrf	CC2500_TxData@loop_e
  9082  09F5                     l6350:	
  9083  09F5  0021               	movlb	1	; select bank1
  9084  09F6  0853               	movf	_Tx_Length^(0+128),w
  9085  09F7  0020               	movlb	0	; select bank0
  9086  09F8  0225               	subwf	CC2500_TxData@loop_e,w
  9087  09F9  1803               	btfsc	3,0
  9088  09FA  2A0D               	goto	l231
  9089                           
  9090                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9091  09FB  0825               	movf	CC2500_TxData@loop_e,w
  9092  09FC  3E20               	addlw	_RF_Data& (0+255)
  9093  09FD  0086               	movwf	6
  9094  09FE  3001               	movlw	1	; select bank2/3
  9095  09FF  0087               	movwf	7
  9096  0A00  0801               	movf	1,w
  9097  0A01  00A4               	movwf	??_CC2500_TxData
  9098  0A02  0824               	movf	??_CC2500_TxData,w
  9099  0A03  00FB               	movwf	_SPI0Buffer
  9100                           
  9101                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9102  0A04  319D  25B2  3189   	fcall	_CC2500_WriteByte
  9103  0A07  3001               	movlw	1
  9104  0A08  0020               	movlb	0	; select bank0
  9105  0A09  00A4               	movwf	??_CC2500_TxData
  9106  0A0A  0824               	movf	??_CC2500_TxData,w
  9107  0A0B  07A5               	addwf	CC2500_TxData@loop_e,f
  9108  0A0C  29F5               	goto	l6350
  9109  0A0D                     l231:	
  9110                           
  9111                           ;CC2500_B1.c: 48: }
  9112                           ;CC2500_B1.c: 49: RC0 = 1;
  9113  0A0D  140E               	bsf	14,0	;volatile
  9114                           
  9115                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9116  0A0E  3035               	movlw	53
  9117  0A0F  319E  2648  3189   	fcall	_CC2500_WriteCommand
  9118                           
  9119                           ;CC2500_B1.c: 51: while (RC1 == 0 && myMain.Timeout == 0) {
  9120  0A12  2A16               	goto	l6356
  9121  0A13                     l6354:	
  9122                           
  9123                           ;CC2500_B1.c: 52: Timeout_Counter();
  9124  0A13  319D  25DA  3189   	fcall	_Timeout_Counter
  9125  0A16                     l6356:	
  9126  0A16  0020               	movlb	0	; select bank0
  9127  0A17  188E               	btfsc	14,1	;volatile
  9128  0A18  2A1C               	goto	l6360
  9129  0A19  0021               	movlb	1	; select bank1
  9130  0A1A  1D2B               	btfss	(_myMain^(0+128)+11),2
  9131  0A1B  2A13               	goto	l6354
  9132  0A1C                     l6360:	
  9133                           
  9134                           ;CC2500_B1.c: 53: };
  9135                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9136  0A1C  319B  2397  3189   	fcall	_set_TimeoutCleared
  9137                           
  9138                           ;CC2500_B1.c: 56: while (RC1 == 1 && myMain.Timeout == 0) {
  9139  0A1F  2A23               	goto	l6364
  9140  0A20                     l6362:	
  9141                           
  9142                           ;CC2500_B1.c: 57: Timeout_Counter();
  9143  0A20  319D  25DA  3189   	fcall	_Timeout_Counter
  9144  0A23                     l6364:	
  9145  0A23  0020               	movlb	0	; select bank0
  9146  0A24  1C8E               	btfss	14,1	;volatile
  9147  0A25  2A29               	goto	l6368
  9148  0A26  0021               	movlb	1	; select bank1
  9149  0A27  1D2B               	btfss	(_myMain^(0+128)+11),2
  9150  0A28  2A20               	goto	l6362
  9151  0A29                     l6368:	
  9152                           
  9153                           ;CC2500_B1.c: 58: };
  9154                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9155  0A29  319B  2397  3189   	fcall	_set_TimeoutCleared
  9156                           
  9157                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9158  0A2C  3036               	movlw	54
  9159  0A2D  319E  2648  3189   	fcall	_CC2500_WriteCommand
  9160                           
  9161                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9162  0A30  303B               	movlw	59
  9163  0A31  319E  2648         	fcall	_CC2500_WriteCommand
  9164                           
  9165                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9166  0A33  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9167  0A34  0008               	return
  9168  0A35                     __end_of_CC2500_TxData:	
  9169                           
  9170                           	psect	text41
  9171  0B65                     __ptext41:	
  9172 ;; *************** function _CC2500_RxData *****************
  9173 ;; Defined at:
  9174 ;;		line 70 in file "../src/CC2500_B1.c"
  9175 ;; Parameters:    Size  Location     Type
  9176 ;;		None
  9177 ;; Auto vars:     Size  Location     Type
  9178 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9179 ;; Return value:  Size  Location     Type
  9180 ;;		None               void
  9181 ;; Registers used:
  9182 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;Total ram usage:        2 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    7
  9195 ;; This function calls:
  9196 ;;		_CC2500_ReadByte
  9197 ;;		_CC2500_ReadStatus
  9198 ;;		_CC2500_WriteByte
  9199 ;;		_Timeout_Counter
  9200 ;;		_set_TimeoutCleared
  9201 ;; This function is called by:
  9202 ;;		_setRF_Main
  9203 ;; This function uses a non-reentrant model
  9204 ;;
  9205                           
  9206                           
  9207                           ;psect for function _CC2500_RxData
  9208  0B65                     _CC2500_RxData:	
  9209                           
  9210                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9211                           ;CC2500_B1.c: 75: if (RC1 == 1)
  9212                           
  9213                           ;incstack = 0
  9214                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9215  0B65  0020               	movlb	0	; select bank0
  9216  0B66  188E               	btfsc	14,1	;volatile
  9217  0B67  2B6C               	goto	l6382
  9218  0B68  2B75               	goto	l6388
  9219  0B69                     l6380:	
  9220                           ;CC2500_B1.c: 76: {
  9221                           ;CC2500_B1.c: 77: while (RC1 == 1 && myMain.Timeout == 0) {
  9222                           
  9223                           
  9224                           ;CC2500_B1.c: 78: Timeout_Counter();
  9225  0B69  319D  25DA  318B   	fcall	_Timeout_Counter
  9226  0B6C                     l6382:	
  9227  0B6C  0020               	movlb	0	; select bank0
  9228  0B6D  1C8E               	btfss	14,1	;volatile
  9229  0B6E  2B72               	goto	l6386
  9230  0B6F  0021               	movlb	1	; select bank1
  9231  0B70  1D2B               	btfss	(_myMain^(0+128)+11),2
  9232  0B71  2B69               	goto	l6380
  9233  0B72                     l6386:	
  9234                           
  9235                           ;CC2500_B1.c: 79: };
  9236                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9237  0B72  319B  2397  318B   	fcall	_set_TimeoutCleared
  9238  0B75                     l6388:	
  9239                           
  9240                           ;CC2500_B1.c: 81: }
  9241                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9242  0B75  303B               	movlw	59
  9243  0B76  319F  2797  318B   	fcall	_CC2500_ReadStatus
  9244                           
  9245                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9246  0B79  0021               	movlb	1	; select bank1
  9247  0B7A  0856               	movf	_s_data^(0+128),w
  9248  0B7B  1903               	btfsc	3,2
  9249  0B7C  0008               	return
  9250                           
  9251                           ;CC2500_B1.c: 86: RC0 = 0;
  9252  0B7D  0020               	movlb	0	; select bank0
  9253  0B7E  100E               	bcf	14,0	;volatile
  9254                           
  9255                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9256  0B7F  30FF               	movlw	255
  9257  0B80  00A4               	movwf	??_CC2500_RxData
  9258  0B81  0824               	movf	??_CC2500_RxData,w
  9259  0B82  00FB               	movwf	_SPI0Buffer
  9260                           
  9261                           ;CC2500_B1.c: 88: while (RC5 == 1 && myMain.Timeout == 0) {
  9262  0B83  2B87               	goto	l6398
  9263  0B84                     l6396:	
  9264                           
  9265                           ;CC2500_B1.c: 89: Timeout_Counter();
  9266  0B84  319D  25DA  318B   	fcall	_Timeout_Counter
  9267  0B87                     l6398:	
  9268  0B87  0020               	movlb	0	; select bank0
  9269  0B88  1E8E               	btfss	14,5	;volatile
  9270  0B89  2B8D               	goto	l6402
  9271  0B8A  0021               	movlb	1	; select bank1
  9272  0B8B  1D2B               	btfss	(_myMain^(0+128)+11),2
  9273  0B8C  2B84               	goto	l6396
  9274  0B8D                     l6402:	
  9275                           
  9276                           ;CC2500_B1.c: 90: };
  9277                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9278  0B8D  319B  2397  318B   	fcall	_set_TimeoutCleared
  9279                           
  9280                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9281  0B90  319D  25B2  318B   	fcall	_CC2500_WriteByte
  9282                           
  9283                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9284  0B93  319E  2619  318B   	fcall	_CC2500_ReadByte
  9285                           
  9286                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9287  0B96  087B               	movf	_SPI0Buffer,w
  9288  0B97  0020               	movlb	0	; select bank0
  9289  0B98  00A4               	movwf	??_CC2500_RxData
  9290  0B99  0824               	movf	??_CC2500_RxData,w
  9291  0B9A  0021               	movlb	1	; select bank1
  9292  0B9B  00D1               	movwf	_Rx_Length^(0+128)
  9293                           
  9294                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9295  0B9C  0020               	movlb	0	; select bank0
  9296  0B9D  01A5               	clrf	CC2500_RxData@loop_f
  9297  0B9E                     l6418:	
  9298  0B9E  0021               	movlb	1	; select bank1
  9299  0B9F  0851               	movf	_Rx_Length^(0+128),w
  9300  0BA0  0020               	movlb	0	; select bank0
  9301  0BA1  0225               	subwf	CC2500_RxData@loop_f,w
  9302  0BA2  1803               	btfsc	3,0
  9303  0BA3  2BB6               	goto	l6420
  9304                           
  9305                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9306  0BA4  319E  2619  318B   	fcall	_CC2500_ReadByte
  9307                           
  9308                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9309  0BA7  087B               	movf	_SPI0Buffer,w
  9310  0BA8  0020               	movlb	0	; select bank0
  9311  0BA9  00A4               	movwf	??_CC2500_RxData
  9312  0BAA  0825               	movf	CC2500_RxData@loop_f,w
  9313  0BAB  3E20               	addlw	_RF_Data& (0+255)
  9314  0BAC  0086               	movwf	6
  9315  0BAD  3001               	movlw	1	; select bank2/3
  9316  0BAE  0087               	movwf	7
  9317  0BAF  0824               	movf	??_CC2500_RxData,w
  9318  0BB0  0081               	movwf	1
  9319  0BB1  3001               	movlw	1
  9320  0BB2  00A4               	movwf	??_CC2500_RxData
  9321  0BB3  0824               	movf	??_CC2500_RxData,w
  9322  0BB4  07A5               	addwf	CC2500_RxData@loop_f,f
  9323  0BB5  2B9E               	goto	l6418
  9324  0BB6                     l6420:	
  9325                           
  9326                           ;CC2500_B1.c: 99: }
  9327                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9328  0BB6  319E  2619  318B   	fcall	_CC2500_ReadByte
  9329                           
  9330                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9331  0BB9  087B               	movf	_SPI0Buffer,w
  9332  0BBA  0020               	movlb	0	; select bank0
  9333  0BBB  00A4               	movwf	??_CC2500_RxData
  9334  0BBC  0824               	movf	??_CC2500_RxData,w
  9335  0BBD  0021               	movlb	1	; select bank1
  9336  0BBE  00D0               	movwf	_RSSI^(0+128)
  9337                           
  9338                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9339  0BBF  319E  2619         	fcall	_CC2500_ReadByte
  9340                           
  9341                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9342  0BC1  087B               	movf	_SPI0Buffer,w
  9343  0BC2  0020               	movlb	0	; select bank0
  9344  0BC3  00A4               	movwf	??_CC2500_RxData
  9345  0BC4  0824               	movf	??_CC2500_RxData,w
  9346  0BC5  0021               	movlb	1	; select bank1
  9347  0BC6  00CD               	movwf	_CRC^(0+128)
  9348                           
  9349                           ;CC2500_B1.c: 104: RC0 = 1;
  9350  0BC7  0020               	movlb	0	; select bank0
  9351  0BC8  140E               	bsf	14,0	;volatile
  9352                           
  9353                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9354  0BC9  0021               	movlb	1	; select bank1
  9355  0BCA  1BCD               	btfsc	_CRC^(0+128),7
  9356                           
  9357                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9358  0BCB  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9359                           
  9360                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9361  0BCC  11BA               	bcf	_RF1^(0+128),3
  9362                           
  9363                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9364  0BCD  14BA               	bsf	_RF1^(0+128),1
  9365  0BCE  0008               	return
  9366  0BCF                     __end_of_CC2500_RxData:	
  9367                           
  9368                           	psect	text42
  9369  1F97                     __ptext42:	
  9370 ;; *************** function _CC2500_ReadStatus *****************
  9371 ;; Defined at:
  9372 ;;		line 301 in file "../src/CC2500_B1.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;  status_addr     1    wreg     unsigned char 
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9377 ;; Return value:  Size  Location     Type
  9378 ;;		None               void
  9379 ;; Registers used:
  9380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9381 ;; Tracked objects:
  9382 ;;		On entry : 0/0
  9383 ;;		On exit  : 0/0
  9384 ;;		Unchanged: 0/0
  9385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;Total ram usage:        2 bytes
  9391 ;; Hardware stack levels used:    1
  9392 ;; Hardware stack levels required when called:    6
  9393 ;; This function calls:
  9394 ;;		_CC2500_ReadByte
  9395 ;;		_CC2500_WriteByte
  9396 ;;		_Timeout_Counter
  9397 ;;		_set_TimeoutCleared
  9398 ;; This function is called by:
  9399 ;;		_CC2500_RxData
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           
  9404                           ;psect for function _CC2500_ReadStatus
  9405  1F97                     _CC2500_ReadStatus:	
  9406                           
  9407                           ;incstack = 0
  9408                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9409                           ;CC2500_ReadStatus@status_addr stored from wreg
  9410  1F97  0020               	movlb	0	; select bank0
  9411  1F98  00A3               	movwf	CC2500_ReadStatus@status_addr
  9412                           
  9413                           ;CC2500_B1.c: 302: RC0 = 0;
  9414  1F99  100E               	bcf	14,0	;volatile
  9415                           
  9416                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9417  1F9A  0823               	movf	CC2500_ReadStatus@status_addr,w
  9418  1F9B  3EC0               	addlw	192
  9419  1F9C  00A2               	movwf	??_CC2500_ReadStatus
  9420  1F9D  0822               	movf	??_CC2500_ReadStatus,w
  9421  1F9E  00FB               	movwf	_SPI0Buffer
  9422                           
  9423                           ;CC2500_B1.c: 305: while (RC5 == 1 && myMain.Timeout == 0) {
  9424  1F9F  2FA3               	goto	l6196
  9425  1FA0                     l6194:	
  9426                           
  9427                           ;CC2500_B1.c: 306: Timeout_Counter();
  9428  1FA0  319D  25DA  319F   	fcall	_Timeout_Counter
  9429  1FA3                     l6196:	
  9430  1FA3  0020               	movlb	0	; select bank0
  9431  1FA4  1E8E               	btfss	14,5	;volatile
  9432  1FA5  2FA9               	goto	l6200
  9433  1FA6  0021               	movlb	1	; select bank1
  9434  1FA7  1D2B               	btfss	(_myMain^(0+128)+11),2
  9435  1FA8  2FA0               	goto	l6194
  9436  1FA9                     l6200:	
  9437                           
  9438                           ;CC2500_B1.c: 307: };
  9439                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9440  1FA9  319B  2397  319F   	fcall	_set_TimeoutCleared
  9441                           
  9442                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9443  1FAC  319D  25B2  319F   	fcall	_CC2500_WriteByte
  9444                           
  9445                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9446  1FAF  319E  2619         	fcall	_CC2500_ReadByte
  9447                           
  9448                           ;CC2500_B1.c: 312: RC0 = 1;
  9449  1FB1  0020               	movlb	0	; select bank0
  9450  1FB2  140E               	bsf	14,0	;volatile
  9451                           
  9452                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9453  1FB3  087B               	movf	_SPI0Buffer,w
  9454  1FB4  00A2               	movwf	??_CC2500_ReadStatus
  9455  1FB5  0822               	movf	??_CC2500_ReadStatus,w
  9456  1FB6  0021               	movlb	1	; select bank1
  9457  1FB7  00D6               	movwf	_s_data^(0+128)
  9458  1FB8  0008               	return
  9459  1FB9                     __end_of_CC2500_ReadStatus:	
  9460                           
  9461                           	psect	text43
  9462  1E19                     __ptext43:	
  9463 ;; *************** function _CC2500_ReadByte *****************
  9464 ;; Defined at:
  9465 ;;		line 235 in file "../src/CC2500_B1.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;		None
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9470 ;; Return value:  Size  Location     Type
  9471 ;;		None               void
  9472 ;; Registers used:
  9473 ;;		wreg, status,2, status,0
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;Total ram usage:        2 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    5
  9486 ;; This function calls:
  9487 ;;		Nothing
  9488 ;; This function is called by:
  9489 ;;		_CC2500_RxData
  9490 ;;		_CC2500_ReadStatus
  9491 ;;		_CC2500_ReadREG
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           
  9496                           ;psect for function _CC2500_ReadByte
  9497  1E19                     _CC2500_ReadByte:	
  9498                           
  9499                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9500                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9501                           
  9502                           ;incstack = 0
  9503                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9504  1E19  0020               	movlb	0	; select bank0
  9505  1E1A  01A1               	clrf	CC2500_ReadByte@loop_b
  9506  1E1B                     L5:	
  9507  1E1B  3008               	movlw	8
  9508  1E1C  0221               	subwf	CC2500_ReadByte@loop_b,w
  9509  1E1D  1803               	btfsc	3,0
  9510  1E1E  0008               	return
  9511                           
  9512                           ;CC2500_B1.c: 238: RC3 = 1;
  9513  1E1F  158E               	bsf	14,3	;volatile
  9514                           
  9515                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9516  1E20  1003               	clrc
  9517  1E21  0DFB               	rlf	_SPI0Buffer,f
  9518                           
  9519                           ;CC2500_B1.c: 240: if (RC5 == 1)
  9520  1E22  1E8E               	btfss	14,5	;volatile
  9521  1E23  2E26               	goto	l6100
  9522                           
  9523                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9524  1E24  147B               	bsf	_SPI0Buffer,0
  9525  1E25  2E2A               	goto	l6102
  9526  1E26                     l6100:	
  9527                           
  9528                           ;CC2500_B1.c: 242: else
  9529                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9530  1E26  30FE               	movlw	254
  9531  1E27  00A0               	movwf	??_CC2500_ReadByte
  9532  1E28  0820               	movf	??_CC2500_ReadByte,w
  9533  1E29  05FB               	andwf	_SPI0Buffer,f
  9534  1E2A                     l6102:	
  9535                           
  9536                           ;CC2500_B1.c: 244: RC3 = 0;
  9537  1E2A  118E               	bcf	14,3	;volatile
  9538  1E2B  3001               	movlw	1
  9539  1E2C  00A0               	movwf	??_CC2500_ReadByte
  9540  1E2D  0820               	movf	??_CC2500_ReadByte,w
  9541  1E2E  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9542  1E2F  2E1B               	goto	L5
  9543  1E30                     __end_of_CC2500_ReadByte:	
  9544                           
  9545                           	psect	text44
  9546  1B67                     __ptext44:	
  9547 ;; *************** function _RF_Initialization *****************
  9548 ;; Defined at:
  9549 ;;		line 9 in file "../src/RF_Control_B1.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;		None
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;		None               void
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0, pclath, cstack
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;Total ram usage:        0 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    6
  9570 ;; This function calls:
  9571 ;;		_setRF_Initialization
  9572 ;; This function is called by:
  9573 ;;		_main
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           
  9578                           ;psect for function _RF_Initialization
  9579  1B67                     _RF_Initialization:	
  9580                           
  9581                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9582                           
  9583                           ;incstack = 0
  9584                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9585  1B67  319C  2430         	fcall	_setRF_Initialization
  9586  1B69  0008               	return
  9587  1B6A                     __end_of_RF_Initialization:	
  9588                           
  9589                           	psect	text45
  9590  1C30                     __ptext45:	
  9591 ;; *************** function _setRF_Initialization *****************
  9592 ;; Defined at:
  9593 ;;		line 43 in file "../src/RF_Control_B1.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;		None
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;		None
  9598 ;; Return value:  Size  Location     Type
  9599 ;;		None               void
  9600 ;; Registers used:
  9601 ;;		wreg
  9602 ;; Tracked objects:
  9603 ;;		On entry : 0/0
  9604 ;;		On exit  : 0/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;Total ram usage:        1 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    5
  9614 ;; This function calls:
  9615 ;;		Nothing
  9616 ;; This function is called by:
  9617 ;;		_RF_Initialization
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           
  9622                           ;psect for function _setRF_Initialization
  9623  1C30                     _setRF_Initialization:	
  9624                           
  9625                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9626                           
  9627                           ;incstack = 0
  9628                           ; Regs used in _setRF_Initialization: [wreg]
  9629  1C30  3015               	movlw	21
  9630  1C31  0020               	movlb	0	; select bank0
  9631  1C32  00A0               	movwf	??_setRF_Initialization
  9632  1C33  0820               	movf	??_setRF_Initialization,w
  9633  1C34  0021               	movlb	1	; select bank1
  9634  1C35  00D3               	movwf	_Tx_Length^(0+128)
  9635                           
  9636                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9637  1C36  300A               	movlw	10
  9638  1C37  00C1               	movwf	(_RF1^(0+128)+7)
  9639  1C38  3000               	movlw	0
  9640  1C39  00C2               	movwf	(_RF1^(0+128)+8)
  9641  1C3A  0008               	return
  9642  1C3B                     __end_of_setRF_Initialization:	
  9643                           
  9644                           	psect	text46
  9645  1D68                     __ptext46:	
  9646 ;; *************** function _Mcu_Initialization *****************
  9647 ;; Defined at:
  9648 ;;		line 30 in file "../src/MCU_B1.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;		None
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;		None
  9653 ;; Return value:  Size  Location     Type
  9654 ;;		None               void
  9655 ;; Registers used:
  9656 ;;		wreg, status,2, status,0, pclath, cstack
  9657 ;; Tracked objects:
  9658 ;;		On entry : 0/0
  9659 ;;		On exit  : 0/0
  9660 ;;		Unchanged: 0/0
  9661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;Total ram usage:        0 bytes
  9667 ;; Hardware stack levels used:    1
  9668 ;; Hardware stack levels required when called:    6
  9669 ;; This function calls:
  9670 ;;		_ADC_Set
  9671 ;;		_Fosc_Set
  9672 ;;		_IOC_Set
  9673 ;;		_IO_Set
  9674 ;;		_TMR1_Set
  9675 ;;		_WDT_Set
  9676 ;; This function is called by:
  9677 ;;		_main
  9678 ;; This function uses a non-reentrant model
  9679 ;;
  9680                           
  9681                           
  9682                           ;psect for function _Mcu_Initialization
  9683  1D68                     _Mcu_Initialization:	
  9684                           
  9685                           ;MCU_B1.c: 32: Fosc_Set();
  9686                           
  9687                           ;incstack = 0
  9688                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9689  1D68  319B  2393  319D   	fcall	_Fosc_Set
  9690                           
  9691                           ;MCU_B1.c: 34: IO_Set();
  9692  1D6B  319E  2630  319D   	fcall	_IO_Set
  9693                           
  9694                           ;MCU_B1.c: 36: ;;
  9695                           ;MCU_B1.c: 38: TMR1_Set();
  9696  1D6E  319C  248D  319D   	fcall	_TMR1_Set
  9697                           
  9698                           ;MCU_B1.c: 40: ADC_Set();
  9699  1D71  319B  23B3  319D   	fcall	_ADC_Set
  9700                           
  9701                           ;MCU_B1.c: 42: ;;
  9702                           ;MCU_B1.c: 44: ;;
  9703                           ;MCU_B1.c: 46: IOC_Set();
  9704  1D74  319C  2481  319D   	fcall	_IOC_Set
  9705                           
  9706                           ;MCU_B1.c: 48: ;;
  9707                           ;MCU_B1.c: 50: ;;
  9708                           ;MCU_B1.c: 52: WDT_Set();
  9709  1D77  319C  2425         	fcall	_WDT_Set
  9710  1D79  0008               	return
  9711  1D7A                     __end_of_Mcu_Initialization:	
  9712                           
  9713                           	psect	text47
  9714  1C25                     __ptext47:	
  9715 ;; *************** function _WDT_Set *****************
  9716 ;; Defined at:
  9717 ;;		line 1084 in file "../src/MCU_B1.c"
  9718 ;; Parameters:    Size  Location     Type
  9719 ;;		None
  9720 ;; Auto vars:     Size  Location     Type
  9721 ;;		None
  9722 ;; Return value:  Size  Location     Type
  9723 ;;		None               void
  9724 ;; Registers used:
  9725 ;;		wreg
  9726 ;; Tracked objects:
  9727 ;;		On entry : 0/0
  9728 ;;		On exit  : 0/0
  9729 ;;		Unchanged: 0/0
  9730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;Total ram usage:        1 bytes
  9736 ;; Hardware stack levels used:    1
  9737 ;; Hardware stack levels required when called:    5
  9738 ;; This function calls:
  9739 ;;		Nothing
  9740 ;; This function is called by:
  9741 ;;		_Mcu_Initialization
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           
  9746                           ;psect for function _WDT_Set
  9747  1C25                     _WDT_Set:	
  9748                           
  9749                           ;MCU_B1.c: 1091: WDTCON = 0b00010111;;
  9750                           
  9751                           ;incstack = 0
  9752                           ; Regs used in _WDT_Set: [wreg]
  9753  1C25  3017               	movlw	23
  9754  1C26  0021               	movlb	1	; select bank1
  9755  1C27  0097               	movwf	23	;volatile
  9756                           
  9757                           ;MCU_B1.c: 1093: WDT.Enable = 1;
  9758  1C28  144B               	bsf	_WDT^(0+128),0
  9759                           
  9760                           ;MCU_B1.c: 1094: WDT.Timer = 10;
  9761  1C29  300A               	movlw	10
  9762  1C2A  0020               	movlb	0	; select bank0
  9763  1C2B  00A0               	movwf	??_WDT_Set
  9764  1C2C  0820               	movf	??_WDT_Set,w
  9765  1C2D  0021               	movlb	1	; select bank1
  9766  1C2E  00CC               	movwf	(_WDT^(0+128)+1)
  9767  1C2F  0008               	return
  9768  1C30                     __end_of_WDT_Set:	
  9769                           
  9770                           	psect	text48
  9771  1C8D                     __ptext48:	
  9772 ;; *************** function _TMR1_Set *****************
  9773 ;; Defined at:
  9774 ;;		line 199 in file "../src/MCU_B1.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;		None
  9777 ;; Auto vars:     Size  Location     Type
  9778 ;;		None
  9779 ;; Return value:  Size  Location     Type
  9780 ;;		None               void
  9781 ;; Registers used:
  9782 ;;		wreg
  9783 ;; Tracked objects:
  9784 ;;		On entry : 0/0
  9785 ;;		On exit  : 0/0
  9786 ;;		Unchanged: 0/0
  9787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;Total ram usage:        0 bytes
  9793 ;; Hardware stack levels used:    1
  9794 ;; Hardware stack levels required when called:    5
  9795 ;; This function calls:
  9796 ;;		Nothing
  9797 ;; This function is called by:
  9798 ;;		_Mcu_Initialization
  9799 ;; This function uses a non-reentrant model
  9800 ;;
  9801                           
  9802                           
  9803                           ;psect for function _TMR1_Set
  9804  1C8D                     _TMR1_Set:	
  9805                           
  9806                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9807                           
  9808                           ;incstack = 0
  9809                           ; Regs used in _TMR1_Set: [wreg]
  9810  1C8D  3041               	movlw	65
  9811  1C8E  0020               	movlb	0	; select bank0
  9812  1C8F  0098               	movwf	24	;volatile
  9813                           
  9814                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9815  1C90  30FA               	movlw	250
  9816  1C91  0097               	movwf	23	;volatile
  9817                           
  9818                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9819  1C92  3038               	movlw	56
  9820  1C93  0096               	movwf	22	;volatile
  9821                           
  9822                           ;MCU_B1.c: 203: TMR1IE = 1;
  9823  1C94  0021               	movlb	1	; select bank1
  9824  1C95  1411               	bsf	17,0	;volatile
  9825                           
  9826                           ;MCU_B1.c: 204: PEIE = 1;
  9827  1C96  170B               	bsf	11,6	;volatile
  9828                           
  9829                           ;MCU_B1.c: 205: GIE = 1;
  9830  1C97  178B               	bsf	11,7	;volatile
  9831  1C98  0008               	return
  9832  1C99                     __end_of_TMR1_Set:	
  9833                           
  9834                           	psect	text49
  9835  1E30                     __ptext49:	
  9836 ;; *************** function _IO_Set *****************
  9837 ;; Defined at:
  9838 ;;		line 60 in file "../src/MCU_B1.c"
  9839 ;; Parameters:    Size  Location     Type
  9840 ;;		None
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;		None
  9843 ;; Return value:  Size  Location     Type
  9844 ;;		None               void
  9845 ;; Registers used:
  9846 ;;		wreg, status,2
  9847 ;; Tracked objects:
  9848 ;;		On entry : 0/0
  9849 ;;		On exit  : 0/0
  9850 ;;		Unchanged: 0/0
  9851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;Total ram usage:        0 bytes
  9857 ;; Hardware stack levels used:    1
  9858 ;; Hardware stack levels required when called:    5
  9859 ;; This function calls:
  9860 ;;		Nothing
  9861 ;; This function is called by:
  9862 ;;		_Mcu_Initialization
  9863 ;; This function uses a non-reentrant model
  9864 ;;
  9865                           
  9866                           
  9867                           ;psect for function _IO_Set
  9868  1E30                     _IO_Set:	
  9869                           
  9870                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9871                           
  9872                           ;incstack = 0
  9873                           ; Regs used in _IO_Set: [wreg+status,2]
  9874  1E30  30F7               	movlw	247
  9875  1E31  0021               	movlb	1	; select bank1
  9876  1E32  008C               	movwf	12	;volatile
  9877                           
  9878                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9879  1E33  3004               	movlw	4
  9880  1E34  008D               	movwf	13	;volatile
  9881                           
  9882                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9883  1E35  3026               	movlw	38
  9884  1E36  008E               	movwf	14	;volatile
  9885                           
  9886                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9887  1E37  0022               	movlb	2	; select bank2
  9888  1E38  018C               	clrf	12	;volatile
  9889                           
  9890                           ;MCU_B1.c: 92: LATB = 0b00000000;;
  9891  1E39  018D               	clrf	13	;volatile
  9892                           
  9893                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9894  1E3A  018E               	clrf	14	;volatile
  9895                           
  9896                           ;MCU_B1.c: 94: ANSELA = 0b00001110;;
  9897  1E3B  300E               	movlw	14
  9898  1E3C  0023               	movlb	3	; select bank3
  9899  1E3D  008C               	movwf	12	;volatile
  9900                           
  9901                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9902  1E3E  018D               	clrf	13	;volatile
  9903                           
  9904                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9905  1E3F  018E               	clrf	14	;volatile
  9906                           
  9907                           ;MCU_B1.c: 97: PORTA = 0b11110111;;
  9908  1E40  30F7               	movlw	247
  9909  1E41  0020               	movlb	0	; select bank0
  9910  1E42  008C               	movwf	12	;volatile
  9911                           
  9912                           ;MCU_B1.c: 98: PORTB = 0b00000100;;
  9913  1E43  3004               	movlw	4
  9914  1E44  008D               	movwf	13	;volatile
  9915                           
  9916                           ;MCU_B1.c: 99: PORTC = 0b00100110;;
  9917  1E45  3026               	movlw	38
  9918  1E46  008E               	movwf	14	;volatile
  9919  1E47  0008               	return
  9920  1E48                     __end_of_IO_Set:	
  9921                           
  9922                           	psect	text50
  9923  1C81                     __ptext50:	
  9924 ;; *************** function _IOC_Set *****************
  9925 ;; Defined at:
  9926 ;;		line 365 in file "../src/MCU_B1.c"
  9927 ;; Parameters:    Size  Location     Type
  9928 ;;		None
  9929 ;; Auto vars:     Size  Location     Type
  9930 ;;		None
  9931 ;; Return value:  Size  Location     Type
  9932 ;;		None               void
  9933 ;; Registers used:
  9934 ;;		wreg, status,2
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;Total ram usage:        0 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:    5
  9947 ;; This function calls:
  9948 ;;		Nothing
  9949 ;; This function is called by:
  9950 ;;		_Mcu_Initialization
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           
  9955                           ;psect for function _IOC_Set
  9956  1C81                     _IOC_Set:	
  9957                           
  9958                           ;MCU_B1.c: 366: WPUB2 = 0;
  9959                           
  9960                           ;incstack = 0
  9961                           ; Regs used in _IOC_Set: [wreg+status,2]
  9962  1C81  0024               	movlb	4	; select bank4
  9963  1C82  110D               	bcf	13,2	;volatile
  9964                           
  9965                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9966  1C83  0027               	movlb	7	; select bank7
  9967  1C84  0194               	clrf	20	;volatile
  9968                           
  9969                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9970  1C85  3004               	movlw	4
  9971  1C86  0095               	movwf	21	;volatile
  9972                           
  9973                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9974  1C87  0196               	clrf	22	;volatile
  9975                           
  9976                           ;MCU_B1.c: 393: IOCIE = 1;
  9977  1C88  158B               	bsf	11,3	;volatile
  9978                           
  9979                           ;MCU_B1.c: 394: IOCIF = 0;
  9980  1C89  100B               	bcf	11,0	;volatile
  9981                           
  9982                           ;MCU_B1.c: 395: PEIE = 1;
  9983  1C8A  170B               	bsf	11,6	;volatile
  9984                           
  9985                           ;MCU_B1.c: 396: GIE = 1;
  9986  1C8B  178B               	bsf	11,7	;volatile
  9987  1C8C  0008               	return
  9988  1C8D                     __end_of_IOC_Set:	
  9989                           
  9990                           	psect	text51
  9991  1B93                     __ptext51:	
  9992 ;; *************** function _Fosc_Set *****************
  9993 ;; Defined at:
  9994 ;;		line 56 in file "../src/MCU_B1.c"
  9995 ;; Parameters:    Size  Location     Type
  9996 ;;		None
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;		None
  9999 ;; Return value:  Size  Location     Type
 10000 ;;		None               void
 10001 ;; Registers used:
 10002 ;;		wreg
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;Total ram usage:        0 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    5
 10015 ;; This function calls:
 10016 ;;		Nothing
 10017 ;; This function is called by:
 10018 ;;		_Mcu_Initialization
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           
 10023                           ;psect for function _Fosc_Set
 10024  1B93                     _Fosc_Set:	
 10025                           
 10026                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10027                           
 10028                           ;incstack = 0
 10029                           ; Regs used in _Fosc_Set: [wreg]
 10030  1B93  3078               	movlw	120
 10031  1B94  0021               	movlb	1	; select bank1
 10032  1B95  0099               	movwf	25	;volatile
 10033  1B96  0008               	return
 10034  1B97                     __end_of_Fosc_Set:	
 10035                           
 10036                           	psect	text52
 10037  1BB3                     __ptext52:	
 10038 ;; *************** function _ADC_Set *****************
 10039 ;; Defined at:
 10040 ;;		line 420 in file "../src/MCU_B1.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;		None
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;		None
 10045 ;; Return value:  Size  Location     Type
 10046 ;;		None               void
 10047 ;; Registers used:
 10048 ;;		wreg
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/0
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;Total ram usage:        0 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    5
 10061 ;; This function calls:
 10062 ;;		Nothing
 10063 ;; This function is called by:
 10064 ;;		_Mcu_Initialization
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           
 10069                           ;psect for function _ADC_Set
 10070  1BB3                     _ADC_Set:	
 10071                           
 10072                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10073                           
 10074                           ;incstack = 0
 10075                           ; Regs used in _ADC_Set: [wreg]
 10076  1BB3  30F3               	movlw	243
 10077  1BB4  0021               	movlb	1	; select bank1
 10078  1BB5  009E               	movwf	30	;volatile
 10079                           
 10080                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10081  1BB6  30C1               	movlw	193
 10082  1BB7  0022               	movlb	2	; select bank2
 10083  1BB8  0097               	movwf	23	;volatile
 10084  1BB9  0008               	return
 10085  1BBA                     __end_of_ADC_Set:	
 10086                           
 10087                           	psect	text53
 10088  0043                     __ptext53:	
 10089 ;; *************** function _Load_Main *****************
 10090 ;; Defined at:
 10091 ;;		line 39 in file "../src/OverLoad_B1.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;		None
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  i               1   15[BANK0 ] unsigned char 
 10096 ;;  error           1   14[BANK0 ] unsigned char 
 10097 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10098 ;;  j               1   11[BANK0 ] unsigned char 
 10099 ;; Return value:  Size  Location     Type
 10100 ;;		None               void
 10101 ;; Registers used:
 10102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;Total ram usage:        7 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; Hardware stack levels required when called:    8
 10115 ;; This function calls:
 10116 ;;		___lwdiv
 10117 ;;		_getAll_DimmerLights_AdjGO
 10118 ;;		_getMain_All_Error_Status
 10119 ;;		_getMain_LightsStatus
 10120 ;;		_getMain_Lights_Count
 10121 ;;		_getMain_LoadOK
 10122 ;;		_setLoad_AH_AL_Restore
 10123 ;; This function is called by:
 10124 ;;		_main
 10125 ;; This function uses a non-reentrant model
 10126 ;;
 10127                           
 10128                           
 10129                           ;psect for function _Load_Main
 10130  0043                     _Load_Main:	
 10131                           
 10132                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10133                           
 10134                           ;incstack = 0
 10135                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10136  0043  0020               	movlb	0	; select bank0
 10137  0044  01AF               	clrf	Load_Main@i
 10138  0045  01AB               	clrf	Load_Main@j
 10139  0046  3000               	movlw	0
 10140  0047  3191  21D2  3180   	fcall	_getMain_All_Error_Status
 10141  004A  0020               	movlb	0	; select bank0
 10142  004B  00A9               	movwf	??_Load_Main
 10143  004C  0829               	movf	??_Load_Main,w
 10144  004D  00AE               	movwf	Load_Main@error
 10145  004E  01AC               	clrf	Load_Main@adjgo
 10146                           
 10147                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10148  004F  0022               	movlb	2	; select bank2
 10149  0050  1C41               	btfss	_Load^(0+256),0
 10150  0051  29BA               	goto	l1550
 10151                           
 10152                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10153  0052  319B  23EF  3180   	fcall	_getAll_DimmerLights_AdjGO
 10154  0055  0020               	movlb	0	; select bank0
 10155  0056  00A9               	movwf	??_Load_Main
 10156  0057  0829               	movf	??_Load_Main,w
 10157  0058  00AC               	movwf	Load_Main@adjgo
 10158                           
 10159                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10160  0059  01AD               	clrf	_Load_Main$3653
 10161  005A  3191  2116  3180   	fcall	_getMain_LightsStatus
 10162  005D  3A01               	xorlw	1
 10163  005E  1D03               	skipz
 10164  005F  2869               	goto	l7756
 10165  0060  0020               	movlb	0	; select bank0
 10166  0061  08AE               	movf	Load_Main@error,f
 10167  0062  1D03               	skipz
 10168  0063  2869               	goto	l7756
 10169  0064  08AC               	movf	Load_Main@adjgo,f
 10170  0065  1D03               	skipz
 10171  0066  2869               	goto	l7756
 10172  0067  01AD               	clrf	_Load_Main$3653
 10173  0068  0AAD               	incf	_Load_Main$3653,f
 10174  0069                     l7756:	
 10175  0069  0020               	movlb	0	; select bank0
 10176  006A  082D               	movf	_Load_Main$3653,w
 10177  006B  0022               	movlb	2	; select bank2
 10178  006C  10C1               	bcf	_Load^(0+256),1
 10179  006D  1D03               	skipz
 10180  006E  14C1               	bsf	_Load^(0+256),1
 10181                           
 10182                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10183  006F  319C  24A6  3180   	fcall	_getMain_LoadOK
 10184  0072  3A01               	xorlw	1
 10185  0073  1D03               	skipz
 10186  0074  287A               	goto	l1553
 10187  0075  0022               	movlb	2	; select bank2
 10188  0076  19C1               	btfsc	_Load^(0+256),3
 10189  0077  287A               	goto	l1553
 10190                           
 10191                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10192  0078  15C1               	bsf	_Load^(0+256),3
 10193                           
 10194                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10195  0079  13C1               	bcf	_Load^(0+256),7
 10196  007A                     l1553:	
 10197                           
 10198                           ;OverLoad_B1.c: 51: }
 10199                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10200  007A  0022               	movlb	2	; select bank2
 10201  007B  1CC1               	btfss	_Load^(0+256),1
 10202  007C  298A               	goto	l1554
 10203                           
 10204                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10205  007D  1541               	bsf	_Load^(0+256),2
 10206                           
 10207                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10208  007E  1E41               	btfss	_Load^(0+256),4
 10209  007F  2988               	goto	l1555
 10210                           
 10211                           ;OverLoad_B1.c: 58: Load.Time++;
 10212  0080  3001               	movlw	1
 10213  0081  07C2               	addwf	(_Load^(0+256)+1),f
 10214  0082  3000               	movlw	0
 10215  0083  3DC3               	addwfc	((_Load+1)^(0+256)+1),f
 10216                           
 10217                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10218  0084  3000               	movlw	0
 10219  0085  0243               	subwf	((_Load+1)^(0+256)+1),w
 10220  0086  3005               	movlw	5
 10221  0087  1903               	skipnz
 10222  0088  0242               	subwf	(_Load^(0+256)+1),w
 10223  0089  1C03               	skipc
 10224  008A  0008               	return
 10225                           
 10226                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10227  008B  01C2               	clrf	(_Load^(0+256)+1)
 10228  008C  01C3               	clrf	((_Load+1)^(0+256)+1)
 10229                           
 10230                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10231  008D  1241               	bcf	_Load^(0+256),4
 10232                           
 10233                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
 10234  008E  0020               	movlb	0	; select bank0
 10235  008F  01AF               	clrf	Load_Main@i
 10236  0090  0AAF               	incf	Load_Main@i,f
 10237  0091  3004               	movlw	4
 10238  0092  022F               	subwf	Load_Main@i,w
 10239  0093  1803               	btfsc	3,0
 10240  0094  28BF               	goto	l7784
 10241  0095                     l7778:	
 10242                           
 10243                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10244  0095  352F               	lslf	Load_Main@i,w
 10245  0096  3E4C               	addlw	(_Load+11)& (0+255)
 10246  0097  0086               	movwf	6
 10247  0098  3001               	movlw	1	; select bank2/3
 10248  0099  0087               	movwf	7
 10249  009A  3F40               	moviw [0]fsr1
 10250  009B  00A9               	movwf	??_Load_Main
 10251  009C  3F41               	moviw [1]fsr1
 10252  009D  00AA               	movwf	??_Load_Main+1
 10253  009E  0829               	movf	??_Load_Main,w
 10254  009F  0022               	movlb	2	; select bank2
 10255  00A0  07C6               	addwf	(_Load^(0+256)+5),f
 10256  00A1  0020               	movlb	0	; select bank0
 10257  00A2  082A               	movf	??_Load_Main+1,w
 10258  00A3  0022               	movlb	2	; select bank2
 10259  00A4  3DC7               	addwfc	((_Load+1)^(0+256)+5),f
 10260                           
 10261                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10262  00A5  0020               	movlb	0	; select bank0
 10263  00A6  352F               	lslf	Load_Main@i,w
 10264  00A7  3E56               	addlw	(_Load+21)& (0+255)
 10265  00A8  0086               	movwf	6
 10266  00A9  3001               	movlw	1	; select bank2/3
 10267  00AA  0087               	movwf	7
 10268  00AB  3F40               	moviw [0]fsr1
 10269  00AC  00A9               	movwf	??_Load_Main
 10270  00AD  3F41               	moviw [1]fsr1
 10271  00AE  00AA               	movwf	??_Load_Main+1
 10272  00AF  0829               	movf	??_Load_Main,w
 10273  00B0  0022               	movlb	2	; select bank2
 10274  00B1  07C8               	addwf	(_Load^(0+256)+7),f
 10275  00B2  0020               	movlb	0	; select bank0
 10276  00B3  082A               	movf	??_Load_Main+1,w
 10277  00B4  0022               	movlb	2	; select bank2
 10278  00B5  3DC9               	addwfc	((_Load+1)^(0+256)+7),f
 10279  00B6  3001               	movlw	1
 10280  00B7  0020               	movlb	0	; select bank0
 10281  00B8  00A9               	movwf	??_Load_Main
 10282  00B9  0829               	movf	??_Load_Main,w
 10283  00BA  07AF               	addwf	Load_Main@i,f
 10284  00BB  3004               	movlw	4
 10285  00BC  022F               	subwf	Load_Main@i,w
 10286  00BD  1C03               	skipc
 10287  00BE  2895               	goto	l7778
 10288  00BF                     l7784:	
 10289                           
 10290                           ;OverLoad_B1.c: 66: }
 10291                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
 10292  00BF  3003               	movlw	3
 10293  00C0  00A0               	movwf	___lwdiv@divisor
 10294  00C1  3000               	movlw	0
 10295  00C2  00A1               	movwf	___lwdiv@divisor+1
 10296  00C3  0022               	movlb	2	; select bank2
 10297  00C4  0847               	movf	((_Load+1)^(0+256)+5),w
 10298  00C5  0020               	movlb	0	; select bank0
 10299  00C6  01A3               	clrf	___lwdiv@dividend+1
 10300  00C7  07A3               	addwf	___lwdiv@dividend+1,f
 10301  00C8  0022               	movlb	2	; select bank2
 10302  00C9  0846               	movf	(_Load^(0+256)+5),w
 10303  00CA  0020               	movlb	0	; select bank0
 10304  00CB  01A2               	clrf	___lwdiv@dividend
 10305  00CC  07A2               	addwf	___lwdiv@dividend,f
 10306  00CD  3193  230F  3180   	fcall	___lwdiv
 10307  00D0  0020               	movlb	0	; select bank0
 10308  00D1  0821               	movf	?___lwdiv+1,w
 10309  00D2  0022               	movlb	2	; select bank2
 10310  00D3  01C7               	clrf	((_Load+1)^(0+256)+5)
 10311  00D4  07C7               	addwf	((_Load+1)^(0+256)+5),f
 10312  00D5  0020               	movlb	0	; select bank0
 10313  00D6  0820               	movf	?___lwdiv,w
 10314  00D7  0022               	movlb	2	; select bank2
 10315  00D8  01C6               	clrf	(_Load^(0+256)+5)
 10316  00D9  07C6               	addwf	(_Load^(0+256)+5),f
 10317                           
 10318                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
 10319  00DA  3003               	movlw	3
 10320  00DB  0020               	movlb	0	; select bank0
 10321  00DC  00A0               	movwf	___lwdiv@divisor
 10322  00DD  3000               	movlw	0
 10323  00DE  00A1               	movwf	___lwdiv@divisor+1
 10324  00DF  0022               	movlb	2	; select bank2
 10325  00E0  0849               	movf	((_Load+1)^(0+256)+7),w
 10326  00E1  0020               	movlb	0	; select bank0
 10327  00E2  01A3               	clrf	___lwdiv@dividend+1
 10328  00E3  07A3               	addwf	___lwdiv@dividend+1,f
 10329  00E4  0022               	movlb	2	; select bank2
 10330  00E5  0848               	movf	(_Load^(0+256)+7),w
 10331  00E6  0020               	movlb	0	; select bank0
 10332  00E7  01A2               	clrf	___lwdiv@dividend
 10333  00E8  07A2               	addwf	___lwdiv@dividend,f
 10334  00E9  3193  230F  3180   	fcall	___lwdiv
 10335  00EC  0020               	movlb	0	; select bank0
 10336  00ED  0821               	movf	?___lwdiv+1,w
 10337  00EE  0022               	movlb	2	; select bank2
 10338  00EF  01C9               	clrf	((_Load+1)^(0+256)+7)
 10339  00F0  07C9               	addwf	((_Load+1)^(0+256)+7),f
 10340  00F1  0020               	movlb	0	; select bank0
 10341  00F2  0820               	movf	?___lwdiv,w
 10342  00F3  0022               	movlb	2	; select bank2
 10343  00F4  01C8               	clrf	(_Load^(0+256)+7)
 10344  00F5  07C8               	addwf	(_Load^(0+256)+7),f
 10345                           
 10346                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10347  00F6  319E  267B  3180   	fcall	_setLoad_AH_AL_Restore
 10348                           
 10349                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10350  00F9  0022               	movlb	2	; select bank2
 10351  00FA  0847               	movf	((_Load+1)^(0+256)+5),w
 10352  00FB  0249               	subwf	((_Load+1)^(0+256)+7),w
 10353  00FC  1D03               	skipz
 10354  00FD  2900               	goto	u7855
 10355  00FE  0846               	movf	(_Load^(0+256)+5),w
 10356  00FF  0248               	subwf	(_Load^(0+256)+7),w
 10357  0100                     u7855:	
 10358  0100  1803               	skipnc
 10359  0101  0008               	return
 10360                           
 10361                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10362  0102  3005               	movlw	5
 10363  0103  3E41               	addlw	_Load& (0+255)
 10364  0104  0086               	movwf	6
 10365  0105  3001               	movlw	1	; select bank2/3
 10366  0106  0087               	movwf	7
 10367  0107  0948               	comf	(_Load^(0+256)+7),w
 10368  0108  0020               	movlb	0	; select bank0
 10369  0109  00A9               	movwf	??_Load_Main
 10370  010A  0022               	movlb	2	; select bank2
 10371  010B  0949               	comf	((_Load+1)^(0+256)+7),w
 10372  010C  0020               	movlb	0	; select bank0
 10373  010D  00AA               	movwf	??_Load_Main+1
 10374  010E  0AA9               	incf	??_Load_Main,f
 10375  010F  1903               	skipnz
 10376  0110  0AAA               	incf	??_Load_Main+1,f
 10377  0111  3F40               	moviw [0]fsr1
 10378  0112  0729               	addwf	??_Load_Main,w
 10379  0113  0022               	movlb	2	; select bank2
 10380  0114  00E0               	movwf	(_Load^(0+256)+31)
 10381  0115  3F41               	moviw [1]fsr1
 10382  0116  0020               	movlb	0	; select bank0
 10383  0117  3D2A               	addwfc	??_Load_Main+1,w
 10384  0118  0022               	movlb	2	; select bank2
 10385  0119  00E1               	movwf	(_Load^(0+256)+32)
 10386                           
 10387                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10388  011A  01C6               	clrf	(_Load^(0+256)+5)
 10389  011B  01C7               	clrf	((_Load+1)^(0+256)+5)
 10390                           
 10391                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10392  011C  01C8               	clrf	(_Load^(0+256)+7)
 10393  011D  01C9               	clrf	((_Load+1)^(0+256)+7)
 10394                           
 10395                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10396  011E  319C  24F2  3180   	fcall	_getMain_Lights_Count
 10397  0121  0020               	movlb	0	; select bank0
 10398  0122  00A9               	movwf	??_Load_Main
 10399  0123  0829               	movf	??_Load_Main,w
 10400  0124  0022               	movlb	2	; select bank2
 10401  0125  00ED               	movwf	(_Load^(0+256)+44)
 10402                           
 10403                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10404  0126  1DC1               	btfss	_Load^(0+256),3
 10405  0127  2953               	goto	l7816
 10406                           
 10407                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10408  0128  3002               	movlw	2
 10409  0129  026A               	subwf	(_Load^(0+256)+41),w
 10410  012A  1803               	skipnc
 10411  012B  2953               	goto	l7816
 10412                           
 10413                           ;OverLoad_B1.c: 79: Load.Count++;
 10414  012C  3001               	movlw	1
 10415  012D  0020               	movlb	0	; select bank0
 10416  012E  00A9               	movwf	??_Load_Main
 10417  012F  0829               	movf	??_Load_Main,w
 10418  0130  0022               	movlb	2	; select bank2
 10419  0131  07EA               	addwf	(_Load^(0+256)+41),f
 10420                           
 10421                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10422  0132  086A               	movf	(_Load^(0+256)+41),w
 10423  0133  3A01               	xorlw	1
 10424  0134  1D03               	skipz
 10425  0135  2940               	goto	l7808
 10426                           
 10427                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
 10428  0136  3002               	movlw	2
 10429  0137  0020               	movlb	0	; select bank0
 10430  0138  00A9               	movwf	??_Load_Main
 10431  0139  0829               	movf	??_Load_Main,w
 10432  013A  0022               	movlb	2	; select bank2
 10433  013B  00EC               	movwf	(_Load^(0+256)+43)
 10434                           
 10435                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*57);
 10436  013C  3074               	movlw	116
 10437  013D  00E6               	movwf	(_Load^(0+256)+37)
 10438  013E  3004               	movlw	4
 10439  013F  294B               	goto	L6
 10440  0140                     l7808:	
 10441                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
 10442                           
 10443  0140  086A               	movf	(_Load^(0+256)+41),w
 10444  0141  3A02               	xorlw	2
 10445  0142  1D03               	skipz
 10446  0143  2953               	goto	l7816
 10447                           
 10448                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
 10449  0144  086D               	movf	(_Load^(0+256)+44),w
 10450  0145  3A01               	xorlw	1
 10451  0146  1D03               	skipz
 10452  0147  294D               	goto	l7814
 10453                           
 10454                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(2.5*57);
 10455  0148  308E               	movlw	142
 10456  0149  00E6               	movwf	(_Load^(0+256)+37)
 10457  014A  3000               	movlw	0
 10458  014B                     L6:	
 10459  014B  00E7               	movwf	(_Load^(0+256)+38)
 10460                           
 10461                           ;OverLoad_B1.c: 86: } else {
 10462  014C  2953               	goto	l7816
 10463  014D                     l7814:	
 10464                           
 10465                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(2.5*57) + Load.TotalLoad;
 10466  014D  084A               	movf	(_Load^(0+256)+9),w
 10467  014E  3E8E               	addlw	142
 10468  014F  00E6               	movwf	(_Load^(0+256)+37)
 10469  0150  3000               	movlw	0
 10470  0151  3D4B               	addwfc	((_Load+1)^(0+256)+9),w
 10471  0152  00E7               	movwf	((_Load+1)^(0+256)+37)
 10472  0153                     l7816:	
 10473                           
 10474                           ;OverLoad_B1.c: 88: }
 10475                           ;OverLoad_B1.c: 89: }
 10476                           ;OverLoad_B1.c: 90: }
 10477                           ;OverLoad_B1.c: 91: }
 10478                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
 10479  0153  0867               	movf	((_Load+1)^(0+256)+37),w
 10480  0154  0261               	subwf	((_Load+1)^(0+256)+31),w
 10481  0155  1D03               	skipz
 10482  0156  2959               	goto	u7915
 10483  0157  0866               	movf	(_Load^(0+256)+37),w
 10484  0158  0260               	subwf	(_Load^(0+256)+31),w
 10485  0159                     u7915:	
 10486  0159  1C03               	skipc
 10487  015A  2968               	goto	l7826
 10488                           
 10489                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
 10490  015B  3001               	movlw	1
 10491  015C  0020               	movlb	0	; select bank0
 10492  015D  00A9               	movwf	??_Load_Main
 10493  015E  0829               	movf	??_Load_Main,w
 10494  015F  0022               	movlb	2	; select bank2
 10495  0160  07EB               	addwf	(_Load^(0+256)+42),f
 10496                           
 10497                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
 10498  0161  086B               	movf	(_Load^(0+256)+42),w
 10499  0162  026C               	subwf	(_Load^(0+256)+43),w
 10500  0163  1803               	skipnc
 10501  0164  0008               	return
 10502                           
 10503                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
 10504  0165  01EB               	clrf	(_Load^(0+256)+42)
 10505                           
 10506                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
 10507  0166  16C1               	bsf	_Load^(0+256),5
 10508                           
 10509                           ;OverLoad_B1.c: 118: }
 10510                           ;OverLoad_B1.c: 119: } else {
 10511  0167  0008               	return
 10512  0168                     l7826:	
 10513                           
 10514                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
 10515  0168  01EB               	clrf	(_Load^(0+256)+42)
 10516                           
 10517                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
 10518  0169  1DC1               	btfss	_Load^(0+256),3
 10519  016A  0008               	return
 10520                           
 10521                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
 10522  016B  1BC1               	btfsc	_Load^(0+256),7
 10523  016C  0008               	return
 10524                           
 10525                           ;OverLoad_B1.c: 123: Load.SafeCount++;
 10526  016D  3001               	movlw	1
 10527  016E  0020               	movlb	0	; select bank0
 10528  016F  00A9               	movwf	??_Load_Main
 10529  0170  0829               	movf	??_Load_Main,w
 10530  0171  0022               	movlb	2	; select bank2
 10531  0172  07EE               	addwf	(_Load^(0+256)+45),f
 10532                           
 10533                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
 10534  0173  3003               	movlw	3
 10535  0174  026E               	subwf	(_Load^(0+256)+45),w
 10536  0175  1C03               	skipc
 10537  0176  0008               	return
 10538                           
 10539                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
 10540  0177  01EE               	clrf	(_Load^(0+256)+45)
 10541                           
 10542                           ;OverLoad_B1.c: 126: Load.OK = 1;
 10543  0178  17C1               	bsf	_Load^(0+256),7
 10544                           
 10545                           ;OverLoad_B1.c: 127: Load.Run = 0;
 10546  0179  11C1               	bcf	_Load^(0+256),3
 10547                           
 10548                           ;OverLoad_B1.c: 128: Load.Count = 0;
 10549  017A  01EA               	clrf	(_Load^(0+256)+41)
 10550                           
 10551                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
 10552  017B  0861               	movf	((_Load+1)^(0+256)+31),w
 10553  017C  01CB               	clrf	((_Load+1)^(0+256)+9)
 10554  017D  07CB               	addwf	((_Load+1)^(0+256)+9),f
 10555  017E  0860               	movf	(_Load^(0+256)+31),w
 10556  017F  01CA               	clrf	(_Load^(0+256)+9)
 10557  0180  07CA               	addwf	(_Load^(0+256)+9),f
 10558                           
 10559                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
 10560  0181  3003               	movlw	3
 10561  0182  0020               	movlb	0	; select bank0
 10562  0183  00A9               	movwf	??_Load_Main
 10563  0184  0829               	movf	??_Load_Main,w
 10564  0185  0022               	movlb	2	; select bank2
 10565  0186  00EC               	movwf	(_Load^(0+256)+43)
 10566                           
 10567                           ;OverLoad_B1.c: 154: }
 10568                           ;OverLoad_B1.c: 155: }
 10569                           ;OverLoad_B1.c: 156: }
 10570                           ;OverLoad_B1.c: 157: }
 10571                           ;OverLoad_B1.c: 158: }
 10572                           ;OverLoad_B1.c: 159: }
 10573                           ;OverLoad_B1.c: 160: } else {
 10574  0187  0008               	return
 10575  0188                     l1555:	
 10576                           
 10577                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
 10578  0188  1641               	bsf	_Load^(0+256),4
 10579                           
 10580                           ;OverLoad_B1.c: 162: }
 10581                           ;OverLoad_B1.c: 163: } else {
 10582  0189  0008               	return
 10583  018A                     l1554:	
 10584                           
 10585                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
 10586  018A  1D41               	btfss	_Load^(0+256),2
 10587  018B  29A8               	goto	l7876
 10588  018C  0020               	movlb	0	; select bank0
 10589  018D  082E               	movf	Load_Main@error,w
 10590  018E  3A03               	xorlw	3
 10591  018F  1903               	skipnz
 10592  0190  29A8               	goto	l7876
 10593                           
 10594                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
 10595  0191  0022               	movlb	2	; select bank2
 10596  0192  1141               	bcf	_Load^(0+256),2
 10597                           
 10598                           ;OverLoad_B1.c: 167: Load.Time = 0;
 10599  0193  01C2               	clrf	(_Load^(0+256)+1)
 10600  0194  01C3               	clrf	((_Load+1)^(0+256)+1)
 10601                           
 10602                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
 10603  0195  1241               	bcf	_Load^(0+256),4
 10604                           
 10605                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
 10606  0196  319E  267B  3180   	fcall	_setLoad_AH_AL_Restore
 10607                           
 10608                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10609  0199  0022               	movlb	2	; select bank2
 10610  019A  01EA               	clrf	(_Load^(0+256)+41)
 10611                           
 10612                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
 10613  019B  01EB               	clrf	(_Load^(0+256)+42)
 10614                           
 10615                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
 10616  019C  01EE               	clrf	(_Load^(0+256)+45)
 10617                           
 10618                           ;OverLoad_B1.c: 174: Load.ADH = 0;
 10619  019D  01C6               	clrf	(_Load^(0+256)+5)
 10620  019E  01C7               	clrf	((_Load+1)^(0+256)+5)
 10621                           
 10622                           ;OverLoad_B1.c: 175: Load.ADL = 0;
 10623  019F  01C8               	clrf	(_Load^(0+256)+7)
 10624  01A0  01C9               	clrf	((_Load+1)^(0+256)+7)
 10625                           
 10626                           ;OverLoad_B1.c: 176: Load.AD = 0;
 10627  01A1  01E0               	clrf	(_Load^(0+256)+31)
 10628  01A2  01E1               	clrf	((_Load+1)^(0+256)+31)
 10629                           
 10630                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
 10631  01A3  01E6               	clrf	(_Load^(0+256)+37)
 10632  01A4  01E7               	clrf	((_Load+1)^(0+256)+37)
 10633                           
 10634                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
 10635  01A5  01ED               	clrf	(_Load^(0+256)+44)
 10636                           
 10637                           ;OverLoad_B1.c: 179: Load.Run = 0;
 10638  01A6  11C1               	bcf	_Load^(0+256),3
 10639                           
 10640                           ;OverLoad_B1.c: 180: Load.OK = 1;
 10641  01A7  17C1               	bsf	_Load^(0+256),7
 10642  01A8                     l7876:	
 10643                           
 10644                           ;OverLoad_B1.c: 201: }
 10645                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
 10646  01A8  0022               	movlb	2	; select bank2
 10647  01A9  1EC1               	btfss	_Load^(0+256),5
 10648  01AA  0008               	return
 10649                           
 10650                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
 10651  01AB  3001               	movlw	1
 10652  01AC  07C4               	addwf	(_Load^(0+256)+3),f
 10653  01AD  3000               	movlw	0
 10654  01AE  3DC5               	addwfc	((_Load+1)^(0+256)+3),f
 10655                           
 10656                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
 10657  01AF  3003               	movlw	3
 10658  01B0  0245               	subwf	((_Load+1)^(0+256)+3),w
 10659  01B1  30E8               	movlw	232
 10660  01B2  1903               	skipnz
 10661  01B3  0244               	subwf	(_Load^(0+256)+3),w
 10662  01B4  1C03               	skipc
 10663  01B5  0008               	return
 10664                           
 10665                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
 10666  01B6  01C4               	clrf	(_Load^(0+256)+3)
 10667  01B7  01C5               	clrf	((_Load+1)^(0+256)+3)
 10668                           
 10669                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
 10670  01B8  12C1               	bcf	_Load^(0+256),5
 10671                           
 10672                           ;OverLoad_B1.c: 207: }
 10673                           ;OverLoad_B1.c: 208: }
 10674                           ;OverLoad_B1.c: 209: }
 10675                           ;OverLoad_B1.c: 210: } else {
 10676  01B9  0008               	return
 10677  01BA                     l1550:	
 10678                           
 10679                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
 10680  01BA  0021               	movlb	1	; select bank1
 10681  01BB  1C20               	btfss	_myMain^(0+128),0
 10682  01BC  0008               	return
 10683                           
 10684                           ;OverLoad_B1.c: 212: Load.Enable = 1;
 10685  01BD  0022               	movlb	2	; select bank2
 10686  01BE  1441               	bsf	_Load^(0+256),0
 10687  01BF  0008               	return
 10688  01C0                     __end_of_Load_Main:	
 10689                           
 10690                           	psect	text54
 10691  1CA6                     __ptext54:	
 10692 ;; *************** function _getMain_LoadOK *****************
 10693 ;; Defined at:
 10694 ;;		line 475 in file "../src/Main_B1.c"
 10695 ;; Parameters:    Size  Location     Type
 10696 ;;		None
 10697 ;; Auto vars:     Size  Location     Type
 10698 ;;  ok              1    2[BANK0 ] unsigned char 
 10699 ;; Return value:  Size  Location     Type
 10700 ;;                  1    wreg      unsigned char 
 10701 ;; Registers used:
 10702 ;;		wreg, status,2, pclath, cstack
 10703 ;; Tracked objects:
 10704 ;;		On entry : 0/0
 10705 ;;		On exit  : 0/0
 10706 ;;		Unchanged: 0/0
 10707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;Total ram usage:        2 bytes
 10713 ;; Hardware stack levels used:    1
 10714 ;; Hardware stack levels required when called:    6
 10715 ;; This function calls:
 10716 ;;		_getDimmer_LoadOK
 10717 ;; This function is called by:
 10718 ;;		_Load_Main
 10719 ;; This function uses a non-reentrant model
 10720 ;;
 10721                           
 10722                           
 10723                           ;psect for function _getMain_LoadOK
 10724  1CA6                     _getMain_LoadOK:	
 10725                           
 10726                           ;Main_B1.c: 476: char ok = 0;
 10727                           
 10728                           ;incstack = 0
 10729                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10730  1CA6  0020               	movlb	0	; select bank0
 10731  1CA7  01A2               	clrf	getMain_LoadOK@ok
 10732                           
 10733                           ;Main_B1.c: 482: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10734  1CA8  319B  23C2         	fcall	_getDimmer_LoadOK
 10735  1CAA  3A01               	xorlw	1
 10736  1CAB  3000               	movlw	0
 10737  1CAC  1903               	skipnz
 10738  1CAD  3001               	movlw	1
 10739  1CAE  0020               	movlb	0	; select bank0
 10740  1CAF  00A1               	movwf	??_getMain_LoadOK
 10741  1CB0  0821               	movf	??_getMain_LoadOK,w
 10742  1CB1  00A2               	movwf	getMain_LoadOK@ok
 10743                           
 10744                           ;Main_B1.c: 484: return ok;
 10745  1CB2  0822               	movf	getMain_LoadOK@ok,w
 10746  1CB3  0008               	return
 10747  1CB4                     __end_of_getMain_LoadOK:	
 10748                           
 10749                           	psect	text55
 10750  1BC2                     __ptext55:	
 10751 ;; *************** function _getDimmer_LoadOK *****************
 10752 ;; Defined at:
 10753 ;;		line 599 in file "../src/Dimmer_B1.c"
 10754 ;; Parameters:    Size  Location     Type
 10755 ;;		None
 10756 ;; Auto vars:     Size  Location     Type
 10757 ;;  status          1    0[BANK0 ] unsigned char 
 10758 ;; Return value:  Size  Location     Type
 10759 ;;                  1    wreg      unsigned char 
 10760 ;; Registers used:
 10761 ;;		wreg, status,2
 10762 ;; Tracked objects:
 10763 ;;		On entry : 0/0
 10764 ;;		On exit  : 0/0
 10765 ;;		Unchanged: 0/0
 10766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10771 ;;Total ram usage:        1 bytes
 10772 ;; Hardware stack levels used:    1
 10773 ;; Hardware stack levels required when called:    5
 10774 ;; This function calls:
 10775 ;;		Nothing
 10776 ;; This function is called by:
 10777 ;;		_getMain_LoadOK
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           
 10782                           ;psect for function _getDimmer_LoadOK
 10783  1BC2                     _getDimmer_LoadOK:	
 10784                           
 10785                           ;Dimmer_B1.c: 600: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10786                           
 10787                           ;incstack = 0
 10788                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10789  1BC2  3000               	movlw	0
 10790  1BC3  0022               	movlb	2	; select bank2
 10791  1BC4  18BE               	btfsc	_Dimmer^(0+256),1
 10792  1BC5  3001               	movlw	1
 10793  1BC6  0020               	movlb	0	; select bank0
 10794  1BC7  00A0               	movwf	getDimmer_LoadOK@status
 10795                           
 10796                           ;Dimmer_B1.c: 601: return status;
 10797  1BC8  0820               	movf	getDimmer_LoadOK@status,w
 10798  1BC9  0008               	return
 10799  1BCA                     __end_of_getDimmer_LoadOK:	
 10800                           
 10801                           	psect	text56
 10802  1CF2                     __ptext56:	
 10803 ;; *************** function _getMain_Lights_Count *****************
 10804 ;; Defined at:
 10805 ;;		line 445 in file "../src/Main_B1.c"
 10806 ;; Parameters:    Size  Location     Type
 10807 ;;		None
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;  status1         1    3[BANK0 ] unsigned char 
 10810 ;;  status3         1    2[BANK0 ] unsigned char 
 10811 ;;  status2         1    1[BANK0 ] unsigned char 
 10812 ;;  count           1    0[BANK0 ] unsigned char 
 10813 ;; Return value:  Size  Location     Type
 10814 ;;                  1    wreg      unsigned char 
 10815 ;; Registers used:
 10816 ;;		wreg, status,2, status,0
 10817 ;; Tracked objects:
 10818 ;;		On entry : 0/0
 10819 ;;		On exit  : 0/0
 10820 ;;		Unchanged: 0/0
 10821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;Total ram usage:        4 bytes
 10827 ;; Hardware stack levels used:    1
 10828 ;; Hardware stack levels required when called:    5
 10829 ;; This function calls:
 10830 ;;		Nothing
 10831 ;; This function is called by:
 10832 ;;		_Load_Main
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           
 10837                           ;psect for function _getMain_Lights_Count
 10838  1CF2                     _getMain_Lights_Count:	
 10839                           
 10840                           ;Main_B1.c: 446: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10841                           
 10842                           ;incstack = 0
 10843                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10844  1CF2  0020               	movlb	0	; select bank0
 10845  1CF3  01A3               	clrf	getMain_Lights_Count@status1
 10846  1CF4  01A1               	clrf	getMain_Lights_Count@status2
 10847  1CF5  01A2               	clrf	getMain_Lights_Count@status3
 10848  1CF6  01A0               	clrf	getMain_Lights_Count@count
 10849                           
 10850                           ;Main_B1.c: 450: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10851  1CF7  3000               	movlw	0
 10852  1CF8  0023               	movlb	3	; select bank3
 10853  1CF9  18CE               	btfsc	(_DimmerLights1^(0+384)+9),1
 10854  1CFA  3001               	movlw	1
 10855  1CFB  0020               	movlb	0	; select bank0
 10856  1CFC  00A3               	movwf	getMain_Lights_Count@status1
 10857                           
 10858                           ;Main_B1.c: 471: return count = (status1 + status2 + status3);
 10859  1CFD  0823               	movf	getMain_Lights_Count@status1,w
 10860  1CFE  0721               	addwf	getMain_Lights_Count@status2,w
 10861  1CFF  0722               	addwf	getMain_Lights_Count@status3,w
 10862  1D00  00A0               	movwf	getMain_Lights_Count@count
 10863  1D01  0008               	return
 10864  1D02                     __end_of_getMain_Lights_Count:	
 10865                           
 10866                           	psect	text57
 10867  1BEF                     __ptext57:	
 10868 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10869 ;; Defined at:
 10870 ;;		line 490 in file "../src/Dimmer_B1.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;		None
 10873 ;; Auto vars:     Size  Location     Type
 10874 ;;  adjgo           1    0[BANK0 ] unsigned char 
 10875 ;; Return value:  Size  Location     Type
 10876 ;;                  1    wreg      unsigned char 
 10877 ;; Registers used:
 10878 ;;		wreg, status,2
 10879 ;; Tracked objects:
 10880 ;;		On entry : 0/0
 10881 ;;		On exit  : 0/0
 10882 ;;		Unchanged: 0/0
 10883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10888 ;;Total ram usage:        1 bytes
 10889 ;; Hardware stack levels used:    1
 10890 ;; Hardware stack levels required when called:    5
 10891 ;; This function calls:
 10892 ;;		Nothing
 10893 ;; This function is called by:
 10894 ;;		_setDimmerLights_SwOn
 10895 ;;		_setDimmerLights_AdjControl
 10896 ;;		_Load_Main
 10897 ;; This function uses a non-reentrant model
 10898 ;;
 10899                           
 10900                           
 10901                           ;psect for function _getAll_DimmerLights_AdjGO
 10902  1BEF                     _getAll_DimmerLights_AdjGO:	
 10903                           
 10904                           ;Dimmer_B1.c: 491: char adjgo = 0;
 10905                           
 10906                           ;incstack = 0
 10907                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10908  1BEF  0020               	movlb	0	; select bank0
 10909  1BF0  01A0               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10910                           
 10911                           ;Dimmer_B1.c: 499: adjgo = DimmerLights1.AdjGo == 1;
 10912  1BF1  3000               	movlw	0
 10913  1BF2  0023               	movlb	3	; select bank3
 10914  1BF3  19CD               	btfsc	(_DimmerLights1^(0+384)+8),3
 10915  1BF4  3001               	movlw	1
 10916  1BF5  0020               	movlb	0	; select bank0
 10917  1BF6  00A0               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10918                           
 10919                           ;Dimmer_B1.c: 501: return adjgo;
 10920  1BF7  0820               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10921  1BF8  0008               	return
 10922  1BF9                     __end_of_getAll_DimmerLights_AdjGO:	
 10923                           
 10924                           	psect	text58
 10925  130F                     __ptext58:	
 10926 ;; *************** function ___lwdiv *****************
 10927 ;; Defined at:
 10928 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10929 ;; Parameters:    Size  Location     Type
 10930 ;;  divisor         2    0[BANK0 ] unsigned int 
 10931 ;;  dividend        2    2[BANK0 ] unsigned int 
 10932 ;; Auto vars:     Size  Location     Type
 10933 ;;  quotient        2    5[BANK0 ] unsigned int 
 10934 ;;  counter         1    7[BANK0 ] unsigned char 
 10935 ;; Return value:  Size  Location     Type
 10936 ;;                  2    0[BANK0 ] unsigned int 
 10937 ;; Registers used:
 10938 ;;		wreg, status,2, status,0
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10944 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;Total ram usage:        8 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    5
 10951 ;; This function calls:
 10952 ;;		Nothing
 10953 ;; This function is called by:
 10954 ;;		_Load_Main
 10955 ;; This function uses a non-reentrant model
 10956 ;;
 10957                           
 10958                           
 10959                           ;psect for function ___lwdiv
 10960  130F                     ___lwdiv:	
 10961                           
 10962                           ;incstack = 0
 10963                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10964  130F  0020               	movlb	0	; select bank0
 10965  1310  01A5               	clrf	___lwdiv@quotient
 10966  1311  01A6               	clrf	___lwdiv@quotient+1
 10967  1312  0821               	movf	___lwdiv@divisor+1,w
 10968  1313  0420               	iorwf	___lwdiv@divisor,w
 10969  1314  1903               	skipnz
 10970  1315  2B3F               	goto	l7444
 10971  1316  01A7               	clrf	___lwdiv@counter
 10972  1317  0AA7               	incf	___lwdiv@counter,f
 10973  1318                     l7432:	
 10974  1318  1BA1               	btfsc	___lwdiv@divisor+1,7
 10975  1319  2B24               	goto	l7434
 10976  131A  3001               	movlw	1
 10977  131B                     u7215:	
 10978  131B  35A0               	lslf	___lwdiv@divisor,f
 10979  131C  0DA1               	rlf	___lwdiv@divisor+1,f
 10980  131D  0B89               	decfsz	9,f
 10981  131E  2B1B               	goto	u7215
 10982  131F  3001               	movlw	1
 10983  1320  00A4               	movwf	??___lwdiv
 10984  1321  0824               	movf	??___lwdiv,w
 10985  1322  07A7               	addwf	___lwdiv@counter,f
 10986  1323  2B18               	goto	l7432
 10987  1324                     l7434:	
 10988  1324  3001               	movlw	1
 10989  1325                     u7235:	
 10990  1325  35A5               	lslf	___lwdiv@quotient,f
 10991  1326  0DA6               	rlf	___lwdiv@quotient+1,f
 10992  1327  0B89               	decfsz	9,f
 10993  1328  2B25               	goto	u7235
 10994  1329  0821               	movf	___lwdiv@divisor+1,w
 10995  132A  0223               	subwf	___lwdiv@dividend+1,w
 10996  132B  1D03               	skipz
 10997  132C  2B2F               	goto	u7245
 10998  132D  0820               	movf	___lwdiv@divisor,w
 10999  132E  0222               	subwf	___lwdiv@dividend,w
 11000  132F                     u7245:	
 11001  132F  1C03               	skipc
 11002  1330  2B36               	goto	l7440
 11003  1331  0820               	movf	___lwdiv@divisor,w
 11004  1332  02A2               	subwf	___lwdiv@dividend,f
 11005  1333  0821               	movf	___lwdiv@divisor+1,w
 11006  1334  3BA3               	subwfb	___lwdiv@dividend+1,f
 11007  1335  1425               	bsf	___lwdiv@quotient,0
 11008  1336                     l7440:	
 11009  1336  3001               	movlw	1
 11010  1337                     u7255:	
 11011  1337  36A1               	lsrf	___lwdiv@divisor+1,f
 11012  1338  0CA0               	rrf	___lwdiv@divisor,f
 11013  1339  0B89               	decfsz	9,f
 11014  133A  2B37               	goto	u7255
 11015  133B  3001               	movlw	1
 11016  133C  02A7               	subwf	___lwdiv@counter,f
 11017  133D  1D03               	btfss	3,2
 11018  133E  2B24               	goto	l7434
 11019  133F                     l7444:	
 11020  133F  0826               	movf	___lwdiv@quotient+1,w
 11021  1340  01A1               	clrf	?___lwdiv+1
 11022  1341  07A1               	addwf	?___lwdiv+1,f
 11023  1342  0825               	movf	___lwdiv@quotient,w
 11024  1343  01A0               	clrf	?___lwdiv
 11025  1344  07A0               	addwf	?___lwdiv,f
 11026  1345  0008               	return
 11027  1346                     __end_of___lwdiv:	
 11028                           
 11029                           	psect	text59
 11030  1B9C                     __ptext59:	
 11031 ;; *************** function _Load_Initialization *****************
 11032 ;; Defined at:
 11033 ;;		line 9 in file "../src/OverLoad_B1.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;		None
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;		None
 11038 ;; Return value:  Size  Location     Type
 11039 ;;		None               void
 11040 ;; Registers used:
 11041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/0
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;Total ram usage:        0 bytes
 11052 ;; Hardware stack levels used:    1
 11053 ;; Hardware stack levels required when called:    6
 11054 ;; This function calls:
 11055 ;;		_setLoad_AH_AL_Restore
 11056 ;; This function is called by:
 11057 ;;		_main
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           
 11062                           ;psect for function _Load_Initialization
 11063  1B9C                     _Load_Initialization:	
 11064                           
 11065                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11066                           
 11067                           ;incstack = 0
 11068                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11069  1B9C  0022               	movlb	2	; select bank2
 11070  1B9D  17C1               	bsf	_Load^(0+256),7
 11071                           
 11072                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11073  1B9E  319E  267B         	fcall	_setLoad_AH_AL_Restore
 11074  1BA0  0008               	return
 11075  1BA1                     __end_of_Load_Initialization:	
 11076                           
 11077                           	psect	text60
 11078  1E7B                     __ptext60:	
 11079 ;; *************** function _setLoad_AH_AL_Restore *****************
 11080 ;; Defined at:
 11081 ;;		line 239 in file "../src/OverLoad_B1.c"
 11082 ;; Parameters:    Size  Location     Type
 11083 ;;		None
 11084 ;; Auto vars:     Size  Location     Type
 11085 ;;  i               1    1[BANK0 ] unsigned char 
 11086 ;; Return value:  Size  Location     Type
 11087 ;;		None               void
 11088 ;; Registers used:
 11089 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11090 ;; Tracked objects:
 11091 ;;		On entry : 0/0
 11092 ;;		On exit  : 0/0
 11093 ;;		Unchanged: 0/0
 11094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11099 ;;Total ram usage:        2 bytes
 11100 ;; Hardware stack levels used:    1
 11101 ;; Hardware stack levels required when called:    5
 11102 ;; This function calls:
 11103 ;;		Nothing
 11104 ;; This function is called by:
 11105 ;;		_Load_Initialization
 11106 ;;		_Load_Main
 11107 ;; This function uses a non-reentrant model
 11108 ;;
 11109                           
 11110                           
 11111                           ;psect for function _setLoad_AH_AL_Restore
 11112  1E7B                     _setLoad_AH_AL_Restore:	
 11113                           
 11114                           ;OverLoad_B1.c: 240: char i;
 11115                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
 11116                           
 11117                           ;incstack = 0
 11118                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11119  1E7B  0020               	movlb	0	; select bank0
 11120  1E7C  01A1               	clrf	setLoad_AH_AL_Restore@i
 11121  1E7D                     L7:	
 11122  1E7D  3005               	movlw	5
 11123  1E7E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11124  1E7F  1803               	btfsc	3,0
 11125  1E80  0008               	return
 11126                           
 11127                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
 11128  1E81  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11129  1E82  3E4C               	addlw	(_Load+11)& (0+255)
 11130  1E83  0086               	movwf	6
 11131  1E84  3001               	movlw	1	; select bank2/3
 11132  1E85  0087               	movwf	7
 11133  1E86  3000               	movlw	0
 11134  1E87  3FC0               	movwi [0]fsr1
 11135  1E88  3FC1               	movwi [1]fsr1
 11136                           
 11137                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xffff;
 11138  1E89  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11139  1E8A  3E56               	addlw	(_Load+21)& (0+255)
 11140  1E8B  0086               	movwf	6
 11141  1E8C  3001               	movlw	1	; select bank2/3
 11142  1E8D  0087               	movwf	7
 11143  1E8E  30FF               	movlw	255
 11144  1E8F  3FC0               	movwi [0]fsr1
 11145  1E90  30FF               	movlw	255
 11146  1E91  3FC1               	movwi [1]fsr1
 11147  1E92  3001               	movlw	1
 11148  1E93  00A0               	movwf	??_setLoad_AH_AL_Restore
 11149  1E94  0820               	movf	??_setLoad_AH_AL_Restore,w
 11150  1E95  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11151  1E96  2E7D               	goto	L7
 11152  1E97                     __end_of_setLoad_AH_AL_Restore:	
 11153                           
 11154                           	psect	text61
 11155  1B8F                     __ptext61:	
 11156 ;; *************** function _LED_Main *****************
 11157 ;; Defined at:
 11158 ;;		line 47 in file "../src/LED_B1.c"
 11159 ;; Parameters:    Size  Location     Type
 11160 ;;		None
 11161 ;; Auto vars:     Size  Location     Type
 11162 ;;		None
 11163 ;; Return value:  Size  Location     Type
 11164 ;;		None               void
 11165 ;; Registers used:
 11166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11167 ;; Tracked objects:
 11168 ;;		On entry : 0/0
 11169 ;;		On exit  : 0/0
 11170 ;;		Unchanged: 0/0
 11171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;Total ram usage:        0 bytes
 11177 ;; Hardware stack levels used:    1
 11178 ;; Hardware stack levels required when called:    7
 11179 ;; This function calls:
 11180 ;;		_setLED_Main
 11181 ;; This function is called by:
 11182 ;;		_main
 11183 ;; This function uses a non-reentrant model
 11184 ;;
 11185                           
 11186                           
 11187                           ;psect for function _LED_Main
 11188  1B8F                     _LED_Main:	
 11189                           
 11190                           ;LED_B1.c: 62: setLED_Main(99);
 11191                           
 11192                           ;incstack = 0
 11193                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11194  1B8F  3063               	movlw	99
 11195  1B90  3192  2205         	fcall	_setLED_Main
 11196  1B92  0008               	return
 11197  1B93                     __end_of_LED_Main:	
 11198                           
 11199                           	psect	text62
 11200  1205                     __ptext62:	
 11201 ;; *************** function _setLED_Main *****************
 11202 ;; Defined at:
 11203 ;;		line 221 in file "../src/LED_B1.c"
 11204 ;; Parameters:    Size  Location     Type
 11205 ;;  led             1    wreg     unsigned char 
 11206 ;; Auto vars:     Size  Location     Type
 11207 ;;  led             1    4[BANK0 ] unsigned char 
 11208 ;; Return value:  Size  Location     Type
 11209 ;;		None               void
 11210 ;; Registers used:
 11211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11212 ;; Tracked objects:
 11213 ;;		On entry : 0/0
 11214 ;;		On exit  : 0/0
 11215 ;;		Unchanged: 0/0
 11216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;Total ram usage:        3 bytes
 11222 ;; Hardware stack levels used:    1
 11223 ;; Hardware stack levels required when called:    6
 11224 ;; This function calls:
 11225 ;;		_LedPointSelect
 11226 ;; This function is called by:
 11227 ;;		_LED_Main
 11228 ;; This function uses a non-reentrant model
 11229 ;;
 11230                           
 11231                           
 11232                           ;psect for function _setLED_Main
 11233  1205                     _setLED_Main:	
 11234                           
 11235                           ;incstack = 0
 11236                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11237                           ;setLED_Main@led stored from wreg
 11238  1205  0020               	movlb	0	; select bank0
 11239  1206  00A4               	movwf	setLED_Main@led
 11240                           
 11241                           ;LED_B1.c: 222: LedPointSelect(led);
 11242  1207  0824               	movf	setLED_Main@led,w
 11243  1208  319C  241A  3192   	fcall	_LedPointSelect
 11244                           
 11245                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11246  120B  087A               	movf	_LED,w
 11247  120C  0086               	movwf	6
 11248  120D  3001               	movlw	1	; select bank2/3
 11249  120E  0087               	movwf	7
 11250  120F  1C81               	btfss	1,1
 11251  1210  0008               	return
 11252                           
 11253                           ;LED_B1.c: 224: LED->Time++;
 11254  1211  0A7A               	incf	_LED,w
 11255  1212  0086               	movwf	6
 11256  1213  3001               	movlw	1	; select bank2/3
 11257  1214  0087               	movwf	7
 11258  1215  3001               	movlw	1
 11259  1216  0781               	addwf	1,f
 11260  1217  3141               	addfsr 1,1
 11261  1218  1803               	skipnc
 11262  1219  0A81               	incf	1,f
 11263                           
 11264                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11265  121A  0A7A               	incf	_LED,w
 11266  121B  0086               	movwf	6
 11267  121C  3001               	movlw	1	; select bank2/3
 11268  121D  0087               	movwf	7
 11269  121E  3F40               	moviw [0]fsr1
 11270  121F  0020               	movlb	0	; select bank0
 11271  1220  00A2               	movwf	??_setLED_Main
 11272  1221  3F41               	moviw [1]fsr1
 11273  1222  00A3               	movwf	??_setLED_Main+1
 11274  1223  3000               	movlw	0
 11275  1224  0223               	subwf	??_setLED_Main+1,w
 11276  1225  3032               	movlw	50
 11277  1226  1903               	skipnz
 11278  1227  0222               	subwf	??_setLED_Main,w
 11279  1228  1C03               	skipc
 11280  1229  0008               	return
 11281                           
 11282                           ;LED_B1.c: 226: LED->Time = 0;
 11283  122A  0A7A               	incf	_LED,w
 11284  122B  0086               	movwf	6
 11285  122C  3001               	movlw	1	; select bank2/3
 11286  122D  0087               	movwf	7
 11287  122E  3000               	movlw	0
 11288  122F  3FC0               	movwi [0]fsr1
 11289  1230  3FC1               	movwi [1]fsr1
 11290                           
 11291                           ;LED_B1.c: 243: if (led == 99) {
 11292  1231  0824               	movf	setLED_Main@led,w
 11293  1232  3A63               	xorlw	99
 11294  1233  1D03               	skipz
 11295  1234  0008               	return
 11296                           
 11297                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11298  1235  3020               	movlw	32
 11299  1236  068D               	xorwf	13,f
 11300  1237  0008               	return
 11301  1238                     __end_of_setLED_Main:	
 11302                           
 11303                           	psect	text63
 11304  1B8B                     __ptext63:	
 11305 ;; *************** function _LED_Initialization *****************
 11306 ;; Defined at:
 11307 ;;		line 31 in file "../src/LED_B1.c"
 11308 ;; Parameters:    Size  Location     Type
 11309 ;;		None
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;		None
 11312 ;; Return value:  Size  Location     Type
 11313 ;;		None               void
 11314 ;; Registers used:
 11315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11316 ;; Tracked objects:
 11317 ;;		On entry : 0/0
 11318 ;;		On exit  : 0/0
 11319 ;;		Unchanged: 0/0
 11320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;Total ram usage:        0 bytes
 11326 ;; Hardware stack levels used:    1
 11327 ;; Hardware stack levels required when called:    8
 11328 ;; This function calls:
 11329 ;;		_setLED_Initialization
 11330 ;; This function is called by:
 11331 ;;		_main
 11332 ;; This function uses a non-reentrant model
 11333 ;;
 11334                           
 11335                           
 11336                           ;psect for function _LED_Initialization
 11337  1B8B                     _LED_Initialization:	
 11338                           
 11339                           ;LED_B1.c: 42: setLED_Initialization(99);
 11340                           
 11341                           ;incstack = 0
 11342                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11343  1B8B  3063               	movlw	99
 11344  1B8C  319D  2512         	fcall	_setLED_Initialization
 11345  1B8E  0008               	return
 11346  1B8F                     __end_of_LED_Initialization:	
 11347                           
 11348                           	psect	text64
 11349  1D12                     __ptext64:	
 11350 ;; *************** function _setLED_Initialization *****************
 11351 ;; Defined at:
 11352 ;;		line 69 in file "../src/LED_B1.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;  led             1    wreg     unsigned char 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  led             1    4[BANK0 ] unsigned char 
 11357 ;; Return value:  Size  Location     Type
 11358 ;;		None               void
 11359 ;; Registers used:
 11360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;Total ram usage:        1 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    7
 11373 ;; This function calls:
 11374 ;;		_LedPointSelect
 11375 ;;		_setLED
 11376 ;; This function is called by:
 11377 ;;		_LED_Initialization
 11378 ;; This function uses a non-reentrant model
 11379 ;;
 11380                           
 11381                           
 11382                           ;psect for function _setLED_Initialization
 11383  1D12                     _setLED_Initialization:	
 11384                           
 11385                           ;incstack = 0
 11386                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11387                           ;setLED_Initialization@led stored from wreg
 11388  1D12  0020               	movlb	0	; select bank0
 11389  1D13  00A4               	movwf	setLED_Initialization@led
 11390                           
 11391                           ;LED_B1.c: 70: LedPointSelect(led);
 11392  1D14  0824               	movf	setLED_Initialization@led,w
 11393  1D15  319C  241A  319D   	fcall	_LedPointSelect
 11394                           
 11395                           ;LED_B1.c: 71: LED->Enable = 1;
 11396  1D18  087A               	movf	_LED,w
 11397  1D19  0086               	movwf	6
 11398  1D1A  3001               	movlw	1	; select bank2/3
 11399  1D1B  0087               	movwf	7
 11400  1D1C  1401               	bsf	1,0
 11401                           
 11402                           ;LED_B1.c: 72: setLED(led, 0);
 11403  1D1D  0020               	movlb	0	; select bank0
 11404  1D1E  01A2               	clrf	setLED@command
 11405  1D1F  0824               	movf	setLED_Initialization@led,w
 11406  1D20  3192  226D         	fcall	_setLED
 11407  1D22  0008               	return
 11408  1D23                     __end_of_setLED_Initialization:	
 11409                           
 11410                           	psect	text65
 11411  12A3                     __ptext65:	
 11412 ;; *************** function _Flash_Memory_Main *****************
 11413 ;; Defined at:
 11414 ;;		line 966 in file "../src/MCU_B1.c"
 11415 ;; Parameters:    Size  Location     Type
 11416 ;;		None
 11417 ;; Auto vars:     Size  Location     Type
 11418 ;;		None
 11419 ;; Return value:  Size  Location     Type
 11420 ;;		None               void
 11421 ;; Registers used:
 11422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11423 ;; Tracked objects:
 11424 ;;		On entry : 0/0
 11425 ;;		On exit  : 0/0
 11426 ;;		Unchanged: 0/0
 11427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;Total ram usage:        1 bytes
 11433 ;; Hardware stack levels used:    1
 11434 ;; Hardware stack levels required when called:    8
 11435 ;; This function calls:
 11436 ;;		_Flash_Memory_Modify
 11437 ;;		_getMain_LightsStatus
 11438 ;; This function is called by:
 11439 ;;		_main
 11440 ;; This function uses a non-reentrant model
 11441 ;;
 11442                           
 11443                           
 11444                           ;psect for function _Flash_Memory_Main
 11445  12A3                     _Flash_Memory_Main:	
 11446                           
 11447                           ;MCU_B1.c: 967: if (Memory.Modify == 1) {
 11448                           
 11449                           ;incstack = 0
 11450                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11451  12A3  0023               	movlb	3	; select bank3
 11452  12A4  1C44               	btfss	(_Memory^(0+384)+36),0
 11453  12A5  0008               	return
 11454                           
 11455                           ;MCU_B1.c: 968: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11456  12A6  3191  2116  3192   	fcall	_getMain_LightsStatus
 11457  12A9  3A00               	xorlw	0
 11458  12AA  3000               	movlw	0
 11459  12AB  1903               	skipnz
 11460  12AC  3001               	movlw	1
 11461  12AD  0020               	movlb	0	; select bank0
 11462  12AE  00A9               	movwf	??_Flash_Memory_Main
 11463  12AF  0DA9               	rlf	??_Flash_Memory_Main,f
 11464  12B0  0023               	movlb	3	; select bank3
 11465  12B1  0844               	movf	(_Memory^(0+384)+36),w
 11466  12B2  0020               	movlb	0	; select bank0
 11467  12B3  0629               	xorwf	??_Flash_Memory_Main,w
 11468  12B4  39FD               	andlw	-3
 11469  12B5  0629               	xorwf	??_Flash_Memory_Main,w
 11470  12B6  0023               	movlb	3	; select bank3
 11471  12B7  00C4               	movwf	(_Memory^(0+384)+36)
 11472                           
 11473                           ;MCU_B1.c: 969: if (Memory.GO == 1) {
 11474  12B8  1CC4               	btfss	(_Memory^(0+384)+36),1
 11475  12B9  2AD3               	goto	l1183
 11476                           
 11477                           ;MCU_B1.c: 970: Memory.Runtime = 1;
 11478  12BA  15C4               	bsf	(_Memory^(0+384)+36),3
 11479                           
 11480                           ;MCU_B1.c: 971: Memory.Time++;
 11481  12BB  3001               	movlw	1
 11482  12BC  07C2               	addwf	(_Memory^(0+384)+34),f
 11483  12BD  3000               	movlw	0
 11484  12BE  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11485                           
 11486                           ;MCU_B1.c: 972: if (Memory.Time == 25) {
 11487  12BF  3022               	movlw	34
 11488  12C0  3EA0               	addlw	_Memory& (0+255)
 11489  12C1  0086               	movwf	6
 11490  12C2  3001               	movlw	1	; select bank3/4
 11491  12C3  0087               	movwf	7
 11492  12C4  3F40               	moviw [0]fsr1
 11493  12C5  3A19               	xorlw	25
 11494  12C6  1D03               	skipz
 11495  12C7  2ACA               	goto	u7515
 11496  12C8  3F41               	moviw [1]fsr1
 11497  12C9  3A00               	xorlw	0
 11498  12CA                     u7515:	
 11499  12CA  1D03               	skipz
 11500  12CB  0008               	return
 11501                           
 11502                           ;MCU_B1.c: 973: Memory.Time = 0;
 11503  12CC  01C2               	clrf	(_Memory^(0+384)+34)
 11504  12CD  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11505                           
 11506                           ;MCU_B1.c: 974: Memory.Modify = 0;
 11507  12CE  1044               	bcf	(_Memory^(0+384)+36),0
 11508                           
 11509                           ;MCU_B1.c: 975: Memory.GO = 0;
 11510  12CF  10C4               	bcf	(_Memory^(0+384)+36),1
 11511                           
 11512                           ;MCU_B1.c: 976: Flash_Memory_Modify();
 11513  12D0  3195  254B         	fcall	_Flash_Memory_Modify
 11514                           
 11515                           ;MCU_B1.c: 977: }
 11516                           ;MCU_B1.c: 978: } else {
 11517  12D2  0008               	return
 11518  12D3                     l1183:	
 11519                           
 11520                           ;MCU_B1.c: 979: if (Memory.Runtime == 1) {
 11521  12D3  1DC4               	btfss	(_Memory^(0+384)+36),3
 11522  12D4  0008               	return
 11523                           
 11524                           ;MCU_B1.c: 980: Memory.Runtime = 0;
 11525  12D5  11C4               	bcf	(_Memory^(0+384)+36),3
 11526                           
 11527                           ;MCU_B1.c: 981: Memory.Time = 0;
 11528  12D6  01C2               	clrf	(_Memory^(0+384)+34)
 11529  12D7  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11530  12D8  0008               	return
 11531  12D9                     __end_of_Flash_Memory_Main:	
 11532                           
 11533                           	psect	text66
 11534  154B                     __ptext66:	
 11535 ;; *************** function _Flash_Memory_Modify *****************
 11536 ;; Defined at:
 11537 ;;		line 1039 in file "../src/MCU_B1.c"
 11538 ;; Parameters:    Size  Location     Type
 11539 ;;		None
 11540 ;; Auto vars:     Size  Location     Type
 11541 ;;  i               1    5[BANK0 ] unsigned char 
 11542 ;; Return value:  Size  Location     Type
 11543 ;;		None               void
 11544 ;; Registers used:
 11545 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;Total ram usage:        2 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; Hardware stack levels required when called:    7
 11558 ;; This function calls:
 11559 ;;		_Flash_Memory_Erasing
 11560 ;;		_Flash_Memory_Read
 11561 ;;		_Flash_Memory_Write
 11562 ;;		_setMemory_Data
 11563 ;; This function is called by:
 11564 ;;		_Flash_Memory_Main
 11565 ;; This function uses a non-reentrant model
 11566 ;;
 11567                           
 11568                           
 11569                           ;psect for function _Flash_Memory_Modify
 11570  154B                     _Flash_Memory_Modify:	
 11571                           
 11572                           ;MCU_B1.c: 1040: char i = 0;
 11573                           
 11574                           ;incstack = 0
 11575                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11576  154B  0020               	movlb	0	; select bank0
 11577  154C  01A5               	clrf	Flash_Memory_Modify@i
 11578                           
 11579                           ;MCU_B1.c: 1041: for (i = 0; i < 32; i++) {
 11580  154D  01A5               	clrf	Flash_Memory_Modify@i
 11581  154E  3020               	movlw	32
 11582  154F  0225               	subwf	Flash_Memory_Modify@i,w
 11583  1550  1803               	btfsc	3,0
 11584  1551  2D67               	goto	l7072
 11585  1552                     l7066:	
 11586                           
 11587                           ;MCU_B1.c: 1042: Memory.Data[i] = Flash_Memory_Read(i);
 11588  1552  0825               	movf	Flash_Memory_Modify@i,w
 11589  1553  3187  27E5  3195   	fcall	_Flash_Memory_Read
 11590  1556  0020               	movlb	0	; select bank0
 11591  1557  00A4               	movwf	??_Flash_Memory_Modify
 11592  1558  0825               	movf	Flash_Memory_Modify@i,w
 11593  1559  3EA0               	addlw	_Memory& (0+255)
 11594  155A  0086               	movwf	6
 11595  155B  3001               	movlw	1	; select bank3/4
 11596  155C  0087               	movwf	7
 11597  155D  0824               	movf	??_Flash_Memory_Modify,w
 11598  155E  0081               	movwf	1
 11599  155F  3001               	movlw	1
 11600  1560  00A4               	movwf	??_Flash_Memory_Modify
 11601  1561  0824               	movf	??_Flash_Memory_Modify,w
 11602  1562  07A5               	addwf	Flash_Memory_Modify@i,f
 11603  1563  3020               	movlw	32
 11604  1564  0225               	subwf	Flash_Memory_Modify@i,w
 11605  1565  1C03               	skipc
 11606  1566  2D52               	goto	l7066
 11607  1567                     l7072:	
 11608                           
 11609                           ;MCU_B1.c: 1043: }
 11610                           ;MCU_B1.c: 1044: setMemory_Data(0, product->Data[12]);
 11611  1567  086E               	movf	_product,w
 11612  1568  0086               	movwf	6
 11613  1569  3002               	movlw	2	; select bank4/5
 11614  156A  0087               	movwf	7
 11615  156B  3002               	movlw	2	; select bank4/5
 11616  156C  3F4C               	moviw [12]fsr1
 11617  156D  00A0               	movwf	setMemory_Data@data
 11618  156E  3000               	movlw	0
 11619  156F  319C  2469  3195   	fcall	_setMemory_Data
 11620                           
 11621                           ;MCU_B1.c: 1045: setMemory_Data(1, product->Data[13]);
 11622  1572  0020               	movlb	0	; select bank0
 11623  1573  086E               	movf	_product,w
 11624  1574  0086               	movwf	6
 11625  1575  3002               	movlw	2	; select bank4/5
 11626  1576  0087               	movwf	7
 11627  1577  3002               	movlw	2	; select bank4/5
 11628  1578  3F4D               	moviw [13]fsr1
 11629  1579  00A0               	movwf	setMemory_Data@data
 11630  157A  3001               	movlw	1
 11631  157B  319C  2469  3195   	fcall	_setMemory_Data
 11632                           
 11633                           ;MCU_B1.c: 1046: setMemory_Data(2, product->Data[14]);
 11634  157E  0020               	movlb	0	; select bank0
 11635  157F  086E               	movf	_product,w
 11636  1580  0086               	movwf	6
 11637  1581  3002               	movlw	2	; select bank4/5
 11638  1582  0087               	movwf	7
 11639  1583  3002               	movlw	2	; select bank4/5
 11640  1584  3F4E               	moviw [14]fsr1
 11641  1585  00A0               	movwf	setMemory_Data@data
 11642  1586  3002               	movlw	2
 11643  1587  319C  2469  3195   	fcall	_setMemory_Data
 11644                           
 11645                           ;MCU_B1.c: 1052: if (Memory.LoopSave == 1) {
 11646  158A  0023               	movlb	3	; select bank3
 11647  158B  1D44               	btfss	(_Memory^(0+384)+36),2
 11648  158C  2D91               	goto	l1206
 11649                           
 11650                           ;MCU_B1.c: 1053: Memory.LoopSave = 0;
 11651  158D  1144               	bcf	(_Memory^(0+384)+36),2
 11652                           
 11653                           ;MCU_B1.c: 1054: myMain.FirstOpen = 0;
 11654  158E  0021               	movlb	1	; select bank1
 11655  158F  11A0               	bcf	_myMain^(0+128),3
 11656                           
 11657                           ;MCU_B1.c: 1055: myMain.First = 0;
 11658  1590  12A0               	bcf	_myMain^(0+128),5
 11659  1591                     l1206:	
 11660                           
 11661                           ;MCU_B1.c: 1057: }
 11662                           ;MCU_B1.c: 1058: GIE = 0;
 11663  1591  138B               	bcf	11,7	;volatile
 11664                           
 11665                           ;MCU_B1.c: 1059: Flash_Memory_Erasing();
 11666  1592  319C  2475  3195   	fcall	_Flash_Memory_Erasing
 11667                           
 11668                           ;MCU_B1.c: 1060: Flash_Memory_Write();
 11669  1595  3191  2141         	fcall	_Flash_Memory_Write
 11670                           
 11671                           ;MCU_B1.c: 1061: GIE = 1;
 11672  1597  178B               	bsf	11,7	;volatile
 11673  1598  0008               	return
 11674  1599                     __end_of_Flash_Memory_Modify:	
 11675                           
 11676                           	psect	text67
 11677  1C75                     __ptext67:	
 11678 ;; *************** function _Flash_Memory_Erasing *****************
 11679 ;; Defined at:
 11680 ;;		line 1028 in file "../src/MCU_B1.c"
 11681 ;; Parameters:    Size  Location     Type
 11682 ;;		None
 11683 ;; Auto vars:     Size  Location     Type
 11684 ;;		None
 11685 ;; Return value:  Size  Location     Type
 11686 ;;		None               void
 11687 ;; Registers used:
 11688 ;;		wreg, status,2, status,0, pclath, cstack
 11689 ;; Tracked objects:
 11690 ;;		On entry : 0/0
 11691 ;;		On exit  : 0/0
 11692 ;;		Unchanged: 0/0
 11693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;Total ram usage:        0 bytes
 11699 ;; Hardware stack levels used:    1
 11700 ;; Hardware stack levels required when called:    6
 11701 ;; This function calls:
 11702 ;;		_Flash_Memory_Unlock
 11703 ;; This function is called by:
 11704 ;;		_Flash_Memory_Modify
 11705 ;; This function uses a non-reentrant model
 11706 ;;
 11707                           
 11708                           
 11709                           ;psect for function _Flash_Memory_Erasing
 11710  1C75                     _Flash_Memory_Erasing:	
 11711                           
 11712                           ;MCU_B1.c: 1029: CFGS = 0;
 11713                           
 11714                           ;incstack = 0
 11715                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11716  1C75  0023               	movlb	3	; select bank3
 11717  1C76  1315               	bcf	21,6	;volatile
 11718                           
 11719                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 11720  1C77  3030               	movlw	48
 11721  1C78  0092               	movwf	18	;volatile
 11722                           
 11723                           ;MCU_B1.c: 1031: PMADRL = 0x00;
 11724  1C79  0191               	clrf	17	;volatile
 11725                           
 11726                           ;MCU_B1.c: 1032: FREE = 1;
 11727  1C7A  1615               	bsf	21,4	;volatile
 11728                           
 11729                           ;MCU_B1.c: 1033: WREN = 1;
 11730  1C7B  1515               	bsf	21,2	;volatile
 11731                           
 11732                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 11733  1C7C  319B  23D3         	fcall	_Flash_Memory_Unlock
 11734                           
 11735                           ;MCU_B1.c: 1035: WREN = 0;
 11736  1C7E  0023               	movlb	3	; select bank3
 11737  1C7F  1115               	bcf	21,2	;volatile
 11738  1C80  0008               	return
 11739  1C81                     __end_of_Flash_Memory_Erasing:	
 11740                           
 11741                           	psect	text68
 11742  064A                     __ptext68:	
 11743 ;; *************** function _Flash_Memory_Initialization *****************
 11744 ;; Defined at:
 11745 ;;		line 925 in file "../src/MCU_B1.c"
 11746 ;; Parameters:    Size  Location     Type
 11747 ;;		None
 11748 ;; Auto vars:     Size  Location     Type
 11749 ;;  i               1   67[BANK0 ] unsigned char 
 11750 ;; Return value:  Size  Location     Type
 11751 ;;		None               void
 11752 ;; Registers used:
 11753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11754 ;; Tracked objects:
 11755 ;;		On entry : 0/0
 11756 ;;		On exit  : 0/0
 11757 ;;		Unchanged: 0/0
 11758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11760 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;Total ram usage:        2 bytes
 11764 ;; Hardware stack levels used:    1
 11765 ;; Hardware stack levels required when called:    8
 11766 ;; This function calls:
 11767 ;;		_Flash_Memory_Read
 11768 ;;		_Flash_Memory_Write
 11769 ;;		_setMemory_Data
 11770 ;;		_setPercentValue
 11771 ;; This function is called by:
 11772 ;;		_main
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function _Flash_Memory_Initialization
 11778  064A                     _Flash_Memory_Initialization:	
 11779                           
 11780                           ;MCU_B1.c: 926: char i = 0;
 11781                           
 11782                           ;incstack = 0
 11783                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11784  064A  0020               	movlb	0	; select bank0
 11785  064B  01E3               	clrf	Flash_Memory_Initialization@i
 11786                           
 11787                           ;MCU_B1.c: 927: if (Flash_Memory_Read(31) == 0xaa) {
 11788  064C  301F               	movlw	31
 11789  064D  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11790  0650  3AAA               	xorlw	170
 11791  0651  1D03               	skipz
 11792  0652  2EBC               	goto	l7566
 11793                           
 11794                           ;MCU_B1.c: 928: product->Data[12] = Flash_Memory_Read(0);
 11795  0653  3000               	movlw	0
 11796  0654  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11797  0657  0020               	movlb	0	; select bank0
 11798  0658  00E2               	movwf	??_Flash_Memory_Initialization
 11799  0659  086E               	movf	_product,w
 11800  065A  3E0C               	addlw	12
 11801  065B  0086               	movwf	6
 11802  065C  3002               	movlw	2	; select bank4/5
 11803  065D  0087               	movwf	7
 11804  065E  0862               	movf	??_Flash_Memory_Initialization,w
 11805  065F  0081               	movwf	1
 11806                           
 11807                           ;MCU_B1.c: 929: product->Data[13] = Flash_Memory_Read(1);
 11808  0660  3001               	movlw	1
 11809  0661  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11810  0664  0020               	movlb	0	; select bank0
 11811  0665  00E2               	movwf	??_Flash_Memory_Initialization
 11812  0666  086E               	movf	_product,w
 11813  0667  3E0D               	addlw	13
 11814  0668  0086               	movwf	6
 11815  0669  3002               	movlw	2	; select bank4/5
 11816  066A  0087               	movwf	7
 11817  066B  0862               	movf	??_Flash_Memory_Initialization,w
 11818  066C  0081               	movwf	1
 11819                           
 11820                           ;MCU_B1.c: 930: product->Data[14] = Flash_Memory_Read(2);
 11821  066D  3002               	movlw	2
 11822  066E  3187  27E5  3186   	fcall	_Flash_Memory_Read
 11823  0671  0020               	movlb	0	; select bank0
 11824  0672  00E2               	movwf	??_Flash_Memory_Initialization
 11825  0673  086E               	movf	_product,w
 11826  0674  3E0E               	addlw	14
 11827  0675  0086               	movwf	6
 11828  0676  3002               	movlw	2	; select bank4/5
 11829  0677  0087               	movwf	7
 11830  0678  0862               	movf	??_Flash_Memory_Initialization,w
 11831  0679  0081               	movwf	1
 11832                           
 11833                           ;MCU_B1.c: 936: i = setPercentValue(((char)(65*0.8)));
 11834  067A  3034               	movlw	52
 11835  067B  318A  2235  3186   	fcall	_setPercentValue
 11836  067E  0020               	movlb	0	; select bank0
 11837  067F  00E2               	movwf	??_Flash_Memory_Initialization
 11838  0680  0862               	movf	??_Flash_Memory_Initialization,w
 11839  0681  00E3               	movwf	Flash_Memory_Initialization@i
 11840                           
 11841                           ;MCU_B1.c: 937: product->Data[21] = i;
 11842  0682  0863               	movf	Flash_Memory_Initialization@i,w
 11843  0683  00E2               	movwf	??_Flash_Memory_Initialization
 11844  0684  086E               	movf	_product,w
 11845  0685  3E15               	addlw	21
 11846  0686  0086               	movwf	6
 11847  0687  3002               	movlw	2	; select bank4/5
 11848  0688  0087               	movwf	7
 11849  0689  0862               	movf	??_Flash_Memory_Initialization,w
 11850  068A  0081               	movwf	1
 11851                           
 11852                           ;MCU_B1.c: 938: product->Data[22] = i;
 11853  068B  0863               	movf	Flash_Memory_Initialization@i,w
 11854  068C  00E2               	movwf	??_Flash_Memory_Initialization
 11855  068D  086E               	movf	_product,w
 11856  068E  3E16               	addlw	22
 11857  068F  0086               	movwf	6
 11858  0690  3002               	movlw	2	; select bank4/5
 11859  0691  0087               	movwf	7
 11860  0692  0862               	movf	??_Flash_Memory_Initialization,w
 11861  0693  0081               	movwf	1
 11862                           
 11863                           ;MCU_B1.c: 939: product->Data[23] = i;
 11864  0694  0863               	movf	Flash_Memory_Initialization@i,w
 11865  0695  00E2               	movwf	??_Flash_Memory_Initialization
 11866  0696  086E               	movf	_product,w
 11867  0697  3E17               	addlw	23
 11868  0698  0086               	movwf	6
 11869  0699  3002               	movlw	2	; select bank4/5
 11870  069A  0087               	movwf	7
 11871  069B  0862               	movf	??_Flash_Memory_Initialization,w
 11872  069C  0081               	movwf	1
 11873                           
 11874                           ;MCU_B1.c: 941: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11875  069D  086E               	movf	_product,w
 11876  069E  3E0C               	addlw	12
 11877  069F  0086               	movwf	6
 11878  06A0  3002               	movlw	2	; select bank4/5
 11879  06A1  0087               	movwf	7
 11880  06A2  0801               	movf	1,w
 11881  06A3  3AFF               	xorlw	255
 11882  06A4  1D03               	skipz
 11883  06A5  0008               	return
 11884  06A6  086E               	movf	_product,w
 11885  06A7  3E0D               	addlw	13
 11886  06A8  0086               	movwf	6
 11887  06A9  3002               	movlw	2	; select bank4/5
 11888  06AA  0087               	movwf	7
 11889  06AB  0801               	movf	1,w
 11890  06AC  3AFF               	xorlw	255
 11891  06AD  1D03               	skipz
 11892  06AE  0008               	return
 11893  06AF  086E               	movf	_product,w
 11894  06B0  3E0E               	addlw	14
 11895  06B1  0086               	movwf	6
 11896  06B2  3002               	movlw	2	; select bank4/5
 11897  06B3  0087               	movwf	7
 11898  06B4  0801               	movf	1,w
 11899  06B5  3AFF               	xorlw	255
 11900  06B6  1D03               	skipz
 11901  06B7  0008               	return
 11902                           
 11903                           ;MCU_B1.c: 942: myMain.FirstOpen = 1;
 11904  06B8  0021               	movlb	1	; select bank1
 11905  06B9  15A0               	bsf	_myMain^(0+128),3
 11906                           
 11907                           ;MCU_B1.c: 943: myMain.First = 1;
 11908  06BA  16A0               	bsf	_myMain^(0+128),5
 11909                           
 11910                           ;MCU_B1.c: 944: }
 11911                           ;MCU_B1.c: 945: } else {
 11912  06BB  0008               	return
 11913  06BC                     l7566:	
 11914                           
 11915                           ;MCU_B1.c: 946: i = setPercentValue(((char)(65*0.8)));
 11916  06BC  3034               	movlw	52
 11917  06BD  318A  2235  3186   	fcall	_setPercentValue
 11918  06C0  0020               	movlb	0	; select bank0
 11919  06C1  00E2               	movwf	??_Flash_Memory_Initialization
 11920  06C2  0862               	movf	??_Flash_Memory_Initialization,w
 11921  06C3  00E3               	movwf	Flash_Memory_Initialization@i
 11922                           
 11923                           ;MCU_B1.c: 947: setMemory_Data(0, 0xff);
 11924  06C4  30FF               	movlw	255
 11925  06C5  00E2               	movwf	??_Flash_Memory_Initialization
 11926  06C6  0862               	movf	??_Flash_Memory_Initialization,w
 11927  06C7  00A0               	movwf	setMemory_Data@data
 11928  06C8  3000               	movlw	0
 11929  06C9  319C  2469  3186   	fcall	_setMemory_Data
 11930                           
 11931                           ;MCU_B1.c: 948: setMemory_Data(1, 0xff);
 11932  06CC  30FF               	movlw	255
 11933  06CD  0020               	movlb	0	; select bank0
 11934  06CE  00E2               	movwf	??_Flash_Memory_Initialization
 11935  06CF  0862               	movf	??_Flash_Memory_Initialization,w
 11936  06D0  00A0               	movwf	setMemory_Data@data
 11937  06D1  3001               	movlw	1
 11938  06D2  319C  2469  3186   	fcall	_setMemory_Data
 11939                           
 11940                           ;MCU_B1.c: 949: setMemory_Data(2, 0xff);
 11941  06D5  30FF               	movlw	255
 11942  06D6  0020               	movlb	0	; select bank0
 11943  06D7  00E2               	movwf	??_Flash_Memory_Initialization
 11944  06D8  0862               	movf	??_Flash_Memory_Initialization,w
 11945  06D9  00A0               	movwf	setMemory_Data@data
 11946  06DA  3002               	movlw	2
 11947  06DB  319C  2469  3186   	fcall	_setMemory_Data
 11948                           
 11949                           ;MCU_B1.c: 950: setMemory_Data(3, 0xff);
 11950  06DE  30FF               	movlw	255
 11951  06DF  0020               	movlb	0	; select bank0
 11952  06E0  00E2               	movwf	??_Flash_Memory_Initialization
 11953  06E1  0862               	movf	??_Flash_Memory_Initialization,w
 11954  06E2  00A0               	movwf	setMemory_Data@data
 11955  06E3  3003               	movlw	3
 11956  06E4  319C  2469  3186   	fcall	_setMemory_Data
 11957                           
 11958                           ;MCU_B1.c: 951: setMemory_Data(4, 0xff);
 11959  06E7  30FF               	movlw	255
 11960  06E8  0020               	movlb	0	; select bank0
 11961  06E9  00E2               	movwf	??_Flash_Memory_Initialization
 11962  06EA  0862               	movf	??_Flash_Memory_Initialization,w
 11963  06EB  00A0               	movwf	setMemory_Data@data
 11964  06EC  3004               	movlw	4
 11965  06ED  319C  2469  3186   	fcall	_setMemory_Data
 11966                           
 11967                           ;MCU_B1.c: 952: setMemory_Data(5, 0xff);
 11968  06F0  30FF               	movlw	255
 11969  06F1  0020               	movlb	0	; select bank0
 11970  06F2  00E2               	movwf	??_Flash_Memory_Initialization
 11971  06F3  0862               	movf	??_Flash_Memory_Initialization,w
 11972  06F4  00A0               	movwf	setMemory_Data@data
 11973  06F5  3005               	movlw	5
 11974  06F6  319C  2469  3186   	fcall	_setMemory_Data
 11975                           
 11976                           ;MCU_B1.c: 953: setMemory_Data(31, 0xaa);
 11977  06F9  30AA               	movlw	170
 11978  06FA  0020               	movlb	0	; select bank0
 11979  06FB  00E2               	movwf	??_Flash_Memory_Initialization
 11980  06FC  0862               	movf	??_Flash_Memory_Initialization,w
 11981  06FD  00A0               	movwf	setMemory_Data@data
 11982  06FE  301F               	movlw	31
 11983  06FF  319C  2469  3186   	fcall	_setMemory_Data
 11984                           
 11985                           ;MCU_B1.c: 954: product->Data[21] = i;
 11986  0702  0020               	movlb	0	; select bank0
 11987  0703  0863               	movf	Flash_Memory_Initialization@i,w
 11988  0704  00E2               	movwf	??_Flash_Memory_Initialization
 11989  0705  086E               	movf	_product,w
 11990  0706  3E15               	addlw	21
 11991  0707  0086               	movwf	6
 11992  0708  3002               	movlw	2	; select bank4/5
 11993  0709  0087               	movwf	7
 11994  070A  0862               	movf	??_Flash_Memory_Initialization,w
 11995  070B  0081               	movwf	1
 11996                           
 11997                           ;MCU_B1.c: 955: product->Data[22] = i;
 11998  070C  0863               	movf	Flash_Memory_Initialization@i,w
 11999  070D  00E2               	movwf	??_Flash_Memory_Initialization
 12000  070E  086E               	movf	_product,w
 12001  070F  3E16               	addlw	22
 12002  0710  0086               	movwf	6
 12003  0711  3002               	movlw	2	; select bank4/5
 12004  0712  0087               	movwf	7
 12005  0713  0862               	movf	??_Flash_Memory_Initialization,w
 12006  0714  0081               	movwf	1
 12007                           
 12008                           ;MCU_B1.c: 956: product->Data[23] = i;
 12009  0715  0863               	movf	Flash_Memory_Initialization@i,w
 12010  0716  00E2               	movwf	??_Flash_Memory_Initialization
 12011  0717  086E               	movf	_product,w
 12012  0718  3E17               	addlw	23
 12013  0719  0086               	movwf	6
 12014  071A  3002               	movlw	2	; select bank4/5
 12015  071B  0087               	movwf	7
 12016  071C  0862               	movf	??_Flash_Memory_Initialization,w
 12017  071D  0081               	movwf	1
 12018                           
 12019                           ;MCU_B1.c: 957: GIE = 0;
 12020  071E  138B               	bcf	11,7	;volatile
 12021                           
 12022                           ;MCU_B1.c: 958: Flash_Memory_Write();
 12023  071F  3191  2141         	fcall	_Flash_Memory_Write
 12024                           
 12025                           ;MCU_B1.c: 959: GIE = 1;
 12026  0721  178B               	bsf	11,7	;volatile
 12027                           
 12028                           ;MCU_B1.c: 960: myMain.FirstOpen = 1;
 12029  0722  0021               	movlb	1	; select bank1
 12030  0723  15A0               	bsf	_myMain^(0+128),3
 12031                           
 12032                           ;MCU_B1.c: 961: myMain.First = 1;
 12033  0724  16A0               	bsf	_myMain^(0+128),5
 12034  0725  0008               	return
 12035  0726                     __end_of_Flash_Memory_Initialization:	
 12036                           
 12037                           	psect	text69
 12038  1C69                     __ptext69:	
 12039 ;; *************** function _setMemory_Data *****************
 12040 ;; Defined at:
 12041 ;;		line 1076 in file "../src/MCU_B1.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;  address         1    wreg     unsigned char 
 12044 ;;  data            1    0[BANK0 ] unsigned char 
 12045 ;; Auto vars:     Size  Location     Type
 12046 ;;  address         1    2[BANK0 ] unsigned char 
 12047 ;; Return value:  Size  Location     Type
 12048 ;;		None               void
 12049 ;; Registers used:
 12050 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12051 ;; Tracked objects:
 12052 ;;		On entry : 0/0
 12053 ;;		On exit  : 0/0
 12054 ;;		Unchanged: 0/0
 12055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12056 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;Total ram usage:        3 bytes
 12061 ;; Hardware stack levels used:    1
 12062 ;; Hardware stack levels required when called:    5
 12063 ;; This function calls:
 12064 ;;		Nothing
 12065 ;; This function is called by:
 12066 ;;		_Flash_Memory_Initialization
 12067 ;;		_Flash_Memory_Modify
 12068 ;; This function uses a non-reentrant model
 12069 ;;
 12070                           
 12071                           
 12072                           ;psect for function _setMemory_Data
 12073  1C69                     _setMemory_Data:	
 12074                           
 12075                           ;incstack = 0
 12076                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12077                           ;setMemory_Data@address stored from wreg
 12078  1C69  0020               	movlb	0	; select bank0
 12079  1C6A  00A2               	movwf	setMemory_Data@address
 12080                           
 12081                           ;MCU_B1.c: 1077: Memory.Data[address] = data;
 12082  1C6B  0820               	movf	setMemory_Data@data,w
 12083  1C6C  00A1               	movwf	??_setMemory_Data
 12084  1C6D  0822               	movf	setMemory_Data@address,w
 12085  1C6E  3EA0               	addlw	_Memory& (0+255)
 12086  1C6F  0086               	movwf	6
 12087  1C70  3001               	movlw	1	; select bank3/4
 12088  1C71  0087               	movwf	7
 12089  1C72  0821               	movf	??_setMemory_Data,w
 12090  1C73  0081               	movwf	1
 12091  1C74  0008               	return
 12092  1C75                     __end_of_setMemory_Data:	
 12093                           
 12094                           	psect	text70
 12095  1141                     __ptext70:	
 12096 ;; *************** function _Flash_Memory_Write *****************
 12097 ;; Defined at:
 12098 ;;		line 1009 in file "../src/MCU_B1.c"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;		None
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;  i               1    1[BANK0 ] unsigned char 
 12103 ;; Return value:  Size  Location     Type
 12104 ;;		None               void
 12105 ;; Registers used:
 12106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;Total ram usage:        2 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; Hardware stack levels required when called:    6
 12119 ;; This function calls:
 12120 ;;		_Flash_Memory_Unlock
 12121 ;; This function is called by:
 12122 ;;		_Flash_Memory_Initialization
 12123 ;;		_Flash_Memory_Modify
 12124 ;; This function uses a non-reentrant model
 12125 ;;
 12126                           
 12127                           
 12128                           ;psect for function _Flash_Memory_Write
 12129  1141                     _Flash_Memory_Write:	
 12130                           
 12131                           ;MCU_B1.c: 1010: char i = 0;
 12132                           
 12133                           ;incstack = 0
 12134                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12135  1141  0020               	movlb	0	; select bank0
 12136  1142  01A1               	clrf	Flash_Memory_Write@i
 12137                           
 12138                           ;MCU_B1.c: 1011: CFGS = 0;
 12139  1143  0023               	movlb	3	; select bank3
 12140  1144  1315               	bcf	21,6	;volatile
 12141                           
 12142                           ;MCU_B1.c: 1012: PMADRH = 0x30;
 12143  1145  3030               	movlw	48
 12144  1146  0092               	movwf	18	;volatile
 12145                           
 12146                           ;MCU_B1.c: 1013: PMDATH = 0;
 12147  1147  0194               	clrf	20	;volatile
 12148                           
 12149                           ;MCU_B1.c: 1014: FREE = 0;
 12150  1148  1215               	bcf	21,4	;volatile
 12151                           
 12152                           ;MCU_B1.c: 1015: LWLO = 1;
 12153  1149  1695               	bsf	21,5	;volatile
 12154                           
 12155                           ;MCU_B1.c: 1016: WREN = 1;
 12156  114A  1515               	bsf	21,2	;volatile
 12157                           
 12158                           ;MCU_B1.c: 1017: for (i = 0; i < 32; i++) {
 12159  114B  0020               	movlb	0	; select bank0
 12160  114C  01A1               	clrf	Flash_Memory_Write@i
 12161  114D  3020               	movlw	32
 12162  114E  0221               	subwf	Flash_Memory_Write@i,w
 12163  114F  1803               	btfsc	3,0
 12164  1150  2969               	goto	l1197
 12165  1151                     l6630:	
 12166                           
 12167                           ;MCU_B1.c: 1018: PMADRL = i;
 12168  1151  0821               	movf	Flash_Memory_Write@i,w
 12169  1152  0023               	movlb	3	; select bank3
 12170  1153  0091               	movwf	17	;volatile
 12171                           
 12172                           ;MCU_B1.c: 1019: PMDATL = Memory.Data[i];
 12173  1154  0020               	movlb	0	; select bank0
 12174  1155  0821               	movf	Flash_Memory_Write@i,w
 12175  1156  3EA0               	addlw	_Memory& (0+255)
 12176  1157  0086               	movwf	6
 12177  1158  3001               	movlw	1	; select bank3/4
 12178  1159  0087               	movwf	7
 12179  115A  0801               	movf	1,w
 12180  115B  0023               	movlb	3	; select bank3
 12181  115C  0093               	movwf	19	;volatile
 12182                           
 12183                           ;MCU_B1.c: 1020: Flash_Memory_Unlock();
 12184  115D  319B  23D3  3191   	fcall	_Flash_Memory_Unlock
 12185  1160  3001               	movlw	1
 12186  1161  0020               	movlb	0	; select bank0
 12187  1162  00A0               	movwf	??_Flash_Memory_Write
 12188  1163  0820               	movf	??_Flash_Memory_Write,w
 12189  1164  07A1               	addwf	Flash_Memory_Write@i,f
 12190  1165  3020               	movlw	32
 12191  1166  0221               	subwf	Flash_Memory_Write@i,w
 12192  1167  1C03               	skipc
 12193  1168  2951               	goto	l6630
 12194  1169                     l1197:	
 12195                           
 12196                           ;MCU_B1.c: 1021: }
 12197                           ;MCU_B1.c: 1022: LWLO = 0;
 12198  1169  0023               	movlb	3	; select bank3
 12199  116A  1295               	bcf	21,5	;volatile
 12200                           
 12201                           ;MCU_B1.c: 1023: Flash_Memory_Unlock();
 12202  116B  319B  23D3         	fcall	_Flash_Memory_Unlock
 12203                           
 12204                           ;MCU_B1.c: 1024: WREN = 0;
 12205  116D  0023               	movlb	3	; select bank3
 12206  116E  1115               	bcf	21,2	;volatile
 12207  116F  0008               	return
 12208  1170                     __end_of_Flash_Memory_Write:	
 12209                           
 12210                           	psect	text71
 12211  1BD3                     __ptext71:	
 12212 ;; *************** function _Flash_Memory_Unlock *****************
 12213 ;; Defined at:
 12214 ;;		line 988 in file "../src/MCU_B1.c"
 12215 ;; Parameters:    Size  Location     Type
 12216 ;;		None
 12217 ;; Auto vars:     Size  Location     Type
 12218 ;;		None
 12219 ;; Return value:  Size  Location     Type
 12220 ;;		None               void
 12221 ;; Registers used:
 12222 ;;		wreg
 12223 ;; Tracked objects:
 12224 ;;		On entry : 0/0
 12225 ;;		On exit  : 0/0
 12226 ;;		Unchanged: 0/0
 12227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12232 ;;Total ram usage:        0 bytes
 12233 ;; Hardware stack levels used:    1
 12234 ;; Hardware stack levels required when called:    5
 12235 ;; This function calls:
 12236 ;;		Nothing
 12237 ;; This function is called by:
 12238 ;;		_Flash_Memory_Write
 12239 ;;		_Flash_Memory_Erasing
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           
 12244                           ;psect for function _Flash_Memory_Unlock
 12245  1BD3                     _Flash_Memory_Unlock:	
 12246                           
 12247                           ;MCU_B1.c: 989: PMCON2 = 0x55;
 12248                           
 12249                           ;incstack = 0
 12250                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12251  1BD3  3055               	movlw	85
 12252  1BD4  0023               	movlb	3	; select bank3
 12253  1BD5  0096               	movwf	22	;volatile
 12254                           
 12255                           ;MCU_B1.c: 990: PMCON2 = 0xaa;
 12256  1BD6  30AA               	movlw	170
 12257  1BD7  0096               	movwf	22	;volatile
 12258                           
 12259                           ;MCU_B1.c: 991: WR = 1;
 12260  1BD8  1495               	bsf	21,1	;volatile
 12261                           
 12262                           ;MCU_B1.c: 992: __nop();
 12263  1BD9  0000               	nop
 12264                           
 12265                           ;MCU_B1.c: 993: __nop();
 12266  1BDA  0000               	nop
 12267  1BDB  0008               	return
 12268  1BDC                     __end_of_Flash_Memory_Unlock:	
 12269                           
 12270                           	psect	text72
 12271  07E5                     __ptext72:	
 12272 ;; *************** function _Flash_Memory_Read *****************
 12273 ;; Defined at:
 12274 ;;		line 997 in file "../src/MCU_B1.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;  address         1    wreg     unsigned char 
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;  address         1    2[BANK0 ] unsigned char 
 12279 ;;  ret             1    3[BANK0 ] unsigned char 
 12280 ;;  i               1    1[BANK0 ] unsigned char 
 12281 ;; Return value:  Size  Location     Type
 12282 ;;                  1    wreg      unsigned char 
 12283 ;; Registers used:
 12284 ;;		wreg, status,2
 12285 ;; Tracked objects:
 12286 ;;		On entry : 0/0
 12287 ;;		On exit  : 0/0
 12288 ;;		Unchanged: 0/0
 12289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;Total ram usage:        4 bytes
 12295 ;; Hardware stack levels used:    1
 12296 ;; Hardware stack levels required when called:    5
 12297 ;; This function calls:
 12298 ;;		Nothing
 12299 ;; This function is called by:
 12300 ;;		_Flash_Memory_Initialization
 12301 ;;		_Flash_Memory_Modify
 12302 ;; This function uses a non-reentrant model
 12303 ;;
 12304                           
 12305                           
 12306                           ;psect for function _Flash_Memory_Read
 12307  07E5                     _Flash_Memory_Read:	
 12308                           
 12309                           ;incstack = 0
 12310                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12311                           ;Flash_Memory_Read@address stored from wreg
 12312  07E5  0020               	movlb	0	; select bank0
 12313  07E6  00A2               	movwf	Flash_Memory_Read@address
 12314                           
 12315                           ;MCU_B1.c: 998: char i = 0, ret = 0;
 12316  07E7  01A1               	clrf	Flash_Memory_Read@i
 12317  07E8  01A3               	clrf	Flash_Memory_Read@ret
 12318                           
 12319                           ;MCU_B1.c: 999: PMADRH = 0x30;
 12320  07E9  3030               	movlw	48
 12321  07EA  0023               	movlb	3	; select bank3
 12322  07EB  0092               	movwf	18	;volatile
 12323                           
 12324                           ;MCU_B1.c: 1000: PMADRL = address;
 12325  07EC  0020               	movlb	0	; select bank0
 12326  07ED  0822               	movf	Flash_Memory_Read@address,w
 12327  07EE  0023               	movlb	3	; select bank3
 12328  07EF  0091               	movwf	17	;volatile
 12329                           
 12330                           ;MCU_B1.c: 1001: CFGS = 0;
 12331  07F0  1315               	bcf	21,6	;volatile
 12332                           
 12333                           ;MCU_B1.c: 1002: RD = 1;
 12334  07F1  1415               	bsf	21,0	;volatile
 12335                           
 12336                           ;MCU_B1.c: 1003: i = PMDATH;
 12337  07F2  0814               	movf	20,w	;volatile
 12338  07F3  0020               	movlb	0	; select bank0
 12339  07F4  00A0               	movwf	??_Flash_Memory_Read
 12340  07F5  0820               	movf	??_Flash_Memory_Read,w
 12341  07F6  00A1               	movwf	Flash_Memory_Read@i
 12342                           
 12343                           ;MCU_B1.c: 1004: ret = PMDATL;
 12344  07F7  0023               	movlb	3	; select bank3
 12345  07F8  0813               	movf	19,w	;volatile
 12346  07F9  0020               	movlb	0	; select bank0
 12347  07FA  00A0               	movwf	??_Flash_Memory_Read
 12348  07FB  0820               	movf	??_Flash_Memory_Read,w
 12349  07FC  00A3               	movwf	Flash_Memory_Read@ret
 12350                           
 12351                           ;MCU_B1.c: 1005: return ret;
 12352  07FD  0823               	movf	Flash_Memory_Read@ret,w
 12353  07FE  0008               	return
 12354  07FF                     __end_of_Flash_Memory_Read:	
 12355                           
 12356                           	psect	text73
 12357  1E61                     __ptext73:	
 12358 ;; *************** function _Exception_Main *****************
 12359 ;; Defined at:
 12360 ;;		line 488 in file "../src/Main_B1.c"
 12361 ;; Parameters:    Size  Location     Type
 12362 ;;		None
 12363 ;; Auto vars:     Size  Location     Type
 12364 ;;  error           1    8[BANK0 ] unsigned char 
 12365 ;; Return value:  Size  Location     Type
 12366 ;;		None               void
 12367 ;; Registers used:
 12368 ;;		wreg, status,2, status,0, pclath, cstack
 12369 ;; Tracked objects:
 12370 ;;		On entry : 0/0
 12371 ;;		On exit  : 0/0
 12372 ;;		Unchanged: 0/0
 12373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12377 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;Total ram usage:        2 bytes
 12379 ;; Hardware stack levels used:    1
 12380 ;; Hardware stack levels required when called:    6
 12381 ;; This function calls:
 12382 ;;		_getMain_All_Error_Status
 12383 ;; This function is called by:
 12384 ;;		_main
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           
 12389                           ;psect for function _Exception_Main
 12390  1E61                     _Exception_Main:	
 12391                           
 12392                           ;Main_B1.c: 489: char error = getMain_All_Error_Status(0);
 12393                           
 12394                           ;incstack = 0
 12395                           ; Regs used in _Exception_Main: [wreg+status,2+status,0+pclath+cstack]
 12396  1E61  3000               	movlw	0
 12397  1E62  3191  21D2  319E   	fcall	_getMain_All_Error_Status
 12398  1E65  0020               	movlb	0	; select bank0
 12399  1E66  00A7               	movwf	??_Exception_Main
 12400  1E67  0827               	movf	??_Exception_Main,w
 12401  1E68  00A8               	movwf	Exception_Main@error
 12402                           
 12403                           ;Main_B1.c: 491: if (myMain.Error_Run == 1) {
 12404  1E69  0021               	movlb	1	; select bank1
 12405  1E6A  1DAB               	btfss	(_myMain^(0+128)+11),3
 12406  1E6B  2E73               	goto	l7914
 12407                           
 12408                           ;Main_B1.c: 492: if (error == 0) {
 12409  1E6C  0020               	movlb	0	; select bank0
 12410  1E6D  08A8               	movf	Exception_Main@error,f
 12411  1E6E  1D03               	skipz
 12412  1E6F  0008               	return
 12413                           
 12414                           ;Main_B1.c: 493: myMain.Error_Run = 0;
 12415  1E70  0021               	movlb	1	; select bank1
 12416  1E71  11AB               	bcf	(_myMain^(0+128)+11),3
 12417                           
 12418                           ;Main_B1.c: 498: }
 12419                           ;Main_B1.c: 499: } else {
 12420  1E72  0008               	return
 12421  1E73                     l7914:	
 12422                           
 12423                           ;Main_B1.c: 500: if (error != 0) {
 12424  1E73  0020               	movlb	0	; select bank0
 12425  1E74  0828               	movf	Exception_Main@error,w
 12426  1E75  1903               	btfsc	3,2
 12427  1E76  0008               	return
 12428                           
 12429                           ;Main_B1.c: 501: myMain.Error_Run = 1;
 12430  1E77  0021               	movlb	1	; select bank1
 12431  1E78  15AB               	bsf	(_myMain^(0+128)+11),3
 12432  1E79  0020               	movlb	0	; select bank0
 12433  1E7A  0008               	return
 12434  1E7B                     __end_of_Exception_Main:	
 12435                           
 12436                           	psect	text74
 12437  1170                     __ptext74:	
 12438 ;; *************** function _DimmerLights_Main *****************
 12439 ;; Defined at:
 12440 ;;		line 390 in file "../src/Dimmer_B1.c"
 12441 ;; Parameters:    Size  Location     Type
 12442 ;;		None
 12443 ;; Auto vars:     Size  Location     Type
 12444 ;;		None
 12445 ;; Return value:  Size  Location     Type
 12446 ;;		None               void
 12447 ;; Registers used:
 12448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12449 ;; Tracked objects:
 12450 ;;		On entry : 0/0
 12451 ;;		On exit  : 0/0
 12452 ;;		Unchanged: 0/0
 12453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;Total ram usage:        4 bytes
 12459 ;; Hardware stack levels used:    1
 12460 ;; Hardware stack levels required when called:   10
 12461 ;; This function calls:
 12462 ;;		_getLoad_OK
 12463 ;;		_getMain_All_Error_Status
 12464 ;;		_getMain_LightsStatus
 12465 ;;		_setDimmerLights_Main
 12466 ;; This function is called by:
 12467 ;;		_main
 12468 ;; This function uses a non-reentrant model
 12469 ;;
 12470                           
 12471                           
 12472                           ;psect for function _DimmerLights_Main
 12473  1170                     _DimmerLights_Main:	
 12474                           
 12475                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 12476                           
 12477                           ;incstack = 0
 12478                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12479  1170  3000               	movlw	0
 12480  1171  3191  21D2  3191   	fcall	_getMain_All_Error_Status
 12481  1174  3800               	iorlw	0
 12482  1175  1D03               	skipz
 12483  1176  299A               	goto	l709
 12484                           
 12485                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 12486  1177  0022               	movlb	2	; select bank2
 12487  1178  1CBE               	btfss	_Dimmer^(0+256),1
 12488  1179  299C               	goto	l7508
 12489                           
 12490                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12491  117A  319B  23BA  3191   	fcall	_getLoad_OK
 12492  117D  3A01               	xorlw	1
 12493  117E  1903               	skipnz
 12494  117F  2991               	goto	l7504
 12495  1180  3191  2116  3191   	fcall	_getMain_LightsStatus
 12496  1183  3A00               	xorlw	0
 12497  1184  1903               	skipnz
 12498  1185  2991               	goto	l7504
 12499  1186  0022               	movlb	2	; select bank2
 12500  1187  0C3E               	rrf	_Dimmer^(0+256),w
 12501  1188  3901               	andlw	1
 12502  1189  0020               	movlb	0	; select bank0
 12503  118A  00E7               	movwf	??_DimmerLights_Main
 12504  118B  01E8               	clrf	??_DimmerLights_Main+1
 12505  118C  0867               	movf	??_DimmerLights_Main,w
 12506  118D  00E9               	movwf	_DimmerLights_Main$2095
 12507  118E  0868               	movf	??_DimmerLights_Main+1,w
 12508  118F  00EA               	movwf	_DimmerLights_Main$2095+1
 12509  1190  2994               	goto	l7506
 12510  1191                     l7504:	
 12511  1191  0020               	movlb	0	; select bank0
 12512  1192  01E9               	clrf	_DimmerLights_Main$2095
 12513  1193  01EA               	clrf	_DimmerLights_Main$2095+1
 12514  1194                     l7506:	
 12515  1194  0869               	movf	_DimmerLights_Main$2095,w
 12516  1195  0022               	movlb	2	; select bank2
 12517  1196  10BE               	bcf	_Dimmer^(0+256),1
 12518  1197  1D03               	skipz
 12519  1198  14BE               	bsf	_Dimmer^(0+256),1
 12520                           
 12521                           ;Dimmer_B1.c: 395: }
 12522                           ;Dimmer_B1.c: 396: } else {
 12523  1199  299C               	goto	l7508
 12524  119A                     l709:	
 12525                           
 12526                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 12527  119A  0022               	movlb	2	; select bank2
 12528  119B  10BE               	bcf	_Dimmer^(0+256),1
 12529  119C                     l7508:	
 12530                           
 12531                           ;Dimmer_B1.c: 398: }
 12532                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 12533  119C  3001               	movlw	1
 12534  119D  3188  2000         	fcall	_setDimmerLights_Main
 12535  119F  0008               	return
 12536  11A0                     __end_of_DimmerLights_Main:	
 12537                           
 12538                           	psect	text75
 12539  0800                     __ptext75:	
 12540 ;; *************** function _setDimmerLights_Main *****************
 12541 ;; Defined at:
 12542 ;;		line 416 in file "../src/Dimmer_B1.c"
 12543 ;; Parameters:    Size  Location     Type
 12544 ;;  lights          1    wreg     unsigned char 
 12545 ;; Auto vars:     Size  Location     Type
 12546 ;;  lights          1   70[BANK0 ] unsigned char 
 12547 ;; Return value:  Size  Location     Type
 12548 ;;		None               void
 12549 ;; Registers used:
 12550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12551 ;; Tracked objects:
 12552 ;;		On entry : 0/0
 12553 ;;		On exit  : 0/0
 12554 ;;		Unchanged: 0/0
 12555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;Total ram usage:        1 bytes
 12561 ;; Hardware stack levels used:    1
 12562 ;; Hardware stack levels required when called:    9
 12563 ;; This function calls:
 12564 ;;		_DimmerLightsPointSelect
 12565 ;;		_setBuz
 12566 ;;		_setDimmerLights
 12567 ;;		_setDimmerLights_Adj
 12568 ;; This function is called by:
 12569 ;;		_DimmerLights_Main
 12570 ;; This function uses a non-reentrant model
 12571 ;;
 12572                           
 12573                           
 12574                           ;psect for function _setDimmerLights_Main
 12575  0800                     _setDimmerLights_Main:	
 12576                           
 12577                           ;incstack = 0
 12578                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12579                           ;setDimmerLights_Main@lights stored from wreg
 12580  0800  0020               	movlb	0	; select bank0
 12581  0801  00E6               	movwf	setDimmerLights_Main@lights
 12582                           
 12583                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 12584  0802  0866               	movf	setDimmerLights_Main@lights,w
 12585  0803  319C  240F  3188   	fcall	_DimmerLightsPointSelect
 12586                           
 12587                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 12588  0806  0020               	movlb	0	; select bank0
 12589  0807  086F               	movf	_DimmerLights,w
 12590  0808  3E08               	addlw	8
 12591  0809  0086               	movwf	6
 12592  080A  3001               	movlw	1	; select bank2/3
 12593  080B  0087               	movwf	7
 12594  080C  1D01               	btfss	1,2
 12595  080D  282B               	goto	l6962
 12596                           
 12597                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 12598  080E  0022               	movlb	2	; select bank2
 12599  080F  18BE               	btfsc	_Dimmer^(0+256),1
 12600  0810  0008               	return
 12601                           
 12602                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 12603  0811  0020               	movlb	0	; select bank0
 12604  0812  086F               	movf	_DimmerLights,w
 12605  0813  3E08               	addlw	8
 12606  0814  0086               	movwf	6
 12607  0815  3001               	movlw	1	; select bank2/3
 12608  0816  0087               	movwf	7
 12609  0817  1101               	bcf	1,2
 12610                           
 12611                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 12612  0818  086F               	movf	_DimmerLights,w
 12613  0819  3E08               	addlw	8
 12614  081A  0086               	movwf	6
 12615  081B  3001               	movlw	1	; select bank2/3
 12616  081C  0087               	movwf	7
 12617  081D  1C81               	btfss	1,1
 12618  081E  2825               	goto	l6960
 12619                           
 12620                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 12621  081F  01E2               	clrf	setDimmerLights@status
 12622  0820  0AE2               	incf	setDimmerLights@status,f
 12623  0821  0866               	movf	setDimmerLights_Main@lights,w
 12624  0822  318C  24D7         	fcall	_setDimmerLights
 12625                           
 12626                           ;Dimmer_B1.c: 425: } else {
 12627  0824  0008               	return
 12628  0825                     l6960:	
 12629                           
 12630                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 12631  0825  0020               	movlb	0	; select bank0
 12632  0826  01E2               	clrf	setDimmerLights@status
 12633  0827  0866               	movf	setDimmerLights_Main@lights,w
 12634  0828  318C  24D7         	fcall	_setDimmerLights
 12635                           
 12636                           ;Dimmer_B1.c: 427: }
 12637                           ;Dimmer_B1.c: 428: }
 12638                           ;Dimmer_B1.c: 429: } else {
 12639  082A  0008               	return
 12640  082B                     l6962:	
 12641                           
 12642                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 12643  082B  0020               	movlb	0	; select bank0
 12644  082C  086F               	movf	_DimmerLights,w
 12645  082D  3E08               	addlw	8
 12646  082E  0086               	movwf	6
 12647  082F  3001               	movlw	1	; select bank2/3
 12648  0830  0087               	movwf	7
 12649  0831  1E01               	btfss	1,4
 12650  0832  0008               	return
 12651                           
 12652                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 12653  0833  0022               	movlb	2	; select bank2
 12654  0834  18BE               	btfsc	_Dimmer^(0+256),1
 12655  0835  0008               	return
 12656                           
 12657                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 12658  0836  0020               	movlb	0	; select bank0
 12659  0837  086F               	movf	_DimmerLights,w
 12660  0838  3E08               	addlw	8
 12661  0839  0086               	movwf	6
 12662  083A  3001               	movlw	1	; select bank2/3
 12663  083B  0087               	movwf	7
 12664  083C  1201               	bcf	1,4
 12665                           
 12666                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 12667  083D  086F               	movf	_DimmerLights,w
 12668  083E  3E08               	addlw	8
 12669  083F  0086               	movwf	6
 12670  0840  3001               	movlw	1	; select bank2/3
 12671  0841  0087               	movwf	7
 12672  0842  1D81               	btfss	1,3
 12673  0843  2853               	goto	l6972
 12674                           
 12675                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 12676  0844  01E2               	clrf	setDimmerLights_Adj@status
 12677  0845  0AE2               	incf	setDimmerLights_Adj@status,f
 12678  0846  0866               	movf	setDimmerLights_Main@lights,w
 12679  0847  318A  22FF  3188   	fcall	_setDimmerLights_Adj
 12680                           
 12681                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 12682  084A  3064               	movlw	100
 12683  084B  0020               	movlb	0	; select bank0
 12684  084C  00A9               	movwf	setBuz@time
 12685  084D  3000               	movlw	0
 12686  084E  00AA               	movwf	setBuz@time+1
 12687  084F  3001               	movlw	1
 12688  0850  3196  2694         	fcall	_setBuz
 12689                           
 12690                           ;Dimmer_B1.c: 436: } else {
 12691  0852  0008               	return
 12692  0853                     l6972:	
 12693                           
 12694                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 12695  0853  0020               	movlb	0	; select bank0
 12696  0854  01E2               	clrf	setDimmerLights_Adj@status
 12697  0855  0866               	movf	setDimmerLights_Main@lights,w
 12698  0856  318A  22FF         	fcall	_setDimmerLights_Adj
 12699  0858  0008               	return
 12700  0859                     __end_of_setDimmerLights_Main:	
 12701                           
 12702                           	psect	text76
 12703  0AFF                     __ptext76:	
 12704 ;; *************** function _setDimmerLights_Adj *****************
 12705 ;; Defined at:
 12706 ;;		line 716 in file "../src/Dimmer_B1.c"
 12707 ;; Parameters:    Size  Location     Type
 12708 ;;  lights          1    wreg     unsigned char 
 12709 ;;  status          1   66[BANK0 ] unsigned char 
 12710 ;; Auto vars:     Size  Location     Type
 12711 ;;  lights          1   69[BANK0 ] unsigned char 
 12712 ;; Return value:  Size  Location     Type
 12713 ;;		None               void
 12714 ;; Registers used:
 12715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12716 ;; Tracked objects:
 12717 ;;		On entry : 0/0
 12718 ;;		On exit  : 0/0
 12719 ;;		Unchanged: 0/0
 12720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12721 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;Total ram usage:        4 bytes
 12726 ;; Hardware stack levels used:    1
 12727 ;; Hardware stack levels required when called:    8
 12728 ;; This function calls:
 12729 ;;		_DimmerLightsPointSelect
 12730 ;;		_getMain_All_Error_Status
 12731 ;;		_setPercentValue
 12732 ;;		_setRF_DimmerLights
 12733 ;;		_setTxData
 12734 ;; This function is called by:
 12735 ;;		_setDimmerLights_Main
 12736 ;; This function uses a non-reentrant model
 12737 ;;
 12738                           
 12739                           
 12740                           ;psect for function _setDimmerLights_Adj
 12741  0AFF                     _setDimmerLights_Adj:	
 12742                           
 12743                           ;incstack = 0
 12744                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12745                           ;setDimmerLights_Adj@lights stored from wreg
 12746  0AFF  0020               	movlb	0	; select bank0
 12747  0B00  00E5               	movwf	setDimmerLights_Adj@lights
 12748                           
 12749                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12750  0B01  0865               	movf	setDimmerLights_Adj@lights,w
 12751  0B02  319C  240F  318A   	fcall	_DimmerLightsPointSelect
 12752                           
 12753                           ;Dimmer_B1.c: 718: if (status == 1) {
 12754  0B05  0020               	movlb	0	; select bank0
 12755  0B06  0862               	movf	setDimmerLights_Adj@status,w
 12756  0B07  3A01               	xorlw	1
 12757  0B08  1D03               	skipz
 12758  0B09  2B15               	goto	l6540
 12759                           
 12760                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12761  0B0A  086F               	movf	_DimmerLights,w
 12762  0B0B  0086               	movwf	6
 12763  0B0C  3001               	movlw	1	; select bank2/3
 12764  0B0D  0087               	movwf	7
 12765  0B0E  1581               	bsf	1,3
 12766                           
 12767                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12768  0B0F  086F               	movf	_DimmerLights,w
 12769  0B10  0086               	movwf	6
 12770  0B11  3001               	movlw	1	; select bank2/3
 12771  0B12  0087               	movwf	7
 12772  0B13  1481               	bsf	1,1
 12773                           
 12774                           ;Dimmer_B1.c: 721: } else {
 12775  0B14  0008               	return
 12776  0B15                     l6540:	
 12777                           
 12778                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12779  0B15  086F               	movf	_DimmerLights,w
 12780  0B16  0086               	movwf	6
 12781  0B17  3001               	movlw	1	; select bank2/3
 12782  0B18  0087               	movwf	7
 12783  0B19  1D81               	btfss	1,3
 12784  0B1A  0008               	return
 12785                           
 12786                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12787  0B1B  086F               	movf	_DimmerLights,w
 12788  0B1C  0086               	movwf	6
 12789  0B1D  3001               	movlw	1	; select bank2/3
 12790  0B1E  0087               	movwf	7
 12791  0B1F  1081               	bcf	1,1
 12792                           
 12793                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12794  0B20  086F               	movf	_DimmerLights,w
 12795  0B21  0086               	movwf	6
 12796  0B22  3001               	movlw	1	; select bank2/3
 12797  0B23  0087               	movwf	7
 12798  0B24  1181               	bcf	1,3
 12799                           
 12800                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12801  0B25  086F               	movf	_DimmerLights,w
 12802  0B26  3E04               	addlw	4
 12803  0B27  0086               	movwf	6
 12804  0B28  3001               	movlw	1	; select bank2/3
 12805  0B29  0087               	movwf	7
 12806  0B2A  0801               	movf	1,w
 12807  0B2B  00E3               	movwf	??_setDimmerLights_Adj
 12808  0B2C  086F               	movf	_DimmerLights,w
 12809  0B2D  3E05               	addlw	5
 12810  0B2E  0086               	movwf	6
 12811  0B2F  3001               	movlw	1	; select bank2/3
 12812  0B30  0087               	movwf	7
 12813  0B31  0863               	movf	??_setDimmerLights_Adj,w
 12814  0B32  0081               	movwf	1
 12815                           
 12816                           ;Dimmer_B1.c: 726: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12817  0B33  086F               	movf	_DimmerLights,w
 12818  0B34  3E04               	addlw	4
 12819  0B35  0086               	movwf	6
 12820  0B36  3001               	movlw	1	; select bank2/3
 12821  0B37  0087               	movwf	7
 12822  0B38  0801               	movf	1,w
 12823  0B39  318A  2235  318A   	fcall	_setPercentValue
 12824  0B3C  0020               	movlb	0	; select bank0
 12825  0B3D  00E3               	movwf	??_setDimmerLights_Adj
 12826  0B3E  0865               	movf	setDimmerLights_Adj@lights,w
 12827  0B3F  3E14               	addlw	20
 12828  0B40  076E               	addwf	_product,w
 12829  0B41  00E4               	movwf	??_setDimmerLights_Adj+1
 12830  0B42  0864               	movf	??_setDimmerLights_Adj+1,w
 12831  0B43  0086               	movwf	6
 12832  0B44  3002               	movlw	2	; select bank4/5
 12833  0B45  0087               	movwf	7
 12834  0B46  0863               	movf	??_setDimmerLights_Adj,w
 12835  0B47  0081               	movwf	1
 12836                           
 12837                           ;Dimmer_B1.c: 736: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12838  0B48  3000               	movlw	0
 12839  0B49  3191  21D2  318A   	fcall	_getMain_All_Error_Status
 12840  0B4C  3A00               	xorlw	0
 12841  0B4D  3000               	movlw	0
 12842  0B4E  1903               	skipnz
 12843  0B4F  3001               	movlw	1
 12844  0B50  0020               	movlb	0	; select bank0
 12845  0B51  00E3               	movwf	??_setDimmerLights_Adj
 12846  0B52  0DE3               	rlf	??_setDimmerLights_Adj,f
 12847  0B53  0022               	movlb	2	; select bank2
 12848  0B54  083E               	movf	_Dimmer^(0+256),w
 12849  0B55  0020               	movlb	0	; select bank0
 12850  0B56  0663               	xorwf	??_setDimmerLights_Adj,w
 12851  0B57  39FD               	andlw	-3
 12852  0B58  0663               	xorwf	??_setDimmerLights_Adj,w
 12853  0B59  0022               	movlb	2	; select bank2
 12854  0B5A  00BE               	movwf	_Dimmer^(0+256)
 12855                           
 12856                           ;Dimmer_B1.c: 739: setRF_DimmerLights(lights, 1);
 12857  0B5B  0020               	movlb	0	; select bank0
 12858  0B5C  01A0               	clrf	setRF_DimmerLights@on
 12859  0B5D  0AA0               	incf	setRF_DimmerLights@on,f
 12860  0B5E  0865               	movf	setDimmerLights_Adj@lights,w
 12861  0B5F  3197  2748  318A   	fcall	_setRF_DimmerLights
 12862                           
 12863                           ;Dimmer_B1.c: 740: setTxData();
 12864  0B62  3187  2726         	fcall	_setTxData
 12865  0B64  0008               	return
 12866  0B65                     __end_of_setDimmerLights_Adj:	
 12867                           
 12868                           	psect	text77
 12869  0CD7                     __ptext77:	
 12870 ;; *************** function _setDimmerLights *****************
 12871 ;; Defined at:
 12872 ;;		line 611 in file "../src/Dimmer_B1.c"
 12873 ;; Parameters:    Size  Location     Type
 12874 ;;  lights          1    wreg     unsigned char 
 12875 ;;  status          1   66[BANK0 ] unsigned char 
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;  lights          1   69[BANK0 ] unsigned char 
 12878 ;; Return value:  Size  Location     Type
 12879 ;;		None               void
 12880 ;; Registers used:
 12881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12887 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;Total ram usage:        4 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; Hardware stack levels required when called:    8
 12894 ;; This function calls:
 12895 ;;		_DimmerLightsPointSelect
 12896 ;;		_getMain_All_Error_Status
 12897 ;;		_setDimmerLights_Line
 12898 ;;		_setLED
 12899 ;;		_setPercentValue
 12900 ;;		_setRF_DimmerLights
 12901 ;;		_setTxData
 12902 ;; This function is called by:
 12903 ;;		_setDimmerLights_Main
 12904 ;; This function uses a non-reentrant model
 12905 ;;
 12906                           
 12907                           
 12908                           ;psect for function _setDimmerLights
 12909  0CD7                     _setDimmerLights:	
 12910                           
 12911                           ;incstack = 0
 12912                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12913                           ;setDimmerLights@lights stored from wreg
 12914  0CD7  0020               	movlb	0	; select bank0
 12915  0CD8  00E5               	movwf	setDimmerLights@lights
 12916                           
 12917                           ;Dimmer_B1.c: 612: DimmerLightsPointSelect(lights);
 12918  0CD9  0865               	movf	setDimmerLights@lights,w
 12919  0CDA  319C  240F  318C   	fcall	_DimmerLightsPointSelect
 12920                           
 12921                           ;Dimmer_B1.c: 615: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12922  0CDD  3000               	movlw	0
 12923  0CDE  3191  21D2  318C   	fcall	_getMain_All_Error_Status
 12924  0CE1  3A00               	xorlw	0
 12925  0CE2  3000               	movlw	0
 12926  0CE3  1903               	skipnz
 12927  0CE4  3001               	movlw	1
 12928  0CE5  0020               	movlb	0	; select bank0
 12929  0CE6  00E3               	movwf	??_setDimmerLights
 12930  0CE7  0DE3               	rlf	??_setDimmerLights,f
 12931  0CE8  0022               	movlb	2	; select bank2
 12932  0CE9  083E               	movf	_Dimmer^(0+256),w
 12933  0CEA  0020               	movlb	0	; select bank0
 12934  0CEB  0663               	xorwf	??_setDimmerLights,w
 12935  0CEC  39FD               	andlw	-3
 12936  0CED  0663               	xorwf	??_setDimmerLights,w
 12937  0CEE  0022               	movlb	2	; select bank2
 12938  0CEF  00BE               	movwf	_Dimmer^(0+256)
 12939                           
 12940                           ;Dimmer_B1.c: 619: if (status == 1) {
 12941  0CF0  0020               	movlb	0	; select bank0
 12942  0CF1  0862               	movf	setDimmerLights@status,w
 12943  0CF2  3A01               	xorlw	1
 12944  0CF3  1D03               	skipz
 12945  0CF4  2D25               	goto	l6520
 12946                           
 12947                           ;Dimmer_B1.c: 620: DimmerLights->Loop = 1;
 12948  0CF5  086F               	movf	_DimmerLights,w
 12949  0CF6  3E09               	addlw	9
 12950  0CF7  0086               	movwf	6
 12951  0CF8  3001               	movlw	1	; select bank2/3
 12952  0CF9  0087               	movwf	7
 12953  0CFA  1481               	bsf	1,1
 12954                           
 12955                           ;Dimmer_B1.c: 621: setLED(lights, 0);
 12956  0CFB  01A2               	clrf	setLED@command
 12957  0CFC  0865               	movf	setDimmerLights@lights,w
 12958  0CFD  3192  226D  318C   	fcall	_setLED
 12959                           
 12960                           ;Dimmer_B1.c: 622: ;;
 12961                           ;Dimmer_B1.c: 623: setDimmerLights_Line(lights);
 12962  0D00  0020               	movlb	0	; select bank0
 12963  0D01  0865               	movf	setDimmerLights@lights,w
 12964  0D02  319C  245D  318C   	fcall	_setDimmerLights_Line
 12965                           
 12966                           ;Dimmer_B1.c: 624: DimmerLights->StatusFlag = 1;
 12967  0D05  0020               	movlb	0	; select bank0
 12968  0D06  086F               	movf	_DimmerLights,w
 12969  0D07  0086               	movwf	6
 12970  0D08  3001               	movlw	1	; select bank2/3
 12971  0D09  0087               	movwf	7
 12972  0D0A  1701               	bsf	1,6
 12973                           
 12974                           ;Dimmer_B1.c: 631: DimmerLights->DimmingValue = ((char)(65*0.8));
 12975  0D0B  3034               	movlw	52
 12976  0D0C  00E3               	movwf	??_setDimmerLights
 12977  0D0D  086F               	movf	_DimmerLights,w
 12978  0D0E  3E04               	addlw	4
 12979  0D0F  0086               	movwf	6
 12980  0D10  3001               	movlw	1	; select bank2/3
 12981  0D11  0087               	movwf	7
 12982  0D12  0863               	movf	??_setDimmerLights,w
 12983  0D13  0081               	movwf	1
 12984                           
 12985                           ;Dimmer_B1.c: 632: product->Data[(20 + lights)]=setPercentValue(((char)(65*0.8)));
 12986  0D14  3034               	movlw	52
 12987  0D15  318A  2235  318C   	fcall	_setPercentValue
 12988  0D18  0020               	movlb	0	; select bank0
 12989  0D19  00E3               	movwf	??_setDimmerLights
 12990  0D1A  0865               	movf	setDimmerLights@lights,w
 12991  0D1B  3E14               	addlw	20
 12992  0D1C  076E               	addwf	_product,w
 12993  0D1D  00E4               	movwf	??_setDimmerLights+1
 12994  0D1E  0864               	movf	??_setDimmerLights+1,w
 12995  0D1F  0086               	movwf	6
 12996  0D20  3002               	movlw	2	; select bank4/5
 12997  0D21  0087               	movwf	7
 12998  0D22  0863               	movf	??_setDimmerLights,w
 12999  0D23  0081               	movwf	1
 13000  0D24  2D4C               	goto	l6532
 13001  0D25                     l6520:	
 13002                           ;Dimmer_B1.c: 642: } else {
 13003                           
 13004                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 13005                           
 13006                           
 13007                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 0;
 13008  0D25  086F               	movf	_DimmerLights,w
 13009  0D26  0086               	movwf	6
 13010  0D27  3001               	movlw	1	; select bank2/3
 13011  0D28  0087               	movwf	7
 13012  0D29  1301               	bcf	1,6
 13013                           
 13014                           ;Dimmer_B1.c: 644: DimmerLights->Loop = 0;
 13015  0D2A  086F               	movf	_DimmerLights,w
 13016  0D2B  3E09               	addlw	9
 13017  0D2C  0086               	movwf	6
 13018  0D2D  3001               	movlw	1	; select bank2/3
 13019  0D2E  0087               	movwf	7
 13020  0D2F  1081               	bcf	1,1
 13021                           
 13022                           ;Dimmer_B1.c: 645: setLED(lights, 1);
 13023  0D30  01A2               	clrf	setLED@command
 13024  0D31  0AA2               	incf	setLED@command,f
 13025  0D32  0865               	movf	setDimmerLights@lights,w
 13026  0D33  3192  226D  318C   	fcall	_setLED
 13027                           
 13028                           ;Dimmer_B1.c: 646: ;;
 13029                           ;Dimmer_B1.c: 653: DimmerLights->MosfetClose = 1;
 13030  0D36  0020               	movlb	0	; select bank0
 13031  0D37  086F               	movf	_DimmerLights,w
 13032  0D38  3E08               	addlw	8
 13033  0D39  0086               	movwf	6
 13034  0D3A  3001               	movlw	1	; select bank2/3
 13035  0D3B  0087               	movwf	7
 13036  0D3C  1781               	bsf	1,7
 13037                           
 13038                           ;Dimmer_B1.c: 656: DimmerLights->AdjFlag = 0;
 13039  0D3D  086F               	movf	_DimmerLights,w
 13040  0D3E  0086               	movwf	6
 13041  0D3F  3001               	movlw	1	; select bank2/3
 13042  0D40  0087               	movwf	7
 13043  0D41  1181               	bcf	1,3
 13044                           
 13045                           ;Dimmer_B1.c: 657: DimmerLights->AdjStatus = 0;
 13046  0D42  086F               	movf	_DimmerLights,w
 13047  0D43  0086               	movwf	6
 13048  0D44  3001               	movlw	1	; select bank2/3
 13049  0D45  0087               	movwf	7
 13050  0D46  1201               	bcf	1,4
 13051                           
 13052                           ;Dimmer_B1.c: 658: DimmerLights->AdjRF = 0;
 13053  0D47  086F               	movf	_DimmerLights,w
 13054  0D48  0086               	movwf	6
 13055  0D49  3001               	movlw	1	; select bank2/3
 13056  0D4A  0087               	movwf	7
 13057  0D4B  1101               	bcf	1,2
 13058  0D4C                     l6532:	
 13059                           
 13060                           ;Dimmer_B1.c: 659: DimmerLights->DimmingTimeValue = 7;
 13061  0D4C  3007               	movlw	7
 13062  0D4D  00E3               	movwf	??_setDimmerLights
 13063  0D4E  086F               	movf	_DimmerLights,w
 13064  0D4F  3E02               	addlw	2
 13065  0D50  0086               	movwf	6
 13066  0D51  3001               	movlw	1	; select bank2/3
 13067  0D52  0087               	movwf	7
 13068  0D53  0863               	movf	??_setDimmerLights,w
 13069  0D54  0081               	movwf	1
 13070                           
 13071                           ;Dimmer_B1.c: 661: }
 13072                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 13073  0D55  0862               	movf	setDimmerLights@status,w
 13074  0D56  00E3               	movwf	??_setDimmerLights
 13075  0D57  0863               	movf	??_setDimmerLights,w
 13076  0D58  00A0               	movwf	setRF_DimmerLights@on
 13077  0D59  0865               	movf	setDimmerLights@lights,w
 13078  0D5A  3197  2748  318C   	fcall	_setRF_DimmerLights
 13079                           
 13080                           ;Dimmer_B1.c: 663: setTxData();
 13081  0D5D  3187  2726         	fcall	_setTxData
 13082  0D5F  0008               	return
 13083  0D60                     __end_of_setDimmerLights:	
 13084                           
 13085                           	psect	text78
 13086  0726                     __ptext78:	
 13087 ;; *************** function _setTxData *****************
 13088 ;; Defined at:
 13089 ;;		line 208 in file "../src/RF_Control_B1.c"
 13090 ;; Parameters:    Size  Location     Type
 13091 ;;		None
 13092 ;; Auto vars:     Size  Location     Type
 13093 ;;  i               1    0        unsigned char 
 13094 ;; Return value:  Size  Location     Type
 13095 ;;		None               void
 13096 ;; Registers used:
 13097 ;;		wreg, fsr1l, fsr1h
 13098 ;; Tracked objects:
 13099 ;;		On entry : 0/0
 13100 ;;		On exit  : 0/0
 13101 ;;		Unchanged: 0/0
 13102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;Total ram usage:        1 bytes
 13108 ;; Hardware stack levels used:    1
 13109 ;; Hardware stack levels required when called:    5
 13110 ;; This function calls:
 13111 ;;		Nothing
 13112 ;; This function is called by:
 13113 ;;		_setDimmerLights
 13114 ;;		_setDimmerLights_Adj
 13115 ;;		_getRxData
 13116 ;;		_setControl_Lights_Table
 13117 ;;		_setRFSW_Control
 13118 ;;		_setRFSW_AdjControl
 13119 ;; This function uses a non-reentrant model
 13120 ;;
 13121                           
 13122                           
 13123                           ;psect for function _setTxData
 13124  0726                     _setTxData:	
 13125                           
 13126                           ;RF_Control_B1.c: 209: char i;
 13127                           ;RF_Control_B1.c: 210: if (RF1.Enable == 1) {
 13128                           
 13129                           ;incstack = 0
 13130                           ; Regs used in _setTxData: [wregfsr1]
 13131  0726  0021               	movlb	1	; select bank1
 13132  0727  1C3A               	btfss	_RF1^(0+128),0
 13133  0728  0008               	return
 13134                           
 13135                           ;RF_Control_B1.c: 212: if (RF1.TransceiveGO == 0) {
 13136  0729  193A               	btfsc	_RF1^(0+128),2
 13137  072A  0008               	return
 13138                           
 13139                           ;RF_Control_B1.c: 213: RF1.TransceiveGO = 1;
 13140  072B  153A               	bsf	_RF1^(0+128),2
 13141                           
 13142                           ;RF_Control_B1.c: 214: RF1.RunTime = 20;
 13143  072C  3014               	movlw	20
 13144  072D  00C1               	movwf	(_RF1^(0+128)+7)
 13145  072E  3000               	movlw	0
 13146  072F  00C2               	movwf	(_RF1^(0+128)+8)
 13147                           
 13148                           ;RF_Control_B1.c: 226: RF_Data[0] = 0x63;
 13149  0730  3063               	movlw	99
 13150  0731  0020               	movlb	0	; select bank0
 13151  0732  00A0               	movwf	??_setTxData
 13152  0733  0820               	movf	??_setTxData,w
 13153  0734  0022               	movlb	2	; select bank2
 13154  0735  00A0               	movwf	_RF_Data^(0+256)
 13155                           
 13156                           ;RF_Control_B1.c: 227: RF_Data[1] = 0x02;
 13157  0736  3002               	movlw	2
 13158  0737  0020               	movlb	0	; select bank0
 13159  0738  00A0               	movwf	??_setTxData
 13160  0739  0820               	movf	??_setTxData,w
 13161  073A  0022               	movlb	2	; select bank2
 13162  073B  00A1               	movwf	(_RF_Data^(0+256)+1)
 13163                           
 13164                           ;RF_Control_B1.c: 229: RF_Data[2] = product->Data[2];
 13165  073C  0020               	movlb	0	; select bank0
 13166  073D  086E               	movf	_product,w
 13167  073E  0086               	movwf	6
 13168  073F  3002               	movlw	2	; select bank4/5
 13169  0740  0087               	movwf	7
 13170  0741  3002               	movlw	2	; select bank4/5
 13171  0742  3F42               	moviw [2]fsr1
 13172  0743  0022               	movlb	2	; select bank2
 13173  0744  00A2               	movwf	(_RF_Data^(0+256)+2)
 13174                           
 13175                           ;RF_Control_B1.c: 230: RF_Data[3] = product->Data[3];
 13176  0745  0020               	movlb	0	; select bank0
 13177  0746  086E               	movf	_product,w
 13178  0747  0086               	movwf	6
 13179  0748  3002               	movlw	2	; select bank4/5
 13180  0749  0087               	movwf	7
 13181  074A  3002               	movlw	2	; select bank4/5
 13182  074B  3F43               	moviw [3]fsr1
 13183  074C  0022               	movlb	2	; select bank2
 13184  074D  00A3               	movwf	(_RF_Data^(0+256)+3)
 13185                           
 13186                           ;RF_Control_B1.c: 231: RF_Data[4] = product->Data[4];
 13187  074E  0020               	movlb	0	; select bank0
 13188  074F  086E               	movf	_product,w
 13189  0750  0086               	movwf	6
 13190  0751  3002               	movlw	2	; select bank4/5
 13191  0752  0087               	movwf	7
 13192  0753  3002               	movlw	2	; select bank4/5
 13193  0754  3F44               	moviw [4]fsr1
 13194  0755  0022               	movlb	2	; select bank2
 13195  0756  00A4               	movwf	(_RF_Data^(0+256)+4)
 13196                           
 13197                           ;RF_Control_B1.c: 232: RF_Data[5] = product->Data[5];
 13198  0757  0020               	movlb	0	; select bank0
 13199  0758  086E               	movf	_product,w
 13200  0759  0086               	movwf	6
 13201  075A  3002               	movlw	2	; select bank4/5
 13202  075B  0087               	movwf	7
 13203  075C  3002               	movlw	2	; select bank4/5
 13204  075D  3F45               	moviw [5]fsr1
 13205  075E  0022               	movlb	2	; select bank2
 13206  075F  00A5               	movwf	(_RF_Data^(0+256)+5)
 13207                           
 13208                           ;RF_Control_B1.c: 233: RF_Data[6] = product->Data[6];
 13209  0760  0020               	movlb	0	; select bank0
 13210  0761  086E               	movf	_product,w
 13211  0762  0086               	movwf	6
 13212  0763  3002               	movlw	2	; select bank4/5
 13213  0764  0087               	movwf	7
 13214  0765  3002               	movlw	2	; select bank4/5
 13215  0766  3F46               	moviw [6]fsr1
 13216  0767  0022               	movlb	2	; select bank2
 13217  0768  00A6               	movwf	(_RF_Data^(0+256)+6)
 13218                           
 13219                           ;RF_Control_B1.c: 234: RF_Data[7] = product->Data[7];
 13220  0769  0020               	movlb	0	; select bank0
 13221  076A  086E               	movf	_product,w
 13222  076B  0086               	movwf	6
 13223  076C  3002               	movlw	2	; select bank4/5
 13224  076D  0087               	movwf	7
 13225  076E  3002               	movlw	2	; select bank4/5
 13226  076F  3F47               	moviw [7]fsr1
 13227  0770  0022               	movlb	2	; select bank2
 13228  0771  00A7               	movwf	(_RF_Data^(0+256)+7)
 13229                           
 13230                           ;RF_Control_B1.c: 235: RF_Data[8] = product->Data[8];
 13231  0772  0020               	movlb	0	; select bank0
 13232  0773  086E               	movf	_product,w
 13233  0774  0086               	movwf	6
 13234  0775  3002               	movlw	2	; select bank4/5
 13235  0776  0087               	movwf	7
 13236  0777  3002               	movlw	2	; select bank4/5
 13237  0778  3F48               	moviw [8]fsr1
 13238  0779  0022               	movlb	2	; select bank2
 13239  077A  00A8               	movwf	(_RF_Data^(0+256)+8)
 13240                           
 13241                           ;RF_Control_B1.c: 236: RF_Data[9] = product->Data[9];
 13242  077B  0020               	movlb	0	; select bank0
 13243  077C  086E               	movf	_product,w
 13244  077D  0086               	movwf	6
 13245  077E  3002               	movlw	2	; select bank4/5
 13246  077F  0087               	movwf	7
 13247  0780  3002               	movlw	2	; select bank4/5
 13248  0781  3F49               	moviw [9]fsr1
 13249  0782  0022               	movlb	2	; select bank2
 13250  0783  00A9               	movwf	(_RF_Data^(0+256)+9)
 13251                           
 13252                           ;RF_Control_B1.c: 237: RF_Data[10] = product->Data[10];
 13253  0784  0020               	movlb	0	; select bank0
 13254  0785  086E               	movf	_product,w
 13255  0786  0086               	movwf	6
 13256  0787  3002               	movlw	2	; select bank4/5
 13257  0788  0087               	movwf	7
 13258  0789  3002               	movlw	2	; select bank4/5
 13259  078A  3F4A               	moviw [10]fsr1
 13260  078B  0022               	movlb	2	; select bank2
 13261  078C  00AA               	movwf	(_RF_Data^(0+256)+10)
 13262                           
 13263                           ;RF_Control_B1.c: 238: RF_Data[11] = product->Data[11];
 13264  078D  0020               	movlb	0	; select bank0
 13265  078E  086E               	movf	_product,w
 13266  078F  0086               	movwf	6
 13267  0790  3002               	movlw	2	; select bank4/5
 13268  0791  0087               	movwf	7
 13269  0792  3002               	movlw	2	; select bank4/5
 13270  0793  3F4B               	moviw [11]fsr1
 13271  0794  0022               	movlb	2	; select bank2
 13272  0795  00AB               	movwf	(_RF_Data^(0+256)+11)
 13273                           
 13274                           ;RF_Control_B1.c: 239: RF_Data[12] = product->Data[12];
 13275  0796  0020               	movlb	0	; select bank0
 13276  0797  086E               	movf	_product,w
 13277  0798  0086               	movwf	6
 13278  0799  3002               	movlw	2	; select bank4/5
 13279  079A  0087               	movwf	7
 13280  079B  3002               	movlw	2	; select bank4/5
 13281  079C  3F4C               	moviw [12]fsr1
 13282  079D  0022               	movlb	2	; select bank2
 13283  079E  00AC               	movwf	(_RF_Data^(0+256)+12)
 13284                           
 13285                           ;RF_Control_B1.c: 240: RF_Data[13] = product->Data[13];
 13286  079F  0020               	movlb	0	; select bank0
 13287  07A0  086E               	movf	_product,w
 13288  07A1  0086               	movwf	6
 13289  07A2  3002               	movlw	2	; select bank4/5
 13290  07A3  0087               	movwf	7
 13291  07A4  3002               	movlw	2	; select bank4/5
 13292  07A5  3F4D               	moviw [13]fsr1
 13293  07A6  0022               	movlb	2	; select bank2
 13294  07A7  00AD               	movwf	(_RF_Data^(0+256)+13)
 13295                           
 13296                           ;RF_Control_B1.c: 241: RF_Data[14] = product->Data[14];
 13297  07A8  0020               	movlb	0	; select bank0
 13298  07A9  086E               	movf	_product,w
 13299  07AA  0086               	movwf	6
 13300  07AB  3002               	movlw	2	; select bank4/5
 13301  07AC  0087               	movwf	7
 13302  07AD  3002               	movlw	2	; select bank4/5
 13303  07AE  3F4E               	moviw [14]fsr1
 13304  07AF  0022               	movlb	2	; select bank2
 13305  07B0  00AE               	movwf	(_RF_Data^(0+256)+14)
 13306                           
 13307                           ;RF_Control_B1.c: 242: RF_Data[15] = product->Data[15];
 13308  07B1  0020               	movlb	0	; select bank0
 13309  07B2  086E               	movf	_product,w
 13310  07B3  0086               	movwf	6
 13311  07B4  3002               	movlw	2	; select bank4/5
 13312  07B5  0087               	movwf	7
 13313  07B6  3002               	movlw	2	; select bank4/5
 13314  07B7  3F4F               	moviw [15]fsr1
 13315  07B8  0022               	movlb	2	; select bank2
 13316  07B9  00AF               	movwf	(_RF_Data^(0+256)+15)
 13317                           
 13318                           ;RF_Control_B1.c: 243: RF_Data[16] = product->Data[16];
 13319  07BA  0020               	movlb	0	; select bank0
 13320  07BB  086E               	movf	_product,w
 13321  07BC  0086               	movwf	6
 13322  07BD  3002               	movlw	2	; select bank4/5
 13323  07BE  0087               	movwf	7
 13324  07BF  3002               	movlw	2	; select bank4/5
 13325  07C0  3F50               	moviw [16]fsr1
 13326  07C1  0022               	movlb	2	; select bank2
 13327  07C2  00B0               	movwf	(_RF_Data^(0+256)+16)
 13328                           
 13329                           ;RF_Control_B1.c: 244: RF_Data[17] = product->Data[17];
 13330  07C3  0020               	movlb	0	; select bank0
 13331  07C4  086E               	movf	_product,w
 13332  07C5  0086               	movwf	6
 13333  07C6  3002               	movlw	2	; select bank4/5
 13334  07C7  0087               	movwf	7
 13335  07C8  3002               	movlw	2	; select bank4/5
 13336  07C9  3F51               	moviw [17]fsr1
 13337  07CA  0022               	movlb	2	; select bank2
 13338  07CB  00B1               	movwf	(_RF_Data^(0+256)+17)
 13339                           
 13340                           ;RF_Control_B1.c: 245: RF_Data[18] = product->Data[18];
 13341  07CC  0020               	movlb	0	; select bank0
 13342  07CD  086E               	movf	_product,w
 13343  07CE  0086               	movwf	6
 13344  07CF  3002               	movlw	2	; select bank4/5
 13345  07D0  0087               	movwf	7
 13346  07D1  3002               	movlw	2	; select bank4/5
 13347  07D2  3F52               	moviw [18]fsr1
 13348  07D3  0022               	movlb	2	; select bank2
 13349  07D4  00B2               	movwf	(_RF_Data^(0+256)+18)
 13350                           
 13351                           ;RF_Control_B1.c: 246: RF_Data[19] = product->Data[19];
 13352  07D5  0020               	movlb	0	; select bank0
 13353  07D6  086E               	movf	_product,w
 13354  07D7  0086               	movwf	6
 13355  07D8  3002               	movlw	2	; select bank4/5
 13356  07D9  0087               	movwf	7
 13357  07DA  3002               	movlw	2	; select bank4/5
 13358  07DB  3F53               	moviw [19]fsr1
 13359  07DC  0022               	movlb	2	; select bank2
 13360  07DD  00B3               	movwf	(_RF_Data^(0+256)+19)
 13361                           
 13362                           ;RF_Control_B1.c: 247: RF_Data[20] = 209;
 13363  07DE  30D1               	movlw	209
 13364  07DF  0020               	movlb	0	; select bank0
 13365  07E0  00A0               	movwf	??_setTxData
 13366  07E1  0820               	movf	??_setTxData,w
 13367  07E2  0022               	movlb	2	; select bank2
 13368  07E3  00B4               	movwf	(_RF_Data^(0+256)+20)
 13369  07E4  0008               	return
 13370  07E5                     __end_of_setTxData:	
 13371                           
 13372                           	psect	text79
 13373  1748                     __ptext79:	
 13374 ;; *************** function _setRF_DimmerLights *****************
 13375 ;; Defined at:
 13376 ;;		line 485 in file "../src/RF_Control_B1.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;  lights          1    wreg     unsigned char 
 13379 ;;  on              1    0[BANK0 ] unsigned char 
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;  lights          1    4[BANK0 ] unsigned char 
 13382 ;;  status          1    3[BANK0 ] unsigned char 
 13383 ;; Return value:  Size  Location     Type
 13384 ;;		None               void
 13385 ;; Registers used:
 13386 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13387 ;; Tracked objects:
 13388 ;;		On entry : 0/0
 13389 ;;		On exit  : 0/0
 13390 ;;		Unchanged: 0/0
 13391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13392 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;Total ram usage:        5 bytes
 13397 ;; Hardware stack levels used:    1
 13398 ;; Hardware stack levels required when called:    5
 13399 ;; This function calls:
 13400 ;;		Nothing
 13401 ;; This function is called by:
 13402 ;;		_setDimmerLights
 13403 ;;		_setDimmerLights_Adj
 13404 ;;		_setRFSW_Control
 13405 ;; This function uses a non-reentrant model
 13406 ;;
 13407                           
 13408                           
 13409                           ;psect for function _setRF_DimmerLights
 13410  1748                     _setRF_DimmerLights:	
 13411                           
 13412                           ;incstack = 0
 13413                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13414                           ;setRF_DimmerLights@lights stored from wreg
 13415  1748  0020               	movlb	0	; select bank0
 13416  1749  00A4               	movwf	setRF_DimmerLights@lights
 13417                           
 13418                           ;RF_Control_B1.c: 486: char status = 1;
 13419  174A  01A3               	clrf	setRF_DimmerLights@status
 13420  174B  0AA3               	incf	setRF_DimmerLights@status,f
 13421                           
 13422                           ;RF_Control_B1.c: 487: status <<= (lights - 1);
 13423  174C  0824               	movf	setRF_DimmerLights@lights,w
 13424  174D  3EFF               	addlw	-1
 13425  174E  0A89               	incf	9,f
 13426  174F  2F52               	goto	u5030
 13427  1750                     u5035:	
 13428  1750  1003               	clrc
 13429  1751  0DA3               	rlf	setRF_DimmerLights@status,f
 13430  1752                     u5030:	
 13431  1752  3EFF               	addlw	-1
 13432  1753  1D03               	skipz
 13433  1754  2F50               	goto	u5035
 13434                           
 13435                           ;RF_Control_B1.c: 488: product->Data[11]=lights;
 13436  1755  0824               	movf	setRF_DimmerLights@lights,w
 13437  1756  00A1               	movwf	??_setRF_DimmerLights
 13438  1757  086E               	movf	_product,w
 13439  1758  3E0B               	addlw	11
 13440  1759  0086               	movwf	6
 13441  175A  3002               	movlw	2	; select bank4/5
 13442  175B  0087               	movwf	7
 13443  175C  0821               	movf	??_setRF_DimmerLights,w
 13444  175D  0081               	movwf	1
 13445                           
 13446                           ;RF_Control_B1.c: 496: product->Data[9]=product->Data[20 + lights];
 13447  175E  0824               	movf	setRF_DimmerLights@lights,w
 13448  175F  3E14               	addlw	20
 13449  1760  076E               	addwf	_product,w
 13450  1761  00A1               	movwf	??_setRF_DimmerLights
 13451  1762  0821               	movf	??_setRF_DimmerLights,w
 13452  1763  0086               	movwf	6
 13453  1764  3002               	movlw	2	; select bank4/5
 13454  1765  0087               	movwf	7
 13455  1766  0801               	movf	1,w
 13456  1767  00A2               	movwf	??_setRF_DimmerLights+1
 13457  1768  086E               	movf	_product,w
 13458  1769  3E09               	addlw	9
 13459  176A  0086               	movwf	6
 13460  176B  3002               	movlw	2	; select bank4/5
 13461  176C  0087               	movwf	7
 13462  176D  0822               	movf	??_setRF_DimmerLights+1,w
 13463  176E  0081               	movwf	1
 13464                           
 13465                           ;RF_Control_B1.c: 497: product->Data[17]=product->Data[26 + lights];
 13466  176F  0824               	movf	setRF_DimmerLights@lights,w
 13467  1770  3E1A               	addlw	26
 13468  1771  076E               	addwf	_product,w
 13469  1772  00A1               	movwf	??_setRF_DimmerLights
 13470  1773  0821               	movf	??_setRF_DimmerLights,w
 13471  1774  0086               	movwf	6
 13472  1775  3002               	movlw	2	; select bank4/5
 13473  1776  0087               	movwf	7
 13474  1777  0801               	movf	1,w
 13475  1778  00A2               	movwf	??_setRF_DimmerLights+1
 13476  1779  086E               	movf	_product,w
 13477  177A  3E11               	addlw	17
 13478  177B  0086               	movwf	6
 13479  177C  3002               	movlw	2	; select bank4/5
 13480  177D  0087               	movwf	7
 13481  177E  0822               	movf	??_setRF_DimmerLights+1,w
 13482  177F  0081               	movwf	1
 13483                           
 13484                           ;RF_Control_B1.c: 498: if (on == 1) {
 13485  1780  0820               	movf	setRF_DimmerLights@on,w
 13486  1781  3A01               	xorlw	1
 13487  1782  1D03               	skipz
 13488  1783  2F94               	goto	l5998
 13489                           
 13490                           ;RF_Control_B1.c: 499: product->Data[15]=(product->Data[15] | status);
 13491  1784  086E               	movf	_product,w
 13492  1785  3E0F               	addlw	15
 13493  1786  0086               	movwf	6
 13494  1787  3002               	movlw	2	; select bank4/5
 13495  1788  0087               	movwf	7
 13496  1789  0801               	movf	1,w
 13497  178A  0423               	iorwf	setRF_DimmerLights@status,w
 13498  178B  00A1               	movwf	??_setRF_DimmerLights
 13499  178C  086E               	movf	_product,w
 13500  178D  3E0F               	addlw	15
 13501  178E  0086               	movwf	6
 13502  178F  3002               	movlw	2	; select bank4/5
 13503  1790  0087               	movwf	7
 13504  1791  0821               	movf	??_setRF_DimmerLights,w
 13505  1792  0081               	movwf	1
 13506                           
 13507                           ;RF_Control_B1.c: 500: } else {
 13508  1793  0008               	return
 13509  1794                     l5998:	
 13510                           
 13511                           ;RF_Control_B1.c: 501: product->Data[15]=(product->Data[15]&(~status));
 13512  1794  086E               	movf	_product,w
 13513  1795  3E0F               	addlw	15
 13514  1796  0086               	movwf	6
 13515  1797  3002               	movlw	2	; select bank4/5
 13516  1798  0087               	movwf	7
 13517  1799  0923               	comf	setRF_DimmerLights@status,w
 13518  179A  0501               	andwf	1,w
 13519  179B  00A1               	movwf	??_setRF_DimmerLights
 13520  179C  086E               	movf	_product,w
 13521  179D  3E0F               	addlw	15
 13522  179E  0086               	movwf	6
 13523  179F  3002               	movlw	2	; select bank4/5
 13524  17A0  0087               	movwf	7
 13525  17A1  0821               	movf	??_setRF_DimmerLights,w
 13526  17A2  0081               	movwf	1
 13527  17A3  0008               	return
 13528  17A4                     __end_of_setRF_DimmerLights:	
 13529                           
 13530                           	psect	text80
 13531  0A35                     __ptext80:	
 13532 ;; *************** function _setPercentValue *****************
 13533 ;; Defined at:
 13534 ;;		line 874 in file "../src/Dimmer_B1.c"
 13535 ;; Parameters:    Size  Location     Type
 13536 ;;  value           1    wreg     unsigned char 
 13537 ;; Auto vars:     Size  Location     Type
 13538 ;;  value           1   62[BANK0 ] unsigned char 
 13539 ;;  i               3   63[BANK0 ] float 
 13540 ;; Return value:  Size  Location     Type
 13541 ;;                  1    wreg      unsigned char 
 13542 ;; Registers used:
 13543 ;;		wreg, status,2, status,0, pclath, cstack
 13544 ;; Tracked objects:
 13545 ;;		On entry : 0/0
 13546 ;;		On exit  : 0/0
 13547 ;;		Unchanged: 0/0
 13548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13551 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;Total ram usage:        6 bytes
 13554 ;; Hardware stack levels used:    1
 13555 ;; Hardware stack levels required when called:    7
 13556 ;; This function calls:
 13557 ;;		___awtoft
 13558 ;;		___ftadd
 13559 ;;		___ftdiv
 13560 ;;		___ftneg
 13561 ;;		___fttol
 13562 ;; This function is called by:
 13563 ;;		_setDimmerLights
 13564 ;;		_setDimmerLights_Adj
 13565 ;;		_Flash_Memory_Initialization
 13566 ;; This function uses a non-reentrant model
 13567 ;;
 13568                           
 13569                           
 13570                           ;psect for function _setPercentValue
 13571  0A35                     _setPercentValue:	
 13572                           
 13573                           ;incstack = 0
 13574                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13575                           ;setPercentValue@value stored from wreg
 13576  0A35  0020               	movlb	0	; select bank0
 13577  0A36  00DE               	movwf	setPercentValue@value
 13578                           
 13579                           ;Dimmer_B1.c: 882: float i = ((char)(65*0.8)) - ((char)(15*0.8));
 13580  0A37  3000               	movlw	0
 13581  0A38  00DF               	movwf	setPercentValue@i
 13582  0A39  3020               	movlw	32
 13583  0A3A  00E0               	movwf	setPercentValue@i+1
 13584  0A3B  3042               	movlw	66
 13585  0A3C  00E1               	movwf	setPercentValue@i+2
 13586                           
 13587                           ;Dimmer_B1.c: 883: i /= 100;
 13588  0A3D  3000               	movlw	0
 13589  0A3E  00AE               	movwf	___ftdiv@f2
 13590  0A3F  30C8               	movlw	200
 13591  0A40  00AF               	movwf	___ftdiv@f2+1
 13592  0A41  3042               	movlw	66
 13593  0A42  00B0               	movwf	___ftdiv@f2+2
 13594  0A43  085F               	movf	setPercentValue@i,w
 13595  0A44  00B1               	movwf	___ftdiv@f1
 13596  0A45  0860               	movf	setPercentValue@i+1,w
 13597  0A46  00B2               	movwf	___ftdiv@f1+1
 13598  0A47  0861               	movf	setPercentValue@i+2,w
 13599  0A48  00B3               	movwf	___ftdiv@f1+2
 13600  0A49  318D  25F0  318A   	fcall	___ftdiv
 13601  0A4C  0020               	movlb	0	; select bank0
 13602  0A4D  082E               	movf	?___ftdiv,w
 13603  0A4E  00DF               	movwf	setPercentValue@i
 13604  0A4F  082F               	movf	?___ftdiv+1,w
 13605  0A50  00E0               	movwf	setPercentValue@i+1
 13606  0A51  0830               	movf	?___ftdiv+2,w
 13607  0A52  00E1               	movwf	setPercentValue@i+2
 13608                           
 13609                           ;Dimmer_B1.c: 885: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 13610  0A53  085E               	movf	setPercentValue@value,w
 13611  0A54  00DC               	movwf	??_setPercentValue
 13612  0A55  01DD               	clrf	??_setPercentValue+1
 13613  0A56  09DC               	comf	??_setPercentValue,f
 13614  0A57  09DD               	comf	??_setPercentValue+1,f
 13615  0A58  0ADC               	incf	??_setPercentValue,f
 13616  0A59  1903               	skipnz
 13617  0A5A  0ADD               	incf	??_setPercentValue+1,f
 13618  0A5B  085C               	movf	??_setPercentValue,w
 13619  0A5C  3E34               	addlw	52
 13620  0A5D  00A8               	movwf	___awtoft@c
 13621  0A5E  3000               	movlw	0
 13622  0A5F  3D5D               	addwfc	??_setPercentValue+1,w
 13623  0A60  00A9               	movwf	___awtoft@c+1
 13624  0A61  319F  2775  318A   	fcall	___awtoft
 13625  0A64  0020               	movlb	0	; select bank0
 13626  0A65  0828               	movf	?___awtoft,w
 13627  0A66  00B1               	movwf	___ftdiv@f1
 13628  0A67  0829               	movf	?___awtoft+1,w
 13629  0A68  00B2               	movwf	___ftdiv@f1+1
 13630  0A69  082A               	movf	?___awtoft+2,w
 13631  0A6A  00B3               	movwf	___ftdiv@f1+2
 13632  0A6B  085F               	movf	setPercentValue@i,w
 13633  0A6C  00AE               	movwf	___ftdiv@f2
 13634  0A6D  0860               	movf	setPercentValue@i+1,w
 13635  0A6E  00AF               	movwf	___ftdiv@f2+1
 13636  0A6F  0861               	movf	setPercentValue@i+2,w
 13637  0A70  00B0               	movwf	___ftdiv@f2+2
 13638  0A71  318D  25F0  318A   	fcall	___ftdiv
 13639  0A74  0020               	movlb	0	; select bank0
 13640  0A75  082E               	movf	?___ftdiv,w
 13641  0A76  00BE               	movwf	___ftneg@f1
 13642  0A77  082F               	movf	?___ftdiv+1,w
 13643  0A78  00BF               	movwf	___ftneg@f1+1
 13644  0A79  0830               	movf	?___ftdiv+2,w
 13645  0A7A  00C0               	movwf	___ftneg@f1+2
 13646  0A7B  319B  23CA  318A   	fcall	___ftneg
 13647  0A7E  0020               	movlb	0	; select bank0
 13648  0A7F  083E               	movf	?___ftneg,w
 13649  0A80  00C4               	movwf	___ftadd@f2
 13650  0A81  083F               	movf	?___ftneg+1,w
 13651  0A82  00C5               	movwf	___ftadd@f2+1
 13652  0A83  0840               	movf	?___ftneg+2,w
 13653  0A84  00C6               	movwf	___ftadd@f2+2
 13654  0A85  3000               	movlw	0
 13655  0A86  00C1               	movwf	___ftadd@f1
 13656  0A87  30C8               	movlw	200
 13657  0A88  00C2               	movwf	___ftadd@f1+1
 13658  0A89  3042               	movlw	66
 13659  0A8A  00C3               	movwf	___ftadd@f1+2
 13660  0A8B  3184  2475  318A   	fcall	___ftadd
 13661  0A8E  0020               	movlb	0	; select bank0
 13662  0A8F  0841               	movf	?___ftadd,w
 13663  0A90  00CE               	movwf	___fttol@f1
 13664  0A91  0842               	movf	?___ftadd+1,w
 13665  0A92  00CF               	movwf	___fttol@f1+1
 13666  0A93  0843               	movf	?___ftadd+2,w
 13667  0A94  00D0               	movwf	___fttol@f1+2
 13668  0A95  318C  2450         	fcall	___fttol
 13669  0A97  0020               	movlb	0	; select bank0
 13670  0A98  084E               	movf	?___fttol,w
 13671  0A99  0008               	return
 13672  0A9A                     __end_of_setPercentValue:	
 13673                           
 13674                           	psect	text81
 13675  0C50                     __ptext81:	
 13676 ;; *************** function ___fttol *****************
 13677 ;; Defined at:
 13678 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13679 ;; Parameters:    Size  Location     Type
 13680 ;;  f1              3   46[BANK0 ] float 
 13681 ;; Auto vars:     Size  Location     Type
 13682 ;;  lval            4   55[BANK0 ] unsigned long 
 13683 ;;  exp1            1   59[BANK0 ] unsigned char 
 13684 ;;  sign1           1   54[BANK0 ] unsigned char 
 13685 ;; Return value:  Size  Location     Type
 13686 ;;                  4   46[BANK0 ] long 
 13687 ;; Registers used:
 13688 ;;		wreg, status,2, status,0
 13689 ;; Tracked objects:
 13690 ;;		On entry : 0/0
 13691 ;;		On exit  : 0/0
 13692 ;;		Unchanged: 0/0
 13693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13694 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13695 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;Total ram usage:       14 bytes
 13699 ;; Hardware stack levels used:    1
 13700 ;; Hardware stack levels required when called:    5
 13701 ;; This function calls:
 13702 ;;		Nothing
 13703 ;; This function is called by:
 13704 ;;		_getPercentValue
 13705 ;;		_setPercentValue
 13706 ;; This function uses a non-reentrant model
 13707 ;;
 13708                           
 13709                           
 13710                           ;psect for function ___fttol
 13711  0C50                     ___fttol:	
 13712                           
 13713                           ;incstack = 0
 13714                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13715  0C50  0020               	movlb	0	; select bank0
 13716  0C51  084E               	movf	___fttol@f1,w
 13717  0C52  00D2               	movwf	??___fttol
 13718  0C53  084F               	movf	___fttol@f1+1,w
 13719  0C54  00D3               	movwf	??___fttol+1
 13720  0C55  0850               	movf	___fttol@f1+2,w
 13721  0C56  00D4               	movwf	??___fttol+2
 13722  0C57  1003               	clrc
 13723  0C58  0D53               	rlf	??___fttol+1,w
 13724  0C59  0D54               	rlf	??___fttol+2,w
 13725  0C5A  00D5               	movwf	??___fttol+3
 13726  0C5B  0855               	movf	??___fttol+3,w
 13727  0C5C  00DB               	movwf	___fttol@exp1
 13728  0C5D  08DB               	movf	___fttol@exp1,f
 13729  0C5E  1D03               	skipz
 13730  0C5F  2C69               	goto	l5740
 13731  0C60  3000               	movlw	0
 13732  0C61  00D1               	movwf	?___fttol+3
 13733  0C62  3000               	movlw	0
 13734  0C63  00D0               	movwf	?___fttol+2
 13735  0C64  3000               	movlw	0
 13736  0C65  00CF               	movwf	?___fttol+1
 13737  0C66  3000               	movlw	0
 13738  0C67  00CE               	movwf	?___fttol
 13739  0C68  0008               	return
 13740  0C69                     l5740:	
 13741  0C69  084E               	movf	___fttol@f1,w
 13742  0C6A  00D2               	movwf	??___fttol
 13743  0C6B  084F               	movf	___fttol@f1+1,w
 13744  0C6C  00D3               	movwf	??___fttol+1
 13745  0C6D  0850               	movf	___fttol@f1+2,w
 13746  0C6E  00D4               	movwf	??___fttol+2
 13747  0C6F  3017               	movlw	23
 13748  0C70                     u4665:	
 13749  0C70  36D4               	lsrf	??___fttol+2,f
 13750  0C71  0CD3               	rrf	??___fttol+1,f
 13751  0C72  0CD2               	rrf	??___fttol,f
 13752  0C73  0B89               	decfsz	9,f
 13753  0C74  2C70               	goto	u4665
 13754  0C75  0852               	movf	??___fttol,w
 13755  0C76  00D5               	movwf	??___fttol+3
 13756  0C77  0855               	movf	??___fttol+3,w
 13757  0C78  00D6               	movwf	___fttol@sign1
 13758  0C79  17CF               	bsf	___fttol@f1+1,7
 13759  0C7A  30FF               	movlw	255
 13760  0C7B  05CE               	andwf	___fttol@f1,f
 13761  0C7C  30FF               	movlw	255
 13762  0C7D  05CF               	andwf	___fttol@f1+1,f
 13763  0C7E  3000               	movlw	0
 13764  0C7F  05D0               	andwf	___fttol@f1+2,f
 13765  0C80  084E               	movf	___fttol@f1,w
 13766  0C81  00D7               	movwf	___fttol@lval
 13767  0C82  084F               	movf	___fttol@f1+1,w
 13768  0C83  00D8               	movwf	___fttol@lval+1
 13769  0C84  0850               	movf	___fttol@f1+2,w
 13770  0C85  00D9               	movwf	___fttol@lval+2
 13771  0C86  01DA               	clrf	___fttol@lval+3
 13772  0C87  308E               	movlw	142
 13773  0C88  02DB               	subwf	___fttol@exp1,f
 13774  0C89  1FDB               	btfss	___fttol@exp1,7
 13775  0C8A  2CA7               	goto	l5760
 13776  0C8B  085B               	movf	___fttol@exp1,w
 13777  0C8C  3A80               	xorlw	128
 13778  0C8D  3E8F               	addlw	143
 13779  0C8E  1803               	skipnc
 13780  0C8F  2C99               	goto	l5758
 13781  0C90  3000               	movlw	0
 13782  0C91  00D1               	movwf	?___fttol+3
 13783  0C92  3000               	movlw	0
 13784  0C93  00D0               	movwf	?___fttol+2
 13785  0C94  3000               	movlw	0
 13786  0C95  00CF               	movwf	?___fttol+1
 13787  0C96  3000               	movlw	0
 13788  0C97  00CE               	movwf	?___fttol
 13789  0C98  0008               	return
 13790  0C99                     l5758:	
 13791  0C99  3001               	movlw	1
 13792  0C9A                     u4695:	
 13793  0C9A  36DA               	lsrf	___fttol@lval+3,f
 13794  0C9B  0CD9               	rrf	___fttol@lval+2,f
 13795  0C9C  0CD8               	rrf	___fttol@lval+1,f
 13796  0C9D  0CD7               	rrf	___fttol@lval,f
 13797  0C9E  0B89               	decfsz	9,f
 13798  0C9F  2C9A               	goto	u4695
 13799  0CA0  3001               	movlw	1
 13800  0CA1  00D2               	movwf	??___fttol
 13801  0CA2  0852               	movf	??___fttol,w
 13802  0CA3  07DB               	addwf	___fttol@exp1,f
 13803  0CA4  1903               	btfsc	3,2
 13804  0CA5  2CC0               	goto	l5770
 13805  0CA6  2C99               	goto	l5758
 13806  0CA7                     l5760:	
 13807  0CA7  3018               	movlw	24
 13808  0CA8  025B               	subwf	___fttol@exp1,w
 13809  0CA9  1C03               	skipc
 13810  0CAA  2CBD               	goto	l5768
 13811  0CAB  3000               	movlw	0
 13812  0CAC  00D1               	movwf	?___fttol+3
 13813  0CAD  3000               	movlw	0
 13814  0CAE  00D0               	movwf	?___fttol+2
 13815  0CAF  3000               	movlw	0
 13816  0CB0  00CF               	movwf	?___fttol+1
 13817  0CB1  3000               	movlw	0
 13818  0CB2  00CE               	movwf	?___fttol
 13819  0CB3  0008               	return
 13820  0CB4                     l5766:	
 13821  0CB4  3001               	movlw	1
 13822  0CB5                     u4725:	
 13823  0CB5  35D7               	lslf	___fttol@lval,f
 13824  0CB6  0DD8               	rlf	___fttol@lval+1,f
 13825  0CB7  0DD9               	rlf	___fttol@lval+2,f
 13826  0CB8  0DDA               	rlf	___fttol@lval+3,f
 13827  0CB9  0B89               	decfsz	9,f
 13828  0CBA  2CB5               	goto	u4725
 13829  0CBB  3001               	movlw	1
 13830  0CBC  02DB               	subwf	___fttol@exp1,f
 13831  0CBD                     l5768:	
 13832  0CBD  08DB               	movf	___fttol@exp1,f
 13833  0CBE  1D03               	skipz
 13834  0CBF  2CB4               	goto	l5766
 13835  0CC0                     l5770:	
 13836  0CC0  0856               	movf	___fttol@sign1,w
 13837  0CC1  1903               	btfsc	3,2
 13838  0CC2  2CCE               	goto	l5774
 13839  0CC3  09D7               	comf	___fttol@lval,f
 13840  0CC4  09D8               	comf	___fttol@lval+1,f
 13841  0CC5  09D9               	comf	___fttol@lval+2,f
 13842  0CC6  09DA               	comf	___fttol@lval+3,f
 13843  0CC7  0AD7               	incf	___fttol@lval,f
 13844  0CC8  1903               	skipnz
 13845  0CC9  0AD8               	incf	___fttol@lval+1,f
 13846  0CCA  1903               	skipnz
 13847  0CCB  0AD9               	incf	___fttol@lval+2,f
 13848  0CCC  1903               	skipnz
 13849  0CCD  0ADA               	incf	___fttol@lval+3,f
 13850  0CCE                     l5774:	
 13851  0CCE  085A               	movf	___fttol@lval+3,w
 13852  0CCF  00D1               	movwf	?___fttol+3
 13853  0CD0  0859               	movf	___fttol@lval+2,w
 13854  0CD1  00D0               	movwf	?___fttol+2
 13855  0CD2  0858               	movf	___fttol@lval+1,w
 13856  0CD3  00CF               	movwf	?___fttol+1
 13857  0CD4  0857               	movf	___fttol@lval,w
 13858  0CD5  00CE               	movwf	?___fttol
 13859  0CD6  0008               	return
 13860  0CD7                     __end_of___fttol:	
 13861                           
 13862                           	psect	text82
 13863  1BCA                     __ptext82:	
 13864 ;; *************** function ___ftneg *****************
 13865 ;; Defined at:
 13866 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13867 ;; Parameters:    Size  Location     Type
 13868 ;;  f1              3   30[BANK0 ] float 
 13869 ;; Auto vars:     Size  Location     Type
 13870 ;;		None
 13871 ;; Return value:  Size  Location     Type
 13872 ;;                  3   30[BANK0 ] float 
 13873 ;; Registers used:
 13874 ;;		wreg
 13875 ;; Tracked objects:
 13876 ;;		On entry : 0/0
 13877 ;;		On exit  : 0/0
 13878 ;;		Unchanged: 0/0
 13879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13880 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;Total ram usage:        3 bytes
 13885 ;; Hardware stack levels used:    1
 13886 ;; Hardware stack levels required when called:    5
 13887 ;; This function calls:
 13888 ;;		Nothing
 13889 ;; This function is called by:
 13890 ;;		_getPercentValue
 13891 ;;		_setPercentValue
 13892 ;; This function uses a non-reentrant model
 13893 ;;
 13894                           
 13895                           
 13896                           ;psect for function ___ftneg
 13897  1BCA                     ___ftneg:	
 13898                           
 13899                           ;incstack = 0
 13900                           ; Regs used in ___ftneg: [wreg]
 13901  1BCA  0020               	movlb	0	; select bank0
 13902  1BCB  0840               	movf	___ftneg@f1+2,w
 13903  1BCC  043F               	iorwf	___ftneg@f1+1,w
 13904  1BCD  043E               	iorwf	___ftneg@f1,w
 13905  1BCE  1903               	skipnz
 13906  1BCF  0008               	return
 13907  1BD0  3080               	movlw	128
 13908  1BD1  06C0               	xorwf	___ftneg@f1+2,f
 13909  1BD2  0008               	return
 13910  1BD3                     __end_of___ftneg:	
 13911                           
 13912                           	psect	text83
 13913  0DF0                     __ptext83:	
 13914 ;; *************** function ___ftdiv *****************
 13915 ;; Defined at:
 13916 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13917 ;; Parameters:    Size  Location     Type
 13918 ;;  f2              3   14[BANK0 ] float 
 13919 ;;  f1              3   17[BANK0 ] float 
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;  f3              3   25[BANK0 ] float 
 13922 ;;  sign            1   29[BANK0 ] unsigned char 
 13923 ;;  exp             1   28[BANK0 ] unsigned char 
 13924 ;;  cntr            1   24[BANK0 ] unsigned char 
 13925 ;; Return value:  Size  Location     Type
 13926 ;;                  3   14[BANK0 ] float 
 13927 ;; Registers used:
 13928 ;;		wreg, status,2, status,0, pclath, cstack
 13929 ;; Tracked objects:
 13930 ;;		On entry : 0/0
 13931 ;;		On exit  : 0/0
 13932 ;;		Unchanged: 0/0
 13933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13934 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;Total ram usage:       16 bytes
 13939 ;; Hardware stack levels used:    1
 13940 ;; Hardware stack levels required when called:    6
 13941 ;; This function calls:
 13942 ;;		___ftpack
 13943 ;; This function is called by:
 13944 ;;		_getPercentValue
 13945 ;;		_setPercentValue
 13946 ;; This function uses a non-reentrant model
 13947 ;;
 13948                           
 13949                           
 13950                           ;psect for function ___ftdiv
 13951  0DF0                     ___ftdiv:	
 13952                           
 13953                           ;incstack = 0
 13954                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13955  0DF0  0020               	movlb	0	; select bank0
 13956  0DF1  0831               	movf	___ftdiv@f1,w
 13957  0DF2  00B4               	movwf	??___ftdiv
 13958  0DF3  0832               	movf	___ftdiv@f1+1,w
 13959  0DF4  00B5               	movwf	??___ftdiv+1
 13960  0DF5  0833               	movf	___ftdiv@f1+2,w
 13961  0DF6  00B6               	movwf	??___ftdiv+2
 13962  0DF7  1003               	clrc
 13963  0DF8  0D35               	rlf	??___ftdiv+1,w
 13964  0DF9  0D36               	rlf	??___ftdiv+2,w
 13965  0DFA  00B7               	movwf	??___ftdiv+3
 13966  0DFB  0837               	movf	??___ftdiv+3,w
 13967  0DFC  00BC               	movwf	___ftdiv@exp
 13968  0DFD  08BC               	movf	___ftdiv@exp,f
 13969  0DFE  1D03               	skipz
 13970  0DFF  2E07               	goto	l5640
 13971  0E00  3000               	movlw	0
 13972  0E01  00AE               	movwf	?___ftdiv
 13973  0E02  3000               	movlw	0
 13974  0E03  00AF               	movwf	?___ftdiv+1
 13975  0E04  3000               	movlw	0
 13976  0E05  00B0               	movwf	?___ftdiv+2
 13977  0E06  0008               	return
 13978  0E07                     l5640:	
 13979  0E07  082E               	movf	___ftdiv@f2,w
 13980  0E08  00B4               	movwf	??___ftdiv
 13981  0E09  082F               	movf	___ftdiv@f2+1,w
 13982  0E0A  00B5               	movwf	??___ftdiv+1
 13983  0E0B  0830               	movf	___ftdiv@f2+2,w
 13984  0E0C  00B6               	movwf	??___ftdiv+2
 13985  0E0D  1003               	clrc
 13986  0E0E  0D35               	rlf	??___ftdiv+1,w
 13987  0E0F  0D36               	rlf	??___ftdiv+2,w
 13988  0E10  00B7               	movwf	??___ftdiv+3
 13989  0E11  0837               	movf	??___ftdiv+3,w
 13990  0E12  00BD               	movwf	___ftdiv@sign
 13991  0E13  08BD               	movf	___ftdiv@sign,f
 13992  0E14  1D03               	skipz
 13993  0E15  2E1D               	goto	l5646
 13994  0E16  3000               	movlw	0
 13995  0E17  00AE               	movwf	?___ftdiv
 13996  0E18  3000               	movlw	0
 13997  0E19  00AF               	movwf	?___ftdiv+1
 13998  0E1A  3000               	movlw	0
 13999  0E1B  00B0               	movwf	?___ftdiv+2
 14000  0E1C  0008               	return
 14001  0E1D                     l5646:	
 14002  0E1D  3000               	movlw	0
 14003  0E1E  00B9               	movwf	___ftdiv@f3
 14004  0E1F  3000               	movlw	0
 14005  0E20  00BA               	movwf	___ftdiv@f3+1
 14006  0E21  3000               	movlw	0
 14007  0E22  00BB               	movwf	___ftdiv@f3+2
 14008  0E23  3089               	movlw	137
 14009  0E24  073D               	addwf	___ftdiv@sign,w
 14010  0E25  00B4               	movwf	??___ftdiv
 14011  0E26  0834               	movf	??___ftdiv,w
 14012  0E27  02BC               	subwf	___ftdiv@exp,f
 14013  0E28  0831               	movf	___ftdiv@f1,w
 14014  0E29  00B4               	movwf	??___ftdiv
 14015  0E2A  0832               	movf	___ftdiv@f1+1,w
 14016  0E2B  00B5               	movwf	??___ftdiv+1
 14017  0E2C  0833               	movf	___ftdiv@f1+2,w
 14018  0E2D  00B6               	movwf	??___ftdiv+2
 14019  0E2E  3010               	movlw	16
 14020  0E2F                     u4465:	
 14021  0E2F  36B6               	lsrf	??___ftdiv+2,f
 14022  0E30  0CB5               	rrf	??___ftdiv+1,f
 14023  0E31  0CB4               	rrf	??___ftdiv,f
 14024  0E32  0B89               	decfsz	9,f
 14025  0E33  2E2F               	goto	u4465
 14026  0E34  0834               	movf	??___ftdiv,w
 14027  0E35  00B7               	movwf	??___ftdiv+3
 14028  0E36  0837               	movf	??___ftdiv+3,w
 14029  0E37  00BD               	movwf	___ftdiv@sign
 14030  0E38  082E               	movf	___ftdiv@f2,w
 14031  0E39  00B4               	movwf	??___ftdiv
 14032  0E3A  082F               	movf	___ftdiv@f2+1,w
 14033  0E3B  00B5               	movwf	??___ftdiv+1
 14034  0E3C  0830               	movf	___ftdiv@f2+2,w
 14035  0E3D  00B6               	movwf	??___ftdiv+2
 14036  0E3E  3010               	movlw	16
 14037  0E3F                     u4475:	
 14038  0E3F  36B6               	lsrf	??___ftdiv+2,f
 14039  0E40  0CB5               	rrf	??___ftdiv+1,f
 14040  0E41  0CB4               	rrf	??___ftdiv,f
 14041  0E42  0B89               	decfsz	9,f
 14042  0E43  2E3F               	goto	u4475
 14043  0E44  0834               	movf	??___ftdiv,w
 14044  0E45  00B7               	movwf	??___ftdiv+3
 14045  0E46  0837               	movf	??___ftdiv+3,w
 14046  0E47  06BD               	xorwf	___ftdiv@sign,f
 14047  0E48  3080               	movlw	128
 14048  0E49  00B4               	movwf	??___ftdiv
 14049  0E4A  0834               	movf	??___ftdiv,w
 14050  0E4B  05BD               	andwf	___ftdiv@sign,f
 14051  0E4C  17B2               	bsf	___ftdiv@f1+1,7
 14052  0E4D  30FF               	movlw	255
 14053  0E4E  05B1               	andwf	___ftdiv@f1,f
 14054  0E4F  30FF               	movlw	255
 14055  0E50  05B2               	andwf	___ftdiv@f1+1,f
 14056  0E51  3000               	movlw	0
 14057  0E52  05B3               	andwf	___ftdiv@f1+2,f
 14058  0E53  17AF               	bsf	___ftdiv@f2+1,7
 14059  0E54  30FF               	movlw	255
 14060  0E55  05AE               	andwf	___ftdiv@f2,f
 14061  0E56  30FF               	movlw	255
 14062  0E57  05AF               	andwf	___ftdiv@f2+1,f
 14063  0E58  3000               	movlw	0
 14064  0E59  05B0               	andwf	___ftdiv@f2+2,f
 14065  0E5A  3018               	movlw	24
 14066  0E5B  00B4               	movwf	??___ftdiv
 14067  0E5C  0834               	movf	??___ftdiv,w
 14068  0E5D  00B8               	movwf	___ftdiv@cntr
 14069  0E5E                     l5660:	
 14070  0E5E  3001               	movlw	1
 14071  0E5F                     u4485:	
 14072  0E5F  35B9               	lslf	___ftdiv@f3,f
 14073  0E60  0DBA               	rlf	___ftdiv@f3+1,f
 14074  0E61  0DBB               	rlf	___ftdiv@f3+2,f
 14075  0E62  0B89               	decfsz	9,f
 14076  0E63  2E5F               	goto	u4485
 14077  0E64  0830               	movf	___ftdiv@f2+2,w
 14078  0E65  0233               	subwf	___ftdiv@f1+2,w
 14079  0E66  1D03               	skipz
 14080  0E67  2E6E               	goto	u4495
 14081  0E68  082F               	movf	___ftdiv@f2+1,w
 14082  0E69  0232               	subwf	___ftdiv@f1+1,w
 14083  0E6A  1D03               	skipz
 14084  0E6B  2E6E               	goto	u4495
 14085  0E6C  082E               	movf	___ftdiv@f2,w
 14086  0E6D  0231               	subwf	___ftdiv@f1,w
 14087  0E6E                     u4495:	
 14088  0E6E  1C03               	skipc
 14089  0E6F  2E77               	goto	l5668
 14090  0E70  082E               	movf	___ftdiv@f2,w
 14091  0E71  02B1               	subwf	___ftdiv@f1,f
 14092  0E72  082F               	movf	___ftdiv@f2+1,w
 14093  0E73  3BB2               	subwfb	___ftdiv@f1+1,f
 14094  0E74  0830               	movf	___ftdiv@f2+2,w
 14095  0E75  3BB3               	subwfb	___ftdiv@f1+2,f
 14096  0E76  1439               	bsf	___ftdiv@f3,0
 14097  0E77                     l5668:	
 14098  0E77  3001               	movlw	1
 14099  0E78                     u4505:	
 14100  0E78  35B1               	lslf	___ftdiv@f1,f
 14101  0E79  0DB2               	rlf	___ftdiv@f1+1,f
 14102  0E7A  0DB3               	rlf	___ftdiv@f1+2,f
 14103  0E7B  0B89               	decfsz	9,f
 14104  0E7C  2E78               	goto	u4505
 14105  0E7D  3001               	movlw	1
 14106  0E7E  02B8               	subwf	___ftdiv@cntr,f
 14107  0E7F  1D03               	btfss	3,2
 14108  0E80  2E5E               	goto	l5660
 14109  0E81  0839               	movf	___ftdiv@f3,w
 14110  0E82  00A0               	movwf	___ftpack@arg
 14111  0E83  083A               	movf	___ftdiv@f3+1,w
 14112  0E84  00A1               	movwf	___ftpack@arg+1
 14113  0E85  083B               	movf	___ftdiv@f3+2,w
 14114  0E86  00A2               	movwf	___ftpack@arg+2
 14115  0E87  083C               	movf	___ftdiv@exp,w
 14116  0E88  00B4               	movwf	??___ftdiv
 14117  0E89  0834               	movf	??___ftdiv,w
 14118  0E8A  00A3               	movwf	___ftpack@exp
 14119  0E8B  083D               	movf	___ftdiv@sign,w
 14120  0E8C  00B5               	movwf	??___ftdiv+1
 14121  0E8D  0835               	movf	??___ftdiv+1,w
 14122  0E8E  00A4               	movwf	___ftpack@sign
 14123  0E8F  3189  2173         	fcall	___ftpack
 14124  0E91  0020               	movlb	0	; select bank0
 14125  0E92  0820               	movf	?___ftpack,w
 14126  0E93  00AE               	movwf	?___ftdiv
 14127  0E94  0821               	movf	?___ftpack+1,w
 14128  0E95  00AF               	movwf	?___ftdiv+1
 14129  0E96  0822               	movf	?___ftpack+2,w
 14130  0E97  00B0               	movwf	?___ftdiv+2
 14131  0E98  0008               	return
 14132  0E99                     __end_of___ftdiv:	
 14133                           
 14134                           	psect	text84
 14135  0475                     __ptext84:	
 14136 ;; *************** function ___ftadd *****************
 14137 ;; Defined at:
 14138 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14139 ;; Parameters:    Size  Location     Type
 14140 ;;  f1              3   33[BANK0 ] float 
 14141 ;;  f2              3   36[BANK0 ] float 
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;  exp1            1   45[BANK0 ] unsigned char 
 14144 ;;  exp2            1   44[BANK0 ] unsigned char 
 14145 ;;  sign            1   43[BANK0 ] unsigned char 
 14146 ;; Return value:  Size  Location     Type
 14147 ;;                  3   33[BANK0 ] float 
 14148 ;; Registers used:
 14149 ;;		wreg, status,2, status,0, pclath, cstack
 14150 ;; Tracked objects:
 14151 ;;		On entry : 0/0
 14152 ;;		On exit  : 0/0
 14153 ;;		Unchanged: 0/0
 14154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14155 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14156 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14157 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;Total ram usage:       13 bytes
 14160 ;; Hardware stack levels used:    1
 14161 ;; Hardware stack levels required when called:    6
 14162 ;; This function calls:
 14163 ;;		___ftpack
 14164 ;; This function is called by:
 14165 ;;		_getPercentValue
 14166 ;;		_setPercentValue
 14167 ;; This function uses a non-reentrant model
 14168 ;;
 14169                           
 14170                           
 14171                           ;psect for function ___ftadd
 14172  0475                     ___ftadd:	
 14173                           
 14174                           ;incstack = 0
 14175                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14176  0475  0020               	movlb	0	; select bank0
 14177  0476  0841               	movf	___ftadd@f1,w
 14178  0477  00C7               	movwf	??___ftadd
 14179  0478  0842               	movf	___ftadd@f1+1,w
 14180  0479  00C8               	movwf	??___ftadd+1
 14181  047A  0843               	movf	___ftadd@f1+2,w
 14182  047B  00C9               	movwf	??___ftadd+2
 14183  047C  1003               	clrc
 14184  047D  0D48               	rlf	??___ftadd+1,w
 14185  047E  0D49               	rlf	??___ftadd+2,w
 14186  047F  00CA               	movwf	??___ftadd+3
 14187  0480  084A               	movf	??___ftadd+3,w
 14188  0481  00CD               	movwf	___ftadd@exp1
 14189  0482  0844               	movf	___ftadd@f2,w
 14190  0483  00C7               	movwf	??___ftadd
 14191  0484  0845               	movf	___ftadd@f2+1,w
 14192  0485  00C8               	movwf	??___ftadd+1
 14193  0486  0846               	movf	___ftadd@f2+2,w
 14194  0487  00C9               	movwf	??___ftadd+2
 14195  0488  1003               	clrc
 14196  0489  0D48               	rlf	??___ftadd+1,w
 14197  048A  0D49               	rlf	??___ftadd+2,w
 14198  048B  00CA               	movwf	??___ftadd+3
 14199  048C  084A               	movf	??___ftadd+3,w
 14200  048D  00CC               	movwf	___ftadd@exp2
 14201  048E  084D               	movf	___ftadd@exp1,w
 14202  048F  1903               	btfsc	3,2
 14203  0490  2C9D               	goto	l5570
 14204  0491  084C               	movf	___ftadd@exp2,w
 14205  0492  024D               	subwf	___ftadd@exp1,w
 14206  0493  1803               	skipnc
 14207  0494  2CA4               	goto	l5574
 14208  0495  034D               	decf	___ftadd@exp1,w
 14209  0496  3AFF               	xorlw	255
 14210  0497  074C               	addwf	___ftadd@exp2,w
 14211  0498  00C7               	movwf	??___ftadd
 14212  0499  3019               	movlw	25
 14213  049A  0247               	subwf	??___ftadd,w
 14214  049B  1C03               	skipc
 14215  049C  2CA4               	goto	l5574
 14216  049D                     l5570:	
 14217  049D  0844               	movf	___ftadd@f2,w
 14218  049E  00C1               	movwf	?___ftadd
 14219  049F  0845               	movf	___ftadd@f2+1,w
 14220  04A0  00C2               	movwf	?___ftadd+1
 14221  04A1  0846               	movf	___ftadd@f2+2,w
 14222  04A2  00C3               	movwf	?___ftadd+2
 14223  04A3  0008               	return
 14224  04A4                     l5574:	
 14225  04A4  084C               	movf	___ftadd@exp2,w
 14226  04A5  1903               	btfsc	3,2
 14227  04A6  0008               	return
 14228  04A7  084D               	movf	___ftadd@exp1,w
 14229  04A8  024C               	subwf	___ftadd@exp2,w
 14230  04A9  1803               	skipnc
 14231  04AA  2CB3               	goto	l5580
 14232  04AB  034C               	decf	___ftadd@exp2,w
 14233  04AC  3AFF               	xorlw	255
 14234  04AD  074D               	addwf	___ftadd@exp1,w
 14235  04AE  00C7               	movwf	??___ftadd
 14236  04AF  3019               	movlw	25
 14237  04B0  0247               	subwf	??___ftadd,w
 14238  04B1  1803               	btfsc	3,0
 14239  04B2  0008               	return
 14240  04B3                     l5580:	
 14241  04B3  3006               	movlw	6
 14242  04B4  00C7               	movwf	??___ftadd
 14243  04B5  0847               	movf	??___ftadd,w
 14244  04B6  00CB               	movwf	___ftadd@sign
 14245  04B7  1BC3               	btfsc	___ftadd@f1+2,7
 14246  04B8  17CB               	bsf	___ftadd@sign,7
 14247  04B9  1BC6               	btfsc	___ftadd@f2+2,7
 14248  04BA  174B               	bsf	___ftadd@sign,6
 14249  04BB  17C2               	bsf	___ftadd@f1+1,7
 14250  04BC  30FF               	movlw	255
 14251  04BD  05C1               	andwf	___ftadd@f1,f
 14252  04BE  30FF               	movlw	255
 14253  04BF  05C2               	andwf	___ftadd@f1+1,f
 14254  04C0  3000               	movlw	0
 14255  04C1  05C3               	andwf	___ftadd@f1+2,f
 14256  04C2  17C5               	bsf	___ftadd@f2+1,7
 14257  04C3  30FF               	movlw	255
 14258  04C4  05C4               	andwf	___ftadd@f2,f
 14259  04C5  30FF               	movlw	255
 14260  04C6  05C5               	andwf	___ftadd@f2+1,f
 14261  04C7  3000               	movlw	0
 14262  04C8  05C6               	andwf	___ftadd@f2+2,f
 14263  04C9  084C               	movf	___ftadd@exp2,w
 14264  04CA  024D               	subwf	___ftadd@exp1,w
 14265  04CB  1803               	skipnc
 14266  04CC  2CEF               	goto	l5602
 14267  04CD                     l5592:	
 14268  04CD  3001               	movlw	1
 14269  04CE                     u4305:	
 14270  04CE  35C4               	lslf	___ftadd@f2,f
 14271  04CF  0DC5               	rlf	___ftadd@f2+1,f
 14272  04D0  0DC6               	rlf	___ftadd@f2+2,f
 14273  04D1  0B89               	decfsz	9,f
 14274  04D2  2CCE               	goto	u4305
 14275  04D3  3001               	movlw	1
 14276  04D4  02CC               	subwf	___ftadd@exp2,f
 14277  04D5  084C               	movf	___ftadd@exp2,w
 14278  04D6  064D               	xorwf	___ftadd@exp1,w
 14279  04D7  1903               	skipnz
 14280  04D8  2CEA               	goto	l5600
 14281  04D9  3001               	movlw	1
 14282  04DA  02CB               	subwf	___ftadd@sign,f
 14283  04DB  084B               	movf	___ftadd@sign,w
 14284  04DC  3907               	andlw	7
 14285  04DD  1903               	btfsc	3,2
 14286  04DE  2CEA               	goto	l5600
 14287  04DF  2CCD               	goto	l5592
 14288  04E0                     l5598:	
 14289  04E0  3001               	movlw	1
 14290  04E1                     u4335:	
 14291  04E1  36C3               	lsrf	___ftadd@f1+2,f
 14292  04E2  0CC2               	rrf	___ftadd@f1+1,f
 14293  04E3  0CC1               	rrf	___ftadd@f1,f
 14294  04E4  0B89               	decfsz	9,f
 14295  04E5  2CE1               	goto	u4335
 14296  04E6  3001               	movlw	1
 14297  04E7  00C7               	movwf	??___ftadd
 14298  04E8  0847               	movf	??___ftadd,w
 14299  04E9  07CD               	addwf	___ftadd@exp1,f
 14300  04EA                     l5600:	
 14301  04EA  084D               	movf	___ftadd@exp1,w
 14302  04EB  064C               	xorwf	___ftadd@exp2,w
 14303  04EC  1903               	btfsc	3,2
 14304  04ED  2D14               	goto	l2767
 14305  04EE  2CE0               	goto	l5598
 14306  04EF                     l5602:	
 14307  04EF  084D               	movf	___ftadd@exp1,w
 14308  04F0  024C               	subwf	___ftadd@exp2,w
 14309  04F1  1803               	skipnc
 14310  04F2  2D14               	goto	l2767
 14311  04F3                     l5604:	
 14312  04F3  3001               	movlw	1
 14313  04F4                     u4365:	
 14314  04F4  35C1               	lslf	___ftadd@f1,f
 14315  04F5  0DC2               	rlf	___ftadd@f1+1,f
 14316  04F6  0DC3               	rlf	___ftadd@f1+2,f
 14317  04F7  0B89               	decfsz	9,f
 14318  04F8  2CF4               	goto	u4365
 14319  04F9  3001               	movlw	1
 14320  04FA  02CD               	subwf	___ftadd@exp1,f
 14321  04FB  084C               	movf	___ftadd@exp2,w
 14322  04FC  064D               	xorwf	___ftadd@exp1,w
 14323  04FD  1903               	skipnz
 14324  04FE  2D10               	goto	l5612
 14325  04FF  3001               	movlw	1
 14326  0500  02CB               	subwf	___ftadd@sign,f
 14327  0501  084B               	movf	___ftadd@sign,w
 14328  0502  3907               	andlw	7
 14329  0503  1903               	btfsc	3,2
 14330  0504  2D10               	goto	l5612
 14331  0505  2CF3               	goto	l5604
 14332  0506                     l5610:	
 14333  0506  3001               	movlw	1
 14334  0507                     u4395:	
 14335  0507  36C6               	lsrf	___ftadd@f2+2,f
 14336  0508  0CC5               	rrf	___ftadd@f2+1,f
 14337  0509  0CC4               	rrf	___ftadd@f2,f
 14338  050A  0B89               	decfsz	9,f
 14339  050B  2D07               	goto	u4395
 14340  050C  3001               	movlw	1
 14341  050D  00C7               	movwf	??___ftadd
 14342  050E  0847               	movf	??___ftadd,w
 14343  050F  07CC               	addwf	___ftadd@exp2,f
 14344  0510                     l5612:	
 14345  0510  084D               	movf	___ftadd@exp1,w
 14346  0511  064C               	xorwf	___ftadd@exp2,w
 14347  0512  1D03               	skipz
 14348  0513  2D06               	goto	l5610
 14349  0514                     l2767:	
 14350  0514  1FCB               	btfss	___ftadd@sign,7
 14351  0515  2D26               	goto	l5616
 14352  0516  30FF               	movlw	255
 14353  0517  06C1               	xorwf	___ftadd@f1,f
 14354  0518  30FF               	movlw	255
 14355  0519  06C2               	xorwf	___ftadd@f1+1,f
 14356  051A  30FF               	movlw	255
 14357  051B  06C3               	xorwf	___ftadd@f1+2,f
 14358  051C  3001               	movlw	1
 14359  051D  07C1               	addwf	___ftadd@f1,f
 14360  051E  3000               	movlw	0
 14361  051F  1803               	skipnc
 14362  0520  3001               	movlw	1
 14363  0521  07C2               	addwf	___ftadd@f1+1,f
 14364  0522  3000               	movlw	0
 14365  0523  1803               	skipnc
 14366  0524  3001               	movlw	1
 14367  0525  07C3               	addwf	___ftadd@f1+2,f
 14368  0526                     l5616:	
 14369  0526  1F4B               	btfss	___ftadd@sign,6
 14370  0527  2D38               	goto	l5620
 14371  0528  30FF               	movlw	255
 14372  0529  06C4               	xorwf	___ftadd@f2,f
 14373  052A  30FF               	movlw	255
 14374  052B  06C5               	xorwf	___ftadd@f2+1,f
 14375  052C  30FF               	movlw	255
 14376  052D  06C6               	xorwf	___ftadd@f2+2,f
 14377  052E  3001               	movlw	1
 14378  052F  07C4               	addwf	___ftadd@f2,f
 14379  0530  3000               	movlw	0
 14380  0531  1803               	skipnc
 14381  0532  3001               	movlw	1
 14382  0533  07C5               	addwf	___ftadd@f2+1,f
 14383  0534  3000               	movlw	0
 14384  0535  1803               	skipnc
 14385  0536  3001               	movlw	1
 14386  0537  07C6               	addwf	___ftadd@f2+2,f
 14387  0538                     l5620:	
 14388  0538  01CB               	clrf	___ftadd@sign
 14389  0539  0841               	movf	___ftadd@f1,w
 14390  053A  07C4               	addwf	___ftadd@f2,f
 14391  053B  0842               	movf	___ftadd@f1+1,w
 14392  053C  3DC5               	addwfc	___ftadd@f2+1,f
 14393  053D  0843               	movf	___ftadd@f1+2,w
 14394  053E  3DC6               	addwfc	___ftadd@f2+2,f
 14395  053F  1FC6               	btfss	___ftadd@f2+2,7
 14396  0540  2D53               	goto	l5630
 14397  0541  30FF               	movlw	255
 14398  0542  06C4               	xorwf	___ftadd@f2,f
 14399  0543  30FF               	movlw	255
 14400  0544  06C5               	xorwf	___ftadd@f2+1,f
 14401  0545  30FF               	movlw	255
 14402  0546  06C6               	xorwf	___ftadd@f2+2,f
 14403  0547  3001               	movlw	1
 14404  0548  07C4               	addwf	___ftadd@f2,f
 14405  0549  3000               	movlw	0
 14406  054A  1803               	skipnc
 14407  054B  3001               	movlw	1
 14408  054C  07C5               	addwf	___ftadd@f2+1,f
 14409  054D  3000               	movlw	0
 14410  054E  1803               	skipnc
 14411  054F  3001               	movlw	1
 14412  0550  07C6               	addwf	___ftadd@f2+2,f
 14413  0551  01CB               	clrf	___ftadd@sign
 14414  0552  0ACB               	incf	___ftadd@sign,f
 14415  0553                     l5630:	
 14416  0553  0844               	movf	___ftadd@f2,w
 14417  0554  00A0               	movwf	___ftpack@arg
 14418  0555  0845               	movf	___ftadd@f2+1,w
 14419  0556  00A1               	movwf	___ftpack@arg+1
 14420  0557  0846               	movf	___ftadd@f2+2,w
 14421  0558  00A2               	movwf	___ftpack@arg+2
 14422  0559  084D               	movf	___ftadd@exp1,w
 14423  055A  00C7               	movwf	??___ftadd
 14424  055B  0847               	movf	??___ftadd,w
 14425  055C  00A3               	movwf	___ftpack@exp
 14426  055D  084B               	movf	___ftadd@sign,w
 14427  055E  00C8               	movwf	??___ftadd+1
 14428  055F  0848               	movf	??___ftadd+1,w
 14429  0560  00A4               	movwf	___ftpack@sign
 14430  0561  3189  2173         	fcall	___ftpack
 14431  0563  0020               	movlb	0	; select bank0
 14432  0564  0820               	movf	?___ftpack,w
 14433  0565  00C1               	movwf	?___ftadd
 14434  0566  0821               	movf	?___ftpack+1,w
 14435  0567  00C2               	movwf	?___ftadd+1
 14436  0568  0822               	movf	?___ftpack+2,w
 14437  0569  00C3               	movwf	?___ftadd+2
 14438  056A  0008               	return
 14439  056B                     __end_of___ftadd:	
 14440                           
 14441                           	psect	text85
 14442  1F75                     __ptext85:	
 14443 ;; *************** function ___awtoft *****************
 14444 ;; Defined at:
 14445 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14446 ;; Parameters:    Size  Location     Type
 14447 ;;  c               2    8[BANK0 ] int 
 14448 ;; Auto vars:     Size  Location     Type
 14449 ;;  sign            1   13[BANK0 ] unsigned char 
 14450 ;; Return value:  Size  Location     Type
 14451 ;;                  3    8[BANK0 ] float 
 14452 ;; Registers used:
 14453 ;;		wreg, status,2, status,0, pclath, cstack
 14454 ;; Tracked objects:
 14455 ;;		On entry : 0/0
 14456 ;;		On exit  : 0/0
 14457 ;;		Unchanged: 0/0
 14458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14459 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;Total ram usage:        6 bytes
 14464 ;; Hardware stack levels used:    1
 14465 ;; Hardware stack levels required when called:    6
 14466 ;; This function calls:
 14467 ;;		___ftpack
 14468 ;; This function is called by:
 14469 ;;		_getPercentValue
 14470 ;;		_setPercentValue
 14471 ;; This function uses a non-reentrant model
 14472 ;;
 14473                           
 14474                           
 14475                           ;psect for function ___awtoft
 14476  1F75                     ___awtoft:	
 14477                           
 14478                           ;incstack = 0
 14479                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14480  1F75  0020               	movlb	0	; select bank0
 14481  1F76  01AD               	clrf	___awtoft@sign
 14482  1F77  1FA9               	btfss	___awtoft@c+1,7
 14483  1F78  2F80               	goto	l5558
 14484  1F79  09A8               	comf	___awtoft@c,f
 14485  1F7A  09A9               	comf	___awtoft@c+1,f
 14486  1F7B  0AA8               	incf	___awtoft@c,f
 14487  1F7C  1903               	skipnz
 14488  1F7D  0AA9               	incf	___awtoft@c+1,f
 14489  1F7E  01AD               	clrf	___awtoft@sign
 14490  1F7F  0AAD               	incf	___awtoft@sign,f
 14491  1F80                     l5558:	
 14492  1F80  0828               	movf	___awtoft@c,w
 14493  1F81  00A0               	movwf	___ftpack@arg
 14494  1F82  0829               	movf	___awtoft@c+1,w
 14495  1F83  00A1               	movwf	___ftpack@arg+1
 14496  1F84  01A2               	clrf	___ftpack@arg+2
 14497  1F85  308E               	movlw	142
 14498  1F86  00AB               	movwf	??___awtoft
 14499  1F87  082B               	movf	??___awtoft,w
 14500  1F88  00A3               	movwf	___ftpack@exp
 14501  1F89  082D               	movf	___awtoft@sign,w
 14502  1F8A  00AC               	movwf	??___awtoft+1
 14503  1F8B  082C               	movf	??___awtoft+1,w
 14504  1F8C  00A4               	movwf	___ftpack@sign
 14505  1F8D  3189  2173         	fcall	___ftpack
 14506  1F8F  0020               	movlb	0	; select bank0
 14507  1F90  0820               	movf	?___ftpack,w
 14508  1F91  00A8               	movwf	?___awtoft
 14509  1F92  0821               	movf	?___ftpack+1,w
 14510  1F93  00A9               	movwf	?___awtoft+1
 14511  1F94  0822               	movf	?___ftpack+2,w
 14512  1F95  00AA               	movwf	?___awtoft+2
 14513  1F96  0008               	return
 14514  1F97                     __end_of___awtoft:	
 14515                           
 14516                           	psect	text86
 14517  0973                     __ptext86:	
 14518 ;; *************** function ___ftpack *****************
 14519 ;; Defined at:
 14520 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14521 ;; Parameters:    Size  Location     Type
 14522 ;;  arg             3    0[BANK0 ] unsigned um
 14523 ;;  exp             1    3[BANK0 ] unsigned char 
 14524 ;;  sign            1    4[BANK0 ] unsigned char 
 14525 ;; Auto vars:     Size  Location     Type
 14526 ;;		None
 14527 ;; Return value:  Size  Location     Type
 14528 ;;                  3    0[BANK0 ] float 
 14529 ;; Registers used:
 14530 ;;		wreg, status,2, status,0
 14531 ;; Tracked objects:
 14532 ;;		On entry : 0/0
 14533 ;;		On exit  : 0/0
 14534 ;;		Unchanged: 0/0
 14535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14536 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14539 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14540 ;;Total ram usage:        8 bytes
 14541 ;; Hardware stack levels used:    1
 14542 ;; Hardware stack levels required when called:    5
 14543 ;; This function calls:
 14544 ;;		Nothing
 14545 ;; This function is called by:
 14546 ;;		___awtoft
 14547 ;;		___ftadd
 14548 ;;		___ftdiv
 14549 ;;		___ftmul
 14550 ;; This function uses a non-reentrant model
 14551 ;;
 14552                           
 14553                           
 14554                           ;psect for function ___ftpack
 14555  0973                     ___ftpack:	
 14556                           
 14557                           ;incstack = 0
 14558                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14559  0973  0020               	movlb	0	; select bank0
 14560  0974  0823               	movf	___ftpack@exp,w
 14561  0975  1903               	btfsc	3,2
 14562  0976  297C               	goto	l5508
 14563  0977  0822               	movf	___ftpack@arg+2,w
 14564  0978  0421               	iorwf	___ftpack@arg+1,w
 14565  0979  0420               	iorwf	___ftpack@arg,w
 14566  097A  1D03               	skipz
 14567  097B  298D               	goto	l5514
 14568  097C                     l5508:	
 14569  097C  3000               	movlw	0
 14570  097D  00A0               	movwf	?___ftpack
 14571  097E  3000               	movlw	0
 14572  097F  00A1               	movwf	?___ftpack+1
 14573  0980  3000               	movlw	0
 14574  0981  00A2               	movwf	?___ftpack+2
 14575  0982  0008               	return
 14576  0983                     l5512:	
 14577  0983  3001               	movlw	1
 14578  0984  00A5               	movwf	??___ftpack
 14579  0985  0825               	movf	??___ftpack,w
 14580  0986  07A3               	addwf	___ftpack@exp,f
 14581  0987  3001               	movlw	1
 14582  0988                     u4095:	
 14583  0988  36A2               	lsrf	___ftpack@arg+2,f
 14584  0989  0CA1               	rrf	___ftpack@arg+1,f
 14585  098A  0CA0               	rrf	___ftpack@arg,f
 14586  098B  0B89               	decfsz	9,f
 14587  098C  2988               	goto	u4095
 14588  098D                     l5514:	
 14589  098D  30FE               	movlw	254
 14590  098E  0522               	andwf	___ftpack@arg+2,w
 14591  098F  1903               	btfsc	3,2
 14592  0990  29A6               	goto	l2738
 14593  0991  2983               	goto	l5512
 14594  0992                     l5516:	
 14595  0992  3001               	movlw	1
 14596  0993  00A5               	movwf	??___ftpack
 14597  0994  0825               	movf	??___ftpack,w
 14598  0995  07A3               	addwf	___ftpack@exp,f
 14599  0996  3001               	movlw	1
 14600  0997  07A0               	addwf	___ftpack@arg,f
 14601  0998  3000               	movlw	0
 14602  0999  1803               	skipnc
 14603  099A  3001               	movlw	1
 14604  099B  07A1               	addwf	___ftpack@arg+1,f
 14605  099C  3000               	movlw	0
 14606  099D  1803               	skipnc
 14607  099E  3001               	movlw	1
 14608  099F  07A2               	addwf	___ftpack@arg+2,f
 14609  09A0  3001               	movlw	1
 14610  09A1                     u4115:	
 14611  09A1  36A2               	lsrf	___ftpack@arg+2,f
 14612  09A2  0CA1               	rrf	___ftpack@arg+1,f
 14613  09A3  0CA0               	rrf	___ftpack@arg,f
 14614  09A4  0B89               	decfsz	9,f
 14615  09A5  29A1               	goto	u4115
 14616  09A6                     l2738:	
 14617  09A6  30FF               	movlw	255
 14618  09A7  0522               	andwf	___ftpack@arg+2,w
 14619  09A8  1903               	btfsc	3,2
 14620  09A9  29B3               	goto	l5524
 14621  09AA  2992               	goto	l5516
 14622  09AB                     l5522:	
 14623  09AB  3001               	movlw	1
 14624  09AC  02A3               	subwf	___ftpack@exp,f
 14625  09AD  3001               	movlw	1
 14626  09AE                     u4135:	
 14627  09AE  35A0               	lslf	___ftpack@arg,f
 14628  09AF  0DA1               	rlf	___ftpack@arg+1,f
 14629  09B0  0DA2               	rlf	___ftpack@arg+2,f
 14630  09B1  0B89               	decfsz	9,f
 14631  09B2  29AE               	goto	u4135
 14632  09B3                     l5524:	
 14633  09B3  1FA1               	btfss	___ftpack@arg+1,7
 14634  09B4  29AB               	goto	l5522
 14635  09B5  1823               	btfsc	___ftpack@exp,0
 14636  09B6  29BD               	goto	l2744
 14637  09B7  30FF               	movlw	255
 14638  09B8  05A0               	andwf	___ftpack@arg,f
 14639  09B9  307F               	movlw	127
 14640  09BA  05A1               	andwf	___ftpack@arg+1,f
 14641  09BB  30FF               	movlw	255
 14642  09BC  05A2               	andwf	___ftpack@arg+2,f
 14643  09BD                     l2744:	
 14644  09BD  1003               	clrc
 14645  09BE  0CA3               	rrf	___ftpack@exp,f
 14646  09BF  0823               	movf	___ftpack@exp,w
 14647  09C0  00A5               	movwf	??___ftpack
 14648  09C1  01A6               	clrf	??___ftpack+1
 14649  09C2  01A7               	clrf	??___ftpack+2
 14650  09C3  3010               	movlw	16
 14651  09C4                     u4165:	
 14652  09C4  35A5               	lslf	??___ftpack,f
 14653  09C5  0DA6               	rlf	??___ftpack+1,f
 14654  09C6  0DA7               	rlf	??___ftpack+2,f
 14655  09C7  0B89               	decfsz	9,f
 14656  09C8  29C4               	goto	u4165
 14657  09C9  0825               	movf	??___ftpack,w
 14658  09CA  04A0               	iorwf	___ftpack@arg,f
 14659  09CB  0826               	movf	??___ftpack+1,w
 14660  09CC  04A1               	iorwf	___ftpack@arg+1,f
 14661  09CD  0827               	movf	??___ftpack+2,w
 14662  09CE  04A2               	iorwf	___ftpack@arg+2,f
 14663  09CF  0824               	movf	___ftpack@sign,w
 14664  09D0  1903               	btfsc	3,2
 14665  09D1  0008               	return
 14666  09D2  17A2               	bsf	___ftpack@arg+2,7
 14667  09D3  0008               	return
 14668  09D4                     __end_of___ftpack:	
 14669                           
 14670                           	psect	text87
 14671  126D                     __ptext87:	
 14672 ;; *************** function _setLED *****************
 14673 ;; Defined at:
 14674 ;;		line 76 in file "../src/LED_B1.c"
 14675 ;; Parameters:    Size  Location     Type
 14676 ;;  led             1    wreg     unsigned char 
 14677 ;;  command         1    2[BANK0 ] unsigned char 
 14678 ;; Auto vars:     Size  Location     Type
 14679 ;;  led             1    3[BANK0 ] unsigned char 
 14680 ;; Return value:  Size  Location     Type
 14681 ;;		None               void
 14682 ;; Registers used:
 14683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14684 ;; Tracked objects:
 14685 ;;		On entry : 0/0
 14686 ;;		On exit  : 0/0
 14687 ;;		Unchanged: 0/0
 14688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14689 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14693 ;;Total ram usage:        2 bytes
 14694 ;; Hardware stack levels used:    1
 14695 ;; Hardware stack levels required when called:    6
 14696 ;; This function calls:
 14697 ;;		_LedPointSelect
 14698 ;; This function is called by:
 14699 ;;		_setDimmerLights
 14700 ;;		_setLED_Initialization
 14701 ;;		_setMain_Exception
 14702 ;;		_setSw_Initialization
 14703 ;; This function uses a non-reentrant model
 14704 ;;
 14705                           
 14706                           
 14707                           ;psect for function _setLED
 14708  126D                     _setLED:	
 14709                           
 14710                           ;incstack = 0
 14711                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14712                           ;setLED@led stored from wreg
 14713  126D  0020               	movlb	0	; select bank0
 14714  126E  00A3               	movwf	setLED@led
 14715                           
 14716                           ;LED_B1.c: 77: LedPointSelect(led);
 14717  126F  0823               	movf	setLED@led,w
 14718  1270  319C  241A  3192   	fcall	_LedPointSelect
 14719                           
 14720                           ;LED_B1.c: 78: if (command == 0) {
 14721  1273  0020               	movlb	0	; select bank0
 14722  1274  08A2               	movf	setLED@command,f
 14723  1275  1D03               	skipz
 14724  1276  2A7C               	goto	l6246
 14725                           
 14726                           ;LED_B1.c: 107: if (led == 99) {
 14727  1277  0823               	movf	setLED@led,w
 14728  1278  3A63               	xorlw	99
 14729  1279  1D03               	skipz
 14730  127A  2A7C               	goto	l6246
 14731                           
 14732                           ;LED_B1.c: 111: RB5 = 1;
 14733  127B  168D               	bsf	13,5	;volatile
 14734  127C                     l6246:	
 14735                           
 14736                           ;LED_B1.c: 113: }
 14737                           ;LED_B1.c: 115: }
 14738                           ;LED_B1.c: 116: if (command == 1) {
 14739  127C  0822               	movf	setLED@command,w
 14740  127D  3A01               	xorlw	1
 14741  127E  1D03               	skipz
 14742  127F  2A85               	goto	l6252
 14743                           
 14744                           ;LED_B1.c: 145: if (led == 99) {
 14745  1280  0823               	movf	setLED@led,w
 14746  1281  3A63               	xorlw	99
 14747  1282  1D03               	skipz
 14748  1283  2A85               	goto	l6252
 14749                           
 14750                           ;LED_B1.c: 149: RB5 = 0;
 14751  1284  128D               	bcf	13,5	;volatile
 14752  1285                     l6252:	
 14753                           
 14754                           ;LED_B1.c: 151: }
 14755                           ;LED_B1.c: 153: }
 14756                           ;LED_B1.c: 154: if (command == 10) {
 14757  1285  0822               	movf	setLED@command,w
 14758  1286  3A0A               	xorlw	10
 14759  1287  1D03               	skipz
 14760  1288  2A99               	goto	l6260
 14761                           
 14762                           ;LED_B1.c: 155: LED->GO = 0;
 14763  1289  087A               	movf	_LED,w
 14764  128A  0086               	movwf	6
 14765  128B  3001               	movlw	1	; select bank2/3
 14766  128C  0087               	movwf	7
 14767  128D  1081               	bcf	1,1
 14768                           
 14769                           ;LED_B1.c: 156: LED->Time = 0;
 14770  128E  0A7A               	incf	_LED,w
 14771  128F  0086               	movwf	6
 14772  1290  3001               	movlw	1	; select bank2/3
 14773  1291  0087               	movwf	7
 14774  1292  3000               	movlw	0
 14775  1293  3FC0               	movwi [0]fsr1
 14776  1294  3FC1               	movwi [1]fsr1
 14777                           
 14778                           ;LED_B1.c: 185: if (led == 99) {
 14779  1295  0823               	movf	setLED@led,w
 14780  1296  3A63               	xorlw	99
 14781  1297  1903               	btfsc	3,2
 14782                           
 14783                           ;LED_B1.c: 189: RB5 = 1;
 14784  1298  168D               	bsf	13,5	;volatile
 14785  1299                     l6260:	
 14786                           
 14787                           ;LED_B1.c: 191: }
 14788                           ;LED_B1.c: 193: }
 14789                           ;LED_B1.c: 194: if (command == 11) {
 14790  1299  0822               	movf	setLED@command,w
 14791  129A  3A0B               	xorlw	11
 14792  129B  1D03               	skipz
 14793  129C  0008               	return
 14794                           
 14795                           ;LED_B1.c: 195: LED->GO = 1;
 14796  129D  087A               	movf	_LED,w
 14797  129E  0086               	movwf	6
 14798  129F  3001               	movlw	1	; select bank2/3
 14799  12A0  0087               	movwf	7
 14800  12A1  1481               	bsf	1,1
 14801  12A2  0008               	return
 14802  12A3                     __end_of_setLED:	
 14803                           
 14804                           	psect	text88
 14805  1C1A                     __ptext88:	
 14806 ;; *************** function _LedPointSelect *****************
 14807 ;; Defined at:
 14808 ;;		line 7 in file "../src/LED_B1.c"
 14809 ;; Parameters:    Size  Location     Type
 14810 ;;  led             1    wreg     unsigned char 
 14811 ;; Auto vars:     Size  Location     Type
 14812 ;;  led             1    1[BANK0 ] unsigned char 
 14813 ;; Return value:  Size  Location     Type
 14814 ;;		None               void
 14815 ;; Registers used:
 14816 ;;		wreg
 14817 ;; Tracked objects:
 14818 ;;		On entry : 0/0
 14819 ;;		On exit  : 0/0
 14820 ;;		Unchanged: 0/0
 14821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14826 ;;Total ram usage:        2 bytes
 14827 ;; Hardware stack levels used:    1
 14828 ;; Hardware stack levels required when called:    5
 14829 ;; This function calls:
 14830 ;;		Nothing
 14831 ;; This function is called by:
 14832 ;;		_setLED_Initialization
 14833 ;;		_setLED
 14834 ;;		_setLED_Main
 14835 ;; This function uses a non-reentrant model
 14836 ;;
 14837                           
 14838                           
 14839                           ;psect for function _LedPointSelect
 14840  1C1A                     _LedPointSelect:	
 14841                           
 14842                           ;incstack = 0
 14843                           ; Regs used in _LedPointSelect: [wreg]
 14844                           ;LedPointSelect@led stored from wreg
 14845  1C1A  0020               	movlb	0	; select bank0
 14846  1C1B  00A1               	movwf	LedPointSelect@led
 14847                           
 14848                           ;LED_B1.c: 24: if (led == 99) {
 14849  1C1C  0821               	movf	LedPointSelect@led,w
 14850  1C1D  3A63               	xorlw	99
 14851  1C1E  1D03               	skipz
 14852  1C1F  0008               	return
 14853                           
 14854                           ;LED_B1.c: 25: LED = &VarErrLED;
 14855  1C20  30E2               	movlw	_VarErrLED& (0+255)
 14856  1C21  00A0               	movwf	??_LedPointSelect
 14857  1C22  0820               	movf	??_LedPointSelect,w
 14858  1C23  00FA               	movwf	_LED
 14859  1C24  0008               	return
 14860  1C25                     __end_of_LedPointSelect:	
 14861                           
 14862                           	psect	text89
 14863  1C5D                     __ptext89:	
 14864 ;; *************** function _setDimmerLights_Line *****************
 14865 ;; Defined at:
 14866 ;;		line 667 in file "../src/Dimmer_B1.c"
 14867 ;; Parameters:    Size  Location     Type
 14868 ;;  lights          1    wreg     unsigned char 
 14869 ;; Auto vars:     Size  Location     Type
 14870 ;;  lights          1    0[BANK0 ] unsigned char 
 14871 ;; Return value:  Size  Location     Type
 14872 ;;		None               void
 14873 ;; Registers used:
 14874 ;;		wreg
 14875 ;; Tracked objects:
 14876 ;;		On entry : 0/0
 14877 ;;		On exit  : 0/0
 14878 ;;		Unchanged: 0/0
 14879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14884 ;;Total ram usage:        1 bytes
 14885 ;; Hardware stack levels used:    1
 14886 ;; Hardware stack levels required when called:    5
 14887 ;; This function calls:
 14888 ;;		Nothing
 14889 ;; This function is called by:
 14890 ;;		_setDimmerLights
 14891 ;; This function uses a non-reentrant model
 14892 ;;
 14893                           
 14894                           
 14895                           ;psect for function _setDimmerLights_Line
 14896  1C5D                     _setDimmerLights_Line:	
 14897                           
 14898                           ;incstack = 0
 14899                           ; Regs used in _setDimmerLights_Line: [wreg]
 14900                           ;setDimmerLights_Line@lights stored from wreg
 14901  1C5D  0020               	movlb	0	; select bank0
 14902  1C5E  00A0               	movwf	setDimmerLights_Line@lights
 14903                           
 14904                           ;Dimmer_B1.c: 669: DimmerLights1.Line = 0;
 14905  1C5F  0023               	movlb	3	; select bank3
 14906  1C60  104E               	bcf	(_DimmerLights1^(0+384)+9),0
 14907                           
 14908                           ;Dimmer_B1.c: 678: if (lights == 1) {
 14909  1C61  0020               	movlb	0	; select bank0
 14910  1C62  0820               	movf	setDimmerLights_Line@lights,w
 14911  1C63  3A01               	xorlw	1
 14912  1C64  1D03               	skipz
 14913  1C65  0008               	return
 14914                           
 14915                           ;Dimmer_B1.c: 679: DimmerLights1.Line = 1;
 14916  1C66  0023               	movlb	3	; select bank3
 14917  1C67  144E               	bsf	(_DimmerLights1^(0+384)+9),0
 14918  1C68  0008               	return
 14919  1C69                     __end_of_setDimmerLights_Line:	
 14920                           
 14921                           	psect	text90
 14922  11D2                     __ptext90:	
 14923 ;; *************** function _getMain_All_Error_Status *****************
 14924 ;; Defined at:
 14925 ;;		line 404 in file "../src/Main_B1.c"
 14926 ;; Parameters:    Size  Location     Type
 14927 ;;  command         1    wreg     unsigned char 
 14928 ;; Auto vars:     Size  Location     Type
 14929 ;;  command         1    5[BANK0 ] unsigned char 
 14930 ;;  status          1    6[BANK0 ] unsigned char 
 14931 ;; Return value:  Size  Location     Type
 14932 ;;                  1    wreg      unsigned char 
 14933 ;; Registers used:
 14934 ;;		wreg, status,2, status,0
 14935 ;; Tracked objects:
 14936 ;;		On entry : 0/0
 14937 ;;		On exit  : 0/0
 14938 ;;		Unchanged: 0/0
 14939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14941 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;Total ram usage:        7 bytes
 14945 ;; Hardware stack levels used:    1
 14946 ;; Hardware stack levels required when called:    5
 14947 ;; This function calls:
 14948 ;;		Nothing
 14949 ;; This function is called by:
 14950 ;;		_DimmerLights_Main
 14951 ;;		_setDimmerLights
 14952 ;;		_setDimmerLights_Adj
 14953 ;;		_Exception_Main
 14954 ;;		_Load_Main
 14955 ;;		_setTemp_Main
 14956 ;;		_setRF_Main
 14957 ;;		_getRxData
 14958 ;;		_Switch_Main
 14959 ;; This function uses a non-reentrant model
 14960 ;;
 14961                           
 14962                           
 14963                           ;psect for function _getMain_All_Error_Status
 14964  11D2                     _getMain_All_Error_Status:	
 14965                           
 14966                           ;incstack = 0
 14967                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 14968                           ;getMain_All_Error_Status@command stored from wreg
 14969  11D2  0020               	movlb	0	; select bank0
 14970  11D3  00A5               	movwf	getMain_All_Error_Status@command
 14971                           
 14972                           ;Main_B1.c: 405: char status = 0;
 14973  11D4  01A6               	clrf	getMain_All_Error_Status@status
 14974                           
 14975                           ;Main_B1.c: 416: if (status == 0 && command != 2) {
 14976  11D5  08A6               	movf	getMain_All_Error_Status@status,f
 14977  11D6  1D03               	skipz
 14978  11D7  29EC               	goto	l6226
 14979  11D8  0825               	movf	getMain_All_Error_Status@command,w
 14980  11D9  3A02               	xorlw	2
 14981  11DA  1903               	skipnz
 14982  11DB  29EC               	goto	l6226
 14983                           
 14984                           ;Main_B1.c: 417: status = Temp.ERROR == 1 ? 2 : 0;
 14985  11DC  0021               	movlb	1	; select bank1
 14986  11DD  18D7               	btfsc	_Temp^(0+128),1
 14987  11DE  29E3               	goto	l6224
 14988  11DF  0020               	movlb	0	; select bank0
 14989  11E0  01A1               	clrf	_getMain_All_Error_Status$3332
 14990  11E1  01A2               	clrf	_getMain_All_Error_Status$3332+1
 14991  11E2  29E8               	goto	l1428
 14992  11E3                     l6224:	
 14993  11E3  3002               	movlw	2
 14994  11E4  0020               	movlb	0	; select bank0
 14995  11E5  00A1               	movwf	_getMain_All_Error_Status$3332
 14996  11E6  3000               	movlw	0
 14997  11E7  00A2               	movwf	_getMain_All_Error_Status$3332+1
 14998  11E8                     l1428:	
 14999  11E8  0821               	movf	_getMain_All_Error_Status$3332,w
 15000  11E9  00A0               	movwf	??_getMain_All_Error_Status
 15001  11EA  0820               	movf	??_getMain_All_Error_Status,w
 15002  11EB  00A6               	movwf	getMain_All_Error_Status@status
 15003  11EC                     l6226:	
 15004                           
 15005                           ;Main_B1.c: 418: }
 15006                           ;Main_B1.c: 423: if (status == 0 && command != 3) {
 15007  11EC  08A6               	movf	getMain_All_Error_Status@status,f
 15008  11ED  1D03               	skipz
 15009  11EE  2A03               	goto	l1429
 15010  11EF  0825               	movf	getMain_All_Error_Status@command,w
 15011  11F0  3A03               	xorlw	3
 15012  11F1  1903               	skipnz
 15013  11F2  2A03               	goto	l1429
 15014                           
 15015                           ;Main_B1.c: 424: status = Load.ERROR == 1 ? 3 : 0;
 15016  11F3  0022               	movlb	2	; select bank2
 15017  11F4  1AC1               	btfsc	_Load^(0+256),5
 15018  11F5  29FA               	goto	l6234
 15019  11F6  0020               	movlb	0	; select bank0
 15020  11F7  01A3               	clrf	_getMain_All_Error_Status$3333
 15021  11F8  01A4               	clrf	_getMain_All_Error_Status$3333+1
 15022  11F9  29FF               	goto	l1433
 15023  11FA                     l6234:	
 15024  11FA  3003               	movlw	3
 15025  11FB  0020               	movlb	0	; select bank0
 15026  11FC  00A3               	movwf	_getMain_All_Error_Status$3333
 15027  11FD  3000               	movlw	0
 15028  11FE  00A4               	movwf	_getMain_All_Error_Status$3333+1
 15029  11FF                     l1433:	
 15030  11FF  0823               	movf	_getMain_All_Error_Status$3333,w
 15031  1200  00A0               	movwf	??_getMain_All_Error_Status
 15032  1201  0820               	movf	??_getMain_All_Error_Status,w
 15033  1202  00A6               	movwf	getMain_All_Error_Status@status
 15034  1203                     l1429:	
 15035                           
 15036                           ;Main_B1.c: 425: }
 15037                           ;Main_B1.c: 441: return status;
 15038  1203  0826               	movf	getMain_All_Error_Status@status,w
 15039  1204  0008               	return
 15040  1205                     __end_of_getMain_All_Error_Status:	
 15041                           
 15042                           	psect	text91
 15043  1116                     __ptext91:	
 15044 ;; *************** function _getMain_LightsStatus *****************
 15045 ;; Defined at:
 15046 ;;		line 375 in file "../src/Main_B1.c"
 15047 ;; Parameters:    Size  Location     Type
 15048 ;;		None
 15049 ;; Auto vars:     Size  Location     Type
 15050 ;;  i               2    6[BANK0 ] int 
 15051 ;;  status          1    8[BANK0 ] unsigned char 
 15052 ;;  count           1    5[BANK0 ] unsigned char 
 15053 ;; Return value:  Size  Location     Type
 15054 ;;                  1    wreg      unsigned char 
 15055 ;; Registers used:
 15056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15057 ;; Tracked objects:
 15058 ;;		On entry : 0/0
 15059 ;;		On exit  : 0/0
 15060 ;;		Unchanged: 0/0
 15061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;Total ram usage:        5 bytes
 15067 ;; Hardware stack levels used:    1
 15068 ;; Hardware stack levels required when called:    7
 15069 ;; This function calls:
 15070 ;;		_getDimmerLights_Status
 15071 ;; This function is called by:
 15072 ;;		_DimmerLights_Main
 15073 ;;		_Flash_Memory_Main
 15074 ;;		_setMain_Exception
 15075 ;;		_Load_Main
 15076 ;; This function uses a non-reentrant model
 15077 ;;
 15078                           
 15079                           
 15080                           ;psect for function _getMain_LightsStatus
 15081  1116                     _getMain_LightsStatus:	
 15082                           
 15083                           ;Main_B1.c: 376: char status = 0, count = 0;
 15084                           
 15085                           ;incstack = 0
 15086                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15087  1116  0020               	movlb	0	; select bank0
 15088  1117  01A8               	clrf	getMain_LightsStatus@status
 15089  1118  01A5               	clrf	getMain_LightsStatus@count
 15090                           
 15091                           ;Main_B1.c: 379: count = 1;
 15092  1119  01A5               	clrf	getMain_LightsStatus@count
 15093  111A  0AA5               	incf	getMain_LightsStatus@count,f
 15094                           
 15095                           ;Main_B1.c: 390: for (int i = 0; i < count; i++) {
 15096  111B  01A6               	clrf	getMain_LightsStatus@i
 15097  111C  01A7               	clrf	getMain_LightsStatus@i+1
 15098  111D                     l6496:	
 15099  111D  0827               	movf	getMain_LightsStatus@i+1,w
 15100  111E  3A80               	xorlw	128
 15101  111F  00A4               	movwf	??_getMain_LightsStatus
 15102  1120  3080               	movlw	128
 15103  1121  0224               	subwf	??_getMain_LightsStatus,w
 15104  1122  1D03               	skipz
 15105  1123  2926               	goto	u5725
 15106  1124  0825               	movf	getMain_LightsStatus@count,w
 15107  1125  0226               	subwf	getMain_LightsStatus@i,w
 15108  1126                     u5725:	
 15109  1126  1803               	btfsc	3,0
 15110  1127  293E               	goto	l6498
 15111                           
 15112                           ;Main_B1.c: 391: if (status == 0) {
 15113  1128  0020               	movlb	0	; select bank0
 15114  1129  08A8               	movf	getMain_LightsStatus@status,f
 15115  112A  1D03               	skipz
 15116  112B  2939               	goto	l6494
 15117                           
 15118                           ;Main_B1.c: 396: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 15119  112C  0826               	movf	getMain_LightsStatus@i,w
 15120  112D  3E01               	addlw	1
 15121  112E  319C  24D2  3191   	fcall	_getDimmerLights_Status
 15122  1131  3A01               	xorlw	1
 15123  1132  3000               	movlw	0
 15124  1133  1903               	skipnz
 15125  1134  3001               	movlw	1
 15126  1135  0020               	movlb	0	; select bank0
 15127  1136  00A4               	movwf	??_getMain_LightsStatus
 15128  1137  0824               	movf	??_getMain_LightsStatus,w
 15129  1138  00A8               	movwf	getMain_LightsStatus@status
 15130  1139                     l6494:	
 15131  1139  3001               	movlw	1
 15132  113A  07A6               	addwf	getMain_LightsStatus@i,f
 15133  113B  3000               	movlw	0
 15134  113C  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15135  113D  291D               	goto	l6496
 15136  113E                     l6498:	
 15137                           
 15138                           ;Main_B1.c: 398: }
 15139                           ;Main_B1.c: 399: }
 15140                           ;Main_B1.c: 400: return status;
 15141  113E  0020               	movlb	0	; select bank0
 15142  113F  0828               	movf	getMain_LightsStatus@status,w
 15143  1140  0008               	return
 15144  1141                     __end_of_getMain_LightsStatus:	
 15145                           
 15146                           	psect	text92
 15147  1BBA                     __ptext92:	
 15148 ;; *************** function _getLoad_OK *****************
 15149 ;; Defined at:
 15150 ;;		line 219 in file "../src/OverLoad_B1.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;		None
 15153 ;; Auto vars:     Size  Location     Type
 15154 ;;  ok              1    0[BANK0 ] unsigned char 
 15155 ;; Return value:  Size  Location     Type
 15156 ;;                  1    wreg      unsigned char 
 15157 ;; Registers used:
 15158 ;;		wreg, status,2
 15159 ;; Tracked objects:
 15160 ;;		On entry : 0/0
 15161 ;;		On exit  : 0/0
 15162 ;;		Unchanged: 0/0
 15163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;Total ram usage:        1 bytes
 15169 ;; Hardware stack levels used:    1
 15170 ;; Hardware stack levels required when called:    5
 15171 ;; This function calls:
 15172 ;;		Nothing
 15173 ;; This function is called by:
 15174 ;;		_DimmerLights_Main
 15175 ;; This function uses a non-reentrant model
 15176 ;;
 15177                           
 15178                           
 15179                           ;psect for function _getLoad_OK
 15180  1BBA                     _getLoad_OK:	
 15181                           
 15182                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
 15183                           
 15184                           ;incstack = 0
 15185                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15186  1BBA  3000               	movlw	0
 15187  1BBB  0022               	movlb	2	; select bank2
 15188  1BBC  1BC1               	btfsc	_Load^(0+256),7
 15189  1BBD  3001               	movlw	1
 15190  1BBE  0020               	movlb	0	; select bank0
 15191  1BBF  00A0               	movwf	getLoad_OK@ok
 15192                           
 15193                           ;OverLoad_B1.c: 221: return ok;
 15194  1BC0  0820               	movf	getLoad_OK@ok,w
 15195  1BC1  0008               	return
 15196  1BC2                     __end_of_getLoad_OK:	
 15197                           
 15198                           	psect	text93
 15199  1C99                     __ptext93:	
 15200 ;; *************** function _DimmerLights_Initialization *****************
 15201 ;; Defined at:
 15202 ;;		line 329 in file "../src/Dimmer_B1.c"
 15203 ;; Parameters:    Size  Location     Type
 15204 ;;		None
 15205 ;; Auto vars:     Size  Location     Type
 15206 ;;		None
 15207 ;; Return value:  Size  Location     Type
 15208 ;;		None               void
 15209 ;; Registers used:
 15210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15211 ;; Tracked objects:
 15212 ;;		On entry : 0/0
 15213 ;;		On exit  : 0/0
 15214 ;;		Unchanged: 0/0
 15215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;Total ram usage:        1 bytes
 15221 ;; Hardware stack levels used:    1
 15222 ;; Hardware stack levels required when called:    7
 15223 ;; This function calls:
 15224 ;;		_Dimmer_Initialization
 15225 ;;		_setDimmerLights_Initialization
 15226 ;; This function is called by:
 15227 ;;		_main
 15228 ;; This function uses a non-reentrant model
 15229 ;;
 15230                           
 15231                           
 15232                           ;psect for function _DimmerLights_Initialization
 15233  1C99                     _DimmerLights_Initialization:	
 15234                           
 15235                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 15236                           
 15237                           ;incstack = 0
 15238                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15239  1C99  30C5               	movlw	_DimmerLights1& (0+255)
 15240  1C9A  0020               	movlb	0	; select bank0
 15241  1C9B  00A4               	movwf	??_DimmerLights_Initialization
 15242  1C9C  0824               	movf	??_DimmerLights_Initialization,w
 15243  1C9D  0021               	movlb	1	; select bank1
 15244  1C9E  00CE               	movwf	_DimmerLights11^(0+128)
 15245                           
 15246                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 15247  1C9F  3001               	movlw	1
 15248  1CA0  3190  209B  319C   	fcall	_setDimmerLights_Initialization
 15249                           
 15250                           ;Dimmer_B1.c: 346: Dimmer_Initialization();
 15251  1CA3  319B  2363         	fcall	_Dimmer_Initialization
 15252  1CA5  0008               	return
 15253  1CA6                     __end_of_DimmerLights_Initialization:	
 15254                           
 15255                           	psect	text94
 15256  109B                     __ptext94:	
 15257 ;; *************** function _setDimmerLights_Initialization *****************
 15258 ;; Defined at:
 15259 ;;		line 352 in file "../src/Dimmer_B1.c"
 15260 ;; Parameters:    Size  Location     Type
 15261 ;;  lights          1    wreg     unsigned char 
 15262 ;; Auto vars:     Size  Location     Type
 15263 ;;  lights          1    3[BANK0 ] unsigned char 
 15264 ;; Return value:  Size  Location     Type
 15265 ;;		None               void
 15266 ;; Registers used:
 15267 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15268 ;; Tracked objects:
 15269 ;;		On entry : 0/0
 15270 ;;		On exit  : 0/0
 15271 ;;		Unchanged: 0/0
 15272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;Total ram usage:        2 bytes
 15278 ;; Hardware stack levels used:    1
 15279 ;; Hardware stack levels required when called:    6
 15280 ;; This function calls:
 15281 ;;		_DimmerLightsPointSelect
 15282 ;; This function is called by:
 15283 ;;		_DimmerLights_Initialization
 15284 ;; This function uses a non-reentrant model
 15285 ;;
 15286                           
 15287                           
 15288                           ;psect for function _setDimmerLights_Initialization
 15289  109B                     _setDimmerLights_Initialization:	
 15290                           
 15291                           ;incstack = 0
 15292                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15293                           ;setDimmerLights_Initialization@lights stored from wreg
 15294  109B  0020               	movlb	0	; select bank0
 15295  109C  00A3               	movwf	setDimmerLights_Initialization@lights
 15296                           
 15297                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 15298  109D  0823               	movf	setDimmerLights_Initialization@lights,w
 15299  109E  319C  240F         	fcall	_DimmerLightsPointSelect
 15300                           
 15301                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(65*0.8));
 15302  10A0  3034               	movlw	52
 15303  10A1  0020               	movlb	0	; select bank0
 15304  10A2  00A2               	movwf	??_setDimmerLights_Initialization
 15305  10A3  086F               	movf	_DimmerLights,w
 15306  10A4  3E05               	addlw	5
 15307  10A5  0086               	movwf	6
 15308  10A6  3001               	movlw	1	; select bank2/3
 15309  10A7  0087               	movwf	7
 15310  10A8  0822               	movf	??_setDimmerLights_Initialization,w
 15311  10A9  0081               	movwf	1
 15312                           
 15313                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 15314  10AA  300C               	movlw	12
 15315  10AB  00A2               	movwf	??_setDimmerLights_Initialization
 15316  10AC  086F               	movf	_DimmerLights,w
 15317  10AD  3E06               	addlw	6
 15318  10AE  0086               	movwf	6
 15319  10AF  3001               	movlw	1	; select bank2/3
 15320  10B0  0087               	movwf	7
 15321  10B1  0822               	movf	??_setDimmerLights_Initialization,w
 15322  10B2  0081               	movwf	1
 15323                           
 15324                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15325  10B3  086F               	movf	_DimmerLights,w
 15326  10B4  3E05               	addlw	5
 15327  10B5  0086               	movwf	6
 15328  10B6  3001               	movlw	1	; select bank2/3
 15329  10B7  0087               	movwf	7
 15330  10B8  0801               	movf	1,w
 15331  10B9  00A2               	movwf	??_setDimmerLights_Initialization
 15332  10BA  086F               	movf	_DimmerLights,w
 15333  10BB  3E04               	addlw	4
 15334  10BC  0086               	movwf	6
 15335  10BD  3001               	movlw	1	; select bank2/3
 15336  10BE  0087               	movwf	7
 15337  10BF  0822               	movf	??_setDimmerLights_Initialization,w
 15338  10C0  0081               	movwf	1
 15339  10C1  0008               	return
 15340  10C2                     __end_of_setDimmerLights_Initialization:	
 15341                           
 15342                           	psect	text95
 15343  1B63                     __ptext95:	
 15344 ;; *************** function _Dimmer_Initialization *****************
 15345 ;; Defined at:
 15346 ;;		line 892 in file "../src/Dimmer_B1.c"
 15347 ;; Parameters:    Size  Location     Type
 15348 ;;		None
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;		None
 15351 ;; Return value:  Size  Location     Type
 15352 ;;		None               void
 15353 ;; Registers used:
 15354 ;;		None
 15355 ;; Tracked objects:
 15356 ;;		On entry : 0/0
 15357 ;;		On exit  : 0/0
 15358 ;;		Unchanged: 0/0
 15359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15364 ;;Total ram usage:        0 bytes
 15365 ;; Hardware stack levels used:    1
 15366 ;; Hardware stack levels required when called:    5
 15367 ;; This function calls:
 15368 ;;		Nothing
 15369 ;; This function is called by:
 15370 ;;		_DimmerLights_Initialization
 15371 ;; This function uses a non-reentrant model
 15372 ;;
 15373                           
 15374                           
 15375                           ;psect for function _Dimmer_Initialization
 15376  1B63                     _Dimmer_Initialization:	
 15377                           
 15378                           ;incstack = 0
 15379                           ; Regs used in _Dimmer_Initialization: []
 15380  1B63  0008               	return
 15381  1B64                     __end_of_Dimmer_Initialization:	
 15382                           
 15383                           	psect	text96
 15384  1B87                     __ptext96:	
 15385 ;; *************** function _DelayOff_Main *****************
 15386 ;; Defined at:
 15387 ;;		line 41 in file "../src/DelayOff_B1.c"
 15388 ;; Parameters:    Size  Location     Type
 15389 ;;		None
 15390 ;; Auto vars:     Size  Location     Type
 15391 ;;		None
 15392 ;; Return value:  Size  Location     Type
 15393 ;;		None               void
 15394 ;; Registers used:
 15395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15396 ;; Tracked objects:
 15397 ;;		On entry : 0/0
 15398 ;;		On exit  : 0/0
 15399 ;;		Unchanged: 0/0
 15400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;Total ram usage:        0 bytes
 15406 ;; Hardware stack levels used:    1
 15407 ;; Hardware stack levels required when called:   11
 15408 ;; This function calls:
 15409 ;;		_DlyOff_Main
 15410 ;; This function is called by:
 15411 ;;		_main
 15412 ;; This function uses a non-reentrant model
 15413 ;;
 15414                           
 15415                           
 15416                           ;psect for function _DelayOff_Main
 15417  1B87                     _DelayOff_Main:	
 15418                           
 15419                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15420                           
 15421                           ;incstack = 0
 15422                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15423  1B87  3001               	movlw	1
 15424  1B88  3188  20B6         	fcall	_DlyOff_Main
 15425  1B8A  0008               	return
 15426  1B8B                     __end_of_DelayOff_Main:	
 15427                           
 15428                           	psect	text97
 15429  08B6                     __ptext97:	
 15430 ;; *************** function _DlyOff_Main *****************
 15431 ;; Defined at:
 15432 ;;		line 61 in file "../src/DelayOff_B1.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;  sw              1    wreg     unsigned char 
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;  sw              1   24[BANK0 ] unsigned char 
 15437 ;; Return value:  Size  Location     Type
 15438 ;;		None               void
 15439 ;; Registers used:
 15440 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15441 ;; Tracked objects:
 15442 ;;		On entry : 0/0
 15443 ;;		On exit  : 0/0
 15444 ;;		Unchanged: 0/0
 15445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;Total ram usage:        3 bytes
 15451 ;; Hardware stack levels used:    1
 15452 ;; Hardware stack levels required when called:   10
 15453 ;; This function calls:
 15454 ;;		_DelayOffPointSelect
 15455 ;;		_setBuz
 15456 ;;		_setDimmerLights_ErrorClose
 15457 ;; This function is called by:
 15458 ;;		_DelayOff_Main
 15459 ;; This function uses a non-reentrant model
 15460 ;;
 15461                           
 15462                           
 15463                           ;psect for function _DlyOff_Main
 15464  08B6                     _DlyOff_Main:	
 15465                           
 15466                           ;incstack = 0
 15467                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15468                           ;DlyOff_Main@sw stored from wreg
 15469  08B6  0020               	movlb	0	; select bank0
 15470  08B7  00B8               	movwf	DlyOff_Main@sw
 15471                           
 15472                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15473  08B8  0838               	movf	DlyOff_Main@sw,w
 15474  08B9  319C  2404  3188   	fcall	_DelayOffPointSelect
 15475                           
 15476                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15477  08BC  0878               	movf	_DelayOff,w
 15478  08BD  0086               	movwf	6
 15479  08BE  3001               	movlw	1	; select bank2/3
 15480  08BF  0087               	movwf	7
 15481  08C0  1C81               	btfss	1,1
 15482  08C1  0008               	return
 15483                           
 15484                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15485  08C2  0878               	movf	_DelayOff,w
 15486  08C3  3E02               	addlw	2
 15487  08C4  0086               	movwf	6
 15488  08C5  3001               	movlw	1	; select bank2/3
 15489  08C6  0087               	movwf	7
 15490  08C7  3001               	movlw	1
 15491  08C8  0781               	addwf	1,f
 15492  08C9  3141               	addfsr 1,1
 15493  08CA  1803               	skipnc
 15494  08CB  0A81               	incf	1,f
 15495                           
 15496                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15497  08CC  0878               	movf	_DelayOff,w
 15498  08CD  3E02               	addlw	2
 15499  08CE  0086               	movwf	6
 15500  08CF  3001               	movlw	1	; select bank2/3
 15501  08D0  0087               	movwf	7
 15502  08D1  3F40               	moviw [0]fsr1
 15503  08D2  0020               	movlb	0	; select bank0
 15504  08D3  00B6               	movwf	??_DlyOff_Main
 15505  08D4  3F41               	moviw [1]fsr1
 15506  08D5  00B7               	movwf	??_DlyOff_Main+1
 15507  08D6  3017               	movlw	23
 15508  08D7  0237               	subwf	??_DlyOff_Main+1,w
 15509  08D8  3070               	movlw	112
 15510  08D9  1903               	skipnz
 15511  08DA  0236               	subwf	??_DlyOff_Main,w
 15512  08DB  1C03               	skipc
 15513  08DC  0008               	return
 15514                           
 15515                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15516  08DD  0878               	movf	_DelayOff,w
 15517  08DE  3E02               	addlw	2
 15518  08DF  0086               	movwf	6
 15519  08E0  3001               	movlw	1	; select bank2/3
 15520  08E1  0087               	movwf	7
 15521  08E2  3000               	movlw	0
 15522  08E3  3FC0               	movwi [0]fsr1
 15523  08E4  3FC1               	movwi [1]fsr1
 15524                           
 15525                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15526  08E5  3001               	movlw	1
 15527  08E6  00B6               	movwf	??_DlyOff_Main
 15528  08E7  0878               	movf	_DelayOff,w
 15529  08E8  3E04               	addlw	4
 15530  08E9  0086               	movwf	6
 15531  08EA  3001               	movlw	1	; select bank2/3
 15532  08EB  0087               	movwf	7
 15533  08EC  0836               	movf	??_DlyOff_Main,w
 15534  08ED  0781               	addwf	1,f
 15535                           
 15536                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15537  08EE  0878               	movf	_DelayOff,w
 15538  08EF  3E04               	addlw	4
 15539  08F0  0086               	movwf	6
 15540  08F1  3001               	movlw	1	; select bank2/3
 15541  08F2  0087               	movwf	7
 15542  08F3  0A78               	incf	_DelayOff,w
 15543  08F4  0084               	movwf	4
 15544  08F5  3001               	movlw	1	; select bank2/3
 15545  08F6  0085               	movwf	5
 15546  08F7  0800               	movf	0,w
 15547  08F8  0201               	subwf	1,w
 15548  08F9  1C03               	skipc
 15549  08FA  0008               	return
 15550                           
 15551                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15552  08FB  0878               	movf	_DelayOff,w
 15553  08FC  3E04               	addlw	4
 15554  08FD  0086               	movwf	6
 15555  08FE  3001               	movlw	1	; select bank2/3
 15556  08FF  0087               	movwf	7
 15557  0900  0181               	clrf	1
 15558                           
 15559                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15560  0901  0878               	movf	_DelayOff,w
 15561  0902  0086               	movwf	6
 15562  0903  3001               	movlw	1	; select bank2/3
 15563  0904  0087               	movwf	7
 15564  0905  1081               	bcf	1,1
 15565                           
 15566                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15567  0906  3064               	movlw	100
 15568  0907  00A9               	movwf	setBuz@time
 15569  0908  3000               	movlw	0
 15570  0909  00AA               	movwf	setBuz@time+1
 15571  090A  3001               	movlw	1
 15572  090B  3196  2694  3188   	fcall	_setBuz
 15573                           
 15574                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15575  090E  0020               	movlb	0	; select bank0
 15576  090F  0838               	movf	DlyOff_Main@sw,w
 15577  0910  3196  263C         	fcall	_setDimmerLights_ErrorClose
 15578  0912  0008               	return
 15579  0913                     __end_of_DlyOff_Main:	
 15580                           
 15581                           	psect	text98
 15582  163C                     __ptext98:	
 15583 ;; *************** function _setDimmerLights_ErrorClose *****************
 15584 ;; Defined at:
 15585 ;;		line 562 in file "../src/Dimmer_B1.c"
 15586 ;; Parameters:    Size  Location     Type
 15587 ;;  lights          1    wreg     unsigned char 
 15588 ;; Auto vars:     Size  Location     Type
 15589 ;;  lights          1   19[BANK0 ] unsigned char 
 15590 ;;  i               2   20[BANK0 ] int 
 15591 ;;  count           1   18[BANK0 ] unsigned char 
 15592 ;; Return value:  Size  Location     Type
 15593 ;;		None               void
 15594 ;; Registers used:
 15595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15596 ;; Tracked objects:
 15597 ;;		On entry : 0/0
 15598 ;;		On exit  : 0/0
 15599 ;;		Unchanged: 0/0
 15600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15605 ;;Total ram usage:        5 bytes
 15606 ;; Hardware stack levels used:    1
 15607 ;; Hardware stack levels required when called:    9
 15608 ;; This function calls:
 15609 ;;		_DimmerLightsPointSelect
 15610 ;;		_getDimmerLights_Status
 15611 ;;		_setDimmerLights_SwOff
 15612 ;; This function is called by:
 15613 ;;		_DlyOff_Main
 15614 ;;		_setMain_Exception
 15615 ;;		_setControl_Lights_Table
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           
 15620                           ;psect for function _setDimmerLights_ErrorClose
 15621  163C                     _setDimmerLights_ErrorClose:	
 15622                           
 15623                           ;incstack = 0
 15624                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15625                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15626  163C  0020               	movlb	0	; select bank0
 15627  163D  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15628                           
 15629                           ;Dimmer_B1.c: 563: if (lights == 255) {
 15630  163E  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15631  163F  3AFF               	xorlw	255
 15632  1640  1D03               	skipz
 15633  1641  2E77               	goto	l6124
 15634                           
 15635                           ;Dimmer_B1.c: 565: char count = 1;
 15636  1642  01B2               	clrf	setDimmerLights_ErrorClose@count
 15637  1643  0AB2               	incf	setDimmerLights_ErrorClose@count,f
 15638                           
 15639                           ;Dimmer_B1.c: 573: for (int i = 0; i < count; i++) {
 15640  1644  01B4               	clrf	setDimmerLights_ErrorClose@i
 15641  1645  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15642  1646                     l6122:	
 15643  1646  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15644  1647  3A80               	xorlw	128
 15645  1648  00B1               	movwf	??_setDimmerLights_ErrorClose
 15646  1649  3080               	movlw	128
 15647  164A  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15648  164B  1D03               	skipz
 15649  164C  2E4F               	goto	u5175
 15650  164D  0832               	movf	setDimmerLights_ErrorClose@count,w
 15651  164E  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15652  164F                     u5175:	
 15653  164F  1803               	btfsc	3,0
 15654  1650  0008               	return
 15655                           
 15656                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(i + 1);
 15657  1651  0020               	movlb	0	; select bank0
 15658  1652  0834               	movf	setDimmerLights_ErrorClose@i,w
 15659  1653  3E01               	addlw	1
 15660  1654  319C  240F  3196   	fcall	_DimmerLightsPointSelect
 15661                           
 15662                           ;Dimmer_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 15663  1657  0020               	movlb	0	; select bank0
 15664  1658  0834               	movf	setDimmerLights_ErrorClose@i,w
 15665  1659  3E01               	addlw	1
 15666  165A  319C  24D2  3196   	fcall	_getDimmerLights_Status
 15667  165D  3A01               	xorlw	1
 15668  165E  1D03               	skipz
 15669  165F  2E71               	goto	l6120
 15670                           
 15671                           ;Dimmer_B1.c: 576: DimmerLights->SwFlag = 1;
 15672  1660  0020               	movlb	0	; select bank0
 15673  1661  086F               	movf	_DimmerLights,w
 15674  1662  3E09               	addlw	9
 15675  1663  0086               	movwf	6
 15676  1664  3001               	movlw	1	; select bank2/3
 15677  1665  0087               	movwf	7
 15678  1666  1701               	bsf	1,6
 15679                           
 15680                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 15681  1667  086F               	movf	_DimmerLights,w
 15682  1668  0086               	movwf	6
 15683  1669  3001               	movlw	1	; select bank2/3
 15684  166A  0087               	movwf	7
 15685  166B  1281               	bcf	1,5
 15686                           
 15687                           ;Dimmer_B1.c: 578: setDimmerLights_SwOff(i + 1);
 15688  166C  0834               	movf	setDimmerLights_ErrorClose@i,w
 15689  166D  3E01               	addlw	1
 15690  166E  3194  24B8  3196   	fcall	_setDimmerLights_SwOff
 15691  1671                     l6120:	
 15692  1671  3001               	movlw	1
 15693  1672  0020               	movlb	0	; select bank0
 15694  1673  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15695  1674  3000               	movlw	0
 15696  1675  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15697  1676  2E46               	goto	l6122
 15698  1677                     l6124:	
 15699                           ;Dimmer_B1.c: 579: }
 15700                           ;Dimmer_B1.c: 580: }
 15701                           ;Dimmer_B1.c: 581: } else {
 15702                           
 15703                           
 15704                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 15705  1677  0020               	movlb	0	; select bank0
 15706  1678  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15707  1679  319C  240F  3196   	fcall	_DimmerLightsPointSelect
 15708                           
 15709                           ;Dimmer_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 15710  167C  0020               	movlb	0	; select bank0
 15711  167D  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15712  167E  319C  24D2  3196   	fcall	_getDimmerLights_Status
 15713  1681  3A01               	xorlw	1
 15714  1682  1D03               	skipz
 15715  1683  0008               	return
 15716                           
 15717                           ;Dimmer_B1.c: 584: DimmerLights->SwFlag = 1;
 15718  1684  0020               	movlb	0	; select bank0
 15719  1685  086F               	movf	_DimmerLights,w
 15720  1686  3E09               	addlw	9
 15721  1687  0086               	movwf	6
 15722  1688  3001               	movlw	1	; select bank2/3
 15723  1689  0087               	movwf	7
 15724  168A  1701               	bsf	1,6
 15725                           
 15726                           ;Dimmer_B1.c: 585: DimmerLights->Status = 0;
 15727  168B  086F               	movf	_DimmerLights,w
 15728  168C  0086               	movwf	6
 15729  168D  3001               	movlw	1	; select bank2/3
 15730  168E  0087               	movwf	7
 15731  168F  1281               	bcf	1,5
 15732                           
 15733                           ;Dimmer_B1.c: 586: setDimmerLights_SwOff(lights);
 15734  1690  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15735  1691  3194  24B8         	fcall	_setDimmerLights_SwOff
 15736  1693  0008               	return
 15737  1694                     __end_of_setDimmerLights_ErrorClose:	
 15738                           
 15739                           	psect	text99
 15740  14B8                     __ptext99:	
 15741 ;; *************** function _setDimmerLights_SwOff *****************
 15742 ;; Defined at:
 15743 ;;		line 524 in file "../src/Dimmer_B1.c"
 15744 ;; Parameters:    Size  Location     Type
 15745 ;;  sw              1    wreg     unsigned char 
 15746 ;; Auto vars:     Size  Location     Type
 15747 ;;  sw              1   16[BANK0 ] unsigned char 
 15748 ;;  command         1   15[BANK0 ] unsigned char 
 15749 ;; Return value:  Size  Location     Type
 15750 ;;		None               void
 15751 ;; Registers used:
 15752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15753 ;; Tracked objects:
 15754 ;;		On entry : 0/0
 15755 ;;		On exit  : 0/0
 15756 ;;		Unchanged: 0/0
 15757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;Total ram usage:        2 bytes
 15763 ;; Hardware stack levels used:    1
 15764 ;; Hardware stack levels required when called:    8
 15765 ;; This function calls:
 15766 ;;		_DimmerLightsPointSelect
 15767 ;;		_getDelayOff_GO
 15768 ;;		_setDelayOff_GO
 15769 ;;		_setDimmerLights_Trigger
 15770 ;;		_setDimmerLights_TriggerAdj
 15771 ;; This function is called by:
 15772 ;;		_setDimmerLights_ErrorClose
 15773 ;;		_setRFSW_Control
 15774 ;;		_setSw_Main
 15775 ;; This function uses a non-reentrant model
 15776 ;;
 15777                           
 15778                           
 15779                           ;psect for function _setDimmerLights_SwOff
 15780  14B8                     _setDimmerLights_SwOff:	
 15781                           
 15782                           ;incstack = 0
 15783                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15784                           ;setDimmerLights_SwOff@sw stored from wreg
 15785  14B8  0020               	movlb	0	; select bank0
 15786  14B9  00B0               	movwf	setDimmerLights_SwOff@sw
 15787                           
 15788                           ;Dimmer_B1.c: 525: DimmerLightsPointSelect(sw);
 15789  14BA  0830               	movf	setDimmerLights_SwOff@sw,w
 15790  14BB  319C  240F  3194   	fcall	_DimmerLightsPointSelect
 15791                           
 15792                           ;Dimmer_B1.c: 526: char command = DimmerLights->Status == 1 ? 1 : 0;
 15793  14BE  0020               	movlb	0	; select bank0
 15794  14BF  086F               	movf	_DimmerLights,w
 15795  14C0  0086               	movwf	6
 15796  14C1  3001               	movlw	1	; select bank2/3
 15797  14C2  0087               	movwf	7
 15798  14C3  3000               	movlw	0
 15799  14C4  1A81               	btfsc	1,5
 15800  14C5  3001               	movlw	1
 15801  14C6  00AF               	movwf	setDimmerLights_SwOff@command
 15802                           
 15803                           ;Dimmer_B1.c: 527: if (DimmerLights->SwFlag == 1) {
 15804  14C7  086F               	movf	_DimmerLights,w
 15805  14C8  3E09               	addlw	9
 15806  14C9  0086               	movwf	6
 15807  14CA  3001               	movlw	1	; select bank2/3
 15808  14CB  0087               	movwf	7
 15809  14CC  1F01               	btfss	1,6
 15810  14CD  0008               	return
 15811                           
 15812                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 0;
 15813  14CE  086F               	movf	_DimmerLights,w
 15814  14CF  3E09               	addlw	9
 15815  14D0  0086               	movwf	6
 15816  14D1  3001               	movlw	1	; select bank2/3
 15817  14D2  0087               	movwf	7
 15818  14D3  1301               	bcf	1,6
 15819                           
 15820                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 1) {
 15821  14D4  086F               	movf	_DimmerLights,w
 15822  14D5  0086               	movwf	6
 15823  14D6  3001               	movlw	1	; select bank2/3
 15824  14D7  0087               	movwf	7
 15825  14D8  1E81               	btfss	1,5
 15826  14D9  2CEC               	goto	l5980
 15827                           
 15828                           ;Dimmer_B1.c: 530: if (DimmerLights->SwAdj == 1) {
 15829  14DA  086F               	movf	_DimmerLights,w
 15830  14DB  3E09               	addlw	9
 15831  14DC  0086               	movwf	6
 15832  14DD  3001               	movlw	1	; select bank2/3
 15833  14DE  0087               	movwf	7
 15834  14DF  1F81               	btfss	1,7
 15835  14E0  0008               	return
 15836                           
 15837                           ;Dimmer_B1.c: 531: DimmerLights->SwAdj = 0;
 15838  14E1  086F               	movf	_DimmerLights,w
 15839  14E2  3E09               	addlw	9
 15840  14E3  0086               	movwf	6
 15841  14E4  3001               	movlw	1	; select bank2/3
 15842  14E5  0087               	movwf	7
 15843  14E6  1381               	bcf	1,7
 15844                           
 15845                           ;Dimmer_B1.c: 532: setDimmerLights_TriggerAdj(sw, 0);
 15846  14E7  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15847  14E8  0830               	movf	setDimmerLights_SwOff@sw,w
 15848  14E9  319E  26D4         	fcall	_setDimmerLights_TriggerAdj
 15849                           
 15850                           ;Dimmer_B1.c: 533: }
 15851                           ;Dimmer_B1.c: 534: } else {
 15852  14EB  0008               	return
 15853  14EC                     l5980:	
 15854                           
 15855                           ;Dimmer_B1.c: 535: setDimmerLights_Trigger(sw, 0);
 15856  14EC  0020               	movlb	0	; select bank0
 15857  14ED  01A2               	clrf	setDimmerLights_Trigger@command
 15858  14EE  0830               	movf	setDimmerLights_SwOff@sw,w
 15859  14EF  319E  2697  3194   	fcall	_setDimmerLights_Trigger
 15860                           
 15861                           ;Dimmer_B1.c: 537: if (getDelayOff_GO(sw) == 1) {
 15862  14F2  0020               	movlb	0	; select bank0
 15863  14F3  0830               	movf	setDimmerLights_SwOff@sw,w
 15864  14F4  319C  24E2  3194   	fcall	_getDelayOff_GO
 15865  14F7  3A01               	xorlw	1
 15866  14F8  1D03               	skipz
 15867  14F9  0008               	return
 15868                           
 15869                           ;Dimmer_B1.c: 538: setDelayOff_GO(sw, 0, 0);
 15870  14FA  0020               	movlb	0	; select bank0
 15871  14FB  01AA               	clrf	setDelayOff_GO@command
 15872  14FC  01AB               	clrf	setDelayOff_GO@value
 15873  14FD  0830               	movf	setDimmerLights_SwOff@sw,w
 15874  14FE  3188  2059         	fcall	_setDelayOff_GO
 15875  1500  0008               	return
 15876  1501                     __end_of_setDimmerLights_SwOff:	
 15877                           
 15878                           	psect	text100
 15879  1ED4                     __ptext100:	
 15880 ;; *************** function _setDimmerLights_TriggerAdj *****************
 15881 ;; Defined at:
 15882 ;;		line 773 in file "../src/Dimmer_B1.c"
 15883 ;; Parameters:    Size  Location     Type
 15884 ;;  lights          1    wreg     unsigned char 
 15885 ;;  command         1    2[BANK0 ] unsigned char 
 15886 ;; Auto vars:     Size  Location     Type
 15887 ;;  lights          1    4[BANK0 ] unsigned char 
 15888 ;; Return value:  Size  Location     Type
 15889 ;;		None               void
 15890 ;; Registers used:
 15891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15897 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15900 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15901 ;;Total ram usage:        3 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:    6
 15904 ;; This function calls:
 15905 ;;		_DimmerLightsPointSelect
 15906 ;; This function is called by:
 15907 ;;		_setDimmerLights_SwOff
 15908 ;;		_setDimmerLights_AdjControl
 15909 ;; This function uses a non-reentrant model
 15910 ;;
 15911                           
 15912                           
 15913                           ;psect for function _setDimmerLights_TriggerAdj
 15914  1ED4                     _setDimmerLights_TriggerAdj:	
 15915                           
 15916                           ;incstack = 0
 15917                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15918                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 15919  1ED4  0020               	movlb	0	; select bank0
 15920  1ED5  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 15921                           
 15922                           ;Dimmer_B1.c: 774: DimmerLightsPointSelect(lights);
 15923  1ED6  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 15924  1ED7  319C  240F         	fcall	_DimmerLightsPointSelect
 15925                           
 15926                           ;Dimmer_B1.c: 775: DimmerLights->TriggerAdj = 1;
 15927  1ED9  0020               	movlb	0	; select bank0
 15928  1EDA  086F               	movf	_DimmerLights,w
 15929  1EDB  3E08               	addlw	8
 15930  1EDC  0086               	movwf	6
 15931  1EDD  3001               	movlw	1	; select bank2/3
 15932  1EDE  0087               	movwf	7
 15933  1EDF  1601               	bsf	1,4
 15934                           
 15935                           ;Dimmer_B1.c: 776: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 15936  1EE0  0822               	movf	setDimmerLights_TriggerAdj@command,w
 15937  1EE1  3A01               	xorlw	1
 15938  1EE2  3000               	movlw	0
 15939  1EE3  1903               	skipnz
 15940  1EE4  3001               	movlw	1
 15941  1EE5  00A3               	movwf	??_setDimmerLights_TriggerAdj
 15942  1EE6  086F               	movf	_DimmerLights,w
 15943  1EE7  3E08               	addlw	8
 15944  1EE8  0086               	movwf	6
 15945  1EE9  3001               	movlw	1	; select bank2/3
 15946  1EEA  0087               	movwf	7
 15947  1EEB  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15948  1EEC  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15949  1EED  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 15950  1EEE  0801               	movf	1,w
 15951  1EEF  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15952  1EF0  39F7               	andlw	-9
 15953  1EF1  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 15954  1EF2  0081               	movwf	1
 15955  1EF3  0008               	return
 15956  1EF4                     __end_of_setDimmerLights_TriggerAdj:	
 15957                           
 15958                           	psect	text101
 15959  1E97                     __ptext101:	
 15960 ;; *************** function _setDimmerLights_Trigger *****************
 15961 ;; Defined at:
 15962 ;;		line 767 in file "../src/Dimmer_B1.c"
 15963 ;; Parameters:    Size  Location     Type
 15964 ;;  lights          1    wreg     unsigned char 
 15965 ;;  command         1    2[BANK0 ] unsigned char 
 15966 ;; Auto vars:     Size  Location     Type
 15967 ;;  lights          1    4[BANK0 ] unsigned char 
 15968 ;; Return value:  Size  Location     Type
 15969 ;;		None               void
 15970 ;; Registers used:
 15971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15972 ;; Tracked objects:
 15973 ;;		On entry : 0/0
 15974 ;;		On exit  : 0/0
 15975 ;;		Unchanged: 0/0
 15976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15977 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15980 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15981 ;;Total ram usage:        3 bytes
 15982 ;; Hardware stack levels used:    1
 15983 ;; Hardware stack levels required when called:    6
 15984 ;; This function calls:
 15985 ;;		_DimmerLightsPointSelect
 15986 ;; This function is called by:
 15987 ;;		_setDimmerLights_SwOn
 15988 ;;		_setDimmerLights_SwOff
 15989 ;; This function uses a non-reentrant model
 15990 ;;
 15991                           
 15992                           
 15993                           ;psect for function _setDimmerLights_Trigger
 15994  1E97                     _setDimmerLights_Trigger:	
 15995                           
 15996                           ;incstack = 0
 15997                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15998                           ;setDimmerLights_Trigger@lights stored from wreg
 15999  1E97  0020               	movlb	0	; select bank0
 16000  1E98  00A4               	movwf	setDimmerLights_Trigger@lights
 16001                           
 16002                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 16003  1E99  0824               	movf	setDimmerLights_Trigger@lights,w
 16004  1E9A  319C  240F         	fcall	_DimmerLightsPointSelect
 16005                           
 16006                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 16007  1E9C  0020               	movlb	0	; select bank0
 16008  1E9D  086F               	movf	_DimmerLights,w
 16009  1E9E  3E08               	addlw	8
 16010  1E9F  0086               	movwf	6
 16011  1EA0  3001               	movlw	1	; select bank2/3
 16012  1EA1  0087               	movwf	7
 16013  1EA2  1501               	bsf	1,2
 16014                           
 16015                           ;Dimmer_B1.c: 770: DimmerLights->Switch = command == 1 ? 1 : 0;
 16016  1EA3  0822               	movf	setDimmerLights_Trigger@command,w
 16017  1EA4  3A01               	xorlw	1
 16018  1EA5  3000               	movlw	0
 16019  1EA6  1903               	skipnz
 16020  1EA7  3001               	movlw	1
 16021  1EA8  00A3               	movwf	??_setDimmerLights_Trigger
 16022  1EA9  086F               	movf	_DimmerLights,w
 16023  1EAA  3E08               	addlw	8
 16024  1EAB  0086               	movwf	6
 16025  1EAC  3001               	movlw	1	; select bank2/3
 16026  1EAD  0087               	movwf	7
 16027  1EAE  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16028  1EAF  0801               	movf	1,w
 16029  1EB0  0623               	xorwf	??_setDimmerLights_Trigger,w
 16030  1EB1  39FD               	andlw	-3
 16031  1EB2  0623               	xorwf	??_setDimmerLights_Trigger,w
 16032  1EB3  0081               	movwf	1
 16033  1EB4  0008               	return
 16034  1EB5                     __end_of_setDimmerLights_Trigger:	
 16035                           
 16036                           	psect	text102
 16037  0859                     __ptext102:	
 16038 ;; *************** function _setDelayOff_GO *****************
 16039 ;; Defined at:
 16040 ;;		line 83 in file "../src/DelayOff_B1.c"
 16041 ;; Parameters:    Size  Location     Type
 16042 ;;  sw              1    wreg     unsigned char 
 16043 ;;  command         1   10[BANK0 ] unsigned char 
 16044 ;;  value           1   11[BANK0 ] unsigned char 
 16045 ;; Auto vars:     Size  Location     Type
 16046 ;;  sw              1   14[BANK0 ] unsigned char 
 16047 ;; Return value:  Size  Location     Type
 16048 ;;		None               void
 16049 ;; Registers used:
 16050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16051 ;; Tracked objects:
 16052 ;;		On entry : 0/0
 16053 ;;		On exit  : 0/0
 16054 ;;		Unchanged: 0/0
 16055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16056 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16057 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16058 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16059 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16060 ;;Total ram usage:        5 bytes
 16061 ;; Hardware stack levels used:    1
 16062 ;; Hardware stack levels required when called:    7
 16063 ;; This function calls:
 16064 ;;		_DelayOffPointSelect
 16065 ;;		_DelayTimejudge
 16066 ;; This function is called by:
 16067 ;;		_setDimmerLights_SwOff
 16068 ;;		_setRFSW_Control
 16069 ;; This function uses a non-reentrant model
 16070 ;;
 16071                           
 16072                           
 16073                           ;psect for function _setDelayOff_GO
 16074  0859                     _setDelayOff_GO:	
 16075                           
 16076                           ;incstack = 0
 16077                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16078                           ;setDelayOff_GO@sw stored from wreg
 16079  0859  0020               	movlb	0	; select bank0
 16080  085A  00AE               	movwf	setDelayOff_GO@sw
 16081                           
 16082                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16083  085B  082E               	movf	setDelayOff_GO@sw,w
 16084  085C  319C  2404  3188   	fcall	_DelayOffPointSelect
 16085                           
 16086                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16087  085F  0020               	movlb	0	; select bank0
 16088  0860  082A               	movf	setDelayOff_GO@command,w
 16089  0861  3A01               	xorlw	1
 16090  0862  3000               	movlw	0
 16091  0863  1903               	skipnz
 16092  0864  3001               	movlw	1
 16093  0865  00AC               	movwf	??_setDelayOff_GO
 16094  0866  0878               	movf	_DelayOff,w
 16095  0867  0086               	movwf	6
 16096  0868  3001               	movlw	1	; select bank2/3
 16097  0869  0087               	movwf	7
 16098  086A  0DAC               	rlf	??_setDelayOff_GO,f
 16099  086B  0801               	movf	1,w
 16100  086C  062C               	xorwf	??_setDelayOff_GO,w
 16101  086D  39FD               	andlw	-3
 16102  086E  062C               	xorwf	??_setDelayOff_GO,w
 16103  086F  0081               	movwf	1
 16104                           
 16105                           ;DelayOff_B1.c: 89: if (command == 1) {
 16106  0870  082A               	movf	setDelayOff_GO@command,w
 16107  0871  3A01               	xorlw	1
 16108  0872  1D03               	skipz
 16109  0873  289E               	goto	l5900
 16110                           
 16111                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16112  0874  082B               	movf	setDelayOff_GO@value,w
 16113  0875  3190  20EC  3188   	fcall	_DelayTimejudge
 16114  0878  0020               	movlb	0	; select bank0
 16115  0879  00AC               	movwf	??_setDelayOff_GO
 16116  087A  0A78               	incf	_DelayOff,w
 16117  087B  0086               	movwf	6
 16118  087C  3001               	movlw	1	; select bank2/3
 16119  087D  0087               	movwf	7
 16120  087E  082C               	movf	??_setDelayOff_GO,w
 16121  087F  0081               	movwf	1
 16122                           
 16123                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16124  0880  300F               	movlw	15
 16125  0881  052B               	andwf	setDelayOff_GO@value,w
 16126  0882  00AC               	movwf	??_setDelayOff_GO
 16127  0883  082C               	movf	??_setDelayOff_GO,w
 16128  0884  3A05               	xorlw	5
 16129  0885  1903               	skipnz
 16130  0886  288B               	goto	l5894
 16131  0887  082B               	movf	setDelayOff_GO@value,w
 16132  0888  390F               	andlw	15
 16133  0889  1D03               	btfss	3,2
 16134  088A  2891               	goto	l5898
 16135  088B                     l5894:	
 16136  088B  3026               	movlw	38
 16137  088C  022B               	subwf	setDelayOff_GO@value,w
 16138  088D  1803               	skipnc
 16139  088E  2891               	goto	l5898
 16140                           
 16141                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 16142  088F  082B               	movf	setDelayOff_GO@value,w
 16143  0890  2892               	goto	L8
 16144  0891                     l5898:	
 16145                           ;DelayOff_B1.c: 93: } else {
 16146                           
 16147                           
 16148                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16149  0891  3005               	movlw	5
 16150  0892                     L8:	
 16151  0892  00AC               	movwf	??_setDelayOff_GO
 16152  0893  082E               	movf	setDelayOff_GO@sw,w
 16153  0894  3E1A               	addlw	26
 16154  0895  076E               	addwf	_product,w
 16155  0896  00AD               	movwf	??_setDelayOff_GO+1
 16156  0897  082D               	movf	??_setDelayOff_GO+1,w
 16157  0898  0086               	movwf	6
 16158  0899  3002               	movlw	2	; select bank4/5
 16159  089A  0087               	movwf	7
 16160  089B  082C               	movf	??_setDelayOff_GO,w
 16161  089C  0081               	movwf	1
 16162                           
 16163                           ;DelayOff_B1.c: 95: }
 16164                           ;DelayOff_B1.c: 96: } else {
 16165  089D  28A7               	goto	l5902
 16166  089E                     l5900:	
 16167                           
 16168                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16169  089E  082E               	movf	setDelayOff_GO@sw,w
 16170  089F  3E1A               	addlw	26
 16171  08A0  076E               	addwf	_product,w
 16172  08A1  00AC               	movwf	??_setDelayOff_GO
 16173  08A2  082C               	movf	??_setDelayOff_GO,w
 16174  08A3  0086               	movwf	6
 16175  08A4  3002               	movlw	2	; select bank4/5
 16176  08A5  0087               	movwf	7
 16177  08A6  0181               	clrf	1
 16178  08A7                     l5902:	
 16179                           
 16180                           ;DelayOff_B1.c: 98: }
 16181                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16182  08A7  0878               	movf	_DelayOff,w
 16183  08A8  3E02               	addlw	2
 16184  08A9  0086               	movwf	6
 16185  08AA  3001               	movlw	1	; select bank2/3
 16186  08AB  0087               	movwf	7
 16187  08AC  3000               	movlw	0
 16188  08AD  3FC0               	movwi [0]fsr1
 16189  08AE  3FC1               	movwi [1]fsr1
 16190                           
 16191                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16192  08AF  0878               	movf	_DelayOff,w
 16193  08B0  3E04               	addlw	4
 16194  08B1  0086               	movwf	6
 16195  08B2  3001               	movlw	1	; select bank2/3
 16196  08B3  0087               	movwf	7
 16197  08B4  0181               	clrf	1
 16198  08B5  0008               	return
 16199  08B6                     __end_of_setDelayOff_GO:	
 16200                           
 16201                           	psect	text103
 16202  10EC                     __ptext103:	
 16203 ;; *************** function _DelayTimejudge *****************
 16204 ;; Defined at:
 16205 ;;		line 112 in file "../src/DelayOff_B1.c"
 16206 ;; Parameters:    Size  Location     Type
 16207 ;;  value           1    wreg     unsigned char 
 16208 ;; Auto vars:     Size  Location     Type
 16209 ;;  value           1    9[BANK0 ] unsigned char 
 16210 ;;  k               1    8[BANK0 ] unsigned char 
 16211 ;;  j               1    7[BANK0 ] unsigned char 
 16212 ;;  i               1    6[BANK0 ] unsigned char 
 16213 ;; Return value:  Size  Location     Type
 16214 ;;                  1    wreg      unsigned char 
 16215 ;; Registers used:
 16216 ;;		wreg, status,2, status,0, pclath, cstack
 16217 ;; Tracked objects:
 16218 ;;		On entry : 0/0
 16219 ;;		On exit  : 0/0
 16220 ;;		Unchanged: 0/0
 16221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16225 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;Total ram usage:        6 bytes
 16227 ;; Hardware stack levels used:    1
 16228 ;; Hardware stack levels required when called:    6
 16229 ;; This function calls:
 16230 ;;		___bmul
 16231 ;; This function is called by:
 16232 ;;		_setDelayOff_GO
 16233 ;; This function uses a non-reentrant model
 16234 ;;
 16235                           
 16236                           
 16237                           ;psect for function _DelayTimejudge
 16238  10EC                     _DelayTimejudge:	
 16239                           
 16240                           ;incstack = 0
 16241                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16242                           ;DelayTimejudge@value stored from wreg
 16243  10EC  0020               	movlb	0	; select bank0
 16244  10ED  00A9               	movwf	DelayTimejudge@value
 16245                           
 16246                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16247  10EE  3005               	movlw	5
 16248  10EF  00A4               	movwf	??_DelayTimejudge
 16249  10F0  0824               	movf	??_DelayTimejudge,w
 16250  10F1  00A6               	movwf	DelayTimejudge@i
 16251  10F2  01A7               	clrf	DelayTimejudge@j
 16252  10F3  01A8               	clrf	DelayTimejudge@k
 16253                           
 16254                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16255  10F4  3031               	movlw	49
 16256  10F5  0229               	subwf	DelayTimejudge@value,w
 16257  10F6  1803               	skipnc
 16258  10F7  2914               	goto	l5794
 16259                           
 16260                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16261  10F8  0829               	movf	DelayTimejudge@value,w
 16262  10F9  390F               	andlw	15
 16263  10FA  00A4               	movwf	??_DelayTimejudge
 16264  10FB  0824               	movf	??_DelayTimejudge,w
 16265  10FC  00A7               	movwf	DelayTimejudge@j
 16266                           
 16267                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16268  10FD  0829               	movf	DelayTimejudge@value,w
 16269  10FE  00A4               	movwf	??_DelayTimejudge
 16270  10FF  3004               	movlw	4
 16271  1100                     u4775:	
 16272  1100  36A4               	lsrf	??_DelayTimejudge,f
 16273  1101  0B89               	decfsz	9,f
 16274  1102  2900               	goto	u4775
 16275  1103  0824               	movf	??_DelayTimejudge,w
 16276  1104  390F               	andlw	15
 16277  1105  00A5               	movwf	??_DelayTimejudge+1
 16278  1106  0825               	movf	??_DelayTimejudge+1,w
 16279  1107  00A8               	movwf	DelayTimejudge@k
 16280                           
 16281                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16282  1108  300A               	movlw	10
 16283  1109  00A4               	movwf	??_DelayTimejudge
 16284  110A  0824               	movf	??_DelayTimejudge,w
 16285  110B  00A0               	movwf	___bmul@multiplicand
 16286  110C  0828               	movf	DelayTimejudge@k,w
 16287  110D  319D  2556         	fcall	___bmul
 16288  110F  0020               	movlb	0	; select bank0
 16289  1110  0727               	addwf	DelayTimejudge@j,w
 16290  1111  00A5               	movwf	??_DelayTimejudge+1
 16291  1112  0825               	movf	??_DelayTimejudge+1,w
 16292  1113  00A6               	movwf	DelayTimejudge@i
 16293  1114                     l5794:	
 16294                           
 16295                           ;DelayOff_B1.c: 118: }
 16296                           ;DelayOff_B1.c: 139: return i;
 16297  1114  0826               	movf	DelayTimejudge@i,w
 16298  1115  0008               	return
 16299  1116                     __end_of_DelayTimejudge:	
 16300                           
 16301                           	psect	text104
 16302  1D56                     __ptext104:	
 16303 ;; *************** function ___bmul *****************
 16304 ;; Defined at:
 16305 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;  multiplier      1    wreg     unsigned char 
 16308 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16309 ;; Auto vars:     Size  Location     Type
 16310 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16311 ;;  product         1    2[BANK0 ] unsigned char 
 16312 ;; Return value:  Size  Location     Type
 16313 ;;                  1    wreg      unsigned char 
 16314 ;; Registers used:
 16315 ;;		wreg, status,2, status,0
 16316 ;; Tracked objects:
 16317 ;;		On entry : 0/0
 16318 ;;		On exit  : 0/0
 16319 ;;		Unchanged: 0/0
 16320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16321 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;Total ram usage:        4 bytes
 16326 ;; Hardware stack levels used:    1
 16327 ;; Hardware stack levels required when called:    5
 16328 ;; This function calls:
 16329 ;;		Nothing
 16330 ;; This function is called by:
 16331 ;;		_DelayTimejudge
 16332 ;; This function uses a non-reentrant model
 16333 ;;
 16334                           
 16335                           
 16336                           ;psect for function ___bmul
 16337  1D56                     ___bmul:	
 16338                           
 16339                           ;incstack = 0
 16340                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16341                           ;___bmul@multiplier stored from wreg
 16342  1D56  0020               	movlb	0	; select bank0
 16343  1D57  00A3               	movwf	___bmul@multiplier
 16344  1D58  01A2               	clrf	___bmul@product
 16345  1D59                     l5536:	
 16346  1D59  1C23               	btfss	___bmul@multiplier,0
 16347  1D5A  2D5F               	goto	l5540
 16348  1D5B  0820               	movf	___bmul@multiplicand,w
 16349  1D5C  00A1               	movwf	??___bmul
 16350  1D5D  0821               	movf	??___bmul,w
 16351  1D5E  07A2               	addwf	___bmul@product,f
 16352  1D5F                     l5540:	
 16353  1D5F  1003               	clrc
 16354  1D60  0DA0               	rlf	___bmul@multiplicand,f
 16355  1D61  1003               	clrc
 16356  1D62  0CA3               	rrf	___bmul@multiplier,f
 16357  1D63  08A3               	movf	___bmul@multiplier,f
 16358  1D64  1D03               	skipz
 16359  1D65  2D59               	goto	l5536
 16360  1D66  0822               	movf	___bmul@product,w
 16361  1D67  0008               	return
 16362  1D68                     __end_of___bmul:	
 16363                           
 16364                           	psect	text105
 16365  1CE2                     __ptext105:	
 16366 ;; *************** function _getDelayOff_GO *****************
 16367 ;; Defined at:
 16368 ;;		line 105 in file "../src/DelayOff_B1.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;  sw              1    wreg     unsigned char 
 16371 ;; Auto vars:     Size  Location     Type
 16372 ;;  sw              1    2[BANK0 ] unsigned char 
 16373 ;;  go              1    3[BANK0 ] unsigned char 
 16374 ;; Return value:  Size  Location     Type
 16375 ;;                  1    wreg      unsigned char 
 16376 ;; Registers used:
 16377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16378 ;; Tracked objects:
 16379 ;;		On entry : 0/0
 16380 ;;		On exit  : 0/0
 16381 ;;		Unchanged: 0/0
 16382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;Total ram usage:        2 bytes
 16388 ;; Hardware stack levels used:    1
 16389 ;; Hardware stack levels required when called:    6
 16390 ;; This function calls:
 16391 ;;		_DelayOffPointSelect
 16392 ;; This function is called by:
 16393 ;;		_setDimmerLights_SwOff
 16394 ;;		_setRFSW_Control
 16395 ;; This function uses a non-reentrant model
 16396 ;;
 16397                           
 16398                           
 16399                           ;psect for function _getDelayOff_GO
 16400  1CE2                     _getDelayOff_GO:	
 16401                           
 16402                           ;incstack = 0
 16403                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16404                           ;getDelayOff_GO@sw stored from wreg
 16405  1CE2  0020               	movlb	0	; select bank0
 16406  1CE3  00A2               	movwf	getDelayOff_GO@sw
 16407                           
 16408                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16409  1CE4  0822               	movf	getDelayOff_GO@sw,w
 16410  1CE5  319C  2404         	fcall	_DelayOffPointSelect
 16411                           
 16412                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16413  1CE7  0878               	movf	_DelayOff,w
 16414  1CE8  0086               	movwf	6
 16415  1CE9  3001               	movlw	1	; select bank2/3
 16416  1CEA  0087               	movwf	7
 16417  1CEB  3000               	movlw	0
 16418  1CEC  1881               	btfsc	1,1
 16419  1CED  3001               	movlw	1
 16420  1CEE  0020               	movlb	0	; select bank0
 16421  1CEF  00A3               	movwf	getDelayOff_GO@go
 16422                           
 16423                           ;DelayOff_B1.c: 108: return go;
 16424  1CF0  0823               	movf	getDelayOff_GO@go,w
 16425  1CF1  0008               	return
 16426  1CF2                     __end_of_getDelayOff_GO:	
 16427                           
 16428                           	psect	text106
 16429  1CD2                     __ptext106:	
 16430 ;; *************** function _getDimmerLights_Status *****************
 16431 ;; Defined at:
 16432 ;;		line 445 in file "../src/Dimmer_B1.c"
 16433 ;; Parameters:    Size  Location     Type
 16434 ;;  lights          1    wreg     unsigned char 
 16435 ;; Auto vars:     Size  Location     Type
 16436 ;;  lights          1    2[BANK0 ] unsigned char 
 16437 ;;  status          1    3[BANK0 ] unsigned char 
 16438 ;; Return value:  Size  Location     Type
 16439 ;;                  1    wreg      unsigned char 
 16440 ;; Registers used:
 16441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16442 ;; Tracked objects:
 16443 ;;		On entry : 0/0
 16444 ;;		On exit  : 0/0
 16445 ;;		Unchanged: 0/0
 16446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16450 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16451 ;;Total ram usage:        2 bytes
 16452 ;; Hardware stack levels used:    1
 16453 ;; Hardware stack levels required when called:    6
 16454 ;; This function calls:
 16455 ;;		_DimmerLightsPointSelect
 16456 ;; This function is called by:
 16457 ;;		_setDimmerLights_ErrorClose
 16458 ;;		_getMain_LightsStatus
 16459 ;;		_setRFSW_Control
 16460 ;;		_setRFSW_AdjControl
 16461 ;; This function uses a non-reentrant model
 16462 ;;
 16463                           
 16464                           
 16465                           ;psect for function _getDimmerLights_Status
 16466  1CD2                     _getDimmerLights_Status:	
 16467                           
 16468                           ;incstack = 0
 16469                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16470                           ;getDimmerLights_Status@lights stored from wreg
 16471  1CD2  0020               	movlb	0	; select bank0
 16472  1CD3  00A2               	movwf	getDimmerLights_Status@lights
 16473                           
 16474                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 16475  1CD4  0822               	movf	getDimmerLights_Status@lights,w
 16476  1CD5  319C  240F         	fcall	_DimmerLightsPointSelect
 16477                           
 16478                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 16479  1CD7  0020               	movlb	0	; select bank0
 16480  1CD8  086F               	movf	_DimmerLights,w
 16481  1CD9  0086               	movwf	6
 16482  1CDA  3001               	movlw	1	; select bank2/3
 16483  1CDB  0087               	movwf	7
 16484  1CDC  3000               	movlw	0
 16485  1CDD  1A81               	btfsc	1,5
 16486  1CDE  3001               	movlw	1
 16487  1CDF  00A3               	movwf	getDimmerLights_Status@status
 16488                           
 16489                           ;Dimmer_B1.c: 448: return status;
 16490  1CE0  0823               	movf	getDimmerLights_Status@status,w
 16491  1CE1  0008               	return
 16492  1CE2                     __end_of_getDimmerLights_Status:	
 16493                           
 16494                           	psect	text107
 16495  1C0F                     __ptext107:	
 16496 ;; *************** function _DimmerLightsPointSelect *****************
 16497 ;; Defined at:
 16498 ;;		line 310 in file "../src/Dimmer_B1.c"
 16499 ;; Parameters:    Size  Location     Type
 16500 ;;  lights          1    wreg     unsigned char 
 16501 ;; Auto vars:     Size  Location     Type
 16502 ;;  lights          1    1[BANK0 ] unsigned char 
 16503 ;; Return value:  Size  Location     Type
 16504 ;;		None               void
 16505 ;; Registers used:
 16506 ;;		wreg
 16507 ;; Tracked objects:
 16508 ;;		On entry : 0/0
 16509 ;;		On exit  : 0/0
 16510 ;;		Unchanged: 0/0
 16511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16516 ;;Total ram usage:        2 bytes
 16517 ;; Hardware stack levels used:    1
 16518 ;; Hardware stack levels required when called:    5
 16519 ;; This function calls:
 16520 ;;		Nothing
 16521 ;; This function is called by:
 16522 ;;		_setDimmerLights_Initialization
 16523 ;;		_setDimmerLights_Main
 16524 ;;		_getDimmerLights_Status
 16525 ;;		_setDimmerLights_SwOn
 16526 ;;		_setDimmerLights_SwOff
 16527 ;;		_setDimmerLights_AdjControl
 16528 ;;		_setDimmerLights_ErrorClose
 16529 ;;		_setDimmerLights
 16530 ;;		_setDimmerLights_Adj
 16531 ;;		_setDimmerLights_AdjRF
 16532 ;;		_setDimmerLights_Trigger
 16533 ;;		_setDimmerLights_TriggerAdj
 16534 ;;		_setDimmerLights_Status
 16535 ;;		_setDimmerLights_GO
 16536 ;;		_setDimmerLights_MaxmumValue
 16537 ;; This function uses a non-reentrant model
 16538 ;;
 16539                           
 16540                           
 16541                           ;psect for function _DimmerLightsPointSelect
 16542  1C0F                     _DimmerLightsPointSelect:	
 16543                           
 16544                           ;incstack = 0
 16545                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16546                           ;DimmerLightsPointSelect@lights stored from wreg
 16547  1C0F  0020               	movlb	0	; select bank0
 16548  1C10  00A1               	movwf	DimmerLightsPointSelect@lights
 16549                           
 16550                           ;Dimmer_B1.c: 312: if (lights == 1) {
 16551  1C11  0821               	movf	DimmerLightsPointSelect@lights,w
 16552  1C12  3A01               	xorlw	1
 16553  1C13  1D03               	skipz
 16554  1C14  0008               	return
 16555                           
 16556                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 16557  1C15  30C5               	movlw	_DimmerLights1& (0+255)
 16558  1C16  00A0               	movwf	??_DimmerLightsPointSelect
 16559  1C17  0820               	movf	??_DimmerLightsPointSelect,w
 16560  1C18  00EF               	movwf	_DimmerLights
 16561  1C19  0008               	return
 16562  1C1A                     __end_of_DimmerLightsPointSelect:	
 16563                           
 16564                           	psect	text108
 16565  1694                     __ptext108:	
 16566 ;; *************** function _setBuz *****************
 16567 ;; Defined at:
 16568 ;;		line 22 in file "../src/Buzzer_B1.c"
 16569 ;; Parameters:    Size  Location     Type
 16570 ;;  count           1    wreg     unsigned char 
 16571 ;;  time            2    9[BANK0 ] int 
 16572 ;; Auto vars:     Size  Location     Type
 16573 ;;  count           1   12[BANK0 ] unsigned char 
 16574 ;; Return value:  Size  Location     Type
 16575 ;;		None               void
 16576 ;; Registers used:
 16577 ;;		wreg, status,2, status,0, pclath, cstack
 16578 ;; Tracked objects:
 16579 ;;		On entry : 0/0
 16580 ;;		On exit  : 0/0
 16581 ;;		Unchanged: 0/0
 16582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16583 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;Total ram usage:        4 bytes
 16588 ;; Hardware stack levels used:    1
 16589 ;; Hardware stack levels required when called:    6
 16590 ;; This function calls:
 16591 ;;		___awdiv
 16592 ;; This function is called by:
 16593 ;;		_DlyOff_Main
 16594 ;;		_setDimmerLights_Main
 16595 ;;		_setDimmerLights_SwOn
 16596 ;;		_my_MainTimer
 16597 ;;		_setMain_Exception
 16598 ;;		_setTemp_Main
 16599 ;;		_setLog_Code
 16600 ;;		_setControl_Lights_Table
 16601 ;;		_setRFSW_Control
 16602 ;;		_setSw_Main
 16603 ;; This function uses a non-reentrant model
 16604 ;;
 16605                           
 16606                           
 16607                           ;psect for function _setBuz
 16608  1694                     _setBuz:	
 16609                           
 16610                           ;incstack = 0
 16611                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16612                           ;setBuz@count stored from wreg
 16613  1694  0020               	movlb	0	; select bank0
 16614  1695  00AC               	movwf	setBuz@count
 16615                           
 16616                           ;Buzzer_B1.c: 23: time /= 10;
 16617  1696  300A               	movlw	10
 16618  1697  00A0               	movwf	___awdiv@divisor
 16619  1698  3000               	movlw	0
 16620  1699  00A1               	movwf	___awdiv@divisor+1
 16621  169A  082A               	movf	setBuz@time+1,w
 16622  169B  01A3               	clrf	___awdiv@dividend+1
 16623  169C  07A3               	addwf	___awdiv@dividend+1,f
 16624  169D  0829               	movf	setBuz@time,w
 16625  169E  01A2               	clrf	___awdiv@dividend
 16626  169F  07A2               	addwf	___awdiv@dividend,f
 16627  16A0  3195  25E8  3196   	fcall	___awdiv
 16628  16A3  0020               	movlb	0	; select bank0
 16629  16A4  0821               	movf	?___awdiv+1,w
 16630  16A5  01AA               	clrf	setBuz@time+1
 16631  16A6  07AA               	addwf	setBuz@time+1,f
 16632  16A7  0820               	movf	?___awdiv,w
 16633  16A8  01A9               	clrf	setBuz@time
 16634  16A9  07A9               	addwf	setBuz@time,f
 16635                           
 16636                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16637  16AA  0021               	movlb	1	; select bank1
 16638  16AB  1C2E               	btfss	_Buz1^(0+128),0
 16639  16AC  0008               	return
 16640                           
 16641                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16642  16AD  18AE               	btfsc	_Buz1^(0+128),1
 16643  16AE  2EC5               	goto	l84
 16644                           
 16645                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16646  16AF  14AE               	bsf	_Buz1^(0+128),1
 16647                           
 16648                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16649  16B0  01AF               	clrf	(_Buz1^(0+128)+1)
 16650  16B1  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16651                           
 16652                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16653  16B2  0020               	movlb	0	; select bank0
 16654  16B3  082C               	movf	setBuz@count,w
 16655  16B4  00AB               	movwf	??_setBuz
 16656  16B5  082B               	movf	??_setBuz,w
 16657  16B6  0021               	movlb	1	; select bank1
 16658  16B7  00B1               	movwf	(_Buz1^(0+128)+3)
 16659                           
 16660                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16661  16B8  0020               	movlb	0	; select bank0
 16662  16B9  082A               	movf	setBuz@time+1,w
 16663  16BA  0021               	movlb	1	; select bank1
 16664  16BB  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16665  16BC  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16666  16BD  0020               	movlb	0	; select bank0
 16667  16BE  0829               	movf	setBuz@time,w
 16668  16BF  0021               	movlb	1	; select bank1
 16669  16C0  01B4               	clrf	(_Buz1^(0+128)+6)
 16670  16C1  07B4               	addwf	(_Buz1^(0+128)+6),f
 16671                           
 16672                           ;Buzzer_B1.c: 30: RB3 = 1;
 16673  16C2  0020               	movlb	0	; select bank0
 16674  16C3  158D               	bsf	13,3	;volatile
 16675                           
 16676                           ;Buzzer_B1.c: 31: } else {
 16677  16C4  0008               	return
 16678  16C5                     l84:	
 16679                           
 16680                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16681  16C5  19AE               	btfsc	_Buz1^(0+128),3
 16682  16C6  2ED9               	goto	l86
 16683                           
 16684                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16685  16C7  15AE               	bsf	_Buz1^(0+128),3
 16686                           
 16687                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16688  16C8  0020               	movlb	0	; select bank0
 16689  16C9  082C               	movf	setBuz@count,w
 16690  16CA  00AB               	movwf	??_setBuz
 16691  16CB  082B               	movf	??_setBuz,w
 16692  16CC  0021               	movlb	1	; select bank1
 16693  16CD  00B2               	movwf	(_Buz1^(0+128)+4)
 16694                           
 16695                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16696  16CE  0020               	movlb	0	; select bank0
 16697  16CF  082A               	movf	setBuz@time+1,w
 16698  16D0  0021               	movlb	1	; select bank1
 16699  16D1  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16700  16D2  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16701  16D3  0020               	movlb	0	; select bank0
 16702  16D4  0829               	movf	setBuz@time,w
 16703  16D5  0021               	movlb	1	; select bank1
 16704  16D6  01B6               	clrf	(_Buz1^(0+128)+8)
 16705  16D7  07B6               	addwf	(_Buz1^(0+128)+8),f
 16706                           
 16707                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16708  16D8  0008               	return
 16709  16D9                     l86:	
 16710  16D9  1A2E               	btfsc	_Buz1^(0+128),4
 16711  16DA  0008               	return
 16712                           
 16713                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16714  16DB  162E               	bsf	_Buz1^(0+128),4
 16715                           
 16716                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16717  16DC  0020               	movlb	0	; select bank0
 16718  16DD  082C               	movf	setBuz@count,w
 16719  16DE  00AB               	movwf	??_setBuz
 16720  16DF  082B               	movf	??_setBuz,w
 16721  16E0  0021               	movlb	1	; select bank1
 16722  16E1  00B3               	movwf	(_Buz1^(0+128)+5)
 16723                           
 16724                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16725  16E2  0020               	movlb	0	; select bank0
 16726  16E3  082A               	movf	setBuz@time+1,w
 16727  16E4  0021               	movlb	1	; select bank1
 16728  16E5  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16729  16E6  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16730  16E7  0020               	movlb	0	; select bank0
 16731  16E8  0829               	movf	setBuz@time,w
 16732  16E9  0021               	movlb	1	; select bank1
 16733  16EA  01B8               	clrf	(_Buz1^(0+128)+10)
 16734  16EB  07B8               	addwf	(_Buz1^(0+128)+10),f
 16735  16EC  0008               	return
 16736  16ED                     __end_of_setBuz:	
 16737                           
 16738                           	psect	text109
 16739  15E8                     __ptext109:	
 16740 ;; *************** function ___awdiv *****************
 16741 ;; Defined at:
 16742 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16743 ;; Parameters:    Size  Location     Type
 16744 ;;  divisor         2    0[BANK0 ] int 
 16745 ;;  dividend        2    2[BANK0 ] int 
 16746 ;; Auto vars:     Size  Location     Type
 16747 ;;  quotient        2    7[BANK0 ] int 
 16748 ;;  sign            1    6[BANK0 ] unsigned char 
 16749 ;;  counter         1    5[BANK0 ] unsigned char 
 16750 ;; Return value:  Size  Location     Type
 16751 ;;                  2    0[BANK0 ] int 
 16752 ;; Registers used:
 16753 ;;		wreg, status,2, status,0
 16754 ;; Tracked objects:
 16755 ;;		On entry : 0/0
 16756 ;;		On exit  : 0/0
 16757 ;;		Unchanged: 0/0
 16758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16759 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16763 ;;Total ram usage:        9 bytes
 16764 ;; Hardware stack levels used:    1
 16765 ;; Hardware stack levels required when called:    5
 16766 ;; This function calls:
 16767 ;;		Nothing
 16768 ;; This function is called by:
 16769 ;;		_setBuz
 16770 ;; This function uses a non-reentrant model
 16771 ;;
 16772                           
 16773                           
 16774                           ;psect for function ___awdiv
 16775  15E8                     ___awdiv:	
 16776                           
 16777                           ;incstack = 0
 16778                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16779  15E8  0020               	movlb	0	; select bank0
 16780  15E9  01A6               	clrf	___awdiv@sign
 16781  15EA  1FA1               	btfss	___awdiv@divisor+1,7
 16782  15EB  2DF3               	goto	l5818
 16783  15EC  09A0               	comf	___awdiv@divisor,f
 16784  15ED  09A1               	comf	___awdiv@divisor+1,f
 16785  15EE  0AA0               	incf	___awdiv@divisor,f
 16786  15EF  1903               	skipnz
 16787  15F0  0AA1               	incf	___awdiv@divisor+1,f
 16788  15F1  01A6               	clrf	___awdiv@sign
 16789  15F2  0AA6               	incf	___awdiv@sign,f
 16790  15F3                     l5818:	
 16791  15F3  1FA3               	btfss	___awdiv@dividend+1,7
 16792  15F4  2DFE               	goto	l5824
 16793  15F5  09A2               	comf	___awdiv@dividend,f
 16794  15F6  09A3               	comf	___awdiv@dividend+1,f
 16795  15F7  0AA2               	incf	___awdiv@dividend,f
 16796  15F8  1903               	skipnz
 16797  15F9  0AA3               	incf	___awdiv@dividend+1,f
 16798  15FA  3001               	movlw	1
 16799  15FB  00A4               	movwf	??___awdiv
 16800  15FC  0824               	movf	??___awdiv,w
 16801  15FD  06A6               	xorwf	___awdiv@sign,f
 16802  15FE                     l5824:	
 16803  15FE  01A7               	clrf	___awdiv@quotient
 16804  15FF  01A8               	clrf	___awdiv@quotient+1
 16805  1600  0821               	movf	___awdiv@divisor+1,w
 16806  1601  0420               	iorwf	___awdiv@divisor,w
 16807  1602  1903               	skipnz
 16808  1603  2E2D               	goto	l5846
 16809  1604  01A5               	clrf	___awdiv@counter
 16810  1605  0AA5               	incf	___awdiv@counter,f
 16811  1606                     l5834:	
 16812  1606  1BA1               	btfsc	___awdiv@divisor+1,7
 16813  1607  2E12               	goto	l5836
 16814  1608  3001               	movlw	1
 16815  1609                     u4825:	
 16816  1609  35A0               	lslf	___awdiv@divisor,f
 16817  160A  0DA1               	rlf	___awdiv@divisor+1,f
 16818  160B  0B89               	decfsz	9,f
 16819  160C  2E09               	goto	u4825
 16820  160D  3001               	movlw	1
 16821  160E  00A4               	movwf	??___awdiv
 16822  160F  0824               	movf	??___awdiv,w
 16823  1610  07A5               	addwf	___awdiv@counter,f
 16824  1611  2E06               	goto	l5834
 16825  1612                     l5836:	
 16826  1612  3001               	movlw	1
 16827  1613                     u4845:	
 16828  1613  35A7               	lslf	___awdiv@quotient,f
 16829  1614  0DA8               	rlf	___awdiv@quotient+1,f
 16830  1615  0B89               	decfsz	9,f
 16831  1616  2E13               	goto	u4845
 16832  1617  0821               	movf	___awdiv@divisor+1,w
 16833  1618  0223               	subwf	___awdiv@dividend+1,w
 16834  1619  1D03               	skipz
 16835  161A  2E1D               	goto	u4855
 16836  161B  0820               	movf	___awdiv@divisor,w
 16837  161C  0222               	subwf	___awdiv@dividend,w
 16838  161D                     u4855:	
 16839  161D  1C03               	skipc
 16840  161E  2E24               	goto	l5842
 16841  161F  0820               	movf	___awdiv@divisor,w
 16842  1620  02A2               	subwf	___awdiv@dividend,f
 16843  1621  0821               	movf	___awdiv@divisor+1,w
 16844  1622  3BA3               	subwfb	___awdiv@dividend+1,f
 16845  1623  1427               	bsf	___awdiv@quotient,0
 16846  1624                     l5842:	
 16847  1624  3001               	movlw	1
 16848  1625                     u4865:	
 16849  1625  36A1               	lsrf	___awdiv@divisor+1,f
 16850  1626  0CA0               	rrf	___awdiv@divisor,f
 16851  1627  0B89               	decfsz	9,f
 16852  1628  2E25               	goto	u4865
 16853  1629  3001               	movlw	1
 16854  162A  02A5               	subwf	___awdiv@counter,f
 16855  162B  1D03               	btfss	3,2
 16856  162C  2E12               	goto	l5836
 16857  162D                     l5846:	
 16858  162D  0826               	movf	___awdiv@sign,w
 16859  162E  1903               	btfsc	3,2
 16860  162F  2E35               	goto	l5850
 16861  1630  09A7               	comf	___awdiv@quotient,f
 16862  1631  09A8               	comf	___awdiv@quotient+1,f
 16863  1632  0AA7               	incf	___awdiv@quotient,f
 16864  1633  1903               	skipnz
 16865  1634  0AA8               	incf	___awdiv@quotient+1,f
 16866  1635                     l5850:	
 16867  1635  0828               	movf	___awdiv@quotient+1,w
 16868  1636  01A1               	clrf	?___awdiv+1
 16869  1637  07A1               	addwf	?___awdiv+1,f
 16870  1638  0827               	movf	___awdiv@quotient,w
 16871  1639  01A0               	clrf	?___awdiv
 16872  163A  07A0               	addwf	?___awdiv,f
 16873  163B  0008               	return
 16874  163C                     __end_of___awdiv:	
 16875                           
 16876                           	psect	text110
 16877  1B83                     __ptext110:	
 16878 ;; *************** function _DelayOff_Initialization *****************
 16879 ;; Defined at:
 16880 ;;		line 26 in file "../src/DelayOff_B1.c"
 16881 ;; Parameters:    Size  Location     Type
 16882 ;;		None
 16883 ;; Auto vars:     Size  Location     Type
 16884 ;;		None
 16885 ;; Return value:  Size  Location     Type
 16886 ;;		None               void
 16887 ;; Registers used:
 16888 ;;		wreg, status,2, status,0, pclath, cstack
 16889 ;; Tracked objects:
 16890 ;;		On entry : 0/0
 16891 ;;		On exit  : 0/0
 16892 ;;		Unchanged: 0/0
 16893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16898 ;;Total ram usage:        0 bytes
 16899 ;; Hardware stack levels used:    1
 16900 ;; Hardware stack levels required when called:    7
 16901 ;; This function calls:
 16902 ;;		_DlyOff_Initialization
 16903 ;; This function is called by:
 16904 ;;		_main
 16905 ;; This function uses a non-reentrant model
 16906 ;;
 16907                           
 16908                           
 16909                           ;psect for function _DelayOff_Initialization
 16910  1B83                     _DelayOff_Initialization:	
 16911                           
 16912                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16913                           
 16914                           ;incstack = 0
 16915                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16916  1B83  3001               	movlw	1
 16917  1B84  319B  23A1         	fcall	_DlyOff_Initialization
 16918  1B86  0008               	return
 16919  1B87                     __end_of_DelayOff_Initialization:	
 16920                           
 16921                           	psect	text111
 16922  1BA1                     __ptext111:	
 16923 ;; *************** function _DlyOff_Initialization *****************
 16924 ;; Defined at:
 16925 ;;		line 56 in file "../src/DelayOff_B1.c"
 16926 ;; Parameters:    Size  Location     Type
 16927 ;;  sw              1    wreg     unsigned char 
 16928 ;; Auto vars:     Size  Location     Type
 16929 ;;  sw              1    2[BANK0 ] unsigned char 
 16930 ;; Return value:  Size  Location     Type
 16931 ;;		None               void
 16932 ;; Registers used:
 16933 ;;		wreg, status,2, status,0, pclath, cstack
 16934 ;; Tracked objects:
 16935 ;;		On entry : 0/0
 16936 ;;		On exit  : 0/0
 16937 ;;		Unchanged: 0/0
 16938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;Total ram usage:        1 bytes
 16944 ;; Hardware stack levels used:    1
 16945 ;; Hardware stack levels required when called:    6
 16946 ;; This function calls:
 16947 ;;		_DelayOffPointSelect
 16948 ;; This function is called by:
 16949 ;;		_DelayOff_Initialization
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           
 16954                           ;psect for function _DlyOff_Initialization
 16955  1BA1                     _DlyOff_Initialization:	
 16956                           
 16957                           ;incstack = 0
 16958                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16959                           ;DlyOff_Initialization@sw stored from wreg
 16960  1BA1  0020               	movlb	0	; select bank0
 16961  1BA2  00A2               	movwf	DlyOff_Initialization@sw
 16962                           
 16963                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16964  1BA3  0822               	movf	DlyOff_Initialization@sw,w
 16965  1BA4  319C  2404         	fcall	_DelayOffPointSelect
 16966  1BA6  0008               	return
 16967  1BA7                     __end_of_DlyOff_Initialization:	
 16968                           
 16969                           	psect	text112
 16970  1C04                     __ptext112:	
 16971 ;; *************** function _DelayOffPointSelect *****************
 16972 ;; Defined at:
 16973 ;;		line 7 in file "../src/DelayOff_B1.c"
 16974 ;; Parameters:    Size  Location     Type
 16975 ;;  sw              1    wreg     unsigned char 
 16976 ;; Auto vars:     Size  Location     Type
 16977 ;;  sw              1    1[BANK0 ] unsigned char 
 16978 ;; Return value:  Size  Location     Type
 16979 ;;		None               void
 16980 ;; Registers used:
 16981 ;;		wreg
 16982 ;; Tracked objects:
 16983 ;;		On entry : 0/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16991 ;;Total ram usage:        2 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    5
 16994 ;; This function calls:
 16995 ;;		Nothing
 16996 ;; This function is called by:
 16997 ;;		_DlyOff_Initialization
 16998 ;;		_DlyOff_Main
 16999 ;;		_setDelayOff_GO
 17000 ;;		_getDelayOff_GO
 17001 ;; This function uses a non-reentrant model
 17002 ;;
 17003                           
 17004                           
 17005                           ;psect for function _DelayOffPointSelect
 17006  1C04                     _DelayOffPointSelect:	
 17007                           
 17008                           ;incstack = 0
 17009                           ; Regs used in _DelayOffPointSelect: [wreg]
 17010                           ;DelayOffPointSelect@sw stored from wreg
 17011  1C04  0020               	movlb	0	; select bank0
 17012  1C05  00A1               	movwf	DelayOffPointSelect@sw
 17013                           
 17014                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17015  1C06  0821               	movf	DelayOffPointSelect@sw,w
 17016  1C07  3A01               	xorlw	1
 17017  1C08  1D03               	skipz
 17018  1C09  0008               	return
 17019                           
 17020                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17021  1C0A  30DD               	movlw	_DlySw1& (0+255)
 17022  1C0B  00A0               	movwf	??_DelayOffPointSelect
 17023  1C0C  0820               	movf	??_DelayOffPointSelect,w
 17024  1C0D  00F8               	movwf	_DelayOff
 17025  1C0E  0008               	return
 17026  1C0F                     __end_of_DelayOffPointSelect:	
 17027                           
 17028                           	psect	text113
 17029  1DEF                     __ptext113:	
 17030 ;; *************** function _CC2500_PowerOnInitial *****************
 17031 ;; Defined at:
 17032 ;;		line 119 in file "../src/CC2500_B1.c"
 17033 ;; Parameters:    Size  Location     Type
 17034 ;;		None
 17035 ;; Auto vars:     Size  Location     Type
 17036 ;;		None
 17037 ;; Return value:  Size  Location     Type
 17038 ;;		None               void
 17039 ;; Registers used:
 17040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17041 ;; Tracked objects:
 17042 ;;		On entry : 0/0
 17043 ;;		On exit  : 0/0
 17044 ;;		Unchanged: 0/0
 17045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;Total ram usage:        0 bytes
 17051 ;; Hardware stack levels used:    1
 17052 ;; Hardware stack levels required when called:    8
 17053 ;; This function calls:
 17054 ;;		_CC2500_ClearRXFIFO
 17055 ;;		_CC2500_ClearTXFIFO
 17056 ;;		_CC2500_FrequencyCabr
 17057 ;;		_CC2500_InitPATable
 17058 ;;		_CC2500_InitSetREG
 17059 ;;		_CC2500_PowerRST
 17060 ;;		_CC2500_SIDLEMode
 17061 ;; This function is called by:
 17062 ;;		_main
 17063 ;; This function uses a non-reentrant model
 17064 ;;
 17065                           
 17066                           
 17067                           ;psect for function _CC2500_PowerOnInitial
 17068  1DEF                     _CC2500_PowerOnInitial:	
 17069                           
 17070                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17071                           
 17072                           ;incstack = 0
 17073                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17074  1DEF  3194  2475  319D   	fcall	_CC2500_PowerRST
 17075                           
 17076                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17077  1DF2  3190  20C2  319D   	fcall	_CC2500_InitSetREG
 17078                           
 17079                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17080  1DF5  319E  26B5  319D   	fcall	_CC2500_InitPATable
 17081                           
 17082                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17083  1DF8  319B  237B  319D   	fcall	_CC2500_ClearTXFIFO
 17084                           
 17085                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17086  1DFB  319B  2377  319D   	fcall	_CC2500_ClearRXFIFO
 17087                           
 17088                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17089  1DFE  319C  2451  319D   	fcall	_CC2500_FrequencyCabr
 17090                           
 17091                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17092  1E01  319B  237F         	fcall	_CC2500_SIDLEMode
 17093  1E03  0008               	return
 17094  1E04                     __end_of_CC2500_PowerOnInitial:	
 17095                           
 17096                           	psect	text114
 17097  1B7F                     __ptext114:	
 17098 ;; *************** function _CC2500_SIDLEMode *****************
 17099 ;; Defined at:
 17100 ;;		line 209 in file "../src/CC2500_B1.c"
 17101 ;; Parameters:    Size  Location     Type
 17102 ;;		None
 17103 ;; Auto vars:     Size  Location     Type
 17104 ;;		None
 17105 ;; Return value:  Size  Location     Type
 17106 ;;		None               void
 17107 ;; Registers used:
 17108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17109 ;; Tracked objects:
 17110 ;;		On entry : 0/0
 17111 ;;		On exit  : 0/0
 17112 ;;		Unchanged: 0/0
 17113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17118 ;;Total ram usage:        0 bytes
 17119 ;; Hardware stack levels used:    1
 17120 ;; Hardware stack levels required when called:    7
 17121 ;; This function calls:
 17122 ;;		_CC2500_WriteCommand
 17123 ;; This function is called by:
 17124 ;;		_CC2500_PowerOnInitial
 17125 ;; This function uses a non-reentrant model
 17126 ;;
 17127                           
 17128                           
 17129                           ;psect for function _CC2500_SIDLEMode
 17130  1B7F                     _CC2500_SIDLEMode:	
 17131                           
 17132                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17133                           
 17134                           ;incstack = 0
 17135                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17136  1B7F  3036               	movlw	54
 17137  1B80  319E  2648         	fcall	_CC2500_WriteCommand
 17138  1B82  0008               	return
 17139  1B83                     __end_of_CC2500_SIDLEMode:	
 17140                           
 17141                           	psect	text115
 17142  1475                     __ptext115:	
 17143 ;; *************** function _CC2500_PowerRST *****************
 17144 ;; Defined at:
 17145 ;;		line 132 in file "../src/CC2500_B1.c"
 17146 ;; Parameters:    Size  Location     Type
 17147 ;;		None
 17148 ;; Auto vars:     Size  Location     Type
 17149 ;;		None
 17150 ;; Return value:  Size  Location     Type
 17151 ;;		None               void
 17152 ;; Registers used:
 17153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17154 ;; Tracked objects:
 17155 ;;		On entry : 0/0
 17156 ;;		On exit  : 0/0
 17157 ;;		Unchanged: 0/0
 17158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17162 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17163 ;;Total ram usage:        1 bytes
 17164 ;; Hardware stack levels used:    1
 17165 ;; Hardware stack levels required when called:    6
 17166 ;; This function calls:
 17167 ;;		_CC2500_WriteByte
 17168 ;;		_DelayTime_1us
 17169 ;;		_Timeout_Counter
 17170 ;;		_set_TimeoutCleared
 17171 ;; This function is called by:
 17172 ;;		_CC2500_PowerOnInitial
 17173 ;; This function uses a non-reentrant model
 17174 ;;
 17175                           
 17176                           
 17177                           ;psect for function _CC2500_PowerRST
 17178  1475                     _CC2500_PowerRST:	
 17179                           
 17180                           ;CC2500_B1.c: 133: RC3 = 0;
 17181                           
 17182                           ;incstack = 0
 17183                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17184  1475  0020               	movlb	0	; select bank0
 17185  1476  118E               	bcf	14,3	;volatile
 17186                           
 17187                           ;CC2500_B1.c: 134: RC4 = 0;
 17188  1477  120E               	bcf	14,4	;volatile
 17189                           
 17190                           ;CC2500_B1.c: 135: RC0 = 1;
 17191  1478  140E               	bsf	14,0	;volatile
 17192                           
 17193                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17194  1479  300A               	movlw	10
 17195  147A  00A0               	movwf	DelayTime_1us@count
 17196  147B  3000               	movlw	0
 17197  147C  00A1               	movwf	DelayTime_1us@count+1
 17198  147D  3190  2075  3194   	fcall	_DelayTime_1us
 17199                           
 17200                           ;CC2500_B1.c: 137: RC0 = 0;
 17201  1480  0020               	movlb	0	; select bank0
 17202  1481  100E               	bcf	14,0	;volatile
 17203                           
 17204                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17205  1482  300A               	movlw	10
 17206  1483  00A0               	movwf	DelayTime_1us@count
 17207  1484  3000               	movlw	0
 17208  1485  00A1               	movwf	DelayTime_1us@count+1
 17209  1486  3190  2075  3194   	fcall	_DelayTime_1us
 17210                           
 17211                           ;CC2500_B1.c: 139: RC0 = 1;
 17212  1489  0020               	movlb	0	; select bank0
 17213  148A  140E               	bsf	14,0	;volatile
 17214                           
 17215                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17216  148B  3028               	movlw	40
 17217  148C  00A0               	movwf	DelayTime_1us@count
 17218  148D  3000               	movlw	0
 17219  148E  00A1               	movwf	DelayTime_1us@count+1
 17220  148F  3190  2075  3194   	fcall	_DelayTime_1us
 17221                           
 17222                           ;CC2500_B1.c: 141: RC0 = 0;
 17223  1492  0020               	movlb	0	; select bank0
 17224  1493  100E               	bcf	14,0	;volatile
 17225                           
 17226                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17227  1494  3030               	movlw	48
 17228  1495  00A6               	movwf	??_CC2500_PowerRST
 17229  1496  0826               	movf	??_CC2500_PowerRST,w
 17230  1497  00FB               	movwf	_SPI0Buffer
 17231                           
 17232                           ;CC2500_B1.c: 143: while (RC5 == 1 && myMain.Timeout == 0) {
 17233  1498  2C9C               	goto	l6782
 17234  1499                     l6780:	
 17235                           
 17236                           ;CC2500_B1.c: 144: Timeout_Counter();
 17237  1499  319D  25DA  3194   	fcall	_Timeout_Counter
 17238  149C                     l6782:	
 17239  149C  0020               	movlb	0	; select bank0
 17240  149D  1E8E               	btfss	14,5	;volatile
 17241  149E  2CA2               	goto	l6786
 17242  149F  0021               	movlb	1	; select bank1
 17243  14A0  1D2B               	btfss	(_myMain^(0+128)+11),2
 17244  14A1  2C99               	goto	l6780
 17245  14A2                     l6786:	
 17246                           
 17247                           ;CC2500_B1.c: 145: };
 17248                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17249  14A2  319B  2397  3194   	fcall	_set_TimeoutCleared
 17250                           
 17251                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17252  14A5  319D  25B2  3194   	fcall	_CC2500_WriteByte
 17253                           
 17254                           ;CC2500_B1.c: 148: while (RC5 == 1 && myMain.Timeout == 0) {
 17255  14A8  2CAC               	goto	l6792
 17256  14A9                     l6790:	
 17257                           
 17258                           ;CC2500_B1.c: 149: Timeout_Counter();
 17259  14A9  319D  25DA  3194   	fcall	_Timeout_Counter
 17260  14AC                     l6792:	
 17261  14AC  0020               	movlb	0	; select bank0
 17262  14AD  1E8E               	btfss	14,5	;volatile
 17263  14AE  2CB2               	goto	l6796
 17264  14AF  0021               	movlb	1	; select bank1
 17265  14B0  1D2B               	btfss	(_myMain^(0+128)+11),2
 17266  14B1  2CA9               	goto	l6790
 17267  14B2                     l6796:	
 17268                           
 17269                           ;CC2500_B1.c: 150: };
 17270                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17271  14B2  319B  2397         	fcall	_set_TimeoutCleared
 17272                           
 17273                           ;CC2500_B1.c: 152: RC4 = 0;
 17274  14B4  0020               	movlb	0	; select bank0
 17275  14B5  120E               	bcf	14,4	;volatile
 17276                           
 17277                           ;CC2500_B1.c: 153: RC0 = 1;
 17278  14B6  140E               	bsf	14,0	;volatile
 17279  14B7  0008               	return
 17280  14B8                     __end_of_CC2500_PowerRST:	
 17281                           
 17282                           	psect	text116
 17283  10C2                     __ptext116:	
 17284 ;; *************** function _CC2500_InitSetREG *****************
 17285 ;; Defined at:
 17286 ;;		line 159 in file "../src/CC2500_B1.c"
 17287 ;; Parameters:    Size  Location     Type
 17288 ;;		None
 17289 ;; Auto vars:     Size  Location     Type
 17290 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17291 ;;  temp2           1    7[BANK0 ] unsigned char 
 17292 ;;  temp1           1    6[BANK0 ] unsigned char 
 17293 ;; Return value:  Size  Location     Type
 17294 ;;		None               void
 17295 ;; Registers used:
 17296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17297 ;; Tracked objects:
 17298 ;;		On entry : 0/0
 17299 ;;		On exit  : 0/0
 17300 ;;		Unchanged: 0/0
 17301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17303 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17305 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17306 ;;Total ram usage:        4 bytes
 17307 ;; Hardware stack levels used:    1
 17308 ;; Hardware stack levels required when called:    7
 17309 ;; This function calls:
 17310 ;;		_CC2500_WriteREG
 17311 ;; This function is called by:
 17312 ;;		_CC2500_PowerOnInitial
 17313 ;; This function uses a non-reentrant model
 17314 ;;
 17315                           
 17316                           
 17317                           ;psect for function _CC2500_InitSetREG
 17318  10C2                     _CC2500_InitSetREG:	
 17319                           
 17320                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17321                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17322                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17323                           
 17324                           ;incstack = 0
 17325                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17326  10C2  0020               	movlb	0	; select bank0
 17327  10C3  01A8               	clrf	CC2500_InitSetREG@loop_c
 17328  10C4                     L9:	
 17329  10C4  302F               	movlw	47
 17330  10C5  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17331  10C6  1803               	btfsc	3,0
 17332  10C7  0008               	return
 17333                           
 17334                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17335  10C8  0828               	movf	CC2500_InitSetREG@loop_c,w
 17336  10C9  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17337  10CA  0084               	movwf	4
 17338  10CB  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17339  10CC  1803               	skipnc
 17340  10CD  3E01               	addlw	1
 17341  10CE  0085               	movwf	5
 17342  10CF  0800               	movf	0,w	;code access
 17343  10D0  00A5               	movwf	??_CC2500_InitSetREG
 17344  10D1  0825               	movf	??_CC2500_InitSetREG,w
 17345  10D2  00A6               	movwf	CC2500_InitSetREG@temp1
 17346                           
 17347                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17348  10D3  0828               	movf	CC2500_InitSetREG@loop_c,w
 17349  10D4  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17350  10D5  0084               	movwf	4
 17351  10D6  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17352  10D7  1803               	skipnc
 17353  10D8  3E01               	addlw	1
 17354  10D9  0085               	movwf	5
 17355  10DA  0800               	movf	0,w	;code access
 17356  10DB  00A5               	movwf	??_CC2500_InitSetREG
 17357  10DC  0825               	movf	??_CC2500_InitSetREG,w
 17358  10DD  00A7               	movwf	CC2500_InitSetREG@temp2
 17359                           
 17360                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17361  10DE  0827               	movf	CC2500_InitSetREG@temp2,w
 17362  10DF  00A5               	movwf	??_CC2500_InitSetREG
 17363  10E0  0825               	movf	??_CC2500_InitSetREG,w
 17364  10E1  00A2               	movwf	CC2500_WriteREG@value
 17365  10E2  0826               	movf	CC2500_InitSetREG@temp1,w
 17366  10E3  319F  2754  3190   	fcall	_CC2500_WriteREG
 17367  10E6  3001               	movlw	1
 17368  10E7  0020               	movlb	0	; select bank0
 17369  10E8  00A5               	movwf	??_CC2500_InitSetREG
 17370  10E9  0825               	movf	??_CC2500_InitSetREG,w
 17371  10EA  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17372  10EB  28C4               	goto	L9
 17373  10EC                     __end_of_CC2500_InitSetREG:	
 17374                           
 17375                           	psect	text117
 17376  1EB5                     __ptext117:	
 17377 ;; *************** function _CC2500_InitPATable *****************
 17378 ;; Defined at:
 17379 ;;		line 174 in file "../src/CC2500_B1.c"
 17380 ;; Parameters:    Size  Location     Type
 17381 ;;		None
 17382 ;; Auto vars:     Size  Location     Type
 17383 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17384 ;;  temp            1    6[BANK0 ] unsigned char 
 17385 ;; Return value:  Size  Location     Type
 17386 ;;		None               void
 17387 ;; Registers used:
 17388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17389 ;; Tracked objects:
 17390 ;;		On entry : 0/0
 17391 ;;		On exit  : 0/0
 17392 ;;		Unchanged: 0/0
 17393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17397 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17398 ;;Total ram usage:        3 bytes
 17399 ;; Hardware stack levels used:    1
 17400 ;; Hardware stack levels required when called:    7
 17401 ;; This function calls:
 17402 ;;		_CC2500_WriteREG
 17403 ;; This function is called by:
 17404 ;;		_CC2500_PowerOnInitial
 17405 ;; This function uses a non-reentrant model
 17406 ;;
 17407                           
 17408                           
 17409                           ;psect for function _CC2500_InitPATable
 17410  1EB5                     _CC2500_InitPATable:	
 17411                           
 17412                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17413                           ;CC2500_B1.c: 176: unsigned char temp;
 17414                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17415                           
 17416                           ;incstack = 0
 17417                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17418  1EB5  0020               	movlb	0	; select bank0
 17419  1EB6  01A7               	clrf	CC2500_InitPATable@loop_d
 17420  1EB7                     L10:	
 17421  1EB7  3008               	movlw	8
 17422  1EB8  0227               	subwf	CC2500_InitPATable@loop_d,w
 17423  1EB9  1803               	btfsc	3,0
 17424  1EBA  0008               	return
 17425                           
 17426                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17427  1EBB  0827               	movf	CC2500_InitPATable@loop_d,w
 17428  1EBC  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17429  1EBD  0084               	movwf	4
 17430  1EBE  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17431  1EBF  1803               	skipnc
 17432  1EC0  3E01               	addlw	1
 17433  1EC1  0085               	movwf	5
 17434  1EC2  0800               	movf	0,w	;code access
 17435  1EC3  00A5               	movwf	??_CC2500_InitPATable
 17436  1EC4  0825               	movf	??_CC2500_InitPATable,w
 17437  1EC5  00A6               	movwf	CC2500_InitPATable@temp
 17438                           
 17439                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17440  1EC6  0826               	movf	CC2500_InitPATable@temp,w
 17441  1EC7  00A5               	movwf	??_CC2500_InitPATable
 17442  1EC8  0825               	movf	??_CC2500_InitPATable,w
 17443  1EC9  00A2               	movwf	CC2500_WriteREG@value
 17444  1ECA  303E               	movlw	62
 17445  1ECB  319F  2754  319E   	fcall	_CC2500_WriteREG
 17446  1ECE  3001               	movlw	1
 17447  1ECF  0020               	movlb	0	; select bank0
 17448  1ED0  00A5               	movwf	??_CC2500_InitPATable
 17449  1ED1  0825               	movf	??_CC2500_InitPATable,w
 17450  1ED2  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17451  1ED3  2EB7               	goto	L10
 17452  1ED4                     __end_of_CC2500_InitPATable:	
 17453                           
 17454                           	psect	text118
 17455  1F54                     __ptext118:	
 17456 ;; *************** function _CC2500_WriteREG *****************
 17457 ;; Defined at:
 17458 ;;		line 251 in file "../src/CC2500_B1.c"
 17459 ;; Parameters:    Size  Location     Type
 17460 ;;  w_addr          1    wreg     unsigned char 
 17461 ;;  value           1    2[BANK0 ] unsigned char 
 17462 ;; Auto vars:     Size  Location     Type
 17463 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17464 ;; Return value:  Size  Location     Type
 17465 ;;		None               void
 17466 ;; Registers used:
 17467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17468 ;; Tracked objects:
 17469 ;;		On entry : 0/0
 17470 ;;		On exit  : 0/0
 17471 ;;		Unchanged: 0/0
 17472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17473 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17476 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17477 ;;Total ram usage:        3 bytes
 17478 ;; Hardware stack levels used:    1
 17479 ;; Hardware stack levels required when called:    6
 17480 ;; This function calls:
 17481 ;;		_CC2500_WriteByte
 17482 ;;		_Timeout_Counter
 17483 ;;		_set_TimeoutCleared
 17484 ;; This function is called by:
 17485 ;;		_CC2500_InitSetREG
 17486 ;;		_CC2500_InitPATable
 17487 ;; This function uses a non-reentrant model
 17488 ;;
 17489                           
 17490                           
 17491                           ;psect for function _CC2500_WriteREG
 17492  1F54                     _CC2500_WriteREG:	
 17493                           
 17494                           ;incstack = 0
 17495                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17496                           ;CC2500_WriteREG@w_addr stored from wreg
 17497  1F54  0020               	movlb	0	; select bank0
 17498  1F55  00A4               	movwf	CC2500_WriteREG@w_addr
 17499                           
 17500                           ;CC2500_B1.c: 252: RC0 = 0;
 17501  1F56  100E               	bcf	14,0	;volatile
 17502                           
 17503                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17504  1F57  0824               	movf	CC2500_WriteREG@w_addr,w
 17505  1F58  00A3               	movwf	??_CC2500_WriteREG
 17506  1F59  0823               	movf	??_CC2500_WriteREG,w
 17507  1F5A  00FB               	movwf	_SPI0Buffer
 17508                           
 17509                           ;CC2500_B1.c: 254: while (RC5 == 1 && myMain.Timeout == 0) {
 17510  1F5B  2F5F               	goto	l6450
 17511  1F5C                     l6448:	
 17512                           
 17513                           ;CC2500_B1.c: 255: Timeout_Counter();
 17514  1F5C  319D  25DA  319F   	fcall	_Timeout_Counter
 17515  1F5F                     l6450:	
 17516  1F5F  0020               	movlb	0	; select bank0
 17517  1F60  1E8E               	btfss	14,5	;volatile
 17518  1F61  2F65               	goto	l6454
 17519  1F62  0021               	movlb	1	; select bank1
 17520  1F63  1D2B               	btfss	(_myMain^(0+128)+11),2
 17521  1F64  2F5C               	goto	l6448
 17522  1F65                     l6454:	
 17523                           
 17524                           ;CC2500_B1.c: 256: };
 17525                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17526  1F65  319B  2397  319F   	fcall	_set_TimeoutCleared
 17527                           
 17528                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17529  1F68  319D  25B2  319F   	fcall	_CC2500_WriteByte
 17530                           
 17531                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17532  1F6B  0020               	movlb	0	; select bank0
 17533  1F6C  0822               	movf	CC2500_WriteREG@value,w
 17534  1F6D  00A3               	movwf	??_CC2500_WriteREG
 17535  1F6E  0823               	movf	??_CC2500_WriteREG,w
 17536  1F6F  00FB               	movwf	_SPI0Buffer
 17537                           
 17538                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17539  1F70  319D  25B2         	fcall	_CC2500_WriteByte
 17540                           
 17541                           ;CC2500_B1.c: 262: RC0 = 1;
 17542  1F72  0020               	movlb	0	; select bank0
 17543  1F73  140E               	bsf	14,0	;volatile
 17544  1F74  0008               	return
 17545  1F75                     __end_of_CC2500_WriteREG:	
 17546                           
 17547                           	psect	text119
 17548  1C51                     __ptext119:	
 17549 ;; *************** function _CC2500_FrequencyCabr *****************
 17550 ;; Defined at:
 17551 ;;		line 201 in file "../src/CC2500_B1.c"
 17552 ;; Parameters:    Size  Location     Type
 17553 ;;		None
 17554 ;; Auto vars:     Size  Location     Type
 17555 ;;		None
 17556 ;; Return value:  Size  Location     Type
 17557 ;;		None               void
 17558 ;; Registers used:
 17559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17560 ;; Tracked objects:
 17561 ;;		On entry : 0/0
 17562 ;;		On exit  : 0/0
 17563 ;;		Unchanged: 0/0
 17564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;Total ram usage:        0 bytes
 17570 ;; Hardware stack levels used:    1
 17571 ;; Hardware stack levels required when called:    7
 17572 ;; This function calls:
 17573 ;;		_CC2500_WriteCommand
 17574 ;;		_DelayTime_1us
 17575 ;; This function is called by:
 17576 ;;		_CC2500_PowerOnInitial
 17577 ;; This function uses a non-reentrant model
 17578 ;;
 17579                           
 17580                           
 17581                           ;psect for function _CC2500_FrequencyCabr
 17582  1C51                     _CC2500_FrequencyCabr:	
 17583                           
 17584                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17585                           
 17586                           ;incstack = 0
 17587                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17588  1C51  3033               	movlw	51
 17589  1C52  319E  2648  319C   	fcall	_CC2500_WriteCommand
 17590                           
 17591                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17592  1C55  30E8               	movlw	232
 17593  1C56  0020               	movlb	0	; select bank0
 17594  1C57  00A0               	movwf	DelayTime_1us@count
 17595  1C58  3003               	movlw	3
 17596  1C59  00A1               	movwf	DelayTime_1us@count+1
 17597  1C5A  3190  2075         	fcall	_DelayTime_1us
 17598  1C5C  0008               	return
 17599  1C5D                     __end_of_CC2500_FrequencyCabr:	
 17600                           
 17601                           	psect	text120
 17602  1075                     __ptext120:	
 17603 ;; *************** function _DelayTime_1us *****************
 17604 ;; Defined at:
 17605 ;;		line 320 in file "../src/CC2500_B1.c"
 17606 ;; Parameters:    Size  Location     Type
 17607 ;;  count           2    0[BANK0 ] int 
 17608 ;; Auto vars:     Size  Location     Type
 17609 ;;  j               2    4[BANK0 ] unsigned int 
 17610 ;;  i               2    2[BANK0 ] unsigned int 
 17611 ;; Return value:  Size  Location     Type
 17612 ;;		None               void
 17613 ;; Registers used:
 17614 ;;		wreg, status,2
 17615 ;; Tracked objects:
 17616 ;;		On entry : 0/0
 17617 ;;		On exit  : 0/0
 17618 ;;		Unchanged: 0/0
 17619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17620 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17621 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17623 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17624 ;;Total ram usage:        6 bytes
 17625 ;; Hardware stack levels used:    1
 17626 ;; Hardware stack levels required when called:    5
 17627 ;; This function calls:
 17628 ;;		Nothing
 17629 ;; This function is called by:
 17630 ;;		_CC2500_PowerRST
 17631 ;;		_CC2500_FrequencyCabr
 17632 ;; This function uses a non-reentrant model
 17633 ;;
 17634                           
 17635                           
 17636                           ;psect for function _DelayTime_1us
 17637  1075                     _DelayTime_1us:	
 17638                           
 17639                           ;CC2500_B1.c: 321: unsigned int i, j;
 17640                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17641                           
 17642                           ;incstack = 0
 17643                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17644  1075  3001               	movlw	1
 17645  1076  0020               	movlb	0	; select bank0
 17646  1077  00A2               	movwf	DelayTime_1us@i
 17647  1078  3000               	movlw	0
 17648  1079  00A3               	movwf	DelayTime_1us@i+1
 17649  107A                     l348:	
 17650  107A  0821               	movf	DelayTime_1us@count+1,w
 17651  107B  0223               	subwf	DelayTime_1us@i+1,w
 17652  107C  1D03               	skipz
 17653  107D  2880               	goto	u5625
 17654  107E  0820               	movf	DelayTime_1us@count,w
 17655  107F  0222               	subwf	DelayTime_1us@i,w
 17656  1080                     u5625:	
 17657  1080  1803               	btfsc	3,0
 17658  1081  0008               	return
 17659                           
 17660                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17661  1082  01A4               	clrf	DelayTime_1us@j
 17662  1083  01A5               	clrf	DelayTime_1us@j+1
 17663  1084  3000               	movlw	0
 17664  1085  0225               	subwf	DelayTime_1us@j+1,w
 17665  1086  3002               	movlw	2
 17666  1087  1903               	skipnz
 17667  1088  0224               	subwf	DelayTime_1us@j,w
 17668  1089  1803               	btfsc	3,0
 17669  108A  2896               	goto	l6442
 17670  108B                     l6440:	
 17671  108B  3001               	movlw	1
 17672  108C  07A4               	addwf	DelayTime_1us@j,f
 17673  108D  3000               	movlw	0
 17674  108E  3DA5               	addwfc	DelayTime_1us@j+1,f
 17675  108F  3000               	movlw	0
 17676  1090  0225               	subwf	DelayTime_1us@j+1,w
 17677  1091  3002               	movlw	2
 17678  1092  1903               	skipnz
 17679  1093  0224               	subwf	DelayTime_1us@j,w
 17680  1094  1C03               	skipc
 17681  1095  288B               	goto	l6440
 17682  1096                     l6442:	
 17683  1096  3001               	movlw	1
 17684  1097  07A2               	addwf	DelayTime_1us@i,f
 17685  1098  3000               	movlw	0
 17686  1099  3DA3               	addwfc	DelayTime_1us@i+1,f
 17687  109A  287A               	goto	l348
 17688  109B                     __end_of_DelayTime_1us:	
 17689                           
 17690                           	psect	text121
 17691  1B7B                     __ptext121:	
 17692 ;; *************** function _CC2500_ClearTXFIFO *****************
 17693 ;; Defined at:
 17694 ;;		line 187 in file "../src/CC2500_B1.c"
 17695 ;; Parameters:    Size  Location     Type
 17696 ;;		None
 17697 ;; Auto vars:     Size  Location     Type
 17698 ;;		None
 17699 ;; Return value:  Size  Location     Type
 17700 ;;		None               void
 17701 ;; Registers used:
 17702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17703 ;; Tracked objects:
 17704 ;;		On entry : 0/0
 17705 ;;		On exit  : 0/0
 17706 ;;		Unchanged: 0/0
 17707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17712 ;;Total ram usage:        0 bytes
 17713 ;; Hardware stack levels used:    1
 17714 ;; Hardware stack levels required when called:    7
 17715 ;; This function calls:
 17716 ;;		_CC2500_WriteCommand
 17717 ;; This function is called by:
 17718 ;;		_CC2500_PowerOnInitial
 17719 ;; This function uses a non-reentrant model
 17720 ;;
 17721                           
 17722                           
 17723                           ;psect for function _CC2500_ClearTXFIFO
 17724  1B7B                     _CC2500_ClearTXFIFO:	
 17725                           
 17726                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17727                           
 17728                           ;incstack = 0
 17729                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17730  1B7B  303B               	movlw	59
 17731  1B7C  319E  2648         	fcall	_CC2500_WriteCommand
 17732  1B7E  0008               	return
 17733  1B7F                     __end_of_CC2500_ClearTXFIFO:	
 17734                           
 17735                           	psect	text122
 17736  1B77                     __ptext122:	
 17737 ;; *************** function _CC2500_ClearRXFIFO *****************
 17738 ;; Defined at:
 17739 ;;		line 194 in file "../src/CC2500_B1.c"
 17740 ;; Parameters:    Size  Location     Type
 17741 ;;		None
 17742 ;; Auto vars:     Size  Location     Type
 17743 ;;		None
 17744 ;; Return value:  Size  Location     Type
 17745 ;;		None               void
 17746 ;; Registers used:
 17747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17748 ;; Tracked objects:
 17749 ;;		On entry : 0/0
 17750 ;;		On exit  : 0/0
 17751 ;;		Unchanged: 0/0
 17752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17757 ;;Total ram usage:        0 bytes
 17758 ;; Hardware stack levels used:    1
 17759 ;; Hardware stack levels required when called:    7
 17760 ;; This function calls:
 17761 ;;		_CC2500_WriteCommand
 17762 ;; This function is called by:
 17763 ;;		_CC2500_PowerOnInitial
 17764 ;; This function uses a non-reentrant model
 17765 ;;
 17766                           
 17767                           
 17768                           ;psect for function _CC2500_ClearRXFIFO
 17769  1B77                     _CC2500_ClearRXFIFO:	
 17770                           
 17771                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17772                           
 17773                           ;incstack = 0
 17774                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17775  1B77  303A               	movlw	58
 17776  1B78  319E  2648         	fcall	_CC2500_WriteCommand
 17777  1B7A  0008               	return
 17778  1B7B                     __end_of_CC2500_ClearRXFIFO:	
 17779                           
 17780                           	psect	text123
 17781  1E48                     __ptext123:	
 17782 ;; *************** function _CC2500_WriteCommand *****************
 17783 ;; Defined at:
 17784 ;;		line 285 in file "../src/CC2500_B1.c"
 17785 ;; Parameters:    Size  Location     Type
 17786 ;;  command         1    wreg     unsigned char 
 17787 ;; Auto vars:     Size  Location     Type
 17788 ;;  command         1    3[BANK0 ] unsigned char 
 17789 ;; Return value:  Size  Location     Type
 17790 ;;		None               void
 17791 ;; Registers used:
 17792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17793 ;; Tracked objects:
 17794 ;;		On entry : 0/0
 17795 ;;		On exit  : 0/0
 17796 ;;		Unchanged: 0/0
 17797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17802 ;;Total ram usage:        2 bytes
 17803 ;; Hardware stack levels used:    1
 17804 ;; Hardware stack levels required when called:    6
 17805 ;; This function calls:
 17806 ;;		_CC2500_WriteByte
 17807 ;;		_Timeout_Counter
 17808 ;;		_set_TimeoutCleared
 17809 ;; This function is called by:
 17810 ;;		_CC2500_TxData
 17811 ;;		_CC2500_ClearTXFIFO
 17812 ;;		_CC2500_ClearRXFIFO
 17813 ;;		_CC2500_FrequencyCabr
 17814 ;;		_CC2500_SIDLEMode
 17815 ;;		_setRF_Main
 17816 ;;		_RF_RxDisable
 17817 ;; This function uses a non-reentrant model
 17818 ;;
 17819                           
 17820                           
 17821                           ;psect for function _CC2500_WriteCommand
 17822  1E48                     _CC2500_WriteCommand:	
 17823                           
 17824                           ;incstack = 0
 17825                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17826                           ;CC2500_WriteCommand@command stored from wreg
 17827  1E48  0020               	movlb	0	; select bank0
 17828  1E49  00A3               	movwf	CC2500_WriteCommand@command
 17829                           
 17830                           ;CC2500_B1.c: 286: RC0 = 0;
 17831  1E4A  100E               	bcf	14,0	;volatile
 17832                           
 17833                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17834  1E4B  0823               	movf	CC2500_WriteCommand@command,w
 17835  1E4C  00A2               	movwf	??_CC2500_WriteCommand
 17836  1E4D  0822               	movf	??_CC2500_WriteCommand,w
 17837  1E4E  00FB               	movwf	_SPI0Buffer
 17838                           
 17839                           ;CC2500_B1.c: 289: while (RC5 == 1 && myMain.Timeout == 0) {
 17840  1E4F  2E53               	goto	l6180
 17841  1E50                     l6178:	
 17842                           
 17843                           ;CC2500_B1.c: 290: Timeout_Counter();
 17844  1E50  319D  25DA  319E   	fcall	_Timeout_Counter
 17845  1E53                     l6180:	
 17846  1E53  0020               	movlb	0	; select bank0
 17847  1E54  1E8E               	btfss	14,5	;volatile
 17848  1E55  2E59               	goto	l6184
 17849  1E56  0021               	movlb	1	; select bank1
 17850  1E57  1D2B               	btfss	(_myMain^(0+128)+11),2
 17851  1E58  2E50               	goto	l6178
 17852  1E59                     l6184:	
 17853                           
 17854                           ;CC2500_B1.c: 291: };
 17855                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 17856  1E59  319B  2397  319E   	fcall	_set_TimeoutCleared
 17857                           
 17858                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 17859  1E5C  319D  25B2         	fcall	_CC2500_WriteByte
 17860                           
 17861                           ;CC2500_B1.c: 295: RC0 = 1;
 17862  1E5E  0020               	movlb	0	; select bank0
 17863  1E5F  140E               	bsf	14,0	;volatile
 17864  1E60  0008               	return
 17865  1E61                     __end_of_CC2500_WriteCommand:	
 17866                           
 17867                           	psect	text124
 17868  1B97                     __ptext124:	
 17869 ;; *************** function _set_TimeoutCleared *****************
 17870 ;; Defined at:
 17871 ;;		line 283 in file "../src/Main_B1.c"
 17872 ;; Parameters:    Size  Location     Type
 17873 ;;		None
 17874 ;; Auto vars:     Size  Location     Type
 17875 ;;		None
 17876 ;; Return value:  Size  Location     Type
 17877 ;;		None               void
 17878 ;; Registers used:
 17879 ;;		status,2
 17880 ;; Tracked objects:
 17881 ;;		On entry : 0/0
 17882 ;;		On exit  : 0/0
 17883 ;;		Unchanged: 0/0
 17884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17889 ;;Total ram usage:        0 bytes
 17890 ;; Hardware stack levels used:    1
 17891 ;; Hardware stack levels required when called:    5
 17892 ;; This function calls:
 17893 ;;		Nothing
 17894 ;; This function is called by:
 17895 ;;		_CC2500_TxData
 17896 ;;		_CC2500_RxData
 17897 ;;		_CC2500_PowerRST
 17898 ;;		_CC2500_WriteREG
 17899 ;;		_CC2500_WriteCommand
 17900 ;;		_CC2500_ReadStatus
 17901 ;;		_getAD
 17902 ;;		_TouchPower
 17903 ;;		_CC2500_ReadREG
 17904 ;; This function uses a non-reentrant model
 17905 ;;
 17906                           
 17907                           
 17908                           ;psect for function _set_TimeoutCleared
 17909  1B97                     _set_TimeoutCleared:	
 17910                           
 17911                           ;Main_B1.c: 284: myMain.Timeout = 0;
 17912                           
 17913                           ;incstack = 0
 17914                           ; Regs used in _set_TimeoutCleared: [status,2]
 17915  1B97  0021               	movlb	1	; select bank1
 17916  1B98  112B               	bcf	(_myMain^(0+128)+11),2
 17917                           
 17918                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 17919  1B99  01AC               	clrf	(_myMain^(0+128)+12)
 17920  1B9A  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17921  1B9B  0008               	return
 17922  1B9C                     __end_of_set_TimeoutCleared:	
 17923                           
 17924                           	psect	text125
 17925  1DDA                     __ptext125:	
 17926 ;; *************** function _Timeout_Counter *****************
 17927 ;; Defined at:
 17928 ;;		line 274 in file "../src/Main_B1.c"
 17929 ;; Parameters:    Size  Location     Type
 17930 ;;		None
 17931 ;; Auto vars:     Size  Location     Type
 17932 ;;		None
 17933 ;; Return value:  Size  Location     Type
 17934 ;;		None               void
 17935 ;; Registers used:
 17936 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17937 ;; Tracked objects:
 17938 ;;		On entry : 0/0
 17939 ;;		On exit  : 0/0
 17940 ;;		Unchanged: 0/0
 17941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;Total ram usage:        0 bytes
 17947 ;; Hardware stack levels used:    1
 17948 ;; Hardware stack levels required when called:    5
 17949 ;; This function calls:
 17950 ;;		Nothing
 17951 ;; This function is called by:
 17952 ;;		_CC2500_TxData
 17953 ;;		_CC2500_RxData
 17954 ;;		_CC2500_PowerRST
 17955 ;;		_CC2500_WriteREG
 17956 ;;		_CC2500_WriteCommand
 17957 ;;		_CC2500_ReadStatus
 17958 ;;		_getAD
 17959 ;;		_TouchPower
 17960 ;;		_CC2500_ReadREG
 17961 ;; This function uses a non-reentrant model
 17962 ;;
 17963                           
 17964                           
 17965                           ;psect for function _Timeout_Counter
 17966  1DDA                     _Timeout_Counter:	
 17967                           
 17968                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 17969                           
 17970                           ;incstack = 0
 17971                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 17972  1DDA  3001               	movlw	1
 17973  1DDB  0021               	movlb	1	; select bank1
 17974  1DDC  07AC               	addwf	(_myMain^(0+128)+12),f
 17975  1DDD  3000               	movlw	0
 17976  1DDE  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 17977                           
 17978                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 17979  1DDF  300C               	movlw	12
 17980  1DE0  3EA0               	addlw	_myMain& (0+255)
 17981  1DE1  0086               	movwf	6
 17982  1DE2  0187               	clrf	7
 17983  1DE3  3F40               	moviw [0]fsr1
 17984  1DE4  3A10               	xorlw	16
 17985  1DE5  1D03               	skipz
 17986  1DE6  2DE9               	goto	u5085
 17987  1DE7  3F41               	moviw [1]fsr1
 17988  1DE8  3A27               	xorlw	39
 17989  1DE9                     u5085:	
 17990  1DE9  1D03               	skipz
 17991  1DEA  0008               	return
 17992                           
 17993                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 17994  1DEB  01AC               	clrf	(_myMain^(0+128)+12)
 17995  1DEC  01AD               	clrf	((_myMain+1)^(0+128)+12)
 17996                           
 17997                           ;Main_B1.c: 278: myMain.Timeout = 1;
 17998  1DED  152B               	bsf	(_myMain^(0+128)+11),2
 17999  1DEE  0008               	return
 18000  1DEF                     __end_of_Timeout_Counter:	
 18001                           
 18002                           	psect	text126
 18003  1DB2                     __ptext126:	
 18004 ;; *************** function _CC2500_WriteByte *****************
 18005 ;; Defined at:
 18006 ;;		line 219 in file "../src/CC2500_B1.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;		None
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18011 ;; Return value:  Size  Location     Type
 18012 ;;		None               void
 18013 ;; Registers used:
 18014 ;;		wreg, status,2, status,0
 18015 ;; Tracked objects:
 18016 ;;		On entry : 0/0
 18017 ;;		On exit  : 0/0
 18018 ;;		Unchanged: 0/0
 18019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18024 ;;Total ram usage:        2 bytes
 18025 ;; Hardware stack levels used:    1
 18026 ;; Hardware stack levels required when called:    5
 18027 ;; This function calls:
 18028 ;;		Nothing
 18029 ;; This function is called by:
 18030 ;;		_CC2500_TxData
 18031 ;;		_CC2500_RxData
 18032 ;;		_CC2500_PowerRST
 18033 ;;		_CC2500_WriteREG
 18034 ;;		_CC2500_WriteCommand
 18035 ;;		_CC2500_ReadStatus
 18036 ;;		_CC2500_ReadREG
 18037 ;; This function uses a non-reentrant model
 18038 ;;
 18039                           
 18040                           
 18041                           ;psect for function _CC2500_WriteByte
 18042  1DB2                     _CC2500_WriteByte:	
 18043                           
 18044                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18045                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18046                           
 18047                           ;incstack = 0
 18048                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18049  1DB2  0020               	movlb	0	; select bank0
 18050  1DB3  01A1               	clrf	CC2500_WriteByte@loop_a
 18051  1DB4                     L11:	
 18052  1DB4  3008               	movlw	8
 18053  1DB5  0221               	subwf	CC2500_WriteByte@loop_a,w
 18054  1DB6  1803               	btfsc	3,0
 18055  1DB7  0008               	return
 18056                           
 18057                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18058  1DB8  1FFB               	btfss	_SPI0Buffer,7
 18059  1DB9  2DBC               	goto	l304
 18060                           
 18061                           ;CC2500_B1.c: 223: RC4 = 1;
 18062  1DBA  160E               	bsf	14,4	;volatile
 18063  1DBB  2DBD               	goto	l305
 18064  1DBC                     l304:	
 18065                           
 18066                           ;CC2500_B1.c: 224: else
 18067                           ;CC2500_B1.c: 225: RC4 = 0;
 18068  1DBC  120E               	bcf	14,4	;volatile
 18069  1DBD                     l305:	
 18070                           
 18071                           ;CC2500_B1.c: 226: RC3 = 1;
 18072  1DBD  158E               	bsf	14,3	;volatile
 18073                           
 18074                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18075  1DBE  1003               	clrc
 18076  1DBF  0DFB               	rlf	_SPI0Buffer,f
 18077                           
 18078                           ;CC2500_B1.c: 228: RC3 = 0;
 18079  1DC0  118E               	bcf	14,3	;volatile
 18080  1DC1  3001               	movlw	1
 18081  1DC2  00A0               	movwf	??_CC2500_WriteByte
 18082  1DC3  0820               	movf	??_CC2500_WriteByte,w
 18083  1DC4  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18084  1DC5  2DB4               	goto	L11
 18085  1DC6                     __end_of_CC2500_WriteByte:	
 18086                           
 18087                           	psect	text127
 18088  1501                     __ptext127:	
 18089 ;; *************** function _Buzzer_Main *****************
 18090 ;; Defined at:
 18091 ;;		line 46 in file "../src/Buzzer_B1.c"
 18092 ;; Parameters:    Size  Location     Type
 18093 ;;		None
 18094 ;; Auto vars:     Size  Location     Type
 18095 ;;		None
 18096 ;; Return value:  Size  Location     Type
 18097 ;;		None               void
 18098 ;; Registers used:
 18099 ;;		wreg, status,2, status,0
 18100 ;; Tracked objects:
 18101 ;;		On entry : 0/0
 18102 ;;		On exit  : 0/0
 18103 ;;		Unchanged: 0/0
 18104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18108 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18109 ;;Total ram usage:        1 bytes
 18110 ;; Hardware stack levels used:    1
 18111 ;; Hardware stack levels required when called:    5
 18112 ;; This function calls:
 18113 ;;		Nothing
 18114 ;; This function is called by:
 18115 ;;		_main
 18116 ;; This function uses a non-reentrant model
 18117 ;;
 18118                           
 18119                           
 18120                           ;psect for function _Buzzer_Main
 18121  1501                     _Buzzer_Main:	
 18122                           
 18123                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18124                           
 18125                           ;incstack = 0
 18126                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18127  1501  0021               	movlb	1	; select bank1
 18128  1502  1CAE               	btfss	_Buz1^(0+128),1
 18129  1503  0008               	return
 18130                           
 18131                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18132  1504  3001               	movlw	1
 18133  1505  07AF               	addwf	(_Buz1^(0+128)+1),f
 18134  1506  3000               	movlw	0
 18135  1507  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18136                           
 18137                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18138  1508  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18139  1509  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18140  150A  1D03               	skipz
 18141  150B  2D0E               	goto	u7285
 18142  150C  0834               	movf	(_Buz1^(0+128)+6),w
 18143  150D  022F               	subwf	(_Buz1^(0+128)+1),w
 18144  150E                     u7285:	
 18145  150E  1C03               	skipc
 18146  150F  0008               	return
 18147                           
 18148                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18149  1510  01AF               	clrf	(_Buz1^(0+128)+1)
 18150  1511  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18151                           
 18152                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18153  1512  12AE               	bcf	_Buz1^(0+128),5
 18154  1513  0020               	movlb	0	; select bank0
 18155  1514  1D8D               	btfss	13,3	;volatile
 18156  1515  2D18               	goto	l7458
 18157  1516  0021               	movlb	1	; select bank1
 18158  1517  16AE               	bsf	_Buz1^(0+128),5
 18159  1518                     l7458:	
 18160                           
 18161                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18162  1518  0021               	movlb	1	; select bank1
 18163  1519  1AAE               	btfsc	_Buz1^(0+128),5
 18164  151A  2D44               	goto	l94
 18165                           
 18166                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18167  151B  08B1               	movf	(_Buz1^(0+128)+3),f
 18168  151C  1D03               	skipz
 18169  151D  2D40               	goto	l95
 18170                           
 18171                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18172  151E  1DAE               	btfss	_Buz1^(0+128),3
 18173  151F  2D2E               	goto	l96
 18174                           
 18175                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18176  1520  11AE               	bcf	_Buz1^(0+128),3
 18177                           
 18178                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18179  1521  0832               	movf	(_Buz1^(0+128)+4),w
 18180  1522  0020               	movlb	0	; select bank0
 18181  1523  00A0               	movwf	??_Buzzer_Main
 18182  1524  0820               	movf	??_Buzzer_Main,w
 18183  1525  0021               	movlb	1	; select bank1
 18184  1526  00B1               	movwf	(_Buz1^(0+128)+3)
 18185                           
 18186                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18187  1527  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18188  1528  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18189  1529  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18190  152A  0836               	movf	(_Buz1^(0+128)+8),w
 18191  152B  01B4               	clrf	(_Buz1^(0+128)+6)
 18192  152C  07B4               	addwf	(_Buz1^(0+128)+6),f
 18193                           
 18194                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18195  152D  0008               	return
 18196  152E                     l96:	
 18197  152E  1E2E               	btfss	_Buz1^(0+128),4
 18198  152F  2D3E               	goto	l98
 18199                           
 18200                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18201  1530  122E               	bcf	_Buz1^(0+128),4
 18202                           
 18203                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18204  1531  0833               	movf	(_Buz1^(0+128)+5),w
 18205  1532  0020               	movlb	0	; select bank0
 18206  1533  00A0               	movwf	??_Buzzer_Main
 18207  1534  0820               	movf	??_Buzzer_Main,w
 18208  1535  0021               	movlb	1	; select bank1
 18209  1536  00B1               	movwf	(_Buz1^(0+128)+3)
 18210                           
 18211                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18212  1537  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18213  1538  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18214  1539  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18215  153A  0838               	movf	(_Buz1^(0+128)+10),w
 18216  153B  01B4               	clrf	(_Buz1^(0+128)+6)
 18217  153C  07B4               	addwf	(_Buz1^(0+128)+6),f
 18218                           
 18219                           ;Buzzer_B1.c: 62: } else {
 18220  153D  0008               	return
 18221  153E                     l98:	
 18222                           
 18223                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18224  153E  10AE               	bcf	_Buz1^(0+128),1
 18225                           
 18226                           ;Buzzer_B1.c: 64: }
 18227                           ;Buzzer_B1.c: 65: } else {
 18228  153F  0008               	return
 18229  1540                     l95:	
 18230                           
 18231                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18232  1540  16AE               	bsf	_Buz1^(0+128),5
 18233                           
 18234                           ;Buzzer_B1.c: 68: RB3 = 1;
 18235  1541  0020               	movlb	0	; select bank0
 18236  1542  158D               	bsf	13,3	;volatile
 18237                           
 18238                           ;Buzzer_B1.c: 69: }
 18239                           ;Buzzer_B1.c: 70: } else {
 18240  1543  0008               	return
 18241  1544                     l94:	
 18242                           
 18243                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18244  1544  12AE               	bcf	_Buz1^(0+128),5
 18245                           
 18246                           ;Buzzer_B1.c: 73: RB3 = 0;
 18247  1545  0020               	movlb	0	; select bank0
 18248  1546  118D               	bcf	13,3	;volatile
 18249                           
 18250                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18251  1547  3001               	movlw	1
 18252  1548  0021               	movlb	1	; select bank1
 18253  1549  02B1               	subwf	(_Buz1^(0+128)+3),f
 18254  154A  0008               	return
 18255  154B                     __end_of_Buzzer_Main:	
 18256                           
 18257                           	psect	text128
 18258  1B64                     __ptext128:	
 18259 ;; *************** function _Buzzer_Initialization *****************
 18260 ;; Defined at:
 18261 ;;		line 11 in file "../src/Buzzer_B1.c"
 18262 ;; Parameters:    Size  Location     Type
 18263 ;;		None
 18264 ;; Auto vars:     Size  Location     Type
 18265 ;;		None
 18266 ;; Return value:  Size  Location     Type
 18267 ;;		None               void
 18268 ;; Registers used:
 18269 ;;		None
 18270 ;; Tracked objects:
 18271 ;;		On entry : 0/0
 18272 ;;		On exit  : 0/0
 18273 ;;		Unchanged: 0/0
 18274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;Total ram usage:        0 bytes
 18280 ;; Hardware stack levels used:    1
 18281 ;; Hardware stack levels required when called:    5
 18282 ;; This function calls:
 18283 ;;		Nothing
 18284 ;; This function is called by:
 18285 ;;		_main
 18286 ;; This function uses a non-reentrant model
 18287 ;;
 18288                           
 18289                           
 18290                           ;psect for function _Buzzer_Initialization
 18291  1B64                     _Buzzer_Initialization:	
 18292                           
 18293                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18294                           
 18295                           ;incstack = 0
 18296                           ; Regs used in _Buzzer_Initialization: []
 18297  1B64  0021               	movlb	1	; select bank1
 18298  1B65  142E               	bsf	_Buz1^(0+128),0
 18299  1B66  0008               	return
 18300  1B67                     __end_of_Buzzer_Initialization:	
 18301                           
 18302                           	psect	intentry
 18303  0004                     __pintentry:	
 18304 ;; *************** function _ISR *****************
 18305 ;; Defined at:
 18306 ;;		line 107 in file "../src/MCU_B1.c"
 18307 ;; Parameters:    Size  Location     Type
 18308 ;;		None
 18309 ;; Auto vars:     Size  Location     Type
 18310 ;;		None
 18311 ;; Return value:  Size  Location     Type
 18312 ;;		None               void
 18313 ;; Registers used:
 18314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18315 ;; Tracked objects:
 18316 ;;		On entry : 0/0
 18317 ;;		On exit  : 0/0
 18318 ;;		Unchanged: 0/0
 18319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18323 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18324 ;;Total ram usage:        1 bytes
 18325 ;; Hardware stack levels used:    1
 18326 ;; Hardware stack levels required when called:    4
 18327 ;; This function calls:
 18328 ;;		_IOC_ISR
 18329 ;;		_TMR1_ISR
 18330 ;; This function is called by:
 18331 ;;		Interrupt level 1
 18332 ;; This function uses a non-reentrant model
 18333 ;;
 18334                           
 18335  0004                     _ISR:	
 18336                           
 18337                           ;incstack = 0
 18338                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18339  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18340  0005  3180               	pagesel	$
 18341  0006  0020               	movlb	0	; select bank0
 18342  0007  087F               	movf	127,w
 18343  0008  00F7               	movwf	??_ISR
 18344                           
 18345                           ;MCU_B1.c: 109: IOC_ISR();
 18346  0009  319C  24B4  3180   	fcall	_IOC_ISR
 18347                           
 18348                           ;MCU_B1.c: 111: ;;
 18349                           ;MCU_B1.c: 113: TMR1_ISR();
 18350  000C  319F  27DC         	fcall	_TMR1_ISR
 18351  000E  0877               	movf	??_ISR,w
 18352  000F  0020               	movlb	0	; select bank0
 18353  0010  00FF               	movwf	127
 18354  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18355  0012  0009               	retfie
 18356  0013                     __end_of_ISR:	
 18357                           
 18358                           	psect	text130
 18359  1FDC                     __ptext130:	
 18360 ;; *************** function _TMR1_ISR *****************
 18361 ;; Defined at:
 18362 ;;		line 209 in file "../src/MCU_B1.c"
 18363 ;; Parameters:    Size  Location     Type
 18364 ;;		None
 18365 ;; Auto vars:     Size  Location     Type
 18366 ;;		None
 18367 ;; Return value:  Size  Location     Type
 18368 ;;		None               void
 18369 ;; Registers used:
 18370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18371 ;; Tracked objects:
 18372 ;;		On entry : 0/0
 18373 ;;		On exit  : 0/0
 18374 ;;		Unchanged: 0/0
 18375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;Total ram usage:        0 bytes
 18381 ;; Hardware stack levels used:    1
 18382 ;; Hardware stack levels required when called:    2
 18383 ;; This function calls:
 18384 ;;		_setDimmerLights_IntrControl
 18385 ;; This function is called by:
 18386 ;;		_ISR
 18387 ;; This function uses a non-reentrant model
 18388 ;;
 18389                           
 18390                           
 18391                           ;psect for function _TMR1_ISR
 18392  1FDC                     _TMR1_ISR:	
 18393                           
 18394                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18395                           
 18396                           ;incstack = 0
 18397                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18398  1FDC  0021               	movlb	1	; select bank1
 18399  1FDD  1C11               	btfss	17,0	;volatile
 18400  1FDE  0008               	return
 18401  1FDF  0020               	movlb	0	; select bank0
 18402  1FE0  1C11               	btfss	17,0	;volatile
 18403  1FE1  0008               	return
 18404                           
 18405                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18406  1FE2  30FA               	movlw	250
 18407  1FE3  0097               	movwf	23	;volatile
 18408                           
 18409                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18410  1FE4  3038               	movlw	56
 18411  1FE5  0096               	movwf	22	;volatile
 18412                           
 18413                           ;MCU_B1.c: 214: TMR1IF = 0;
 18414  1FE6  1011               	bcf	17,0	;volatile
 18415                           
 18416                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18417  1FE7  3001               	movlw	1
 18418  1FE8  3183  232F  319F   	fcall	_setDimmerLights_IntrControl
 18419                           
 18420                           ;MCU_B1.c: 234: Timer1.Count++;
 18421  1FEB  3001               	movlw	1
 18422  1FEC  0021               	movlb	1	; select bank1
 18423  1FED  07C7               	addwf	(_Timer1^(0+128)+1),f
 18424  1FEE  3000               	movlw	0
 18425  1FEF  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 18426                           
 18427                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
 18428  1FF0  3001               	movlw	1
 18429  1FF1  3EC6               	addlw	_Timer1& (0+255)
 18430  1FF2  0086               	movwf	6
 18431  1FF3  0187               	clrf	7
 18432  1FF4  3F40               	moviw [0]fsr1
 18433  1FF5  3A64               	xorlw	100
 18434  1FF6  1D03               	skipz
 18435  1FF7  2FFA               	goto	u744_25
 18436  1FF8  3F41               	moviw [1]fsr1
 18437  1FF9  3A00               	xorlw	0
 18438  1FFA                     u744_25:	
 18439  1FFA  1D03               	skipz
 18440  1FFB  0008               	return
 18441                           
 18442                           ;MCU_B1.c: 236: Timer1.Count = 0;
 18443  1FFC  01C7               	clrf	(_Timer1^(0+128)+1)
 18444  1FFD  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 18445                           
 18446                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
 18447  1FFE  1446               	bsf	_Timer1^(0+128),0
 18448  1FFF  0008               	return
 18449  2000                     __end_of_TMR1_ISR:	
 18450                           
 18451                           	psect	text131
 18452  032F                     __ptext131:	
 18453 ;; *************** function _setDimmerLights_IntrControl *****************
 18454 ;; Defined at:
 18455 ;;		line 94 in file "../src/Dimmer_B1.c"
 18456 ;; Parameters:    Size  Location     Type
 18457 ;;  lights          1    wreg     unsigned char 
 18458 ;; Auto vars:     Size  Location     Type
 18459 ;;  lights          1    6[COMMON] unsigned char 
 18460 ;; Return value:  Size  Location     Type
 18461 ;;		None               void
 18462 ;; Registers used:
 18463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18464 ;; Tracked objects:
 18465 ;;		On entry : 0/0
 18466 ;;		On exit  : 0/0
 18467 ;;		Unchanged: 0/0
 18468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18471 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18472 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18473 ;;Total ram usage:        5 bytes
 18474 ;; Hardware stack levels used:    1
 18475 ;; Hardware stack levels required when called:    1
 18476 ;; This function calls:
 18477 ;;		_DimmerIntrPointSelect
 18478 ;; This function is called by:
 18479 ;;		_TMR1_ISR
 18480 ;; This function uses a non-reentrant model
 18481 ;;
 18482                           
 18483                           
 18484                           ;psect for function _setDimmerLights_IntrControl
 18485  032F                     _setDimmerLights_IntrControl:	
 18486                           
 18487                           ;incstack = 0
 18488                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18489                           ;setDimmerLights_IntrControl@lights stored from wreg
 18490  032F  00F6               	movwf	setDimmerLights_IntrControl@lights
 18491                           
 18492                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 18493  0330  0876               	movf	setDimmerLights_IntrControl@lights,w
 18494  0331  319B  23E5  3183   	fcall	_DimmerIntrPointSelect
 18495                           
 18496                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 18497  0334  0879               	movf	_DimmerLightsIntr,w
 18498  0335  0086               	movwf	6
 18499  0336  3001               	movlw	1	; select bank2/3
 18500  0337  0087               	movwf	7
 18501  0338  1C01               	btfss	1,0
 18502  0339  2B8B               	goto	i1l6884
 18503                           
 18504                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 18505  033A  3001               	movlw	1
 18506  033B  00F2               	movwf	??_setDimmerLights_IntrControl
 18507  033C  0879               	movf	_DimmerLightsIntr,w
 18508  033D  3E03               	addlw	3
 18509  033E  0086               	movwf	6
 18510  033F  3001               	movlw	1	; select bank2/3
 18511  0340  0087               	movwf	7
 18512  0341  0872               	movf	??_setDimmerLights_IntrControl,w
 18513  0342  0781               	addwf	1,f
 18514                           
 18515                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 18516                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18517  0343  0022               	movlb	2	; select bank2
 18518  0344  0840               	movf	(_Dimmer^(0+256)+2),w
 18519  0345  00F2               	movwf	??_setDimmerLights_IntrControl
 18520  0346  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18521  0347  09F2               	comf	??_setDimmerLights_IntrControl,f
 18522  0348  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18523  0349  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18524  034A  1903               	skipnz
 18525  034B  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18526  034C  0879               	movf	_DimmerLightsIntr,w
 18527  034D  3E04               	addlw	4
 18528  034E  0086               	movwf	6
 18529  034F  3001               	movlw	1	; select bank2/3
 18530  0350  0087               	movwf	7
 18531  0351  0801               	movf	1,w
 18532  0352  0772               	addwf	??_setDimmerLights_IntrControl,w
 18533  0353  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18534  0354  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18535  0355  1803               	skipnc
 18536  0356  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18537  0357  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18538  0358  0879               	movf	_DimmerLightsIntr,w
 18539  0359  3E03               	addlw	3
 18540  035A  0086               	movwf	6
 18541  035B  3001               	movlw	1	; select bank2/3
 18542  035C  0087               	movwf	7
 18543  035D  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18544  035E  3A80               	xorlw	128
 18545  035F  3C80               	sublw	128
 18546  0360  1D03               	skipz
 18547  0361  2B64               	goto	u624_25
 18548  0362  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18549  0363  0201               	subwf	1,w
 18550  0364                     u624_25:	
 18551  0364  1C03               	skipc
 18552  0365  0008               	return
 18553                           
 18554                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 18555  0366  0879               	movf	_DimmerLightsIntr,w
 18556  0367  3E03               	addlw	3
 18557  0368  0086               	movwf	6
 18558  0369  3001               	movlw	1	; select bank2/3
 18559  036A  0087               	movwf	7
 18560  036B  0181               	clrf	1
 18561                           
 18562                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 18563  036C  0879               	movf	_DimmerLightsIntr,w
 18564  036D  0086               	movwf	6
 18565  036E  3001               	movlw	1	; select bank2/3
 18566  036F  0087               	movwf	7
 18567  0370  1001               	bcf	1,0
 18568                           
 18569                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 18570  0371  0879               	movf	_DimmerLightsIntr,w
 18571  0372  3E08               	addlw	8
 18572  0373  0086               	movwf	6
 18573  0374  3001               	movlw	1	; select bank2/3
 18574  0375  0087               	movwf	7
 18575  0376  1401               	bsf	1,0
 18576                           
 18577                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 18578  0377  0879               	movf	_DimmerLightsIntr,w
 18579  0378  3E09               	addlw	9
 18580  0379  0086               	movwf	6
 18581  037A  3001               	movlw	1	; select bank2/3
 18582  037B  0087               	movwf	7
 18583  037C  1E01               	btfss	1,4
 18584  037D  0008               	return
 18585                           
 18586                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 18587  037E  0879               	movf	_DimmerLightsIntr,w
 18588  037F  3E09               	addlw	9
 18589  0380  0086               	movwf	6
 18590  0381  3001               	movlw	1	; select bank2/3
 18591  0382  0087               	movwf	7
 18592  0383  1201               	bcf	1,4
 18593                           
 18594                           ;Dimmer_B1.c: 243: if (lights == 1) {
 18595  0384  0876               	movf	setDimmerLights_IntrControl@lights,w
 18596  0385  3A01               	xorlw	1
 18597  0386  1D03               	skipz
 18598  0387  0008               	return
 18599                           
 18600                           ;Dimmer_B1.c: 244: RB1 = 0;
 18601  0388  0020               	movlb	0	; select bank0
 18602  0389  108D               	bcf	13,1	;volatile
 18603                           
 18604                           ;Dimmer_B1.c: 246: }
 18605                           ;Dimmer_B1.c: 253: }
 18606                           ;Dimmer_B1.c: 254: }
 18607                           ;Dimmer_B1.c: 255: } else {
 18608  038A  0008               	return
 18609  038B                     i1l6884:	
 18610                           
 18611                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 18612  038B  0879               	movf	_DimmerLightsIntr,w
 18613  038C  3E08               	addlw	8
 18614  038D  0086               	movwf	6
 18615  038E  3001               	movlw	1	; select bank2/3
 18616  038F  0087               	movwf	7
 18617  0390  1C01               	btfss	1,0
 18618  0391  2C4F               	goto	i1l678
 18619                           
 18620                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 18621  0392  0879               	movf	_DimmerLightsIntr,w
 18622  0393  3E08               	addlw	8
 18623  0394  0086               	movwf	6
 18624  0395  3001               	movlw	1	; select bank2/3
 18625  0396  0087               	movwf	7
 18626  0397  1001               	bcf	1,0
 18627                           
 18628                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 18629  0398  0879               	movf	_DimmerLightsIntr,w
 18630  0399  0086               	movwf	6
 18631  039A  3001               	movlw	1	; select bank2/3
 18632  039B  0087               	movwf	7
 18633  039C  1C81               	btfss	1,1
 18634  039D  2C4F               	goto	i1l678
 18635                           
 18636                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 18637  039E  3001               	movlw	1
 18638  039F  00F2               	movwf	??_setDimmerLights_IntrControl
 18639  03A0  0A79               	incf	_DimmerLightsIntr,w
 18640  03A1  0086               	movwf	6
 18641  03A2  3001               	movlw	1	; select bank2/3
 18642  03A3  0087               	movwf	7
 18643  03A4  0872               	movf	??_setDimmerLights_IntrControl,w
 18644  03A5  0781               	addwf	1,f
 18645                           
 18646                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18647  03A6  0A79               	incf	_DimmerLightsIntr,w
 18648  03A7  0086               	movwf	6
 18649  03A8  3001               	movlw	1	; select bank2/3
 18650  03A9  0087               	movwf	7
 18651  03AA  0879               	movf	_DimmerLightsIntr,w
 18652  03AB  3E02               	addlw	2
 18653  03AC  0084               	movwf	4
 18654  03AD  3001               	movlw	1	; select bank2/3
 18655  03AE  0085               	movwf	5
 18656  03AF  0800               	movf	0,w
 18657  03B0  0201               	subwf	1,w
 18658  03B1  1C03               	skipc
 18659  03B2  2C4F               	goto	i1l678
 18660                           
 18661                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 18662  03B3  0A79               	incf	_DimmerLightsIntr,w
 18663  03B4  0086               	movwf	6
 18664  03B5  3001               	movlw	1	; select bank2/3
 18665  03B6  0087               	movwf	7
 18666  03B7  0181               	clrf	1
 18667                           
 18668                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 18669  03B8  0879               	movf	_DimmerLightsIntr,w
 18670  03B9  0086               	movwf	6
 18671  03BA  3001               	movlw	1	; select bank2/3
 18672  03BB  0087               	movwf	7
 18673  03BC  1D81               	btfss	1,3
 18674  03BD  2C04               	goto	i1l6914
 18675                           
 18676                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 18677  03BE  0879               	movf	_DimmerLightsIntr,w
 18678  03BF  0086               	movwf	6
 18679  03C0  3001               	movlw	1	; select bank2/3
 18680  03C1  0087               	movwf	7
 18681  03C2  1A01               	btfsc	1,4
 18682  03C3  2BE5               	goto	i1l6906
 18683                           
 18684                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(65*0.8))) {
 18685  03C4  0879               	movf	_DimmerLightsIntr,w
 18686  03C5  3E04               	addlw	4
 18687  03C6  0086               	movwf	6
 18688  03C7  3001               	movlw	1	; select bank2/3
 18689  03C8  0087               	movwf	7
 18690  03C9  3034               	movlw	52
 18691  03CA  0201               	subwf	1,w
 18692  03CB  1803               	skipnc
 18693  03CC  2BD6               	goto	i1l6902
 18694                           
 18695                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 18696  03CD  3001               	movlw	1
 18697  03CE  00F2               	movwf	??_setDimmerLights_IntrControl
 18698  03CF  0879               	movf	_DimmerLightsIntr,w
 18699  03D0  3E04               	addlw	4
 18700  03D1  0086               	movwf	6
 18701  03D2  3001               	movlw	1	; select bank2/3
 18702  03D3  0087               	movwf	7
 18703  03D4  0872               	movf	??_setDimmerLights_IntrControl,w
 18704  03D5  0781               	addwf	1,f
 18705  03D6                     i1l6902:	
 18706                           
 18707                           ;Dimmer_B1.c: 266: }
 18708                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(65*0.8))) {
 18709  03D6  0879               	movf	_DimmerLightsIntr,w
 18710  03D7  3E04               	addlw	4
 18711  03D8  0086               	movwf	6
 18712  03D9  3001               	movlw	1	; select bank2/3
 18713  03DA  0087               	movwf	7
 18714  03DB  0801               	movf	1,w
 18715  03DC  3A34               	xorlw	52
 18716  03DD  1D03               	skipz
 18717  03DE  2C4F               	goto	i1l678
 18718                           
 18719                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 18720  03DF  0879               	movf	_DimmerLightsIntr,w
 18721  03E0  0086               	movwf	6
 18722  03E1  3001               	movlw	1	; select bank2/3
 18723  03E2  0087               	movwf	7
 18724  03E3  1601               	bsf	1,4
 18725                           
 18726                           ;Dimmer_B1.c: 269: }
 18727                           ;Dimmer_B1.c: 270: } else {
 18728  03E4  2C4F               	goto	i1l678
 18729  03E5                     i1l6906:	
 18730                           
 18731                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18732  03E5  0879               	movf	_DimmerLightsIntr,w
 18733  03E6  3E04               	addlw	4
 18734  03E7  0086               	movwf	6
 18735  03E8  3001               	movlw	1	; select bank2/3
 18736  03E9  0087               	movwf	7
 18737  03EA  300D               	movlw	13
 18738  03EB  0201               	subwf	1,w
 18739  03EC  1C03               	skipc
 18740  03ED  2BF5               	goto	i1l6910
 18741                           
 18742                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 18743  03EE  0879               	movf	_DimmerLightsIntr,w
 18744  03EF  3E04               	addlw	4
 18745  03F0  0086               	movwf	6
 18746  03F1  3001               	movlw	1	; select bank2/3
 18747  03F2  0087               	movwf	7
 18748  03F3  3001               	movlw	1
 18749  03F4  0281               	subwf	1,f
 18750  03F5                     i1l6910:	
 18751                           
 18752                           ;Dimmer_B1.c: 273: }
 18753                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18754  03F5  0879               	movf	_DimmerLightsIntr,w
 18755  03F6  3E04               	addlw	4
 18756  03F7  0086               	movwf	6
 18757  03F8  3001               	movlw	1	; select bank2/3
 18758  03F9  0087               	movwf	7
 18759  03FA  0801               	movf	1,w
 18760  03FB  3A0C               	xorlw	12
 18761  03FC  1D03               	skipz
 18762  03FD  2C4F               	goto	i1l678
 18763                           
 18764                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 18765  03FE  0879               	movf	_DimmerLightsIntr,w
 18766  03FF  0086               	movwf	6
 18767  0400  3001               	movlw	1	; select bank2/3
 18768  0401  0087               	movwf	7
 18769  0402  1201               	bcf	1,4
 18770                           
 18771                           ;Dimmer_B1.c: 276: }
 18772                           ;Dimmer_B1.c: 277: }
 18773                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 18774  0403  2C4F               	goto	i1l678
 18775  0404                     i1l6914:	
 18776  0404  0879               	movf	_DimmerLightsIntr,w
 18777  0405  0086               	movwf	6
 18778  0406  3001               	movlw	1	; select bank2/3
 18779  0407  0087               	movwf	7
 18780  0408  1D01               	btfss	1,2
 18781  0409  2C4F               	goto	i1l678
 18782                           
 18783                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18784  040A  0879               	movf	_DimmerLightsIntr,w
 18785  040B  3E04               	addlw	4
 18786  040C  0086               	movwf	6
 18787  040D  3001               	movlw	1	; select bank2/3
 18788  040E  0087               	movwf	7
 18789  040F  0879               	movf	_DimmerLightsIntr,w
 18790  0410  3E05               	addlw	5
 18791  0411  0084               	movwf	4
 18792  0412  3001               	movlw	1	; select bank2/3
 18793  0413  0085               	movwf	5
 18794  0414  0800               	movf	0,w
 18795  0415  0201               	subwf	1,w
 18796  0416  1803               	skipnc
 18797  0417  2C22               	goto	i1l6920
 18798                           
 18799                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 18800  0418  3001               	movlw	1
 18801  0419  00F2               	movwf	??_setDimmerLights_IntrControl
 18802  041A  0879               	movf	_DimmerLightsIntr,w
 18803  041B  3E04               	addlw	4
 18804  041C  0086               	movwf	6
 18805  041D  3001               	movlw	1	; select bank2/3
 18806  041E  0087               	movwf	7
 18807  041F  0872               	movf	??_setDimmerLights_IntrControl,w
 18808  0420  0781               	addwf	1,f
 18809                           
 18810                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18811  0421  2C37               	goto	i1l6924
 18812  0422                     i1l6920:	
 18813  0422  0879               	movf	_DimmerLightsIntr,w
 18814  0423  3E05               	addlw	5
 18815  0424  0086               	movwf	6
 18816  0425  3001               	movlw	1	; select bank2/3
 18817  0426  0087               	movwf	7
 18818  0427  0879               	movf	_DimmerLightsIntr,w
 18819  0428  3E04               	addlw	4
 18820  0429  0084               	movwf	4
 18821  042A  3001               	movlw	1	; select bank2/3
 18822  042B  0085               	movwf	5
 18823  042C  0800               	movf	0,w
 18824  042D  0201               	subwf	1,w
 18825  042E  1803               	skipnc
 18826  042F  2C37               	goto	i1l6924
 18827                           
 18828                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 18829  0430  0879               	movf	_DimmerLightsIntr,w
 18830  0431  3E04               	addlw	4
 18831  0432  0086               	movwf	6
 18832  0433  3001               	movlw	1	; select bank2/3
 18833  0434  0087               	movwf	7
 18834  0435  3001               	movlw	1
 18835  0436  0281               	subwf	1,f
 18836  0437                     i1l6924:	
 18837                           
 18838                           ;Dimmer_B1.c: 283: }
 18839                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 18840  0437  0879               	movf	_DimmerLightsIntr,w
 18841  0438  3E05               	addlw	5
 18842  0439  0086               	movwf	6
 18843  043A  3001               	movlw	1	; select bank2/3
 18844  043B  0087               	movwf	7
 18845  043C  0879               	movf	_DimmerLightsIntr,w
 18846  043D  3E04               	addlw	4
 18847  043E  0084               	movwf	4
 18848  043F  3001               	movlw	1	; select bank2/3
 18849  0440  0085               	movwf	5
 18850  0441  0800               	movf	0,w
 18851  0442  0601               	xorwf	1,w
 18852  0443  1D03               	skipz
 18853  0444  2C4F               	goto	i1l678
 18854                           
 18855                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 18856  0445  0879               	movf	_DimmerLightsIntr,w
 18857  0446  0086               	movwf	6
 18858  0447  3001               	movlw	1	; select bank2/3
 18859  0448  0087               	movwf	7
 18860  0449  1101               	bcf	1,2
 18861                           
 18862                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 18863  044A  0879               	movf	_DimmerLightsIntr,w
 18864  044B  0086               	movwf	6
 18865  044C  3001               	movlw	1	; select bank2/3
 18866  044D  0087               	movwf	7
 18867  044E  1081               	bcf	1,1
 18868  044F                     i1l678:	
 18869                           
 18870                           ;Dimmer_B1.c: 287: }
 18871                           ;Dimmer_B1.c: 288: }
 18872                           ;Dimmer_B1.c: 289: }
 18873                           ;Dimmer_B1.c: 290: }
 18874                           ;Dimmer_B1.c: 291: }
 18875                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 18876  044F  0879               	movf	_DimmerLightsIntr,w
 18877  0450  3E09               	addlw	9
 18878  0451  0086               	movwf	6
 18879  0452  3001               	movlw	1	; select bank2/3
 18880  0453  0087               	movwf	7
 18881  0454  1D81               	btfss	1,3
 18882  0455  0008               	return
 18883                           
 18884                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 18885  0456  3001               	movlw	1
 18886  0457  00F2               	movwf	??_setDimmerLights_IntrControl
 18887  0458  0879               	movf	_DimmerLightsIntr,w
 18888  0459  3E0C               	addlw	12
 18889  045A  0086               	movwf	6
 18890  045B  3001               	movlw	1	; select bank2/3
 18891  045C  0087               	movwf	7
 18892  045D  0872               	movf	??_setDimmerLights_IntrControl,w
 18893  045E  0781               	addwf	1,f
 18894                           
 18895                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 18896  045F  0879               	movf	_DimmerLightsIntr,w
 18897  0460  3E0C               	addlw	12
 18898  0461  0086               	movwf	6
 18899  0462  3001               	movlw	1	; select bank2/3
 18900  0463  0087               	movwf	7
 18901  0464  0801               	movf	1,w
 18902  0465  3A05               	xorlw	5
 18903  0466  1D03               	skipz
 18904  0467  0008               	return
 18905                           
 18906                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 18907  0468  0879               	movf	_DimmerLightsIntr,w
 18908  0469  3E0C               	addlw	12
 18909  046A  0086               	movwf	6
 18910  046B  3001               	movlw	1	; select bank2/3
 18911  046C  0087               	movwf	7
 18912  046D  0181               	clrf	1
 18913                           
 18914                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 18915  046E  0879               	movf	_DimmerLightsIntr,w
 18916  046F  3E09               	addlw	9
 18917  0470  0086               	movwf	6
 18918  0471  3001               	movlw	1	; select bank2/3
 18919  0472  0087               	movwf	7
 18920  0473  1181               	bcf	1,3
 18921  0474  0008               	return
 18922  0475                     __end_of_setDimmerLights_IntrControl:	
 18923                           
 18924                           	psect	text132
 18925  1BE5                     __ptext132:	
 18926 ;; *************** function _DimmerIntrPointSelect *****************
 18927 ;; Defined at:
 18928 ;;		line 72 in file "../src/Dimmer_B1.c"
 18929 ;; Parameters:    Size  Location     Type
 18930 ;;  lights          1    wreg     unsigned char 
 18931 ;; Auto vars:     Size  Location     Type
 18932 ;;  lights          1    1[COMMON] unsigned char 
 18933 ;; Return value:  Size  Location     Type
 18934 ;;		None               void
 18935 ;; Registers used:
 18936 ;;		wreg
 18937 ;; Tracked objects:
 18938 ;;		On entry : 0/0
 18939 ;;		On exit  : 0/0
 18940 ;;		Unchanged: 0/0
 18941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18946 ;;Total ram usage:        2 bytes
 18947 ;; Hardware stack levels used:    1
 18948 ;; This function calls:
 18949 ;;		Nothing
 18950 ;; This function is called by:
 18951 ;;		_setDimmerLights_IntrControl
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           
 18956                           ;psect for function _DimmerIntrPointSelect
 18957  1BE5                     _DimmerIntrPointSelect:	
 18958                           
 18959                           ;incstack = 0
 18960                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18961                           ;DimmerIntrPointSelect@lights stored from wreg
 18962  1BE5  00F1               	movwf	DimmerIntrPointSelect@lights
 18963                           
 18964                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18965  1BE6  0871               	movf	DimmerIntrPointSelect@lights,w
 18966  1BE7  3A01               	xorlw	1
 18967  1BE8  1D03               	skipz
 18968  1BE9  0008               	return
 18969                           
 18970                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18971  1BEA  30C5               	movlw	_DimmerLights1& (0+255)
 18972  1BEB  00F0               	movwf	??_DimmerIntrPointSelect
 18973  1BEC  0870               	movf	??_DimmerIntrPointSelect,w
 18974  1BED  00F9               	movwf	_DimmerLightsIntr
 18975  1BEE  0008               	return
 18976  1BEF                     __end_of_DimmerIntrPointSelect:	
 18977                           
 18978                           	psect	text133
 18979  1CB4                     __ptext133:	
 18980 ;; *************** function _IOC_ISR *****************
 18981 ;; Defined at:
 18982 ;;		line 400 in file "../src/MCU_B1.c"
 18983 ;; Parameters:    Size  Location     Type
 18984 ;;		None
 18985 ;; Auto vars:     Size  Location     Type
 18986 ;;		None
 18987 ;; Return value:  Size  Location     Type
 18988 ;;		None               void
 18989 ;; Registers used:
 18990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18991 ;; Tracked objects:
 18992 ;;		On entry : 0/0
 18993 ;;		On exit  : 0/0
 18994 ;;		Unchanged: 0/0
 18995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19000 ;;Total ram usage:        0 bytes
 19001 ;; Hardware stack levels used:    1
 19002 ;; Hardware stack levels required when called:    3
 19003 ;; This function calls:
 19004 ;;		_setDimmerReClock
 19005 ;; This function is called by:
 19006 ;;		_ISR
 19007 ;; This function uses a non-reentrant model
 19008 ;;
 19009                           
 19010                           
 19011                           ;psect for function _IOC_ISR
 19012  1CB4                     _IOC_ISR:	
 19013                           
 19014                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19015                           
 19016                           ;incstack = 0
 19017                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19018  1CB4  1D8B               	btfss	11,3	;volatile
 19019  1CB5  0008               	return
 19020  1CB6  1C0B               	btfss	11,0	;volatile
 19021  1CB7  0008               	return
 19022  1CB8  0027               	movlb	7	; select bank7
 19023  1CB9  1D16               	btfss	22,2	;volatile
 19024  1CBA  0008               	return
 19025                           
 19026                           ;MCU_B1.c: 402: IOCBF2 = 0;
 19027  1CBB  1116               	bcf	22,2	;volatile
 19028                           
 19029                           ;MCU_B1.c: 403: IOCIF = 0;
 19030  1CBC  100B               	bcf	11,0	;volatile
 19031                           
 19032                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 19033  1CBD  0021               	movlb	1	; select bank1
 19034  1CBE  1C20               	btfss	_myMain^(0+128),0
 19035  1CBF  0008               	return
 19036                           
 19037                           ;MCU_B1.c: 407: setDimmerReClock();
 19038  1CC0  319B  2373         	fcall	_setDimmerReClock
 19039  1CC2  0008               	return
 19040  1CC3                     __end_of_IOC_ISR:	
 19041                           
 19042                           	psect	text134
 19043  1B73                     __ptext134:	
 19044 ;; *************** function _setDimmerReClock *****************
 19045 ;; Defined at:
 19046 ;;		line 243 in file "../src/MCU_B1.c"
 19047 ;; Parameters:    Size  Location     Type
 19048 ;;		None
 19049 ;; Auto vars:     Size  Location     Type
 19050 ;;		None
 19051 ;; Return value:  Size  Location     Type
 19052 ;;		None               void
 19053 ;; Registers used:
 19054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19055 ;; Tracked objects:
 19056 ;;		On entry : 0/0
 19057 ;;		On exit  : 0/0
 19058 ;;		Unchanged: 0/0
 19059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19064 ;;Total ram usage:        0 bytes
 19065 ;; Hardware stack levels used:    1
 19066 ;; Hardware stack levels required when called:    2
 19067 ;; This function calls:
 19068 ;;		_setDimmerLights_IntrIOC_GO
 19069 ;; This function is called by:
 19070 ;;		_IOC_ISR
 19071 ;; This function uses a non-reentrant model
 19072 ;;
 19073                           
 19074                           
 19075                           ;psect for function _setDimmerReClock
 19076  1B73                     _setDimmerReClock:	
 19077                           
 19078                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 19079                           
 19080                           ;incstack = 0
 19081                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19082  1B73  3001               	movlw	1
 19083  1B74  3193  2346         	fcall	_setDimmerLights_IntrIOC_GO
 19084  1B76  0008               	return
 19085  1B77                     __end_of_setDimmerReClock:	
 19086                           
 19087                           	psect	text135
 19088  1346                     __ptext135:	
 19089 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19090 ;; Defined at:
 19091 ;;		line 28 in file "../src/Dimmer_B1.c"
 19092 ;; Parameters:    Size  Location     Type
 19093 ;;  lights          1    wreg     unsigned char 
 19094 ;; Auto vars:     Size  Location     Type
 19095 ;;  lights          1    2[COMMON] unsigned char 
 19096 ;; Return value:  Size  Location     Type
 19097 ;;		None               void
 19098 ;; Registers used:
 19099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19100 ;; Tracked objects:
 19101 ;;		On entry : 0/0
 19102 ;;		On exit  : 0/0
 19103 ;;		Unchanged: 0/0
 19104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19109 ;;Total ram usage:        1 bytes
 19110 ;; Hardware stack levels used:    1
 19111 ;; Hardware stack levels required when called:    1
 19112 ;; This function calls:
 19113 ;;		_DimmerIntrIOCPointSelect
 19114 ;; This function is called by:
 19115 ;;		_setDimmerReClock
 19116 ;; This function uses a non-reentrant model
 19117 ;;
 19118                           
 19119                           
 19120                           ;psect for function _setDimmerLights_IntrIOC_GO
 19121  1346                     _setDimmerLights_IntrIOC_GO:	
 19122                           
 19123                           ;incstack = 0
 19124                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19125                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19126  1346  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19127                           
 19128                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19129  1347  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19130  1348  319B  23F9  3193   	fcall	_DimmerIntrIOCPointSelect
 19131                           
 19132                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 19133  134B  0021               	movlb	1	; select bank1
 19134  134C  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19135  134D  0086               	movwf	6
 19136  134E  3001               	movlw	1	; select bank2/3
 19137  134F  0087               	movwf	7
 19138  1350  1801               	btfsc	1,0
 19139  1351  0008               	return
 19140  1352  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19141  1353  3E09               	addlw	9
 19142  1354  0086               	movwf	6
 19143  1355  3001               	movlw	1	; select bank2/3
 19144  1356  0087               	movwf	7
 19145  1357  1981               	btfsc	1,3
 19146  1358  0008               	return
 19147  1359  0020               	movlb	0	; select bank0
 19148  135A  190D               	btfsc	13,2	;volatile
 19149  135B  0008               	return
 19150                           
 19151                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19152  135C  0021               	movlb	1	; select bank1
 19153  135D  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19154  135E  0086               	movwf	6
 19155  135F  3001               	movlw	1	; select bank2/3
 19156  1360  0087               	movwf	7
 19157  1361  1401               	bsf	1,0
 19158                           
 19159                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19160  1362  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19161  1363  3E09               	addlw	9
 19162  1364  0086               	movwf	6
 19163  1365  3001               	movlw	1	; select bank2/3
 19164  1366  0087               	movwf	7
 19165  1367  1581               	bsf	1,3
 19166                           
 19167                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 19168  1368  0022               	movlb	2	; select bank2
 19169  1369  01C0               	clrf	(_Dimmer^(0+256)+2)
 19170                           
 19171                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19172  136A  0021               	movlb	1	; select bank1
 19173  136B  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19174  136C  0086               	movwf	6
 19175  136D  3001               	movlw	1	; select bank2/3
 19176  136E  0087               	movwf	7
 19177  136F  1F01               	btfss	1,6
 19178  1370  0008               	return
 19179                           
 19180                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 19181  1371  084F               	movf	_DimmerLightsIntrIOC^(0+128),w
 19182  1372  3E09               	addlw	9
 19183  1373  0086               	movwf	6
 19184  1374  3001               	movlw	1	; select bank2/3
 19185  1375  0087               	movwf	7
 19186  1376  1601               	bsf	1,4
 19187                           
 19188                           ;Dimmer_B1.c: 53: if (lights == 1) {
 19189  1377  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19190  1378  3A01               	xorlw	1
 19191  1379  1D03               	skipz
 19192  137A  0008               	return
 19193                           
 19194                           ;Dimmer_B1.c: 54: RB1 = 1;
 19195  137B  0020               	movlb	0	; select bank0
 19196  137C  148D               	bsf	13,1	;volatile
 19197  137D  0008               	return
 19198  137E                     __end_of_setDimmerLights_IntrIOC_GO:	
 19199                           
 19200                           	psect	text136
 19201  1BF9                     __ptext136:	
 19202 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19203 ;; Defined at:
 19204 ;;		line 8 in file "../src/Dimmer_B1.c"
 19205 ;; Parameters:    Size  Location     Type
 19206 ;;  lights          1    wreg     unsigned char 
 19207 ;; Auto vars:     Size  Location     Type
 19208 ;;  lights          1    1[COMMON] unsigned char 
 19209 ;; Return value:  Size  Location     Type
 19210 ;;		None               void
 19211 ;; Registers used:
 19212 ;;		wreg
 19213 ;; Tracked objects:
 19214 ;;		On entry : 0/0
 19215 ;;		On exit  : 0/0
 19216 ;;		Unchanged: 0/0
 19217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19220 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19221 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19222 ;;Total ram usage:        2 bytes
 19223 ;; Hardware stack levels used:    1
 19224 ;; This function calls:
 19225 ;;		Nothing
 19226 ;; This function is called by:
 19227 ;;		_setDimmerLights_IntrIOC_GO
 19228 ;; This function uses a non-reentrant model
 19229 ;;
 19230                           
 19231                           
 19232                           ;psect for function _DimmerIntrIOCPointSelect
 19233  1BF9                     _DimmerIntrIOCPointSelect:	
 19234                           
 19235                           ;incstack = 0
 19236                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19237                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19238  1BF9  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19239                           
 19240                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19241  1BFA  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19242  1BFB  3A01               	xorlw	1
 19243  1BFC  1D03               	skipz
 19244  1BFD  0008               	return
 19245                           
 19246                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19247  1BFE  30C5               	movlw	_DimmerLights1& (0+255)
 19248  1BFF  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19249  1C00  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19250  1C01  0021               	movlb	1	; select bank1
 19251  1C02  00CF               	movwf	_DimmerLightsIntrIOC^(0+128)
 19252  1C03  0008               	return
 19253  1C04                     __end_of_DimmerIntrIOCPointSelect:	
 19254  007E                     btemp	set	126	;btemp
 19255  007E                     pic14e$flags	set	126
 19256  007E                     wtemp	set	126
 19257  007E                     wtemp0	set	126
 19258  0080                     wtemp1	set	128
 19259  0082                     wtemp2	set	130
 19260  0084                     wtemp3	set	132
 19261  0086                     wtemp4	set	134
 19262  0088                     wtemp5	set	136
 19263  007F                     wtemp6	set	127
 19264  007E                     ttemp	set	126
 19265  007E                     ttemp0	set	126
 19266  0081                     ttemp1	set	129
 19267  0084                     ttemp2	set	132
 19268  0087                     ttemp3	set	135
 19269  007F                     ttemp4	set	127
 19270  007E                     ltemp	set	126
 19271  007E                     ltemp0	set	126
 19272  0082                     ltemp1	set	130
 19273  0086                     ltemp2	set	134
 19274  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         228
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      80
    BANK2            80      0      79
    BANK3            80      0      70
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_getMain_All_Error_Status
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   76259
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     445
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1449
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    1449
                                             13 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0    9271
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4946
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     332
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4097
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     690
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     690
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   23078
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   23078
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   22295
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1331
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   20780
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    6014
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1595
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   11659
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11458
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11392
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11348
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1180
                                              9 BANK0      7     7      0
                            ___lwdiv
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      72
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     712
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     712
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1097
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    9804
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       2     2      0     206
                                              7 BANK0      2     2      0
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   21752
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   21361
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1    9593
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   10349
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     348
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0    8846
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     380
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     173
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3246
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     646
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     183
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3173
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3173
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    1820
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1530
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     194
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     194
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     942
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     132
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0      66
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0      66
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      66
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      66
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      66
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Exception_Main
     _getMain_All_Error_Status
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     163      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     163      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Dec 10 16:24:18 2014

                   __size_of_Switch_Main 0020                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l84 16C5                                       l94 1544  
                                     l86 16D9                                       l95 1540  
                                     l96 152E                                       l98 153E  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F75  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1C3B  
                 __end_of_setDelayOff_GO 08B6                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 0800  
                   _setDimmerLights_Line 1C5D                             ___ftadd@sign 004B  
                                    l231 0A0D                                      l304 1DBC  
                                    l305 1DBD                     _setDimmerLights_SwOn 13BA  
                                    l348 107A                                      l709 119A  
                                    _GIE 005F                                      _CRC 00CD  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RA6 0066                                      _RC3 0073  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RF1 00BA                                      _ISR 0004  
                                    _WDT 00CB             getDimmerLights_Status@lights 0022  
                                    _Sw1 01D4                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1DC6                    _Buzzer_Initialization 1B64  
                        __end_of_ADC_Set 1BBA                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                   _setMain_Exception$3322 0039  
                        _setDimmerLights 0CD7                        ??_getSw_KeyStatus 0020  
                  _setDimmerLights_AdjRF 1FB9                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 0032                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1CC3                               Load_Main@i 002F  
                             Load_Main@j 002B                             ___ftdiv@sign 003D  
                                   l2012 0646                                     l2021 05C9  
                                   l1206 1591                                     l2014 0594  
                                   l2023 0602                                     l2015 0596  
                                   l2016 059E                                     l2107 1460  
                                   l1183 12D3                                     l1433 11FF  
                                   l2057 1CC8                                     l2081 130B  
                                   l2065 0D97                                     l2401 0326  
               ?_DimmerLightsPointSelect 0070                                     l2075 0DED  
                                   l2403 01FF                                     l1428 11E8  
                                   l1429 1203                                     l1197 1169  
                                   l1550 01BA                                     l2095 0972  
                                   l1553 007A                                     l1385 13B8  
                                   l1554 018A                                     l1555 0188  
                        __end_of_IOC_Set 1C8D                                     l2391 1F04  
                                   l2377 1E0B                           _Load_Main$3653 002D  
                                   l6100 1E26                                     l6102 1E2A  
                                   l6120 1671                                     l2744 09BD  
                                   l6200 1FA9                                     l1696 0F48  
                                   l6122 1646                                     l2738 09A6  
                                   l6124 1677                                     l6052 11AD  
                                   l7100 17C3                                     l6310 0939  
                                   l7110 17E1                                     l2767 0514  
                                   l6224 11E3                                     l5512 0983  
                                   l5600 04EA                                     l6152 15CC  
                                   l6320 0957                                     l6234 11FA  
                                   l6226 11EC                                     l5522 09AB  
                                   l5514 098D                                     l5610 0506  
                                   l5602 04EF                                     l6402 0B8D  
                                   l6330 09DB                                     l6170 144E  
                                   l6314 094F                                     l7106 17D1  
                                   l7202 0F2B                                     l7050 1F22  
                                   l6180 1E53                                     l5540 1D5F  
                                   l6260 1299                                     l6252 1285  
                                   l5524 09B3                                     l5516 0992  
                                   l5508 097C                                     l5620 0538  
                                   l5612 0510                                     l5604 04F3  
                                   l6420 0BB6                                     l6332 09DE  
                                   l5700 0FB4                                     l6156 15DB  
                                   l6316 0953                                     l7116 17F1  
                                   l7204 0F2C                                     l6246 127C  
                                   l5630 0553                                     l6350 09F5  
                                   l7118 17FA                                     l7206 0F42  
                                   l7054 1F27                                     l6184 1E59  
                                   l6440 108B                                     l5536 1D59  
                                   l5616 0526                                     l5640 0E07  
                                   l6520 0D25                                     l7072 1567  
                                   l6360 0A1C                                     l6336 09E4  
                                   l5712 0FD0                                     l5704 0FBC  
                                   l7160 0EB5                                     l7048 1F1F  
                                   l6178 1E50                                     l6442 1096  
                                   l6450 1F5F                                     l5570 049D  
                                   l7066 1552                                     l6194 1FA0  
                                   l6418 0B9E                                     l6362 0A20  
                                   l6354 0A13                                     l7306 0634  
                                   l7242 05B5                                     l5900 089E  
                                   l5580 04B3                                     l5660 0E5E  
                                   l5740 0C69                                     l6532 0D4C  
                                   l6540 0B15                                     l6196 1FA3  
                                   l6380 0B69                                     l6364 0A23  
                                   l6356 0A16                                     l5716 0FD8  
                                   l7324 1E10                                     l7092 17B0  
                  _setDimmerLights_SwOff 14B8                                     l6454 1F65  
                                   l5902 08A7                                     l5558 1F80  
                                   l5574 04A4                                     l5646 0E1D  
                                   l6630 1151                                     l6382 0B6C  
                                   l6710 0D9A                                     l7342 01EA  
                                   l7190 0F14                                     l6448 1F5C  
                                   l5824 15FE                                     l5592 04CD  
                                   l5760 0CA7                                     l7504 1191  
                                   l7440 1336                                     l7432 1318  
                                   l6368 0A29                                     l7328 1E16  
                                   l7192 0F16                                     l5850 1635  
                                   l5842 1624                                     l5834 1606  
                                   l5818 15F3                                     l5770 0CC0  
                                   l7506 1194                                     l7434 1324  
                                   l6386 0B72                                     l5682 0F63  
                                   l6298 0914                                     l6722 0DB2  
                                   l7418 0322                                     l5836 1612  
                                   l5668 0E77                                     l7508 119C  
                                   l7444 133F                                     l6396 0B84  
                                   l6388 0B75                                     l6732 0DD8  
                                   l7276 05E7                                     l6564 124D  
                                   l7700 1426                                     l5846 162D  
                                   l6494 1139                                     l5598 04E0  
                                   l5774 0CCE                                     l5766 0CB4  
                                   l5758 0C99                                     l6398 0B87  
                                   l7278 05E9                                     l7294 0613  
                                   l7382 029D                                     l7358 022D  
                                   l6496 111D                                     l5768 0CBD  
                                   l5688 0F79                                     l7368 025F  
                                   l7392 02CF                                     l7458 1518  
                                   l5794 1114                                     l6498 113E  
                                   l6674 1D3F                                     l6738 0DE3  
                                   l6586 1C43                                     l6762 1D50  
                                   l6780 1499                                     l5980 14EC  
                                   l5964 13F0                                     l7900 1F0D  
                                   l6790 14A9                                     l6782 149C  
                                   l5894 088B                                     l7566 06BC  
                                   l7814 014D                                     l7670 0C1D  
                                   l7718 1398                                     l6792 14AC  
                                   l6960 0825                                     l7808 0140  
                                   l7816 0153                                     l6786 14A2  
                                   l5898 0891                                     l6962 082B  
                                   l7914 1E73                                     l7826 0168  
                                   l6698 0D83                                     l7666 0C15  
                                   l7658 0BF0                                     l6796 14B2  
                                   l6972 0853                                     l7756 0069  
                  _myMain_Initialization 1066                                     l5998 1794  
                                   l7686 0C4A                                     l7784 00BF  
                                   l7778 0095                                     l7876 01A8  
                                   l7992 171C                                     _CFGS 0CAE  
                                   l7988 1711                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4115 09A1                                     u5030 1752  
                                   u4135 09AE                                     u4305 04CE  
                                   u5035 1750                                     u4165 09C4  
                                   u4095 0988                                     u4335 04E1  
                                   u4505 0E78                                     _PEIE 005E  
                                   u5085 1DE9                                     u4365 04F4  
                                   u5175 164F                                     u4615 0FD9  
                                   u4465 0E2F                                     u4625 0FDF  
                                   u4545 0F85                                     u4395 0507  
                                   u4475 0E3F                                     u4555 0F95  
                                   u4485 0E5F                                     u4725 0CB5  
                                   u4495 0E6E                                     u7215 131B  
                                   u4575 0FBD                                     u5625 1080  
                                   u4825 1609                                     u4665 0C70  
                                   u4585 0FC3                                     u7235 1325  
                                   u4845 1613                                     u5725 1126  
                                   u7245 132F                                     u4855 161D  
                                   u4775 1100                                     u4695 0C9A  
                                   u7255 1337                                     u4865 1625  
                                   u6705 0EFC                                     u7515 12CA  
                                   u7285 150E                                     u6725 0F1C  
                                   u6825 05AF                                     u7625 0C37  
                                   u7725 13B0                                     u7575 0C03  
                                   u6945 0624                                     u7915 0159  
                                   u7675 141D                                     u7685 142C  
                                   u7855 0100                                     _LWLO 0CAD  
                                   _RSSI 00D0                                     _WREN 0CAA  
                                   _Buz1 00AE                                     _Load 0141  
                                   _Temp 00D7                                     _main 16ED  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0913  
                        __end_of_RF_Main 1B6D                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1C30                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1B73  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1475                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1CD2  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 1B93         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1BEF                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EC                          __end_of___awdiv 163C  
                        __end_of___ftadd 056B                          __end_of___ftdiv 0E99  
                        __end_of___ftneg 1BD3                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CD7                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 1346                                    i1l678 044F  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1DEF  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 137E  
             _setDimmerLights_IntrIOC_GO 1346                         __end_of_TMR1_ISR 2000  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 1694  
             _setDimmerLights_ErrorClose 163C                         __end_of_TMR1_Set 1C99  
                                  _getAD 1F14                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1D8C              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 1D02  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 1141  
          __end_of_setLED_Initialization 1D23                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1748  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0070                        setTemp_Main@error 002F  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0A9A  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ?_setMemory_Modify 0070  
                __size_of_getDelayOff_GO 0010                        ??_setPercentValue 005C  
                           __end_of_main 1748                      ?_setRF_DimmerLights 0020  
                       __end_of_Fosc_Set 1B97                       ??_setMemory_Modify 0020  
                         _Exception_Main 1E61                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D60  
                   _setSw_Initialization 1D02                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0913                           _setMemory_Data 1C69  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000B  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C1A  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 08B6                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1F97  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 09D4  
               _getMain_All_Error_Status 11D2                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1E97                                   i1l6910 03F5  
                                 i1l6902 03D6                                   i1l6920 0422  
                                 i1l6906 03E5                                   i1l6914 0404  
                                 i1l6924 0437                                   i1l6884 038B  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u624_25 0364                                   _OSCCON 0099  
                     __size_of_Load_Main 017D                                   u744_25 1FFA  
                                 _TMR1IE 0488                                   _TMR1IF 0088  
                                 _IO_Set 1E30                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1B63  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1E04  
                                 _Dimmer 013E                                   _DlySw1 01DD  
             __end_of_Mcu_Initialization 1D7A                      __end_of_Buzzer_Main 154B  
                                 _Memory 01A0                                   _Timer1 00C6  
     __end_of_setDimmerLights_TriggerAdj 1EF4               _setDimmerLights_TriggerAdj 1ED4  
                                 ___bmul 1D56                   __end_of_Exception_Main 1E7B  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
                              ??___lwdiv 0024              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D5                                   _s_data 00D6  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 126D  
                                 _myMain 00A0                   __end_of_setMemory_Data 1C75  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 1694                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1BA1         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 0475  
            _setDimmerLights_IntrControl 032F                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1DB2  
            getMain_Lights_Count@status1 0023              getMain_Lights_Count@status2 0021  
            getMain_Lights_Count@status3 0022                    __end_of_SwPointSelect 1C51  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 000B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1E04  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0AFF  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 003F  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$4904 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                          ?_Exception_Main 0070  
                           __pidataBANK4 1F34                            __end_of_getAD 1F34  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
                 setLoad_AH_AL_Restore@i 0021                setMemory_LoopSave@command 0021  
           __size_of_setDimmerLights_Adj 0066                       _LED_Initialization 1B8B  
                        _getSw_KeyStatus 1D45                ??_setControl_Lights_Table 006B  
                     getRF_KeyStatus@key 0021                         ??_DelayTimejudge 0024  
                        ?_setMemory_Data 0020            ??_Flash_Memory_Initialization 0062  
                       ?_setDimmerLights 0062                     _getMain_Lights_Count 1CF2  
                              ?_WDT_Main 0070                        __end_of_Load_Main 01C0  
                     __size_of_getBuz_GO 0011                     _getMain_LightsStatus 1116  
             __end_of_set_TimeoutCleared 1B9C                 __end_of_setDimmerReClock 1B77  
                     __size_of_getRxData 0090                      ?_LED_Initialization 0070  
                  getMain_LightsStatus@i 0026                        ?_CC2500_WriteByte 0070  
                         _DimmerLights11 00CE                     __size_of_setLED_Main 0033  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1B6D                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1501  
                      ??_setRFSW_Control 0031                        __end_of_Temp_Main 1B73  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1B83  
              getMain_LightsStatus@count 0025                            ??_Switch_Main 003D  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006F  
                      LedPointSelect@led 0021                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 0014                              setBuz@count 002C  
                ?_getDimmerLights_Status 0070                               __pmaintext 16ED  
                         _getDelayOff_GO 1CE2                      _CC2500_WriteCommand 1E48  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 002C  
          ??_DimmerLights_Initialization 0024                               ??_TMR1_ISR 0077  
                          ?_setTemp_Main 0070                               _getLoad_AD 0BCF  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                               _getLoad_OK 1BBA  
                     __size_of_setTxData 00BF                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                    ?_getMain_Lights_Count 0070  
                                _ADC_Set 1BB3                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 13F7                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1C3B  
                     _setRFSW_AdjControl 1435                                  _IOC_ISR 1CB4  
                                _IOC_Set 1C81                     __size_of_setLog_Code 0036  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 12A3  
              __size_of_getDimmer_LoadOK 0008                        _Flash_Memory_Read 07E5  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 006A  
                 __size_of_CC2500_TxData 0061              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 1B6A                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1C25  
        __end_of_setControl_Lights_Table 0973                          setRF_Main@error 00EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 0A35                  ??_setLoad_AH_AL_Restore 0020  
                       ?_getPercentValue 0070             __end_of_CC2500_FrequencyCabr 1C5D  
                        __size_of_IO_Set 0018                        __end_of_getBuz_GO 1D34  
                    ??_Flash_Memory_Main 0029                      ??_Flash_Memory_Read 0020  
                 __end_of_getDelayOff_GO 1CF2           __end_of_getDimmerLights_Status 1CE2  
                      __end_of_getRxData 0DF0                  __end_of_getSw_KeyStatus 1D56  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C04  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1EB5  
                   ??_setRFSW_AdjControl 0067                           ??_setTemp_Main 002D  
                        __size_of___bmul 0012                                  ___awdiv 15E8  
                                ___ftadd 0475                                  ___ftdiv 0DF0  
                                ___ftneg 1BCA                                  ___ftmul 0F4C  
                                ___fttol 0C50                      __end_of_Switch_Main 1F14  
                                ___lwdiv 130F                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1D34                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0036  
                   setRFSW_AdjControl@sw 006A                          __size_of_setBuz 0059  
                                __ptext1 137E                                  __ptext2 1066  
                                __ptext3 13F7                                  __ptext4 0BCF  
                                __ptext5 1F14                                  __ptext6 1D7A  
                                __ptext7 0002                                  __ptext8 1B70  
                                __ptext9 0E99                  ??_setDimmerLights_AdjRF 0062  
              __size_of_CC2500_SIDLEMode 0004                    _DimmerIntrPointSelect 1BE5  
                           __size_of_ISR 000F               ??_getMain_All_Error_Status 0020  
              __end_of_Flash_Memory_Main 12D9                __end_of_Flash_Memory_Read 07FF  
                ??_setDimmerLights_SwOff 002F                               _setRF_Main 056B  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1B87  
                      _DimmerLights_Main 1170           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1BA7               __end_of_CC2500_ClearRXFIFO 1B7B  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1B7F  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006E  
                         _LedPointSelect 1C1A                      _DelayOffPointSelect 1C04  
                         _getMain_LoadOK 1CA6                                  clrloop0 1BAE  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1BE5  
                   end_of_initialization 003F                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 10C2                            _DelayTime_1us 1075  
                      __end_of_setTxData 07E5               __end_of_Flash_Memory_Write 1170  
                                init_ram 1BA7                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1BA8                               _setSw_Main 01C0  
                  CC2500_ReadByte@loop_b 0021                   setDimmerLights_SwOn@sw 002F  
                      _CC2500_ReadStatus 1F97                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1D12                          ?_getDelayOff_GO 0070  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0B65  
                          _CC2500_TxData 09D4                      ??_CC2500_InitSetREG 0025  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 154B  
                            ?_getLoad_AD 0070                              ?_getLoad_OK 0070  
                 ??_getMain_Lights_Count 0020                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1BD3                      ??_CC2500_ReadStatus 0022  
                 ??_getMain_LightsStatus 0024                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 0015  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 11A0                       _Mcu_Initialization 1D68  
               __size_of_CC2500_PowerRST 0043                     __end_of_my_MainTimer 13BA  
                         ?_DelayOff_Main 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1C25                  __end_of_setPercentValue 0A9A  
                 __end_of_getMain_LoadOK 1CB4                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 10EC                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 005C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 0AFF  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1FB9  
                          ?_RF_RxDisable 0070              ??_getAll_DimmerLights_AdjGO 0020  
        getMain_All_Error_Status@command 0025                              ___ftdiv@exp 003C  
                       ??_Exception_Main 0027                           __end_of_IO_Set 1E48  
                   _setRF_Initialization 1C30                       _setMemory_LoopSave 1D9F  
                            _Switch_Main 1EF4                        __size_of_LED_Main 0004  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C0F  
                __end_of_getRF_KeyStatus 1D45                        _setMain_Exception 17A4  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1DEF                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1D68  
               setMain_Exception@command 003C                     setRF_DimmerLights@on 0020  
        _setDimmerLights_AdjControl$2119 0027                 _DimmerIntrIOCPointSelect 1BF9  
                      getSw_KeyStatus@sw 0070                        __size_of_TMR1_ISR 0024  
          __size_of_getDimmerLights_Line 000B                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0059  
                         __end_of_setLED 12A3            __size_of_setDimmerLights_Line 000C  
          __size_of_setDimmerLights_SwOn 003D                           __end_of_setBuz 16ED  
                    ??_setMain_Exception 0036                     _CC2500_FrequencyCabr 1C51  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 1599  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 11A0  
                        ?_LedPointSelect 0070                                _Load_Main 0043  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1BC2                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1ED4  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0F4C                           ??_RF_RxDisable 0024  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1B97  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 01E2                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0064                      __size_of_getTemp_AD 003E  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 1800  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1B70  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D1                  setRF_DimmerValue@lights 0066  
                    Exception_Main@error 0028                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 000B  
                              _Tx_Length 00D3                              __pdataBANK4 0220  
              _getAll_DimmerLights_AdjGO 1BEF                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0039                        ??_CC2500_ReadByte 0020  
       __end_of_getMain_All_Error_Status 1205                         _CC2500_SIDLEMode 1B7F  
             __size_of_DimmerLights_Main 0030                __end_of_setRF_DimmerValue 11D2  
                     setMemory_Data@data 0020                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1D8C  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E9                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01C5  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020           __size_of_setLoad_AH_AL_Restore 001C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1E97  
               setRFSW_AdjControl@status 0069                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                           getRxData@error 006C  
            __size_of_LED_Initialization 0004                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00DF  
                         Load_Main@adjgo 002C                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                           Load_Main@error 002E  
                 _setTemp_Initialization 07FF                                _getBuz_GO 1D23  
    __end_of_Flash_Memory_Initialization 0726              _Flash_Memory_Initialization 064A  
                               ?___awdiv 0020                                __ptext100 1ED4  
                              __ptext101 1E97                                __ptext110 1B83  
                              __ptext102 0859                                __ptext111 1BA1  
                              __ptext103 10EC                                __ptext120 1075  
                              __ptext112 1C04                                __ptext104 1D56  
                              __ptext121 1B7B                                __ptext113 1DEF  
                              __ptext105 1CE2                                __ptext130 1FDC  
                              __ptext122 1B77                                __ptext114 1B7F  
                              __ptext106 1CD2                                __ptext131 032F  
                              __ptext123 1E48                                __ptext115 1475  
                              __ptext107 1C0F                                __ptext132 1BE5  
                              __ptext124 1B97                                __ptext116 10C2  
                              __ptext108 1694                                __ptext133 1CB4  
                              __ptext125 1DDA                                __ptext117 1EB5  
                              __ptext109 15E8                                 ?___ftadd 0041  
                              __ptext134 1B73                                __ptext126 1DB2  
                              __ptext118 1F54                                __ptext135 1346  
                              __ptext127 1501                                __ptext119 1C51  
                              __ptext136 1BF9                                __ptext128 1B64  
                              _getRxData 0D60                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 003C  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 15E8  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1B67  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0020  
                     __end_of_TouchPower 1E19                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 1FDC                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2095 0069                                _r_address 00D4  
         __size_of_setDimmerLights_SwOff 0049           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 1501             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1075                           __size_of_getAD 0020  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1C46                      __end_of_setLED_Main 1238  
                       ??_getDelayOff_GO 0022                      _DimmerLightsIntrIOC 00CF  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1B70  
           setDimmerLights_SwOff@command 002F                        _CC2500_rfSettings 102F  
                               _LED_Main 1B8F                          SwPointSelect@sw 0021  
                              clear_ram0 1BAD                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 005C                             _my_MainTimer 137E  
                              _setTxData 0726      __end_of_DimmerLights_Initialization 1CA6  
            _DimmerLights_Initialization 1C99                       _CC2500_ClearRXFIFO 1B77  
                     _CC2500_ClearTXFIFO 1B7B           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1DDA                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 0065  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1141                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 1FDC  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1C8D  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00C9  
                   __end_of_RF_RxDisable 1CD2                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1E61                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1D7A                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0021                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0032                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 00E9                    __size_of_setTemp_Main 00B3  
                __size_of_setDelayOff_GO 005D             ??_setDimmerLights_AdjControl 0025  
                               _DelayOff 0078                             setSw_Main@sw 0033  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0029  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0026                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1C81                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 130F                    _DlyOff_Initialization 1BA1  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1B93                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0032                  setMain_Exception@status 003B  
                     __end_of_getLoad_AD 0C50                       __end_of_getLoad_OK 1BC2  
                  _Switch_Initialization 1BDC        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1435                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1DB2                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00D2  
                            ??_Temp_Main 0030                        setRFSW_Control@sw 0033  
          _getMain_All_Error_Status$3332 0021            _getMain_All_Error_Status$3333 0023  
               __end_of_getDimmer_LoadOK 1BCA                      _Load_Initialization 1B9C  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0E99  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 1F75  
                       ??_LedPointSelect 0020                                 ___ftpack 0973  
          __size_of_getMain_Lights_Count 0010                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002B                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1205               __end_of_setRF_DimmerLights 17A4  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
                        ___lwdiv@divisor 0020       __size_of_getAll_DimmerLights_AdjGO 000A  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 1B6D                                 __ptext11 07FF  
                               __ptext20 1BDC                                 __ptext12 1EF4  
                               __ptext21 1D02                                 __ptext13 01C0  
                               __ptext30 13BA                                 __ptext22 1E04  
                               __ptext14 1DC6                                 __ptext31 1435  
                               __ptext23 1B6A                                 __ptext15 1238  
                               __ptext40 09D4                                 __ptext32 11A0  
                               __ptext24 056B                                 __ptext16 1D45  
                               __ptext41 0B65                                 __ptext33 1FB9  
                               __ptext25 0D60                                 __ptext17 1C46  
                               __ptext50 1C81                                 __ptext42 1F97  
                               __ptext34 0A9A                                 __ptext26 12D9  
                               __ptext18 17A4                                 __ptext51 1B93  
                               __ptext43 1E19                                 __ptext35 0F4C  
                               __ptext27 1D9F                                 __ptext19 1C3B  
                               __ptext60 1E7B                                 __ptext52 1BB3  
                               __ptext44 1B67                                 __ptext36 1D8C  
                               __ptext28 0913                                 __ptext61 1B8F  
                               __ptext53 0043                                 __ptext45 1C30  
                               __ptext37 1D34                                 __ptext29 1599  
                               __ptext70 1141                                 __ptext62 1205  
                               __ptext54 1CA6                                 __ptext46 1D68  
                               __ptext38 1D23                                 __ptext71 1BD3  
                               __ptext63 1B8B                                 __ptext55 1BC2  
                               __ptext47 1C25                                 __ptext39 1CC3  
                               __ptext80 0A35                                 __ptext72 07E5  
                               __ptext64 1D12                                 __ptext56 1CF2  
                               __ptext48 1C8D                                 __ptext81 0C50  
                               __ptext73 1E61                                 __ptext65 12A3  
                               __ptext57 1BEF                                 __ptext49 1E30  
                               __ptext90 11D2                                 __ptext82 1BCA  
                               __ptext74 1170                                 __ptext66 154B  
                               __ptext58 130F                                 __ptext91 1116  
                               __ptext83 0DF0                                 __ptext75 0800  
                               __ptext67 1C75                                 __ptext59 1B9C  
                               __ptext92 1BBA                                 __ptext84 0475  
                               __ptext76 0AFF                                 __ptext68 064A  
                               __ptext93 1C99                                 __ptext85 1F75  
                               __ptext77 0CD7                                 __ptext69 1C69  
                               __ptext94 109B                                 __ptext86 0973  
                               __ptext78 0726                                 __ptext95 1B63  
                               __ptext87 126D                                 __ptext79 1748  
                               __ptext96 1B87                                 __ptext88 1C1A  
                               __ptext97 08B6                                 __ptext89 1C5D  
                               __ptext98 163C                                 __ptext99 14B8  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1C46  
          __end_of_Dimmer_Initialization 1B64             __end_of_setDimmerLights_Main 0859  
           __end_of_setDimmerLights_Line 1C69                         Switch_Main@error 003E  
           __end_of_setDimmerLights_SwOn 13F7                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0031                            setLED@command 0022  
                          __size_of_main 005B                              _setRF_Learn 1DC6  
               __end_of_CC2500_SIDLEMode 1B83               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1C0F               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00EA                __size_of_setDimmerReClock 0004  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1E19  
                     _CC2500_InitPATable 1EB5                 __end_of_setMemory_Modify 1D9F  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 064A  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00EC  
                               main@argv 00EE                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$5851 0022                          _CC2500_PowerRST 1475  
               __size_of_getSw_KeyStatus 0011              __end_of_Flash_Memory_Modify 1599  
                      ??_getPercentValue 005C                              _setLog_Code 12D9  
            __end_of_Flash_Memory_Unlock 1BDC                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1F54                       __end_of_setSw_Main 032F  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E9  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 10EC  
                            pic14e$flags 007E             ??_setDimmerLights_IntrIOC_GO 0072  
             setDimmerLights_Line@lights 0020             ??_setDimmerLights_ErrorClose 0031  
                setDimmerLights_SwOff@sw 0030        __end_of_getAll_DimmerLights_AdjGO 1BF9  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 10C2  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 109B  
            __end_of_setDimmerLights_Adj 0B65                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1B67  
   __size_of_setDimmerLights_IntrControl 0146                              getLoad_AD@i 0029  
                            getLoad_AD@j 0028                              getLoad_AD@k 0027  
                   _Flash_Memory_Erasing 1C75                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007B                  __size_of_Exception_Main 001A  
        __end_of_DelayOff_Initialization 1B87      __size_of_setDimmerLights_IntrIOC_GO 0038  
    __size_of_setDimmerLights_ErrorClose 0058                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1B8B       __end_of_setDimmerLights_AdjControl 126D  
             _setDimmerLights_AdjControl 1238                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0859  
       __size_of_setControl_Lights_Table 0060                   __end_of_DelayTimejudge 1116  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 109B                  __end_of_CC2500_ReadByte 1E30  
           __end_of_setSw_Initialization 1D12                          _Timeout_Counter 1DDA  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
                           _RF_RxDisable 1CC3               __end_of_LED_Initialization 1B8F  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 0800  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1B6A  
                  __end_of_CC2500_RxData 0BCF                    __end_of_CC2500_TxData 0A35  
                  _setLoad_AH_AL_Restore 1E7B                  __end_of_CC2500_PowerRST 14B8  
         getAll_DimmerLights_AdjGO@adjgo 0020  
